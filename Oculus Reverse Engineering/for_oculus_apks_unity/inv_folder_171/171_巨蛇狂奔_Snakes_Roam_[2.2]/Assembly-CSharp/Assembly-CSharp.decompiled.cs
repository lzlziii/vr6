using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Security;
using System.Net.Sockets;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using BNG;
using BestHTTP;
using BestHTTP.Authentication;
using BestHTTP.Cookies;
using BestHTTP.Decompression.Crc;
using BestHTTP.Decompression.Zlib;
using BestHTTP.Extensions;
using BestHTTP.Forms;
using BestHTTP.Logger;
using BestHTTP.PlatformSupport.TcpClient.General;
using BestHTTP.ServerSentEvents;
using BestHTTP.SignalR.Authentication;
using BestHTTP.SignalR.Hubs;
using BestHTTP.SignalR.JsonEncoders;
using BestHTTP.SignalR.Messages;
using BestHTTP.SignalR.Transports;
using BestHTTP.SocketIO.Events;
using BestHTTP.SocketIO.JsonEncoders;
using BestHTTP.SocketIO.Transports;
using BestHTTP.Statistics;
using BestHTTP.WebSocket;
using BestHTTP.WebSocket.Extensions;
using BestHTTP.WebSocket.Frames;
using DG.Tweening;
using Il2CppDummyDll;
using Oculus.Platform;
using Oculus.Platform.Models;
using Oculus.Spatializer.Propagation;
using Org.BouncyCastle.Asn1;
using Org.BouncyCastle.Asn1.Ocsp;
using Org.BouncyCastle.Asn1.Utilities;
using Org.BouncyCastle.Asn1.X509;
using Org.BouncyCastle.Asn1.X9;
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Crypto.Engines;
using Org.BouncyCastle.Crypto.Macs;
using Org.BouncyCastle.Crypto.Modes;
using Org.BouncyCastle.Crypto.Modes.Gcm;
using Org.BouncyCastle.Crypto.Paddings;
using Org.BouncyCastle.Crypto.Parameters;
using Org.BouncyCastle.Crypto.Prng;
using Org.BouncyCastle.Crypto.Tls;
using Org.BouncyCastle.Math;
using Org.BouncyCastle.Math.EC;
using Org.BouncyCastle.Math.EC.Abc;
using Org.BouncyCastle.Math.EC.Endo;
using Org.BouncyCastle.Math.EC.Multiplier;
using Org.BouncyCastle.Math.Field;
using Org.BouncyCastle.Security;
using Org.BouncyCastle.Utilities;
using Org.BouncyCastle.Utilities.Collections;
using Org.BouncyCastle.Utilities.Date;
using Org.BouncyCastle.Utilities.IO;
using Org.BouncyCastle.Utilities.Zlib;
using PlatformSupport.Collections.ObjectModel;
using PlatformSupport.Collections.Specialized;
using Port;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Audio;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.InputSystem;
using UnityEngine.Networking;
using UnityEngine.Rendering;
using UnityEngine.SceneManagement;
using UnityEngine.UI;
using UnityEngine.Video;
using UnityEngine.XR;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x81EBF0", Offset = "0x81EBF0")]
internal sealed class <>f__AnonymousType0<<msg>j__TPar>
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x821190", Offset = "0x821190")]
	private readonly <msg>j__TPar <msg>i__Field;

	[Token(Token = "0x17000001")]
	public <msg>j__TPar msg
	{
		[Token(Token = "0x6000001")]
		get
		{
			return (<msg>j__TPar)null;
		}
	}

	[Token(Token = "0x6000002")]
	[DebuggerHidden]
	public <>f__AnonymousType0(<msg>j__TPar msg)
	{
	}

	[Token(Token = "0x6000003")]
	[DebuggerHidden]
	public override bool Equals(object value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000004")]
	[DebuggerHidden]
	public override int GetHashCode()
	{
		return default(int);
	}

	[Token(Token = "0x6000005")]
	[DebuggerHidden]
	public override string ToString()
	{
		return null;
	}
}
[Token(Token = "0x2000003")]
public class FixNonUniformScale : MonoBehaviour
{
	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool running;

	[Token(Token = "0x6000006")]
	[Address(RVA = "0xA56EC4", Offset = "0xA56EC4", VA = "0xA56EC4")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000007")]
	[Address(RVA = "0xA56F50", Offset = "0xA56F50", VA = "0xA56F50")]
	public void MakeUniform()
	{
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0xA57364", Offset = "0xA57364", VA = "0xA57364")]
	public FixNonUniformScale()
	{
	}
}
[Token(Token = "0x2000004")]
public class RealBullet : MonoBehaviour
{
	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8211A4", Offset = "0x8211A4")]
	public float Speed;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8211DC", Offset = "0x8211DC")]
	public GameObject HitFXPrefab;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x821214", Offset = "0x821214")]
	public float BulletImpactForce;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82124C", Offset = "0x82124C")]
	public float Damage;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x821284", Offset = "0x821284")]
	public FloatEvent onDealtDamageEvent;

	[Token(Token = "0x6000009")]
	[Address(RVA = "0xA70984", Offset = "0xA70984", VA = "0xA70984", Slot = "4")]
	public virtual void ApplyParticleFX(Vector3 position, Quaternion rotation, Collider attachTo)
	{
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0xA70AE4", Offset = "0xA70AE4", VA = "0xA70AE4", Slot = "5")]
	public virtual void OnRaycastHit(RaycastHit hit)
	{
	}

	[Token(Token = "0x600000B")]
	[Address(RVA = "0xA70E48", Offset = "0xA70E48", VA = "0xA70E48")]
	public RealBullet()
	{
	}
}
[Token(Token = "0x2000005")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x81EC00", Offset = "0x81EC00")]
public class FPSWalkerEnhanced : MonoBehaviour
{
	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float walkSpeed;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float runSpeed;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool limitDiagonalSpeed;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool toggleRun;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float jumpSpeed;

	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float gravity;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float fallingDamageThreshold;

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool slideWhenOverSlopeLimit;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool slideOnTaggedObjects;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float slideSpeed;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool airControl;

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float antiBumpFactor;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int antiBunnyHopFactor;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 moveDirection;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool grounded;

	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private CharacterController controller;

	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Transform myTransform;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float speed;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private RaycastHit hit;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float fallStartLevel;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private bool falling;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float slideLimit;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private float rayDistance;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Vector3 contactPoint;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private bool playerControl;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private int jumpTimer;

	[Token(Token = "0x600000C")]
	[Address(RVA = "0xA563F8", Offset = "0xA563F8", VA = "0xA563F8")]
	private void Start()
	{
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0xA564D4", Offset = "0xA564D4", VA = "0xA564D4")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600000E")]
	[Address(RVA = "0xA56AF0", Offset = "0xA56AF0", VA = "0xA56AF0")]
	private void Update()
	{
	}

	[Token(Token = "0x600000F")]
	[Address(RVA = "0xA56B70", Offset = "0xA56B70", VA = "0xA56B70")]
	private void OnControllerColliderHit(ControllerColliderHit hit)
	{
	}

	[Token(Token = "0x6000010")]
	[Address(RVA = "0xA56A58", Offset = "0xA56A58", VA = "0xA56A58")]
	private void FallingDamageAlert(float fallDistance)
	{
	}

	[Token(Token = "0x6000011")]
	[Address(RVA = "0xA56BA8", Offset = "0xA56BA8", VA = "0xA56BA8")]
	public FPSWalkerEnhanced()
	{
	}
}
[Token(Token = "0x2000006")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x81EC64", Offset = "0x81EC64")]
public class SmoothMouseLook : MonoBehaviour
{
	[Token(Token = "0x20005D7")]
	public enum RotationAxes
	{
		[Token(Token = "0x400233E")]
		MouseXAndY,
		[Token(Token = "0x400233F")]
		MouseX,
		[Token(Token = "0x4002340")]
		MouseY
	}

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RotationAxes axes;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float sensitivityX;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float sensitivityY;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float minimumX;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float maximumX;

	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float minimumY;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float maximumY;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float rotationX;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float rotationY;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<float> rotArrayX;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float rotAverageX;

	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<float> rotArrayY;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float rotAverageY;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float frameCounter;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Quaternion originalRotation;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Quaternion parentOriginalRotation;

	[Token(Token = "0x6000012")]
	[Address(RVA = "0xA74374", Offset = "0xA74374", VA = "0xA74374")]
	private void Update()
	{
	}

	[Token(Token = "0x6000013")]
	[Address(RVA = "0xA74B24", Offset = "0xA74B24", VA = "0xA74B24")]
	private void Start()
	{
	}

	[Token(Token = "0x6000014")]
	[Address(RVA = "0xA74A54", Offset = "0xA74A54", VA = "0xA74A54")]
	public static float ClampAngle(float angle, float min, float max)
	{
		return default(float);
	}

	[Token(Token = "0x6000015")]
	[Address(RVA = "0xA74C14", Offset = "0xA74C14", VA = "0xA74C14")]
	public SmoothMouseLook()
	{
	}
}
[Token(Token = "0x2000007")]
public class SkyboxChanger : MonoBehaviour
{
	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material[] Skyboxes;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dropdown _dropdown;

	[Token(Token = "0x6000016")]
	[Address(RVA = "0xA741C8", Offset = "0xA741C8", VA = "0xA741C8")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000017")]
	[Address(RVA = "0xA74220", Offset = "0xA74220", VA = "0xA74220")]
	public void ChangeSkybox()
	{
	}

	[Token(Token = "0x6000018")]
	[Address(RVA = "0xA742C0", Offset = "0xA742C0", VA = "0xA742C0")]
	public SkyboxChanger()
	{
	}
}
[Token(Token = "0x2000008")]
public class SkyboxRotator : MonoBehaviour
{
	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float RotationPerSecond;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool _rotate;

	[Token(Token = "0x6000019")]
	[Address(RVA = "0xA742C8", Offset = "0xA742C8", VA = "0xA742C8")]
	protected void Update()
	{
	}

	[Token(Token = "0x600001A")]
	[Address(RVA = "0xA74354", Offset = "0xA74354", VA = "0xA74354")]
	public void ToggleSkyboxRotation()
	{
	}

	[Token(Token = "0x600001B")]
	[Address(RVA = "0xA74364", Offset = "0xA74364", VA = "0xA74364")]
	public SkyboxRotator()
	{
	}
}
[Token(Token = "0x2000009")]
public enum BlockType
{
	[Token(Token = "0x4000037")]
	nomal,
	[Token(Token = "0x4000038")]
	star,
	[Token(Token = "0x4000039")]
	color,
	[Token(Token = "0x400003A")]
	magnet,
	[Token(Token = "0x400003B")]
	shoot
}
[Token(Token = "0x200000A")]
public class Block : MonoBehaviour
{
	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject _collider;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject _destroype;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject _3dtext;

	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<Color> _maincolors;

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int _colorIndex;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int _num;

	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public BlockType blockType;

	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<Color> _colors;

	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Renderer rd;

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private MaterialPropertyBlock prop;

	[Token(Token = "0x600001C")]
	[Address(RVA = "0xA4CFDC", Offset = "0xA4CFDC", VA = "0xA4CFDC")]
	private void DeployCorlor(int num)
	{
	}

	[Token(Token = "0x600001D")]
	[Address(RVA = "0xA4D268", Offset = "0xA4D268", VA = "0xA4D268")]
	public void Init(int n, List<Color> colors)
	{
	}

	[Token(Token = "0x600001E")]
	[Address(RVA = "0xA4D4D8", Offset = "0xA4D4D8", VA = "0xA4D4D8")]
	public void ChangetoCaihong()
	{
	}

	[Token(Token = "0x600001F")]
	[Address(RVA = "0xA4D610", Offset = "0xA4D610", VA = "0xA4D610")]
	private void CreateNew3DText(int n)
	{
	}

	[Token(Token = "0x6000020")]
	[Address(RVA = "0xA4D8A8", Offset = "0xA4D8A8", VA = "0xA4D8A8")]
	private void CreateNewBig3DText(int n)
	{
	}

	[Token(Token = "0x6000021")]
	[Address(RVA = "0xA4DBA8", Offset = "0xA4DBA8", VA = "0xA4DBA8")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000022")]
	[Address(RVA = "0xA4E5BC", Offset = "0xA4E5BC", VA = "0xA4E5BC")]
	public Block()
	{
	}
}
[Token(Token = "0x200000B")]
public class BlockManager : MonoBehaviour, IScript
{
	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform _camera;

	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform _prefabs_body;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform _prefab_zhangai;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<Color> _colors;

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform _prefab_block;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<Transform> _prefabs_traps;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<Transform> _blocks;

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform _prefab_saw;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static BlockManager _instance;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int _checkpoint;

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float _trapZ;

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int ff;

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public List<GameObject> _destroyObjs;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public List<Transform> _bodies;

	[Token(Token = "0x6000023")]
	[Address(RVA = "0xA4E5C4", Offset = "0xA4E5C4", VA = "0xA4E5C4")]
	public void CreateBlcoks()
	{
	}

	[Token(Token = "0x6000024")]
	[Address(RVA = "0xA4F3E8", Offset = "0xA4F3E8", VA = "0xA4F3E8")]
	private void DestroyBlock()
	{
	}

	[Token(Token = "0x6000025")]
	[Address(RVA = "0xA4F5B4", Offset = "0xA4F5B4", VA = "0xA4F5B4")]
	private void Dnull()
	{
	}

	[Token(Token = "0x6000026")]
	[Address(RVA = "0xA4F620", Offset = "0xA4F620", VA = "0xA4F620", Slot = "4")]
	public void GlobalSubscription()
	{
	}

	[Token(Token = "0x6000027")]
	[Address(RVA = "0xA4F7A0", Offset = "0xA4F7A0", VA = "0xA4F7A0", Slot = "5")]
	public void Initialize()
	{
	}

	[Token(Token = "0x6000028")]
	[Address(RVA = "0xA4F84C", Offset = "0xA4F84C", VA = "0xA4F84C", Slot = "6")]
	public void GameBegin()
	{
	}

	[Token(Token = "0x6000029")]
	[Address(RVA = "0xA4F850", Offset = "0xA4F850", VA = "0xA4F850", Slot = "7")]
	public void GamePause()
	{
	}

	[Token(Token = "0x600002A")]
	[Address(RVA = "0xA4F854", Offset = "0xA4F854", VA = "0xA4F854", Slot = "8")]
	public void GameOver()
	{
	}

	[Token(Token = "0x600002B")]
	[Address(RVA = "0xA4F858", Offset = "0xA4F858", VA = "0xA4F858")]
	public BlockManager()
	{
	}
}
[Token(Token = "0x200000C")]
public class Body : MonoBehaviour
{
	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject _destroype;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int _num;

	[Token(Token = "0x600002C")]
	[Address(RVA = "0xA4F2FC", Offset = "0xA4F2FC", VA = "0xA4F2FC")]
	public void Init(int n)
	{
	}

	[Token(Token = "0x600002D")]
	[Address(RVA = "0xA4F8F0", Offset = "0xA4F8F0", VA = "0xA4F8F0")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600002E")]
	[Address(RVA = "0xA4FAE4", Offset = "0xA4FAE4", VA = "0xA4FAE4")]
	public Body()
	{
	}
}
[Token(Token = "0x200000D")]
public class Bullet : MonoBehaviour
{
	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speed;

	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform effect;

	[Token(Token = "0x600002F")]
	[Address(RVA = "0xA4FAF4", Offset = "0xA4FAF4", VA = "0xA4FAF4")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000030")]
	[Address(RVA = "0xA4E4C8", Offset = "0xA4E4C8", VA = "0xA4E4C8")]
	public void Explore()
	{
	}

	[Token(Token = "0x6000031")]
	[Address(RVA = "0xA4FB4C", Offset = "0xA4FB4C", VA = "0xA4FB4C")]
	public Bullet()
	{
	}
}
[Token(Token = "0x200000E")]
public class CameraControl : MonoBehaviour
{
	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float _startZ;

	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform _snake_head;

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float _offsetz;

	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool _Update;

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float z;

	[Token(Token = "0x6000032")]
	[Address(RVA = "0xA4FCB8", Offset = "0xA4FCB8", VA = "0xA4FCB8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000033")]
	[Address(RVA = "0xA4FCF0", Offset = "0xA4FCF0", VA = "0xA4FCF0")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000034")]
	[Address(RVA = "0xA4FE58", Offset = "0xA4FE58", VA = "0xA4FE58")]
	private void Update()
	{
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0xA4FFC0", Offset = "0xA4FFC0", VA = "0xA4FFC0")]
	public void UpdateSnakeHead(Transform newhead)
	{
	}

	[Token(Token = "0x6000036")]
	[Address(RVA = "0xA4FFC8", Offset = "0xA4FFC8", VA = "0xA4FFC8")]
	public CameraControl()
	{
	}
}
[Token(Token = "0x200000F")]
public class Connect
{
	[Serializable]
	[Token(Token = "0x20005D8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8209D8", Offset = "0x8209D8")]
	private sealed class <>c
	{
		[Token(Token = "0x4002341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4002342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static OnRequestFinishedDelegate <>9__5_0;

		[Token(Token = "0x60032C8")]
		[Address(RVA = "0xA51DA8", Offset = "0xA51DA8", VA = "0xA51DA8")]
		public <>c()
		{
		}

		[Token(Token = "0x60032C9")]
		[Address(RVA = "0xA51DB0", Offset = "0xA51DB0", VA = "0xA51DB0")]
		internal void <Send>b__5_0(HTTPRequest originalRequest, HTTPResponse response)
		{
		}
	}

	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string url;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static string oculus_url;

	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static string local_url;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static string root_url;

	[Token(Token = "0x6000037")]
	[Address(RVA = "0xA51880", Offset = "0xA51880", VA = "0xA51880")]
	public static bool IsInNetWork()
	{
		return default(bool);
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0xA518BC", Offset = "0xA518BC", VA = "0xA518BC")]
	public static void Send(string title, string json, int id)
	{
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0xA51CB8", Offset = "0xA51CB8", VA = "0xA51CB8")]
	public Connect()
	{
	}
}
[Token(Token = "0x2000010")]
public class ControlRay : MonoBehaviour
{
	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector2Event onRayChange;

	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform rayOrigin;

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform rayObj;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform sphere;

	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool state;

	[Token(Token = "0x600003B")]
	[Address(RVA = "0xA51DCC", Offset = "0xA51DCC", VA = "0xA51DCC")]
	public void OpenRay()
	{
	}

	[Token(Token = "0x600003C")]
	[Address(RVA = "0xA51E08", Offset = "0xA51E08", VA = "0xA51E08")]
	public void CloseRay()
	{
	}

	[Token(Token = "0x600003D")]
	[Address(RVA = "0xA51E40", Offset = "0xA51E40", VA = "0xA51E40")]
	private void Update()
	{
	}

	[Token(Token = "0x600003E")]
	[Address(RVA = "0xA52060", Offset = "0xA52060", VA = "0xA52060")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600003F")]
	[Address(RVA = "0xA52064", Offset = "0xA52064", VA = "0xA52064")]
	public ControlRay()
	{
	}
}
[Token(Token = "0x2000011")]
public class DataManagger
{
	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private string url;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private UserData userData;

	[Token(Token = "0x17000002")]
	public UserData UserData
	{
		[Token(Token = "0x6000040")]
		[Address(RVA = "0xA5206C", Offset = "0xA5206C", VA = "0xA5206C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000041")]
		[Address(RVA = "0xA52074", Offset = "0xA52074", VA = "0xA52074")]
		set
		{
		}
	}

	[Token(Token = "0x6000042")]
	[Address(RVA = "0xA5207C", Offset = "0xA5207C", VA = "0xA5207C")]
	public DataManagger(bool isLocal)
	{
	}

	[Token(Token = "0x6000043")]
	[Address(RVA = "0xA5216C", Offset = "0xA5216C", VA = "0xA5216C")]
	public void InitDataInThisApp()
	{
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0xA522E4", Offset = "0xA522E4", VA = "0xA522E4")]
	public void Save()
	{
	}

	[Token(Token = "0x6000045")]
	[Address(RVA = "0xA525A8", Offset = "0xA525A8", VA = "0xA525A8")]
	public void RefreshScore(string gameType, int score)
	{
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0xA52750", Offset = "0xA52750", VA = "0xA52750")]
	private void leaderboardWriteCallback(Oculus.Platform.Message msg)
	{
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0xA52A1C", Offset = "0xA52A1C", VA = "0xA52A1C")]
	public int GetLevel()
	{
		return default(int);
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0xA52A38", Offset = "0xA52A38", VA = "0xA52A38")]
	public int GetSubLevel()
	{
		return default(int);
	}

	[Token(Token = "0x6000049")]
	[Address(RVA = "0xA4E46C", Offset = "0xA4E46C", VA = "0xA4E46C")]
	public bool AddCurrentLevel(int n)
	{
		return default(bool);
	}

	[Token(Token = "0x600004A")]
	[Address(RVA = "0xA52A54", Offset = "0xA52A54", VA = "0xA52A54")]
	public float GetbestScore(string gameType)
	{
		return default(float);
	}

	[Token(Token = "0x600004B")]
	[Address(RVA = "0xA52B00", Offset = "0xA52B00", VA = "0xA52B00")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82DD94", Offset = "0x82DD94")]
	private void <Save>b__7_0(HTTPRequest originalRequest, HTTPResponse response)
	{
	}
}
[Token(Token = "0x2000012")]
public class DataTest : MonoBehaviour
{
	[Token(Token = "0x600004C")]
	[Address(RVA = "0xA52BD4", Offset = "0xA52BD4", VA = "0xA52BD4")]
	public void LocalTest()
	{
	}

	[Token(Token = "0x600004D")]
	[Address(RVA = "0xA52C38", Offset = "0xA52C38", VA = "0xA52C38")]
	public void Test()
	{
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0xA52C9C", Offset = "0xA52C9C", VA = "0xA52C9C")]
	public DataTest()
	{
	}
}
[Token(Token = "0x2000013")]
public class DestoryTag : MonoBehaviour
{
	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float t;

	[Token(Token = "0x600004F")]
	[Address(RVA = "0xA56354", Offset = "0xA56354", VA = "0xA56354")]
	private void Start()
	{
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0xA563E0", Offset = "0xA563E0", VA = "0xA563E0")]
	public DestoryTag()
	{
	}
}
[Token(Token = "0x2000014")]
public class FireTrap : MonoBehaviour
{
	[Token(Token = "0x6000051")]
	[Address(RVA = "0xA56C5C", Offset = "0xA56C5C", VA = "0xA56C5C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0xA56C60", Offset = "0xA56C60", VA = "0xA56C60")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0xA56D6C", Offset = "0xA56D6C", VA = "0xA56D6C")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000054")]
	[Address(RVA = "0xA56EBC", Offset = "0xA56EBC", VA = "0xA56EBC")]
	public FireTrap()
	{
	}
}
[Token(Token = "0x2000015")]
public class FloorManager : MonoBehaviour
{
	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Transform> _block;

	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<Transform> _sideleft;

	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<Transform> _sideright;

	[Token(Token = "0x6000055")]
	[Address(RVA = "0xA5736C", Offset = "0xA5736C", VA = "0xA5736C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0xA57370", Offset = "0xA57370", VA = "0xA57370")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0xA57518", Offset = "0xA57518", VA = "0xA57518")]
	private void ForeAndAlternating(List<Transform> list, Vector3 addp)
	{
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0xA5766C", Offset = "0xA5766C", VA = "0xA5766C")]
	public FloorManager()
	{
	}
}
[Token(Token = "0x2000016")]
public class GameManager : GameManagerBase
{
	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public BlockManager _blockManager;

	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public SnakeMovement _snakemovement;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public UnityEvent vibrateEvent;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public DataManagger dataManagger;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public PlatformManager platform;

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public bool isLocal;

	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public UI _ui;

	[Token(Token = "0x6000059")]
	[Address(RVA = "0xA57674", Offset = "0xA57674", VA = "0xA57674")]
	private void Awake()
	{
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0xA4E5A0", Offset = "0xA4E5A0", VA = "0xA4E5A0")]
	public void BlockVibrate()
	{
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0xA57800", Offset = "0xA57800", VA = "0xA57800")]
	public GameManager()
	{
	}
}
[Token(Token = "0x2000017")]
public enum GameState
{
	[Token(Token = "0x4000074")]
	Index,
	[Token(Token = "0x4000075")]
	Begain,
	[Token(Token = "0x4000076")]
	Pause,
	[Token(Token = "0x4000077")]
	readyGameOver
}
[Token(Token = "0x2000018")]
public class GameManagerBase : MonoBehaviour
{
	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int _ID;

	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string _gameType;

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static GameManager _instance;

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityAction GameBeganActions;

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityAction GameOverActions;

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityAction GamePausesActions;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityAction GameContinueActions;

	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameState _gamestate;

	[Token(Token = "0x600005C")]
	[Address(RVA = "0xA57810", Offset = "0xA57810", VA = "0xA57810", Slot = "4")]
	public virtual void Initialize()
	{
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0xA579CC", Offset = "0xA579CC", VA = "0xA579CC")]
	private void Start()
	{
	}

	[Token(Token = "0x600005E")]
	[Address(RVA = "0xA57A40", Offset = "0xA57A40", VA = "0xA57A40", Slot = "5")]
	public virtual void GamePause()
	{
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0xA57A94", Offset = "0xA57A94", VA = "0xA57A94", Slot = "6")]
	public virtual void GameContinue()
	{
	}

	[Token(Token = "0x6000060")]
	[Address(RVA = "0xA57AEC", Offset = "0xA57AEC", VA = "0xA57AEC", Slot = "7")]
	public virtual void GameOver()
	{
	}

	[Token(Token = "0x6000061")]
	[Address(RVA = "0xA57B8C", Offset = "0xA57B8C", VA = "0xA57B8C", Slot = "8")]
	public virtual void GameBegan()
	{
	}

	[Token(Token = "0x6000062")]
	[Address(RVA = "0xA57C74", Offset = "0xA57C74", VA = "0xA57C74")]
	public void CleanLocalSave()
	{
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0xA57808", Offset = "0xA57808", VA = "0xA57808")]
	public GameManagerBase()
	{
	}
}
[Token(Token = "0x2000019")]
public class LeaderBoardView : MonoBehaviour
{
	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string gameType;

	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8212BC", Offset = "0x8212BC")]
	public UnityEngine.UI.Button btn_pistol;

	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8212F4", Offset = "0x8212F4")]
	public UnityEngine.UI.Button btn_joy;

	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82132C", Offset = "0x82132C")]
	public int limitNum;

	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform mContent;

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private RectTransform mContent_rectTransform;

	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject mItem;

	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool IsCreat_Item_one;

	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<GameObject> List_Item;

	[Token(Token = "0x4000089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3 LastItemPos;

	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private GameObject Pre_item;

	[Token(Token = "0x400008B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float item_height;

	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private Vector3 item_Distance;

	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Text textPistol;

	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Text textJoy;

	[Token(Token = "0x6000064")]
	[Address(RVA = "0xAAF300", Offset = "0xAAF300", VA = "0xAAF300")]
	private void Start()
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0xAAF55C", Offset = "0xAAF55C", VA = "0xAAF55C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000066")]
	[Address(RVA = "0xAAFAAC", Offset = "0xAAFAAC", VA = "0xAAFAAC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0xAAFB84", Offset = "0xAAFB84", VA = "0xAAFB84")]
	public void RefreshLeaderBoard()
	{
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0xAAFF04", Offset = "0xAAFF04", VA = "0xAAFF04")]
	private void leaderboardGetCallback(Message<LeaderboardEntryList> msg)
	{
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0xAAF6A0", Offset = "0xAAF6A0", VA = "0xAAF6A0")]
	private void SetItemData(int rank, string name, long score, string time)
	{
	}

	[Token(Token = "0x600006A")]
	[Address(RVA = "0xAAFD94", Offset = "0xAAFD94", VA = "0xAAFD94")]
	private void RankingList_UI()
	{
	}

	[Token(Token = "0x600006B")]
	[Address(RVA = "0xAAF3C4", Offset = "0xAAF3C4", VA = "0xAAF3C4")]
	private void PistolBtnClick()
	{
	}

	[Token(Token = "0x600006C")]
	[Address(RVA = "0xAB0970", Offset = "0xAB0970", VA = "0xAB0970")]
	private void JoyBtnClick()
	{
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0xAB0B08", Offset = "0xAB0B08", VA = "0xAB0B08")]
	public LeaderBoardView()
	{
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0xAB0B88", Offset = "0xAB0B88", VA = "0xAB0B88")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82DDA4", Offset = "0x82DDA4")]
	private void <Awake>b__17_0()
	{
	}

	[Token(Token = "0x600006F")]
	[Address(RVA = "0xAB0BE4", Offset = "0xAB0BE4", VA = "0xAB0BE4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82DDB4", Offset = "0x82DDB4")]
	private void <Awake>b__17_1()
	{
	}
}
[Token(Token = "0x200001A")]
public enum MusicType
{
	[Token(Token = "0x4000090")]
	hit,
	[Token(Token = "0x4000091")]
	explore,
	[Token(Token = "0x4000092")]
	dead,
	[Token(Token = "0x4000093")]
	getbody,
	[Token(Token = "0x4000094")]
	hitiron,
	[Token(Token = "0x4000095")]
	addspeed,
	[Token(Token = "0x4000096")]
	gaming
}
[Token(Token = "0x200001B")]
public class MusicControl : MonoBehaviour
{
	[Token(Token = "0x20005D9")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8209E8", Offset = "0x8209E8")]
	private sealed class <DoPauseMusic>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4002343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4002344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4002345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioSource audio;

		[Token(Token = "0x4002346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float t;

		[Token(Token = "0x4002347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <oldvolume>5__2;

		[Token(Token = "0x4002348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <i>5__3;

		[Token(Token = "0x170006AC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60032CD")]
			[Address(RVA = "0xAB9FD4", Offset = "0xAB9FD4", VA = "0xAB9FD4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006AD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60032CF")]
			[Address(RVA = "0xABA03C", Offset = "0xABA03C", VA = "0xABA03C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60032CA")]
		[Address(RVA = "0xAB99A4", Offset = "0xAB99A4", VA = "0xAB99A4")]
		[DebuggerHidden]
		public <DoPauseMusic>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x60032CB")]
		[Address(RVA = "0xAB9E44", Offset = "0xAB9E44", VA = "0xAB9E44", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60032CC")]
		[Address(RVA = "0xAB9E48", Offset = "0xAB9E48", VA = "0xAB9E48", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60032CE")]
		[Address(RVA = "0xAB9FDC", Offset = "0xAB9FDC", VA = "0xAB9FDC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20005DA")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8209F8", Offset = "0x8209F8")]
	private sealed class <DoContinueMusic>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4002349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400234A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400234B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioSource audio;

		[Token(Token = "0x400234C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float target;

		[Token(Token = "0x400234D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float t;

		[Token(Token = "0x400234E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <i>5__2;

		[Token(Token = "0x170006AE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60032D3")]
			[Address(RVA = "0xAB9DD4", Offset = "0xAB9DD4", VA = "0xAB9DD4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006AF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60032D5")]
			[Address(RVA = "0xAB9E3C", Offset = "0xAB9E3C", VA = "0xAB9E3C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60032D0")]
		[Address(RVA = "0xAB99D0", Offset = "0xAB99D0", VA = "0xAB99D0")]
		[DebuggerHidden]
		public <DoContinueMusic>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x60032D1")]
		[Address(RVA = "0xAB9C78", Offset = "0xAB9C78", VA = "0xAB9C78", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60032D2")]
		[Address(RVA = "0xAB9C7C", Offset = "0xAB9C7C", VA = "0xAB9C7C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60032D4")]
		[Address(RVA = "0xAB9DDC", Offset = "0xAB9DDC", VA = "0xAB9DDC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static AudioSource _hit;

	[Token(Token = "0x4000098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static AudioSource _explore;

	[Token(Token = "0x4000099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static AudioSource _getbody;

	[Token(Token = "0x400009A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static AudioSource _hitiron;

	[Token(Token = "0x400009B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static AudioSource _addspeed;

	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static AudioSource _gaming;

	[Token(Token = "0x400009D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static AudioSource _dead;

	[Token(Token = "0x400009E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static AudioSource _ui;

	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static GameObject _audiostack;

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static MusicControl _instance;

	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static bool _open;

	[Token(Token = "0x6000070")]
	[Address(RVA = "0xAB92A0", Offset = "0xAB92A0", VA = "0xAB92A0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000071")]
	[Address(RVA = "0xAB930C", Offset = "0xAB930C", VA = "0xAB930C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000072")]
	[Address(RVA = "0xAB9568", Offset = "0xAB9568", VA = "0xAB9568")]
	public void Cleanstake()
	{
	}

	[Token(Token = "0x6000073")]
	[Address(RVA = "0xAB95D0", Offset = "0xAB95D0", VA = "0xAB95D0")]
	public void OpenUIMusic()
	{
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0xAB9644", Offset = "0xAB9644", VA = "0xAB9644")]
	public void CloseUIMusic()
	{
	}

	[Token(Token = "0x6000075")]
	[Address(RVA = "0xAB96EC", Offset = "0xAB96EC", VA = "0xAB96EC")]
	public void OpendGaming()
	{
	}

	[Token(Token = "0x6000076")]
	[Address(RVA = "0xAB9794", Offset = "0xAB9794", VA = "0xAB9794")]
	public void PauseGaming()
	{
	}

	[Token(Token = "0x6000077")]
	[Address(RVA = "0xAB9898", Offset = "0xAB9898", VA = "0xAB9898")]
	public void ContinueGaming()
	{
	}

	[Token(Token = "0x6000078")]
	[Address(RVA = "0xAB9818", Offset = "0xAB9818", VA = "0xAB9818")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x82DDC4", Offset = "0x82DDC4")]
	private IEnumerator DoPauseMusic(AudioSource audio, float t)
	{
		return null;
	}

	[Token(Token = "0x6000079")]
	[Address(RVA = "0xAB9920", Offset = "0xAB9920", VA = "0xAB9920")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x82DE28", Offset = "0x82DE28")]
	private IEnumerator DoContinueMusic(AudioSource audio, float t, float target)
	{
		return null;
	}

	[Token(Token = "0x600007A")]
	[Address(RVA = "0xAB99FC", Offset = "0xAB99FC", VA = "0xAB99FC")]
	public static void PlayMusic(MusicType t)
	{
	}

	[Token(Token = "0x600007B")]
	[Address(RVA = "0xAB9C1C", Offset = "0xAB9C1C", VA = "0xAB9C1C")]
	public MusicControl()
	{
	}
}
[Token(Token = "0x200001C")]
public class RotateComponent : MonoBehaviour
{
	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector2 _rotatingfield;

	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform _camera;

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEngine.UI.Slider _sliderBar;

	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text _tiltNum;

	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int _sliderValue;

	[Token(Token = "0x600007D")]
	[Address(RVA = "0xA72974", Offset = "0xA72974", VA = "0xA72974")]
	private void Start()
	{
	}

	[Token(Token = "0x600007E")]
	[Address(RVA = "0xA72ADC", Offset = "0xA72ADC", VA = "0xA72ADC")]
	public void CheckRotate(float x)
	{
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0xA72BC4", Offset = "0xA72BC4", VA = "0xA72BC4")]
	private void SliderValueChange(float t)
	{
	}

	[Token(Token = "0x6000080")]
	[Address(RVA = "0xA72AC8", Offset = "0xA72AC8", VA = "0xA72AC8")]
	private void setRotatingField(int t)
	{
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0xA72C90", Offset = "0xA72C90", VA = "0xA72C90")]
	public RotateComponent()
	{
	}
}
[Token(Token = "0x200001D")]
public class SawTrap : MonoBehaviour
{
	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float _onewalktimer;

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform saw;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float rotateSpeed;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ParticleSystem rpe;

	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ParticleSystem lpe;

	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 _startp;

	[Token(Token = "0x40000AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector3 _finishp;

	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float _timer;

	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool add;

	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
	private bool _max;

	[Token(Token = "0x6000082")]
	[Address(RVA = "0xA72C98", Offset = "0xA72C98", VA = "0xA72C98")]
	private void Start()
	{
	}

	[Token(Token = "0x6000083")]
	[Address(RVA = "0xA72D78", Offset = "0xA72D78", VA = "0xA72D78")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0xA72FE0", Offset = "0xA72FE0", VA = "0xA72FE0")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0xA73330", Offset = "0xA73330", VA = "0xA73330")]
	public SawTrap()
	{
	}

	[Token(Token = "0x6000086")]
	[Address(RVA = "0xA73340", Offset = "0xA73340", VA = "0xA73340")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82DE8C", Offset = "0x82DE8C")]
	private void <FixedUpdate>b__11_0()
	{
	}

	[Token(Token = "0x6000087")]
	[Address(RVA = "0xA73390", Offset = "0xA73390", VA = "0xA73390")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82DE9C", Offset = "0x82DE9C")]
	private void <FixedUpdate>b__11_1()
	{
	}
}
[Token(Token = "0x200001E")]
public class SceneColorControl : MonoBehaviour
{
	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Camera _camera;

	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material _sideblock;

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Material _sheng;

	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Material _qian;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<Color> _sidecolor;

	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<Color> _shengcolor;

	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<Color> _qiancolor;

	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public List<Color> _cameracolor;

	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int index;

	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public int controlIndex;

	[Token(Token = "0x6000088")]
	[Address(RVA = "0xA733E0", Offset = "0xA733E0", VA = "0xA733E0")]
	public void Start()
	{
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0xA735F8", Offset = "0xA735F8", VA = "0xA735F8")]
	public void ChangeColor()
	{
	}

	[Token(Token = "0x600008A")]
	[Address(RVA = "0xA733EC", Offset = "0xA733EC", VA = "0xA733EC")]
	public void ChangeColor(float t)
	{
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0xA737AC", Offset = "0xA737AC", VA = "0xA737AC")]
	public SceneColorControl()
	{
	}
}
[Token(Token = "0x200001F")]
public class SnackButton : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20005DB")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820A08", Offset = "0x820A08")]
	private sealed class <>c
	{
		[Token(Token = "0x400234F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4002350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static TweenCallback <>9__11_0;

		[Token(Token = "0x60032D7")]
		[Address(RVA = "0xA75A60", Offset = "0xA75A60", VA = "0xA75A60")]
		public <>c()
		{
		}

		[Token(Token = "0x60032D8")]
		[Address(RVA = "0xA75A68", Offset = "0xA75A68", VA = "0xA75A68")]
		internal void <SelectPistol>b__11_0()
		{
		}
	}

	[Token(Token = "0x20005DC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820A18", Offset = "0x820A18")]
	private sealed class <>c__DisplayClass13_0
	{
		[Token(Token = "0x4002351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public BNG.Button btn;

		[Token(Token = "0x60032D9")]
		[Address(RVA = "0xA753B0", Offset = "0xA753B0", VA = "0xA753B0")]
		public <>c__DisplayClass13_0()
		{
		}

		[Token(Token = "0x60032DA")]
		[Address(RVA = "0xA75A6C", Offset = "0xA75A6C", VA = "0xA75A6C")]
		internal void <ShowButton>b__0()
		{
		}
	}

	[Token(Token = "0x20005DD")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820A28", Offset = "0x820A28")]
	private sealed class <>c__DisplayClass14_0
	{
		[Token(Token = "0x4002352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform button;

		[Token(Token = "0x60032DB")]
		[Address(RVA = "0xA75510", Offset = "0xA75510", VA = "0xA75510")]
		public <>c__DisplayClass14_0()
		{
		}

		[Token(Token = "0x60032DC")]
		[Address(RVA = "0xA75A8C", Offset = "0xA75A8C", VA = "0xA75A8C")]
		internal void <HitButton>b__0()
		{
		}
	}

	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static SnackButton _instance;

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform btn_launch;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform btn_rePlay;

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform pistol;

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform joy;

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform joyPos;

	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform startPos;

	[Token(Token = "0x40000C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform pistolPos;

	[Token(Token = "0x40000C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform lastProp;

	[Token(Token = "0x600008C")]
	[Address(RVA = "0xA74CC4", Offset = "0xA74CC4", VA = "0xA74CC4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0xA74D18", Offset = "0xA74D18", VA = "0xA74D18")]
	private void Start()
	{
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0xA74E40", Offset = "0xA74E40", VA = "0xA74E40")]
	public void SelectPistol()
	{
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0xA75080", Offset = "0xA75080", VA = "0xA75080")]
	public void SelectJoy()
	{
	}

	[Token(Token = "0x6000090")]
	[Address(RVA = "0xA75260", Offset = "0xA75260", VA = "0xA75260")]
	private void ShowButton(Transform button)
	{
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0xA753B8", Offset = "0xA753B8", VA = "0xA753B8")]
	private void HitButton(Transform button)
	{
	}

	[Token(Token = "0x6000092")]
	[Address(RVA = "0xA75518", Offset = "0xA75518", VA = "0xA75518")]
	public void GameBegin()
	{
	}

	[Token(Token = "0x6000093")]
	[Address(RVA = "0xA75648", Offset = "0xA75648", VA = "0xA75648")]
	public void GameReset()
	{
	}

	[Token(Token = "0x6000094")]
	[Address(RVA = "0xA75740", Offset = "0xA75740", VA = "0xA75740")]
	public void OnGameOver()
	{
	}

	[Token(Token = "0x6000095")]
	[Address(RVA = "0xA75744", Offset = "0xA75744", VA = "0xA75744")]
	public void HintProp()
	{
	}

	[Token(Token = "0x6000096")]
	[Address(RVA = "0xA75868", Offset = "0xA75868", VA = "0xA75868")]
	public SnackButton()
	{
	}

	[Token(Token = "0x6000097")]
	[Address(RVA = "0xA75870", Offset = "0xA75870", VA = "0xA75870")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82DEAC", Offset = "0x82DEAC")]
	private void <Start>b__10_0()
	{
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0xA758C0", Offset = "0xA758C0", VA = "0xA758C0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82DEBC", Offset = "0x82DEBC")]
	private void <SelectJoy>b__12_0()
	{
	}

	[Token(Token = "0x6000099")]
	[Address(RVA = "0xA75908", Offset = "0xA75908", VA = "0xA75908")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82DECC", Offset = "0x82DECC")]
	private void <GameBegin>b__15_0()
	{
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0xA75938", Offset = "0xA75938", VA = "0xA75938")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82DEDC", Offset = "0x82DEDC")]
	private void <GameReset>b__16_0()
	{
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0xA759CC", Offset = "0xA759CC", VA = "0xA759CC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82DEEC", Offset = "0x82DEEC")]
	private void <HintProp>b__18_0()
	{
	}
}
[Token(Token = "0x2000020")]
public class Snake : MonoBehaviour
{
	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float _snake_speed;

	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CameraControl _camracontrol;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform _prefab_snakebody;

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform _snake_head;

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<Transform> _snake_bodys;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<Vector3> _headTrack;

	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Snake _instance;

	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 _lastmovepoint;

	[Token(Token = "0x600009C")]
	[Address(RVA = "0xA75ABC", Offset = "0xA75ABC", VA = "0xA75ABC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600009D")]
	[Address(RVA = "0xA75B10", Offset = "0xA75B10", VA = "0xA75B10")]
	private void Start()
	{
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0xA75D8C", Offset = "0xA75D8C", VA = "0xA75D8C")]
	private void Update()
	{
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0xA76380", Offset = "0xA76380", VA = "0xA76380")]
	private void SnakeMove()
	{
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0xA75BDC", Offset = "0xA75BDC", VA = "0xA75BDC")]
	public void AddBody()
	{
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0xA766E4", Offset = "0xA766E4", VA = "0xA766E4")]
	public void CutBody()
	{
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0xA75E30", Offset = "0xA75E30", VA = "0xA75E30")]
	private void MobieInput()
	{
	}

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0xA76118", Offset = "0xA76118", VA = "0xA76118")]
	private void PcInput()
	{
	}

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0xA767E0", Offset = "0xA767E0", VA = "0xA767E0")]
	public Snake()
	{
	}
}
[Token(Token = "0x2000021")]
public class SnakeBody : MonoBehaviour
{
	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject _firework;

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0xAD708C", Offset = "0xAD708C", VA = "0xAD708C")]
	private void Start()
	{
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0xAD7104", Offset = "0xAD7104", VA = "0xAD7104")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0xAD7234", Offset = "0xAD7234", VA = "0xAD7234")]
	private void OnCollisionExit(Collision collision)
	{
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0xAD72D8", Offset = "0xAD72D8", VA = "0xAD72D8")]
	public SnakeBody()
	{
	}
}
[Token(Token = "0x2000022")]
public enum MoveType
{
	[Token(Token = "0x40000CE")]
	joy,
	[Token(Token = "0x40000CF")]
	pistol
}
[Token(Token = "0x2000023")]
public class SnakeMovement : MonoBehaviour, IScript
{
	[Token(Token = "0x20005DE")]
	public enum SnakeState
	{
		[Token(Token = "0x4002354")]
		open,
		[Token(Token = "0x4002355")]
		close
	}

	[Token(Token = "0x20005DF")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820A38", Offset = "0x820A38")]
	private sealed class <DoShoot>d__47 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4002356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4002357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4002358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SnakeMovement <>4__this;

		[Token(Token = "0x4002359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <t>5__2;

		[Token(Token = "0x170006B0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60032E0")]
			[Address(RVA = "0xAD9C28", Offset = "0xAD9C28", VA = "0xAD9C28", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006B1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60032E2")]
			[Address(RVA = "0xAD9C90", Offset = "0xAD9C90", VA = "0xAD9C90", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60032DD")]
		[Address(RVA = "0xAD9058", Offset = "0xAD9058", VA = "0xAD9058")]
		[DebuggerHidden]
		public <DoShoot>d__47(int <>1__state)
		{
		}

		[Token(Token = "0x60032DE")]
		[Address(RVA = "0xAD9A08", Offset = "0xAD9A08", VA = "0xAD9A08", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60032DF")]
		[Address(RVA = "0xAD9A0C", Offset = "0xAD9A0C", VA = "0xAD9A0C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60032E1")]
		[Address(RVA = "0xAD9C30", Offset = "0xAD9C30", VA = "0xAD9C30", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20005E0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820A48", Offset = "0x820A48")]
	private sealed class <DoMagnet>d__48 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400235A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400235B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400235C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SnakeMovement <>4__this;

		[Token(Token = "0x400235D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <t>5__2;

		[Token(Token = "0x170006B2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60032E6")]
			[Address(RVA = "0xAD9998", Offset = "0xAD9998", VA = "0xAD9998", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006B3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60032E8")]
			[Address(RVA = "0xAD9A00", Offset = "0xAD9A00", VA = "0xAD9A00", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60032E3")]
		[Address(RVA = "0xAD9084", Offset = "0xAD9084", VA = "0xAD9084")]
		[DebuggerHidden]
		public <DoMagnet>d__48(int <>1__state)
		{
		}

		[Token(Token = "0x60032E4")]
		[Address(RVA = "0xAD9624", Offset = "0xAD9624", VA = "0xAD9624", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60032E5")]
		[Address(RVA = "0xAD9628", Offset = "0xAD9628", VA = "0xAD9628", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60032E7")]
		[Address(RVA = "0xAD99A0", Offset = "0xAD99A0", VA = "0xAD99A0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20005E1")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820A58", Offset = "0x820A58")]
	private sealed class <DoInvincible>d__49 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400235E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400235F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4002360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SnakeMovement <>4__this;

		[Token(Token = "0x4002361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <ts>5__2;

		[Token(Token = "0x4002362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int <i>5__3;

		[Token(Token = "0x170006B4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60032EC")]
			[Address(RVA = "0xAD95B4", Offset = "0xAD95B4", VA = "0xAD95B4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006B5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60032EE")]
			[Address(RVA = "0xAD961C", Offset = "0xAD961C", VA = "0xAD961C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60032E9")]
		[Address(RVA = "0xAD90B0", Offset = "0xAD90B0", VA = "0xAD90B0")]
		[DebuggerHidden]
		public <DoInvincible>d__49(int <>1__state)
		{
		}

		[Token(Token = "0x60032EA")]
		[Address(RVA = "0xAD9330", Offset = "0xAD9330", VA = "0xAD9330", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60032EB")]
		[Address(RVA = "0xAD9334", Offset = "0xAD9334", VA = "0xAD9334", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60032ED")]
		[Address(RVA = "0xAD95BC", Offset = "0xAD95BC", VA = "0xAD95BC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Camera _movecamera;

	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<Transform> BodyParts;

	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int initialAmount;

	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float speed;

	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float addSpeed;

	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float rotationSpeed;

	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float LerpTimeX;

	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float LerpTimeY;

	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool _CameraRotate;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float addSpeedMaxDis;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject BodyPrefab;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public MoveType moveType;

	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Vector3 refVelocity;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float curSpeed;

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool firstPart;

	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static SnakeMovement _instance;

	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public int speedbase;

	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public int headdrog;

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool isShoot;

	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	public bool isInvincible;

	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
	public bool isMagnet;

	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Material _material_snake;

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public RotateComponent _rotateCamera;

	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Transform magnet;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Transform bullet;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public List<Transform> flyBody;

	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float time;

	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private Vector2 lastInport;

	[Token(Token = "0x40000EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private Vector2 lastPoint;

	[Token(Token = "0x40000ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private bool trail;

	[Token(Token = "0x40000EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public SnakeState _snakeState;

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0xAD72E0", Offset = "0xAD72E0", VA = "0xAD72E0")]
	private void Start()
	{
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0xAD73E8", Offset = "0xAD73E8", VA = "0xAD73E8")]
	public float GetCurrentSpeed()
	{
		return default(float);
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0xAD73F0", Offset = "0xAD73F0", VA = "0xAD73F0")]
	public void SetlastPoint(Vector2 input)
	{
	}

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0xAD7400", Offset = "0xAD7400", VA = "0xAD7400")]
	public void SetMotorTorqueInput(Vector2 input)
	{
	}

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0xAD740C", Offset = "0xAD740C", VA = "0xAD740C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0xAD750C", Offset = "0xAD750C", VA = "0xAD750C")]
	public void Move()
	{
	}

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0xAD8238", Offset = "0xAD8238", VA = "0xAD8238")]
	public void AddBodyPart()
	{
	}

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0xAD8680", Offset = "0xAD8680", VA = "0xAD8680")]
	public void CutBody()
	{
	}

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0xAD8B00", Offset = "0xAD8B00", VA = "0xAD8B00")]
	private void CheckTrailuse()
	{
	}

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0xAD8BFC", Offset = "0xAD8BFC", VA = "0xAD8BFC", Slot = "4")]
	public void GlobalSubscription()
	{
	}

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0xAD8D7C", Offset = "0xAD8D7C", VA = "0xAD8D7C", Slot = "5")]
	public void Initialize()
	{
	}

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0xAD8E54", Offset = "0xAD8E54", VA = "0xAD8E54", Slot = "6")]
	public void GameBegin()
	{
	}

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0xAD8E58", Offset = "0xAD8E58", VA = "0xAD8E58", Slot = "7")]
	public void GamePause()
	{
	}

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0xAD8E5C", Offset = "0xAD8E5C", VA = "0xAD8E5C", Slot = "8")]
	public void GameOver()
	{
	}

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0xAD8E60", Offset = "0xAD8E60", VA = "0xAD8E60")]
	public void SetShoot()
	{
	}

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0xAD8F08", Offset = "0xAD8F08", VA = "0xAD8F08")]
	public void SetInvincible()
	{
	}

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0xAD8FB0", Offset = "0xAD8FB0", VA = "0xAD8FB0")]
	public void SetMagnet()
	{
	}

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0xAD8E98", Offset = "0xAD8E98", VA = "0xAD8E98")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x82DEFC", Offset = "0x82DEFC")]
	private IEnumerator DoShoot()
	{
		return null;
	}

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0xAD8FE8", Offset = "0xAD8FE8", VA = "0xAD8FE8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x82DF60", Offset = "0x82DF60")]
	private IEnumerator DoMagnet()
	{
		return null;
	}

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0xAD8F40", Offset = "0xAD8F40", VA = "0xAD8F40")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x82DFC4", Offset = "0x82DFC4")]
	private IEnumerator DoInvincible()
	{
		return null;
	}

	[Token(Token = "0x60000BD")]
	[Address(RVA = "0xAD90DC", Offset = "0xAD90DC", VA = "0xAD90DC")]
	private void BodyOpen()
	{
	}

	[Token(Token = "0x60000BE")]
	[Address(RVA = "0xAD9210", Offset = "0xAD9210", VA = "0xAD9210")]
	public SnakeMovement()
	{
	}

	[Token(Token = "0x60000BF")]
	[Address(RVA = "0xAD92B8", Offset = "0xAD92B8", VA = "0xAD92B8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F028", Offset = "0x82F028")]
	private void <Start>b__29_0()
	{
	}
}
[Token(Token = "0x2000024")]
public class SpeedParticle : MonoBehaviour
{
	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SnakeMovement snakeMovement;

	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ParticleSystem ps;

	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float startSpeed;

	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float addPerSpeed;

	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float ratePerSpeed;

	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int numPerSpeed;

	[Token(Token = "0x60000C0")]
	[Address(RVA = "0xADCD6C", Offset = "0xADCD6C", VA = "0xADCD6C")]
	private void Start()
	{
	}

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0xADD03C", Offset = "0xADD03C", VA = "0xADD03C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0xADD114", Offset = "0xADD114", VA = "0xADD114")]
	public SpeedParticle()
	{
	}

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0xADD11C", Offset = "0xADD11C", VA = "0xADD11C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F038", Offset = "0x82F038")]
	private void <Start>b__6_0()
	{
	}

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0xADD138", Offset = "0xADD138", VA = "0xADD138")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F048", Offset = "0x82F048")]
	private void <Start>b__6_1()
	{
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0xADD154", Offset = "0xADD154", VA = "0xADD154")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F058", Offset = "0x82F058")]
	private void <Start>b__6_2()
	{
	}
}
[Token(Token = "0x2000025")]
public class StaticTrap : MonoBehaviour
{
	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool _max;

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0xADD45C", Offset = "0xADD45C", VA = "0xADD45C")]
	private void Start()
	{
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0xADD504", Offset = "0xADD504", VA = "0xADD504")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0xADD758", Offset = "0xADD758", VA = "0xADD758")]
	public StaticTrap()
	{
	}
}
[Token(Token = "0x2000026")]
public class Test : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20005E2")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820A68", Offset = "0x820A68")]
	private sealed class <>c
	{
		[Token(Token = "0x4002363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4002364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static OnRequestFinishedDelegate <>9__0_0;

		[Token(Token = "0x60032F0")]
		[Address(RVA = "0xAE1A2C", Offset = "0xAE1A2C", VA = "0xAE1A2C")]
		public <>c()
		{
		}

		[Token(Token = "0x60032F1")]
		[Address(RVA = "0xAE1A34", Offset = "0xAE1A34", VA = "0xAE1A34")]
		internal void <Start>b__0_0(HTTPRequest originalRequest, HTTPResponse response)
		{
		}
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0xAE1824", Offset = "0xAE1824", VA = "0xAE1824")]
	private void Start()
	{
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0xAE19C0", Offset = "0xAE19C0", VA = "0xAE19C0")]
	public Test()
	{
	}
}
[Token(Token = "0x2000027")]
public class TrapManager : MonoBehaviour
{
	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<GameObject> _traps;

	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<GameObject> _bodys;

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0xAE1AB8", Offset = "0xAE1AB8", VA = "0xAE1AB8")]
	private void Start()
	{
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0xAE1BF0", Offset = "0xAE1BF0", VA = "0xAE1BF0")]
	public TrapManager()
	{
	}
}
[Token(Token = "0x2000028")]
public class UI : MonoBehaviour, IScript
{
	[Token(Token = "0x20005E3")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820A78", Offset = "0x820A78")]
	private sealed class <Daojishi>d__68 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4002365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4002366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4002367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UI <>4__this;

		[Token(Token = "0x170006B6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60032F5")]
			[Address(RVA = "0xAE3F5C", Offset = "0xAE3F5C", VA = "0xAE3F5C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006B7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60032F7")]
			[Address(RVA = "0xAE3FC4", Offset = "0xAE3FC4", VA = "0xAE3FC4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60032F2")]
		[Address(RVA = "0xAE301C", Offset = "0xAE301C", VA = "0xAE301C")]
		[DebuggerHidden]
		public <Daojishi>d__68(int <>1__state)
		{
		}

		[Token(Token = "0x60032F3")]
		[Address(RVA = "0xAE3DA8", Offset = "0xAE3DA8", VA = "0xAE3DA8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60032F4")]
		[Address(RVA = "0xAE3DAC", Offset = "0xAE3DAC", VA = "0xAE3DAC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60032F6")]
		[Address(RVA = "0xAE3F64", Offset = "0xAE3F64", VA = "0xAE3F64", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20005E4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820A88", Offset = "0x820A88")]
	private sealed class <>c
	{
		[Token(Token = "0x4002368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4002369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static UnityAction <>9__73_0;

		[Token(Token = "0x60032F9")]
		[Address(RVA = "0xAE3BF0", Offset = "0xAE3BF0", VA = "0xAE3BF0")]
		public <>c()
		{
		}

		[Token(Token = "0x60032FA")]
		[Address(RVA = "0xAE3BF8", Offset = "0xAE3BF8", VA = "0xAE3BF8")]
		internal void <BtnClickListener>b__73_0()
		{
		}
	}

	[Token(Token = "0x20005E5")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820A98", Offset = "0x820A98")]
	private sealed class <>c__DisplayClass74_0
	{
		[Token(Token = "0x400236A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public UI <>4__this;

		[Token(Token = "0x400236B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string mode;

		[Token(Token = "0x60032FB")]
		[Address(RVA = "0xAE3358", Offset = "0xAE3358", VA = "0xAE3358")]
		public <>c__DisplayClass74_0()
		{
		}

		[Token(Token = "0x60032FC")]
		[Address(RVA = "0xAE3C00", Offset = "0xAE3C00", VA = "0xAE3C00")]
		internal void <OpenTeachView>b__0()
		{
		}
	}

	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string _MainSceneName;

	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject _btnResumePlay;

	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject _btnBegin;

	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEngine.UI.Button _btnSetting;

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEngine.UI.Button _btnExit;

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEngine.UI.Button _btnAbout;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEngine.UI.Button _btnCloseAbout;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEngine.UI.Button _btnCloseSetting;

	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEngine.UI.Button _btnCloseLeaderBoard;

	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public UnityEngine.UI.Button _btnpistolmode;

	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public UnityEngine.UI.Button _btnjoymode;

	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public UnityEngine.UI.Button _btnLeaderBoard;

	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject _txtBestScore;

	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject _txtBestLevel;

	[Token(Token = "0x4000106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject _txtNowScore;

	[Token(Token = "0x4000107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public GameObject _txtCurrentScore;

	[Token(Token = "0x4000108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public UnityEngine.UI.Slider _rankslider;

	[Token(Token = "0x4000109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Text _headrank;

	[Token(Token = "0x400010A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Text _trailrank;

	[Token(Token = "0x400010B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Animator _trailanimator;

	[Token(Token = "0x400010C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public ParticleSystem _trailpe;

	[Token(Token = "0x400010D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private int _score;

	[Token(Token = "0x400010E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static UI _instance;

	[Token(Token = "0x400010F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public GameObject _endview;

	[Token(Token = "0x4000110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public GameObject _indexview;

	[Token(Token = "0x4000111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public GameObject _gameview;

	[Token(Token = "0x4000112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public GameObject _settingView;

	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public GameObject _aboutView;

	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public GameObject _teachView;

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public GameObject _leaderboardView;

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public GameObject _pistolTeach;

	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public GameObject _joyStickTeach;

	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public GameObject _end_level;

	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public GameObject _end_crush;

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public GameObject _end_best;

	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public GameObject _characterHeight;

	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public Sprite _open;

	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public Sprite _close;

	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public GameObject _shake;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public GameObject _textCurrentHeight;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public GameObject _btnClose;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public UnityEngine.UI.Slider _sliderBar;

	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x821364", Offset = "0x821364")]
	public Transform _teachPos;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private int _sliderValue;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
	public float VibrateFrequency;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public float VibrateAmplitude;

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
	public float VibrateDuration;

	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public GameObject _heart;

	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public GameObject _fuhuo;

	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public float oldspeed;

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	private int deadnum;

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0xAE1BF8", Offset = "0xAE1BF8", VA = "0xAE1BF8")]
	public void BtnShake()
	{
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0xAE1CC4", Offset = "0xAE1CC4", VA = "0xAE1CC4")]
	public void UpdateScore(int num)
	{
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0xAE1D60", Offset = "0xAE1D60", VA = "0xAE1D60")]
	public void Resumeplay()
	{
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0xAE1DCC", Offset = "0xAE1DCC", VA = "0xAE1DCC")]
	public void BeginGame()
	{
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0xAE1E2C", Offset = "0xAE1E2C", VA = "0xAE1E2C")]
	public void showSettings()
	{
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0xAE1E70", Offset = "0xAE1E70", VA = "0xAE1E70")]
	public void HintIndex()
	{
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0xAE1EA4", Offset = "0xAE1EA4", VA = "0xAE1EA4")]
	public void closeSettings()
	{
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0xAE1EE8", Offset = "0xAE1EE8", VA = "0xAE1EE8", Slot = "4")]
	public void GlobalSubscription()
	{
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0xAE2068", Offset = "0xAE2068", VA = "0xAE2068", Slot = "5")]
	public void Initialize()
	{
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0xAE20EC", Offset = "0xAE20EC", VA = "0xAE20EC")]
	public void RefreshValue()
	{
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0xAE2734", Offset = "0xAE2734", VA = "0xAE2734")]
	private void InitiaSlider()
	{
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0xAE28E8", Offset = "0xAE28E8", VA = "0xAE28E8")]
	public void UpdateRankSlider(bool levelup)
	{
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0xAE2A9C", Offset = "0xAE2A9C", VA = "0xAE2A9C", Slot = "6")]
	public void GameBegin()
	{
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0xAE2B84", Offset = "0xAE2B84", VA = "0xAE2B84", Slot = "7")]
	public void GamePause()
	{
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0xAE2B88", Offset = "0xAE2B88", VA = "0xAE2B88", Slot = "8")]
	public void GameOver()
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0xAE2E7C", Offset = "0xAE2E7C", VA = "0xAE2E7C")]
	public void Fuhuo()
	{
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0xAE3018", Offset = "0xAE3018", VA = "0xAE3018")]
	public void BtnFuhuo()
	{
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0xAE2E0C", Offset = "0xAE2E0C", VA = "0xAE2E0C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x82F068", Offset = "0x82F068")]
	private IEnumerator Daojishi()
	{
		return null;
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0xAE3048", Offset = "0xAE3048", VA = "0xAE3048")]
	public void CloseFuhuoBtn()
	{
	}

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0xAE2238", Offset = "0xAE2238", VA = "0xAE2238")]
	public void GameSetting()
	{
	}

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0xAE30AC", Offset = "0xAE30AC", VA = "0xAE30AC")]
	private void SliderValueChange(float t)
	{
	}

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0xAE25FC", Offset = "0xAE25FC", VA = "0xAE25FC")]
	private void setHeight()
	{
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0xAE22DC", Offset = "0xAE22DC", VA = "0xAE22DC")]
	private void BtnClickListener()
	{
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0xAE31B8", Offset = "0xAE31B8", VA = "0xAE31B8")]
	public void OpenTeachView(string mode)
	{
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0xAE3360", Offset = "0xAE3360", VA = "0xAE3360")]
	public void CloseTeachView()
	{
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0xAE3468", Offset = "0xAE3468", VA = "0xAE3468")]
	public void CloseLeaderBoardView()
	{
	}

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0xAE3550", Offset = "0xAE3550", VA = "0xAE3550")]
	private void Update()
	{
	}

	[Token(Token = "0x60000E8")]
	[Address(RVA = "0xAE35A0", Offset = "0xAE35A0", VA = "0xAE35A0")]
	public UI()
	{
	}

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0xAE35CC", Offset = "0xAE35CC", VA = "0xAE35CC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F0CC", Offset = "0x82F0CC")]
	private void <GameBegin>b__59_0()
	{
	}

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0xAE3624", Offset = "0xAE3624", VA = "0xAE3624")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F0DC", Offset = "0x82F0DC")]
	private void <BtnClickListener>b__73_1()
	{
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0xAE3668", Offset = "0xAE3668", VA = "0xAE3668")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F0EC", Offset = "0x82F0EC")]
	private void <BtnClickListener>b__73_2()
	{
	}

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0xAE36AC", Offset = "0xAE36AC", VA = "0xAE36AC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F0FC", Offset = "0x82F0FC")]
	private void <BtnClickListener>b__73_3()
	{
	}

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0xAE36F0", Offset = "0xAE36F0", VA = "0xAE36F0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F10C", Offset = "0x82F10C")]
	private void <BtnClickListener>b__73_4()
	{
	}

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0xAE3734", Offset = "0xAE3734", VA = "0xAE3734")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F11C", Offset = "0x82F11C")]
	private void <BtnClickListener>b__73_5()
	{
	}

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0xAE3738", Offset = "0xAE3738", VA = "0xAE3738")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F12C", Offset = "0x82F12C")]
	private void <BtnClickListener>b__73_6()
	{
	}

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0xAE37AC", Offset = "0xAE37AC", VA = "0xAE37AC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F13C", Offset = "0x82F13C")]
	private void <BtnClickListener>b__73_7()
	{
	}

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0xAE3820", Offset = "0xAE3820", VA = "0xAE3820")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F14C", Offset = "0x82F14C")]
	private void <BtnClickListener>b__73_8()
	{
	}

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0xAE392C", Offset = "0xAE392C", VA = "0xAE392C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F15C", Offset = "0x82F15C")]
	private void <BtnClickListener>b__73_9()
	{
	}

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0xAE3A14", Offset = "0xAE3A14", VA = "0xAE3A14")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F16C", Offset = "0x82F16C")]
	private void <CloseTeachView>b__75_0()
	{
	}

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0xAE3AD0", Offset = "0xAE3AD0", VA = "0xAE3AD0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F17C", Offset = "0x82F17C")]
	private void <CloseLeaderBoardView>b__76_0()
	{
	}
}
[Token(Token = "0x2000029")]
public class UserData : ICloneable
{
	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string deviceId;

	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string userType;

	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int level;

	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int subLevel;

	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int joyBestScore;

	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int pistolBestScore;

	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string oculusId;

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0x16E45D4", Offset = "0x16E45D4", VA = "0x16E45D4", Slot = "4")]
	public object Clone()
	{
		return null;
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0x16E45DC", Offset = "0x16E45DC", VA = "0x16E45DC")]
	public bool IsBindOculusId()
	{
		return default(bool);
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0x16E4670", Offset = "0x16E4670", VA = "0x16E4670")]
	public UserData()
	{
	}
}
[Token(Token = "0x200002A")]
public class PlatformManager
{
	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool initSuccess;

	[Token(Token = "0x4000133")]
	public const string appId = "3736945826417750";

	[Token(Token = "0x4000134")]
	public const string appsecret = "9cb5c003df5853a6d254afa079bdb626";

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0xA6DA40", Offset = "0xA6DA40", VA = "0xA6DA40")]
	public void Init()
	{
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0xA6DBF0", Offset = "0xA6DBF0", VA = "0xA6DBF0")]
	private void EntitlementCallback(Oculus.Platform.Message msg)
	{
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0xA6DDB0", Offset = "0xA6DDB0", VA = "0xA6DDB0")]
	private void getUserCallback(Message<User> msg)
	{
	}

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0xA6E118", Offset = "0xA6E118", VA = "0xA6E118")]
	public PlatformManager()
	{
	}
}
[Token(Token = "0x200002B")]
[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x81EC9C", Offset = "0x81EC9C")]
public class FastList<T>
{
	[Token(Token = "0x20005E6")]
	public delegate int CompareFunc(T left, T right);

	[Token(Token = "0x20005E7")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820AA8", Offset = "0x820AA8")]
	private sealed class <GetEnumerator>d__25 : IEnumerator<T>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400236C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <>1__state;

		[Token(Token = "0x400236D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T <>2__current;

		[Token(Token = "0x400236E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public FastList<T> <>4__this;

		[Token(Token = "0x400236F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <i>5__2;

		[Token(Token = "0x170006B8")]
		private T System.Collections.Generic.IEnumerator<T>.Current
		{
			[Token(Token = "0x6003304")]
			[DebuggerHidden]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x170006B9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6003306")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003301")]
		[DebuggerHidden]
		public <GetEnumerator>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x6003302")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6003303")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6003305")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public T[] array;

	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public int size;

	[Token(Token = "0x17000003")]
	public int Count
	{
		[Token(Token = "0x60000FE")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60000FF")]
		set
		{
		}
	}

	[Token(Token = "0x17000004")]
	public T Item
	{
		[Token(Token = "0x6000100")]
		get
		{
			return (T)null;
		}
		[Token(Token = "0x6000101")]
		set
		{
		}
	}

	[Token(Token = "0x60000FC")]
	public FastList()
	{
	}

	[Token(Token = "0x60000FD")]
	public FastList(int size)
	{
	}

	[Token(Token = "0x6000102")]
	public void Add(T item)
	{
	}

	[Token(Token = "0x6000103")]
	public void AddUnique(T item)
	{
	}

	[Token(Token = "0x6000104")]
	public void AddRange(IEnumerable<T> items)
	{
	}

	[Token(Token = "0x6000105")]
	public void Insert(int index, T item)
	{
	}

	[Token(Token = "0x6000106")]
	public bool Remove(T item)
	{
		return default(bool);
	}

	[Token(Token = "0x6000107")]
	public void RemoveAt(int index)
	{
	}

	[Token(Token = "0x6000108")]
	public bool RemoveFast(T item)
	{
		return default(bool);
	}

	[Token(Token = "0x6000109")]
	public void RemoveAtFast(int index)
	{
	}

	[Token(Token = "0x600010A")]
	public bool Contains(T item)
	{
		return default(bool);
	}

	[Token(Token = "0x600010B")]
	public int IndexOf(T item)
	{
		return default(int);
	}

	[Token(Token = "0x600010C")]
	public T Pop()
	{
		return (T)null;
	}

	[Token(Token = "0x600010D")]
	public T[] ToArray()
	{
		return null;
	}

	[Token(Token = "0x600010E")]
	public void Sort(CompareFunc comparer)
	{
	}

	[Token(Token = "0x600010F")]
	public void InsertionSort(CompareFunc comparer)
	{
	}

	[Token(Token = "0x6000110")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x82F18C", Offset = "0x82F18C")]
	public IEnumerator<T> GetEnumerator()
	{
		return null;
	}

	[Token(Token = "0x6000111")]
	public T Find(Predicate<T> match)
	{
		return (T)null;
	}

	[Token(Token = "0x6000112")]
	private void Allocate()
	{
	}

	[Token(Token = "0x6000113")]
	private void Trim()
	{
	}

	[Token(Token = "0x6000114")]
	public void Clear()
	{
	}

	[Token(Token = "0x6000115")]
	public void Release()
	{
	}
}
[Token(Token = "0x200002C")]
public class InspectorNoteAttribute : PropertyAttribute
{
	[Token(Token = "0x4000137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public readonly string header;

	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public readonly string message;

	[Token(Token = "0x6000116")]
	[Address(RVA = "0xAADEF8", Offset = "0xAADEF8", VA = "0xAADEF8")]
	public InspectorNoteAttribute(string header, string message = "")
	{
	}
}
[Token(Token = "0x200002D")]
public class InspectorCommentAttribute : PropertyAttribute
{
	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public readonly string message;

	[Token(Token = "0x6000117")]
	[Address(RVA = "0xAADECC", Offset = "0xAADECC", VA = "0xAADECC")]
	public InspectorCommentAttribute(string message = "")
	{
	}
}
[Token(Token = "0x200002E")]
public class OvrAvatarTestDriver : OvrAvatarDriver
{
	[Token(Token = "0x400013A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Vector3 headPos;

	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private Quaternion headRot;

	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private float voiceAmplitude;

	[Token(Token = "0x6000118")]
	[Address(RVA = "0xA6B410", Offset = "0xA6B410", VA = "0xA6B410")]
	private ControllerPose GetMalibuControllerPose(OVRInput.Controller controller)
	{
		return default(ControllerPose);
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0xA6B57C", Offset = "0xA6B57C", VA = "0xA6B57C")]
	private ControllerPose GetControllerPose(OVRInput.Controller controller)
	{
		return default(ControllerPose);
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0xA6B920", Offset = "0xA6B920", VA = "0xA6B920")]
	private void CalculateCurrentPose()
	{
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0xA6BAC8", Offset = "0xA6BAC8", VA = "0xA6BAC8", Slot = "4")]
	public override void UpdateTransforms(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x600011C")]
	[Address(RVA = "0xA6BAF4", Offset = "0xA6BAF4", VA = "0xA6BAF4")]
	public OvrAvatarTestDriver()
	{
	}
}
[Token(Token = "0x200002F")]
public class PoseEditHelper : MonoBehaviour
{
	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform poseRoot;

	[Token(Token = "0x600011D")]
	[Address(RVA = "0xA70784", Offset = "0xA70784", VA = "0xA70784")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600011E")]
	[Address(RVA = "0xA70810", Offset = "0xA70810", VA = "0xA70810")]
	private void DrawJoints(Transform joint)
	{
	}

	[Token(Token = "0x600011F")]
	[Address(RVA = "0xA7097C", Offset = "0xA7097C", VA = "0xA7097C")]
	public PoseEditHelper()
	{
	}
}
[Token(Token = "0x2000030")]
public class GazeTargetSpawner : MonoBehaviour
{
	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject GazeTargetPrefab;

	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int NumberOfDummyTargets;

	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int RadiusMultiplier;

	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool isVisible;

	[Token(Token = "0x17000005")]
	public bool IsVisible
	{
		[Token(Token = "0x6000120")]
		[Address(RVA = "0xA57FF0", Offset = "0xA57FF0", VA = "0xA57FF0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000121")]
		[Address(RVA = "0xA57FF8", Offset = "0xA57FF8", VA = "0xA57FF8")]
		set
		{
		}
	}

	[Token(Token = "0x6000122")]
	[Address(RVA = "0xA58120", Offset = "0xA58120", VA = "0xA58120")]
	private void Start()
	{
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0xA5833C", Offset = "0xA5833C", VA = "0xA5833C")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000124")]
	[Address(RVA = "0xA58344", Offset = "0xA58344", VA = "0xA58344")]
	public GazeTargetSpawner()
	{
	}
}
[Token(Token = "0x2000031")]
public class RemoteLoopbackManager : MonoBehaviour
{
	[Token(Token = "0x20005E8")]
	private class PacketLatencyPair
	{
		[Token(Token = "0x4002370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte[] PacketData;

		[Token(Token = "0x4002371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float FakeLatency;

		[Token(Token = "0x6003307")]
		[Address(RVA = "0xA717AC", Offset = "0xA717AC", VA = "0xA717AC")]
		public PacketLatencyPair()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20005E9")]
	public class SimulatedLatencySettings
	{
		[Token(Token = "0x4002372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x82DC34", Offset = "0x82DC34")]
		public float FakeLatencyMax;

		[Token(Token = "0x4002373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x82DC4C", Offset = "0x82DC4C")]
		public float FakeLatencyMin;

		[Token(Token = "0x4002374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x82DC64", Offset = "0x82DC64")]
		public float LatencyWeight;

		[Token(Token = "0x4002375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x82DC7C", Offset = "0x82DC7C")]
		public int MaxSamples;

		[Token(Token = "0x4002376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float AverageWindow;

		[Token(Token = "0x4002377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal float LatencySum;

		[Token(Token = "0x4002378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal LinkedList<float> LatencyValues;

		[Token(Token = "0x6003308")]
		[Address(RVA = "0xA717B4", Offset = "0xA717B4", VA = "0xA717B4")]
		public float NextValue()
		{
			return default(float);
		}

		[Token(Token = "0x6003309")]
		[Address(RVA = "0xA7194C", Offset = "0xA7194C", VA = "0xA7194C")]
		public SimulatedLatencySettings()
		{
		}
	}

	[Token(Token = "0x4000142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OvrAvatar LocalAvatar;

	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OvrAvatar LoopbackAvatar;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SimulatedLatencySettings LatencySettings;

	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int PacketSequence;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private LinkedList<PacketLatencyPair> packetQueue;

	[Token(Token = "0x6000125")]
	[Address(RVA = "0xA70E5C", Offset = "0xA70E5C", VA = "0xA70E5C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000126")]
	[Address(RVA = "0xA70F80", Offset = "0xA70F80", VA = "0xA70F80")]
	private void OnLocalAvatarPacketRecorded(object sender, OvrAvatar.PacketEventArgs args)
	{
	}

	[Token(Token = "0x6000127")]
	[Address(RVA = "0xA712E0", Offset = "0xA712E0", VA = "0xA712E0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000128")]
	[Address(RVA = "0xA71244", Offset = "0xA71244", VA = "0xA71244")]
	private void SendPacketData(byte[] data)
	{
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0xA7153C", Offset = "0xA7153C", VA = "0xA7153C")]
	private void ReceivePacketData(byte[] data)
	{
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0xA718C0", Offset = "0xA718C0", VA = "0xA718C0")]
	public RemoteLoopbackManager()
	{
	}
}
[Token(Token = "0x2000032")]
public class P2PManager
{
	[Token(Token = "0x20005EA")]
	private enum MessageType : byte
	{
		[Token(Token = "0x400237A")]
		Update = 1
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0xA6CA30", Offset = "0xA6CA30", VA = "0xA6CA30")]
	public P2PManager()
	{
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0xA6CAF0", Offset = "0xA6CAF0", VA = "0xA6CAF0")]
	public void ConnectTo(ulong userID)
	{
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0xA6CBD4", Offset = "0xA6CBD4", VA = "0xA6CBD4")]
	public void Disconnect(ulong userID)
	{
	}

	[Token(Token = "0x600012E")]
	[Address(RVA = "0xA6CC58", Offset = "0xA6CC58", VA = "0xA6CC58")]
	private void PeerConnectRequestCallback(Message<NetworkingPeer> msg)
	{
	}

	[Token(Token = "0x600012F")]
	[Address(RVA = "0xA6CDB4", Offset = "0xA6CDB4", VA = "0xA6CDB4")]
	private void ConnectionStateChangedCallback(Message<NetworkingPeer> msg)
	{
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0xA6D064", Offset = "0xA6D064", VA = "0xA6D064")]
	public void SendAvatarUpdate(ulong userID, Transform rootTransform, uint sequence, byte[] avatarPacket)
	{
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0xA6D458", Offset = "0xA6D458", VA = "0xA6D458")]
	public void GetRemotePackets()
	{
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0xA6D6FC", Offset = "0xA6D6FC", VA = "0xA6D6FC")]
	public void processAvatarPacket(RemotePlayer remote, ref byte[] packet, ref int offset)
	{
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0xA6D228", Offset = "0xA6D228", VA = "0xA6D228")]
	private void PackByte(byte b, byte[] buf, ref int offset)
	{
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0xA6D62C", Offset = "0xA6D62C", VA = "0xA6D62C")]
	private byte ReadByte(byte[] buf, ref int offset)
	{
		return default(byte);
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0xA6D310", Offset = "0xA6D310", VA = "0xA6D310")]
	private void PackFloat(float f, byte[] buf, ref int offset)
	{
	}

	[Token(Token = "0x6000136")]
	[Address(RVA = "0xA6D914", Offset = "0xA6D914", VA = "0xA6D914")]
	private float ReadFloat(byte[] buf, ref int offset)
	{
		return default(float);
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0xA6D270", Offset = "0xA6D270", VA = "0xA6D270")]
	private void PackULong(ulong u, byte[] buf, ref int offset)
	{
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0xA6D670", Offset = "0xA6D670", VA = "0xA6D670")]
	private ulong ReadULong(byte[] buf, ref int offset)
	{
		return default(ulong);
	}

	[Token(Token = "0x6000139")]
	[Address(RVA = "0xA6D3B8", Offset = "0xA6D3B8", VA = "0xA6D3B8")]
	private void PackUInt32(uint u, byte[] buf, ref int offset)
	{
	}

	[Token(Token = "0x600013A")]
	[Address(RVA = "0xA6D9A0", Offset = "0xA6D9A0", VA = "0xA6D9A0")]
	private uint ReadUInt32(byte[] buf, ref int offset)
	{
		return default(uint);
	}
}
[Token(Token = "0x2000033")]
public class PlayerController : SocialPlatformManager
{
	[Token(Token = "0x4000147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Camera spyCamera;

	[Token(Token = "0x4000148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private GameObject cameraRig;

	[Token(Token = "0x4000149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private bool showUI;

	[Token(Token = "0x600013B")]
	[Address(RVA = "0xA70404", Offset = "0xA70404", VA = "0xA70404", Slot = "5")]
	public override void Awake()
	{
	}

	[Token(Token = "0x600013C")]
	[Address(RVA = "0xA70440", Offset = "0xA70440", VA = "0xA70440", Slot = "6")]
	public override void Start()
	{
	}

	[Token(Token = "0x600013D")]
	[Address(RVA = "0xA70478", Offset = "0xA70478", VA = "0xA70478", Slot = "4")]
	public override void Update()
	{
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0xA704A0", Offset = "0xA704A0", VA = "0xA704A0")]
	private void checkInput()
	{
	}

	[Token(Token = "0x600013F")]
	[Address(RVA = "0xA70640", Offset = "0xA70640", VA = "0xA70640")]
	private void ToggleCamera()
	{
	}

	[Token(Token = "0x6000140")]
	[Address(RVA = "0xA706C0", Offset = "0xA706C0", VA = "0xA706C0")]
	private void ToggleUI()
	{
	}

	[Token(Token = "0x6000141")]
	[Address(RVA = "0xA70714", Offset = "0xA70714", VA = "0xA70714")]
	public PlayerController()
	{
	}
}
[Token(Token = "0x2000034")]
public class RemotePlayer
{
	[Token(Token = "0x400014A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong remoteUserID;

	[Token(Token = "0x400014B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool stillInRoom;

	[Token(Token = "0x400014C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public PeerConnectionState p2pConnectionState;

	[Token(Token = "0x400014D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PeerConnectionState voipConnectionState;

	[Token(Token = "0x400014E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OvrAvatar RemoteAvatar;

	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 receivedRootPosition;

	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Vector3 receivedRootPositionPrior;

	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Quaternion receivedRootRotation;

	[Token(Token = "0x4000152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Quaternion receivedRootRotationPrior;

	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public VoipAudioSourceHiLevel voipSource;

	[Token(Token = "0x6000142")]
	[Address(RVA = "0xA719D4", Offset = "0xA719D4", VA = "0xA719D4")]
	public RemotePlayer()
	{
	}
}
[Token(Token = "0x2000035")]
public class RoomManager
{
	[Token(Token = "0x4000154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong roomID;

	[Token(Token = "0x4000155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ulong invitedRoomID;

	[Token(Token = "0x4000156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool amIServer;

	[Token(Token = "0x4000157")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	private bool startupDone;

	[Token(Token = "0x6000143")]
	[Address(RVA = "0xA719DC", Offset = "0xA719DC", VA = "0xA719DC")]
	public RoomManager()
	{
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0xA71AA8", Offset = "0xA71AA8", VA = "0xA71AA8")]
	private void AcceptingInviteCallback(Message<string> msg)
	{
	}

	[Token(Token = "0x6000145")]
	[Address(RVA = "0xA71C08", Offset = "0xA71C08", VA = "0xA71C08")]
	public bool CheckForInvite()
	{
		return default(bool);
	}

	[Token(Token = "0x6000146")]
	[Address(RVA = "0xA71D18", Offset = "0xA71D18", VA = "0xA71D18")]
	public void CreateRoom()
	{
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0xA71DCC", Offset = "0xA71DCC", VA = "0xA71DCC")]
	private void CreateAndJoinPrivateRoomCallback(Message<Room> msg)
	{
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0xA71F00", Offset = "0xA71F00", VA = "0xA71F00")]
	private void OnLaunchInviteWorkflowComplete(Oculus.Platform.Message msg)
	{
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0xA71C38", Offset = "0xA71C38", VA = "0xA71C38")]
	public void JoinExistingRoom(ulong roomID)
	{
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0xA71F8C", Offset = "0xA71F8C", VA = "0xA71F8C")]
	private void JoinRoomCallback(Message<Room> msg)
	{
	}

	[Token(Token = "0x600014B")]
	[Address(RVA = "0xA72628", Offset = "0xA72628", VA = "0xA72628")]
	private void RoomUpdateCallback(Message<Room> msg)
	{
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0xA728F8", Offset = "0xA728F8", VA = "0xA728F8")]
	public void LeaveCurrentRoom()
	{
	}

	[Token(Token = "0x600014D")]
	[Address(RVA = "0xA7222C", Offset = "0xA7222C", VA = "0xA7222C")]
	private void ProcessRoomData(Message<Room> msg)
	{
	}
}
[Token(Token = "0x2000036")]
public class SocialPlatformManager : MonoBehaviour
{
	[Token(Token = "0x20005EB")]
	public enum State
	{
		[Token(Token = "0x400237C")]
		INITIALIZING,
		[Token(Token = "0x400237D")]
		CHECKING_LAUNCH_STATE,
		[Token(Token = "0x400237E")]
		CREATING_A_ROOM,
		[Token(Token = "0x400237F")]
		WAITING_IN_A_ROOM,
		[Token(Token = "0x4002380")]
		JOINING_A_ROOM,
		[Token(Token = "0x4002381")]
		CONNECTED_IN_A_ROOM,
		[Token(Token = "0x4002382")]
		LEAVING_A_ROOM,
		[Token(Token = "0x4002383")]
		SHUTDOWN
	}

	[Token(Token = "0x4000158")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Vector3 START_ROTATION_ONE;

	[Token(Token = "0x4000159")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static readonly Vector3 START_POSITION_ONE;

	[Token(Token = "0x400015A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly Vector3 START_ROTATION_TWO;

	[Token(Token = "0x400015B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private static readonly Vector3 START_POSITION_TWO;

	[Token(Token = "0x400015C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static readonly Vector3 START_ROTATION_THREE;

	[Token(Token = "0x400015D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private static readonly Vector3 START_POSITION_THREE;

	[Token(Token = "0x400015E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static readonly Vector3 START_ROTATION_FOUR;

	[Token(Token = "0x400015F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private static readonly Vector3 START_POSITION_FOUR;

	[Token(Token = "0x4000160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static readonly Color BLACK;

	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static readonly Color WHITE;

	[Token(Token = "0x4000162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private static readonly Color CYAN;

	[Token(Token = "0x4000163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private static readonly Color BLUE;

	[Token(Token = "0x4000164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private static readonly Color GREEN;

	[Token(Token = "0x4000165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float voiceCurrent;

	[Token(Token = "0x4000166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private uint packetSequence;

	[Token(Token = "0x4000167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OvrAvatar localAvatarPrefab;

	[Token(Token = "0x4000168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OvrAvatar remoteAvatarPrefab;

	[Token(Token = "0x4000169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject helpPanel;

	[Token(Token = "0x400016A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected MeshRenderer helpMesh;

	[Token(Token = "0x400016B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Material riftMaterial;

	[Token(Token = "0x400016C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Material gearMaterial;

	[Token(Token = "0x400016D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected OvrAvatar localAvatar;

	[Token(Token = "0x400016E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected GameObject localTrackingSpace;

	[Token(Token = "0x400016F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected GameObject localPlayerHead;

	[Token(Token = "0x4000170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected Dictionary<ulong, RemotePlayer> remoteUsers;

	[Token(Token = "0x4000171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject roomSphere;

	[Token(Token = "0x4000172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected MeshRenderer sphereMesh;

	[Token(Token = "0x4000173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject roomFloor;

	[Token(Token = "0x4000174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	protected MeshRenderer floorMesh;

	[Token(Token = "0x4000175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	protected State currentState;

	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected static SocialPlatformManager s_instance;

	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	protected RoomManager roomManager;

	[Token(Token = "0x4000178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	protected P2PManager p2pManager;

	[Token(Token = "0x4000179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	protected VoipManager voipManager;

	[Token(Token = "0x400017A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected ulong myID;

	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	protected string myOculusID;

	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public static readonly float VOIP_SCALE;

	[Token(Token = "0x17000006")]
	public static State CurrentState
	{
		[Token(Token = "0x600015A")]
		[Address(RVA = "0xADBA88", Offset = "0xADBA88", VA = "0xADBA88")]
		get
		{
			return default(State);
		}
	}

	[Token(Token = "0x17000007")]
	public static ulong MyID
	{
		[Token(Token = "0x600015B")]
		[Address(RVA = "0xADBAFC", Offset = "0xADBAFC", VA = "0xADBAFC")]
		get
		{
			return default(ulong);
		}
	}

	[Token(Token = "0x17000008")]
	public static string MyOculusID
	{
		[Token(Token = "0x600015C")]
		[Address(RVA = "0xADBBD4", Offset = "0xADBBD4", VA = "0xADBBD4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600014E")]
	[Address(RVA = "0xAD9D20", Offset = "0xAD9D20", VA = "0xAD9D20", Slot = "4")]
	public virtual void Update()
	{
	}

	[Token(Token = "0x600014F")]
	[Address(RVA = "0xADA0AC", Offset = "0xADA0AC", VA = "0xADA0AC", Slot = "5")]
	public virtual void Awake()
	{
	}

	[Token(Token = "0x6000150")]
	[Address(RVA = "0xADA788", Offset = "0xADA788", VA = "0xADA788")]
	private void InitCallback(Message<PlatformInitialize> msg)
	{
	}

	[Token(Token = "0x6000151")]
	[Address(RVA = "0xADAA50", Offset = "0xADAA50", VA = "0xADAA50", Slot = "6")]
	public virtual void Start()
	{
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0xADAA54", Offset = "0xADAA54", VA = "0xADAA54")]
	private void IsEntitledCallback(Oculus.Platform.Message msg)
	{
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0xADAB48", Offset = "0xADAB48", VA = "0xADAB48")]
	private void GetLoggedInUserCallback(Message<User> msg)
	{
	}

	[Token(Token = "0x6000154")]
	[Address(RVA = "0xADB23C", Offset = "0xADB23C", VA = "0xADB23C")]
	private void GetLoggedInUserFriendsAndRoomsCallback(Message<UserAndRoomList> msg)
	{
	}

	[Token(Token = "0x6000155")]
	[Address(RVA = "0xADB6FC", Offset = "0xADB6FC", VA = "0xADB6FC")]
	public void OnLocalAvatarPacketRecorded(object sender, OvrAvatar.PacketEventArgs args)
	{
	}

	[Token(Token = "0x6000156")]
	[Address(RVA = "0xADB8C8", Offset = "0xADB8C8", VA = "0xADB8C8")]
	public void OnApplicationQuit()
	{
	}

	[Token(Token = "0x6000157")]
	[Address(RVA = "0xADBA18", Offset = "0xADBA18", VA = "0xADBA18")]
	public void AddUser(ulong userID, ref RemotePlayer remoteUser)
	{
	}

	[Token(Token = "0x6000158")]
	[Address(RVA = "0xADA3AC", Offset = "0xADA3AC", VA = "0xADA3AC")]
	public void LogOutputLine(string line)
	{
	}

	[Token(Token = "0x6000159")]
	[Address(RVA = "0xADA8E4", Offset = "0xADA8E4", VA = "0xADA8E4")]
	public static void TerminateWithError(Oculus.Platform.Message msg)
	{
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0xADA460", Offset = "0xADA460", VA = "0xADA460")]
	public static void TransitionToState(State newState)
	{
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0xADBCE8", Offset = "0xADBCE8", VA = "0xADBCE8")]
	private static void SetSphereColorForState()
	{
	}

	[Token(Token = "0x600015F")]
	[Address(RVA = "0xADBE68", Offset = "0xADBE68", VA = "0xADBE68")]
	public static void SetFloorColorForState(bool host)
	{
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0xADBF50", Offset = "0xADBF50", VA = "0xADBF50")]
	public static void MarkAllRemoteUsersAsNotInRoom()
	{
	}

	[Token(Token = "0x6000161")]
	[Address(RVA = "0xADC074", Offset = "0xADC074", VA = "0xADC074")]
	public static void MarkRemoteUserInRoom(ulong userID)
	{
	}

	[Token(Token = "0x6000162")]
	[Address(RVA = "0xADC144", Offset = "0xADC144", VA = "0xADC144")]
	public static void ForgetRemoteUsersNotInRoom()
	{
	}

	[Token(Token = "0x6000163")]
	[Address(RVA = "0xADA994", Offset = "0xADA994", VA = "0xADA994")]
	public static void LogOutput(string line)
	{
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0xADC570", Offset = "0xADC570", VA = "0xADC570")]
	public static bool IsUserInRoom(ulong userID)
	{
		return default(bool);
	}

	[Token(Token = "0x6000165")]
	[Address(RVA = "0xADC5FC", Offset = "0xADC5FC", VA = "0xADC5FC")]
	public static void AddRemoteUser(ulong userID)
	{
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0xADC394", Offset = "0xADC394", VA = "0xADC394")]
	public static void RemoveRemoteUser(ulong userID)
	{
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0xADC7D0", Offset = "0xADC7D0", VA = "0xADC7D0")]
	public void UpdateVoiceData(short[] pcmData, int numChannels)
	{
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0xAD9C98", Offset = "0xAD9C98", VA = "0xAD9C98")]
	[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x82F1F0", Offset = "0x82F1F0")]
	public static void MicFilter(short[] pcmData, UIntPtr pcmDataLength, int frequency, int numChannels)
	{
	}

	[Token(Token = "0x6000169")]
	[Address(RVA = "0xADC90C", Offset = "0xADC90C", VA = "0xADC90C")]
	public static RemotePlayer GetRemoteUser(ulong userID)
	{
		return null;
	}

	[Token(Token = "0x600016A")]
	[Address(RVA = "0xADC9D4", Offset = "0xADC9D4", VA = "0xADC9D4")]
	public SocialPlatformManager()
	{
	}
}
[Token(Token = "0x2000037")]
public class VoipManager
{
	[Token(Token = "0x600016C")]
	[Address(RVA = "0x16E475C", Offset = "0x16E475C", VA = "0x16E475C")]
	public VoipManager()
	{
	}

	[Token(Token = "0x600016D")]
	[Address(RVA = "0x16E481C", Offset = "0x16E481C", VA = "0x16E481C")]
	public void ConnectTo(ulong userID)
	{
	}

	[Token(Token = "0x600016E")]
	[Address(RVA = "0x16E4900", Offset = "0x16E4900", VA = "0x16E4900")]
	public void Disconnect(ulong userID)
	{
	}

	[Token(Token = "0x600016F")]
	[Address(RVA = "0x16E4984", Offset = "0x16E4984", VA = "0x16E4984")]
	private void VoipConnectRequestCallback(Message<NetworkingPeer> msg)
	{
	}

	[Token(Token = "0x6000170")]
	[Address(RVA = "0x16E4AE0", Offset = "0x16E4AE0", VA = "0x16E4AE0")]
	private void VoipStateChangedCallback(Message<NetworkingPeer> msg)
	{
	}
}
[Token(Token = "0x2000038")]
public class GazeTarget : MonoBehaviour
{
	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ovrAvatarGazeTargetType Type;

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ovrAvatarGazeTargets RuntimeTargetList;

	[Token(Token = "0x6000171")]
	[Address(RVA = "0xA57C7C", Offset = "0xA57C7C", VA = "0xA57C7C")]
	static GazeTarget()
	{
	}

	[Token(Token = "0x6000172")]
	[Address(RVA = "0xA57CEC", Offset = "0xA57CEC", VA = "0xA57CEC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0xA57E68", Offset = "0xA57E68", VA = "0xA57E68")]
	private void Update()
	{
	}

	[Token(Token = "0x6000174")]
	[Address(RVA = "0xA57ECC", Offset = "0xA57ECC", VA = "0xA57ECC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000175")]
	[Address(RVA = "0xA57D28", Offset = "0xA57D28", VA = "0xA57D28")]
	private void UpdateGazeTarget()
	{
	}

	[Token(Token = "0x6000176")]
	[Address(RVA = "0xA57F88", Offset = "0xA57F88", VA = "0xA57F88")]
	private ovrAvatarGazeTarget CreateOvrGazeTarget(uint targetId, Vector3 targetPosition, ovrAvatarGazeTargetType targetType)
	{
		return default(ovrAvatarGazeTarget);
	}

	[Token(Token = "0x6000177")]
	[Address(RVA = "0xA57FE8", Offset = "0xA57FE8", VA = "0xA57FE8")]
	public GazeTarget()
	{
	}
}
[Serializable]
[Token(Token = "0x2000039")]
public class AvatarLayer
{
	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int layerIndex;

	[Token(Token = "0x6000178")]
	[Address(RVA = "0xA778F8", Offset = "0xA778F8", VA = "0xA778F8")]
	public AvatarLayer()
	{
	}
}
[Serializable]
[Token(Token = "0x200003A")]
public class PacketRecordSettings
{
	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	internal bool RecordingFrames;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float UpdateRate;

	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	internal float AccumulatedTime;

	[Token(Token = "0x6000179")]
	[Address(RVA = "0xA6DA2C", Offset = "0xA6DA2C", VA = "0xA6DA2C")]
	public PacketRecordSettings()
	{
	}
}
[Token(Token = "0x200003B")]
public class OvrAvatar : MonoBehaviour
{
	[Token(Token = "0x20005EC")]
	public class PacketEventArgs : EventArgs
	{
		[Token(Token = "0x4002384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly OvrAvatarPacket Packet;

		[Token(Token = "0x600330A")]
		[Address(RVA = "0xAD3824", Offset = "0xAD3824", VA = "0xAD3824")]
		public PacketEventArgs(OvrAvatarPacket packet)
		{
		}
	}

	[Token(Token = "0x20005ED")]
	public enum HandType
	{
		[Token(Token = "0x4002386")]
		Right,
		[Token(Token = "0x4002387")]
		Left,
		[Token(Token = "0x4002388")]
		Max
	}

	[Token(Token = "0x20005EE")]
	public enum HandJoint
	{
		[Token(Token = "0x400238A")]
		HandBase,
		[Token(Token = "0x400238B")]
		IndexBase,
		[Token(Token = "0x400238C")]
		IndexTip,
		[Token(Token = "0x400238D")]
		ThumbBase,
		[Token(Token = "0x400238E")]
		ThumbTip,
		[Token(Token = "0x400238F")]
		Max
	}

	[Token(Token = "0x20005EF")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820AB8", Offset = "0x820AB8")]
	private sealed class <WaitForMouthAudioSource>d__136 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4002390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4002391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4002392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OvrAvatar <>4__this;

		[Token(Token = "0x170006BA")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600330E")]
			[Address(RVA = "0xAD54A8", Offset = "0xAD54A8", VA = "0xAD54A8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006BB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6003310")]
			[Address(RVA = "0xAD5510", Offset = "0xAD5510", VA = "0xAD5510", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600330B")]
		[Address(RVA = "0xAD50AC", Offset = "0xAD50AC", VA = "0xAD50AC")]
		[DebuggerHidden]
		public <WaitForMouthAudioSource>d__136(int <>1__state)
		{
		}

		[Token(Token = "0x600330C")]
		[Address(RVA = "0xAD5318", Offset = "0xAD5318", VA = "0xAD5318", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600330D")]
		[Address(RVA = "0xAD531C", Offset = "0xAD531C", VA = "0xAD531C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600330F")]
		[Address(RVA = "0xAD54B0", Offset = "0xAD54B0", VA = "0xAD54B0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8213AC", Offset = "0x8213AC")]
	public IntPtr sdkAvatar;

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string oculusUserID;

	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OvrAvatarDriver Driver;

	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8213E4", Offset = "0x8213E4")]
	public bool EnableBody;

	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool EnableHands;

	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	public bool EnableBase;

	[Token(Token = "0x4000189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
	public bool EnableExpressive;

	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82141C", Offset = "0x82141C")]
	public bool RecordPackets;

	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool UseSDKPackets;

	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public PacketRecordSettings PacketSettings;

	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x821454", Offset = "0x821454")]
	public bool StartWithControllers;

	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AvatarLayer FirstPersonLayer;

	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AvatarLayer ThirdPersonLayer;

	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool ShowFirstPerson;

	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	public bool ShowThirdPerson;

	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	internal ovrAvatarCapabilities Capabilities;

	[Token(Token = "0x4000193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82148C", Offset = "0x82148C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82148C", Offset = "0x82148C")]
	[SerializeField]
	internal ovrAvatarAssetLevelOfDetail LevelOfDetail;

	[Token(Token = "0x4000194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8214FC", Offset = "0x8214FC")]
	private bool CombineMeshes;

	[Token(Token = "0x4000195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x821534", Offset = "0x821534")]
	public bool UseTransparentRenderQueue;

	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82156C", Offset = "0x82156C")]
	public Shader Monochrome_SurfaceShader;

	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Shader Monochrome_SurfaceShader_SelfOccluding;

	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Shader Monochrome_SurfaceShader_PBS;

	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Shader Skinshaded_SurfaceShader_SingleComponent;

	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Shader Skinshaded_VertFrag_SingleComponent;

	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Shader Skinshaded_VertFrag_CombinedMesh;

	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Shader Skinshaded_Expressive_SurfaceShader_SingleComponent;

	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Shader Skinshaded_Expressive_VertFrag_SingleComponent;

	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Shader Skinshaded_Expressive_VertFrag_CombinedMesh;

	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Shader Loader_VertFrag_CombinedMesh;

	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Shader EyeLens;

	[Token(Token = "0x40001A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Shader ControllerShader;

	[Token(Token = "0x40001A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8215A4", Offset = "0x8215A4")]
	public bool CanOwnMicrophone;

	[Token(Token = "0x40001A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8215DC", Offset = "0x8215DC")]
	public bool EnableLaughter;

	[Token(Token = "0x40001A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public GameObject MouthAnchor;

	[Token(Token = "0x40001A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public Transform LeftHandCustomPose;

	[Token(Token = "0x40001A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Transform RightHandCustomPose;

	[Token(Token = "0x40001A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private HashSet<ulong> assetLoadingIds;

	[Token(Token = "0x40001A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private bool assetsFinishedLoading;

	[Token(Token = "0x40001A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private OvrAvatarMaterialManager materialManager;

	[Token(Token = "0x40001AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private bool waitingForCombinedMesh;

	[Token(Token = "0x40001AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool doneExpressiveGlobalInit;

	[Token(Token = "0x40001AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private Vector4 clothingAlphaOffset;

	[Token(Token = "0x40001AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private ulong clothingAlphaTexture;

	[Token(Token = "0x40001AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private OVRLipSyncContext lipsyncContext;

	[Token(Token = "0x40001AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private OVRLipSync.Frame currentFrame;

	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private float[] visemes;

	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private AudioSource audioSource;

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private ONSPAudioSource spatializedSource;

	[Token(Token = "0x40001B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private List<float[]> voiceUpdates;

	[Token(Token = "0x40001B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static ovrAvatarVisemes RuntimeVisemes;

	[Token(Token = "0x40001B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private Transform cachedLeftHandCustomPose;

	[Token(Token = "0x40001B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private Transform[] cachedCustomLeftHandJoints;

	[Token(Token = "0x40001B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private ovrAvatarTransform[] cachedLeftHandTransforms;

	[Token(Token = "0x40001B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private Transform cachedRightHandCustomPose;

	[Token(Token = "0x40001B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private Transform[] cachedCustomRightHandJoints;

	[Token(Token = "0x40001BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private ovrAvatarTransform[] cachedRightHandTransforms;

	[Token(Token = "0x40001BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private bool showLeftController;

	[Token(Token = "0x40001BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x181")]
	private bool showRightController;

	[Token(Token = "0x40001BD")]
	private const bool USE_MOBILE_TEXTURE_FORMAT = true;

	[Token(Token = "0x40001BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly Vector3 MOUTH_HEAD_OFFSET;

	[Token(Token = "0x40001BF")]
	private const string MOUTH_HELPER_NAME = "MouthAnchor";

	[Token(Token = "0x40001C0")]
	private const int VISEME_COUNT = 16;

	[Token(Token = "0x40001C1")]
	private const float ACTION_UNIT_ONSET_SPEED = 30f;

	[Token(Token = "0x40001C2")]
	private const float ACTION_UNIT_FALLOFF_SPEED = 20f;

	[Token(Token = "0x40001C3")]
	private const float VISEME_LEVEL_MULTIPLIER = 1.5f;

	[Token(Token = "0x40001C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	internal ulong oculusUserIDInternal;

	[Token(Token = "0x40001C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	internal OvrAvatarBase Base;

	[Token(Token = "0x40001C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	internal OvrAvatarTouchController ControllerLeft;

	[Token(Token = "0x40001C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	internal OvrAvatarTouchController ControllerRight;

	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	internal OvrAvatarBody Body;

	[Token(Token = "0x40001C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	internal OvrAvatarHand HandLeft;

	[Token(Token = "0x40001CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	internal OvrAvatarHand HandRight;

	[Token(Token = "0x40001CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	internal ovrAvatarLookAndFeelVersion LookAndFeelVersion;

	[Token(Token = "0x40001CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
	internal ovrAvatarLookAndFeelVersion FallbackLookAndFeelVersion;

	[Token(Token = "0x40001CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	private OvrAvatarPacket CurrentUnityPacket;

	[Token(Token = "0x40001CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	public EventHandler<PacketEventArgs> PacketRecorded;

	[Token(Token = "0x40001CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static string[,] HandJoints;

	[Token(Token = "0x40001D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static Vector3 MOUTH_POSITION_OFFSET;

	[Token(Token = "0x40001D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static string VOICE_PROPERTY;

	[Token(Token = "0x40001D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static string MOUTH_POSITION_PROPERTY;

	[Token(Token = "0x40001D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static string MOUTH_DIRECTION_PROPERTY;

	[Token(Token = "0x40001D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static string MOUTH_SCALE_PROPERTY;

	[Token(Token = "0x40001D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static float MOUTH_SCALE_GLOBAL;

	[Token(Token = "0x40001D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private static float MOUTH_MAX_GLOBAL;

	[Token(Token = "0x40001D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private static string NECK_JONT;

	[Token(Token = "0x40001D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	public float VoiceAmplitude;

	[Token(Token = "0x40001D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
	public bool EnableMouthVertexAnimation;

	[Token(Token = "0x40001DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static ovrAvatarLights ovrLights;

	[Token(Token = "0x600017A")]
	[Address(RVA = "0xAD07F8", Offset = "0xAD07F8", VA = "0xAD07F8")]
	static OvrAvatar()
	{
	}

	[Token(Token = "0x600017B")]
	[Address(RVA = "0xAD0B60", Offset = "0xAD0B60", VA = "0xAD0B60")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600017C")]
	[Address(RVA = "0xAD0BEC", Offset = "0xAD0BEC", VA = "0xAD0BEC")]
	public void AssetLoadedCallback(OvrAvatarAsset asset)
	{
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0xAD0C58", Offset = "0xAD0C58", VA = "0xAD0C58")]
	public void CombinedMeshLoadedCallback(IntPtr assetPtr)
	{
	}

	[Token(Token = "0x600017E")]
	[Address(RVA = "0xAD0D80", Offset = "0xAD0D80", VA = "0xAD0D80")]
	private OvrAvatarSkinnedMeshRenderComponent AddSkinnedMeshRenderComponent(GameObject gameObject, ovrAvatarRenderPart_SkinnedMeshRender skinnedMeshRender)
	{
		return null;
	}

	[Token(Token = "0x600017F")]
	[Address(RVA = "0xAD0E64", Offset = "0xAD0E64", VA = "0xAD0E64")]
	private OvrAvatarSkinnedMeshRenderPBSComponent AddSkinnedMeshRenderPBSComponent(GameObject gameObject, ovrAvatarRenderPart_SkinnedMeshRenderPBS skinnedMeshRenderPBS)
	{
		return null;
	}

	[Token(Token = "0x6000180")]
	[Address(RVA = "0xAD0F44", Offset = "0xAD0F44", VA = "0xAD0F44")]
	private OvrAvatarSkinnedMeshPBSV2RenderComponent AddSkinnedMeshRenderPBSV2Component(IntPtr renderPart, GameObject go, ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2 skinnedMeshRenderPBSV2, bool isBodyPartZero, bool isControllerModel)
	{
		return null;
	}

	[Token(Token = "0x6000181")]
	[Address(RVA = "0xAD112C", Offset = "0xAD112C", VA = "0xAD112C")]
	public static IntPtr GetRenderPart(ovrAvatarComponent component, uint renderPartIndex)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6000182")]
	[Address(RVA = "0xAD11F4", Offset = "0xAD11F4", VA = "0xAD11F4")]
	private static string GetRenderPartName(ovrAvatarComponent component, uint renderPartIndex)
	{
		return null;
	}

	[Token(Token = "0x6000183")]
	[Address(RVA = "0xAD1278", Offset = "0xAD1278", VA = "0xAD1278")]
	internal static void ConvertTransform(float[] transform, ref ovrAvatarTransform target)
	{
	}

	[Token(Token = "0x6000184")]
	[Address(RVA = "0xAD1360", Offset = "0xAD1360", VA = "0xAD1360")]
	internal static void ConvertTransform(ovrAvatarTransform transform, Transform target)
	{
	}

	[Token(Token = "0x6000185")]
	[Address(RVA = "0xAD13EC", Offset = "0xAD13EC", VA = "0xAD13EC")]
	public static ovrAvatarTransform CreateOvrAvatarTransform(Vector3 position, Quaternion orientation)
	{
		return default(ovrAvatarTransform);
	}

	[Token(Token = "0x6000186")]
	[Address(RVA = "0xAD1508", Offset = "0xAD1508", VA = "0xAD1508")]
	private static ovrAvatarGazeTarget CreateOvrGazeTarget(uint targetId, Vector3 targetPosition, ovrAvatarGazeTargetType targetType)
	{
		return default(ovrAvatarGazeTarget);
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0xAD1568", Offset = "0xAD1568", VA = "0xAD1568")]
	private void BuildRenderComponents()
	{
	}

	[Token(Token = "0x6000188")]
	private void AddAvatarComponent<T>(ref T root, ovrAvatarComponent nativeComponent) where T : OvrAvatarComponent
	{
	}

	[Token(Token = "0x6000189")]
	[Address(RVA = "0xAD19EC", Offset = "0xAD19EC", VA = "0xAD19EC")]
	private void UpdateCustomPoses()
	{
	}

	[Token(Token = "0x600018A")]
	[Address(RVA = "0xAD1D4C", Offset = "0xAD1D4C", VA = "0xAD1D4C")]
	private static bool UpdatePoseRoot(Transform poseRoot, ref Transform cachedPoseRoot, ref Transform[] cachedPoseJoints, ref ovrAvatarTransform[] transforms)
	{
		return default(bool);
	}

	[Token(Token = "0x600018B")]
	[Address(RVA = "0xAD1EB0", Offset = "0xAD1EB0", VA = "0xAD1EB0")]
	private static bool UpdateTransforms(Transform[] joints, ovrAvatarTransform[] transforms)
	{
		return default(bool);
	}

	[Token(Token = "0x600018C")]
	[Address(RVA = "0xAD2178", Offset = "0xAD2178", VA = "0xAD2178")]
	private static void OrderJoints(Transform transform, List<Transform> joints)
	{
	}

	[Token(Token = "0x600018D")]
	[Address(RVA = "0xAD2264", Offset = "0xAD2264", VA = "0xAD2264")]
	private void AvatarSpecificationCallback(IntPtr avatarSpecification)
	{
	}

	[Token(Token = "0x600018E")]
	[Address(RVA = "0xAD2618", Offset = "0xAD2618", VA = "0xAD2618")]
	private void Start()
	{
	}

	[Token(Token = "0x600018F")]
	[Address(RVA = "0xAD2918", Offset = "0xAD2918", VA = "0xAD2918")]
	private void Update()
	{
	}

	[Token(Token = "0x6000190")]
	[Address(RVA = "0xAD32C0", Offset = "0xAD32C0", VA = "0xAD32C0")]
	public static ovrAvatarHandInputState CreateInputState(ovrAvatarTransform transform, OvrAvatarDriver.ControllerPose pose)
	{
		return default(ovrAvatarHandInputState);
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0xAD3314", Offset = "0xAD3314", VA = "0xAD3314")]
	public void ShowControllers(bool show)
	{
	}

	[Token(Token = "0x6000192")]
	[Address(RVA = "0xAD24E0", Offset = "0xAD24E0", VA = "0xAD24E0")]
	public void ShowLeftController(bool show)
	{
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0xAD257C", Offset = "0xAD257C", VA = "0xAD257C")]
	public void ShowRightController(bool show)
	{
	}

	[Token(Token = "0x6000194")]
	[Address(RVA = "0xAD3344", Offset = "0xAD3344", VA = "0xAD3344")]
	public void UpdateVoiceVisualization(float[] voiceSamples)
	{
	}

	[Token(Token = "0x6000195")]
	[Address(RVA = "0xAD2C8C", Offset = "0xAD2C8C", VA = "0xAD2C8C")]
	private void RecordFrame()
	{
	}

	[Token(Token = "0x6000196")]
	[Address(RVA = "0xAD358C", Offset = "0xAD358C", VA = "0xAD358C")]
	private void RecordUnityFrame()
	{
	}

	[Token(Token = "0x6000197")]
	[Address(RVA = "0xAD33AC", Offset = "0xAD33AC", VA = "0xAD33AC")]
	private void RecordSDKFrame()
	{
	}

	[Token(Token = "0x6000198")]
	[Address(RVA = "0xAD38A0", Offset = "0xAD38A0", VA = "0xAD38A0")]
	private void AddRenderParts(OvrAvatarComponent ovrComponent, ovrAvatarComponent component, Transform parent)
	{
	}

	[Token(Token = "0x6000199")]
	[Address(RVA = "0xAD3CA4", Offset = "0xAD3CA4", VA = "0xAD3CA4")]
	public void RefreshBodyParts()
	{
	}

	[Token(Token = "0x600019A")]
	[Address(RVA = "0xAD3ED4", Offset = "0xAD3ED4", VA = "0xAD3ED4")]
	public ovrAvatarBodyComponent? GetBodyComponent()
	{
		return null;
	}

	[Token(Token = "0x600019B")]
	[Address(RVA = "0xAD4014", Offset = "0xAD4014", VA = "0xAD4014")]
	public Transform GetHandTransform(HandType hand, HandJoint joint)
	{
		return null;
	}

	[Token(Token = "0x600019C")]
	[Address(RVA = "0xAD41CC", Offset = "0xAD41CC", VA = "0xAD41CC")]
	public void GetPointingDirection(HandType hand, ref Vector3 forward, ref Vector3 up)
	{
	}

	[Token(Token = "0x600019D")]
	[Address(RVA = "0xAD2DC4", Offset = "0xAD2DC4", VA = "0xAD2DC4")]
	private void UpdateVoiceBehavior()
	{
	}

	[Token(Token = "0x600019E")]
	[Address(RVA = "0xAD42A4", Offset = "0xAD42A4", VA = "0xAD42A4")]
	private bool IsValidMic()
	{
		return default(bool);
	}

	[Token(Token = "0x600019F")]
	[Address(RVA = "0xAD2C9C", Offset = "0xAD2C9C", VA = "0xAD2C9C")]
	private void InitPostLoad()
	{
	}

	[Token(Token = "0x60001A0")]
	[Address(RVA = "0xAD42AC", Offset = "0xAD42AC", VA = "0xAD42AC")]
	private static void ExpressiveGlobalInit()
	{
	}

	[Token(Token = "0x60001A1")]
	[Address(RVA = "0xAD4858", Offset = "0xAD4858", VA = "0xAD4858")]
	private static void InitializeLights()
	{
	}

	[Token(Token = "0x60001A2")]
	[Address(RVA = "0xAD4D18", Offset = "0xAD4D18", VA = "0xAD4D18")]
	private static ovrAvatarLight CreateLightDirectional(uint id, Vector3 direction, float intensity, ref ovrAvatarLight light)
	{
		return default(ovrAvatarLight);
	}

	[Token(Token = "0x60001A3")]
	[Address(RVA = "0xAD4D90", Offset = "0xAD4D90", VA = "0xAD4D90")]
	private static ovrAvatarLight CreateLightPoint(uint id, Vector3 position, float range, float intensity, ref ovrAvatarLight light)
	{
		return default(ovrAvatarLight);
	}

	[Token(Token = "0x60001A4")]
	[Address(RVA = "0xAD4E0C", Offset = "0xAD4E0C", VA = "0xAD4E0C")]
	private static ovrAvatarLight CreateLightSpot(uint id, Vector3 position, Vector3 direction, float spotAngleDeg, float range, float intensity, ref ovrAvatarLight light)
	{
		return default(ovrAvatarLight);
	}

	[Token(Token = "0x60001A5")]
	[Address(RVA = "0xAD315C", Offset = "0xAD315C", VA = "0xAD315C")]
	private void UpdateExpressive()
	{
	}

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0xAD4368", Offset = "0xAD4368", VA = "0xAD4368")]
	private void ConfigureHelpers()
	{
	}

	[Token(Token = "0x60001A7")]
	[Address(RVA = "0xAD503C", Offset = "0xAD503C", VA = "0xAD503C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x82F254", Offset = "0x82F254")]
	private IEnumerator WaitForMouthAudioSource()
	{
		return null;
	}

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0xAD50D8", Offset = "0xAD50D8", VA = "0xAD50D8")]
	public void DestroyHelperObjects()
	{
	}

	[Token(Token = "0x60001A9")]
	[Address(RVA = "0xAD4EE0", Offset = "0xAD4EE0", VA = "0xAD4EE0")]
	public GameObject CreateHelperObject(Transform parent, Vector3 localPositionOffset, string helperName, string helperTag = "")
	{
		return null;
	}

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0xAD51A0", Offset = "0xAD51A0", VA = "0xAD51A0")]
	public void UpdateVoiceData(short[] pcmData, int numChannels)
	{
	}

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0xAD51A4", Offset = "0xAD51A4", VA = "0xAD51A4")]
	public void UpdateVoiceData(float[] pcmData, int numChannels)
	{
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0xAD4EDC", Offset = "0xAD4EDC", VA = "0xAD4EDC")]
	private void UpdateFacewave()
	{
	}

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0xAD51A8", Offset = "0xAD51A8", VA = "0xAD51A8")]
	public OvrAvatar()
	{
	}
}
[Token(Token = "0x200003C")]
public class OvrAvatarAsset
{
	[Token(Token = "0x40001DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong assetID;

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0xAD5518", Offset = "0xAD5518", VA = "0xAD5518")]
	public OvrAvatarAsset()
	{
	}
}
[Token(Token = "0x200003D")]
public class OvrAvatarAssetMesh : OvrAvatarAsset
{
	[Token(Token = "0x40001DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Mesh mesh;

	[Token(Token = "0x40001DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ovrAvatarSkinnedMeshPose skinnedBindPose;

	[Token(Token = "0x40001DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string[] jointNames;

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0xAD55C8", Offset = "0xAD55C8", VA = "0xAD55C8")]
	public OvrAvatarAssetMesh(ulong _assetId, IntPtr asset, ovrAvatarAssetType meshType)
	{
	}

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0xAD68A8", Offset = "0xAD68A8", VA = "0xAD68A8")]
	private void LoadSubmeshes(IntPtr asset, IntPtr indexBufferPtr, ulong indexCount)
	{
	}

	[Token(Token = "0x60001B1")]
	[Address(RVA = "0xAD644C", Offset = "0xAD644C", VA = "0xAD644C")]
	private void LoadBlendShapes(IntPtr asset, long vertexCount)
	{
	}

	[Token(Token = "0x60001B2")]
	[Address(RVA = "0xAD61F0", Offset = "0xAD61F0", VA = "0xAD61F0")]
	private void SetSkinnedBindPose(IntPtr asset, ovrAvatarAssetType meshType)
	{
	}

	[Token(Token = "0x60001B3")]
	[Address(RVA = "0xAD62C0", Offset = "0xAD62C0", VA = "0xAD62C0")]
	private void GetVertexAndIndexData(IntPtr asset, ovrAvatarAssetType meshType, out long vertexCount, out IntPtr vertexBuffer, out uint indexCount, out IntPtr indexBuffer)
	{
	}

	[Token(Token = "0x60001B4")]
	[Address(RVA = "0xAD6B0C", Offset = "0xAD6B0C", VA = "0xAD6B0C")]
	public SkinnedMeshRenderer CreateSkinnedMeshRendererOnObject(GameObject target)
	{
		return null;
	}
}
[Token(Token = "0x200003E")]
public class OvrAvatarAssetTexture : OvrAvatarAsset
{
	[Token(Token = "0x40001DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture2D texture;

	[Token(Token = "0x40001E0")]
	private const int ASTCHeaderSize = 16;

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0xA607B0", Offset = "0xA607B0", VA = "0xA607B0")]
	public OvrAvatarAssetTexture(ulong _assetId, IntPtr asset)
	{
	}
}
[Token(Token = "0x200003F")]
public class OvrAvatarBase : OvrAvatarComponent
{
	[Token(Token = "0x40001E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private ovrAvatarBaseComponent component;

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0xA60A18", Offset = "0xA60A18", VA = "0xA60A18")]
	private void Update()
	{
	}

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0xA60E18", Offset = "0xA60E18", VA = "0xA60E18")]
	public OvrAvatarBase()
	{
	}
}
[Token(Token = "0x2000040")]
public class OvrAvatarBody : OvrAvatarComponent
{
	[Token(Token = "0x40001E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ovrAvatarBodyComponent component;

	[Token(Token = "0x60001B8")]
	[Address(RVA = "0xA60F14", Offset = "0xA60F14", VA = "0xA60F14")]
	public ovrAvatarComponent? GetNativeAvatarComponent()
	{
		return null;
	}

	[Token(Token = "0x60001B9")]
	[Address(RVA = "0xA61070", Offset = "0xA61070", VA = "0xA61070")]
	private void Update()
	{
	}

	[Token(Token = "0x60001BA")]
	[Address(RVA = "0xA6118C", Offset = "0xA6118C", VA = "0xA6118C")]
	public OvrAvatarBody()
	{
	}
}
[Token(Token = "0x2000041")]
public class OvrAvatarComponent : MonoBehaviour
{
	[Token(Token = "0x40001E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly string[] LayerKeywords;

	[Token(Token = "0x40001E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static readonly string[] LayerSampleModeParameters;

	[Token(Token = "0x40001E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static readonly string[] LayerBlendModeParameters;

	[Token(Token = "0x40001E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static readonly string[] LayerMaskTypeParameters;

	[Token(Token = "0x40001E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static readonly string[] LayerColorParameters;

	[Token(Token = "0x40001E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static readonly string[] LayerSurfaceParameters;

	[Token(Token = "0x40001E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static readonly string[] LayerSampleParametersParameters;

	[Token(Token = "0x40001EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static readonly string[] LayerMaskParametersParameters;

	[Token(Token = "0x40001EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static readonly string[] LayerMaskAxisParameters;

	[Token(Token = "0x40001EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<Material, ovrAvatarMaterialState> materialStates;

	[Token(Token = "0x40001ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<OvrAvatarRenderComponent> RenderParts;

	[Token(Token = "0x40001EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected OvrAvatar owner;

	[Token(Token = "0x40001EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected ovrAvatarComponent nativeAvatarComponent;

	[Token(Token = "0x60001BB")]
	[Address(RVA = "0xA611F0", Offset = "0xA611F0", VA = "0xA611F0")]
	public void SetOvrAvatarOwner(OvrAvatar ovrAvatarOwner)
	{
	}

	[Token(Token = "0x60001BC")]
	[Address(RVA = "0xA60B34", Offset = "0xA60B34", VA = "0xA60B34")]
	public void UpdateAvatar(IntPtr nativeComponent)
	{
	}

	[Token(Token = "0x60001BD")]
	[Address(RVA = "0xA617D4", Offset = "0xA617D4", VA = "0xA617D4")]
	protected void UpdateActive(OvrAvatar avatar, ovrAvatarVisibilityFlags mask)
	{
	}

	[Token(Token = "0x60001BE")]
	[Address(RVA = "0xA61834", Offset = "0xA61834", VA = "0xA61834")]
	public void UpdateAvatarMaterial(Material mat, ovrAvatarMaterialState matState)
	{
	}

	[Token(Token = "0x60001BF")]
	[Address(RVA = "0xA62018", Offset = "0xA62018", VA = "0xA62018")]
	public static Texture2D GetLoadedTexture(ulong assetId)
	{
		return null;
	}

	[Token(Token = "0x60001C0")]
	[Address(RVA = "0xA60E7C", Offset = "0xA60E7C", VA = "0xA60E7C")]
	public OvrAvatarComponent()
	{
	}
}
[Token(Token = "0x2000042")]
public abstract class OvrAvatarDriver : MonoBehaviour
{
	[Token(Token = "0x20005F0")]
	public enum PacketMode
	{
		[Token(Token = "0x4002394")]
		SDK,
		[Token(Token = "0x4002395")]
		Unity
	}

	[Token(Token = "0x20005F1")]
	public struct ControllerPose
	{
		[Token(Token = "0x4002396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ovrAvatarButton buttons;

		[Token(Token = "0x4002397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ovrAvatarTouch touches;

		[Token(Token = "0x4002398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector2 joystickPosition;

		[Token(Token = "0x4002399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float indexTrigger;

		[Token(Token = "0x400239A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float handTrigger;

		[Token(Token = "0x400239B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool isActive;

		[Token(Token = "0x6003311")]
		[Address(RVA = "0xA63640", Offset = "0xA63640", VA = "0xA63640")]
		public static ControllerPose Interpolate(ControllerPose a, ControllerPose b, float t)
		{
			return default(ControllerPose);
		}
	}

	[Token(Token = "0x20005F2")]
	public struct PoseFrame
	{
		[Token(Token = "0x400239C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 headPosition;

		[Token(Token = "0x400239D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Quaternion headRotation;

		[Token(Token = "0x400239E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 handLeftPosition;

		[Token(Token = "0x400239F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Quaternion handLeftRotation;

		[Token(Token = "0x40023A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 handRightPosition;

		[Token(Token = "0x40023A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Quaternion handRightRotation;

		[Token(Token = "0x40023A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float voiceAmplitude;

		[Token(Token = "0x40023A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ControllerPose controllerLeftPose;

		[Token(Token = "0x40023A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public ControllerPose controllerRightPose;

		[Token(Token = "0x6003312")]
		[Address(RVA = "0xA6379C", Offset = "0xA6379C", VA = "0xA6379C")]
		public static PoseFrame Interpolate(PoseFrame a, PoseFrame b, float t)
		{
			return default(PoseFrame);
		}
	}

	[Token(Token = "0x40001F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PacketMode Mode;

	[Token(Token = "0x40001F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	protected PoseFrame CurrentPose;

	[Token(Token = "0x40001F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private ovrAvatarControllerType ControllerType;

	[Token(Token = "0x60001C2")]
	[Address(RVA = "0xA63314", Offset = "0xA63314", VA = "0xA63314")]
	public PoseFrame GetCurrentPose()
	{
		return default(PoseFrame);
	}

	[Token(Token = "0x60001C3")]
	public abstract void UpdateTransforms(IntPtr sdkAvatar);

	[Token(Token = "0x60001C4")]
	[Address(RVA = "0xA63324", Offset = "0xA63324", VA = "0xA63324")]
	private void Start()
	{
	}

	[Token(Token = "0x60001C5")]
	[Address(RVA = "0xA633B0", Offset = "0xA633B0", VA = "0xA633B0")]
	public void UpdateTransformsFromPose(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0xA63628", Offset = "0xA63628", VA = "0xA63628")]
	public static bool GetIsTrackedRemote()
	{
		return default(bool);
	}

	[Token(Token = "0x60001C7")]
	[Address(RVA = "0xA63630", Offset = "0xA63630", VA = "0xA63630")]
	protected OvrAvatarDriver()
	{
	}
}
[Token(Token = "0x2000043")]
public class OvrAvatarHand : OvrAvatarComponent
{
	[Token(Token = "0x40001F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool isLeftHand;

	[Token(Token = "0x40001F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private ovrAvatarHandComponent component;

	[Token(Token = "0x60001C8")]
	[Address(RVA = "0xA63B54", Offset = "0xA63B54", VA = "0xA63B54")]
	private void Update()
	{
	}

	[Token(Token = "0x60001C9")]
	[Address(RVA = "0xA63CB0", Offset = "0xA63CB0", VA = "0xA63CB0")]
	public OvrAvatarHand()
	{
	}
}
[Token(Token = "0x2000044")]
public class OvrAvatarLocalDriver : OvrAvatarDriver
{
	[Token(Token = "0x40001F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Vector3 centerEyePosition;

	[Token(Token = "0x40001F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private Quaternion centerEyeRotation;

	[Token(Token = "0x40001F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private float voiceAmplitude;

	[Token(Token = "0x60001CA")]
	[Address(RVA = "0xA63D1C", Offset = "0xA63D1C", VA = "0xA63D1C")]
	private ControllerPose GetMalibuControllerPose(OVRInput.Controller controller)
	{
		return default(ControllerPose);
	}

	[Token(Token = "0x60001CB")]
	[Address(RVA = "0xA63E88", Offset = "0xA63E88", VA = "0xA63E88")]
	private ControllerPose GetControllerPose(OVRInput.Controller controller)
	{
		return default(ControllerPose);
	}

	[Token(Token = "0x60001CC")]
	[Address(RVA = "0xA6422C", Offset = "0xA6422C", VA = "0xA6422C")]
	private void CalculateCurrentPose()
	{
	}

	[Token(Token = "0x60001CD")]
	[Address(RVA = "0xA64448", Offset = "0xA64448", VA = "0xA64448", Slot = "4")]
	public override void UpdateTransforms(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x60001CE")]
	[Address(RVA = "0xA64474", Offset = "0xA64474", VA = "0xA64474")]
	public OvrAvatarLocalDriver()
	{
	}
}
[Token(Token = "0x2000045")]
public class OvrAvatarMaterialManager : MonoBehaviour
{
	[Token(Token = "0x20005F3")]
	public enum TextureType
	{
		[Token(Token = "0x40023A6")]
		DiffuseTextures,
		[Token(Token = "0x40023A7")]
		NormalMaps,
		[Token(Token = "0x40023A8")]
		RoughnessMaps,
		[Token(Token = "0x40023A9")]
		Count
	}

	[Token(Token = "0x20005F4")]
	public struct AvatarComponentMaterialProperties
	{
		[Token(Token = "0x40023AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ovrAvatarBodyPartType TypeIndex;

		[Token(Token = "0x40023AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Color Color;

		[Token(Token = "0x40023AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Texture2D[] Textures;

		[Token(Token = "0x40023AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float DiffuseIntensity;

		[Token(Token = "0x40023AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float RimIntensity;

		[Token(Token = "0x40023AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float ReflectionIntensity;
	}

	[Token(Token = "0x20005F5")]
	public struct AvatarTextureArrayProperties
	{
		[Token(Token = "0x40023B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Texture2D[] Textures;

		[Token(Token = "0x40023B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Texture2DArray TextureArray;
	}

	[Token(Token = "0x20005F6")]
	public struct AvatarMaterialPropertyBlock
	{
		[Token(Token = "0x40023B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector4[] Colors;

		[Token(Token = "0x40023B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float[] DiffuseIntensities;

		[Token(Token = "0x40023B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float[] RimIntensities;

		[Token(Token = "0x40023B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float[] ReflectionIntensities;
	}

	[Serializable]
	[Token(Token = "0x20005F7")]
	public class AvatarMaterialConfig
	{
		[Token(Token = "0x40023B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AvatarComponentMaterialProperties[] ComponentMaterialProperties;

		[Token(Token = "0x40023B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AvatarMaterialPropertyBlock MaterialPropertyBlock;

		[Token(Token = "0x6003313")]
		[Address(RVA = "0xA66694", Offset = "0xA66694", VA = "0xA66694")]
		public AvatarMaterialConfig()
		{
		}
	}

	[Token(Token = "0x20005F8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820AC8", Offset = "0x820AC8")]
	private sealed class <RunLoadingAnimation>d__49 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40023B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40023B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40023BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OvrAvatarMaterialManager <>4__this;

		[Token(Token = "0x40023BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action callBack;

		[Token(Token = "0x40023BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <srcBlend>5__2;

		[Token(Token = "0x40023BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int <dstBlend>5__3;

		[Token(Token = "0x40023BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string <lightModeTag>5__4;

		[Token(Token = "0x40023BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string <renderTypeTag>5__5;

		[Token(Token = "0x40023C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string <renderQueueTag>5__6;

		[Token(Token = "0x40023C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string <ignoreProjectorTag>5__7;

		[Token(Token = "0x40023C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int <renderQueue>5__8;

		[Token(Token = "0x40023C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private bool <transparentQueue>5__9;

		[Token(Token = "0x170006BC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6003317")]
			[Address(RVA = "0xA66FA4", Offset = "0xA66FA4", VA = "0xA66FA4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006BD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6003319")]
			[Address(RVA = "0xA6700C", Offset = "0xA6700C", VA = "0xA6700C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003314")]
		[Address(RVA = "0xA664FC", Offset = "0xA664FC", VA = "0xA664FC")]
		[DebuggerHidden]
		public <RunLoadingAnimation>d__49(int <>1__state)
		{
		}

		[Token(Token = "0x6003315")]
		[Address(RVA = "0xA6692C", Offset = "0xA6692C", VA = "0xA6692C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6003316")]
		[Address(RVA = "0xA66930", Offset = "0xA66930", VA = "0xA66930", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6003318")]
		[Address(RVA = "0xA66FAC", Offset = "0xA66FAC", VA = "0xA66FAC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40001F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Renderer TargetRenderer;

	[Token(Token = "0x40001F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AvatarTextureArrayProperties[] TextureArrays;

	[Token(Token = "0x40001FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly string[] TextureTypeToShaderProperties;

	[Token(Token = "0x40001FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AvatarMaterialConfig LocalAvatarConfig;

	[Token(Token = "0x40001FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<ReflectionProbeBlendInfo> ReflectionProbes;

	[Token(Token = "0x40001FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Shader CombinedShader;

	[Token(Token = "0x40001FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string AVATAR_SHADER_LOADER;

	[Token(Token = "0x40001FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static string AVATAR_SHADER_MAINTEX;

	[Token(Token = "0x4000200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static string AVATAR_SHADER_NORMALMAP;

	[Token(Token = "0x4000201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static string AVATAR_SHADER_ROUGHNESSMAP;

	[Token(Token = "0x4000202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static string AVATAR_SHADER_COLOR;

	[Token(Token = "0x4000203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static string AVATAR_SHADER_DIFFUSEINTENSITY;

	[Token(Token = "0x4000204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static string AVATAR_SHADER_RIMINTENSITY;

	[Token(Token = "0x4000205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static string AVATAR_SHADER_REFLECTIONINTENSITY;

	[Token(Token = "0x4000206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static string AVATAR_SHADER_CUBEMAP;

	[Token(Token = "0x4000207")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static string AVATAR_SHADER_ALPHA;

	[Token(Token = "0x4000208")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static string AVATAR_SHADER_LOADING_DIMMER;

	[Token(Token = "0x4000209")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static string AVATAR_SHADER_IRIS_COLOR;

	[Token(Token = "0x400020A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public static string AVATAR_SHADER_LIP_COLOR;

	[Token(Token = "0x400020B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public static string AVATAR_SHADER_BROW_COLOR;

	[Token(Token = "0x400020C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public static string AVATAR_SHADER_LASH_COLOR;

	[Token(Token = "0x400020D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public static string AVATAR_SHADER_SCLERA_COLOR;

	[Token(Token = "0x400020E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public static string AVATAR_SHADER_GUM_COLOR;

	[Token(Token = "0x400020F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public static string AVATAR_SHADER_TEETH_COLOR;

	[Token(Token = "0x4000210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public static string AVATAR_SHADER_LIP_SMOOTHNESS;

	[Token(Token = "0x4000211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public static float[] DiffuseIntensities;

	[Token(Token = "0x4000212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public static float[] RimIntensities;

	[Token(Token = "0x4000213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public static float[] ReflectionIntensities;

	[Token(Token = "0x4000214")]
	private const float LOADING_ANIMATION_AMPLITUDE = 0.5f;

	[Token(Token = "0x4000215")]
	private const float LOADING_ANIMATION_PERIOD = 0.35f;

	[Token(Token = "0x4000216")]
	private const float LOADING_ANIMATION_CURVE_SCALE = 0.25f;

	[Token(Token = "0x4000217")]
	private const float LOADING_ANIMATION_DIMMER_MIN = 0.3f;

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0xA64524", Offset = "0xA64524", VA = "0xA64524")]
	public void CreateTextureArrays()
	{
	}

	[Token(Token = "0x60001D0")]
	[Address(RVA = "0xA64684", Offset = "0xA64684", VA = "0xA64684")]
	public void SetRenderer(Renderer renderer)
	{
	}

	[Token(Token = "0x60001D1")]
	[Address(RVA = "0xA646AC", Offset = "0xA646AC", VA = "0xA646AC")]
	public void OnCombinedMeshReady()
	{
	}

	[Token(Token = "0x60001D2")]
	[Address(RVA = "0xA64DC4", Offset = "0xA64DC4", VA = "0xA64DC4")]
	public void AddTextureIDToTextureManager(ulong assetID, bool isSingleComponent)
	{
	}

	[Token(Token = "0x60001D3")]
	[Address(RVA = "0xA65044", Offset = "0xA65044", VA = "0xA65044")]
	private void DeleteTextureSet()
	{
	}

	[Token(Token = "0x60001D4")]
	[Address(RVA = "0xA64740", Offset = "0xA64740", VA = "0xA64740")]
	public void InitTextureArrays()
	{
	}

	[Token(Token = "0x60001D5")]
	[Address(RVA = "0xA65134", Offset = "0xA65134", VA = "0xA65134")]
	private void ProcessTexturesWithMips(Texture2D[] textures, int texArrayResolution, Texture2DArray texArray)
	{
	}

	[Token(Token = "0x60001D6")]
	[Address(RVA = "0xA64B40", Offset = "0xA64B40", VA = "0xA64B40")]
	private void SetMaterialPropertyBlock()
	{
	}

	[Token(Token = "0x60001D7")]
	[Address(RVA = "0xA6539C", Offset = "0xA6539C", VA = "0xA6539C")]
	private void ApplyMaterialPropertyBlock()
	{
	}

	[Token(Token = "0x60001D8")]
	[Address(RVA = "0xA65614", Offset = "0xA65614", VA = "0xA65614")]
	public static ovrAvatarBodyPartType GetComponentType(string objectName)
	{
		return default(ovrAvatarBodyPartType);
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0xA65710", Offset = "0xA65710", VA = "0xA65710")]
	private ulong GetTextureIDForType(ovrAvatarPBSMaterialState materialState, TextureType type)
	{
		return default(ulong);
	}

	[Token(Token = "0x60001DA")]
	[Address(RVA = "0xA65748", Offset = "0xA65748", VA = "0xA65748")]
	public void ValidateTextures(ovrAvatarPBSMaterialState[] materialStates)
	{
	}

	[Token(Token = "0x60001DB")]
	[Address(RVA = "0xA64D48", Offset = "0xA64D48", VA = "0xA64D48")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x82F2B8", Offset = "0x82F2B8")]
	private IEnumerator RunLoadingAnimation(Action callBack)
	{
		return null;
	}

	[Token(Token = "0x60001DC")]
	[Address(RVA = "0xA66528", Offset = "0xA66528", VA = "0xA66528")]
	public OvrAvatarMaterialManager()
	{
	}
}
[Token(Token = "0x2000046")]
public class OvrAvatarPacket
{
	[Token(Token = "0x4000218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public IntPtr ovrNativePacket;

	[Token(Token = "0x4000219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<float> frameTimes;

	[Token(Token = "0x400021A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<OvrAvatarDriver.PoseFrame> frames;

	[Token(Token = "0x400021B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<byte[]> encodedAudioPackets;

	[Token(Token = "0x17000009")]
	public float Duration
	{
		[Token(Token = "0x60001DE")]
		[Address(RVA = "0xA67014", Offset = "0xA67014", VA = "0xA67014")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700000A")]
	public OvrAvatarDriver.PoseFrame FinalFrame
	{
		[Token(Token = "0x60001DF")]
		[Address(RVA = "0xA67080", Offset = "0xA67080", VA = "0xA67080")]
		get
		{
			return default(OvrAvatarDriver.PoseFrame);
		}
	}

	[Token(Token = "0x60001E0")]
	[Address(RVA = "0xA67104", Offset = "0xA67104", VA = "0xA67104")]
	public OvrAvatarPacket()
	{
	}

	[Token(Token = "0x60001E1")]
	[Address(RVA = "0xA671C8", Offset = "0xA671C8", VA = "0xA671C8")]
	public OvrAvatarPacket(OvrAvatarDriver.PoseFrame initialPose)
	{
	}

	[Token(Token = "0x60001E2")]
	[Address(RVA = "0xA67308", Offset = "0xA67308", VA = "0xA67308")]
	private OvrAvatarPacket(List<float> frameTimes, List<OvrAvatarDriver.PoseFrame> frames, List<byte[]> audioPackets)
	{
	}

	[Token(Token = "0x60001E3")]
	[Address(RVA = "0xA673E4", Offset = "0xA673E4", VA = "0xA673E4")]
	public void AddFrame(OvrAvatarDriver.PoseFrame frame, float deltaSeconds)
	{
	}

	[Token(Token = "0x60001E4")]
	[Address(RVA = "0xA674B4", Offset = "0xA674B4", VA = "0xA674B4")]
	public OvrAvatarDriver.PoseFrame GetPoseFrame(float seconds)
	{
		return default(OvrAvatarDriver.PoseFrame);
	}

	[Token(Token = "0x60001E5")]
	[Address(RVA = "0xA676BC", Offset = "0xA676BC", VA = "0xA676BC")]
	public static OvrAvatarPacket Read(Stream stream)
	{
		return null;
	}

	[Token(Token = "0x60001E6")]
	[Address(RVA = "0xA67914", Offset = "0xA67914", VA = "0xA67914")]
	public void Write(Stream stream)
	{
	}
}
[Token(Token = "0x2000047")]
internal static class BinaryWriterExtensions
{
	[Token(Token = "0x60001E7")]
	[Address(RVA = "0xA4CCC8", Offset = "0xA4CCC8", VA = "0xA4CCC8")]
	public static void Write(this BinaryWriter writer, OvrAvatarDriver.PoseFrame frame)
	{
	}

	[Token(Token = "0x60001E8")]
	[Address(RVA = "0xA4CDDC", Offset = "0xA4CDDC", VA = "0xA4CDDC")]
	public static void Write(this BinaryWriter writer, Vector3 vec3)
	{
	}

	[Token(Token = "0x60001E9")]
	[Address(RVA = "0xA4CF88", Offset = "0xA4CF88", VA = "0xA4CF88")]
	public static void Write(this BinaryWriter writer, Vector2 vec2)
	{
	}

	[Token(Token = "0x60001EA")]
	[Address(RVA = "0xA4CE4C", Offset = "0xA4CE4C", VA = "0xA4CE4C")]
	public static void Write(this BinaryWriter writer, Quaternion quat)
	{
	}

	[Token(Token = "0x60001EB")]
	[Address(RVA = "0xA4CEE0", Offset = "0xA4CEE0", VA = "0xA4CEE0")]
	public static void Write(this BinaryWriter writer, OvrAvatarDriver.ControllerPose pose)
	{
	}
}
[Token(Token = "0x2000048")]
internal static class BinaryReaderExtensions
{
	[Token(Token = "0x60001EC")]
	[Address(RVA = "0xA4C8C8", Offset = "0xA4C8C8", VA = "0xA4C8C8")]
	public static OvrAvatarDriver.PoseFrame ReadPoseFrame(this BinaryReader reader)
	{
		return default(OvrAvatarDriver.PoseFrame);
	}

	[Token(Token = "0x60001ED")]
	[Address(RVA = "0xA4CC6C", Offset = "0xA4CC6C", VA = "0xA4CC6C")]
	public static Vector2 ReadVector2(this BinaryReader reader)
	{
		return default(Vector2);
	}

	[Token(Token = "0x60001EE")]
	[Address(RVA = "0xA4CA68", Offset = "0xA4CA68", VA = "0xA4CA68")]
	public static Vector3 ReadVector3(this BinaryReader reader)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60001EF")]
	[Address(RVA = "0xA4CAE0", Offset = "0xA4CAE0", VA = "0xA4CAE0")]
	public static Quaternion ReadQuaternion(this BinaryReader reader)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60001F0")]
	[Address(RVA = "0xA4CB7C", Offset = "0xA4CB7C", VA = "0xA4CB7C")]
	public static OvrAvatarDriver.ControllerPose ReadControllerPose(this BinaryReader reader)
	{
		return default(OvrAvatarDriver.ControllerPose);
	}
}
[Token(Token = "0x2000049")]
public class OvrAvatarRemoteDriver : OvrAvatarDriver
{
	[Token(Token = "0x400021C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Queue<OvrAvatarPacket> packetQueue;

	[Token(Token = "0x400021D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private IntPtr CurrentSDKPacket;

	[Token(Token = "0x400021E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private float CurrentPacketTime;

	[Token(Token = "0x400021F")]
	private const int MinPacketQueue = 1;

	[Token(Token = "0x4000220")]
	private const int MaxPacketQueue = 4;

	[Token(Token = "0x4000221")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private int CurrentSequence;

	[Token(Token = "0x4000222")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private bool isStreaming;

	[Token(Token = "0x4000223")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private OvrAvatarPacket currentPacket;

	[Token(Token = "0x60001F1")]
	[Address(RVA = "0xA67B04", Offset = "0xA67B04", VA = "0xA67B04")]
	public void QueuePacket(int sequence, OvrAvatarPacket packet)
	{
	}

	[Token(Token = "0x60001F2")]
	[Address(RVA = "0xA67B90", Offset = "0xA67B90", VA = "0xA67B90", Slot = "4")]
	public override void UpdateTransforms(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x60001F3")]
	[Address(RVA = "0xA67BAC", Offset = "0xA67BAC", VA = "0xA67BAC")]
	private void UpdateFromSDKPacket(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x60001F4")]
	[Address(RVA = "0xA67D58", Offset = "0xA67D58", VA = "0xA67D58")]
	private void UpdateFromUnityPacket(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x60001F5")]
	[Address(RVA = "0xA67F00", Offset = "0xA67F00", VA = "0xA67F00")]
	public OvrAvatarRemoteDriver()
	{
	}
}
[Token(Token = "0x200004A")]
public class OvrAvatarRenderComponent : MonoBehaviour
{
	[Token(Token = "0x4000224")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool firstSkinnedUpdate;

	[Token(Token = "0x4000225")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SkinnedMeshRenderer mesh;

	[Token(Token = "0x4000226")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform[] bones;

	[Token(Token = "0x4000227")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool isBodyComponent;

	[Token(Token = "0x60001F6")]
	[Address(RVA = "0xA67F80", Offset = "0xA67F80", VA = "0xA67F80")]
	protected void UpdateActive(OvrAvatar avatar, ovrAvatarVisibilityFlags mask)
	{
	}

	[Token(Token = "0x60001F7")]
	[Address(RVA = "0xA68064", Offset = "0xA68064", VA = "0xA68064")]
	protected SkinnedMeshRenderer CreateSkinnedMesh(ulong assetID, ovrAvatarVisibilityFlags visibilityMask, int thirdPersonLayer, int firstPersonLayer)
	{
		return null;
	}

	[Token(Token = "0x60001F8")]
	[Address(RVA = "0xA6825C", Offset = "0xA6825C", VA = "0xA6825C")]
	protected void UpdateSkinnedMesh(OvrAvatar avatar, Transform[] bones, ovrAvatarTransform localTransform, ovrAvatarVisibilityFlags visibilityMask, IntPtr renderPart)
	{
	}

	[Token(Token = "0x60001F9")]
	[Address(RVA = "0xA685F0", Offset = "0xA685F0", VA = "0xA685F0")]
	protected Material CreateAvatarMaterial(string name, Shader shader)
	{
		return null;
	}

	[Token(Token = "0x60001FA")]
	[Address(RVA = "0xA686E8", Offset = "0xA686E8", VA = "0xA686E8")]
	public OvrAvatarRenderComponent()
	{
	}
}
[Token(Token = "0x200004B")]
[Flags]
public enum ovrAvatarCapabilities
{
	[Token(Token = "0x4000229")]
	Body = 1,
	[Token(Token = "0x400022A")]
	Hands = 2,
	[Token(Token = "0x400022B")]
	Base = 4,
	[Token(Token = "0x400022C")]
	BodyTilt = 0x10,
	[Token(Token = "0x400022D")]
	Expressive = 0x20,
	[Token(Token = "0x400022E")]
	All = -1
}
[Token(Token = "0x200004C")]
public enum ovrAvatarMessageType
{
	[Token(Token = "0x4000230")]
	AvatarSpecification,
	[Token(Token = "0x4000231")]
	AssetLoaded,
	[Token(Token = "0x4000232")]
	Count
}
[Token(Token = "0x200004D")]
public struct ovrAvatarMessage_AvatarSpecification
{
	[Token(Token = "0x4000233")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public IntPtr avatarSpec;

	[Token(Token = "0x4000234")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ulong oculusUserID;
}
[Token(Token = "0x200004E")]
public struct ovrAvatarMessage_AssetLoaded
{
	[Token(Token = "0x4000235")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ulong assetID;

	[Token(Token = "0x4000236")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public IntPtr asset;
}
[Token(Token = "0x200004F")]
public enum ovrAvatarAssetType
{
	[Token(Token = "0x4000238")]
	Mesh,
	[Token(Token = "0x4000239")]
	Texture,
	[Token(Token = "0x400023A")]
	Pose,
	[Token(Token = "0x400023B")]
	Material,
	[Token(Token = "0x400023C")]
	CombinedMesh,
	[Token(Token = "0x400023D")]
	PBSMaterial,
	[Token(Token = "0x400023E")]
	FailedLoad,
	[Token(Token = "0x400023F")]
	Count
}
[Token(Token = "0x2000050")]
public struct ovrAvatarMeshVertex
{
	[Token(Token = "0x4000240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float x;

	[Token(Token = "0x4000241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float y;

	[Token(Token = "0x4000242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float z;

	[Token(Token = "0x4000243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float nx;

	[Token(Token = "0x4000244")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float ny;

	[Token(Token = "0x4000245")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float nz;

	[Token(Token = "0x4000246")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float tx;

	[Token(Token = "0x4000247")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ty;

	[Token(Token = "0x4000248")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float tz;

	[Token(Token = "0x4000249")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float tw;

	[Token(Token = "0x400024A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float u;

	[Token(Token = "0x400024B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float v;

	[Token(Token = "0x400024C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public byte[] blendIndices;

	[Token(Token = "0x400024D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float[] blendWeights;
}
[Token(Token = "0x2000051")]
public struct ovrAvatarMeshVertexV2
{
	[Token(Token = "0x400024E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float x;

	[Token(Token = "0x400024F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float y;

	[Token(Token = "0x4000250")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float z;

	[Token(Token = "0x4000251")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float nx;

	[Token(Token = "0x4000252")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float ny;

	[Token(Token = "0x4000253")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float nz;

	[Token(Token = "0x4000254")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float tx;

	[Token(Token = "0x4000255")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ty;

	[Token(Token = "0x4000256")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float tz;

	[Token(Token = "0x4000257")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float tw;

	[Token(Token = "0x4000258")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float u;

	[Token(Token = "0x4000259")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float v;

	[Token(Token = "0x400025A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float r;

	[Token(Token = "0x400025B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float g;

	[Token(Token = "0x400025C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float b;

	[Token(Token = "0x400025D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float a;

	[Token(Token = "0x400025E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public byte[] blendIndices;

	[Token(Token = "0x400025F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float[] blendWeights;
}
[Token(Token = "0x2000052")]
public struct ovrAvatarBlendVertex
{
	[Token(Token = "0x4000260")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float x;

	[Token(Token = "0x4000261")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float y;

	[Token(Token = "0x4000262")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float z;

	[Token(Token = "0x4000263")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float nx;

	[Token(Token = "0x4000264")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float ny;

	[Token(Token = "0x4000265")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float nz;

	[Token(Token = "0x4000266")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float tx;

	[Token(Token = "0x4000267")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ty;

	[Token(Token = "0x4000268")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float tz;
}
[Token(Token = "0x2000053")]
public struct ovrAvatarMeshAssetData
{
	[Token(Token = "0x4000269")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint vertexCount;

	[Token(Token = "0x400026A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public IntPtr vertexBuffer;

	[Token(Token = "0x400026B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public uint indexCount;

	[Token(Token = "0x400026C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr indexBuffer;

	[Token(Token = "0x400026D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ovrAvatarSkinnedMeshPose skinnedBindPose;
}
[Token(Token = "0x2000054")]
public struct ovrAvatarMeshAssetDataV2
{
	[Token(Token = "0x400026E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint vertexCount;

	[Token(Token = "0x400026F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public IntPtr vertexBuffer;

	[Token(Token = "0x4000270")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public uint indexCount;

	[Token(Token = "0x4000271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr indexBuffer;

	[Token(Token = "0x4000272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ovrAvatarSkinnedMeshPose skinnedBindPose;
}
[Token(Token = "0x2000055")]
public enum ovrAvatarTextureFormat
{
	[Token(Token = "0x4000274")]
	RGB24,
	[Token(Token = "0x4000275")]
	DXT1,
	[Token(Token = "0x4000276")]
	DXT5,
	[Token(Token = "0x4000277")]
	ASTC_RGB_6x6,
	[Token(Token = "0x4000278")]
	ASTC_RGB_6x6_MIPMAPS,
	[Token(Token = "0x4000279")]
	Count
}
[Token(Token = "0x2000056")]
public struct ovrAvatarTextureAssetData
{
	[Token(Token = "0x400027A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTextureFormat format;

	[Token(Token = "0x400027B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public uint sizeX;

	[Token(Token = "0x400027C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public uint sizeY;

	[Token(Token = "0x400027D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public uint mipCount;

	[Token(Token = "0x400027E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong textureDataSize;

	[Token(Token = "0x400027F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr textureData;
}
[Token(Token = "0x2000057")]
public enum ovrAvatarRenderPartType
{
	[Token(Token = "0x4000281")]
	SkinnedMeshRender,
	[Token(Token = "0x4000282")]
	SkinnedMeshRenderPBS,
	[Token(Token = "0x4000283")]
	ProjectorRender,
	[Token(Token = "0x4000284")]
	SkinnedMeshRenderPBS_V2,
	[Token(Token = "0x4000285")]
	Count
}
[Token(Token = "0x2000058")]
public enum ovrAvatarLogLevel
{
	[Token(Token = "0x4000287")]
	Unknown,
	[Token(Token = "0x4000288")]
	Default,
	[Token(Token = "0x4000289")]
	Verbose,
	[Token(Token = "0x400028A")]
	Debug,
	[Token(Token = "0x400028B")]
	Info,
	[Token(Token = "0x400028C")]
	Warn,
	[Token(Token = "0x400028D")]
	Error,
	[Token(Token = "0x400028E")]
	Fatal,
	[Token(Token = "0x400028F")]
	Silent
}
[Token(Token = "0x2000059")]
public struct ovrAvatarTransform
{
	[Token(Token = "0x4000290")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector3 position;

	[Token(Token = "0x4000291")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Quaternion orientation;

	[Token(Token = "0x4000292")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 scale;
}
[Token(Token = "0x200005A")]
[Flags]
public enum ovrAvatarButton
{
	[Token(Token = "0x4000294")]
	One = 1,
	[Token(Token = "0x4000295")]
	Two = 2,
	[Token(Token = "0x4000296")]
	Three = 4,
	[Token(Token = "0x4000297")]
	Joystick = 8
}
[Token(Token = "0x200005B")]
[Flags]
public enum ovrAvatarTouch
{
	[Token(Token = "0x4000299")]
	One = 1,
	[Token(Token = "0x400029A")]
	Two = 2,
	[Token(Token = "0x400029B")]
	Joystick = 4,
	[Token(Token = "0x400029C")]
	ThumbRest = 8,
	[Token(Token = "0x400029D")]
	Index = 0x10,
	[Token(Token = "0x400029E")]
	Pointing = 0x40,
	[Token(Token = "0x400029F")]
	ThumbUp = 0x80
}
[Token(Token = "0x200005C")]
public struct ovrAvatarHandInputState
{
	[Token(Token = "0x40002A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform transform;

	[Token(Token = "0x40002A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarButton buttonMask;

	[Token(Token = "0x40002A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public ovrAvatarTouch touchMask;

	[Token(Token = "0x40002A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float joystickX;

	[Token(Token = "0x40002A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float joystickY;

	[Token(Token = "0x40002A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float indexTrigger;

	[Token(Token = "0x40002A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float handTrigger;

	[Token(Token = "0x40002A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool isActive;
}
[Token(Token = "0x200005D")]
public struct ovrAvatarComponent
{
	[Token(Token = "0x40002A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform transform;

	[Token(Token = "0x40002A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public uint renderPartCount;

	[Token(Token = "0x40002AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public IntPtr renderParts;

	[Token(Token = "0x40002AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string name;
}
[Token(Token = "0x200005E")]
internal struct ovrAvatarComponent_Offsets
{
	[Token(Token = "0x40002AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static long transform;

	[Token(Token = "0x40002AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int renderPartCount;

	[Token(Token = "0x40002AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static int renderParts;

	[Token(Token = "0x40002AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static int name;
}
[Token(Token = "0x200005F")]
public struct ovrAvatarBaseComponent
{
	[Token(Token = "0x40002B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector3 basePosition;

	[Token(Token = "0x40002B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public IntPtr renderComponent;
}
[Token(Token = "0x2000060")]
public struct ovrAvatarBodyComponent
{
	[Token(Token = "0x40002B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform leftEyeTransform;

	[Token(Token = "0x40002B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarTransform rightEyeTransform;

	[Token(Token = "0x40002B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ovrAvatarTransform centerEyeTransform;

	[Token(Token = "0x40002B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public IntPtr renderComponent;
}
[Token(Token = "0x2000061")]
public struct ovrAvatarBodyComponent_Offsets
{
	[Token(Token = "0x40002B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static long leftEyeTransform;

	[Token(Token = "0x40002B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long rightEyeTransform;

	[Token(Token = "0x40002B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static long centerEyeTransform;

	[Token(Token = "0x40002B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static long renderComponent;
}
[Token(Token = "0x2000062")]
public struct ovrAvatarControllerComponent
{
	[Token(Token = "0x40002BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarHandInputState inputState;

	[Token(Token = "0x40002BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public IntPtr renderComponent;
}
[Token(Token = "0x2000063")]
public struct ovrAvatarHandComponent
{
	[Token(Token = "0x40002BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarHandInputState inputState;

	[Token(Token = "0x40002BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public IntPtr renderComponent;
}
[Token(Token = "0x2000064")]
public enum ovrAvatarMaterialLayerBlendMode
{
	[Token(Token = "0x40002BF")]
	Add,
	[Token(Token = "0x40002C0")]
	Multiply,
	[Token(Token = "0x40002C1")]
	Count
}
[Token(Token = "0x2000065")]
public enum ovrAvatarMaterialLayerSampleMode
{
	[Token(Token = "0x40002C3")]
	Color,
	[Token(Token = "0x40002C4")]
	Texture,
	[Token(Token = "0x40002C5")]
	TextureSingleChannel,
	[Token(Token = "0x40002C6")]
	Parallax,
	[Token(Token = "0x40002C7")]
	Count
}
[Token(Token = "0x2000066")]
public enum ovrAvatarMaterialMaskType
{
	[Token(Token = "0x40002C9")]
	None,
	[Token(Token = "0x40002CA")]
	Positional,
	[Token(Token = "0x40002CB")]
	ViewReflection,
	[Token(Token = "0x40002CC")]
	Fresnel,
	[Token(Token = "0x40002CD")]
	Pulse,
	[Token(Token = "0x40002CE")]
	Count
}
[Token(Token = "0x2000067")]
public enum ovrAvatarControllerType
{
	[Token(Token = "0x40002D0")]
	Touch,
	[Token(Token = "0x40002D1")]
	Malibu,
	[Token(Token = "0x40002D2")]
	Go,
	[Token(Token = "0x40002D3")]
	Quest,
	[Token(Token = "0x40002D4")]
	Count
}
[Token(Token = "0x2000068")]
public enum ovrAvatarAssetLevelOfDetail
{
	[Token(Token = "0x40002D6")]
	Lowest = 1,
	[Token(Token = "0x40002D7")]
	Medium = 3,
	[Token(Token = "0x40002D8")]
	Highest = 5
}
[Token(Token = "0x2000069")]
public enum ovrAvatarLookAndFeelVersion
{
	[Token(Token = "0x40002DA")]
	Unknown = -1,
	[Token(Token = "0x40002DB")]
	One,
	[Token(Token = "0x40002DC")]
	Two
}
[Token(Token = "0x200006A")]
public struct ovrAvatarMaterialLayerState
{
	[Token(Token = "0x40002DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarMaterialLayerBlendMode blendMode;

	[Token(Token = "0x40002DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public ovrAvatarMaterialLayerSampleMode sampleMode;

	[Token(Token = "0x40002DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ovrAvatarMaterialMaskType maskType;

	[Token(Token = "0x40002E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector4 layerColor;

	[Token(Token = "0x40002E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector4 sampleParameters;

	[Token(Token = "0x40002E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ulong sampleTexture;

	[Token(Token = "0x40002E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector4 sampleScaleOffset;

	[Token(Token = "0x40002E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector4 maskParameters;

	[Token(Token = "0x40002E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector4 maskAxis;

	[Token(Token = "0x60001FD")]
	[Address(RVA = "0x16E61F8", Offset = "0x16E61F8", VA = "0x16E61F8")]
	private static bool VectorEquals(Vector4 a, Vector4 b)
	{
		return default(bool);
	}

	[Token(Token = "0x60001FE")]
	[Address(RVA = "0x8F3A5C", Offset = "0x8F3A5C", VA = "0x8F3A5C", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x60001FF")]
	[Address(RVA = "0x8F3A64", Offset = "0x8F3A64", VA = "0x8F3A64", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}
}
[Token(Token = "0x200006B")]
public struct ovrAvatarMaterialState
{
	[Token(Token = "0x40002E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector4 baseColor;

	[Token(Token = "0x40002E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ovrAvatarMaterialMaskType baseMaskType;

	[Token(Token = "0x40002E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Vector4 baseMaskParameters;

	[Token(Token = "0x40002E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector4 baseMaskAxis;

	[Token(Token = "0x40002EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public ovrAvatarMaterialLayerSampleMode sampleMode;

	[Token(Token = "0x40002EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ulong alphaMaskTextureID;

	[Token(Token = "0x40002EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector4 alphaMaskScaleOffset;

	[Token(Token = "0x40002ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ulong normalMapTextureID;

	[Token(Token = "0x40002EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector4 normalMapScaleOffset;

	[Token(Token = "0x40002EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public ulong parallaxMapTextureID;

	[Token(Token = "0x40002F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Vector4 parallaxMapScaleOffset;

	[Token(Token = "0x40002F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public ulong roughnessMapTextureID;

	[Token(Token = "0x40002F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Vector4 roughnessMapScaleOffset;

	[Token(Token = "0x40002F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public uint layerCount;

	[Token(Token = "0x40002F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public ovrAvatarMaterialLayerState[] layers;

	[Token(Token = "0x6000200")]
	[Address(RVA = "0x16E652C", Offset = "0x16E652C", VA = "0x16E652C")]
	private static bool VectorEquals(Vector4 a, Vector4 b)
	{
		return default(bool);
	}

	[Token(Token = "0x6000201")]
	[Address(RVA = "0x8F3C9C", Offset = "0x8F3C9C", VA = "0x8F3C9C", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x6000202")]
	[Address(RVA = "0x8F3CA4", Offset = "0x8F3CA4", VA = "0x8F3CA4", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}
}
[Token(Token = "0x200006C")]
public struct ovrAvatarExpressiveParameters
{
	[Token(Token = "0x40002F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector4 irisColor;

	[Token(Token = "0x40002F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector4 scleraColor;

	[Token(Token = "0x40002F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector4 lashColor;

	[Token(Token = "0x40002F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector4 browColor;

	[Token(Token = "0x40002F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector4 lipColor;

	[Token(Token = "0x40002FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Vector4 teethColor;

	[Token(Token = "0x40002FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Vector4 gumColor;

	[Token(Token = "0x40002FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float browLashIntensity;

	[Token(Token = "0x40002FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float lipSmoothness;

	[Token(Token = "0x6000203")]
	[Address(RVA = "0x16E58A0", Offset = "0x16E58A0", VA = "0x16E58A0")]
	private static bool VectorEquals(Vector4 a, Vector4 b)
	{
		return default(bool);
	}

	[Token(Token = "0x6000204")]
	[Address(RVA = "0x8F37A4", Offset = "0x8F37A4", VA = "0x8F37A4", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x6000205")]
	[Address(RVA = "0x8F37AC", Offset = "0x8F37AC", VA = "0x8F37AC", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}
}
[Token(Token = "0x200006D")]
public struct ovrAvatarPBSMaterialState
{
	[Token(Token = "0x40002FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector4 baseColor;

	[Token(Token = "0x40002FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong albedoTextureID;

	[Token(Token = "0x4000300")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector4 albedoMultiplier;

	[Token(Token = "0x4000301")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ulong metallicnessTextureID;

	[Token(Token = "0x4000302")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float glossinessScale;

	[Token(Token = "0x4000303")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ulong normalTextureID;

	[Token(Token = "0x4000304")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ulong heightTextureID;

	[Token(Token = "0x4000305")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ulong occlusionTextureID;

	[Token(Token = "0x4000306")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ulong emissionTextureID;

	[Token(Token = "0x4000307")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector4 emissionMultiplier;

	[Token(Token = "0x4000308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public ulong detailMaskTextureID;

	[Token(Token = "0x4000309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ulong detailAlbedoTextureID;

	[Token(Token = "0x400030A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public ulong detailNormalTextureID;

	[Token(Token = "0x6000206")]
	[Address(RVA = "0x16E6A58", Offset = "0x16E6A58", VA = "0x16E6A58")]
	private static bool VectorEquals(Vector4 a, Vector4 b)
	{
		return default(bool);
	}

	[Token(Token = "0x6000207")]
	[Address(RVA = "0x8F4524", Offset = "0x8F4524", VA = "0x8F4524", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x6000208")]
	[Address(RVA = "0x8F452C", Offset = "0x8F452C", VA = "0x8F452C", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}
}
[Token(Token = "0x200006E")]
public class OvrAvatarAssetMaterial : OvrAvatarAsset
{
	[Token(Token = "0x400030B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ovrAvatarMaterialState material;

	[Token(Token = "0x6000209")]
	[Address(RVA = "0xAD5520", Offset = "0xAD5520", VA = "0xAD5520")]
	public OvrAvatarAssetMaterial(ulong id, IntPtr mat)
	{
	}
}
[Token(Token = "0x200006F")]
public struct ovrAvatarSkinnedMeshPose
{
	[Token(Token = "0x400030C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint jointCount;

	[Token(Token = "0x400030D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ovrAvatarTransform[] jointTransform;

	[Token(Token = "0x400030E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int[] jointParents;

	[Token(Token = "0x400030F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr[] jointNames;
}
[Token(Token = "0x2000070")]
[Flags]
public enum ovrAvatarVisibilityFlags
{
	[Token(Token = "0x4000311")]
	FirstPerson = 1,
	[Token(Token = "0x4000312")]
	ThirdPerson = 2,
	[Token(Token = "0x4000313")]
	SelfOccluding = 4
}
[Token(Token = "0x2000071")]
public struct ovrAvatarRenderPart_SkinnedMeshRender
{
	[Token(Token = "0x4000314")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform localTransform;

	[Token(Token = "0x4000315")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarVisibilityFlags visibilityMask;

	[Token(Token = "0x4000316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ulong meshAssetID;

	[Token(Token = "0x4000317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ovrAvatarMaterialState materialState;

	[Token(Token = "0x4000318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public ovrAvatarSkinnedMeshPose skinnedPose;
}
[Token(Token = "0x2000072")]
public struct ovrAvatarRenderPart_SkinnedMeshRenderPBS
{
	[Token(Token = "0x4000319")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform localTransform;

	[Token(Token = "0x400031A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarVisibilityFlags visibilityMask;

	[Token(Token = "0x400031B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ulong meshAssetID;

	[Token(Token = "0x400031C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ulong albedoTextureAssetID;

	[Token(Token = "0x400031D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ulong surfaceTextureAssetID;

	[Token(Token = "0x400031E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ovrAvatarSkinnedMeshPose skinnedPose;
}
[Token(Token = "0x2000073")]
public struct ovrAvatarRenderPart_ProjectorRender
{
	[Token(Token = "0x400031F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform localTransform;

	[Token(Token = "0x4000320")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public uint componentIndex;

	[Token(Token = "0x4000321")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public uint renderPartIndex;

	[Token(Token = "0x4000322")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ovrAvatarMaterialState materialState;
}
[Token(Token = "0x2000074")]
public struct ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2
{
	[Token(Token = "0x4000323")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform localTransform;

	[Token(Token = "0x4000324")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarVisibilityFlags visibilityMask;

	[Token(Token = "0x4000325")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ulong meshAssetID;

	[Token(Token = "0x4000326")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ovrAvatarPBSMaterialState materialState;

	[Token(Token = "0x4000327")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public ovrAvatarSkinnedMeshPose skinnedPose;
}
[Token(Token = "0x2000075")]
public enum ovrAvatarHandGesture
{
	[Token(Token = "0x4000329")]
	Default,
	[Token(Token = "0x400032A")]
	GripSphere,
	[Token(Token = "0x400032B")]
	GripCube,
	[Token(Token = "0x400032C")]
	Count
}
[Token(Token = "0x2000076")]
public enum ovrAvatarBodyPartType
{
	[Token(Token = "0x400032E")]
	Body,
	[Token(Token = "0x400032F")]
	Clothing,
	[Token(Token = "0x4000330")]
	Eyewear,
	[Token(Token = "0x4000331")]
	Hair,
	[Token(Token = "0x4000332")]
	Beard,
	[Token(Token = "0x4000333")]
	Count
}
[Token(Token = "0x2000077")]
public struct ovrAvatarBlendShapeParams
{
	[Token(Token = "0x4000334")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint blendShapeParamCount;

	[Token(Token = "0x4000335")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float[] blendShapeParams;
}
[Token(Token = "0x2000078")]
internal struct ovrAvatarBlendShapeParams_Offsets
{
	[Token(Token = "0x4000336")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int blendShapeParamCount;

	[Token(Token = "0x4000337")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long blendShapeParams;
}
[Token(Token = "0x2000079")]
public struct ovrAvatarVisemes
{
	[Token(Token = "0x4000338")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint visemeParamCount;

	[Token(Token = "0x4000339")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float[] visemeParams;
}
[Token(Token = "0x200007A")]
internal struct ovrAvatarVisemes_Offsets
{
	[Token(Token = "0x400033A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int visemeParamCount;

	[Token(Token = "0x400033B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long visemeParams;
}
[Token(Token = "0x200007B")]
public enum ovrAvatarGazeTargetType
{
	[Token(Token = "0x400033D")]
	AvatarHead,
	[Token(Token = "0x400033E")]
	AvatarHand,
	[Token(Token = "0x400033F")]
	Object,
	[Token(Token = "0x4000340")]
	ObjectStatic,
	[Token(Token = "0x4000341")]
	Count
}
[Token(Token = "0x200007C")]
public struct ovrAvatarGazeTarget
{
	[Token(Token = "0x4000342")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint id;

	[Token(Token = "0x4000343")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public Vector3 worldPosition;

	[Token(Token = "0x4000344")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ovrAvatarGazeTargetType type;
}
[Token(Token = "0x200007D")]
internal struct ovrAvatarGazeTarget_Offsets
{
	[Token(Token = "0x4000345")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int id;

	[Token(Token = "0x4000346")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static int worldPosition;

	[Token(Token = "0x4000347")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int type;
}
[Token(Token = "0x200007E")]
public struct ovrAvatarGazeTargets
{
	[Token(Token = "0x4000348")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint targetCount;

	[Token(Token = "0x4000349")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ovrAvatarGazeTarget[] targets;
}
[Token(Token = "0x200007F")]
internal struct ovrAvatarGazeTargets_Offsets
{
	[Token(Token = "0x400034A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int targetCount;

	[Token(Token = "0x400034B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long targets;
}
[Token(Token = "0x2000080")]
public enum ovrAvatarLightType
{
	[Token(Token = "0x400034D")]
	Point,
	[Token(Token = "0x400034E")]
	Direction,
	[Token(Token = "0x400034F")]
	Spot,
	[Token(Token = "0x4000350")]
	Count
}
[Token(Token = "0x2000081")]
public struct ovrAvatarLight
{
	[Token(Token = "0x4000351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint id;

	[Token(Token = "0x4000352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public ovrAvatarLightType type;

	[Token(Token = "0x4000353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float intensity;

	[Token(Token = "0x4000354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector3 worldDirection;

	[Token(Token = "0x4000355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 worldPosition;

	[Token(Token = "0x4000356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float range;

	[Token(Token = "0x4000357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float spotAngleDeg;
}
[Token(Token = "0x2000082")]
internal struct ovrAvatarLight_Offsets
{
	[Token(Token = "0x4000358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static long id;

	[Token(Token = "0x4000359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long type;

	[Token(Token = "0x400035A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static long intensity;

	[Token(Token = "0x400035B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static long worldDirection;

	[Token(Token = "0x400035C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static long worldPosition;

	[Token(Token = "0x400035D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static long range;

	[Token(Token = "0x400035E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static long spotAngleDeg;
}
[Token(Token = "0x2000083")]
public struct ovrAvatarLights
{
	[Token(Token = "0x400035F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float ambientIntensity;

	[Token(Token = "0x4000360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public uint lightCount;

	[Token(Token = "0x4000361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ovrAvatarLight[] lights;
}
[Token(Token = "0x2000084")]
internal struct ovrAvatarLights_Offsets
{
	[Token(Token = "0x4000362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static long ambientIntensity;

	[Token(Token = "0x4000363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long lightCount;

	[Token(Token = "0x4000364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static long lights;
}
[Token(Token = "0x2000085")]
[Flags]
public enum ovrAvatarDebugContext : uint
{
	[Token(Token = "0x4000366")]
	None = 0u,
	[Token(Token = "0x4000367")]
	GazeTarget = 1u,
	[Token(Token = "0x4000368")]
	Any = uint.MaxValue
}
[Token(Token = "0x2000086")]
public struct ovrAvatarDebugLine
{
	[Token(Token = "0x4000369")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector3 startPoint;

	[Token(Token = "0x400036A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector3 endPoint;

	[Token(Token = "0x400036B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 color;

	[Token(Token = "0x400036C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public ovrAvatarDebugContext context;

	[Token(Token = "0x400036D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public IntPtr text;
}
[Token(Token = "0x2000087")]
public struct ovrAvatarDebugTransform
{
	[Token(Token = "0x400036E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform transform;

	[Token(Token = "0x400036F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarDebugContext context;

	[Token(Token = "0x4000370")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public IntPtr text;
}
[Token(Token = "0x2000088")]
public delegate void specificationCallback(IntPtr specification);
[Token(Token = "0x2000089")]
public delegate void assetLoadedCallback(OvrAvatarAsset asset);
[Token(Token = "0x200008A")]
public delegate void combinedMeshLoadedCallback(IntPtr asset);
[Token(Token = "0x200008B")]
public class OvrAvatarSDKManager : MonoBehaviour
{
	[Token(Token = "0x20005F9")]
	public struct AvatarSpecRequestParams
	{
		[Token(Token = "0x40023C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong _userId;

		[Token(Token = "0x40023C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public specificationCallback _callback;

		[Token(Token = "0x40023C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool _useCombinedMesh;

		[Token(Token = "0x40023C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ovrAvatarAssetLevelOfDetail _lod;

		[Token(Token = "0x40023C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool _forceMobileTextureFormat;

		[Token(Token = "0x40023C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ovrAvatarLookAndFeelVersion _lookVersion;

		[Token(Token = "0x40023CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ovrAvatarLookAndFeelVersion _fallbackVersion;

		[Token(Token = "0x40023CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool _enableExpressive;

		[Token(Token = "0x600331A")]
		[Address(RVA = "0x8C4860", Offset = "0x8C4860", VA = "0x8C4860")]
		public AvatarSpecRequestParams(ulong userId, specificationCallback callback, bool useCombinedMesh, ovrAvatarAssetLevelOfDetail lod, bool forceMobileTextureFormat, ovrAvatarLookAndFeelVersion lookVersion, ovrAvatarLookAndFeelVersion fallbackVersion, bool enableExpressive)
		{
		}
	}

	[Token(Token = "0x4000371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static OvrAvatarSDKManager _instance;

	[Token(Token = "0x4000372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool initialized;

	[Token(Token = "0x4000373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<ulong, HashSet<specificationCallback>> specificationCallbacks;

	[Token(Token = "0x4000374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<ulong, HashSet<assetLoadedCallback>> assetLoadedCallbacks;

	[Token(Token = "0x4000375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<IntPtr, combinedMeshLoadedCallback> combinedMeshLoadedCallbacks;

	[Token(Token = "0x4000376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Dictionary<ulong, OvrAvatarAsset> assetCache;

	[Token(Token = "0x4000377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private OvrAvatarTextureCopyManager textureCopyManager;

	[Token(Token = "0x4000378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ovrAvatarLogLevel LoggingLevel;

	[Token(Token = "0x4000379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Queue<AvatarSpecRequestParams> avatarSpecificationQueue;

	[Token(Token = "0x400037A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<int> loadingAvatars;

	[Token(Token = "0x400037B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool avatarSpecRequestAvailable;

	[Token(Token = "0x400037C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float lastDispatchedAvatarSpecRequestTime;

	[Token(Token = "0x400037D")]
	private const float AVATAR_SPEC_REQUEST_TIMEOUT = 5f;

	[Token(Token = "0x1700000B")]
	public static OvrAvatarSDKManager Instance
	{
		[Token(Token = "0x600021C")]
		[Address(RVA = "0xA620AC", Offset = "0xA620AC", VA = "0xA620AC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600021D")]
	[Address(RVA = "0xA686F8", Offset = "0xA686F8", VA = "0xA686F8")]
	private bool Initialize()
	{
		return default(bool);
	}

	[Token(Token = "0x600021E")]
	[Address(RVA = "0xA68944", Offset = "0xA68944", VA = "0xA68944")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600021F")]
	[Address(RVA = "0xA689B8", Offset = "0xA689B8", VA = "0xA689B8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000220")]
	[Address(RVA = "0xA69208", Offset = "0xA69208", VA = "0xA69208")]
	public bool IsAvatarSpecWaiting()
	{
		return default(bool);
	}

	[Token(Token = "0x6000221")]
	[Address(RVA = "0xA69260", Offset = "0xA69260", VA = "0xA69260")]
	public bool IsAvatarLoading()
	{
		return default(bool);
	}

	[Token(Token = "0x6000222")]
	[Address(RVA = "0xA692B8", Offset = "0xA692B8", VA = "0xA692B8")]
	public void AddLoadingAvatar(int gameobjectID)
	{
	}

	[Token(Token = "0x6000223")]
	[Address(RVA = "0xA69320", Offset = "0xA69320", VA = "0xA69320")]
	public void RemoveLoadingAvatar(int gameobjectID)
	{
	}

	[Token(Token = "0x6000224")]
	[Address(RVA = "0xA69388", Offset = "0xA69388", VA = "0xA69388")]
	public void RequestAvatarSpecification(AvatarSpecRequestParams avatarSpecRequest)
	{
	}

	[Token(Token = "0x6000225")]
	[Address(RVA = "0xA69040", Offset = "0xA69040", VA = "0xA69040")]
	private void DispatchAvatarSpecificationRequest(AvatarSpecRequestParams avatarSpecRequest)
	{
	}

	[Token(Token = "0x6000226")]
	[Address(RVA = "0xA69468", Offset = "0xA69468", VA = "0xA69468")]
	public void BeginLoadingAsset(ulong assetId, ovrAvatarAssetLevelOfDetail lod, assetLoadedCallback callback)
	{
	}

	[Token(Token = "0x6000227")]
	[Address(RVA = "0xA69584", Offset = "0xA69584", VA = "0xA69584")]
	public void RegisterCombinedMeshCallback(IntPtr sdkAvatar, combinedMeshLoadedCallback callback)
	{
	}

	[Token(Token = "0x6000228")]
	[Address(RVA = "0xA6223C", Offset = "0xA6223C", VA = "0xA6223C")]
	public OvrAvatarAsset GetAsset(ulong assetId)
	{
		return null;
	}

	[Token(Token = "0x6000229")]
	[Address(RVA = "0xA69664", Offset = "0xA69664", VA = "0xA69664")]
	public void DeleteAssetFromCache(ulong assetId)
	{
	}

	[Token(Token = "0x600022A")]
	[Address(RVA = "0xA688F8", Offset = "0xA688F8", VA = "0xA688F8")]
	public string GetAppId()
	{
		return null;
	}

	[Token(Token = "0x600022B")]
	[Address(RVA = "0xA64E24", Offset = "0xA64E24", VA = "0xA64E24")]
	public OvrAvatarTextureCopyManager GetTextureCopyManager()
	{
		return null;
	}

	[Token(Token = "0x600022C")]
	[Address(RVA = "0xA6973C", Offset = "0xA6973C", VA = "0xA6973C")]
	public OvrAvatarSDKManager()
	{
	}
}
[Token(Token = "0x200008C")]
public sealed class OvrAvatarSettings : ScriptableObject
{
	[Token(Token = "0x400037E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static OvrAvatarSettings instance;

	[Token(Token = "0x400037F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private string ovrAppID;

	[Token(Token = "0x4000380")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private string ovrGearAppID;

	[Token(Token = "0x1700000C")]
	public static string AppID
	{
		[Token(Token = "0x600022D")]
		[Address(RVA = "0xA696FC", Offset = "0xA696FC", VA = "0xA696FC")]
		get
		{
			return null;
		}
		[Token(Token = "0x600022E")]
		[Address(RVA = "0xA69894", Offset = "0xA69894", VA = "0xA69894")]
		set
		{
		}
	}

	[Token(Token = "0x1700000D")]
	public static string MobileAppID
	{
		[Token(Token = "0x600022F")]
		[Address(RVA = "0xA6971C", Offset = "0xA6971C", VA = "0xA6971C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000230")]
		[Address(RVA = "0xA698C0", Offset = "0xA698C0", VA = "0xA698C0")]
		set
		{
		}
	}

	[Token(Token = "0x1700000E")]
	public static OvrAvatarSettings Instance
	{
		[Token(Token = "0x6000231")]
		[Address(RVA = "0xA69780", Offset = "0xA69780", VA = "0xA69780")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000232")]
		[Address(RVA = "0xA698EC", Offset = "0xA698EC", VA = "0xA698EC")]
		set
		{
		}
	}

	[Token(Token = "0x6000233")]
	[Address(RVA = "0xA69940", Offset = "0xA69940", VA = "0xA69940")]
	public OvrAvatarSettings()
	{
	}
}
[Token(Token = "0x200008D")]
public class OvrAvatarSkinnedMeshRenderComponent : OvrAvatarRenderComponent
{
	[Token(Token = "0x4000381")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Shader surface;

	[Token(Token = "0x4000382")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Shader surfaceSelfOccluding;

	[Token(Token = "0x4000383")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool previouslyActive;

	[Token(Token = "0x6000234")]
	[Address(RVA = "0xA6B01C", Offset = "0xA6B01C", VA = "0xA6B01C")]
	internal void Initialize(ovrAvatarRenderPart_SkinnedMeshRender skinnedMeshRender, Shader surface, Shader surfaceSelfOccluding, int thirdPersonLayer, int firstPersonLayer)
	{
	}

	[Token(Token = "0x6000235")]
	[Address(RVA = "0xA611F8", Offset = "0xA611F8", VA = "0xA611F8")]
	public void UpdateSkinnedMeshRender(OvrAvatarComponent component, OvrAvatar avatar, IntPtr renderPart)
	{
	}

	[Token(Token = "0x6000236")]
	[Address(RVA = "0xA6B160", Offset = "0xA6B160", VA = "0xA6B160")]
	private void UpdateMeshMaterial(ovrAvatarVisibilityFlags visibilityMask, SkinnedMeshRenderer rootMesh)
	{
	}

	[Token(Token = "0x6000237")]
	[Address(RVA = "0xA6B2C0", Offset = "0xA6B2C0", VA = "0xA6B2C0")]
	public OvrAvatarSkinnedMeshRenderComponent()
	{
	}
}
[Token(Token = "0x200008E")]
public class OvrAvatarSkinnedMeshRenderPBSComponent : OvrAvatarRenderComponent
{
	[Token(Token = "0x4000384")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool isMaterialInitilized;

	[Token(Token = "0x6000238")]
	[Address(RVA = "0xA6B2D0", Offset = "0xA6B2D0", VA = "0xA6B2D0")]
	internal void Initialize(ovrAvatarRenderPart_SkinnedMeshRenderPBS skinnedMeshRenderPBS, Shader shader, int thirdPersonLayer, int firstPersonLayer)
	{
	}

	[Token(Token = "0x6000239")]
	[Address(RVA = "0xA61420", Offset = "0xA61420", VA = "0xA61420")]
	internal void UpdateSkinnedMeshRenderPBS(OvrAvatar avatar, IntPtr renderPart, Material mat)
	{
	}

	[Token(Token = "0x600023A")]
	[Address(RVA = "0xA6B400", Offset = "0xA6B400", VA = "0xA6B400")]
	public OvrAvatarSkinnedMeshRenderPBSComponent()
	{
	}
}
[Token(Token = "0x200008F")]
public class OvrAvatarSkinnedMeshPBSV2RenderComponent : OvrAvatarRenderComponent
{
	[Token(Token = "0x4000385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private OvrAvatarMaterialManager avatarMaterialManager;

	[Token(Token = "0x4000386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool previouslyActive;

	[Token(Token = "0x4000387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	private bool isCombinedMaterial;

	[Token(Token = "0x4000388")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private ovrAvatarExpressiveParameters ExpressiveParameters;

	[Token(Token = "0x4000389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private bool EnableExpressive;

	[Token(Token = "0x400038A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private int blendShapeCount;

	[Token(Token = "0x400038B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private ovrAvatarBlendShapeParams blendShapeParams;

	[Token(Token = "0x400038C")]
	private const string MAIN_MATERIAL_NAME = "main_material";

	[Token(Token = "0x400038D")]
	private const string EYE_MATERIAL_NAME = "eye_material";

	[Token(Token = "0x400038E")]
	private const string DEFAULT_MATERIAL_NAME = "_material";

	[Token(Token = "0x600023B")]
	[Address(RVA = "0xA69998", Offset = "0xA69998", VA = "0xA69998")]
	internal void Initialize(IntPtr renderPart, ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2 skinnedMeshRender, OvrAvatarMaterialManager materialManager, int thirdPersonLayer, int firstPersonLayer, bool combinedMesh, ovrAvatarAssetLevelOfDetail lod, bool assignExpressiveParams, OvrAvatar avatar, bool isControllerModel)
	{
	}

	[Token(Token = "0x600023C")]
	[Address(RVA = "0xA615B8", Offset = "0xA615B8", VA = "0xA615B8")]
	public void UpdateSkinnedMeshRender(OvrAvatarComponent component, OvrAvatar avatar, IntPtr renderPart)
	{
	}

	[Token(Token = "0x600023D")]
	[Address(RVA = "0xA6A7D8", Offset = "0xA6A7D8", VA = "0xA6A7D8")]
	private void InitializeSingleComponentMaterial(IntPtr renderPart, int lodIndex)
	{
	}

	[Token(Token = "0x600023E")]
	[Address(RVA = "0xA69F6C", Offset = "0xA69F6C", VA = "0xA69F6C")]
	private void InitializeCombinedMaterial(IntPtr renderPart, int lodIndex)
	{
	}

	[Token(Token = "0x600023F")]
	[Address(RVA = "0xA69D3C", Offset = "0xA69D3C", VA = "0xA69D3C")]
	private void SetMaterialTransparent(Material mat)
	{
	}

	[Token(Token = "0x6000240")]
	[Address(RVA = "0xA69E50", Offset = "0xA69E50", VA = "0xA69E50")]
	private void SetMaterialOpaque(Material mat)
	{
	}

	[Token(Token = "0x6000241")]
	[Address(RVA = "0xA6B00C", Offset = "0xA6B00C", VA = "0xA6B00C")]
	public OvrAvatarSkinnedMeshPBSV2RenderComponent()
	{
	}
}
[Token(Token = "0x2000090")]
public class OvrAvatarTextureCopyManager : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20005FA")]
	public struct FallbackTextureSet
	{
		[Token(Token = "0x40023CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool Initialized;

		[Token(Token = "0x40023CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Texture2D DiffuseRoughness;

		[Token(Token = "0x40023CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Texture2D Normal;
	}

	[Token(Token = "0x20005FB")]
	private struct CopyTextureParams
	{
		[Token(Token = "0x40023CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Texture Src;

		[Token(Token = "0x40023D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Texture Dst;

		[Token(Token = "0x40023D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int Mip;

		[Token(Token = "0x40023D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int SrcSize;

		[Token(Token = "0x40023D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int DstElement;

		[Token(Token = "0x600331B")]
		[Address(RVA = "0x8C48C8", Offset = "0x8C48C8", VA = "0x8C48C8")]
		public CopyTextureParams(Texture src, Texture dst, int mip, int srcSize, int dstElement)
		{
		}
	}

	[Token(Token = "0x20005FC")]
	public struct TextureSet
	{
		[Token(Token = "0x40023D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Dictionary<ulong, bool> TextureIDSingleMeshPair;

		[Token(Token = "0x40023D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool IsProcessed;

		[Token(Token = "0x600331C")]
		[Address(RVA = "0x8C4950", Offset = "0x8C4950", VA = "0x8C4950")]
		public TextureSet(Dictionary<ulong, bool> textureIDSingleMeshPair, bool isProcessed)
		{
		}
	}

	[Token(Token = "0x20005FD")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820AD8", Offset = "0x820AD8")]
	private sealed class <DeleteTextureSetCoroutine>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40023D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40023D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40023D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextureSet textureSetToDelete;

		[Token(Token = "0x40023D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public OvrAvatarTextureCopyManager <>4__this;

		[Token(Token = "0x40023DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int gameobjectID;

		[Token(Token = "0x170006BE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6003320")]
			[Address(RVA = "0xA6C7F8", Offset = "0xA6C7F8", VA = "0xA6C7F8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006BF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6003322")]
			[Address(RVA = "0xA6C860", Offset = "0xA6C860", VA = "0xA6C860", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600331D")]
		[Address(RVA = "0xA6C1BC", Offset = "0xA6C1BC", VA = "0xA6C1BC")]
		[DebuggerHidden]
		public <DeleteTextureSetCoroutine>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x600331E")]
		[Address(RVA = "0xA6C324", Offset = "0xA6C324", VA = "0xA6C324", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600331F")]
		[Address(RVA = "0xA6C328", Offset = "0xA6C328", VA = "0xA6C328", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6003321")]
		[Address(RVA = "0xA6C800", Offset = "0xA6C800", VA = "0xA6C800", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400038F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FallbackTextureSet[] FallbackTextureSets;

	[Token(Token = "0x4000390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Queue<CopyTextureParams> texturesToCopy;

	[Token(Token = "0x4000391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<int, TextureSet> textureSets;

	[Token(Token = "0x4000392")]
	private const int TEXTURES_TO_COPY_QUEUE_CAPACITY = 256;

	[Token(Token = "0x4000393")]
	private const int COPIES_PER_FRAME = 8;

	[Token(Token = "0x4000394")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly string[] FALLBACK_TEXTURE_PATHS_DIFFUSE_ROUGHNESS;

	[Token(Token = "0x4000395")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly string[] FALLBACK_TEXTURE_PATHS_NORMAL;

	[Token(Token = "0x4000396")]
	private const string PATH_HIGHEST_DIFFUSE_ROUGHNESS = "FallbackTextures/fallback_diffuse_roughness_2048";

	[Token(Token = "0x4000397")]
	private const string PATH_MEDIUM_DIFFUSE_ROUGHNESS = "FallbackTextures/fallback_diffuse_roughness_1024";

	[Token(Token = "0x4000398")]
	private const string PATH_LOWEST_DIFFUSE_ROUGHNESS = "FallbackTextures/fallback_diffuse_roughness_256";

	[Token(Token = "0x4000399")]
	private const string PATH_HIGHEST_NORMAL = "FallbackTextures/fallback_normal_2048";

	[Token(Token = "0x400039A")]
	private const string PATH_MEDIUM_NORMAL = "FallbackTextures/fallback_normal_1024";

	[Token(Token = "0x400039B")]
	private const string PATH_LOWEST_NORMAL = "FallbackTextures/fallback_normal_256";

	[Token(Token = "0x400039C")]
	private const int GPU_TEXTURE_COPY_WAIT_TIME = 10;

	[Token(Token = "0x6000242")]
	[Address(RVA = "0xA6BBB4", Offset = "0xA6BBB4", VA = "0xA6BBB4")]
	public OvrAvatarTextureCopyManager()
	{
	}

	[Token(Token = "0x6000243")]
	[Address(RVA = "0xA6BF10", Offset = "0xA6BF10", VA = "0xA6BF10")]
	public void Update()
	{
	}

	[Token(Token = "0x6000244")]
	[Address(RVA = "0xA66F54", Offset = "0xA66F54", VA = "0xA66F54")]
	public int GetTextureCount()
	{
		return default(int);
	}

	[Token(Token = "0x6000245")]
	[Address(RVA = "0xA65218", Offset = "0xA65218", VA = "0xA65218")]
	public void CopyTexture(Texture src, Texture dst, int mipLevel, int mipSize, int dstElement, bool useQueue = true)
	{
	}

	[Token(Token = "0x6000246")]
	[Address(RVA = "0xA6C078", Offset = "0xA6C078", VA = "0xA6C078")]
	private void CopyTexture(CopyTextureParams copyTextureParams)
	{
	}

	[Token(Token = "0x6000247")]
	[Address(RVA = "0xA64EA8", Offset = "0xA64EA8", VA = "0xA64EA8")]
	public void AddTextureIDToTextureSet(int gameobjectID, ulong textureID, bool isSingleMesh)
	{
	}

	[Token(Token = "0x6000248")]
	[Address(RVA = "0xA6508C", Offset = "0xA6508C", VA = "0xA6508C")]
	public void DeleteTextureSet(int gameobjectID)
	{
	}

	[Token(Token = "0x6000249")]
	[Address(RVA = "0xA6C128", Offset = "0xA6C128", VA = "0xA6C128")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x82F3BC", Offset = "0x82F3BC")]
	private IEnumerator DeleteTextureSetCoroutine(TextureSet textureSetToDelete, int gameobjectID)
	{
		return null;
	}

	[Token(Token = "0x600024A")]
	[Address(RVA = "0xA6941C", Offset = "0xA6941C", VA = "0xA6941C")]
	public void CheckFallbackTextureSet(ovrAvatarAssetLevelOfDetail lod)
	{
	}

	[Token(Token = "0x600024B")]
	[Address(RVA = "0xA6C1E8", Offset = "0xA6C1E8", VA = "0xA6C1E8")]
	private void InitFallbackTextureSet(ovrAvatarAssetLevelOfDetail lod)
	{
	}
}
[Token(Token = "0x2000091")]
public class OvrAvatarTouchController : OvrAvatarComponent
{
	[Token(Token = "0x400039D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool isLeftHand;

	[Token(Token = "0x400039E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private ovrAvatarControllerComponent component;

	[Token(Token = "0x600024C")]
	[Address(RVA = "0xA6C868", Offset = "0xA6C868", VA = "0xA6C868")]
	private void Update()
	{
	}

	[Token(Token = "0x600024D")]
	[Address(RVA = "0xA6C9C4", Offset = "0xA6C9C4", VA = "0xA6C9C4")]
	public OvrAvatarTouchController()
	{
	}
}
[Token(Token = "0x2000092")]
public class EnableSwitch : MonoBehaviour
{
	[Token(Token = "0x400039F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] SwitchTargets;

	[Token(Token = "0x600024E")]
	public bool SetActive<T>(int target) where T : MonoBehaviour
	{
		return default(bool);
	}

	[Token(Token = "0x600024F")]
	[Address(RVA = "0xA563F0", Offset = "0xA563F0", VA = "0xA563F0")]
	public EnableSwitch()
	{
	}
}
[Token(Token = "0x2000093")]
public class LipSyncDemo_Control : MonoBehaviour
{
	[Token(Token = "0x40003A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x821634", Offset = "0x821634")]
	public KeyCode rotateLeftKey;

	[Token(Token = "0x40003A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82166C", Offset = "0x82166C")]
	public KeyCode rotateRightKey;

	[Token(Token = "0x40003A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8216A4", Offset = "0x8216A4")]
	public KeyCode resetRotationKey;

	[Token(Token = "0x40003A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float resetRotation;

	[Token(Token = "0x40003A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float rotationAmount;

	[Token(Token = "0x40003A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float rotationMax;

	[Token(Token = "0x6000250")]
	[Address(RVA = "0xAB0C40", Offset = "0xAB0C40", VA = "0xAB0C40")]
	private void Start()
	{
	}

	[Token(Token = "0x6000251")]
	[Address(RVA = "0xAB0C44", Offset = "0xAB0C44", VA = "0xAB0C44")]
	private void Update()
	{
	}

	[Token(Token = "0x6000252")]
	[Address(RVA = "0xAB0CC4", Offset = "0xAB0CC4", VA = "0xAB0CC4")]
	private void RotateObject(float amountDegrees, bool absolute = false)
	{
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0xAB0EB0", Offset = "0xAB0EB0", VA = "0xAB0EB0")]
	public LipSyncDemo_Control()
	{
	}
}
[Token(Token = "0x2000094")]
public class LipSyncDemo_SetCurrentTarget : MonoBehaviour
{
	[Token(Token = "0x40003A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EnableSwitch[] SwitchTargets;

	[Token(Token = "0x40003A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int targetSet;

	[Token(Token = "0x40003A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int maxTarget;

	[Token(Token = "0x40003A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool XRButtonBeingPressed;

	[Token(Token = "0x6000254")]
	[Address(RVA = "0xAB0EE0", Offset = "0xAB0EE0", VA = "0xAB0EE0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000255")]
	[Address(RVA = "0xAB0FE4", Offset = "0xAB0FE4", VA = "0xAB0FE4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000256")]
	[Address(RVA = "0xAB12F8", Offset = "0xAB12F8", VA = "0xAB12F8")]
	private void SetCurrentTarget()
	{
	}

	[Token(Token = "0x6000257")]
	[Address(RVA = "0xAB1584", Offset = "0xAB1584", VA = "0xAB1584")]
	private void LocalTouchEventCallback(OVRTouchpad.TouchEvent touchEvent)
	{
	}

	[Token(Token = "0x6000258")]
	[Address(RVA = "0xAB15D4", Offset = "0xAB15D4", VA = "0xAB15D4")]
	public LipSyncDemo_SetCurrentTarget()
	{
	}
}
[Token(Token = "0x2000095")]
public class OVRLipSyncDebugConsole : MonoBehaviour
{
	[Token(Token = "0x40003AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ArrayList messages;

	[Token(Token = "0x40003AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int maxMessages;

	[Token(Token = "0x40003AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text textMsg;

	[Token(Token = "0x40003AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static OVRLipSyncDebugConsole s_Instance;

	[Token(Token = "0x40003AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool clearTimeoutOn;

	[Token(Token = "0x40003AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float clearTimeout;

	[Token(Token = "0x1700000F")]
	public static OVRLipSyncDebugConsole instance
	{
		[Token(Token = "0x6000259")]
		[Address(RVA = "0xF9B530", Offset = "0xF9B530", VA = "0xF9B530")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600025A")]
	[Address(RVA = "0xF9B7E8", Offset = "0xF9B7E8", VA = "0xF9B7E8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600025B")]
	[Address(RVA = "0xF9B924", Offset = "0xF9B924", VA = "0xF9B924")]
	private void Update()
	{
	}

	[Token(Token = "0x600025C")]
	[Address(RVA = "0xF9B858", Offset = "0xF9B858", VA = "0xF9B858")]
	public void Init()
	{
	}

	[Token(Token = "0x600025D")]
	[Address(RVA = "0xF997D8", Offset = "0xF997D8", VA = "0xF997D8")]
	public static void Log(string message)
	{
	}

	[Token(Token = "0x600025E")]
	[Address(RVA = "0xF9BAAC", Offset = "0xF9BAAC", VA = "0xF9BAAC")]
	public static void Log(string message, Color color)
	{
	}

	[Token(Token = "0x600025F")]
	[Address(RVA = "0xF99770", Offset = "0xF99770", VA = "0xF99770")]
	public static void Clear()
	{
	}

	[Token(Token = "0x6000260")]
	[Address(RVA = "0xF99858", Offset = "0xF99858", VA = "0xF99858")]
	public static void ClearTimeout(float timeToClear)
	{
	}

	[Token(Token = "0x6000261")]
	[Address(RVA = "0xF9B9BC", Offset = "0xF9B9BC", VA = "0xF9B9BC")]
	public void AddMessage(string message, Color color)
	{
	}

	[Token(Token = "0x6000262")]
	[Address(RVA = "0xF9BB4C", Offset = "0xF9BB4C", VA = "0xF9BB4C")]
	public void ClearMessages()
	{
	}

	[Token(Token = "0x6000263")]
	[Address(RVA = "0xF9BB88", Offset = "0xF9BB88", VA = "0xF9BB88")]
	public void SetClearTimeout(float timeout)
	{
	}

	[Token(Token = "0x6000264")]
	[Address(RVA = "0xF9BD7C", Offset = "0xF9BD7C", VA = "0xF9BD7C")]
	private void Prune()
	{
	}

	[Token(Token = "0x6000265")]
	[Address(RVA = "0xF9BB98", Offset = "0xF9BB98", VA = "0xF9BB98")]
	private void Display()
	{
	}

	[Token(Token = "0x6000266")]
	[Address(RVA = "0xF9BE2C", Offset = "0xF9BE2C", VA = "0xF9BE2C")]
	public OVRLipSyncDebugConsole()
	{
	}
}
[Token(Token = "0x2000096")]
public class OVRNamedArrayAttribute : PropertyAttribute
{
	[Token(Token = "0x40003B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public readonly string[] names;

	[Token(Token = "0x6000268")]
	[Address(RVA = "0xF9BF10", Offset = "0xF9BF10", VA = "0xF9BF10")]
	public OVRNamedArrayAttribute(string[] names)
	{
	}
}
[Token(Token = "0x2000097")]
public static class OVRTouchpad
{
	[Token(Token = "0x20005FE")]
	public enum TouchEvent
	{
		[Token(Token = "0x40023DC")]
		SingleTap,
		[Token(Token = "0x40023DD")]
		DoubleTap,
		[Token(Token = "0x40023DE")]
		Left,
		[Token(Token = "0x40023DF")]
		Right,
		[Token(Token = "0x40023E0")]
		Up,
		[Token(Token = "0x40023E1")]
		Down
	}

	[Token(Token = "0x20005FF")]
	public delegate void OVRTouchpadCallback<TouchEvent>(TouchEvent arg);

	[Token(Token = "0x40003B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Vector3 moveAmountMouse;

	[Token(Token = "0x40003B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static float minMovMagnitudeMouse;

	[Token(Token = "0x40003B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Delegate touchPadCallbacks;

	[Token(Token = "0x40003B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static OVRTouchpadHelper touchpadHelper;

	[Token(Token = "0x6000269")]
	[Address(RVA = "0xB8E9E0", Offset = "0xB8E9E0", VA = "0xB8E9E0")]
	public static void Create()
	{
	}

	[Token(Token = "0x600026A")]
	[Address(RVA = "0xB8E9E4", Offset = "0xB8E9E4", VA = "0xB8E9E4")]
	public static void Update()
	{
	}

	[Token(Token = "0x600026B")]
	[Address(RVA = "0xB8ED04", Offset = "0xB8ED04", VA = "0xB8ED04")]
	public static void OnDisable()
	{
	}

	[Token(Token = "0x600026C")]
	[Address(RVA = "0xB8EB54", Offset = "0xB8EB54", VA = "0xB8EB54")]
	private static void HandleInputMouse(ref Vector3 move)
	{
	}

	[Token(Token = "0x600026D")]
	[Address(RVA = "0xB8ED08", Offset = "0xB8ED08", VA = "0xB8ED08")]
	public static void AddListener(OVRTouchpadCallback<TouchEvent> handler)
	{
	}
}
[Token(Token = "0x2000098")]
public sealed class OVRTouchpadHelper : MonoBehaviour
{
	[Token(Token = "0x600026F")]
	[Address(RVA = "0xB8EE74", Offset = "0xB8EE74", VA = "0xB8EE74")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000270")]
	[Address(RVA = "0xB8EEF0", Offset = "0xB8EEF0", VA = "0xB8EEF0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000271")]
	[Address(RVA = "0xB8EF88", Offset = "0xB8EF88", VA = "0xB8EF88")]
	private void Update()
	{
	}

	[Token(Token = "0x6000272")]
	[Address(RVA = "0xB8EFE4", Offset = "0xB8EFE4", VA = "0xB8EFE4")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x6000273")]
	[Address(RVA = "0xB8F048", Offset = "0xB8F048", VA = "0xB8F048")]
	private void LocalTouchEventCallback(OVRTouchpad.TouchEvent touchEvent)
	{
	}

	[Token(Token = "0x6000274")]
	[Address(RVA = "0xB8F04C", Offset = "0xB8F04C", VA = "0xB8F04C")]
	public OVRTouchpadHelper()
	{
	}
}
[Token(Token = "0x2000099")]
public class OVRLipSync : MonoBehaviour
{
	[Token(Token = "0x2000600")]
	public enum Result
	{
		[Token(Token = "0x40023E3")]
		Success = 0,
		[Token(Token = "0x40023E4")]
		Unknown = -2200,
		[Token(Token = "0x40023E5")]
		CannotCreateContext = -2201,
		[Token(Token = "0x40023E6")]
		InvalidParam = -2202,
		[Token(Token = "0x40023E7")]
		BadSampleRate = -2203,
		[Token(Token = "0x40023E8")]
		MissingDLL = -2204,
		[Token(Token = "0x40023E9")]
		BadVersion = -2205,
		[Token(Token = "0x40023EA")]
		UndefinedFunction = -2206
	}

	[Token(Token = "0x2000601")]
	public enum AudioDataType
	{
		[Token(Token = "0x40023EC")]
		S16_Mono,
		[Token(Token = "0x40023ED")]
		S16_Stereo,
		[Token(Token = "0x40023EE")]
		F32_Mono,
		[Token(Token = "0x40023EF")]
		F32_Stereo
	}

	[Token(Token = "0x2000602")]
	public enum Viseme
	{
		[Token(Token = "0x40023F1")]
		sil,
		[Token(Token = "0x40023F2")]
		PP,
		[Token(Token = "0x40023F3")]
		FF,
		[Token(Token = "0x40023F4")]
		TH,
		[Token(Token = "0x40023F5")]
		DD,
		[Token(Token = "0x40023F6")]
		kk,
		[Token(Token = "0x40023F7")]
		CH,
		[Token(Token = "0x40023F8")]
		SS,
		[Token(Token = "0x40023F9")]
		nn,
		[Token(Token = "0x40023FA")]
		RR,
		[Token(Token = "0x40023FB")]
		aa,
		[Token(Token = "0x40023FC")]
		E,
		[Token(Token = "0x40023FD")]
		ih,
		[Token(Token = "0x40023FE")]
		oh,
		[Token(Token = "0x40023FF")]
		ou
	}

	[Token(Token = "0x2000603")]
	public enum Signals
	{
		[Token(Token = "0x4002401")]
		VisemeOn,
		[Token(Token = "0x4002402")]
		VisemeOff,
		[Token(Token = "0x4002403")]
		VisemeAmount,
		[Token(Token = "0x4002404")]
		VisemeSmoothing,
		[Token(Token = "0x4002405")]
		LaughterAmount
	}

	[Token(Token = "0x2000604")]
	public enum ContextProviders
	{
		[Token(Token = "0x4002407")]
		Original,
		[Token(Token = "0x4002408")]
		Enhanced,
		[Token(Token = "0x4002409")]
		Enhanced_with_Laughter
	}

	[Serializable]
	[Token(Token = "0x2000605")]
	public class Frame
	{
		[Token(Token = "0x400240A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int frameNumber;

		[Token(Token = "0x400240B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int frameDelay;

		[Token(Token = "0x400240C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float[] Visemes;

		[Token(Token = "0x400240D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float laughterScore;

		[Token(Token = "0x6003327")]
		[Address(RVA = "0xF990F0", Offset = "0xF990F0", VA = "0xF990F0")]
		public void CopyInput(Frame input)
		{
		}

		[Token(Token = "0x6003328")]
		[Address(RVA = "0xF99148", Offset = "0xF99148", VA = "0xF99148")]
		public void Reset()
		{
		}

		[Token(Token = "0x6003329")]
		[Address(RVA = "0xF991D8", Offset = "0xF991D8", VA = "0xF991D8")]
		public Frame()
		{
		}
	}

	[Token(Token = "0x40003B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly int VisemeCount;

	[Token(Token = "0x40003B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static readonly int SignalCount;

	[Token(Token = "0x40003B7")]
	public const string strOVRLS = "OVRLipSync";

	[Token(Token = "0x40003B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Result sInitialized;

	[Token(Token = "0x40003B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static OVRLipSync sInstance;

	[PreserveSig]
	[Token(Token = "0x6000275")]
	[Address(RVA = "0xF97A84", Offset = "0xF97A84", VA = "0xF97A84")]
	private static extern int ovrLipSyncDll_Initialize(int samplerate, int buffersize);

	[PreserveSig]
	[Token(Token = "0x6000276")]
	[Address(RVA = "0xF97B14", Offset = "0xF97B14", VA = "0xF97B14")]
	private static extern void ovrLipSyncDll_Shutdown();

	[PreserveSig]
	[Token(Token = "0x6000277")]
	[Address(RVA = "0xF97B84", Offset = "0xF97B84", VA = "0xF97B84")]
	private static extern IntPtr ovrLipSyncDll_GetVersion(ref int Major, ref int Minor, ref int Patch);

	[PreserveSig]
	[Token(Token = "0x6000278")]
	[Address(RVA = "0xF97C18", Offset = "0xF97C18", VA = "0xF97C18")]
	private static extern int ovrLipSyncDll_CreateContextEx(ref uint context, ContextProviders provider, int sampleRate, bool enableAcceleration);

	[PreserveSig]
	[Token(Token = "0x6000279")]
	[Address(RVA = "0xF97CC0", Offset = "0xF97CC0", VA = "0xF97CC0")]
	private static extern int ovrLipSyncDll_CreateContextWithModelFile(ref uint context, ContextProviders provider, string modelPath, int sampleRate, bool enableAcceleration);

	[PreserveSig]
	[Token(Token = "0x600027A")]
	[Address(RVA = "0xF97D8C", Offset = "0xF97D8C", VA = "0xF97D8C")]
	private static extern int ovrLipSyncDll_DestroyContext(uint context);

	[PreserveSig]
	[Token(Token = "0x600027B")]
	[Address(RVA = "0xF97E0C", Offset = "0xF97E0C", VA = "0xF97E0C")]
	private static extern int ovrLipSyncDll_ResetContext(uint context);

	[PreserveSig]
	[Token(Token = "0x600027C")]
	[Address(RVA = "0xF97E8C", Offset = "0xF97E8C", VA = "0xF97E8C")]
	private static extern int ovrLipSyncDll_SendSignal(uint context, Signals signal, int arg1, int arg2);

	[PreserveSig]
	[Token(Token = "0x600027D")]
	[Address(RVA = "0xF97F34", Offset = "0xF97F34", VA = "0xF97F34")]
	private static extern int ovrLipSyncDll_ProcessFrameEx(uint context, IntPtr audioBuffer, uint bufferSize, AudioDataType dataType, ref int frameNumber, ref int frameDelay, float[] visemes, int visemeCount, ref float laughterScore, float[] laughterCategories, int laughterCategoriesLength);

	[Token(Token = "0x600027E")]
	[Address(RVA = "0xF9803C", Offset = "0xF9803C", VA = "0xF9803C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600027F")]
	[Address(RVA = "0xF984AC", Offset = "0xF984AC", VA = "0xF984AC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000280")]
	[Address(RVA = "0xF98374", Offset = "0xF98374", VA = "0xF98374")]
	public static Result Initialize()
	{
		return default(Result);
	}

	[Token(Token = "0x6000281")]
	[Address(RVA = "0xF9858C", Offset = "0xF9858C", VA = "0xF9858C")]
	public static Result Initialize(int sampleRate, int bufferSize)
	{
		return default(Result);
	}

	[Token(Token = "0x6000282")]
	[Address(RVA = "0xF986A0", Offset = "0xF986A0", VA = "0xF986A0")]
	public static void Shutdown()
	{
	}

	[Token(Token = "0x6000283")]
	[Address(RVA = "0xF98710", Offset = "0xF98710", VA = "0xF98710")]
	public static Result IsInitialized()
	{
		return default(Result);
	}

	[Token(Token = "0x6000284")]
	[Address(RVA = "0xF98778", Offset = "0xF98778", VA = "0xF98778")]
	public static Result CreateContext(ref uint context, ContextProviders provider, int sampleRate = 0, bool enableAcceleration = false)
	{
		return default(Result);
	}

	[Token(Token = "0x6000285")]
	[Address(RVA = "0xF9889C", Offset = "0xF9889C", VA = "0xF9889C")]
	public static Result CreateContextWithModelFile(ref uint context, ContextProviders provider, string modelPath, int sampleRate = 0, bool enableAcceleration = false)
	{
		return default(Result);
	}

	[Token(Token = "0x6000286")]
	[Address(RVA = "0xF989D4", Offset = "0xF989D4", VA = "0xF989D4")]
	public static Result DestroyContext(uint context)
	{
		return default(Result);
	}

	[Token(Token = "0x6000287")]
	[Address(RVA = "0xF98AB4", Offset = "0xF98AB4", VA = "0xF98AB4")]
	public static Result ResetContext(uint context)
	{
		return default(Result);
	}

	[Token(Token = "0x6000288")]
	[Address(RVA = "0xF98B94", Offset = "0xF98B94", VA = "0xF98B94")]
	public static Result SendSignal(uint context, Signals signal, int arg1, int arg2)
	{
		return default(Result);
	}

	[Token(Token = "0x6000289")]
	[Address(RVA = "0xF98C98", Offset = "0xF98C98", VA = "0xF98C98")]
	public static Result ProcessFrame(uint context, float[] audioBuffer, Frame frame, bool stereo = true)
	{
		return default(Result);
	}

	[Token(Token = "0x600028A")]
	[Address(RVA = "0xF98E3C", Offset = "0xF98E3C", VA = "0xF98E3C")]
	public static Result ProcessFrame(uint context, short[] audioBuffer, Frame frame, bool stereo = true)
	{
		return default(Result);
	}

	[Token(Token = "0x600028B")]
	[Address(RVA = "0xF98FD8", Offset = "0xF98FD8", VA = "0xF98FD8")]
	public OVRLipSync()
	{
	}
}
[Token(Token = "0x200009A")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x81ED44", Offset = "0x81ED44")]
public class OVRLipSyncContext : OVRLipSyncContextBase
{
	[Token(Token = "0x40003BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8216DC", Offset = "0x8216DC")]
	public bool enableKeyboardInput;

	[Token(Token = "0x40003BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x821714", Offset = "0x821714")]
	public bool enableTouchInput;

	[Token(Token = "0x40003BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82174C", Offset = "0x82174C")]
	public bool audioLoopback;

	[Token(Token = "0x40003BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x821784", Offset = "0x821784")]
	public KeyCode loopbackKey;

	[Token(Token = "0x40003BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8217BC", Offset = "0x8217BC")]
	public bool showVisemes;

	[Token(Token = "0x40003BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8217F4", Offset = "0x8217F4")]
	public KeyCode debugVisemesKey;

	[Token(Token = "0x40003C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82182C", Offset = "0x82182C")]
	public bool skipAudioSource;

	[Token(Token = "0x40003C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x821864", Offset = "0x821864")]
	public float gain;

	[Token(Token = "0x40003C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool hasDebugConsole;

	[Token(Token = "0x40003C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public KeyCode debugLaughterKey;

	[Token(Token = "0x40003C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool showLaughter;

	[Token(Token = "0x40003C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float laughterScore;

	[Token(Token = "0x600028D")]
	[Address(RVA = "0xF99260", Offset = "0xF99260", VA = "0xF99260")]
	private void Start()
	{
	}

	[Token(Token = "0x600028E")]
	[Address(RVA = "0xF9938C", Offset = "0xF9938C", VA = "0xF9938C")]
	private void HandleKeyboard()
	{
	}

	[Token(Token = "0x600028F")]
	[Address(RVA = "0xF998D8", Offset = "0xF998D8", VA = "0xF998D8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000290")]
	[Address(RVA = "0xF99B84", Offset = "0xF99B84", VA = "0xF99B84")]
	public void PreprocessAudioSamples(float[] data, int channels)
	{
	}

	[Token(Token = "0x6000291")]
	[Address(RVA = "0xF99BE8", Offset = "0xF99BE8", VA = "0xF99BE8")]
	public void PostprocessAudioSamples(float[] data, int channels)
	{
	}

	[Token(Token = "0x6000292")]
	[Address(RVA = "0xF99C54", Offset = "0xF99C54", VA = "0xF99C54")]
	public void ProcessAudioSamplesRaw(float[] data, int channels)
	{
	}

	[Token(Token = "0x6000293")]
	[Address(RVA = "0xF99DB8", Offset = "0xF99DB8", VA = "0xF99DB8")]
	public void ProcessAudioSamplesRaw(short[] data, int channels)
	{
	}

	[Token(Token = "0x6000294")]
	[Address(RVA = "0xF99F1C", Offset = "0xF99F1C", VA = "0xF99F1C")]
	public void ProcessAudioSamples(float[] data, int channels)
	{
	}

	[Token(Token = "0x6000295")]
	[Address(RVA = "0xF9A050", Offset = "0xF9A050", VA = "0xF9A050")]
	private void OnAudioFilterRead(float[] data, int channels)
	{
	}

	[Token(Token = "0x6000296")]
	[Address(RVA = "0xF9991C", Offset = "0xF9991C", VA = "0xF9991C")]
	private void DebugShowVisemesAndLaughter()
	{
	}

	[Token(Token = "0x6000297")]
	[Address(RVA = "0xF9969C", Offset = "0xF9969C", VA = "0xF9969C")]
	private void ToggleAudioLoopback()
	{
	}

	[Token(Token = "0x6000298")]
	[Address(RVA = "0xF9A060", Offset = "0xF9A060", VA = "0xF9A060")]
	private void LocalTouchEventCallback(OVRTouchpad.TouchEvent touchEvent)
	{
	}

	[Token(Token = "0x6000299")]
	[Address(RVA = "0xF9A18C", Offset = "0xF9A18C", VA = "0xF9A18C")]
	public OVRLipSyncContext()
	{
	}
}
[Token(Token = "0x200009B")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x81EDA8", Offset = "0x81EDA8")]
public class OVRLipSyncContextBase : MonoBehaviour
{
	[Token(Token = "0x40003C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSource audioSource;

	[Token(Token = "0x40003C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82189C", Offset = "0x82189C")]
	public OVRLipSync.ContextProviders provider;

	[Token(Token = "0x40003C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8218D4", Offset = "0x8218D4")]
	public bool enableAcceleration;

	[Token(Token = "0x40003C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVRLipSync.Frame frame;

	[Token(Token = "0x40003CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private uint context;

	[Token(Token = "0x40003CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int _smoothing;

	[Token(Token = "0x17000010")]
	public int Smoothing
	{
		[Token(Token = "0x600029B")]
		[Address(RVA = "0xF9A30C", Offset = "0xF9A30C", VA = "0xF9A30C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600029A")]
		[Address(RVA = "0xF9A220", Offset = "0xF9A220", VA = "0xF9A220")]
		set
		{
		}
	}

	[Token(Token = "0x17000011")]
	public uint Context
	{
		[Token(Token = "0x600029C")]
		[Address(RVA = "0xF9A314", Offset = "0xF9A314", VA = "0xF9A314")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x17000012")]
	protected OVRLipSync.Frame Frame
	{
		[Token(Token = "0x600029D")]
		[Address(RVA = "0xF9A31C", Offset = "0xF9A31C", VA = "0xF9A31C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600029E")]
	[Address(RVA = "0xF9A324", Offset = "0xF9A324", VA = "0xF9A324")]
	private void Awake()
	{
	}

	[Token(Token = "0x600029F")]
	[Address(RVA = "0xF9A4B4", Offset = "0xF9A4B4", VA = "0xF9A4B4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60002A0")]
	[Address(RVA = "0xF9A5D0", Offset = "0xF9A5D0", VA = "0xF9A5D0")]
	public OVRLipSync.Frame GetCurrentPhonemeFrame()
	{
		return null;
	}

	[Token(Token = "0x60002A1")]
	[Address(RVA = "0xF9A5D8", Offset = "0xF9A5D8", VA = "0xF9A5D8")]
	public void SetVisemeBlend(int viseme, int amount)
	{
	}

	[Token(Token = "0x60002A2")]
	[Address(RVA = "0xF9A6CC", Offset = "0xF9A6CC", VA = "0xF9A6CC")]
	public void SetLaughterBlend(int amount)
	{
	}

	[Token(Token = "0x60002A3")]
	[Address(RVA = "0xF9A794", Offset = "0xF9A794", VA = "0xF9A794")]
	public OVRLipSync.Result ResetContext()
	{
		return default(OVRLipSync.Result);
	}

	[Token(Token = "0x60002A4")]
	[Address(RVA = "0xF9A1B0", Offset = "0xF9A1B0", VA = "0xF9A1B0")]
	public OVRLipSyncContextBase()
	{
	}
}
[Token(Token = "0x200009C")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x81EE0C", Offset = "0x81EE0C")]
public class OVRLipSyncContextCanned : OVRLipSyncContextBase
{
	[Token(Token = "0x40003CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82190C", Offset = "0x82190C")]
	public OVRLipSyncSequence currentSequence;

	[Token(Token = "0x60002A5")]
	[Address(RVA = "0xF9A80C", Offset = "0xF9A80C", VA = "0xF9A80C")]
	private void Update()
	{
	}

	[Token(Token = "0x60002A6")]
	[Address(RVA = "0xF9A97C", Offset = "0xF9A97C", VA = "0xF9A97C")]
	public OVRLipSyncContextCanned()
	{
	}
}
[Token(Token = "0x200009D")]
public class OVRLipSyncContextMorphTarget : MonoBehaviour
{
	[Token(Token = "0x40003CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x821944", Offset = "0x821944")]
	public SkinnedMeshRenderer skinnedMeshRenderer;

	[Token(Token = "0x40003CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82197C", Offset = "0x82197C")]
	public int[] visemeToBlendTargets;

	[Token(Token = "0x40003CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8219B4", Offset = "0x8219B4")]
	public bool enableVisemeTestKeys;

	[Token(Token = "0x40003D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8219EC", Offset = "0x8219EC")]
	public KeyCode[] visemeTestKeys;

	[Token(Token = "0x40003D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x821A24", Offset = "0x821A24")]
	public KeyCode laughterKey;

	[Token(Token = "0x40003D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x821A5C", Offset = "0x821A5C")]
	public int laughterBlendTarget;

	[Token(Token = "0x40003D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x821A94", Offset = "0x821A94")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x821A94", Offset = "0x821A94")]
	public float laughterThreshold;

	[Token(Token = "0x40003D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x821AE8", Offset = "0x821AE8")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x821AE8", Offset = "0x821AE8")]
	public float laughterMultiplier;

	[Token(Token = "0x40003D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x821B3C", Offset = "0x821B3C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x821B3C", Offset = "0x821B3C")]
	public int smoothAmount;

	[Token(Token = "0x40003D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private OVRLipSyncContextBase lipsyncContext;

	[Token(Token = "0x60002A7")]
	[Address(RVA = "0xF9A980", Offset = "0xF9A980", VA = "0xF9A980")]
	private void Start()
	{
	}

	[Token(Token = "0x60002A8")]
	[Address(RVA = "0xF9AAC4", Offset = "0xF9AAC4", VA = "0xF9AAC4")]
	private void Update()
	{
	}

	[Token(Token = "0x60002A9")]
	[Address(RVA = "0xF9AD74", Offset = "0xF9AD74", VA = "0xF9AD74")]
	private void CheckForKeys()
	{
	}

	[Token(Token = "0x60002AA")]
	[Address(RVA = "0xF9ABD0", Offset = "0xF9ABD0", VA = "0xF9ABD0")]
	private void SetVisemeToMorphTarget(OVRLipSync.Frame frame)
	{
	}

	[Token(Token = "0x60002AB")]
	[Address(RVA = "0xF9AC84", Offset = "0xF9AC84", VA = "0xF9AC84")]
	private void SetLaughterToMorphTarget(OVRLipSync.Frame frame)
	{
	}

	[Token(Token = "0x60002AC")]
	[Address(RVA = "0xF9AE44", Offset = "0xF9AE44", VA = "0xF9AE44")]
	private void CheckVisemeKey(KeyCode key, int viseme, int amount)
	{
	}

	[Token(Token = "0x60002AD")]
	[Address(RVA = "0xF9AF08", Offset = "0xF9AF08", VA = "0xF9AF08")]
	private void CheckLaughterKey()
	{
	}

	[Token(Token = "0x60002AE")]
	[Address(RVA = "0xF9AF70", Offset = "0xF9AF70", VA = "0xF9AF70")]
	public OVRLipSyncContextMorphTarget()
	{
	}
}
[Token(Token = "0x200009E")]
public class OVRLipSyncContextTextureFlip : MonoBehaviour
{
	[Token(Token = "0x40003D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material material;

	[Token(Token = "0x40003D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x821B94", Offset = "0x821B94")]
	[AttributeAttribute(Name = "OVRNamedArrayAttribute", RVA = "0x821B94", Offset = "0x821B94")]
	public Texture[] Textures;

	[Token(Token = "0x40003D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x821D10", Offset = "0x821D10")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x821D10", Offset = "0x821D10")]
	public int smoothAmount;

	[Token(Token = "0x40003DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private OVRLipSyncContextBase lipsyncContext;

	[Token(Token = "0x40003DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private OVRLipSync.Frame oldFrame;

	[Token(Token = "0x60002AF")]
	[Address(RVA = "0xF9B068", Offset = "0xF9B068", VA = "0xF9B068")]
	private void Start()
	{
	}

	[Token(Token = "0x60002B0")]
	[Address(RVA = "0xF9B1BC", Offset = "0xF9B1BC", VA = "0xF9B1BC")]
	private void Update()
	{
	}

	[Token(Token = "0x60002B1")]
	[Address(RVA = "0xF9B360", Offset = "0xF9B360", VA = "0xF9B360")]
	private void SetVisemeToTexture()
	{
	}

	[Token(Token = "0x60002B2")]
	[Address(RVA = "0xF9B484", Offset = "0xF9B484", VA = "0xF9B484")]
	public OVRLipSyncContextTextureFlip()
	{
	}
}
[Serializable]
[Token(Token = "0x200009F")]
public class OVRLipSyncSequence : ScriptableObject
{
	[Token(Token = "0x40003DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<OVRLipSync.Frame> entries;

	[Token(Token = "0x40003DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float length;

	[Token(Token = "0x60002B3")]
	[Address(RVA = "0xF9A8D8", Offset = "0xF9A8D8", VA = "0xF9A8D8")]
	public OVRLipSync.Frame GetFrameAtTime(float time)
	{
		return null;
	}

	[Token(Token = "0x60002B4")]
	[Address(RVA = "0xF9BEA0", Offset = "0xF9BEA0", VA = "0xF9BEA0")]
	public OVRLipSyncSequence()
	{
	}
}
[Token(Token = "0x20000A0")]
public class DebugUIBuilder : MonoBehaviour
{
	[Token(Token = "0x2000606")]
	public delegate void OnClick();

	[Token(Token = "0x2000607")]
	public delegate void OnToggleValueChange(Toggle t);

	[Token(Token = "0x2000608")]
	public delegate void OnSlider(float f);

	[Token(Token = "0x2000609")]
	public delegate bool ActiveUpdate();

	[Token(Token = "0x200060A")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820AE8", Offset = "0x820AE8")]
	private sealed class <>c__DisplayClass35_0
	{
		[Token(Token = "0x400240E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public OnClick handler;

		[Token(Token = "0x600333A")]
		[Address(RVA = "0xA54344", Offset = "0xA54344", VA = "0xA54344")]
		public <>c__DisplayClass35_0()
		{
		}

		[Token(Token = "0x600333B")]
		[Address(RVA = "0xA54CE4", Offset = "0xA54CE4", VA = "0xA54CE4")]
		internal void <AddButton>b__0()
		{
		}
	}

	[Token(Token = "0x200060B")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820AF8", Offset = "0x820AF8")]
	private sealed class <>c__DisplayClass37_0
	{
		[Token(Token = "0x400240F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public OnSlider onValueChanged;

		[Token(Token = "0x600333C")]
		[Address(RVA = "0xA545B8", Offset = "0xA545B8", VA = "0xA545B8")]
		public <>c__DisplayClass37_0()
		{
		}

		[Token(Token = "0x600333D")]
		[Address(RVA = "0xA54F08", Offset = "0xA54F08", VA = "0xA54F08")]
		internal void <AddSlider>b__0(float f)
		{
		}
	}

	[Token(Token = "0x200060C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820B08", Offset = "0x820B08")]
	private sealed class <>c__DisplayClass39_0
	{
		[Token(Token = "0x4002410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public OnToggleValueChange onValueChanged;

		[Token(Token = "0x4002411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Toggle t;

		[Token(Token = "0x600333E")]
		[Address(RVA = "0xA547D0", Offset = "0xA547D0", VA = "0xA547D0")]
		public <>c__DisplayClass39_0()
		{
		}

		[Token(Token = "0x600333F")]
		[Address(RVA = "0xA55180", Offset = "0xA55180", VA = "0xA55180")]
		internal void <AddToggle>b__0(bool <p0>)
		{
		}
	}

	[Token(Token = "0x200060D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820B18", Offset = "0x820B18")]
	private sealed class <>c__DisplayClass40_0
	{
		[Token(Token = "0x4002412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public OnToggleValueChange onValueChanged;

		[Token(Token = "0x4002413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Toggle t;

		[Token(Token = "0x6003340")]
		[Address(RVA = "0xA54964", Offset = "0xA54964", VA = "0xA54964")]
		public <>c__DisplayClass40_0()
		{
		}

		[Token(Token = "0x6003341")]
		[Address(RVA = "0xA55534", Offset = "0xA55534", VA = "0xA55534")]
		internal void <AddToggle>b__0(bool <p0>)
		{
		}
	}

	[Token(Token = "0x200060E")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820B28", Offset = "0x820B28")]
	private sealed class <>c__DisplayClass41_0
	{
		[Token(Token = "0x4002414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public OnToggleValueChange handler;

		[Token(Token = "0x4002415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Toggle tb;

		[Token(Token = "0x6003342")]
		[Address(RVA = "0xA54BBC", Offset = "0xA54BBC", VA = "0xA54BBC")]
		public <>c__DisplayClass41_0()
		{
		}

		[Token(Token = "0x6003343")]
		[Address(RVA = "0xA55554", Offset = "0xA55554", VA = "0xA55554")]
		internal void <AddRadio>b__0(bool <p0>)
		{
		}
	}

	[Token(Token = "0x40003DE")]
	public const int DEBUG_PANE_CENTER = 0;

	[Token(Token = "0x40003DF")]
	public const int DEBUG_PANE_RIGHT = 1;

	[Token(Token = "0x40003E0")]
	public const int DEBUG_PANE_LEFT = 2;

	[Token(Token = "0x40003E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private RectTransform buttonPrefab;

	[Token(Token = "0x40003E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private RectTransform labelPrefab;

	[Token(Token = "0x40003E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private RectTransform sliderPrefab;

	[Token(Token = "0x40003E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private RectTransform dividerPrefab;

	[Token(Token = "0x40003E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private RectTransform togglePrefab;

	[Token(Token = "0x40003E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private RectTransform radioPrefab;

	[Token(Token = "0x40003E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GameObject uiHelpersToInstantiate;

	[Token(Token = "0x40003E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Transform[] targetContentPanels;

	[Token(Token = "0x40003E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool[] reEnable;

	[Token(Token = "0x40003EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private List<GameObject> toEnable;

	[Token(Token = "0x40003EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private List<GameObject> toDisable;

	[Token(Token = "0x40003EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static DebugUIBuilder instance;

	[Token(Token = "0x40003ED")]
	private const float elementSpacing = 16f;

	[Token(Token = "0x40003EE")]
	private const float marginH = 16f;

	[Token(Token = "0x40003EF")]
	private const float marginV = 16f;

	[Token(Token = "0x40003F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector2[] insertPositions;

	[Token(Token = "0x40003F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private List<RectTransform>[] insertedElements;

	[Token(Token = "0x40003F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Vector3 menuOffset;

	[Token(Token = "0x40003F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private OVRCameraRig rig;

	[Token(Token = "0x40003F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Dictionary<string, ToggleGroup> radioGroups;

	[Token(Token = "0x40003F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private LaserPointer lp;

	[Token(Token = "0x40003F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private LineRenderer lr;

	[Token(Token = "0x40003F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public LaserPointer.LaserBeamBehavior laserBeamBehavior;

	[Token(Token = "0x60002B5")]
	[Address(RVA = "0xA532F0", Offset = "0xA532F0", VA = "0xA532F0")]
	public void Awake()
	{
	}

	[Token(Token = "0x60002B6")]
	[Address(RVA = "0xA536F4", Offset = "0xA536F4", VA = "0xA536F4")]
	public void Show()
	{
	}

	[Token(Token = "0x60002B7")]
	[Address(RVA = "0xA53CC0", Offset = "0xA53CC0", VA = "0xA53CC0")]
	public void Hide()
	{
	}

	[Token(Token = "0x60002B8")]
	[Address(RVA = "0xA53A6C", Offset = "0xA53A6C", VA = "0xA53A6C")]
	private void Relayout()
	{
	}

	[Token(Token = "0x60002B9")]
	[Address(RVA = "0xA53E68", Offset = "0xA53E68", VA = "0xA53E68")]
	private void AddRect(RectTransform r, int targetCanvas)
	{
	}

	[Token(Token = "0x60002BA")]
	[Address(RVA = "0xA5411C", Offset = "0xA5411C", VA = "0xA5411C")]
	public RectTransform AddButton(string label, OnClick handler, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60002BB")]
	[Address(RVA = "0xA5434C", Offset = "0xA5434C", VA = "0xA5434C")]
	public RectTransform AddLabel(string label, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60002BC")]
	[Address(RVA = "0xA54430", Offset = "0xA54430", VA = "0xA54430")]
	public RectTransform AddSlider(string label, float min, float max, OnSlider onValueChanged, bool wholeNumbersOnly = false, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60002BD")]
	[Address(RVA = "0xA545C0", Offset = "0xA545C0", VA = "0xA545C0")]
	public RectTransform AddDivider(int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60002BE")]
	[Address(RVA = "0xA5465C", Offset = "0xA5465C", VA = "0xA5465C")]
	public RectTransform AddToggle(string label, OnToggleValueChange onValueChanged, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60002BF")]
	[Address(RVA = "0xA547D8", Offset = "0xA547D8", VA = "0xA547D8")]
	public RectTransform AddToggle(string label, OnToggleValueChange onValueChanged, bool defaultValue, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60002C0")]
	[Address(RVA = "0xA5496C", Offset = "0xA5496C", VA = "0xA5496C")]
	public RectTransform AddRadio(string label, string group, OnToggleValueChange handler, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60002C1")]
	[Address(RVA = "0xA54BC4", Offset = "0xA54BC4", VA = "0xA54BC4")]
	public void ToggleLaserPointer(bool isOn)
	{
	}

	[Token(Token = "0x60002C2")]
	[Address(RVA = "0xA54C74", Offset = "0xA54C74", VA = "0xA54C74")]
	public DebugUIBuilder()
	{
	}
}
[Token(Token = "0x20000A1")]
public class HandedInputSelector : MonoBehaviour
{
	[Token(Token = "0x40003F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRCameraRig m_CameraRig;

	[Token(Token = "0x40003F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private OVRInputModule m_InputModule;

	[Token(Token = "0x60002C3")]
	[Address(RVA = "0xA58358", Offset = "0xA58358", VA = "0xA58358")]
	private void Start()
	{
	}

	[Token(Token = "0x60002C4")]
	[Address(RVA = "0xA583E0", Offset = "0xA583E0", VA = "0xA583E0")]
	private void Update()
	{
	}

	[Token(Token = "0x60002C5")]
	[Address(RVA = "0xA584A8", Offset = "0xA584A8", VA = "0xA584A8")]
	private void SetActiveController(OVRInput.Controller c)
	{
	}

	[Token(Token = "0x60002C6")]
	[Address(RVA = "0xA584E4", Offset = "0xA584E4", VA = "0xA584E4")]
	public HandedInputSelector()
	{
	}
}
[Token(Token = "0x20000A2")]
public class LaserPointer : OVRCursor
{
	[Token(Token = "0x200060F")]
	public enum LaserBeamBehavior
	{
		[Token(Token = "0x4002417")]
		On,
		[Token(Token = "0x4002418")]
		Off,
		[Token(Token = "0x4002419")]
		OnWhenHitTarget
	}

	[Token(Token = "0x40003FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject cursorVisual;

	[Token(Token = "0x40003FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float maxLength;

	[Token(Token = "0x40003FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private LaserBeamBehavior _laserBeamBehavior;

	[Token(Token = "0x40003FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_restoreOnInputAcquired;

	[Token(Token = "0x40003FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 _startPoint;

	[Token(Token = "0x40003FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 _forward;

	[Token(Token = "0x4000400")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 _endPoint;

	[Token(Token = "0x4000401")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool _hitTarget;

	[Token(Token = "0x4000402")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private LineRenderer lineRenderer;

	[Token(Token = "0x17000013")]
	public LaserBeamBehavior laserBeamBehavior
	{
		[Token(Token = "0x60002C8")]
		[Address(RVA = "0xAAEAB0", Offset = "0xAAEAB0", VA = "0xAAEAB0")]
		get
		{
			return default(LaserBeamBehavior);
		}
		[Token(Token = "0x60002C7")]
		[Address(RVA = "0xAAEA6C", Offset = "0xAAEA6C", VA = "0xAAEA6C")]
		set
		{
		}
	}

	[Token(Token = "0x60002C9")]
	[Address(RVA = "0xAAEAB8", Offset = "0xAAEAB8", VA = "0xAAEAB8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002CA")]
	[Address(RVA = "0xAAEB10", Offset = "0xAAEB10", VA = "0xAAEB10")]
	private void Start()
	{
	}

	[Token(Token = "0x60002CB")]
	[Address(RVA = "0xAAEC28", Offset = "0xAAEC28", VA = "0xAAEC28", Slot = "5")]
	public override void SetCursorStartDest(Vector3 start, Vector3 dest, Vector3 normal)
	{
	}

	[Token(Token = "0x60002CC")]
	[Address(RVA = "0xAAEC44", Offset = "0xAAEC44", VA = "0xAAEC44", Slot = "4")]
	public override void SetCursorRay(Transform t)
	{
	}

	[Token(Token = "0x60002CD")]
	[Address(RVA = "0xAAEC98", Offset = "0xAAEC98", VA = "0xAAEC98")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60002CE")]
	[Address(RVA = "0xAAEEF4", Offset = "0xAAEEF4", VA = "0xAAEEF4")]
	private void UpdateLaserBeam(Vector3 start, Vector3 end)
	{
	}

	[Token(Token = "0x60002CF")]
	[Address(RVA = "0xAAF008", Offset = "0xAAF008", VA = "0xAAF008")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60002D0")]
	[Address(RVA = "0xAAF09C", Offset = "0xAAF09C", VA = "0xAAF09C")]
	public void OnInputFocusLost()
	{
	}

	[Token(Token = "0x60002D1")]
	[Address(RVA = "0xAAF16C", Offset = "0xAAF16C", VA = "0xAAF16C")]
	public void OnInputFocusAcquired()
	{
	}

	[Token(Token = "0x60002D2")]
	[Address(RVA = "0xAAF224", Offset = "0xAAF224", VA = "0xAAF224")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60002D3")]
	[Address(RVA = "0xAAF2F0", Offset = "0xAAF2F0", VA = "0xAAF2F0")]
	public LaserPointer()
	{
	}
}
[Token(Token = "0x20000A3")]
public class CharacterCameraConstraint : MonoBehaviour
{
	[Token(Token = "0x4000403")]
	private const float FADE_RAY_LENGTH = 0.25f;

	[Token(Token = "0x4000404")]
	private const float FADE_OVERLAP_MAXIMUM = 0.1f;

	[Token(Token = "0x4000405")]
	private const float FADE_AMOUNT_MAXIMUM = 1f;

	[Token(Token = "0x4000406")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x821E08", Offset = "0x821E08")]
	public OVRCameraRig CameraRig;

	[Token(Token = "0x4000407")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x821E40", Offset = "0x821E40")]
	public LayerMask CollideLayers;

	[Token(Token = "0x4000408")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x821E78", Offset = "0x821E78")]
	public float HeightOffset;

	[Token(Token = "0x4000409")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x821EB0", Offset = "0x821EB0")]
	public float MinimumHeight;

	[Token(Token = "0x400040A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x821EE8", Offset = "0x821EE8")]
	public float MaximumHeight;

	[Token(Token = "0x400040B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CapsuleCollider _character;

	[Token(Token = "0x400040C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SimpleCapsuleWithStickMovement _simplePlayerController;

	[Token(Token = "0x60002D4")]
	[Address(RVA = "0xA4FFD0", Offset = "0xA4FFD0", VA = "0xA4FFD0")]
	private CharacterCameraConstraint()
	{
	}

	[Token(Token = "0x60002D5")]
	[Address(RVA = "0xA4FFD8", Offset = "0xA4FFD8", VA = "0xA4FFD8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002D6")]
	[Address(RVA = "0xA50048", Offset = "0xA50048", VA = "0xA50048")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002D7")]
	[Address(RVA = "0xA500D4", Offset = "0xA500D4", VA = "0xA500D4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60002D8")]
	[Address(RVA = "0xA50160", Offset = "0xA50160", VA = "0xA50160")]
	private void CameraUpdate()
	{
	}

	[Token(Token = "0x60002D9")]
	[Address(RVA = "0xA50568", Offset = "0xA50568", VA = "0xA50568")]
	private bool CheckCameraOverlapped()
	{
		return default(bool);
	}

	[Token(Token = "0x60002DA")]
	[Address(RVA = "0xA50810", Offset = "0xA50810", VA = "0xA50810")]
	private bool CheckCameraNearClipping(out float result)
	{
		return default(bool);
	}
}
[Token(Token = "0x20000A4")]
public class LocomotionController : MonoBehaviour
{
	[Token(Token = "0x400040D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRCameraRig CameraRig;

	[Token(Token = "0x400040E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CapsuleCollider CharacterController;

	[Token(Token = "0x400040F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SimpleCapsuleWithStickMovement PlayerController;

	[Token(Token = "0x60002DB")]
	[Address(RVA = "0xAB15E4", Offset = "0xAB15E4", VA = "0xAB15E4")]
	private void Start()
	{
	}

	[Token(Token = "0x60002DC")]
	[Address(RVA = "0xAB1690", Offset = "0xAB1690", VA = "0xAB1690")]
	public LocomotionController()
	{
	}
}
[Token(Token = "0x20000A5")]
public class LocomotionTeleport : MonoBehaviour
{
	[Token(Token = "0x2000610")]
	public enum States
	{
		[Token(Token = "0x400241B")]
		Ready,
		[Token(Token = "0x400241C")]
		Aim,
		[Token(Token = "0x400241D")]
		CancelAim,
		[Token(Token = "0x400241E")]
		PreTeleport,
		[Token(Token = "0x400241F")]
		CancelTeleport,
		[Token(Token = "0x4002420")]
		Teleporting,
		[Token(Token = "0x4002421")]
		PostTeleport
	}

	[Token(Token = "0x2000611")]
	public enum TeleportIntentions
	{
		[Token(Token = "0x4002423")]
		None,
		[Token(Token = "0x4002424")]
		Aim,
		[Token(Token = "0x4002425")]
		PreTeleport,
		[Token(Token = "0x4002426")]
		Teleport
	}

	[Token(Token = "0x2000612")]
	public enum AimCollisionTypes
	{
		[Token(Token = "0x4002428")]
		Point,
		[Token(Token = "0x4002429")]
		Sphere,
		[Token(Token = "0x400242A")]
		Capsule
	}

	[Token(Token = "0x2000613")]
	public class AimData
	{
		[Token(Token = "0x400242B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public RaycastHit TargetHitInfo;

		[Token(Token = "0x400242C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool TargetValid;

		[Token(Token = "0x400242D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3? Destination;

		[Token(Token = "0x400242E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float Radius;

		[Token(Token = "0x400242F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82DC94", Offset = "0x82DC94")]
		private List<Vector3> <Points>k__BackingField;

		[Token(Token = "0x170006C0")]
		public List<Vector3> Points
		{
			[Token(Token = "0x6003345")]
			[Address(RVA = "0xAB4854", Offset = "0xAB4854", VA = "0xAB4854")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x834D60", Offset = "0x834D60")]
			get
			{
				return null;
			}
			[Token(Token = "0x6003346")]
			[Address(RVA = "0xAB485C", Offset = "0xAB485C", VA = "0xAB485C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x834D70", Offset = "0x834D70")]
			private set
			{
			}
		}

		[Token(Token = "0x6003344")]
		[Address(RVA = "0xAB47E0", Offset = "0xAB47E0", VA = "0xAB47E0")]
		public AimData()
		{
		}

		[Token(Token = "0x6003347")]
		[Address(RVA = "0xAB4864", Offset = "0xAB4864", VA = "0xAB4864")]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x2000614")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820B38", Offset = "0x820B38")]
	private sealed class <ReadyStateCoroutine>d__52 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4002430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4002431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4002432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x170006C1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600334B")]
			[Address(RVA = "0xAB462C", Offset = "0xAB462C", VA = "0xAB462C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006C2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600334D")]
			[Address(RVA = "0xAB4694", Offset = "0xAB4694", VA = "0xAB4694", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003348")]
		[Address(RVA = "0xAB2B30", Offset = "0xAB2B30", VA = "0xAB2B30")]
		[DebuggerHidden]
		public <ReadyStateCoroutine>d__52(int <>1__state)
		{
		}

		[Token(Token = "0x6003349")]
		[Address(RVA = "0xAB4544", Offset = "0xAB4544", VA = "0xAB4544", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600334A")]
		[Address(RVA = "0xAB4548", Offset = "0xAB4548", VA = "0xAB4548", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600334C")]
		[Address(RVA = "0xAB4634", Offset = "0xAB4634", VA = "0xAB4634", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000615")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820B48", Offset = "0x820B48")]
	private sealed class <AimStateCoroutine>d__64 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4002433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4002434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4002435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x170006C3")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6003351")]
			[Address(RVA = "0xAB400C", Offset = "0xAB400C", VA = "0xAB400C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006C4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6003353")]
			[Address(RVA = "0xAB4074", Offset = "0xAB4074", VA = "0xAB4074", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600334E")]
		[Address(RVA = "0xAB3018", Offset = "0xAB3018", VA = "0xAB3018")]
		[DebuggerHidden]
		public <AimStateCoroutine>d__64(int <>1__state)
		{
		}

		[Token(Token = "0x600334F")]
		[Address(RVA = "0xAB3ED4", Offset = "0xAB3ED4", VA = "0xAB3ED4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6003350")]
		[Address(RVA = "0xAB3ED8", Offset = "0xAB3ED8", VA = "0xAB3ED8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6003352")]
		[Address(RVA = "0xAB4014", Offset = "0xAB4014", VA = "0xAB4014", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000616")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820B58", Offset = "0x820B58")]
	private sealed class <CancelAimStateCoroutine>d__68 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4002436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4002437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4002438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x170006C5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6003357")]
			[Address(RVA = "0xAB4120", Offset = "0xAB4120", VA = "0xAB4120", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006C6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6003359")]
			[Address(RVA = "0xAB4188", Offset = "0xAB4188", VA = "0xAB4188", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003354")]
		[Address(RVA = "0xAB31FC", Offset = "0xAB31FC", VA = "0xAB31FC")]
		[DebuggerHidden]
		public <CancelAimStateCoroutine>d__68(int <>1__state)
		{
		}

		[Token(Token = "0x6003355")]
		[Address(RVA = "0xAB407C", Offset = "0xAB407C", VA = "0xAB407C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6003356")]
		[Address(RVA = "0xAB4080", Offset = "0xAB4080", VA = "0xAB4080", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6003358")]
		[Address(RVA = "0xAB4128", Offset = "0xAB4128", VA = "0xAB4128", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000617")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820B68", Offset = "0x820B68")]
	private sealed class <PreTeleportStateCoroutine>d__72 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4002439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400243A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400243B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x170006C7")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600335D")]
			[Address(RVA = "0xAB44D4", Offset = "0xAB44D4", VA = "0xAB44D4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006C8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600335F")]
			[Address(RVA = "0xAB453C", Offset = "0xAB453C", VA = "0xAB453C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600335A")]
		[Address(RVA = "0xAB33E0", Offset = "0xAB33E0", VA = "0xAB33E0")]
		[DebuggerHidden]
		public <PreTeleportStateCoroutine>d__72(int <>1__state)
		{
		}

		[Token(Token = "0x600335B")]
		[Address(RVA = "0xAB43FC", Offset = "0xAB43FC", VA = "0xAB43FC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600335C")]
		[Address(RVA = "0xAB4400", Offset = "0xAB4400", VA = "0xAB4400", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600335E")]
		[Address(RVA = "0xAB44DC", Offset = "0xAB44DC", VA = "0xAB44DC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000618")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820B78", Offset = "0x820B78")]
	private sealed class <CancelTeleportStateCoroutine>d__76 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400243C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400243D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400243E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x170006C9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6003363")]
			[Address(RVA = "0xAB4234", Offset = "0xAB4234", VA = "0xAB4234", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006CA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6003365")]
			[Address(RVA = "0xAB429C", Offset = "0xAB429C", VA = "0xAB429C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003360")]
		[Address(RVA = "0xAB35C4", Offset = "0xAB35C4", VA = "0xAB35C4")]
		[DebuggerHidden]
		public <CancelTeleportStateCoroutine>d__76(int <>1__state)
		{
		}

		[Token(Token = "0x6003361")]
		[Address(RVA = "0xAB4190", Offset = "0xAB4190", VA = "0xAB4190", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6003362")]
		[Address(RVA = "0xAB4194", Offset = "0xAB4194", VA = "0xAB4194", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6003364")]
		[Address(RVA = "0xAB423C", Offset = "0xAB423C", VA = "0xAB423C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000619")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820B88", Offset = "0x820B88")]
	private sealed class <TeleportingStateCoroutine>d__80 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400243F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4002440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4002441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x170006CB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6003369")]
			[Address(RVA = "0xAB4770", Offset = "0xAB4770", VA = "0xAB4770", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006CC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600336B")]
			[Address(RVA = "0xAB47D8", Offset = "0xAB47D8", VA = "0xAB47D8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003366")]
		[Address(RVA = "0xAB37A8", Offset = "0xAB37A8", VA = "0xAB37A8")]
		[DebuggerHidden]
		public <TeleportingStateCoroutine>d__80(int <>1__state)
		{
		}

		[Token(Token = "0x6003367")]
		[Address(RVA = "0xAB469C", Offset = "0xAB469C", VA = "0xAB469C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6003368")]
		[Address(RVA = "0xAB46A0", Offset = "0xAB46A0", VA = "0xAB46A0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600336A")]
		[Address(RVA = "0xAB4778", Offset = "0xAB4778", VA = "0xAB4778", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200061A")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820B98", Offset = "0x820B98")]
	private sealed class <PostTeleportStateCoroutine>d__84 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4002442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4002443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4002444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x170006CD")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600336F")]
			[Address(RVA = "0xAB438C", Offset = "0xAB438C", VA = "0xAB438C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006CE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6003371")]
			[Address(RVA = "0xAB43F4", Offset = "0xAB43F4", VA = "0xAB43F4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600336C")]
		[Address(RVA = "0xAB398C", Offset = "0xAB398C", VA = "0xAB398C")]
		[DebuggerHidden]
		public <PostTeleportStateCoroutine>d__84(int <>1__state)
		{
		}

		[Token(Token = "0x600336D")]
		[Address(RVA = "0xAB42A4", Offset = "0xAB42A4", VA = "0xAB42A4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600336E")]
		[Address(RVA = "0xAB42A8", Offset = "0xAB42A8", VA = "0xAB42A8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6003370")]
		[Address(RVA = "0xAB4394", Offset = "0xAB4394", VA = "0xAB4394", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000410")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x821F20", Offset = "0x821F20")]
	public bool EnableMovementDuringReady;

	[Token(Token = "0x4000411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x821F58", Offset = "0x821F58")]
	public bool EnableMovementDuringAim;

	[Token(Token = "0x4000412")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x821F90", Offset = "0x821F90")]
	public bool EnableMovementDuringPreTeleport;

	[Token(Token = "0x4000413")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x821FC8", Offset = "0x821FC8")]
	public bool EnableMovementDuringPostTeleport;

	[Token(Token = "0x4000414")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x822000", Offset = "0x822000")]
	public bool EnableRotationDuringReady;

	[Token(Token = "0x4000415")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x822038", Offset = "0x822038")]
	public bool EnableRotationDuringAim;

	[Token(Token = "0x4000416")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x822070", Offset = "0x822070")]
	public bool EnableRotationDuringPreTeleport;

	[Token(Token = "0x4000417")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8220A8", Offset = "0x8220A8")]
	public bool EnableRotationDuringPostTeleport;

	[Token(Token = "0x4000418")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8220E0", Offset = "0x8220E0")]
	private States <CurrentState>k__BackingField;

	[NonSerialized]
	[Token(Token = "0x4000419")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TeleportAimHandler AimHandler;

	[Token(Token = "0x400041A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8220F0", Offset = "0x8220F0")]
	public TeleportDestination TeleportDestinationPrefab;

	[Token(Token = "0x400041B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x822128", Offset = "0x822128")]
	public int TeleportDestinationLayer;

	[NonSerialized]
	[Token(Token = "0x400041D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TeleportInputHandler InputHandler;

	[NonSerialized]
	[Token(Token = "0x400041E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TeleportIntentions CurrentIntention;

	[NonSerialized]
	[Token(Token = "0x400041F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool IsPreTeleportRequested;

	[NonSerialized]
	[Token(Token = "0x4000420")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	public bool IsTransitioning;

	[NonSerialized]
	[Token(Token = "0x4000421")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
	public bool IsPostTeleportRequested;

	[Token(Token = "0x4000422")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private TeleportDestination _teleportDestination;

	[Token(Token = "0x4000423")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x822170", Offset = "0x822170")]
	private LocomotionController <LocomotionController>k__BackingField;

	[Token(Token = "0x4000424")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x822180", Offset = "0x822180")]
	public AimCollisionTypes AimCollisionType;

	[Token(Token = "0x4000425")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8221B8", Offset = "0x8221B8")]
	public bool UseCharacterCollisionData;

	[Token(Token = "0x4000426")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8221F0", Offset = "0x8221F0")]
	public float AimCollisionRadius;

	[Token(Token = "0x4000427")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x822228", Offset = "0x822228")]
	public float AimCollisionHeight;

	[Token(Token = "0x17000014")]
	public States CurrentState
	{
		[Token(Token = "0x60002DF")]
		[Address(RVA = "0xAB2074", Offset = "0xAB2074", VA = "0xAB2074")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F420", Offset = "0x82F420")]
		get
		{
			return default(States);
		}
		[Token(Token = "0x60002E0")]
		[Address(RVA = "0xAB207C", Offset = "0xAB207C", VA = "0xAB207C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F430", Offset = "0x82F430")]
		private set
		{
		}
	}

	[Token(Token = "0x17000015")]
	public Quaternion DestinationRotation
	{
		[Token(Token = "0x60002E4")]
		[Address(RVA = "0xAB22AC", Offset = "0xAB22AC", VA = "0xAB22AC")]
		get
		{
			return default(Quaternion);
		}
	}

	[Token(Token = "0x17000016")]
	public LocomotionController LocomotionController
	{
		[Token(Token = "0x60002E5")]
		[Address(RVA = "0xAB22D4", Offset = "0xAB22D4", VA = "0xAB22D4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F460", Offset = "0x82F460")]
		get
		{
			return null;
		}
		[Token(Token = "0x60002E6")]
		[Address(RVA = "0xAB22DC", Offset = "0xAB22DC", VA = "0xAB22DC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F470", Offset = "0x82F470")]
		private set
		{
		}
	}

	[Token(Token = "0x14000001")]
	public event Action<bool, Vector3?, Quaternion?, Quaternion?> UpdateTeleportDestination
	{
		[Token(Token = "0x60002E1")]
		[Address(RVA = "0xAB2084", Offset = "0xAB2084", VA = "0xAB2084")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F440", Offset = "0x82F440")]
		add
		{
		}
		[Token(Token = "0x60002E2")]
		[Address(RVA = "0xAB2128", Offset = "0xAB2128", VA = "0xAB2128")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F450", Offset = "0x82F450")]
		remove
		{
		}
	}

	[Token(Token = "0x14000002")]
	public event Action EnterStateReady
	{
		[Token(Token = "0x60002F0")]
		[Address(RVA = "0xAB29E8", Offset = "0xAB29E8", VA = "0xAB29E8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F4B8", Offset = "0x82F4B8")]
		add
		{
		}
		[Token(Token = "0x60002F1")]
		[Address(RVA = "0xAB2A8C", Offset = "0xAB2A8C", VA = "0xAB2A8C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F4C8", Offset = "0x82F4C8")]
		remove
		{
		}
	}

	[Token(Token = "0x14000003")]
	public event Action EnterStateAim
	{
		[Token(Token = "0x60002F3")]
		[Address(RVA = "0xAB2B5C", Offset = "0xAB2B5C", VA = "0xAB2B5C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F53C", Offset = "0x82F53C")]
		add
		{
		}
		[Token(Token = "0x60002F4")]
		[Address(RVA = "0xAB2C00", Offset = "0xAB2C00", VA = "0xAB2C00")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F54C", Offset = "0x82F54C")]
		remove
		{
		}
	}

	[Token(Token = "0x14000004")]
	public event Action<AimData> UpdateAimData
	{
		[Token(Token = "0x60002F5")]
		[Address(RVA = "0xAB2CA4", Offset = "0xAB2CA4", VA = "0xAB2CA4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F55C", Offset = "0x82F55C")]
		add
		{
		}
		[Token(Token = "0x60002F6")]
		[Address(RVA = "0xAB2D48", Offset = "0xAB2D48", VA = "0xAB2D48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F56C", Offset = "0x82F56C")]
		remove
		{
		}
	}

	[Token(Token = "0x14000005")]
	public event Action ExitStateAim
	{
		[Token(Token = "0x60002F8")]
		[Address(RVA = "0xAB2E60", Offset = "0xAB2E60", VA = "0xAB2E60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F57C", Offset = "0x82F57C")]
		add
		{
		}
		[Token(Token = "0x60002F9")]
		[Address(RVA = "0xAB2F04", Offset = "0xAB2F04", VA = "0xAB2F04")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F58C", Offset = "0x82F58C")]
		remove
		{
		}
	}

	[Token(Token = "0x14000006")]
	public event Action EnterStateCancelAim
	{
		[Token(Token = "0x60002FB")]
		[Address(RVA = "0xAB3044", Offset = "0xAB3044", VA = "0xAB3044")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F600", Offset = "0x82F600")]
		add
		{
		}
		[Token(Token = "0x60002FC")]
		[Address(RVA = "0xAB30E8", Offset = "0xAB30E8", VA = "0xAB30E8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F610", Offset = "0x82F610")]
		remove
		{
		}
	}

	[Token(Token = "0x14000007")]
	public event Action EnterStatePreTeleport
	{
		[Token(Token = "0x60002FE")]
		[Address(RVA = "0xAB3228", Offset = "0xAB3228", VA = "0xAB3228")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F684", Offset = "0x82F684")]
		add
		{
		}
		[Token(Token = "0x60002FF")]
		[Address(RVA = "0xAB32CC", Offset = "0xAB32CC", VA = "0xAB32CC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F694", Offset = "0x82F694")]
		remove
		{
		}
	}

	[Token(Token = "0x14000008")]
	public event Action EnterStateCancelTeleport
	{
		[Token(Token = "0x6000301")]
		[Address(RVA = "0xAB340C", Offset = "0xAB340C", VA = "0xAB340C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F708", Offset = "0x82F708")]
		add
		{
		}
		[Token(Token = "0x6000302")]
		[Address(RVA = "0xAB34B0", Offset = "0xAB34B0", VA = "0xAB34B0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F718", Offset = "0x82F718")]
		remove
		{
		}
	}

	[Token(Token = "0x14000009")]
	public event Action EnterStateTeleporting
	{
		[Token(Token = "0x6000304")]
		[Address(RVA = "0xAB35F0", Offset = "0xAB35F0", VA = "0xAB35F0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F78C", Offset = "0x82F78C")]
		add
		{
		}
		[Token(Token = "0x6000305")]
		[Address(RVA = "0xAB3694", Offset = "0xAB3694", VA = "0xAB3694")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F79C", Offset = "0x82F79C")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000A")]
	public event Action EnterStatePostTeleport
	{
		[Token(Token = "0x6000307")]
		[Address(RVA = "0xAB37D4", Offset = "0xAB37D4", VA = "0xAB37D4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F810", Offset = "0x82F810")]
		add
		{
		}
		[Token(Token = "0x6000308")]
		[Address(RVA = "0xAB3878", Offset = "0xAB3878", VA = "0xAB3878")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F820", Offset = "0x82F820")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000B")]
	public event Action<Transform, Vector3, Quaternion> Teleported
	{
		[Token(Token = "0x600030A")]
		[Address(RVA = "0xAB39B8", Offset = "0xAB39B8", VA = "0xAB39B8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F894", Offset = "0x82F894")]
		add
		{
		}
		[Token(Token = "0x600030B")]
		[Address(RVA = "0xAB3A5C", Offset = "0xAB3A5C", VA = "0xAB3A5C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F8A4", Offset = "0x82F8A4")]
		remove
		{
		}
	}

	[Token(Token = "0x60002DD")]
	[Address(RVA = "0xAB1D44", Offset = "0xAB1D44", VA = "0xAB1D44")]
	public void EnableMovement(bool ready, bool aim, bool pre, bool post)
	{
	}

	[Token(Token = "0x60002DE")]
	[Address(RVA = "0xAB1D68", Offset = "0xAB1D68", VA = "0xAB1D68")]
	public void EnableRotation(bool ready, bool aim, bool pre, bool post)
	{
	}

	[Token(Token = "0x60002E3")]
	[Address(RVA = "0xAB21CC", Offset = "0xAB21CC", VA = "0xAB21CC")]
	public void OnUpdateTeleportDestination(bool isValidDestination, Vector3? position, Quaternion? rotation, Quaternion? landingRotation)
	{
	}

	[Token(Token = "0x60002E7")]
	[Address(RVA = "0xAB22E4", Offset = "0xAB22E4", VA = "0xAB22E4")]
	public bool AimCollisionTest(Vector3 start, Vector3 end, LayerMask aimCollisionLayerMask, out RaycastHit hitInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x60002E8")]
	[Address(RVA = "0xAB263C", Offset = "0xAB263C", VA = "0xAB263C")]
	[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x82F480", Offset = "0x82F480")]
	protected void LogState(string msg)
	{
	}

	[Token(Token = "0x60002E9")]
	[Address(RVA = "0xAB26F4", Offset = "0xAB26F4", VA = "0xAB26F4")]
	protected void CreateNewTeleportDestination()
	{
	}

	[Token(Token = "0x60002EA")]
	[Address(RVA = "0xAB27BC", Offset = "0xAB27BC", VA = "0xAB27BC")]
	private void DeactivateDestination()
	{
	}

	[Token(Token = "0x60002EB")]
	[Address(RVA = "0xAB27D8", Offset = "0xAB27D8", VA = "0xAB27D8")]
	public void RecycleTeleportDestination(TeleportDestination oldDestination)
	{
	}

	[Token(Token = "0x60002EC")]
	[Address(RVA = "0xAB28A0", Offset = "0xAB28A0", VA = "0xAB28A0")]
	private void EnableMotion(bool enableLinear, bool enableRotation)
	{
	}

	[Token(Token = "0x60002ED")]
	[Address(RVA = "0xAB28E4", Offset = "0xAB28E4", VA = "0xAB28E4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002EE")]
	[Address(RVA = "0xAB2940", Offset = "0xAB2940", VA = "0xAB2940", Slot = "4")]
	public virtual void OnEnable()
	{
	}

	[Token(Token = "0x60002EF")]
	[Address(RVA = "0xAB29E0", Offset = "0xAB29E0", VA = "0xAB29E0", Slot = "5")]
	public virtual void OnDisable()
	{
	}

	[Token(Token = "0x60002F2")]
	[Address(RVA = "0xAB2970", Offset = "0xAB2970", VA = "0xAB2970")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x82F4D8", Offset = "0x82F4D8")]
	protected IEnumerator ReadyStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60002F7")]
	[Address(RVA = "0xAB2DEC", Offset = "0xAB2DEC", VA = "0xAB2DEC")]
	public void OnUpdateAimData(AimData aimData)
	{
	}

	[Token(Token = "0x60002FA")]
	[Address(RVA = "0xAB2FA8", Offset = "0xAB2FA8", VA = "0xAB2FA8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x82F59C", Offset = "0x82F59C")]
	protected IEnumerator AimStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60002FD")]
	[Address(RVA = "0xAB318C", Offset = "0xAB318C", VA = "0xAB318C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x82F620", Offset = "0x82F620")]
	protected IEnumerator CancelAimStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000300")]
	[Address(RVA = "0xAB3370", Offset = "0xAB3370", VA = "0xAB3370")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x82F6A4", Offset = "0x82F6A4")]
	protected IEnumerator PreTeleportStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000303")]
	[Address(RVA = "0xAB3554", Offset = "0xAB3554", VA = "0xAB3554")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x82F728", Offset = "0x82F728")]
	protected IEnumerator CancelTeleportStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000306")]
	[Address(RVA = "0xAB3738", Offset = "0xAB3738", VA = "0xAB3738")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x82F7AC", Offset = "0x82F7AC")]
	protected IEnumerator TeleportingStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000309")]
	[Address(RVA = "0xAB391C", Offset = "0xAB391C", VA = "0xAB391C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x82F830", Offset = "0x82F830")]
	protected IEnumerator PostTeleportStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600030C")]
	[Address(RVA = "0xAB3B00", Offset = "0xAB3B00", VA = "0xAB3B00")]
	public void DoTeleport()
	{
	}

	[Token(Token = "0x600030D")]
	[Address(RVA = "0xAB3C44", Offset = "0xAB3C44", VA = "0xAB3C44")]
	public Vector3 GetCharacterPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600030E")]
	[Address(RVA = "0xAB3C78", Offset = "0xAB3C78", VA = "0xAB3C78")]
	public Quaternion GetHeadRotationY()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x600030F")]
	[Address(RVA = "0xAB3D98", Offset = "0xAB3D98", VA = "0xAB3D98")]
	public void DoWarp(Vector3 startPos, float positionPercent)
	{
	}

	[Token(Token = "0x6000310")]
	[Address(RVA = "0xAB3EC4", Offset = "0xAB3EC4", VA = "0xAB3EC4")]
	public LocomotionTeleport()
	{
	}
}
[Token(Token = "0x20000A6")]
public class SimpleCapsuleWithStickMovement : MonoBehaviour
{
	[Token(Token = "0x4000432")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool EnableLinearMovement;

	[Token(Token = "0x4000433")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool EnableRotation;

	[Token(Token = "0x4000434")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool HMDRotatesPlayer;

	[Token(Token = "0x4000435")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool RotationEitherThumbstick;

	[Token(Token = "0x4000436")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float RotationAngle;

	[Token(Token = "0x4000437")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Speed;

	[Token(Token = "0x4000438")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRCameraRig CameraRig;

	[Token(Token = "0x4000439")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool ReadyToSnapTurn;

	[Token(Token = "0x400043A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Rigidbody _rigidbody;

	[Token(Token = "0x1400000C")]
	public event Action CameraUpdated
	{
		[Token(Token = "0x6000311")]
		[Address(RVA = "0xA737B4", Offset = "0xA737B4", VA = "0xA737B4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F8B4", Offset = "0x82F8B4")]
		add
		{
		}
		[Token(Token = "0x6000312")]
		[Address(RVA = "0xA73858", Offset = "0xA73858", VA = "0xA73858")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F8C4", Offset = "0x82F8C4")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000D")]
	public event Action PreCharacterMove
	{
		[Token(Token = "0x6000313")]
		[Address(RVA = "0xA738FC", Offset = "0xA738FC", VA = "0xA738FC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F8D4", Offset = "0x82F8D4")]
		add
		{
		}
		[Token(Token = "0x6000314")]
		[Address(RVA = "0xA739A0", Offset = "0xA739A0", VA = "0xA739A0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F8E4", Offset = "0x82F8E4")]
		remove
		{
		}
	}

	[Token(Token = "0x6000315")]
	[Address(RVA = "0xA73A44", Offset = "0xA73A44", VA = "0xA73A44")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000316")]
	[Address(RVA = "0xA73AEC", Offset = "0xA73AEC", VA = "0xA73AEC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000317")]
	[Address(RVA = "0xA73AF0", Offset = "0xA73AF0", VA = "0xA73AF0")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000318")]
	[Address(RVA = "0xA73B64", Offset = "0xA73B64", VA = "0xA73B64")]
	private void RotatePlayerToHMD()
	{
	}

	[Token(Token = "0x6000319")]
	[Address(RVA = "0xA73CD4", Offset = "0xA73CD4", VA = "0xA73CD4")]
	private void StickMovement()
	{
	}

	[Token(Token = "0x600031A")]
	[Address(RVA = "0xA73FB8", Offset = "0xA73FB8", VA = "0xA73FB8")]
	private void SnapTurn()
	{
	}

	[Token(Token = "0x600031B")]
	[Address(RVA = "0xA741A8", Offset = "0xA741A8", VA = "0xA741A8")]
	public SimpleCapsuleWithStickMovement()
	{
	}
}
[Token(Token = "0x20000A7")]
public abstract class TeleportAimHandler : TeleportSupport
{
	[Token(Token = "0x600031C")]
	[Address(RVA = "0xADD760", Offset = "0xADD760", VA = "0xADD760", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x600031D")]
	[Address(RVA = "0xADD7F4", Offset = "0xADD7F4", VA = "0xADD7F4", Slot = "5")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x600031E")]
	public abstract void GetPoints(List<Vector3> points);

	[Token(Token = "0x600031F")]
	[Address(RVA = "0xADD8C4", Offset = "0xADD8C4", VA = "0xADD8C4")]
	protected TeleportAimHandler()
	{
	}
}
[Token(Token = "0x20000A8")]
public class TeleportAimHandlerLaser : TeleportAimHandler
{
	[Token(Token = "0x400043D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x822320", Offset = "0x822320")]
	public float Range;

	[Token(Token = "0x6000320")]
	[Address(RVA = "0xADD8D4", Offset = "0xADD8D4", VA = "0xADD8D4", Slot = "8")]
	public override void GetPoints(List<Vector3> points)
	{
	}

	[Token(Token = "0x6000321")]
	[Address(RVA = "0xADDA30", Offset = "0xADDA30", VA = "0xADDA30")]
	public TeleportAimHandlerLaser()
	{
	}
}
[Token(Token = "0x20000A9")]
public class TeleportAimHandlerParabolic : TeleportAimHandler
{
	[Token(Token = "0x400043E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x822358", Offset = "0x822358")]
	public float Range;

	[Token(Token = "0x400043F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x822390", Offset = "0x822390")]
	public float MinimumElevation;

	[Token(Token = "0x4000440")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8223C8", Offset = "0x8223C8")]
	public float Gravity;

	[Token(Token = "0x4000441")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x822400", Offset = "0x822400")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x822400", Offset = "0x822400")]
	public float AimVelocity;

	[Token(Token = "0x4000442")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82245C", Offset = "0x82245C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x82245C", Offset = "0x82245C")]
	public float AimStep;

	[Token(Token = "0x6000322")]
	[Address(RVA = "0xADDA40", Offset = "0xADDA40", VA = "0xADDA40", Slot = "8")]
	public override void GetPoints(List<Vector3> points)
	{
	}

	[Token(Token = "0x6000323")]
	[Address(RVA = "0xADDC8C", Offset = "0xADDC8C", VA = "0xADDC8C")]
	public TeleportAimHandlerParabolic()
	{
	}
}
[Token(Token = "0x20000AA")]
public class TeleportAimVisualLaser : TeleportSupport
{
	[Token(Token = "0x4000443")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8224B4", Offset = "0x8224B4")]
	public LineRenderer LaserPrefab;

	[Token(Token = "0x4000444")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _enterAimStateAction;

	[Token(Token = "0x4000445")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly Action _exitAimStateAction;

	[Token(Token = "0x4000446")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private readonly Action<LocomotionTeleport.AimData> _updateAimDataAction;

	[Token(Token = "0x4000447")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private LineRenderer _lineRenderer;

	[Token(Token = "0x4000448")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3[] _linePoints;

	[Token(Token = "0x6000324")]
	[Address(RVA = "0xADDCA0", Offset = "0xADDCA0", VA = "0xADDCA0")]
	public TeleportAimVisualLaser()
	{
	}

	[Token(Token = "0x6000325")]
	[Address(RVA = "0xADDD84", Offset = "0xADDD84", VA = "0xADDD84")]
	private void EnterAimState()
	{
	}

	[Token(Token = "0x6000326")]
	[Address(RVA = "0xADDDB4", Offset = "0xADDDB4", VA = "0xADDDB4")]
	private void ExitAimState()
	{
	}

	[Token(Token = "0x6000327")]
	[Address(RVA = "0xADDDE4", Offset = "0xADDDE4", VA = "0xADDDE4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000328")]
	[Address(RVA = "0xADDE84", Offset = "0xADDE84", VA = "0xADDE84", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x6000329")]
	[Address(RVA = "0xADDEF0", Offset = "0xADDEF0", VA = "0xADDEF0", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x600032A")]
	[Address(RVA = "0xADDF58", Offset = "0xADDF58", VA = "0xADDF58")]
	private void UpdateAimData(LocomotionTeleport.AimData obj)
	{
	}
}
[Token(Token = "0x20000AB")]
public class TeleportDestination : MonoBehaviour
{
	[Token(Token = "0x4000449")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8224EC", Offset = "0x8224EC")]
	private bool <IsValidDestination>k__BackingField;

	[Token(Token = "0x400044A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8224FC", Offset = "0x8224FC")]
	public Transform PositionIndicator;

	[Token(Token = "0x400044B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x822534", Offset = "0x822534")]
	public Transform OrientationIndicator;

	[Token(Token = "0x400044C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82256C", Offset = "0x82256C")]
	public Quaternion LandingRotation;

	[NonSerialized]
	[Token(Token = "0x400044D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public LocomotionTeleport LocomotionTeleport;

	[NonSerialized]
	[Token(Token = "0x400044E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public LocomotionTeleport.States TeleportState;

	[Token(Token = "0x400044F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private readonly Action<bool, Vector3?, Quaternion?, Quaternion?> _updateTeleportDestinationAction;

	[Token(Token = "0x4000450")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool _eventsActive;

	[Token(Token = "0x17000017")]
	public bool IsValidDestination
	{
		[Token(Token = "0x600032B")]
		[Address(RVA = "0xADE074", Offset = "0xADE074", VA = "0xADE074")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F8F4", Offset = "0x82F8F4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600032C")]
		[Address(RVA = "0xADE07C", Offset = "0xADE07C", VA = "0xADE07C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F904", Offset = "0x82F904")]
		private set
		{
		}
	}

	[Token(Token = "0x1400000E")]
	public event Action<TeleportDestination> Deactivated
	{
		[Token(Token = "0x6000331")]
		[Address(RVA = "0xADE22C", Offset = "0xADE22C", VA = "0xADE22C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F914", Offset = "0x82F914")]
		add
		{
		}
		[Token(Token = "0x6000332")]
		[Address(RVA = "0xADE2D0", Offset = "0xADE2D0", VA = "0xADE2D0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F924", Offset = "0x82F924")]
		remove
		{
		}
	}

	[Token(Token = "0x600032D")]
	[Address(RVA = "0xADE088", Offset = "0xADE088", VA = "0xADE088")]
	private TeleportDestination()
	{
	}

	[Token(Token = "0x600032E")]
	[Address(RVA = "0xADE110", Offset = "0xADE110", VA = "0xADE110")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x600032F")]
	[Address(RVA = "0xADE1E8", Offset = "0xADE1E8", VA = "0xADE1E8")]
	private void TryDisableEventHandlers()
	{
	}

	[Token(Token = "0x6000330")]
	[Address(RVA = "0xADE228", Offset = "0xADE228", VA = "0xADE228")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x6000333")]
	[Address(RVA = "0xADE374", Offset = "0xADE374", VA = "0xADE374")]
	public void OnDeactivated()
	{
	}

	[Token(Token = "0x6000334")]
	[Address(RVA = "0xADE3DC", Offset = "0xADE3DC", VA = "0xADE3DC")]
	public void Recycle()
	{
	}

	[Token(Token = "0x6000335")]
	[Address(RVA = "0xADE3FC", Offset = "0xADE3FC", VA = "0xADE3FC", Slot = "4")]
	public virtual void UpdateTeleportDestination(bool isValidDestination, Vector3? position, Quaternion? rotation, Quaternion? landingRotation)
	{
	}
}
[Token(Token = "0x20000AC")]
public abstract class TeleportInputHandler : TeleportSupport
{
	[Token(Token = "0x200061B")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820BA8", Offset = "0x820BA8")]
	private sealed class <TeleportReadyCoroutine>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4002445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4002446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4002447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportInputHandler <>4__this;

		[Token(Token = "0x170006CF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6003375")]
			[Address(RVA = "0xADEAC0", Offset = "0xADEAC0", VA = "0xADEAC0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006D0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6003377")]
			[Address(RVA = "0xADEB28", Offset = "0xADEB28", VA = "0xADEB28", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003372")]
		[Address(RVA = "0xADE80C", Offset = "0xADE80C", VA = "0xADE80C")]
		[DebuggerHidden]
		public <TeleportReadyCoroutine>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x6003373")]
		[Address(RVA = "0xADEA30", Offset = "0xADEA30", VA = "0xADEA30", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6003374")]
		[Address(RVA = "0xADEA34", Offset = "0xADEA34", VA = "0xADEA34", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6003376")]
		[Address(RVA = "0xADEAC8", Offset = "0xADEAC8", VA = "0xADEAC8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200061C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820BB8", Offset = "0x820BB8")]
	private sealed class <TeleportAimCoroutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4002448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4002449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400244A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportInputHandler <>4__this;

		[Token(Token = "0x170006D1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600337B")]
			[Address(RVA = "0xADE9C0", Offset = "0xADE9C0", VA = "0xADE9C0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006D2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600337D")]
			[Address(RVA = "0xADEA28", Offset = "0xADEA28", VA = "0xADEA28", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003378")]
		[Address(RVA = "0xADE8A8", Offset = "0xADE8A8", VA = "0xADE8A8")]
		[DebuggerHidden]
		public <TeleportAimCoroutine>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6003379")]
		[Address(RVA = "0xADE92C", Offset = "0xADE92C", VA = "0xADE92C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600337A")]
		[Address(RVA = "0xADE930", Offset = "0xADE930", VA = "0xADE930", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600337C")]
		[Address(RVA = "0xADE9C8", Offset = "0xADE9C8", VA = "0xADE9C8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000452")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly Action _startReadyAction;

	[Token(Token = "0x4000453")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _startAimAction;

	[Token(Token = "0x6000336")]
	[Address(RVA = "0xADE5DC", Offset = "0xADE5DC", VA = "0xADE5DC")]
	protected TeleportInputHandler()
	{
	}

	[Token(Token = "0x6000337")]
	[Address(RVA = "0xADE688", Offset = "0xADE688", VA = "0xADE688", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x6000338")]
	[Address(RVA = "0xADE6E0", Offset = "0xADE6E0", VA = "0xADE6E0", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x6000339")]
	[Address(RVA = "0xADE79C", Offset = "0xADE79C", VA = "0xADE79C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x82F934", Offset = "0x82F934")]
	private IEnumerator TeleportReadyCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600033A")]
	[Address(RVA = "0xADE838", Offset = "0xADE838", VA = "0xADE838")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x82F998", Offset = "0x82F998")]
	private IEnumerator TeleportAimCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600033B")]
	public abstract LocomotionTeleport.TeleportIntentions GetIntention();

	[Token(Token = "0x600033C")]
	public abstract void GetAimData(out Ray aimRay);

	[Token(Token = "0x600033D")]
	[Address(RVA = "0xADE8D4", Offset = "0xADE8D4", VA = "0xADE8D4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82F9FC", Offset = "0x82F9FC")]
	private void <.ctor>b__2_0()
	{
	}

	[Token(Token = "0x600033E")]
	[Address(RVA = "0xADE900", Offset = "0xADE900", VA = "0xADE900")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82FA0C", Offset = "0x82FA0C")]
	private void <.ctor>b__2_1()
	{
	}
}
[Token(Token = "0x20000AD")]
public class TeleportInputHandlerHMD : TeleportInputHandler
{
	[Token(Token = "0x4000454")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8225B4", Offset = "0x8225B4")]
	private Transform <Pointer>k__BackingField;

	[Token(Token = "0x4000455")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8225C4", Offset = "0x8225C4")]
	public OVRInput.RawButton AimButton;

	[Token(Token = "0x4000456")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8225FC", Offset = "0x8225FC")]
	public OVRInput.RawButton TeleportButton;

	[Token(Token = "0x4000457")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x822634", Offset = "0x822634")]
	public bool FastTeleport;

	[Token(Token = "0x17000018")]
	public Transform Pointer
	{
		[Token(Token = "0x600033F")]
		[Address(RVA = "0xADEB30", Offset = "0xADEB30", VA = "0xADEB30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82FA1C", Offset = "0x82FA1C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000340")]
		[Address(RVA = "0xADEB38", Offset = "0xADEB38", VA = "0xADEB38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82FA2C", Offset = "0x82FA2C")]
		private set
		{
		}
	}

	[Token(Token = "0x6000341")]
	[Address(RVA = "0xADEB40", Offset = "0xADEB40", VA = "0xADEB40", Slot = "8")]
	public override LocomotionTeleport.TeleportIntentions GetIntention()
	{
		return default(LocomotionTeleport.TeleportIntentions);
	}

	[Token(Token = "0x6000342")]
	[Address(RVA = "0xADEC9C", Offset = "0xADEC9C", VA = "0xADEC9C", Slot = "9")]
	public override void GetAimData(out Ray aimRay)
	{
	}

	[Token(Token = "0x6000343")]
	[Address(RVA = "0xADED54", Offset = "0xADED54", VA = "0xADED54")]
	public TeleportInputHandlerHMD()
	{
	}
}
[Token(Token = "0x20000AE")]
public class TeleportInputHandlerTouch : TeleportInputHandlerHMD
{
	[Token(Token = "0x200061D")]
	public enum InputModes
	{
		[Token(Token = "0x400244C")]
		CapacitiveButtonForAimAndTeleport,
		[Token(Token = "0x400244D")]
		SeparateButtonsForAimAndTeleport,
		[Token(Token = "0x400244E")]
		ThumbstickTeleport,
		[Token(Token = "0x400244F")]
		ThumbstickTeleportForwardBackOnly
	}

	[Token(Token = "0x200061E")]
	public enum AimCapTouchButtons
	{
		[Token(Token = "0x4002451")]
		A,
		[Token(Token = "0x4002452")]
		B,
		[Token(Token = "0x4002453")]
		LeftTrigger,
		[Token(Token = "0x4002454")]
		LeftThumbstick,
		[Token(Token = "0x4002455")]
		RightTrigger,
		[Token(Token = "0x4002456")]
		RightThumbstick,
		[Token(Token = "0x4002457")]
		X,
		[Token(Token = "0x4002458")]
		Y
	}

	[Token(Token = "0x4000458")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform LeftHand;

	[Token(Token = "0x4000459")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform RightHand;

	[Token(Token = "0x400045A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82266C", Offset = "0x82266C")]
	public InputModes InputMode;

	[Token(Token = "0x400045B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private readonly OVRInput.RawButton[] _rawButtons;

	[Token(Token = "0x400045C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private readonly OVRInput.RawTouch[] _rawTouch;

	[Token(Token = "0x400045D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8226A4", Offset = "0x8226A4")]
	public OVRInput.Controller AimingController;

	[Token(Token = "0x400045E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private OVRInput.Controller InitiatingController;

	[Token(Token = "0x400045F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8226DC", Offset = "0x8226DC")]
	public AimCapTouchButtons CapacitiveAimAndTeleportButton;

	[Token(Token = "0x4000460")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x822714", Offset = "0x822714")]
	public float ThumbstickTeleportThreshold;

	[Token(Token = "0x6000344")]
	[Address(RVA = "0xADED58", Offset = "0xADED58", VA = "0xADED58")]
	private void Start()
	{
	}

	[Token(Token = "0x6000345")]
	[Address(RVA = "0xADED5C", Offset = "0xADED5C", VA = "0xADED5C", Slot = "8")]
	public override LocomotionTeleport.TeleportIntentions GetIntention()
	{
		return default(LocomotionTeleport.TeleportIntentions);
	}

	[Token(Token = "0x6000346")]
	[Address(RVA = "0xADF1A4", Offset = "0xADF1A4", VA = "0xADF1A4", Slot = "9")]
	public override void GetAimData(out Ray aimRay)
	{
	}

	[Token(Token = "0x6000347")]
	[Address(RVA = "0xADF264", Offset = "0xADF264", VA = "0xADF264")]
	public TeleportInputHandlerTouch()
	{
	}
}
[Token(Token = "0x20000AF")]
public abstract class TeleportOrientationHandler : TeleportSupport
{
	[Token(Token = "0x200061F")]
	public enum OrientationModes
	{
		[Token(Token = "0x400245A")]
		HeadRelative,
		[Token(Token = "0x400245B")]
		ForwardFacing
	}

	[Token(Token = "0x2000620")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820BC8", Offset = "0x820BC8")]
	private sealed class <UpdateOrientationCoroutine>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400245C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400245D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400245E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportOrientationHandler <>4__this;

		[Token(Token = "0x170006D3")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6003381")]
			[Address(RVA = "0xADF6F4", Offset = "0xADF6F4", VA = "0xADF6F4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006D4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6003383")]
			[Address(RVA = "0xADF75C", Offset = "0xADF75C", VA = "0xADF75C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600337E")]
		[Address(RVA = "0xADF4D0", Offset = "0xADF4D0", VA = "0xADF4D0")]
		[DebuggerHidden]
		public <UpdateOrientationCoroutine>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x600337F")]
		[Address(RVA = "0xADF64C", Offset = "0xADF64C", VA = "0xADF64C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6003380")]
		[Address(RVA = "0xADF650", Offset = "0xADF650", VA = "0xADF650", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6003382")]
		[Address(RVA = "0xADF6FC", Offset = "0xADF6FC", VA = "0xADF6FC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000461")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly Action _updateOrientationAction;

	[Token(Token = "0x4000462")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action<LocomotionTeleport.AimData> _updateAimDataAction;

	[Token(Token = "0x4000463")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected LocomotionTeleport.AimData AimData;

	[Token(Token = "0x6000348")]
	[Address(RVA = "0xADF310", Offset = "0xADF310", VA = "0xADF310")]
	protected TeleportOrientationHandler()
	{
	}

	[Token(Token = "0x6000349")]
	[Address(RVA = "0xADF3C4", Offset = "0xADF3C4", VA = "0xADF3C4")]
	private void UpdateAimData(LocomotionTeleport.AimData aimData)
	{
	}

	[Token(Token = "0x600034A")]
	[Address(RVA = "0xADF3CC", Offset = "0xADF3CC", VA = "0xADF3CC", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x600034B")]
	[Address(RVA = "0xADF418", Offset = "0xADF418", VA = "0xADF418", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x600034C")]
	[Address(RVA = "0xADF460", Offset = "0xADF460", VA = "0xADF460")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x82FA3C", Offset = "0x82FA3C")]
	private IEnumerator UpdateOrientationCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600034D")]
	protected abstract void InitializeTeleportDestination();

	[Token(Token = "0x600034E")]
	protected abstract void UpdateTeleportDestination();

	[Token(Token = "0x600034F")]
	[Address(RVA = "0xADF4FC", Offset = "0xADF4FC", VA = "0xADF4FC")]
	protected Quaternion GetLandingOrientation(OrientationModes mode, Quaternion rotation)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000350")]
	[Address(RVA = "0xADF620", Offset = "0xADF620", VA = "0xADF620")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82FAA0", Offset = "0x82FAA0")]
	private void <.ctor>b__3_0()
	{
	}
}
[Token(Token = "0x20000B0")]
public class TeleportOrientationHandler360 : TeleportOrientationHandler
{
	[Token(Token = "0x6000351")]
	[Address(RVA = "0xADF764", Offset = "0xADF764", VA = "0xADF764", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Token(Token = "0x6000352")]
	[Address(RVA = "0xADF768", Offset = "0xADF768", VA = "0xADF768", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Token(Token = "0x6000353")]
	[Address(RVA = "0xADF7E4", Offset = "0xADF7E4", VA = "0xADF7E4")]
	public TeleportOrientationHandler360()
	{
	}
}
[Token(Token = "0x20000B1")]
public class TeleportOrientationHandlerHMD : TeleportOrientationHandler
{
	[Token(Token = "0x4000464")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82274C", Offset = "0x82274C")]
	public OrientationModes OrientationMode;

	[Token(Token = "0x4000465")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x822784", Offset = "0x822784")]
	public bool UpdateOrientationDuringAim;

	[Token(Token = "0x4000466")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8227BC", Offset = "0x8227BC")]
	public float AimDistanceThreshold;

	[Token(Token = "0x4000467")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8227F4", Offset = "0x8227F4")]
	public float AimDistanceMaxRange;

	[Token(Token = "0x4000468")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Quaternion _initialRotation;

	[Token(Token = "0x6000354")]
	[Address(RVA = "0xADF7E8", Offset = "0xADF7E8", VA = "0xADF7E8", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Token(Token = "0x6000355")]
	[Address(RVA = "0xADF858", Offset = "0xADF858", VA = "0xADF858", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Token(Token = "0x6000356")]
	[Address(RVA = "0xADFCD0", Offset = "0xADFCD0", VA = "0xADFCD0")]
	public TeleportOrientationHandlerHMD()
	{
	}
}
[Token(Token = "0x20000B2")]
public class TeleportOrientationHandlerThumbstick : TeleportOrientationHandler
{
	[Token(Token = "0x4000469")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82282C", Offset = "0x82282C")]
	public OrientationModes OrientationMode;

	[Token(Token = "0x400046A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x822864", Offset = "0x822864")]
	public OVRInput.Controller Thumbstick;

	[Token(Token = "0x400046B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82289C", Offset = "0x82289C")]
	public float RotateStickThreshold;

	[Token(Token = "0x400046C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Quaternion _initialRotation;

	[Token(Token = "0x400046D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Quaternion _currentRotation;

	[Token(Token = "0x400046E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector2 _lastValidDirection;

	[Token(Token = "0x6000357")]
	[Address(RVA = "0xADFCD4", Offset = "0xADFCD4", VA = "0xADFCD4", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Token(Token = "0x6000358")]
	[Address(RVA = "0xADFD18", Offset = "0xADFD18", VA = "0xADFD18", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Token(Token = "0x6000359")]
	[Address(RVA = "0xAE0188", Offset = "0xAE0188", VA = "0xAE0188")]
	public TeleportOrientationHandlerThumbstick()
	{
	}
}
[Token(Token = "0x20000B3")]
public class TeleportPoint : MonoBehaviour
{
	[Token(Token = "0x400046F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float dimmingSpeed;

	[Token(Token = "0x4000470")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float fullIntensity;

	[Token(Token = "0x4000471")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float lowIntensity;

	[Token(Token = "0x4000472")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform destTransform;

	[Token(Token = "0x4000473")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float lastLookAtTime;

	[Token(Token = "0x600035A")]
	[Address(RVA = "0xAE0198", Offset = "0xAE0198", VA = "0xAE0198")]
	private void Start()
	{
	}

	[Token(Token = "0x600035B")]
	[Address(RVA = "0xAE019C", Offset = "0xAE019C", VA = "0xAE019C")]
	public Transform GetDestTransform()
	{
		return null;
	}

	[Token(Token = "0x600035C")]
	[Address(RVA = "0xAE01A4", Offset = "0xAE01A4", VA = "0xAE01A4")]
	private void Update()
	{
	}

	[Token(Token = "0x600035D")]
	[Address(RVA = "0xAE028C", Offset = "0xAE028C", VA = "0xAE028C")]
	public void OnLookAt()
	{
	}

	[Token(Token = "0x600035E")]
	[Address(RVA = "0xAE02B4", Offset = "0xAE02B4", VA = "0xAE02B4")]
	public TeleportPoint()
	{
	}
}
[Token(Token = "0x20000B4")]
public abstract class TeleportSupport : MonoBehaviour
{
	[Token(Token = "0x4000474")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8228D4", Offset = "0x8228D4")]
	private LocomotionTeleport <LocomotionTeleport>k__BackingField;

	[Token(Token = "0x4000475")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool _eventsActive;

	[Token(Token = "0x17000019")]
	protected LocomotionTeleport LocomotionTeleport
	{
		[Token(Token = "0x600035F")]
		[Address(RVA = "0xAE02CC", Offset = "0xAE02CC", VA = "0xAE02CC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82FAB0", Offset = "0x82FAB0")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000360")]
		[Address(RVA = "0xAE02D4", Offset = "0xAE02D4", VA = "0xAE02D4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82FAC0", Offset = "0x82FAC0")]
		private set
		{
		}
	}

	[Token(Token = "0x6000361")]
	[Address(RVA = "0xADD790", Offset = "0xADD790", VA = "0xADD790", Slot = "4")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000362")]
	[Address(RVA = "0xADD898", Offset = "0xADD898", VA = "0xADD898", Slot = "5")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000363")]
	[Address(RVA = "0xAE02DC", Offset = "0xAE02DC", VA = "0xAE02DC")]
	[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x82FAD0", Offset = "0x82FAD0")]
	private void LogEventHandler(string msg)
	{
	}

	[Token(Token = "0x6000364")]
	[Address(RVA = "0xADDEE4", Offset = "0xADDEE4", VA = "0xADDEE4", Slot = "6")]
	protected virtual void AddEventHandlers()
	{
	}

	[Token(Token = "0x6000365")]
	[Address(RVA = "0xADDF50", Offset = "0xADDF50", VA = "0xADDF50", Slot = "7")]
	protected virtual void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x6000366")]
	[Address(RVA = "0xADD8CC", Offset = "0xADD8CC", VA = "0xADD8CC")]
	protected TeleportSupport()
	{
	}
}
[Token(Token = "0x20000B5")]
public abstract class TeleportTargetHandler : TeleportSupport
{
	[Token(Token = "0x2000621")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820BD8", Offset = "0x820BD8")]
	private sealed class <TargetAimCoroutine>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400245F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4002460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4002461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTargetHandler <>4__this;

		[Token(Token = "0x170006D5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6003387")]
			[Address(RVA = "0xAE0930", Offset = "0xAE0930", VA = "0xAE0930", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006D6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6003389")]
			[Address(RVA = "0xAE0998", Offset = "0xAE0998", VA = "0xAE0998", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003384")]
		[Address(RVA = "0xAE052C", Offset = "0xAE052C", VA = "0xAE052C")]
		[DebuggerHidden]
		public <TargetAimCoroutine>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6003385")]
		[Address(RVA = "0xAE06C4", Offset = "0xAE06C4", VA = "0xAE06C4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6003386")]
		[Address(RVA = "0xAE06C8", Offset = "0xAE06C8", VA = "0xAE06C8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6003388")]
		[Address(RVA = "0xAE0938", Offset = "0xAE0938", VA = "0xAE0938", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000476")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8228E4", Offset = "0x8228E4")]
	public LayerMask AimCollisionLayerMask;

	[Token(Token = "0x4000477")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected readonly LocomotionTeleport.AimData AimData;

	[Token(Token = "0x4000478")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _startAimAction;

	[Token(Token = "0x4000479")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly List<Vector3> _aimPoints;

	[Token(Token = "0x400047A")]
	private const float ERROR_MARGIN = 0.1f;

	[Token(Token = "0x6000367")]
	[Address(RVA = "0xAE03A4", Offset = "0xAE03A4", VA = "0xAE03A4")]
	protected TeleportTargetHandler()
	{
	}

	[Token(Token = "0x6000368")]
	[Address(RVA = "0xAE0468", Offset = "0xAE0468", VA = "0xAE0468", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x6000369")]
	[Address(RVA = "0xAE0494", Offset = "0xAE0494", VA = "0xAE0494", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x600036A")]
	[Address(RVA = "0xAE04BC", Offset = "0xAE04BC", VA = "0xAE04BC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x82FB08", Offset = "0x82FB08")]
	private IEnumerator TargetAimCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600036B")]
	[Address(RVA = "0xAE0558", Offset = "0xAE0558", VA = "0xAE0558", Slot = "8")]
	protected virtual void ResetAimData()
	{
	}

	[Token(Token = "0x600036C")]
	protected abstract bool ConsiderTeleport(Vector3 start, ref Vector3 end);

	[Token(Token = "0x600036D")]
	[Address(RVA = "0xAE0574", Offset = "0xAE0574", VA = "0xAE0574", Slot = "10")]
	public virtual Vector3? ConsiderDestination(Vector3 location)
	{
		return null;
	}

	[Token(Token = "0x600036E")]
	[Address(RVA = "0xAE0698", Offset = "0xAE0698", VA = "0xAE0698")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82FB6C", Offset = "0x82FB6C")]
	private void <.ctor>b__3_0()
	{
	}
}
[Token(Token = "0x20000B6")]
public class TeleportTargetHandlerNavMesh : TeleportTargetHandler
{
	[Token(Token = "0x400047B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int NavMeshAreaMask;

	[Token(Token = "0x400047C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private NavMeshPath _path;

	[Token(Token = "0x600036F")]
	[Address(RVA = "0xAE09A0", Offset = "0xAE09A0", VA = "0xAE09A0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000370")]
	[Address(RVA = "0xAE0A00", Offset = "0xAE0A00", VA = "0xAE0A00", Slot = "9")]
	protected override bool ConsiderTeleport(Vector3 start, ref Vector3 end)
	{
		return default(bool);
	}

	[Token(Token = "0x6000371")]
	[Address(RVA = "0xAE0B84", Offset = "0xAE0B84", VA = "0xAE0B84", Slot = "10")]
	public override Vector3? ConsiderDestination(Vector3 location)
	{
		return null;
	}

	[Token(Token = "0x6000372")]
	[Address(RVA = "0xAE0C74", Offset = "0xAE0C74", VA = "0xAE0C74")]
	[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x82FB7C", Offset = "0x82FB7C")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000373")]
	[Address(RVA = "0xAE0C78", Offset = "0xAE0C78", VA = "0xAE0C78")]
	public TeleportTargetHandlerNavMesh()
	{
	}
}
[Token(Token = "0x20000B7")]
public class TeleportTargetHandlerNode : TeleportTargetHandler
{
	[Token(Token = "0x400047D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82291C", Offset = "0x82291C")]
	public float LOSOffset;

	[Token(Token = "0x400047E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x822954", Offset = "0x822954")]
	public LayerMask TeleportLayerMask;

	[Token(Token = "0x6000374")]
	[Address(RVA = "0xAE0C84", Offset = "0xAE0C84", VA = "0xAE0C84", Slot = "9")]
	protected override bool ConsiderTeleport(Vector3 start, ref Vector3 end)
	{
		return default(bool);
	}

	[Token(Token = "0x6000375")]
	[Address(RVA = "0xAE0EB4", Offset = "0xAE0EB4", VA = "0xAE0EB4")]
	public TeleportTargetHandlerNode()
	{
	}
}
[Token(Token = "0x20000B8")]
public class TeleportTargetHandlerPhysical : TeleportTargetHandler
{
	[Token(Token = "0x6000376")]
	[Address(RVA = "0xAE0EC0", Offset = "0xAE0EC0", VA = "0xAE0EC0", Slot = "9")]
	protected override bool ConsiderTeleport(Vector3 start, ref Vector3 end)
	{
		return default(bool);
	}

	[Token(Token = "0x6000377")]
	[Address(RVA = "0xAE1044", Offset = "0xAE1044", VA = "0xAE1044")]
	public TeleportTargetHandlerPhysical()
	{
	}
}
[Token(Token = "0x20000B9")]
public abstract class TeleportTransition : TeleportSupport
{
	[Token(Token = "0x6000378")]
	[Address(RVA = "0xAE1048", Offset = "0xAE1048", VA = "0xAE1048", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x6000379")]
	[Address(RVA = "0xAE10E0", Offset = "0xAE10E0", VA = "0xAE10E0", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x600037A")]
	protected abstract void LocomotionTeleportOnEnterStateTeleporting();

	[Token(Token = "0x600037B")]
	[Address(RVA = "0xAE1174", Offset = "0xAE1174", VA = "0xAE1174")]
	protected TeleportTransition()
	{
	}
}
[Token(Token = "0x20000BA")]
public class TeleportTransitionBlink : TeleportTransition
{
	[Token(Token = "0x2000622")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820BE8", Offset = "0x820BE8")]
	private sealed class <BlinkCoroutine>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4002462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4002463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4002464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTransitionBlink <>4__this;

		[Token(Token = "0x4002465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <elapsedTime>5__2;

		[Token(Token = "0x4002466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <teleportTime>5__3;

		[Token(Token = "0x4002467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool <teleported>5__4;

		[Token(Token = "0x170006D7")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600338D")]
			[Address(RVA = "0xAE14DC", Offset = "0xAE14DC", VA = "0xAE14DC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006D8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600338F")]
			[Address(RVA = "0xAE1544", Offset = "0xAE1544", VA = "0xAE1544", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600338A")]
		[Address(RVA = "0xAE1218", Offset = "0xAE1218", VA = "0xAE1218")]
		[DebuggerHidden]
		public <BlinkCoroutine>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x600338B")]
		[Address(RVA = "0xAE13DC", Offset = "0xAE13DC", VA = "0xAE13DC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600338C")]
		[Address(RVA = "0xAE13E0", Offset = "0xAE13E0", VA = "0xAE13E0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600338E")]
		[Address(RVA = "0xAE14E4", Offset = "0xAE14E4", VA = "0xAE14E4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400047F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82298C", Offset = "0x82298C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x82298C", Offset = "0x82298C")]
	public float TransitionDuration;

	[Token(Token = "0x4000480")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8229E4", Offset = "0x8229E4")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x8229E4", Offset = "0x8229E4")]
	public float TeleportDelay;

	[Token(Token = "0x4000481")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x822A38", Offset = "0x822A38")]
	public AnimationCurve FadeLevels;

	[Token(Token = "0x600037C")]
	[Address(RVA = "0xAE117C", Offset = "0xAE117C", VA = "0xAE117C", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Token(Token = "0x600037D")]
	[Address(RVA = "0xAE11A8", Offset = "0xAE11A8", VA = "0xAE11A8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x82FBB4", Offset = "0x82FBB4")]
	protected IEnumerator BlinkCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600037E")]
	[Address(RVA = "0xAE1244", Offset = "0xAE1244", VA = "0xAE1244")]
	public TeleportTransitionBlink()
	{
	}
}
[Token(Token = "0x20000BB")]
public class TeleportTransitionInstant : TeleportTransition
{
	[Token(Token = "0x600037F")]
	[Address(RVA = "0xAE154C", Offset = "0xAE154C", VA = "0xAE154C", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Token(Token = "0x6000380")]
	[Address(RVA = "0xAE1568", Offset = "0xAE1568", VA = "0xAE1568")]
	public TeleportTransitionInstant()
	{
	}
}
[Token(Token = "0x20000BC")]
public class TeleportTransitionWarp : TeleportTransition
{
	[Token(Token = "0x2000623")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820BF8", Offset = "0x820BF8")]
	private sealed class <DoWarp>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4002468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4002469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400246A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTransitionWarp <>4__this;

		[Token(Token = "0x400246B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 <startPosition>5__2;

		[Token(Token = "0x400246C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <elapsedTime>5__3;

		[Token(Token = "0x170006D9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6003393")]
			[Address(RVA = "0xAE17B4", Offset = "0xAE17B4", VA = "0xAE17B4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006DA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6003395")]
			[Address(RVA = "0xAE181C", Offset = "0xAE181C", VA = "0xAE181C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003390")]
		[Address(RVA = "0xAE160C", Offset = "0xAE160C", VA = "0xAE160C")]
		[DebuggerHidden]
		public <DoWarp>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x6003391")]
		[Address(RVA = "0xAE1680", Offset = "0xAE1680", VA = "0xAE1680", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6003392")]
		[Address(RVA = "0xAE1684", Offset = "0xAE1684", VA = "0xAE1684", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6003394")]
		[Address(RVA = "0xAE17BC", Offset = "0xAE17BC", VA = "0xAE17BC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000482")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x822A70", Offset = "0x822A70")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x822A70", Offset = "0x822A70")]
	public float TransitionDuration;

	[Token(Token = "0x4000483")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public AnimationCurve PositionLerp;

	[Token(Token = "0x6000381")]
	[Address(RVA = "0xAE1570", Offset = "0xAE1570", VA = "0xAE1570", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Token(Token = "0x6000382")]
	[Address(RVA = "0xAE159C", Offset = "0xAE159C", VA = "0xAE159C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x82FC18", Offset = "0x82FC18")]
	private IEnumerator DoWarp()
	{
		return null;
	}

	[Token(Token = "0x6000383")]
	[Address(RVA = "0xAE1638", Offset = "0xAE1638", VA = "0xAE1638")]
	public TeleportTransitionWarp()
	{
	}
}
[Token(Token = "0x20000BD")]
public static class NativeVideoPlayer
{
	[Token(Token = "0x2000624")]
	public enum PlabackState
	{
		[Token(Token = "0x400246E")]
		Idle = 1,
		[Token(Token = "0x400246F")]
		Preparing,
		[Token(Token = "0x4002470")]
		Buffering,
		[Token(Token = "0x4002471")]
		Ready,
		[Token(Token = "0x4002472")]
		Ended
	}

	[Token(Token = "0x2000625")]
	public enum StereoMode
	{
		[Token(Token = "0x4002474")]
		Unknown = -1,
		[Token(Token = "0x4002475")]
		Mono,
		[Token(Token = "0x4002476")]
		TopBottom,
		[Token(Token = "0x4002477")]
		LeftRight,
		[Token(Token = "0x4002478")]
		Mesh
	}

	[Token(Token = "0x4000484")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static IntPtr? _Activity;

	[Token(Token = "0x4000485")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static IntPtr? _VideoPlayerClass;

	[Token(Token = "0x4000486")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static readonly jvalue[] EmptyParams;

	[Token(Token = "0x4000487")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static IntPtr getIsPlayingMethodId;

	[Token(Token = "0x4000488")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static IntPtr getCurrentPlaybackStateMethodId;

	[Token(Token = "0x4000489")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static IntPtr getDurationMethodId;

	[Token(Token = "0x400048A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static IntPtr getStereoModeMethodId;

	[Token(Token = "0x400048B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static IntPtr getWidthMethodId;

	[Token(Token = "0x400048C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static IntPtr getHeightMethodId;

	[Token(Token = "0x400048D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static IntPtr getPlaybackPositionMethodId;

	[Token(Token = "0x400048E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static IntPtr setPlaybackPositionMethodId;

	[Token(Token = "0x400048F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private static jvalue[] setPlaybackPositionParams;

	[Token(Token = "0x4000490")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static IntPtr playVideoMethodId;

	[Token(Token = "0x4000491")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private static jvalue[] playVideoParams;

	[Token(Token = "0x4000492")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private static IntPtr stopMethodId;

	[Token(Token = "0x4000493")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private static IntPtr resumeMethodId;

	[Token(Token = "0x4000494")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private static IntPtr pauseMethodId;

	[Token(Token = "0x4000495")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private static IntPtr setPlaybackSpeedMethodId;

	[Token(Token = "0x4000496")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private static jvalue[] setPlaybackSpeedParams;

	[Token(Token = "0x4000497")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private static IntPtr setLoopingMethodId;

	[Token(Token = "0x4000498")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private static jvalue[] setLoopingParams;

	[Token(Token = "0x4000499")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private static IntPtr setListenerRotationQuaternionMethodId;

	[Token(Token = "0x400049A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private static jvalue[] setListenerRotationQuaternionParams;

	[Token(Token = "0x1700001A")]
	private static IntPtr VideoPlayerClass
	{
		[Token(Token = "0x6000384")]
		[Address(RVA = "0xABA044", Offset = "0xABA044", VA = "0xABA044")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x1700001B")]
	private static IntPtr Activity
	{
		[Token(Token = "0x6000385")]
		[Address(RVA = "0xABA300", Offset = "0xABA300", VA = "0xABA300")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x1700001C")]
	public static bool IsAvailable
	{
		[Token(Token = "0x6000386")]
		[Address(RVA = "0xAB63B4", Offset = "0xAB63B4", VA = "0xAB63B4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700001D")]
	public static bool IsPlaying
	{
		[Token(Token = "0x6000387")]
		[Address(RVA = "0xAB79B0", Offset = "0xAB79B0", VA = "0xAB79B0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700001E")]
	public static PlabackState CurrentPlaybackState
	{
		[Token(Token = "0x6000388")]
		[Address(RVA = "0xABA544", Offset = "0xABA544", VA = "0xABA544")]
		get
		{
			return default(PlabackState);
		}
	}

	[Token(Token = "0x1700001F")]
	public static long Duration
	{
		[Token(Token = "0x6000389")]
		[Address(RVA = "0xAB7B94", Offset = "0xAB7B94", VA = "0xAB7B94")]
		get
		{
			return default(long);
		}
	}

	[Token(Token = "0x17000020")]
	public static StereoMode VideoStereoMode
	{
		[Token(Token = "0x600038A")]
		[Address(RVA = "0xAB699C", Offset = "0xAB699C", VA = "0xAB699C")]
		get
		{
			return default(StereoMode);
		}
	}

	[Token(Token = "0x17000021")]
	public static int VideoWidth
	{
		[Token(Token = "0x600038B")]
		[Address(RVA = "0xAB67B4", Offset = "0xAB67B4", VA = "0xAB67B4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000022")]
	public static int VideoHeight
	{
		[Token(Token = "0x600038C")]
		[Address(RVA = "0xAB68A8", Offset = "0xAB68A8", VA = "0xAB68A8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000023")]
	public static long PlaybackPosition
	{
		[Token(Token = "0x600038D")]
		[Address(RVA = "0xAB7AA0", Offset = "0xAB7AA0", VA = "0xAB7AA0")]
		get
		{
			return default(long);
		}
		[Token(Token = "0x600038E")]
		[Address(RVA = "0xAB7174", Offset = "0xAB7174", VA = "0xAB7174")]
		set
		{
		}
	}

	[Token(Token = "0x600038F")]
	[Address(RVA = "0xAB81F4", Offset = "0xAB81F4", VA = "0xAB81F4")]
	public static void PlayVideo(string path, string drmLicenseUrl, IntPtr surfaceObj)
	{
	}

	[Token(Token = "0x6000390")]
	[Address(RVA = "0xAB7F38", Offset = "0xAB7F38", VA = "0xAB7F38")]
	public static void Stop()
	{
	}

	[Token(Token = "0x6000391")]
	[Address(RVA = "0xAB6E04", Offset = "0xAB6E04", VA = "0xAB6E04")]
	public static void Play()
	{
	}

	[Token(Token = "0x6000392")]
	[Address(RVA = "0xAB6F88", Offset = "0xAB6F88", VA = "0xAB6F88")]
	public static void Pause()
	{
	}

	[Token(Token = "0x6000393")]
	[Address(RVA = "0xAB7D60", Offset = "0xAB7D60", VA = "0xAB7D60")]
	public static void SetPlaybackSpeed(float speed)
	{
	}

	[Token(Token = "0x6000394")]
	[Address(RVA = "0xAB83E8", Offset = "0xAB83E8", VA = "0xAB83E8")]
	public static void SetLooping(bool looping)
	{
	}

	[Token(Token = "0x6000395")]
	[Address(RVA = "0xAB77F4", Offset = "0xAB77F4", VA = "0xAB77F4")]
	public static void SetListenerRotation(Quaternion rotation)
	{
	}
}
[Token(Token = "0x20000BE")]
public class ButtonDownListener : MonoBehaviour, IPointerDownHandler, IEventSystemHandler
{
	[Token(Token = "0x1400000F")]
	public event Action onButtonDown
	{
		[Token(Token = "0x6000397")]
		[Address(RVA = "0xA4FB54", Offset = "0xA4FB54", VA = "0xA4FB54")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82FC7C", Offset = "0x82FC7C")]
		add
		{
		}
		[Token(Token = "0x6000398")]
		[Address(RVA = "0xA4FBF8", Offset = "0xA4FBF8", VA = "0xA4FBF8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82FC8C", Offset = "0x82FC8C")]
		remove
		{
		}
	}

	[Token(Token = "0x6000399")]
	[Address(RVA = "0xA4FC9C", Offset = "0xA4FC9C", VA = "0xA4FC9C", Slot = "4")]
	public void OnPointerDown(PointerEventData eventData)
	{
	}

	[Token(Token = "0x600039A")]
	[Address(RVA = "0xA4FCB0", Offset = "0xA4FCB0", VA = "0xA4FCB0")]
	public ButtonDownListener()
	{
	}
}
[Token(Token = "0x20000BF")]
public class MediaPlayerImage : Image
{
	[Token(Token = "0x2000626")]
	public enum ButtonType
	{
		[Token(Token = "0x400247A")]
		Play,
		[Token(Token = "0x400247B")]
		Pause,
		[Token(Token = "0x400247C")]
		FastForward,
		[Token(Token = "0x400247D")]
		Rewind,
		[Token(Token = "0x400247E")]
		SkipForward,
		[Token(Token = "0x400247F")]
		SkipBack,
		[Token(Token = "0x4002480")]
		Stop
	}

	[Token(Token = "0x400049C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[SerializeField]
	private ButtonType m_ButtonType;

	[Token(Token = "0x17000024")]
	public ButtonType buttonType
	{
		[Token(Token = "0x600039B")]
		[Address(RVA = "0xAB48C8", Offset = "0xAB48C8", VA = "0xAB48C8")]
		get
		{
			return default(ButtonType);
		}
		[Token(Token = "0x600039C")]
		[Address(RVA = "0xAB48D0", Offset = "0xAB48D0", VA = "0xAB48D0")]
		set
		{
		}
	}

	[Token(Token = "0x600039D")]
	[Address(RVA = "0xAB48F4", Offset = "0xAB48F4", VA = "0xAB48F4", Slot = "44")]
	protected override void OnPopulateMesh(VertexHelper toFill)
	{
	}

	[Token(Token = "0x600039E")]
	[Address(RVA = "0xAB5DC0", Offset = "0xAB5DC0", VA = "0xAB5DC0")]
	public MediaPlayerImage()
	{
	}
}
[Token(Token = "0x20000C0")]
public class MoviePlayerSample : MonoBehaviour
{
	[Token(Token = "0x2000627")]
	public enum VideoShape
	{
		[Token(Token = "0x4002482")]
		_360,
		[Token(Token = "0x4002483")]
		_180,
		[Token(Token = "0x4002484")]
		Quad
	}

	[Token(Token = "0x2000628")]
	public enum VideoStereo
	{
		[Token(Token = "0x4002486")]
		Mono,
		[Token(Token = "0x4002487")]
		TopBottom,
		[Token(Token = "0x4002488")]
		LeftRight,
		[Token(Token = "0x4002489")]
		BottomTop
	}

	[Token(Token = "0x2000629")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820C08", Offset = "0x820C08")]
	private sealed class <Start>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400248A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400248B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400248C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MoviePlayerSample <>4__this;

		[Token(Token = "0x170006DB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6003399")]
			[Address(RVA = "0xAB86B0", Offset = "0xAB86B0", VA = "0xAB86B0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006DC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600339B")]
			[Address(RVA = "0xAB8718", Offset = "0xAB8718", VA = "0xAB8718", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003396")]
		[Address(RVA = "0xAB6B00", Offset = "0xAB6B00", VA = "0xAB6B00")]
		[DebuggerHidden]
		public <Start>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x6003397")]
		[Address(RVA = "0xAB852C", Offset = "0xAB852C", VA = "0xAB852C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6003398")]
		[Address(RVA = "0xAB8530", Offset = "0xAB8530", VA = "0xAB8530", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600339A")]
		[Address(RVA = "0xAB86B8", Offset = "0xAB86B8", VA = "0xAB86B8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200062A")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820C18", Offset = "0x820C18")]
	private sealed class <>c__DisplayClass34_0
	{
		[Token(Token = "0x400248D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string moviePath;

		[Token(Token = "0x400248E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string drmLicencesUrl;

		[Token(Token = "0x400248F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MoviePlayerSample <>4__this;

		[Token(Token = "0x600339C")]
		[Address(RVA = "0xAB6D68", Offset = "0xAB6D68", VA = "0xAB6D68")]
		public <>c__DisplayClass34_0()
		{
		}

		[Token(Token = "0x600339D")]
		[Address(RVA = "0xAB8120", Offset = "0xAB8120", VA = "0xAB8120")]
		internal void <Play>b__0()
		{
		}
	}

	[Token(Token = "0x400049D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool videoPausedBeforeAppPause;

	[Token(Token = "0x400049E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private VideoPlayer videoPlayer;

	[Token(Token = "0x400049F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVROverlay overlay;

	[Token(Token = "0x40004A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Renderer mediaRenderer;

	[Token(Token = "0x40004A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x822AF8", Offset = "0x822AF8")]
	private bool <IsPlaying>k__BackingField;

	[Token(Token = "0x40004A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x822B08", Offset = "0x822B08")]
	private long <Duration>k__BackingField;

	[Token(Token = "0x40004A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x822B18", Offset = "0x822B18")]
	private long <PlaybackPosition>k__BackingField;

	[Token(Token = "0x40004A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private RenderTexture copyTexture;

	[Token(Token = "0x40004A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Material externalTex2DMaterial;

	[Token(Token = "0x40004A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string MovieName;

	[Token(Token = "0x40004A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public string DrmLicenseUrl;

	[Token(Token = "0x40004A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool LoopVideo;

	[Token(Token = "0x40004A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public VideoShape Shape;

	[Token(Token = "0x40004AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public VideoStereo Stereo;

	[Token(Token = "0x40004AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool AutoDetectStereoLayout;

	[Token(Token = "0x40004AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
	public bool DisplayMono;

	[Token(Token = "0x40004AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private VideoShape _LastShape;

	[Token(Token = "0x40004AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private VideoStereo _LastStereo;

	[Token(Token = "0x40004AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool _LastDisplayMono;

	[Token(Token = "0x17000025")]
	public bool IsPlaying
	{
		[Token(Token = "0x600039F")]
		[Address(RVA = "0xAB6168", Offset = "0xAB6168", VA = "0xAB6168")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82FC9C", Offset = "0x82FC9C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60003A0")]
		[Address(RVA = "0xAB6170", Offset = "0xAB6170", VA = "0xAB6170")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82FCAC", Offset = "0x82FCAC")]
		private set
		{
		}
	}

	[Token(Token = "0x17000026")]
	public long Duration
	{
		[Token(Token = "0x60003A1")]
		[Address(RVA = "0xAB617C", Offset = "0xAB617C", VA = "0xAB617C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82FCBC", Offset = "0x82FCBC")]
		get
		{
			return default(long);
		}
		[Token(Token = "0x60003A2")]
		[Address(RVA = "0xAB6184", Offset = "0xAB6184", VA = "0xAB6184")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82FCCC", Offset = "0x82FCCC")]
		private set
		{
		}
	}

	[Token(Token = "0x17000027")]
	public long PlaybackPosition
	{
		[Token(Token = "0x60003A3")]
		[Address(RVA = "0xAB618C", Offset = "0xAB618C", VA = "0xAB618C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82FCDC", Offset = "0x82FCDC")]
		get
		{
			return default(long);
		}
		[Token(Token = "0x60003A4")]
		[Address(RVA = "0xAB6194", Offset = "0xAB6194", VA = "0xAB6194")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82FCEC", Offset = "0x82FCEC")]
		private set
		{
		}
	}

	[Token(Token = "0x60003A5")]
	[Address(RVA = "0xAB619C", Offset = "0xAB619C", VA = "0xAB619C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003A6")]
	[Address(RVA = "0xAB641C", Offset = "0xAB641C", VA = "0xAB641C")]
	private bool IsLocalVideo(string movieName)
	{
		return default(bool);
	}

	[Token(Token = "0x60003A7")]
	[Address(RVA = "0xAB6484", Offset = "0xAB6484", VA = "0xAB6484")]
	private void UpdateShapeAndStereo()
	{
	}

	[Token(Token = "0x60003A8")]
	[Address(RVA = "0xAB6A90", Offset = "0xAB6A90", VA = "0xAB6A90")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x82FCFC", Offset = "0x82FCFC")]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60003A9")]
	[Address(RVA = "0xAB6B2C", Offset = "0xAB6B2C", VA = "0xAB6B2C")]
	public void Play(string moviePath, string drmLicencesUrl)
	{
	}

	[Token(Token = "0x60003AA")]
	[Address(RVA = "0xAB6D70", Offset = "0xAB6D70", VA = "0xAB6D70")]
	public void Play()
	{
	}

	[Token(Token = "0x60003AB")]
	[Address(RVA = "0xAB6EF8", Offset = "0xAB6EF8", VA = "0xAB6EF8")]
	public void Pause()
	{
	}

	[Token(Token = "0x60003AC")]
	[Address(RVA = "0xAB707C", Offset = "0xAB707C", VA = "0xAB707C")]
	public void SeekTo(long position)
	{
	}

	[Token(Token = "0x60003AD")]
	[Address(RVA = "0xAB72B4", Offset = "0xAB72B4", VA = "0xAB72B4")]
	private void Update()
	{
	}

	[Token(Token = "0x60003AE")]
	[Address(RVA = "0xAB7C88", Offset = "0xAB7C88", VA = "0xAB7C88")]
	public void SetPlaybackSpeed(float speed)
	{
	}

	[Token(Token = "0x60003AF")]
	[Address(RVA = "0xAB7EA8", Offset = "0xAB7EA8", VA = "0xAB7EA8")]
	public void Stop()
	{
	}

	[Token(Token = "0x60003B0")]
	[Address(RVA = "0xAB802C", Offset = "0xAB802C", VA = "0xAB802C")]
	private void OnApplicationPause(bool appWasPaused)
	{
	}

	[Token(Token = "0x60003B1")]
	[Address(RVA = "0xAB8110", Offset = "0xAB8110", VA = "0xAB8110")]
	public MoviePlayerSample()
	{
	}
}
[Token(Token = "0x20000C1")]
public class MoviePlayerSampleControls : MonoBehaviour
{
	[Token(Token = "0x200062B")]
	private enum PlaybackState
	{
		[Token(Token = "0x4002491")]
		Playing,
		[Token(Token = "0x4002492")]
		Paused,
		[Token(Token = "0x4002493")]
		Rewinding,
		[Token(Token = "0x4002494")]
		FastForwarding
	}

	[Token(Token = "0x40004B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MoviePlayerSample Player;

	[Token(Token = "0x40004B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVRInputModule InputModule;

	[Token(Token = "0x40004B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRGazePointer GazePointer;

	[Token(Token = "0x40004B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject LeftHand;

	[Token(Token = "0x40004B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject RightHand;

	[Token(Token = "0x40004B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Canvas Canvas;

	[Token(Token = "0x40004B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ButtonDownListener PlayPause;

	[Token(Token = "0x40004B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public MediaPlayerImage PlayPauseImage;

	[Token(Token = "0x40004B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEngine.UI.Slider ProgressBar;

	[Token(Token = "0x40004B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public ButtonDownListener FastForward;

	[Token(Token = "0x40004BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public MediaPlayerImage FastForwardImage;

	[Token(Token = "0x40004BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ButtonDownListener Rewind;

	[Token(Token = "0x40004BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public MediaPlayerImage RewindImage;

	[Token(Token = "0x40004BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float TimeoutTime;

	[Token(Token = "0x40004BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private bool _isVisible;

	[Token(Token = "0x40004BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float _lastButtonTime;

	[Token(Token = "0x40004C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private bool _didSeek;

	[Token(Token = "0x40004C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private long _seekPreviousPosition;

	[Token(Token = "0x40004C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private long _rewindStartPosition;

	[Token(Token = "0x40004C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float _rewindStartTime;

	[Token(Token = "0x40004C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private PlaybackState _state;

	[Token(Token = "0x60003B2")]
	[Address(RVA = "0xAB8720", Offset = "0xAB8720", VA = "0xAB8720")]
	private void Start()
	{
	}

	[Token(Token = "0x60003B3")]
	[Address(RVA = "0xAB8A1C", Offset = "0xAB8A1C", VA = "0xAB8A1C")]
	private void OnPlayPauseClicked()
	{
	}

	[Token(Token = "0x60003B4")]
	[Address(RVA = "0xAB8BF8", Offset = "0xAB8BF8", VA = "0xAB8BF8")]
	private void OnFastForwardClicked()
	{
	}

	[Token(Token = "0x60003B5")]
	[Address(RVA = "0xAB8D2C", Offset = "0xAB8D2C", VA = "0xAB8D2C")]
	private void OnRewindClicked()
	{
	}

	[Token(Token = "0x60003B6")]
	[Address(RVA = "0xAB8E34", Offset = "0xAB8E34", VA = "0xAB8E34")]
	private void OnSeekBarMoved(float value)
	{
	}

	[Token(Token = "0x60003B7")]
	[Address(RVA = "0xAB8D00", Offset = "0xAB8D00", VA = "0xAB8D00")]
	private void Seek(long pos)
	{
	}

	[Token(Token = "0x60003B8")]
	[Address(RVA = "0xAB8EFC", Offset = "0xAB8EFC", VA = "0xAB8EFC")]
	private void Update()
	{
	}

	[Token(Token = "0x60003B9")]
	[Address(RVA = "0xAB8910", Offset = "0xAB8910", VA = "0xAB8910")]
	private void SetVisible(bool visible)
	{
	}

	[Token(Token = "0x60003BA")]
	[Address(RVA = "0xAB9290", Offset = "0xAB9290", VA = "0xAB9290")]
	public MoviePlayerSampleControls()
	{
	}
}
[Token(Token = "0x20000C2")]
public static class VectorUtil
{
	[Token(Token = "0x60003BB")]
	[Address(RVA = "0x16E46C8", Offset = "0x16E46C8", VA = "0x16E46C8")]
	public static Vector4 ToVector(this Rect rect)
	{
		return default(Vector4);
	}
}
[Token(Token = "0x20000C3")]
public class DebugUISample : MonoBehaviour
{
	[Token(Token = "0x40004C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool inMenu;

	[Token(Token = "0x40004C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Text sliderText;

	[Token(Token = "0x60003BC")]
	[Address(RVA = "0xA55924", Offset = "0xA55924", VA = "0xA55924")]
	private void Start()
	{
	}

	[Token(Token = "0x60003BD")]
	[Address(RVA = "0xA55CF4", Offset = "0xA55CF4", VA = "0xA55CF4")]
	public void TogglePressed(Toggle t)
	{
	}

	[Token(Token = "0x60003BE")]
	[Address(RVA = "0xA55DAC", Offset = "0xA55DAC", VA = "0xA55DAC")]
	public void RadioPressed(string radioLabel, string group, Toggle t)
	{
	}

	[Token(Token = "0x60003BF")]
	[Address(RVA = "0xA55FAC", Offset = "0xA55FAC", VA = "0xA55FAC")]
	public void SliderPressed(float f)
	{
	}

	[Token(Token = "0x60003C0")]
	[Address(RVA = "0xA56094", Offset = "0xA56094", VA = "0xA56094")]
	private void Update()
	{
	}

	[Token(Token = "0x60003C1")]
	[Address(RVA = "0xA56170", Offset = "0xA56170", VA = "0xA56170")]
	private void LogButtonPressed()
	{
	}

	[Token(Token = "0x60003C2")]
	[Address(RVA = "0xA561DC", Offset = "0xA561DC", VA = "0xA561DC")]
	public DebugUISample()
	{
	}

	[Token(Token = "0x60003C3")]
	[Address(RVA = "0xA561E4", Offset = "0xA561E4", VA = "0xA561E4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82FD70", Offset = "0x82FD70")]
	private void <Start>b__2_0(Toggle t)
	{
	}

	[Token(Token = "0x60003C4")]
	[Address(RVA = "0xA56240", Offset = "0xA56240", VA = "0xA56240")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82FD80", Offset = "0x82FD80")]
	private void <Start>b__2_1(Toggle t)
	{
	}

	[Token(Token = "0x60003C5")]
	[Address(RVA = "0xA5629C", Offset = "0xA5629C", VA = "0xA5629C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82FD90", Offset = "0x82FD90")]
	private void <Start>b__2_2(Toggle t)
	{
	}

	[Token(Token = "0x60003C6")]
	[Address(RVA = "0xA562F8", Offset = "0xA562F8", VA = "0xA562F8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82FDA0", Offset = "0x82FDA0")]
	private void <Start>b__2_3(Toggle t)
	{
	}
}
[Token(Token = "0x20000C4")]
public class HandsActiveChecker : MonoBehaviour
{
	[Token(Token = "0x200062C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820C28", Offset = "0x820C28")]
	private sealed class <GetCenterEye>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4002495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4002496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4002497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandsActiveChecker <>4__this;

		[Token(Token = "0x170006DD")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60033A1")]
			[Address(RVA = "0xA58938", Offset = "0xA58938", VA = "0xA58938", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006DE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60033A3")]
			[Address(RVA = "0xA589A0", Offset = "0xA589A0", VA = "0xA589A0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600339E")]
		[Address(RVA = "0xA587E8", Offset = "0xA587E8", VA = "0xA587E8")]
		[DebuggerHidden]
		public <GetCenterEye>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x600339F")]
		[Address(RVA = "0xA5881C", Offset = "0xA5881C", VA = "0xA5881C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60033A0")]
		[Address(RVA = "0xA58820", Offset = "0xA58820", VA = "0xA58820", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60033A2")]
		[Address(RVA = "0xA58940", Offset = "0xA58940", VA = "0xA58940", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40004C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject _notificationPrefab;

	[Token(Token = "0x40004C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject _notification;

	[Token(Token = "0x40004C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVRCameraRig _cameraRig;

	[Token(Token = "0x40004CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform _centerEye;

	[Token(Token = "0x60003C7")]
	[Address(RVA = "0xA584EC", Offset = "0xA584EC", VA = "0xA584EC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003C8")]
	[Address(RVA = "0xA585EC", Offset = "0xA585EC", VA = "0xA585EC")]
	private void Update()
	{
	}

	[Token(Token = "0x60003C9")]
	[Address(RVA = "0xA5857C", Offset = "0xA5857C", VA = "0xA5857C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x82FDB0", Offset = "0x82FDB0")]
	private IEnumerator GetCenterEye()
	{
		return null;
	}

	[Token(Token = "0x60003CA")]
	[Address(RVA = "0xA58814", Offset = "0xA58814", VA = "0xA58814")]
	public HandsActiveChecker()
	{
	}
}
[Token(Token = "0x20000C5")]
[ExecuteInEditMode]
public class CharacterCapsule : MonoBehaviour
{
	[Token(Token = "0x40004CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private CharacterController _character;

	[Token(Token = "0x40004CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private MeshFilter _meshFilter;

	[Token(Token = "0x40004CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float _height;

	[Token(Token = "0x40004CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float _radius;

	[Token(Token = "0x40004CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x822B38", Offset = "0x822B38")]
	public int SubdivisionsU;

	[Token(Token = "0x40004D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x822B54", Offset = "0x822B54")]
	public int SubdivisionsV;

	[Token(Token = "0x40004D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int _subdivisionU;

	[Token(Token = "0x40004D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int _subdivisionV;

	[Token(Token = "0x40004D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3[] _vertices;

	[Token(Token = "0x40004D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int[] _triangles;

	[Token(Token = "0x60003CB")]
	[Address(RVA = "0xA50DC0", Offset = "0xA50DC0", VA = "0xA50DC0")]
	private void Update()
	{
	}

	[Token(Token = "0x60003CC")]
	[Address(RVA = "0xA51878", Offset = "0xA51878", VA = "0xA51878")]
	public CharacterCapsule()
	{
	}
}
[Token(Token = "0x20000C6")]
public class LocomotionSampleSupport : MonoBehaviour
{
	[Token(Token = "0x40004D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private LocomotionController lc;

	[Token(Token = "0x40004D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool inMenu;

	[Token(Token = "0x17000028")]
	private LocomotionTeleport TeleportController
	{
		[Token(Token = "0x60003CD")]
		[Address(RVA = "0xAB1698", Offset = "0xAB1698", VA = "0xAB1698")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60003CE")]
	[Address(RVA = "0xAB16F0", Offset = "0xAB16F0", VA = "0xAB16F0")]
	public void Start()
	{
	}

	[Token(Token = "0x60003CF")]
	[Address(RVA = "0xAB1A34", Offset = "0xAB1A34", VA = "0xAB1A34")]
	public void Update()
	{
	}

	[Token(Token = "0x60003D0")]
	[Address(RVA = "0xAB1B18", Offset = "0xAB1B18", VA = "0xAB1B18")]
	[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x82FE14", Offset = "0x82FE14")]
	private static void Log(string msg)
	{
	}

	[Token(Token = "0x60003D1")]
	public static TActivate ActivateCategory<TCategory, TActivate>(GameObject target) where TCategory : MonoBehaviour where TActivate : MonoBehaviour
	{
		return null;
	}

	[Token(Token = "0x60003D2")]
	protected void ActivateHandlers<TInput, TAim, TTarget, TOrientation, TTransition>() where TInput : TeleportInputHandler where TAim : TeleportAimHandler where TTarget : TeleportTargetHandler where TOrientation : TeleportOrientationHandler where TTransition : TeleportTransition
	{
	}

	[Token(Token = "0x60003D3")]
	protected void ActivateInput<TActivate>() where TActivate : TeleportInputHandler
	{
	}

	[Token(Token = "0x60003D4")]
	protected void ActivateAim<TActivate>() where TActivate : TeleportAimHandler
	{
	}

	[Token(Token = "0x60003D5")]
	protected void ActivateTarget<TActivate>() where TActivate : TeleportTargetHandler
	{
	}

	[Token(Token = "0x60003D6")]
	protected void ActivateOrientation<TActivate>() where TActivate : TeleportOrientationHandler
	{
	}

	[Token(Token = "0x60003D7")]
	protected void ActivateTransition<TActivate>() where TActivate : TeleportTransition
	{
	}

	[Token(Token = "0x60003D8")]
	protected TActivate ActivateCategory<TCategory, TActivate>() where TCategory : MonoBehaviour where TActivate : MonoBehaviour
	{
		return null;
	}

	[Token(Token = "0x60003D9")]
	[Address(RVA = "0xAB1B80", Offset = "0xAB1B80", VA = "0xAB1B80")]
	protected void UpdateToggle(Toggle toggle, bool enabled)
	{
	}

	[Token(Token = "0x60003DA")]
	[Address(RVA = "0xAB1BBC", Offset = "0xAB1BBC", VA = "0xAB1BBC")]
	private void SetupNonCap()
	{
	}

	[Token(Token = "0x60003DB")]
	[Address(RVA = "0xAB1C30", Offset = "0xAB1C30", VA = "0xAB1C30")]
	private void SetupTeleportDefaults()
	{
	}

	[Token(Token = "0x60003DC")]
	[Address(RVA = "0xAB1D8C", Offset = "0xAB1D8C", VA = "0xAB1D8C")]
	protected GameObject AddInstance(GameObject template, string label)
	{
		return null;
	}

	[Token(Token = "0x60003DD")]
	[Address(RVA = "0xAB1E60", Offset = "0xAB1E60", VA = "0xAB1E60")]
	private void SetupNodeTeleport()
	{
	}

	[Token(Token = "0x60003DE")]
	[Address(RVA = "0xAB1940", Offset = "0xAB1940", VA = "0xAB1940")]
	private void SetupTwoStickTeleport()
	{
	}

	[Token(Token = "0x60003DF")]
	[Address(RVA = "0xAB1F20", Offset = "0xAB1F20", VA = "0xAB1F20")]
	private void SetupWalkOnly()
	{
	}

	[Token(Token = "0x60003E0")]
	[Address(RVA = "0xAB1F88", Offset = "0xAB1F88", VA = "0xAB1F88")]
	private void SetupLeftStrafeRightTeleport()
	{
	}

	[Token(Token = "0x60003E1")]
	[Address(RVA = "0xAB206C", Offset = "0xAB206C", VA = "0xAB206C")]
	public LocomotionSampleSupport()
	{
	}
}
[Token(Token = "0x20000C7")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x81EE90", Offset = "0x81EE90")]
public class OVROverlayCanvas : MonoBehaviour
{
	[Token(Token = "0x200062D")]
	public enum DrawMode
	{
		[Token(Token = "0x4002499")]
		Opaque,
		[Token(Token = "0x400249A")]
		OpaqueWithClip,
		[Token(Token = "0x400249B")]
		TransparentDefaultAlpha,
		[Token(Token = "0x400249C")]
		TransparentCorrectAlpha
	}

	[Token(Token = "0x40004D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[HideInInspector]
	private Shader _transparentShader;

	[Token(Token = "0x40004D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[HideInInspector]
	private Shader _opaqueShader;

	[Token(Token = "0x40004D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RectTransform _rectTransform;

	[Token(Token = "0x40004DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Canvas _canvas;

	[Token(Token = "0x40004DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Camera _camera;

	[Token(Token = "0x40004DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private OVROverlay _overlay;

	[Token(Token = "0x40004DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private RenderTexture _renderTexture;

	[Token(Token = "0x40004DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private MeshRenderer _meshRenderer;

	[Token(Token = "0x40004DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Mesh _quad;

	[Token(Token = "0x40004E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Material _defaultMat;

	[Token(Token = "0x40004E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public int MaxTextureSize;

	[Token(Token = "0x40004E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public int MinTextureSize;

	[Token(Token = "0x40004E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float PixelsPerUnit;

	[Token(Token = "0x40004E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public int DrawRate;

	[Token(Token = "0x40004E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public int DrawFrameOffset;

	[Token(Token = "0x40004E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool Expensive;

	[Token(Token = "0x40004E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public int Layer;

	[Token(Token = "0x40004E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public DrawMode Opacity;

	[Token(Token = "0x40004E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool ScaleViewport;

	[Token(Token = "0x40004EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Plane[] _FrustumPlanes;

	[Token(Token = "0x17000029")]
	public bool overlayEnabled
	{
		[Token(Token = "0x60003E8")]
		[Address(RVA = "0xF9D5AC", Offset = "0xF9D5AC", VA = "0xF9D5AC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60003E9")]
		[Address(RVA = "0xF9D640", Offset = "0xF9D640", VA = "0xF9D640")]
		set
		{
		}
	}

	[Token(Token = "0x60003E2")]
	[Address(RVA = "0xF9BF3C", Offset = "0xF9BF3C", VA = "0xF9BF3C")]
	private void Start()
	{
	}

	[Token(Token = "0x60003E3")]
	[Address(RVA = "0xF9CBAC", Offset = "0xF9CBAC", VA = "0xF9CBAC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60003E4")]
	[Address(RVA = "0xF9CC30", Offset = "0xF9CC30", VA = "0xF9CC30")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60003E5")]
	[Address(RVA = "0xF9CD24", Offset = "0xF9CD24", VA = "0xF9CD24")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60003E6")]
	[Address(RVA = "0xF9CE18", Offset = "0xF9CE18", VA = "0xF9CE18", Slot = "4")]
	protected virtual bool ShouldRender()
	{
		return default(bool);
	}

	[Token(Token = "0x60003E7")]
	[Address(RVA = "0xF9D01C", Offset = "0xF9D01C", VA = "0xF9D01C")]
	private void Update()
	{
	}

	[Token(Token = "0x60003EA")]
	[Address(RVA = "0xF9D710", Offset = "0xF9D710", VA = "0xF9D710")]
	public OVROverlayCanvas()
	{
	}
}
[Token(Token = "0x20000C8")]
public class StartMenu : MonoBehaviour
{
	[Token(Token = "0x200062E")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820C38", Offset = "0x820C38")]
	private sealed class <>c__DisplayClass3_0
	{
		[Token(Token = "0x400249D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int sceneIndex;

		[Token(Token = "0x400249E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public StartMenu <>4__this;

		[Token(Token = "0x60033A4")]
		[Address(RVA = "0xADD330", Offset = "0xADD330", VA = "0xADD330")]
		public <>c__DisplayClass3_0()
		{
		}

		[Token(Token = "0x60033A5")]
		[Address(RVA = "0xADD440", Offset = "0xADD440", VA = "0xADD440")]
		internal void <Start>b__0()
		{
		}
	}

	[Token(Token = "0x40004EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVROverlay overlay;

	[Token(Token = "0x40004EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVROverlay text;

	[Token(Token = "0x40004ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRCameraRig vrRig;

	[Token(Token = "0x60003EC")]
	[Address(RVA = "0xADD170", Offset = "0xADD170", VA = "0xADD170")]
	private void Start()
	{
	}

	[Token(Token = "0x60003ED")]
	[Address(RVA = "0xADD338", Offset = "0xADD338", VA = "0xADD338")]
	private void LoadScene(int idx)
	{
	}

	[Token(Token = "0x60003EE")]
	[Address(RVA = "0xADD438", Offset = "0xADD438", VA = "0xADD438")]
	public StartMenu()
	{
	}
}
[Token(Token = "0x20000C9")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x81EEF4", Offset = "0x81EEF4")]
public class MouseLook : MonoBehaviour
{
	[Token(Token = "0x200062F")]
	public enum RotationAxes
	{
		[Token(Token = "0x40024A0")]
		MouseXAndY,
		[Token(Token = "0x40024A1")]
		MouseX,
		[Token(Token = "0x40024A2")]
		MouseY
	}

	[Token(Token = "0x40004EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RotationAxes axes;

	[Token(Token = "0x40004EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float sensitivityX;

	[Token(Token = "0x40004F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float sensitivityY;

	[Token(Token = "0x40004F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float minimumX;

	[Token(Token = "0x40004F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float maximumX;

	[Token(Token = "0x40004F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float minimumY;

	[Token(Token = "0x40004F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float maximumY;

	[Token(Token = "0x40004F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float rotationY;

	[Token(Token = "0x60003EF")]
	[Address(RVA = "0xAB5E28", Offset = "0xAB5E28", VA = "0xAB5E28")]
	private void Update()
	{
	}

	[Token(Token = "0x60003F0")]
	[Address(RVA = "0xAB6088", Offset = "0xAB6088", VA = "0xAB6088")]
	private void Start()
	{
	}

	[Token(Token = "0x60003F1")]
	[Address(RVA = "0xAB6148", Offset = "0xAB6148", VA = "0xAB6148")]
	public MouseLook()
	{
	}
}
[Token(Token = "0x20000CA")]
public class ONSPAmbisonicsNative : MonoBehaviour
{
	[Token(Token = "0x2000630")]
	public enum ovrAmbisonicsNativeStatus
	{
		[Token(Token = "0x40024A4")]
		Uninitialized = -1,
		[Token(Token = "0x40024A5")]
		NotEnabled,
		[Token(Token = "0x40024A6")]
		Success,
		[Token(Token = "0x40024A7")]
		StreamError,
		[Token(Token = "0x40024A8")]
		ProcessError,
		[Token(Token = "0x40024A9")]
		MaxStatValue
	}

	[Token(Token = "0x40004F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private AudioSource source;

	[Token(Token = "0x40004F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int numFOAChannels;

	[Token(Token = "0x40004F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static int paramAmbiStat;

	[Token(Token = "0x40004F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ovrAmbisonicsNativeStatus currentStatus;

	[Token(Token = "0x60003F2")]
	[Address(RVA = "0xABA69C", Offset = "0xABA69C", VA = "0xABA69C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60003F3")]
	[Address(RVA = "0xABA8D0", Offset = "0xABA8D0", VA = "0xABA8D0")]
	private void Update()
	{
	}

	[Token(Token = "0x60003F4")]
	[Address(RVA = "0xABAABC", Offset = "0xABAABC", VA = "0xABAABC")]
	public ONSPAmbisonicsNative()
	{
	}
}
[Token(Token = "0x20000CB")]
public class ONSPAudioSource : MonoBehaviour
{
	[Token(Token = "0x2000631")]
	private enum Parameters
	{
		[Token(Token = "0x40024AB")]
		P_GAIN,
		[Token(Token = "0x40024AC")]
		P_USEINVSQR,
		[Token(Token = "0x40024AD")]
		P_NEAR,
		[Token(Token = "0x40024AE")]
		P_FAR,
		[Token(Token = "0x40024AF")]
		P_RADIUS,
		[Token(Token = "0x40024B0")]
		P_DISABLE_RFL,
		[Token(Token = "0x40024B1")]
		P_AMBISTAT,
		[Token(Token = "0x40024B2")]
		P_READONLY_GLOBAL_RFL_ENABLED,
		[Token(Token = "0x40024B3")]
		P_READONLY_NUM_VOICES,
		[Token(Token = "0x40024B4")]
		P_SENDLEVEL,
		[Token(Token = "0x40024B5")]
		P_NUM
	}

	[Token(Token = "0x40004FA")]
	public const string strONSPS = "AudioPluginOculusSpatializer";

	[Token(Token = "0x40004FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool enableSpatialization;

	[Token(Token = "0x40004FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float gain;

	[Token(Token = "0x40004FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private bool useInvSqr;

	[Token(Token = "0x40004FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float near;

	[Token(Token = "0x40004FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float far;

	[Token(Token = "0x4000500")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float volumetricRadius;

	[Token(Token = "0x4000501")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float reverbSend;

	[Token(Token = "0x4000502")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private bool enableRfl;

	[Token(Token = "0x4000503")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ONSPAudioSource RoomReflectionGizmoAS;

	[Token(Token = "0x1700002A")]
	public bool EnableSpatialization
	{
		[Token(Token = "0x60003F8")]
		[Address(RVA = "0xABAD08", Offset = "0xABAD08", VA = "0xABAD08")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60003F9")]
		[Address(RVA = "0xABAD10", Offset = "0xABAD10", VA = "0xABAD10")]
		set
		{
		}
	}

	[Token(Token = "0x1700002B")]
	public float Gain
	{
		[Token(Token = "0x60003FA")]
		[Address(RVA = "0xABAD1C", Offset = "0xABAD1C", VA = "0xABAD1C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60003FB")]
		[Address(RVA = "0xABAD24", Offset = "0xABAD24", VA = "0xABAD24")]
		set
		{
		}
	}

	[Token(Token = "0x1700002C")]
	public bool UseInvSqr
	{
		[Token(Token = "0x60003FC")]
		[Address(RVA = "0xABADA8", Offset = "0xABADA8", VA = "0xABADA8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60003FD")]
		[Address(RVA = "0xABADB0", Offset = "0xABADB0", VA = "0xABADB0")]
		set
		{
		}
	}

	[Token(Token = "0x1700002D")]
	public float Near
	{
		[Token(Token = "0x60003FE")]
		[Address(RVA = "0xABADBC", Offset = "0xABADBC", VA = "0xABADBC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60003FF")]
		[Address(RVA = "0xABADC4", Offset = "0xABADC4", VA = "0xABADC4")]
		set
		{
		}
	}

	[Token(Token = "0x1700002E")]
	public float Far
	{
		[Token(Token = "0x6000400")]
		[Address(RVA = "0xABAE4C", Offset = "0xABAE4C", VA = "0xABAE4C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000401")]
		[Address(RVA = "0xABAE54", Offset = "0xABAE54", VA = "0xABAE54")]
		set
		{
		}
	}

	[Token(Token = "0x1700002F")]
	public float VolumetricRadius
	{
		[Token(Token = "0x6000402")]
		[Address(RVA = "0xABAEDC", Offset = "0xABAEDC", VA = "0xABAEDC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000403")]
		[Address(RVA = "0xABAEE4", Offset = "0xABAEE4", VA = "0xABAEE4")]
		set
		{
		}
	}

	[Token(Token = "0x17000030")]
	public float ReverbSend
	{
		[Token(Token = "0x6000404")]
		[Address(RVA = "0xABAF6C", Offset = "0xABAF6C", VA = "0xABAF6C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000405")]
		[Address(RVA = "0xABAF74", Offset = "0xABAF74", VA = "0xABAF74")]
		set
		{
		}
	}

	[Token(Token = "0x17000031")]
	public bool EnableRfl
	{
		[Token(Token = "0x6000406")]
		[Address(RVA = "0xABAFFC", Offset = "0xABAFFC", VA = "0xABAFFC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000407")]
		[Address(RVA = "0xABB004", Offset = "0xABB004", VA = "0xABB004")]
		set
		{
		}
	}

	[Token(Token = "0x60003F6")]
	[Address(RVA = "0xABAB30", Offset = "0xABAB30", VA = "0xABAB30")]
	[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x82FE4C", Offset = "0x82FE4C")]
	private static void OnBeforeSceneLoadRuntimeMethod()
	{
	}

	[PreserveSig]
	[Token(Token = "0x60003F7")]
	[Address(RVA = "0xABAC28", Offset = "0xABAC28", VA = "0xABAC28")]
	private static extern void ONSP_GetGlobalRoomReflectionValues(ref bool reflOn, ref bool reverbOn, ref float width, ref float height, ref float length);

	[Token(Token = "0x6000408")]
	[Address(RVA = "0xABB010", Offset = "0xABB010", VA = "0xABB010")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000409")]
	[Address(RVA = "0xABB184", Offset = "0xABB184", VA = "0xABB184")]
	private void Start()
	{
	}

	[Token(Token = "0x600040A")]
	[Address(RVA = "0xABB188", Offset = "0xABB188", VA = "0xABB188")]
	private void Update()
	{
	}

	[Token(Token = "0x600040B")]
	[Address(RVA = "0xABB07C", Offset = "0xABB07C", VA = "0xABB07C")]
	public void SetParameters(ref AudioSource source)
	{
	}

	[Token(Token = "0x600040C")]
	[Address(RVA = "0xABB250", Offset = "0xABB250", VA = "0xABB250")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600040D")]
	[Address(RVA = "0xABB6B0", Offset = "0xABB6B0", VA = "0xABB6B0")]
	private void OnDestroy()
	{
	}

	[PreserveSig]
	[Token(Token = "0x600040E")]
	[Address(RVA = "0xABABA8", Offset = "0xABABA8", VA = "0xABABA8")]
	private static extern int OSP_SetGlobalVoiceLimit(int VoiceLimit);

	[Token(Token = "0x600040F")]
	[Address(RVA = "0xABB780", Offset = "0xABB780", VA = "0xABB780")]
	public ONSPAudioSource()
	{
	}
}
[Token(Token = "0x20000CC")]
public class ONSPProfiler : MonoBehaviour
{
	[Token(Token = "0x4000504")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool profilerEnabled;

	[Token(Token = "0x4000505")]
	private const int DEFAULT_PORT = 2121;

	[Token(Token = "0x4000506")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int port;

	[Token(Token = "0x4000507")]
	public const string strONSPS = "AudioPluginOculusSpatializer";

	[Token(Token = "0x6000411")]
	[Address(RVA = "0xABB7A0", Offset = "0xABB7A0", VA = "0xABB7A0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000412")]
	[Address(RVA = "0xABB7AC", Offset = "0xABB7AC", VA = "0xABB7AC")]
	private void Update()
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000413")]
	[Address(RVA = "0xABB864", Offset = "0xABB864", VA = "0xABB864")]
	private static extern int ONSP_SetProfilerEnabled(bool enabled);

	[PreserveSig]
	[Token(Token = "0x6000414")]
	[Address(RVA = "0xABB7E4", Offset = "0xABB7E4", VA = "0xABB7E4")]
	private static extern int ONSP_SetProfilerPort(int port);

	[Token(Token = "0x6000415")]
	[Address(RVA = "0xABB8E4", Offset = "0xABB8E4", VA = "0xABB8E4")]
	public ONSPProfiler()
	{
	}
}
[Token(Token = "0x20000CD")]
public class ONSPPropagationGeometry : MonoBehaviour
{
	[Token(Token = "0x2000632")]
	private struct MeshMaterial
	{
		[Token(Token = "0x40024B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public MeshFilter meshFilter;

		[Token(Token = "0x40024B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ONSPPropagationMaterial[] materials;
	}

	[Token(Token = "0x2000633")]
	private struct TerrainMaterial
	{
		[Token(Token = "0x40024B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Terrain terrain;

		[Token(Token = "0x40024B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ONSPPropagationMaterial[] materials;

		[Token(Token = "0x40024BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Mesh[] treePrototypeMeshes;
	}

	[Token(Token = "0x4000508")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string GeometryAssetDirectory;

	[Token(Token = "0x4000509")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string filePathRelative;

	[Token(Token = "0x400050A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool fileEnabled;

	[Token(Token = "0x400050B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool includeChildMeshes;

	[Token(Token = "0x400050C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IntPtr geometryHandle;

	[Token(Token = "0x400050D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int OSPSuccess;

	[Token(Token = "0x400050E")]
	public const string GEOMETRY_FILE_EXTENSION = "ovramesh";

	[Token(Token = "0x400050F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static int terrainDecimation;

	[Token(Token = "0x17000032")]
	public static string GeometryAssetPath
	{
		[Token(Token = "0x6000416")]
		[Address(RVA = "0xABE360", Offset = "0xABE360", VA = "0xABE360")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000033")]
	public string filePath
	{
		[Token(Token = "0x6000417")]
		[Address(RVA = "0xABE3EC", Offset = "0xABE3EC", VA = "0xABE3EC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000418")]
	[Address(RVA = "0xABE464", Offset = "0xABE464", VA = "0xABE464")]
	private static string GetPath(Transform current)
	{
		return null;
	}

	[Token(Token = "0x6000419")]
	[Address(RVA = "0xABE5AC", Offset = "0xABE5AC", VA = "0xABE5AC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600041A")]
	[Address(RVA = "0xABE5B0", Offset = "0xABE5B0", VA = "0xABE5B0")]
	private void CreatePropagationGeometry()
	{
	}

	[Token(Token = "0x600041B")]
	[Address(RVA = "0xABEB10", Offset = "0xABEB10", VA = "0xABEB10")]
	private void Update()
	{
	}

	[Token(Token = "0x600041C")]
	[Address(RVA = "0xABEEA8", Offset = "0xABEEA8", VA = "0xABEEA8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600041D")]
	[Address(RVA = "0xABF004", Offset = "0xABF004", VA = "0xABF004")]
	private static void traverseMeshHierarchy(GameObject obj, ONSPPropagationMaterial[] currentMaterials, bool includeChildren, List<MeshMaterial> meshMaterials, List<TerrainMaterial> terrainMaterials, bool ignoreStatic, ref int ignoredMeshCount)
	{
	}

	[Token(Token = "0x600041E")]
	[Address(RVA = "0xABF6DC", Offset = "0xABF6DC", VA = "0xABF6DC")]
	private int uploadMesh(IntPtr geometryHandle, GameObject meshObject, Matrix4x4 worldToLocal)
	{
		return default(int);
	}

	[Token(Token = "0x600041F")]
	[Address(RVA = "0xABF718", Offset = "0xABF718", VA = "0xABF718")]
	private int uploadMesh(IntPtr geometryHandle, GameObject meshObject, Matrix4x4 worldToLocal, bool ignoreStatic, ref int ignoredMeshCount)
	{
		return default(int);
	}

	[Token(Token = "0x6000420")]
	[Address(RVA = "0xAC0D30", Offset = "0xAC0D30", VA = "0xAC0D30")]
	private static void uploadMeshFilter(List<Vector3> tempVertices, List<int> tempIndices, MeshGroup[] groups, float[] vertices, int[] indices, ref int vertexOffset, ref int indexOffset, ref int groupOffset, Mesh mesh, ONSPPropagationMaterial[] materials, Matrix4x4 matrix)
	{
	}

	[Token(Token = "0x6000421")]
	[Address(RVA = "0xAC0C08", Offset = "0xAC0C08", VA = "0xAC0C08")]
	private static void updateCountsForMesh(ref int totalVertexCount, ref uint totalIndexCount, ref int totalFaceCount, ref int totalMaterialCount, Mesh mesh)
	{
	}

	[Token(Token = "0x6000422")]
	[Address(RVA = "0xABE948", Offset = "0xABE948", VA = "0xABE948")]
	public void UploadGeometry()
	{
	}

	[Token(Token = "0x6000423")]
	[Address(RVA = "0xABE77C", Offset = "0xABE77C", VA = "0xABE77C")]
	public bool ReadFile()
	{
		return default(bool);
	}

	[Token(Token = "0x6000424")]
	[Address(RVA = "0xAC11DC", Offset = "0xAC11DC", VA = "0xAC11DC")]
	public bool WriteToObj()
	{
		return default(bool);
	}

	[Token(Token = "0x6000425")]
	[Address(RVA = "0xAC1618", Offset = "0xAC1618", VA = "0xAC1618")]
	public ONSPPropagationGeometry()
	{
	}
}
[Token(Token = "0x20000CE")]
internal class ONSPPropagation
{
	[Token(Token = "0x2000634")]
	public enum ovrAudioScalarType : uint
	{
		[Token(Token = "0x40024BC")]
		Int8,
		[Token(Token = "0x40024BD")]
		UInt8,
		[Token(Token = "0x40024BE")]
		Int16,
		[Token(Token = "0x40024BF")]
		UInt16,
		[Token(Token = "0x40024C0")]
		Int32,
		[Token(Token = "0x40024C1")]
		UInt32,
		[Token(Token = "0x40024C2")]
		Int64,
		[Token(Token = "0x40024C3")]
		UInt64,
		[Token(Token = "0x40024C4")]
		Float16,
		[Token(Token = "0x40024C5")]
		Float32,
		[Token(Token = "0x40024C6")]
		Float64
	}

	[Token(Token = "0x2000635")]
	public class ClientType
	{
		[Token(Token = "0x40024C7")]
		public const uint OVRA_CLIENT_TYPE_NATIVE = 0u;

		[Token(Token = "0x40024C8")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2016 = 1u;

		[Token(Token = "0x40024C9")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2017_1 = 2u;

		[Token(Token = "0x40024CA")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2017_2 = 3u;

		[Token(Token = "0x40024CB")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2018_1 = 4u;

		[Token(Token = "0x40024CC")]
		public const uint OVRA_CLIENT_TYPE_FMOD = 5u;

		[Token(Token = "0x40024CD")]
		public const uint OVRA_CLIENT_TYPE_UNITY = 6u;

		[Token(Token = "0x40024CE")]
		public const uint OVRA_CLIENT_TYPE_UE4 = 7u;

		[Token(Token = "0x40024CF")]
		public const uint OVRA_CLIENT_TYPE_VST = 8u;

		[Token(Token = "0x40024D0")]
		public const uint OVRA_CLIENT_TYPE_AAX = 9u;

		[Token(Token = "0x40024D1")]
		public const uint OVRA_CLIENT_TYPE_TEST = 10u;

		[Token(Token = "0x40024D2")]
		public const uint OVRA_CLIENT_TYPE_OTHER = 11u;

		[Token(Token = "0x40024D3")]
		public const uint OVRA_CLIENT_TYPE_WWISE_UNKNOWN = 12u;

		[Token(Token = "0x40024D4")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2019_1 = 13u;

		[Token(Token = "0x40024D5")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2019_2 = 14u;

		[Token(Token = "0x60033A6")]
		[Address(RVA = "0xABBD98", Offset = "0xABBD98", VA = "0xABBD98")]
		public ClientType()
		{
		}
	}

	[Token(Token = "0x2000636")]
	public interface PropagationInterface
	{
		[Token(Token = "0x60033A7")]
		int SetPropagationQuality(float quality);

		[Token(Token = "0x60033A8")]
		int SetPropagationThreadAffinity(ulong cpuMask);

		[Token(Token = "0x60033A9")]
		int CreateAudioGeometry(out IntPtr geometry);

		[Token(Token = "0x60033AA")]
		int DestroyAudioGeometry(IntPtr geometry);

		[Token(Token = "0x60033AB")]
		int AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, int vertexCount, int[] indices, int indexCount, MeshGroup[] groups, int groupCount);

		[Token(Token = "0x60033AC")]
		int AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4);

		[Token(Token = "0x60033AD")]
		int AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4);

		[Token(Token = "0x60033AE")]
		int AudioGeometryWriteMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x60033AF")]
		int AudioGeometryReadMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x60033B0")]
		int AudioGeometryWriteMeshFileObj(IntPtr geometry, string filePath);

		[Token(Token = "0x60033B1")]
		int AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value);

		[Token(Token = "0x60033B2")]
		int CreateAudioMaterial(out IntPtr material);

		[Token(Token = "0x60033B3")]
		int DestroyAudioMaterial(IntPtr material);

		[Token(Token = "0x60033B4")]
		int AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value);

		[Token(Token = "0x60033B5")]
		int AudioMaterialReset(IntPtr material, MaterialProperty property);
	}

	[Token(Token = "0x2000637")]
	public class UnityNativeInterface : PropagationInterface
	{
		[Token(Token = "0x40024D6")]
		public const string strOSPS = "AudioPluginOculusSpatializer";

		[Token(Token = "0x40024D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr context_;

		[Token(Token = "0x170006DF")]
		private IntPtr context
		{
			[Token(Token = "0x60033B6")]
			[Address(RVA = "0xABCA08", Offset = "0xABCA08", VA = "0xABCA08")]
			get
			{
				return default(IntPtr);
			}
		}

		[PreserveSig]
		[Token(Token = "0x60033B7")]
		[Address(RVA = "0xABCA6C", Offset = "0xABCA6C", VA = "0xABCA6C")]
		public static extern int ovrAudio_GetPluginContext(out IntPtr context, uint clientType);

		[PreserveSig]
		[Token(Token = "0x60033B8")]
		[Address(RVA = "0xABCAFC", Offset = "0xABCAFC", VA = "0xABCAFC")]
		private static extern int ovrAudio_SetPropagationQuality(IntPtr context, float quality);

		[Token(Token = "0x60033B9")]
		[Address(RVA = "0xABCB8C", Offset = "0xABCB8C", VA = "0xABCB8C", Slot = "4")]
		public int SetPropagationQuality(float quality)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60033BA")]
		[Address(RVA = "0xABCBB0", Offset = "0xABCBB0", VA = "0xABCBB0")]
		private static extern int ovrAudio_SetPropagationThreadAffinity(IntPtr context, ulong cpuMask);

		[Token(Token = "0x60033BB")]
		[Address(RVA = "0xABCC40", Offset = "0xABCC40", VA = "0xABCC40", Slot = "5")]
		public int SetPropagationThreadAffinity(ulong cpuMask)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60033BC")]
		[Address(RVA = "0xABCC64", Offset = "0xABCC64", VA = "0xABCC64")]
		private static extern int ovrAudio_CreateAudioGeometry(IntPtr context, out IntPtr geometry);

		[Token(Token = "0x60033BD")]
		[Address(RVA = "0xABCCF0", Offset = "0xABCCF0", VA = "0xABCCF0", Slot = "6")]
		public int CreateAudioGeometry(out IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60033BE")]
		[Address(RVA = "0xABCD14", Offset = "0xABCD14", VA = "0xABCD14")]
		private static extern int ovrAudio_DestroyAudioGeometry(IntPtr geometry);

		[Token(Token = "0x60033BF")]
		[Address(RVA = "0xABCD94", Offset = "0xABCD94", VA = "0xABCD94", Slot = "7")]
		public int DestroyAudioGeometry(IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60033C0")]
		[Address(RVA = "0xABCD9C", Offset = "0xABCD9C", VA = "0xABCD9C")]
		private static extern int ovrAudio_AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, UIntPtr verticesBytesOffset, UIntPtr vertexCount, UIntPtr vertexStride, ovrAudioScalarType vertexType, int[] indices, UIntPtr indicesByteOffset, UIntPtr indexCount, ovrAudioScalarType indexType, MeshGroup[] groups, UIntPtr groupCount);

		[Token(Token = "0x60033C1")]
		[Address(RVA = "0xABCEBC", Offset = "0xABCEBC", VA = "0xABCEBC", Slot = "8")]
		public int AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, int vertexCount, int[] indices, int indexCount, MeshGroup[] groups, int groupCount)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60033C2")]
		[Address(RVA = "0xABCFB4", Offset = "0xABCFB4", VA = "0xABCFB4")]
		private static extern int ovrAudio_AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4);

		[Token(Token = "0x60033C3")]
		[Address(RVA = "0xABD04C", Offset = "0xABD04C", VA = "0xABD04C", Slot = "9")]
		public int AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60033C4")]
		[Address(RVA = "0xABD058", Offset = "0xABD058", VA = "0xABD058")]
		private static extern int ovrAudio_AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4);

		[Token(Token = "0x60033C5")]
		[Address(RVA = "0xABD184", Offset = "0xABD184", VA = "0xABD184", Slot = "10")]
		public int AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60033C6")]
		[Address(RVA = "0xABD190", Offset = "0xABD190", VA = "0xABD190")]
		private static extern int ovrAudio_AudioGeometryWriteMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x60033C7")]
		[Address(RVA = "0xABD23C", Offset = "0xABD23C", VA = "0xABD23C", Slot = "11")]
		public int AudioGeometryWriteMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60033C8")]
		[Address(RVA = "0xABD248", Offset = "0xABD248", VA = "0xABD248")]
		private static extern int ovrAudio_AudioGeometryReadMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x60033C9")]
		[Address(RVA = "0xABD2F4", Offset = "0xABD2F4", VA = "0xABD2F4", Slot = "12")]
		public int AudioGeometryReadMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60033CA")]
		[Address(RVA = "0xABD300", Offset = "0xABD300", VA = "0xABD300")]
		private static extern int ovrAudio_AudioGeometryWriteMeshFileObj(IntPtr geometry, string filePath);

		[Token(Token = "0x60033CB")]
		[Address(RVA = "0xABD3AC", Offset = "0xABD3AC", VA = "0xABD3AC", Slot = "13")]
		public int AudioGeometryWriteMeshFileObj(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60033CC")]
		[Address(RVA = "0xABD3B8", Offset = "0xABD3B8", VA = "0xABD3B8")]
		private static extern int ovrAudio_CreateAudioMaterial(IntPtr context, out IntPtr material);

		[Token(Token = "0x60033CD")]
		[Address(RVA = "0xABD444", Offset = "0xABD444", VA = "0xABD444", Slot = "15")]
		public int CreateAudioMaterial(out IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60033CE")]
		[Address(RVA = "0xABD468", Offset = "0xABD468", VA = "0xABD468")]
		private static extern int ovrAudio_DestroyAudioMaterial(IntPtr material);

		[Token(Token = "0x60033CF")]
		[Address(RVA = "0xABD4E8", Offset = "0xABD4E8", VA = "0xABD4E8", Slot = "16")]
		public int DestroyAudioMaterial(IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60033D0")]
		[Address(RVA = "0xABD4F0", Offset = "0xABD4F0", VA = "0xABD4F0")]
		private static extern int ovrAudio_AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value);

		[Token(Token = "0x60033D1")]
		[Address(RVA = "0xABD598", Offset = "0xABD598", VA = "0xABD598", Slot = "17")]
		public int AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60033D2")]
		[Address(RVA = "0xABD5A4", Offset = "0xABD5A4", VA = "0xABD5A4")]
		private static extern int ovrAudio_AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value);

		[Token(Token = "0x60033D3")]
		[Address(RVA = "0xABD64C", Offset = "0xABD64C", VA = "0xABD64C", Slot = "14")]
		public int AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60033D4")]
		[Address(RVA = "0xABD65C", Offset = "0xABD65C", VA = "0xABD65C")]
		private static extern int ovrAudio_AudioMaterialReset(IntPtr material, MaterialProperty property);

		[Token(Token = "0x60033D5")]
		[Address(RVA = "0xABD6EC", Offset = "0xABD6EC", VA = "0xABD6EC", Slot = "18")]
		public int AudioMaterialReset(IntPtr material, MaterialProperty property)
		{
			return default(int);
		}

		[Token(Token = "0x60033D6")]
		[Address(RVA = "0xABBD44", Offset = "0xABBD44", VA = "0xABBD44")]
		public UnityNativeInterface()
		{
		}
	}

	[Token(Token = "0x2000638")]
	public class WwisePluginInterface : PropagationInterface
	{
		[Token(Token = "0x40024D8")]
		public const string strOSPS = "OculusSpatializerWwise";

		[Token(Token = "0x40024D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr context_;

		[Token(Token = "0x170006E0")]
		private IntPtr context
		{
			[Token(Token = "0x60033D7")]
			[Address(RVA = "0xABD6F8", Offset = "0xABD6F8", VA = "0xABD6F8")]
			get
			{
				return default(IntPtr);
			}
		}

		[PreserveSig]
		[Token(Token = "0x60033D8")]
		[Address(RVA = "0xABBB8C", Offset = "0xABBB8C", VA = "0xABBB8C")]
		public static extern int ovrAudio_GetPluginContext(out IntPtr context, uint clientType);

		[PreserveSig]
		[Token(Token = "0x60033D9")]
		[Address(RVA = "0xABD75C", Offset = "0xABD75C", VA = "0xABD75C")]
		private static extern int ovrAudio_SetPropagationQuality(IntPtr context, float quality);

		[Token(Token = "0x60033DA")]
		[Address(RVA = "0xABD7EC", Offset = "0xABD7EC", VA = "0xABD7EC", Slot = "4")]
		public int SetPropagationQuality(float quality)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60033DB")]
		[Address(RVA = "0xABD810", Offset = "0xABD810", VA = "0xABD810")]
		private static extern int ovrAudio_SetPropagationThreadAffinity(IntPtr context, ulong cpuMask);

		[Token(Token = "0x60033DC")]
		[Address(RVA = "0xABD8A0", Offset = "0xABD8A0", VA = "0xABD8A0", Slot = "5")]
		public int SetPropagationThreadAffinity(ulong cpuMask)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60033DD")]
		[Address(RVA = "0xABD8C4", Offset = "0xABD8C4", VA = "0xABD8C4")]
		private static extern int ovrAudio_CreateAudioGeometry(IntPtr context, out IntPtr geometry);

		[Token(Token = "0x60033DE")]
		[Address(RVA = "0xABD954", Offset = "0xABD954", VA = "0xABD954", Slot = "6")]
		public int CreateAudioGeometry(out IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60033DF")]
		[Address(RVA = "0xABD978", Offset = "0xABD978", VA = "0xABD978")]
		private static extern int ovrAudio_DestroyAudioGeometry(IntPtr geometry);

		[Token(Token = "0x60033E0")]
		[Address(RVA = "0xABD9F8", Offset = "0xABD9F8", VA = "0xABD9F8", Slot = "7")]
		public int DestroyAudioGeometry(IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60033E1")]
		[Address(RVA = "0xABDA00", Offset = "0xABDA00", VA = "0xABDA00")]
		private static extern int ovrAudio_AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, UIntPtr verticesBytesOffset, UIntPtr vertexCount, UIntPtr vertexStride, ovrAudioScalarType vertexType, int[] indices, UIntPtr indicesByteOffset, UIntPtr indexCount, ovrAudioScalarType indexType, MeshGroup[] groups, UIntPtr groupCount);

		[Token(Token = "0x60033E2")]
		[Address(RVA = "0xABDB20", Offset = "0xABDB20", VA = "0xABDB20", Slot = "8")]
		public int AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, int vertexCount, int[] indices, int indexCount, MeshGroup[] groups, int groupCount)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60033E3")]
		[Address(RVA = "0xABDC18", Offset = "0xABDC18", VA = "0xABDC18")]
		private static extern int ovrAudio_AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4);

		[Token(Token = "0x60033E4")]
		[Address(RVA = "0xABDCB0", Offset = "0xABDCB0", VA = "0xABDCB0", Slot = "9")]
		public int AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60033E5")]
		[Address(RVA = "0xABDCBC", Offset = "0xABDCBC", VA = "0xABDCBC")]
		private static extern int ovrAudio_AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4);

		[Token(Token = "0x60033E6")]
		[Address(RVA = "0xABDDE8", Offset = "0xABDDE8", VA = "0xABDDE8", Slot = "10")]
		public int AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60033E7")]
		[Address(RVA = "0xABDDF4", Offset = "0xABDDF4", VA = "0xABDDF4")]
		private static extern int ovrAudio_AudioGeometryWriteMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x60033E8")]
		[Address(RVA = "0xABDEA0", Offset = "0xABDEA0", VA = "0xABDEA0", Slot = "11")]
		public int AudioGeometryWriteMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60033E9")]
		[Address(RVA = "0xABDEAC", Offset = "0xABDEAC", VA = "0xABDEAC")]
		private static extern int ovrAudio_AudioGeometryReadMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x60033EA")]
		[Address(RVA = "0xABDF58", Offset = "0xABDF58", VA = "0xABDF58", Slot = "12")]
		public int AudioGeometryReadMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60033EB")]
		[Address(RVA = "0xABDF64", Offset = "0xABDF64", VA = "0xABDF64")]
		private static extern int ovrAudio_AudioGeometryWriteMeshFileObj(IntPtr geometry, string filePath);

		[Token(Token = "0x60033EC")]
		[Address(RVA = "0xABE010", Offset = "0xABE010", VA = "0xABE010", Slot = "13")]
		public int AudioGeometryWriteMeshFileObj(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60033ED")]
		[Address(RVA = "0xABE01C", Offset = "0xABE01C", VA = "0xABE01C")]
		private static extern int ovrAudio_CreateAudioMaterial(IntPtr context, out IntPtr material);

		[Token(Token = "0x60033EE")]
		[Address(RVA = "0xABE0AC", Offset = "0xABE0AC", VA = "0xABE0AC", Slot = "15")]
		public int CreateAudioMaterial(out IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60033EF")]
		[Address(RVA = "0xABE0D0", Offset = "0xABE0D0", VA = "0xABE0D0")]
		private static extern int ovrAudio_DestroyAudioMaterial(IntPtr material);

		[Token(Token = "0x60033F0")]
		[Address(RVA = "0xABE150", Offset = "0xABE150", VA = "0xABE150", Slot = "16")]
		public int DestroyAudioMaterial(IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60033F1")]
		[Address(RVA = "0xABE158", Offset = "0xABE158", VA = "0xABE158")]
		private static extern int ovrAudio_AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value);

		[Token(Token = "0x60033F2")]
		[Address(RVA = "0xABE200", Offset = "0xABE200", VA = "0xABE200", Slot = "17")]
		public int AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60033F3")]
		[Address(RVA = "0xABE20C", Offset = "0xABE20C", VA = "0xABE20C")]
		private static extern int ovrAudio_AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value);

		[Token(Token = "0x60033F4")]
		[Address(RVA = "0xABE2B4", Offset = "0xABE2B4", VA = "0xABE2B4", Slot = "14")]
		public int AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60033F5")]
		[Address(RVA = "0xABE2C4", Offset = "0xABE2C4", VA = "0xABE2C4")]
		private static extern int ovrAudio_AudioMaterialReset(IntPtr material, MaterialProperty property);

		[Token(Token = "0x60033F6")]
		[Address(RVA = "0xABE354", Offset = "0xABE354", VA = "0xABE354", Slot = "18")]
		public int AudioMaterialReset(IntPtr material, MaterialProperty property)
		{
			return default(int);
		}

		[Token(Token = "0x60033F7")]
		[Address(RVA = "0xABBC1C", Offset = "0xABBC1C", VA = "0xABBC1C")]
		public WwisePluginInterface()
		{
		}
	}

	[Token(Token = "0x2000639")]
	public class FMODPluginInterface : PropagationInterface
	{
		[Token(Token = "0x40024DA")]
		public const string strOSPS = "OculusSpatializerFMOD";

		[Token(Token = "0x40024DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr context_;

		[Token(Token = "0x170006E1")]
		private IntPtr context
		{
			[Token(Token = "0x60033F8")]
			[Address(RVA = "0xABBDA0", Offset = "0xABBDA0", VA = "0xABBDA0")]
			get
			{
				return default(IntPtr);
			}
		}

		[PreserveSig]
		[Token(Token = "0x60033F9")]
		[Address(RVA = "0xABBC68", Offset = "0xABBC68", VA = "0xABBC68")]
		public static extern int ovrAudio_GetPluginContext(out IntPtr context, uint clientType);

		[PreserveSig]
		[Token(Token = "0x60033FA")]
		[Address(RVA = "0xABBE04", Offset = "0xABBE04", VA = "0xABBE04")]
		private static extern int ovrAudio_SetPropagationQuality(IntPtr context, float quality);

		[Token(Token = "0x60033FB")]
		[Address(RVA = "0xABBE94", Offset = "0xABBE94", VA = "0xABBE94", Slot = "4")]
		public int SetPropagationQuality(float quality)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60033FC")]
		[Address(RVA = "0xABBEB8", Offset = "0xABBEB8", VA = "0xABBEB8")]
		private static extern int ovrAudio_SetPropagationThreadAffinity(IntPtr context, ulong cpuMask);

		[Token(Token = "0x60033FD")]
		[Address(RVA = "0xABBF48", Offset = "0xABBF48", VA = "0xABBF48", Slot = "5")]
		public int SetPropagationThreadAffinity(ulong cpuMask)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60033FE")]
		[Address(RVA = "0xABBF6C", Offset = "0xABBF6C", VA = "0xABBF6C")]
		private static extern int ovrAudio_CreateAudioGeometry(IntPtr context, out IntPtr geometry);

		[Token(Token = "0x60033FF")]
		[Address(RVA = "0xABBFFC", Offset = "0xABBFFC", VA = "0xABBFFC", Slot = "6")]
		public int CreateAudioGeometry(out IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6003400")]
		[Address(RVA = "0xABC020", Offset = "0xABC020", VA = "0xABC020")]
		private static extern int ovrAudio_DestroyAudioGeometry(IntPtr geometry);

		[Token(Token = "0x6003401")]
		[Address(RVA = "0xABC0A0", Offset = "0xABC0A0", VA = "0xABC0A0", Slot = "7")]
		public int DestroyAudioGeometry(IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6003402")]
		[Address(RVA = "0xABC0A8", Offset = "0xABC0A8", VA = "0xABC0A8")]
		private static extern int ovrAudio_AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, UIntPtr verticesBytesOffset, UIntPtr vertexCount, UIntPtr vertexStride, ovrAudioScalarType vertexType, int[] indices, UIntPtr indicesByteOffset, UIntPtr indexCount, ovrAudioScalarType indexType, MeshGroup[] groups, UIntPtr groupCount);

		[Token(Token = "0x6003403")]
		[Address(RVA = "0xABC1C8", Offset = "0xABC1C8", VA = "0xABC1C8", Slot = "8")]
		public int AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, int vertexCount, int[] indices, int indexCount, MeshGroup[] groups, int groupCount)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6003404")]
		[Address(RVA = "0xABC2C0", Offset = "0xABC2C0", VA = "0xABC2C0")]
		private static extern int ovrAudio_AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4);

		[Token(Token = "0x6003405")]
		[Address(RVA = "0xABC358", Offset = "0xABC358", VA = "0xABC358", Slot = "9")]
		public int AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6003406")]
		[Address(RVA = "0xABC364", Offset = "0xABC364", VA = "0xABC364")]
		private static extern int ovrAudio_AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4);

		[Token(Token = "0x6003407")]
		[Address(RVA = "0xABC490", Offset = "0xABC490", VA = "0xABC490", Slot = "10")]
		public int AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6003408")]
		[Address(RVA = "0xABC49C", Offset = "0xABC49C", VA = "0xABC49C")]
		private static extern int ovrAudio_AudioGeometryWriteMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x6003409")]
		[Address(RVA = "0xABC548", Offset = "0xABC548", VA = "0xABC548", Slot = "11")]
		public int AudioGeometryWriteMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x600340A")]
		[Address(RVA = "0xABC554", Offset = "0xABC554", VA = "0xABC554")]
		private static extern int ovrAudio_AudioGeometryReadMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x600340B")]
		[Address(RVA = "0xABC600", Offset = "0xABC600", VA = "0xABC600", Slot = "12")]
		public int AudioGeometryReadMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x600340C")]
		[Address(RVA = "0xABC60C", Offset = "0xABC60C", VA = "0xABC60C")]
		private static extern int ovrAudio_AudioGeometryWriteMeshFileObj(IntPtr geometry, string filePath);

		[Token(Token = "0x600340D")]
		[Address(RVA = "0xABC6B8", Offset = "0xABC6B8", VA = "0xABC6B8", Slot = "13")]
		public int AudioGeometryWriteMeshFileObj(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x600340E")]
		[Address(RVA = "0xABC6C4", Offset = "0xABC6C4", VA = "0xABC6C4")]
		private static extern int ovrAudio_CreateAudioMaterial(IntPtr context, out IntPtr material);

		[Token(Token = "0x600340F")]
		[Address(RVA = "0xABC754", Offset = "0xABC754", VA = "0xABC754", Slot = "15")]
		public int CreateAudioMaterial(out IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6003410")]
		[Address(RVA = "0xABC778", Offset = "0xABC778", VA = "0xABC778")]
		private static extern int ovrAudio_DestroyAudioMaterial(IntPtr material);

		[Token(Token = "0x6003411")]
		[Address(RVA = "0xABC7F8", Offset = "0xABC7F8", VA = "0xABC7F8", Slot = "16")]
		public int DestroyAudioMaterial(IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6003412")]
		[Address(RVA = "0xABC800", Offset = "0xABC800", VA = "0xABC800")]
		private static extern int ovrAudio_AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value);

		[Token(Token = "0x6003413")]
		[Address(RVA = "0xABC8A8", Offset = "0xABC8A8", VA = "0xABC8A8", Slot = "17")]
		public int AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6003414")]
		[Address(RVA = "0xABC8B4", Offset = "0xABC8B4", VA = "0xABC8B4")]
		private static extern int ovrAudio_AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value);

		[Token(Token = "0x6003415")]
		[Address(RVA = "0xABC95C", Offset = "0xABC95C", VA = "0xABC95C", Slot = "14")]
		public int AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6003416")]
		[Address(RVA = "0xABC96C", Offset = "0xABC96C", VA = "0xABC96C")]
		private static extern int ovrAudio_AudioMaterialReset(IntPtr material, MaterialProperty property);

		[Token(Token = "0x6003417")]
		[Address(RVA = "0xABC9FC", Offset = "0xABC9FC", VA = "0xABC9FC", Slot = "18")]
		public int AudioMaterialReset(IntPtr material, MaterialProperty property)
		{
			return default(int);
		}

		[Token(Token = "0x6003418")]
		[Address(RVA = "0xABBCF8", Offset = "0xABBCF8", VA = "0xABBCF8")]
		public FMODPluginInterface()
		{
		}
	}

	[Token(Token = "0x4000510")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static PropagationInterface CachedInterface;

	[Token(Token = "0x17000034")]
	public static PropagationInterface Interface
	{
		[Token(Token = "0x6000427")]
		[Address(RVA = "0xABB8F4", Offset = "0xABB8F4", VA = "0xABB8F4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000428")]
	[Address(RVA = "0xABB964", Offset = "0xABB964", VA = "0xABB964")]
	private static PropagationInterface FindInterface()
	{
		return null;
	}

	[Token(Token = "0x6000429")]
	[Address(RVA = "0xABBD90", Offset = "0xABBD90", VA = "0xABBD90")]
	public ONSPPropagation()
	{
	}
}
[Token(Token = "0x20000CF")]
public sealed class ONSPPropagationMaterial : MonoBehaviour
{
	[Token(Token = "0x200063A")]
	public enum Preset
	{
		[Token(Token = "0x40024DD")]
		Custom,
		[Token(Token = "0x40024DE")]
		AcousticTile,
		[Token(Token = "0x40024DF")]
		Brick,
		[Token(Token = "0x40024E0")]
		BrickPainted,
		[Token(Token = "0x40024E1")]
		Carpet,
		[Token(Token = "0x40024E2")]
		CarpetHeavy,
		[Token(Token = "0x40024E3")]
		CarpetHeavyPadded,
		[Token(Token = "0x40024E4")]
		CeramicTile,
		[Token(Token = "0x40024E5")]
		Concrete,
		[Token(Token = "0x40024E6")]
		ConcreteRough,
		[Token(Token = "0x40024E7")]
		ConcreteBlock,
		[Token(Token = "0x40024E8")]
		ConcreteBlockPainted,
		[Token(Token = "0x40024E9")]
		Curtain,
		[Token(Token = "0x40024EA")]
		Foliage,
		[Token(Token = "0x40024EB")]
		Glass,
		[Token(Token = "0x40024EC")]
		GlassHeavy,
		[Token(Token = "0x40024ED")]
		Grass,
		[Token(Token = "0x40024EE")]
		Gravel,
		[Token(Token = "0x40024EF")]
		GypsumBoard,
		[Token(Token = "0x40024F0")]
		PlasterOnBrick,
		[Token(Token = "0x40024F1")]
		PlasterOnConcreteBlock,
		[Token(Token = "0x40024F2")]
		Soil,
		[Token(Token = "0x40024F3")]
		SoundProof,
		[Token(Token = "0x40024F4")]
		Snow,
		[Token(Token = "0x40024F5")]
		Steel,
		[Token(Token = "0x40024F6")]
		Water,
		[Token(Token = "0x40024F7")]
		WoodThin,
		[Token(Token = "0x40024F8")]
		WoodThick,
		[Token(Token = "0x40024F9")]
		WoodFloor,
		[Token(Token = "0x40024FA")]
		WoodOnConcrete
	}

	[Serializable]
	[Token(Token = "0x200063B")]
	public sealed class Point
	{
		[Token(Token = "0x40024FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float frequency;

		[Token(Token = "0x40024FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float data;

		[Token(Token = "0x6003419")]
		[Address(RVA = "0xF8DC5C", Offset = "0xF8DC5C", VA = "0xF8DC5C")]
		public Point(float frequency = 0f, float data = 0f)
		{
		}

		[Token(Token = "0x600341A")]
		[Address(RVA = "0xF8DDA4", Offset = "0xF8DDA4", VA = "0xF8DDA4")]
		public static implicit operator Point(Vector2 v)
		{
			return null;
		}

		[Token(Token = "0x600341B")]
		[Address(RVA = "0xF8DE14", Offset = "0xF8DE14", VA = "0xF8DE14")]
		public static implicit operator Vector2(Point point)
		{
			return default(Vector2);
		}
	}

	[Serializable]
	[Token(Token = "0x200063C")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x820C48", Offset = "0x820C48")]
	public sealed class Spectrum
	{
		[Serializable]
		[Token(Token = "0x2000770")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x821180", Offset = "0x821180")]
		private sealed class <>c
		{
			[Token(Token = "0x4002810")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4002811")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<Point, float> <>9__3_0;

			[Token(Token = "0x4002812")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<Point, float> <>9__3_1;

			[Token(Token = "0x6003768")]
			[Address(RVA = "0xF8E26C", Offset = "0xF8E26C", VA = "0xF8E26C")]
			public <>c()
			{
			}

			[Token(Token = "0x6003769")]
			[Address(RVA = "0xF8E274", Offset = "0xF8E274", VA = "0xF8E274")]
			internal float <get_Item>b__3_0(Point p)
			{
				return default(float);
			}

			[Token(Token = "0x600376A")]
			[Address(RVA = "0xF8E28C", Offset = "0xF8E28C", VA = "0xF8E28C")]
			internal float <get_Item>b__3_1(Point p)
			{
				return default(float);
			}
		}

		[Token(Token = "0x40024FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int selection;

		[Token(Token = "0x40024FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Point> points;

		[Token(Token = "0x170006E2")]
		public float Item
		{
			[Token(Token = "0x600341C")]
			[Address(RVA = "0xF8DE4C", Offset = "0xF8DE4C", VA = "0xF8DE4C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600341D")]
		[Address(RVA = "0xF8DD2C", Offset = "0xF8DD2C", VA = "0xF8DD2C")]
		public Spectrum()
		{
		}
	}

	[Token(Token = "0x4000511")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr materialHandle;

	[Token(Token = "0x4000512")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x822C60", Offset = "0x822C60")]
	public Spectrum absorption;

	[Token(Token = "0x4000513")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x822C98", Offset = "0x822C98")]
	public Spectrum transmission;

	[Token(Token = "0x4000514")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x822CD0", Offset = "0x822CD0")]
	public Spectrum scattering;

	[Token(Token = "0x4000515")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Preset preset_;

	[Token(Token = "0x17000035")]
	public Preset preset
	{
		[Token(Token = "0x600042A")]
		[Address(RVA = "0xF85B40", Offset = "0xF85B40", VA = "0xF85B40")]
		get
		{
			return default(Preset);
		}
		[Token(Token = "0x600042B")]
		[Address(RVA = "0xF85B48", Offset = "0xF85B48", VA = "0xF85B48")]
		set
		{
		}
	}

	[Token(Token = "0x600042C")]
	[Address(RVA = "0xF85D04", Offset = "0xF85D04", VA = "0xF85D04")]
	private void Start()
	{
	}

	[Token(Token = "0x600042D")]
	[Address(RVA = "0xF85D08", Offset = "0xF85D08", VA = "0xF85D08")]
	public void StartInternal()
	{
	}

	[Token(Token = "0x600042E")]
	[Address(RVA = "0xF8643C", Offset = "0xF8643C", VA = "0xF8643C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600042F")]
	[Address(RVA = "0xF86440", Offset = "0xF86440", VA = "0xF86440")]
	public void DestroyInternal()
	{
	}

	[Token(Token = "0x6000430")]
	[Address(RVA = "0xF85E78", Offset = "0xF85E78", VA = "0xF85E78")]
	public void UploadMaterial()
	{
	}

	[Token(Token = "0x6000431")]
	[Address(RVA = "0xF85B70", Offset = "0xF85B70", VA = "0xF85B70")]
	public void SetPreset(Preset preset)
	{
	}

	[Token(Token = "0x6000432")]
	[Address(RVA = "0xF86528", Offset = "0xF86528", VA = "0xF86528")]
	private static void AcousticTile(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000433")]
	[Address(RVA = "0xF86988", Offset = "0xF86988", VA = "0xF86988")]
	private static void Brick(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000434")]
	[Address(RVA = "0xF86DE8", Offset = "0xF86DE8", VA = "0xF86DE8")]
	private static void BrickPainted(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000435")]
	[Address(RVA = "0xF87248", Offset = "0xF87248", VA = "0xF87248")]
	private static void Carpet(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000436")]
	[Address(RVA = "0xF876A8", Offset = "0xF876A8", VA = "0xF876A8")]
	private static void CarpetHeavy(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000437")]
	[Address(RVA = "0xF87B08", Offset = "0xF87B08", VA = "0xF87B08")]
	private static void CarpetHeavyPadded(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000438")]
	[Address(RVA = "0xF87F68", Offset = "0xF87F68", VA = "0xF87F68")]
	private static void CeramicTile(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000439")]
	[Address(RVA = "0xF883C8", Offset = "0xF883C8", VA = "0xF883C8")]
	private static void Concrete(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x600043A")]
	[Address(RVA = "0xF88828", Offset = "0xF88828", VA = "0xF88828")]
	private static void ConcreteRough(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x600043B")]
	[Address(RVA = "0xF88C88", Offset = "0xF88C88", VA = "0xF88C88")]
	private static void ConcreteBlock(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x600043C")]
	[Address(RVA = "0xF890E8", Offset = "0xF890E8", VA = "0xF890E8")]
	private static void ConcreteBlockPainted(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x600043D")]
	[Address(RVA = "0xF89548", Offset = "0xF89548", VA = "0xF89548")]
	private static void Curtain(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x600043E")]
	[Address(RVA = "0xF899A8", Offset = "0xF899A8", VA = "0xF899A8")]
	private static void Foliage(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x600043F")]
	[Address(RVA = "0xF89E08", Offset = "0xF89E08", VA = "0xF89E08")]
	private static void Glass(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000440")]
	[Address(RVA = "0xF8A260", Offset = "0xF8A260", VA = "0xF8A260")]
	private static void GlassHeavy(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000441")]
	[Address(RVA = "0xF8A6C0", Offset = "0xF8A6C0", VA = "0xF8A6C0")]
	private static void Grass(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000442")]
	[Address(RVA = "0xF8A9FC", Offset = "0xF8A9FC", VA = "0xF8A9FC")]
	private static void Gravel(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000443")]
	[Address(RVA = "0xF8AD38", Offset = "0xF8AD38", VA = "0xF8AD38")]
	private static void GypsumBoard(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000444")]
	[Address(RVA = "0xF8B198", Offset = "0xF8B198", VA = "0xF8B198")]
	private static void PlasterOnBrick(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000445")]
	[Address(RVA = "0xF8B5F8", Offset = "0xF8B5F8", VA = "0xF8B5F8")]
	private static void PlasterOnConcreteBlock(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000446")]
	[Address(RVA = "0xF8BA58", Offset = "0xF8BA58", VA = "0xF8BA58")]
	private static void Soil(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000447")]
	[Address(RVA = "0xF8BD94", Offset = "0xF8BD94", VA = "0xF8BD94")]
	private static void SoundProof(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000448")]
	[Address(RVA = "0xF8BEF0", Offset = "0xF8BEF0", VA = "0xF8BEF0")]
	private static void Snow(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000449")]
	[Address(RVA = "0xF8C22C", Offset = "0xF8C22C", VA = "0xF8C22C")]
	private static void Steel(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x600044A")]
	[Address(RVA = "0xF8C684", Offset = "0xF8C684", VA = "0xF8C684")]
	private static void Water(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x600044B")]
	[Address(RVA = "0xF8CAE4", Offset = "0xF8CAE4", VA = "0xF8CAE4")]
	private static void WoodThin(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x600044C")]
	[Address(RVA = "0xF8CF3C", Offset = "0xF8CF3C", VA = "0xF8CF3C")]
	private static void WoodThick(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x600044D")]
	[Address(RVA = "0xF8D39C", Offset = "0xF8D39C", VA = "0xF8D39C")]
	private static void WoodFloor(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x600044E")]
	[Address(RVA = "0xF8D7FC", Offset = "0xF8D7FC", VA = "0xF8D7FC")]
	private static void WoodOnConcrete(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x600044F")]
	[Address(RVA = "0xF8DC94", Offset = "0xF8DC94", VA = "0xF8DC94")]
	public ONSPPropagationMaterial()
	{
	}
}
[Token(Token = "0x20000D0")]
public class ONSPPropagationSettings : MonoBehaviour
{
	[Token(Token = "0x4000516")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float quality;

	[Token(Token = "0x6000450")]
	[Address(RVA = "0xF8E2A4", Offset = "0xF8E2A4", VA = "0xF8E2A4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000451")]
	[Address(RVA = "0xF8E378", Offset = "0xF8E378", VA = "0xF8E378")]
	public ONSPPropagationSettings()
	{
	}
}
[Token(Token = "0x20000D1")]
public sealed class ONSPSettings : ScriptableObject
{
	[Token(Token = "0x4000517")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public int voiceLimit;

	[Token(Token = "0x4000518")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ONSPSettings instance;

	[Token(Token = "0x17000036")]
	public static ONSPSettings Instance
	{
		[Token(Token = "0x6000452")]
		[Address(RVA = "0xF8E934", Offset = "0xF8E934", VA = "0xF8E934")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000453")]
	[Address(RVA = "0xF8EA48", Offset = "0xF8EA48", VA = "0xF8EA48")]
	public ONSPSettings()
	{
	}
}
[Token(Token = "0x20000D2")]
public class ONSPVersion : MonoBehaviour
{
	[Token(Token = "0x4000519")]
	public const string strONSPS = "AudioPluginOculusSpatializer";

	[PreserveSig]
	[Token(Token = "0x6000454")]
	[Address(RVA = "0xF8EA58", Offset = "0xF8EA58", VA = "0xF8EA58")]
	private static extern void ONSP_GetVersion(ref int Major, ref int Minor, ref int Patch);

	[Token(Token = "0x6000455")]
	[Address(RVA = "0xF8EAF0", Offset = "0xF8EAF0", VA = "0xF8EAF0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000456")]
	[Address(RVA = "0xF8EBFC", Offset = "0xF8EBFC", VA = "0xF8EBFC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000457")]
	[Address(RVA = "0xF8EC00", Offset = "0xF8EC00", VA = "0xF8EC00")]
	private void Update()
	{
	}

	[Token(Token = "0x6000458")]
	[Address(RVA = "0xF8EC04", Offset = "0xF8EC04", VA = "0xF8EC04")]
	public ONSPVersion()
	{
	}
}
[Token(Token = "0x20000D3")]
public class OculusSpatializerUnity : MonoBehaviour
{
	[Token(Token = "0x200063D")]
	public delegate void AudioRaycastCallback(Vector3 origin, Vector3 direction, out Vector3 point, out Vector3 normal, IntPtr data);

	[Token(Token = "0x400051A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LayerMask layerMask;

	[Token(Token = "0x400051B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool visualizeRoom;

	[Token(Token = "0x400051C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	private bool roomVisualizationInitialized;

	[Token(Token = "0x400051D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int raysPerSecond;

	[Token(Token = "0x400051E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float roomInterpSpeed;

	[Token(Token = "0x400051F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float maxWallDistance;

	[Token(Token = "0x4000520")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int rayCacheSize;

	[Token(Token = "0x4000521")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool dynamicReflectionsEnabled;

	[Token(Token = "0x4000522")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float particleSize;

	[Token(Token = "0x4000523")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float particleOffset;

	[Token(Token = "0x4000524")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject room;

	[Token(Token = "0x4000525")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Renderer[] wallRenderer;

	[Token(Token = "0x4000526")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float[] dims;

	[Token(Token = "0x4000527")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float[] coefs;

	[Token(Token = "0x4000528")]
	private const int HIT_COUNT = 2048;

	[Token(Token = "0x4000529")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3[] points;

	[Token(Token = "0x400052A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3[] normals;

	[Token(Token = "0x400052B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private ParticleSystem sys;

	[Token(Token = "0x400052C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x400052D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static LayerMask gLayerMask;

	[Token(Token = "0x400052E")]
	private const string strOSP = "AudioPluginOculusSpatializer";

	[Token(Token = "0x6000459")]
	[Address(RVA = "0xE85EB8", Offset = "0xE85EB8", VA = "0xE85EB8")]
	private static Vector3 swapHandedness(Vector3 vec)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600045A")]
	[Address(RVA = "0xE85CE8", Offset = "0xE85CE8", VA = "0xE85CE8")]
	[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x82FE60", Offset = "0x82FE60")]
	private static void AudioRaycast(Vector3 origin, Vector3 direction, out Vector3 point, out Vector3 normal, IntPtr data)
	{
	}

	[Token(Token = "0x600045B")]
	[Address(RVA = "0xE85EF0", Offset = "0xE85EF0", VA = "0xE85EF0")]
	private void Start()
	{
	}

	[Token(Token = "0x600045C")]
	[Address(RVA = "0xE86024", Offset = "0xE86024", VA = "0xE86024")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600045D")]
	[Address(RVA = "0xE86118", Offset = "0xE86118", VA = "0xE86118")]
	private void Update()
	{
	}

	[Token(Token = "0x600045E")]
	[Address(RVA = "0xE86AD0", Offset = "0xE86AD0", VA = "0xE86AD0")]
	private void inititalizeRoomVisualization()
	{
	}

	[PreserveSig]
	[Token(Token = "0x600045F")]
	[Address(RVA = "0xE85F90", Offset = "0xE85F90", VA = "0xE85F90")]
	private static extern int OSP_Unity_AssignRaycastCallback(AudioRaycastCallback callback, IntPtr data);

	[PreserveSig]
	[Token(Token = "0x6000460")]
	[Address(RVA = "0xE86088", Offset = "0xE86088", VA = "0xE86088")]
	private static extern int OSP_Unity_AssignRaycastCallback(IntPtr callback, IntPtr data);

	[PreserveSig]
	[Token(Token = "0x6000461")]
	[Address(RVA = "0xE86838", Offset = "0xE86838", VA = "0xE86838")]
	private static extern int OSP_Unity_SetDynamicRoomRaysPerSecond(int RaysPerSecond);

	[PreserveSig]
	[Token(Token = "0x6000462")]
	[Address(RVA = "0xE868B8", Offset = "0xE868B8", VA = "0xE868B8")]
	private static extern int OSP_Unity_SetDynamicRoomInterpSpeed(float InterpSpeed);

	[PreserveSig]
	[Token(Token = "0x6000463")]
	[Address(RVA = "0xE86940", Offset = "0xE86940", VA = "0xE86940")]
	private static extern int OSP_Unity_SetDynamicRoomMaxWallDistance(float MaxWallDistance);

	[PreserveSig]
	[Token(Token = "0x6000464")]
	[Address(RVA = "0xE869C8", Offset = "0xE869C8", VA = "0xE869C8")]
	private static extern int OSP_Unity_SetDynamicRoomRaysRayCacheSize(int RayCacheSize);

	[PreserveSig]
	[Token(Token = "0x6000465")]
	[Address(RVA = "0xE86A48", Offset = "0xE86A48", VA = "0xE86A48")]
	private static extern int OSP_Unity_UpdateRoomModel(float wetLevel);

	[PreserveSig]
	[Token(Token = "0x6000466")]
	[Address(RVA = "0xE87908", Offset = "0xE87908", VA = "0xE87908")]
	private static extern int OSP_Unity_GetRoomDimensions(float[] roomDimensions, float[] reflectionsCoefs, out Vector3 position);

	[PreserveSig]
	[Token(Token = "0x6000467")]
	[Address(RVA = "0xE879B0", Offset = "0xE879B0", VA = "0xE879B0")]
	private static extern int OSP_Unity_GetRaycastHits(Vector3[] points, Vector3[] normals, int length);

	[Token(Token = "0x6000468")]
	[Address(RVA = "0xE87A58", Offset = "0xE87A58", VA = "0xE87A58")]
	public OculusSpatializerUnity()
	{
	}
}
[Token(Token = "0x20000D4")]
public struct ReflectionSnapshot
{
	[Token(Token = "0x400052F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public AudioMixerSnapshot mixerSnapshot;

	[Token(Token = "0x4000530")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float fadeTime;
}
[Token(Token = "0x20000D5")]
public class ONSPReflectionZone : MonoBehaviour
{
	[Token(Token = "0x4000531")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioMixerSnapshot mixerSnapshot;

	[Token(Token = "0x4000532")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float fadeTime;

	[Token(Token = "0x4000533")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Stack<ReflectionSnapshot> snapshotList;

	[Token(Token = "0x4000534")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static ReflectionSnapshot currentSnapshot;

	[Token(Token = "0x600046A")]
	[Address(RVA = "0xF8E388", Offset = "0xF8E388", VA = "0xF8E388")]
	private void Start()
	{
	}

	[Token(Token = "0x600046B")]
	[Address(RVA = "0xF8E38C", Offset = "0xF8E38C", VA = "0xF8E38C")]
	private void Update()
	{
	}

	[Token(Token = "0x600046C")]
	[Address(RVA = "0xF8E390", Offset = "0xF8E390", VA = "0xF8E390")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600046D")]
	[Address(RVA = "0xF8E4F8", Offset = "0xF8E4F8", VA = "0xF8E4F8")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600046E")]
	[Address(RVA = "0xF8E3DC", Offset = "0xF8E3DC", VA = "0xF8E3DC")]
	private bool CheckForAudioListener(GameObject gameObject)
	{
		return default(bool);
	}

	[Token(Token = "0x600046F")]
	[Address(RVA = "0xF8E46C", Offset = "0xF8E46C", VA = "0xF8E46C")]
	private void PushCurrentMixerShapshot()
	{
	}

	[Token(Token = "0x6000470")]
	[Address(RVA = "0xF8E544", Offset = "0xF8E544", VA = "0xF8E544")]
	private void PopCurrentMixerSnapshot()
	{
	}

	[Token(Token = "0x6000471")]
	[Address(RVA = "0xF8E5DC", Offset = "0xF8E5DC", VA = "0xF8E5DC")]
	private void SetReflectionValues()
	{
	}

	[Token(Token = "0x6000472")]
	[Address(RVA = "0xF8E744", Offset = "0xF8E744", VA = "0xF8E744")]
	private void SetReflectionValues(ref ReflectionSnapshot mss)
	{
	}

	[Token(Token = "0x6000473")]
	[Address(RVA = "0xF8E8AC", Offset = "0xF8E8AC", VA = "0xF8E8AC")]
	public ONSPReflectionZone()
	{
	}
}
[Token(Token = "0x20000D6")]
public class DebugShow : MonoBehaviour
{
	[Token(Token = "0x4000535")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool Log;

	[Token(Token = "0x4000536")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public KeyCode keyOpenLog;

	[Token(Token = "0x4000537")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector2 m_scroll;

	[Token(Token = "0x4000538")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GUIStyle labelStyle;

	[Token(Token = "0x4000539")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text txt;

	[Token(Token = "0x400053A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private string m_logs;

	[Token(Token = "0x17000037")]
	public string Logs
	{
		[Token(Token = "0x6000477")]
		[Address(RVA = "0xA52D8C", Offset = "0xA52D8C", VA = "0xA52D8C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000478")]
		[Address(RVA = "0xA52D94", Offset = "0xA52D94", VA = "0xA52D94")]
		set
		{
		}
	}

	[Token(Token = "0x6000475")]
	[Address(RVA = "0xA52CA4", Offset = "0xA52CA4", VA = "0xA52CA4")]
	internal void OnEnable()
	{
	}

	[Token(Token = "0x6000476")]
	[Address(RVA = "0xA52D18", Offset = "0xA52D18", VA = "0xA52D18")]
	internal void OnDisable()
	{
	}

	[Token(Token = "0x6000479")]
	[Address(RVA = "0xA52DC0", Offset = "0xA52DC0", VA = "0xA52DC0")]
	private void HandleLog(string logString, string stackTrace, LogType type)
	{
	}

	[Token(Token = "0x600047A")]
	[Address(RVA = "0xA5326C", Offset = "0xA5326C", VA = "0xA5326C")]
	public void CleanLog()
	{
	}

	[Token(Token = "0x600047B")]
	[Address(RVA = "0xA532D4", Offset = "0xA532D4", VA = "0xA532D4")]
	private void Update()
	{
	}

	[Token(Token = "0x600047C")]
	[Address(RVA = "0xA532D8", Offset = "0xA532D8", VA = "0xA532D8")]
	public DebugShow()
	{
	}
}
[Token(Token = "0x20000D7")]
public static class GameObjectEx
{
	[Token(Token = "0x600047D")]
	public static T GetInterface<T>(this GameObject inObj) where T : class
	{
		return null;
	}

	[Token(Token = "0x600047E")]
	public static IEnumerable<T> GetInterfaces<T>(this GameObject inObj) where T : class
	{
		return null;
	}
}
[Token(Token = "0x20000D8")]
public interface IResetOfPool
{
	[Token(Token = "0x600047F")]
	void OnReset();
}
[Token(Token = "0x20000D9")]
public class ObjectPool : MonoBehaviour
{
	[Token(Token = "0x200063E")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820C80", Offset = "0x820C80")]
	private sealed class <ExecutePut>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40024FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4002500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4002501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float t;

		[Token(Token = "0x4002502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject go;

		[Token(Token = "0x4002503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ObjectPool <>4__this;

		[Token(Token = "0x170006E3")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6003425")]
			[Address(RVA = "0xB8F9E0", Offset = "0xB8F9E0", VA = "0xB8F9E0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006E4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6003427")]
			[Address(RVA = "0xB8FA48", Offset = "0xB8FA48", VA = "0xB8FA48", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003422")]
		[Address(RVA = "0xB8F650", Offset = "0xB8F650", VA = "0xB8F650")]
		[DebuggerHidden]
		public <ExecutePut>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x6003423")]
		[Address(RVA = "0xB8F84C", Offset = "0xB8F84C", VA = "0xB8F84C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6003424")]
		[Address(RVA = "0xB8F850", Offset = "0xB8F850", VA = "0xB8F850", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6003426")]
		[Address(RVA = "0xB8F9E8", Offset = "0xB8F9E8", VA = "0xB8F9E8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400053B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ObjectPool me;

	[Token(Token = "0x400053C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<string, Queue<GameObject>> pool;

	[Token(Token = "0x400053D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int maxCount;

	[Token(Token = "0x17000038")]
	public int MaxCount
	{
		[Token(Token = "0x6000480")]
		[Address(RVA = "0xB8F054", Offset = "0xB8F054", VA = "0xB8F054")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000481")]
		[Address(RVA = "0xB8F05C", Offset = "0xB8F05C", VA = "0xB8F05C")]
		set
		{
		}
	}

	[Token(Token = "0x6000482")]
	[Address(RVA = "0xB8F0E0", Offset = "0xB8F0E0", VA = "0xB8F0E0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000483")]
	[Address(RVA = "0xB8F15C", Offset = "0xB8F15C", VA = "0xB8F15C")]
	public GameObject GetObject(Transform go, Vector3 position, Quaternion rotation)
	{
		return null;
	}

	[Token(Token = "0x6000484")]
	[Address(RVA = "0xB8F1EC", Offset = "0xB8F1EC", VA = "0xB8F1EC")]
	public GameObject GetObject(GameObject go, Vector3 position, Quaternion rotation)
	{
		return null;
	}

	[Token(Token = "0x6000485")]
	[Address(RVA = "0xB8F494", Offset = "0xB8F494", VA = "0xB8F494")]
	public void PutObject(GameObject go, float t = 0f)
	{
	}

	[Token(Token = "0x6000486")]
	[Address(RVA = "0xB8F5C4", Offset = "0xB8F5C4", VA = "0xB8F5C4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x82FEE4", Offset = "0x82FEE4")]
	private IEnumerator ExecutePut(GameObject go, float t)
	{
		return null;
	}

	[Token(Token = "0x6000487")]
	[Address(RVA = "0xB8F67C", Offset = "0xB8F67C", VA = "0xB8F67C")]
	public void Preload(GameObject go, int number)
	{
	}

	[Token(Token = "0x6000488")]
	[Address(RVA = "0xB8F83C", Offset = "0xB8F83C", VA = "0xB8F83C")]
	public ObjectPool()
	{
	}
}
[Token(Token = "0x20000DA")]
public class JsonNetSample : MonoBehaviour
{
	[Token(Token = "0x200063F")]
	public class Product
	{
		[Token(Token = "0x4002504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x4002505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DateTime ExpiryDate;

		[Token(Token = "0x4002506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public decimal Price;

		[Token(Token = "0x4002507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string[] Sizes;

		[Token(Token = "0x6003428")]
		[Address(RVA = "0xAAE8B0", Offset = "0xAAE8B0", VA = "0xAAE8B0", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6003429")]
		[Address(RVA = "0xAAEA00", Offset = "0xAAEA00", VA = "0xAAEA00", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600342A")]
		[Address(RVA = "0xAAE780", Offset = "0xAAE780", VA = "0xAAE780")]
		public Product()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000640")]
	public class CharacterListItem
	{
		[Token(Token = "0x4002508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82DCA4", Offset = "0x82DCA4")]
		private int <Id>k__BackingField;

		[Token(Token = "0x4002509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82DCB4", Offset = "0x82DCB4")]
		private string <Name>k__BackingField;

		[Token(Token = "0x400250A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82DCC4", Offset = "0x82DCC4")]
		private int <Level>k__BackingField;

		[Token(Token = "0x400250B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82DCD4", Offset = "0x82DCD4")]
		private string <Class>k__BackingField;

		[Token(Token = "0x400250C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82DCE4", Offset = "0x82DCE4")]
		private string <Sex>k__BackingField;

		[Token(Token = "0x170006E5")]
		public int Id
		{
			[Token(Token = "0x600342B")]
			[Address(RVA = "0xAAE7EC", Offset = "0xAAE7EC", VA = "0xAAE7EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x835280", Offset = "0x835280")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600342C")]
			[Address(RVA = "0xAAE7F4", Offset = "0xAAE7F4", VA = "0xAAE7F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x835290", Offset = "0x835290")]
			set
			{
			}
		}

		[Token(Token = "0x170006E6")]
		public string Name
		{
			[Token(Token = "0x600342D")]
			[Address(RVA = "0xAAE7FC", Offset = "0xAAE7FC", VA = "0xAAE7FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8352A0", Offset = "0x8352A0")]
			get
			{
				return null;
			}
			[Token(Token = "0x600342E")]
			[Address(RVA = "0xAAE804", Offset = "0xAAE804", VA = "0xAAE804")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8352B0", Offset = "0x8352B0")]
			set
			{
			}
		}

		[Token(Token = "0x170006E7")]
		public int Level
		{
			[Token(Token = "0x600342F")]
			[Address(RVA = "0xAAE80C", Offset = "0xAAE80C", VA = "0xAAE80C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8352C0", Offset = "0x8352C0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6003430")]
			[Address(RVA = "0xAAE814", Offset = "0xAAE814", VA = "0xAAE814")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8352D0", Offset = "0x8352D0")]
			set
			{
			}
		}

		[Token(Token = "0x170006E8")]
		public string Class
		{
			[Token(Token = "0x6003431")]
			[Address(RVA = "0xAAE81C", Offset = "0xAAE81C", VA = "0xAAE81C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8352E0", Offset = "0x8352E0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6003432")]
			[Address(RVA = "0xAAE824", Offset = "0xAAE824", VA = "0xAAE824")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8352F0", Offset = "0x8352F0")]
			set
			{
			}
		}

		[Token(Token = "0x170006E9")]
		public string Sex
		{
			[Token(Token = "0x6003433")]
			[Address(RVA = "0xAAE82C", Offset = "0xAAE82C", VA = "0xAAE82C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x835300", Offset = "0x835300")]
			get
			{
				return null;
			}
			[Token(Token = "0x6003434")]
			[Address(RVA = "0xAAE834", Offset = "0xAAE834", VA = "0xAAE834")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x835310", Offset = "0x835310")]
			set
			{
			}
		}

		[Token(Token = "0x6003435")]
		[Address(RVA = "0xAAE83C", Offset = "0xAAE83C", VA = "0xAAE83C")]
		public CharacterListItem()
		{
		}
	}

	[Token(Token = "0x2000641")]
	public class Movie
	{
		[Token(Token = "0x400250D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82DCF4", Offset = "0x82DCF4")]
		private string <Name>k__BackingField;

		[Token(Token = "0x400250E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82DD04", Offset = "0x82DD04")]
		private string <Description>k__BackingField;

		[Token(Token = "0x400250F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82DD14", Offset = "0x82DD14")]
		private string <Classification>k__BackingField;

		[Token(Token = "0x4002510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82DD24", Offset = "0x82DD24")]
		private string <Studio>k__BackingField;

		[Token(Token = "0x4002511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82DD34", Offset = "0x82DD34")]
		private DateTime? <ReleaseDate>k__BackingField;

		[Token(Token = "0x4002512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82DD44", Offset = "0x82DD44")]
		private List<string> <ReleaseCountries>k__BackingField;

		[Token(Token = "0x170006EA")]
		public string Name
		{
			[Token(Token = "0x6003436")]
			[Address(RVA = "0xAAE844", Offset = "0xAAE844", VA = "0xAAE844")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x835320", Offset = "0x835320")]
			get
			{
				return null;
			}
			[Token(Token = "0x6003437")]
			[Address(RVA = "0xAAE84C", Offset = "0xAAE84C", VA = "0xAAE84C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x835330", Offset = "0x835330")]
			set
			{
			}
		}

		[Token(Token = "0x170006EB")]
		public string Description
		{
			[Token(Token = "0x6003438")]
			[Address(RVA = "0xAAE854", Offset = "0xAAE854", VA = "0xAAE854")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x835340", Offset = "0x835340")]
			get
			{
				return null;
			}
			[Token(Token = "0x6003439")]
			[Address(RVA = "0xAAE85C", Offset = "0xAAE85C", VA = "0xAAE85C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x835350", Offset = "0x835350")]
			set
			{
			}
		}

		[Token(Token = "0x170006EC")]
		public string Classification
		{
			[Token(Token = "0x600343A")]
			[Address(RVA = "0xAAE864", Offset = "0xAAE864", VA = "0xAAE864")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x835360", Offset = "0x835360")]
			get
			{
				return null;
			}
			[Token(Token = "0x600343B")]
			[Address(RVA = "0xAAE86C", Offset = "0xAAE86C", VA = "0xAAE86C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x835370", Offset = "0x835370")]
			set
			{
			}
		}

		[Token(Token = "0x170006ED")]
		public string Studio
		{
			[Token(Token = "0x600343C")]
			[Address(RVA = "0xAAE874", Offset = "0xAAE874", VA = "0xAAE874")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x835380", Offset = "0x835380")]
			get
			{
				return null;
			}
			[Token(Token = "0x600343D")]
			[Address(RVA = "0xAAE87C", Offset = "0xAAE87C", VA = "0xAAE87C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x835390", Offset = "0x835390")]
			set
			{
			}
		}

		[Token(Token = "0x170006EE")]
		public DateTime? ReleaseDate
		{
			[Token(Token = "0x600343E")]
			[Address(RVA = "0xAAE884", Offset = "0xAAE884", VA = "0xAAE884")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8353A0", Offset = "0x8353A0")]
			get
			{
				return null;
			}
			[Token(Token = "0x600343F")]
			[Address(RVA = "0xAAE890", Offset = "0xAAE890", VA = "0xAAE890")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8353B0", Offset = "0x8353B0")]
			set
			{
			}
		}

		[Token(Token = "0x170006EF")]
		public List<string> ReleaseCountries
		{
			[Token(Token = "0x6003440")]
			[Address(RVA = "0xAAE898", Offset = "0xAAE898", VA = "0xAAE898")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8353C0", Offset = "0x8353C0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6003441")]
			[Address(RVA = "0xAAE8A0", Offset = "0xAAE8A0", VA = "0xAAE8A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8353D0", Offset = "0x8353D0")]
			set
			{
			}
		}

		[Token(Token = "0x6003442")]
		[Address(RVA = "0xAAE8A8", Offset = "0xAAE8A8", VA = "0xAAE8A8")]
		public Movie()
		{
		}
	}

	[Token(Token = "0x400053E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text Output;

	[Token(Token = "0x6000489")]
	[Address(RVA = "0xAADF30", Offset = "0xAADF30", VA = "0xAADF30")]
	private void Start()
	{
	}

	[Token(Token = "0x600048A")]
	[Address(RVA = "0xAAE6E8", Offset = "0xAAE6E8", VA = "0xAAE6E8")]
	private void WriteLine(string msg)
	{
	}

	[Token(Token = "0x600048B")]
	[Address(RVA = "0xAADFD0", Offset = "0xAADFD0", VA = "0xAADFD0")]
	private void TestJson()
	{
	}

	[Token(Token = "0x600048C")]
	[Address(RVA = "0xAAE0B4", Offset = "0xAAE0B4", VA = "0xAAE0B4")]
	private void SerailizeJson()
	{
	}

	[Token(Token = "0x600048D")]
	[Address(RVA = "0xAAE20C", Offset = "0xAAE20C", VA = "0xAAE20C")]
	private void DeserializeJson()
	{
	}

	[Token(Token = "0x600048E")]
	[Address(RVA = "0xAAE2AC", Offset = "0xAAE2AC", VA = "0xAAE2AC")]
	private void LinqToJson()
	{
	}

	[Token(Token = "0x600048F")]
	[Address(RVA = "0xAAE400", Offset = "0xAAE400", VA = "0xAAE400")]
	private void JsonPath()
	{
	}

	[Token(Token = "0x6000490")]
	[Address(RVA = "0xAAE7E4", Offset = "0xAAE7E4", VA = "0xAAE7E4")]
	public JsonNetSample()
	{
	}
}
namespace IngameDebugConsole
{
	[Token(Token = "0x20000DB")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x81EF3C", Offset = "0x81EF3C")]
	public class CircularBuffer<T>
	{
		[Token(Token = "0x400053F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T[] arr;

		[Token(Token = "0x4000540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int index;

		[Token(Token = "0x4000541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x822D28", Offset = "0x822D28")]
		private int <Count>k__BackingField;

		[Token(Token = "0x17000039")]
		public T Item
		{
			[Token(Token = "0x6000491")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x1700003A")]
		public int Count
		{
			[Token(Token = "0x6000492")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82FF48", Offset = "0x82FF48")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000493")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82FF58", Offset = "0x82FF58")]
			private set
			{
			}
		}

		[Token(Token = "0x6000494")]
		public CircularBuffer(int capacity)
		{
		}

		[Token(Token = "0x6000495")]
		public void Add(T value)
		{
		}
	}
	[Token(Token = "0x20000DC")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x81EF74", Offset = "0x81EF74")]
	public class ConsoleMethodAttribute : Attribute
	{
		[Token(Token = "0x4000542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string m_command;

		[Token(Token = "0x4000543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string m_description;

		[Token(Token = "0x1700003B")]
		public string Command
		{
			[Token(Token = "0x6000496")]
			[Address(RVA = "0xC1F0AC", Offset = "0xC1F0AC", VA = "0xC1F0AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003C")]
		public string Description
		{
			[Token(Token = "0x6000497")]
			[Address(RVA = "0xC1F0B4", Offset = "0xC1F0B4", VA = "0xC1F0B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000498")]
		[Address(RVA = "0xC1F0BC", Offset = "0xC1F0BC", VA = "0xC1F0BC")]
		public ConsoleMethodAttribute(string command, string description)
		{
		}
	}
	[Token(Token = "0x20000DD")]
	public class ConsoleMethodInfo
	{
		[Token(Token = "0x4000544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly MethodInfo method;

		[Token(Token = "0x4000545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly Type[] parameterTypes;

		[Token(Token = "0x4000546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly object instance;

		[Token(Token = "0x4000547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly string signature;

		[Token(Token = "0x6000499")]
		[Address(RVA = "0xC1F0F4", Offset = "0xC1F0F4", VA = "0xC1F0F4")]
		public ConsoleMethodInfo(MethodInfo method, Type[] parameterTypes, object instance, string signature)
		{
		}

		[Token(Token = "0x600049A")]
		[Address(RVA = "0xC1F140", Offset = "0xC1F140", VA = "0xC1F140")]
		public bool IsValid()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20000DE")]
	public static class DebugLogConsole
	{
		[Token(Token = "0x2000642")]
		public delegate bool ParseFunction(string input, out object output);

		[Token(Token = "0x4000548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<string, ConsoleMethodInfo> methods;

		[Token(Token = "0x4000549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Dictionary<Type, ParseFunction> parseFunctions;

		[Token(Token = "0x400054A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Dictionary<Type, string> typeReadableNames;

		[Token(Token = "0x400054B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static List<string> commandArguments;

		[Token(Token = "0x400054C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly string[] inputDelimiters;

		[Token(Token = "0x600049B")]
		[Address(RVA = "0xC1F19C", Offset = "0xC1F19C", VA = "0xC1F19C")]
		static DebugLogConsole()
		{
		}

		[Token(Token = "0x600049C")]
		[Address(RVA = "0xC206F4", Offset = "0xC206F4", VA = "0xC206F4")]
		public static void LogAllCommands()
		{
		}

		[Token(Token = "0x600049D")]
		[Address(RVA = "0xC209F4", Offset = "0xC209F4", VA = "0xC209F4")]
		public static void LogSystemInfo()
		{
		}

		[Token(Token = "0x600049E")]
		[Address(RVA = "0xC21180", Offset = "0xC21180", VA = "0xC21180")]
		private static StringBuilder AppendSysInfoIfPresent(this StringBuilder sb, string info, [Optional] string postfix)
		{
			return null;
		}

		[Token(Token = "0x600049F")]
		[Address(RVA = "0xC21234", Offset = "0xC21234", VA = "0xC21234")]
		private static StringBuilder AppendSysInfoIfPresent(this StringBuilder sb, int info, [Optional] string postfix)
		{
			return null;
		}

		[Token(Token = "0x60004A0")]
		[Address(RVA = "0xC212D4", Offset = "0xC212D4", VA = "0xC212D4")]
		public static void AddCommandInstance(string command, string description, string methodName, object instance)
		{
		}

		[Token(Token = "0x60004A1")]
		[Address(RVA = "0xC20664", Offset = "0xC20664", VA = "0xC20664")]
		public static void AddCommandStatic(string command, string description, string methodName, Type ownerType)
		{
		}

		[Token(Token = "0x60004A2")]
		[Address(RVA = "0xC21564", Offset = "0xC21564", VA = "0xC21564")]
		public static void RemoveCommand(string command)
		{
		}

		[Token(Token = "0x60004A3")]
		[Address(RVA = "0xC21604", Offset = "0xC21604", VA = "0xC21604")]
		public static string GetAutoCompleteCommand(string commandStart)
		{
			return null;
		}

		[Token(Token = "0x60004A4")]
		[Address(RVA = "0xC213C0", Offset = "0xC213C0", VA = "0xC213C0")]
		private static void AddCommand(string command, string description, string methodName, Type ownerType, [Optional] object instance)
		{
		}

		[Token(Token = "0x60004A5")]
		[Address(RVA = "0xC20134", Offset = "0xC20134", VA = "0xC20134")]
		private static void AddCommand(string command, string description, MethodInfo method, [Optional] object instance)
		{
		}

		[Token(Token = "0x60004A6")]
		[Address(RVA = "0xC21750", Offset = "0xC21750", VA = "0xC21750")]
		public static void ExecuteCommand(string command)
		{
		}

		[Token(Token = "0x60004A7")]
		[Address(RVA = "0xC21FD4", Offset = "0xC21FD4", VA = "0xC21FD4")]
		private static int IndexOfDelimiter(char c)
		{
			return default(int);
		}

		[Token(Token = "0x60004A8")]
		[Address(RVA = "0xC21FA0", Offset = "0xC21FA0", VA = "0xC21FA0")]
		private static int IndexOfChar(string command, char c, int startIndex)
		{
			return default(int);
		}

		[Token(Token = "0x60004A9")]
		[Address(RVA = "0xC224C4", Offset = "0xC224C4", VA = "0xC224C4")]
		private static bool ParseString(string input, out object output)
		{
			return default(bool);
		}

		[Token(Token = "0x60004AA")]
		[Address(RVA = "0xC224E8", Offset = "0xC224E8", VA = "0xC224E8")]
		private static bool ParseBool(string input, out object output)
		{
			return default(bool);
		}

		[Token(Token = "0x60004AB")]
		[Address(RVA = "0xC2262C", Offset = "0xC2262C", VA = "0xC2262C")]
		private static bool ParseInt(string input, out object output)
		{
			return default(bool);
		}

		[Token(Token = "0x60004AC")]
		[Address(RVA = "0xC226B8", Offset = "0xC226B8", VA = "0xC226B8")]
		private static bool ParseUInt(string input, out object output)
		{
			return default(bool);
		}

		[Token(Token = "0x60004AD")]
		[Address(RVA = "0xC22744", Offset = "0xC22744", VA = "0xC22744")]
		private static bool ParseLong(string input, out object output)
		{
			return default(bool);
		}

		[Token(Token = "0x60004AE")]
		[Address(RVA = "0xC227D8", Offset = "0xC227D8", VA = "0xC227D8")]
		private static bool ParseULong(string input, out object output)
		{
			return default(bool);
		}

		[Token(Token = "0x60004AF")]
		[Address(RVA = "0xC2286C", Offset = "0xC2286C", VA = "0xC2286C")]
		private static bool ParseByte(string input, out object output)
		{
			return default(bool);
		}

		[Token(Token = "0x60004B0")]
		[Address(RVA = "0xC228F8", Offset = "0xC228F8", VA = "0xC228F8")]
		private static bool ParseSByte(string input, out object output)
		{
			return default(bool);
		}

		[Token(Token = "0x60004B1")]
		[Address(RVA = "0xC22984", Offset = "0xC22984", VA = "0xC22984")]
		private static bool ParseShort(string input, out object output)
		{
			return default(bool);
		}

		[Token(Token = "0x60004B2")]
		[Address(RVA = "0xC22A10", Offset = "0xC22A10", VA = "0xC22A10")]
		private static bool ParseUShort(string input, out object output)
		{
			return default(bool);
		}

		[Token(Token = "0x60004B3")]
		[Address(RVA = "0xC22A9C", Offset = "0xC22A9C", VA = "0xC22A9C")]
		private static bool ParseChar(string input, out object output)
		{
			return default(bool);
		}

		[Token(Token = "0x60004B4")]
		[Address(RVA = "0xC22B40", Offset = "0xC22B40", VA = "0xC22B40")]
		private static bool ParseFloat(string input, out object output)
		{
			return default(bool);
		}

		[Token(Token = "0x60004B5")]
		[Address(RVA = "0xC22BCC", Offset = "0xC22BCC", VA = "0xC22BCC")]
		private static bool ParseDouble(string input, out object output)
		{
			return default(bool);
		}

		[Token(Token = "0x60004B6")]
		[Address(RVA = "0xC22C78", Offset = "0xC22C78", VA = "0xC22C78")]
		private static bool ParseDecimal(string input, out object output)
		{
			return default(bool);
		}

		[Token(Token = "0x60004B7")]
		[Address(RVA = "0xC22D24", Offset = "0xC22D24", VA = "0xC22D24")]
		private static bool ParseVector2(string input, out object output)
		{
			return default(bool);
		}

		[Token(Token = "0x60004B8")]
		[Address(RVA = "0xC23388", Offset = "0xC23388", VA = "0xC23388")]
		private static bool ParseVector3(string input, out object output)
		{
			return default(bool);
		}

		[Token(Token = "0x60004B9")]
		[Address(RVA = "0xC23440", Offset = "0xC23440", VA = "0xC23440")]
		private static bool ParseVector4(string input, out object output)
		{
			return default(bool);
		}

		[Token(Token = "0x60004BA")]
		[Address(RVA = "0xC234F8", Offset = "0xC234F8", VA = "0xC234F8")]
		private static bool ParseGameObject(string input, out object output)
		{
			return default(bool);
		}

		[Token(Token = "0x60004BB")]
		[Address(RVA = "0xC22DDC", Offset = "0xC22DDC", VA = "0xC22DDC")]
		private static bool CreateVectorFromInput(string input, Type vectorType, out object output)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20000DF")]
	public class DebugLogEntry : IEquatable<DebugLogEntry>
	{
		[Token(Token = "0x400054D")]
		private const int HASH_NOT_CALCULATED = -623218;

		[Token(Token = "0x400054E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string logString;

		[Token(Token = "0x400054F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string stackTrace;

		[Token(Token = "0x4000550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string completeLog;

		[Token(Token = "0x4000551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Sprite logTypeSpriteRepresentation;

		[Token(Token = "0x4000552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int count;

		[Token(Token = "0x4000553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int hashValue;

		[Token(Token = "0x60004BC")]
		[Address(RVA = "0xC23594", Offset = "0xC23594", VA = "0xC23594")]
		public DebugLogEntry(string logString, string stackTrace, Sprite sprite)
		{
		}

		[Token(Token = "0x60004BD")]
		[Address(RVA = "0xC235E8", Offset = "0xC235E8", VA = "0xC235E8", Slot = "4")]
		public bool Equals(DebugLogEntry other)
		{
			return default(bool);
		}

		[Token(Token = "0x60004BE")]
		[Address(RVA = "0xC23640", Offset = "0xC23640", VA = "0xC23640", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60004BF")]
		[Address(RVA = "0xC236A4", Offset = "0xC236A4", VA = "0xC236A4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20000E0")]
	public struct QueuedDebugLogEntry
	{
		[Token(Token = "0x4000554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly string logString;

		[Token(Token = "0x4000555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string stackTrace;

		[Token(Token = "0x4000556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly LogType logType;

		[Token(Token = "0x60004C0")]
		[Address(RVA = "0x8C52E4", Offset = "0x8C52E4", VA = "0x8C52E4")]
		public QueuedDebugLogEntry(string logString, string stackTrace, LogType logType)
		{
		}
	}
	[Token(Token = "0x20000E1")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x81EFBC", Offset = "0x81EFBC")]
	public class DebugLogIndexList
	{
		[Token(Token = "0x4000557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int[] indices;

		[Token(Token = "0x4000558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int size;

		[Token(Token = "0x1700003D")]
		public int Count
		{
			[Token(Token = "0x60004C1")]
			[Address(RVA = "0xC23794", Offset = "0xC23794", VA = "0xC23794")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700003E")]
		public int Item
		{
			[Token(Token = "0x60004C2")]
			[Address(RVA = "0xC2379C", Offset = "0xC2379C", VA = "0xC2379C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60004C3")]
		[Address(RVA = "0xC237D8", Offset = "0xC237D8", VA = "0xC237D8")]
		public DebugLogIndexList()
		{
		}

		[Token(Token = "0x60004C4")]
		[Address(RVA = "0xC23840", Offset = "0xC23840", VA = "0xC23840")]
		public void Add(int index)
		{
		}

		[Token(Token = "0x60004C5")]
		[Address(RVA = "0xC2391C", Offset = "0xC2391C", VA = "0xC2391C")]
		public void Clear()
		{
		}
	}
	[Token(Token = "0x20000E2")]
	public class DebugLogItem : MonoBehaviour, IPointerClickHandler, IEventSystemHandler
	{
		[Token(Token = "0x4000559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private RectTransform transformComponent;

		[Token(Token = "0x400055A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Image imageComponent;

		[Token(Token = "0x400055B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Text logText;

		[Token(Token = "0x400055C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Image logTypeImage;

		[Token(Token = "0x400055D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private GameObject logCountParent;

		[Token(Token = "0x400055E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Text logCountText;

		[Token(Token = "0x400055F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private DebugLogEntry logEntry;

		[Token(Token = "0x4000560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int entryIndex;

		[Token(Token = "0x4000561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private DebugLogRecycledListView manager;

		[Token(Token = "0x1700003F")]
		public RectTransform Transform
		{
			[Token(Token = "0x60004C6")]
			[Address(RVA = "0xC23924", Offset = "0xC23924", VA = "0xC23924")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000040")]
		public Image Image
		{
			[Token(Token = "0x60004C7")]
			[Address(RVA = "0xC2392C", Offset = "0xC2392C", VA = "0xC2392C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000041")]
		public int Index
		{
			[Token(Token = "0x60004C8")]
			[Address(RVA = "0xC23934", Offset = "0xC23934", VA = "0xC23934")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60004C9")]
		[Address(RVA = "0xC2393C", Offset = "0xC2393C", VA = "0xC2393C")]
		public void Initialize(DebugLogRecycledListView manager)
		{
		}

		[Token(Token = "0x60004CA")]
		[Address(RVA = "0xC23944", Offset = "0xC23944", VA = "0xC23944")]
		public void SetContent(DebugLogEntry logEntry, int entryIndex, bool isExpanded)
		{
		}

		[Token(Token = "0x60004CB")]
		[Address(RVA = "0xC23A44", Offset = "0xC23A44", VA = "0xC23A44")]
		public void ShowCount()
		{
		}

		[Token(Token = "0x60004CC")]
		[Address(RVA = "0xC23AA8", Offset = "0xC23AA8", VA = "0xC23AA8")]
		public void HideCount()
		{
		}

		[Token(Token = "0x60004CD")]
		[Address(RVA = "0xC23AC8", Offset = "0xC23AC8", VA = "0xC23AC8", Slot = "4")]
		public void OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60004CE")]
		[Address(RVA = "0xC23AE8", Offset = "0xC23AE8", VA = "0xC23AE8")]
		public float CalculateExpandedHeight(string content)
		{
			return default(float);
		}

		[Token(Token = "0x60004CF")]
		[Address(RVA = "0xC23C2C", Offset = "0xC23C2C", VA = "0xC23C2C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60004D0")]
		[Address(RVA = "0xC23C4C", Offset = "0xC23C4C", VA = "0xC23C4C")]
		public DebugLogItem()
		{
		}
	}
	[Token(Token = "0x20000E3")]
	public class DebugLogLogcatListener : AndroidJavaProxy
	{
		[Token(Token = "0x4000562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Queue<string> queuedLogs;

		[Token(Token = "0x4000563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AndroidJavaObject nativeObject;

		[Token(Token = "0x60004D1")]
		[Address(RVA = "0xAAA200", Offset = "0xAAA200", VA = "0xAAA200")]
		public DebugLogLogcatListener()
		{
		}

		[Token(Token = "0x60004D2")]
		[Address(RVA = "0xAAA2A4", Offset = "0xAAA2A4", VA = "0xAAA2A4", Slot = "1")]
		~DebugLogLogcatListener()
		{
		}

		[Token(Token = "0x60004D3")]
		[Address(RVA = "0xAAA420", Offset = "0xAAA420", VA = "0xAAA420")]
		public void Start(string arguments)
		{
		}

		[Token(Token = "0x60004D4")]
		[Address(RVA = "0xAAA320", Offset = "0xAAA320", VA = "0xAAA320")]
		public void Stop()
		{
		}

		[Token(Token = "0x60004D5")]
		[Address(RVA = "0xAAA5CC", Offset = "0xAAA5CC", VA = "0xAAA5CC")]
		public void OnLogReceived(string log)
		{
		}

		[Token(Token = "0x60004D6")]
		[Address(RVA = "0xAAA634", Offset = "0xAAA634", VA = "0xAAA634")]
		public string GetLog()
		{
			return null;
		}
	}
	[Token(Token = "0x20000E4")]
	public enum DebugLogFilter
	{
		[Token(Token = "0x4000565")]
		None = 0,
		[Token(Token = "0x4000566")]
		Info = 1,
		[Token(Token = "0x4000567")]
		Warning = 2,
		[Token(Token = "0x4000568")]
		Error = 4,
		[Token(Token = "0x4000569")]
		All = 7
	}
	[Token(Token = "0x20000E5")]
	public class DebugLogManager : MonoBehaviour
	{
		[Token(Token = "0x400056A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static DebugLogManager instance;

		[Token(Token = "0x400056B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x822D98", Offset = "0x822D98")]
		[SerializeField]
		[HideInInspector]
		private bool singleton;

		[Token(Token = "0x400056C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		[HideInInspector]
		private float minimumHeight;

		[Token(Token = "0x400056D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		private bool enablePopup;

		[Token(Token = "0x400056E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[SerializeField]
		[HideInInspector]
		private bool startInPopupMode;

		[Token(Token = "0x400056F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		[SerializeField]
		[HideInInspector]
		private bool toggleWithKey;

		[Token(Token = "0x4000570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[HideInInspector]
		private KeyCode toggleKey;

		[Token(Token = "0x4000571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[HideInInspector]
		private bool clearCommandAfterExecution;

		[Token(Token = "0x4000572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		[HideInInspector]
		private int commandHistorySize;

		[Token(Token = "0x4000573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[HideInInspector]
		private bool receiveLogcatLogsInAndroid;

		[Token(Token = "0x4000574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[HideInInspector]
		private string logcatArguments;

		[Token(Token = "0x4000575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x822FEC", Offset = "0x822FEC")]
		[SerializeField]
		private DebugLogItem logItemPrefab;

		[Token(Token = "0x4000576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Sprite infoLog;

		[Token(Token = "0x4000577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Sprite warningLog;

		[Token(Token = "0x4000578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Sprite errorLog;

		[Token(Token = "0x4000579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<LogType, Sprite> logSpriteRepresentations;

		[Token(Token = "0x400057A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private Color collapseButtonNormalColor;

		[Token(Token = "0x400057B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private Color collapseButtonSelectedColor;

		[Token(Token = "0x400057C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private Color filterButtonsNormalColor;

		[Token(Token = "0x400057D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private Color filterButtonsSelectedColor;

		[Token(Token = "0x400057E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8230A8", Offset = "0x8230A8")]
		[SerializeField]
		private RectTransform logWindowTR;

		[Token(Token = "0x400057F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private RectTransform canvasTR;

		[Token(Token = "0x4000580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private RectTransform logItemsContainer;

		[Token(Token = "0x4000581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private InputField commandInputField;

		[Token(Token = "0x4000582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private Image collapseButton;

		[Token(Token = "0x4000583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private Image filterInfoButton;

		[Token(Token = "0x4000584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private Image filterWarningButton;

		[Token(Token = "0x4000585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private Image filterErrorButton;

		[Token(Token = "0x4000586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		private Text infoEntryCountText;

		[Token(Token = "0x4000587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		private Text warningEntryCountText;

		[Token(Token = "0x4000588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private Text errorEntryCountText;

		[Token(Token = "0x4000589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private GameObject snapToBottomButton;

		[Token(Token = "0x400058A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private CanvasGroup logWindowCanvasGroup;

		[Token(Token = "0x400058B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private DebugLogPopup popupManager;

		[Token(Token = "0x400058C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		private ScrollRect logItemsScrollRect;

		[Token(Token = "0x400058D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		private DebugLogRecycledListView recycledListView;

		[Token(Token = "0x400058E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private int infoEntryCount;

		[Token(Token = "0x400058F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private int warningEntryCount;

		[Token(Token = "0x4000590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private int errorEntryCount;

		[Token(Token = "0x4000591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private bool isLogWindowVisible;

		[Token(Token = "0x4000592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x135")]
		private bool screenDimensionsChanged;

		[Token(Token = "0x4000593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x136")]
		private bool isCollapseOn;

		[Token(Token = "0x4000594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private DebugLogFilter logFilter;

		[Token(Token = "0x4000595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private bool snapToBottom;

		[Token(Token = "0x4000596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private List<DebugLogEntry> collapsedLogEntries;

		[Token(Token = "0x4000597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Dictionary<DebugLogEntry, int> collapsedLogEntriesMap;

		[Token(Token = "0x4000598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private DebugLogIndexList uncollapsedLogEntriesIndices;

		[Token(Token = "0x4000599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private DebugLogIndexList indicesOfListEntriesToShow;

		[Token(Token = "0x400059A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private List<QueuedDebugLogEntry> queuedLogs;

		[Token(Token = "0x400059B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private List<DebugLogItem> pooledLogItems;

		[Token(Token = "0x400059C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private CircularBuffer<string> commandHistory;

		[Token(Token = "0x400059D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private int commandHistoryIndex;

		[Token(Token = "0x400059E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private PointerEventData nullPointerEventData;

		[Token(Token = "0x400059F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private DebugLogLogcatListener logcatListener;

		[Token(Token = "0x60004D7")]
		[Address(RVA = "0xAAA6A4", Offset = "0xAAA6A4", VA = "0xAAA6A4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60004D8")]
		[Address(RVA = "0xAAADB0", Offset = "0xAAADB0", VA = "0xAAADB0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60004D9")]
		[Address(RVA = "0xAAAFC4", Offset = "0xAAAFC4", VA = "0xAAAFC4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60004DA")]
		[Address(RVA = "0xAAB17C", Offset = "0xAAB17C", VA = "0xAAB17C")]
		private void Start()
		{
		}

		[Token(Token = "0x60004DB")]
		[Address(RVA = "0xAAB2C0", Offset = "0xAAB2C0", VA = "0xAAB2C0")]
		private void OnRectTransformDimensionsChange()
		{
		}

		[Token(Token = "0x60004DC")]
		[Address(RVA = "0xAAB2CC", Offset = "0xAAB2CC", VA = "0xAAB2CC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60004DD")]
		[Address(RVA = "0xAAB240", Offset = "0xAAB240", VA = "0xAAB240")]
		public void ShowLogWindow()
		{
		}

		[Token(Token = "0x60004DE")]
		[Address(RVA = "0xAAB1E0", Offset = "0xAAB1E0", VA = "0xAAB1E0")]
		public void ShowPopup()
		{
		}

		[Token(Token = "0x60004DF")]
		[Address(RVA = "0xAABD0C", Offset = "0xAABD0C", VA = "0xAABD0C")]
		public char OnValidateCommand(string text, int charIndex, char addedChar)
		{
			return default(char);
		}

		[Token(Token = "0x60004E0")]
		[Address(RVA = "0xAAB64C", Offset = "0xAAB64C", VA = "0xAAB64C")]
		private void ReceivedLog(string logString, string stackTrace, LogType logType)
		{
		}

		[Token(Token = "0x60004E1")]
		[Address(RVA = "0xAAC0BC", Offset = "0xAAC0BC", VA = "0xAAC0BC")]
		public void SetSnapToBottom(bool snapToBottom)
		{
		}

		[Token(Token = "0x60004E2")]
		[Address(RVA = "0xAAC0C8", Offset = "0xAAC0C8", VA = "0xAAC0C8")]
		public void ValidateScrollPosition()
		{
		}

		[Token(Token = "0x60004E3")]
		[Address(RVA = "0xAAC0F4", Offset = "0xAAC0F4", VA = "0xAAC0F4")]
		public void HideButtonPressed()
		{
		}

		[Token(Token = "0x60004E4")]
		[Address(RVA = "0xAAC0F8", Offset = "0xAAC0F8", VA = "0xAAC0F8")]
		public void ClearButtonPressed()
		{
		}

		[Token(Token = "0x60004E5")]
		[Address(RVA = "0xAAC2BC", Offset = "0xAAC2BC", VA = "0xAAC2BC")]
		public void CollapseButtonPressed()
		{
		}

		[Token(Token = "0x60004E6")]
		[Address(RVA = "0xAAC730", Offset = "0xAAC730", VA = "0xAAC730")]
		public void FilterLogButtonPressed()
		{
		}

		[Token(Token = "0x60004E7")]
		[Address(RVA = "0xAAC798", Offset = "0xAAC798", VA = "0xAAC798")]
		public void FilterWarningButtonPressed()
		{
		}

		[Token(Token = "0x60004E8")]
		[Address(RVA = "0xAAC800", Offset = "0xAAC800", VA = "0xAAC800")]
		public void FilterErrorButtonPressed()
		{
		}

		[Token(Token = "0x60004E9")]
		[Address(RVA = "0xAAC868", Offset = "0xAAC868", VA = "0xAAC868")]
		public void Resize(BaseEventData dat)
		{
		}

		[Token(Token = "0x60004EA")]
		[Address(RVA = "0xAAC358", Offset = "0xAAC358", VA = "0xAAC358")]
		private void FilterLogs()
		{
		}

		[Token(Token = "0x60004EB")]
		[Address(RVA = "0xAAC9D0", Offset = "0xAAC9D0", VA = "0xAAC9D0")]
		public string GetAllLogs()
		{
			return null;
		}

		[Token(Token = "0x60004EC")]
		[Address(RVA = "0xAACB9C", Offset = "0xAACB9C", VA = "0xAACB9C")]
		private void SaveLogsToFile()
		{
		}

		[Token(Token = "0x60004ED")]
		[Address(RVA = "0xAACD20", Offset = "0xAACD20", VA = "0xAACD20")]
		public void PoolLogItem(DebugLogItem logItem)
		{
		}

		[Token(Token = "0x60004EE")]
		[Address(RVA = "0xAACDA8", Offset = "0xAACDA8", VA = "0xAACDA8")]
		public DebugLogItem PopLogItem()
		{
			return null;
		}

		[Token(Token = "0x60004EF")]
		[Address(RVA = "0xAACEA0", Offset = "0xAACEA0", VA = "0xAACEA0")]
		public DebugLogManager()
		{
		}
	}
	[Token(Token = "0x20000E6")]
	public class DebugLogPopup : MonoBehaviour, IPointerClickHandler, IEventSystemHandler, IBeginDragHandler, IDragHandler, IEndDragHandler
	{
		[Token(Token = "0x2000643")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820C90", Offset = "0x820C90")]
		private sealed class <MoveToPosAnimation>d__24 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002513")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002514")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002515")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DebugLogPopup <>4__this;

			[Token(Token = "0x4002516")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 targetPos;

			[Token(Token = "0x4002517")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <modifier>5__2;

			[Token(Token = "0x4002518")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Vector3 <initialPos>5__3;

			[Token(Token = "0x170006F0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600344A")]
				[Address(RVA = "0xAAD68C", Offset = "0xAAD68C", VA = "0xAAD68C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170006F1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600344C")]
				[Address(RVA = "0xAAD6F4", Offset = "0xAAD6F4", VA = "0xAAD6F4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003447")]
			[Address(RVA = "0xAAD3F4", Offset = "0xAAD3F4", VA = "0xAAD3F4")]
			[DebuggerHidden]
			public <MoveToPosAnimation>d__24(int <>1__state)
			{
			}

			[Token(Token = "0x6003448")]
			[Address(RVA = "0xAAD524", Offset = "0xAAD524", VA = "0xAAD524", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003449")]
			[Address(RVA = "0xAAD528", Offset = "0xAAD528", VA = "0xAAD528", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600344B")]
			[Address(RVA = "0xAAD694", Offset = "0xAAD694", VA = "0xAAD694", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40005A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private RectTransform popupTransform;

		[Token(Token = "0x40005A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector2 halfSize;

		[Token(Token = "0x40005A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Image backgroundImage;

		[Token(Token = "0x40005A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CanvasGroup canvasGroup;

		[Token(Token = "0x40005A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private DebugLogManager debugManager;

		[Token(Token = "0x40005A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Text newInfoCountText;

		[Token(Token = "0x40005A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Text newWarningCountText;

		[Token(Token = "0x40005A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Text newErrorCountText;

		[Token(Token = "0x40005A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Color alertColorInfo;

		[Token(Token = "0x40005A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private Color alertColorWarning;

		[Token(Token = "0x40005AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private Color alertColorError;

		[Token(Token = "0x40005AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int newInfoCount;

		[Token(Token = "0x40005AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private int newWarningCount;

		[Token(Token = "0x40005AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int newErrorCount;

		[Token(Token = "0x40005AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Color normalColor;

		[Token(Token = "0x40005AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool isPopupBeingDragged;

		[Token(Token = "0x40005B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private IEnumerator moveToPosCoroutine;

		[Token(Token = "0x60004F1")]
		[Address(RVA = "0xAACEF0", Offset = "0xAACEF0", VA = "0xAACEF0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60004F2")]
		[Address(RVA = "0xAACFB8", Offset = "0xAACFB8", VA = "0xAACFB8")]
		private void Start()
		{
		}

		[Token(Token = "0x60004F3")]
		[Address(RVA = "0xAABAB4", Offset = "0xAABAB4", VA = "0xAABAB4")]
		public void OnViewportDimensionsChanged()
		{
		}

		[Token(Token = "0x60004F4")]
		[Address(RVA = "0xAABF3C", Offset = "0xAABF3C", VA = "0xAABF3C")]
		public void NewInfoLogArrived()
		{
		}

		[Token(Token = "0x60004F5")]
		[Address(RVA = "0xAABFC8", Offset = "0xAABFC8", VA = "0xAABFC8")]
		public void NewWarningLogArrived()
		{
		}

		[Token(Token = "0x60004F6")]
		[Address(RVA = "0xAAC04C", Offset = "0xAAC04C", VA = "0xAAC04C")]
		public void NewErrorLogArrived()
		{
		}

		[Token(Token = "0x60004F7")]
		[Address(RVA = "0xAAD29C", Offset = "0xAAD29C", VA = "0xAAD29C")]
		private void Reset()
		{
		}

		[Token(Token = "0x60004F8")]
		[Address(RVA = "0xAAD360", Offset = "0xAAD360", VA = "0xAAD360")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x82FF88", Offset = "0x82FF88")]
		private IEnumerator MoveToPosAnimation(Vector3 targetPos)
		{
			return null;
		}

		[Token(Token = "0x60004F9")]
		[Address(RVA = "0xAAD420", Offset = "0xAAD420", VA = "0xAAD420", Slot = "4")]
		public void OnPointerClick(PointerEventData data)
		{
		}

		[Token(Token = "0x60004FA")]
		[Address(RVA = "0xAABCA4", Offset = "0xAABCA4", VA = "0xAABCA4")]
		public void Show()
		{
		}

		[Token(Token = "0x60004FB")]
		[Address(RVA = "0xAABBB8", Offset = "0xAABBB8", VA = "0xAABBB8")]
		public void Hide()
		{
		}

		[Token(Token = "0x60004FC")]
		[Address(RVA = "0xAAD444", Offset = "0xAAD444", VA = "0xAAD444", Slot = "5")]
		public void OnBeginDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x60004FD")]
		[Address(RVA = "0xAAD47C", Offset = "0xAAD47C", VA = "0xAAD47C", Slot = "6")]
		public void OnDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x60004FE")]
		[Address(RVA = "0xAAD08C", Offset = "0xAAD08C", VA = "0xAAD08C", Slot = "7")]
		public void OnEndDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x60004FF")]
		[Address(RVA = "0xAAD51C", Offset = "0xAAD51C", VA = "0xAAD51C")]
		public DebugLogPopup()
		{
		}
	}
	[Token(Token = "0x20000E7")]
	public class DebugLogRecycledListView : MonoBehaviour
	{
		[Token(Token = "0x40005B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private RectTransform transformComponent;

		[Token(Token = "0x40005B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private RectTransform viewportTransform;

		[Token(Token = "0x40005B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private DebugLogManager debugManager;

		[Token(Token = "0x40005B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Color logItemNormalColor1;

		[Token(Token = "0x40005B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Color logItemNormalColor2;

		[Token(Token = "0x40005B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Color logItemSelectedColor;

		[Token(Token = "0x40005B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private DebugLogManager manager;

		[Token(Token = "0x40005B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float logItemHeight;

		[Token(Token = "0x40005B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float _1OverLogItemHeight;

		[Token(Token = "0x40005BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float viewportHeight;

		[Token(Token = "0x40005BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<DebugLogEntry> collapsedLogEntries;

		[Token(Token = "0x40005BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private DebugLogIndexList indicesOfEntriesToShow;

		[Token(Token = "0x40005BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int indexOfSelectedLogEntry;

		[Token(Token = "0x40005BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float positionOfSelectedLogEntry;

		[Token(Token = "0x40005BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float heightOfSelectedLogEntry;

		[Token(Token = "0x40005C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float deltaHeightOfSelectedLogEntry;

		[Token(Token = "0x40005C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Dictionary<int, DebugLogItem> logItemsAtIndices;

		[Token(Token = "0x40005C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private bool isCollapseOn;

		[Token(Token = "0x40005C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private int currentTopIndex;

		[Token(Token = "0x40005C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int currentBottomIndex;

		[Token(Token = "0x17000042")]
		public float ItemHeight
		{
			[Token(Token = "0x6000500")]
			[Address(RVA = "0xAAD6FC", Offset = "0xAAD6FC", VA = "0xAAD6FC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000043")]
		public float SelectedItemHeight
		{
			[Token(Token = "0x6000501")]
			[Address(RVA = "0xAAD704", Offset = "0xAAD704", VA = "0xAAD704")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000502")]
		[Address(RVA = "0xAAD70C", Offset = "0xAAD70C", VA = "0xAAD70C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000503")]
		[Address(RVA = "0xAAAB10", Offset = "0xAAAB10", VA = "0xAAAB10")]
		public void Initialize(DebugLogManager manager, List<DebugLogEntry> collapsedLogEntries, DebugLogIndexList indicesOfEntriesToShow, float logItemHeight)
		{
		}

		[Token(Token = "0x6000504")]
		[Address(RVA = "0xAAD760", Offset = "0xAAD760", VA = "0xAAD760")]
		public void SetCollapseMode(bool collapse)
		{
		}

		[Token(Token = "0x6000505")]
		[Address(RVA = "0xAAD76C", Offset = "0xAAD76C", VA = "0xAAD76C")]
		public void OnLogItemClicked(DebugLogItem item)
		{
		}

		[Token(Token = "0x6000506")]
		[Address(RVA = "0xAAC210", Offset = "0xAAC210", VA = "0xAAC210")]
		public void DeselectSelectedLogItem()
		{
		}

		[Token(Token = "0x6000507")]
		[Address(RVA = "0xAABC18", Offset = "0xAABC18", VA = "0xAABC18")]
		public void OnLogEntriesUpdated(bool updateAllVisibleItemContents)
		{
		}

		[Token(Token = "0x6000508")]
		[Address(RVA = "0xAABEB4", Offset = "0xAABEB4", VA = "0xAABEB4")]
		public void OnCollapsedLogEntryAtIndexUpdated(int index)
		{
		}

		[Token(Token = "0x6000509")]
		[Address(RVA = "0xAABA54", Offset = "0xAABA54", VA = "0xAABA54")]
		public void OnViewportDimensionsChanged()
		{
		}

		[Token(Token = "0x600050A")]
		[Address(RVA = "0xAADA0C", Offset = "0xAADA0C", VA = "0xAADA0C")]
		private void HardResetItems()
		{
		}

		[Token(Token = "0x600050B")]
		[Address(RVA = "0xAAD93C", Offset = "0xAAD93C", VA = "0xAAD93C")]
		private void CalculateContentHeight()
		{
		}

		[Token(Token = "0x600050C")]
		[Address(RVA = "0xAAAB28", Offset = "0xAAAB28", VA = "0xAAAB28")]
		public void UpdateItemsInTheList(bool updateAllVisibleItemContents)
		{
		}

		[Token(Token = "0x600050D")]
		[Address(RVA = "0xAADAE4", Offset = "0xAADAE4", VA = "0xAADAE4")]
		private void CreateLogItemsBetweenIndices(int topIndex, int bottomIndex)
		{
		}

		[Token(Token = "0x600050E")]
		[Address(RVA = "0xAADC50", Offset = "0xAADC50", VA = "0xAADC50")]
		private void CreateLogItemAtIndex(int index)
		{
		}

		[Token(Token = "0x600050F")]
		[Address(RVA = "0xAADA44", Offset = "0xAADA44", VA = "0xAADA44")]
		private void DestroyLogItemsBetweenIndices(int topIndex, int bottomIndex)
		{
		}

		[Token(Token = "0x6000510")]
		[Address(RVA = "0xAADB30", Offset = "0xAADB30", VA = "0xAADB30")]
		private void UpdateLogItemContentsBetweenIndices(int topIndex, int bottomIndex)
		{
		}

		[Token(Token = "0x6000511")]
		[Address(RVA = "0xAAD8C4", Offset = "0xAAD8C4", VA = "0xAAD8C4")]
		private void ColorLogItem(DebugLogItem logItem, int index)
		{
		}

		[Token(Token = "0x6000512")]
		[Address(RVA = "0xAADD38", Offset = "0xAADD38", VA = "0xAADD38")]
		public DebugLogRecycledListView()
		{
		}
	}
	[Token(Token = "0x20000E8")]
	public class DebugsOnScrollListener : MonoBehaviour, IScrollHandler, IEventSystemHandler, IBeginDragHandler, IEndDragHandler
	{
		[Token(Token = "0x40005C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ScrollRect debugsScrollRect;

		[Token(Token = "0x40005C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DebugLogManager debugLogManager;

		[Token(Token = "0x6000513")]
		[Address(RVA = "0xAADDBC", Offset = "0xAADDBC", VA = "0xAADDBC", Slot = "4")]
		public void OnScroll(PointerEventData data)
		{
		}

		[Token(Token = "0x6000514")]
		[Address(RVA = "0xAADE24", Offset = "0xAADE24", VA = "0xAADE24", Slot = "5")]
		public void OnBeginDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6000515")]
		[Address(RVA = "0xAADE40", Offset = "0xAADE40", VA = "0xAADE40", Slot = "6")]
		public void OnEndDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6000516")]
		[Address(RVA = "0xAADE74", Offset = "0xAADE74", VA = "0xAADE74")]
		public void OnScrollbarDragStart(BaseEventData data)
		{
		}

		[Token(Token = "0x6000517")]
		[Address(RVA = "0xAADE90", Offset = "0xAADE90", VA = "0xAADE90")]
		public void OnScrollbarDragEnd(BaseEventData data)
		{
		}

		[Token(Token = "0x6000518")]
		[Address(RVA = "0xAADDF0", Offset = "0xAADDF0", VA = "0xAADDF0")]
		private bool IsScrollbarAtBottom()
		{
			return default(bool);
		}

		[Token(Token = "0x6000519")]
		[Address(RVA = "0xAADEC4", Offset = "0xAADEC4", VA = "0xAADEC4")]
		public DebugsOnScrollListener()
		{
		}
	}
}
namespace I2.Loc
{
	[Token(Token = "0x20000E9")]
	public class CallbackNotification : MonoBehaviour
	{
		[Token(Token = "0x600051A")]
		[Address(RVA = "0xA59BAC", Offset = "0xA59BAC", VA = "0xA59BAC")]
		public void OnModifyLocalization()
		{
		}

		[Token(Token = "0x600051B")]
		[Address(RVA = "0xA59C90", Offset = "0xA59C90", VA = "0xA59C90")]
		public CallbackNotification()
		{
		}
	}
	[Token(Token = "0x20000EA")]
	public class Example_ChangeLanguage : MonoBehaviour
	{
		[Token(Token = "0x600051C")]
		[Address(RVA = "0xA5A1C4", Offset = "0xA5A1C4", VA = "0xA5A1C4")]
		public void SetLanguage_English()
		{
		}

		[Token(Token = "0x600051D")]
		[Address(RVA = "0xA5A2B4", Offset = "0xA5A2B4", VA = "0xA5A2B4")]
		public void SetLanguage_French()
		{
		}

		[Token(Token = "0x600051E")]
		[Address(RVA = "0xA5A2FC", Offset = "0xA5A2FC", VA = "0xA5A2FC")]
		public void SetLanguage_Spanish()
		{
		}

		[Token(Token = "0x600051F")]
		[Address(RVA = "0xA5A20C", Offset = "0xA5A20C", VA = "0xA5A20C")]
		public void SetLanguage(string LangName)
		{
		}

		[Token(Token = "0x6000520")]
		[Address(RVA = "0xA5A344", Offset = "0xA5A344", VA = "0xA5A344")]
		public Example_ChangeLanguage()
		{
		}
	}
	[Token(Token = "0x20000EB")]
	public class Example_LocalizedString : MonoBehaviour
	{
		[Token(Token = "0x40005C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LocalizedString _MyLocalizedString;

		[Token(Token = "0x40005C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string _NormalString;

		[Token(Token = "0x40005C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TermsPopup", RVA = "0x8232A4", Offset = "0x8232A4")]
		public string _StringWithTermPopup;

		[Token(Token = "0x6000521")]
		[Address(RVA = "0xA5A34C", Offset = "0xA5A34C", VA = "0xA5A34C")]
		public void Start()
		{
		}

		[Token(Token = "0x6000522")]
		[Address(RVA = "0xA5A638", Offset = "0xA5A638", VA = "0xA5A638")]
		public Example_LocalizedString()
		{
		}
	}
	[Token(Token = "0x20000EC")]
	public class GlobalParametersExample : RegisterGlobalParameters
	{
		[Token(Token = "0x6000523")]
		[Address(RVA = "0xA5A640", Offset = "0xA5A640", VA = "0xA5A640", Slot = "7")]
		public override string GetParameterValue(string ParamName)
		{
			return null;
		}

		[Token(Token = "0x6000524")]
		[Address(RVA = "0xA5A6F0", Offset = "0xA5A6F0", VA = "0xA5A6F0")]
		public GlobalParametersExample()
		{
		}
	}
	[Token(Token = "0x20000ED")]
	public class RealTimeTranslation : MonoBehaviour
	{
		[Token(Token = "0x40005CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string OriginalText;

		[Token(Token = "0x40005CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string TranslatedText;

		[Token(Token = "0x40005CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool IsTranslating;

		[Token(Token = "0x6000525")]
		[Address(RVA = "0xC149E0", Offset = "0xC149E0", VA = "0xC149E0")]
		public void OnGUI()
		{
		}

		[Token(Token = "0x6000526")]
		[Address(RVA = "0xC14FDC", Offset = "0xC14FDC", VA = "0xC14FDC")]
		public void StartTranslating(string fromCode, string toCode)
		{
		}

		[Token(Token = "0x6000527")]
		[Address(RVA = "0xC151F0", Offset = "0xC151F0", VA = "0xC151F0")]
		private void OnTranslationReady(string Translation, string errorMsg)
		{
		}

		[Token(Token = "0x6000528")]
		[Address(RVA = "0xC15284", Offset = "0xC15284", VA = "0xC15284")]
		public void ExampleMultiTranslations_Blocking()
		{
		}

		[Token(Token = "0x6000529")]
		[Address(RVA = "0xC150A0", Offset = "0xC150A0", VA = "0xC150A0")]
		public void ExampleMultiTranslations_Async()
		{
		}

		[Token(Token = "0x600052A")]
		[Address(RVA = "0xC1549C", Offset = "0xC1549C", VA = "0xC1549C")]
		private void OnMultitranslationReady(Dictionary<string, TranslationQuery> dict, string errorMsg)
		{
		}

		[Token(Token = "0x600052B")]
		[Address(RVA = "0xC1568C", Offset = "0xC1568C", VA = "0xC1568C")]
		public bool IsWaitingForTranslation()
		{
			return default(bool);
		}

		[Token(Token = "0x600052C")]
		[Address(RVA = "0xC15694", Offset = "0xC15694", VA = "0xC15694")]
		public string GetTranslatedText()
		{
			return null;
		}

		[Token(Token = "0x600052D")]
		[Address(RVA = "0xC1569C", Offset = "0xC1569C", VA = "0xC1569C")]
		public void SetOriginalText(string text)
		{
		}

		[Token(Token = "0x600052E")]
		[Address(RVA = "0xC156A4", Offset = "0xC156A4", VA = "0xC156A4")]
		public RealTimeTranslation()
		{
		}
	}
	[Token(Token = "0x20000EE")]
	public class RegisterBundlesManager : MonoBehaviour, IResourceManager_Bundles
	{
		[Token(Token = "0x600052F")]
		[Address(RVA = "0xC15714", Offset = "0xC15714", VA = "0xC15714")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6000530")]
		[Address(RVA = "0xC15B04", Offset = "0xC15B04", VA = "0xC15B04")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6000531")]
		[Address(RVA = "0xC15B68", Offset = "0xC15B68", VA = "0xC15B68", Slot = "5")]
		public virtual UnityEngine.Object LoadFromBundle(string path, Type assetType)
		{
			return null;
		}

		[Token(Token = "0x6000532")]
		[Address(RVA = "0xC15B70", Offset = "0xC15B70", VA = "0xC15B70")]
		public RegisterBundlesManager()
		{
		}
	}
	[Token(Token = "0x20000EF")]
	public class ToggleLanguage : MonoBehaviour
	{
		[Token(Token = "0x6000533")]
		[Address(RVA = "0xC1D80C", Offset = "0xC1D80C", VA = "0xC1D80C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000534")]
		[Address(RVA = "0xC1D864", Offset = "0xC1D864", VA = "0xC1D864")]
		private void test()
		{
		}

		[Token(Token = "0x6000535")]
		[Address(RVA = "0xC1D914", Offset = "0xC1D914", VA = "0xC1D914")]
		public ToggleLanguage()
		{
		}
	}
	[Token(Token = "0x20000F0")]
	public static class PersistentStorage
	{
		[Token(Token = "0x2000644")]
		public enum eFileType
		{
			[Token(Token = "0x400251A")]
			Raw,
			[Token(Token = "0x400251B")]
			Persistent,
			[Token(Token = "0x400251C")]
			Temporal,
			[Token(Token = "0x400251D")]
			Streaming
		}

		[Token(Token = "0x40005CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static I2CustomPersistentStorage mStorage;

		[Token(Token = "0x6000536")]
		[Address(RVA = "0xC11F34", Offset = "0xC11F34", VA = "0xC11F34")]
		public static void SetSetting_String(string key, string value)
		{
		}

		[Token(Token = "0x6000537")]
		[Address(RVA = "0xC11FE4", Offset = "0xC11FE4", VA = "0xC11FE4")]
		public static string GetSetting_String(string key, string defaultValue)
		{
			return null;
		}

		[Token(Token = "0x6000538")]
		[Address(RVA = "0xC12094", Offset = "0xC12094", VA = "0xC12094")]
		public static void DeleteSetting(string key)
		{
		}

		[Token(Token = "0x6000539")]
		[Address(RVA = "0xC1213C", Offset = "0xC1213C", VA = "0xC1213C")]
		public static bool HasSetting(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x600053A")]
		[Address(RVA = "0xC121E4", Offset = "0xC121E4", VA = "0xC121E4")]
		public static void ForceSaveSettings()
		{
		}

		[Token(Token = "0x600053B")]
		[Address(RVA = "0xC1227C", Offset = "0xC1227C", VA = "0xC1227C")]
		public static bool CanAccessFiles()
		{
			return default(bool);
		}

		[Token(Token = "0x600053C")]
		[Address(RVA = "0xC12314", Offset = "0xC12314", VA = "0xC12314")]
		public static bool SaveFile(eFileType fileType, string fileName, string data, bool logExceptions = true)
		{
			return default(bool);
		}

		[Token(Token = "0x600053D")]
		[Address(RVA = "0xC123DC", Offset = "0xC123DC", VA = "0xC123DC")]
		public static string LoadFile(eFileType fileType, string fileName, bool logExceptions = true)
		{
			return null;
		}

		[Token(Token = "0x600053E")]
		[Address(RVA = "0xC1249C", Offset = "0xC1249C", VA = "0xC1249C")]
		public static bool DeleteFile(eFileType fileType, string fileName, bool logExceptions = true)
		{
			return default(bool);
		}

		[Token(Token = "0x600053F")]
		[Address(RVA = "0xC1255C", Offset = "0xC1255C", VA = "0xC1255C")]
		public static bool HasFile(eFileType fileType, string fileName, bool logExceptions = true)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20000F1")]
	public abstract class I2BasePersistentStorage
	{
		[Token(Token = "0x6000540")]
		[Address(RVA = "0x10BD540", Offset = "0x10BD540", VA = "0x10BD540", Slot = "4")]
		public virtual void SetSetting_String(string key, string value)
		{
		}

		[Token(Token = "0x6000541")]
		[Address(RVA = "0x10BD800", Offset = "0x10BD800", VA = "0x10BD800", Slot = "5")]
		public virtual string GetSetting_String(string key, string defaultValue)
		{
			return null;
		}

		[Token(Token = "0x6000542")]
		[Address(RVA = "0x10BDA34", Offset = "0x10BDA34", VA = "0x10BDA34", Slot = "6")]
		public virtual void DeleteSetting(string key)
		{
		}

		[Token(Token = "0x6000543")]
		[Address(RVA = "0x10BDC30", Offset = "0x10BDC30", VA = "0x10BDC30", Slot = "7")]
		public virtual void ForceSaveSettings()
		{
		}

		[Token(Token = "0x6000544")]
		[Address(RVA = "0x10BDC38", Offset = "0x10BDC38", VA = "0x10BDC38", Slot = "8")]
		public virtual bool HasSetting(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000545")]
		[Address(RVA = "0x10BDC44", Offset = "0x10BDC44", VA = "0x10BDC44", Slot = "9")]
		public virtual bool CanAccessFiles()
		{
			return default(bool);
		}

		[Token(Token = "0x6000546")]
		[Address(RVA = "0x10BDC4C", Offset = "0x10BDC4C", VA = "0x10BDC4C")]
		private string UpdateFilename(PersistentStorage.eFileType fileType, string fileName)
		{
			return null;
		}

		[Token(Token = "0x6000547")]
		[Address(RVA = "0x10BDCF8", Offset = "0x10BDCF8", VA = "0x10BDCF8", Slot = "10")]
		public virtual bool SaveFile(PersistentStorage.eFileType fileType, string fileName, string data, bool logExceptions = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6000548")]
		[Address(RVA = "0x10BDF60", Offset = "0x10BDF60", VA = "0x10BDF60", Slot = "11")]
		public virtual string LoadFile(PersistentStorage.eFileType fileType, string fileName, bool logExceptions = true)
		{
			return null;
		}

		[Token(Token = "0x6000549")]
		[Address(RVA = "0x10BE1B4", Offset = "0x10BE1B4", VA = "0x10BE1B4", Slot = "12")]
		public virtual bool DeleteFile(PersistentStorage.eFileType fileType, string fileName, bool logExceptions = true)
		{
			return default(bool);
		}

		[Token(Token = "0x600054A")]
		[Address(RVA = "0x10BE3F0", Offset = "0x10BE3F0", VA = "0x10BE3F0", Slot = "13")]
		public virtual bool HasFile(PersistentStorage.eFileType fileType, string fileName, bool logExceptions = true)
		{
			return default(bool);
		}

		[Token(Token = "0x600054B")]
		[Address(RVA = "0x10BE62C", Offset = "0x10BE62C", VA = "0x10BE62C")]
		protected I2BasePersistentStorage()
		{
		}
	}
	[Token(Token = "0x20000F2")]
	public class I2CustomPersistentStorage : I2BasePersistentStorage
	{
		[Token(Token = "0x600054C")]
		[Address(RVA = "0x10BE634", Offset = "0x10BE634", VA = "0x10BE634")]
		public I2CustomPersistentStorage()
		{
		}
	}
	[Token(Token = "0x20000F3")]
	public class BaseSpecializationManager
	{
		[Token(Token = "0x40005CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string[] mSpecializations;

		[Token(Token = "0x40005CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dictionary<string, string> mSpecializationsFallbacks;

		[Token(Token = "0x600054D")]
		[Address(RVA = "0xA596B4", Offset = "0xA596B4", VA = "0xA596B4", Slot = "4")]
		public virtual void InitializeSpecializations()
		{
		}

		[Token(Token = "0x600054E")]
		[Address(RVA = "0xA59A9C", Offset = "0xA59A9C", VA = "0xA59A9C", Slot = "5")]
		public virtual string GetCurrentSpecialization()
		{
			return null;
		}

		[Token(Token = "0x600054F")]
		[Address(RVA = "0xA59B00", Offset = "0xA59B00", VA = "0xA59B00", Slot = "6")]
		public virtual string GetFallbackSpecialization(string specialization)
		{
			return null;
		}

		[Token(Token = "0x6000550")]
		[Address(RVA = "0xA59BA4", Offset = "0xA59BA4", VA = "0xA59BA4")]
		public BaseSpecializationManager()
		{
		}
	}
	[Token(Token = "0x20000F4")]
	public class SpecializationManager : BaseSpecializationManager
	{
		[Token(Token = "0x40005D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static SpecializationManager Singleton;

		[Token(Token = "0x6000551")]
		[Address(RVA = "0xC1BF5C", Offset = "0xC1BF5C", VA = "0xC1BF5C")]
		private SpecializationManager()
		{
		}

		[Token(Token = "0x6000552")]
		[Address(RVA = "0xC1BF8C", Offset = "0xC1BF8C", VA = "0xC1BF8C")]
		public static string GetSpecializedText(string text, [Optional] string specialization)
		{
			return null;
		}

		[Token(Token = "0x6000553")]
		[Address(RVA = "0xC1C174", Offset = "0xC1C174", VA = "0xC1C174")]
		public static string SetSpecializedText(string text, string newText, string specialization)
		{
			return null;
		}

		[Token(Token = "0x6000554")]
		[Address(RVA = "0xC1C458", Offset = "0xC1C458", VA = "0xC1C458")]
		public static string SetSpecializedText(Dictionary<string, string> specializations)
		{
			return null;
		}

		[Token(Token = "0x6000555")]
		[Address(RVA = "0xC1C280", Offset = "0xC1C280", VA = "0xC1C280")]
		public static Dictionary<string, string> GetSpecializations(string text, [Optional] Dictionary<string, string> buffer)
		{
			return null;
		}

		[Token(Token = "0x6000556")]
		[Address(RVA = "0xC1C79C", Offset = "0xC1C79C", VA = "0xC1C79C")]
		public static void AppendSpecializations(string text, [Optional] List<string> list)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000F5")]
	public class EventCallback
	{
		[Token(Token = "0x40005D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MonoBehaviour Target;

		[Token(Token = "0x40005D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string MethodName;

		[Token(Token = "0x6000558")]
		[Address(RVA = "0xA5A068", Offset = "0xA5A068", VA = "0xA5A068")]
		public void Execute([Optional] UnityEngine.Object Sender)
		{
		}

		[Token(Token = "0x6000559")]
		[Address(RVA = "0xA5A0D0", Offset = "0xA5A0D0", VA = "0xA5A0D0")]
		public bool HasCallback()
		{
			return default(bool);
		}

		[Token(Token = "0x600055A")]
		[Address(RVA = "0xA5A164", Offset = "0xA5A164", VA = "0xA5A164")]
		public EventCallback()
		{
		}
	}
	[Token(Token = "0x20000F6")]
	public enum ePluralType
	{
		[Token(Token = "0x40005D4")]
		Zero,
		[Token(Token = "0x40005D5")]
		One,
		[Token(Token = "0x40005D6")]
		Two,
		[Token(Token = "0x40005D7")]
		Few,
		[Token(Token = "0x40005D8")]
		Many,
		[Token(Token = "0x40005D9")]
		Plural
	}
	[Token(Token = "0x20000F7")]
	public static class GoogleLanguages
	{
		[Token(Token = "0x2000645")]
		public struct LanguageCodeDef
		{
			[Token(Token = "0x400251E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string Code;

			[Token(Token = "0x400251F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string GoogleCode;

			[Token(Token = "0x4002520")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool HasJoinedWords;

			[Token(Token = "0x4002521")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int PluralRule;
		}

		[Token(Token = "0x40005DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Dictionary<string, LanguageCodeDef> mLanguageDef;

		[Token(Token = "0x600055B")]
		[Address(RVA = "0xA5A6F8", Offset = "0xA5A6F8", VA = "0xA5A6F8")]
		public static string GetLanguageCode(string Filter, bool ShowWarnings = false)
		{
			return null;
		}

		[Token(Token = "0x600055C")]
		[Address(RVA = "0xA5AA88", Offset = "0xA5AA88", VA = "0xA5AA88")]
		public static List<string> GetLanguagesForDropdown(string Filter, string CodesToExclude)
		{
			return null;
		}

		[Token(Token = "0x600055D")]
		[Address(RVA = "0xA5A930", Offset = "0xA5A930", VA = "0xA5A930")]
		private static bool LanguageMatchesFilter(string Language, string[] Filters)
		{
			return default(bool);
		}

		[Token(Token = "0x600055E")]
		[Address(RVA = "0xA5AF18", Offset = "0xA5AF18", VA = "0xA5AF18")]
		public static string GetFormatedLanguageName(string Language)
		{
			return null;
		}

		[Token(Token = "0x600055F")]
		[Address(RVA = "0xA5B044", Offset = "0xA5B044", VA = "0xA5B044")]
		public static string GetCodedLanguage(string Language, string code)
		{
			return null;
		}

		[Token(Token = "0x6000560")]
		[Address(RVA = "0xA5B10C", Offset = "0xA5B10C", VA = "0xA5B10C")]
		public static void UnPackCodeFromLanguageName(string CodedLanguage, out string Language, out string code)
		{
		}

		[Token(Token = "0x6000561")]
		[Address(RVA = "0xA5B24C", Offset = "0xA5B24C", VA = "0xA5B24C")]
		public static string GetGoogleLanguageCode(string InternationalCode)
		{
			return null;
		}

		[Token(Token = "0x6000562")]
		[Address(RVA = "0xA5B3BC", Offset = "0xA5B3BC", VA = "0xA5B3BC")]
		public static string GetLanguageName(string code, bool useParenthesesForRegion = false, bool allowDiscardRegion = true)
		{
			return null;
		}

		[Token(Token = "0x6000563")]
		[Address(RVA = "0xA5B63C", Offset = "0xA5B63C", VA = "0xA5B63C")]
		public static List<string> GetAllInternationalCodes()
		{
			return null;
		}

		[Token(Token = "0x6000564")]
		[Address(RVA = "0xA5B7C8", Offset = "0xA5B7C8", VA = "0xA5B7C8")]
		public static bool LanguageCode_HasJoinedWord(string languageCode)
		{
			return default(bool);
		}

		[Token(Token = "0x6000565")]
		[Address(RVA = "0xA5B934", Offset = "0xA5B934", VA = "0xA5B934")]
		private static int GetPluralRule(string langCode)
		{
			return default(int);
		}

		[Token(Token = "0x6000566")]
		[Address(RVA = "0xA5BAB8", Offset = "0xA5BAB8", VA = "0xA5BAB8")]
		public static bool LanguageHasPluralType(string langCode, string pluralType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000567")]
		[Address(RVA = "0xA5BC3C", Offset = "0xA5BC3C", VA = "0xA5BC3C")]
		public static ePluralType GetPluralType(string langCode, int n)
		{
			return default(ePluralType);
		}

		[Token(Token = "0x6000568")]
		[Address(RVA = "0xA5C354", Offset = "0xA5C354", VA = "0xA5C354")]
		public static int GetPluralTestNumber(string langCode, ePluralType pluralType)
		{
			return default(int);
		}

		[Token(Token = "0x6000569")]
		[Address(RVA = "0xA5C33C", Offset = "0xA5C33C", VA = "0xA5C33C")]
		private static bool inRange(int amount, int min, int max)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20000F8")]
	public static class GoogleTranslation
	{
		[Token(Token = "0x2000646")]
		public delegate void fnOnTranslated(string Translation, string Error);

		[Token(Token = "0x2000647")]
		public delegate void fnOnTranslationReady(Dictionary<string, TranslationQuery> dict, string error);

		[Token(Token = "0x2000648")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820CA0", Offset = "0x820CA0")]
		private sealed class <>c__DisplayClass2_0
		{
			[Token(Token = "0x4002522")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public fnOnTranslated OnTranslationReady;

			[Token(Token = "0x4002523")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string text;

			[Token(Token = "0x4002524")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Dictionary<string, TranslationQuery> queries;

			[Token(Token = "0x4002525")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string LanguageCodeTo;

			[Token(Token = "0x6003455")]
			[Address(RVA = "0x10B9AD4", Offset = "0x10B9AD4", VA = "0x10B9AD4")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x6003456")]
			[Address(RVA = "0x10BC924", Offset = "0x10BC924", VA = "0x10BC924")]
			internal void <Translate>b__0(Dictionary<string, TranslationQuery> results, string error)
			{
			}
		}

		[Token(Token = "0x2000649")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820CB0", Offset = "0x820CB0")]
		private sealed class <WaitForTranslations>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002526")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002527")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x170006F2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600345A")]
				[Address(RVA = "0x10BCB90", Offset = "0x10BCB90", VA = "0x10BCB90", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170006F3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600345C")]
				[Address(RVA = "0x10BCBF8", Offset = "0x10BCBF8", VA = "0x10BCBF8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003457")]
			[Address(RVA = "0x10BAD4C", Offset = "0x10BAD4C", VA = "0x10BAD4C")]
			[DebuggerHidden]
			public <WaitForTranslations>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x6003458")]
			[Address(RVA = "0x10BCA04", Offset = "0x10BCA04", VA = "0x10BCA04", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003459")]
			[Address(RVA = "0x10BCA08", Offset = "0x10BCA08", VA = "0x10BCA08", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600345B")]
			[Address(RVA = "0x10BCB98", Offset = "0x10BCB98", VA = "0x10BCB98", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40005DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<UnityWebRequest> mCurrentTranslations;

		[Token(Token = "0x40005DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static List<TranslationJob> mTranslationJobs;

		[Token(Token = "0x600056B")]
		[Address(RVA = "0x10B9670", Offset = "0x10B9670", VA = "0x10B9670")]
		public static bool CanTranslate()
		{
			return default(bool);
		}

		[Token(Token = "0x600056C")]
		[Address(RVA = "0x10B98E8", Offset = "0x10B98E8", VA = "0x10B98E8")]
		public static void Translate(string text, string LanguageCodeFrom, string LanguageCodeTo, fnOnTranslated OnTranslationReady)
		{
		}

		[Token(Token = "0x600056D")]
		[Address(RVA = "0x10BA200", Offset = "0x10BA200", VA = "0x10BA200")]
		public static string ForceTranslate(string text, string LanguageCodeFrom, string LanguageCodeTo)
		{
			return null;
		}

		[Token(Token = "0x600056E")]
		[Address(RVA = "0x10BA16C", Offset = "0x10BA16C", VA = "0x10BA16C")]
		public static void Translate(Dictionary<string, TranslationQuery> requests, fnOnTranslationReady OnTranslationReady, bool usePOST = true)
		{
		}

		[Token(Token = "0x600056F")]
		[Address(RVA = "0x10BA780", Offset = "0x10BA780", VA = "0x10BA780")]
		public static bool ForceTranslate(Dictionary<string, TranslationQuery> requests, bool usePOST = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6000570")]
		[Address(RVA = "0x10BA808", Offset = "0x10BA808", VA = "0x10BA808")]
		public static List<string> ConvertTranslationRequest(Dictionary<string, TranslationQuery> requests, bool encodeGET)
		{
			return null;
		}

		[Token(Token = "0x6000571")]
		[Address(RVA = "0x10BA6B4", Offset = "0x10BA6B4", VA = "0x10BA6B4")]
		private static void AddTranslationJob(TranslationJob job)
		{
		}

		[Token(Token = "0x6000572")]
		[Address(RVA = "0x10BACEC", Offset = "0x10BACEC", VA = "0x10BACEC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x82FFEC", Offset = "0x82FFEC")]
		private static IEnumerator WaitForTranslations()
		{
			return null;
		}

		[Token(Token = "0x6000573")]
		[Address(RVA = "0x10BAD78", Offset = "0x10BAD78", VA = "0x10BAD78")]
		public static string ParseTranslationResult(string html, Dictionary<string, TranslationQuery> requests)
		{
			return null;
		}

		[Token(Token = "0x6000574")]
		[Address(RVA = "0x10BB3EC", Offset = "0x10BB3EC", VA = "0x10BB3EC")]
		public static bool IsTranslating()
		{
			return default(bool);
		}

		[Token(Token = "0x6000575")]
		[Address(RVA = "0x10BB4A0", Offset = "0x10BB4A0", VA = "0x10BB4A0")]
		public static void CancelCurrentGoogleTranslations()
		{
		}

		[Token(Token = "0x6000576")]
		[Address(RVA = "0x10B9F9C", Offset = "0x10B9F9C", VA = "0x10B9F9C")]
		public static void CreateQueries(string text, string LanguageCodeFrom, string LanguageCodeTo, Dictionary<string, TranslationQuery> dict)
		{
		}

		[Token(Token = "0x6000577")]
		[Address(RVA = "0x10BB618", Offset = "0x10BB618", VA = "0x10BB618")]
		private static void CreateQueries_Plurals(string text, string LanguageCodeFrom, string LanguageCodeTo, Dictionary<string, TranslationQuery> dict)
		{
		}

		[Token(Token = "0x6000578")]
		[Address(RVA = "0x10BA33C", Offset = "0x10BA33C", VA = "0x10BA33C")]
		public static void AddQuery(string text, string LanguageCodeFrom, string LanguageCodeTo, Dictionary<string, TranslationQuery> dict)
		{
		}

		[Token(Token = "0x6000579")]
		[Address(RVA = "0x10BBF98", Offset = "0x10BBF98", VA = "0x10BBF98")]
		private static string GetTranslation(string text, string LanguageCodeTo, Dictionary<string, TranslationQuery> dict)
		{
			return null;
		}

		[Token(Token = "0x600057A")]
		[Address(RVA = "0x10BB1C0", Offset = "0x10BB1C0", VA = "0x10BB1C0")]
		private static TranslationQuery FindQueryFromOrigText(string origText, Dictionary<string, TranslationQuery> dict)
		{
			return default(TranslationQuery);
		}

		[Token(Token = "0x600057B")]
		[Address(RVA = "0x10BB88C", Offset = "0x10BB88C", VA = "0x10BB88C")]
		public static bool HasParameters(string text)
		{
			return default(bool);
		}

		[Token(Token = "0x600057C")]
		[Address(RVA = "0x10BBA40", Offset = "0x10BBA40", VA = "0x10BBA40")]
		public static string GetPluralParameter(string text, bool forceTag)
		{
			return null;
		}

		[Token(Token = "0x600057D")]
		[Address(RVA = "0x10BB91C", Offset = "0x10BB91C", VA = "0x10BB91C")]
		public static string GetPluralText(string text, string pluralType)
		{
			return null;
		}

		[Token(Token = "0x600057E")]
		[Address(RVA = "0x10BC084", Offset = "0x10BC084", VA = "0x10BC084")]
		private static int FindClosingTag(string tag, MatchCollection matches, int startIndex)
		{
			return default(int);
		}

		[Token(Token = "0x600057F")]
		[Address(RVA = "0x10BB34C", Offset = "0x10BB34C", VA = "0x10BB34C")]
		private static string GetGoogleNoTranslateTag(int tagNumber)
		{
			return null;
		}

		[Token(Token = "0x6000580")]
		[Address(RVA = "0x10BBB24", Offset = "0x10BBB24", VA = "0x10BBB24")]
		private static void ParseNonTranslatableElements(ref TranslationQuery query)
		{
		}

		[Token(Token = "0x6000581")]
		[Address(RVA = "0x10BA5A4", Offset = "0x10BA5A4", VA = "0x10BA5A4")]
		public static string GetQueryResult(string text, string LanguageCodeTo, Dictionary<string, TranslationQuery> dict)
		{
			return null;
		}

		[Token(Token = "0x6000582")]
		[Address(RVA = "0x10BC1FC", Offset = "0x10BC1FC", VA = "0x10BC1FC")]
		public static string RebuildTranslation(string text, Dictionary<string, TranslationQuery> dict, string LanguageCodeTo)
		{
			return null;
		}

		[Token(Token = "0x6000583")]
		[Address(RVA = "0x10BC440", Offset = "0x10BC440", VA = "0x10BC440")]
		private static string RebuildTranslation_Plural(string text, Dictionary<string, TranslationQuery> dict, string LanguageCodeTo)
		{
			return null;
		}

		[Token(Token = "0x6000584")]
		[Address(RVA = "0x10BC78C", Offset = "0x10BC78C", VA = "0x10BC78C")]
		public static string UppercaseFirst(string s)
		{
			return null;
		}

		[Token(Token = "0x6000585")]
		[Address(RVA = "0x10BAC34", Offset = "0x10BAC34", VA = "0x10BAC34")]
		public static string TitleCase(string s)
		{
			return null;
		}
	}
	[Token(Token = "0x20000F9")]
	public struct TranslationQuery
	{
		[Token(Token = "0x40005DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string OrigText;

		[Token(Token = "0x40005DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string Text;

		[Token(Token = "0x40005DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string LanguageCode;

		[Token(Token = "0x40005E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string[] TargetLanguagesCode;

		[Token(Token = "0x40005E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string[] Results;

		[Token(Token = "0x40005E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string[] Tags;
	}
	[Token(Token = "0x20000FA")]
	public class TranslationJob : IDisposable
	{
		[Token(Token = "0x200064A")]
		public enum eJobState
		{
			[Token(Token = "0x4002529")]
			Running,
			[Token(Token = "0x400252A")]
			Succeeded,
			[Token(Token = "0x400252B")]
			Failed
		}

		[Token(Token = "0x40005E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public eJobState mJobState;

		[Token(Token = "0x6000587")]
		[Address(RVA = "0xC1D91C", Offset = "0xC1D91C", VA = "0xC1D91C", Slot = "5")]
		public virtual eJobState GetState()
		{
			return default(eJobState);
		}

		[Token(Token = "0x6000588")]
		[Address(RVA = "0xC1D924", Offset = "0xC1D924", VA = "0xC1D924", Slot = "6")]
		public virtual void Dispose()
		{
		}

		[Token(Token = "0x6000589")]
		[Address(RVA = "0xC1D928", Offset = "0xC1D928", VA = "0xC1D928")]
		public TranslationJob()
		{
		}
	}
	[Token(Token = "0x20000FB")]
	public class TranslationJob_WWW : TranslationJob
	{
		[Token(Token = "0x40005E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityWebRequest www;

		[Token(Token = "0x600058A")]
		[Address(RVA = "0xC1F07C", Offset = "0xC1F07C", VA = "0xC1F07C", Slot = "6")]
		public override void Dispose()
		{
		}

		[Token(Token = "0x600058B")]
		[Address(RVA = "0xC1D9D0", Offset = "0xC1D9D0", VA = "0xC1D9D0")]
		public TranslationJob_WWW()
		{
		}
	}
	[Token(Token = "0x20000FC")]
	public class TranslationJob_GET : TranslationJob_WWW
	{
		[Token(Token = "0x40005E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<string, TranslationQuery> _requests;

		[Token(Token = "0x40005E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GoogleTranslation.fnOnTranslationReady _OnTranslationReady;

		[Token(Token = "0x40005E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<string> mQueries;

		[Token(Token = "0x40005E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string mErrorMessage;

		[Token(Token = "0x600058C")]
		[Address(RVA = "0xC1D930", Offset = "0xC1D930", VA = "0xC1D930")]
		public TranslationJob_GET(Dictionary<string, TranslationQuery> requests, GoogleTranslation.fnOnTranslationReady OnTranslationReady)
		{
		}

		[Token(Token = "0x600058D")]
		[Address(RVA = "0xC1D9D8", Offset = "0xC1D9D8", VA = "0xC1D9D8")]
		private void ExecuteNextQuery()
		{
		}

		[Token(Token = "0x600058E")]
		[Address(RVA = "0xC1DABC", Offset = "0xC1DABC", VA = "0xC1DABC", Slot = "5")]
		public override eJobState GetState()
		{
			return default(eJobState);
		}

		[Token(Token = "0x600058F")]
		[Address(RVA = "0xC1DB60", Offset = "0xC1DB60", VA = "0xC1DB60")]
		public void ProcessResult(byte[] bytes, string errorMsg)
		{
		}
	}
	[Token(Token = "0x20000FD")]
	public class TranslationJob_Main : TranslationJob
	{
		[Token(Token = "0x40005E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TranslationJob_WEB mWeb;

		[Token(Token = "0x40005EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TranslationJob_POST mPost;

		[Token(Token = "0x40005EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TranslationJob_GET mGet;

		[Token(Token = "0x40005EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<string, TranslationQuery> _requests;

		[Token(Token = "0x40005ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GoogleTranslation.fnOnTranslationReady _OnTranslationReady;

		[Token(Token = "0x40005EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string mErrorMessage;

		[Token(Token = "0x6000590")]
		[Address(RVA = "0xC1DC6C", Offset = "0xC1DC6C", VA = "0xC1DC6C")]
		public TranslationJob_Main(Dictionary<string, TranslationQuery> requests, GoogleTranslation.fnOnTranslationReady OnTranslationReady)
		{
		}

		[Token(Token = "0x6000591")]
		[Address(RVA = "0xC1DE44", Offset = "0xC1DE44", VA = "0xC1DE44", Slot = "5")]
		public override eJobState GetState()
		{
			return default(eJobState);
		}

		[Token(Token = "0x6000592")]
		[Address(RVA = "0xC1DFF0", Offset = "0xC1DFF0", VA = "0xC1DFF0", Slot = "6")]
		public override void Dispose()
		{
		}
	}
	[Token(Token = "0x20000FE")]
	public class TranslationJob_POST : TranslationJob_WWW
	{
		[Token(Token = "0x40005EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<string, TranslationQuery> _requests;

		[Token(Token = "0x40005F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GoogleTranslation.fnOnTranslationReady _OnTranslationReady;

		[Token(Token = "0x6000593")]
		[Address(RVA = "0xC1DCF0", Offset = "0xC1DCF0", VA = "0xC1DCF0")]
		public TranslationJob_POST(Dictionary<string, TranslationQuery> requests, GoogleTranslation.fnOnTranslationReady OnTranslationReady)
		{
		}

		[Token(Token = "0x6000594")]
		[Address(RVA = "0xC1E03C", Offset = "0xC1E03C", VA = "0xC1E03C", Slot = "5")]
		public override eJobState GetState()
		{
			return default(eJobState);
		}

		[Token(Token = "0x6000595")]
		[Address(RVA = "0xC1E0CC", Offset = "0xC1E0CC", VA = "0xC1E0CC")]
		public void ProcessResult(byte[] bytes, string errorMsg)
		{
		}
	}
	[Token(Token = "0x20000FF")]
	public class TranslationJob_WEB : TranslationJob_WWW
	{
		[Serializable]
		[Token(Token = "0x200064B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820CC0", Offset = "0x820CC0")]
		private sealed class <>c
		{
			[Token(Token = "0x400252C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400252D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Comparison<KeyValuePair<string, string>> <>9__8_0;

			[Token(Token = "0x400252E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static MatchEvaluator <>9__12_0;

			[Token(Token = "0x400252F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static MatchEvaluator <>9__12_1;

			[Token(Token = "0x600345E")]
			[Address(RVA = "0xC1EEB8", Offset = "0xC1EEB8", VA = "0xC1EEB8")]
			public <>c()
			{
			}

			[Token(Token = "0x600345F")]
			[Address(RVA = "0xC1EEC0", Offset = "0xC1EEC0", VA = "0xC1EEC0")]
			internal int <FindAllQueries>b__8_0(KeyValuePair<string, string> a, KeyValuePair<string, string> b)
			{
				return default(int);
			}

			[Token(Token = "0x6003460")]
			[Address(RVA = "0xC1EF20", Offset = "0xC1EF20", VA = "0xC1EF20")]
			internal string <ParseTranslationResult>b__12_0(Match match)
			{
				return null;
			}

			[Token(Token = "0x6003461")]
			[Address(RVA = "0xC1EFD0", Offset = "0xC1EFD0", VA = "0xC1EFD0")]
			internal string <ParseTranslationResult>b__12_1(Match match)
			{
				return null;
			}
		}

		[Token(Token = "0x40005F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<string, TranslationQuery> _requests;

		[Token(Token = "0x40005F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GoogleTranslation.fnOnTranslationReady _OnTranslationReady;

		[Token(Token = "0x40005F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string mErrorMessage;

		[Token(Token = "0x40005F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string mCurrentBatch_ToLanguageCode;

		[Token(Token = "0x40005F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string mCurrentBatch_FromLanguageCode;

		[Token(Token = "0x40005F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<string> mCurrentBatch_Text;

		[Token(Token = "0x40005F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<KeyValuePair<string, string>> mQueries;

		[Token(Token = "0x6000596")]
		[Address(RVA = "0xC1E1C4", Offset = "0xC1E1C4", VA = "0xC1E1C4")]
		public TranslationJob_WEB(Dictionary<string, TranslationQuery> requests, GoogleTranslation.fnOnTranslationReady OnTranslationReady)
		{
		}

		[Token(Token = "0x6000597")]
		[Address(RVA = "0xC1E208", Offset = "0xC1E208", VA = "0xC1E208")]
		private void FindAllQueries()
		{
		}

		[Token(Token = "0x6000598")]
		[Address(RVA = "0xC1E4C0", Offset = "0xC1E4C0", VA = "0xC1E4C0")]
		private void ExecuteNextBatch()
		{
		}

		[Token(Token = "0x6000599")]
		[Address(RVA = "0xC1E7EC", Offset = "0xC1E7EC", VA = "0xC1E7EC", Slot = "5")]
		public override eJobState GetState()
		{
			return default(eJobState);
		}

		[Token(Token = "0x600059A")]
		[Address(RVA = "0xC1E890", Offset = "0xC1E890", VA = "0xC1E890")]
		public void ProcessResult(byte[] bytes, string errorMsg)
		{
		}

		[Token(Token = "0x600059B")]
		[Address(RVA = "0xC1E9A8", Offset = "0xC1E9A8", VA = "0xC1E9A8")]
		private string ParseTranslationResult(string html, string OriginalText)
		{
			return null;
		}
	}
	[Token(Token = "0x2000100")]
	public enum eLanguageDataFlags
	{
		[Token(Token = "0x40005F9")]
		DISABLED = 1,
		[Token(Token = "0x40005FA")]
		KEEP_LOADED = 2,
		[Token(Token = "0x40005FB")]
		NOT_LOADED = 4
	}
	[Serializable]
	[Token(Token = "0x2000101")]
	public class LanguageData
	{
		[Token(Token = "0x40005FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x40005FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Code;

		[Token(Token = "0x40005FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public byte Flags;

		[NonSerialized]
		[Token(Token = "0x40005FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool Compressed;

		[Token(Token = "0x600059C")]
		[Address(RVA = "0x10BF4E4", Offset = "0x10BF4E4", VA = "0x10BF4E4")]
		public bool IsEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x600059D")]
		[Address(RVA = "0x10BF4F4", Offset = "0x10BF4F4", VA = "0x10BF4F4")]
		public void SetEnabled(bool bEnabled)
		{
		}

		[Token(Token = "0x600059E")]
		[Address(RVA = "0x10BF510", Offset = "0x10BF510", VA = "0x10BF510")]
		public bool IsLoaded()
		{
			return default(bool);
		}

		[Token(Token = "0x600059F")]
		[Address(RVA = "0x10BF520", Offset = "0x10BF520", VA = "0x10BF520")]
		public bool CanBeUnloaded()
		{
			return default(bool);
		}

		[Token(Token = "0x60005A0")]
		[Address(RVA = "0x10BF530", Offset = "0x10BF530", VA = "0x10BF530")]
		public void SetLoaded(bool loaded)
		{
		}

		[Token(Token = "0x60005A1")]
		[Address(RVA = "0x10BF54C", Offset = "0x10BF54C", VA = "0x10BF54C")]
		public void SetCanBeUnLoaded(bool allowUnloading)
		{
		}

		[Token(Token = "0x60005A2")]
		[Address(RVA = "0x10BF568", Offset = "0x10BF568", VA = "0x10BF568")]
		public LanguageData()
		{
		}
	}
	[Token(Token = "0x2000102")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x81EFF4", Offset = "0x81EFF4")]
	[ExecuteInEditMode]
	public class LanguageSource : MonoBehaviour, ISerializationCallbackReceiver, ILanguageSource
	{
		[Token(Token = "0x200064C")]
		public delegate void fnOnSourceUpdated(LanguageSourceData source, bool ReceivedNewData, string errorMsg);

		[Token(Token = "0x4000600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LanguageSourceData mSource;

		[Token(Token = "0x4000601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int version;

		[Token(Token = "0x4000602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool NeverDestroy;

		[Token(Token = "0x4000603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool UserAgreesToHaveItOnTheScene;

		[Token(Token = "0x4000604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		public bool UserAgreesToHaveItInsideThePluginsFolder;

		[Token(Token = "0x4000605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
		public bool GoogleLiveSyncIsUptoDate;

		[Token(Token = "0x4000606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<UnityEngine.Object> Assets;

		[Token(Token = "0x4000607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string Google_WebServiceURL;

		[Token(Token = "0x4000608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string Google_SpreadsheetKey;

		[Token(Token = "0x4000609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string Google_SpreadsheetName;

		[Token(Token = "0x400060A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string Google_LastUpdatedVersion;

		[Token(Token = "0x400060B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public LanguageSourceData.eGoogleUpdateFrequency GoogleUpdateFrequency;

		[Token(Token = "0x400060C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float GoogleUpdateDelay;

		[Token(Token = "0x400060E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<LanguageData> mLanguages;

		[Token(Token = "0x400060F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool IgnoreDeviceLanguage;

		[Token(Token = "0x4000610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public LanguageSourceData.eAllowUnloadLanguages _AllowUnloadingLanguages;

		[Token(Token = "0x4000611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<TermData> mTerms;

		[Token(Token = "0x4000612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool CaseInsensitiveTerms;

		[Token(Token = "0x4000613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public LanguageSourceData.MissingTranslationAction OnMissingTranslation;

		[Token(Token = "0x4000614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public string mTerm_AppName;

		[Token(Token = "0x17000044")]
		public LanguageSourceData SourceData
		{
			[Token(Token = "0x60005A3")]
			[Address(RVA = "0x10BF570", Offset = "0x10BF570", VA = "0x10BF570", Slot = "6")]
			get
			{
				return null;
			}
			[Token(Token = "0x60005A4")]
			[Address(RVA = "0x10BF578", Offset = "0x10BF578", VA = "0x10BF578", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x14000010")]
		public event fnOnSourceUpdated Event_OnSourceUpdateFromGoogle
		{
			[Token(Token = "0x60005A5")]
			[Address(RVA = "0x10BF580", Offset = "0x10BF580", VA = "0x10BF580")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830050", Offset = "0x830050")]
			add
			{
			}
			[Token(Token = "0x60005A6")]
			[Address(RVA = "0x10BF624", Offset = "0x10BF624", VA = "0x10BF624")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830060", Offset = "0x830060")]
			remove
			{
			}
		}

		[Token(Token = "0x60005A7")]
		[Address(RVA = "0x10BF6C8", Offset = "0x10BF6C8", VA = "0x10BF6C8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60005A8")]
		[Address(RVA = "0x10BF770", Offset = "0x10BF770", VA = "0x10BF770")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60005A9")]
		[Address(RVA = "0x10BF7F4", Offset = "0x10BF7F4", VA = "0x10BF7F4")]
		public string GetSourceName()
		{
			return null;
		}

		[Token(Token = "0x60005AA")]
		[Address(RVA = "0x10BF8E8", Offset = "0x10BF8E8", VA = "0x10BF8E8", Slot = "4")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x60005AB")]
		[Address(RVA = "0x10BF8F4", Offset = "0x10BF8F4", VA = "0x10BF8F4", Slot = "5")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x60005AC")]
		[Address(RVA = "0x10BFE84", Offset = "0x10BFE84", VA = "0x10BFE84")]
		public LanguageSource()
		{
		}
	}
	[Token(Token = "0x2000103")]
	[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x81F040", Offset = "0x81F040")]
	public class LanguageSourceAsset : ScriptableObject, ILanguageSource
	{
		[Token(Token = "0x4000615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LanguageSourceData mSource;

		[Token(Token = "0x17000045")]
		public LanguageSourceData SourceData
		{
			[Token(Token = "0x60005AD")]
			[Address(RVA = "0x10C0490", Offset = "0x10C0490", VA = "0x10C0490", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x60005AE")]
			[Address(RVA = "0x10C0498", Offset = "0x10C0498", VA = "0x10C0498", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x60005AF")]
		[Address(RVA = "0x10C04A0", Offset = "0x10C04A0", VA = "0x10C04A0")]
		public LanguageSourceAsset()
		{
		}
	}
	[Token(Token = "0x2000104")]
	public interface ILanguageSource
	{
		[Token(Token = "0x17000046")]
		LanguageSourceData SourceData
		{
			[Token(Token = "0x60005B0")]
			get;
			[Token(Token = "0x60005B1")]
			set;
		}
	}
	[Serializable]
	[Token(Token = "0x2000105")]
	[ExecuteInEditMode]
	public class LanguageSourceData
	{
		[Token(Token = "0x200064D")]
		public enum MissingTranslationAction
		{
			[Token(Token = "0x4002531")]
			Empty,
			[Token(Token = "0x4002532")]
			Fallback,
			[Token(Token = "0x4002533")]
			ShowWarning,
			[Token(Token = "0x4002534")]
			ShowTerm
		}

		[Token(Token = "0x200064E")]
		public enum eAllowUnloadLanguages
		{
			[Token(Token = "0x4002536")]
			Never,
			[Token(Token = "0x4002537")]
			OnlyInDevice,
			[Token(Token = "0x4002538")]
			EditorAndDevice
		}

		[Token(Token = "0x200064F")]
		public enum eGoogleUpdateFrequency
		{
			[Token(Token = "0x400253A")]
			Always,
			[Token(Token = "0x400253B")]
			Never,
			[Token(Token = "0x400253C")]
			Daily,
			[Token(Token = "0x400253D")]
			Weekly,
			[Token(Token = "0x400253E")]
			Monthly,
			[Token(Token = "0x400253F")]
			OnlyOnce,
			[Token(Token = "0x4002540")]
			EveryOtherDay
		}

		[Token(Token = "0x2000650")]
		public enum eGoogleUpdateSynchronization
		{
			[Token(Token = "0x4002542")]
			Manual,
			[Token(Token = "0x4002543")]
			OnSceneLoaded,
			[Token(Token = "0x4002544")]
			AsSoonAsDownloaded
		}

		[Serializable]
		[Token(Token = "0x2000651")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820CD0", Offset = "0x820CD0")]
		private sealed class <>c
		{
			[Token(Token = "0x4002545")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4002546")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Predicate<UnityEngine.Object> <>9__39_0;

			[Token(Token = "0x4002547")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<UnityEngine.Object, string> <>9__39_1;

			[Token(Token = "0x4002548")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<IGrouping<string, UnityEngine.Object>, string> <>9__39_2;

			[Token(Token = "0x4002549")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Func<IGrouping<string, UnityEngine.Object>, UnityEngine.Object> <>9__39_3;

			[Token(Token = "0x400254A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public static Comparison<TermData> <>9__43_0;

			[Token(Token = "0x400254B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public static Comparison<TermData> <>9__47_0;

			[Token(Token = "0x6003467")]
			[Address(RVA = "0x10C7F94", Offset = "0x10C7F94", VA = "0x10C7F94")]
			public <>c()
			{
			}

			[Token(Token = "0x6003468")]
			[Address(RVA = "0x10C7F9C", Offset = "0x10C7F9C", VA = "0x10C7F9C")]
			internal bool <UpdateAssetDictionary>b__39_0(UnityEngine.Object x)
			{
				return default(bool);
			}

			[Token(Token = "0x6003469")]
			[Address(RVA = "0x10C8008", Offset = "0x10C8008", VA = "0x10C8008")]
			internal string <UpdateAssetDictionary>b__39_1(UnityEngine.Object o)
			{
				return null;
			}

			[Token(Token = "0x600346A")]
			[Address(RVA = "0x10C8024", Offset = "0x10C8024", VA = "0x10C8024")]
			internal string <UpdateAssetDictionary>b__39_2(IGrouping<string, UnityEngine.Object> g)
			{
				return null;
			}

			[Token(Token = "0x600346B")]
			[Address(RVA = "0x10C80D0", Offset = "0x10C80D0", VA = "0x10C80D0")]
			internal UnityEngine.Object <UpdateAssetDictionary>b__39_3(IGrouping<string, UnityEngine.Object> g)
			{
				return null;
			}

			[Token(Token = "0x600346C")]
			[Address(RVA = "0x10C8120", Offset = "0x10C8120", VA = "0x10C8120")]
			internal int <Export_I2CSV>b__43_0(TermData a, TermData b)
			{
				return default(int);
			}

			[Token(Token = "0x600346D")]
			[Address(RVA = "0x10C8148", Offset = "0x10C8148", VA = "0x10C8148")]
			internal int <Export_CSV>b__47_0(TermData a, TermData b)
			{
				return default(int);
			}
		}

		[Token(Token = "0x2000652")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820CE0", Offset = "0x820CE0")]
		private sealed class <Import_Google_Coroutine>d__65 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400254C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400254D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400254E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LanguageSourceData <>4__this;

			[Token(Token = "0x400254F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool JustCheck;

			[Token(Token = "0x4002550")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private UnityWebRequest <www>5__2;

			[Token(Token = "0x170006F4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003471")]
				[Address(RVA = "0x10C8410", Offset = "0x10C8410", VA = "0x10C8410", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170006F5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003473")]
				[Address(RVA = "0x10C8478", Offset = "0x10C8478", VA = "0x10C8478", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600346E")]
			[Address(RVA = "0x10C5CCC", Offset = "0x10C5CCC", VA = "0x10C5CCC")]
			[DebuggerHidden]
			public <Import_Google_Coroutine>d__65(int <>1__state)
			{
			}

			[Token(Token = "0x600346F")]
			[Address(RVA = "0x10C8170", Offset = "0x10C8170", VA = "0x10C8170", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003470")]
			[Address(RVA = "0x10C8174", Offset = "0x10C8174", VA = "0x10C8174", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003472")]
			[Address(RVA = "0x10C8418", Offset = "0x10C8418", VA = "0x10C8418", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[NonSerialized]
		[Token(Token = "0x4000616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ILanguageSource owner;

		[Token(Token = "0x4000617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool UserAgreesToHaveItOnTheScene;

		[Token(Token = "0x4000618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool UserAgreesToHaveItInsideThePluginsFolder;

		[Token(Token = "0x4000619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool GoogleLiveSyncIsUptoDate;

		[NonSerialized]
		[Token(Token = "0x400061A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool mIsGlobalSource;

		[Token(Token = "0x400061B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<TermData> mTerms;

		[Token(Token = "0x400061C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool CaseInsensitiveTerms;

		[NonSerialized]
		[Token(Token = "0x400061D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Dictionary<string, TermData> mDictionary;

		[Token(Token = "0x400061E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public MissingTranslationAction OnMissingTranslation;

		[Token(Token = "0x400061F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string mTerm_AppName;

		[Token(Token = "0x4000620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<LanguageData> mLanguages;

		[Token(Token = "0x4000621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool IgnoreDeviceLanguage;

		[Token(Token = "0x4000622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public eAllowUnloadLanguages _AllowUnloadingLanguages;

		[Token(Token = "0x4000623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string Google_WebServiceURL;

		[Token(Token = "0x4000624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string Google_SpreadsheetKey;

		[Token(Token = "0x4000625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string Google_SpreadsheetName;

		[Token(Token = "0x4000626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string Google_LastUpdatedVersion;

		[Token(Token = "0x4000627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public eGoogleUpdateFrequency GoogleUpdateFrequency;

		[Token(Token = "0x4000628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public eGoogleUpdateFrequency GoogleInEditorCheckFrequency;

		[Token(Token = "0x4000629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public eGoogleUpdateSynchronization GoogleUpdateSynchronization;

		[Token(Token = "0x400062A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float GoogleUpdateDelay;

		[Token(Token = "0x400062C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public List<UnityEngine.Object> Assets;

		[NonSerialized]
		[Token(Token = "0x400062D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Dictionary<string, UnityEngine.Object> mAssetDictionary;

		[Token(Token = "0x400062E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private string mDelayedGoogleData;

		[Token(Token = "0x400062F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string EmptyCategory;

		[Token(Token = "0x4000630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static char[] CategorySeparators;

		[Token(Token = "0x17000047")]
		public UnityEngine.Object ownerObject
		{
			[Token(Token = "0x60005B2")]
			[Address(RVA = "0x10C0504", Offset = "0x10C0504", VA = "0x10C0504")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000011")]
		public event LanguageSource.fnOnSourceUpdated Event_OnSourceUpdateFromGoogle
		{
			[Token(Token = "0x60005B3")]
			[Address(RVA = "0x10BFDE0", Offset = "0x10BFDE0", VA = "0x10BFDE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830070", Offset = "0x830070")]
			add
			{
			}
			[Token(Token = "0x60005B4")]
			[Address(RVA = "0x10C0588", Offset = "0x10C0588", VA = "0x10C0588")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830080", Offset = "0x830080")]
			remove
			{
			}
		}

		[Token(Token = "0x60005B5")]
		[Address(RVA = "0x10BF6F0", Offset = "0x10BF6F0", VA = "0x10BF6F0")]
		public void Awake()
		{
		}

		[Token(Token = "0x60005B6")]
		[Address(RVA = "0x10BF790", Offset = "0x10BF790", VA = "0x10BF790")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x60005B7")]
		[Address(RVA = "0x10C0F90", Offset = "0x10C0F90", VA = "0x10C0F90")]
		public bool IsEqualTo(LanguageSourceData Source)
		{
			return default(bool);
		}

		[Token(Token = "0x60005B8")]
		[Address(RVA = "0x10C14B0", Offset = "0x10C14B0", VA = "0x10C14B0")]
		internal bool ManagerHasASimilarSource()
		{
			return default(bool);
		}

		[Token(Token = "0x60005B9")]
		[Address(RVA = "0x10C15C4", Offset = "0x10C15C4", VA = "0x10C15C4")]
		public void ClearAllData()
		{
		}

		[Token(Token = "0x60005BA")]
		[Address(RVA = "0x10C1664", Offset = "0x10C1664", VA = "0x10C1664")]
		public bool IsGlobalSource()
		{
			return default(bool);
		}

		[Token(Token = "0x60005BB")]
		[Address(RVA = "0x10C166C", Offset = "0x10C166C", VA = "0x10C166C")]
		public void Editor_SetDirty()
		{
		}

		[Token(Token = "0x60005BC")]
		[Address(RVA = "0x10C0B00", Offset = "0x10C0B00", VA = "0x10C0B00")]
		public void UpdateAssetDictionary()
		{
		}

		[Token(Token = "0x60005BD")]
		[Address(RVA = "0x10C1670", Offset = "0x10C1670", VA = "0x10C1670")]
		public UnityEngine.Object FindAsset(string Name)
		{
			return null;
		}

		[Token(Token = "0x60005BE")]
		[Address(RVA = "0x10C1734", Offset = "0x10C1734", VA = "0x10C1734")]
		public bool HasAsset(UnityEngine.Object Obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60005BF")]
		[Address(RVA = "0x10C179C", Offset = "0x10C179C", VA = "0x10C179C")]
		public void AddAsset(UnityEngine.Object Obj)
		{
		}

		[Token(Token = "0x60005C0")]
		[Address(RVA = "0x10C183C", Offset = "0x10C183C", VA = "0x10C183C")]
		public string Export_I2CSV(string Category, char Separator = ',', bool specializationsAsRows = true)
		{
			return null;
		}

		[Token(Token = "0x60005C1")]
		[Address(RVA = "0x10C1E34", Offset = "0x10C1E34", VA = "0x10C1E34")]
		private static void AppendI2Term(StringBuilder Builder, int nLanguages, string Term, TermData termData, char Separator, string forceSpecialization)
		{
		}

		[Token(Token = "0x60005C2")]
		[Address(RVA = "0x10C20AC", Offset = "0x10C20AC", VA = "0x10C20AC")]
		private static void AppendI2Text(StringBuilder Builder, string text)
		{
		}

		[Token(Token = "0x60005C3")]
		[Address(RVA = "0x10C2180", Offset = "0x10C2180", VA = "0x10C2180")]
		private string Export_Language_to_Cache(int langIndex, bool fillTermWithFallback)
		{
			return null;
		}

		[Token(Token = "0x60005C4")]
		[Address(RVA = "0x10C26CC", Offset = "0x10C26CC", VA = "0x10C26CC")]
		public string Export_CSV(string Category, char Separator = ',', bool specializationsAsRows = true)
		{
			return null;
		}

		[Token(Token = "0x60005C5")]
		[Address(RVA = "0x10C2EE4", Offset = "0x10C2EE4", VA = "0x10C2EE4")]
		private static void AppendTerm(StringBuilder Builder, int nLanguages, string Term, TermData termData, string specialization, char Separator)
		{
		}

		[Token(Token = "0x60005C6")]
		[Address(RVA = "0x10C2DB4", Offset = "0x10C2DB4", VA = "0x10C2DB4")]
		private static void AppendString(StringBuilder Builder, string Text, char Separator)
		{
		}

		[Token(Token = "0x60005C7")]
		[Address(RVA = "0x10C3170", Offset = "0x10C3170", VA = "0x10C3170")]
		private static void AppendTranslation(StringBuilder Builder, string Text, char Separator, string tags)
		{
		}

		[Token(Token = "0x60005C8")]
		[Address(RVA = "0x10C32C0", Offset = "0x10C32C0", VA = "0x10C32C0")]
		public UnityWebRequest Export_Google_CreateWWWcall(eSpreadsheetUpdateMode UpdateMode = eSpreadsheetUpdateMode.Replace)
		{
			return null;
		}

		[Token(Token = "0x60005C9")]
		[Address(RVA = "0x10C3444", Offset = "0x10C3444", VA = "0x10C3444")]
		private string Export_Google_CreateData()
		{
			return null;
		}

		[Token(Token = "0x60005CA")]
		[Address(RVA = "0x10C37FC", Offset = "0x10C37FC", VA = "0x10C37FC")]
		public string Import_CSV(string Category, string CSVstring, eSpreadsheetUpdateMode UpdateMode = eSpreadsheetUpdateMode.Replace, char Separator = ',')
		{
			return null;
		}

		[Token(Token = "0x60005CB")]
		[Address(RVA = "0x10C4378", Offset = "0x10C4378", VA = "0x10C4378")]
		public string Import_I2CSV(string Category, string I2CSVstring, eSpreadsheetUpdateMode UpdateMode = eSpreadsheetUpdateMode.Replace)
		{
			return null;
		}

		[Token(Token = "0x60005CC")]
		[Address(RVA = "0x10C3918", Offset = "0x10C3918", VA = "0x10C3918")]
		public string Import_CSV(string Category, List<string[]> CSV, eSpreadsheetUpdateMode UpdateMode = eSpreadsheetUpdateMode.Replace)
		{
			return null;
		}

		[Token(Token = "0x60005CD")]
		[Address(RVA = "0x10C4560", Offset = "0x10C4560", VA = "0x10C4560")]
		private bool ArrayContains(string MainText, params string[] texts)
		{
			return default(bool);
		}

		[Token(Token = "0x60005CE")]
		[Address(RVA = "0x10C4964", Offset = "0x10C4964", VA = "0x10C4964")]
		public static eTermType GetTermType(string type)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60005CF")]
		[Address(RVA = "0x10C4BF8", Offset = "0x10C4BF8", VA = "0x10C4BF8")]
		private void Import_Language_from_Cache(int langIndex, string langData, bool useFallback, bool onlyCurrentSpecialization)
		{
		}

		[Token(Token = "0x60005D0")]
		[Address(RVA = "0x10C4E18", Offset = "0x10C4E18", VA = "0x10C4E18")]
		public static void FreeUnusedLanguages()
		{
		}

		[Token(Token = "0x60005D1")]
		[Address(RVA = "0x10C4FC4", Offset = "0x10C4FC4", VA = "0x10C4FC4")]
		public void Import_Google_FromCache()
		{
		}

		[Token(Token = "0x60005D2")]
		[Address(RVA = "0x10C53AC", Offset = "0x10C53AC", VA = "0x10C53AC")]
		private bool IsNewerVersion(string currentVersion, string newVersion)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D3")]
		[Address(RVA = "0x10C59C4", Offset = "0x10C59C4", VA = "0x10C59C4")]
		public void Import_Google(bool ForceUpdate, bool justCheck)
		{
		}

		[Token(Token = "0x60005D4")]
		[Address(RVA = "0x10C51FC", Offset = "0x10C51FC", VA = "0x10C51FC")]
		private string GetSourcePlayerPrefName()
		{
			return null;
		}

		[Token(Token = "0x60005D5")]
		[Address(RVA = "0x10C5C48", Offset = "0x10C5C48", VA = "0x10C5C48")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x830090", Offset = "0x830090")]
		private IEnumerator Import_Google_Coroutine(bool JustCheck)
		{
			return null;
		}

		[Token(Token = "0x60005D6")]
		[Address(RVA = "0x10C5CF8", Offset = "0x10C5CF8", VA = "0x10C5CF8")]
		private void ApplyDownloadedDataOnSceneLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x60005D7")]
		[Address(RVA = "0x10C5D9C", Offset = "0x10C5D9C", VA = "0x10C5D9C")]
		public void ApplyDownloadedDataFromGoogle()
		{
		}

		[Token(Token = "0x60005D8")]
		[Address(RVA = "0x10C5EE0", Offset = "0x10C5EE0", VA = "0x10C5EE0")]
		public UnityWebRequest Import_Google_CreateWWWcall(bool ForceUpdate, bool justCheck)
		{
			return null;
		}

		[Token(Token = "0x60005D9")]
		[Address(RVA = "0x10C602C", Offset = "0x10C602C", VA = "0x10C602C")]
		public bool HasGoogleSpreadsheet()
		{
			return default(bool);
		}

		[Token(Token = "0x60005DA")]
		[Address(RVA = "0x10C543C", Offset = "0x10C543C", VA = "0x10C543C")]
		public string Import_Google_Result(string JsonString, eSpreadsheetUpdateMode UpdateMode, bool saveInPlayerPrefs = false)
		{
			return null;
		}

		[Token(Token = "0x60005DB")]
		[Address(RVA = "0x10C10F0", Offset = "0x10C10F0", VA = "0x10C10F0")]
		public int GetLanguageIndex(string language, bool AllowDiscartingRegion = true, bool SkipDisabled = true)
		{
			return default(int);
		}

		[Token(Token = "0x60005DC")]
		[Address(RVA = "0x10C62AC", Offset = "0x10C62AC", VA = "0x10C62AC")]
		public LanguageData GetLanguageData(string language, bool AllowDiscartingRegion = true)
		{
			return null;
		}

		[Token(Token = "0x60005DD")]
		[Address(RVA = "0x10C634C", Offset = "0x10C634C", VA = "0x10C634C")]
		public bool IsCurrentLanguage(int languageIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x60005DE")]
		[Address(RVA = "0x10C4604", Offset = "0x10C4604", VA = "0x10C4604")]
		public int GetLanguageIndexFromCode(string Code, bool exactMatch = true, bool ignoreDisabled = false)
		{
			return default(int);
		}

		[Token(Token = "0x60005DF")]
		[Address(RVA = "0x10C60D4", Offset = "0x10C60D4", VA = "0x10C60D4")]
		public static int GetCommonWordInLanguageNames(string Language1, string Language2)
		{
			return default(int);
		}

		[Token(Token = "0x60005E0")]
		[Address(RVA = "0x10C63FC", Offset = "0x10C63FC", VA = "0x10C63FC")]
		public static bool AreTheSameLanguage(string Language1, string Language2)
		{
			return default(bool);
		}

		[Token(Token = "0x60005E1")]
		[Address(RVA = "0x10C6498", Offset = "0x10C6498", VA = "0x10C6498")]
		public static string GetLanguageWithoutRegion(string Language)
		{
			return null;
		}

		[Token(Token = "0x60005E2")]
		[Address(RVA = "0x10C6538", Offset = "0x10C6538", VA = "0x10C6538")]
		public void AddLanguage(string LanguageName)
		{
		}

		[Token(Token = "0x60005E3")]
		[Address(RVA = "0x10C65C0", Offset = "0x10C65C0", VA = "0x10C65C0")]
		public void AddLanguage(string LanguageName, string LanguageCode)
		{
		}

		[Token(Token = "0x60005E4")]
		[Address(RVA = "0x10C6738", Offset = "0x10C6738", VA = "0x10C6738")]
		public void RemoveLanguage(string LanguageName)
		{
		}

		[Token(Token = "0x60005E5")]
		[Address(RVA = "0x10C6A28", Offset = "0x10C6A28", VA = "0x10C6A28")]
		public List<string> GetLanguages(bool skipDisabled = true)
		{
			return null;
		}

		[Token(Token = "0x60005E6")]
		[Address(RVA = "0x10C6B54", Offset = "0x10C6B54", VA = "0x10C6B54")]
		public List<string> GetLanguagesCode(bool allowRegions = true, bool skipDisabled = true)
		{
			return null;
		}

		[Token(Token = "0x60005E7")]
		[Address(RVA = "0x10C6CE8", Offset = "0x10C6CE8", VA = "0x10C6CE8")]
		public bool IsLanguageEnabled(string Language)
		{
			return default(bool);
		}

		[Token(Token = "0x60005E8")]
		[Address(RVA = "0x10C6D94", Offset = "0x10C6D94", VA = "0x10C6D94")]
		public void EnableLanguage(string Language, bool bEnabled)
		{
		}

		[Token(Token = "0x60005E9")]
		[Address(RVA = "0x10C6E48", Offset = "0x10C6E48", VA = "0x10C6E48")]
		public bool AllowUnloadingLanguages()
		{
			return default(bool);
		}

		[Token(Token = "0x60005EA")]
		[Address(RVA = "0x10C6E58", Offset = "0x10C6E58", VA = "0x10C6E58")]
		private string GetSavedLanguageFileName(int languageIndex)
		{
			return null;
		}

		[Token(Token = "0x60005EB")]
		[Address(RVA = "0x10C7020", Offset = "0x10C7020", VA = "0x10C7020")]
		public void LoadLanguage(int languageIndex, bool UnloadOtherLanguages, bool useFallback, bool onlyCurrentSpecialization, bool forceLoad)
		{
		}

		[Token(Token = "0x60005EC")]
		[Address(RVA = "0x10C73C8", Offset = "0x10C73C8", VA = "0x10C73C8")]
		public void LoadAllLanguages(bool forceLoad = false)
		{
		}

		[Token(Token = "0x60005ED")]
		[Address(RVA = "0x10C71A8", Offset = "0x10C71A8", VA = "0x10C71A8")]
		public void UnloadLanguage(int languageIndex)
		{
		}

		[Token(Token = "0x60005EE")]
		[Address(RVA = "0x10C4AD8", Offset = "0x10C4AD8", VA = "0x10C4AD8")]
		public void SaveLanguages(bool unloadAll, PersistentStorage.eFileType fileLocation = PersistentStorage.eFileType.Temporal)
		{
		}

		[Token(Token = "0x60005EF")]
		[Address(RVA = "0x10C4A34", Offset = "0x10C4A34", VA = "0x10C4A34")]
		public bool HasUnloadedLanguages()
		{
			return default(bool);
		}

		[Token(Token = "0x60005F0")]
		[Address(RVA = "0x10C3624", Offset = "0x10C3624", VA = "0x10C3624")]
		public List<string> GetCategories(bool OnlyMainCategory = false, [Optional] List<string> Categories)
		{
			return null;
		}

		[Token(Token = "0x60005F1")]
		[Address(RVA = "0x10C7564", Offset = "0x10C7564", VA = "0x10C7564")]
		public static string GetKeyFromFullTerm(string FullTerm, bool OnlyMainCategory = false)
		{
			return null;
		}

		[Token(Token = "0x60005F2")]
		[Address(RVA = "0x10C745C", Offset = "0x10C745C", VA = "0x10C745C")]
		public static string GetCategoryFromFullTerm(string FullTerm, bool OnlyMainCategory = false)
		{
			return null;
		}

		[Token(Token = "0x60005F3")]
		[Address(RVA = "0x10C7648", Offset = "0x10C7648", VA = "0x10C7648")]
		public static void DeserializeFullTerm(string FullTerm, out string Key, out string Category, bool OnlyMainCategory = false)
		{
		}

		[Token(Token = "0x60005F4")]
		[Address(RVA = "0x10C0820", Offset = "0x10C0820", VA = "0x10C0820")]
		public void UpdateDictionary(bool force = false)
		{
		}

		[Token(Token = "0x60005F5")]
		[Address(RVA = "0x10C777C", Offset = "0x10C777C", VA = "0x10C777C")]
		public string GetTranslation(string term, [Optional] string overrideLanguage, [Optional] string overrideSpecialization, bool skipDisabled = false, bool allowCategoryMistmatch = false)
		{
			return null;
		}

		[Token(Token = "0x60005F6")]
		[Address(RVA = "0x10C7828", Offset = "0x10C7828", VA = "0x10C7828")]
		public bool TryGetTranslation(string term, out string Translation, [Optional] string overrideLanguage, [Optional] string overrideSpecialization, bool skipDisabled = false, bool allowCategoryMistmatch = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60005F7")]
		[Address(RVA = "0x10C240C", Offset = "0x10C240C", VA = "0x10C240C")]
		private bool TryGetFallbackTranslation(TermData termData, out string Translation, int langIndex, [Optional] string overrideSpecialization, bool skipDisabled = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60005F8")]
		[Address(RVA = "0x10C7A30", Offset = "0x10C7A30", VA = "0x10C7A30")]
		public TermData AddTerm(string term)
		{
			return null;
		}

		[Token(Token = "0x60005F9")]
		[Address(RVA = "0x10C12DC", Offset = "0x10C12DC", VA = "0x10C12DC")]
		public TermData GetTermData(string term, bool allowCategoryMistmatch = false)
		{
			return null;
		}

		[Token(Token = "0x60005FA")]
		[Address(RVA = "0x10C7BC8", Offset = "0x10C7BC8", VA = "0x10C7BC8")]
		public bool ContainsTerm(string term)
		{
			return default(bool);
		}

		[Token(Token = "0x60005FB")]
		[Address(RVA = "0x10C7BE8", Offset = "0x10C7BE8", VA = "0x10C7BE8")]
		public List<string> GetTermsList([Optional] string Category)
		{
			return null;
		}

		[Token(Token = "0x60005FC")]
		[Address(RVA = "0x10C7A3C", Offset = "0x10C7A3C", VA = "0x10C7A3C")]
		public TermData AddTerm(string NewTerm, eTermType termType, bool SaveSource = true)
		{
			return null;
		}

		[Token(Token = "0x60005FD")]
		[Address(RVA = "0x10C7DA4", Offset = "0x10C7DA4", VA = "0x10C7DA4")]
		public void RemoveTerm(string term)
		{
		}

		[Token(Token = "0x60005FE")]
		[Address(RVA = "0x10C47C4", Offset = "0x10C47C4", VA = "0x10C47C4")]
		public static void ValidateFullTerm(ref string Term)
		{
		}

		[Token(Token = "0x60005FF")]
		[Address(RVA = "0x10BFBF0", Offset = "0x10BFBF0", VA = "0x10BFBF0")]
		public LanguageSourceData()
		{
		}
	}
	[Token(Token = "0x2000106")]
	public enum eSpreadsheetUpdateMode
	{
		[Token(Token = "0x4000632")]
		None,
		[Token(Token = "0x4000633")]
		Replace,
		[Token(Token = "0x4000634")]
		Merge,
		[Token(Token = "0x4000635")]
		AddNewTerms
	}
	[Token(Token = "0x2000107")]
	public class LocalizationReader
	{
		[Token(Token = "0x6000601")]
		[Address(RVA = "0x10CF940", Offset = "0x10CF940", VA = "0x10CF940")]
		public static Dictionary<string, string> ReadTextAsset(TextAsset asset)
		{
			return null;
		}

		[Token(Token = "0x6000602")]
		[Address(RVA = "0x10CFB90", Offset = "0x10CFB90", VA = "0x10CFB90")]
		public static bool TextAsset_ReadLine(string line, out string key, out string value, out string category, out string comment, out string termType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000603")]
		[Address(RVA = "0x10CFF28", Offset = "0x10CFF28", VA = "0x10CFF28")]
		public static string ReadCSVfile(string Path, Encoding encoding)
		{
			return null;
		}

		[Token(Token = "0x6000604")]
		[Address(RVA = "0x10C3844", Offset = "0x10C3844", VA = "0x10C3844")]
		public static List<string[]> ReadCSV(string Text, char Separator = ',')
		{
			return null;
		}

		[Token(Token = "0x6000605")]
		[Address(RVA = "0x10D00AC", Offset = "0x10D00AC", VA = "0x10D00AC")]
		private static string[] ParseCSVline(string Line, ref int iStart, char Separator)
		{
			return null;
		}

		[Token(Token = "0x6000606")]
		[Address(RVA = "0x10D028C", Offset = "0x10D028C", VA = "0x10D028C")]
		private static void AddCSVtoken(ref List<string> list, ref string Line, int iEnd, ref int iWordStart)
		{
		}

		[Token(Token = "0x6000607")]
		[Address(RVA = "0x10C43BC", Offset = "0x10C43BC", VA = "0x10C43BC")]
		public static List<string[]> ReadI2CSV(string Text)
		{
			return null;
		}

		[Token(Token = "0x6000608")]
		[Address(RVA = "0x10CFE98", Offset = "0x10CFE98", VA = "0x10CFE98")]
		public static void ValidateFullTerm(ref string Term)
		{
		}

		[Token(Token = "0x6000609")]
		[Address(RVA = "0x10D03B4", Offset = "0x10D03B4", VA = "0x10D03B4")]
		public static string EncodeString(string str)
		{
			return null;
		}

		[Token(Token = "0x600060A")]
		[Address(RVA = "0x10CFE00", Offset = "0x10CFE00", VA = "0x10CFE00")]
		public static string DecodeString(string str)
		{
			return null;
		}

		[Token(Token = "0x600060B")]
		[Address(RVA = "0x10D0484", Offset = "0x10D0484", VA = "0x10D0484")]
		public LocalizationReader()
		{
		}
	}
	[Token(Token = "0x2000108")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x81F0A4", Offset = "0x81F0A4")]
	public class Localize : MonoBehaviour
	{
		[Token(Token = "0x2000653")]
		public enum TermModification
		{
			[Token(Token = "0x4002552")]
			DontModify,
			[Token(Token = "0x4002553")]
			ToUpper,
			[Token(Token = "0x4002554")]
			ToLower,
			[Token(Token = "0x4002555")]
			ToUpperFirst,
			[Token(Token = "0x4002556")]
			ToTitle
		}

		[Serializable]
		[Token(Token = "0x2000654")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820CF0", Offset = "0x820CF0")]
		private sealed class <>c
		{
			[Token(Token = "0x4002557")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4002558")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Predicate<UnityEngine.Object> <>9__49_0;

			[Token(Token = "0x4002559")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<UnityEngine.Object, string> <>9__49_1;

			[Token(Token = "0x400255A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<IGrouping<string, UnityEngine.Object>, string> <>9__49_2;

			[Token(Token = "0x400255B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Func<IGrouping<string, UnityEngine.Object>, UnityEngine.Object> <>9__49_3;

			[Token(Token = "0x6003475")]
			[Address(RVA = "0xC0EF70", Offset = "0xC0EF70", VA = "0xC0EF70")]
			public <>c()
			{
			}

			[Token(Token = "0x6003476")]
			[Address(RVA = "0xC0EF78", Offset = "0xC0EF78", VA = "0xC0EF78")]
			internal bool <UpdateAssetDictionary>b__49_0(UnityEngine.Object x)
			{
				return default(bool);
			}

			[Token(Token = "0x6003477")]
			[Address(RVA = "0xC0EFE4", Offset = "0xC0EFE4", VA = "0xC0EFE4")]
			internal string <UpdateAssetDictionary>b__49_1(UnityEngine.Object o)
			{
				return null;
			}

			[Token(Token = "0x6003478")]
			[Address(RVA = "0xC0F000", Offset = "0xC0F000", VA = "0xC0F000")]
			internal string <UpdateAssetDictionary>b__49_2(IGrouping<string, UnityEngine.Object> g)
			{
				return null;
			}

			[Token(Token = "0x6003479")]
			[Address(RVA = "0xC0F0AC", Offset = "0xC0F0AC", VA = "0xC0F0AC")]
			internal UnityEngine.Object <UpdateAssetDictionary>b__49_3(IGrouping<string, UnityEngine.Object> g)
			{
				return null;
			}
		}

		[Token(Token = "0x4000636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string mTerm;

		[Token(Token = "0x4000637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string mTermSecondary;

		[NonSerialized]
		[Token(Token = "0x4000638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string FinalTerm;

		[NonSerialized]
		[Token(Token = "0x4000639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string FinalSecondaryTerm;

		[Token(Token = "0x400063A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TermModification PrimaryTermModifier;

		[Token(Token = "0x400063B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public TermModification SecondaryTermModifier;

		[Token(Token = "0x400063C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string TermPrefix;

		[Token(Token = "0x400063D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string TermSuffix;

		[Token(Token = "0x400063E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool LocalizeOnAwake;

		[Token(Token = "0x400063F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private string LastLocalizedLanguage;

		[Token(Token = "0x4000640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool IgnoreRTL;

		[Token(Token = "0x4000641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int MaxCharactersInRTL;

		[Token(Token = "0x4000642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool IgnoreNumbersInRTL;

		[Token(Token = "0x4000643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool CorrectAlignmentForRTL;

		[Token(Token = "0x4000644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		public bool AddSpacesToJoinedLanguages;

		[Token(Token = "0x4000645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
		public bool AllowLocalizedParameters;

		[Token(Token = "0x4000646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<UnityEngine.Object> TranslatedObjects;

		[NonSerialized]
		[Token(Token = "0x4000647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Dictionary<string, UnityEngine.Object> mAssetDictionary;

		[Token(Token = "0x4000648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public UnityEvent LocalizeEvent;

		[Token(Token = "0x4000649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string MainTranslation;

		[Token(Token = "0x400064A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string SecondaryTranslation;

		[Token(Token = "0x400064B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string CallBackTerm;

		[Token(Token = "0x400064C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static string CallBackSecondaryTerm;

		[Token(Token = "0x400064D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static Localize CurrentLocalizeComponent;

		[Token(Token = "0x400064E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool AlwaysForceLocalize;

		[Token(Token = "0x400064F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		public EventCallback LocalizeCallBack;

		[Token(Token = "0x4000650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool mGUI_ShowReferences;

		[Token(Token = "0x4000651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		public bool mGUI_ShowTems;

		[Token(Token = "0x4000652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9A")]
		public bool mGUI_ShowCallback;

		[Token(Token = "0x4000653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public ILocalizeTarget mLocalizeTarget;

		[Token(Token = "0x4000654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public string mLocalizeTargetName;

		[Token(Token = "0x17000048")]
		public string Term
		{
			[Token(Token = "0x600060C")]
			[Address(RVA = "0x10D048C", Offset = "0x10D048C", VA = "0x10D048C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600060D")]
			[Address(RVA = "0x10D0494", Offset = "0x10D0494", VA = "0x10D0494")]
			set
			{
			}
		}

		[Token(Token = "0x17000049")]
		public string SecondaryTerm
		{
			[Token(Token = "0x600060E")]
			[Address(RVA = "0x10D04D8", Offset = "0x10D04D8", VA = "0x10D04D8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600060F")]
			[Address(RVA = "0x10D04E0", Offset = "0x10D04E0", VA = "0x10D04E0")]
			set
			{
			}
		}

		[Token(Token = "0x6000610")]
		[Address(RVA = "0x10D0540", Offset = "0x10D0540", VA = "0x10D0540")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000611")]
		[Address(RVA = "0x10D0D50", Offset = "0x10D0D50", VA = "0x10D0D50")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000612")]
		[Address(RVA = "0x10D0D58", Offset = "0x10D0D58", VA = "0x10D0D58")]
		public bool HasCallback()
		{
			return default(bool);
		}

		[Token(Token = "0x6000613")]
		[Address(RVA = "0x10CD9A8", Offset = "0x10CD9A8", VA = "0x10CD9A8")]
		public void OnLocalize(bool Force = false)
		{
		}

		[Token(Token = "0x6000614")]
		[Address(RVA = "0x10D0888", Offset = "0x10D0888", VA = "0x10D0888")]
		public bool FindTarget()
		{
			return default(bool);
		}

		[Token(Token = "0x6000615")]
		[Address(RVA = "0x10D0DAC", Offset = "0x10D0DAC", VA = "0x10D0DAC")]
		public void GetFinalTerms(out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x6000616")]
		[Address(RVA = "0x10D0F08", Offset = "0x10D0F08", VA = "0x10D0F08")]
		public string GetMainTargetsText()
		{
			return null;
		}

		[Token(Token = "0x6000617")]
		[Address(RVA = "0x10D0FE0", Offset = "0x10D0FE0", VA = "0x10D0FE0")]
		public void SetFinalTerms(string Main, string Secondary, out string primaryTerm, out string secondaryTerm, bool RemoveNonASCII)
		{
		}

		[Token(Token = "0x6000618")]
		[Address(RVA = "0x10D0498", Offset = "0x10D0498", VA = "0x10D0498")]
		public void SetTerm(string primary)
		{
		}

		[Token(Token = "0x6000619")]
		[Address(RVA = "0x10D04EC", Offset = "0x10D04EC", VA = "0x10D04EC")]
		public void SetTerm(string primary, string secondary)
		{
		}

		[Token(Token = "0x600061A")]
		internal T GetSecondaryTranslatedObj<T>(ref string mainTranslation, ref string secondaryTranslation) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x600061B")]
		[Address(RVA = "0x10D0584", Offset = "0x10D0584", VA = "0x10D0584")]
		public void UpdateAssetDictionary()
		{
		}

		[Token(Token = "0x600061C")]
		internal T GetObject<T>(string Translation) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x600061D")]
		private T GetTranslatedObject<T>(string Translation) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x600061E")]
		[Address(RVA = "0x10D1024", Offset = "0x10D1024", VA = "0x10D1024")]
		private void DeserializeTranslation(string translation, out string value, out string secondary)
		{
		}

		[Token(Token = "0x600061F")]
		public T FindTranslatedObject<T>(string value) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6000620")]
		[Address(RVA = "0x10D1118", Offset = "0x10D1118", VA = "0x10D1118")]
		public bool HasTranslatedObject(UnityEngine.Object Obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000621")]
		[Address(RVA = "0x10D11B0", Offset = "0x10D11B0", VA = "0x10D11B0")]
		public void AddTranslatedObject(UnityEngine.Object Obj)
		{
		}

		[Token(Token = "0x6000622")]
		[Address(RVA = "0x10D1250", Offset = "0x10D1250", VA = "0x10D1250")]
		public void SetGlobalLanguage(string Language)
		{
		}

		[Token(Token = "0x6000623")]
		[Address(RVA = "0x10D12B4", Offset = "0x10D12B4", VA = "0x10D12B4")]
		public Localize()
		{
		}
	}
	[Token(Token = "0x2000109")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x81F0DC", Offset = "0x81F0DC")]
	public class LocalizeDropdown : MonoBehaviour
	{
		[Token(Token = "0x4000655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<string> _Terms;

		[Token(Token = "0x6000624")]
		[Address(RVA = "0xC0F0FC", Offset = "0xC0F0FC", VA = "0xC0F0FC")]
		public void Start()
		{
		}

		[Token(Token = "0x6000625")]
		[Address(RVA = "0xC0F294", Offset = "0xC0F294", VA = "0xC0F294")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x6000626")]
		[Address(RVA = "0xC0F328", Offset = "0xC0F328", VA = "0xC0F328")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000627")]
		[Address(RVA = "0xC0F198", Offset = "0xC0F198", VA = "0xC0F198")]
		public void OnLocalize()
		{
		}

		[Token(Token = "0x6000628")]
		[Address(RVA = "0xC0F388", Offset = "0xC0F388", VA = "0xC0F388")]
		private void FillValues()
		{
		}

		[Token(Token = "0x6000629")]
		[Address(RVA = "0xC0F50C", Offset = "0xC0F50C", VA = "0xC0F50C")]
		public void UpdateLocalization()
		{
		}

		[Token(Token = "0x600062A")]
		[Address(RVA = "0xC0F730", Offset = "0xC0F730", VA = "0xC0F730")]
		public LocalizeDropdown()
		{
		}
	}
	[Token(Token = "0x200010A")]
	public static class LocalizationManager
	{
		[Token(Token = "0x2000655")]
		public delegate object _GetParam(string param);

		[Token(Token = "0x2000656")]
		public delegate void OnLocalizeCallback();

		[Token(Token = "0x2000657")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820D00", Offset = "0x820D00")]
		private sealed class <>c__DisplayClass33_0
		{
			[Token(Token = "0x400255C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<string> Languages;

			[Token(Token = "0x400255D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Func<string, bool> <>9__0;

			[Token(Token = "0x6003482")]
			[Address(RVA = "0x10CA4E8", Offset = "0x10CA4E8", VA = "0x10CA4E8")]
			public <>c__DisplayClass33_0()
			{
			}

			[Token(Token = "0x6003483")]
			[Address(RVA = "0x10CEF70", Offset = "0x10CEF70", VA = "0x10CEF70")]
			internal bool <GetAllLanguages>b__0(string x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000658")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820D10", Offset = "0x820D10")]
		private sealed class <>c__DisplayClass34_0
		{
			[Token(Token = "0x400255E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<string> Languages;

			[Token(Token = "0x400255F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Func<string, bool> <>9__0;

			[Token(Token = "0x6003484")]
			[Address(RVA = "0x10CA6F0", Offset = "0x10CA6F0", VA = "0x10CA6F0")]
			public <>c__DisplayClass34_0()
			{
			}

			[Token(Token = "0x6003485")]
			[Address(RVA = "0x10CEFE4", Offset = "0x10CEFE4", VA = "0x10CEFE4")]
			internal bool <GetAllLanguagesCode>b__0(string x)
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x2000659")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820D20", Offset = "0x820D20")]
		private sealed class <>c
		{
			[Token(Token = "0x4002560")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4002561")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static _GetParam <>9__41_0;

			[Token(Token = "0x6003487")]
			[Address(RVA = "0x10CEF00", Offset = "0x10CEF00", VA = "0x10CEF00")]
			public <>c()
			{
			}

			[Token(Token = "0x6003488")]
			[Address(RVA = "0x10CEF08", Offset = "0x10CEF08", VA = "0x10CEF08")]
			internal object <ApplyLocalizationParams>b__41_0(string p)
			{
				return null;
			}
		}

		[Token(Token = "0x200065A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820D30", Offset = "0x820D30")]
		private sealed class <>c__DisplayClass42_0
		{
			[Token(Token = "0x4002562")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject root;

			[Token(Token = "0x6003489")]
			[Address(RVA = "0x10CB004", Offset = "0x10CB004", VA = "0x10CB004")]
			public <>c__DisplayClass42_0()
			{
			}

			[Token(Token = "0x600348A")]
			[Address(RVA = "0x10CF058", Offset = "0x10CF058", VA = "0x10CF058")]
			internal object <ApplyLocalizationParams>b__0(string p)
			{
				return null;
			}
		}

		[Token(Token = "0x200065B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820D40", Offset = "0x820D40")]
		private sealed class <>c__DisplayClass43_0
		{
			[Token(Token = "0x4002563")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Dictionary<string, object> parameters;

			[Token(Token = "0x600348B")]
			[Address(RVA = "0x10CB0DC", Offset = "0x10CB0DC", VA = "0x10CB0DC")]
			public <>c__DisplayClass43_0()
			{
			}

			[Token(Token = "0x600348C")]
			[Address(RVA = "0x10CF0D0", Offset = "0x10CF0D0", VA = "0x10CF0D0")]
			internal object <ApplyLocalizationParams>b__0(string p)
			{
				return null;
			}
		}

		[Token(Token = "0x200065C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820D50", Offset = "0x820D50")]
		private sealed class <Delayed_Import_Google>d__59 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002564")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002565")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002566")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delay;

			[Token(Token = "0x4002567")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public LanguageSourceData source;

			[Token(Token = "0x4002568")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool justCheck;

			[Token(Token = "0x170006F6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003490")]
				[Address(RVA = "0x10CF384", Offset = "0x10CF384", VA = "0x10CF384", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170006F7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003492")]
				[Address(RVA = "0x10CF3EC", Offset = "0x10CF3EC", VA = "0x10CF3EC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600348D")]
			[Address(RVA = "0x10CC474", Offset = "0x10CC474", VA = "0x10CC474")]
			[DebuggerHidden]
			public <Delayed_Import_Google>d__59(int <>1__state)
			{
			}

			[Token(Token = "0x600348E")]
			[Address(RVA = "0x10CF2CC", Offset = "0x10CF2CC", VA = "0x10CF2CC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600348F")]
			[Address(RVA = "0x10CF2D0", Offset = "0x10CF2D0", VA = "0x10CF2D0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003491")]
			[Address(RVA = "0x10CF38C", Offset = "0x10CF38C", VA = "0x10CF38C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200065D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820D60", Offset = "0x820D60")]
		private sealed class <>c__DisplayClass69_0
		{
			[Token(Token = "0x4002569")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ILocalizeTargetDescriptor desc;

			[Token(Token = "0x6003493")]
			[Address(RVA = "0x10CD000", Offset = "0x10CD000", VA = "0x10CD000")]
			public <>c__DisplayClass69_0()
			{
			}

			[Token(Token = "0x6003494")]
			[Address(RVA = "0x10CF150", Offset = "0x10CF150", VA = "0x10CF150")]
			internal bool <RegisterTarget>b__0(ILocalizeTargetDescriptor x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200065E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820D70", Offset = "0x820D70")]
		private sealed class <Coroutine_LocalizeAll>d__84 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400256A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400256B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x170006F8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003498")]
				[Address(RVA = "0x10CF25C", Offset = "0x10CF25C", VA = "0x10CF25C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170006F9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600349A")]
				[Address(RVA = "0x10CF2C4", Offset = "0x10CF2C4", VA = "0x10CF2C4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003495")]
			[Address(RVA = "0x10CD97C", Offset = "0x10CD97C", VA = "0x10CD97C")]
			[DebuggerHidden]
			public <Coroutine_LocalizeAll>d__84(int <>1__state)
			{
			}

			[Token(Token = "0x6003496")]
			[Address(RVA = "0x10CF17C", Offset = "0x10CF17C", VA = "0x10CF17C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003497")]
			[Address(RVA = "0x10CF180", Offset = "0x10CF180", VA = "0x10CF180", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003499")]
			[Address(RVA = "0x10CF264", Offset = "0x10CF264", VA = "0x10CF264", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string mCurrentLanguage;

		[Token(Token = "0x4000657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static string mLanguageCode;

		[Token(Token = "0x4000658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static CultureInfo mCurrentCulture;

		[Token(Token = "0x4000659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static bool mChangeCultureInfo;

		[Token(Token = "0x400065A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public static bool IsRight2Left;

		[Token(Token = "0x400065B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public static bool HasJoinedWords;

		[Token(Token = "0x400065C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static List<ILocalizationParamsManager> ParamManagers;

		[Token(Token = "0x400065D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static string[] LanguagesRTL;

		[Token(Token = "0x400065E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static List<LanguageSourceData> Sources;

		[Token(Token = "0x400065F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static string[] GlobalSources;

		[Token(Token = "0x4000660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static string mCurrentDeviceLanguage;

		[Token(Token = "0x4000661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static List<ILocalizeTargetDescriptor> mLocalizeTargets;

		[Token(Token = "0x4000663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private static bool mLocalizeIsScheduled;

		[Token(Token = "0x4000664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private static bool mLocalizeIsScheduledWithForcedValue;

		[Token(Token = "0x4000665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		public static bool HighlightLocalizedTargets;

		[Token(Token = "0x1700004A")]
		public static string CurrentLanguage
		{
			[Token(Token = "0x600062F")]
			[Address(RVA = "0x10C4F58", Offset = "0x10C4F58", VA = "0x10C4F58")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000630")]
			[Address(RVA = "0x10C8B68", Offset = "0x10C8B68", VA = "0x10C8B68")]
			set
			{
			}
		}

		[Token(Token = "0x1700004B")]
		public static string CurrentLanguageCode
		{
			[Token(Token = "0x6000631")]
			[Address(RVA = "0x10C94B4", Offset = "0x10C94B4", VA = "0x10C94B4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000632")]
			[Address(RVA = "0x10C9520", Offset = "0x10C9520", VA = "0x10C9520")]
			set
			{
			}
		}

		[Token(Token = "0x1700004C")]
		public static string CurrentRegion
		{
			[Token(Token = "0x6000633")]
			[Address(RVA = "0x10C9808", Offset = "0x10C9808", VA = "0x10C9808")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000634")]
			[Address(RVA = "0x10C995C", Offset = "0x10C995C", VA = "0x10C995C")]
			set
			{
			}
		}

		[Token(Token = "0x1700004D")]
		public static string CurrentRegionCode
		{
			[Token(Token = "0x6000635")]
			[Address(RVA = "0x10C9AF0", Offset = "0x10C9AF0", VA = "0x10C9AF0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000636")]
			[Address(RVA = "0x10C9BB8", Offset = "0x10C9BB8", VA = "0x10C9BB8")]
			set
			{
			}
		}

		[Token(Token = "0x1700004E")]
		public static CultureInfo CurrentCulture
		{
			[Token(Token = "0x6000637")]
			[Address(RVA = "0x10C9CBC", Offset = "0x10C9CBC", VA = "0x10C9CBC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000012")]
		public static event OnLocalizeCallback OnLocalizeEvent
		{
			[Token(Token = "0x600065F")]
			[Address(RVA = "0x10CD008", Offset = "0x10CD008", VA = "0x10CD008")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830158", Offset = "0x830158")]
			add
			{
			}
			[Token(Token = "0x6000660")]
			[Address(RVA = "0x10CD0F8", Offset = "0x10CD0F8", VA = "0x10CD0F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830168", Offset = "0x830168")]
			remove
			{
			}
		}

		[Token(Token = "0x600062B")]
		[Address(RVA = "0x10B9ADC", Offset = "0x10B9ADC", VA = "0x10B9ADC")]
		public static void InitializeIfNeeded()
		{
		}

		[Token(Token = "0x600062C")]
		[Address(RVA = "0x10C8B20", Offset = "0x10C8B20", VA = "0x10C8B20")]
		public static string GetVersion()
		{
			return null;
		}

		[Token(Token = "0x600062D")]
		[Address(RVA = "0x10C60CC", Offset = "0x10C60CC", VA = "0x10C60CC")]
		public static int GetRequiredWebServiceVersion()
		{
			return default(int);
		}

		[Token(Token = "0x600062E")]
		[Address(RVA = "0x10B9720", Offset = "0x10B9720", VA = "0x10B9720")]
		public static string GetWebServiceURL([Optional] LanguageSourceData source)
		{
			return null;
		}

		[Token(Token = "0x6000638")]
		[Address(RVA = "0x10C92B4", Offset = "0x10C92B4", VA = "0x10C92B4")]
		public static void SetLanguageAndCode(string LanguageName, string LanguageCode, bool RememberLanguage = true, bool Force = false)
		{
		}

		[Token(Token = "0x6000639")]
		[Address(RVA = "0x10C9D24", Offset = "0x10C9D24", VA = "0x10C9D24")]
		private static CultureInfo CreateCultureForCode(string code)
		{
			return null;
		}

		[Token(Token = "0x600063A")]
		[Address(RVA = "0x10C9F38", Offset = "0x10C9F38", VA = "0x10C9F38")]
		public static void EnableChangingCultureInfo(bool bEnable)
		{
		}

		[Token(Token = "0x600063B")]
		[Address(RVA = "0x10C9E28", Offset = "0x10C9E28", VA = "0x10C9E28")]
		private static void SetCurrentCultureInfo()
		{
		}

		[Token(Token = "0x600063C")]
		[Address(RVA = "0x10C8690", Offset = "0x10C8690", VA = "0x10C8690")]
		private static void SelectStartupLanguage()
		{
		}

		[Token(Token = "0x600063D")]
		[Address(RVA = "0x10CA0B8", Offset = "0x10CA0B8", VA = "0x10CA0B8")]
		public static bool HasLanguage(string Language, bool AllowDiscartingRegion = true, bool Initialize = true, bool SkipDisabled = true)
		{
			return default(bool);
		}

		[Token(Token = "0x600063E")]
		[Address(RVA = "0x10C8C58", Offset = "0x10C8C58", VA = "0x10C8C58")]
		public static string GetSupportedLanguage(string Language, bool ignoreDisabled = false)
		{
			return null;
		}

		[Token(Token = "0x600063F")]
		[Address(RVA = "0x10C90D0", Offset = "0x10C90D0", VA = "0x10C90D0")]
		public static string GetLanguageCode(string Language)
		{
			return null;
		}

		[Token(Token = "0x6000640")]
		[Address(RVA = "0x10C9614", Offset = "0x10C9614", VA = "0x10C9614")]
		public static string GetLanguageFromCode(string Code, bool exactMatch = true)
		{
			return null;
		}

		[Token(Token = "0x6000641")]
		[Address(RVA = "0x10CA2C4", Offset = "0x10CA2C4", VA = "0x10CA2C4")]
		public static List<string> GetAllLanguages(bool SkipDisabled = true)
		{
			return null;
		}

		[Token(Token = "0x6000642")]
		[Address(RVA = "0x10CA4F0", Offset = "0x10CA4F0", VA = "0x10CA4F0")]
		public static List<string> GetAllLanguagesCode(bool allowRegions = true, bool SkipDisabled = true)
		{
			return null;
		}

		[Token(Token = "0x6000643")]
		[Address(RVA = "0x10CA6F8", Offset = "0x10CA6F8", VA = "0x10CA6F8")]
		public static bool IsLanguageEnabled(string Language)
		{
			return default(bool);
		}

		[Token(Token = "0x6000644")]
		[Address(RVA = "0x10CA804", Offset = "0x10CA804", VA = "0x10CA804")]
		private static void LoadCurrentLanguage()
		{
		}

		[Token(Token = "0x6000645")]
		[Address(RVA = "0x10CA950", Offset = "0x10CA950", VA = "0x10CA950")]
		public static void PreviewLanguage(string NewLanguage)
		{
		}

		[Token(Token = "0x6000646")]
		[Address(RVA = "0x10C8480", Offset = "0x10C8480", VA = "0x10C8480")]
		public static void AutoLoadGlobalParamManagers()
		{
		}

		[Token(Token = "0x6000647")]
		[Address(RVA = "0x10CAA38", Offset = "0x10CAA38", VA = "0x10CAA38")]
		public static void ApplyLocalizationParams(ref string translation, bool allowLocalizedParameters = true)
		{
		}

		[Token(Token = "0x6000648")]
		[Address(RVA = "0x10CAF34", Offset = "0x10CAF34", VA = "0x10CAF34")]
		public static void ApplyLocalizationParams(ref string translation, GameObject root, bool allowLocalizedParameters = true)
		{
		}

		[Token(Token = "0x6000649")]
		[Address(RVA = "0x10CB00C", Offset = "0x10CB00C", VA = "0x10CB00C")]
		public static void ApplyLocalizationParams(ref string translation, Dictionary<string, object> parameters, bool allowLocalizedParameters = true)
		{
		}

		[Token(Token = "0x600064A")]
		[Address(RVA = "0x10CAB50", Offset = "0x10CAB50", VA = "0x10CAB50")]
		public static void ApplyLocalizationParams(ref string translation, _GetParam getParam, bool allowLocalizedParameters = true)
		{
		}

		[Token(Token = "0x600064B")]
		[Address(RVA = "0x10CB5F0", Offset = "0x10CB5F0", VA = "0x10CB5F0")]
		internal static string GetLocalizationParam(string ParamName, GameObject root)
		{
			return null;
		}

		[Token(Token = "0x600064C")]
		[Address(RVA = "0x10CB89C", Offset = "0x10CB89C", VA = "0x10CB89C")]
		private static string GetPluralType(MatchCollection matches, string langCode, _GetParam getParam)
		{
			return null;
		}

		[Token(Token = "0x600064D")]
		[Address(RVA = "0x10CBA68", Offset = "0x10CBA68", VA = "0x10CBA68")]
		public static string ApplyRTLfix(string line)
		{
			return null;
		}

		[Token(Token = "0x600064E")]
		[Address(RVA = "0x10CBAD4", Offset = "0x10CBAD4", VA = "0x10CBAD4")]
		public static string ApplyRTLfix(string line, int maxCharacters, bool ignoreNumbers)
		{
			return null;
		}

		[Token(Token = "0x600064F")]
		[Address(RVA = "0x10CBEBC", Offset = "0x10CBEBC", VA = "0x10CBEBC")]
		public static string FixRTL_IfNeeded(string text, int maxCharacters = 0, bool ignoreNumber = false)
		{
			return null;
		}

		[Token(Token = "0x6000650")]
		[Address(RVA = "0x10C9EB0", Offset = "0x10C9EB0", VA = "0x10C9EB0")]
		public static bool IsRTL(string Code)
		{
			return default(bool);
		}

		[Token(Token = "0x6000651")]
		[Address(RVA = "0x10C8608", Offset = "0x10C8608", VA = "0x10C8608")]
		public static bool UpdateSources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000652")]
		[Address(RVA = "0x10CBF70", Offset = "0x10CBF70", VA = "0x10CBF70")]
		private static void UnregisterDeletededSources()
		{
		}

		[Token(Token = "0x6000653")]
		[Address(RVA = "0x10CC260", Offset = "0x10CC260", VA = "0x10CC260")]
		private static void RegisterSceneSources()
		{
		}

		[Token(Token = "0x6000654")]
		[Address(RVA = "0x10CC0AC", Offset = "0x10CC0AC", VA = "0x10CC0AC")]
		private static void RegisterSourceInResources()
		{
		}

		[Token(Token = "0x6000655")]
		[Address(RVA = "0x10C062C", Offset = "0x10C062C", VA = "0x10C062C")]
		internal static void AddSource(LanguageSourceData Source)
		{
		}

		[Token(Token = "0x6000656")]
		[Address(RVA = "0x10CC3E0", Offset = "0x10CC3E0", VA = "0x10CC3E0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8300F4", Offset = "0x8300F4")]
		private static IEnumerator Delayed_Import_Google(LanguageSourceData source, float delay, bool justCheck)
		{
			return null;
		}

		[Token(Token = "0x6000657")]
		[Address(RVA = "0x10C0F0C", Offset = "0x10C0F0C", VA = "0x10C0F0C")]
		internal static void RemoveSource(LanguageSourceData Source)
		{
		}

		[Token(Token = "0x6000658")]
		[Address(RVA = "0x10CC4A0", Offset = "0x10CC4A0", VA = "0x10CC4A0")]
		public static bool IsGlobalSource(string SourceName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000659")]
		[Address(RVA = "0x10CC528", Offset = "0x10CC528", VA = "0x10CC528")]
		public static LanguageSourceData GetSourceContaining(string term, bool fallbackToFirst = true)
		{
			return null;
		}

		[Token(Token = "0x600065A")]
		[Address(RVA = "0x10CC714", Offset = "0x10CC714", VA = "0x10CC714")]
		public static UnityEngine.Object FindAsset(string value)
		{
			return null;
		}

		[Token(Token = "0x600065B")]
		[Address(RVA = "0x10CC854", Offset = "0x10CC854", VA = "0x10CC854")]
		public static void ApplyDownloadedDataFromGoogle()
		{
		}

		[Token(Token = "0x600065C")]
		[Address(RVA = "0x10C9FEC", Offset = "0x10C9FEC", VA = "0x10C9FEC")]
		public static string GetCurrentDeviceLanguage(bool force = false)
		{
			return null;
		}

		[Token(Token = "0x600065D")]
		[Address(RVA = "0x10CC940", Offset = "0x10CC940", VA = "0x10CC940")]
		private static void DetectDeviceLanguage()
		{
		}

		[Token(Token = "0x600065E")]
		[Address(RVA = "0x10CCDDC", Offset = "0x10CCDDC", VA = "0x10CCDDC")]
		public static void RegisterTarget(ILocalizeTargetDescriptor desc)
		{
		}

		[Token(Token = "0x6000661")]
		[Address(RVA = "0x10CD1E8", Offset = "0x10CD1E8", VA = "0x10CD1E8")]
		public static string GetTranslation(string Term, bool FixForRTL = true, int maxLineLengthForRTL = 0, bool ignoreRTLnumbers = true, bool applyParameters = false, [Optional] GameObject localParametersRoot, [Optional] string overrideLanguage)
		{
			return null;
		}

		[Token(Token = "0x6000662")]
		[Address(RVA = "0x10CD4AC", Offset = "0x10CD4AC", VA = "0x10CD4AC")]
		public static string GetTermTranslation(string Term, bool FixForRTL = true, int maxLineLengthForRTL = 0, bool ignoreRTLnumbers = true, bool applyParameters = false, [Optional] GameObject localParametersRoot, [Optional] string overrideLanguage)
		{
			return null;
		}

		[Token(Token = "0x6000663")]
		[Address(RVA = "0x10CD2AC", Offset = "0x10CD2AC", VA = "0x10CD2AC")]
		public static bool TryGetTranslation(string Term, out string Translation, bool FixForRTL = true, int maxLineLengthForRTL = 0, bool ignoreRTLnumbers = true, bool applyParameters = false, [Optional] GameObject localParametersRoot, [Optional] string overrideLanguage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000664")]
		public static T GetTranslatedObject<T>(string AssetName, [Optional] Localize optionalLocComp) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6000665")]
		public static T GetTranslatedObjectByTermName<T>(string Term, [Optional] Localize optionalLocComp) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6000666")]
		[Address(RVA = "0x10CD558", Offset = "0x10CD558", VA = "0x10CD558")]
		public static string GetAppName(string languageCode)
		{
			return null;
		}

		[Token(Token = "0x6000667")]
		[Address(RVA = "0x10C0E04", Offset = "0x10C0E04", VA = "0x10C0E04")]
		public static void LocalizeAll(bool Force = false)
		{
		}

		[Token(Token = "0x6000668")]
		[Address(RVA = "0x10CD91C", Offset = "0x10CD91C", VA = "0x10CD91C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x830178", Offset = "0x830178")]
		private static IEnumerator Coroutine_LocalizeAll()
		{
			return null;
		}

		[Token(Token = "0x6000669")]
		[Address(RVA = "0x10CD7A8", Offset = "0x10CD7A8", VA = "0x10CD7A8")]
		private static void DoLocalizeAll(bool Force = false)
		{
		}

		[Token(Token = "0x600066A")]
		[Address(RVA = "0x10CE430", Offset = "0x10CE430", VA = "0x10CE430")]
		public static List<string> GetCategories()
		{
			return null;
		}

		[Token(Token = "0x600066B")]
		[Address(RVA = "0x10CE554", Offset = "0x10CE554", VA = "0x10CE554")]
		public static List<string> GetTermsList([Optional] string Category)
		{
			return null;
		}

		[Token(Token = "0x600066C")]
		[Address(RVA = "0x10CE79C", Offset = "0x10CE79C", VA = "0x10CE79C")]
		public static TermData GetTermData(string term)
		{
			return null;
		}

		[Token(Token = "0x600066D")]
		[Address(RVA = "0x10CB480", Offset = "0x10CB480", VA = "0x10CB480")]
		public static TermData GetTermData(string term, out LanguageSourceData source)
		{
			return null;
		}
	}
	[Token(Token = "0x200010B")]
	public abstract class ILocalizeTarget : ScriptableObject
	{
		[Token(Token = "0x600066F")]
		public abstract bool IsValid(Localize cmp);

		[Token(Token = "0x6000670")]
		public abstract void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm);

		[Token(Token = "0x6000671")]
		public abstract void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation);

		[Token(Token = "0x6000672")]
		public abstract bool CanUseSecondaryTerm();

		[Token(Token = "0x6000673")]
		public abstract bool AllowMainTermToBeRTL();

		[Token(Token = "0x6000674")]
		public abstract bool AllowSecondTermToBeRTL();

		[Token(Token = "0x6000675")]
		public abstract eTermType GetPrimaryTermType(Localize cmp);

		[Token(Token = "0x6000676")]
		public abstract eTermType GetSecondaryTermType(Localize cmp);

		[Token(Token = "0x6000677")]
		[Address(RVA = "0x10BF4D4", Offset = "0x10BF4D4", VA = "0x10BF4D4")]
		protected ILocalizeTarget()
		{
		}
	}
	[Token(Token = "0x200010C")]
	public abstract class LocalizeTarget<T> : ILocalizeTarget where T : UnityEngine.Object
	{
		[Token(Token = "0x4000666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T mTarget;

		[Token(Token = "0x6000678")]
		public override bool IsValid(Localize cmp)
		{
			return default(bool);
		}

		[Token(Token = "0x6000679")]
		protected LocalizeTarget()
		{
		}
	}
	[Token(Token = "0x200010D")]
	public abstract class ILocalizeTargetDescriptor
	{
		[Token(Token = "0x4000667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x4000668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int Priority;

		[Token(Token = "0x600067A")]
		public abstract bool CanLocalize(Localize cmp);

		[Token(Token = "0x600067B")]
		public abstract ILocalizeTarget CreateTarget(Localize cmp);

		[Token(Token = "0x600067C")]
		public abstract Type GetTargetType();

		[Token(Token = "0x600067D")]
		[Address(RVA = "0x10BF4DC", Offset = "0x10BF4DC", VA = "0x10BF4DC")]
		protected ILocalizeTargetDescriptor()
		{
		}
	}
	[Token(Token = "0x200010E")]
	public abstract class LocalizeTargetDesc<T> : ILocalizeTargetDescriptor where T : ILocalizeTarget
	{
		[Token(Token = "0x600067E")]
		public override ILocalizeTarget CreateTarget(Localize cmp)
		{
			return null;
		}

		[Token(Token = "0x600067F")]
		public override Type GetTargetType()
		{
			return null;
		}

		[Token(Token = "0x6000680")]
		protected LocalizeTargetDesc()
		{
		}
	}
	[Token(Token = "0x200010F")]
	public class LocalizeTargetDesc_Type<T, G> : LocalizeTargetDesc<G> where T : UnityEngine.Object where G : LocalizeTarget<T>
	{
		[Token(Token = "0x6000681")]
		public override bool CanLocalize(Localize cmp)
		{
			return default(bool);
		}

		[Token(Token = "0x6000682")]
		public override ILocalizeTarget CreateTarget(Localize cmp)
		{
			return null;
		}

		[Token(Token = "0x6000683")]
		public LocalizeTargetDesc_Type()
		{
		}
	}
	[Token(Token = "0x2000110")]
	public class LocalizeTarget_UnityStandard_AudioSource : LocalizeTarget<AudioSource>
	{
		[Token(Token = "0x6000684")]
		[Address(RVA = "0xC0F880", Offset = "0xC0F880", VA = "0xC0F880")]
		static LocalizeTarget_UnityStandard_AudioSource()
		{
		}

		[Token(Token = "0x6000685")]
		[Address(RVA = "0xC0F884", Offset = "0xC0F884", VA = "0xC0F884")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x8301DC", Offset = "0x8301DC")]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x6000686")]
		[Address(RVA = "0xC0F92C", Offset = "0xC0F92C", VA = "0xC0F92C", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6000687")]
		[Address(RVA = "0xC0F934", Offset = "0xC0F934", VA = "0xC0F934", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6000688")]
		[Address(RVA = "0xC0F93C", Offset = "0xC0F93C", VA = "0xC0F93C", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x6000689")]
		[Address(RVA = "0xC0F944", Offset = "0xC0F944", VA = "0xC0F944", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x600068A")]
		[Address(RVA = "0xC0F94C", Offset = "0xC0F94C", VA = "0xC0F94C", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x600068B")]
		[Address(RVA = "0xC0F954", Offset = "0xC0F954", VA = "0xC0F954", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x600068C")]
		[Address(RVA = "0xC0FA2C", Offset = "0xC0FA2C", VA = "0xC0FA2C", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x600068D")]
		[Address(RVA = "0xC0FBA8", Offset = "0xC0FBA8", VA = "0xC0FBA8")]
		public LocalizeTarget_UnityStandard_AudioSource()
		{
		}
	}
	[Token(Token = "0x2000111")]
	public class LocalizeTargetDesc_Child : LocalizeTargetDesc<LocalizeTarget_UnityStandard_Child>
	{
		[Token(Token = "0x600068E")]
		[Address(RVA = "0xC0F7A0", Offset = "0xC0F7A0", VA = "0xC0F7A0", Slot = "4")]
		public override bool CanLocalize(Localize cmp)
		{
			return default(bool);
		}

		[Token(Token = "0x600068F")]
		[Address(RVA = "0xC0F7D8", Offset = "0xC0F7D8", VA = "0xC0F7D8")]
		public LocalizeTargetDesc_Child()
		{
		}
	}
	[Token(Token = "0x2000112")]
	public class LocalizeTarget_UnityStandard_Child : LocalizeTarget<GameObject>
	{
		[Token(Token = "0x6000690")]
		[Address(RVA = "0xC0FBF8", Offset = "0xC0FBF8", VA = "0xC0FBF8")]
		static LocalizeTarget_UnityStandard_Child()
		{
		}

		[Token(Token = "0x6000691")]
		[Address(RVA = "0xC0FBFC", Offset = "0xC0FBFC", VA = "0xC0FBFC")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x8301F0", Offset = "0x8301F0")]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x6000692")]
		[Address(RVA = "0xC0FC98", Offset = "0xC0FC98", VA = "0xC0FC98", Slot = "4")]
		public override bool IsValid(Localize cmp)
		{
			return default(bool);
		}

		[Token(Token = "0x6000693")]
		[Address(RVA = "0xC0FCD0", Offset = "0xC0FCD0", VA = "0xC0FCD0", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6000694")]
		[Address(RVA = "0xC0FCD8", Offset = "0xC0FCD8", VA = "0xC0FCD8", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6000695")]
		[Address(RVA = "0xC0FCE0", Offset = "0xC0FCE0", VA = "0xC0FCE0", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x6000696")]
		[Address(RVA = "0xC0FCE8", Offset = "0xC0FCE8", VA = "0xC0FCE8", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6000697")]
		[Address(RVA = "0xC0FCF0", Offset = "0xC0FCF0", VA = "0xC0FCF0", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6000698")]
		[Address(RVA = "0xC0FCF8", Offset = "0xC0FCF8", VA = "0xC0FCF8", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x6000699")]
		[Address(RVA = "0xC0FD34", Offset = "0xC0FD34", VA = "0xC0FD34", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x600069A")]
		[Address(RVA = "0xC0FE8C", Offset = "0xC0FE8C", VA = "0xC0FE8C")]
		public LocalizeTarget_UnityStandard_Child()
		{
		}
	}
	[Token(Token = "0x2000113")]
	public class LocalizeTarget_UnityStandard_MeshRenderer : LocalizeTarget<MeshRenderer>
	{
		[Token(Token = "0x600069B")]
		[Address(RVA = "0xC0FEDC", Offset = "0xC0FEDC", VA = "0xC0FEDC")]
		static LocalizeTarget_UnityStandard_MeshRenderer()
		{
		}

		[Token(Token = "0x600069C")]
		[Address(RVA = "0xC0FEE0", Offset = "0xC0FEE0", VA = "0xC0FEE0")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x830204", Offset = "0x830204")]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x600069D")]
		[Address(RVA = "0xC0FF88", Offset = "0xC0FF88", VA = "0xC0FF88", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x600069E")]
		[Address(RVA = "0xC0FF90", Offset = "0xC0FF90", VA = "0xC0FF90", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x600069F")]
		[Address(RVA = "0xC0FF98", Offset = "0xC0FF98", VA = "0xC0FF98", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x60006A0")]
		[Address(RVA = "0xC0FFA0", Offset = "0xC0FFA0", VA = "0xC0FFA0", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60006A1")]
		[Address(RVA = "0xC0FFA8", Offset = "0xC0FFA8", VA = "0xC0FFA8", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60006A2")]
		[Address(RVA = "0xC0FFB0", Offset = "0xC0FFB0", VA = "0xC0FFB0", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x60006A3")]
		[Address(RVA = "0xC101B0", Offset = "0xC101B0", VA = "0xC101B0", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x60006A4")]
		[Address(RVA = "0xC10388", Offset = "0xC10388", VA = "0xC10388")]
		public LocalizeTarget_UnityStandard_MeshRenderer()
		{
		}
	}
	[Token(Token = "0x2000114")]
	public class LocalizeTargetDesc_Prefab : LocalizeTargetDesc<LocalizeTarget_UnityStandard_Prefab>
	{
		[Token(Token = "0x60006A5")]
		[Address(RVA = "0xC0F828", Offset = "0xC0F828", VA = "0xC0F828", Slot = "4")]
		public override bool CanLocalize(Localize cmp)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A6")]
		[Address(RVA = "0xC0F830", Offset = "0xC0F830", VA = "0xC0F830")]
		public LocalizeTargetDesc_Prefab()
		{
		}
	}
	[Token(Token = "0x2000115")]
	public class LocalizeTarget_UnityStandard_Prefab : LocalizeTarget<GameObject>
	{
		[Token(Token = "0x60006A7")]
		[Address(RVA = "0xC103D8", Offset = "0xC103D8", VA = "0xC103D8")]
		static LocalizeTarget_UnityStandard_Prefab()
		{
		}

		[Token(Token = "0x60006A8")]
		[Address(RVA = "0xC103DC", Offset = "0xC103DC", VA = "0xC103DC")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x830218", Offset = "0x830218")]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x60006A9")]
		[Address(RVA = "0xC10478", Offset = "0xC10478", VA = "0xC10478", Slot = "4")]
		public override bool IsValid(Localize cmp)
		{
			return default(bool);
		}

		[Token(Token = "0x60006AA")]
		[Address(RVA = "0xC10480", Offset = "0xC10480", VA = "0xC10480", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60006AB")]
		[Address(RVA = "0xC10488", Offset = "0xC10488", VA = "0xC10488", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60006AC")]
		[Address(RVA = "0xC10490", Offset = "0xC10490", VA = "0xC10490", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x60006AD")]
		[Address(RVA = "0xC10498", Offset = "0xC10498", VA = "0xC10498", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60006AE")]
		[Address(RVA = "0xC104A0", Offset = "0xC104A0", VA = "0xC104A0", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60006AF")]
		[Address(RVA = "0xC104A8", Offset = "0xC104A8", VA = "0xC104A8", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x60006B0")]
		[Address(RVA = "0xC104E4", Offset = "0xC104E4", VA = "0xC104E4", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x60006B1")]
		[Address(RVA = "0xC1070C", Offset = "0xC1070C", VA = "0xC1070C")]
		private Transform InstantiateNewPrefab(Localize cmp, string mainTranslation)
		{
			return null;
		}

		[Token(Token = "0x60006B2")]
		[Address(RVA = "0xC108B8", Offset = "0xC108B8", VA = "0xC108B8")]
		public LocalizeTarget_UnityStandard_Prefab()
		{
		}
	}
	[Token(Token = "0x2000116")]
	public class LocalizeTarget_UnityStandard_SpriteRenderer : LocalizeTarget<SpriteRenderer>
	{
		[Token(Token = "0x60006B3")]
		[Address(RVA = "0xC10908", Offset = "0xC10908", VA = "0xC10908")]
		static LocalizeTarget_UnityStandard_SpriteRenderer()
		{
		}

		[Token(Token = "0x60006B4")]
		[Address(RVA = "0xC1090C", Offset = "0xC1090C", VA = "0xC1090C")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x83022C", Offset = "0x83022C")]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x60006B5")]
		[Address(RVA = "0xC109B4", Offset = "0xC109B4", VA = "0xC109B4", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60006B6")]
		[Address(RVA = "0xC109BC", Offset = "0xC109BC", VA = "0xC109BC", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60006B7")]
		[Address(RVA = "0xC109C4", Offset = "0xC109C4", VA = "0xC109C4", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x60006B8")]
		[Address(RVA = "0xC109CC", Offset = "0xC109CC", VA = "0xC109CC", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60006B9")]
		[Address(RVA = "0xC109D4", Offset = "0xC109D4", VA = "0xC109D4", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60006BA")]
		[Address(RVA = "0xC109DC", Offset = "0xC109DC", VA = "0xC109DC", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x60006BB")]
		[Address(RVA = "0xC10AB8", Offset = "0xC10AB8", VA = "0xC10AB8", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x60006BC")]
		[Address(RVA = "0xC10BB8", Offset = "0xC10BB8", VA = "0xC10BB8")]
		public LocalizeTarget_UnityStandard_SpriteRenderer()
		{
		}
	}
	[Token(Token = "0x2000117")]
	public class LocalizeTarget_UnityStandard_TextMesh : LocalizeTarget<TextMesh>
	{
		[Token(Token = "0x4000669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextAlignment mAlignment_RTL;

		[Token(Token = "0x400066A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private TextAlignment mAlignment_LTR;

		[Token(Token = "0x400066B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool mAlignmentWasRTL;

		[Token(Token = "0x400066C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool mInitializeAlignment;

		[Token(Token = "0x60006BD")]
		[Address(RVA = "0xC10C08", Offset = "0xC10C08", VA = "0xC10C08")]
		static LocalizeTarget_UnityStandard_TextMesh()
		{
		}

		[Token(Token = "0x60006BE")]
		[Address(RVA = "0xC10C0C", Offset = "0xC10C0C", VA = "0xC10C0C")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x830240", Offset = "0x830240")]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x60006BF")]
		[Address(RVA = "0xC10CB4", Offset = "0xC10CB4", VA = "0xC10CB4", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60006C0")]
		[Address(RVA = "0xC10CBC", Offset = "0xC10CBC", VA = "0xC10CBC", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60006C1")]
		[Address(RVA = "0xC10CC4", Offset = "0xC10CC4", VA = "0xC10CC4", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x60006C2")]
		[Address(RVA = "0xC10CCC", Offset = "0xC10CCC", VA = "0xC10CCC", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60006C3")]
		[Address(RVA = "0xC10CD4", Offset = "0xC10CD4", VA = "0xC10CD4", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60006C4")]
		[Address(RVA = "0xC10CDC", Offset = "0xC10CDC", VA = "0xC10CDC", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x60006C5")]
		[Address(RVA = "0xC10E10", Offset = "0xC10E10", VA = "0xC10E10", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x60006C6")]
		[Address(RVA = "0xC1108C", Offset = "0xC1108C", VA = "0xC1108C")]
		public LocalizeTarget_UnityStandard_TextMesh()
		{
		}
	}
	[Token(Token = "0x2000118")]
	public class LocalizeTarget_UnityUI_Image : LocalizeTarget<Image>
	{
		[Token(Token = "0x60006C7")]
		[Address(RVA = "0xC110EC", Offset = "0xC110EC", VA = "0xC110EC")]
		static LocalizeTarget_UnityUI_Image()
		{
		}

		[Token(Token = "0x60006C8")]
		[Address(RVA = "0xC110F0", Offset = "0xC110F0", VA = "0xC110F0")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x830254", Offset = "0x830254")]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x60006C9")]
		[Address(RVA = "0xC11198", Offset = "0xC11198", VA = "0xC11198", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x60006CA")]
		[Address(RVA = "0xC111A0", Offset = "0xC111A0", VA = "0xC111A0", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60006CB")]
		[Address(RVA = "0xC111A8", Offset = "0xC111A8", VA = "0xC111A8", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60006CC")]
		[Address(RVA = "0xC111B0", Offset = "0xC111B0", VA = "0xC111B0", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60006CD")]
		[Address(RVA = "0xC11240", Offset = "0xC11240", VA = "0xC11240", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60006CE")]
		[Address(RVA = "0xC11248", Offset = "0xC11248", VA = "0xC11248", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x60006CF")]
		[Address(RVA = "0xC113CC", Offset = "0xC113CC", VA = "0xC113CC", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x60006D0")]
		[Address(RVA = "0xC114C0", Offset = "0xC114C0", VA = "0xC114C0")]
		public LocalizeTarget_UnityUI_Image()
		{
		}
	}
	[Token(Token = "0x2000119")]
	public class LocalizeTarget_UnityUI_RawImage : LocalizeTarget<RawImage>
	{
		[Token(Token = "0x60006D1")]
		[Address(RVA = "0xC11510", Offset = "0xC11510", VA = "0xC11510")]
		static LocalizeTarget_UnityUI_RawImage()
		{
		}

		[Token(Token = "0x60006D2")]
		[Address(RVA = "0xC11514", Offset = "0xC11514", VA = "0xC11514")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x830268", Offset = "0x830268")]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x60006D3")]
		[Address(RVA = "0xC115BC", Offset = "0xC115BC", VA = "0xC115BC", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60006D4")]
		[Address(RVA = "0xC115C4", Offset = "0xC115C4", VA = "0xC115C4", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60006D5")]
		[Address(RVA = "0xC115CC", Offset = "0xC115CC", VA = "0xC115CC", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x60006D6")]
		[Address(RVA = "0xC115D4", Offset = "0xC115D4", VA = "0xC115D4", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60006D7")]
		[Address(RVA = "0xC115DC", Offset = "0xC115DC", VA = "0xC115DC", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60006D8")]
		[Address(RVA = "0xC115E4", Offset = "0xC115E4", VA = "0xC115E4", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x60006D9")]
		[Address(RVA = "0xC116C4", Offset = "0xC116C4", VA = "0xC116C4", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x60006DA")]
		[Address(RVA = "0xC117B8", Offset = "0xC117B8", VA = "0xC117B8")]
		public LocalizeTarget_UnityUI_RawImage()
		{
		}
	}
	[Token(Token = "0x200011A")]
	public class LocalizeTarget_UnityUI_Text : LocalizeTarget<Text>
	{
		[Token(Token = "0x400066D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextAnchor mAlignment_RTL;

		[Token(Token = "0x400066E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private TextAnchor mAlignment_LTR;

		[Token(Token = "0x400066F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool mAlignmentWasRTL;

		[Token(Token = "0x4000670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool mInitializeAlignment;

		[Token(Token = "0x60006DB")]
		[Address(RVA = "0xC11808", Offset = "0xC11808", VA = "0xC11808")]
		static LocalizeTarget_UnityUI_Text()
		{
		}

		[Token(Token = "0x60006DC")]
		[Address(RVA = "0xC1180C", Offset = "0xC1180C", VA = "0xC1180C")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x83027C", Offset = "0x83027C")]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x60006DD")]
		[Address(RVA = "0xC118B4", Offset = "0xC118B4", VA = "0xC118B4", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60006DE")]
		[Address(RVA = "0xC118BC", Offset = "0xC118BC", VA = "0xC118BC", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60006DF")]
		[Address(RVA = "0xC118C4", Offset = "0xC118C4", VA = "0xC118C4", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x60006E0")]
		[Address(RVA = "0xC118CC", Offset = "0xC118CC", VA = "0xC118CC", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60006E1")]
		[Address(RVA = "0xC118D4", Offset = "0xC118D4", VA = "0xC118D4", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60006E2")]
		[Address(RVA = "0xC118DC", Offset = "0xC118DC", VA = "0xC118DC", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x60006E3")]
		[Address(RVA = "0xC11A0C", Offset = "0xC11A0C", VA = "0xC11A0C", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x60006E4")]
		[Address(RVA = "0xC11CF0", Offset = "0xC11CF0", VA = "0xC11CF0")]
		private void InitAlignment(bool isRTL, TextAnchor alignment, out TextAnchor alignLTR, out TextAnchor alignRTL)
		{
		}

		[Token(Token = "0x60006E5")]
		[Address(RVA = "0xC11DB0", Offset = "0xC11DB0", VA = "0xC11DB0")]
		public LocalizeTarget_UnityUI_Text()
		{
		}
	}
	[Token(Token = "0x200011B")]
	public enum eTermType
	{
		[Token(Token = "0x4000672")]
		Text,
		[Token(Token = "0x4000673")]
		Font,
		[Token(Token = "0x4000674")]
		Texture,
		[Token(Token = "0x4000675")]
		AudioClip,
		[Token(Token = "0x4000676")]
		GameObject,
		[Token(Token = "0x4000677")]
		Sprite,
		[Token(Token = "0x4000678")]
		Material,
		[Token(Token = "0x4000679")]
		Child,
		[Token(Token = "0x400067A")]
		Mesh,
		[Token(Token = "0x400067B")]
		Object
	}
	[Token(Token = "0x200011C")]
	public enum TranslationFlag : byte
	{
		[Token(Token = "0x400067D")]
		Normal = 1,
		[Token(Token = "0x400067E")]
		AutoTranslated
	}
	[Serializable]
	[Token(Token = "0x200011D")]
	public class TermData
	{
		[Token(Token = "0x400067F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Term;

		[Token(Token = "0x4000680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public eTermType TermType;

		[NonSerialized]
		[Token(Token = "0x4000681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string Description;

		[Token(Token = "0x4000682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string[] Languages;

		[Token(Token = "0x4000683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public byte[] Flags;

		[Token(Token = "0x4000684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private string[] Languages_Touch;

		[Token(Token = "0x60006E6")]
		[Address(RVA = "0xC1CEC4", Offset = "0xC1CEC4", VA = "0xC1CEC4")]
		public string GetTranslation(int idx, [Optional] string specialization, bool editMode = false)
		{
			return null;
		}

		[Token(Token = "0x60006E7")]
		[Address(RVA = "0xC1CFD4", Offset = "0xC1CFD4", VA = "0xC1CFD4")]
		public void SetTranslation(int idx, string translation, [Optional] string specialization)
		{
		}

		[Token(Token = "0x60006E8")]
		[Address(RVA = "0xC1D0C4", Offset = "0xC1D0C4", VA = "0xC1D0C4")]
		public void RemoveSpecialization(string specialization)
		{
		}

		[Token(Token = "0x60006E9")]
		[Address(RVA = "0xC1D124", Offset = "0xC1D124", VA = "0xC1D124")]
		public void RemoveSpecialization(int idx, string specialization)
		{
		}

		[Token(Token = "0x60006EA")]
		[Address(RVA = "0xC1D298", Offset = "0xC1D298", VA = "0xC1D298")]
		public bool IsAutoTranslated(int idx, bool IsTouch)
		{
			return default(bool);
		}

		[Token(Token = "0x60006EB")]
		[Address(RVA = "0xC1D2D8", Offset = "0xC1D2D8", VA = "0xC1D2D8")]
		public void Validate()
		{
		}

		[Token(Token = "0x60006EC")]
		[Address(RVA = "0xC1D4E8", Offset = "0xC1D4E8", VA = "0xC1D4E8")]
		public bool IsTerm(string name, bool allowCategoryMistmatch)
		{
			return default(bool);
		}

		[Token(Token = "0x60006ED")]
		[Address(RVA = "0xC1D580", Offset = "0xC1D580", VA = "0xC1D580")]
		public bool HasSpecializations()
		{
			return default(bool);
		}

		[Token(Token = "0x60006EE")]
		[Address(RVA = "0xC1D658", Offset = "0xC1D658", VA = "0xC1D658")]
		public List<string> GetAllSpecializations()
		{
			return null;
		}

		[Token(Token = "0x60006EF")]
		[Address(RVA = "0xC1D740", Offset = "0xC1D740", VA = "0xC1D740")]
		public TermData()
		{
		}
	}
	[Token(Token = "0x200011E")]
	public class TermsPopup : PropertyAttribute
	{
		[Token(Token = "0x4000685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82332C", Offset = "0x82332C")]
		private string <Filter>k__BackingField;

		[Token(Token = "0x1700004F")]
		public string Filter
		{
			[Token(Token = "0x60006F1")]
			[Address(RVA = "0xC1D7FC", Offset = "0xC1D7FC", VA = "0xC1D7FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830290", Offset = "0x830290")]
			get
			{
				return null;
			}
			[Token(Token = "0x60006F2")]
			[Address(RVA = "0xC1D804", Offset = "0xC1D804", VA = "0xC1D804")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8302A0", Offset = "0x8302A0")]
			private set
			{
			}
		}

		[Token(Token = "0x60006F0")]
		[Address(RVA = "0xC1D7D0", Offset = "0xC1D7D0", VA = "0xC1D7D0")]
		public TermsPopup(string filter = "")
		{
		}
	}
	[Token(Token = "0x200011F")]
	public class AutoChangeCultureInfo : MonoBehaviour
	{
		[Token(Token = "0x60006F3")]
		[Address(RVA = "0xA59648", Offset = "0xA59648", VA = "0xA59648")]
		public void Start()
		{
		}

		[Token(Token = "0x60006F4")]
		[Address(RVA = "0xA596AC", Offset = "0xA596AC", VA = "0xA596AC")]
		public AutoChangeCultureInfo()
		{
		}
	}
	[Token(Token = "0x2000120")]
	public class CoroutineManager : MonoBehaviour
	{
		[Token(Token = "0x4000686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static CoroutineManager mInstance;

		[Token(Token = "0x17000050")]
		private static CoroutineManager pInstance
		{
			[Token(Token = "0x60006F5")]
			[Address(RVA = "0xA59C98", Offset = "0xA59C98", VA = "0xA59C98")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006F6")]
		[Address(RVA = "0xA59DC0", Offset = "0xA59DC0", VA = "0xA59DC0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60006F7")]
		[Address(RVA = "0xA59E54", Offset = "0xA59E54", VA = "0xA59E54")]
		public static Coroutine Start(IEnumerator coroutine)
		{
			return null;
		}

		[Token(Token = "0x60006F8")]
		[Address(RVA = "0xA59E84", Offset = "0xA59E84", VA = "0xA59E84")]
		public CoroutineManager()
		{
		}
	}
	[Token(Token = "0x2000121")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x81F114", Offset = "0x81F114")]
	public class CustomLocalizeCallback : MonoBehaviour
	{
		[Token(Token = "0x4000687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent _OnLocalize;

		[Token(Token = "0x60006F9")]
		[Address(RVA = "0xA59E8C", Offset = "0xA59E8C", VA = "0xA59E8C")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x60006FA")]
		[Address(RVA = "0xA59F50", Offset = "0xA59F50", VA = "0xA59F50")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x60006FB")]
		[Address(RVA = "0xA59FE4", Offset = "0xA59FE4", VA = "0xA59FE4")]
		public void OnLocalize()
		{
		}

		[Token(Token = "0x60006FC")]
		[Address(RVA = "0xA5A000", Offset = "0xA5A000", VA = "0xA5A000")]
		public CustomLocalizeCallback()
		{
		}
	}
	[Token(Token = "0x2000122")]
	public class HindiFixer
	{
		[Serializable]
		[Token(Token = "0x200065F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820D80", Offset = "0x820D80")]
		private sealed class <>c
		{
			[Token(Token = "0x400256C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400256D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<char, bool> <>9__0_0;

			[Token(Token = "0x600349C")]
			[Address(RVA = "0x10BD52C", Offset = "0x10BD52C", VA = "0x10BD52C")]
			public <>c()
			{
			}

			[Token(Token = "0x600349D")]
			[Address(RVA = "0x10BD534", Offset = "0x10BD534", VA = "0x10BD534")]
			internal bool <Fix>b__0_0(char x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60006FD")]
		[Address(RVA = "0x10BD070", Offset = "0x10BD070", VA = "0x10BD070")]
		internal static string Fix(string text)
		{
			return null;
		}

		[Token(Token = "0x60006FE")]
		[Address(RVA = "0x10BD4C0", Offset = "0x10BD4C0", VA = "0x10BD4C0")]
		public HindiFixer()
		{
		}
	}
	[Token(Token = "0x2000123")]
	public static class I2Utils
	{
		[Serializable]
		[Token(Token = "0x2000660")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820D90", Offset = "0x820D90")]
		private sealed class <>c
		{
			[Token(Token = "0x400256E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400256F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<char, bool> <>9__6_0;

			[Token(Token = "0x600349F")]
			[Address(RVA = "0x10BF4C0", Offset = "0x10BF4C0", VA = "0x10BF4C0")]
			public <>c()
			{
			}

			[Token(Token = "0x60034A0")]
			[Address(RVA = "0x10BF4C8", Offset = "0x10BF4C8", VA = "0x10BF4C8")]
			internal bool <SplitLine>b__6_0(char c)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000688")]
		public const string ValidChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";

		[Token(Token = "0x4000689")]
		public const string NumberChars = "0123456789";

		[Token(Token = "0x400068A")]
		public const string ValidNameSymbols = ".-_$#@*()[]{}+:?!&',^=<>~`";

		[Token(Token = "0x60006FF")]
		[Address(RVA = "0x10BE63C", Offset = "0x10BE63C", VA = "0x10BE63C")]
		public static string ReverseText(string source)
		{
			return null;
		}

		[Token(Token = "0x6000700")]
		[Address(RVA = "0x10BE714", Offset = "0x10BE714", VA = "0x10BE714")]
		public static string RemoveNonASCII(string text, bool allowCategory = false)
		{
			return null;
		}

		[Token(Token = "0x6000701")]
		[Address(RVA = "0x10BE944", Offset = "0x10BE944", VA = "0x10BE944")]
		public static string GetValidTermName(string text, bool allowCategory = false)
		{
			return null;
		}

		[Token(Token = "0x6000702")]
		[Address(RVA = "0x10BE9F0", Offset = "0x10BE9F0", VA = "0x10BE9F0")]
		public static string SplitLine(string line, int maxCharacters)
		{
			return null;
		}

		[Token(Token = "0x6000703")]
		[Address(RVA = "0x10BEC90", Offset = "0x10BEC90", VA = "0x10BEC90")]
		public static bool FindNextTag(string line, int iStart, out int tagStart, out int tagEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x6000704")]
		[Address(RVA = "0x10BE970", Offset = "0x10BE970", VA = "0x10BE970")]
		public static string RemoveTags(string text)
		{
			return null;
		}

		[Token(Token = "0x6000705")]
		[Address(RVA = "0x10BEE18", Offset = "0x10BEE18", VA = "0x10BEE18")]
		public static bool RemoveResourcesPath(ref string sPath)
		{
			return default(bool);
		}

		[Token(Token = "0x6000706")]
		[Address(RVA = "0x10BF070", Offset = "0x10BF070", VA = "0x10BF070")]
		public static bool IsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x6000707")]
		[Address(RVA = "0x10BF078", Offset = "0x10BF078", VA = "0x10BF078")]
		public static string GetPath(this Transform tr)
		{
			return null;
		}

		[Token(Token = "0x6000708")]
		[Address(RVA = "0x10BF14C", Offset = "0x10BF14C", VA = "0x10BF14C")]
		public static Transform FindObject(string objectPath)
		{
			return null;
		}

		[Token(Token = "0x6000709")]
		[Address(RVA = "0x10BF1BC", Offset = "0x10BF1BC", VA = "0x10BF1BC")]
		public static Transform FindObject(Scene scene, string objectPath)
		{
			return null;
		}

		[Token(Token = "0x600070A")]
		[Address(RVA = "0x10BF308", Offset = "0x10BF308", VA = "0x10BF308")]
		public static Transform FindObject(Transform root, string objectPath)
		{
			return null;
		}

		[Token(Token = "0x600070B")]
		public static H FindInParents<H>(Transform tr) where H : UnityEngine.Component
		{
			return null;
		}

		[Token(Token = "0x600070C")]
		[Address(RVA = "0x10BC14C", Offset = "0x10BC14C", VA = "0x10BC14C")]
		public static string GetCaptureMatch(Match match)
		{
			return null;
		}

		[Token(Token = "0x600070D")]
		[Address(RVA = "0x10BF444", Offset = "0x10BF444", VA = "0x10BF444")]
		public static void SendWebRequest(UnityWebRequest www)
		{
		}
	}
	[Token(Token = "0x2000124")]
	public interface ILocalizationParamsManager
	{
		[Token(Token = "0x600070E")]
		string GetParameterValue(string Param);
	}
	[Token(Token = "0x2000125")]
	public class LocalizationParamsManager : MonoBehaviour, ILocalizationParamsManager
	{
		[Serializable]
		[Token(Token = "0x2000661")]
		public struct ParamValue
		{
			[Token(Token = "0x4002570")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string Name;

			[Token(Token = "0x4002571")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string Value;
		}

		[Token(Token = "0x400068B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public List<ParamValue> _Params;

		[Token(Token = "0x400068C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool _IsGlobalManager;

		[Token(Token = "0x600070F")]
		[Address(RVA = "0x10CF46C", Offset = "0x10CF46C", VA = "0x10CF46C", Slot = "4")]
		public string GetParameterValue(string ParamName)
		{
			return null;
		}

		[Token(Token = "0x6000710")]
		[Address(RVA = "0x10CF558", Offset = "0x10CF558", VA = "0x10CF558")]
		public void SetParameterValue(string ParamName, string ParamValue, bool localize = true)
		{
		}

		[Token(Token = "0x6000711")]
		[Address(RVA = "0x10CF6B8", Offset = "0x10CF6B8", VA = "0x10CF6B8")]
		public void OnLocalize()
		{
		}

		[Token(Token = "0x6000712")]
		[Address(RVA = "0x10CF764", Offset = "0x10CF764", VA = "0x10CF764", Slot = "5")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000713")]
		[Address(RVA = "0x10CF774", Offset = "0x10CF774", VA = "0x10CF774")]
		public void DoAutoRegister()
		{
		}

		[Token(Token = "0x6000714")]
		[Address(RVA = "0x10CF84C", Offset = "0x10CF84C", VA = "0x10CF84C")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6000715")]
		[Address(RVA = "0x10CF8D0", Offset = "0x10CF8D0", VA = "0x10CF8D0")]
		public LocalizationParamsManager()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000126")]
	public struct LocalizedString
	{
		[Token(Token = "0x400068D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string mTerm;

		[Token(Token = "0x400068E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool mRTL_IgnoreArabicFix;

		[Token(Token = "0x400068F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int mRTL_MaxLineLength;

		[Token(Token = "0x4000690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool mRTL_ConvertNumbers;

		[Token(Token = "0x4000691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool m_DontLocalizeParameters;

		[Token(Token = "0x6000716")]
		[Address(RVA = "0xC11E10", Offset = "0xC11E10", VA = "0xC11E10")]
		public static implicit operator string(LocalizedString s)
		{
			return null;
		}

		[Token(Token = "0x6000717")]
		[Address(RVA = "0xC11EE4", Offset = "0xC11EE4", VA = "0xC11EE4")]
		public static implicit operator LocalizedString(string term)
		{
			return default(LocalizedString);
		}

		[Token(Token = "0x6000718")]
		[Address(RVA = "0x8C798C", Offset = "0x8C798C", VA = "0x8C798C")]
		public LocalizedString(LocalizedString str)
		{
		}

		[Token(Token = "0x6000719")]
		[Address(RVA = "0x8C79D0", Offset = "0x8C79D0", VA = "0x8C79D0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000127")]
	public class RTLFixer
	{
		[Token(Token = "0x600071A")]
		[Address(RVA = "0xC12620", Offset = "0xC12620", VA = "0xC12620")]
		public static string Fix(string str)
		{
			return null;
		}

		[Token(Token = "0x600071B")]
		[Address(RVA = "0xC128C0", Offset = "0xC128C0", VA = "0xC128C0")]
		public static string Fix(string str, bool rtl)
		{
			return null;
		}

		[Token(Token = "0x600071C")]
		[Address(RVA = "0xC1262C", Offset = "0xC1262C", VA = "0xC1262C")]
		public static string Fix(string str, bool showTashkeel, bool useHinduNumbers)
		{
			return null;
		}

		[Token(Token = "0x600071D")]
		[Address(RVA = "0xC13800", Offset = "0xC13800", VA = "0xC13800")]
		public RTLFixer()
		{
		}
	}
	[Token(Token = "0x2000128")]
	internal enum IsolatedArabicLetters
	{
		[Token(Token = "0x4000693")]
		Hamza = 65152,
		[Token(Token = "0x4000694")]
		Alef = 65165,
		[Token(Token = "0x4000695")]
		AlefHamza = 65155,
		[Token(Token = "0x4000696")]
		WawHamza = 65157,
		[Token(Token = "0x4000697")]
		AlefMaksoor = 65159,
		[Token(Token = "0x4000698")]
		AlefMaksora = 64508,
		[Token(Token = "0x4000699")]
		HamzaNabera = 65161,
		[Token(Token = "0x400069A")]
		Ba = 65167,
		[Token(Token = "0x400069B")]
		Ta = 65173,
		[Token(Token = "0x400069C")]
		Tha2 = 65177,
		[Token(Token = "0x400069D")]
		Jeem = 65181,
		[Token(Token = "0x400069E")]
		H7aa = 65185,
		[Token(Token = "0x400069F")]
		Khaa2 = 65189,
		[Token(Token = "0x40006A0")]
		Dal = 65193,
		[Token(Token = "0x40006A1")]
		Thal = 65195,
		[Token(Token = "0x40006A2")]
		Ra2 = 65197,
		[Token(Token = "0x40006A3")]
		Zeen = 65199,
		[Token(Token = "0x40006A4")]
		Seen = 65201,
		[Token(Token = "0x40006A5")]
		Sheen = 65205,
		[Token(Token = "0x40006A6")]
		S9a = 65209,
		[Token(Token = "0x40006A7")]
		Dha = 65213,
		[Token(Token = "0x40006A8")]
		T6a = 65217,
		[Token(Token = "0x40006A9")]
		T6ha = 65221,
		[Token(Token = "0x40006AA")]
		Ain = 65225,
		[Token(Token = "0x40006AB")]
		Gain = 65229,
		[Token(Token = "0x40006AC")]
		Fa = 65233,
		[Token(Token = "0x40006AD")]
		Gaf = 65237,
		[Token(Token = "0x40006AE")]
		Kaf = 65241,
		[Token(Token = "0x40006AF")]
		Lam = 65245,
		[Token(Token = "0x40006B0")]
		Meem = 65249,
		[Token(Token = "0x40006B1")]
		Noon = 65253,
		[Token(Token = "0x40006B2")]
		Ha = 65257,
		[Token(Token = "0x40006B3")]
		Waw = 65261,
		[Token(Token = "0x40006B4")]
		Ya = 65265,
		[Token(Token = "0x40006B5")]
		AlefMad = 65153,
		[Token(Token = "0x40006B6")]
		TaMarboota = 65171,
		[Token(Token = "0x40006B7")]
		PersianPe = 64342,
		[Token(Token = "0x40006B8")]
		PersianChe = 64378,
		[Token(Token = "0x40006B9")]
		PersianZe = 64394,
		[Token(Token = "0x40006BA")]
		PersianGaf = 64402,
		[Token(Token = "0x40006BB")]
		PersianGaf2 = 64398
	}
	[Token(Token = "0x2000129")]
	internal enum GeneralArabicLetters
	{
		[Token(Token = "0x40006BD")]
		Hamza = 1569,
		[Token(Token = "0x40006BE")]
		Alef = 1575,
		[Token(Token = "0x40006BF")]
		AlefHamza = 1571,
		[Token(Token = "0x40006C0")]
		WawHamza = 1572,
		[Token(Token = "0x40006C1")]
		AlefMaksoor = 1573,
		[Token(Token = "0x40006C2")]
		AlefMagsora = 1609,
		[Token(Token = "0x40006C3")]
		HamzaNabera = 1574,
		[Token(Token = "0x40006C4")]
		Ba = 1576,
		[Token(Token = "0x40006C5")]
		Ta = 1578,
		[Token(Token = "0x40006C6")]
		Tha2 = 1579,
		[Token(Token = "0x40006C7")]
		Jeem = 1580,
		[Token(Token = "0x40006C8")]
		H7aa = 1581,
		[Token(Token = "0x40006C9")]
		Khaa2 = 1582,
		[Token(Token = "0x40006CA")]
		Dal = 1583,
		[Token(Token = "0x40006CB")]
		Thal = 1584,
		[Token(Token = "0x40006CC")]
		Ra2 = 1585,
		[Token(Token = "0x40006CD")]
		Zeen = 1586,
		[Token(Token = "0x40006CE")]
		Seen = 1587,
		[Token(Token = "0x40006CF")]
		Sheen = 1588,
		[Token(Token = "0x40006D0")]
		S9a = 1589,
		[Token(Token = "0x40006D1")]
		Dha = 1590,
		[Token(Token = "0x40006D2")]
		T6a = 1591,
		[Token(Token = "0x40006D3")]
		T6ha = 1592,
		[Token(Token = "0x40006D4")]
		Ain = 1593,
		[Token(Token = "0x40006D5")]
		Gain = 1594,
		[Token(Token = "0x40006D6")]
		Fa = 1601,
		[Token(Token = "0x40006D7")]
		Gaf = 1602,
		[Token(Token = "0x40006D8")]
		Kaf = 1603,
		[Token(Token = "0x40006D9")]
		Lam = 1604,
		[Token(Token = "0x40006DA")]
		Meem = 1605,
		[Token(Token = "0x40006DB")]
		Noon = 1606,
		[Token(Token = "0x40006DC")]
		Ha = 1607,
		[Token(Token = "0x40006DD")]
		Waw = 1608,
		[Token(Token = "0x40006DE")]
		Ya = 1610,
		[Token(Token = "0x40006DF")]
		AlefMad = 1570,
		[Token(Token = "0x40006E0")]
		TaMarboota = 1577,
		[Token(Token = "0x40006E1")]
		PersianPe = 1662,
		[Token(Token = "0x40006E2")]
		PersianChe = 1670,
		[Token(Token = "0x40006E3")]
		PersianZe = 1688,
		[Token(Token = "0x40006E4")]
		PersianGaf = 1711,
		[Token(Token = "0x40006E5")]
		PersianGaf2 = 1705
	}
	[Token(Token = "0x200012A")]
	internal class ArabicMapping
	{
		[Token(Token = "0x40006E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int from;

		[Token(Token = "0x40006E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int to;

		[Token(Token = "0x600071E")]
		[Address(RVA = "0xA589A8", Offset = "0xA589A8", VA = "0xA589A8")]
		public ArabicMapping(int from, int to)
		{
		}
	}
	[Token(Token = "0x200012B")]
	internal class ArabicTable
	{
		[Token(Token = "0x40006E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<ArabicMapping> mapList;

		[Token(Token = "0x40006E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static ArabicTable arabicMapper;

		[Token(Token = "0x17000051")]
		internal static ArabicTable ArabicMapper
		{
			[Token(Token = "0x6000720")]
			[Address(RVA = "0xA594C4", Offset = "0xA594C4", VA = "0xA594C4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600071F")]
		[Address(RVA = "0xA589E0", Offset = "0xA589E0", VA = "0xA589E0")]
		private ArabicTable()
		{
		}

		[Token(Token = "0x6000721")]
		[Address(RVA = "0xA5953C", Offset = "0xA5953C", VA = "0xA5953C")]
		internal int Convert(int toBeConverted)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200012C")]
	internal class TashkeelLocation
	{
		[Token(Token = "0x40006EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public char tashkeel;

		[Token(Token = "0x40006EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int position;

		[Token(Token = "0x6000722")]
		[Address(RVA = "0xC13DA4", Offset = "0xC13DA4", VA = "0xC13DA4")]
		public TashkeelLocation(char tashkeel, int position)
		{
		}
	}
	[Token(Token = "0x200012D")]
	internal class RTLFixerTool
	{
		[Token(Token = "0x40006EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static bool showTashkeel;

		[Token(Token = "0x40006ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		internal static bool useHinduNumbers;

		[Token(Token = "0x6000723")]
		[Address(RVA = "0xC13808", Offset = "0xC13808", VA = "0xC13808")]
		internal static string RemoveTashkeel(string str, out List<TashkeelLocation> tashkeelLocation)
		{
			return null;
		}

		[Token(Token = "0x6000724")]
		[Address(RVA = "0xC13DE0", Offset = "0xC13DE0", VA = "0xC13DE0")]
		internal static char[] ReturnTashkeel(char[] letters, List<TashkeelLocation> tashkeelLocation)
		{
			return null;
		}

		[Token(Token = "0x6000725")]
		[Address(RVA = "0xC12AF4", Offset = "0xC12AF4", VA = "0xC12AF4")]
		internal static string FixLine(string str)
		{
			return null;
		}

		[Token(Token = "0x6000726")]
		[Address(RVA = "0xC13FDC", Offset = "0xC13FDC", VA = "0xC13FDC")]
		internal static bool IsIgnoredCharacter(char ch)
		{
			return default(bool);
		}

		[Token(Token = "0x6000727")]
		[Address(RVA = "0xC1463C", Offset = "0xC1463C", VA = "0xC1463C")]
		internal static bool IsLeadingLetter(char[] letters, int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6000728")]
		[Address(RVA = "0xC144D8", Offset = "0xC144D8", VA = "0xC144D8")]
		internal static bool IsFinishingLetter(char[] letters, int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6000729")]
		[Address(RVA = "0xC14158", Offset = "0xC14158", VA = "0xC14158")]
		internal static bool IsMiddleLetter(char[] letters, int index)
		{
			return default(bool);
		}

		[Token(Token = "0x600072A")]
		[Address(RVA = "0xC14978", Offset = "0xC14978", VA = "0xC14978")]
		public RTLFixerTool()
		{
		}
	}
	[Token(Token = "0x200012E")]
	public class RegisterGlobalParameters : MonoBehaviour, ILocalizationParamsManager
	{
		[Token(Token = "0x600072C")]
		[Address(RVA = "0xC15B78", Offset = "0xC15B78", VA = "0xC15B78", Slot = "5")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x600072D")]
		[Address(RVA = "0xC15C54", Offset = "0xC15C54", VA = "0xC15C54", Slot = "6")]
		public virtual void OnDisable()
		{
		}

		[Token(Token = "0x600072E")]
		[Address(RVA = "0xC15CD8", Offset = "0xC15CD8", VA = "0xC15CD8", Slot = "7")]
		public virtual string GetParameterValue(string ParamName)
		{
			return null;
		}

		[Token(Token = "0x600072F")]
		[Address(RVA = "0xC15CE0", Offset = "0xC15CE0", VA = "0xC15CE0")]
		public RegisterGlobalParameters()
		{
		}
	}
	[Token(Token = "0x200012F")]
	public interface IResourceManager_Bundles
	{
		[Token(Token = "0x6000730")]
		UnityEngine.Object LoadFromBundle(string path, Type assetType);
	}
	[Token(Token = "0x2000130")]
	public class ResourceManager : MonoBehaviour
	{
		[Token(Token = "0x40006EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static ResourceManager mInstance;

		[Token(Token = "0x40006EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<IResourceManager_Bundles> mBundleManagers;

		[Token(Token = "0x40006F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.Object[] Assets;

		[Token(Token = "0x40006F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly Dictionary<string, UnityEngine.Object> mResourcesCache;

		[Token(Token = "0x17000052")]
		public static ResourceManager pInstance
		{
			[Token(Token = "0x6000731")]
			[Address(RVA = "0xC157AC", Offset = "0xC157AC", VA = "0xC157AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000732")]
		[Address(RVA = "0xC15CE8", Offset = "0xC15CE8", VA = "0xC15CE8")]
		public static void MyOnLevelWasLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x6000733")]
		public T GetAsset<T>(string Name) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6000734")]
		[Address(RVA = "0xC15DC4", Offset = "0xC15DC4", VA = "0xC15DC4")]
		private UnityEngine.Object FindAsset(string Name)
		{
			return null;
		}

		[Token(Token = "0x6000735")]
		[Address(RVA = "0xC15F04", Offset = "0xC15F04", VA = "0xC15F04")]
		public bool HasAsset(UnityEngine.Object Obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000736")]
		public T LoadFromResources<T>(string Path) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6000737")]
		public T LoadFromBundle<T>(string path) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6000738")]
		[Address(RVA = "0xC15D58", Offset = "0xC15D58", VA = "0xC15D58")]
		public void CleanResourceCache()
		{
		}

		[Token(Token = "0x6000739")]
		[Address(RVA = "0xC15F74", Offset = "0xC15F74", VA = "0xC15F74")]
		public ResourceManager()
		{
		}
	}
	[Token(Token = "0x2000131")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x81F15C", Offset = "0x81F15C")]
	public class SetLanguage : MonoBehaviour
	{
		[Token(Token = "0x40006F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string _Language;

		[Token(Token = "0x600073A")]
		[Address(RVA = "0xC16080", Offset = "0xC16080", VA = "0xC16080")]
		private void OnClick()
		{
		}

		[Token(Token = "0x600073B")]
		[Address(RVA = "0xC16084", Offset = "0xC16084", VA = "0xC16084")]
		public void ApplyLanguage()
		{
		}

		[Token(Token = "0x600073C")]
		[Address(RVA = "0xC16140", Offset = "0xC16140", VA = "0xC16140")]
		public SetLanguage()
		{
		}
	}
	[Token(Token = "0x2000132")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x81F194", Offset = "0x81F194")]
	public class SetLanguageDropdown : MonoBehaviour
	{
		[Token(Token = "0x600073D")]
		[Address(RVA = "0xC16148", Offset = "0xC16148", VA = "0xC16148")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600073E")]
		[Address(RVA = "0xC16374", Offset = "0xC16374", VA = "0xC16374")]
		private void OnValueChanged(int index)
		{
		}

		[Token(Token = "0x600073F")]
		[Address(RVA = "0xC16464", Offset = "0xC16464", VA = "0xC16464")]
		public SetLanguageDropdown()
		{
		}
	}
	[Token(Token = "0x2000133")]
	public class StringObfucator
	{
		[Token(Token = "0x40006F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static char[] StringObfuscatorPassword;

		[Token(Token = "0x6000740")]
		[Address(RVA = "0xC1C98C", Offset = "0xC1C98C", VA = "0xC1C98C")]
		public static string Encode(string NormalString)
		{
			return null;
		}

		[Token(Token = "0x6000741")]
		[Address(RVA = "0xC1CCCC", Offset = "0xC1CCCC", VA = "0xC1CCCC")]
		public static string Decode(string ObfucatedString)
		{
			return null;
		}

		[Token(Token = "0x6000742")]
		[Address(RVA = "0xC1CC38", Offset = "0xC1CC38", VA = "0xC1CC38")]
		private static string ToBase64(string regularString)
		{
			return null;
		}

		[Token(Token = "0x6000743")]
		[Address(RVA = "0xC1CDB4", Offset = "0xC1CDB4", VA = "0xC1CDB4")]
		private static string FromBase64(string base64string)
		{
			return null;
		}

		[Token(Token = "0x6000744")]
		[Address(RVA = "0xC1CA74", Offset = "0xC1CA74", VA = "0xC1CA74")]
		private static string XoREncode(string NormalString)
		{
			return null;
		}

		[Token(Token = "0x6000745")]
		[Address(RVA = "0xC1CE50", Offset = "0xC1CE50", VA = "0xC1CE50")]
		public StringObfucator()
		{
		}
	}
}
namespace I2.Loc.SimpleJSON
{
	[Token(Token = "0x2000134")]
	public enum JSONBinaryTag
	{
		[Token(Token = "0x40006F5")]
		Array = 1,
		[Token(Token = "0x40006F6")]
		Class,
		[Token(Token = "0x40006F7")]
		Value,
		[Token(Token = "0x40006F8")]
		IntValue,
		[Token(Token = "0x40006F9")]
		DoubleValue,
		[Token(Token = "0x40006FA")]
		BoolValue,
		[Token(Token = "0x40006FB")]
		FloatValue
	}
	[Token(Token = "0x2000135")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x81F1CC", Offset = "0x81F1CC")]
	public class JSONNode
	{
		[Token(Token = "0x2000662")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820DA0", Offset = "0x820DA0")]
		private sealed class <get_Childs>d__17 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002572")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002573")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JSONNode <>2__current;

			[Token(Token = "0x4002574")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x170006FA")]
			private JSONNode System.Collections.Generic.IEnumerator<I2.Loc.SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x60034A4")]
				[Address(RVA = "0xC1B700", Offset = "0xC1B700", VA = "0xC1B700", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170006FB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60034A6")]
				[Address(RVA = "0xC1B768", Offset = "0xC1B768", VA = "0xC1B768", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60034A1")]
			[Address(RVA = "0xC1A41C", Offset = "0xC1A41C", VA = "0xC1A41C")]
			[DebuggerHidden]
			public <get_Childs>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x60034A2")]
			[Address(RVA = "0xC1B6E4", Offset = "0xC1B6E4", VA = "0xC1B6E4", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60034A3")]
			[Address(RVA = "0xC1B6E8", Offset = "0xC1B6E8", VA = "0xC1B6E8", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60034A5")]
			[Address(RVA = "0xC1B708", Offset = "0xC1B708", VA = "0xC1B708", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x60034A7")]
			[Address(RVA = "0xC1B770", Offset = "0xC1B770", VA = "0xC1B770", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<I2.Loc.SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60034A8")]
			[Address(RVA = "0xC1B808", Offset = "0xC1B808", VA = "0xC1B808", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000663")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820DB0", Offset = "0x820DB0")]
		private sealed class <get_DeepChilds>d__19 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002575")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002576")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JSONNode <>2__current;

			[Token(Token = "0x4002577")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4002578")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JSONNode <>4__this;

			[Token(Token = "0x4002579")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private IEnumerator<JSONNode> <>7__wrap1;

			[Token(Token = "0x400257A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private IEnumerator<JSONNode> <>7__wrap2;

			[Token(Token = "0x170006FC")]
			private JSONNode System.Collections.Generic.IEnumerator<I2.Loc.SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x60034AE")]
				[Address(RVA = "0xC1BE3C", Offset = "0xC1BE3C", VA = "0xC1BE3C", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170006FD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60034B0")]
				[Address(RVA = "0xC1BEA4", Offset = "0xC1BEA4", VA = "0xC1BEA4", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60034A9")]
			[Address(RVA = "0xC1A4D4", Offset = "0xC1A4D4", VA = "0xC1A4D4")]
			[DebuggerHidden]
			public <get_DeepChilds>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x60034AA")]
			[Address(RVA = "0xC1B80C", Offset = "0xC1B80C", VA = "0xC1B80C", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60034AB")]
			[Address(RVA = "0xC1BA1C", Offset = "0xC1BA1C", VA = "0xC1BA1C", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60034AC")]
			[Address(RVA = "0xC1B95C", Offset = "0xC1B95C", VA = "0xC1B95C")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60034AD")]
			[Address(RVA = "0xC1B89C", Offset = "0xC1B89C", VA = "0xC1B89C")]
			private void <>m__Finally2()
			{
			}

			[Token(Token = "0x60034AF")]
			[Address(RVA = "0xC1BE44", Offset = "0xC1BE44", VA = "0xC1BE44", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x60034B1")]
			[Address(RVA = "0xC1BEAC", Offset = "0xC1BEAC", VA = "0xC1BEAC", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<I2.Loc.SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60034B2")]
			[Address(RVA = "0xC1BF58", Offset = "0xC1BF58", VA = "0xC1BF58", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x17000053")]
		public virtual JSONNode Item
		{
			[Token(Token = "0x6000748")]
			[Address(RVA = "0xC1A2C0", Offset = "0xC1A2C0", VA = "0xC1A2C0", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000749")]
			[Address(RVA = "0xC1A2C8", Offset = "0xC1A2C8", VA = "0xC1A2C8", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000054")]
		public virtual JSONNode Item
		{
			[Token(Token = "0x600074A")]
			[Address(RVA = "0xC1A2CC", Offset = "0xC1A2CC", VA = "0xC1A2CC", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x600074B")]
			[Address(RVA = "0xC1A2D4", Offset = "0xC1A2D4", VA = "0xC1A2D4", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000055")]
		public virtual string Value
		{
			[Token(Token = "0x600074C")]
			[Address(RVA = "0xC1A2D8", Offset = "0xC1A2D8", VA = "0xC1A2D8", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x600074D")]
			[Address(RVA = "0xC1A320", Offset = "0xC1A320", VA = "0xC1A320", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x17000056")]
		public virtual int Count
		{
			[Token(Token = "0x600074E")]
			[Address(RVA = "0xC1A324", Offset = "0xC1A324", VA = "0xC1A324", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000057")]
		public virtual IEnumerable<JSONNode> Childs
		{
			[Token(Token = "0x6000753")]
			[Address(RVA = "0xC1A3AC", Offset = "0xC1A3AC", VA = "0xC1A3AC", Slot = "16")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8302C0", Offset = "0x8302C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000058")]
		public IEnumerable<JSONNode> DeepChilds
		{
			[Token(Token = "0x6000754")]
			[Address(RVA = "0xC1A454", Offset = "0xC1A454", VA = "0xC1A454")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x830324", Offset = "0x830324")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000059")]
		public virtual int AsInt
		{
			[Token(Token = "0x6000757")]
			[Address(RVA = "0xC1A59C", Offset = "0xC1A59C", VA = "0xC1A59C", Slot = "18")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000758")]
			[Address(RVA = "0xC1A5DC", Offset = "0xC1A5DC", VA = "0xC1A5DC", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x1700005A")]
		public virtual float AsFloat
		{
			[Token(Token = "0x6000759")]
			[Address(RVA = "0xC1A61C", Offset = "0xC1A61C", VA = "0xC1A61C", Slot = "20")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600075A")]
			[Address(RVA = "0xC1A660", Offset = "0xC1A660", VA = "0xC1A660", Slot = "21")]
			set
			{
			}
		}

		[Token(Token = "0x1700005B")]
		public virtual double AsDouble
		{
			[Token(Token = "0x600075B")]
			[Address(RVA = "0xC1A6A0", Offset = "0xC1A6A0", VA = "0xC1A6A0", Slot = "22")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x600075C")]
			[Address(RVA = "0xC1A744", Offset = "0xC1A744", VA = "0xC1A744", Slot = "23")]
			set
			{
			}
		}

		[Token(Token = "0x1700005C")]
		public virtual bool AsBool
		{
			[Token(Token = "0x600075D")]
			[Address(RVA = "0xC1A784", Offset = "0xC1A784", VA = "0xC1A784", Slot = "24")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600075E")]
			[Address(RVA = "0xC1A84C", Offset = "0xC1A84C", VA = "0xC1A84C", Slot = "25")]
			set
			{
			}
		}

		[Token(Token = "0x1700005D")]
		public virtual JSONArray AsArray
		{
			[Token(Token = "0x600075F")]
			[Address(RVA = "0xC1A8C8", Offset = "0xC1A8C8", VA = "0xC1A8C8", Slot = "26")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005E")]
		public virtual JSONClass AsObject
		{
			[Token(Token = "0x6000760")]
			[Address(RVA = "0xC1A948", Offset = "0xC1A948", VA = "0xC1A948", Slot = "27")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000747")]
		[Address(RVA = "0xC1A2BC", Offset = "0xC1A2BC", VA = "0xC1A2BC", Slot = "4")]
		public virtual void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x600074F")]
		[Address(RVA = "0xC1A32C", Offset = "0xC1A32C", VA = "0xC1A32C", Slot = "12")]
		public virtual void Add(JSONNode aItem)
		{
		}

		[Token(Token = "0x6000750")]
		[Address(RVA = "0xC1A394", Offset = "0xC1A394", VA = "0xC1A394", Slot = "13")]
		public virtual JSONNode Remove(string aKey)
		{
			return null;
		}

		[Token(Token = "0x6000751")]
		[Address(RVA = "0xC1A39C", Offset = "0xC1A39C", VA = "0xC1A39C", Slot = "14")]
		public virtual JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x6000752")]
		[Address(RVA = "0xC1A3A4", Offset = "0xC1A3A4", VA = "0xC1A3A4", Slot = "15")]
		public virtual JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x6000755")]
		[Address(RVA = "0xC1A50C", Offset = "0xC1A50C", VA = "0xC1A50C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000756")]
		[Address(RVA = "0xC1A554", Offset = "0xC1A554", VA = "0xC1A554", Slot = "17")]
		public virtual string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x6000761")]
		[Address(RVA = "0xC1A9C8", Offset = "0xC1A9C8", VA = "0xC1A9C8")]
		public static implicit operator JSONNode(string s)
		{
			return null;
		}

		[Token(Token = "0x6000762")]
		[Address(RVA = "0xC1AA2C", Offset = "0xC1AA2C", VA = "0xC1AA2C")]
		public static implicit operator string(JSONNode d)
		{
			return null;
		}

		[Token(Token = "0x6000763")]
		[Address(RVA = "0xC18ED0", Offset = "0xC18ED0", VA = "0xC18ED0")]
		public static bool operator ==(JSONNode a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000764")]
		[Address(RVA = "0xC1AA78", Offset = "0xC1AA78", VA = "0xC1AA78")]
		public static bool operator !=(JSONNode a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000765")]
		[Address(RVA = "0xC1AA94", Offset = "0xC1AA94", VA = "0xC1AA94", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000766")]
		[Address(RVA = "0xC19D24", Offset = "0xC19D24", VA = "0xC19D24", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000767")]
		[Address(RVA = "0xC186A4", Offset = "0xC186A4", VA = "0xC186A4")]
		internal static string Escape(string aText)
		{
			return null;
		}

		[Token(Token = "0x6000768")]
		[Address(RVA = "0xC16470", Offset = "0xC16470", VA = "0xC16470")]
		public static JSONNode Parse(string aJSON)
		{
			return null;
		}

		[Token(Token = "0x6000769")]
		[Address(RVA = "0xC1AAA0", Offset = "0xC1AAA0", VA = "0xC1AAA0", Slot = "28")]
		public virtual void Serialize(BinaryWriter aWriter)
		{
		}

		[Token(Token = "0x600076A")]
		[Address(RVA = "0xC1AAA4", Offset = "0xC1AAA4", VA = "0xC1AAA4")]
		public void SaveToStream(Stream aData)
		{
		}

		[Token(Token = "0x600076B")]
		[Address(RVA = "0xC1AB24", Offset = "0xC1AB24", VA = "0xC1AB24")]
		public void SaveToCompressedStream(Stream aData)
		{
		}

		[Token(Token = "0x600076C")]
		[Address(RVA = "0xC1AB90", Offset = "0xC1AB90", VA = "0xC1AB90")]
		public void SaveToCompressedFile(string aFileName)
		{
		}

		[Token(Token = "0x600076D")]
		[Address(RVA = "0xC1ABFC", Offset = "0xC1ABFC", VA = "0xC1ABFC")]
		public string SaveToCompressedBase64()
		{
			return null;
		}

		[Token(Token = "0x600076E")]
		[Address(RVA = "0xC1AC68", Offset = "0xC1AC68", VA = "0xC1AC68")]
		public void SaveToFile(string aFileName)
		{
		}

		[Token(Token = "0x600076F")]
		[Address(RVA = "0xC1ADBC", Offset = "0xC1ADBC", VA = "0xC1ADBC")]
		public string SaveToBase64()
		{
			return null;
		}

		[Token(Token = "0x6000770")]
		[Address(RVA = "0xC1AF40", Offset = "0xC1AF40", VA = "0xC1AF40")]
		public static JSONNode Deserialize(BinaryReader aReader)
		{
			return null;
		}

		[Token(Token = "0x6000771")]
		[Address(RVA = "0xC1B2C8", Offset = "0xC1B2C8", VA = "0xC1B2C8")]
		public static JSONNode LoadFromCompressedFile(string aFileName)
		{
			return null;
		}

		[Token(Token = "0x6000772")]
		[Address(RVA = "0xC1B334", Offset = "0xC1B334", VA = "0xC1B334")]
		public static JSONNode LoadFromCompressedStream(Stream aData)
		{
			return null;
		}

		[Token(Token = "0x6000773")]
		[Address(RVA = "0xC1B3A0", Offset = "0xC1B3A0", VA = "0xC1B3A0")]
		public static JSONNode LoadFromCompressedBase64(string aBase64)
		{
			return null;
		}

		[Token(Token = "0x6000774")]
		[Address(RVA = "0xC1B40C", Offset = "0xC1B40C", VA = "0xC1B40C")]
		public static JSONNode LoadFromStream(Stream aData)
		{
			return null;
		}

		[Token(Token = "0x6000775")]
		[Address(RVA = "0xC1B528", Offset = "0xC1B528", VA = "0xC1B528")]
		public static JSONNode LoadFromFile(string aFileName)
		{
			return null;
		}

		[Token(Token = "0x6000776")]
		[Address(RVA = "0xC1B630", Offset = "0xC1B630", VA = "0xC1B630")]
		public static JSONNode LoadFromBase64(string aBase64)
		{
			return null;
		}

		[Token(Token = "0x6000777")]
		[Address(RVA = "0xC1753C", Offset = "0xC1753C", VA = "0xC1753C")]
		public JSONNode()
		{
		}
	}
	[Token(Token = "0x2000136")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x81F204", Offset = "0x81F204")]
	public class JSONArray : JSONNode, IEnumerable
	{
		[Token(Token = "0x2000664")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820DC0", Offset = "0x820DC0")]
		private sealed class <get_Childs>d__13 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400257B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400257C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JSONNode <>2__current;

			[Token(Token = "0x400257D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x400257E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JSONArray <>4__this;

			[Token(Token = "0x400257F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private List<JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x170006FE")]
			private JSONNode System.Collections.Generic.IEnumerator<I2.Loc.SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x60034B7")]
				[Address(RVA = "0xC17944", Offset = "0xC17944", VA = "0xC17944", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170006FF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60034B9")]
				[Address(RVA = "0xC179AC", Offset = "0xC179AC", VA = "0xC179AC", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60034B3")]
			[Address(RVA = "0xC16F94", Offset = "0xC16F94", VA = "0xC16F94")]
			[DebuggerHidden]
			public <get_Childs>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x60034B4")]
			[Address(RVA = "0xC1777C", Offset = "0xC1777C", VA = "0xC1777C", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60034B5")]
			[Address(RVA = "0xC177F0", Offset = "0xC177F0", VA = "0xC177F0", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60034B6")]
			[Address(RVA = "0xC17798", Offset = "0xC17798", VA = "0xC17798")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60034B8")]
			[Address(RVA = "0xC1794C", Offset = "0xC1794C", VA = "0xC1794C", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x60034BA")]
			[Address(RVA = "0xC179B4", Offset = "0xC179B4", VA = "0xC179B4", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<I2.Loc.SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60034BB")]
			[Address(RVA = "0xC17A60", Offset = "0xC17A60", VA = "0xC17A60", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000665")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820DD0", Offset = "0x820DD0")]
		private sealed class <GetEnumerator>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002580")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002581")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002582")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public JSONArray <>4__this;

			[Token(Token = "0x4002583")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private List<JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x17000700")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60034C0")]
				[Address(RVA = "0xC1770C", Offset = "0xC1770C", VA = "0xC1770C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000701")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60034C2")]
				[Address(RVA = "0xC17774", Offset = "0xC17774", VA = "0xC17774", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60034BC")]
			[Address(RVA = "0xC1703C", Offset = "0xC1703C", VA = "0xC1703C")]
			[DebuggerHidden]
			public <GetEnumerator>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x60034BD")]
			[Address(RVA = "0xC17544", Offset = "0xC17544", VA = "0xC17544", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60034BE")]
			[Address(RVA = "0xC175B8", Offset = "0xC175B8", VA = "0xC175B8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60034BF")]
			[Address(RVA = "0xC17560", Offset = "0xC17560", VA = "0xC17560")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60034C1")]
			[Address(RVA = "0xC17714", Offset = "0xC17714", VA = "0xC17714", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40006FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<JSONNode> m_List;

		[Token(Token = "0x1700005F")]
		public override JSONNode Item
		{
			[Token(Token = "0x6000778")]
			[Address(RVA = "0xC16AFC", Offset = "0xC16AFC", VA = "0xC16AFC", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000779")]
			[Address(RVA = "0xC16BD0", Offset = "0xC16BD0", VA = "0xC16BD0", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000060")]
		public override JSONNode Item
		{
			[Token(Token = "0x600077A")]
			[Address(RVA = "0xC16C74", Offset = "0xC16C74", VA = "0xC16C74", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x600077B")]
			[Address(RVA = "0xC16CD8", Offset = "0xC16CD8", VA = "0xC16CD8", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000061")]
		public override int Count
		{
			[Token(Token = "0x600077C")]
			[Address(RVA = "0xC16D40", Offset = "0xC16D40", VA = "0xC16D40", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000062")]
		public override IEnumerable<JSONNode> Childs
		{
			[Token(Token = "0x6000780")]
			[Address(RVA = "0xC16F14", Offset = "0xC16F14", VA = "0xC16F14", Slot = "16")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x830388", Offset = "0x830388")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600077D")]
		[Address(RVA = "0xC16D90", Offset = "0xC16D90", VA = "0xC16D90", Slot = "4")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x600077E")]
		[Address(RVA = "0xC16DF8", Offset = "0xC16DF8", VA = "0xC16DF8", Slot = "14")]
		public override JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x600077F")]
		[Address(RVA = "0xC16EA4", Offset = "0xC16EA4", VA = "0xC16EA4", Slot = "15")]
		public override JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x6000781")]
		[Address(RVA = "0xC16FCC", Offset = "0xC16FCC", VA = "0xC16FCC", Slot = "29")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8303EC", Offset = "0x8303EC")]
		public IEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000782")]
		[Address(RVA = "0xC17068", Offset = "0xC17068", VA = "0xC17068", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000783")]
		[Address(RVA = "0xC17200", Offset = "0xC17200", VA = "0xC17200", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x6000784")]
		[Address(RVA = "0xC173EC", Offset = "0xC173EC", VA = "0xC173EC", Slot = "28")]
		public override void Serialize(BinaryWriter aWriter)
		{
		}

		[Token(Token = "0x6000785")]
		[Address(RVA = "0xC174CC", Offset = "0xC174CC", VA = "0xC174CC")]
		public JSONArray()
		{
		}
	}
	[Token(Token = "0x2000137")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x81F23C", Offset = "0x81F23C")]
	public class JSONClass : JSONNode, IEnumerable
	{
		[Token(Token = "0x2000666")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820DE0", Offset = "0x820DE0")]
		private sealed class <>c__DisplayClass12_0
		{
			[Token(Token = "0x4002584")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public JSONNode aNode;

			[Token(Token = "0x60034C3")]
			[Address(RVA = "0xC181E0", Offset = "0xC181E0", VA = "0xC181E0")]
			public <>c__DisplayClass12_0()
			{
			}

			[Token(Token = "0x60034C4")]
			[Address(RVA = "0xC18E7C", Offset = "0xC18E7C", VA = "0xC18E7C")]
			internal bool <Remove>b__0(KeyValuePair<string, JSONNode> k)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000667")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820DF0", Offset = "0x820DF0")]
		private sealed class <get_Childs>d__14 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002585")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002586")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JSONNode <>2__current;

			[Token(Token = "0x4002587")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4002588")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JSONClass <>4__this;

			[Token(Token = "0x4002589")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Dictionary<string, JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x17000702")]
			private JSONNode System.Collections.Generic.IEnumerator<I2.Loc.SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x60034C9")]
				[Address(RVA = "0xC19398", Offset = "0xC19398", VA = "0xC19398", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000703")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60034CB")]
				[Address(RVA = "0xC19400", Offset = "0xC19400", VA = "0xC19400", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60034C5")]
			[Address(RVA = "0xC18268", Offset = "0xC18268", VA = "0xC18268")]
			[DebuggerHidden]
			public <get_Childs>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x60034C6")]
			[Address(RVA = "0xC191C8", Offset = "0xC191C8", VA = "0xC191C8", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60034C7")]
			[Address(RVA = "0xC1923C", Offset = "0xC1923C", VA = "0xC1923C", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60034C8")]
			[Address(RVA = "0xC191E4", Offset = "0xC191E4", VA = "0xC191E4")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60034CA")]
			[Address(RVA = "0xC193A0", Offset = "0xC193A0", VA = "0xC193A0", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x60034CC")]
			[Address(RVA = "0xC19408", Offset = "0xC19408", VA = "0xC19408", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<I2.Loc.SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60034CD")]
			[Address(RVA = "0xC194B4", Offset = "0xC194B4", VA = "0xC194B4", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000668")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820E00", Offset = "0x820E00")]
		private sealed class <GetEnumerator>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400258A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400258B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400258C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public JSONClass <>4__this;

			[Token(Token = "0x400258D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Dictionary<string, JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x17000704")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60034D2")]
				[Address(RVA = "0xC19158", Offset = "0xC19158", VA = "0xC19158", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000705")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60034D4")]
				[Address(RVA = "0xC191C0", Offset = "0xC191C0", VA = "0xC191C0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60034CE")]
			[Address(RVA = "0xC18310", Offset = "0xC18310", VA = "0xC18310")]
			[DebuggerHidden]
			public <GetEnumerator>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x60034CF")]
			[Address(RVA = "0xC18F68", Offset = "0xC18F68", VA = "0xC18F68", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60034D0")]
			[Address(RVA = "0xC18FDC", Offset = "0xC18FDC", VA = "0xC18FDC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60034D1")]
			[Address(RVA = "0xC18F84", Offset = "0xC18F84", VA = "0xC18F84")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60034D3")]
			[Address(RVA = "0xC19160", Offset = "0xC19160", VA = "0xC19160", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40006FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<string, JSONNode> m_Dict;

		[Token(Token = "0x17000063")]
		public override JSONNode Item
		{
			[Token(Token = "0x6000786")]
			[Address(RVA = "0xC17A64", Offset = "0xC17A64", VA = "0xC17A64", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000787")]
			[Address(RVA = "0xC17B58", Offset = "0xC17B58", VA = "0xC17B58", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000064")]
		public override JSONNode Item
		{
			[Token(Token = "0x6000788")]
			[Address(RVA = "0xC17C14", Offset = "0xC17C14", VA = "0xC17C14", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000789")]
			[Address(RVA = "0xC17CAC", Offset = "0xC17CAC", VA = "0xC17CAC", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000065")]
		public override int Count
		{
			[Token(Token = "0x600078A")]
			[Address(RVA = "0xC17D6C", Offset = "0xC17D6C", VA = "0xC17D6C", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000066")]
		public override IEnumerable<JSONNode> Childs
		{
			[Token(Token = "0x600078F")]
			[Address(RVA = "0xC181E8", Offset = "0xC181E8", VA = "0xC181E8", Slot = "16")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x830450", Offset = "0x830450")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600078B")]
		[Address(RVA = "0xC17DC4", Offset = "0xC17DC4", VA = "0xC17DC4", Slot = "4")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x600078C")]
		[Address(RVA = "0xC17EF0", Offset = "0xC17EF0", VA = "0xC17EF0", Slot = "13")]
		public override JSONNode Remove(string aKey)
		{
			return null;
		}

		[Token(Token = "0x600078D")]
		[Address(RVA = "0xC17FAC", Offset = "0xC17FAC", VA = "0xC17FAC", Slot = "14")]
		public override JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x600078E")]
		[Address(RVA = "0xC18068", Offset = "0xC18068", VA = "0xC18068", Slot = "15")]
		public override JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x6000790")]
		[Address(RVA = "0xC182A0", Offset = "0xC182A0", VA = "0xC182A0", Slot = "29")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8304B4", Offset = "0x8304B4")]
		public IEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000791")]
		[Address(RVA = "0xC1833C", Offset = "0xC1833C", VA = "0xC1833C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000792")]
		[Address(RVA = "0xC18820", Offset = "0xC18820", VA = "0xC18820", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x6000793")]
		[Address(RVA = "0xC18BE0", Offset = "0xC18BE0", VA = "0xC18BE0", Slot = "28")]
		public override void Serialize(BinaryWriter aWriter)
		{
		}

		[Token(Token = "0x6000794")]
		[Address(RVA = "0xC18D98", Offset = "0xC18D98", VA = "0xC18D98")]
		public JSONClass()
		{
		}
	}
	[Token(Token = "0x2000138")]
	public class JSONData : JSONNode
	{
		[Token(Token = "0x40006FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string m_Data;

		[Token(Token = "0x17000067")]
		public override string Value
		{
			[Token(Token = "0x6000795")]
			[Address(RVA = "0xC194B8", Offset = "0xC194B8", VA = "0xC194B8", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000796")]
			[Address(RVA = "0xC194C0", Offset = "0xC194C0", VA = "0xC194C0", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x6000797")]
		[Address(RVA = "0xC194C8", Offset = "0xC194C8", VA = "0xC194C8")]
		public JSONData(string aData)
		{
		}

		[Token(Token = "0x6000798")]
		[Address(RVA = "0xC194F4", Offset = "0xC194F4", VA = "0xC194F4")]
		public JSONData(float aData)
		{
		}

		[Token(Token = "0x6000799")]
		[Address(RVA = "0xC19538", Offset = "0xC19538", VA = "0xC19538")]
		public JSONData(double aData)
		{
		}

		[Token(Token = "0x600079A")]
		[Address(RVA = "0xC1957C", Offset = "0xC1957C", VA = "0xC1957C")]
		public JSONData(bool aData)
		{
		}

		[Token(Token = "0x600079B")]
		[Address(RVA = "0xC195B8", Offset = "0xC195B8", VA = "0xC195B8")]
		public JSONData(int aData)
		{
		}

		[Token(Token = "0x600079C")]
		[Address(RVA = "0xC195F4", Offset = "0xC195F4", VA = "0xC195F4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600079D")]
		[Address(RVA = "0xC19654", Offset = "0xC19654", VA = "0xC19654", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x600079E")]
		[Address(RVA = "0xC196B4", Offset = "0xC196B4", VA = "0xC196B4", Slot = "28")]
		public override void Serialize(BinaryWriter aWriter)
		{
		}
	}
	[Token(Token = "0x2000139")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x81F274", Offset = "0x81F274")]
	internal class JSONLazyCreator : JSONNode
	{
		[Token(Token = "0x40006FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private JSONNode m_Node;

		[Token(Token = "0x4000700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string m_Key;

		[Token(Token = "0x17000068")]
		public override JSONNode Item
		{
			[Token(Token = "0x60007A2")]
			[Address(RVA = "0xC199D0", Offset = "0xC199D0", VA = "0xC199D0", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007A3")]
			[Address(RVA = "0xC19A34", Offset = "0xC19A34", VA = "0xC19A34", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000069")]
		public override JSONNode Item
		{
			[Token(Token = "0x60007A4")]
			[Address(RVA = "0xC19ABC", Offset = "0xC19ABC", VA = "0xC19ABC", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007A5")]
			[Address(RVA = "0xC19B2C", Offset = "0xC19B2C", VA = "0xC19B2C", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x1700006A")]
		public override int AsInt
		{
			[Token(Token = "0x60007AE")]
			[Address(RVA = "0xC19DBC", Offset = "0xC19DBC", VA = "0xC19DBC", Slot = "18")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60007AF")]
			[Address(RVA = "0xC19E40", Offset = "0xC19E40", VA = "0xC19E40", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x1700006B")]
		public override float AsFloat
		{
			[Token(Token = "0x60007B0")]
			[Address(RVA = "0xC19EC8", Offset = "0xC19EC8", VA = "0xC19EC8", Slot = "20")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60007B1")]
			[Address(RVA = "0xC19F4C", Offset = "0xC19F4C", VA = "0xC19F4C", Slot = "21")]
			set
			{
			}
		}

		[Token(Token = "0x1700006C")]
		public override double AsDouble
		{
			[Token(Token = "0x60007B2")]
			[Address(RVA = "0xC19FD4", Offset = "0xC19FD4", VA = "0xC19FD4", Slot = "22")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60007B3")]
			[Address(RVA = "0xC1A058", Offset = "0xC1A058", VA = "0xC1A058", Slot = "23")]
			set
			{
			}
		}

		[Token(Token = "0x1700006D")]
		public override bool AsBool
		{
			[Token(Token = "0x60007B4")]
			[Address(RVA = "0xC1A0E0", Offset = "0xC1A0E0", VA = "0xC1A0E0", Slot = "24")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60007B5")]
			[Address(RVA = "0xC1A164", Offset = "0xC1A164", VA = "0xC1A164", Slot = "25")]
			set
			{
			}
		}

		[Token(Token = "0x1700006E")]
		public override JSONArray AsArray
		{
			[Token(Token = "0x60007B6")]
			[Address(RVA = "0xC1A1EC", Offset = "0xC1A1EC", VA = "0xC1A1EC", Slot = "26")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006F")]
		public override JSONClass AsObject
		{
			[Token(Token = "0x60007B7")]
			[Address(RVA = "0xC1A254", Offset = "0xC1A254", VA = "0xC1A254", Slot = "27")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600079F")]
		[Address(RVA = "0xC16BA4", Offset = "0xC16BA4", VA = "0xC16BA4")]
		public JSONLazyCreator(JSONNode aNode)
		{
		}

		[Token(Token = "0x60007A0")]
		[Address(RVA = "0xC17B20", Offset = "0xC17B20", VA = "0xC17B20")]
		public JSONLazyCreator(JSONNode aNode, string aKey)
		{
		}

		[Token(Token = "0x60007A1")]
		[Address(RVA = "0xC19970", Offset = "0xC19970", VA = "0xC19970")]
		private void Set(JSONNode aVal)
		{
		}

		[Token(Token = "0x60007A6")]
		[Address(RVA = "0xC19BBC", Offset = "0xC19BBC", VA = "0xC19BBC", Slot = "12")]
		public override void Add(JSONNode aItem)
		{
		}

		[Token(Token = "0x60007A7")]
		[Address(RVA = "0xC19C44", Offset = "0xC19C44", VA = "0xC19C44", Slot = "4")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x60007A8")]
		[Address(RVA = "0xC19CD4", Offset = "0xC19CD4", VA = "0xC19CD4")]
		public static bool operator ==(JSONLazyCreator a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x60007A9")]
		[Address(RVA = "0xC19CEC", Offset = "0xC19CEC", VA = "0xC19CEC")]
		public static bool operator !=(JSONLazyCreator a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x60007AA")]
		[Address(RVA = "0xC19D04", Offset = "0xC19D04", VA = "0xC19D04", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60007AB")]
		[Address(RVA = "0xC19D1C", Offset = "0xC19D1C", VA = "0xC19D1C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60007AC")]
		[Address(RVA = "0xC19D2C", Offset = "0xC19D2C", VA = "0xC19D2C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60007AD")]
		[Address(RVA = "0xC19D74", Offset = "0xC19D74", VA = "0xC19D74", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}
	}
	[Token(Token = "0x200013A")]
	public static class JSON
	{
		[Token(Token = "0x60007B8")]
		[Address(RVA = "0xC1646C", Offset = "0xC1646C", VA = "0xC1646C")]
		public static JSONNode Parse(string aJSON)
		{
			return null;
		}
	}
}
namespace Org.BouncyCastle.X509
{
	[Token(Token = "0x200013B")]
	public interface IX509Extension
	{
		[Token(Token = "0x60007B9")]
		ISet GetCriticalExtensionOids();

		[Token(Token = "0x60007BA")]
		ISet GetNonCriticalExtensionOids();

		[Token(Token = "0x60007BB")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x830518", Offset = "0x830518")]
		Asn1OctetString GetExtensionValue(string oid);

		[Token(Token = "0x60007BC")]
		Asn1OctetString GetExtensionValue(DerObjectIdentifier oid);
	}
	[Token(Token = "0x200013C")]
	internal class PemParser
	{
		[Token(Token = "0x4000701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly string _header1;

		[Token(Token = "0x4000702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly string _header2;

		[Token(Token = "0x4000703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly string _footer1;

		[Token(Token = "0x4000704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly string _footer2;

		[Token(Token = "0x60007BD")]
		[Address(RVA = "0xAC93F0", Offset = "0xAC93F0", VA = "0xAC93F0")]
		internal PemParser(string type)
		{
		}

		[Token(Token = "0x60007BE")]
		[Address(RVA = "0xAC94D0", Offset = "0xAC94D0", VA = "0xAC94D0")]
		private string ReadLine(Stream inStream)
		{
			return null;
		}

		[Token(Token = "0x60007BF")]
		[Address(RVA = "0xAC95AC", Offset = "0xAC95AC", VA = "0xAC95AC")]
		internal Asn1Sequence ReadPemObject(Stream inStream)
		{
			return null;
		}
	}
	[Token(Token = "0x200013D")]
	public class X509Certificate : X509ExtensionBase
	{
		[Token(Token = "0x4000705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly X509CertificateStructure c;

		[Token(Token = "0x4000706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly BasicConstraints basicConstraints;

		[Token(Token = "0x4000707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly bool[] keyUsage;

		[Token(Token = "0x4000708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool hashValueSet;

		[Token(Token = "0x4000709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int hashValue;

		[Token(Token = "0x17000070")]
		public virtual X509CertificateStructure CertificateStructure
		{
			[Token(Token = "0x60007C2")]
			[Address(RVA = "0xAC9AD0", Offset = "0xAC9AD0", VA = "0xAC9AD0", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000071")]
		public virtual bool IsValidNow
		{
			[Token(Token = "0x60007C3")]
			[Address(RVA = "0xAC9AD8", Offset = "0xAC9AD8", VA = "0xAC9AD8", Slot = "14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000072")]
		public virtual int Version
		{
			[Token(Token = "0x60007C7")]
			[Address(RVA = "0xAC9DE0", Offset = "0xAC9DE0", VA = "0xAC9DE0", Slot = "18")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000073")]
		public virtual BigInteger SerialNumber
		{
			[Token(Token = "0x60007C8")]
			[Address(RVA = "0xAC9DFC", Offset = "0xAC9DFC", VA = "0xAC9DFC", Slot = "19")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000074")]
		public virtual X509Name IssuerDN
		{
			[Token(Token = "0x60007C9")]
			[Address(RVA = "0xAC9E28", Offset = "0xAC9E28", VA = "0xAC9E28", Slot = "20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000075")]
		public virtual X509Name SubjectDN
		{
			[Token(Token = "0x60007CA")]
			[Address(RVA = "0xAC9E44", Offset = "0xAC9E44", VA = "0xAC9E44", Slot = "21")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000076")]
		public virtual DateTime NotBefore
		{
			[Token(Token = "0x60007CB")]
			[Address(RVA = "0xAC9E60", Offset = "0xAC9E60", VA = "0xAC9E60", Slot = "22")]
			get
			{
				return default(DateTime);
			}
		}

		[Token(Token = "0x17000077")]
		public virtual DateTime NotAfter
		{
			[Token(Token = "0x60007CC")]
			[Address(RVA = "0xAC9E8C", Offset = "0xAC9E8C", VA = "0xAC9E8C", Slot = "23")]
			get
			{
				return default(DateTime);
			}
		}

		[Token(Token = "0x17000078")]
		public virtual string SigAlgName
		{
			[Token(Token = "0x60007CF")]
			[Address(RVA = "0xAC9F08", Offset = "0xAC9F08", VA = "0xAC9F08", Slot = "26")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000079")]
		public virtual string SigAlgOid
		{
			[Token(Token = "0x60007D0")]
			[Address(RVA = "0xAC9F98", Offset = "0xAC9F98", VA = "0xAC9F98", Slot = "27")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007A")]
		public virtual DerBitString IssuerUniqueID
		{
			[Token(Token = "0x60007D2")]
			[Address(RVA = "0xACA008", Offset = "0xACA008", VA = "0xACA008", Slot = "29")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007B")]
		public virtual DerBitString SubjectUniqueID
		{
			[Token(Token = "0x60007D3")]
			[Address(RVA = "0xACA030", Offset = "0xACA030", VA = "0xACA030", Slot = "30")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007C0")]
		[Address(RVA = "0xAC9758", Offset = "0xAC9758", VA = "0xAC9758")]
		protected X509Certificate()
		{
		}

		[Token(Token = "0x60007C1")]
		[Address(RVA = "0xAC9768", Offset = "0xAC9768", VA = "0xAC9768")]
		public X509Certificate(X509CertificateStructure c)
		{
		}

		[Token(Token = "0x60007C4")]
		[Address(RVA = "0xAC9B54", Offset = "0xAC9B54", VA = "0xAC9B54", Slot = "15")]
		public virtual bool IsValid(DateTime time)
		{
			return default(bool);
		}

		[Token(Token = "0x60007C5")]
		[Address(RVA = "0xAC9BCC", Offset = "0xAC9BCC", VA = "0xAC9BCC", Slot = "16")]
		public virtual void CheckValidity()
		{
		}

		[Token(Token = "0x60007C6")]
		[Address(RVA = "0xAC9C48", Offset = "0xAC9C48", VA = "0xAC9C48", Slot = "17")]
		public virtual void CheckValidity(DateTime time)
		{
		}

		[Token(Token = "0x60007CD")]
		[Address(RVA = "0xAC9EB8", Offset = "0xAC9EB8", VA = "0xAC9EB8", Slot = "24")]
		public virtual byte[] GetTbsCertificate()
		{
			return null;
		}

		[Token(Token = "0x60007CE")]
		[Address(RVA = "0xAC9EE0", Offset = "0xAC9EE0", VA = "0xAC9EE0", Slot = "25")]
		public virtual byte[] GetSignature()
		{
			return null;
		}

		[Token(Token = "0x60007D1")]
		[Address(RVA = "0xAC9FD0", Offset = "0xAC9FD0", VA = "0xAC9FD0", Slot = "28")]
		public virtual byte[] GetSigAlgParams()
		{
			return null;
		}

		[Token(Token = "0x60007D4")]
		[Address(RVA = "0xACA058", Offset = "0xACA058", VA = "0xACA058", Slot = "31")]
		public virtual bool[] GetKeyUsage()
		{
			return null;
		}

		[Token(Token = "0x60007D5")]
		[Address(RVA = "0xACA0D4", Offset = "0xACA0D4", VA = "0xACA0D4", Slot = "32")]
		public virtual IList GetExtendedKeyUsage()
		{
			return null;
		}

		[Token(Token = "0x60007D6")]
		[Address(RVA = "0xACA4E8", Offset = "0xACA4E8", VA = "0xACA4E8", Slot = "33")]
		public virtual int GetBasicConstraints()
		{
			return default(int);
		}

		[Token(Token = "0x60007D7")]
		[Address(RVA = "0xACA560", Offset = "0xACA560", VA = "0xACA560", Slot = "34")]
		public virtual ICollection GetSubjectAlternativeNames()
		{
			return null;
		}

		[Token(Token = "0x60007D8")]
		[Address(RVA = "0xACA5BC", Offset = "0xACA5BC", VA = "0xACA5BC", Slot = "35")]
		public virtual ICollection GetIssuerAlternativeNames()
		{
			return null;
		}

		[Token(Token = "0x60007D9")]
		[Address(RVA = "0xACA618", Offset = "0xACA618", VA = "0xACA618", Slot = "36")]
		protected virtual ICollection GetAlternativeNames(string oid)
		{
			return null;
		}

		[Token(Token = "0x60007DA")]
		[Address(RVA = "0xACA900", Offset = "0xACA900", VA = "0xACA900", Slot = "8")]
		protected override X509Extensions GetX509Extensions()
		{
			return null;
		}

		[Token(Token = "0x60007DB")]
		[Address(RVA = "0xACA950", Offset = "0xACA950", VA = "0xACA950", Slot = "37")]
		public virtual AsymmetricKeyParameter GetPublicKey()
		{
			return null;
		}

		[Token(Token = "0x60007DC")]
		[Address(RVA = "0xACA978", Offset = "0xACA978", VA = "0xACA978", Slot = "38")]
		public virtual byte[] GetEncoded()
		{
			return null;
		}

		[Token(Token = "0x60007DD")]
		[Address(RVA = "0xACA994", Offset = "0xACA994", VA = "0xACA994", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60007DE")]
		[Address(RVA = "0xACAA5C", Offset = "0xACAA5C", VA = "0xACAA5C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60007DF")]
		[Address(RVA = "0xACAB14", Offset = "0xACAB14", VA = "0xACAB14", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60007E0")]
		[Address(RVA = "0xACB760", Offset = "0xACB760", VA = "0xACB760", Slot = "39")]
		public virtual void Verify(AsymmetricKeyParameter key)
		{
		}

		[Token(Token = "0x60007E1")]
		[Address(RVA = "0xACBAC8", Offset = "0xACBAC8", VA = "0xACBAC8", Slot = "40")]
		protected virtual void CheckSignature(AsymmetricKeyParameter publicKey, ISigner signature)
		{
		}

		[Token(Token = "0x60007E2")]
		[Address(RVA = "0xACBD74", Offset = "0xACBD74", VA = "0xACBD74")]
		private static bool IsAlgIDEqual(AlgorithmIdentifier id1, AlgorithmIdentifier id2)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200013E")]
	public class X509CertificateParser
	{
		[Token(Token = "0x400070A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly PemParser PemCertParser;

		[Token(Token = "0x400070B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Asn1Set sData;

		[Token(Token = "0x400070C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int sDataObjectCount;

		[Token(Token = "0x400070D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Stream currentStream;

		[Token(Token = "0x60007E3")]
		[Address(RVA = "0xACBF38", Offset = "0xACBF38", VA = "0xACBF38")]
		private X509Certificate ReadDerCertificate(Asn1InputStream dIn)
		{
			return null;
		}

		[Token(Token = "0x60007E4")]
		[Address(RVA = "0xACC144", Offset = "0xACC144", VA = "0xACC144")]
		private X509Certificate GetCertificate()
		{
			return null;
		}

		[Token(Token = "0x60007E5")]
		[Address(RVA = "0xACC23C", Offset = "0xACC23C", VA = "0xACC23C")]
		private X509Certificate ReadPemCertificate(Stream inStream)
		{
			return null;
		}

		[Token(Token = "0x60007E6")]
		[Address(RVA = "0xACC2F0", Offset = "0xACC2F0", VA = "0xACC2F0", Slot = "4")]
		protected virtual X509Certificate CreateX509Certificate(X509CertificateStructure c)
		{
			return null;
		}

		[Token(Token = "0x60007E7")]
		[Address(RVA = "0xACC350", Offset = "0xACC350", VA = "0xACC350")]
		public X509Certificate ReadCertificate(byte[] input)
		{
			return null;
		}

		[Token(Token = "0x60007E8")]
		[Address(RVA = "0xACC66C", Offset = "0xACC66C", VA = "0xACC66C")]
		public ICollection ReadCertificates(byte[] input)
		{
			return null;
		}

		[Token(Token = "0x60007E9")]
		[Address(RVA = "0xACC3C8", Offset = "0xACC3C8", VA = "0xACC3C8")]
		public X509Certificate ReadCertificate(Stream inStream)
		{
			return null;
		}

		[Token(Token = "0x60007EA")]
		[Address(RVA = "0xACC6E4", Offset = "0xACC6E4", VA = "0xACC6E4")]
		public ICollection ReadCertificates(Stream inStream)
		{
			return null;
		}

		[Token(Token = "0x60007EB")]
		[Address(RVA = "0xACC808", Offset = "0xACC808", VA = "0xACC808")]
		public X509CertificateParser()
		{
		}
	}
	[Token(Token = "0x200013F")]
	public class X509Crl : X509ExtensionBase
	{
		[Token(Token = "0x400070E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly CertificateList c;

		[Token(Token = "0x400070F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly string sigAlgName;

		[Token(Token = "0x4000710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly byte[] sigAlgParams;

		[Token(Token = "0x4000711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly bool isIndirect;

		[Token(Token = "0x1700007C")]
		public virtual int Version
		{
			[Token(Token = "0x60007F1")]
			[Address(RVA = "0xACCE58", Offset = "0xACCE58", VA = "0xACCE58", Slot = "15")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700007D")]
		public virtual X509Name IssuerDN
		{
			[Token(Token = "0x60007F2")]
			[Address(RVA = "0xACCE74", Offset = "0xACCE74", VA = "0xACCE74", Slot = "16")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007E")]
		public virtual DateTime ThisUpdate
		{
			[Token(Token = "0x60007F3")]
			[Address(RVA = "0xACCE90", Offset = "0xACCE90", VA = "0xACCE90", Slot = "17")]
			get
			{
				return default(DateTime);
			}
		}

		[Token(Token = "0x1700007F")]
		public virtual DateTimeObject NextUpdate
		{
			[Token(Token = "0x60007F4")]
			[Address(RVA = "0xACCEBC", Offset = "0xACCEBC", VA = "0xACCEBC", Slot = "18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000080")]
		public virtual string SigAlgName
		{
			[Token(Token = "0x60007FA")]
			[Address(RVA = "0xACD960", Offset = "0xACD960", VA = "0xACD960", Slot = "23")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000081")]
		public virtual string SigAlgOid
		{
			[Token(Token = "0x60007FB")]
			[Address(RVA = "0xACD968", Offset = "0xACD968", VA = "0xACD968", Slot = "24")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000082")]
		protected virtual bool IsIndirectCrl
		{
			[Token(Token = "0x6000801")]
			[Address(RVA = "0xACE9EC", Offset = "0xACE9EC", VA = "0xACE9EC", Slot = "27")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60007ED")]
		[Address(RVA = "0xACC884", Offset = "0xACC884", VA = "0xACC884")]
		public X509Crl(CertificateList c)
		{
		}

		[Token(Token = "0x60007EE")]
		[Address(RVA = "0xACCA28", Offset = "0xACCA28", VA = "0xACCA28", Slot = "8")]
		protected override X509Extensions GetX509Extensions()
		{
			return null;
		}

		[Token(Token = "0x60007EF")]
		[Address(RVA = "0xACCA7C", Offset = "0xACCA7C", VA = "0xACCA7C", Slot = "13")]
		public virtual byte[] GetEncoded()
		{
			return null;
		}

		[Token(Token = "0x60007F0")]
		[Address(RVA = "0xACCB94", Offset = "0xACCB94", VA = "0xACCB94", Slot = "14")]
		public virtual void Verify(AsymmetricKeyParameter publicKey)
		{
		}

		[Token(Token = "0x60007F5")]
		[Address(RVA = "0xACCF64", Offset = "0xACCF64", VA = "0xACCF64")]
		private ISet LoadCrlEntries()
		{
			return null;
		}

		[Token(Token = "0x60007F6")]
		[Address(RVA = "0xACD37C", Offset = "0xACD37C", VA = "0xACD37C", Slot = "19")]
		public virtual X509CrlEntry GetRevokedCertificate(BigInteger serialNumber)
		{
			return null;
		}

		[Token(Token = "0x60007F7")]
		[Address(RVA = "0xACD748", Offset = "0xACD748", VA = "0xACD748", Slot = "20")]
		public virtual ISet GetRevokedCertificates()
		{
			return null;
		}

		[Token(Token = "0x60007F8")]
		[Address(RVA = "0xACD810", Offset = "0xACD810", VA = "0xACD810", Slot = "21")]
		public virtual byte[] GetTbsCertList()
		{
			return null;
		}

		[Token(Token = "0x60007F9")]
		[Address(RVA = "0xACD938", Offset = "0xACD938", VA = "0xACD938", Slot = "22")]
		public virtual byte[] GetSignature()
		{
			return null;
		}

		[Token(Token = "0x60007FC")]
		[Address(RVA = "0xACD9A0", Offset = "0xACD9A0", VA = "0xACD9A0", Slot = "25")]
		public virtual byte[] GetSigAlgParams()
		{
			return null;
		}

		[Token(Token = "0x60007FD")]
		[Address(RVA = "0xACD9AC", Offset = "0xACD9AC", VA = "0xACD9AC", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60007FE")]
		[Address(RVA = "0xACDA74", Offset = "0xACDA74", VA = "0xACDA74", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60007FF")]
		[Address(RVA = "0xACDA94", Offset = "0xACDA94", VA = "0xACDA94", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000800")]
		[Address(RVA = "0xACE91C", Offset = "0xACE91C", VA = "0xACE91C", Slot = "26")]
		public virtual bool IsRevoked(X509Certificate cert)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000140")]
	public class X509CrlEntry : X509ExtensionBase
	{
		[Token(Token = "0x4000712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private CrlEntry c;

		[Token(Token = "0x4000713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool isIndirect;

		[Token(Token = "0x4000714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private X509Name previousCertificateIssuer;

		[Token(Token = "0x4000715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private X509Name certificateIssuer;

		[Token(Token = "0x17000083")]
		public BigInteger SerialNumber
		{
			[Token(Token = "0x6000808")]
			[Address(RVA = "0xACEE88", Offset = "0xACEE88", VA = "0xACEE88")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000084")]
		public DateTime RevocationDate
		{
			[Token(Token = "0x6000809")]
			[Address(RVA = "0xACEEB0", Offset = "0xACEEB0", VA = "0xACEEB0")]
			get
			{
				return default(DateTime);
			}
		}

		[Token(Token = "0x17000085")]
		public bool HasExtensions
		{
			[Token(Token = "0x600080A")]
			[Address(RVA = "0xACEED8", Offset = "0xACEED8", VA = "0xACEED8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000802")]
		[Address(RVA = "0xACEB50", Offset = "0xACEB50", VA = "0xACEB50")]
		public X509CrlEntry(CrlEntry c)
		{
		}

		[Token(Token = "0x6000803")]
		[Address(RVA = "0xACD328", Offset = "0xACD328", VA = "0xACD328")]
		public X509CrlEntry(CrlEntry c, bool isIndirect, X509Name previousCertificateIssuer)
		{
		}

		[Token(Token = "0x6000804")]
		[Address(RVA = "0xACEB88", Offset = "0xACEB88", VA = "0xACEB88")]
		private X509Name loadCertificateIssuer()
		{
			return null;
		}

		[Token(Token = "0x6000805")]
		[Address(RVA = "0xACED4C", Offset = "0xACED4C", VA = "0xACED4C")]
		public X509Name GetCertificateIssuer()
		{
			return null;
		}

		[Token(Token = "0x6000806")]
		[Address(RVA = "0xACED54", Offset = "0xACED54", VA = "0xACED54", Slot = "8")]
		protected override X509Extensions GetX509Extensions()
		{
			return null;
		}

		[Token(Token = "0x6000807")]
		[Address(RVA = "0xACED70", Offset = "0xACED70", VA = "0xACED70")]
		public byte[] GetEncoded()
		{
			return null;
		}

		[Token(Token = "0x600080B")]
		[Address(RVA = "0xACEF04", Offset = "0xACEF04", VA = "0xACEF04", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000141")]
	public class X509CrlParser
	{
		[Token(Token = "0x4000716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly PemParser PemCrlParser;

		[Token(Token = "0x4000717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly bool lazyAsn1;

		[Token(Token = "0x4000718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Asn1Set sCrlData;

		[Token(Token = "0x4000719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int sCrlDataObjectCount;

		[Token(Token = "0x400071A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Stream currentCrlStream;

		[Token(Token = "0x600080C")]
		[Address(RVA = "0xACF660", Offset = "0xACF660", VA = "0xACF660")]
		public X509CrlParser()
		{
		}

		[Token(Token = "0x600080D")]
		[Address(RVA = "0xACF688", Offset = "0xACF688", VA = "0xACF688")]
		public X509CrlParser(bool lazyAsn1)
		{
		}

		[Token(Token = "0x600080E")]
		[Address(RVA = "0xACF6B8", Offset = "0xACF6B8", VA = "0xACF6B8")]
		private X509Crl ReadPemCrl(Stream inStream)
		{
			return null;
		}

		[Token(Token = "0x600080F")]
		[Address(RVA = "0xACF76C", Offset = "0xACF76C", VA = "0xACF76C")]
		private X509Crl ReadDerCrl(Asn1InputStream dIn)
		{
			return null;
		}

		[Token(Token = "0x6000810")]
		[Address(RVA = "0xACF978", Offset = "0xACF978", VA = "0xACF978")]
		private X509Crl GetCrl()
		{
			return null;
		}

		[Token(Token = "0x6000811")]
		[Address(RVA = "0xACFA00", Offset = "0xACFA00", VA = "0xACFA00", Slot = "4")]
		protected virtual X509Crl CreateX509Crl(CertificateList c)
		{
			return null;
		}

		[Token(Token = "0x6000812")]
		[Address(RVA = "0xACFA60", Offset = "0xACFA60", VA = "0xACFA60")]
		public X509Crl ReadCrl(byte[] input)
		{
			return null;
		}

		[Token(Token = "0x6000813")]
		[Address(RVA = "0xACFDDC", Offset = "0xACFDDC", VA = "0xACFDDC")]
		public ICollection ReadCrls(byte[] input)
		{
			return null;
		}

		[Token(Token = "0x6000814")]
		[Address(RVA = "0xACFAD8", Offset = "0xACFAD8", VA = "0xACFAD8")]
		public X509Crl ReadCrl(Stream inStream)
		{
			return null;
		}

		[Token(Token = "0x6000815")]
		[Address(RVA = "0xACFE54", Offset = "0xACFE54", VA = "0xACFE54")]
		public ICollection ReadCrls(Stream inStream)
		{
			return null;
		}
	}
	[Token(Token = "0x2000142")]
	public abstract class X509ExtensionBase : IX509Extension
	{
		[Token(Token = "0x6000817")]
		protected abstract X509Extensions GetX509Extensions();

		[Token(Token = "0x6000818")]
		[Address(RVA = "0xACFFEC", Offset = "0xACFFEC", VA = "0xACFFEC", Slot = "9")]
		protected virtual ISet GetExtensionOids(bool critical)
		{
			return null;
		}

		[Token(Token = "0x6000819")]
		[Address(RVA = "0xAD034C", Offset = "0xAD034C", VA = "0xAD034C", Slot = "10")]
		public virtual ISet GetNonCriticalExtensionOids()
		{
			return null;
		}

		[Token(Token = "0x600081A")]
		[Address(RVA = "0xAD035C", Offset = "0xAD035C", VA = "0xAD035C", Slot = "11")]
		public virtual ISet GetCriticalExtensionOids()
		{
			return null;
		}

		[Token(Token = "0x600081B")]
		[Address(RVA = "0xAD036C", Offset = "0xAD036C", VA = "0xAD036C", Slot = "6")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x830550", Offset = "0x830550")]
		public Asn1OctetString GetExtensionValue(string oid)
		{
			return null;
		}

		[Token(Token = "0x600081C")]
		[Address(RVA = "0xAD03E8", Offset = "0xAD03E8", VA = "0xAD03E8", Slot = "12")]
		public virtual Asn1OctetString GetExtensionValue(DerObjectIdentifier oid)
		{
			return null;
		}

		[Token(Token = "0x600081D")]
		[Address(RVA = "0xAC9760", Offset = "0xAC9760", VA = "0xAC9760")]
		protected X509ExtensionBase()
		{
		}
	}
	[Token(Token = "0x2000143")]
	internal class X509SignatureUtilities
	{
		[Token(Token = "0x400071B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Asn1Null derNull;

		[Token(Token = "0x600081E")]
		[Address(RVA = "0xACBEA8", Offset = "0xACBEA8", VA = "0xACBEA8")]
		internal static void SetSignatureParameters(ISigner signature, Asn1Encodable parameters)
		{
		}

		[Token(Token = "0x600081F")]
		[Address(RVA = "0xACB830", Offset = "0xACB830", VA = "0xACB830")]
		internal static string GetSignatureName(AlgorithmIdentifier sigAlgId)
		{
			return null;
		}

		[Token(Token = "0x6000820")]
		[Address(RVA = "0xAD042C", Offset = "0xAD042C", VA = "0xAD042C")]
		private static string GetDigestAlgName(DerObjectIdentifier digestAlgOID)
		{
			return null;
		}

		[Token(Token = "0x6000821")]
		[Address(RVA = "0xAD0774", Offset = "0xAD0774", VA = "0xAD0774")]
		public X509SignatureUtilities()
		{
		}
	}
}
namespace Org.BouncyCastle.X509.Extension
{
	[Token(Token = "0x2000144")]
	public class X509ExtensionUtilities
	{
		[Token(Token = "0x6000823")]
		[Address(RVA = "0xAC8974", Offset = "0xAC8974", VA = "0xAC8974")]
		public static Asn1Object FromExtensionValue(Asn1OctetString extensionValue)
		{
			return null;
		}

		[Token(Token = "0x6000824")]
		[Address(RVA = "0xAC899C", Offset = "0xAC899C", VA = "0xAC899C")]
		public static ICollection GetIssuerAlternativeNames(X509Certificate cert)
		{
			return null;
		}

		[Token(Token = "0x6000825")]
		[Address(RVA = "0xAC9364", Offset = "0xAC9364", VA = "0xAC9364")]
		public static ICollection GetSubjectAlternativeNames(X509Certificate cert)
		{
			return null;
		}

		[Token(Token = "0x6000826")]
		[Address(RVA = "0xAC8A20", Offset = "0xAC8A20", VA = "0xAC8A20")]
		private static ICollection GetAlternativeName(Asn1OctetString extVal)
		{
			return null;
		}

		[Token(Token = "0x6000827")]
		[Address(RVA = "0xAC93E8", Offset = "0xAC93E8", VA = "0xAC93E8")]
		public X509ExtensionUtilities()
		{
		}
	}
}
namespace Org.BouncyCastle.Utilities
{
	[Token(Token = "0x2000145")]
	public abstract class Arrays
	{
		[Token(Token = "0x6000828")]
		[Address(RVA = "0xB45E24", Offset = "0xB45E24", VA = "0xB45E24")]
		public static bool AreEqual(bool[] a, bool[] b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000829")]
		[Address(RVA = "0xB45ED8", Offset = "0xB45ED8", VA = "0xB45ED8")]
		public static bool AreEqual(char[] a, char[] b)
		{
			return default(bool);
		}

		[Token(Token = "0x600082A")]
		[Address(RVA = "0xB45F7C", Offset = "0xB45F7C", VA = "0xB45F7C")]
		public static bool AreEqual(byte[] a, byte[] b)
		{
			return default(bool);
		}

		[Token(Token = "0x600082B")]
		[Address(RVA = "0xB46020", Offset = "0xB46020", VA = "0xB46020")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x830588", Offset = "0x830588")]
		public static bool AreSame(byte[] a, byte[] b)
		{
			return default(bool);
		}

		[Token(Token = "0x600082C")]
		[Address(RVA = "0xB4604C", Offset = "0xB4604C", VA = "0xB4604C")]
		public static bool ConstantTimeAreEqual(byte[] a, byte[] b)
		{
			return default(bool);
		}

		[Token(Token = "0x600082D")]
		[Address(RVA = "0xB460D8", Offset = "0xB460D8", VA = "0xB460D8")]
		public static bool AreEqual(int[] a, int[] b)
		{
			return default(bool);
		}

		[Token(Token = "0x600082E")]
		[Address(RVA = "0xB4617C", Offset = "0xB4617C", VA = "0xB4617C")]
		public static bool AreEqual(uint[] a, uint[] b)
		{
			return default(bool);
		}

		[Token(Token = "0x600082F")]
		[Address(RVA = "0xB45E50", Offset = "0xB45E50", VA = "0xB45E50")]
		private static bool HaveSameContents(bool[] a, bool[] b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000830")]
		[Address(RVA = "0xB45F04", Offset = "0xB45F04", VA = "0xB45F04")]
		private static bool HaveSameContents(char[] a, char[] b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000831")]
		[Address(RVA = "0xB45FA8", Offset = "0xB45FA8", VA = "0xB45FA8")]
		private static bool HaveSameContents(byte[] a, byte[] b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000832")]
		[Address(RVA = "0xB46104", Offset = "0xB46104", VA = "0xB46104")]
		private static bool HaveSameContents(int[] a, int[] b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000833")]
		[Address(RVA = "0xB461A8", Offset = "0xB461A8", VA = "0xB461A8")]
		private static bool HaveSameContents(uint[] a, uint[] b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000834")]
		[Address(RVA = "0xB46220", Offset = "0xB46220", VA = "0xB46220")]
		public static string ToString(object[] a)
		{
			return null;
		}

		[Token(Token = "0x6000835")]
		[Address(RVA = "0xB46340", Offset = "0xB46340", VA = "0xB46340")]
		public static int GetHashCode(byte[] data)
		{
			return default(int);
		}

		[Token(Token = "0x6000836")]
		[Address(RVA = "0xB463A0", Offset = "0xB463A0", VA = "0xB463A0")]
		public static int GetHashCode(byte[] data, int off, int len)
		{
			return default(int);
		}

		[Token(Token = "0x6000837")]
		[Address(RVA = "0xB463FC", Offset = "0xB463FC", VA = "0xB463FC")]
		public static int GetHashCode(int[] data)
		{
			return default(int);
		}

		[Token(Token = "0x6000838")]
		[Address(RVA = "0xB4645C", Offset = "0xB4645C", VA = "0xB4645C")]
		public static int GetHashCode(int[] data, int off, int len)
		{
			return default(int);
		}

		[Token(Token = "0x6000839")]
		[Address(RVA = "0xB464B8", Offset = "0xB464B8", VA = "0xB464B8")]
		public static int GetHashCode(uint[] data)
		{
			return default(int);
		}

		[Token(Token = "0x600083A")]
		[Address(RVA = "0xB46518", Offset = "0xB46518", VA = "0xB46518")]
		public static int GetHashCode(uint[] data, int off, int len)
		{
			return default(int);
		}

		[Token(Token = "0x600083B")]
		[Address(RVA = "0xB46574", Offset = "0xB46574", VA = "0xB46574")]
		public static int GetHashCode(ulong[] data)
		{
			return default(int);
		}

		[Token(Token = "0x600083C")]
		[Address(RVA = "0xB465DC", Offset = "0xB465DC", VA = "0xB465DC")]
		public static int GetHashCode(ulong[] data, int off, int len)
		{
			return default(int);
		}

		[Token(Token = "0x600083D")]
		[Address(RVA = "0xB46640", Offset = "0xB46640", VA = "0xB46640")]
		public static byte[] Clone(byte[] data)
		{
			return null;
		}

		[Token(Token = "0x600083E")]
		[Address(RVA = "0xB466C0", Offset = "0xB466C0", VA = "0xB466C0")]
		public static byte[] Clone(byte[] data, byte[] existing)
		{
			return null;
		}

		[Token(Token = "0x600083F")]
		[Address(RVA = "0xB46720", Offset = "0xB46720", VA = "0xB46720")]
		public static int[] Clone(int[] data)
		{
			return null;
		}

		[Token(Token = "0x6000840")]
		[Address(RVA = "0xB467A0", Offset = "0xB467A0", VA = "0xB467A0")]
		internal static uint[] Clone(uint[] data)
		{
			return null;
		}

		[Token(Token = "0x6000841")]
		[Address(RVA = "0xB46820", Offset = "0xB46820", VA = "0xB46820")]
		public static long[] Clone(long[] data)
		{
			return null;
		}

		[Token(Token = "0x6000842")]
		[Address(RVA = "0xB468A0", Offset = "0xB468A0", VA = "0xB468A0")]
		public static ulong[] Clone(ulong[] data)
		{
			return null;
		}

		[Token(Token = "0x6000843")]
		[Address(RVA = "0xB46920", Offset = "0xB46920", VA = "0xB46920")]
		public static ulong[] Clone(ulong[] data, ulong[] existing)
		{
			return null;
		}

		[Token(Token = "0x6000844")]
		[Address(RVA = "0xB46980", Offset = "0xB46980", VA = "0xB46980")]
		public static bool Contains(byte[] a, byte n)
		{
			return default(bool);
		}

		[Token(Token = "0x6000845")]
		[Address(RVA = "0xB469E4", Offset = "0xB469E4", VA = "0xB469E4")]
		public static bool Contains(short[] a, short n)
		{
			return default(bool);
		}

		[Token(Token = "0x6000846")]
		[Address(RVA = "0xB46A48", Offset = "0xB46A48", VA = "0xB46A48")]
		public static bool Contains(int[] a, int n)
		{
			return default(bool);
		}

		[Token(Token = "0x6000847")]
		[Address(RVA = "0xB46AAC", Offset = "0xB46AAC", VA = "0xB46AAC")]
		public static void Fill(byte[] buf, byte b)
		{
		}

		[Token(Token = "0x6000848")]
		[Address(RVA = "0xB46B14", Offset = "0xB46B14", VA = "0xB46B14")]
		public static byte[] CopyOf(byte[] data, int newLength)
		{
			return null;
		}

		[Token(Token = "0x6000849")]
		[Address(RVA = "0xB46BD0", Offset = "0xB46BD0", VA = "0xB46BD0")]
		public static char[] CopyOf(char[] data, int newLength)
		{
			return null;
		}

		[Token(Token = "0x600084A")]
		[Address(RVA = "0xB46C8C", Offset = "0xB46C8C", VA = "0xB46C8C")]
		public static int[] CopyOf(int[] data, int newLength)
		{
			return null;
		}

		[Token(Token = "0x600084B")]
		[Address(RVA = "0xB46D48", Offset = "0xB46D48", VA = "0xB46D48")]
		public static long[] CopyOf(long[] data, int newLength)
		{
			return null;
		}

		[Token(Token = "0x600084C")]
		[Address(RVA = "0xB46E04", Offset = "0xB46E04", VA = "0xB46E04")]
		public static BigInteger[] CopyOf(BigInteger[] data, int newLength)
		{
			return null;
		}

		[Token(Token = "0x600084D")]
		[Address(RVA = "0xB46EC0", Offset = "0xB46EC0", VA = "0xB46EC0")]
		public static byte[] CopyOfRange(byte[] data, int from, int to)
		{
			return null;
		}

		[Token(Token = "0x600084E")]
		[Address(RVA = "0xB47070", Offset = "0xB47070", VA = "0xB47070")]
		public static int[] CopyOfRange(int[] data, int from, int to)
		{
			return null;
		}

		[Token(Token = "0x600084F")]
		[Address(RVA = "0xB47148", Offset = "0xB47148", VA = "0xB47148")]
		public static long[] CopyOfRange(long[] data, int from, int to)
		{
			return null;
		}

		[Token(Token = "0x6000850")]
		[Address(RVA = "0xB47220", Offset = "0xB47220", VA = "0xB47220")]
		public static BigInteger[] CopyOfRange(BigInteger[] data, int from, int to)
		{
			return null;
		}

		[Token(Token = "0x6000851")]
		[Address(RVA = "0xB46F98", Offset = "0xB46F98", VA = "0xB46F98")]
		private static int GetLength(int from, int to)
		{
			return default(int);
		}

		[Token(Token = "0x6000852")]
		[Address(RVA = "0xB472F8", Offset = "0xB472F8", VA = "0xB472F8")]
		public static byte[] Append(byte[] a, byte b)
		{
			return null;
		}

		[Token(Token = "0x6000853")]
		[Address(RVA = "0xB473E0", Offset = "0xB473E0", VA = "0xB473E0")]
		public static short[] Append(short[] a, short b)
		{
			return null;
		}

		[Token(Token = "0x6000854")]
		[Address(RVA = "0xB474C8", Offset = "0xB474C8", VA = "0xB474C8")]
		public static int[] Append(int[] a, int b)
		{
			return null;
		}

		[Token(Token = "0x6000855")]
		[Address(RVA = "0xB475B0", Offset = "0xB475B0", VA = "0xB475B0")]
		public static byte[] Concatenate(byte[] a, byte[] b)
		{
			return null;
		}

		[Token(Token = "0x6000856")]
		[Address(RVA = "0xB4767C", Offset = "0xB4767C", VA = "0xB4767C")]
		public static int[] Concatenate(int[] a, int[] b)
		{
			return null;
		}

		[Token(Token = "0x6000857")]
		[Address(RVA = "0xB47748", Offset = "0xB47748", VA = "0xB47748")]
		public static byte[] Prepend(byte[] a, byte b)
		{
			return null;
		}

		[Token(Token = "0x6000858")]
		[Address(RVA = "0xB47814", Offset = "0xB47814", VA = "0xB47814")]
		public static short[] Prepend(short[] a, short b)
		{
			return null;
		}

		[Token(Token = "0x6000859")]
		[Address(RVA = "0xB478E0", Offset = "0xB478E0", VA = "0xB478E0")]
		public static int[] Prepend(int[] a, int b)
		{
			return null;
		}

		[Token(Token = "0x600085A")]
		[Address(RVA = "0xB479AC", Offset = "0xB479AC", VA = "0xB479AC")]
		public static byte[] Reverse(byte[] a)
		{
			return null;
		}

		[Token(Token = "0x600085B")]
		[Address(RVA = "0xB47A68", Offset = "0xB47A68", VA = "0xB47A68")]
		protected Arrays()
		{
		}
	}
	[Token(Token = "0x2000146")]
	public abstract class BigIntegers
	{
		[Token(Token = "0x400071C")]
		private const int MaxIterations = 1000;

		[Token(Token = "0x600085C")]
		[Address(RVA = "0xB47A70", Offset = "0xB47A70", VA = "0xB47A70")]
		public static byte[] AsUnsignedByteArray(BigInteger n)
		{
			return null;
		}

		[Token(Token = "0x600085D")]
		[Address(RVA = "0xB47A88", Offset = "0xB47A88", VA = "0xB47A88")]
		public static byte[] AsUnsignedByteArray(int length, BigInteger n)
		{
			return null;
		}

		[Token(Token = "0x600085E")]
		[Address(RVA = "0xB47B8C", Offset = "0xB47B8C", VA = "0xB47B8C")]
		public static BigInteger CreateRandomInRange(BigInteger min, BigInteger max, SecureRandom random)
		{
			return null;
		}

		[Token(Token = "0x600085F")]
		[Address(RVA = "0xB47DB8", Offset = "0xB47DB8", VA = "0xB47DB8")]
		protected BigIntegers()
		{
		}
	}
	[Token(Token = "0x2000147")]
	internal abstract class Enums
	{
		[Token(Token = "0x6000860")]
		[Address(RVA = "0xB38F08", Offset = "0xB38F08", VA = "0xB38F08")]
		internal static Enum GetEnumValue(Type enumType, string s)
		{
			return null;
		}

		[Token(Token = "0x6000861")]
		[Address(RVA = "0xB4C164", Offset = "0xB4C164", VA = "0xB4C164")]
		internal static Array GetEnumValues(Type enumType)
		{
			return null;
		}

		[Token(Token = "0x6000862")]
		[Address(RVA = "0xB38470", Offset = "0xB38470", VA = "0xB38470")]
		internal static Enum GetArbitraryValue(Type enumType)
		{
			return null;
		}

		[Token(Token = "0x6000863")]
		[Address(RVA = "0xB4C1CC", Offset = "0xB4C1CC", VA = "0xB4C1CC")]
		protected Enums()
		{
		}
	}
	[Token(Token = "0x2000148")]
	public interface IMemoable
	{
		[Token(Token = "0x6000864")]
		IMemoable Copy();

		[Token(Token = "0x6000865")]
		void Reset(IMemoable other);
	}
	[Token(Token = "0x2000149")]
	public abstract class Integers
	{
		[Token(Token = "0x6000866")]
		[Address(RVA = "0xB4E870", Offset = "0xB4E870", VA = "0xB4E870")]
		public static int RotateLeft(int i, int distance)
		{
			return default(int);
		}

		[Token(Token = "0x6000867")]
		[Address(RVA = "0xB4E884", Offset = "0xB4E884", VA = "0xB4E884")]
		public static int RotateRight(int i, int distance)
		{
			return default(int);
		}

		[Token(Token = "0x6000868")]
		[Address(RVA = "0xB4E898", Offset = "0xB4E898", VA = "0xB4E898")]
		protected Integers()
		{
		}
	}
	[Token(Token = "0x200014A")]
	public class MemoableResetException : InvalidCastException
	{
		[Token(Token = "0x6000869")]
		[Address(RVA = "0xB4E8A0", Offset = "0xB4E8A0", VA = "0xB4E8A0")]
		public MemoableResetException(string msg)
		{
		}
	}
	[Token(Token = "0x200014B")]
	internal abstract class Platform
	{
		[Token(Token = "0x400071D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly string NewLine;

		[Token(Token = "0x600086A")]
		[Address(RVA = "0xB4EFB0", Offset = "0xB4EFB0", VA = "0xB4EFB0")]
		private static string GetNewLine()
		{
			return null;
		}

		[Token(Token = "0x600086B")]
		[Address(RVA = "0xB4EFB8", Offset = "0xB4EFB8", VA = "0xB4EFB8")]
		internal static int CompareIgnoreCase(string a, string b)
		{
			return default(int);
		}

		[Token(Token = "0x600086C")]
		[Address(RVA = "0xB4EFC4", Offset = "0xB4EFC4", VA = "0xB4EFC4")]
		internal static Exception CreateNotImplementedException(string message)
		{
			return null;
		}

		[Token(Token = "0x600086D")]
		[Address(RVA = "0xB4CD64", Offset = "0xB4CD64", VA = "0xB4CD64")]
		internal static IList CreateArrayList()
		{
			return null;
		}

		[Token(Token = "0x600086E")]
		[Address(RVA = "0xB4F028", Offset = "0xB4F028", VA = "0xB4F028")]
		internal static IList CreateArrayList(int capacity)
		{
			return null;
		}

		[Token(Token = "0x600086F")]
		[Address(RVA = "0xB4CE58", Offset = "0xB4CE58", VA = "0xB4CE58")]
		internal static IList CreateArrayList(ICollection collection)
		{
			return null;
		}

		[Token(Token = "0x6000870")]
		[Address(RVA = "0xB4F08C", Offset = "0xB4F08C", VA = "0xB4F08C")]
		internal static IList CreateArrayList(IEnumerable collection)
		{
			return null;
		}

		[Token(Token = "0x6000871")]
		[Address(RVA = "0xB38414", Offset = "0xB38414", VA = "0xB38414")]
		internal static IDictionary CreateHashtable()
		{
			return null;
		}

		[Token(Token = "0x6000872")]
		[Address(RVA = "0xB4F320", Offset = "0xB4F320", VA = "0xB4F320")]
		internal static IDictionary CreateHashtable(int capacity)
		{
			return null;
		}

		[Token(Token = "0x6000873")]
		[Address(RVA = "0xB4F384", Offset = "0xB4F384", VA = "0xB4F384")]
		internal static IDictionary CreateHashtable(IDictionary dictionary)
		{
			return null;
		}

		[Token(Token = "0x6000874")]
		[Address(RVA = "0xB4F3E8", Offset = "0xB4F3E8", VA = "0xB4F3E8")]
		internal static string ToLowerInvariant(string s)
		{
			return null;
		}

		[Token(Token = "0x6000875")]
		[Address(RVA = "0xB3879C", Offset = "0xB3879C", VA = "0xB3879C")]
		internal static string ToUpperInvariant(string s)
		{
			return null;
		}

		[Token(Token = "0x6000876")]
		[Address(RVA = "0xB4F464", Offset = "0xB4F464", VA = "0xB4F464")]
		protected Platform()
		{
		}
	}
	[Token(Token = "0x200014C")]
	public abstract class Strings
	{
		[Token(Token = "0x6000878")]
		[Address(RVA = "0xB4F4C4", Offset = "0xB4F4C4", VA = "0xB4F4C4")]
		internal static bool IsOneOf(string s, params string[] candidates)
		{
			return default(bool);
		}

		[Token(Token = "0x6000879")]
		[Address(RVA = "0xB4F550", Offset = "0xB4F550", VA = "0xB4F550")]
		public static string FromByteArray(byte[] bs)
		{
			return null;
		}

		[Token(Token = "0x600087A")]
		[Address(RVA = "0xB4F654", Offset = "0xB4F654", VA = "0xB4F654")]
		public static byte[] ToByteArray(char[] cs)
		{
			return null;
		}

		[Token(Token = "0x600087B")]
		[Address(RVA = "0xB4F750", Offset = "0xB4F750", VA = "0xB4F750")]
		public static byte[] ToByteArray(string s)
		{
			return null;
		}

		[Token(Token = "0x600087C")]
		[Address(RVA = "0xB4A138", Offset = "0xB4A138", VA = "0xB4A138")]
		public static string FromAsciiByteArray(byte[] bytes)
		{
			return null;
		}

		[Token(Token = "0x600087D")]
		[Address(RVA = "0xB4F848", Offset = "0xB4F848", VA = "0xB4F848")]
		public static byte[] ToAsciiByteArray(char[] cs)
		{
			return null;
		}

		[Token(Token = "0x600087E")]
		[Address(RVA = "0xB49FDC", Offset = "0xB49FDC", VA = "0xB49FDC")]
		public static byte[] ToAsciiByteArray(string s)
		{
			return null;
		}

		[Token(Token = "0x600087F")]
		[Address(RVA = "0xB4F884", Offset = "0xB4F884", VA = "0xB4F884")]
		public static string FromUtf8ByteArray(byte[] bytes)
		{
			return null;
		}

		[Token(Token = "0x6000880")]
		[Address(RVA = "0xB4F8CC", Offset = "0xB4F8CC", VA = "0xB4F8CC")]
		public static byte[] ToUtf8ByteArray(char[] cs)
		{
			return null;
		}

		[Token(Token = "0x6000881")]
		[Address(RVA = "0xB4F908", Offset = "0xB4F908", VA = "0xB4F908")]
		public static byte[] ToUtf8ByteArray(string s)
		{
			return null;
		}

		[Token(Token = "0x6000882")]
		[Address(RVA = "0xB4F944", Offset = "0xB4F944", VA = "0xB4F944")]
		protected Strings()
		{
		}
	}
	[Token(Token = "0x200014D")]
	public sealed class Times
	{
		[Token(Token = "0x400071E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static long NanosecondsPerTick;

		[Token(Token = "0x6000883")]
		[Address(RVA = "0xB3D99C", Offset = "0xB3D99C", VA = "0xB3D99C")]
		public static long NanoTime()
		{
			return default(long);
		}

		[Token(Token = "0x6000884")]
		[Address(RVA = "0xB4F94C", Offset = "0xB4F94C", VA = "0xB4F94C")]
		public Times()
		{
		}
	}
}
namespace Org.BouncyCastle.Utilities.Zlib
{
	[Token(Token = "0x200014E")]
	internal sealed class Adler32
	{
		[Token(Token = "0x400071F")]
		private const int BASE = 65521;

		[Token(Token = "0x4000720")]
		private const int NMAX = 5552;

		[Token(Token = "0x6000886")]
		[Address(RVA = "0xB4F9A8", Offset = "0xB4F9A8", VA = "0xB4F9A8")]
		internal long adler32(long adler, byte[] buf, int index, int len)
		{
			return default(long);
		}

		[Token(Token = "0x6000887")]
		[Address(RVA = "0xB4FCE0", Offset = "0xB4FCE0", VA = "0xB4FCE0")]
		public Adler32()
		{
		}
	}
	[Token(Token = "0x200014F")]
	public sealed class Deflate
	{
		[Token(Token = "0x2000669")]
		internal class Config
		{
			[Token(Token = "0x400258E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal int good_length;

			[Token(Token = "0x400258F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal int max_lazy;

			[Token(Token = "0x4002590")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal int nice_length;

			[Token(Token = "0x4002591")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal int max_chain;

			[Token(Token = "0x4002592")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal int func;

			[Token(Token = "0x60034D5")]
			[Address(RVA = "0xAC26F0", Offset = "0xAC26F0", VA = "0xAC26F0")]
			internal Config(int good_length, int max_lazy, int nice_length, int max_chain, int func)
			{
			}
		}

		[Token(Token = "0x4000721")]
		private const int MAX_MEM_LEVEL = 9;

		[Token(Token = "0x4000722")]
		private const int Z_DEFAULT_COMPRESSION = -1;

		[Token(Token = "0x4000723")]
		private const int MAX_WBITS = 15;

		[Token(Token = "0x4000724")]
		private const int DEF_MEM_LEVEL = 8;

		[Token(Token = "0x4000725")]
		private const int STORED = 0;

		[Token(Token = "0x4000726")]
		private const int FAST = 1;

		[Token(Token = "0x4000727")]
		private const int SLOW = 2;

		[Token(Token = "0x4000728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Config[] config_table;

		[Token(Token = "0x4000729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly string[] z_errmsg;

		[Token(Token = "0x400072A")]
		private const int NeedMore = 0;

		[Token(Token = "0x400072B")]
		private const int BlockDone = 1;

		[Token(Token = "0x400072C")]
		private const int FinishStarted = 2;

		[Token(Token = "0x400072D")]
		private const int FinishDone = 3;

		[Token(Token = "0x400072E")]
		private const int PRESET_DICT = 32;

		[Token(Token = "0x400072F")]
		private const int Z_FILTERED = 1;

		[Token(Token = "0x4000730")]
		private const int Z_HUFFMAN_ONLY = 2;

		[Token(Token = "0x4000731")]
		private const int Z_DEFAULT_STRATEGY = 0;

		[Token(Token = "0x4000732")]
		private const int Z_NO_FLUSH = 0;

		[Token(Token = "0x4000733")]
		private const int Z_PARTIAL_FLUSH = 1;

		[Token(Token = "0x4000734")]
		private const int Z_SYNC_FLUSH = 2;

		[Token(Token = "0x4000735")]
		private const int Z_FULL_FLUSH = 3;

		[Token(Token = "0x4000736")]
		private const int Z_FINISH = 4;

		[Token(Token = "0x4000737")]
		private const int Z_OK = 0;

		[Token(Token = "0x4000738")]
		private const int Z_STREAM_END = 1;

		[Token(Token = "0x4000739")]
		private const int Z_NEED_DICT = 2;

		[Token(Token = "0x400073A")]
		private const int Z_ERRNO = -1;

		[Token(Token = "0x400073B")]
		private const int Z_STREAM_ERROR = -2;

		[Token(Token = "0x400073C")]
		private const int Z_DATA_ERROR = -3;

		[Token(Token = "0x400073D")]
		private const int Z_MEM_ERROR = -4;

		[Token(Token = "0x400073E")]
		private const int Z_BUF_ERROR = -5;

		[Token(Token = "0x400073F")]
		private const int Z_VERSION_ERROR = -6;

		[Token(Token = "0x4000740")]
		private const int INIT_STATE = 42;

		[Token(Token = "0x4000741")]
		private const int BUSY_STATE = 113;

		[Token(Token = "0x4000742")]
		private const int FINISH_STATE = 666;

		[Token(Token = "0x4000743")]
		private const int Z_DEFLATED = 8;

		[Token(Token = "0x4000744")]
		private const int STORED_BLOCK = 0;

		[Token(Token = "0x4000745")]
		private const int STATIC_TREES = 1;

		[Token(Token = "0x4000746")]
		private const int DYN_TREES = 2;

		[Token(Token = "0x4000747")]
		private const int Z_BINARY = 0;

		[Token(Token = "0x4000748")]
		private const int Z_ASCII = 1;

		[Token(Token = "0x4000749")]
		private const int Z_UNKNOWN = 2;

		[Token(Token = "0x400074A")]
		private const int Buf_size = 16;

		[Token(Token = "0x400074B")]
		private const int REP_3_6 = 16;

		[Token(Token = "0x400074C")]
		private const int REPZ_3_10 = 17;

		[Token(Token = "0x400074D")]
		private const int REPZ_11_138 = 18;

		[Token(Token = "0x400074E")]
		private const int MIN_MATCH = 3;

		[Token(Token = "0x400074F")]
		private const int MAX_MATCH = 258;

		[Token(Token = "0x4000750")]
		private const int MIN_LOOKAHEAD = 262;

		[Token(Token = "0x4000751")]
		private const int MAX_BITS = 15;

		[Token(Token = "0x4000752")]
		private const int D_CODES = 30;

		[Token(Token = "0x4000753")]
		private const int BL_CODES = 19;

		[Token(Token = "0x4000754")]
		private const int LENGTH_CODES = 29;

		[Token(Token = "0x4000755")]
		private const int LITERALS = 256;

		[Token(Token = "0x4000756")]
		private const int L_CODES = 286;

		[Token(Token = "0x4000757")]
		private const int HEAP_SIZE = 573;

		[Token(Token = "0x4000758")]
		private const int END_BLOCK = 256;

		[Token(Token = "0x4000759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal ZStream strm;

		[Token(Token = "0x400075A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int status;

		[Token(Token = "0x400075B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal byte[] pending_buf;

		[Token(Token = "0x400075C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal int pending_buf_size;

		[Token(Token = "0x400075D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal int pending_out;

		[Token(Token = "0x400075E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal int pending;

		[Token(Token = "0x400075F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal int noheader;

		[Token(Token = "0x4000760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal byte data_type;

		[Token(Token = "0x4000761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		internal byte method;

		[Token(Token = "0x4000762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal int last_flush;

		[Token(Token = "0x4000763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal int w_size;

		[Token(Token = "0x4000764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		internal int w_bits;

		[Token(Token = "0x4000765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal int w_mask;

		[Token(Token = "0x4000766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal byte[] window;

		[Token(Token = "0x4000767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal int window_size;

		[Token(Token = "0x4000768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal short[] prev;

		[Token(Token = "0x4000769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal short[] head;

		[Token(Token = "0x400076A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal int ins_h;

		[Token(Token = "0x400076B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		internal int hash_size;

		[Token(Token = "0x400076C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal int hash_bits;

		[Token(Token = "0x400076D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		internal int hash_mask;

		[Token(Token = "0x400076E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal int hash_shift;

		[Token(Token = "0x400076F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		internal int block_start;

		[Token(Token = "0x4000770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal int match_length;

		[Token(Token = "0x4000771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		internal int prev_match;

		[Token(Token = "0x4000772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal int match_available;

		[Token(Token = "0x4000773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		internal int strstart;

		[Token(Token = "0x4000774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal int match_start;

		[Token(Token = "0x4000775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		internal int lookahead;

		[Token(Token = "0x4000776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal int prev_length;

		[Token(Token = "0x4000777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		internal int max_chain_length;

		[Token(Token = "0x4000778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		internal int max_lazy_match;

		[Token(Token = "0x4000779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		internal int level;

		[Token(Token = "0x400077A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		internal int strategy;

		[Token(Token = "0x400077B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		internal int good_match;

		[Token(Token = "0x400077C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		internal int nice_match;

		[Token(Token = "0x400077D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		internal short[] dyn_ltree;

		[Token(Token = "0x400077E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		internal short[] dyn_dtree;

		[Token(Token = "0x400077F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		internal short[] bl_tree;

		[Token(Token = "0x4000780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		internal ZTree l_desc;

		[Token(Token = "0x4000781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		internal ZTree d_desc;

		[Token(Token = "0x4000782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		internal ZTree bl_desc;

		[Token(Token = "0x4000783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		internal short[] bl_count;

		[Token(Token = "0x4000784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		internal int[] heap;

		[Token(Token = "0x4000785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		internal int heap_len;

		[Token(Token = "0x4000786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		internal int heap_max;

		[Token(Token = "0x4000787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		internal byte[] depth;

		[Token(Token = "0x4000788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		internal int l_buf;

		[Token(Token = "0x4000789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		internal int lit_bufsize;

		[Token(Token = "0x400078A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		internal int last_lit;

		[Token(Token = "0x400078B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		internal int d_buf;

		[Token(Token = "0x400078C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		internal int opt_len;

		[Token(Token = "0x400078D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		internal int static_len;

		[Token(Token = "0x400078E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		internal int matches;

		[Token(Token = "0x400078F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		internal int last_eob_len;

		[Token(Token = "0x4000790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		internal uint bi_buf;

		[Token(Token = "0x4000791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		internal int bi_valid;

		[Token(Token = "0x6000888")]
		[Address(RVA = "0xB4FCE8", Offset = "0xB4FCE8", VA = "0xB4FCE8")]
		static Deflate()
		{
		}

		[Token(Token = "0x6000889")]
		[Address(RVA = "0xB50358", Offset = "0xB50358", VA = "0xB50358")]
		internal Deflate()
		{
		}

		[Token(Token = "0x600088A")]
		[Address(RVA = "0xB50474", Offset = "0xB50474", VA = "0xB50474")]
		internal void lm_init()
		{
		}

		[Token(Token = "0x600088B")]
		[Address(RVA = "0xB50628", Offset = "0xB50628", VA = "0xB50628")]
		internal void tr_init()
		{
		}

		[Token(Token = "0x600088C")]
		[Address(RVA = "0xB5071C", Offset = "0xB5071C", VA = "0xB5071C")]
		internal void init_block()
		{
		}

		[Token(Token = "0x600088D")]
		[Address(RVA = "0xB50800", Offset = "0xB50800", VA = "0xB50800")]
		internal void pqdownheap(short[] tree, int k)
		{
		}

		[Token(Token = "0x600088E")]
		[Address(RVA = "0xB509E0", Offset = "0xB509E0", VA = "0xB509E0")]
		internal static bool smaller(short[] tree, int n, int m, byte[] depth)
		{
			return default(bool);
		}

		[Token(Token = "0x600088F")]
		[Address(RVA = "0xB50A78", Offset = "0xB50A78", VA = "0xB50A78")]
		internal void scan_tree(short[] tree, int max_code)
		{
		}

		[Token(Token = "0x6000890")]
		[Address(RVA = "0xB50C18", Offset = "0xB50C18", VA = "0xB50C18")]
		internal int build_bl_tree()
		{
			return default(int);
		}

		[Token(Token = "0x6000891")]
		[Address(RVA = "0xB50D4C", Offset = "0xB50D4C", VA = "0xB50D4C")]
		internal void send_all_trees(int lcodes, int dcodes, int blcodes)
		{
		}

		[Token(Token = "0x6000892")]
		[Address(RVA = "0xB50F64", Offset = "0xB50F64", VA = "0xB50F64")]
		internal void send_tree(short[] tree, int max_code)
		{
		}

		[Token(Token = "0x6000893")]
		[Address(RVA = "0xB51164", Offset = "0xB51164", VA = "0xB51164")]
		internal void put_byte(byte[] p, int start, int len)
		{
		}

		[Token(Token = "0x6000894")]
		[Address(RVA = "0xB511B0", Offset = "0xB511B0", VA = "0xB511B0")]
		internal void put_byte(byte c)
		{
		}

		[Token(Token = "0x6000895")]
		[Address(RVA = "0xB511F8", Offset = "0xB511F8", VA = "0xB511F8")]
		internal void put_short(int w)
		{
		}

		[Token(Token = "0x6000896")]
		[Address(RVA = "0xB5126C", Offset = "0xB5126C", VA = "0xB5126C")]
		internal void putShortMSB(int b)
		{
		}

		[Token(Token = "0x6000897")]
		[Address(RVA = "0xB51114", Offset = "0xB51114", VA = "0xB51114")]
		internal void send_code(int c, short[] tree)
		{
		}

		[Token(Token = "0x6000898")]
		[Address(RVA = "0xB50EA0", Offset = "0xB50EA0", VA = "0xB50EA0")]
		internal void send_bits(int val, int length)
		{
		}

		[Token(Token = "0x6000899")]
		[Address(RVA = "0xB512E0", Offset = "0xB512E0", VA = "0xB512E0")]
		internal void _tr_align()
		{
		}

		[Token(Token = "0x600089A")]
		[Address(RVA = "0xB514B4", Offset = "0xB514B4", VA = "0xB514B4")]
		internal bool _tr_tally(int dist, int lc)
		{
			return default(bool);
		}

		[Token(Token = "0x600089B")]
		[Address(RVA = "0xB51768", Offset = "0xB51768", VA = "0xB51768")]
		internal void compress_block(short[] ltree, short[] dtree)
		{
		}

		[Token(Token = "0x600089C")]
		[Address(RVA = "0xB51A0C", Offset = "0xB51A0C", VA = "0xB51A0C")]
		internal void set_data_type()
		{
		}

		[Token(Token = "0x600089D")]
		[Address(RVA = "0xB513D8", Offset = "0xB513D8", VA = "0xB513D8")]
		internal void bi_flush()
		{
		}

		[Token(Token = "0x600089E")]
		[Address(RVA = "0xB51AF4", Offset = "0xB51AF4", VA = "0xB51AF4")]
		internal void bi_windup()
		{
		}

		[Token(Token = "0x600089F")]
		[Address(RVA = "0xB51BB0", Offset = "0xB51BB0", VA = "0xB51BB0")]
		internal void copy_block(int buf, int len, bool header)
		{
		}

		[Token(Token = "0x60008A0")]
		[Address(RVA = "0xB51C38", Offset = "0xB51C38", VA = "0xB51C38")]
		internal void flush_block_only(bool eof)
		{
		}

		[Token(Token = "0x60008A1")]
		[Address(RVA = "0xB51E64", Offset = "0xB51E64", VA = "0xB51E64")]
		internal int deflate_stored(int flush)
		{
			return default(int);
		}

		[Token(Token = "0x60008A2")]
		[Address(RVA = "0xB52178", Offset = "0xB52178", VA = "0xB52178")]
		internal void _tr_stored_block(int buf, int stored_len, bool eof)
		{
		}

		[Token(Token = "0x60008A3")]
		[Address(RVA = "0xB51C90", Offset = "0xB51C90", VA = "0xB51C90")]
		internal void _tr_flush_block(int buf, int stored_len, bool eof)
		{
		}

		[Token(Token = "0x60008A4")]
		[Address(RVA = "0xB51F90", Offset = "0xB51F90", VA = "0xB51F90")]
		internal void fill_window()
		{
		}

		[Token(Token = "0x60008A5")]
		[Address(RVA = "0xB521C8", Offset = "0xB521C8", VA = "0xB521C8")]
		internal int deflate_fast(int flush)
		{
			return default(int);
		}

		[Token(Token = "0x60008A6")]
		[Address(RVA = "0xB528E4", Offset = "0xB528E4", VA = "0xB528E4")]
		internal int deflate_slow(int flush)
		{
			return default(int);
		}

		[Token(Token = "0x60008A7")]
		[Address(RVA = "0xB52538", Offset = "0xB52538", VA = "0xB52538")]
		internal int longest_match(int cur_match)
		{
			return default(int);
		}

		[Token(Token = "0x60008A8")]
		[Address(RVA = "0xB52CE8", Offset = "0xB52CE8", VA = "0xB52CE8")]
		internal int deflateInit(ZStream strm, int level, int bits)
		{
			return default(int);
		}

		[Token(Token = "0x60008A9")]
		[Address(RVA = "0xB52EAC", Offset = "0xB52EAC", VA = "0xB52EAC")]
		internal int deflateInit(ZStream strm, int level)
		{
			return default(int);
		}

		[Token(Token = "0x60008AA")]
		[Address(RVA = "0xB52CFC", Offset = "0xB52CFC", VA = "0xB52CFC")]
		internal int deflateInit2(ZStream strm, int level, int method, int windowBits, int memLevel, int strategy)
		{
			return default(int);
		}

		[Token(Token = "0x60008AB")]
		[Address(RVA = "0xB52EC0", Offset = "0xB52EC0", VA = "0xB52EC0")]
		internal int deflateReset(ZStream strm)
		{
			return default(int);
		}

		[Token(Token = "0x60008AC")]
		[Address(RVA = "0xB52F40", Offset = "0xB52F40", VA = "0xB52F40")]
		internal int deflateEnd()
		{
			return default(int);
		}

		[Token(Token = "0x60008AD")]
		[Address(RVA = "0xB52F84", Offset = "0xB52F84", VA = "0xB52F84")]
		internal int deflateParams(ZStream strm, int _level, int _strategy)
		{
			return default(int);
		}

		[Token(Token = "0x60008AE")]
		[Address(RVA = "0xB531AC", Offset = "0xB531AC", VA = "0xB531AC")]
		internal int deflateSetDictionary(ZStream strm, byte[] dictionary, int dictLength)
		{
			return default(int);
		}

		[Token(Token = "0x60008AF")]
		[Address(RVA = "0xB53360", Offset = "0xB53360", VA = "0xB53360")]
		internal int deflate(ZStream strm, int flush)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000150")]
	internal sealed class InfBlocks
	{
		[Token(Token = "0x4000792")]
		private const int MANY = 1440;

		[Token(Token = "0x4000793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int[] inflate_mask;

		[Token(Token = "0x4000794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int[] border;

		[Token(Token = "0x4000795")]
		private const int Z_OK = 0;

		[Token(Token = "0x4000796")]
		private const int Z_STREAM_END = 1;

		[Token(Token = "0x4000797")]
		private const int Z_NEED_DICT = 2;

		[Token(Token = "0x4000798")]
		private const int Z_ERRNO = -1;

		[Token(Token = "0x4000799")]
		private const int Z_STREAM_ERROR = -2;

		[Token(Token = "0x400079A")]
		private const int Z_DATA_ERROR = -3;

		[Token(Token = "0x400079B")]
		private const int Z_MEM_ERROR = -4;

		[Token(Token = "0x400079C")]
		private const int Z_BUF_ERROR = -5;

		[Token(Token = "0x400079D")]
		private const int Z_VERSION_ERROR = -6;

		[Token(Token = "0x400079E")]
		private const int TYPE = 0;

		[Token(Token = "0x400079F")]
		private const int LENS = 1;

		[Token(Token = "0x40007A0")]
		private const int STORED = 2;

		[Token(Token = "0x40007A1")]
		private const int TABLE = 3;

		[Token(Token = "0x40007A2")]
		private const int BTREE = 4;

		[Token(Token = "0x40007A3")]
		private const int DTREE = 5;

		[Token(Token = "0x40007A4")]
		private const int CODES = 6;

		[Token(Token = "0x40007A5")]
		private const int DRY = 7;

		[Token(Token = "0x40007A6")]
		private const int DONE = 8;

		[Token(Token = "0x40007A7")]
		private const int BAD = 9;

		[Token(Token = "0x40007A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int mode;

		[Token(Token = "0x40007A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal int left;

		[Token(Token = "0x40007AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int table;

		[Token(Token = "0x40007AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int index;

		[Token(Token = "0x40007AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal int[] blens;

		[Token(Token = "0x40007AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal int[] bb;

		[Token(Token = "0x40007AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal int[] tb;

		[Token(Token = "0x40007AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal InfCodes codes;

		[Token(Token = "0x40007B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int last;

		[Token(Token = "0x40007B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		internal int bitk;

		[Token(Token = "0x40007B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal int bitb;

		[Token(Token = "0x40007B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal int[] hufts;

		[Token(Token = "0x40007B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal byte[] window;

		[Token(Token = "0x40007B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal int end;

		[Token(Token = "0x40007B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		internal int read;

		[Token(Token = "0x40007B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal int write;

		[Token(Token = "0x40007B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal object checkfn;

		[Token(Token = "0x40007B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal long check;

		[Token(Token = "0x40007BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal InfTree inftree;

		[Token(Token = "0x60008B0")]
		[Address(RVA = "0xAC2744", Offset = "0xAC2744", VA = "0xAC2744")]
		internal InfBlocks(ZStream z, object checkfn, int w)
		{
		}

		[Token(Token = "0x60008B1")]
		[Address(RVA = "0xAC2864", Offset = "0xAC2864", VA = "0xAC2864")]
		internal void reset(ZStream z, long[] c)
		{
		}

		[Token(Token = "0x60008B2")]
		[Address(RVA = "0xAC2904", Offset = "0xAC2904", VA = "0xAC2904")]
		internal int proc(ZStream z, int r)
		{
			return default(int);
		}

		[Token(Token = "0x60008B3")]
		[Address(RVA = "0xAC48D0", Offset = "0xAC48D0", VA = "0xAC48D0")]
		internal void free(ZStream z)
		{
		}

		[Token(Token = "0x60008B4")]
		[Address(RVA = "0xAC48F8", Offset = "0xAC48F8", VA = "0xAC48F8")]
		internal void set_dictionary(byte[] d, int start, int n)
		{
		}

		[Token(Token = "0x60008B5")]
		[Address(RVA = "0xAC493C", Offset = "0xAC493C", VA = "0xAC493C")]
		internal int sync_point()
		{
			return default(int);
		}

		[Token(Token = "0x60008B6")]
		[Address(RVA = "0xAC393C", Offset = "0xAC393C", VA = "0xAC393C")]
		internal int inflate_flush(ZStream z, int r)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000151")]
	internal sealed class InfCodes
	{
		[Token(Token = "0x40007BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int[] inflate_mask;

		[Token(Token = "0x40007BC")]
		private const int Z_OK = 0;

		[Token(Token = "0x40007BD")]
		private const int Z_STREAM_END = 1;

		[Token(Token = "0x40007BE")]
		private const int Z_NEED_DICT = 2;

		[Token(Token = "0x40007BF")]
		private const int Z_ERRNO = -1;

		[Token(Token = "0x40007C0")]
		private const int Z_STREAM_ERROR = -2;

		[Token(Token = "0x40007C1")]
		private const int Z_DATA_ERROR = -3;

		[Token(Token = "0x40007C2")]
		private const int Z_MEM_ERROR = -4;

		[Token(Token = "0x40007C3")]
		private const int Z_BUF_ERROR = -5;

		[Token(Token = "0x40007C4")]
		private const int Z_VERSION_ERROR = -6;

		[Token(Token = "0x40007C5")]
		private const int START = 0;

		[Token(Token = "0x40007C6")]
		private const int LEN = 1;

		[Token(Token = "0x40007C7")]
		private const int LENEXT = 2;

		[Token(Token = "0x40007C8")]
		private const int DIST = 3;

		[Token(Token = "0x40007C9")]
		private const int DISTEXT = 4;

		[Token(Token = "0x40007CA")]
		private const int COPY = 5;

		[Token(Token = "0x40007CB")]
		private const int LIT = 6;

		[Token(Token = "0x40007CC")]
		private const int WASH = 7;

		[Token(Token = "0x40007CD")]
		private const int END = 8;

		[Token(Token = "0x40007CE")]
		private const int BADCODE = 9;

		[Token(Token = "0x40007CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int mode;

		[Token(Token = "0x40007D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int len;

		[Token(Token = "0x40007D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int[] tree;

		[Token(Token = "0x40007D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int tree_index;

		[Token(Token = "0x40007D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int need;

		[Token(Token = "0x40007D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int lit;

		[Token(Token = "0x40007D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int get;

		[Token(Token = "0x40007D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int dist;

		[Token(Token = "0x40007D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private byte lbits;

		[Token(Token = "0x40007D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private byte dbits;

		[Token(Token = "0x40007D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int[] ltree;

		[Token(Token = "0x40007DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int ltree_index;

		[Token(Token = "0x40007DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int[] dtree;

		[Token(Token = "0x40007DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int dtree_index;

		[Token(Token = "0x60008B8")]
		[Address(RVA = "0xAC2854", Offset = "0xAC2854", VA = "0xAC2854")]
		internal InfCodes()
		{
		}

		[Token(Token = "0x60008B9")]
		[Address(RVA = "0xAC3BFC", Offset = "0xAC3BFC", VA = "0xAC3BFC")]
		internal void init(int bl, int bd, int[] tl, int tl_index, int[] td, int td_index, ZStream z)
		{
		}

		[Token(Token = "0x60008BA")]
		[Address(RVA = "0xAC3F68", Offset = "0xAC3F68", VA = "0xAC3F68")]
		internal int proc(InfBlocks s, ZStream z, int r)
		{
			return default(int);
		}

		[Token(Token = "0x60008BB")]
		[Address(RVA = "0xAC2900", Offset = "0xAC2900", VA = "0xAC2900")]
		internal void free(ZStream z)
		{
		}

		[Token(Token = "0x60008BC")]
		[Address(RVA = "0xAC4A00", Offset = "0xAC4A00", VA = "0xAC4A00")]
		internal int inflate_fast(int bl, int bd, int[] tl, int tl_index, int[] td, int td_index, InfBlocks s, ZStream z)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000152")]
	internal sealed class InfTree
	{
		[Token(Token = "0x40007DD")]
		private const int MANY = 1440;

		[Token(Token = "0x40007DE")]
		private const int Z_OK = 0;

		[Token(Token = "0x40007DF")]
		private const int Z_STREAM_END = 1;

		[Token(Token = "0x40007E0")]
		private const int Z_NEED_DICT = 2;

		[Token(Token = "0x40007E1")]
		private const int Z_ERRNO = -1;

		[Token(Token = "0x40007E2")]
		private const int Z_STREAM_ERROR = -2;

		[Token(Token = "0x40007E3")]
		private const int Z_DATA_ERROR = -3;

		[Token(Token = "0x40007E4")]
		private const int Z_MEM_ERROR = -4;

		[Token(Token = "0x40007E5")]
		private const int Z_BUF_ERROR = -5;

		[Token(Token = "0x40007E6")]
		private const int Z_VERSION_ERROR = -6;

		[Token(Token = "0x40007E7")]
		private const int fixed_bl = 9;

		[Token(Token = "0x40007E8")]
		private const int fixed_bd = 5;

		[Token(Token = "0x40007E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int[] fixed_tl;

		[Token(Token = "0x40007EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int[] fixed_td;

		[Token(Token = "0x40007EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly int[] cplens;

		[Token(Token = "0x40007EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly int[] cplext;

		[Token(Token = "0x40007ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly int[] cpdist;

		[Token(Token = "0x40007EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static readonly int[] cpdext;

		[Token(Token = "0x40007EF")]
		private const int BMAX = 15;

		[Token(Token = "0x40007F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int[] hn;

		[Token(Token = "0x40007F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int[] v;

		[Token(Token = "0x40007F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int[] c;

		[Token(Token = "0x40007F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int[] r;

		[Token(Token = "0x40007F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int[] u;

		[Token(Token = "0x40007F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int[] x;

		[Token(Token = "0x60008BE")]
		[Address(RVA = "0xAC53AC", Offset = "0xAC53AC", VA = "0xAC53AC")]
		private int huft_build(int[] b, int bindex, int n, int s, int[] d, int[] e, int[] t, int[] m, int[] hp, int[] hn, int[] v)
		{
			return default(int);
		}

		[Token(Token = "0x60008BF")]
		[Address(RVA = "0xAC3C20", Offset = "0xAC3C20", VA = "0xAC3C20")]
		internal int inflate_trees_bits(int[] c, int[] bb, int[] tb, int[] hp, ZStream z)
		{
			return default(int);
		}

		[Token(Token = "0x60008C0")]
		[Address(RVA = "0xAC3D40", Offset = "0xAC3D40", VA = "0xAC3D40")]
		internal int inflate_trees_dynamic(int nl, int nd, int[] c, int[] bl, int[] bd, int[] tl, int[] td, int[] hp, ZStream z)
		{
			return default(int);
		}

		[Token(Token = "0x60008C1")]
		[Address(RVA = "0xAC3AD0", Offset = "0xAC3AD0", VA = "0xAC3AD0")]
		internal static int inflate_trees_fixed(int[] bl, int[] bd, int[][] tl, int[][] td, ZStream z)
		{
			return default(int);
		}

		[Token(Token = "0x60008C2")]
		[Address(RVA = "0xAC5BF4", Offset = "0xAC5BF4", VA = "0xAC5BF4")]
		private void initWorkArea(int vsize)
		{
		}

		[Token(Token = "0x60008C3")]
		[Address(RVA = "0xAC285C", Offset = "0xAC285C", VA = "0xAC285C")]
		public InfTree()
		{
		}
	}
	[Token(Token = "0x2000153")]
	internal sealed class Inflate
	{
		[Token(Token = "0x40007F6")]
		private const int MAX_WBITS = 15;

		[Token(Token = "0x40007F7")]
		private const int PRESET_DICT = 32;

		[Token(Token = "0x40007F8")]
		internal const int Z_NO_FLUSH = 0;

		[Token(Token = "0x40007F9")]
		internal const int Z_PARTIAL_FLUSH = 1;

		[Token(Token = "0x40007FA")]
		internal const int Z_SYNC_FLUSH = 2;

		[Token(Token = "0x40007FB")]
		internal const int Z_FULL_FLUSH = 3;

		[Token(Token = "0x40007FC")]
		internal const int Z_FINISH = 4;

		[Token(Token = "0x40007FD")]
		private const int Z_DEFLATED = 8;

		[Token(Token = "0x40007FE")]
		private const int Z_OK = 0;

		[Token(Token = "0x40007FF")]
		private const int Z_STREAM_END = 1;

		[Token(Token = "0x4000800")]
		private const int Z_NEED_DICT = 2;

		[Token(Token = "0x4000801")]
		private const int Z_ERRNO = -1;

		[Token(Token = "0x4000802")]
		private const int Z_STREAM_ERROR = -2;

		[Token(Token = "0x4000803")]
		private const int Z_DATA_ERROR = -3;

		[Token(Token = "0x4000804")]
		private const int Z_MEM_ERROR = -4;

		[Token(Token = "0x4000805")]
		private const int Z_BUF_ERROR = -5;

		[Token(Token = "0x4000806")]
		private const int Z_VERSION_ERROR = -6;

		[Token(Token = "0x4000807")]
		private const int METHOD = 0;

		[Token(Token = "0x4000808")]
		private const int FLAG = 1;

		[Token(Token = "0x4000809")]
		private const int DICT4 = 2;

		[Token(Token = "0x400080A")]
		private const int DICT3 = 3;

		[Token(Token = "0x400080B")]
		private const int DICT2 = 4;

		[Token(Token = "0x400080C")]
		private const int DICT1 = 5;

		[Token(Token = "0x400080D")]
		private const int DICT0 = 6;

		[Token(Token = "0x400080E")]
		private const int BLOCKS = 7;

		[Token(Token = "0x400080F")]
		private const int CHECK4 = 8;

		[Token(Token = "0x4000810")]
		private const int CHECK3 = 9;

		[Token(Token = "0x4000811")]
		private const int CHECK2 = 10;

		[Token(Token = "0x4000812")]
		private const int CHECK1 = 11;

		[Token(Token = "0x4000813")]
		private const int DONE = 12;

		[Token(Token = "0x4000814")]
		private const int BAD = 13;

		[Token(Token = "0x4000815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int mode;

		[Token(Token = "0x4000816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal int method;

		[Token(Token = "0x4000817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal long[] was;

		[Token(Token = "0x4000818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal long need;

		[Token(Token = "0x4000819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal int marker;

		[Token(Token = "0x400081A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal int nowrap;

		[Token(Token = "0x400081B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal int wbits;

		[Token(Token = "0x400081C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal InfBlocks blocks;

		[Token(Token = "0x400081D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly byte[] mark;

		[Token(Token = "0x60008C5")]
		[Address(RVA = "0xAC5F38", Offset = "0xAC5F38", VA = "0xAC5F38")]
		internal int inflateReset(ZStream z)
		{
			return default(int);
		}

		[Token(Token = "0x60008C6")]
		[Address(RVA = "0xAC5F98", Offset = "0xAC5F98", VA = "0xAC5F98")]
		internal int inflateEnd(ZStream z)
		{
			return default(int);
		}

		[Token(Token = "0x60008C7")]
		[Address(RVA = "0xAC5FD4", Offset = "0xAC5FD4", VA = "0xAC5FD4")]
		internal int inflateInit(ZStream z, int w)
		{
			return default(int);
		}

		[Token(Token = "0x60008C8")]
		[Address(RVA = "0xAC60B4", Offset = "0xAC60B4", VA = "0xAC60B4")]
		internal int inflate(ZStream z, int f)
		{
			return default(int);
		}

		[Token(Token = "0x60008C9")]
		[Address(RVA = "0xAC6768", Offset = "0xAC6768", VA = "0xAC6768")]
		internal int inflateSetDictionary(ZStream z, byte[] dictionary, int dictLength)
		{
			return default(int);
		}

		[Token(Token = "0x60008CA")]
		[Address(RVA = "0xAC6878", Offset = "0xAC6878", VA = "0xAC6878")]
		internal int inflateSync(ZStream z)
		{
			return default(int);
		}

		[Token(Token = "0x60008CB")]
		[Address(RVA = "0xAC6A64", Offset = "0xAC6A64", VA = "0xAC6A64")]
		internal int inflateSyncPoint(ZStream z)
		{
			return default(int);
		}

		[Token(Token = "0x60008CC")]
		[Address(RVA = "0xAC6A90", Offset = "0xAC6A90", VA = "0xAC6A90")]
		public Inflate()
		{
		}
	}
	[Token(Token = "0x2000154")]
	public sealed class JZlib
	{
		[Token(Token = "0x400081E")]
		private const string _version = "1.0.7";

		[Token(Token = "0x400081F")]
		public const int Z_NO_COMPRESSION = 0;

		[Token(Token = "0x4000820")]
		public const int Z_BEST_SPEED = 1;

		[Token(Token = "0x4000821")]
		public const int Z_BEST_COMPRESSION = 9;

		[Token(Token = "0x4000822")]
		public const int Z_DEFAULT_COMPRESSION = -1;

		[Token(Token = "0x4000823")]
		public const int Z_FILTERED = 1;

		[Token(Token = "0x4000824")]
		public const int Z_HUFFMAN_ONLY = 2;

		[Token(Token = "0x4000825")]
		public const int Z_DEFAULT_STRATEGY = 0;

		[Token(Token = "0x4000826")]
		public const int Z_NO_FLUSH = 0;

		[Token(Token = "0x4000827")]
		public const int Z_PARTIAL_FLUSH = 1;

		[Token(Token = "0x4000828")]
		public const int Z_SYNC_FLUSH = 2;

		[Token(Token = "0x4000829")]
		public const int Z_FULL_FLUSH = 3;

		[Token(Token = "0x400082A")]
		public const int Z_FINISH = 4;

		[Token(Token = "0x400082B")]
		public const int Z_OK = 0;

		[Token(Token = "0x400082C")]
		public const int Z_STREAM_END = 1;

		[Token(Token = "0x400082D")]
		public const int Z_NEED_DICT = 2;

		[Token(Token = "0x400082E")]
		public const int Z_ERRNO = -1;

		[Token(Token = "0x400082F")]
		public const int Z_STREAM_ERROR = -2;

		[Token(Token = "0x4000830")]
		public const int Z_DATA_ERROR = -3;

		[Token(Token = "0x4000831")]
		public const int Z_MEM_ERROR = -4;

		[Token(Token = "0x4000832")]
		public const int Z_BUF_ERROR = -5;

		[Token(Token = "0x4000833")]
		public const int Z_VERSION_ERROR = -6;

		[Token(Token = "0x60008CE")]
		[Address(RVA = "0xAC6B88", Offset = "0xAC6B88", VA = "0xAC6B88")]
		public static string version()
		{
			return null;
		}

		[Token(Token = "0x60008CF")]
		[Address(RVA = "0xAC6BD0", Offset = "0xAC6BD0", VA = "0xAC6BD0")]
		public JZlib()
		{
		}
	}
	[Token(Token = "0x2000155")]
	internal sealed class StaticTree
	{
		[Token(Token = "0x4000834")]
		private const int MAX_BITS = 15;

		[Token(Token = "0x4000835")]
		private const int BL_CODES = 19;

		[Token(Token = "0x4000836")]
		private const int D_CODES = 30;

		[Token(Token = "0x4000837")]
		private const int LITERALS = 256;

		[Token(Token = "0x4000838")]
		private const int LENGTH_CODES = 29;

		[Token(Token = "0x4000839")]
		private const int L_CODES = 286;

		[Token(Token = "0x400083A")]
		internal const int MAX_BL_BITS = 7;

		[Token(Token = "0x400083B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly short[] static_ltree;

		[Token(Token = "0x400083C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly short[] static_dtree;

		[Token(Token = "0x400083D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal static readonly StaticTree static_l_desc;

		[Token(Token = "0x400083E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal static readonly StaticTree static_d_desc;

		[Token(Token = "0x400083F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal static readonly StaticTree static_bl_desc;

		[Token(Token = "0x4000840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal short[] static_tree;

		[Token(Token = "0x4000841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int[] extra_bits;

		[Token(Token = "0x4000842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal int extra_base;

		[Token(Token = "0x4000843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal int elems;

		[Token(Token = "0x4000844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal int max_length;

		[Token(Token = "0x60008D0")]
		[Address(RVA = "0xAC6BD8", Offset = "0xAC6BD8", VA = "0xAC6BD8")]
		internal StaticTree(short[] static_tree, int[] extra_bits, int extra_base, int elems, int max_length)
		{
		}
	}
	[Token(Token = "0x2000156")]
	public class ZOutputStream : Stream
	{
		[Token(Token = "0x4000845")]
		private const int BufferSize = 512;

		[Token(Token = "0x4000846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected ZStream z;

		[Token(Token = "0x4000847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected int flushLevel;

		[Token(Token = "0x4000848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected byte[] buf;

		[Token(Token = "0x4000849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected byte[] buf1;

		[Token(Token = "0x400084A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected bool compress;

		[Token(Token = "0x400084B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Stream output;

		[Token(Token = "0x400084C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected bool closed;

		[Token(Token = "0x17000086")]
		public sealed override bool CanRead
		{
			[Token(Token = "0x60008D6")]
			[Address(RVA = "0xAC7044", Offset = "0xAC7044", VA = "0xAC7044", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000087")]
		public sealed override bool CanSeek
		{
			[Token(Token = "0x60008D7")]
			[Address(RVA = "0xAC704C", Offset = "0xAC704C", VA = "0xAC704C", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000088")]
		public sealed override bool CanWrite
		{
			[Token(Token = "0x60008D8")]
			[Address(RVA = "0xAC7054", Offset = "0xAC7054", VA = "0xAC7054", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000089")]
		public virtual int FlushMode
		{
			[Token(Token = "0x60008DD")]
			[Address(RVA = "0xAC750C", Offset = "0xAC750C", VA = "0xAC750C", Slot = "33")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60008DE")]
			[Address(RVA = "0xAC7514", Offset = "0xAC7514", VA = "0xAC7514", Slot = "34")]
			set
			{
			}
		}

		[Token(Token = "0x1700008A")]
		public sealed override long Length
		{
			[Token(Token = "0x60008DF")]
			[Address(RVA = "0xAC751C", Offset = "0xAC751C", VA = "0xAC751C", Slot = "10")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x1700008B")]
		public sealed override long Position
		{
			[Token(Token = "0x60008E0")]
			[Address(RVA = "0xAC757C", Offset = "0xAC757C", VA = "0xAC757C", Slot = "11")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x60008E1")]
			[Address(RVA = "0xAC75DC", Offset = "0xAC75DC", VA = "0xAC75DC", Slot = "12")]
			set
			{
			}
		}

		[Token(Token = "0x1700008C")]
		public virtual long TotalIn
		{
			[Token(Token = "0x60008E5")]
			[Address(RVA = "0xAC775C", Offset = "0xAC775C", VA = "0xAC775C", Slot = "35")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x1700008D")]
		public virtual long TotalOut
		{
			[Token(Token = "0x60008E6")]
			[Address(RVA = "0xAC7778", Offset = "0xAC7778", VA = "0xAC7778", Slot = "36")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x60008D2")]
		[Address(RVA = "0xAC6DDC", Offset = "0xAC6DDC", VA = "0xAC6DDC")]
		public ZOutputStream(Stream output)
		{
		}

		[Token(Token = "0x60008D3")]
		[Address(RVA = "0xAC6DE4", Offset = "0xAC6DE4", VA = "0xAC6DE4")]
		public ZOutputStream(Stream output, ZStream z)
		{
		}

		[Token(Token = "0x60008D4")]
		[Address(RVA = "0xAC6F3C", Offset = "0xAC6F3C", VA = "0xAC6F3C")]
		public ZOutputStream(Stream output, int level)
		{
		}

		[Token(Token = "0x60008D5")]
		[Address(RVA = "0xAC6F44", Offset = "0xAC6F44", VA = "0xAC6F44")]
		public ZOutputStream(Stream output, int level, bool nowrap)
		{
		}

		[Token(Token = "0x60008D9")]
		[Address(RVA = "0xAC7064", Offset = "0xAC7064", VA = "0xAC7064", Slot = "16")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x60008DA")]
		[Address(RVA = "0xAC71D0", Offset = "0xAC71D0", VA = "0xAC71D0", Slot = "31")]
		public virtual void End()
		{
		}

		[Token(Token = "0x60008DB")]
		[Address(RVA = "0xAC72E4", Offset = "0xAC72E4", VA = "0xAC72E4", Slot = "32")]
		public virtual void Finish()
		{
		}

		[Token(Token = "0x60008DC")]
		[Address(RVA = "0xAC74E8", Offset = "0xAC74E8", VA = "0xAC74E8", Slot = "17")]
		public override void Flush()
		{
		}

		[Token(Token = "0x60008E2")]
		[Address(RVA = "0xAC763C", Offset = "0xAC763C", VA = "0xAC763C", Slot = "27")]
		public sealed override int Read(byte[] buffer, int offset, int count)
		{
			return default(int);
		}

		[Token(Token = "0x60008E3")]
		[Address(RVA = "0xAC769C", Offset = "0xAC769C", VA = "0xAC769C", Slot = "25")]
		public sealed override long Seek(long offset, SeekOrigin origin)
		{
			return default(long);
		}

		[Token(Token = "0x60008E4")]
		[Address(RVA = "0xAC76FC", Offset = "0xAC76FC", VA = "0xAC76FC", Slot = "26")]
		public sealed override void SetLength(long value)
		{
		}

		[Token(Token = "0x60008E7")]
		[Address(RVA = "0xAC7794", Offset = "0xAC7794", VA = "0xAC7794", Slot = "29")]
		public override void Write(byte[] b, int off, int len)
		{
		}

		[Token(Token = "0x60008E8")]
		[Address(RVA = "0xAC7980", Offset = "0xAC7980", VA = "0xAC7980", Slot = "30")]
		public override void WriteByte(byte b)
		{
		}
	}
	[Token(Token = "0x2000157")]
	public sealed class ZStream
	{
		[Token(Token = "0x400084D")]
		private const int MAX_WBITS = 15;

		[Token(Token = "0x400084E")]
		private const int DEF_WBITS = 15;

		[Token(Token = "0x400084F")]
		private const int Z_NO_FLUSH = 0;

		[Token(Token = "0x4000850")]
		private const int Z_PARTIAL_FLUSH = 1;

		[Token(Token = "0x4000851")]
		private const int Z_SYNC_FLUSH = 2;

		[Token(Token = "0x4000852")]
		private const int Z_FULL_FLUSH = 3;

		[Token(Token = "0x4000853")]
		private const int Z_FINISH = 4;

		[Token(Token = "0x4000854")]
		private const int MAX_MEM_LEVEL = 9;

		[Token(Token = "0x4000855")]
		private const int Z_OK = 0;

		[Token(Token = "0x4000856")]
		private const int Z_STREAM_END = 1;

		[Token(Token = "0x4000857")]
		private const int Z_NEED_DICT = 2;

		[Token(Token = "0x4000858")]
		private const int Z_ERRNO = -1;

		[Token(Token = "0x4000859")]
		private const int Z_STREAM_ERROR = -2;

		[Token(Token = "0x400085A")]
		private const int Z_DATA_ERROR = -3;

		[Token(Token = "0x400085B")]
		private const int Z_MEM_ERROR = -4;

		[Token(Token = "0x400085C")]
		private const int Z_BUF_ERROR = -5;

		[Token(Token = "0x400085D")]
		private const int Z_VERSION_ERROR = -6;

		[Token(Token = "0x400085E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte[] next_in;

		[Token(Token = "0x400085F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int next_in_index;

		[Token(Token = "0x4000860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int avail_in;

		[Token(Token = "0x4000861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public long total_in;

		[Token(Token = "0x4000862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public byte[] next_out;

		[Token(Token = "0x4000863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int next_out_index;

		[Token(Token = "0x4000864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int avail_out;

		[Token(Token = "0x4000865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public long total_out;

		[Token(Token = "0x4000866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string msg;

		[Token(Token = "0x4000867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal Deflate dstate;

		[Token(Token = "0x4000868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal Inflate istate;

		[Token(Token = "0x4000869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal int data_type;

		[Token(Token = "0x400086A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public long adler;

		[Token(Token = "0x400086B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal Adler32 _adler;

		[Token(Token = "0x60008E9")]
		[Address(RVA = "0xAC6F30", Offset = "0xAC6F30", VA = "0xAC6F30")]
		public int inflateInit()
		{
			return default(int);
		}

		[Token(Token = "0x60008EA")]
		[Address(RVA = "0xAC79D4", Offset = "0xAC79D4", VA = "0xAC79D4")]
		public int inflateInit(bool nowrap)
		{
			return default(int);
		}

		[Token(Token = "0x60008EB")]
		[Address(RVA = "0xAC79CC", Offset = "0xAC79CC", VA = "0xAC79CC")]
		public int inflateInit(int w)
		{
			return default(int);
		}

		[Token(Token = "0x60008EC")]
		[Address(RVA = "0xAC79E0", Offset = "0xAC79E0", VA = "0xAC79E0")]
		public int inflateInit(int w, bool nowrap)
		{
			return default(int);
		}

		[Token(Token = "0x60008ED")]
		[Address(RVA = "0xAC74A8", Offset = "0xAC74A8", VA = "0xAC74A8")]
		public int inflate(int f)
		{
			return default(int);
		}

		[Token(Token = "0x60008EE")]
		[Address(RVA = "0xAC7274", Offset = "0xAC7274", VA = "0xAC7274")]
		public int inflateEnd()
		{
			return default(int);
		}

		[Token(Token = "0x60008EF")]
		[Address(RVA = "0xAC7A64", Offset = "0xAC7A64", VA = "0xAC7A64")]
		public int inflateSync()
		{
			return default(int);
		}

		[Token(Token = "0x60008F0")]
		[Address(RVA = "0xAC7A7C", Offset = "0xAC7A7C", VA = "0xAC7A7C")]
		public int inflateSetDictionary(byte[] dictionary, int dictLength)
		{
			return default(int);
		}

		[Token(Token = "0x60008F1")]
		[Address(RVA = "0xAC7A9C", Offset = "0xAC7A9C", VA = "0xAC7A9C")]
		public int deflateInit(int level)
		{
			return default(int);
		}

		[Token(Token = "0x60008F2")]
		[Address(RVA = "0xAC7038", Offset = "0xAC7038", VA = "0xAC7038")]
		public int deflateInit(int level, bool nowrap)
		{
			return default(int);
		}

		[Token(Token = "0x60008F3")]
		[Address(RVA = "0xAC7AA8", Offset = "0xAC7AA8", VA = "0xAC7AA8")]
		public int deflateInit(int level, int bits)
		{
			return default(int);
		}

		[Token(Token = "0x60008F4")]
		[Address(RVA = "0xAC7AB0", Offset = "0xAC7AB0", VA = "0xAC7AB0")]
		public int deflateInit(int level, int bits, bool nowrap)
		{
			return default(int);
		}

		[Token(Token = "0x60008F5")]
		[Address(RVA = "0xAC74C4", Offset = "0xAC74C4", VA = "0xAC74C4")]
		public int deflate(int flush)
		{
			return default(int);
		}

		[Token(Token = "0x60008F6")]
		[Address(RVA = "0xAC723C", Offset = "0xAC723C", VA = "0xAC723C")]
		public int deflateEnd()
		{
			return default(int);
		}

		[Token(Token = "0x60008F7")]
		[Address(RVA = "0xAC7B4C", Offset = "0xAC7B4C", VA = "0xAC7B4C")]
		public int deflateParams(int level, int strategy)
		{
			return default(int);
		}

		[Token(Token = "0x60008F8")]
		[Address(RVA = "0xAC7B74", Offset = "0xAC7B74", VA = "0xAC7B74")]
		public int deflateSetDictionary(byte[] dictionary, int dictLength)
		{
			return default(int);
		}

		[Token(Token = "0x60008F9")]
		[Address(RVA = "0xAC7B9C", Offset = "0xAC7B9C", VA = "0xAC7B9C")]
		internal void flush_pending()
		{
		}

		[Token(Token = "0x60008FA")]
		[Address(RVA = "0xAC7C70", Offset = "0xAC7C70", VA = "0xAC7C70")]
		internal int read_buf(byte[] buf, int start, int size)
		{
			return default(int);
		}

		[Token(Token = "0x60008FB")]
		[Address(RVA = "0xAC72D0", Offset = "0xAC72D0", VA = "0xAC72D0")]
		public void free()
		{
		}

		[Token(Token = "0x60008FC")]
		[Address(RVA = "0xAC6EC8", Offset = "0xAC6EC8", VA = "0xAC6EC8")]
		public ZStream()
		{
		}
	}
	[Token(Token = "0x2000158")]
	internal sealed class ZTree
	{
		[Token(Token = "0x400086C")]
		private const int MAX_BITS = 15;

		[Token(Token = "0x400086D")]
		private const int BL_CODES = 19;

		[Token(Token = "0x400086E")]
		private const int D_CODES = 30;

		[Token(Token = "0x400086F")]
		private const int LITERALS = 256;

		[Token(Token = "0x4000870")]
		private const int LENGTH_CODES = 29;

		[Token(Token = "0x4000871")]
		private const int L_CODES = 286;

		[Token(Token = "0x4000872")]
		private const int HEAP_SIZE = 573;

		[Token(Token = "0x4000873")]
		internal const int MAX_BL_BITS = 7;

		[Token(Token = "0x4000874")]
		internal const int END_BLOCK = 256;

		[Token(Token = "0x4000875")]
		internal const int REP_3_6 = 16;

		[Token(Token = "0x4000876")]
		internal const int REPZ_3_10 = 17;

		[Token(Token = "0x4000877")]
		internal const int REPZ_11_138 = 18;

		[Token(Token = "0x4000878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly int[] extra_lbits;

		[Token(Token = "0x4000879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly int[] extra_dbits;

		[Token(Token = "0x400087A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal static readonly int[] extra_blbits;

		[Token(Token = "0x400087B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal static readonly byte[] bl_order;

		[Token(Token = "0x400087C")]
		internal const int Buf_size = 16;

		[Token(Token = "0x400087D")]
		internal const int DIST_CODE_LEN = 512;

		[Token(Token = "0x400087E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal static readonly byte[] _dist_code;

		[Token(Token = "0x400087F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal static readonly byte[] _length_code;

		[Token(Token = "0x4000880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal static readonly int[] base_length;

		[Token(Token = "0x4000881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal static readonly int[] base_dist;

		[Token(Token = "0x4000882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal short[] dyn_tree;

		[Token(Token = "0x4000883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int max_code;

		[Token(Token = "0x4000884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal StaticTree stat_desc;

		[Token(Token = "0x60008FD")]
		[Address(RVA = "0xAC7D24", Offset = "0xAC7D24", VA = "0xAC7D24")]
		internal static int d_code(int dist)
		{
			return default(int);
		}

		[Token(Token = "0x60008FE")]
		[Address(RVA = "0xAC7E00", Offset = "0xAC7E00", VA = "0xAC7E00")]
		internal void gen_bitlen(Deflate s)
		{
		}

		[Token(Token = "0x60008FF")]
		[Address(RVA = "0xAC8124", Offset = "0xAC8124", VA = "0xAC8124")]
		internal void build_tree(Deflate s)
		{
		}

		[Token(Token = "0x6000900")]
		[Address(RVA = "0xAC85E0", Offset = "0xAC85E0", VA = "0xAC85E0")]
		internal static void gen_codes(short[] tree, int max_code, short[] bl_count)
		{
		}

		[Token(Token = "0x6000901")]
		[Address(RVA = "0xAC8768", Offset = "0xAC8768", VA = "0xAC8768")]
		internal static int bi_reverse(int code, int len)
		{
			return default(int);
		}

		[Token(Token = "0x6000902")]
		[Address(RVA = "0xAC8790", Offset = "0xAC8790", VA = "0xAC8790")]
		public ZTree()
		{
		}
	}
}
namespace Org.BouncyCastle.Utilities.Net
{
	[Token(Token = "0x2000159")]
	public static class IPAddress
	{
		[Token(Token = "0x6000904")]
		[Address(RVA = "0xB4E8A8", Offset = "0xB4E8A8", VA = "0xB4E8A8")]
		public static bool IsValid(string address)
		{
			return default(bool);
		}

		[Token(Token = "0x6000905")]
		[Address(RVA = "0xB4EA98", Offset = "0xB4EA98", VA = "0xB4EA98")]
		public static bool IsValidWithNetMask(string address)
		{
			return default(bool);
		}

		[Token(Token = "0x6000906")]
		[Address(RVA = "0xB4E8E0", Offset = "0xB4E8E0", VA = "0xB4E8E0")]
		public static bool IsValidIPv4(string address)
		{
			return default(bool);
		}

		[Token(Token = "0x6000907")]
		[Address(RVA = "0xB4EC88", Offset = "0xB4EC88", VA = "0xB4EC88")]
		private static bool unsafeIsValidIPv4(string address)
		{
			return default(bool);
		}

		[Token(Token = "0x6000908")]
		[Address(RVA = "0xB4EAD0", Offset = "0xB4EAD0", VA = "0xB4EAD0")]
		public static bool IsValidIPv4WithNetmask(string address)
		{
			return default(bool);
		}

		[Token(Token = "0x6000909")]
		[Address(RVA = "0xB4EBAC", Offset = "0xB4EBAC", VA = "0xB4EBAC")]
		public static bool IsValidIPv6WithNetmask(string address)
		{
			return default(bool);
		}

		[Token(Token = "0x600090A")]
		[Address(RVA = "0xB4ED88", Offset = "0xB4ED88", VA = "0xB4ED88")]
		private static bool IsMaskValue(string component, int size)
		{
			return default(bool);
		}

		[Token(Token = "0x600090B")]
		[Address(RVA = "0xB4E9BC", Offset = "0xB4E9BC", VA = "0xB4E9BC")]
		public static bool IsValidIPv6(string address)
		{
			return default(bool);
		}

		[Token(Token = "0x600090C")]
		[Address(RVA = "0xB4EDF8", Offset = "0xB4EDF8", VA = "0xB4EDF8")]
		private static bool unsafeIsValidIPv6(string address)
		{
			return default(bool);
		}
	}
}
namespace Org.BouncyCastle.Utilities.IO
{
	[Token(Token = "0x200015A")]
	public abstract class BaseInputStream : Stream
	{
		[Token(Token = "0x4000885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool closed;

		[Token(Token = "0x1700008E")]
		public sealed override bool CanRead
		{
			[Token(Token = "0x600090D")]
			[Address(RVA = "0xB4C1D4", Offset = "0xB4C1D4", VA = "0xB4C1D4", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700008F")]
		public sealed override bool CanSeek
		{
			[Token(Token = "0x600090E")]
			[Address(RVA = "0xB4C1E4", Offset = "0xB4C1E4", VA = "0xB4C1E4", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000090")]
		public sealed override bool CanWrite
		{
			[Token(Token = "0x600090F")]
			[Address(RVA = "0xB4C1EC", Offset = "0xB4C1EC", VA = "0xB4C1EC", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000091")]
		public sealed override long Length
		{
			[Token(Token = "0x6000912")]
			[Address(RVA = "0xB4C20C", Offset = "0xB4C20C", VA = "0xB4C20C", Slot = "10")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x17000092")]
		public sealed override long Position
		{
			[Token(Token = "0x6000913")]
			[Address(RVA = "0xB4C26C", Offset = "0xB4C26C", VA = "0xB4C26C", Slot = "11")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x6000914")]
			[Address(RVA = "0xB4C2CC", Offset = "0xB4C2CC", VA = "0xB4C2CC", Slot = "12")]
			set
			{
			}
		}

		[Token(Token = "0x6000910")]
		[Address(RVA = "0xB4C1F4", Offset = "0xB4C1F4", VA = "0xB4C1F4", Slot = "16")]
		protected override void Dispose(bool isDisposing)
		{
		}

		[Token(Token = "0x6000911")]
		[Address(RVA = "0xB4C208", Offset = "0xB4C208", VA = "0xB4C208", Slot = "17")]
		public sealed override void Flush()
		{
		}

		[Token(Token = "0x6000915")]
		[Address(RVA = "0xB4C32C", Offset = "0xB4C32C", VA = "0xB4C32C", Slot = "27")]
		public override int Read(byte[] buffer, int offset, int count)
		{
			return default(int);
		}

		[Token(Token = "0x6000916")]
		[Address(RVA = "0xB4C4C4", Offset = "0xB4C4C4", VA = "0xB4C4C4", Slot = "25")]
		public sealed override long Seek(long offset, SeekOrigin origin)
		{
			return default(long);
		}

		[Token(Token = "0x6000917")]
		[Address(RVA = "0xB4C524", Offset = "0xB4C524", VA = "0xB4C524", Slot = "26")]
		public sealed override void SetLength(long value)
		{
		}

		[Token(Token = "0x6000918")]
		[Address(RVA = "0xB4C584", Offset = "0xB4C584", VA = "0xB4C584", Slot = "29")]
		public sealed override void Write(byte[] buffer, int offset, int count)
		{
		}

		[Token(Token = "0x6000919")]
		[Address(RVA = "0xB4C5E4", Offset = "0xB4C5E4", VA = "0xB4C5E4")]
		protected BaseInputStream()
		{
		}
	}
	[Token(Token = "0x200015B")]
	public abstract class BaseOutputStream : Stream
	{
		[Token(Token = "0x4000886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool closed;

		[Token(Token = "0x17000093")]
		public sealed override bool CanRead
		{
			[Token(Token = "0x600091A")]
			[Address(RVA = "0xB4C64C", Offset = "0xB4C64C", VA = "0xB4C64C", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000094")]
		public sealed override bool CanSeek
		{
			[Token(Token = "0x600091B")]
			[Address(RVA = "0xB4C654", Offset = "0xB4C654", VA = "0xB4C654", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000095")]
		public sealed override bool CanWrite
		{
			[Token(Token = "0x600091C")]
			[Address(RVA = "0xB4C65C", Offset = "0xB4C65C", VA = "0xB4C65C", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000096")]
		public sealed override long Length
		{
			[Token(Token = "0x600091F")]
			[Address(RVA = "0xB4C684", Offset = "0xB4C684", VA = "0xB4C684", Slot = "10")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x17000097")]
		public sealed override long Position
		{
			[Token(Token = "0x6000920")]
			[Address(RVA = "0xB4C6E4", Offset = "0xB4C6E4", VA = "0xB4C6E4", Slot = "11")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x6000921")]
			[Address(RVA = "0xB4C744", Offset = "0xB4C744", VA = "0xB4C744", Slot = "12")]
			set
			{
			}
		}

		[Token(Token = "0x600091D")]
		[Address(RVA = "0xB4C66C", Offset = "0xB4C66C", VA = "0xB4C66C", Slot = "16")]
		protected override void Dispose(bool isDisposing)
		{
		}

		[Token(Token = "0x600091E")]
		[Address(RVA = "0xB4C680", Offset = "0xB4C680", VA = "0xB4C680", Slot = "17")]
		public override void Flush()
		{
		}

		[Token(Token = "0x6000922")]
		[Address(RVA = "0xB4C7A4", Offset = "0xB4C7A4", VA = "0xB4C7A4", Slot = "27")]
		public sealed override int Read(byte[] buffer, int offset, int count)
		{
			return default(int);
		}

		[Token(Token = "0x6000923")]
		[Address(RVA = "0xB4C804", Offset = "0xB4C804", VA = "0xB4C804", Slot = "25")]
		public sealed override long Seek(long offset, SeekOrigin origin)
		{
			return default(long);
		}

		[Token(Token = "0x6000924")]
		[Address(RVA = "0xB4C864", Offset = "0xB4C864", VA = "0xB4C864", Slot = "26")]
		public sealed override void SetLength(long value)
		{
		}

		[Token(Token = "0x6000925")]
		[Address(RVA = "0xB4C8C4", Offset = "0xB4C8C4", VA = "0xB4C8C4", Slot = "29")]
		public override void Write(byte[] buffer, int offset, int count)
		{
		}

		[Token(Token = "0x6000926")]
		[Address(RVA = "0xB4C95C", Offset = "0xB4C95C", VA = "0xB4C95C", Slot = "31")]
		public virtual void Write(params byte[] buffer)
		{
		}

		[Token(Token = "0x6000927")]
		[Address(RVA = "0xB4C984", Offset = "0xB4C984", VA = "0xB4C984")]
		protected BaseOutputStream()
		{
		}
	}
	[Token(Token = "0x200015C")]
	public class PushbackStream : FilterStream
	{
		[Token(Token = "0x4000887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int buf;

		[Token(Token = "0x6000928")]
		[Address(RVA = "0xB4DF64", Offset = "0xB4DF64", VA = "0xB4DF64")]
		public PushbackStream(Stream s)
		{
		}

		[Token(Token = "0x6000929")]
		[Address(RVA = "0xB4DF74", Offset = "0xB4DF74", VA = "0xB4DF74", Slot = "28")]
		public override int ReadByte()
		{
			return default(int);
		}

		[Token(Token = "0x600092A")]
		[Address(RVA = "0xB4DF98", Offset = "0xB4DF98", VA = "0xB4DF98", Slot = "27")]
		public override int Read(byte[] buffer, int offset, int count)
		{
			return default(int);
		}

		[Token(Token = "0x600092B")]
		[Address(RVA = "0xB4E004", Offset = "0xB4E004", VA = "0xB4E004", Slot = "31")]
		public virtual void Unread(int b)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200015D")]
	public class StreamOverflowException : IOException
	{
		[Token(Token = "0x600092C")]
		[Address(RVA = "0xB4E0A0", Offset = "0xB4E0A0", VA = "0xB4E0A0")]
		public StreamOverflowException()
		{
		}

		[Token(Token = "0x600092D")]
		[Address(RVA = "0xB4E0A8", Offset = "0xB4E0A8", VA = "0xB4E0A8")]
		public StreamOverflowException(string message)
		{
		}

		[Token(Token = "0x600092E")]
		[Address(RVA = "0xB4E0B0", Offset = "0xB4E0B0", VA = "0xB4E0B0")]
		public StreamOverflowException(string message, Exception exception)
		{
		}
	}
	[Token(Token = "0x200015E")]
	public sealed class Streams
	{
		[Token(Token = "0x4000888")]
		private const int BufferSize = 512;

		[Token(Token = "0x600092F")]
		[Address(RVA = "0xB4E0B8", Offset = "0xB4E0B8", VA = "0xB4E0B8")]
		private Streams()
		{
		}

		[Token(Token = "0x6000930")]
		[Address(RVA = "0xB4E0C0", Offset = "0xB4E0C0", VA = "0xB4E0C0")]
		public static void Drain(Stream inStr)
		{
		}

		[Token(Token = "0x6000931")]
		[Address(RVA = "0xB4E14C", Offset = "0xB4E14C", VA = "0xB4E14C")]
		public static byte[] ReadAll(Stream inStr)
		{
			return null;
		}

		[Token(Token = "0x6000932")]
		[Address(RVA = "0xB4E2B4", Offset = "0xB4E2B4", VA = "0xB4E2B4")]
		public static byte[] ReadAllLimited(Stream inStr, int limit)
		{
			return null;
		}

		[Token(Token = "0x6000933")]
		[Address(RVA = "0xB4E48C", Offset = "0xB4E48C", VA = "0xB4E48C")]
		public static int ReadFully(Stream inStr, byte[] buf)
		{
			return default(int);
		}

		[Token(Token = "0x6000934")]
		[Address(RVA = "0xB4E4A8", Offset = "0xB4E4A8", VA = "0xB4E4A8")]
		public static int ReadFully(Stream inStr, byte[] buf, int off, int len)
		{
			return default(int);
		}

		[Token(Token = "0x6000935")]
		[Address(RVA = "0xB4E1CC", Offset = "0xB4E1CC", VA = "0xB4E1CC")]
		public static void PipeAll(Stream inStr, Stream outStr)
		{
		}

		[Token(Token = "0x6000936")]
		[Address(RVA = "0xB4E344", Offset = "0xB4E344", VA = "0xB4E344")]
		public static long PipeAllLimited(Stream inStr, long limit, Stream outStr)
		{
			return default(long);
		}
	}
	[Token(Token = "0x200015F")]
	public class TeeInputStream : BaseInputStream
	{
		[Token(Token = "0x4000889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly Stream input;

		[Token(Token = "0x400088A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly Stream tee;

		[Token(Token = "0x6000937")]
		[Address(RVA = "0xB4E534", Offset = "0xB4E534", VA = "0xB4E534")]
		public TeeInputStream(Stream input, Stream tee)
		{
		}

		[Token(Token = "0x6000938")]
		[Address(RVA = "0xB4E568", Offset = "0xB4E568", VA = "0xB4E568", Slot = "16")]
		protected override void Dispose(bool isDisposing)
		{
		}

		[Token(Token = "0x6000939")]
		[Address(RVA = "0xB4E604", Offset = "0xB4E604", VA = "0xB4E604", Slot = "27")]
		public override int Read(byte[] buf, int off, int len)
		{
			return default(int);
		}

		[Token(Token = "0x600093A")]
		[Address(RVA = "0xB4E680", Offset = "0xB4E680", VA = "0xB4E680", Slot = "28")]
		public override int ReadByte()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000160")]
	public class TeeOutputStream : BaseOutputStream
	{
		[Token(Token = "0x400088B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly Stream output;

		[Token(Token = "0x400088C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly Stream tee;

		[Token(Token = "0x600093B")]
		[Address(RVA = "0xB4E6E0", Offset = "0xB4E6E0", VA = "0xB4E6E0")]
		public TeeOutputStream(Stream output, Stream tee)
		{
		}

		[Token(Token = "0x600093C")]
		[Address(RVA = "0xB4E714", Offset = "0xB4E714", VA = "0xB4E714", Slot = "16")]
		protected override void Dispose(bool isDisposing)
		{
		}

		[Token(Token = "0x600093D")]
		[Address(RVA = "0xB4E7B0", Offset = "0xB4E7B0", VA = "0xB4E7B0", Slot = "29")]
		public override void Write(byte[] buffer, int offset, int count)
		{
		}

		[Token(Token = "0x600093E")]
		[Address(RVA = "0xB4E81C", Offset = "0xB4E81C", VA = "0xB4E81C", Slot = "30")]
		public override void WriteByte(byte b)
		{
		}
	}
}
namespace Org.BouncyCastle.Utilities.IO.Pem
{
	[Serializable]
	[Token(Token = "0x2000161")]
	public class PemGenerationException : Exception
	{
		[Token(Token = "0x600093F")]
		[Address(RVA = "0xB4C9EC", Offset = "0xB4C9EC", VA = "0xB4C9EC")]
		public PemGenerationException()
		{
		}

		[Token(Token = "0x6000940")]
		[Address(RVA = "0xB4CA54", Offset = "0xB4CA54", VA = "0xB4CA54")]
		public PemGenerationException(string message)
		{
		}

		[Token(Token = "0x6000941")]
		[Address(RVA = "0xB4CACC", Offset = "0xB4CACC", VA = "0xB4CACC")]
		public PemGenerationException(string message, Exception exception)
		{
		}
	}
	[Token(Token = "0x2000162")]
	public class PemHeader
	{
		[Token(Token = "0x400088D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string name;

		[Token(Token = "0x400088E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string val;

		[Token(Token = "0x17000098")]
		public virtual string Name
		{
			[Token(Token = "0x6000943")]
			[Address(RVA = "0xB4CB84", Offset = "0xB4CB84", VA = "0xB4CB84", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000099")]
		public virtual string Value
		{
			[Token(Token = "0x6000944")]
			[Address(RVA = "0xB4CB8C", Offset = "0xB4CB8C", VA = "0xB4CB8C", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000942")]
		[Address(RVA = "0xB4CB4C", Offset = "0xB4CB4C", VA = "0xB4CB4C")]
		public PemHeader(string name, string val)
		{
		}

		[Token(Token = "0x6000945")]
		[Address(RVA = "0xB4CB94", Offset = "0xB4CB94", VA = "0xB4CB94", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000946")]
		[Address(RVA = "0xB4CC18", Offset = "0xB4CC18", VA = "0xB4CC18", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000947")]
		[Address(RVA = "0xB4CBF8", Offset = "0xB4CBF8", VA = "0xB4CBF8")]
		private int GetHashCode(string s)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000163")]
	public class PemObject : PemObjectGenerator
	{
		[Token(Token = "0x400088F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string type;

		[Token(Token = "0x4000890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IList headers;

		[Token(Token = "0x4000891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private byte[] content;

		[Token(Token = "0x1700009A")]
		public string Type
		{
			[Token(Token = "0x600094A")]
			[Address(RVA = "0xB4CEBC", Offset = "0xB4CEBC", VA = "0xB4CEBC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009B")]
		public IList Headers
		{
			[Token(Token = "0x600094B")]
			[Address(RVA = "0xB4CEC4", Offset = "0xB4CEC4", VA = "0xB4CEC4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009C")]
		public byte[] Content
		{
			[Token(Token = "0x600094C")]
			[Address(RVA = "0xB4CECC", Offset = "0xB4CECC", VA = "0xB4CECC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000948")]
		[Address(RVA = "0xB4CCE0", Offset = "0xB4CCE0", VA = "0xB4CCE0")]
		public PemObject(string type, byte[] content)
		{
		}

		[Token(Token = "0x6000949")]
		[Address(RVA = "0xB4CDC0", Offset = "0xB4CDC0", VA = "0xB4CDC0")]
		public PemObject(string type, IList headers, byte[] content)
		{
		}

		[Token(Token = "0x600094D")]
		[Address(RVA = "0xB4CED4", Offset = "0xB4CED4", VA = "0xB4CED4", Slot = "4")]
		public PemObject Generate()
		{
			return null;
		}
	}
	[Token(Token = "0x2000164")]
	public interface PemObjectGenerator
	{
		[Token(Token = "0x600094E")]
		PemObject Generate();
	}
	[Token(Token = "0x2000165")]
	public class PemReader
	{
		[Token(Token = "0x4000892")]
		private const string BeginString = "-----BEGIN ";

		[Token(Token = "0x4000893")]
		private const string EndString = "-----END ";

		[Token(Token = "0x4000894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly TextReader reader;

		[Token(Token = "0x1700009D")]
		public TextReader Reader
		{
			[Token(Token = "0x6000950")]
			[Address(RVA = "0xB4CF74", Offset = "0xB4CF74", VA = "0xB4CF74")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600094F")]
		[Address(RVA = "0xB4CED8", Offset = "0xB4CED8", VA = "0xB4CED8")]
		public PemReader(TextReader reader)
		{
		}

		[Token(Token = "0x6000951")]
		[Address(RVA = "0xB4CF7C", Offset = "0xB4CF7C", VA = "0xB4CF7C")]
		public PemObject ReadPemObject()
		{
			return null;
		}

		[Token(Token = "0x6000952")]
		[Address(RVA = "0xB4D068", Offset = "0xB4D068", VA = "0xB4D068")]
		private PemObject LoadObject(string type)
		{
			return null;
		}
	}
	[Token(Token = "0x2000166")]
	public class PemWriter
	{
		[Token(Token = "0x4000895")]
		private const int LineLength = 64;

		[Token(Token = "0x4000896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly TextWriter writer;

		[Token(Token = "0x4000897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly int nlLength;

		[Token(Token = "0x4000898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private char[] buf;

		[Token(Token = "0x1700009E")]
		public TextWriter Writer
		{
			[Token(Token = "0x6000954")]
			[Address(RVA = "0xB4D4A8", Offset = "0xB4D4A8", VA = "0xB4D4A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000953")]
		[Address(RVA = "0xB4D3B8", Offset = "0xB4D3B8", VA = "0xB4D3B8")]
		public PemWriter(TextWriter writer)
		{
		}

		[Token(Token = "0x6000955")]
		[Address(RVA = "0xB4D4B0", Offset = "0xB4D4B0", VA = "0xB4D4B0")]
		public int GetOutputSize(PemObject obj)
		{
			return default(int);
		}

		[Token(Token = "0x6000956")]
		[Address(RVA = "0xB4D8D4", Offset = "0xB4D8D4", VA = "0xB4D8D4")]
		public void WriteObject(PemObjectGenerator objGen)
		{
		}

		[Token(Token = "0x6000957")]
		[Address(RVA = "0xB4DDE8", Offset = "0xB4DDE8", VA = "0xB4DDE8")]
		private void WriteEncoded(byte[] bytes)
		{
		}

		[Token(Token = "0x6000958")]
		[Address(RVA = "0xB4DD58", Offset = "0xB4DD58", VA = "0xB4DD58")]
		private void WritePreEncapsulationBoundary(string type)
		{
		}

		[Token(Token = "0x6000959")]
		[Address(RVA = "0xB4DED4", Offset = "0xB4DED4", VA = "0xB4DED4")]
		private void WritePostEncapsulationBoundary(string type)
		{
		}
	}
}
namespace Org.BouncyCastle.Utilities.Encoders
{
	[Token(Token = "0x2000167")]
	public sealed class Base64
	{
		[Token(Token = "0x600095A")]
		[Address(RVA = "0xB49E3C", Offset = "0xB49E3C", VA = "0xB49E3C")]
		private Base64()
		{
		}

		[Token(Token = "0x600095B")]
		[Address(RVA = "0xB49E44", Offset = "0xB49E44", VA = "0xB49E44")]
		public static string ToBase64String(byte[] data)
		{
			return null;
		}

		[Token(Token = "0x600095C")]
		[Address(RVA = "0xB49EBC", Offset = "0xB49EBC", VA = "0xB49EBC")]
		public static string ToBase64String(byte[] data, int off, int length)
		{
			return null;
		}

		[Token(Token = "0x600095D")]
		[Address(RVA = "0xB49F3C", Offset = "0xB49F3C", VA = "0xB49F3C")]
		public static byte[] Encode(byte[] data)
		{
			return null;
		}

		[Token(Token = "0x600095E")]
		[Address(RVA = "0xB49F58", Offset = "0xB49F58", VA = "0xB49F58")]
		public static byte[] Encode(byte[] data, int off, int length)
		{
			return null;
		}

		[Token(Token = "0x600095F")]
		[Address(RVA = "0xB4A018", Offset = "0xB4A018", VA = "0xB4A018")]
		public static int Encode(byte[] data, Stream outStream)
		{
			return default(int);
		}

		[Token(Token = "0x6000960")]
		[Address(RVA = "0xB4A06C", Offset = "0xB4A06C", VA = "0xB4A06C")]
		public static int Encode(byte[] data, int off, int length, Stream outStream)
		{
			return default(int);
		}

		[Token(Token = "0x6000961")]
		[Address(RVA = "0xB4A0C0", Offset = "0xB4A0C0", VA = "0xB4A0C0")]
		public static byte[] Decode(byte[] data)
		{
			return null;
		}

		[Token(Token = "0x6000962")]
		[Address(RVA = "0xB4A180", Offset = "0xB4A180", VA = "0xB4A180")]
		public static byte[] Decode(string data)
		{
			return null;
		}

		[Token(Token = "0x6000963")]
		[Address(RVA = "0xB4A1E8", Offset = "0xB4A1E8", VA = "0xB4A1E8")]
		public static int Decode(string data, Stream outStream)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000168")]
	public class Base64Encoder : IEncoder
	{
		[Token(Token = "0x4000899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly byte[] encodingTable;

		[Token(Token = "0x400089A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected byte padding;

		[Token(Token = "0x400089B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected readonly byte[] decodingTable;

		[Token(Token = "0x6000964")]
		[Address(RVA = "0xB4A23C", Offset = "0xB4A23C", VA = "0xB4A23C")]
		protected void InitialiseDecodingTable()
		{
		}

		[Token(Token = "0x6000965")]
		[Address(RVA = "0xB4A2C4", Offset = "0xB4A2C4", VA = "0xB4A2C4")]
		public Base64Encoder()
		{
		}

		[Token(Token = "0x6000966")]
		[Address(RVA = "0xB4A364", Offset = "0xB4A364", VA = "0xB4A364", Slot = "4")]
		public int Encode(byte[] data, int off, int length, Stream outStream)
		{
			return default(int);
		}

		[Token(Token = "0x6000967")]
		[Address(RVA = "0xB4A6DC", Offset = "0xB4A6DC", VA = "0xB4A6DC")]
		private bool ignore(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x6000968")]
		[Address(RVA = "0xB4A714", Offset = "0xB4A714", VA = "0xB4A714", Slot = "5")]
		public int Decode(byte[] data, int off, int length, Stream outStream)
		{
			return default(int);
		}

		[Token(Token = "0x6000969")]
		[Address(RVA = "0xB4AA44", Offset = "0xB4AA44", VA = "0xB4AA44")]
		private int nextI(byte[] data, int i, int finish)
		{
			return default(int);
		}

		[Token(Token = "0x600096A")]
		[Address(RVA = "0xB4AD14", Offset = "0xB4AD14", VA = "0xB4AD14", Slot = "6")]
		public int DecodeString(string data, Stream outStream)
		{
			return default(int);
		}

		[Token(Token = "0x600096B")]
		[Address(RVA = "0xB4AAC4", Offset = "0xB4AAC4", VA = "0xB4AAC4")]
		private int decodeLastBlock(Stream outStream, char c1, char c2, char c3, char c4)
		{
			return default(int);
		}

		[Token(Token = "0x600096C")]
		[Address(RVA = "0xB4B060", Offset = "0xB4B060", VA = "0xB4B060")]
		private int nextI(string data, int i, int finish)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000169")]
	public sealed class Hex
	{
		[Token(Token = "0x400089C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly IEncoder encoder;

		[Token(Token = "0x600096D")]
		[Address(RVA = "0xB4B0EC", Offset = "0xB4B0EC", VA = "0xB4B0EC")]
		private Hex()
		{
		}

		[Token(Token = "0x600096E")]
		[Address(RVA = "0xB4B0F4", Offset = "0xB4B0F4", VA = "0xB4B0F4")]
		public static string ToHexString(byte[] data)
		{
			return null;
		}

		[Token(Token = "0x600096F")]
		[Address(RVA = "0xB4B168", Offset = "0xB4B168", VA = "0xB4B168")]
		public static string ToHexString(byte[] data, int off, int length)
		{
			return null;
		}

		[Token(Token = "0x6000970")]
		[Address(RVA = "0xB4B320", Offset = "0xB4B320", VA = "0xB4B320")]
		public static byte[] Encode(byte[] data)
		{
			return null;
		}

		[Token(Token = "0x6000971")]
		[Address(RVA = "0xB4B1E8", Offset = "0xB4B1E8", VA = "0xB4B1E8")]
		public static byte[] Encode(byte[] data, int off, int length)
		{
			return null;
		}

		[Token(Token = "0x6000972")]
		[Address(RVA = "0xB4B394", Offset = "0xB4B394", VA = "0xB4B394")]
		public static int Encode(byte[] data, Stream outStream)
		{
			return default(int);
		}

		[Token(Token = "0x6000973")]
		[Address(RVA = "0xB4B490", Offset = "0xB4B490", VA = "0xB4B490")]
		public static int Encode(byte[] data, int off, int length, Stream outStream)
		{
			return default(int);
		}

		[Token(Token = "0x6000974")]
		[Address(RVA = "0xB4B594", Offset = "0xB4B594", VA = "0xB4B594")]
		public static byte[] Decode(byte[] data)
		{
			return null;
		}

		[Token(Token = "0x6000975")]
		[Address(RVA = "0xB4B6DC", Offset = "0xB4B6DC", VA = "0xB4B6DC")]
		public static byte[] Decode(string data)
		{
			return null;
		}

		[Token(Token = "0x6000976")]
		[Address(RVA = "0xB4B818", Offset = "0xB4B818", VA = "0xB4B818")]
		public static int Decode(string data, Stream outStream)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200016A")]
	public class HexEncoder : IEncoder
	{
		[Token(Token = "0x400089D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly byte[] encodingTable;

		[Token(Token = "0x400089E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected readonly byte[] decodingTable;

		[Token(Token = "0x6000978")]
		[Address(RVA = "0xB4BA08", Offset = "0xB4BA08", VA = "0xB4BA08")]
		protected void InitialiseDecodingTable()
		{
		}

		[Token(Token = "0x6000979")]
		[Address(RVA = "0xB4B970", Offset = "0xB4B970", VA = "0xB4B970")]
		public HexEncoder()
		{
		}

		[Token(Token = "0x600097A")]
		[Address(RVA = "0xB4BB38", Offset = "0xB4BB38", VA = "0xB4BB38", Slot = "4")]
		public int Encode(byte[] data, int off, int length, Stream outStream)
		{
			return default(int);
		}

		[Token(Token = "0x600097B")]
		[Address(RVA = "0xB4BC34", Offset = "0xB4BC34", VA = "0xB4BC34")]
		private static bool Ignore(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x600097C")]
		[Address(RVA = "0xB4BC6C", Offset = "0xB4BC6C", VA = "0xB4BC6C", Slot = "5")]
		public int Decode(byte[] data, int off, int length, Stream outStream)
		{
			return default(int);
		}

		[Token(Token = "0x600097D")]
		[Address(RVA = "0xB4BEE8", Offset = "0xB4BEE8", VA = "0xB4BEE8", Slot = "6")]
		public int DecodeString(string data, Stream outStream)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200016B")]
	public interface IEncoder
	{
		[Token(Token = "0x600097E")]
		int Encode(byte[] data, int off, int length, Stream outStream);

		[Token(Token = "0x600097F")]
		int Decode(byte[] data, int off, int length, Stream outStream);

		[Token(Token = "0x6000980")]
		int DecodeString(string data, Stream outStream);
	}
}
namespace Org.BouncyCastle.Utilities.Date
{
	[Token(Token = "0x200016C")]
	public sealed class DateTimeObject
	{
		[Token(Token = "0x400089F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly DateTime dt;

		[Token(Token = "0x1700009F")]
		public DateTime Value
		{
			[Token(Token = "0x6000982")]
			[Address(RVA = "0xB49B24", Offset = "0xB49B24", VA = "0xB49B24")]
			get
			{
				return default(DateTime);
			}
		}

		[Token(Token = "0x6000981")]
		[Address(RVA = "0xB49AF8", Offset = "0xB49AF8", VA = "0xB49AF8")]
		public DateTimeObject(DateTime dt)
		{
		}

		[Token(Token = "0x6000983")]
		[Address(RVA = "0xB49B2C", Offset = "0xB49B2C", VA = "0xB49B2C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200016D")]
	public class DateTimeUtilities
	{
		[Token(Token = "0x40008A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly DateTime UnixEpoch;

		[Token(Token = "0x6000984")]
		[Address(RVA = "0xB49B58", Offset = "0xB49B58", VA = "0xB49B58")]
		private DateTimeUtilities()
		{
		}

		[Token(Token = "0x6000985")]
		[Address(RVA = "0xB49B60", Offset = "0xB49B60", VA = "0xB49B60")]
		public static long DateTimeToUnixMs(DateTime dateTime)
		{
			return default(long);
		}

		[Token(Token = "0x6000986")]
		[Address(RVA = "0xB49C98", Offset = "0xB49C98", VA = "0xB49C98")]
		public static DateTime UnixMsToDateTime(long unixMs)
		{
			return default(DateTime);
		}

		[Token(Token = "0x6000987")]
		[Address(RVA = "0xB49D3C", Offset = "0xB49D3C", VA = "0xB49D3C")]
		public static long CurrentUnixMs()
		{
			return default(long);
		}
	}
}
namespace Org.BouncyCastle.Utilities.Collections
{
	[Token(Token = "0x200016E")]
	public abstract class CollectionUtilities
	{
		[Token(Token = "0x6000989")]
		[Address(RVA = "0xB47DC0", Offset = "0xB47DC0", VA = "0xB47DC0")]
		public static void AddRange(IList to, IEnumerable range)
		{
		}

		[Token(Token = "0x600098A")]
		[Address(RVA = "0xB4809C", Offset = "0xB4809C", VA = "0xB4809C")]
		public static bool CheckElementsAreOfType(IEnumerable e, Type t)
		{
			return default(bool);
		}

		[Token(Token = "0x600098B")]
		[Address(RVA = "0xB4835C", Offset = "0xB4835C", VA = "0xB4835C")]
		public static string ToString(IEnumerable c)
		{
			return null;
		}

		[Token(Token = "0x600098C")]
		[Address(RVA = "0xB4865C", Offset = "0xB4865C", VA = "0xB4865C")]
		protected CollectionUtilities()
		{
		}
	}
	[Token(Token = "0x200016F")]
	public sealed class EmptyEnumerable : IEnumerable
	{
		[Token(Token = "0x40008A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly IEnumerable Instance;

		[Token(Token = "0x600098D")]
		[Address(RVA = "0xB48664", Offset = "0xB48664", VA = "0xB48664")]
		private EmptyEnumerable()
		{
		}

		[Token(Token = "0x600098E")]
		[Address(RVA = "0xB4866C", Offset = "0xB4866C", VA = "0xB4866C", Slot = "4")]
		public IEnumerator GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x2000170")]
	public sealed class EmptyEnumerator : IEnumerator
	{
		[Token(Token = "0x40008A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly IEnumerator Instance;

		[Token(Token = "0x170000A0")]
		public object Current
		{
			[Token(Token = "0x6000993")]
			[Address(RVA = "0xB4874C", Offset = "0xB4874C", VA = "0xB4874C", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000990")]
		[Address(RVA = "0xB48738", Offset = "0xB48738", VA = "0xB48738")]
		private EmptyEnumerator()
		{
		}

		[Token(Token = "0x6000991")]
		[Address(RVA = "0xB48740", Offset = "0xB48740", VA = "0xB48740", Slot = "4")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000992")]
		[Address(RVA = "0xB48748", Offset = "0xB48748", VA = "0xB48748", Slot = "6")]
		public void Reset()
		{
		}
	}
	[Token(Token = "0x2000171")]
	public sealed class EnumerableProxy : IEnumerable
	{
		[Token(Token = "0x40008A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IEnumerable inner;

		[Token(Token = "0x6000995")]
		[Address(RVA = "0xB4881C", Offset = "0xB4881C", VA = "0xB4881C")]
		public EnumerableProxy(IEnumerable inner)
		{
		}

		[Token(Token = "0x6000996")]
		[Address(RVA = "0xB488B8", Offset = "0xB488B8", VA = "0xB488B8", Slot = "4")]
		public IEnumerator GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x2000172")]
	public class HashSet : ISet, ICollection, IEnumerable
	{
		[Token(Token = "0x40008A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IDictionary impl;

		[Token(Token = "0x170000A1")]
		public virtual int Count
		{
			[Token(Token = "0x600099E")]
			[Address(RVA = "0xB49260", Offset = "0xB49260", VA = "0xB49260", Slot = "23")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000A2")]
		public virtual bool IsEmpty
		{
			[Token(Token = "0x60009A0")]
			[Address(RVA = "0xB49438", Offset = "0xB49438", VA = "0xB49438", Slot = "25")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000A3")]
		public virtual bool IsFixedSize
		{
			[Token(Token = "0x60009A1")]
			[Address(RVA = "0xB494F8", Offset = "0xB494F8", VA = "0xB494F8", Slot = "26")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000A4")]
		public virtual bool IsReadOnly
		{
			[Token(Token = "0x60009A2")]
			[Address(RVA = "0xB495AC", Offset = "0xB495AC", VA = "0xB495AC", Slot = "27")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000A5")]
		public virtual bool IsSynchronized
		{
			[Token(Token = "0x60009A3")]
			[Address(RVA = "0xB49660", Offset = "0xB49660", VA = "0xB49660", Slot = "28")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000A6")]
		public virtual object SyncRoot
		{
			[Token(Token = "0x60009A6")]
			[Address(RVA = "0xB49A44", Offset = "0xB49A44", VA = "0xB49A44", Slot = "31")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000997")]
		[Address(RVA = "0xB48968", Offset = "0xB48968", VA = "0xB48968")]
		public HashSet()
		{
		}

		[Token(Token = "0x6000998")]
		[Address(RVA = "0xB489D8", Offset = "0xB489D8", VA = "0xB489D8")]
		public HashSet(IEnumerable s)
		{
		}

		[Token(Token = "0x6000999")]
		[Address(RVA = "0xB48C78", Offset = "0xB48C78", VA = "0xB48C78", Slot = "18")]
		public virtual void Add(object o)
		{
		}

		[Token(Token = "0x600099A")]
		[Address(RVA = "0xB48D40", Offset = "0xB48D40", VA = "0xB48D40", Slot = "19")]
		public virtual void AddAll(IEnumerable e)
		{
		}

		[Token(Token = "0x600099B")]
		[Address(RVA = "0xB48FAC", Offset = "0xB48FAC", VA = "0xB48FAC", Slot = "20")]
		public virtual void Clear()
		{
		}

		[Token(Token = "0x600099C")]
		[Address(RVA = "0xB49060", Offset = "0xB49060", VA = "0xB49060", Slot = "21")]
		public virtual bool Contains(object o)
		{
			return default(bool);
		}

		[Token(Token = "0x600099D")]
		[Address(RVA = "0xB49124", Offset = "0xB49124", VA = "0xB49124", Slot = "22")]
		public virtual void CopyTo(Array array, int index)
		{
		}

		[Token(Token = "0x600099F")]
		[Address(RVA = "0xB49314", Offset = "0xB49314", VA = "0xB49314", Slot = "24")]
		public virtual IEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x60009A4")]
		[Address(RVA = "0xB49714", Offset = "0xB49714", VA = "0xB49714", Slot = "29")]
		public virtual void Remove(object o)
		{
		}

		[Token(Token = "0x60009A5")]
		[Address(RVA = "0xB497D8", Offset = "0xB497D8", VA = "0xB497D8", Slot = "30")]
		public virtual void RemoveAll(IEnumerable e)
		{
		}
	}
	[Token(Token = "0x2000173")]
	public interface ISet : ICollection, IEnumerable
	{
		[Token(Token = "0x170000A7")]
		bool IsEmpty
		{
			[Token(Token = "0x60009AB")]
			get;
		}

		[Token(Token = "0x170000A8")]
		bool IsFixedSize
		{
			[Token(Token = "0x60009AC")]
			get;
		}

		[Token(Token = "0x170000A9")]
		bool IsReadOnly
		{
			[Token(Token = "0x60009AD")]
			get;
		}

		[Token(Token = "0x60009A7")]
		void Add(object o);

		[Token(Token = "0x60009A8")]
		void AddAll(IEnumerable e);

		[Token(Token = "0x60009A9")]
		void Clear();

		[Token(Token = "0x60009AA")]
		bool Contains(object o);

		[Token(Token = "0x60009AE")]
		void Remove(object o);

		[Token(Token = "0x60009AF")]
		void RemoveAll(IEnumerable e);
	}
}
namespace Org.BouncyCastle.Security
{
	[Token(Token = "0x2000174")]
	public sealed class DigestUtilities
	{
		[Token(Token = "0x200066A")]
		private enum DigestAlgorithm
		{
			[Token(Token = "0x4002594")]
			GOST3411,
			[Token(Token = "0x4002595")]
			MD2,
			[Token(Token = "0x4002596")]
			MD4,
			[Token(Token = "0x4002597")]
			MD5,
			[Token(Token = "0x4002598")]
			RIPEMD128,
			[Token(Token = "0x4002599")]
			RIPEMD160,
			[Token(Token = "0x400259A")]
			RIPEMD256,
			[Token(Token = "0x400259B")]
			RIPEMD320,
			[Token(Token = "0x400259C")]
			SHA_1,
			[Token(Token = "0x400259D")]
			SHA_224,
			[Token(Token = "0x400259E")]
			SHA_256,
			[Token(Token = "0x400259F")]
			SHA_384,
			[Token(Token = "0x40025A0")]
			SHA_512,
			[Token(Token = "0x40025A1")]
			SHA_512_224,
			[Token(Token = "0x40025A2")]
			SHA_512_256,
			[Token(Token = "0x40025A3")]
			SHA3_224,
			[Token(Token = "0x40025A4")]
			SHA3_256,
			[Token(Token = "0x40025A5")]
			SHA3_384,
			[Token(Token = "0x40025A6")]
			SHA3_512,
			[Token(Token = "0x40025A7")]
			TIGER,
			[Token(Token = "0x40025A8")]
			WHIRLPOOL
		}

		[Token(Token = "0x40008A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly IDictionary algorithms;

		[Token(Token = "0x40008A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly IDictionary oids;

		[Token(Token = "0x170000AA")]
		public static ICollection Algorithms
		{
			[Token(Token = "0x60009B3")]
			[Address(RVA = "0xB38818", Offset = "0xB38818", VA = "0xB38818")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009B0")]
		[Address(RVA = "0xB36AFC", Offset = "0xB36AFC", VA = "0xB36AFC")]
		private DigestUtilities()
		{
		}

		[Token(Token = "0x60009B1")]
		[Address(RVA = "0xB36B04", Offset = "0xB36B04", VA = "0xB36B04")]
		static DigestUtilities()
		{
		}

		[Token(Token = "0x60009B2")]
		[Address(RVA = "0xB38550", Offset = "0xB38550", VA = "0xB38550")]
		public static DerObjectIdentifier GetObjectIdentifier(string mechanism)
		{
			return null;
		}

		[Token(Token = "0x60009B4")]
		[Address(RVA = "0xB388F0", Offset = "0xB388F0", VA = "0xB388F0")]
		public static IDigest GetDigest(DerObjectIdentifier id)
		{
			return null;
		}

		[Token(Token = "0x60009B5")]
		[Address(RVA = "0xB38960", Offset = "0xB38960", VA = "0xB38960")]
		public static IDigest GetDigest(string algorithm)
		{
			return null;
		}

		[Token(Token = "0x60009B6")]
		[Address(RVA = "0xB39104", Offset = "0xB39104", VA = "0xB39104")]
		public static string GetAlgorithmName(DerObjectIdentifier oid)
		{
			return null;
		}

		[Token(Token = "0x60009B7")]
		[Address(RVA = "0xB3920C", Offset = "0xB3920C", VA = "0xB3920C")]
		public static byte[] CalculateDigest(string algorithm, byte[] input)
		{
			return null;
		}

		[Token(Token = "0x60009B8")]
		[Address(RVA = "0xB39310", Offset = "0xB39310", VA = "0xB39310")]
		public static byte[] DoFinal(IDigest digest)
		{
			return null;
		}

		[Token(Token = "0x60009B9")]
		[Address(RVA = "0xB39450", Offset = "0xB39450", VA = "0xB39450")]
		public static byte[] DoFinal(IDigest digest, byte[] input)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000175")]
	public class GeneralSecurityException : Exception
	{
		[Token(Token = "0x60009BA")]
		[Address(RVA = "0xB3696C", Offset = "0xB3696C", VA = "0xB3696C")]
		public GeneralSecurityException()
		{
		}

		[Token(Token = "0x60009BB")]
		[Address(RVA = "0xB369D4", Offset = "0xB369D4", VA = "0xB369D4")]
		public GeneralSecurityException(string message)
		{
		}

		[Token(Token = "0x60009BC")]
		[Address(RVA = "0xB36A4C", Offset = "0xB36A4C", VA = "0xB36A4C")]
		public GeneralSecurityException(string message, Exception exception)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000176")]
	public class InvalidKeyException : KeyException
	{
		[Token(Token = "0x60009BD")]
		[Address(RVA = "0xB39548", Offset = "0xB39548", VA = "0xB39548")]
		public InvalidKeyException()
		{
		}

		[Token(Token = "0x60009BE")]
		[Address(RVA = "0xB39550", Offset = "0xB39550", VA = "0xB39550")]
		public InvalidKeyException(string message)
		{
		}

		[Token(Token = "0x60009BF")]
		[Address(RVA = "0xB39558", Offset = "0xB39558", VA = "0xB39558")]
		public InvalidKeyException(string message, Exception exception)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000177")]
	public class InvalidParameterException : KeyException
	{
		[Token(Token = "0x60009C0")]
		[Address(RVA = "0xB39560", Offset = "0xB39560", VA = "0xB39560")]
		public InvalidParameterException()
		{
		}

		[Token(Token = "0x60009C1")]
		[Address(RVA = "0xB39564", Offset = "0xB39564", VA = "0xB39564")]
		public InvalidParameterException(string message)
		{
		}

		[Token(Token = "0x60009C2")]
		[Address(RVA = "0xB39568", Offset = "0xB39568", VA = "0xB39568")]
		public InvalidParameterException(string message, Exception exception)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000178")]
	public class KeyException : GeneralSecurityException
	{
		[Token(Token = "0x60009C3")]
		[Address(RVA = "0xB3954C", Offset = "0xB3954C", VA = "0xB3954C")]
		public KeyException()
		{
		}

		[Token(Token = "0x60009C4")]
		[Address(RVA = "0xB39554", Offset = "0xB39554", VA = "0xB39554")]
		public KeyException(string message)
		{
		}

		[Token(Token = "0x60009C5")]
		[Address(RVA = "0xB3955C", Offset = "0xB3955C", VA = "0xB3955C")]
		public KeyException(string message, Exception exception)
		{
		}
	}
	[Token(Token = "0x2000179")]
	public sealed class MacUtilities
	{
		[Token(Token = "0x40008A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly IDictionary algorithms;

		[Token(Token = "0x60009C6")]
		[Address(RVA = "0xB3956C", Offset = "0xB3956C", VA = "0xB3956C")]
		private MacUtilities()
		{
		}

		[Token(Token = "0x60009C7")]
		[Address(RVA = "0xB39574", Offset = "0xB39574", VA = "0xB39574")]
		static MacUtilities()
		{
		}

		[Token(Token = "0x60009C8")]
		[Address(RVA = "0xB3AB38", Offset = "0xB3AB38", VA = "0xB3AB38")]
		public static IMac GetMac(DerObjectIdentifier id)
		{
			return null;
		}

		[Token(Token = "0x60009C9")]
		[Address(RVA = "0xB3ABA8", Offset = "0xB3ABA8", VA = "0xB3ABA8")]
		public static IMac GetMac(string algorithm)
		{
			return null;
		}

		[Token(Token = "0x60009CA")]
		[Address(RVA = "0xB3B4BC", Offset = "0xB3B4BC", VA = "0xB3B4BC")]
		public static string GetAlgorithmName(DerObjectIdentifier oid)
		{
			return null;
		}

		[Token(Token = "0x60009CB")]
		[Address(RVA = "0xB3B5C4", Offset = "0xB3B5C4", VA = "0xB3B5C4")]
		public static byte[] DoFinal(IMac mac)
		{
			return null;
		}

		[Token(Token = "0x60009CC")]
		[Address(RVA = "0xB3B704", Offset = "0xB3B704", VA = "0xB3B704")]
		public static byte[] DoFinal(IMac mac, byte[] input)
		{
			return null;
		}
	}
	[Token(Token = "0x200017A")]
	public sealed class PublicKeyFactory
	{
		[Token(Token = "0x60009CD")]
		[Address(RVA = "0xB3B7FC", Offset = "0xB3B7FC", VA = "0xB3B7FC")]
		private PublicKeyFactory()
		{
		}

		[Token(Token = "0x60009CE")]
		[Address(RVA = "0xB3B804", Offset = "0xB3B804", VA = "0xB3B804")]
		public static AsymmetricKeyParameter CreateKey(byte[] keyInfoData)
		{
			return null;
		}

		[Token(Token = "0x60009CF")]
		[Address(RVA = "0xB3C7D8", Offset = "0xB3C7D8", VA = "0xB3C7D8")]
		public static AsymmetricKeyParameter CreateKey(Stream inStr)
		{
			return null;
		}

		[Token(Token = "0x60009D0")]
		[Address(RVA = "0xB3B824", Offset = "0xB3B824", VA = "0xB3B824")]
		public static AsymmetricKeyParameter CreateKey(SubjectPublicKeyInfo keyInfo)
		{
			return null;
		}

		[Token(Token = "0x60009D1")]
		[Address(RVA = "0xB3C7F8", Offset = "0xB3C7F8", VA = "0xB3C7F8")]
		private static bool IsPkcsDHParam(Asn1Sequence seq)
		{
			return default(bool);
		}

		[Token(Token = "0x60009D2")]
		[Address(RVA = "0xB3C950", Offset = "0xB3C950", VA = "0xB3C950")]
		private static DHPublicKeyParameters ReadPkcsDHParam(DerObjectIdentifier algOid, BigInteger y, Asn1Sequence seq)
		{
			return null;
		}
	}
	[Token(Token = "0x200017B")]
	public class SecureRandom : System.Random
	{
		[Token(Token = "0x40008A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static long counter;

		[Token(Token = "0x40008A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly SecureRandom master;

		[Token(Token = "0x40008AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected readonly IRandomGenerator generator;

		[Token(Token = "0x40008AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly double DoubleScale;

		[Token(Token = "0x170000AB")]
		private static SecureRandom Master
		{
			[Token(Token = "0x60009D4")]
			[Address(RVA = "0xB3CAD8", Offset = "0xB3CAD8", VA = "0xB3CAD8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009D3")]
		[Address(RVA = "0xB3CA70", Offset = "0xB3CA70", VA = "0xB3CA70")]
		private static long NextCounterValue()
		{
			return default(long);
		}

		[Token(Token = "0x60009D5")]
		[Address(RVA = "0xB3CB40", Offset = "0xB3CB40", VA = "0xB3CB40")]
		private static DigestRandomGenerator CreatePrng(string digestName, bool autoSeed)
		{
			return null;
		}

		[Token(Token = "0x60009D6")]
		[Address(RVA = "0xB3CD6C", Offset = "0xB3CD6C", VA = "0xB3CD6C")]
		public static SecureRandom GetInstance(string algorithm)
		{
			return null;
		}

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0xB3CDD4", Offset = "0xB3CDD4", VA = "0xB3CDD4")]
		public static SecureRandom GetInstance(string algorithm, bool autoSeed)
		{
			return null;
		}

		[Token(Token = "0x60009D8")]
		[Address(RVA = "0xB3CCA8", Offset = "0xB3CCA8", VA = "0xB3CCA8")]
		public static byte[] GetSeed(int length)
		{
			return null;
		}

		[Token(Token = "0x60009D9")]
		[Address(RVA = "0xB3CF7C", Offset = "0xB3CF7C", VA = "0xB3CF7C")]
		public SecureRandom()
		{
		}

		[Token(Token = "0x60009DA")]
		[Address(RVA = "0xB3D008", Offset = "0xB3D008", VA = "0xB3D008")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x8305C0", Offset = "0x8305C0")]
		public SecureRandom(byte[] seed)
		{
		}

		[Token(Token = "0x60009DB")]
		[Address(RVA = "0xB3CF4C", Offset = "0xB3CF4C", VA = "0xB3CF4C")]
		public SecureRandom(IRandomGenerator generator)
		{
		}

		[Token(Token = "0x60009DC")]
		[Address(RVA = "0xB3D0B0", Offset = "0xB3D0B0", VA = "0xB3D0B0", Slot = "10")]
		public virtual byte[] GenerateSeed(int length)
		{
			return null;
		}

		[Token(Token = "0x60009DD")]
		[Address(RVA = "0xB3D17C", Offset = "0xB3D17C", VA = "0xB3D17C", Slot = "11")]
		public virtual void SetSeed(byte[] seed)
		{
		}

		[Token(Token = "0x60009DE")]
		[Address(RVA = "0xB3D23C", Offset = "0xB3D23C", VA = "0xB3D23C", Slot = "12")]
		public virtual void SetSeed(long seed)
		{
		}

		[Token(Token = "0x60009DF")]
		[Address(RVA = "0xB3D300", Offset = "0xB3D300", VA = "0xB3D300", Slot = "5")]
		public override int Next()
		{
			return default(int);
		}

		[Token(Token = "0x60009E0")]
		[Address(RVA = "0xB3D340", Offset = "0xB3D340", VA = "0xB3D340", Slot = "7")]
		public override int Next(int maxValue)
		{
			return default(int);
		}

		[Token(Token = "0x60009E1")]
		[Address(RVA = "0xB3D454", Offset = "0xB3D454", VA = "0xB3D454", Slot = "6")]
		public override int Next(int minValue, int maxValue)
		{
			return default(int);
		}

		[Token(Token = "0x60009E2")]
		[Address(RVA = "0xB3D53C", Offset = "0xB3D53C", VA = "0xB3D53C", Slot = "9")]
		public override void NextBytes(byte[] buf)
		{
		}

		[Token(Token = "0x60009E3")]
		[Address(RVA = "0xB3D600", Offset = "0xB3D600", VA = "0xB3D600", Slot = "13")]
		public virtual void NextBytes(byte[] buf, int off, int len)
		{
		}

		[Token(Token = "0x60009E4")]
		[Address(RVA = "0xB3D6DC", Offset = "0xB3D6DC", VA = "0xB3D6DC", Slot = "8")]
		public override double NextDouble()
		{
			return default(double);
		}

		[Token(Token = "0x60009E5")]
		[Address(RVA = "0xB3D7A0", Offset = "0xB3D7A0", VA = "0xB3D7A0", Slot = "14")]
		public virtual int NextInt()
		{
			return default(int);
		}

		[Token(Token = "0x60009E6")]
		[Address(RVA = "0xB3D850", Offset = "0xB3D850", VA = "0xB3D850", Slot = "15")]
		public virtual long NextLong()
		{
			return default(long);
		}
	}
	[Serializable]
	[Token(Token = "0x200017C")]
	public class SecurityUtilityException : Exception
	{
		[Token(Token = "0x60009E8")]
		[Address(RVA = "0xB3DA54", Offset = "0xB3DA54", VA = "0xB3DA54")]
		public SecurityUtilityException()
		{
		}

		[Token(Token = "0x60009E9")]
		[Address(RVA = "0xB3908C", Offset = "0xB3908C", VA = "0xB3908C")]
		public SecurityUtilityException(string message)
		{
		}

		[Token(Token = "0x60009EA")]
		[Address(RVA = "0xB3DABC", Offset = "0xB3DABC", VA = "0xB3DABC")]
		public SecurityUtilityException(string message, Exception exception)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200017D")]
	public class SignatureException : GeneralSecurityException
	{
		[Token(Token = "0x60009EB")]
		[Address(RVA = "0xB3DB3C", Offset = "0xB3DB3C", VA = "0xB3DB3C")]
		public SignatureException()
		{
		}

		[Token(Token = "0x60009EC")]
		[Address(RVA = "0xB3DB40", Offset = "0xB3DB40", VA = "0xB3DB40")]
		public SignatureException(string message)
		{
		}

		[Token(Token = "0x60009ED")]
		[Address(RVA = "0xB3DB44", Offset = "0xB3DB44", VA = "0xB3DB44")]
		public SignatureException(string message, Exception exception)
		{
		}
	}
	[Token(Token = "0x200017E")]
	public sealed class SignerUtilities
	{
		[Token(Token = "0x40008AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly IDictionary algorithms;

		[Token(Token = "0x40008AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly IDictionary oids;

		[Token(Token = "0x170000AC")]
		public static ICollection Algorithms
		{
			[Token(Token = "0x60009F1")]
			[Address(RVA = "0xB44760", Offset = "0xB44760", VA = "0xB44760")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009EE")]
		[Address(RVA = "0xB3DB48", Offset = "0xB3DB48", VA = "0xB3DB48")]
		private SignerUtilities()
		{
		}

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0xB3DB50", Offset = "0xB3DB50", VA = "0xB3DB50")]
		static SignerUtilities()
		{
		}

		[Token(Token = "0x60009F0")]
		[Address(RVA = "0xB44514", Offset = "0xB44514", VA = "0xB44514")]
		public static DerObjectIdentifier GetObjectIdentifier(string mechanism)
		{
			return null;
		}

		[Token(Token = "0x60009F2")]
		[Address(RVA = "0xB44838", Offset = "0xB44838", VA = "0xB44838")]
		public static Asn1Encodable GetDefaultX509Parameters(DerObjectIdentifier id)
		{
			return null;
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0xB448A8", Offset = "0xB448A8", VA = "0xB448A8")]
		public static Asn1Encodable GetDefaultX509Parameters(string algorithm)
		{
			return null;
		}

		[Token(Token = "0x60009F4")]
		[Address(RVA = "0xB44B10", Offset = "0xB44B10", VA = "0xB44B10")]
		private static Asn1Encodable GetPssX509Parameters(string digestName)
		{
			return null;
		}

		[Token(Token = "0x60009F5")]
		[Address(RVA = "0xB44D18", Offset = "0xB44D18", VA = "0xB44D18")]
		public static ISigner GetSigner(DerObjectIdentifier id)
		{
			return null;
		}

		[Token(Token = "0x60009F6")]
		[Address(RVA = "0xB44D88", Offset = "0xB44D88", VA = "0xB44D88")]
		public static ISigner GetSigner(string algorithm)
		{
			return null;
		}

		[Token(Token = "0x60009F7")]
		[Address(RVA = "0xB45D1C", Offset = "0xB45D1C", VA = "0xB45D1C")]
		public static string GetEncodingName(DerObjectIdentifier oid)
		{
			return null;
		}
	}
}
namespace Org.BouncyCastle.Security.Certificates
{
	[Serializable]
	[Token(Token = "0x200017F")]
	public class CertificateEncodingException : CertificateException
	{
		[Token(Token = "0x60009F8")]
		[Address(RVA = "0xB36954", Offset = "0xB36954", VA = "0xB36954")]
		public CertificateEncodingException()
		{
		}

		[Token(Token = "0x60009F9")]
		[Address(RVA = "0xB3695C", Offset = "0xB3695C", VA = "0xB3695C")]
		public CertificateEncodingException(string msg)
		{
		}

		[Token(Token = "0x60009FA")]
		[Address(RVA = "0xB36964", Offset = "0xB36964", VA = "0xB36964")]
		public CertificateEncodingException(string msg, Exception e)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000180")]
	public class CertificateException : GeneralSecurityException
	{
		[Token(Token = "0x60009FB")]
		[Address(RVA = "0xB36958", Offset = "0xB36958", VA = "0xB36958")]
		public CertificateException()
		{
		}

		[Token(Token = "0x60009FC")]
		[Address(RVA = "0xB36960", Offset = "0xB36960", VA = "0xB36960")]
		public CertificateException(string message)
		{
		}

		[Token(Token = "0x60009FD")]
		[Address(RVA = "0xB36968", Offset = "0xB36968", VA = "0xB36968")]
		public CertificateException(string message, Exception exception)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000181")]
	public class CertificateExpiredException : CertificateException
	{
		[Token(Token = "0x60009FE")]
		[Address(RVA = "0xB36ACC", Offset = "0xB36ACC", VA = "0xB36ACC")]
		public CertificateExpiredException()
		{
		}

		[Token(Token = "0x60009FF")]
		[Address(RVA = "0xB36AD0", Offset = "0xB36AD0", VA = "0xB36AD0")]
		public CertificateExpiredException(string message)
		{
		}

		[Token(Token = "0x6000A00")]
		[Address(RVA = "0xB36AD4", Offset = "0xB36AD4", VA = "0xB36AD4")]
		public CertificateExpiredException(string message, Exception exception)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000182")]
	public class CertificateNotYetValidException : CertificateException
	{
		[Token(Token = "0x6000A01")]
		[Address(RVA = "0xB36AD8", Offset = "0xB36AD8", VA = "0xB36AD8")]
		public CertificateNotYetValidException()
		{
		}

		[Token(Token = "0x6000A02")]
		[Address(RVA = "0xB36ADC", Offset = "0xB36ADC", VA = "0xB36ADC")]
		public CertificateNotYetValidException(string message)
		{
		}

		[Token(Token = "0x6000A03")]
		[Address(RVA = "0xB36AE0", Offset = "0xB36AE0", VA = "0xB36AE0")]
		public CertificateNotYetValidException(string message, Exception exception)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000183")]
	public class CertificateParsingException : CertificateException
	{
		[Token(Token = "0x6000A04")]
		[Address(RVA = "0xB36AE4", Offset = "0xB36AE4", VA = "0xB36AE4")]
		public CertificateParsingException()
		{
		}

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0xB36AE8", Offset = "0xB36AE8", VA = "0xB36AE8")]
		public CertificateParsingException(string message)
		{
		}

		[Token(Token = "0x6000A06")]
		[Address(RVA = "0xB36AEC", Offset = "0xB36AEC", VA = "0xB36AEC")]
		public CertificateParsingException(string message, Exception exception)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000184")]
	public class CrlException : GeneralSecurityException
	{
		[Token(Token = "0x6000A07")]
		[Address(RVA = "0xB36AF0", Offset = "0xB36AF0", VA = "0xB36AF0")]
		public CrlException()
		{
		}

		[Token(Token = "0x6000A08")]
		[Address(RVA = "0xB36AF4", Offset = "0xB36AF4", VA = "0xB36AF4")]
		public CrlException(string msg)
		{
		}

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0xB36AF8", Offset = "0xB36AF8", VA = "0xB36AF8")]
		public CrlException(string msg, Exception e)
		{
		}
	}
}
namespace Org.BouncyCastle.Math
{
	[Serializable]
	[Token(Token = "0x2000185")]
	public class BigInteger
	{
		[Token(Token = "0x40008AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly int[][] primeLists;

		[Token(Token = "0x40008AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly int[] primeProducts;

		[Token(Token = "0x40008B0")]
		private const long IMASK = 4294967295L;

		[Token(Token = "0x40008B1")]
		private const ulong UIMASK = 4294967295uL;

		[Token(Token = "0x40008B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly int[] ZeroMagnitude;

		[Token(Token = "0x40008B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly byte[] ZeroEncoding;

		[Token(Token = "0x40008B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly BigInteger[] SMALL_CONSTANTS;

		[Token(Token = "0x40008B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly BigInteger Zero;

		[Token(Token = "0x40008B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly BigInteger One;

		[Token(Token = "0x40008B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static readonly BigInteger Two;

		[Token(Token = "0x40008B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static readonly BigInteger Three;

		[Token(Token = "0x40008B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static readonly BigInteger Ten;

		[Token(Token = "0x40008BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static readonly byte[] BitLengthTable;

		[Token(Token = "0x40008BB")]
		private const int chunk2 = 1;

		[Token(Token = "0x40008BC")]
		private const int chunk8 = 1;

		[Token(Token = "0x40008BD")]
		private const int chunk10 = 19;

		[Token(Token = "0x40008BE")]
		private const int chunk16 = 16;

		[Token(Token = "0x40008BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private static readonly BigInteger radix2;

		[Token(Token = "0x40008C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private static readonly BigInteger radix2E;

		[Token(Token = "0x40008C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private static readonly BigInteger radix8;

		[Token(Token = "0x40008C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private static readonly BigInteger radix8E;

		[Token(Token = "0x40008C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private static readonly BigInteger radix10;

		[Token(Token = "0x40008C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private static readonly BigInteger radix10E;

		[Token(Token = "0x40008C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private static readonly BigInteger radix16;

		[Token(Token = "0x40008C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private static readonly BigInteger radix16E;

		[Token(Token = "0x40008C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private static readonly System.Random RandomSource;

		[Token(Token = "0x40008C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private static readonly int[] ExpWindowThresholds;

		[Token(Token = "0x40008C9")]
		private const int BitsPerByte = 8;

		[Token(Token = "0x40008CA")]
		private const int BitsPerInt = 32;

		[Token(Token = "0x40008CB")]
		private const int BytesPerInt = 4;

		[Token(Token = "0x40008CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int[] magnitude;

		[Token(Token = "0x40008CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int sign;

		[Token(Token = "0x40008CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int nBits;

		[Token(Token = "0x40008CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int nBitLength;

		[Token(Token = "0x40008D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int mQuote;

		[Token(Token = "0x170000AD")]
		public int BitCount
		{
			[Token(Token = "0x6000A1C")]
			[Address(RVA = "0xB1C750", Offset = "0xB1C750", VA = "0xB1C750")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000AE")]
		public int BitLength
		{
			[Token(Token = "0x6000A1F")]
			[Address(RVA = "0xB08250", Offset = "0xB08250", VA = "0xB08250")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000AF")]
		public int IntValue
		{
			[Token(Token = "0x6000A2E")]
			[Address(RVA = "0xB082EC", Offset = "0xB082EC", VA = "0xB082EC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000B0")]
		public long LongValue
		{
			[Token(Token = "0x6000A32")]
			[Address(RVA = "0xB1F2E4", Offset = "0xB1F2E4", VA = "0xB1F2E4")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x170000B1")]
		public int SignValue
		{
			[Token(Token = "0x6000A5C")]
			[Address(RVA = "0xB21BDC", Offset = "0xB21BDC", VA = "0xB21BDC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000A0A")]
		[Address(RVA = "0xB18DD8", Offset = "0xB18DD8", VA = "0xB18DD8")]
		static BigInteger()
		{
		}

		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0xB1A9F8", Offset = "0xB1A9F8", VA = "0xB1A9F8")]
		private static int GetByteLength(int nBits)
		{
			return default(int);
		}

		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0xB1A578", Offset = "0xB1A578", VA = "0xB1A578")]
		private BigInteger(int signum, int[] mag, bool checkMag)
		{
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0xB1AA10", Offset = "0xB1AA10", VA = "0xB1AA10")]
		public BigInteger(string value)
		{
		}

		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0xB1AA18", Offset = "0xB1AA18", VA = "0xB1AA18")]
		public BigInteger(string str, int radix)
		{
		}

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0xB1B320", Offset = "0xB1B320", VA = "0xB1B320")]
		public BigInteger(byte[] bytes)
		{
		}

		[Token(Token = "0x6000A10")]
		[Address(RVA = "0xB1B33C", Offset = "0xB1B33C", VA = "0xB1B33C")]
		public BigInteger(byte[] bytes, int offset, int length)
		{
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0xB1B5C4", Offset = "0xB1B5C4", VA = "0xB1B5C4")]
		private static int[] MakeMagnitude(byte[] bytes, int offset, int length)
		{
			return null;
		}

		[Token(Token = "0x6000A12")]
		[Address(RVA = "0xB07818", Offset = "0xB07818", VA = "0xB07818")]
		public BigInteger(int sign, byte[] bytes)
		{
		}

		[Token(Token = "0x6000A13")]
		[Address(RVA = "0xB1B768", Offset = "0xB1B768", VA = "0xB1B768")]
		public BigInteger(int sign, byte[] bytes, int offset, int length)
		{
		}

		[Token(Token = "0x6000A14")]
		[Address(RVA = "0xB1B8AC", Offset = "0xB1B8AC", VA = "0xB1B8AC")]
		public BigInteger(int sizeInBits, System.Random random)
		{
		}

		[Token(Token = "0x6000A15")]
		[Address(RVA = "0xB1BA60", Offset = "0xB1BA60", VA = "0xB1BA60")]
		public BigInteger(int bitLength, int certainty, System.Random random)
		{
		}

		[Token(Token = "0x6000A16")]
		[Address(RVA = "0xB1BFEC", Offset = "0xB1BFEC", VA = "0xB1BFEC")]
		public BigInteger Abs()
		{
			return null;
		}

		[Token(Token = "0x6000A17")]
		[Address(RVA = "0xB1C078", Offset = "0xB1C078", VA = "0xB1C078")]
		private static int[] AddMagnitudes(int[] a, int[] b)
		{
			return null;
		}

		[Token(Token = "0x6000A18")]
		[Address(RVA = "0xB1B290", Offset = "0xB1B290", VA = "0xB1B290")]
		public BigInteger Add(BigInteger value)
		{
			return null;
		}

		[Token(Token = "0x6000A19")]
		[Address(RVA = "0xB1C2C8", Offset = "0xB1C2C8", VA = "0xB1C2C8")]
		private BigInteger AddToMagnitude(int[] magToAdd)
		{
			return null;
		}

		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0xB1C450", Offset = "0xB1C450", VA = "0xB1C450")]
		public BigInteger And(BigInteger value)
		{
			return null;
		}

		[Token(Token = "0x6000A1B")]
		[Address(RVA = "0xB1C71C", Offset = "0xB1C71C", VA = "0xB1C71C")]
		public BigInteger AndNot(BigInteger val)
		{
			return null;
		}

		[Token(Token = "0x6000A1D")]
		[Address(RVA = "0xB1C86C", Offset = "0xB1C86C", VA = "0xB1C86C")]
		public static int BitCnt(int i)
		{
			return default(int);
		}

		[Token(Token = "0x6000A1E")]
		[Address(RVA = "0xB1C8A0", Offset = "0xB1C8A0", VA = "0xB1C8A0")]
		private static int CalcBitLength(int sign, int indx, int[] mag)
		{
			return default(int);
		}

		[Token(Token = "0x6000A20")]
		[Address(RVA = "0xB1C9BC", Offset = "0xB1C9BC", VA = "0xB1C9BC")]
		private static int BitLen(int w)
		{
			return default(int);
		}

		[Token(Token = "0x6000A21")]
		[Address(RVA = "0xB1CB44", Offset = "0xB1CB44", VA = "0xB1CB44")]
		private bool QuickPow2Check()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A22")]
		[Address(RVA = "0xB1CB68", Offset = "0xB1CB68", VA = "0xB1CB68")]
		public int CompareTo(object obj)
		{
			return default(int);
		}

		[Token(Token = "0x6000A23")]
		[Address(RVA = "0xB1CCC0", Offset = "0xB1CCC0", VA = "0xB1CCC0")]
		private static int CompareTo(int xIndx, int[] x, int yIndx, int[] y)
		{
			return default(int);
		}

		[Token(Token = "0x6000A24")]
		[Address(RVA = "0xB1CDC4", Offset = "0xB1CDC4", VA = "0xB1CDC4")]
		private static int CompareNoLeadingZeroes(int xIndx, int[] x, int yIndx, int[] y)
		{
			return default(int);
		}

		[Token(Token = "0x6000A25")]
		[Address(RVA = "0xB1CBFC", Offset = "0xB1CBFC", VA = "0xB1CBFC")]
		public int CompareTo(BigInteger value)
		{
			return default(int);
		}

		[Token(Token = "0x6000A26")]
		[Address(RVA = "0xB1CE58", Offset = "0xB1CE58", VA = "0xB1CE58")]
		private int[] Divide(int[] x, int[] y)
		{
			return null;
		}

		[Token(Token = "0x6000A27")]
		[Address(RVA = "0xB1D858", Offset = "0xB1D858", VA = "0xB1D858")]
		public BigInteger Divide(BigInteger val)
		{
			return null;
		}

		[Token(Token = "0x6000A28")]
		[Address(RVA = "0xB1DC80", Offset = "0xB1DC80", VA = "0xB1DC80")]
		public BigInteger[] DivideAndRemainder(BigInteger val)
		{
			return null;
		}

		[Token(Token = "0x6000A29")]
		[Address(RVA = "0xB1E0E8", Offset = "0xB1E0E8", VA = "0xB1E0E8", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A2A")]
		[Address(RVA = "0xB1E1B0", Offset = "0xB1E1B0", VA = "0xB1E1B0")]
		private bool IsEqualMagnitude(BigInteger x)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0xB1E238", Offset = "0xB1E238", VA = "0xB1E238")]
		public BigInteger Gcd(BigInteger value)
		{
			return null;
		}

		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0xB1E380", Offset = "0xB1E380", VA = "0xB1E380", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000A2D")]
		[Address(RVA = "0xB1E3E8", Offset = "0xB1E3E8", VA = "0xB1E3E8")]
		private BigInteger Inc()
		{
			return null;
		}

		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0xB10B74", Offset = "0xB10B74", VA = "0xB10B74")]
		public bool IsProbablePrime(int certainty)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A30")]
		[Address(RVA = "0xB1BDF0", Offset = "0xB1BDF0", VA = "0xB1BDF0")]
		private bool CheckProbablePrime(int certainty, System.Random random)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A31")]
		[Address(RVA = "0xB1E74C", Offset = "0xB1E74C", VA = "0xB1E74C")]
		public bool RabinMillerTest(int certainty, System.Random random)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0xB1F360", Offset = "0xB1F360", VA = "0xB1F360")]
		public BigInteger Max(BigInteger value)
		{
			return null;
		}

		[Token(Token = "0x6000A34")]
		[Address(RVA = "0xB1F38C", Offset = "0xB1F38C", VA = "0xB1F38C")]
		public BigInteger Min(BigInteger value)
		{
			return null;
		}

		[Token(Token = "0x6000A35")]
		[Address(RVA = "0xB1E2B8", Offset = "0xB1E2B8", VA = "0xB1E2B8")]
		public BigInteger Mod(BigInteger m)
		{
			return null;
		}

		[Token(Token = "0x6000A36")]
		[Address(RVA = "0xB1F3B8", Offset = "0xB1F3B8", VA = "0xB1F3B8")]
		public BigInteger ModInverse(BigInteger m)
		{
			return null;
		}

		[Token(Token = "0x6000A37")]
		[Address(RVA = "0xB1F50C", Offset = "0xB1F50C", VA = "0xB1F50C")]
		private BigInteger ModInversePow2(BigInteger m)
		{
			return null;
		}

		[Token(Token = "0x6000A38")]
		[Address(RVA = "0xB1F890", Offset = "0xB1F890", VA = "0xB1F890")]
		private static int ModInverse32(int d)
		{
			return default(int);
		}

		[Token(Token = "0x6000A39")]
		[Address(RVA = "0xB1F858", Offset = "0xB1F858", VA = "0xB1F858")]
		private static long ModInverse64(long d)
		{
			return default(long);
		}

		[Token(Token = "0x6000A3A")]
		[Address(RVA = "0xB1F72C", Offset = "0xB1F72C", VA = "0xB1F72C")]
		private static BigInteger ExtEuclid(BigInteger a, BigInteger b, out BigInteger u1Out)
		{
			return null;
		}

		[Token(Token = "0x6000A3B")]
		[Address(RVA = "0xB1F8C0", Offset = "0xB1F8C0", VA = "0xB1F8C0")]
		private static void ZeroOut(int[] x)
		{
		}

		[Token(Token = "0x6000A3C")]
		[Address(RVA = "0xB1F8E0", Offset = "0xB1F8E0", VA = "0xB1F8E0")]
		public BigInteger ModPow(BigInteger e, BigInteger m)
		{
			return null;
		}

		[Token(Token = "0x6000A3D")]
		[Address(RVA = "0xB1FB38", Offset = "0xB1FB38", VA = "0xB1FB38")]
		private static BigInteger ModPowBarrett(BigInteger b, BigInteger e, BigInteger m)
		{
			return null;
		}

		[Token(Token = "0x6000A3E")]
		[Address(RVA = "0xB20190", Offset = "0xB20190", VA = "0xB20190")]
		private static BigInteger ReduceBarrett(BigInteger x, BigInteger m, BigInteger mr, BigInteger yu)
		{
			return null;
		}

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0xB1EC8C", Offset = "0xB1EC8C", VA = "0xB1EC8C")]
		private static BigInteger ModPowMonty(BigInteger b, BigInteger e, BigInteger m, bool convert)
		{
			return null;
		}

		[Token(Token = "0x6000A40")]
		[Address(RVA = "0xB202B0", Offset = "0xB202B0", VA = "0xB202B0")]
		private static int[] GetWindowList(int[] mag, int extraBits)
		{
			return null;
		}

		[Token(Token = "0x6000A41")]
		[Address(RVA = "0xB2113C", Offset = "0xB2113C", VA = "0xB2113C")]
		private static int CreateWindowEntry(int mult, int zeroes)
		{
			return default(int);
		}

		[Token(Token = "0x6000A42")]
		[Address(RVA = "0xB21158", Offset = "0xB21158", VA = "0xB21158")]
		private static int[] Square(int[] w, int[] x)
		{
			return null;
		}

		[Token(Token = "0x6000A43")]
		[Address(RVA = "0xB21314", Offset = "0xB21314", VA = "0xB21314")]
		private static int[] Multiply(int[] x, int[] y, int[] z)
		{
			return null;
		}

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0xB20694", Offset = "0xB20694", VA = "0xB20694")]
		private int GetMQuote()
		{
			return default(int);
		}

		[Token(Token = "0x6000A45")]
		[Address(RVA = "0xB20F88", Offset = "0xB20F88", VA = "0xB20F88")]
		private static void MontgomeryReduce(int[] x, int[] m, uint mDash)
		{
		}

		[Token(Token = "0x6000A46")]
		[Address(RVA = "0xB20BD0", Offset = "0xB20BD0", VA = "0xB20BD0")]
		private static void MultiplyMonty(int[] a, int[] x, int[] y, int[] m, uint mDash, bool smallMontyModulus)
		{
		}

		[Token(Token = "0x6000A47")]
		[Address(RVA = "0xB2075C", Offset = "0xB2075C", VA = "0xB2075C")]
		private static void SquareMonty(int[] a, int[] x, int[] m, uint mDash, bool smallMontyModulus)
		{
		}

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0xB21444", Offset = "0xB21444", VA = "0xB21444")]
		private static uint MultiplyMontyNIsOne(uint x, uint y, uint m, uint mDash)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A49")]
		[Address(RVA = "0xB1B0B8", Offset = "0xB1B0B8", VA = "0xB1B0B8")]
		public BigInteger Multiply(BigInteger val)
		{
			return null;
		}

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0xB20040", Offset = "0xB20040", VA = "0xB20040")]
		public BigInteger Square()
		{
			return null;
		}

		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0xB1BFFC", Offset = "0xB1BFFC", VA = "0xB1BFFC")]
		public BigInteger Negate()
		{
			return null;
		}

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0xB21470", Offset = "0xB21470", VA = "0xB21470")]
		public BigInteger NextProbablePrime()
		{
			return null;
		}

		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0xB1C700", Offset = "0xB1C700", VA = "0xB1C700")]
		public BigInteger Not()
		{
			return null;
		}

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0xB1A82C", Offset = "0xB1A82C", VA = "0xB1A82C")]
		public BigInteger Pow(int exp)
		{
			return null;
		}

		[Token(Token = "0x6000A4F")]
		[Address(RVA = "0xB21708", Offset = "0xB21708", VA = "0xB21708")]
		public static BigInteger ProbablePrime(int bitLength, System.Random random)
		{
			return null;
		}

		[Token(Token = "0x6000A50")]
		[Address(RVA = "0xB1E6D4", Offset = "0xB1E6D4", VA = "0xB1E6D4")]
		private int Remainder(int m)
		{
			return default(int);
		}

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0xB2177C", Offset = "0xB2177C", VA = "0xB2177C")]
		private static int[] Remainder(int[] x, int[] y)
		{
			return null;
		}

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0xB1EA24", Offset = "0xB1EA24", VA = "0xB1EA24")]
		public BigInteger Remainder(BigInteger n)
		{
			return null;
		}

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0xB1DF8C", Offset = "0xB1DF8C", VA = "0xB1DF8C")]
		private int[] LastNBits(int n)
		{
			return null;
		}

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0xB204D4", Offset = "0xB204D4", VA = "0xB204D4")]
		private BigInteger DivideWords(int w)
		{
			return null;
		}

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0xB205CC", Offset = "0xB205CC", VA = "0xB205CC")]
		private BigInteger RemainderWords(int w)
		{
			return null;
		}

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0xB1D3C4", Offset = "0xB1D3C4", VA = "0xB1D3C4")]
		private static int[] ShiftLeft(int[] mag, int n)
		{
			return null;
		}

		[Token(Token = "0x6000A57")]
		[Address(RVA = "0xB21B68", Offset = "0xB21B68", VA = "0xB21B68")]
		private static int ShiftLeftOneInPlace(int[] x, int carry)
		{
			return default(int);
		}

		[Token(Token = "0x6000A58")]
		[Address(RVA = "0xB1AF60", Offset = "0xB1AF60", VA = "0xB1AF60")]
		public BigInteger ShiftLeft(int n)
		{
			return null;
		}

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0xB1D6FC", Offset = "0xB1D6FC", VA = "0xB1D6FC")]
		private static void ShiftRightInPlace(int start, int[] mag, int n)
		{
		}

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0xB1D648", Offset = "0xB1D648", VA = "0xB1D648")]
		private static void ShiftRightOneInPlace(int start, int[] mag)
		{
		}

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0xB1DA38", Offset = "0xB1DA38", VA = "0xB1DA38")]
		public BigInteger ShiftRight(int n)
		{
			return null;
		}

		[Token(Token = "0x6000A5D")]
		[Address(RVA = "0xB1D580", Offset = "0xB1D580", VA = "0xB1D580")]
		private static int[] Subtract(int xStart, int[] x, int yStart, int[] y)
		{
			return null;
		}

		[Token(Token = "0x6000A5E")]
		[Address(RVA = "0xB1C140", Offset = "0xB1C140", VA = "0xB1C140")]
		public BigInteger Subtract(BigInteger n)
		{
			return null;
		}

		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0xB1E50C", Offset = "0xB1E50C", VA = "0xB1E50C")]
		private static int[] doSubBigLil(int[] bigMag, int[] lilMag)
		{
			return null;
		}

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0xB21BE4", Offset = "0xB21BE4", VA = "0xB21BE4")]
		public byte[] ToByteArray()
		{
			return null;
		}

		[Token(Token = "0x6000A61")]
		[Address(RVA = "0xB21FC0", Offset = "0xB21FC0", VA = "0xB21FC0")]
		public byte[] ToByteArrayUnsigned()
		{
			return null;
		}

		[Token(Token = "0x6000A62")]
		[Address(RVA = "0xB21BEC", Offset = "0xB21BEC", VA = "0xB21BEC")]
		private byte[] ToByteArray(bool unsigned)
		{
			return null;
		}

		[Token(Token = "0x6000A63")]
		[Address(RVA = "0xB21FC8", Offset = "0xB21FC8", VA = "0xB21FC8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A64")]
		[Address(RVA = "0xB21FD0", Offset = "0xB21FD0", VA = "0xB21FD0")]
		public string ToString(int radix)
		{
			return null;
		}

		[Token(Token = "0x6000A65")]
		[Address(RVA = "0xB229E0", Offset = "0xB229E0", VA = "0xB229E0")]
		private static void AppendZeroExtendedString(StringBuilder sb, string s, int minLength)
		{
		}

		[Token(Token = "0x6000A66")]
		[Address(RVA = "0xB1A6D4", Offset = "0xB1A6D4", VA = "0xB1A6D4")]
		private static BigInteger CreateUValueOf(ulong value)
		{
			return null;
		}

		[Token(Token = "0x6000A67")]
		[Address(RVA = "0xB22A48", Offset = "0xB22A48", VA = "0xB22A48")]
		private static BigInteger CreateValueOf(long value)
		{
			return null;
		}

		[Token(Token = "0x6000A68")]
		[Address(RVA = "0xB08524", Offset = "0xB08524", VA = "0xB08524")]
		public static BigInteger ValueOf(long value)
		{
			return null;
		}

		[Token(Token = "0x6000A69")]
		[Address(RVA = "0xB22B18", Offset = "0xB22B18", VA = "0xB22B18")]
		public int GetLowestSetBit()
		{
			return default(int);
		}

		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0xB1E980", Offset = "0xB1E980", VA = "0xB1E980")]
		private int GetLowestSetBitMaskFirst(int firstWordMask)
		{
			return default(int);
		}

		[Token(Token = "0x6000A6B")]
		[Address(RVA = "0xB1E5CC", Offset = "0xB1E5CC", VA = "0xB1E5CC")]
		public bool TestBit(int n)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A6C")]
		[Address(RVA = "0xB22B30", Offset = "0xB22B30", VA = "0xB22B30")]
		public BigInteger Or(BigInteger value)
		{
			return null;
		}

		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0xB22DB8", Offset = "0xB22DB8", VA = "0xB22DB8")]
		public BigInteger Xor(BigInteger value)
		{
			return null;
		}

		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0xB215DC", Offset = "0xB215DC", VA = "0xB215DC")]
		public BigInteger SetBit(int n)
		{
			return null;
		}

		[Token(Token = "0x6000A6F")]
		[Address(RVA = "0xB23140", Offset = "0xB23140", VA = "0xB23140")]
		public BigInteger ClearBit(int n)
		{
			return null;
		}

		[Token(Token = "0x6000A70")]
		[Address(RVA = "0xB2326C", Offset = "0xB2326C", VA = "0xB2326C")]
		public BigInteger FlipBit(int n)
		{
			return null;
		}

		[Token(Token = "0x6000A71")]
		[Address(RVA = "0xB23044", Offset = "0xB23044", VA = "0xB23044")]
		private BigInteger FlipExistingBit(int n)
		{
			return null;
		}
	}
}
namespace Org.BouncyCastle.Math.Raw
{
	[Token(Token = "0x2000186")]
	internal abstract class Interleave
	{
		[Token(Token = "0x40008D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly ushort[] INTERLEAVE2_TABLE;

		[Token(Token = "0x6000A72")]
		[Address(RVA = "0x140512C", Offset = "0x140512C", VA = "0x140512C")]
		internal static uint Expand8to16(uint x)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A73")]
		[Address(RVA = "0x14051C4", Offset = "0x14051C4", VA = "0x14051C4")]
		internal static uint Expand16to32(uint x)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A74")]
		[Address(RVA = "0x1405270", Offset = "0x1405270", VA = "0x1405270")]
		internal static ulong Expand32to64(uint x)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000A75")]
		[Address(RVA = "0x1405348", Offset = "0x1405348", VA = "0x1405348")]
		internal static void Expand64To128(ulong x, ulong[] z, int zOff)
		{
		}

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0x1405408", Offset = "0x1405408", VA = "0x1405408")]
		protected Interleave()
		{
		}
	}
	[Token(Token = "0x2000187")]
	internal abstract class Mod
	{
		[Token(Token = "0x6000A78")]
		[Address(RVA = "0x13F8568", Offset = "0x13F8568", VA = "0x13F8568")]
		public static void Invert(uint[] p, uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000A79")]
		[Address(RVA = "0x1405868", Offset = "0x1405868", VA = "0x1405868")]
		public static uint[] Random(uint[] p)
		{
			return null;
		}

		[Token(Token = "0x6000A7A")]
		[Address(RVA = "0x14059BC", Offset = "0x14059BC", VA = "0x14059BC")]
		public static void Add(uint[] p, uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0x1405AB8", Offset = "0x1405AB8", VA = "0x1405AB8")]
		public static void Subtract(uint[] p, uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0x1405724", Offset = "0x1405724", VA = "0x1405724")]
		private static void InversionResult(uint[] p, int ac, uint[] a, uint[] z)
		{
		}

		[Token(Token = "0x6000A7D")]
		[Address(RVA = "0x14055F4", Offset = "0x14055F4", VA = "0x14055F4")]
		private static void InversionStep(uint[] p, uint[] u, int uLen, uint[] x, ref int xc)
		{
		}

		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0x1405C9C", Offset = "0x1405C9C", VA = "0x1405C9C")]
		private static int GetTrailingZeroes(uint x)
		{
			return default(int);
		}

		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0x1405DA0", Offset = "0x1405DA0", VA = "0x1405DA0")]
		protected Mod()
		{
		}
	}
	[Token(Token = "0x2000188")]
	internal abstract class Nat
	{
		[Token(Token = "0x40008D2")]
		private const ulong M = 4294967295uL;

		[Token(Token = "0x6000A80")]
		[Address(RVA = "0x1405A18", Offset = "0x1405A18", VA = "0x1405A18")]
		public static uint Add(int len, uint[] x, uint[] y, uint[] z)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A81")]
		[Address(RVA = "0x1405DA8", Offset = "0x1405DA8", VA = "0x1405DA8")]
		public static uint Add33At(int len, uint x, uint[] z, int zPos)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0x1405E98", Offset = "0x1405E98", VA = "0x1405E98")]
		public static uint Add33At(int len, uint x, uint[] z, int zOff, int zPos)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0x1405F98", Offset = "0x1405F98", VA = "0x1405F98")]
		public static uint Add33To(int len, uint x, uint[] z)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A84")]
		[Address(RVA = "0x1406008", Offset = "0x1406008", VA = "0x1406008")]
		public static uint Add33To(int len, uint x, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A85")]
		[Address(RVA = "0x1406090", Offset = "0x1406090", VA = "0x1406090")]
		public static uint AddBothTo(int len, uint[] x, uint[] y, uint[] z)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A86")]
		[Address(RVA = "0x1406138", Offset = "0x1406138", VA = "0x1406138")]
		public static uint AddBothTo(int len, uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A87")]
		[Address(RVA = "0x1406204", Offset = "0x1406204", VA = "0x1406204")]
		public static uint AddDWordAt(int len, ulong x, uint[] z, int zPos)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A88")]
		[Address(RVA = "0x140628C", Offset = "0x140628C", VA = "0x140628C")]
		public static uint AddDWordAt(int len, ulong x, uint[] z, int zOff, int zPos)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A89")]
		[Address(RVA = "0x140631C", Offset = "0x140631C", VA = "0x140631C")]
		public static uint AddDWordTo(int len, ulong x, uint[] z)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0x1406390", Offset = "0x1406390", VA = "0x1406390")]
		public static uint AddDWordTo(int len, ulong x, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A8B")]
		[Address(RVA = "0x1405BB4", Offset = "0x1405BB4", VA = "0x1405BB4")]
		public static uint AddTo(int len, uint[] x, uint[] z)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A8C")]
		[Address(RVA = "0x140641C", Offset = "0x140641C", VA = "0x140641C")]
		public static uint AddTo(int len, uint[] x, int xOff, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A8D")]
		[Address(RVA = "0x14064C4", Offset = "0x14064C4", VA = "0x14064C4")]
		public static uint AddWordAt(int len, uint x, uint[] z, int zPos)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A8E")]
		[Address(RVA = "0x1406524", Offset = "0x1406524", VA = "0x1406524")]
		public static uint AddWordAt(int len, uint x, uint[] z, int zOff, int zPos)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A8F")]
		[Address(RVA = "0x140658C", Offset = "0x140658C", VA = "0x140658C")]
		public static uint AddWordTo(int len, uint x, uint[] z)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A90")]
		[Address(RVA = "0x14065E4", Offset = "0x14065E4", VA = "0x14065E4")]
		public static uint AddWordTo(int len, uint x, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A91")]
		[Address(RVA = "0x1406648", Offset = "0x1406648", VA = "0x1406648")]
		public static void Copy(int len, uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000A92")]
		[Address(RVA = "0x1405570", Offset = "0x1405570", VA = "0x1405570")]
		public static uint[] Copy(int len, uint[] x)
		{
			return null;
		}

		[Token(Token = "0x6000A93")]
		[Address(RVA = "0x13F8518", Offset = "0x13F8518", VA = "0x13F8518")]
		public static uint[] Create(int len)
		{
			return null;
		}

		[Token(Token = "0x6000A94")]
		[Address(RVA = "0x1406660", Offset = "0x1406660", VA = "0x1406660")]
		public static ulong[] Create64(int len)
		{
			return null;
		}

		[Token(Token = "0x6000A95")]
		[Address(RVA = "0x14066B0", Offset = "0x14066B0", VA = "0x14066B0")]
		public static int Dec(int len, uint[] z)
		{
			return default(int);
		}

		[Token(Token = "0x6000A96")]
		[Address(RVA = "0x1406718", Offset = "0x1406718", VA = "0x1406718")]
		public static int Dec(int len, uint[] x, uint[] z)
		{
			return default(int);
		}

		[Token(Token = "0x6000A97")]
		[Address(RVA = "0x14067D8", Offset = "0x14067D8", VA = "0x14067D8")]
		public static int DecAt(int len, uint[] z, int zPos)
		{
			return default(int);
		}

		[Token(Token = "0x6000A98")]
		[Address(RVA = "0x1406844", Offset = "0x1406844", VA = "0x1406844")]
		public static int DecAt(int len, uint[] z, int zOff, int zPos)
		{
			return default(int);
		}

		[Token(Token = "0x6000A99")]
		[Address(RVA = "0x14068B8", Offset = "0x14068B8", VA = "0x14068B8")]
		public static bool Eq(int len, uint[] x, uint[] y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0x13F8408", Offset = "0x13F8408", VA = "0x13F8408")]
		public static uint[] FromBigInteger(int bits, BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0x1406928", Offset = "0x1406928", VA = "0x1406928")]
		public static uint GetBit(uint[] x, int bit)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0x1405768", Offset = "0x1405768", VA = "0x1405768")]
		public static bool Gte(int len, uint[] x, uint[] y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0x1406998", Offset = "0x1406998", VA = "0x1406998")]
		public static uint Inc(int len, uint[] z)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0x1406A00", Offset = "0x1406A00", VA = "0x1406A00")]
		public static uint Inc(int len, uint[] x, uint[] z)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0x1405E2C", Offset = "0x1405E2C", VA = "0x1405E2C")]
		public static uint IncAt(int len, uint[] z, int zPos)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0x1405F24", Offset = "0x1405F24", VA = "0x1405F24")]
		public static uint IncAt(int len, uint[] z, int zOff, int zPos)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0x14054FC", Offset = "0x14054FC", VA = "0x14054FC")]
		public static bool IsOne(int len, uint[] x)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0x140548C", Offset = "0x140548C", VA = "0x140548C")]
		public static bool IsZero(int len, uint[] x)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA3")]
		[Address(RVA = "0x1406AC0", Offset = "0x1406AC0", VA = "0x1406AC0")]
		public static void Mul(int len, uint[] x, uint[] y, uint[] zz)
		{
		}

		[Token(Token = "0x6000AA4")]
		[Address(RVA = "0x1406CCC", Offset = "0x1406CCC", VA = "0x1406CCC")]
		public static void Mul(int len, uint[] x, int xOff, uint[] y, int yOff, uint[] zz, int zzOff)
		{
		}

		[Token(Token = "0x6000AA5")]
		[Address(RVA = "0x1406E98", Offset = "0x1406E98", VA = "0x1406E98")]
		public static uint Mul31BothAdd(int len, uint a, uint[] x, uint b, uint[] y, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AA6")]
		[Address(RVA = "0x1406BB4", Offset = "0x1406BB4", VA = "0x1406BB4")]
		public static uint MulWord(int len, uint x, uint[] y, uint[] z)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0x1406E04", Offset = "0x1406E04", VA = "0x1406E04")]
		public static uint MulWord(int len, uint x, uint[] y, int yOff, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0x1406C30", Offset = "0x1406C30", VA = "0x1406C30")]
		public static uint MulWordAddTo(int len, uint x, uint[] y, int yOff, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0x1406F50", Offset = "0x1406F50", VA = "0x1406F50")]
		public static uint MulWordDwordAddAt(int len, uint x, ulong y, uint[] z, int zPos)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AAA")]
		[Address(RVA = "0x1405D3C", Offset = "0x1405D3C", VA = "0x1405D3C")]
		public static uint ShiftDownBit(int len, uint[] z, uint c)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AAB")]
		[Address(RVA = "0x1407000", Offset = "0x1407000", VA = "0x1407000")]
		public static uint ShiftDownBit(int len, uint[] z, int zOff, uint c)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AAC")]
		[Address(RVA = "0x1407064", Offset = "0x1407064", VA = "0x1407064")]
		public static uint ShiftDownBit(int len, uint[] x, uint c, uint[] z)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AAD")]
		[Address(RVA = "0x14070E0", Offset = "0x14070E0", VA = "0x14070E0")]
		public static uint ShiftDownBit(int len, uint[] x, int xOff, uint c, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AAE")]
		[Address(RVA = "0x1405CBC", Offset = "0x1405CBC", VA = "0x1405CBC")]
		public static uint ShiftDownBits(int len, uint[] z, int bits, uint c)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AAF")]
		[Address(RVA = "0x140715C", Offset = "0x140715C", VA = "0x140715C")]
		public static uint ShiftDownBits(int len, uint[] z, int zOff, int bits, uint c)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AB0")]
		[Address(RVA = "0x14071DC", Offset = "0x14071DC", VA = "0x14071DC")]
		public static uint ShiftDownBits(int len, uint[] x, int bits, uint c, uint[] z)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0x1407274", Offset = "0x1407274", VA = "0x1407274")]
		public static uint ShiftDownBits(int len, uint[] x, int xOff, int bits, uint c, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0x1405C40", Offset = "0x1405C40", VA = "0x1405C40")]
		public static uint ShiftDownWord(int len, uint[] z, uint c)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0x140730C", Offset = "0x140730C", VA = "0x140730C")]
		public static uint ShiftUpBit(int len, uint[] z, uint c)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AB4")]
		[Address(RVA = "0x1407378", Offset = "0x1407378", VA = "0x1407378")]
		public static uint ShiftUpBit(int len, uint[] z, int zOff, uint c)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AB5")]
		[Address(RVA = "0x14073F8", Offset = "0x14073F8", VA = "0x14073F8")]
		public static uint ShiftUpBit(int len, uint[] x, uint c, uint[] z)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0x1407478", Offset = "0x1407478", VA = "0x1407478")]
		public static uint ShiftUpBit(int len, uint[] x, int xOff, uint c, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AB7")]
		[Address(RVA = "0x1407514", Offset = "0x1407514", VA = "0x1407514")]
		public static ulong ShiftUpBit64(int len, ulong[] x, int xOff, ulong c, ulong[] z, int zOff)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0x14075B0", Offset = "0x14075B0", VA = "0x14075B0")]
		public static uint ShiftUpBits(int len, uint[] z, int bits, uint c)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0x1407638", Offset = "0x1407638", VA = "0x1407638")]
		public static uint ShiftUpBits(int len, uint[] z, int zOff, int bits, uint c)
		{
			return default(uint);
		}

		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0x14076D4", Offset = "0x14076D4", VA = "0x14076D4")]
		public static ulong ShiftUpBits64(int len, ulong[] z, int zOff, int bits, ulong c)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0x1407770", Offset = "0x1407770", VA = "0x1407770")]
		public static uint ShiftUpBits(int len, uint[] x, int bits, uint c, uint[] z)
		{
			return default(uint);
		}

		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0x140780C", Offset = "0x140780C", VA = "0x140780C")]
		public static uint ShiftUpBits(int len, uint[] x, int xOff, int bits, uint c, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000ABD")]
		[Address(RVA = "0x14078C4", Offset = "0x14078C4", VA = "0x14078C4")]
		public static ulong ShiftUpBits64(int len, ulong[] x, int xOff, int bits, ulong c, ulong[] z, int zOff)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000ABE")]
		[Address(RVA = "0x140797C", Offset = "0x140797C", VA = "0x140797C")]
		public static void Square(int len, uint[] x, uint[] zz)
		{
		}

		[Token(Token = "0x6000ABF")]
		[Address(RVA = "0x1407B50", Offset = "0x1407B50", VA = "0x1407B50")]
		public static void Square(int len, uint[] x, int xOff, uint[] zz, int zzOff)
		{
		}

		[Token(Token = "0x6000AC0")]
		[Address(RVA = "0x1407AA4", Offset = "0x1407AA4", VA = "0x1407AA4")]
		public static uint SquareWordAdd(uint[] x, int xPos, uint[] z)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AC1")]
		[Address(RVA = "0x1407CA0", Offset = "0x1407CA0", VA = "0x1407CA0")]
		public static uint SquareWordAdd(uint[] x, int xOff, int xPos, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AC2")]
		[Address(RVA = "0x1405B14", Offset = "0x1405B14", VA = "0x1405B14")]
		public static int Sub(int len, uint[] x, uint[] y, uint[] z)
		{
			return default(int);
		}

		[Token(Token = "0x6000AC3")]
		[Address(RVA = "0x1407D50", Offset = "0x1407D50", VA = "0x1407D50")]
		public static int Sub(int len, uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff)
		{
			return default(int);
		}

		[Token(Token = "0x6000AC4")]
		[Address(RVA = "0x1407E14", Offset = "0x1407E14", VA = "0x1407E14")]
		public static int Sub33At(int len, uint x, uint[] z, int zPos)
		{
			return default(int);
		}

		[Token(Token = "0x6000AC5")]
		[Address(RVA = "0x1407E98", Offset = "0x1407E98", VA = "0x1407E98")]
		public static int Sub33At(int len, uint x, uint[] z, int zOff, int zPos)
		{
			return default(int);
		}

		[Token(Token = "0x6000AC6")]
		[Address(RVA = "0x1407F24", Offset = "0x1407F24", VA = "0x1407F24")]
		public static int Sub33From(int len, uint x, uint[] z)
		{
			return default(int);
		}

		[Token(Token = "0x6000AC7")]
		[Address(RVA = "0x1407F94", Offset = "0x1407F94", VA = "0x1407F94")]
		public static int Sub33From(int len, uint x, uint[] z, int zOff)
		{
			return default(int);
		}

		[Token(Token = "0x6000AC8")]
		[Address(RVA = "0x140801C", Offset = "0x140801C", VA = "0x140801C")]
		public static int SubBothFrom(int len, uint[] x, uint[] y, uint[] z)
		{
			return default(int);
		}

		[Token(Token = "0x6000AC9")]
		[Address(RVA = "0x14080C4", Offset = "0x14080C4", VA = "0x14080C4")]
		public static int SubBothFrom(int len, uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff)
		{
			return default(int);
		}

		[Token(Token = "0x6000ACA")]
		[Address(RVA = "0x1408190", Offset = "0x1408190", VA = "0x1408190")]
		public static int SubDWordAt(int len, ulong x, uint[] z, int zPos)
		{
			return default(int);
		}

		[Token(Token = "0x6000ACB")]
		[Address(RVA = "0x1408214", Offset = "0x1408214", VA = "0x1408214")]
		public static int SubDWordAt(int len, ulong x, uint[] z, int zOff, int zPos)
		{
			return default(int);
		}

		[Token(Token = "0x6000ACC")]
		[Address(RVA = "0x14082A0", Offset = "0x14082A0", VA = "0x14082A0")]
		public static int SubDWordFrom(int len, ulong x, uint[] z)
		{
			return default(int);
		}

		[Token(Token = "0x6000ACD")]
		[Address(RVA = "0x1408310", Offset = "0x1408310", VA = "0x1408310")]
		public static int SubDWordFrom(int len, ulong x, uint[] z, int zOff)
		{
			return default(int);
		}

		[Token(Token = "0x6000ACE")]
		[Address(RVA = "0x14057DC", Offset = "0x14057DC", VA = "0x14057DC")]
		public static int SubFrom(int len, uint[] x, uint[] z)
		{
			return default(int);
		}

		[Token(Token = "0x6000ACF")]
		[Address(RVA = "0x1408398", Offset = "0x1408398", VA = "0x1408398")]
		public static int SubFrom(int len, uint[] x, int xOff, uint[] z, int zOff)
		{
			return default(int);
		}

		[Token(Token = "0x6000AD0")]
		[Address(RVA = "0x1408440", Offset = "0x1408440", VA = "0x1408440")]
		public static int SubWordAt(int len, uint x, uint[] z, int zPos)
		{
			return default(int);
		}

		[Token(Token = "0x6000AD1")]
		[Address(RVA = "0x14084A0", Offset = "0x14084A0", VA = "0x14084A0")]
		public static int SubWordAt(int len, uint x, uint[] z, int zOff, int zPos)
		{
			return default(int);
		}

		[Token(Token = "0x6000AD2")]
		[Address(RVA = "0x1408508", Offset = "0x1408508", VA = "0x1408508")]
		public static int SubWordFrom(int len, uint x, uint[] z)
		{
			return default(int);
		}

		[Token(Token = "0x6000AD3")]
		[Address(RVA = "0x1408560", Offset = "0x1408560", VA = "0x1408560")]
		public static int SubWordFrom(int len, uint x, uint[] z, int zOff)
		{
			return default(int);
		}

		[Token(Token = "0x6000AD4")]
		[Address(RVA = "0x13F8888", Offset = "0x13F8888", VA = "0x13F8888")]
		public static BigInteger ToBigInteger(int len, uint[] x)
		{
			return null;
		}

		[Token(Token = "0x6000AD5")]
		[Address(RVA = "0x14085C4", Offset = "0x14085C4", VA = "0x14085C4")]
		public static void Zero(int len, uint[] z)
		{
		}

		[Token(Token = "0x6000AD6")]
		[Address(RVA = "0x1408618", Offset = "0x1408618", VA = "0x1408618")]
		protected Nat()
		{
		}
	}
	[Token(Token = "0x2000189")]
	internal abstract class Nat128
	{
		[Token(Token = "0x40008D3")]
		private const ulong M = 4294967295uL;

		[Token(Token = "0x6000AD7")]
		[Address(RVA = "0x182F688", Offset = "0x182F688", VA = "0x182F688")]
		public static uint Add(uint[] x, uint[] y, uint[] z)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AD8")]
		[Address(RVA = "0x182F788", Offset = "0x182F788", VA = "0x182F788")]
		public static uint AddBothTo(uint[] x, uint[] y, uint[] z)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AD9")]
		[Address(RVA = "0x182F8A8", Offset = "0x182F8A8", VA = "0x182F8A8")]
		public static uint AddTo(uint[] x, uint[] z)
		{
			return default(uint);
		}

		[Token(Token = "0x6000ADA")]
		[Address(RVA = "0x182F978", Offset = "0x182F978", VA = "0x182F978")]
		public static uint AddTo(uint[] x, int xOff, uint[] z, int zOff, uint cIn)
		{
			return default(uint);
		}

		[Token(Token = "0x6000ADB")]
		[Address(RVA = "0x182FA9C", Offset = "0x182FA9C", VA = "0x182FA9C")]
		public static uint AddToEachOther(uint[] u, int uOff, uint[] v, int vOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000ADC")]
		[Address(RVA = "0x182FC04", Offset = "0x182FC04", VA = "0x182FC04")]
		public static void Copy(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000ADD")]
		[Address(RVA = "0x182FC98", Offset = "0x182FC98", VA = "0x182FC98")]
		public static void Copy64(ulong[] x, ulong[] z)
		{
		}

		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0x182FCF4", Offset = "0x182FCF4", VA = "0x182FCF4")]
		public static uint[] Create()
		{
			return null;
		}

		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0x182FD40", Offset = "0x182FD40", VA = "0x182FD40")]
		public static ulong[] Create64()
		{
			return null;
		}

		[Token(Token = "0x6000AE0")]
		[Address(RVA = "0x182FD8C", Offset = "0x182FD8C", VA = "0x182FD8C")]
		public static uint[] CreateExt()
		{
			return null;
		}

		[Token(Token = "0x6000AE1")]
		[Address(RVA = "0x182FDD8", Offset = "0x182FDD8", VA = "0x182FDD8")]
		public static ulong[] CreateExt64()
		{
			return null;
		}

		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0x182FE24", Offset = "0x182FE24", VA = "0x182FE24")]
		public static bool Diff(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0x18300A8", Offset = "0x18300A8", VA = "0x18300A8")]
		public static bool Eq(uint[] x, uint[] y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0x1830118", Offset = "0x1830118", VA = "0x1830118")]
		public static bool Eq64(ulong[] x, ulong[] y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0x1830190", Offset = "0x1830190", VA = "0x1830190")]
		public static uint[] FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0x1830294", Offset = "0x1830294", VA = "0x1830294")]
		public static ulong[] FromBigInteger64(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0x1830398", Offset = "0x1830398", VA = "0x1830398")]
		public static uint GetBit(uint[] x, int bit)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AE8")]
		[Address(RVA = "0x1830408", Offset = "0x1830408", VA = "0x1830408")]
		public static bool Gte(uint[] x, uint[] y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0x182FEB0", Offset = "0x182FEB0", VA = "0x182FEB0")]
		public static bool Gte(uint[] x, int xOff, uint[] y, int yOff)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0x1830484", Offset = "0x1830484", VA = "0x1830484")]
		public static bool IsOne(uint[] x)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0x18304F0", Offset = "0x18304F0", VA = "0x18304F0")]
		public static bool IsOne64(ulong[] x)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AEC")]
		[Address(RVA = "0x1830548", Offset = "0x1830548", VA = "0x1830548")]
		public static bool IsZero(uint[] x)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AED")]
		[Address(RVA = "0x18305A8", Offset = "0x18305A8", VA = "0x18305A8")]
		public static bool IsZero64(ulong[] x)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0x1830600", Offset = "0x1830600", VA = "0x1830600")]
		public static void Mul(uint[] x, uint[] y, uint[] zz)
		{
		}

		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0x1830768", Offset = "0x1830768", VA = "0x1830768")]
		public static void Mul(uint[] x, int xOff, uint[] y, int yOff, uint[] zz, int zzOff)
		{
		}

		[Token(Token = "0x6000AF0")]
		[Address(RVA = "0x1830980", Offset = "0x1830980", VA = "0x1830980")]
		public static uint MulAddTo(uint[] x, uint[] y, uint[] zz)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AF1")]
		[Address(RVA = "0x1830AA0", Offset = "0x1830AA0", VA = "0x1830AA0")]
		public static uint MulAddTo(uint[] x, int xOff, uint[] y, int yOff, uint[] zz, int zzOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0x1830C38", Offset = "0x1830C38", VA = "0x1830C38")]
		public static ulong Mul33Add(uint w, uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0x1830DB4", Offset = "0x1830DB4", VA = "0x1830DB4")]
		public static uint MulWordAddExt(uint x, uint[] yy, int yyOff, uint[] zz, int zzOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AF4")]
		[Address(RVA = "0x1830ED4", Offset = "0x1830ED4", VA = "0x1830ED4")]
		public static uint Mul33DWordAdd(uint x, ulong y, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AF5")]
		[Address(RVA = "0x1830F90", Offset = "0x1830F90", VA = "0x1830F90")]
		public static uint Mul33WordAdd(uint x, uint y, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AF6")]
		[Address(RVA = "0x1831048", Offset = "0x1831048", VA = "0x1831048")]
		public static uint MulWordDwordAdd(uint x, ulong y, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AF7")]
		[Address(RVA = "0x1831104", Offset = "0x1831104", VA = "0x1831104")]
		public static uint MulWordsAdd(uint x, uint y, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AF8")]
		[Address(RVA = "0x1831198", Offset = "0x1831198", VA = "0x1831198")]
		public static uint MulWord(uint x, uint[] y, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AF9")]
		[Address(RVA = "0x1831220", Offset = "0x1831220", VA = "0x1831220")]
		public static void Square(uint[] x, uint[] zz)
		{
		}

		[Token(Token = "0x6000AFA")]
		[Address(RVA = "0x18313E0", Offset = "0x18313E0", VA = "0x18313E0")]
		public static void Square(uint[] x, int xOff, uint[] zz, int zzOff)
		{
		}

		[Token(Token = "0x6000AFB")]
		[Address(RVA = "0x1831664", Offset = "0x1831664", VA = "0x1831664")]
		public static int Sub(uint[] x, uint[] y, uint[] z)
		{
			return default(int);
		}

		[Token(Token = "0x6000AFC")]
		[Address(RVA = "0x182FF3C", Offset = "0x182FF3C", VA = "0x182FF3C")]
		public static int Sub(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff)
		{
			return default(int);
		}

		[Token(Token = "0x6000AFD")]
		[Address(RVA = "0x1831764", Offset = "0x1831764", VA = "0x1831764")]
		public static int SubBothFrom(uint[] x, uint[] y, uint[] z)
		{
			return default(int);
		}

		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0x1831884", Offset = "0x1831884", VA = "0x1831884")]
		public static int SubFrom(uint[] x, uint[] z)
		{
			return default(int);
		}

		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0x1831954", Offset = "0x1831954", VA = "0x1831954")]
		public static int SubFrom(uint[] x, int xOff, uint[] z, int zOff)
		{
			return default(int);
		}

		[Token(Token = "0x6000B00")]
		[Address(RVA = "0x1831A70", Offset = "0x1831A70", VA = "0x1831A70")]
		public static BigInteger ToBigInteger(uint[] x)
		{
			return null;
		}

		[Token(Token = "0x6000B01")]
		[Address(RVA = "0x1831B54", Offset = "0x1831B54", VA = "0x1831B54")]
		public static BigInteger ToBigInteger64(ulong[] x)
		{
			return null;
		}

		[Token(Token = "0x6000B02")]
		[Address(RVA = "0x1831C2C", Offset = "0x1831C2C", VA = "0x1831C2C")]
		public static void Zero(uint[] z)
		{
		}

		[Token(Token = "0x6000B03")]
		[Address(RVA = "0x1831C80", Offset = "0x1831C80", VA = "0x1831C80")]
		protected Nat128()
		{
		}
	}
	[Token(Token = "0x200018A")]
	internal abstract class Nat160
	{
		[Token(Token = "0x40008D4")]
		private const ulong M = 4294967295uL;

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0x1831C88", Offset = "0x1831C88", VA = "0x1831C88")]
		public static uint Add(uint[] x, uint[] y, uint[] z)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0x1831DC0", Offset = "0x1831DC0", VA = "0x1831DC0")]
		public static uint AddBothTo(uint[] x, uint[] y, uint[] z)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0x1831F20", Offset = "0x1831F20", VA = "0x1831F20")]
		public static uint AddTo(uint[] x, uint[] z)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B07")]
		[Address(RVA = "0x183201C", Offset = "0x183201C", VA = "0x183201C")]
		public static uint AddTo(uint[] x, int xOff, uint[] z, int zOff, uint cIn)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0x18321B8", Offset = "0x18321B8", VA = "0x18321B8")]
		public static uint AddToEachOther(uint[] u, int uOff, uint[] v, int vOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0x1832374", Offset = "0x1832374", VA = "0x1832374")]
		public static void Copy(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0x1832424", Offset = "0x1832424", VA = "0x1832424")]
		public static uint[] Create()
		{
			return null;
		}

		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0x1832470", Offset = "0x1832470", VA = "0x1832470")]
		public static uint[] CreateExt()
		{
			return null;
		}

		[Token(Token = "0x6000B0C")]
		[Address(RVA = "0x18324BC", Offset = "0x18324BC", VA = "0x18324BC")]
		public static bool Diff(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0x1832794", Offset = "0x1832794", VA = "0x1832794")]
		public static bool Eq(uint[] x, uint[] y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0x1832804", Offset = "0x1832804", VA = "0x1832804")]
		public static uint[] FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000B0F")]
		[Address(RVA = "0x1832908", Offset = "0x1832908", VA = "0x1832908")]
		public static uint GetBit(uint[] x, int bit)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0x1832980", Offset = "0x1832980", VA = "0x1832980")]
		public static bool Gte(uint[] x, uint[] y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B11")]
		[Address(RVA = "0x1832548", Offset = "0x1832548", VA = "0x1832548")]
		public static bool Gte(uint[] x, int xOff, uint[] y, int yOff)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B12")]
		[Address(RVA = "0x18329FC", Offset = "0x18329FC", VA = "0x18329FC")]
		public static bool IsOne(uint[] x)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B13")]
		[Address(RVA = "0x1832A68", Offset = "0x1832A68", VA = "0x1832A68")]
		public static bool IsZero(uint[] x)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B14")]
		[Address(RVA = "0x1832AC8", Offset = "0x1832AC8", VA = "0x1832AC8")]
		public static void Mul(uint[] x, uint[] y, uint[] zz)
		{
		}

		[Token(Token = "0x6000B15")]
		[Address(RVA = "0x1832C6C", Offset = "0x1832C6C", VA = "0x1832C6C")]
		public static void Mul(uint[] x, int xOff, uint[] y, int yOff, uint[] zz, int zzOff)
		{
		}

		[Token(Token = "0x6000B16")]
		[Address(RVA = "0x1832EE8", Offset = "0x1832EE8", VA = "0x1832EE8")]
		public static uint MulAddTo(uint[] x, uint[] y, uint[] zz)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B17")]
		[Address(RVA = "0x1833034", Offset = "0x1833034", VA = "0x1833034")]
		public static uint MulAddTo(uint[] x, int xOff, uint[] y, int yOff, uint[] zz, int zzOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B18")]
		[Address(RVA = "0x1833210", Offset = "0x1833210", VA = "0x1833210")]
		public static ulong Mul33Add(uint w, uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000B19")]
		[Address(RVA = "0x18333E4", Offset = "0x18333E4", VA = "0x18333E4")]
		public static uint MulWordAddExt(uint x, uint[] yy, int yyOff, uint[] zz, int zzOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B1A")]
		[Address(RVA = "0x1833544", Offset = "0x1833544", VA = "0x1833544")]
		public static uint Mul33DWordAdd(uint x, ulong y, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B1B")]
		[Address(RVA = "0x1833628", Offset = "0x1833628", VA = "0x1833628")]
		public static uint Mul33WordAdd(uint x, uint y, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B1C")]
		[Address(RVA = "0x18336E0", Offset = "0x18336E0", VA = "0x18336E0")]
		public static uint MulWordDwordAdd(uint x, ulong y, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B1D")]
		[Address(RVA = "0x183379C", Offset = "0x183379C", VA = "0x183379C")]
		public static uint MulWordsAdd(uint x, uint y, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B1E")]
		[Address(RVA = "0x1833830", Offset = "0x1833830", VA = "0x1833830")]
		public static uint MulWord(uint x, uint[] y, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B1F")]
		[Address(RVA = "0x18338B8", Offset = "0x18338B8", VA = "0x18338B8")]
		public static void Square(uint[] x, uint[] zz)
		{
		}

		[Token(Token = "0x6000B20")]
		[Address(RVA = "0x1833AE8", Offset = "0x1833AE8", VA = "0x1833AE8")]
		public static void Square(uint[] x, int xOff, uint[] zz, int zzOff)
		{
		}

		[Token(Token = "0x6000B21")]
		[Address(RVA = "0x1833E1C", Offset = "0x1833E1C", VA = "0x1833E1C")]
		public static int Sub(uint[] x, uint[] y, uint[] z)
		{
			return default(int);
		}

		[Token(Token = "0x6000B22")]
		[Address(RVA = "0x18325D4", Offset = "0x18325D4", VA = "0x18325D4")]
		public static int Sub(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff)
		{
			return default(int);
		}

		[Token(Token = "0x6000B23")]
		[Address(RVA = "0x1833F54", Offset = "0x1833F54", VA = "0x1833F54")]
		public static int SubBothFrom(uint[] x, uint[] y, uint[] z)
		{
			return default(int);
		}

		[Token(Token = "0x6000B24")]
		[Address(RVA = "0x18340B4", Offset = "0x18340B4", VA = "0x18340B4")]
		public static int SubFrom(uint[] x, uint[] z)
		{
			return default(int);
		}

		[Token(Token = "0x6000B25")]
		[Address(RVA = "0x18341B0", Offset = "0x18341B0", VA = "0x18341B0")]
		public static int SubFrom(uint[] x, int xOff, uint[] z, int zOff)
		{
			return default(int);
		}

		[Token(Token = "0x6000B26")]
		[Address(RVA = "0x183430C", Offset = "0x183430C", VA = "0x183430C")]
		public static BigInteger ToBigInteger(uint[] x)
		{
			return null;
		}

		[Token(Token = "0x6000B27")]
		[Address(RVA = "0x18343F0", Offset = "0x18343F0", VA = "0x18343F0")]
		public static void Zero(uint[] z)
		{
		}

		[Token(Token = "0x6000B28")]
		[Address(RVA = "0x1834450", Offset = "0x1834450", VA = "0x1834450")]
		protected Nat160()
		{
		}
	}
	[Token(Token = "0x200018B")]
	internal abstract class Nat192
	{
		[Token(Token = "0x40008D5")]
		private const ulong M = 4294967295uL;

		[Token(Token = "0x6000B29")]
		[Address(RVA = "0x1834458", Offset = "0x1834458", VA = "0x1834458")]
		public static uint Add(uint[] x, uint[] y, uint[] z)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0x18345C8", Offset = "0x18345C8", VA = "0x18345C8")]
		public static uint AddBothTo(uint[] x, uint[] y, uint[] z)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0x1834768", Offset = "0x1834768", VA = "0x1834768")]
		public static uint AddTo(uint[] x, uint[] z)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0x1834890", Offset = "0x1834890", VA = "0x1834890")]
		public static uint AddTo(uint[] x, int xOff, uint[] z, int zOff, uint cIn)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0x1834A34", Offset = "0x1834A34", VA = "0x1834A34")]
		public static uint AddToEachOther(uint[] u, int uOff, uint[] v, int vOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B2E")]
		[Address(RVA = "0x1834C44", Offset = "0x1834C44", VA = "0x1834C44")]
		public static void Copy(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000B2F")]
		[Address(RVA = "0x1834D10", Offset = "0x1834D10", VA = "0x1834D10")]
		public static void Copy64(ulong[] x, ulong[] z)
		{
		}

		[Token(Token = "0x6000B30")]
		[Address(RVA = "0x1834D88", Offset = "0x1834D88", VA = "0x1834D88")]
		public static uint[] Create()
		{
			return null;
		}

		[Token(Token = "0x6000B31")]
		[Address(RVA = "0x1834DD4", Offset = "0x1834DD4", VA = "0x1834DD4")]
		public static ulong[] Create64()
		{
			return null;
		}

		[Token(Token = "0x6000B32")]
		[Address(RVA = "0x1834E20", Offset = "0x1834E20", VA = "0x1834E20")]
		public static uint[] CreateExt()
		{
			return null;
		}

		[Token(Token = "0x6000B33")]
		[Address(RVA = "0x1834E6C", Offset = "0x1834E6C", VA = "0x1834E6C")]
		public static ulong[] CreateExt64()
		{
			return null;
		}

		[Token(Token = "0x6000B34")]
		[Address(RVA = "0x1834EB8", Offset = "0x1834EB8", VA = "0x1834EB8")]
		public static bool Diff(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0x18351E4", Offset = "0x18351E4", VA = "0x18351E4")]
		public static bool Eq(uint[] x, uint[] y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B36")]
		[Address(RVA = "0x1835254", Offset = "0x1835254", VA = "0x1835254")]
		public static bool Eq64(ulong[] x, ulong[] y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B37")]
		[Address(RVA = "0x18352C4", Offset = "0x18352C4", VA = "0x18352C4")]
		public static uint[] FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000B38")]
		[Address(RVA = "0x18353C8", Offset = "0x18353C8", VA = "0x18353C8")]
		public static ulong[] FromBigInteger64(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000B39")]
		[Address(RVA = "0x18354CC", Offset = "0x18354CC", VA = "0x18354CC")]
		public static uint GetBit(uint[] x, int bit)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0x1835544", Offset = "0x1835544", VA = "0x1835544")]
		public static bool Gte(uint[] x, uint[] y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B3B")]
		[Address(RVA = "0x1834F44", Offset = "0x1834F44", VA = "0x1834F44")]
		public static bool Gte(uint[] x, int xOff, uint[] y, int yOff)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B3C")]
		[Address(RVA = "0x18355C0", Offset = "0x18355C0", VA = "0x18355C0")]
		public static bool IsOne(uint[] x)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B3D")]
		[Address(RVA = "0x183562C", Offset = "0x183562C", VA = "0x183562C")]
		public static bool IsOne64(ulong[] x)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B3E")]
		[Address(RVA = "0x1835698", Offset = "0x1835698", VA = "0x1835698")]
		public static bool IsZero(uint[] x)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0x18356F8", Offset = "0x18356F8", VA = "0x18356F8")]
		public static bool IsZero64(ulong[] x)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B40")]
		[Address(RVA = "0x1835758", Offset = "0x1835758", VA = "0x1835758")]
		public static void Mul(uint[] x, uint[] y, uint[] zz)
		{
		}

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0x1835934", Offset = "0x1835934", VA = "0x1835934")]
		public static void Mul(uint[] x, int xOff, uint[] y, int yOff, uint[] zz, int zzOff)
		{
		}

		[Token(Token = "0x6000B42")]
		[Address(RVA = "0x1835C10", Offset = "0x1835C10", VA = "0x1835C10")]
		public static uint MulAddTo(uint[] x, uint[] y, uint[] zz)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B43")]
		[Address(RVA = "0x1835D84", Offset = "0x1835D84", VA = "0x1835D84")]
		public static uint MulAddTo(uint[] x, int xOff, uint[] y, int yOff, uint[] zz, int zzOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B44")]
		[Address(RVA = "0x1835FA0", Offset = "0x1835FA0", VA = "0x1835FA0")]
		public static ulong Mul33Add(uint w, uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0x18361CC", Offset = "0x18361CC", VA = "0x18361CC")]
		public static uint MulWordAddExt(uint x, uint[] yy, int yyOff, uint[] zz, int zzOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B46")]
		[Address(RVA = "0x183636C", Offset = "0x183636C", VA = "0x183636C")]
		public static uint Mul33DWordAdd(uint x, ulong y, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B47")]
		[Address(RVA = "0x1836450", Offset = "0x1836450", VA = "0x1836450")]
		public static uint Mul33WordAdd(uint x, uint y, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B48")]
		[Address(RVA = "0x1836508", Offset = "0x1836508", VA = "0x1836508")]
		public static uint MulWordDwordAdd(uint x, ulong y, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B49")]
		[Address(RVA = "0x18365C4", Offset = "0x18365C4", VA = "0x18365C4")]
		public static uint MulWord(uint x, uint[] y, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B4A")]
		[Address(RVA = "0x183664C", Offset = "0x183664C", VA = "0x183664C")]
		public static void Square(uint[] x, uint[] zz)
		{
		}

		[Token(Token = "0x6000B4B")]
		[Address(RVA = "0x18368EC", Offset = "0x18368EC", VA = "0x18368EC")]
		public static void Square(uint[] x, int xOff, uint[] zz, int zzOff)
		{
		}

		[Token(Token = "0x6000B4C")]
		[Address(RVA = "0x1836CDC", Offset = "0x1836CDC", VA = "0x1836CDC")]
		public static int Sub(uint[] x, uint[] y, uint[] z)
		{
			return default(int);
		}

		[Token(Token = "0x6000B4D")]
		[Address(RVA = "0x1834FD0", Offset = "0x1834FD0", VA = "0x1834FD0")]
		public static int Sub(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff)
		{
			return default(int);
		}

		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0x1836E4C", Offset = "0x1836E4C", VA = "0x1836E4C")]
		public static int SubBothFrom(uint[] x, uint[] y, uint[] z)
		{
			return default(int);
		}

		[Token(Token = "0x6000B4F")]
		[Address(RVA = "0x1836FEC", Offset = "0x1836FEC", VA = "0x1836FEC")]
		public static int SubFrom(uint[] x, uint[] z)
		{
			return default(int);
		}

		[Token(Token = "0x6000B50")]
		[Address(RVA = "0x1837114", Offset = "0x1837114", VA = "0x1837114")]
		public static int SubFrom(uint[] x, int xOff, uint[] z, int zOff)
		{
			return default(int);
		}

		[Token(Token = "0x6000B51")]
		[Address(RVA = "0x18372B0", Offset = "0x18372B0", VA = "0x18372B0")]
		public static BigInteger ToBigInteger(uint[] x)
		{
			return null;
		}

		[Token(Token = "0x6000B52")]
		[Address(RVA = "0x1837394", Offset = "0x1837394", VA = "0x1837394")]
		public static BigInteger ToBigInteger64(ulong[] x)
		{
			return null;
		}

		[Token(Token = "0x6000B53")]
		[Address(RVA = "0x1837478", Offset = "0x1837478", VA = "0x1837478")]
		public static void Zero(uint[] z)
		{
		}

		[Token(Token = "0x6000B54")]
		[Address(RVA = "0x18374E4", Offset = "0x18374E4", VA = "0x18374E4")]
		protected Nat192()
		{
		}
	}
	[Token(Token = "0x200018C")]
	internal abstract class Nat224
	{
		[Token(Token = "0x40008D6")]
		private const ulong M = 4294967295uL;

		[Token(Token = "0x6000B55")]
		[Address(RVA = "0x18374EC", Offset = "0x18374EC", VA = "0x18374EC")]
		public static uint Add(uint[] x, uint[] y, uint[] z)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B56")]
		[Address(RVA = "0x1837694", Offset = "0x1837694", VA = "0x1837694")]
		public static uint Add(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B57")]
		[Address(RVA = "0x18378FC", Offset = "0x18378FC", VA = "0x18378FC")]
		public static uint AddBothTo(uint[] x, uint[] y, uint[] z)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B58")]
		[Address(RVA = "0x1837ADC", Offset = "0x1837ADC", VA = "0x1837ADC")]
		public static uint AddBothTo(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B59")]
		[Address(RVA = "0x1837D7C", Offset = "0x1837D7C", VA = "0x1837D7C")]
		public static uint AddTo(uint[] x, uint[] z)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B5A")]
		[Address(RVA = "0x1837ED0", Offset = "0x1837ED0", VA = "0x1837ED0")]
		public static uint AddTo(uint[] x, int xOff, uint[] z, int zOff, uint cIn)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B5B")]
		[Address(RVA = "0x18380B4", Offset = "0x18380B4", VA = "0x18380B4")]
		public static uint AddToEachOther(uint[] u, int uOff, uint[] v, int vOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B5C")]
		[Address(RVA = "0x1838318", Offset = "0x1838318", VA = "0x1838318")]
		public static void Copy(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000B5D")]
		[Address(RVA = "0x1838400", Offset = "0x1838400", VA = "0x1838400")]
		public static uint[] Create()
		{
			return null;
		}

		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0x183844C", Offset = "0x183844C", VA = "0x183844C")]
		public static uint[] CreateExt()
		{
			return null;
		}

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0x1838498", Offset = "0x1838498", VA = "0x1838498")]
		public static bool Diff(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B60")]
		[Address(RVA = "0x1838818", Offset = "0x1838818", VA = "0x1838818")]
		public static bool Eq(uint[] x, uint[] y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B61")]
		[Address(RVA = "0x1838888", Offset = "0x1838888", VA = "0x1838888")]
		public static uint[] FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000B62")]
		[Address(RVA = "0x183898C", Offset = "0x183898C", VA = "0x183898C")]
		public static uint GetBit(uint[] x, int bit)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B63")]
		[Address(RVA = "0x1838A04", Offset = "0x1838A04", VA = "0x1838A04")]
		public static bool Gte(uint[] x, uint[] y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B64")]
		[Address(RVA = "0x1838524", Offset = "0x1838524", VA = "0x1838524")]
		public static bool Gte(uint[] x, int xOff, uint[] y, int yOff)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0x1838A80", Offset = "0x1838A80", VA = "0x1838A80")]
		public static bool IsOne(uint[] x)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B66")]
		[Address(RVA = "0x1838AEC", Offset = "0x1838AEC", VA = "0x1838AEC")]
		public static bool IsZero(uint[] x)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B67")]
		[Address(RVA = "0x1838B4C", Offset = "0x1838B4C", VA = "0x1838B4C")]
		public static void Mul(uint[] x, uint[] y, uint[] zz)
		{
		}

		[Token(Token = "0x6000B68")]
		[Address(RVA = "0x1838D6C", Offset = "0x1838D6C", VA = "0x1838D6C")]
		public static void Mul(uint[] x, int xOff, uint[] y, int yOff, uint[] zz, int zzOff)
		{
		}

		[Token(Token = "0x6000B69")]
		[Address(RVA = "0x18390AC", Offset = "0x18390AC", VA = "0x18390AC")]
		public static uint MulAddTo(uint[] x, uint[] y, uint[] zz)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B6A")]
		[Address(RVA = "0x183924C", Offset = "0x183924C", VA = "0x183924C")]
		public static uint MulAddTo(uint[] x, int xOff, uint[] y, int yOff, uint[] zz, int zzOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B6B")]
		[Address(RVA = "0x18394B4", Offset = "0x18394B4", VA = "0x18394B4")]
		public static ulong Mul33Add(uint w, uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000B6C")]
		[Address(RVA = "0x1839738", Offset = "0x1839738", VA = "0x1839738")]
		public static uint MulByWord(uint x, uint[] z)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B6D")]
		[Address(RVA = "0x1839808", Offset = "0x1839808", VA = "0x1839808")]
		public static uint MulByWordAddTo(uint x, uint[] y, uint[] z)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B6E")]
		[Address(RVA = "0x1839960", Offset = "0x1839960", VA = "0x1839960")]
		public static uint MulWordAddTo(uint x, uint[] y, int yOff, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B6F")]
		[Address(RVA = "0x1839B40", Offset = "0x1839B40", VA = "0x1839B40")]
		public static uint Mul33DWordAdd(uint x, ulong y, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B70")]
		[Address(RVA = "0x1839C24", Offset = "0x1839C24", VA = "0x1839C24")]
		public static uint Mul33WordAdd(uint x, uint y, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0x1839CDC", Offset = "0x1839CDC", VA = "0x1839CDC")]
		public static uint MulWordDwordAdd(uint x, ulong y, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B72")]
		[Address(RVA = "0x1839D98", Offset = "0x1839D98", VA = "0x1839D98")]
		public static uint MulWord(uint x, uint[] y, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B73")]
		[Address(RVA = "0x1839E20", Offset = "0x1839E20", VA = "0x1839E20")]
		public static void Square(uint[] x, uint[] zz)
		{
		}

		[Token(Token = "0x6000B74")]
		[Address(RVA = "0x183A144", Offset = "0x183A144", VA = "0x183A144")]
		public static void Square(uint[] x, int xOff, uint[] zz, int zzOff)
		{
		}

		[Token(Token = "0x6000B75")]
		[Address(RVA = "0x183A610", Offset = "0x183A610", VA = "0x183A610")]
		public static int Sub(uint[] x, uint[] y, uint[] z)
		{
			return default(int);
		}

		[Token(Token = "0x6000B76")]
		[Address(RVA = "0x18385B0", Offset = "0x18385B0", VA = "0x18385B0")]
		public static int Sub(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff)
		{
			return default(int);
		}

		[Token(Token = "0x6000B77")]
		[Address(RVA = "0x183A7B8", Offset = "0x183A7B8", VA = "0x183A7B8")]
		public static int SubBothFrom(uint[] x, uint[] y, uint[] z)
		{
			return default(int);
		}

		[Token(Token = "0x6000B78")]
		[Address(RVA = "0x183A998", Offset = "0x183A998", VA = "0x183A998")]
		public static int SubFrom(uint[] x, uint[] z)
		{
			return default(int);
		}

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0x183AAEC", Offset = "0x183AAEC", VA = "0x183AAEC")]
		public static int SubFrom(uint[] x, int xOff, uint[] z, int zOff)
		{
			return default(int);
		}

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0x183ACC8", Offset = "0x183ACC8", VA = "0x183ACC8")]
		public static BigInteger ToBigInteger(uint[] x)
		{
			return null;
		}

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0x183ADAC", Offset = "0x183ADAC", VA = "0x183ADAC")]
		public static void Zero(uint[] z)
		{
		}

		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0x183AE24", Offset = "0x183AE24", VA = "0x183AE24")]
		protected Nat224()
		{
		}
	}
	[Token(Token = "0x200018D")]
	internal abstract class Nat256
	{
		[Token(Token = "0x40008D7")]
		private const ulong M = 4294967295uL;

		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0x183AE2C", Offset = "0x183AE2C", VA = "0x183AE2C")]
		public static uint Add(uint[] x, uint[] y, uint[] z)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0x183B00C", Offset = "0x183B00C", VA = "0x183B00C")]
		public static uint Add(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0x183B2C8", Offset = "0x183B2C8", VA = "0x183B2C8")]
		public static uint AddBothTo(uint[] x, uint[] y, uint[] z)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B80")]
		[Address(RVA = "0x183B4E8", Offset = "0x183B4E8", VA = "0x183B4E8")]
		public static uint AddBothTo(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B81")]
		[Address(RVA = "0x183B7E4", Offset = "0x183B7E4", VA = "0x183B7E4")]
		public static uint AddTo(uint[] x, uint[] z)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0x183B964", Offset = "0x183B964", VA = "0x183B964")]
		public static uint AddTo(uint[] x, int xOff, uint[] z, int zOff, uint cIn)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B83")]
		[Address(RVA = "0x183BB88", Offset = "0x183BB88", VA = "0x183BB88")]
		public static uint AddToEachOther(uint[] u, int uOff, uint[] v, int vOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B84")]
		[Address(RVA = "0x183BE40", Offset = "0x183BE40", VA = "0x183BE40")]
		public static void Copy(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000B85")]
		[Address(RVA = "0x183BF44", Offset = "0x183BF44", VA = "0x183BF44")]
		public static void Copy64(ulong[] x, ulong[] z)
		{
		}

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0x183BFD8", Offset = "0x183BFD8", VA = "0x183BFD8")]
		public static uint[] Create()
		{
			return null;
		}

		[Token(Token = "0x6000B87")]
		[Address(RVA = "0x183C024", Offset = "0x183C024", VA = "0x183C024")]
		public static ulong[] Create64()
		{
			return null;
		}

		[Token(Token = "0x6000B88")]
		[Address(RVA = "0x183C070", Offset = "0x183C070", VA = "0x183C070")]
		public static uint[] CreateExt()
		{
			return null;
		}

		[Token(Token = "0x6000B89")]
		[Address(RVA = "0x183C0BC", Offset = "0x183C0BC", VA = "0x183C0BC")]
		public static ulong[] CreateExt64()
		{
			return null;
		}

		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0x183C108", Offset = "0x183C108", VA = "0x183C108")]
		public static bool Diff(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8B")]
		[Address(RVA = "0x183C4DC", Offset = "0x183C4DC", VA = "0x183C4DC")]
		public static bool Eq(uint[] x, uint[] y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8C")]
		[Address(RVA = "0x183C54C", Offset = "0x183C54C", VA = "0x183C54C")]
		public static bool Eq64(ulong[] x, ulong[] y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8D")]
		[Address(RVA = "0x183C5BC", Offset = "0x183C5BC", VA = "0x183C5BC")]
		public static uint[] FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000B8E")]
		[Address(RVA = "0x183C6C0", Offset = "0x183C6C0", VA = "0x183C6C0")]
		public static ulong[] FromBigInteger64(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000B8F")]
		[Address(RVA = "0x183C7C4", Offset = "0x183C7C4", VA = "0x183C7C4")]
		public static uint GetBit(uint[] x, int bit)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B90")]
		[Address(RVA = "0x183C834", Offset = "0x183C834", VA = "0x183C834")]
		public static bool Gte(uint[] x, uint[] y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B91")]
		[Address(RVA = "0x183C194", Offset = "0x183C194", VA = "0x183C194")]
		public static bool Gte(uint[] x, int xOff, uint[] y, int yOff)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B92")]
		[Address(RVA = "0x183C8B0", Offset = "0x183C8B0", VA = "0x183C8B0")]
		public static bool IsOne(uint[] x)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B93")]
		[Address(RVA = "0x183C91C", Offset = "0x183C91C", VA = "0x183C91C")]
		public static bool IsOne64(ulong[] x)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B94")]
		[Address(RVA = "0x183C988", Offset = "0x183C988", VA = "0x183C988")]
		public static bool IsZero(uint[] x)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0x183C9E8", Offset = "0x183C9E8", VA = "0x183C9E8")]
		public static bool IsZero64(ulong[] x)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0x183CA48", Offset = "0x183CA48", VA = "0x183CA48")]
		public static void Mul(uint[] x, uint[] y, uint[] zz)
		{
		}

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0x183CCA8", Offset = "0x183CCA8", VA = "0x183CCA8")]
		public static void Mul(uint[] x, int xOff, uint[] y, int yOff, uint[] zz, int zzOff)
		{
		}

		[Token(Token = "0x6000B98")]
		[Address(RVA = "0x183D048", Offset = "0x183D048", VA = "0x183D048")]
		public static uint MulAddTo(uint[] x, uint[] y, uint[] zz)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B99")]
		[Address(RVA = "0x183D210", Offset = "0x183D210", VA = "0x183D210")]
		public static uint MulAddTo(uint[] x, int xOff, uint[] y, int yOff, uint[] zz, int zzOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0x183D4B8", Offset = "0x183D4B8", VA = "0x183D4B8")]
		public static ulong Mul33Add(uint w, uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000B9B")]
		[Address(RVA = "0x183D794", Offset = "0x183D794", VA = "0x183D794")]
		public static uint MulByWord(uint x, uint[] z)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B9C")]
		[Address(RVA = "0x183D87C", Offset = "0x183D87C", VA = "0x183D87C")]
		public static uint MulByWordAddTo(uint x, uint[] y, uint[] z)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B9D")]
		[Address(RVA = "0x183DA00", Offset = "0x183DA00", VA = "0x183DA00")]
		public static uint MulWordAddTo(uint x, uint[] y, int yOff, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B9E")]
		[Address(RVA = "0x183DC20", Offset = "0x183DC20", VA = "0x183DC20")]
		public static uint Mul33DWordAdd(uint x, ulong y, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B9F")]
		[Address(RVA = "0x183DD04", Offset = "0x183DD04", VA = "0x183DD04")]
		public static uint Mul33WordAdd(uint x, uint y, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000BA0")]
		[Address(RVA = "0x183DDBC", Offset = "0x183DDBC", VA = "0x183DDBC")]
		public static uint MulWordDwordAdd(uint x, ulong y, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000BA1")]
		[Address(RVA = "0x183DE78", Offset = "0x183DE78", VA = "0x183DE78")]
		public static uint MulWord(uint x, uint[] y, uint[] z, int zOff)
		{
			return default(uint);
		}

		[Token(Token = "0x6000BA2")]
		[Address(RVA = "0x183DF00", Offset = "0x183DF00", VA = "0x183DF00")]
		public static void Square(uint[] x, uint[] zz)
		{
		}

		[Token(Token = "0x6000BA3")]
		[Address(RVA = "0x183E2BC", Offset = "0x183E2BC", VA = "0x183E2BC")]
		public static void Square(uint[] x, int xOff, uint[] zz, int zzOff)
		{
		}

		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0x183E870", Offset = "0x183E870", VA = "0x183E870")]
		public static int Sub(uint[] x, uint[] y, uint[] z)
		{
			return default(int);
		}

		[Token(Token = "0x6000BA5")]
		[Address(RVA = "0x183C220", Offset = "0x183C220", VA = "0x183C220")]
		public static int Sub(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff)
		{
			return default(int);
		}

		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0x183EA50", Offset = "0x183EA50", VA = "0x183EA50")]
		public static int SubBothFrom(uint[] x, uint[] y, uint[] z)
		{
			return default(int);
		}

		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0x183EC70", Offset = "0x183EC70", VA = "0x183EC70")]
		public static int SubFrom(uint[] x, uint[] z)
		{
			return default(int);
		}

		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0x183EDF0", Offset = "0x183EDF0", VA = "0x183EDF0")]
		public static int SubFrom(uint[] x, int xOff, uint[] z, int zOff)
		{
			return default(int);
		}

		[Token(Token = "0x6000BA9")]
		[Address(RVA = "0x183F00C", Offset = "0x183F00C", VA = "0x183F00C")]
		public static BigInteger ToBigInteger(uint[] x)
		{
			return null;
		}

		[Token(Token = "0x6000BAA")]
		[Address(RVA = "0x183F0F0", Offset = "0x183F0F0", VA = "0x183F0F0")]
		public static BigInteger ToBigInteger64(ulong[] x)
		{
			return null;
		}

		[Token(Token = "0x6000BAB")]
		[Address(RVA = "0x183F1D4", Offset = "0x183F1D4", VA = "0x183F1D4")]
		public static void Zero(uint[] z)
		{
		}

		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0x183F258", Offset = "0x183F258", VA = "0x183F258")]
		protected Nat256()
		{
		}
	}
	[Token(Token = "0x200018E")]
	internal abstract class Nat320
	{
		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0xB35630", Offset = "0xB35630", VA = "0xB35630")]
		public static void Copy64(ulong[] x, ulong[] z)
		{
		}

		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0xB356E0", Offset = "0xB356E0", VA = "0xB356E0")]
		public static ulong[] Create64()
		{
			return null;
		}

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0xB3572C", Offset = "0xB3572C", VA = "0xB3572C")]
		public static ulong[] CreateExt64()
		{
			return null;
		}

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0xB35778", Offset = "0xB35778", VA = "0xB35778")]
		public static bool Eq64(ulong[] x, ulong[] y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0xB357E8", Offset = "0xB357E8", VA = "0xB357E8")]
		public static ulong[] FromBigInteger64(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0xB358EC", Offset = "0xB358EC", VA = "0xB358EC")]
		public static bool IsOne64(ulong[] x)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB3")]
		[Address(RVA = "0xB35958", Offset = "0xB35958", VA = "0xB35958")]
		public static bool IsZero64(ulong[] x)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0xB359B8", Offset = "0xB359B8", VA = "0xB359B8")]
		public static BigInteger ToBigInteger64(ulong[] x)
		{
			return null;
		}

		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0xB35A9C", Offset = "0xB35A9C", VA = "0xB35A9C")]
		protected Nat320()
		{
		}
	}
	[Token(Token = "0x200018F")]
	internal abstract class Nat384
	{
		[Token(Token = "0x6000BB6")]
		[Address(RVA = "0xB35AA4", Offset = "0xB35AA4", VA = "0xB35AA4")]
		public static void Mul(uint[] x, uint[] y, uint[] zz)
		{
		}

		[Token(Token = "0x6000BB7")]
		[Address(RVA = "0xB35C14", Offset = "0xB35C14", VA = "0xB35C14")]
		public static void Square(uint[] x, uint[] zz)
		{
		}

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0xB35D2C", Offset = "0xB35D2C", VA = "0xB35D2C")]
		protected Nat384()
		{
		}
	}
	[Token(Token = "0x2000190")]
	internal abstract class Nat448
	{
		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0xB35D34", Offset = "0xB35D34", VA = "0xB35D34")]
		public static void Copy64(ulong[] x, ulong[] z)
		{
		}

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0xB35E1C", Offset = "0xB35E1C", VA = "0xB35E1C")]
		public static ulong[] Create64()
		{
			return null;
		}

		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0xB35E68", Offset = "0xB35E68", VA = "0xB35E68")]
		public static ulong[] CreateExt64()
		{
			return null;
		}

		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0xB35EB4", Offset = "0xB35EB4", VA = "0xB35EB4")]
		public static bool Eq64(ulong[] x, ulong[] y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0xB35F24", Offset = "0xB35F24", VA = "0xB35F24")]
		public static ulong[] FromBigInteger64(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000BBE")]
		[Address(RVA = "0xB36028", Offset = "0xB36028", VA = "0xB36028")]
		public static bool IsOne64(ulong[] x)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BBF")]
		[Address(RVA = "0xB36094", Offset = "0xB36094", VA = "0xB36094")]
		public static bool IsZero64(ulong[] x)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BC0")]
		[Address(RVA = "0xB360F4", Offset = "0xB360F4", VA = "0xB360F4")]
		public static BigInteger ToBigInteger64(ulong[] x)
		{
			return null;
		}

		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0xB361D8", Offset = "0xB361D8", VA = "0xB361D8")]
		protected Nat448()
		{
		}
	}
	[Token(Token = "0x2000191")]
	internal abstract class Nat512
	{
		[Token(Token = "0x6000BC2")]
		[Address(RVA = "0xB361E0", Offset = "0xB361E0", VA = "0xB361E0")]
		public static void Mul(uint[] x, uint[] y, uint[] zz)
		{
		}

		[Token(Token = "0x6000BC3")]
		[Address(RVA = "0xB36350", Offset = "0xB36350", VA = "0xB36350")]
		public static void Square(uint[] x, uint[] zz)
		{
		}

		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0xB36468", Offset = "0xB36468", VA = "0xB36468")]
		protected Nat512()
		{
		}
	}
	[Token(Token = "0x2000192")]
	internal abstract class Nat576
	{
		[Token(Token = "0x6000BC5")]
		[Address(RVA = "0xB36470", Offset = "0xB36470", VA = "0xB36470")]
		public static void Copy64(ulong[] x, ulong[] z)
		{
		}

		[Token(Token = "0x6000BC6")]
		[Address(RVA = "0xB36590", Offset = "0xB36590", VA = "0xB36590")]
		public static ulong[] Create64()
		{
			return null;
		}

		[Token(Token = "0x6000BC7")]
		[Address(RVA = "0xB365DC", Offset = "0xB365DC", VA = "0xB365DC")]
		public static ulong[] CreateExt64()
		{
			return null;
		}

		[Token(Token = "0x6000BC8")]
		[Address(RVA = "0xB36628", Offset = "0xB36628", VA = "0xB36628")]
		public static bool Eq64(ulong[] x, ulong[] y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BC9")]
		[Address(RVA = "0xB36698", Offset = "0xB36698", VA = "0xB36698")]
		public static ulong[] FromBigInteger64(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000BCA")]
		[Address(RVA = "0xB3679C", Offset = "0xB3679C", VA = "0xB3679C")]
		public static bool IsOne64(ulong[] x)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BCB")]
		[Address(RVA = "0xB36808", Offset = "0xB36808", VA = "0xB36808")]
		public static bool IsZero64(ulong[] x)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BCC")]
		[Address(RVA = "0xB36868", Offset = "0xB36868", VA = "0xB36868")]
		public static BigInteger ToBigInteger64(ulong[] x)
		{
			return null;
		}

		[Token(Token = "0x6000BCD")]
		[Address(RVA = "0xB3694C", Offset = "0xB3694C", VA = "0xB3694C")]
		protected Nat576()
		{
		}
	}
}
namespace Org.BouncyCastle.Math.Field
{
	[Token(Token = "0x2000193")]
	public abstract class FiniteFields
	{
		[Token(Token = "0x40008D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly IFiniteField GF_2;

		[Token(Token = "0x40008D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly IFiniteField GF_3;

		[Token(Token = "0x6000BCE")]
		[Address(RVA = "0x14046DC", Offset = "0x14046DC", VA = "0x14046DC")]
		public static IPolynomialExtensionField GetBinaryExtensionField(int[] exponents)
		{
			return null;
		}

		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0x14048C8", Offset = "0x14048C8", VA = "0x14048C8")]
		public static IFiniteField GetPrimeField(BigInteger characteristic)
		{
			return null;
		}

		[Token(Token = "0x6000BD0")]
		[Address(RVA = "0x1404A4C", Offset = "0x1404A4C", VA = "0x1404A4C")]
		protected FiniteFields()
		{
		}
	}
	[Token(Token = "0x2000194")]
	internal class GF2Polynomial : IPolynomial
	{
		[Token(Token = "0x40008DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly int[] exponents;

		[Token(Token = "0x170000B2")]
		public virtual int Degree
		{
			[Token(Token = "0x6000BD3")]
			[Address(RVA = "0x1404B38", Offset = "0x1404B38", VA = "0x1404B38", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0x1404858", Offset = "0x1404858", VA = "0x1404858")]
		internal GF2Polynomial(int[] exponents)
		{
		}

		[Token(Token = "0x6000BD4")]
		[Address(RVA = "0x1404B78", Offset = "0x1404B78", VA = "0x1404B78", Slot = "7")]
		public virtual int[] GetExponentsPresent()
		{
			return null;
		}

		[Token(Token = "0x6000BD5")]
		[Address(RVA = "0x1404B84", Offset = "0x1404B84", VA = "0x1404B84", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD6")]
		[Address(RVA = "0x1404C44", Offset = "0x1404C44", VA = "0x1404C44", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000195")]
	internal class GenericPolynomialExtensionField : IPolynomialExtensionField, IExtensionField, IFiniteField
	{
		[Token(Token = "0x40008DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly IFiniteField subfield;

		[Token(Token = "0x40008DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected readonly IPolynomial minimalPolynomial;

		[Token(Token = "0x170000B3")]
		public virtual BigInteger Characteristic
		{
			[Token(Token = "0x6000BD8")]
			[Address(RVA = "0x1404C50", Offset = "0x1404C50", VA = "0x1404C50", Slot = "9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B4")]
		public virtual int Dimension
		{
			[Token(Token = "0x6000BD9")]
			[Address(RVA = "0x1404D00", Offset = "0x1404D00", VA = "0x1404D00", Slot = "10")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000B5")]
		public virtual IFiniteField Subfield
		{
			[Token(Token = "0x6000BDA")]
			[Address(RVA = "0x1404E30", Offset = "0x1404E30", VA = "0x1404E30", Slot = "11")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B6")]
		public virtual int Degree
		{
			[Token(Token = "0x6000BDB")]
			[Address(RVA = "0x1404E38", Offset = "0x1404E38", VA = "0x1404E38", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000B7")]
		public virtual IPolynomial MinimalPolynomial
		{
			[Token(Token = "0x6000BDC")]
			[Address(RVA = "0x1404EE8", Offset = "0x1404EE8", VA = "0x1404EE8", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BD7")]
		[Address(RVA = "0x1404890", Offset = "0x1404890", VA = "0x1404890")]
		internal GenericPolynomialExtensionField(IFiniteField subfield, IPolynomial polynomial)
		{
		}

		[Token(Token = "0x6000BDD")]
		[Address(RVA = "0x1404EF0", Offset = "0x1404EF0", VA = "0x1404EF0", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BDE")]
		[Address(RVA = "0x1404FD4", Offset = "0x1404FD4", VA = "0x1404FD4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000196")]
	public interface IExtensionField : IFiniteField
	{
		[Token(Token = "0x170000B8")]
		IFiniteField Subfield
		{
			[Token(Token = "0x6000BDF")]
			get;
		}

		[Token(Token = "0x170000B9")]
		int Degree
		{
			[Token(Token = "0x6000BE0")]
			get;
		}
	}
	[Token(Token = "0x2000197")]
	public interface IFiniteField
	{
		[Token(Token = "0x170000BA")]
		BigInteger Characteristic
		{
			[Token(Token = "0x6000BE1")]
			get;
		}

		[Token(Token = "0x170000BB")]
		int Dimension
		{
			[Token(Token = "0x6000BE2")]
			get;
		}
	}
	[Token(Token = "0x2000198")]
	public interface IPolynomial
	{
		[Token(Token = "0x170000BC")]
		int Degree
		{
			[Token(Token = "0x6000BE3")]
			get;
		}

		[Token(Token = "0x6000BE4")]
		int[] GetExponentsPresent();
	}
	[Token(Token = "0x2000199")]
	public interface IPolynomialExtensionField : IExtensionField, IFiniteField
	{
		[Token(Token = "0x170000BD")]
		IPolynomial MinimalPolynomial
		{
			[Token(Token = "0x6000BE5")]
			get;
		}
	}
	[Token(Token = "0x200019A")]
	internal class PrimeField : IFiniteField
	{
		[Token(Token = "0x40008DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly BigInteger characteristic;

		[Token(Token = "0x170000BE")]
		public virtual BigInteger Characteristic
		{
			[Token(Token = "0x6000BE7")]
			[Address(RVA = "0x1405034", Offset = "0x1405034", VA = "0x1405034", Slot = "6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BF")]
		public virtual int Dimension
		{
			[Token(Token = "0x6000BE8")]
			[Address(RVA = "0x140503C", Offset = "0x140503C", VA = "0x140503C", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000BE6")]
		[Address(RVA = "0x1404A20", Offset = "0x1404A20", VA = "0x1404A20")]
		internal PrimeField(BigInteger characteristic)
		{
		}

		[Token(Token = "0x6000BE9")]
		[Address(RVA = "0x1405044", Offset = "0x1405044", VA = "0x1405044", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BEA")]
		[Address(RVA = "0x140510C", Offset = "0x140510C", VA = "0x140510C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
}
namespace Org.BouncyCastle.Math.EC
{
	[Token(Token = "0x200019B")]
	public class ECAlgorithms
	{
		[Token(Token = "0x6000BEB")]
		[Address(RVA = "0x15571E4", Offset = "0x15571E4", VA = "0x15571E4")]
		public static bool IsF2mCurve(ECCurve c)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BEC")]
		[Address(RVA = "0x1557394", Offset = "0x1557394", VA = "0x1557394")]
		public static bool IsFpCurve(ECCurve c)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BED")]
		[Address(RVA = "0x155746C", Offset = "0x155746C", VA = "0x155746C")]
		public static ECPoint SumOfMultiplies(ECPoint[] ps, BigInteger[] ks)
		{
			return null;
		}

		[Token(Token = "0x6000BEE")]
		[Address(RVA = "0x15576AC", Offset = "0x15576AC", VA = "0x15576AC")]
		public static ECPoint SumOfTwoMultiplies(ECPoint P, BigInteger a, ECPoint Q, BigInteger b)
		{
			return null;
		}

		[Token(Token = "0x6000BEF")]
		[Address(RVA = "0x1558418", Offset = "0x1558418", VA = "0x1558418")]
		public static ECPoint ShamirsTrick(ECPoint P, BigInteger k, ECPoint Q, BigInteger l)
		{
			return null;
		}

		[Token(Token = "0x6000BF0")]
		[Address(RVA = "0x155790C", Offset = "0x155790C", VA = "0x155790C")]
		public static ECPoint ImportPoint(ECCurve c, ECPoint p)
		{
			return null;
		}

		[Token(Token = "0x6000BF1")]
		[Address(RVA = "0x1558948", Offset = "0x1558948", VA = "0x1558948")]
		public static void MontgomeryTrick(ECFieldElement[] zs, int off, int len)
		{
		}

		[Token(Token = "0x6000BF2")]
		[Address(RVA = "0x1558950", Offset = "0x1558950", VA = "0x1558950")]
		public static void MontgomeryTrick(ECFieldElement[] zs, int off, int len, ECFieldElement scale)
		{
		}

		[Token(Token = "0x6000BF3")]
		[Address(RVA = "0x1558C14", Offset = "0x1558C14", VA = "0x1558C14")]
		public static ECPoint ReferenceMultiply(ECPoint p, BigInteger k)
		{
			return null;
		}

		[Token(Token = "0x6000BF4")]
		[Address(RVA = "0x1557E50", Offset = "0x1557E50", VA = "0x1557E50")]
		public static ECPoint ValidatePoint(ECPoint p)
		{
			return null;
		}

		[Token(Token = "0x6000BF5")]
		[Address(RVA = "0x1558478", Offset = "0x1558478", VA = "0x1558478")]
		internal static ECPoint ImplShamirsTrickJsf(ECPoint P, BigInteger k, ECPoint Q, BigInteger l)
		{
			return null;
		}

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0x1558198", Offset = "0x1558198", VA = "0x1558198")]
		internal static ECPoint ImplShamirsTrickWNaf(ECPoint P, BigInteger k, ECPoint Q, BigInteger l)
		{
			return null;
		}

		[Token(Token = "0x6000BF7")]
		[Address(RVA = "0x15590A4", Offset = "0x15590A4", VA = "0x15590A4")]
		internal static ECPoint ImplShamirsTrickWNaf(ECPoint P, BigInteger k, ECPointMap pointMapQ, BigInteger l)
		{
			return null;
		}

		[Token(Token = "0x6000BF8")]
		[Address(RVA = "0x1558DC4", Offset = "0x1558DC4", VA = "0x1558DC4")]
		private static ECPoint ImplShamirsTrickWNaf(ECPoint[] preCompP, ECPoint[] preCompNegP, byte[] wnafP, ECPoint[] preCompQ, ECPoint[] preCompNegQ, byte[] wnafQ)
		{
			return null;
		}

		[Token(Token = "0x6000BF9")]
		[Address(RVA = "0x1557EF0", Offset = "0x1557EF0", VA = "0x1557EF0")]
		internal static ECPoint ImplSumOfMultiplies(ECPoint[] ps, BigInteger[] ks)
		{
			return null;
		}

		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0x15579E0", Offset = "0x15579E0", VA = "0x15579E0")]
		internal static ECPoint ImplSumOfMultipliesGlv(ECPoint[] ps, BigInteger[] ks, GlvEndomorphism glvEndomorphism)
		{
			return null;
		}

		[Token(Token = "0x6000BFB")]
		[Address(RVA = "0x1559650", Offset = "0x1559650", VA = "0x1559650")]
		internal static ECPoint ImplSumOfMultiplies(ECPoint[] ps, ECPointMap pointMap, BigInteger[] ks)
		{
			return null;
		}

		[Token(Token = "0x6000BFC")]
		[Address(RVA = "0x1559310", Offset = "0x1559310", VA = "0x1559310")]
		private static ECPoint ImplSumOfMultiplies(bool[] negs, WNafPreCompInfo[] infos, byte[][] wnafs)
		{
			return null;
		}

		[Token(Token = "0x6000BFD")]
		[Address(RVA = "0x1559A48", Offset = "0x1559A48", VA = "0x1559A48")]
		public ECAlgorithms()
		{
		}
	}
	[Token(Token = "0x200019C")]
	public abstract class ECCurve
	{
		[Token(Token = "0x200066B")]
		public class Config
		{
			[Token(Token = "0x40025A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			protected ECCurve outer;

			[Token(Token = "0x40025AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			protected int coord;

			[Token(Token = "0x40025AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			protected ECEndomorphism endomorphism;

			[Token(Token = "0x40025AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			protected ECMultiplier multiplier;

			[Token(Token = "0x60034D6")]
			[Address(RVA = "0x1559B6C", Offset = "0x1559B6C", VA = "0x1559B6C")]
			internal Config(ECCurve outer, int coord, ECEndomorphism endomorphism, ECMultiplier multiplier)
			{
			}

			[Token(Token = "0x60034D7")]
			[Address(RVA = "0x155B08C", Offset = "0x155B08C", VA = "0x155B08C")]
			public Config SetCoordinateSystem(int coord)
			{
				return null;
			}

			[Token(Token = "0x60034D8")]
			[Address(RVA = "0x155B094", Offset = "0x155B094", VA = "0x155B094")]
			public Config SetEndomorphism(ECEndomorphism endomorphism)
			{
				return null;
			}

			[Token(Token = "0x60034D9")]
			[Address(RVA = "0x155B09C", Offset = "0x155B09C", VA = "0x155B09C")]
			public Config SetMultiplier(ECMultiplier multiplier)
			{
				return null;
			}

			[Token(Token = "0x60034DA")]
			[Address(RVA = "0x155B0A4", Offset = "0x155B0A4", VA = "0x155B0A4")]
			public ECCurve Create()
			{
				return null;
			}
		}

		[Token(Token = "0x40008DE")]
		public const int COORD_AFFINE = 0;

		[Token(Token = "0x40008DF")]
		public const int COORD_HOMOGENEOUS = 1;

		[Token(Token = "0x40008E0")]
		public const int COORD_JACOBIAN = 2;

		[Token(Token = "0x40008E1")]
		public const int COORD_JACOBIAN_CHUDNOVSKY = 3;

		[Token(Token = "0x40008E2")]
		public const int COORD_JACOBIAN_MODIFIED = 4;

		[Token(Token = "0x40008E3")]
		public const int COORD_LAMBDA_AFFINE = 5;

		[Token(Token = "0x40008E4")]
		public const int COORD_LAMBDA_PROJECTIVE = 6;

		[Token(Token = "0x40008E5")]
		public const int COORD_SKEWED = 7;

		[Token(Token = "0x40008E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly IFiniteField m_field;

		[Token(Token = "0x40008E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected ECFieldElement m_a;

		[Token(Token = "0x40008E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected ECFieldElement m_b;

		[Token(Token = "0x40008E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected BigInteger m_order;

		[Token(Token = "0x40008EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected BigInteger m_cofactor;

		[Token(Token = "0x40008EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected int m_coord;

		[Token(Token = "0x40008EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected ECEndomorphism m_endomorphism;

		[Token(Token = "0x40008ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected ECMultiplier m_multiplier;

		[Token(Token = "0x170000C0")]
		public abstract int FieldSize
		{
			[Token(Token = "0x6000C00")]
			get;
		}

		[Token(Token = "0x170000C1")]
		public abstract ECPoint Infinity
		{
			[Token(Token = "0x6000C11")]
			get;
		}

		[Token(Token = "0x170000C2")]
		public virtual IFiniteField Field
		{
			[Token(Token = "0x6000C12")]
			[Address(RVA = "0x155A5B4", Offset = "0x155A5B4", VA = "0x155A5B4", Slot = "22")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C3")]
		public virtual ECFieldElement A
		{
			[Token(Token = "0x6000C13")]
			[Address(RVA = "0x155A5BC", Offset = "0x155A5BC", VA = "0x155A5BC", Slot = "23")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C4")]
		public virtual ECFieldElement B
		{
			[Token(Token = "0x6000C14")]
			[Address(RVA = "0x155A5C4", Offset = "0x155A5C4", VA = "0x155A5C4", Slot = "24")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C5")]
		public virtual BigInteger Order
		{
			[Token(Token = "0x6000C15")]
			[Address(RVA = "0x155A5CC", Offset = "0x155A5CC", VA = "0x155A5CC", Slot = "25")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C6")]
		public virtual BigInteger Cofactor
		{
			[Token(Token = "0x6000C16")]
			[Address(RVA = "0x155A5D4", Offset = "0x155A5D4", VA = "0x155A5D4", Slot = "26")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C7")]
		public virtual int CoordinateSystem
		{
			[Token(Token = "0x6000C17")]
			[Address(RVA = "0x155A5DC", Offset = "0x155A5DC", VA = "0x155A5DC", Slot = "27")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0x1559A50", Offset = "0x1559A50", VA = "0x1559A50")]
		public static int[] GetAllCoordinateSystems()
		{
			return null;
		}

		[Token(Token = "0x6000BFF")]
		[Address(RVA = "0x1559ABC", Offset = "0x1559ABC", VA = "0x1559ABC")]
		protected ECCurve(IFiniteField field)
		{
		}

		[Token(Token = "0x6000C01")]
		public abstract ECFieldElement FromBigInteger(BigInteger x);

		[Token(Token = "0x6000C02")]
		[Address(RVA = "0x1559AE8", Offset = "0x1559AE8", VA = "0x1559AE8", Slot = "6")]
		public virtual Config Configure()
		{
			return null;
		}

		[Token(Token = "0x6000C03")]
		[Address(RVA = "0x1559BBC", Offset = "0x1559BBC", VA = "0x1559BBC", Slot = "7")]
		public virtual ECPoint ValidatePoint(BigInteger x, BigInteger y)
		{
			return null;
		}

		[Token(Token = "0x6000C04")]
		[Address(RVA = "0x1559C78", Offset = "0x1559C78", VA = "0x1559C78", Slot = "8")]
		public virtual ECPoint ValidatePoint(BigInteger x, BigInteger y, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x6000C05")]
		[Address(RVA = "0x1559D44", Offset = "0x1559D44", VA = "0x1559D44", Slot = "9")]
		public virtual ECPoint CreatePoint(BigInteger x, BigInteger y)
		{
			return null;
		}

		[Token(Token = "0x6000C06")]
		[Address(RVA = "0x1559D54", Offset = "0x1559D54", VA = "0x1559D54", Slot = "10")]
		public virtual ECPoint CreatePoint(BigInteger x, BigInteger y, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x6000C07")]
		protected abstract ECCurve CloneCurve();

		[Token(Token = "0x6000C08")]
		protected internal abstract ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression);

		[Token(Token = "0x6000C09")]
		protected internal abstract ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression);

		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0x1559DBC", Offset = "0x1559DBC", VA = "0x1559DBC", Slot = "14")]
		protected virtual ECMultiplier CreateDefaultMultiplier()
		{
			return null;
		}

		[Token(Token = "0x6000C0B")]
		[Address(RVA = "0x1559E68", Offset = "0x1559E68", VA = "0x1559E68", Slot = "15")]
		public virtual bool SupportsCoordinateSystem(int coord)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C0C")]
		[Address(RVA = "0x1559E74", Offset = "0x1559E74", VA = "0x1559E74", Slot = "16")]
		public virtual PreCompInfo GetPreCompInfo(ECPoint point, string name)
		{
			return null;
		}

		[Token(Token = "0x6000C0D")]
		[Address(RVA = "0x1559FFC", Offset = "0x1559FFC", VA = "0x1559FFC", Slot = "17")]
		public virtual void SetPreCompInfo(ECPoint point, string name, PreCompInfo preCompInfo)
		{
		}

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0x155A198", Offset = "0x155A198", VA = "0x155A198", Slot = "18")]
		public virtual ECPoint ImportPoint(ECPoint p)
		{
			return null;
		}

		[Token(Token = "0x6000C0F")]
		[Address(RVA = "0x155A29C", Offset = "0x155A29C", VA = "0x155A29C", Slot = "19")]
		public virtual void NormalizeAll(ECPoint[] points)
		{
		}

		[Token(Token = "0x6000C10")]
		[Address(RVA = "0x155A2C8", Offset = "0x155A2C8", VA = "0x155A2C8", Slot = "20")]
		public virtual void NormalizeAll(ECPoint[] points, int off, int len, ECFieldElement iso)
		{
		}

		[Token(Token = "0x6000C18")]
		[Address(RVA = "0x155A5E4", Offset = "0x155A5E4", VA = "0x155A5E4", Slot = "28")]
		protected virtual void CheckPoint(ECPoint point)
		{
		}

		[Token(Token = "0x6000C19")]
		[Address(RVA = "0x155A694", Offset = "0x155A694", VA = "0x155A694", Slot = "29")]
		protected virtual void CheckPoints(ECPoint[] points)
		{
		}

		[Token(Token = "0x6000C1A")]
		[Address(RVA = "0x155A6BC", Offset = "0x155A6BC", VA = "0x155A6BC", Slot = "30")]
		protected virtual void CheckPoints(ECPoint[] points, int off, int len)
		{
		}

		[Token(Token = "0x6000C1B")]
		[Address(RVA = "0x155A840", Offset = "0x155A840", VA = "0x155A840", Slot = "31")]
		public virtual bool Equals(ECCurve other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C1C")]
		[Address(RVA = "0x155A9A0", Offset = "0x155A9A0", VA = "0x155A9A0", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C1D")]
		[Address(RVA = "0x155AA3C", Offset = "0x155AA3C", VA = "0x155AA3C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C1E")]
		protected abstract ECPoint DecompressPoint(int yTilde, BigInteger X1);

		[Token(Token = "0x6000C1F")]
		[Address(RVA = "0x155AB14", Offset = "0x155AB14", VA = "0x155AB14", Slot = "33")]
		public virtual ECEndomorphism GetEndomorphism()
		{
			return null;
		}

		[Token(Token = "0x6000C20")]
		[Address(RVA = "0x155AB1C", Offset = "0x155AB1C", VA = "0x155AB1C", Slot = "34")]
		public virtual ECMultiplier GetMultiplier()
		{
			return null;
		}

		[Token(Token = "0x6000C21")]
		[Address(RVA = "0x155ABCC", Offset = "0x155ABCC", VA = "0x155ABCC", Slot = "35")]
		public virtual ECPoint DecodePoint(byte[] encoded)
		{
			return null;
		}
	}
	[Token(Token = "0x200019D")]
	public abstract class AbstractFpCurve : ECCurve
	{
		[Token(Token = "0x6000C22")]
		[Address(RVA = "0x14A3648", Offset = "0x14A3648", VA = "0x14A3648")]
		protected AbstractFpCurve(BigInteger q)
		{
		}

		[Token(Token = "0x6000C23")]
		[Address(RVA = "0x14A36CC", Offset = "0x14A36CC", VA = "0x14A36CC", Slot = "32")]
		protected override ECPoint DecompressPoint(int yTilde, BigInteger X1)
		{
			return null;
		}
	}
	[Token(Token = "0x200019E")]
	public class FpCurve : AbstractFpCurve
	{
		[Token(Token = "0x40008EE")]
		private const int FP_DEFAULT_COORDS = 4;

		[Token(Token = "0x40008EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected readonly BigInteger m_q;

		[Token(Token = "0x40008F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected readonly BigInteger m_r;

		[Token(Token = "0x40008F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected readonly FpPoint m_infinity;

		[Token(Token = "0x170000C8")]
		public virtual BigInteger Q
		{
			[Token(Token = "0x6000C2A")]
			[Address(RVA = "0x13F643C", Offset = "0x13F643C", VA = "0x13F643C", Slot = "36")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C9")]
		public override ECPoint Infinity
		{
			[Token(Token = "0x6000C2B")]
			[Address(RVA = "0x13F6444", Offset = "0x13F6444", VA = "0x13F6444", Slot = "21")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000CA")]
		public override int FieldSize
		{
			[Token(Token = "0x6000C2C")]
			[Address(RVA = "0x13F644C", Offset = "0x13F644C", VA = "0x13F644C", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000C24")]
		[Address(RVA = "0x13F6060", Offset = "0x13F6060", VA = "0x13F6060")]
		public FpCurve(BigInteger q, BigInteger a, BigInteger b)
		{
		}

		[Token(Token = "0x6000C25")]
		[Address(RVA = "0x13F606C", Offset = "0x13F606C", VA = "0x13F606C")]
		public FpCurve(BigInteger q, BigInteger a, BigInteger b, BigInteger order, BigInteger cofactor)
		{
		}

		[Token(Token = "0x6000C26")]
		[Address(RVA = "0x13F62BC", Offset = "0x13F62BC", VA = "0x13F62BC")]
		protected FpCurve(BigInteger q, BigInteger r, ECFieldElement a, ECFieldElement b)
		{
		}

		[Token(Token = "0x6000C27")]
		[Address(RVA = "0x13F62C8", Offset = "0x13F62C8", VA = "0x13F62C8")]
		protected FpCurve(BigInteger q, BigInteger r, ECFieldElement a, ECFieldElement b, BigInteger order, BigInteger cofactor)
		{
		}

		[Token(Token = "0x6000C28")]
		[Address(RVA = "0x13F6388", Offset = "0x13F6388", VA = "0x13F6388", Slot = "11")]
		protected override ECCurve CloneCurve()
		{
			return null;
		}

		[Token(Token = "0x6000C29")]
		[Address(RVA = "0x13F6420", Offset = "0x13F6420", VA = "0x13F6420", Slot = "15")]
		public override bool SupportsCoordinateSystem(int coord)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C2D")]
		[Address(RVA = "0x13F6468", Offset = "0x13F6468", VA = "0x13F6468", Slot = "5")]
		public override ECFieldElement FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000C2E")]
		[Address(RVA = "0x13F65B8", Offset = "0x13F65B8", VA = "0x13F65B8", Slot = "12")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x6000C2F")]
		[Address(RVA = "0x13F6710", Offset = "0x13F6710", VA = "0x13F6710", Slot = "13")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x6000C30")]
		[Address(RVA = "0x13F67B0", Offset = "0x13F67B0", VA = "0x13F67B0", Slot = "18")]
		public override ECPoint ImportPoint(ECPoint p)
		{
			return null;
		}
	}
	[Token(Token = "0x200019F")]
	public abstract class AbstractF2mCurve : ECCurve
	{
		[Token(Token = "0x40008F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BigInteger[] si;

		[Token(Token = "0x170000CB")]
		public virtual bool IsKoblitz
		{
			[Token(Token = "0x6000C36")]
			[Address(RVA = "0x14A2860", Offset = "0x14A2860", VA = "0x14A2860", Slot = "37")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000C31")]
		[Address(RVA = "0x14A2344", Offset = "0x14A2344", VA = "0x14A2344")]
		public static BigInteger Inverse(int m, int[] ks, BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000C32")]
		[Address(RVA = "0x14A23D8", Offset = "0x14A23D8", VA = "0x14A23D8")]
		private static IFiniteField BuildField(int m, int k1, int k2, int k3)
		{
			return null;
		}

		[Token(Token = "0x6000C33")]
		[Address(RVA = "0x14A25A4", Offset = "0x14A25A4", VA = "0x14A25A4")]
		protected AbstractF2mCurve(int m, int k1, int k2, int k3)
		{
		}

		[Token(Token = "0x6000C34")]
		[Address(RVA = "0x14A25E0", Offset = "0x14A25E0", VA = "0x14A25E0", Slot = "10")]
		public override ECPoint CreatePoint(BigInteger x, BigInteger y, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x6000C35")]
		[Address(RVA = "0x14A276C", Offset = "0x14A276C", VA = "0x14A276C", Slot = "36")]
		internal virtual BigInteger[] GetSi()
		{
			return null;
		}
	}
	[Token(Token = "0x20001A0")]
	public class F2mCurve : AbstractF2mCurve
	{
		[Token(Token = "0x40008F3")]
		private const int F2M_DEFAULT_COORDS = 6;

		[Token(Token = "0x40008F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly int m;

		[Token(Token = "0x40008F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private readonly int k1;

		[Token(Token = "0x40008F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly int k2;

		[Token(Token = "0x40008F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private readonly int k3;

		[Token(Token = "0x40008F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected readonly F2mPoint m_infinity;

		[Token(Token = "0x170000CC")]
		public override int FieldSize
		{
			[Token(Token = "0x6000C3F")]
			[Address(RVA = "0x155D578", Offset = "0x155D578", VA = "0x155D578", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000CD")]
		public override ECPoint Infinity
		{
			[Token(Token = "0x6000C43")]
			[Address(RVA = "0x155D8C4", Offset = "0x155D8C4", VA = "0x155D8C4", Slot = "21")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000CE")]
		public int M
		{
			[Token(Token = "0x6000C46")]
			[Address(RVA = "0x155DD08", Offset = "0x155DD08", VA = "0x155DD08")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000CF")]
		public int K1
		{
			[Token(Token = "0x6000C48")]
			[Address(RVA = "0x155DD30", Offset = "0x155DD30", VA = "0x155DD30")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000D0")]
		public int K2
		{
			[Token(Token = "0x6000C49")]
			[Address(RVA = "0x155DD38", Offset = "0x155DD38", VA = "0x155DD38")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000D1")]
		public int K3
		{
			[Token(Token = "0x6000C4A")]
			[Address(RVA = "0x155DD40", Offset = "0x155DD40", VA = "0x155DD40")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000D2")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x8365D0", Offset = "0x8365D0")]
		public BigInteger N
		{
			[Token(Token = "0x6000C4B")]
			[Address(RVA = "0x155DD48", Offset = "0x155DD48", VA = "0x155DD48")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D3")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x836608", Offset = "0x836608")]
		public BigInteger H
		{
			[Token(Token = "0x6000C4C")]
			[Address(RVA = "0x155DD50", Offset = "0x155DD50", VA = "0x155DD50")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C37")]
		[Address(RVA = "0x155D0F8", Offset = "0x155D0F8", VA = "0x155D0F8")]
		public F2mCurve(int m, int k, BigInteger a, BigInteger b)
		{
		}

		[Token(Token = "0x6000C38")]
		[Address(RVA = "0x155D2E4", Offset = "0x155D2E4", VA = "0x155D2E4")]
		public F2mCurve(int m, int k, BigInteger a, BigInteger b, BigInteger order, BigInteger cofactor)
		{
		}

		[Token(Token = "0x6000C39")]
		[Address(RVA = "0x155D31C", Offset = "0x155D31C", VA = "0x155D31C")]
		public F2mCurve(int m, int k1, int k2, int k3, BigInteger a, BigInteger b)
		{
		}

		[Token(Token = "0x6000C3A")]
		[Address(RVA = "0x155D12C", Offset = "0x155D12C", VA = "0x155D12C")]
		public F2mCurve(int m, int k1, int k2, int k3, BigInteger a, BigInteger b, BigInteger order, BigInteger cofactor)
		{
		}

		[Token(Token = "0x6000C3B")]
		[Address(RVA = "0x155D340", Offset = "0x155D340", VA = "0x155D340")]
		protected F2mCurve(int m, int k1, int k2, int k3, ECFieldElement a, ECFieldElement b, BigInteger order, BigInteger cofactor)
		{
		}

		[Token(Token = "0x6000C3C")]
		[Address(RVA = "0x155D420", Offset = "0x155D420", VA = "0x155D420", Slot = "11")]
		protected override ECCurve CloneCurve()
		{
			return null;
		}

		[Token(Token = "0x6000C3D")]
		[Address(RVA = "0x155D4D4", Offset = "0x155D4D4", VA = "0x155D4D4", Slot = "15")]
		public override bool SupportsCoordinateSystem(int coord)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C3E")]
		[Address(RVA = "0x155D4F0", Offset = "0x155D4F0", VA = "0x155D4F0", Slot = "14")]
		protected override ECMultiplier CreateDefaultMultiplier()
		{
			return null;
		}

		[Token(Token = "0x6000C40")]
		[Address(RVA = "0x155D580", Offset = "0x155D580", VA = "0x155D580", Slot = "5")]
		public override ECFieldElement FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000C41")]
		[Address(RVA = "0x155D7A4", Offset = "0x155D7A4", VA = "0x155D7A4", Slot = "12")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x6000C42")]
		[Address(RVA = "0x155D830", Offset = "0x155D830", VA = "0x155D830", Slot = "13")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x6000C44")]
		[Address(RVA = "0x155D8CC", Offset = "0x155D8CC", VA = "0x155D8CC", Slot = "32")]
		protected override ECPoint DecompressPoint(int yTilde, BigInteger X1)
		{
			return null;
		}

		[Token(Token = "0x6000C45")]
		[Address(RVA = "0x155DAE8", Offset = "0x155DAE8", VA = "0x155DAE8")]
		private ECFieldElement SolveQuadradicEquation(ECFieldElement beta)
		{
			return null;
		}

		[Token(Token = "0x6000C47")]
		[Address(RVA = "0x155DD10", Offset = "0x155DD10", VA = "0x155DD10")]
		public bool IsTrinomial()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001A1")]
	public abstract class ECFieldElement
	{
		[Token(Token = "0x170000D4")]
		public abstract string FieldName
		{
			[Token(Token = "0x6000C4E")]
			get;
		}

		[Token(Token = "0x170000D5")]
		public abstract int FieldSize
		{
			[Token(Token = "0x6000C4F")]
			get;
		}

		[Token(Token = "0x170000D6")]
		public virtual int BitLength
		{
			[Token(Token = "0x6000C59")]
			[Address(RVA = "0x155B1A0", Offset = "0x155B1A0", VA = "0x155B1A0", Slot = "16")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000D7")]
		public virtual bool IsOne
		{
			[Token(Token = "0x6000C5A")]
			[Address(RVA = "0x155B1C8", Offset = "0x155B1C8", VA = "0x155B1C8", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000D8")]
		public virtual bool IsZero
		{
			[Token(Token = "0x6000C5B")]
			[Address(RVA = "0x155B1F0", Offset = "0x155B1F0", VA = "0x155B1F0", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000C4D")]
		public abstract BigInteger ToBigInteger();

		[Token(Token = "0x6000C50")]
		public abstract ECFieldElement Add(ECFieldElement b);

		[Token(Token = "0x6000C51")]
		public abstract ECFieldElement AddOne();

		[Token(Token = "0x6000C52")]
		public abstract ECFieldElement Subtract(ECFieldElement b);

		[Token(Token = "0x6000C53")]
		public abstract ECFieldElement Multiply(ECFieldElement b);

		[Token(Token = "0x6000C54")]
		public abstract ECFieldElement Divide(ECFieldElement b);

		[Token(Token = "0x6000C55")]
		public abstract ECFieldElement Negate();

		[Token(Token = "0x6000C56")]
		public abstract ECFieldElement Square();

		[Token(Token = "0x6000C57")]
		public abstract ECFieldElement Invert();

		[Token(Token = "0x6000C58")]
		public abstract ECFieldElement Sqrt();

		[Token(Token = "0x6000C5C")]
		[Address(RVA = "0x155B220", Offset = "0x155B220", VA = "0x155B220", Slot = "19")]
		public virtual ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x6000C5D")]
		[Address(RVA = "0x155B288", Offset = "0x155B288", VA = "0x155B288", Slot = "20")]
		public virtual ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x6000C5E")]
		[Address(RVA = "0x155B2F0", Offset = "0x155B2F0", VA = "0x155B2F0", Slot = "21")]
		public virtual ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x6000C5F")]
		[Address(RVA = "0x155B360", Offset = "0x155B360", VA = "0x155B360", Slot = "22")]
		public virtual ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x6000C60")]
		[Address(RVA = "0x155B3D0", Offset = "0x155B3D0", VA = "0x155B3D0", Slot = "23")]
		public virtual ECFieldElement SquarePow(int pow)
		{
			return null;
		}

		[Token(Token = "0x6000C61")]
		[Address(RVA = "0x155B41C", Offset = "0x155B41C", VA = "0x155B41C", Slot = "24")]
		public virtual bool TestBitZero()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C62")]
		[Address(RVA = "0x155B448", Offset = "0x155B448", VA = "0x155B448", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C63")]
		[Address(RVA = "0x155B4E4", Offset = "0x155B4E4", VA = "0x155B4E4", Slot = "25")]
		public virtual bool Equals(ECFieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C64")]
		[Address(RVA = "0x155B55C", Offset = "0x155B55C", VA = "0x155B55C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C65")]
		[Address(RVA = "0x155B588", Offset = "0x155B588", VA = "0x155B588", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C66")]
		[Address(RVA = "0x155B5B4", Offset = "0x155B5B4", VA = "0x155B5B4", Slot = "26")]
		public virtual byte[] GetEncoded()
		{
			return null;
		}

		[Token(Token = "0x6000C67")]
		[Address(RVA = "0x154E340", Offset = "0x154E340", VA = "0x154E340")]
		protected ECFieldElement()
		{
		}
	}
	[Token(Token = "0x20001A2")]
	public class FpFieldElement : ECFieldElement
	{
		[Token(Token = "0x40008F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly BigInteger q;

		[Token(Token = "0x40008FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly BigInteger r;

		[Token(Token = "0x40008FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly BigInteger x;

		[Token(Token = "0x170000D9")]
		public override string FieldName
		{
			[Token(Token = "0x6000C6C")]
			[Address(RVA = "0x13F6A1C", Offset = "0x13F6A1C", VA = "0x13F6A1C", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DA")]
		public override int FieldSize
		{
			[Token(Token = "0x6000C6D")]
			[Address(RVA = "0x13F6A64", Offset = "0x13F6A64", VA = "0x13F6A64", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000DB")]
		public BigInteger Q
		{
			[Token(Token = "0x6000C6E")]
			[Address(RVA = "0x13F6A80", Offset = "0x13F6A80", VA = "0x13F6A80")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C68")]
		[Address(RVA = "0x13F6160", Offset = "0x13F6160", VA = "0x13F6160")]
		internal static BigInteger CalculateResidue(BigInteger p)
		{
			return null;
		}

		[Token(Token = "0x6000C69")]
		[Address(RVA = "0x13F69D0", Offset = "0x13F69D0", VA = "0x13F69D0")]
		public FpFieldElement(BigInteger q, BigInteger x)
		{
		}

		[Token(Token = "0x6000C6A")]
		[Address(RVA = "0x13F64E0", Offset = "0x13F64E0", VA = "0x13F64E0")]
		internal FpFieldElement(BigInteger q, BigInteger r, BigInteger x)
		{
		}

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0x13F6A14", Offset = "0x13F6A14", VA = "0x13F6A14", Slot = "4")]
		public override BigInteger ToBigInteger()
		{
			return null;
		}

		[Token(Token = "0x6000C6F")]
		[Address(RVA = "0x13F6A88", Offset = "0x13F6A88", VA = "0x13F6A88", Slot = "7")]
		public override ECFieldElement Add(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000C70")]
		[Address(RVA = "0x13F6B48", Offset = "0x13F6B48", VA = "0x13F6B48", Slot = "8")]
		public override ECFieldElement AddOne()
		{
			return null;
		}

		[Token(Token = "0x6000C71")]
		[Address(RVA = "0x13F6C3C", Offset = "0x13F6C3C", VA = "0x13F6C3C", Slot = "9")]
		public override ECFieldElement Subtract(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000C72")]
		[Address(RVA = "0x13F6CFC", Offset = "0x13F6CFC", VA = "0x13F6CFC", Slot = "10")]
		public override ECFieldElement Multiply(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000C73")]
		[Address(RVA = "0x13F6DBC", Offset = "0x13F6DBC", VA = "0x13F6DBC", Slot = "19")]
		public override ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x6000C74")]
		[Address(RVA = "0x13F6EF4", Offset = "0x13F6EF4", VA = "0x13F6EF4", Slot = "20")]
		public override ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x6000C75")]
		[Address(RVA = "0x13F70A8", Offset = "0x13F70A8", VA = "0x13F70A8", Slot = "11")]
		public override ECFieldElement Divide(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000C76")]
		[Address(RVA = "0x13F7180", Offset = "0x13F7180", VA = "0x13F7180", Slot = "12")]
		public override ECFieldElement Negate()
		{
			return null;
		}

		[Token(Token = "0x6000C77")]
		[Address(RVA = "0x13F7224", Offset = "0x13F7224", VA = "0x13F7224", Slot = "13")]
		public override ECFieldElement Square()
		{
			return null;
		}

		[Token(Token = "0x6000C78")]
		[Address(RVA = "0x13F72BC", Offset = "0x13F72BC", VA = "0x13F72BC", Slot = "21")]
		public override ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x6000C79")]
		[Address(RVA = "0x13F73D8", Offset = "0x13F73D8", VA = "0x13F73D8", Slot = "22")]
		public override ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0x13F7568", Offset = "0x13F7568", VA = "0x13F7568", Slot = "14")]
		public override ECFieldElement Invert()
		{
			return null;
		}

		[Token(Token = "0x6000C7B")]
		[Address(RVA = "0x13F75FC", Offset = "0x13F75FC", VA = "0x13F75FC", Slot = "15")]
		public override ECFieldElement Sqrt()
		{
			return null;
		}

		[Token(Token = "0x6000C7C")]
		[Address(RVA = "0x13F7C3C", Offset = "0x13F7C3C", VA = "0x13F7C3C")]
		private ECFieldElement CheckSqrt(ECFieldElement z)
		{
			return null;
		}

		[Token(Token = "0x6000C7D")]
		[Address(RVA = "0x13F7C98", Offset = "0x13F7C98", VA = "0x13F7C98")]
		private BigInteger[] LucasSequence(BigInteger P, BigInteger Q, BigInteger k)
		{
			return null;
		}

		[Token(Token = "0x6000C7E")]
		[Address(RVA = "0x13F81E8", Offset = "0x13F81E8", VA = "0x13F81E8", Slot = "27")]
		protected virtual BigInteger ModAdd(BigInteger x1, BigInteger x2)
		{
			return null;
		}

		[Token(Token = "0x6000C7F")]
		[Address(RVA = "0x13F8250", Offset = "0x13F8250", VA = "0x13F8250", Slot = "28")]
		protected virtual BigInteger ModDouble(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000C80")]
		[Address(RVA = "0x13F82BC", Offset = "0x13F82BC", VA = "0x13F82BC", Slot = "29")]
		protected virtual BigInteger ModHalf(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000C81")]
		[Address(RVA = "0x13F8320", Offset = "0x13F8320", VA = "0x13F8320", Slot = "30")]
		protected virtual BigInteger ModHalfAbs(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000C82")]
		[Address(RVA = "0x13F8384", Offset = "0x13F8384", VA = "0x13F8384", Slot = "31")]
		protected virtual BigInteger ModInverse(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000C83")]
		[Address(RVA = "0x13F897C", Offset = "0x13F897C", VA = "0x13F897C", Slot = "32")]
		protected virtual BigInteger ModMult(BigInteger x1, BigInteger x2)
		{
			return null;
		}

		[Token(Token = "0x6000C84")]
		[Address(RVA = "0x13F89C4", Offset = "0x13F89C4", VA = "0x13F89C4", Slot = "33")]
		protected virtual BigInteger ModReduce(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000C85")]
		[Address(RVA = "0x13F8CF4", Offset = "0x13F8CF4", VA = "0x13F8CF4", Slot = "34")]
		protected virtual BigInteger ModSubtract(BigInteger x1, BigInteger x2)
		{
			return null;
		}

		[Token(Token = "0x6000C86")]
		[Address(RVA = "0x13F8D48", Offset = "0x13F8D48", VA = "0x13F8D48", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C87")]
		[Address(RVA = "0x13F8E04", Offset = "0x13F8E04", VA = "0x13F8E04", Slot = "35")]
		public virtual bool Equals(FpFieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C88")]
		[Address(RVA = "0x13F8E64", Offset = "0x13F8E64", VA = "0x13F8E64", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001A3")]
	public class F2mFieldElement : ECFieldElement
	{
		[Token(Token = "0x40008FC")]
		public const int Gnb = 1;

		[Token(Token = "0x40008FD")]
		public const int Tpb = 2;

		[Token(Token = "0x40008FE")]
		public const int Ppb = 3;

		[Token(Token = "0x40008FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int representation;

		[Token(Token = "0x4000900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int m;

		[Token(Token = "0x4000901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int[] ks;

		[Token(Token = "0x4000902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LongArray x;

		[Token(Token = "0x170000DC")]
		public override int BitLength
		{
			[Token(Token = "0x6000C8C")]
			[Address(RVA = "0x155DDC4", Offset = "0x155DDC4", VA = "0x155DDC4", Slot = "16")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000DD")]
		public override bool IsOne
		{
			[Token(Token = "0x6000C8D")]
			[Address(RVA = "0x155DDE0", Offset = "0x155DDE0", VA = "0x155DDE0", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000DE")]
		public override bool IsZero
		{
			[Token(Token = "0x6000C8E")]
			[Address(RVA = "0x155DDFC", Offset = "0x155DDFC", VA = "0x155DDFC", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000DF")]
		public override string FieldName
		{
			[Token(Token = "0x6000C91")]
			[Address(RVA = "0x155DE50", Offset = "0x155DE50", VA = "0x155DE50", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E0")]
		public override int FieldSize
		{
			[Token(Token = "0x6000C92")]
			[Address(RVA = "0x155DE98", Offset = "0x155DE98", VA = "0x155DE98", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000E1")]
		public int Representation
		{
			[Token(Token = "0x6000CA2")]
			[Address(RVA = "0x155E858", Offset = "0x155E858", VA = "0x155E858")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000E2")]
		public int M
		{
			[Token(Token = "0x6000CA3")]
			[Address(RVA = "0x155E860", Offset = "0x155E860", VA = "0x155E860")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000E3")]
		public int K1
		{
			[Token(Token = "0x6000CA4")]
			[Address(RVA = "0x155E868", Offset = "0x155E868", VA = "0x155E868")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000E4")]
		public int K2
		{
			[Token(Token = "0x6000CA5")]
			[Address(RVA = "0x155E89C", Offset = "0x155E89C", VA = "0x155E89C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000E5")]
		public int K3
		{
			[Token(Token = "0x6000CA6")]
			[Address(RVA = "0x155E8CC", Offset = "0x155E8CC", VA = "0x155E8CC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000C89")]
		[Address(RVA = "0x155D60C", Offset = "0x155D60C", VA = "0x155D60C")]
		public F2mFieldElement(int m, int k1, int k2, int k3, BigInteger x)
		{
		}

		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0x155DD58", Offset = "0x155DD58", VA = "0x155DD58")]
		public F2mFieldElement(int m, int k, BigInteger x)
		{
		}

		[Token(Token = "0x6000C8B")]
		[Address(RVA = "0x155DD68", Offset = "0x155DD68", VA = "0x155DD68")]
		private F2mFieldElement(int m, int[] ks, LongArray x)
		{
		}

		[Token(Token = "0x6000C8F")]
		[Address(RVA = "0x155DE18", Offset = "0x155DE18", VA = "0x155DE18", Slot = "24")]
		public override bool TestBitZero()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0x155DE34", Offset = "0x155DE34", VA = "0x155DE34", Slot = "4")]
		public override BigInteger ToBigInteger()
		{
			return null;
		}

		[Token(Token = "0x6000C93")]
		[Address(RVA = "0x155DEA0", Offset = "0x155DEA0", VA = "0x155DEA0")]
		public static void CheckFieldElements(ECFieldElement a, ECFieldElement b)
		{
		}

		[Token(Token = "0x6000C94")]
		[Address(RVA = "0x155DFF0", Offset = "0x155DFF0", VA = "0x155DFF0", Slot = "7")]
		public override ECFieldElement Add(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0x155E0D4", Offset = "0x155E0D4", VA = "0x155E0D4", Slot = "8")]
		public override ECFieldElement AddOne()
		{
			return null;
		}

		[Token(Token = "0x6000C96")]
		[Address(RVA = "0x155E168", Offset = "0x155E168", VA = "0x155E168", Slot = "9")]
		public override ECFieldElement Subtract(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000C97")]
		[Address(RVA = "0x155E174", Offset = "0x155E174", VA = "0x155E174", Slot = "10")]
		public override ECFieldElement Multiply(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000C98")]
		[Address(RVA = "0x155E250", Offset = "0x155E250", VA = "0x155E250", Slot = "19")]
		public override ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x6000C99")]
		[Address(RVA = "0x155E260", Offset = "0x155E260", VA = "0x155E260", Slot = "20")]
		public override ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x6000C9A")]
		[Address(RVA = "0x155E428", Offset = "0x155E428", VA = "0x155E428", Slot = "11")]
		public override ECFieldElement Divide(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000C9B")]
		[Address(RVA = "0x155E474", Offset = "0x155E474", VA = "0x155E474", Slot = "12")]
		public override ECFieldElement Negate()
		{
			return null;
		}

		[Token(Token = "0x6000C9C")]
		[Address(RVA = "0x155E478", Offset = "0x155E478", VA = "0x155E478", Slot = "13")]
		public override ECFieldElement Square()
		{
			return null;
		}

		[Token(Token = "0x6000C9D")]
		[Address(RVA = "0x155E514", Offset = "0x155E514", VA = "0x155E514", Slot = "21")]
		public override ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x6000C9E")]
		[Address(RVA = "0x155E524", Offset = "0x155E524", VA = "0x155E524", Slot = "22")]
		public override ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x6000C9F")]
		[Address(RVA = "0x155E6A0", Offset = "0x155E6A0", VA = "0x155E6A0", Slot = "23")]
		public override ECFieldElement SquarePow(int pow)
		{
			return null;
		}

		[Token(Token = "0x6000CA0")]
		[Address(RVA = "0x155E74C", Offset = "0x155E74C", VA = "0x155E74C", Slot = "14")]
		public override ECFieldElement Invert()
		{
			return null;
		}

		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0x155E7E8", Offset = "0x155E7E8", VA = "0x155E7E8", Slot = "15")]
		public override ECFieldElement Sqrt()
		{
			return null;
		}

		[Token(Token = "0x6000CA7")]
		[Address(RVA = "0x155E8FC", Offset = "0x155E8FC", VA = "0x155E8FC", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA8")]
		[Address(RVA = "0x155E9B8", Offset = "0x155E9B8", VA = "0x155E9B8", Slot = "27")]
		public virtual bool Equals(F2mFieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA9")]
		[Address(RVA = "0x155EA38", Offset = "0x155EA38", VA = "0x155EA38", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001A4")]
	public abstract class ECPoint
	{
		[Token(Token = "0x4000903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static ECFieldElement[] EMPTY_ZS;

		[Token(Token = "0x4000904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected internal readonly ECCurve m_curve;

		[Token(Token = "0x4000905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected internal readonly ECFieldElement m_x;

		[Token(Token = "0x4000906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected internal readonly ECFieldElement m_y;

		[Token(Token = "0x4000907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected internal readonly ECFieldElement[] m_zs;

		[Token(Token = "0x4000908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected internal readonly bool m_withCompression;

		[Token(Token = "0x4000909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected internal IDictionary m_preCompTable;

		[Token(Token = "0x170000E6")]
		public virtual ECCurve Curve
		{
			[Token(Token = "0x6000CB0")]
			[Address(RVA = "0x155B9F4", Offset = "0x155B9F4", VA = "0x155B9F4", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E7")]
		protected virtual int CurveCoordinateSystem
		{
			[Token(Token = "0x6000CB2")]
			[Address(RVA = "0x155B9FC", Offset = "0x155B9FC", VA = "0x155B9FC", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000E8")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x836640", Offset = "0x836640")]
		public virtual ECFieldElement X
		{
			[Token(Token = "0x6000CB3")]
			[Address(RVA = "0x155BA18", Offset = "0x155BA18", VA = "0x155BA18", Slot = "8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E9")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x836678", Offset = "0x836678")]
		public virtual ECFieldElement Y
		{
			[Token(Token = "0x6000CB4")]
			[Address(RVA = "0x155BA48", Offset = "0x155BA48", VA = "0x155BA48", Slot = "9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EA")]
		public virtual ECFieldElement AffineXCoord
		{
			[Token(Token = "0x6000CB5")]
			[Address(RVA = "0x155BA7C", Offset = "0x155BA7C", VA = "0x155BA7C", Slot = "10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EB")]
		public virtual ECFieldElement AffineYCoord
		{
			[Token(Token = "0x6000CB6")]
			[Address(RVA = "0x155BAB4", Offset = "0x155BAB4", VA = "0x155BAB4", Slot = "11")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EC")]
		public virtual ECFieldElement XCoord
		{
			[Token(Token = "0x6000CB7")]
			[Address(RVA = "0x155BAF0", Offset = "0x155BAF0", VA = "0x155BAF0", Slot = "12")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000ED")]
		public virtual ECFieldElement YCoord
		{
			[Token(Token = "0x6000CB8")]
			[Address(RVA = "0x155BAF8", Offset = "0x155BAF8", VA = "0x155BAF8", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EE")]
		protected internal ECFieldElement RawXCoord
		{
			[Token(Token = "0x6000CBB")]
			[Address(RVA = "0x155BBE4", Offset = "0x155BBE4", VA = "0x155BBE4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EF")]
		protected internal ECFieldElement RawYCoord
		{
			[Token(Token = "0x6000CBC")]
			[Address(RVA = "0x155BBEC", Offset = "0x155BBEC", VA = "0x155BBEC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F0")]
		protected internal ECFieldElement[] RawZCoords
		{
			[Token(Token = "0x6000CBD")]
			[Address(RVA = "0x155BBF4", Offset = "0x155BBF4", VA = "0x155BBF4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F1")]
		public bool IsInfinity
		{
			[Token(Token = "0x6000CC3")]
			[Address(RVA = "0x154F7EC", Offset = "0x154F7EC", VA = "0x154F7EC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000F2")]
		public bool IsCompressed
		{
			[Token(Token = "0x6000CC4")]
			[Address(RVA = "0x155BF88", Offset = "0x155BF88", VA = "0x155BF88")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000F3")]
		protected internal abstract bool CompressionYTilde
		{
			[Token(Token = "0x6000CCE")]
			get;
		}

		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0x155B610", Offset = "0x155B610", VA = "0x155B610")]
		protected static ECFieldElement[] GetInitialZCoords(ECCurve curve)
		{
			return null;
		}

		[Token(Token = "0x6000CAB")]
		[Address(RVA = "0x155B8C4", Offset = "0x155B8C4", VA = "0x155B8C4")]
		protected ECPoint(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression)
		{
		}

		[Token(Token = "0x6000CAC")]
		[Address(RVA = "0x155B96C", Offset = "0x155B96C", VA = "0x155B96C")]
		internal ECPoint(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
		}

		[Token(Token = "0x6000CAD")]
		[Address(RVA = "0x155AFA8", Offset = "0x155AFA8", VA = "0x155AFA8")]
		protected internal bool SatisfiesCofactor()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CAE")]
		protected abstract bool SatisfiesCurveEquation();

		[Token(Token = "0x6000CAF")]
		[Address(RVA = "0x155B9C4", Offset = "0x155B9C4", VA = "0x155B9C4")]
		public ECPoint GetDetachedPoint()
		{
			return null;
		}

		[Token(Token = "0x6000CB1")]
		protected abstract ECPoint Detach();

		[Token(Token = "0x6000CB9")]
		[Address(RVA = "0x155BB00", Offset = "0x155BB00", VA = "0x155BB00", Slot = "14")]
		public virtual ECFieldElement GetZCoord(int index)
		{
			return null;
		}

		[Token(Token = "0x6000CBA")]
		[Address(RVA = "0x155BB4C", Offset = "0x155BB4C", VA = "0x155BB4C", Slot = "15")]
		public virtual ECFieldElement[] GetZCoords()
		{
			return null;
		}

		[Token(Token = "0x6000CBE")]
		[Address(RVA = "0x155BBFC", Offset = "0x155BBFC", VA = "0x155BBFC", Slot = "16")]
		protected virtual void CheckNormalized()
		{
		}

		[Token(Token = "0x6000CBF")]
		[Address(RVA = "0x155BC90", Offset = "0x155BC90", VA = "0x155BC90", Slot = "17")]
		public virtual bool IsNormalized()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CC0")]
		[Address(RVA = "0x155BD18", Offset = "0x155BD18", VA = "0x155BD18", Slot = "18")]
		public virtual ECPoint Normalize()
		{
			return null;
		}

		[Token(Token = "0x6000CC1")]
		[Address(RVA = "0x155BDD8", Offset = "0x155BDD8", VA = "0x155BDD8", Slot = "19")]
		internal virtual ECPoint Normalize(ECFieldElement zInv)
		{
			return null;
		}

		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0x155BEEC", Offset = "0x155BEEC", VA = "0x155BEEC", Slot = "20")]
		protected virtual ECPoint CreateScaledPoint(ECFieldElement sx, ECFieldElement sy)
		{
			return null;
		}

		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0x1558D58", Offset = "0x1558D58", VA = "0x1558D58")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0x155BF90", Offset = "0x155BF90", VA = "0x155BF90", Slot = "21")]
		public virtual ECPoint ScaleX(ECFieldElement scale)
		{
			return null;
		}

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0x155C030", Offset = "0x155C030", VA = "0x155C030", Slot = "22")]
		public virtual ECPoint ScaleY(ECFieldElement scale)
		{
			return null;
		}

		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0x155C0D8", Offset = "0x155C0D8", VA = "0x155C0D8", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CC9")]
		[Address(RVA = "0x155C174", Offset = "0x155C174", VA = "0x155C174", Slot = "23")]
		public virtual bool Equals(ECPoint other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CCA")]
		[Address(RVA = "0x155C43C", Offset = "0x155C43C", VA = "0x155C43C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000CCB")]
		[Address(RVA = "0x155C510", Offset = "0x155C510", VA = "0x155C510", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000CCC")]
		[Address(RVA = "0x155C66C", Offset = "0x155C66C", VA = "0x155C66C", Slot = "24")]
		public virtual byte[] GetEncoded()
		{
			return null;
		}

		[Token(Token = "0x6000CCD")]
		public abstract byte[] GetEncoded(bool compressed);

		[Token(Token = "0x6000CCF")]
		public abstract ECPoint Add(ECPoint b);

		[Token(Token = "0x6000CD0")]
		public abstract ECPoint Subtract(ECPoint b);

		[Token(Token = "0x6000CD1")]
		public abstract ECPoint Negate();

		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0x155C680", Offset = "0x155C680", VA = "0x155C680", Slot = "30")]
		public virtual ECPoint TimesPow2(int e)
		{
			return null;
		}

		[Token(Token = "0x6000CD3")]
		public abstract ECPoint Twice();

		[Token(Token = "0x6000CD4")]
		public abstract ECPoint Multiply(BigInteger b);

		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0x155C74C", Offset = "0x155C74C", VA = "0x155C74C", Slot = "33")]
		public virtual ECPoint TwicePlus(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6000CD6")]
		[Address(RVA = "0x155C794", Offset = "0x155C794", VA = "0x155C794", Slot = "34")]
		public virtual ECPoint ThreeTimes()
		{
			return null;
		}
	}
	[Token(Token = "0x20001A5")]
	public abstract class ECPointBase : ECPoint
	{
		[Token(Token = "0x6000CD8")]
		[Address(RVA = "0x155C80C", Offset = "0x155C80C", VA = "0x155C80C")]
		protected internal ECPointBase(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression)
		{
		}

		[Token(Token = "0x6000CD9")]
		[Address(RVA = "0x155C8A0", Offset = "0x155C8A0", VA = "0x155C8A0")]
		protected internal ECPointBase(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
		}

		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0x155C948", Offset = "0x155C948", VA = "0x155C948", Slot = "25")]
		public override byte[] GetEncoded(bool compressed)
		{
			return null;
		}

		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0x155CB24", Offset = "0x155CB24", VA = "0x155CB24", Slot = "32")]
		public override ECPoint Multiply(BigInteger k)
		{
			return null;
		}
	}
	[Token(Token = "0x20001A6")]
	public abstract class AbstractFpPoint : ECPointBase
	{
		[Token(Token = "0x170000F4")]
		protected internal override bool CompressionYTilde
		{
			[Token(Token = "0x6000CDE")]
			[Address(RVA = "0x14A387C", Offset = "0x14A387C", VA = "0x14A387C", Slot = "26")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000CDC")]
		[Address(RVA = "0x14A3864", Offset = "0x14A3864", VA = "0x14A3864")]
		protected AbstractFpPoint(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression)
		{
		}

		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0x14A3870", Offset = "0x14A3870", VA = "0x14A3870")]
		protected AbstractFpPoint(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
		}

		[Token(Token = "0x6000CDF")]
		[Address(RVA = "0x14A38AC", Offset = "0x14A38AC", VA = "0x14A38AC", Slot = "4")]
		protected override bool SatisfiesCurveEquation()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CE0")]
		[Address(RVA = "0x14A3BB0", Offset = "0x14A3BB0", VA = "0x14A3BB0", Slot = "28")]
		public override ECPoint Subtract(ECPoint b)
		{
			return null;
		}
	}
	[Token(Token = "0x20001A7")]
	public class FpPoint : AbstractFpPoint
	{
		[Token(Token = "0x6000CE1")]
		[Address(RVA = "0x13F62B4", Offset = "0x13F62B4", VA = "0x13F62B4")]
		public FpPoint(ECCurve curve, ECFieldElement x, ECFieldElement y)
		{
		}

		[Token(Token = "0x6000CE2")]
		[Address(RVA = "0x13F6640", Offset = "0x13F6640", VA = "0x13F6640")]
		public FpPoint(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression)
		{
		}

		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0x13F67A4", Offset = "0x13F67A4", VA = "0x13F67A4")]
		internal FpPoint(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
		}

		[Token(Token = "0x6000CE4")]
		[Address(RVA = "0x13F8EAC", Offset = "0x13F8EAC", VA = "0x13F8EAC", Slot = "6")]
		protected override ECPoint Detach()
		{
			return null;
		}

		[Token(Token = "0x6000CE5")]
		[Address(RVA = "0x13F8F4C", Offset = "0x13F8F4C", VA = "0x13F8F4C", Slot = "14")]
		public override ECFieldElement GetZCoord(int index)
		{
			return null;
		}

		[Token(Token = "0x6000CE6")]
		[Address(RVA = "0x13F8FB4", Offset = "0x13F8FB4", VA = "0x13F8FB4", Slot = "27")]
		public override ECPoint Add(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6000CE7")]
		[Address(RVA = "0x13F9B54", Offset = "0x13F9B54", VA = "0x13F9B54", Slot = "31")]
		public override ECPoint Twice()
		{
			return null;
		}

		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0x13FA600", Offset = "0x13FA600", VA = "0x13FA600", Slot = "33")]
		public override ECPoint TwicePlus(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6000CE9")]
		[Address(RVA = "0x13FAA84", Offset = "0x13FAA84", VA = "0x13FAA84", Slot = "34")]
		public override ECPoint ThreeTimes()
		{
			return null;
		}

		[Token(Token = "0x6000CEA")]
		[Address(RVA = "0x13FAE80", Offset = "0x13FAE80", VA = "0x13FAE80", Slot = "30")]
		public override ECPoint TimesPow2(int e)
		{
			return null;
		}

		[Token(Token = "0x6000CEB")]
		[Address(RVA = "0x13FB654", Offset = "0x13FB654", VA = "0x13FB654", Slot = "35")]
		protected virtual ECFieldElement Two(ECFieldElement x)
		{
			return null;
		}

		[Token(Token = "0x6000CEC")]
		[Address(RVA = "0x13FB674", Offset = "0x13FB674", VA = "0x13FB674", Slot = "36")]
		protected virtual ECFieldElement Three(ECFieldElement x)
		{
			return null;
		}

		[Token(Token = "0x6000CED")]
		[Address(RVA = "0x13FB6B4", Offset = "0x13FB6B4", VA = "0x13FB6B4", Slot = "37")]
		protected virtual ECFieldElement Four(ECFieldElement x)
		{
			return null;
		}

		[Token(Token = "0x6000CEE")]
		[Address(RVA = "0x13FB6F4", Offset = "0x13FB6F4", VA = "0x13FB6F4", Slot = "38")]
		protected virtual ECFieldElement Eight(ECFieldElement x)
		{
			return null;
		}

		[Token(Token = "0x6000CEF")]
		[Address(RVA = "0x13FB734", Offset = "0x13FB734", VA = "0x13FB734", Slot = "39")]
		protected virtual ECFieldElement DoubleProductFromSquares(ECFieldElement a, ECFieldElement b, ECFieldElement aSquared, ECFieldElement bSquared)
		{
			return null;
		}

		[Token(Token = "0x6000CF0")]
		[Address(RVA = "0x13FB7AC", Offset = "0x13FB7AC", VA = "0x13FB7AC", Slot = "29")]
		public override ECPoint Negate()
		{
			return null;
		}

		[Token(Token = "0x6000CF1")]
		[Address(RVA = "0x13FB8CC", Offset = "0x13FB8CC", VA = "0x13FB8CC", Slot = "40")]
		protected virtual ECFieldElement CalculateJacobianModifiedW(ECFieldElement Z, ECFieldElement ZSquared)
		{
			return null;
		}

		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0x13FBA24", Offset = "0x13FBA24", VA = "0x13FBA24", Slot = "41")]
		protected virtual ECFieldElement GetJacobianModifiedW()
		{
			return null;
		}

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0x13FBABC", Offset = "0x13FBABC", VA = "0x13FBABC", Slot = "42")]
		protected virtual FpPoint TwiceJacobianModified(bool calculateW)
		{
			return null;
		}
	}
	[Token(Token = "0x20001A8")]
	public abstract class AbstractF2mPoint : ECPointBase
	{
		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0x14A28F4", Offset = "0x14A28F4", VA = "0x14A28F4")]
		protected AbstractF2mPoint(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression)
		{
		}

		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0x14A2900", Offset = "0x14A2900", VA = "0x14A2900")]
		protected AbstractF2mPoint(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
		}

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0x14A290C", Offset = "0x14A290C", VA = "0x14A290C", Slot = "4")]
		protected override bool SatisfiesCurveEquation()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0x14A2D54", Offset = "0x14A2D54", VA = "0x14A2D54", Slot = "21")]
		public override ECPoint ScaleX(ECFieldElement scale)
		{
			return null;
		}

		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0x14A2FDC", Offset = "0x14A2FDC", VA = "0x14A2FDC", Slot = "22")]
		public override ECPoint ScaleY(ECFieldElement scale)
		{
			return null;
		}

		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0x14A30D8", Offset = "0x14A30D8", VA = "0x14A30D8", Slot = "28")]
		public override ECPoint Subtract(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6000CFA")]
		[Address(RVA = "0x14A3148", Offset = "0x14A3148", VA = "0x14A3148", Slot = "35")]
		public virtual AbstractF2mPoint Tau()
		{
			return null;
		}

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0x14A33B8", Offset = "0x14A33B8", VA = "0x14A33B8", Slot = "36")]
		public virtual AbstractF2mPoint TauPow(int pow)
		{
			return null;
		}
	}
	[Token(Token = "0x20001A9")]
	public class F2mPoint : AbstractF2mPoint
	{
		[Token(Token = "0x170000F5")]
		public override ECFieldElement YCoord
		{
			[Token(Token = "0x6000D01")]
			[Address(RVA = "0x13F4218", Offset = "0x13F4218", VA = "0x13F4218", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F6")]
		protected internal override bool CompressionYTilde
		{
			[Token(Token = "0x6000D02")]
			[Address(RVA = "0x13F432C", Offset = "0x13F432C", VA = "0x13F432C", Slot = "26")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000CFC")]
		[Address(RVA = "0x13F4038", Offset = "0x13F4038", VA = "0x13F4038")]
		public F2mPoint(ECCurve curve, ECFieldElement x, ECFieldElement y)
		{
		}

		[Token(Token = "0x6000CFD")]
		[Address(RVA = "0x13F4040", Offset = "0x13F4040", VA = "0x13F4040")]
		public F2mPoint(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression)
		{
		}

		[Token(Token = "0x6000CFE")]
		[Address(RVA = "0x13F415C", Offset = "0x13F415C", VA = "0x13F415C")]
		internal F2mPoint(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
		}

		[Token(Token = "0x6000CFF")]
		[Address(RVA = "0x13F4168", Offset = "0x13F4168", VA = "0x13F4168")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x8305F8", Offset = "0x8305F8")]
		public F2mPoint(ECCurve curve)
		{
		}

		[Token(Token = "0x6000D00")]
		[Address(RVA = "0x13F4178", Offset = "0x13F4178", VA = "0x13F4178", Slot = "6")]
		protected override ECPoint Detach()
		{
			return null;
		}

		[Token(Token = "0x6000D03")]
		[Address(RVA = "0x13F4404", Offset = "0x13F4404", VA = "0x13F4404", Slot = "27")]
		public override ECPoint Add(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6000D04")]
		[Address(RVA = "0x13F5058", Offset = "0x13F5058", VA = "0x13F5058", Slot = "31")]
		public override ECPoint Twice()
		{
			return null;
		}

		[Token(Token = "0x6000D05")]
		[Address(RVA = "0x13F58BC", Offset = "0x13F58BC", VA = "0x13F58BC", Slot = "33")]
		public override ECPoint TwicePlus(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6000D06")]
		[Address(RVA = "0x13F5E00", Offset = "0x13F5E00", VA = "0x13F5E00", Slot = "29")]
		public override ECPoint Negate()
		{
			return null;
		}
	}
	[Token(Token = "0x20001AA")]
	public interface ECPointMap
	{
		[Token(Token = "0x6000D07")]
		ECPoint Map(ECPoint p);
	}
	[Token(Token = "0x20001AB")]
	internal class LongArray
	{
		[Token(Token = "0x400090A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly ushort[] INTERLEAVE2_TABLE;

		[Token(Token = "0x400090B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int[] INTERLEAVE3_TABLE;

		[Token(Token = "0x400090C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly int[] INTERLEAVE4_TABLE;

		[Token(Token = "0x400090D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly int[] INTERLEAVE5_TABLE;

		[Token(Token = "0x400090E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly long[] INTERLEAVE7_TABLE;

		[Token(Token = "0x400090F")]
		private const string ZEROES = "0000000000000000000000000000000000000000000000000000000000000000";

		[Token(Token = "0x4000910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal static readonly byte[] BitLengths;

		[Token(Token = "0x4000911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private long[] m_ints;

		[Token(Token = "0x170000F7")]
		public int Length
		{
			[Token(Token = "0x6000D20")]
			[Address(RVA = "0x13FD1EC", Offset = "0x13FD1EC", VA = "0x13FD1EC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000D08")]
		[Address(RVA = "0x13FBE10", Offset = "0x13FBE10", VA = "0x13FBE10")]
		public LongArray(int intLen)
		{
		}

		[Token(Token = "0x6000D09")]
		[Address(RVA = "0x13FBE80", Offset = "0x13FBE80", VA = "0x13FBE80")]
		public LongArray(long[] ints)
		{
		}

		[Token(Token = "0x6000D0A")]
		[Address(RVA = "0x13FBEAC", Offset = "0x13FBEAC", VA = "0x13FBEAC")]
		public LongArray(long[] ints, int off, int len)
		{
		}

		[Token(Token = "0x6000D0B")]
		[Address(RVA = "0x13FBF74", Offset = "0x13FBF74", VA = "0x13FBF74")]
		public LongArray(BigInteger bigInt)
		{
		}

		[Token(Token = "0x6000D0C")]
		[Address(RVA = "0x13FC1A0", Offset = "0x13FC1A0", VA = "0x13FC1A0")]
		public bool IsOne()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D0D")]
		[Address(RVA = "0x13FC20C", Offset = "0x13FC20C", VA = "0x13FC20C")]
		public bool IsZero()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D0E")]
		[Address(RVA = "0x13FC270", Offset = "0x13FC270", VA = "0x13FC270")]
		public int GetUsedLength()
		{
			return default(int);
		}

		[Token(Token = "0x6000D0F")]
		[Address(RVA = "0x13FC28C", Offset = "0x13FC28C", VA = "0x13FC28C")]
		public int GetUsedLengthFrom(int from)
		{
			return default(int);
		}

		[Token(Token = "0x6000D10")]
		[Address(RVA = "0x13FC384", Offset = "0x13FC384", VA = "0x13FC384")]
		public int Degree()
		{
			return default(int);
		}

		[Token(Token = "0x6000D11")]
		[Address(RVA = "0x13FC5C8", Offset = "0x13FC5C8", VA = "0x13FC5C8")]
		private int DegreeFrom(int limit)
		{
			return default(int);
		}

		[Token(Token = "0x6000D12")]
		[Address(RVA = "0x13FC440", Offset = "0x13FC440", VA = "0x13FC440")]
		private static int BitLength(long w)
		{
			return default(int);
		}

		[Token(Token = "0x6000D13")]
		[Address(RVA = "0x13FC694", Offset = "0x13FC694", VA = "0x13FC694")]
		private long[] ResizedInts(int newLen)
		{
			return null;
		}

		[Token(Token = "0x6000D14")]
		[Address(RVA = "0x13FC754", Offset = "0x13FC754", VA = "0x13FC754")]
		public BigInteger ToBigInteger()
		{
			return null;
		}

		[Token(Token = "0x6000D15")]
		[Address(RVA = "0x13FC984", Offset = "0x13FC984", VA = "0x13FC984")]
		private static long ShiftUp(long[] x, int xOff, int count, int shift)
		{
			return default(long);
		}

		[Token(Token = "0x6000D16")]
		[Address(RVA = "0x13FCA18", Offset = "0x13FCA18", VA = "0x13FCA18")]
		private static long ShiftUp(long[] x, int xOff, long[] z, int zOff, int count, int shift)
		{
			return default(long);
		}

		[Token(Token = "0x6000D17")]
		[Address(RVA = "0x13FCAC8", Offset = "0x13FCAC8", VA = "0x13FCAC8")]
		public LongArray AddOne()
		{
			return null;
		}

		[Token(Token = "0x6000D18")]
		[Address(RVA = "0x13FCBE0", Offset = "0x13FCBE0", VA = "0x13FCBE0")]
		private void AddShiftedByBitsSafe(LongArray other, int otherDegree, int bits)
		{
		}

		[Token(Token = "0x6000D19")]
		[Address(RVA = "0x13FCD9C", Offset = "0x13FCD9C", VA = "0x13FCD9C")]
		private static long AddShiftedUp(long[] x, int xOff, long[] y, int yOff, int count, int shift)
		{
			return default(long);
		}

		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0x13FCE54", Offset = "0x13FCE54", VA = "0x13FCE54")]
		private static long AddShiftedDown(long[] x, int xOff, long[] y, int yOff, int count, int shift)
		{
			return default(long);
		}

		[Token(Token = "0x6000D1B")]
		[Address(RVA = "0x13FCEEC", Offset = "0x13FCEEC", VA = "0x13FCEEC")]
		public void AddShiftedByWords(LongArray other, int words)
		{
		}

		[Token(Token = "0x6000D1C")]
		[Address(RVA = "0x13FCD0C", Offset = "0x13FCD0C", VA = "0x13FCD0C")]
		private static void Add(long[] x, int xOff, long[] y, int yOff, int count)
		{
		}

		[Token(Token = "0x6000D1D")]
		[Address(RVA = "0x13FCFD0", Offset = "0x13FCFD0", VA = "0x13FCFD0")]
		private static void Add(long[] x, int xOff, long[] y, int yOff, long[] z, int zOff, int count)
		{
		}

		[Token(Token = "0x6000D1E")]
		[Address(RVA = "0x13FD07C", Offset = "0x13FD07C", VA = "0x13FD07C")]
		private static void AddBoth(long[] x, int xOff, long[] y1, int y1Off, long[] y2, int y2Off, int count)
		{
		}

		[Token(Token = "0x6000D1F")]
		[Address(RVA = "0x13FD130", Offset = "0x13FD130", VA = "0x13FD130")]
		private static void Distribute(long[] x, int src, int dst1, int dst2, int count)
		{
		}

		[Token(Token = "0x6000D21")]
		[Address(RVA = "0x13FD208", Offset = "0x13FD208", VA = "0x13FD208")]
		private static void FlipWord(long[] buf, int off, int bit, long word)
		{
		}

		[Token(Token = "0x6000D22")]
		[Address(RVA = "0x13FD28C", Offset = "0x13FD28C", VA = "0x13FD28C")]
		public bool TestBitZero()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D23")]
		[Address(RVA = "0x13FD2D0", Offset = "0x13FD2D0", VA = "0x13FD2D0")]
		private static bool TestBit(long[] buf, int off, int n)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D24")]
		[Address(RVA = "0x13FD31C", Offset = "0x13FD31C", VA = "0x13FD31C")]
		private static void FlipBit(long[] buf, int off, int n)
		{
		}

		[Token(Token = "0x6000D25")]
		[Address(RVA = "0x13FD368", Offset = "0x13FD368", VA = "0x13FD368")]
		private static void MultiplyWord(long a, long[] b, int bLen, long[] c, int cOff)
		{
		}

		[Token(Token = "0x6000D26")]
		[Address(RVA = "0x13FD4B0", Offset = "0x13FD4B0", VA = "0x13FD4B0")]
		public LongArray ModMultiplyLD(LongArray other, int m, int[] ks)
		{
			return null;
		}

		[Token(Token = "0x6000D27")]
		[Address(RVA = "0x13FDAE0", Offset = "0x13FDAE0", VA = "0x13FDAE0")]
		public LongArray ModMultiply(LongArray other, int m, int[] ks)
		{
			return null;
		}

		[Token(Token = "0x6000D28")]
		[Address(RVA = "0x13FDFA8", Offset = "0x13FDFA8", VA = "0x13FDFA8")]
		public LongArray ModMultiplyAlt(LongArray other, int m, int[] ks)
		{
			return null;
		}

		[Token(Token = "0x6000D29")]
		[Address(RVA = "0x13FE6A4", Offset = "0x13FE6A4", VA = "0x13FE6A4")]
		public LongArray ModReduce(int m, int[] ks)
		{
			return null;
		}

		[Token(Token = "0x6000D2A")]
		[Address(RVA = "0x13FEA08", Offset = "0x13FEA08", VA = "0x13FEA08")]
		public LongArray Multiply(LongArray other, int m, int[] ks)
		{
			return null;
		}

		[Token(Token = "0x6000D2B")]
		[Address(RVA = "0x13FEE80", Offset = "0x13FEE80", VA = "0x13FEE80")]
		public void Reduce(int m, int[] ks)
		{
		}

		[Token(Token = "0x6000D2C")]
		[Address(RVA = "0x13FDA20", Offset = "0x13FDA20", VA = "0x13FDA20")]
		private static LongArray ReduceResult(long[] buf, int off, int len, int m, int[] ks)
		{
			return null;
		}

		[Token(Token = "0x6000D2D")]
		[Address(RVA = "0x13FE76C", Offset = "0x13FE76C", VA = "0x13FE76C")]
		private static int ReduceInPlace(long[] buf, int off, int len, int m, int[] ks)
		{
			return default(int);
		}

		[Token(Token = "0x6000D2E")]
		[Address(RVA = "0x13FF25C", Offset = "0x13FF25C", VA = "0x13FF25C")]
		private static void ReduceBitWise(long[] buf, int off, int BitLength, int m, int[] ks)
		{
		}

		[Token(Token = "0x6000D2F")]
		[Address(RVA = "0x13FF338", Offset = "0x13FF338", VA = "0x13FF338")]
		private static void ReduceBit(long[] buf, int off, int bit, int m, int[] ks)
		{
		}

		[Token(Token = "0x6000D30")]
		[Address(RVA = "0x13FF0C4", Offset = "0x13FF0C4", VA = "0x13FF0C4")]
		private static void ReduceWordWise(long[] buf, int off, int len, int toBit, int m, int[] ks)
		{
		}

		[Token(Token = "0x6000D31")]
		[Address(RVA = "0x13FF474", Offset = "0x13FF474", VA = "0x13FF474")]
		private static void ReduceWord(long[] buf, int off, int bit, long word, int m, int[] ks)
		{
		}

		[Token(Token = "0x6000D32")]
		[Address(RVA = "0x13FEF64", Offset = "0x13FEF64", VA = "0x13FEF64")]
		private static void ReduceVectorWise(long[] buf, int off, int len, int words, int m, int[] ks)
		{
		}

		[Token(Token = "0x6000D33")]
		[Address(RVA = "0x13FF5A4", Offset = "0x13FF5A4", VA = "0x13FF5A4")]
		private static void FlipVector(long[] x, int xOff, long[] y, int yOff, int yLen, int bits)
		{
		}

		[Token(Token = "0x6000D34")]
		[Address(RVA = "0x13FF6C8", Offset = "0x13FF6C8", VA = "0x13FF6C8")]
		public LongArray ModSquare(int m, int[] ks)
		{
			return null;
		}

		[Token(Token = "0x6000D35")]
		[Address(RVA = "0x13FF948", Offset = "0x13FF948", VA = "0x13FF948")]
		public LongArray ModSquareN(int n, int m, int[] ks)
		{
			return null;
		}

		[Token(Token = "0x6000D36")]
		[Address(RVA = "0x13FFB74", Offset = "0x13FFB74", VA = "0x13FFB74")]
		public LongArray Square(int m, int[] ks)
		{
			return null;
		}

		[Token(Token = "0x6000D37")]
		[Address(RVA = "0x13FFA7C", Offset = "0x13FFA7C", VA = "0x13FFA7C")]
		private static void SquareInPlace(long[] x, int xLen, int m, int[] ks)
		{
		}

		[Token(Token = "0x6000D38")]
		[Address(RVA = "0x13FE4D0", Offset = "0x13FE4D0", VA = "0x13FE4D0")]
		private static void Interleave(long[] x, int xOff, long[] z, int zOff, int count, int width)
		{
		}

		[Token(Token = "0x6000D39")]
		[Address(RVA = "0x13FFCD4", Offset = "0x13FFCD4", VA = "0x13FFCD4")]
		private static void Interleave3(long[] x, int xOff, long[] z, int zOff, int count)
		{
		}

		[Token(Token = "0x6000D3A")]
		[Address(RVA = "0x140011C", Offset = "0x140011C", VA = "0x140011C")]
		private static long Interleave3(long x)
		{
			return default(long);
		}

		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0x14001B4", Offset = "0x14001B4", VA = "0x14001B4")]
		private static long Interleave3_21to63(int x)
		{
			return default(long);
		}

		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0x13FFDE4", Offset = "0x13FFDE4", VA = "0x13FFDE4")]
		private static void Interleave5(long[] x, int xOff, long[] z, int zOff, int count)
		{
		}

		[Token(Token = "0x6000D3D")]
		[Address(RVA = "0x1400278", Offset = "0x1400278", VA = "0x1400278")]
		private static long Interleave5(long x)
		{
			return default(long);
		}

		[Token(Token = "0x6000D3E")]
		[Address(RVA = "0x1400330", Offset = "0x1400330", VA = "0x1400330")]
		private static long Interleave3_13to65(int x)
		{
			return default(long);
		}

		[Token(Token = "0x6000D3F")]
		[Address(RVA = "0x13FFEF4", Offset = "0x13FFEF4", VA = "0x13FFEF4")]
		private static void Interleave7(long[] x, int xOff, long[] z, int zOff, int count)
		{
		}

		[Token(Token = "0x6000D40")]
		[Address(RVA = "0x14003DC", Offset = "0x14003DC", VA = "0x14003DC")]
		private static long Interleave7(long x)
		{
			return default(long);
		}

		[Token(Token = "0x6000D41")]
		[Address(RVA = "0x1400004", Offset = "0x1400004", VA = "0x1400004")]
		private static void Interleave2_n(long[] x, int xOff, long[] z, int zOff, int count, int rounds)
		{
		}

		[Token(Token = "0x6000D42")]
		[Address(RVA = "0x1400508", Offset = "0x1400508", VA = "0x1400508")]
		private static long Interleave2_n(long x, int rounds)
		{
			return default(long);
		}

		[Token(Token = "0x6000D43")]
		[Address(RVA = "0x140061C", Offset = "0x140061C", VA = "0x140061C")]
		private static long Interleave4_16to64(int x)
		{
			return default(long);
		}

		[Token(Token = "0x6000D44")]
		[Address(RVA = "0x13FF870", Offset = "0x13FF870", VA = "0x13FF870")]
		private static long Interleave2_32to64(int x)
		{
			return default(long);
		}

		[Token(Token = "0x6000D45")]
		[Address(RVA = "0x14006C8", Offset = "0x14006C8", VA = "0x14006C8")]
		public LongArray ModInverse(int m, int[] ks)
		{
			return null;
		}

		[Token(Token = "0x6000D46")]
		[Address(RVA = "0x1400BA8", Offset = "0x1400BA8", VA = "0x1400BA8", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D47")]
		[Address(RVA = "0x1400C40", Offset = "0x1400C40", VA = "0x1400C40", Slot = "4")]
		public virtual bool Equals(LongArray other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D48")]
		[Address(RVA = "0x1400D00", Offset = "0x1400D00", VA = "0x1400D00", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000D49")]
		[Address(RVA = "0x1400B30", Offset = "0x1400B30", VA = "0x1400B30")]
		public LongArray Copy()
		{
			return null;
		}

		[Token(Token = "0x6000D4A")]
		[Address(RVA = "0x1400D90", Offset = "0x1400D90", VA = "0x1400D90", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20001AC")]
	public class ScaleXPointMap : ECPointMap
	{
		[Token(Token = "0x4000912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly ECFieldElement scale;

		[Token(Token = "0x6000D4C")]
		[Address(RVA = "0x1404684", Offset = "0x1404684", VA = "0x1404684")]
		public ScaleXPointMap(ECFieldElement scale)
		{
		}

		[Token(Token = "0x6000D4D")]
		[Address(RVA = "0x14046B0", Offset = "0x14046B0", VA = "0x14046B0", Slot = "5")]
		public virtual ECPoint Map(ECPoint p)
		{
			return null;
		}
	}
}
namespace Org.BouncyCastle.Math.EC.Multiplier
{
	[Token(Token = "0x20001AD")]
	public abstract class AbstractECMultiplier : ECMultiplier
	{
		[Token(Token = "0x6000D4E")]
		[Address(RVA = "0x14010E8", Offset = "0x14010E8", VA = "0x14010E8", Slot = "5")]
		public virtual ECPoint Multiply(ECPoint p, BigInteger k)
		{
			return null;
		}

		[Token(Token = "0x6000D4F")]
		protected abstract ECPoint MultiplyPositive(ECPoint p, BigInteger k);

		[Token(Token = "0x6000D50")]
		[Address(RVA = "0x14011B0", Offset = "0x14011B0", VA = "0x14011B0")]
		protected AbstractECMultiplier()
		{
		}
	}
	[Token(Token = "0x20001AE")]
	public interface ECMultiplier
	{
		[Token(Token = "0x6000D51")]
		ECPoint Multiply(ECPoint p, BigInteger k);
	}
	[Token(Token = "0x20001AF")]
	public class FixedPointCombMultiplier : AbstractECMultiplier
	{
		[Token(Token = "0x6000D52")]
		[Address(RVA = "0x14011B8", Offset = "0x14011B8", VA = "0x14011B8", Slot = "6")]
		protected override ECPoint MultiplyPositive(ECPoint p, BigInteger k)
		{
			return null;
		}

		[Token(Token = "0x6000D53")]
		[Address(RVA = "0x1401818", Offset = "0x1401818", VA = "0x1401818", Slot = "7")]
		protected virtual int GetWidthForCombSize(int combSize)
		{
			return default(int);
		}

		[Token(Token = "0x6000D54")]
		[Address(RVA = "0x1401828", Offset = "0x1401828", VA = "0x1401828")]
		public FixedPointCombMultiplier()
		{
		}
	}
	[Token(Token = "0x20001B0")]
	public class FixedPointPreCompInfo : PreCompInfo
	{
		[Token(Token = "0x4000913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected ECPoint[] m_preComp;

		[Token(Token = "0x4000914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected int m_width;

		[Token(Token = "0x170000F8")]
		public virtual ECPoint[] PreComp
		{
			[Token(Token = "0x6000D55")]
			[Address(RVA = "0x1401830", Offset = "0x1401830", VA = "0x1401830", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D56")]
			[Address(RVA = "0x1401838", Offset = "0x1401838", VA = "0x1401838", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x170000F9")]
		public virtual int Width
		{
			[Token(Token = "0x6000D57")]
			[Address(RVA = "0x1401840", Offset = "0x1401840", VA = "0x1401840", Slot = "6")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D58")]
			[Address(RVA = "0x1401848", Offset = "0x1401848", VA = "0x1401848", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x6000D59")]
		[Address(RVA = "0x1401850", Offset = "0x1401850", VA = "0x1401850")]
		public FixedPointPreCompInfo()
		{
		}
	}
	[Token(Token = "0x20001B1")]
	public class FixedPointUtilities
	{
		[Token(Token = "0x4000915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string PRECOMP_NAME;

		[Token(Token = "0x6000D5A")]
		[Address(RVA = "0x14013EC", Offset = "0x14013EC", VA = "0x14013EC")]
		public static int GetCombSize(ECCurve c)
		{
			return default(int);
		}

		[Token(Token = "0x6000D5B")]
		[Address(RVA = "0x1401860", Offset = "0x1401860", VA = "0x1401860")]
		public static FixedPointPreCompInfo GetFixedPointPreCompInfo(PreCompInfo preCompInfo)
		{
			return null;
		}

		[Token(Token = "0x6000D5C")]
		[Address(RVA = "0x1401448", Offset = "0x1401448", VA = "0x1401448")]
		public static FixedPointPreCompInfo Precompute(ECPoint p, int minWidth)
		{
			return null;
		}

		[Token(Token = "0x6000D5D")]
		[Address(RVA = "0x14018F4", Offset = "0x14018F4", VA = "0x14018F4")]
		public FixedPointUtilities()
		{
		}
	}
	[Token(Token = "0x20001B2")]
	public class GlvMultiplier : AbstractECMultiplier
	{
		[Token(Token = "0x4000916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly ECCurve curve;

		[Token(Token = "0x4000917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected readonly GlvEndomorphism glvEndomorphism;

		[Token(Token = "0x6000D5F")]
		[Address(RVA = "0x1401958", Offset = "0x1401958", VA = "0x1401958")]
		public GlvMultiplier(ECCurve curve, GlvEndomorphism glvEndomorphism)
		{
		}

		[Token(Token = "0x6000D60")]
		[Address(RVA = "0x1401A1C", Offset = "0x1401A1C", VA = "0x1401A1C", Slot = "6")]
		protected override ECPoint MultiplyPositive(ECPoint p, BigInteger k)
		{
			return null;
		}
	}
	[Token(Token = "0x20001B3")]
	public interface PreCompInfo
	{
	}
	[Token(Token = "0x20001B4")]
	public class WNafL2RMultiplier : AbstractECMultiplier
	{
		[Token(Token = "0x6000D61")]
		[Address(RVA = "0x1401D44", Offset = "0x1401D44", VA = "0x1401D44", Slot = "6")]
		protected override ECPoint MultiplyPositive(ECPoint p, BigInteger k)
		{
			return null;
		}

		[Token(Token = "0x6000D62")]
		[Address(RVA = "0x1402A48", Offset = "0x1402A48", VA = "0x1402A48", Slot = "7")]
		protected virtual int GetWindowSize(int bits)
		{
			return default(int);
		}

		[Token(Token = "0x6000D63")]
		[Address(RVA = "0x1402B1C", Offset = "0x1402B1C", VA = "0x1402B1C")]
		public WNafL2RMultiplier()
		{
		}
	}
	[Token(Token = "0x20001B5")]
	public class WNafPreCompInfo : PreCompInfo
	{
		[Token(Token = "0x4000918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected ECPoint[] m_preComp;

		[Token(Token = "0x4000919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected ECPoint[] m_preCompNeg;

		[Token(Token = "0x400091A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected ECPoint m_twice;

		[Token(Token = "0x170000FA")]
		public virtual ECPoint[] PreComp
		{
			[Token(Token = "0x6000D64")]
			[Address(RVA = "0x1402B24", Offset = "0x1402B24", VA = "0x1402B24", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D65")]
			[Address(RVA = "0x1402B2C", Offset = "0x1402B2C", VA = "0x1402B2C", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x170000FB")]
		public virtual ECPoint[] PreCompNeg
		{
			[Token(Token = "0x6000D66")]
			[Address(RVA = "0x1402B34", Offset = "0x1402B34", VA = "0x1402B34", Slot = "6")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D67")]
			[Address(RVA = "0x1402B3C", Offset = "0x1402B3C", VA = "0x1402B3C", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x170000FC")]
		public virtual ECPoint Twice
		{
			[Token(Token = "0x6000D68")]
			[Address(RVA = "0x1402B44", Offset = "0x1402B44", VA = "0x1402B44", Slot = "8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D69")]
			[Address(RVA = "0x1402B4C", Offset = "0x1402B4C", VA = "0x1402B4C", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x6000D6A")]
		[Address(RVA = "0x1402B54", Offset = "0x1402B54", VA = "0x1402B54")]
		public WNafPreCompInfo()
		{
		}
	}
	[Token(Token = "0x20001B6")]
	public abstract class WNafUtilities
	{
		[Token(Token = "0x400091B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string PRECOMP_NAME;

		[Token(Token = "0x400091C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int[] DEFAULT_WINDOW_SIZE_CUTOFFS;

		[Token(Token = "0x400091D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly byte[] EMPTY_BYTES;

		[Token(Token = "0x400091E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly int[] EMPTY_INTS;

		[Token(Token = "0x400091F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly ECPoint[] EMPTY_POINTS;

		[Token(Token = "0x6000D6B")]
		[Address(RVA = "0x1402B5C", Offset = "0x1402B5C", VA = "0x1402B5C")]
		public static int[] GenerateCompactNaf(BigInteger k)
		{
			return null;
		}

		[Token(Token = "0x6000D6C")]
		[Address(RVA = "0x140274C", Offset = "0x140274C", VA = "0x140274C")]
		public static int[] GenerateCompactWindowNaf(int width, BigInteger k)
		{
			return null;
		}

		[Token(Token = "0x6000D6D")]
		[Address(RVA = "0x1402E50", Offset = "0x1402E50", VA = "0x1402E50")]
		public static byte[] GenerateJsf(BigInteger g, BigInteger h)
		{
			return null;
		}

		[Token(Token = "0x6000D6E")]
		[Address(RVA = "0x14031AC", Offset = "0x14031AC", VA = "0x14031AC")]
		public static byte[] GenerateNaf(BigInteger k)
		{
			return null;
		}

		[Token(Token = "0x6000D6F")]
		[Address(RVA = "0x1403348", Offset = "0x1403348", VA = "0x1403348")]
		public static byte[] GenerateWindowNaf(int width, BigInteger k)
		{
			return null;
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0x1403620", Offset = "0x1403620", VA = "0x1403620")]
		public static int GetNafWeight(BigInteger k)
		{
			return default(int);
		}

		[Token(Token = "0x6000D71")]
		[Address(RVA = "0x1403694", Offset = "0x1403694", VA = "0x1403694")]
		public static WNafPreCompInfo GetWNafPreCompInfo(ECPoint p)
		{
			return null;
		}

		[Token(Token = "0x6000D72")]
		[Address(RVA = "0x1403744", Offset = "0x1403744", VA = "0x1403744")]
		public static WNafPreCompInfo GetWNafPreCompInfo(PreCompInfo preCompInfo)
		{
			return null;
		}

		[Token(Token = "0x6000D73")]
		[Address(RVA = "0x1402AAC", Offset = "0x1402AAC", VA = "0x1402AAC")]
		public static int GetWindowSize(int bits)
		{
			return default(int);
		}

		[Token(Token = "0x6000D74")]
		[Address(RVA = "0x14037D0", Offset = "0x14037D0", VA = "0x14037D0")]
		public static int GetWindowSize(int bits, int[] windowSizeCutoffs)
		{
			return default(int);
		}

		[Token(Token = "0x6000D75")]
		[Address(RVA = "0x1403834", Offset = "0x1403834", VA = "0x1403834")]
		public static ECPoint MapPointWithPrecomp(ECPoint p, int width, bool includeNegated, ECPointMap pointMap)
		{
			return null;
		}

		[Token(Token = "0x6000D76")]
		[Address(RVA = "0x14020D0", Offset = "0x14020D0", VA = "0x14020D0")]
		public static WNafPreCompInfo Precompute(ECPoint p, int width, bool includeNegated)
		{
			return null;
		}

		[Token(Token = "0x6000D77")]
		[Address(RVA = "0x1403120", Offset = "0x1403120", VA = "0x1403120")]
		private static byte[] Trim(byte[] a, int length)
		{
			return null;
		}

		[Token(Token = "0x6000D78")]
		[Address(RVA = "0x1402DC4", Offset = "0x1402DC4", VA = "0x1402DC4")]
		private static int[] Trim(int[] a, int length)
		{
			return null;
		}

		[Token(Token = "0x6000D79")]
		[Address(RVA = "0x1403C5C", Offset = "0x1403C5C", VA = "0x1403C5C")]
		private static ECPoint[] ResizeTable(ECPoint[] a, int length)
		{
			return null;
		}

		[Token(Token = "0x6000D7A")]
		[Address(RVA = "0x1403CE8", Offset = "0x1403CE8", VA = "0x1403CE8")]
		protected WNafUtilities()
		{
		}
	}
	[Token(Token = "0x20001B7")]
	public class WTauNafMultiplier : AbstractECMultiplier
	{
		[Token(Token = "0x4000920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly string PRECOMP_NAME;

		[Token(Token = "0x6000D7C")]
		[Address(RVA = "0x1403DE4", Offset = "0x1403DE4", VA = "0x1403DE4", Slot = "6")]
		protected override ECPoint MultiplyPositive(ECPoint point, BigInteger k)
		{
			return null;
		}

		[Token(Token = "0x6000D7D")]
		[Address(RVA = "0x1404010", Offset = "0x1404010", VA = "0x1404010")]
		private AbstractF2mPoint MultiplyWTnaf(AbstractF2mPoint p, ZTauElement lambda, PreCompInfo preCompInfo, sbyte a, sbyte mu)
		{
			return null;
		}

		[Token(Token = "0x6000D7E")]
		[Address(RVA = "0x1404174", Offset = "0x1404174", VA = "0x1404174")]
		private static AbstractF2mPoint MultiplyFromWTnaf(AbstractF2mPoint p, sbyte[] u, PreCompInfo preCompInfo)
		{
			return null;
		}

		[Token(Token = "0x6000D7F")]
		[Address(RVA = "0x1404610", Offset = "0x1404610", VA = "0x1404610")]
		public WTauNafMultiplier()
		{
		}
	}
	[Token(Token = "0x20001B8")]
	public class WTauNafPreCompInfo : PreCompInfo
	{
		[Token(Token = "0x4000921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected AbstractF2mPoint[] m_preComp;

		[Token(Token = "0x170000FD")]
		public virtual AbstractF2mPoint[] PreComp
		{
			[Token(Token = "0x6000D81")]
			[Address(RVA = "0x1404674", Offset = "0x1404674", VA = "0x1404674", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D82")]
			[Address(RVA = "0x140467C", Offset = "0x140467C", VA = "0x140467C", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x6000D83")]
		[Address(RVA = "0x1404608", Offset = "0x1404608", VA = "0x1404608")]
		public WTauNafPreCompInfo()
		{
		}
	}
}
namespace Org.BouncyCastle.Math.EC.Endo
{
	[Token(Token = "0x20001B9")]
	public interface ECEndomorphism
	{
		[Token(Token = "0x170000FE")]
		ECPointMap PointMap
		{
			[Token(Token = "0x6000D84")]
			get;
		}

		[Token(Token = "0x170000FF")]
		bool HasEfficientPointMap
		{
			[Token(Token = "0x6000D85")]
			get;
		}
	}
	[Token(Token = "0x20001BA")]
	public interface GlvEndomorphism : ECEndomorphism
	{
		[Token(Token = "0x6000D86")]
		BigInteger[] DecomposeScalar(BigInteger k);
	}
	[Token(Token = "0x20001BB")]
	public class GlvTypeBEndomorphism : GlvEndomorphism, ECEndomorphism
	{
		[Token(Token = "0x4000922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly ECCurve m_curve;

		[Token(Token = "0x4000923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected readonly GlvTypeBParameters m_parameters;

		[Token(Token = "0x4000924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected readonly ECPointMap m_pointMap;

		[Token(Token = "0x17000100")]
		public virtual ECPointMap PointMap
		{
			[Token(Token = "0x6000D89")]
			[Address(RVA = "0x155CF38", Offset = "0x155CF38", VA = "0x155CF38", Slot = "8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000101")]
		public virtual bool HasEfficientPointMap
		{
			[Token(Token = "0x6000D8A")]
			[Address(RVA = "0x155CF40", Offset = "0x155CF40", VA = "0x155CF40", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000D87")]
		[Address(RVA = "0x155CC0C", Offset = "0x155CC0C", VA = "0x155CC0C")]
		public GlvTypeBEndomorphism(ECCurve curve, GlvTypeBParameters parameters)
		{
		}

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0x155CCC8", Offset = "0x155CCC8", VA = "0x155CCC8", Slot = "7")]
		public virtual BigInteger[] DecomposeScalar(BigInteger k)
		{
			return null;
		}

		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0x155CF48", Offset = "0x155CF48", VA = "0x155CF48", Slot = "10")]
		protected virtual BigInteger CalculateB(BigInteger k, BigInteger g, int t)
		{
			return null;
		}
	}
	[Token(Token = "0x20001BC")]
	public class GlvTypeBParameters
	{
		[Token(Token = "0x4000925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly BigInteger m_beta;

		[Token(Token = "0x4000926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected readonly BigInteger m_lambda;

		[Token(Token = "0x4000927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected readonly BigInteger[] m_v1;

		[Token(Token = "0x4000928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected readonly BigInteger[] m_v2;

		[Token(Token = "0x4000929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected readonly BigInteger m_g1;

		[Token(Token = "0x400092A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected readonly BigInteger m_g2;

		[Token(Token = "0x400092B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected readonly int m_bits;

		[Token(Token = "0x17000102")]
		public virtual BigInteger Beta
		{
			[Token(Token = "0x6000D8D")]
			[Address(RVA = "0x155D0C0", Offset = "0x155D0C0", VA = "0x155D0C0", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000103")]
		public virtual BigInteger Lambda
		{
			[Token(Token = "0x6000D8E")]
			[Address(RVA = "0x155D0C8", Offset = "0x155D0C8", VA = "0x155D0C8", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000104")]
		public virtual BigInteger[] V1
		{
			[Token(Token = "0x6000D8F")]
			[Address(RVA = "0x155D0D0", Offset = "0x155D0D0", VA = "0x155D0D0", Slot = "6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000105")]
		public virtual BigInteger[] V2
		{
			[Token(Token = "0x6000D90")]
			[Address(RVA = "0x155D0D8", Offset = "0x155D0D8", VA = "0x155D0D8", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000106")]
		public virtual BigInteger G1
		{
			[Token(Token = "0x6000D91")]
			[Address(RVA = "0x155D0E0", Offset = "0x155D0E0", VA = "0x155D0E0", Slot = "8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000107")]
		public virtual BigInteger G2
		{
			[Token(Token = "0x6000D92")]
			[Address(RVA = "0x155D0E8", Offset = "0x155D0E8", VA = "0x155D0E8", Slot = "9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000108")]
		public virtual int Bits
		{
			[Token(Token = "0x6000D93")]
			[Address(RVA = "0x155D0F0", Offset = "0x155D0F0", VA = "0x155D0F0", Slot = "10")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000D8C")]
		[Address(RVA = "0x155D058", Offset = "0x155D058", VA = "0x155D058")]
		public GlvTypeBParameters(BigInteger beta, BigInteger lambda, BigInteger[] v1, BigInteger[] v2, BigInteger g1, BigInteger g2, int bits)
		{
		}
	}
}
namespace Org.BouncyCastle.Math.EC.Custom.Sec
{
	[Token(Token = "0x20001BD")]
	internal class SecP128R1Curve : AbstractFpCurve
	{
		[Token(Token = "0x400092C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly BigInteger q;

		[Token(Token = "0x400092D")]
		private const int SecP128R1_DEFAULT_COORDS = 2;

		[Token(Token = "0x400092E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected readonly SecP128R1Point m_infinity;

		[Token(Token = "0x17000109")]
		public virtual BigInteger Q
		{
			[Token(Token = "0x6000D97")]
			[Address(RVA = "0x14A7600", Offset = "0x14A7600", VA = "0x14A7600", Slot = "36")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010A")]
		public override ECPoint Infinity
		{
			[Token(Token = "0x6000D98")]
			[Address(RVA = "0x14A7668", Offset = "0x14A7668", VA = "0x14A7668", Slot = "21")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010B")]
		public override int FieldSize
		{
			[Token(Token = "0x6000D99")]
			[Address(RVA = "0x14A7670", Offset = "0x14A7670", VA = "0x14A7670", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000D94")]
		[Address(RVA = "0x14A73B8", Offset = "0x14A73B8", VA = "0x14A73B8")]
		public SecP128R1Curve()
		{
		}

		[Token(Token = "0x6000D95")]
		[Address(RVA = "0x14A759C", Offset = "0x14A759C", VA = "0x14A759C", Slot = "11")]
		protected override ECCurve CloneCurve()
		{
			return null;
		}

		[Token(Token = "0x6000D96")]
		[Address(RVA = "0x14A75F4", Offset = "0x14A75F4", VA = "0x14A75F4", Slot = "15")]
		public override bool SupportsCoordinateSystem(int coord)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D9A")]
		[Address(RVA = "0x14A76E4", Offset = "0x14A76E4", VA = "0x14A76E4", Slot = "5")]
		public override ECFieldElement FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000D9B")]
		[Address(RVA = "0x14A7858", Offset = "0x14A7858", VA = "0x14A7858", Slot = "12")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x6000D9C")]
		[Address(RVA = "0x14A79B0", Offset = "0x14A79B0", VA = "0x14A79B0", Slot = "13")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
			return null;
		}
	}
	[Token(Token = "0x20001BE")]
	internal class SecP128R1Field
	{
		[Token(Token = "0x400092F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly uint[] P;

		[Token(Token = "0x4000930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly uint[] PExt;

		[Token(Token = "0x4000931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly uint[] PExtInv;

		[Token(Token = "0x4000932")]
		private const uint P3 = 4294967293u;

		[Token(Token = "0x4000933")]
		private const uint PExt7 = 4294967292u;

		[Token(Token = "0x6000D9E")]
		[Address(RVA = "0x14A7B00", Offset = "0x14A7B00", VA = "0x14A7B00")]
		public static void Add(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6000D9F")]
		[Address(RVA = "0x14A7C90", Offset = "0x14A7C90", VA = "0x14A7C90")]
		public static void AddExt(uint[] xx, uint[] yy, uint[] zz)
		{
		}

		[Token(Token = "0x6000DA0")]
		[Address(RVA = "0x14A7DAC", Offset = "0x14A7DAC", VA = "0x14A7DAC")]
		public static void AddOne(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000DA1")]
		[Address(RVA = "0x14A7EAC", Offset = "0x14A7EAC", VA = "0x14A7EAC")]
		public static uint[] FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000DA2")]
		[Address(RVA = "0x14A7F98", Offset = "0x14A7F98", VA = "0x14A7F98")]
		public static void Half(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000DA3")]
		[Address(RVA = "0x14A8078", Offset = "0x14A8078", VA = "0x14A8078")]
		public static void Multiply(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6000DA4")]
		[Address(RVA = "0x14A8248", Offset = "0x14A8248", VA = "0x14A8248")]
		public static void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz)
		{
		}

		[Token(Token = "0x6000DA5")]
		[Address(RVA = "0x14A8364", Offset = "0x14A8364", VA = "0x14A8364")]
		public static void Negate(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000DA6")]
		[Address(RVA = "0x14A8110", Offset = "0x14A8110", VA = "0x14A8110")]
		public static void Reduce(uint[] xx, uint[] z)
		{
		}

		[Token(Token = "0x6000DA7")]
		[Address(RVA = "0x14A8410", Offset = "0x14A8410", VA = "0x14A8410")]
		public static void Reduce32(uint x, uint[] z)
		{
		}

		[Token(Token = "0x6000DA8")]
		[Address(RVA = "0x14A84A4", Offset = "0x14A84A4", VA = "0x14A84A4")]
		public static void Square(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000DA9")]
		[Address(RVA = "0x14A8534", Offset = "0x14A8534", VA = "0x14A8534")]
		public static void SquareN(uint[] x, int n, uint[] z)
		{
		}

		[Token(Token = "0x6000DAA")]
		[Address(RVA = "0x14A8618", Offset = "0x14A8618", VA = "0x14A8618")]
		public static void Subtract(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6000DAB")]
		[Address(RVA = "0x14A8740", Offset = "0x14A8740", VA = "0x14A8740")]
		public static void SubtractExt(uint[] xx, uint[] yy, uint[] zz)
		{
		}

		[Token(Token = "0x6000DAC")]
		[Address(RVA = "0x14A87FC", Offset = "0x14A87FC", VA = "0x14A87FC")]
		public static void Twice(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000DAD")]
		[Address(RVA = "0x14A7C04", Offset = "0x14A7C04", VA = "0x14A7C04")]
		private static void AddPInvTo(uint[] z)
		{
		}

		[Token(Token = "0x6000DAE")]
		[Address(RVA = "0x14A86B4", Offset = "0x14A86B4", VA = "0x14A86B4")]
		private static void SubPInvFrom(uint[] z)
		{
		}

		[Token(Token = "0x6000DAF")]
		[Address(RVA = "0x14A8900", Offset = "0x14A8900", VA = "0x14A8900")]
		public SecP128R1Field()
		{
		}
	}
	[Token(Token = "0x20001BF")]
	internal class SecP128R1FieldElement : ECFieldElement
	{
		[Token(Token = "0x4000934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly BigInteger Q;

		[Token(Token = "0x4000935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected internal readonly uint[] x;

		[Token(Token = "0x1700010C")]
		public override bool IsZero
		{
			[Token(Token = "0x6000DB4")]
			[Address(RVA = "0x14A8A48", Offset = "0x14A8A48", VA = "0x14A8A48", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700010D")]
		public override bool IsOne
		{
			[Token(Token = "0x6000DB5")]
			[Address(RVA = "0x14A8A54", Offset = "0x14A8A54", VA = "0x14A8A54", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700010E")]
		public override string FieldName
		{
			[Token(Token = "0x6000DB8")]
			[Address(RVA = "0x14A8A94", Offset = "0x14A8A94", VA = "0x14A8A94", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010F")]
		public override int FieldSize
		{
			[Token(Token = "0x6000DB9")]
			[Address(RVA = "0x14A8ADC", Offset = "0x14A8ADC", VA = "0x14A8ADC", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000DB1")]
		[Address(RVA = "0x14A7744", Offset = "0x14A7744", VA = "0x14A7744")]
		public SecP128R1FieldElement(BigInteger x)
		{
		}

		[Token(Token = "0x6000DB2")]
		[Address(RVA = "0x14A89EC", Offset = "0x14A89EC", VA = "0x14A89EC")]
		public SecP128R1FieldElement()
		{
		}

		[Token(Token = "0x6000DB3")]
		[Address(RVA = "0x14A8A1C", Offset = "0x14A8A1C", VA = "0x14A8A1C")]
		protected internal SecP128R1FieldElement(uint[] x)
		{
		}

		[Token(Token = "0x6000DB6")]
		[Address(RVA = "0x14A8A60", Offset = "0x14A8A60", VA = "0x14A8A60", Slot = "24")]
		public override bool TestBitZero()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DB7")]
		[Address(RVA = "0x14A8A88", Offset = "0x14A8A88", VA = "0x14A8A88", Slot = "4")]
		public override BigInteger ToBigInteger()
		{
			return null;
		}

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0x14A8B50", Offset = "0x14A8B50", VA = "0x14A8B50", Slot = "7")]
		public override ECFieldElement Add(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000DBB")]
		[Address(RVA = "0x14A8C40", Offset = "0x14A8C40", VA = "0x14A8C40", Slot = "8")]
		public override ECFieldElement AddOne()
		{
			return null;
		}

		[Token(Token = "0x6000DBC")]
		[Address(RVA = "0x14A8CE4", Offset = "0x14A8CE4", VA = "0x14A8CE4", Slot = "9")]
		public override ECFieldElement Subtract(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000DBD")]
		[Address(RVA = "0x14A8DD4", Offset = "0x14A8DD4", VA = "0x14A8DD4", Slot = "10")]
		public override ECFieldElement Multiply(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000DBE")]
		[Address(RVA = "0x14A8EC4", Offset = "0x14A8EC4", VA = "0x14A8EC4", Slot = "11")]
		public override ECFieldElement Divide(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000DBF")]
		[Address(RVA = "0x14A8FCC", Offset = "0x14A8FCC", VA = "0x14A8FCC", Slot = "12")]
		public override ECFieldElement Negate()
		{
			return null;
		}

		[Token(Token = "0x6000DC0")]
		[Address(RVA = "0x14A9070", Offset = "0x14A9070", VA = "0x14A9070", Slot = "13")]
		public override ECFieldElement Square()
		{
			return null;
		}

		[Token(Token = "0x6000DC1")]
		[Address(RVA = "0x14A9114", Offset = "0x14A9114", VA = "0x14A9114", Slot = "14")]
		public override ECFieldElement Invert()
		{
			return null;
		}

		[Token(Token = "0x6000DC2")]
		[Address(RVA = "0x14A91CC", Offset = "0x14A91CC", VA = "0x14A91CC", Slot = "15")]
		public override ECFieldElement Sqrt()
		{
			return null;
		}

		[Token(Token = "0x6000DC3")]
		[Address(RVA = "0x14A93B0", Offset = "0x14A93B0", VA = "0x14A93B0", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DC4")]
		[Address(RVA = "0x14A944C", Offset = "0x14A944C", VA = "0x14A944C", Slot = "25")]
		public override bool Equals(ECFieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DC5")]
		[Address(RVA = "0x14A94E8", Offset = "0x14A94E8", VA = "0x14A94E8", Slot = "27")]
		public virtual bool Equals(SecP128R1FieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DC6")]
		[Address(RVA = "0x14A9514", Offset = "0x14A9514", VA = "0x14A9514", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001C0")]
	internal class SecP128R1Point : AbstractFpPoint
	{
		[Token(Token = "0x6000DC8")]
		[Address(RVA = "0x14A7594", Offset = "0x14A7594", VA = "0x14A7594")]
		public SecP128R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y)
		{
		}

		[Token(Token = "0x6000DC9")]
		[Address(RVA = "0x14A78E0", Offset = "0x14A78E0", VA = "0x14A78E0")]
		public SecP128R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression)
		{
		}

		[Token(Token = "0x6000DCA")]
		[Address(RVA = "0x14A7A44", Offset = "0x14A7A44", VA = "0x14A7A44")]
		internal SecP128R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
		}

		[Token(Token = "0x6000DCB")]
		[Address(RVA = "0x14A9630", Offset = "0x14A9630", VA = "0x14A9630", Slot = "6")]
		protected override ECPoint Detach()
		{
			return null;
		}

		[Token(Token = "0x6000DCC")]
		[Address(RVA = "0x14A96D0", Offset = "0x14A96D0", VA = "0x14A96D0", Slot = "27")]
		public override ECPoint Add(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6000DCD")]
		[Address(RVA = "0x14A9D98", Offset = "0x14A9D98", VA = "0x14A9D98", Slot = "31")]
		public override ECPoint Twice()
		{
			return null;
		}

		[Token(Token = "0x6000DCE")]
		[Address(RVA = "0x14AA264", Offset = "0x14AA264", VA = "0x14AA264", Slot = "33")]
		public override ECPoint TwicePlus(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6000DCF")]
		[Address(RVA = "0x14AA334", Offset = "0x14AA334", VA = "0x14AA334", Slot = "34")]
		public override ECPoint ThreeTimes()
		{
			return null;
		}

		[Token(Token = "0x6000DD0")]
		[Address(RVA = "0x14AA3B4", Offset = "0x14AA3B4", VA = "0x14AA3B4", Slot = "29")]
		public override ECPoint Negate()
		{
			return null;
		}
	}
	[Token(Token = "0x20001C1")]
	internal class SecP160K1Curve : AbstractFpCurve
	{
		[Token(Token = "0x4000936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly BigInteger q;

		[Token(Token = "0x4000937")]
		private const int SECP160K1_DEFAULT_COORDS = 2;

		[Token(Token = "0x4000938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected readonly SecP160K1Point m_infinity;

		[Token(Token = "0x17000110")]
		public virtual BigInteger Q
		{
			[Token(Token = "0x6000DD4")]
			[Address(RVA = "0x14AA678", Offset = "0x14AA678", VA = "0x14AA678", Slot = "36")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000111")]
		public override ECPoint Infinity
		{
			[Token(Token = "0x6000DD5")]
			[Address(RVA = "0x14AA6E0", Offset = "0x14AA6E0", VA = "0x14AA6E0", Slot = "21")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000112")]
		public override int FieldSize
		{
			[Token(Token = "0x6000DD6")]
			[Address(RVA = "0x14AA6E8", Offset = "0x14AA6E8", VA = "0x14AA6E8", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000DD1")]
		[Address(RVA = "0x14AA48C", Offset = "0x14AA48C", VA = "0x14AA48C")]
		public SecP160K1Curve()
		{
		}

		[Token(Token = "0x6000DD2")]
		[Address(RVA = "0x14AA614", Offset = "0x14AA614", VA = "0x14AA614", Slot = "11")]
		protected override ECCurve CloneCurve()
		{
			return null;
		}

		[Token(Token = "0x6000DD3")]
		[Address(RVA = "0x14AA66C", Offset = "0x14AA66C", VA = "0x14AA66C", Slot = "15")]
		public override bool SupportsCoordinateSystem(int coord)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DD7")]
		[Address(RVA = "0x14AA75C", Offset = "0x14AA75C", VA = "0x14AA75C", Slot = "5")]
		public override ECFieldElement FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000DD8")]
		[Address(RVA = "0x14AA8D0", Offset = "0x14AA8D0", VA = "0x14AA8D0", Slot = "12")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x6000DD9")]
		[Address(RVA = "0x14AAA28", Offset = "0x14AAA28", VA = "0x14AAA28", Slot = "13")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
			return null;
		}
	}
	[Token(Token = "0x20001C2")]
	internal class SecP160K1Point : AbstractFpPoint
	{
		[Token(Token = "0x6000DDB")]
		[Address(RVA = "0x14AA60C", Offset = "0x14AA60C", VA = "0x14AA60C")]
		public SecP160K1Point(ECCurve curve, ECFieldElement x, ECFieldElement y)
		{
		}

		[Token(Token = "0x6000DDC")]
		[Address(RVA = "0x14AA958", Offset = "0x14AA958", VA = "0x14AA958")]
		public SecP160K1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression)
		{
		}

		[Token(Token = "0x6000DDD")]
		[Address(RVA = "0x14AAABC", Offset = "0x14AAABC", VA = "0x14AAABC")]
		internal SecP160K1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
		}

		[Token(Token = "0x6000DDE")]
		[Address(RVA = "0x14AAB44", Offset = "0x14AAB44", VA = "0x14AAB44", Slot = "6")]
		protected override ECPoint Detach()
		{
			return null;
		}

		[Token(Token = "0x6000DDF")]
		[Address(RVA = "0x14AABE4", Offset = "0x14AABE4", VA = "0x14AABE4", Slot = "27")]
		public override ECPoint Add(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6000DE0")]
		[Address(RVA = "0x14AB858", Offset = "0x14AB858", VA = "0x14AB858", Slot = "31")]
		public override ECPoint Twice()
		{
			return null;
		}

		[Token(Token = "0x6000DE1")]
		[Address(RVA = "0x14ABD68", Offset = "0x14ABD68", VA = "0x14ABD68", Slot = "33")]
		public override ECPoint TwicePlus(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0x14ABE38", Offset = "0x14ABE38", VA = "0x14ABE38", Slot = "34")]
		public override ECPoint ThreeTimes()
		{
			return null;
		}

		[Token(Token = "0x6000DE3")]
		[Address(RVA = "0x14ABEB8", Offset = "0x14ABEB8", VA = "0x14ABEB8", Slot = "29")]
		public override ECPoint Negate()
		{
			return null;
		}
	}
	[Token(Token = "0x20001C3")]
	internal class SecP160R1Curve : AbstractFpCurve
	{
		[Token(Token = "0x4000939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly BigInteger q;

		[Token(Token = "0x400093A")]
		private const int SecP160R1_DEFAULT_COORDS = 2;

		[Token(Token = "0x400093B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected readonly SecP160R1Point m_infinity;

		[Token(Token = "0x17000113")]
		public virtual BigInteger Q
		{
			[Token(Token = "0x6000DE7")]
			[Address(RVA = "0x14AC1D8", Offset = "0x14AC1D8", VA = "0x14AC1D8", Slot = "36")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000114")]
		public override ECPoint Infinity
		{
			[Token(Token = "0x6000DE8")]
			[Address(RVA = "0x14AC240", Offset = "0x14AC240", VA = "0x14AC240", Slot = "21")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000115")]
		public override int FieldSize
		{
			[Token(Token = "0x6000DE9")]
			[Address(RVA = "0x14AC248", Offset = "0x14AC248", VA = "0x14AC248", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000DE4")]
		[Address(RVA = "0x14ABF90", Offset = "0x14ABF90", VA = "0x14ABF90")]
		public SecP160R1Curve()
		{
		}

		[Token(Token = "0x6000DE5")]
		[Address(RVA = "0x14AC174", Offset = "0x14AC174", VA = "0x14AC174", Slot = "11")]
		protected override ECCurve CloneCurve()
		{
			return null;
		}

		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0x14AC1CC", Offset = "0x14AC1CC", VA = "0x14AC1CC", Slot = "15")]
		public override bool SupportsCoordinateSystem(int coord)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0x14AC2BC", Offset = "0x14AC2BC", VA = "0x14AC2BC", Slot = "5")]
		public override ECFieldElement FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0x14AC430", Offset = "0x14AC430", VA = "0x14AC430", Slot = "12")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0x14AC588", Offset = "0x14AC588", VA = "0x14AC588", Slot = "13")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
			return null;
		}
	}
	[Token(Token = "0x20001C4")]
	internal class SecP160R1Field
	{
		[Token(Token = "0x400093C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly uint[] P;

		[Token(Token = "0x400093D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly uint[] PExt;

		[Token(Token = "0x400093E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly uint[] PExtInv;

		[Token(Token = "0x400093F")]
		private const uint P4 = uint.MaxValue;

		[Token(Token = "0x4000940")]
		private const uint PExt9 = uint.MaxValue;

		[Token(Token = "0x4000941")]
		private const uint PInv = 2147483649u;

		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0x14AC6D8", Offset = "0x14AC6D8", VA = "0x14AC6D8")]
		public static void Add(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6000DEF")]
		[Address(RVA = "0x14AC7C8", Offset = "0x14AC7C8", VA = "0x14AC7C8")]
		public static void AddExt(uint[] xx, uint[] yy, uint[] zz)
		{
		}

		[Token(Token = "0x6000DF0")]
		[Address(RVA = "0x14AC92C", Offset = "0x14AC92C", VA = "0x14AC92C")]
		public static void AddOne(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000DF1")]
		[Address(RVA = "0x14ACA18", Offset = "0x14ACA18", VA = "0x14ACA18")]
		public static uint[] FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000DF2")]
		[Address(RVA = "0x14ACB04", Offset = "0x14ACB04", VA = "0x14ACB04")]
		public static void Half(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0x14ACBE4", Offset = "0x14ACBE4", VA = "0x14ACBE4")]
		public static void Multiply(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0x14ACDFC", Offset = "0x14ACDFC", VA = "0x14ACDFC")]
		public static void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz)
		{
		}

		[Token(Token = "0x6000DF5")]
		[Address(RVA = "0x14ACF5C", Offset = "0x14ACF5C", VA = "0x14ACF5C")]
		public static void Negate(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000DF6")]
		[Address(RVA = "0x14ACC7C", Offset = "0x14ACC7C", VA = "0x14ACC7C")]
		public static void Reduce(uint[] xx, uint[] z)
		{
		}

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0x14AD008", Offset = "0x14AD008", VA = "0x14AD008")]
		public static void Reduce32(uint x, uint[] z)
		{
		}

		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0x14AD0FC", Offset = "0x14AD0FC", VA = "0x14AD0FC")]
		public static void Square(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0x14AD18C", Offset = "0x14AD18C", VA = "0x14AD18C")]
		public static void SquareN(uint[] x, int n, uint[] z)
		{
		}

		[Token(Token = "0x6000DFA")]
		[Address(RVA = "0x14AD270", Offset = "0x14AD270", VA = "0x14AD270")]
		public static void Subtract(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6000DFB")]
		[Address(RVA = "0x14AD2B4", Offset = "0x14AD2B4", VA = "0x14AD2B4")]
		public static void SubtractExt(uint[] xx, uint[] yy, uint[] zz)
		{
		}

		[Token(Token = "0x6000DFC")]
		[Address(RVA = "0x14AD3B0", Offset = "0x14AD3B0", VA = "0x14AD3B0")]
		public static void Twice(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0x14AD4A0", Offset = "0x14AD4A0", VA = "0x14AD4A0")]
		public SecP160R1Field()
		{
		}
	}
	[Token(Token = "0x20001C5")]
	internal class SecP160R1FieldElement : ECFieldElement
	{
		[Token(Token = "0x4000942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly BigInteger Q;

		[Token(Token = "0x4000943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected internal readonly uint[] x;

		[Token(Token = "0x17000116")]
		public override bool IsZero
		{
			[Token(Token = "0x6000E02")]
			[Address(RVA = "0x14AD5E8", Offset = "0x14AD5E8", VA = "0x14AD5E8", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000117")]
		public override bool IsOne
		{
			[Token(Token = "0x6000E03")]
			[Address(RVA = "0x14AD5F4", Offset = "0x14AD5F4", VA = "0x14AD5F4", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000118")]
		public override string FieldName
		{
			[Token(Token = "0x6000E06")]
			[Address(RVA = "0x14AD634", Offset = "0x14AD634", VA = "0x14AD634", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000119")]
		public override int FieldSize
		{
			[Token(Token = "0x6000E07")]
			[Address(RVA = "0x14AD67C", Offset = "0x14AD67C", VA = "0x14AD67C", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0x14AC31C", Offset = "0x14AC31C", VA = "0x14AC31C")]
		public SecP160R1FieldElement(BigInteger x)
		{
		}

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0x14AD58C", Offset = "0x14AD58C", VA = "0x14AD58C")]
		public SecP160R1FieldElement()
		{
		}

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0x14AD5BC", Offset = "0x14AD5BC", VA = "0x14AD5BC")]
		protected internal SecP160R1FieldElement(uint[] x)
		{
		}

		[Token(Token = "0x6000E04")]
		[Address(RVA = "0x14AD600", Offset = "0x14AD600", VA = "0x14AD600", Slot = "24")]
		public override bool TestBitZero()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E05")]
		[Address(RVA = "0x14AD628", Offset = "0x14AD628", VA = "0x14AD628", Slot = "4")]
		public override BigInteger ToBigInteger()
		{
			return null;
		}

		[Token(Token = "0x6000E08")]
		[Address(RVA = "0x14AD6F0", Offset = "0x14AD6F0", VA = "0x14AD6F0", Slot = "7")]
		public override ECFieldElement Add(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000E09")]
		[Address(RVA = "0x14AD7E0", Offset = "0x14AD7E0", VA = "0x14AD7E0", Slot = "8")]
		public override ECFieldElement AddOne()
		{
			return null;
		}

		[Token(Token = "0x6000E0A")]
		[Address(RVA = "0x14AD884", Offset = "0x14AD884", VA = "0x14AD884", Slot = "9")]
		public override ECFieldElement Subtract(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0x14AD974", Offset = "0x14AD974", VA = "0x14AD974", Slot = "10")]
		public override ECFieldElement Multiply(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000E0C")]
		[Address(RVA = "0x14ADA64", Offset = "0x14ADA64", VA = "0x14ADA64", Slot = "11")]
		public override ECFieldElement Divide(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000E0D")]
		[Address(RVA = "0x14ADB6C", Offset = "0x14ADB6C", VA = "0x14ADB6C", Slot = "12")]
		public override ECFieldElement Negate()
		{
			return null;
		}

		[Token(Token = "0x6000E0E")]
		[Address(RVA = "0x14ADC10", Offset = "0x14ADC10", VA = "0x14ADC10", Slot = "13")]
		public override ECFieldElement Square()
		{
			return null;
		}

		[Token(Token = "0x6000E0F")]
		[Address(RVA = "0x14ADCB4", Offset = "0x14ADCB4", VA = "0x14ADCB4", Slot = "14")]
		public override ECFieldElement Invert()
		{
			return null;
		}

		[Token(Token = "0x6000E10")]
		[Address(RVA = "0x14ADD6C", Offset = "0x14ADD6C", VA = "0x14ADD6C", Slot = "15")]
		public override ECFieldElement Sqrt()
		{
			return null;
		}

		[Token(Token = "0x6000E11")]
		[Address(RVA = "0x14ADF64", Offset = "0x14ADF64", VA = "0x14ADF64", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E12")]
		[Address(RVA = "0x14AE000", Offset = "0x14AE000", VA = "0x14AE000", Slot = "25")]
		public override bool Equals(ECFieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E13")]
		[Address(RVA = "0x14AE09C", Offset = "0x14AE09C", VA = "0x14AE09C", Slot = "27")]
		public virtual bool Equals(SecP160R1FieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E14")]
		[Address(RVA = "0x14AE0C8", Offset = "0x14AE0C8", VA = "0x14AE0C8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001C6")]
	internal class SecP160R1Point : AbstractFpPoint
	{
		[Token(Token = "0x6000E16")]
		[Address(RVA = "0x14AC16C", Offset = "0x14AC16C", VA = "0x14AC16C")]
		public SecP160R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y)
		{
		}

		[Token(Token = "0x6000E17")]
		[Address(RVA = "0x14AC4B8", Offset = "0x14AC4B8", VA = "0x14AC4B8")]
		public SecP160R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression)
		{
		}

		[Token(Token = "0x6000E18")]
		[Address(RVA = "0x14AC61C", Offset = "0x14AC61C", VA = "0x14AC61C")]
		internal SecP160R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
		}

		[Token(Token = "0x6000E19")]
		[Address(RVA = "0x14AE1E4", Offset = "0x14AE1E4", VA = "0x14AE1E4", Slot = "6")]
		protected override ECPoint Detach()
		{
			return null;
		}

		[Token(Token = "0x6000E1A")]
		[Address(RVA = "0x14AE284", Offset = "0x14AE284", VA = "0x14AE284", Slot = "27")]
		public override ECPoint Add(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0x14AE94C", Offset = "0x14AE94C", VA = "0x14AE94C", Slot = "31")]
		public override ECPoint Twice()
		{
			return null;
		}

		[Token(Token = "0x6000E1C")]
		[Address(RVA = "0x14AEE18", Offset = "0x14AEE18", VA = "0x14AEE18", Slot = "33")]
		public override ECPoint TwicePlus(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6000E1D")]
		[Address(RVA = "0x14AEEE8", Offset = "0x14AEEE8", VA = "0x14AEEE8", Slot = "34")]
		public override ECPoint ThreeTimes()
		{
			return null;
		}

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0x14AEF68", Offset = "0x14AEF68", VA = "0x14AEF68", Slot = "29")]
		public override ECPoint Negate()
		{
			return null;
		}
	}
	[Token(Token = "0x20001C7")]
	internal class SecP160R2Curve : AbstractFpCurve
	{
		[Token(Token = "0x4000944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly BigInteger q;

		[Token(Token = "0x4000945")]
		private const int SecP160R2_DEFAULT_COORDS = 2;

		[Token(Token = "0x4000946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected readonly SecP160R2Point m_infinity;

		[Token(Token = "0x1700011A")]
		public virtual BigInteger Q
		{
			[Token(Token = "0x6000E22")]
			[Address(RVA = "0x14AF288", Offset = "0x14AF288", VA = "0x14AF288", Slot = "36")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011B")]
		public override ECPoint Infinity
		{
			[Token(Token = "0x6000E23")]
			[Address(RVA = "0x14AF2F0", Offset = "0x14AF2F0", VA = "0x14AF2F0", Slot = "21")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011C")]
		public override int FieldSize
		{
			[Token(Token = "0x6000E24")]
			[Address(RVA = "0x14AF2F8", Offset = "0x14AF2F8", VA = "0x14AF2F8", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000E1F")]
		[Address(RVA = "0x14AF040", Offset = "0x14AF040", VA = "0x14AF040")]
		public SecP160R2Curve()
		{
		}

		[Token(Token = "0x6000E20")]
		[Address(RVA = "0x14AF224", Offset = "0x14AF224", VA = "0x14AF224", Slot = "11")]
		protected override ECCurve CloneCurve()
		{
			return null;
		}

		[Token(Token = "0x6000E21")]
		[Address(RVA = "0x14AF27C", Offset = "0x14AF27C", VA = "0x14AF27C", Slot = "15")]
		public override bool SupportsCoordinateSystem(int coord)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E25")]
		[Address(RVA = "0x14AF36C", Offset = "0x14AF36C", VA = "0x14AF36C", Slot = "5")]
		public override ECFieldElement FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000E26")]
		[Address(RVA = "0x14AF3CC", Offset = "0x14AF3CC", VA = "0x14AF3CC", Slot = "12")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x6000E27")]
		[Address(RVA = "0x14AF524", Offset = "0x14AF524", VA = "0x14AF524", Slot = "13")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
			return null;
		}
	}
	[Token(Token = "0x20001C8")]
	internal class SecP160R2Field
	{
		[Token(Token = "0x4000947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly uint[] P;

		[Token(Token = "0x4000948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly uint[] PExt;

		[Token(Token = "0x4000949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly uint[] PExtInv;

		[Token(Token = "0x400094A")]
		private const uint P4 = uint.MaxValue;

		[Token(Token = "0x400094B")]
		private const uint PExt9 = uint.MaxValue;

		[Token(Token = "0x400094C")]
		private const uint PInv33 = 21389u;

		[Token(Token = "0x6000E29")]
		[Address(RVA = "0x14AF674", Offset = "0x14AF674", VA = "0x14AF674")]
		public static void Add(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6000E2A")]
		[Address(RVA = "0x14AF764", Offset = "0x14AF764", VA = "0x14AF764")]
		public static void AddExt(uint[] xx, uint[] yy, uint[] zz)
		{
		}

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0x14AF8C8", Offset = "0x14AF8C8", VA = "0x14AF8C8")]
		public static void AddOne(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0x14AF9B4", Offset = "0x14AF9B4", VA = "0x14AF9B4")]
		public static uint[] FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0x14AFAA0", Offset = "0x14AFAA0", VA = "0x14AFAA0")]
		public static void Half(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0x14AB33C", Offset = "0x14AB33C", VA = "0x14AB33C")]
		public static void Multiply(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0x14AB5E4", Offset = "0x14AB5E4", VA = "0x14AB5E4")]
		public static void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz)
		{
		}

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0x14AB418", Offset = "0x14AB418", VA = "0x14AB418")]
		public static void Negate(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0x14AB744", Offset = "0x14AB744", VA = "0x14AB744")]
		public static void Reduce(uint[] xx, uint[] z)
		{
		}

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0x14AB4C4", Offset = "0x14AB4C4", VA = "0x14AB4C4")]
		public static void Reduce32(uint x, uint[] z)
		{
		}

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0x14AB2AC", Offset = "0x14AB2AC", VA = "0x14AB2AC")]
		public static void Square(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000E34")]
		[Address(RVA = "0x14AFB80", Offset = "0x14AFB80", VA = "0x14AFB80")]
		public static void SquareN(uint[] x, int n, uint[] z)
		{
		}

		[Token(Token = "0x6000E35")]
		[Address(RVA = "0x14AB3D4", Offset = "0x14AB3D4", VA = "0x14AB3D4")]
		public static void Subtract(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6000E36")]
		[Address(RVA = "0x14AFC64", Offset = "0x14AFC64", VA = "0x14AFC64")]
		public static void SubtractExt(uint[] xx, uint[] yy, uint[] zz)
		{
		}

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0x14ABC78", Offset = "0x14ABC78", VA = "0x14ABC78")]
		public static void Twice(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0x14AFD60", Offset = "0x14AFD60", VA = "0x14AFD60")]
		public SecP160R2Field()
		{
		}
	}
	[Token(Token = "0x20001C9")]
	internal class SecP160R2FieldElement : ECFieldElement
	{
		[Token(Token = "0x400094D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly BigInteger Q;

		[Token(Token = "0x400094E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected internal readonly uint[] x;

		[Token(Token = "0x1700011D")]
		public override bool IsZero
		{
			[Token(Token = "0x6000E3D")]
			[Address(RVA = "0x14AFE7C", Offset = "0x14AFE7C", VA = "0x14AFE7C", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700011E")]
		public override bool IsOne
		{
			[Token(Token = "0x6000E3E")]
			[Address(RVA = "0x14AFE88", Offset = "0x14AFE88", VA = "0x14AFE88", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700011F")]
		public override string FieldName
		{
			[Token(Token = "0x6000E41")]
			[Address(RVA = "0x14AFEC8", Offset = "0x14AFEC8", VA = "0x14AFEC8", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000120")]
		public override int FieldSize
		{
			[Token(Token = "0x6000E42")]
			[Address(RVA = "0x14AFF10", Offset = "0x14AFF10", VA = "0x14AFF10", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000E3A")]
		[Address(RVA = "0x14AA7BC", Offset = "0x14AA7BC", VA = "0x14AA7BC")]
		public SecP160R2FieldElement(BigInteger x)
		{
		}

		[Token(Token = "0x6000E3B")]
		[Address(RVA = "0x14AFE4C", Offset = "0x14AFE4C", VA = "0x14AFE4C")]
		public SecP160R2FieldElement()
		{
		}

		[Token(Token = "0x6000E3C")]
		[Address(RVA = "0x14AB5B8", Offset = "0x14AB5B8", VA = "0x14AB5B8")]
		protected internal SecP160R2FieldElement(uint[] x)
		{
		}

		[Token(Token = "0x6000E3F")]
		[Address(RVA = "0x14AFE94", Offset = "0x14AFE94", VA = "0x14AFE94", Slot = "24")]
		public override bool TestBitZero()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E40")]
		[Address(RVA = "0x14AFEBC", Offset = "0x14AFEBC", VA = "0x14AFEBC", Slot = "4")]
		public override BigInteger ToBigInteger()
		{
			return null;
		}

		[Token(Token = "0x6000E43")]
		[Address(RVA = "0x14AFF84", Offset = "0x14AFF84", VA = "0x14AFF84", Slot = "7")]
		public override ECFieldElement Add(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000E44")]
		[Address(RVA = "0x14B0074", Offset = "0x14B0074", VA = "0x14B0074", Slot = "8")]
		public override ECFieldElement AddOne()
		{
			return null;
		}

		[Token(Token = "0x6000E45")]
		[Address(RVA = "0x14B0118", Offset = "0x14B0118", VA = "0x14B0118", Slot = "9")]
		public override ECFieldElement Subtract(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000E46")]
		[Address(RVA = "0x14B0208", Offset = "0x14B0208", VA = "0x14B0208", Slot = "10")]
		public override ECFieldElement Multiply(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000E47")]
		[Address(RVA = "0x14B02F8", Offset = "0x14B02F8", VA = "0x14B02F8", Slot = "11")]
		public override ECFieldElement Divide(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000E48")]
		[Address(RVA = "0x14B0400", Offset = "0x14B0400", VA = "0x14B0400", Slot = "12")]
		public override ECFieldElement Negate()
		{
			return null;
		}

		[Token(Token = "0x6000E49")]
		[Address(RVA = "0x14B04A4", Offset = "0x14B04A4", VA = "0x14B04A4", Slot = "13")]
		public override ECFieldElement Square()
		{
			return null;
		}

		[Token(Token = "0x6000E4A")]
		[Address(RVA = "0x14B0548", Offset = "0x14B0548", VA = "0x14B0548", Slot = "14")]
		public override ECFieldElement Invert()
		{
			return null;
		}

		[Token(Token = "0x6000E4B")]
		[Address(RVA = "0x14B0600", Offset = "0x14B0600", VA = "0x14B0600", Slot = "15")]
		public override ECFieldElement Sqrt()
		{
			return null;
		}

		[Token(Token = "0x6000E4C")]
		[Address(RVA = "0x14B08F0", Offset = "0x14B08F0", VA = "0x14B08F0", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E4D")]
		[Address(RVA = "0x14B098C", Offset = "0x14B098C", VA = "0x14B098C", Slot = "25")]
		public override bool Equals(ECFieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E4E")]
		[Address(RVA = "0x14B0A28", Offset = "0x14B0A28", VA = "0x14B0A28", Slot = "27")]
		public virtual bool Equals(SecP160R2FieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E4F")]
		[Address(RVA = "0x14B0A54", Offset = "0x14B0A54", VA = "0x14B0A54", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001CA")]
	internal class SecP160R2Point : AbstractFpPoint
	{
		[Token(Token = "0x6000E51")]
		[Address(RVA = "0x14AF21C", Offset = "0x14AF21C", VA = "0x14AF21C")]
		public SecP160R2Point(ECCurve curve, ECFieldElement x, ECFieldElement y)
		{
		}

		[Token(Token = "0x6000E52")]
		[Address(RVA = "0x14AF454", Offset = "0x14AF454", VA = "0x14AF454")]
		public SecP160R2Point(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression)
		{
		}

		[Token(Token = "0x6000E53")]
		[Address(RVA = "0x14AF5B8", Offset = "0x14AF5B8", VA = "0x14AF5B8")]
		internal SecP160R2Point(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
		}

		[Token(Token = "0x6000E54")]
		[Address(RVA = "0x14B0B70", Offset = "0x14B0B70", VA = "0x14B0B70", Slot = "6")]
		protected override ECPoint Detach()
		{
			return null;
		}

		[Token(Token = "0x6000E55")]
		[Address(RVA = "0x14B0C10", Offset = "0x14B0C10", VA = "0x14B0C10", Slot = "27")]
		public override ECPoint Add(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6000E56")]
		[Address(RVA = "0x14B12D8", Offset = "0x14B12D8", VA = "0x14B12D8", Slot = "31")]
		public override ECPoint Twice()
		{
			return null;
		}

		[Token(Token = "0x6000E57")]
		[Address(RVA = "0x14B17A4", Offset = "0x14B17A4", VA = "0x14B17A4", Slot = "33")]
		public override ECPoint TwicePlus(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6000E58")]
		[Address(RVA = "0x14B1874", Offset = "0x14B1874", VA = "0x14B1874", Slot = "34")]
		public override ECPoint ThreeTimes()
		{
			return null;
		}

		[Token(Token = "0x6000E59")]
		[Address(RVA = "0x14B18F4", Offset = "0x14B18F4", VA = "0x14B18F4", Slot = "29")]
		public override ECPoint Negate()
		{
			return null;
		}
	}
	[Token(Token = "0x20001CB")]
	internal class SecP192K1Curve : AbstractFpCurve
	{
		[Token(Token = "0x400094F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly BigInteger q;

		[Token(Token = "0x4000950")]
		private const int SECP192K1_DEFAULT_COORDS = 2;

		[Token(Token = "0x4000951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected readonly SecP192K1Point m_infinity;

		[Token(Token = "0x17000121")]
		public virtual BigInteger Q
		{
			[Token(Token = "0x6000E5D")]
			[Address(RVA = "0x14B1BB0", Offset = "0x14B1BB0", VA = "0x14B1BB0", Slot = "36")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000122")]
		public override ECPoint Infinity
		{
			[Token(Token = "0x6000E5E")]
			[Address(RVA = "0x14B1C18", Offset = "0x14B1C18", VA = "0x14B1C18", Slot = "21")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000123")]
		public override int FieldSize
		{
			[Token(Token = "0x6000E5F")]
			[Address(RVA = "0x14B1C20", Offset = "0x14B1C20", VA = "0x14B1C20", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000E5A")]
		[Address(RVA = "0x14B19CC", Offset = "0x14B19CC", VA = "0x14B19CC")]
		public SecP192K1Curve()
		{
		}

		[Token(Token = "0x6000E5B")]
		[Address(RVA = "0x14B1B4C", Offset = "0x14B1B4C", VA = "0x14B1B4C", Slot = "11")]
		protected override ECCurve CloneCurve()
		{
			return null;
		}

		[Token(Token = "0x6000E5C")]
		[Address(RVA = "0x14B1BA4", Offset = "0x14B1BA4", VA = "0x14B1BA4", Slot = "15")]
		public override bool SupportsCoordinateSystem(int coord)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E60")]
		[Address(RVA = "0x14B1C94", Offset = "0x14B1C94", VA = "0x14B1C94", Slot = "5")]
		public override ECFieldElement FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000E61")]
		[Address(RVA = "0x14B1CF8", Offset = "0x14B1CF8", VA = "0x14B1CF8", Slot = "12")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x6000E62")]
		[Address(RVA = "0x14B1D84", Offset = "0x14B1D84", VA = "0x14B1D84", Slot = "13")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
			return null;
		}
	}
	[Token(Token = "0x20001CC")]
	internal class SecP192K1Field
	{
		[Token(Token = "0x4000952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly uint[] P;

		[Token(Token = "0x4000953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly uint[] PExt;

		[Token(Token = "0x4000954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly uint[] PExtInv;

		[Token(Token = "0x4000955")]
		private const uint P5 = uint.MaxValue;

		[Token(Token = "0x4000956")]
		private const uint PExt11 = uint.MaxValue;

		[Token(Token = "0x4000957")]
		private const uint PInv33 = 4553u;

		[Token(Token = "0x6000E64")]
		[Address(RVA = "0x14B1EC8", Offset = "0x14B1EC8", VA = "0x14B1EC8")]
		public static void Add(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6000E65")]
		[Address(RVA = "0x14B1FB8", Offset = "0x14B1FB8", VA = "0x14B1FB8")]
		public static void AddExt(uint[] xx, uint[] yy, uint[] zz)
		{
		}

		[Token(Token = "0x6000E66")]
		[Address(RVA = "0x14B211C", Offset = "0x14B211C", VA = "0x14B211C")]
		public static void AddOne(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000E67")]
		[Address(RVA = "0x14B2208", Offset = "0x14B2208", VA = "0x14B2208")]
		public static uint[] FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000E68")]
		[Address(RVA = "0x14B22F4", Offset = "0x14B22F4", VA = "0x14B22F4")]
		public static void Half(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000E69")]
		[Address(RVA = "0x14B23D4", Offset = "0x14B23D4", VA = "0x14B23D4")]
		public static void Multiply(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6000E6A")]
		[Address(RVA = "0x14B2580", Offset = "0x14B2580", VA = "0x14B2580")]
		public static void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz)
		{
		}

		[Token(Token = "0x6000E6B")]
		[Address(RVA = "0x14B26E0", Offset = "0x14B26E0", VA = "0x14B26E0")]
		public static void Negate(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000E6C")]
		[Address(RVA = "0x14B246C", Offset = "0x14B246C", VA = "0x14B246C")]
		public static void Reduce(uint[] xx, uint[] z)
		{
		}

		[Token(Token = "0x6000E6D")]
		[Address(RVA = "0x14B278C", Offset = "0x14B278C", VA = "0x14B278C")]
		public static void Reduce32(uint x, uint[] z)
		{
		}

		[Token(Token = "0x6000E6E")]
		[Address(RVA = "0x14B2880", Offset = "0x14B2880", VA = "0x14B2880")]
		public static void Square(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000E6F")]
		[Address(RVA = "0x14B2910", Offset = "0x14B2910", VA = "0x14B2910")]
		public static void SquareN(uint[] x, int n, uint[] z)
		{
		}

		[Token(Token = "0x6000E70")]
		[Address(RVA = "0x14B29F4", Offset = "0x14B29F4", VA = "0x14B29F4")]
		public static void Subtract(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6000E71")]
		[Address(RVA = "0x14B2A38", Offset = "0x14B2A38", VA = "0x14B2A38")]
		public static void SubtractExt(uint[] xx, uint[] yy, uint[] zz)
		{
		}

		[Token(Token = "0x6000E72")]
		[Address(RVA = "0x14B2B34", Offset = "0x14B2B34", VA = "0x14B2B34")]
		public static void Twice(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000E73")]
		[Address(RVA = "0x14B2C24", Offset = "0x14B2C24", VA = "0x14B2C24")]
		public SecP192K1Field()
		{
		}
	}
	[Token(Token = "0x20001CD")]
	internal class SecP192K1FieldElement : ECFieldElement
	{
		[Token(Token = "0x4000958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly BigInteger Q;

		[Token(Token = "0x4000959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected internal readonly uint[] x;

		[Token(Token = "0x17000124")]
		public override bool IsZero
		{
			[Token(Token = "0x6000E78")]
			[Address(RVA = "0x14EAD64", Offset = "0x14EAD64", VA = "0x14EAD64", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000125")]
		public override bool IsOne
		{
			[Token(Token = "0x6000E79")]
			[Address(RVA = "0x14EAD70", Offset = "0x14EAD70", VA = "0x14EAD70", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000126")]
		public override string FieldName
		{
			[Token(Token = "0x6000E7C")]
			[Address(RVA = "0x14EADB0", Offset = "0x14EADB0", VA = "0x14EADB0", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000127")]
		public override int FieldSize
		{
			[Token(Token = "0x6000E7D")]
			[Address(RVA = "0x14EADF8", Offset = "0x14EADF8", VA = "0x14EADF8", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000E75")]
		[Address(RVA = "0x14EABF0", Offset = "0x14EABF0", VA = "0x14EABF0")]
		public SecP192K1FieldElement(BigInteger x)
		{
		}

		[Token(Token = "0x6000E76")]
		[Address(RVA = "0x14EAD08", Offset = "0x14EAD08", VA = "0x14EAD08")]
		public SecP192K1FieldElement()
		{
		}

		[Token(Token = "0x6000E77")]
		[Address(RVA = "0x14EAD38", Offset = "0x14EAD38", VA = "0x14EAD38")]
		protected internal SecP192K1FieldElement(uint[] x)
		{
		}

		[Token(Token = "0x6000E7A")]
		[Address(RVA = "0x14EAD7C", Offset = "0x14EAD7C", VA = "0x14EAD7C", Slot = "24")]
		public override bool TestBitZero()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E7B")]
		[Address(RVA = "0x14EADA4", Offset = "0x14EADA4", VA = "0x14EADA4", Slot = "4")]
		public override BigInteger ToBigInteger()
		{
			return null;
		}

		[Token(Token = "0x6000E7E")]
		[Address(RVA = "0x14EAE6C", Offset = "0x14EAE6C", VA = "0x14EAE6C", Slot = "7")]
		public override ECFieldElement Add(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000E7F")]
		[Address(RVA = "0x14EAF60", Offset = "0x14EAF60", VA = "0x14EAF60", Slot = "8")]
		public override ECFieldElement AddOne()
		{
			return null;
		}

		[Token(Token = "0x6000E80")]
		[Address(RVA = "0x14EB008", Offset = "0x14EB008", VA = "0x14EB008", Slot = "9")]
		public override ECFieldElement Subtract(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000E81")]
		[Address(RVA = "0x14EB0FC", Offset = "0x14EB0FC", VA = "0x14EB0FC", Slot = "10")]
		public override ECFieldElement Multiply(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000E82")]
		[Address(RVA = "0x14EB1F0", Offset = "0x14EB1F0", VA = "0x14EB1F0", Slot = "11")]
		public override ECFieldElement Divide(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000E83")]
		[Address(RVA = "0x14EB2FC", Offset = "0x14EB2FC", VA = "0x14EB2FC", Slot = "12")]
		public override ECFieldElement Negate()
		{
			return null;
		}

		[Token(Token = "0x6000E84")]
		[Address(RVA = "0x14EB3A4", Offset = "0x14EB3A4", VA = "0x14EB3A4", Slot = "13")]
		public override ECFieldElement Square()
		{
			return null;
		}

		[Token(Token = "0x6000E85")]
		[Address(RVA = "0x14EB44C", Offset = "0x14EB44C", VA = "0x14EB44C", Slot = "14")]
		public override ECFieldElement Invert()
		{
			return null;
		}

		[Token(Token = "0x6000E86")]
		[Address(RVA = "0x14EB504", Offset = "0x14EB504", VA = "0x14EB504", Slot = "15")]
		public override ECFieldElement Sqrt()
		{
			return null;
		}

		[Token(Token = "0x6000E87")]
		[Address(RVA = "0x14EB828", Offset = "0x14EB828", VA = "0x14EB828", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E88")]
		[Address(RVA = "0x14EB8C4", Offset = "0x14EB8C4", VA = "0x14EB8C4", Slot = "25")]
		public override bool Equals(ECFieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E89")]
		[Address(RVA = "0x14EB960", Offset = "0x14EB960", VA = "0x14EB960", Slot = "27")]
		public virtual bool Equals(SecP192K1FieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E8A")]
		[Address(RVA = "0x14EB98C", Offset = "0x14EB98C", VA = "0x14EB98C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001CE")]
	internal class SecP192K1Point : AbstractFpPoint
	{
		[Token(Token = "0x6000E8C")]
		[Address(RVA = "0x14EBAA8", Offset = "0x14EBAA8", VA = "0x14EBAA8")]
		public SecP192K1Point(ECCurve curve, ECFieldElement x, ECFieldElement y)
		{
		}

		[Token(Token = "0x6000E8D")]
		[Address(RVA = "0x14EBAB0", Offset = "0x14EBAB0", VA = "0x14EBAB0")]
		public SecP192K1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression)
		{
		}

		[Token(Token = "0x6000E8E")]
		[Address(RVA = "0x14EBB80", Offset = "0x14EBB80", VA = "0x14EBB80")]
		internal SecP192K1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
		}

		[Token(Token = "0x6000E8F")]
		[Address(RVA = "0x14EBB8C", Offset = "0x14EBB8C", VA = "0x14EBB8C", Slot = "6")]
		protected override ECPoint Detach()
		{
			return null;
		}

		[Token(Token = "0x6000E90")]
		[Address(RVA = "0x14EBC2C", Offset = "0x14EBC2C", VA = "0x14EBC2C", Slot = "27")]
		public override ECPoint Add(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6000E91")]
		[Address(RVA = "0x14EC34C", Offset = "0x14EC34C", VA = "0x14EC34C", Slot = "31")]
		public override ECPoint Twice()
		{
			return null;
		}

		[Token(Token = "0x6000E92")]
		[Address(RVA = "0x14EC7A8", Offset = "0x14EC7A8", VA = "0x14EC7A8", Slot = "33")]
		public override ECPoint TwicePlus(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6000E93")]
		[Address(RVA = "0x14EC878", Offset = "0x14EC878", VA = "0x14EC878", Slot = "34")]
		public override ECPoint ThreeTimes()
		{
			return null;
		}

		[Token(Token = "0x6000E94")]
		[Address(RVA = "0x14EC8F8", Offset = "0x14EC8F8", VA = "0x14EC8F8", Slot = "29")]
		public override ECPoint Negate()
		{
			return null;
		}
	}
	[Token(Token = "0x20001CF")]
	internal class SecP192R1Curve : AbstractFpCurve
	{
		[Token(Token = "0x400095A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly BigInteger q;

		[Token(Token = "0x400095B")]
		private const int SecP192R1_DEFAULT_COORDS = 2;

		[Token(Token = "0x400095C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected readonly SecP192R1Point m_infinity;

		[Token(Token = "0x17000128")]
		public virtual BigInteger Q
		{
			[Token(Token = "0x6000E98")]
			[Address(RVA = "0x14ECC1C", Offset = "0x14ECC1C", VA = "0x14ECC1C", Slot = "36")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000129")]
		public override ECPoint Infinity
		{
			[Token(Token = "0x6000E99")]
			[Address(RVA = "0x14ECC84", Offset = "0x14ECC84", VA = "0x14ECC84", Slot = "21")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012A")]
		public override int FieldSize
		{
			[Token(Token = "0x6000E9A")]
			[Address(RVA = "0x14ECC8C", Offset = "0x14ECC8C", VA = "0x14ECC8C", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000E95")]
		[Address(RVA = "0x14EC9D0", Offset = "0x14EC9D0", VA = "0x14EC9D0")]
		public SecP192R1Curve()
		{
		}

		[Token(Token = "0x6000E96")]
		[Address(RVA = "0x14ECBB8", Offset = "0x14ECBB8", VA = "0x14ECBB8", Slot = "11")]
		protected override ECCurve CloneCurve()
		{
			return null;
		}

		[Token(Token = "0x6000E97")]
		[Address(RVA = "0x14ECC10", Offset = "0x14ECC10", VA = "0x14ECC10", Slot = "15")]
		public override bool SupportsCoordinateSystem(int coord)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0x14ECD00", Offset = "0x14ECD00", VA = "0x14ECD00", Slot = "5")]
		public override ECFieldElement FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0x14ECE74", Offset = "0x14ECE74", VA = "0x14ECE74", Slot = "12")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0x14ECFCC", Offset = "0x14ECFCC", VA = "0x14ECFCC", Slot = "13")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
			return null;
		}
	}
	[Token(Token = "0x20001D0")]
	internal class SecP192R1Field
	{
		[Token(Token = "0x400095D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly uint[] P;

		[Token(Token = "0x400095E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly uint[] PExt;

		[Token(Token = "0x400095F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly uint[] PExtInv;

		[Token(Token = "0x4000960")]
		private const uint P5 = uint.MaxValue;

		[Token(Token = "0x4000961")]
		private const uint PExt11 = uint.MaxValue;

		[Token(Token = "0x6000E9F")]
		[Address(RVA = "0x14ED11C", Offset = "0x14ED11C", VA = "0x14ED11C")]
		public static void Add(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6000EA0")]
		[Address(RVA = "0x14ED2B8", Offset = "0x14ED2B8", VA = "0x14ED2B8")]
		public static void AddExt(uint[] xx, uint[] yy, uint[] zz)
		{
		}

		[Token(Token = "0x6000EA1")]
		[Address(RVA = "0x14ED41C", Offset = "0x14ED41C", VA = "0x14ED41C")]
		public static void AddOne(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000EA2")]
		[Address(RVA = "0x14ED51C", Offset = "0x14ED51C", VA = "0x14ED51C")]
		public static uint[] FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000EA3")]
		[Address(RVA = "0x14ED608", Offset = "0x14ED608", VA = "0x14ED608")]
		public static void Half(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000EA4")]
		[Address(RVA = "0x14ED6E8", Offset = "0x14ED6E8", VA = "0x14ED6E8")]
		public static void Multiply(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6000EA5")]
		[Address(RVA = "0x14ED9AC", Offset = "0x14ED9AC", VA = "0x14ED9AC")]
		public static void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz)
		{
		}

		[Token(Token = "0x6000EA6")]
		[Address(RVA = "0x14EDB0C", Offset = "0x14EDB0C", VA = "0x14EDB0C")]
		public static void Negate(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000EA7")]
		[Address(RVA = "0x14ED780", Offset = "0x14ED780", VA = "0x14ED780")]
		public static void Reduce(uint[] xx, uint[] z)
		{
		}

		[Token(Token = "0x6000EA8")]
		[Address(RVA = "0x14EDBB8", Offset = "0x14EDBB8", VA = "0x14EDBB8")]
		public static void Reduce32(uint x, uint[] z)
		{
		}

		[Token(Token = "0x6000EA9")]
		[Address(RVA = "0x14EDD1C", Offset = "0x14EDD1C", VA = "0x14EDD1C")]
		public static void Square(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0x14EDDAC", Offset = "0x14EDDAC", VA = "0x14EDDAC")]
		public static void SquareN(uint[] x, int n, uint[] z)
		{
		}

		[Token(Token = "0x6000EAB")]
		[Address(RVA = "0x14EDE90", Offset = "0x14EDE90", VA = "0x14EDE90")]
		public static void Subtract(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6000EAC")]
		[Address(RVA = "0x14EDFC4", Offset = "0x14EDFC4", VA = "0x14EDFC4")]
		public static void SubtractExt(uint[] xx, uint[] yy, uint[] zz)
		{
		}

		[Token(Token = "0x6000EAD")]
		[Address(RVA = "0x14EE0C0", Offset = "0x14EE0C0", VA = "0x14EE0C0")]
		public static void Twice(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000EAE")]
		[Address(RVA = "0x14ED220", Offset = "0x14ED220", VA = "0x14ED220")]
		private static void AddPInvTo(uint[] z)
		{
		}

		[Token(Token = "0x6000EAF")]
		[Address(RVA = "0x14EDF2C", Offset = "0x14EDF2C", VA = "0x14EDF2C")]
		private static void SubPInvFrom(uint[] z)
		{
		}

		[Token(Token = "0x6000EB0")]
		[Address(RVA = "0x14EE1C4", Offset = "0x14EE1C4", VA = "0x14EE1C4")]
		public SecP192R1Field()
		{
		}
	}
	[Token(Token = "0x20001D1")]
	internal class SecP192R1FieldElement : ECFieldElement
	{
		[Token(Token = "0x4000962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly BigInteger Q;

		[Token(Token = "0x4000963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected internal readonly uint[] x;

		[Token(Token = "0x1700012B")]
		public override bool IsZero
		{
			[Token(Token = "0x6000EB5")]
			[Address(RVA = "0x14EE30C", Offset = "0x14EE30C", VA = "0x14EE30C", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700012C")]
		public override bool IsOne
		{
			[Token(Token = "0x6000EB6")]
			[Address(RVA = "0x14EE318", Offset = "0x14EE318", VA = "0x14EE318", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700012D")]
		public override string FieldName
		{
			[Token(Token = "0x6000EB9")]
			[Address(RVA = "0x14EE358", Offset = "0x14EE358", VA = "0x14EE358", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012E")]
		public override int FieldSize
		{
			[Token(Token = "0x6000EBA")]
			[Address(RVA = "0x14EE3A0", Offset = "0x14EE3A0", VA = "0x14EE3A0", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000EB2")]
		[Address(RVA = "0x14ECD60", Offset = "0x14ECD60", VA = "0x14ECD60")]
		public SecP192R1FieldElement(BigInteger x)
		{
		}

		[Token(Token = "0x6000EB3")]
		[Address(RVA = "0x14EE2B0", Offset = "0x14EE2B0", VA = "0x14EE2B0")]
		public SecP192R1FieldElement()
		{
		}

		[Token(Token = "0x6000EB4")]
		[Address(RVA = "0x14EE2E0", Offset = "0x14EE2E0", VA = "0x14EE2E0")]
		protected internal SecP192R1FieldElement(uint[] x)
		{
		}

		[Token(Token = "0x6000EB7")]
		[Address(RVA = "0x14EE324", Offset = "0x14EE324", VA = "0x14EE324", Slot = "24")]
		public override bool TestBitZero()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EB8")]
		[Address(RVA = "0x14EE34C", Offset = "0x14EE34C", VA = "0x14EE34C", Slot = "4")]
		public override BigInteger ToBigInteger()
		{
			return null;
		}

		[Token(Token = "0x6000EBB")]
		[Address(RVA = "0x14EE414", Offset = "0x14EE414", VA = "0x14EE414", Slot = "7")]
		public override ECFieldElement Add(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000EBC")]
		[Address(RVA = "0x14EE504", Offset = "0x14EE504", VA = "0x14EE504", Slot = "8")]
		public override ECFieldElement AddOne()
		{
			return null;
		}

		[Token(Token = "0x6000EBD")]
		[Address(RVA = "0x14EE5A8", Offset = "0x14EE5A8", VA = "0x14EE5A8", Slot = "9")]
		public override ECFieldElement Subtract(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0x14EE698", Offset = "0x14EE698", VA = "0x14EE698", Slot = "10")]
		public override ECFieldElement Multiply(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000EBF")]
		[Address(RVA = "0x14EE788", Offset = "0x14EE788", VA = "0x14EE788", Slot = "11")]
		public override ECFieldElement Divide(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000EC0")]
		[Address(RVA = "0x14EE890", Offset = "0x14EE890", VA = "0x14EE890", Slot = "12")]
		public override ECFieldElement Negate()
		{
			return null;
		}

		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0x14EE934", Offset = "0x14EE934", VA = "0x14EE934", Slot = "13")]
		public override ECFieldElement Square()
		{
			return null;
		}

		[Token(Token = "0x6000EC2")]
		[Address(RVA = "0x14EE9D8", Offset = "0x14EE9D8", VA = "0x14EE9D8", Slot = "14")]
		public override ECFieldElement Invert()
		{
			return null;
		}

		[Token(Token = "0x6000EC3")]
		[Address(RVA = "0x14EEA90", Offset = "0x14EEA90", VA = "0x14EEA90", Slot = "15")]
		public override ECFieldElement Sqrt()
		{
			return null;
		}

		[Token(Token = "0x6000EC4")]
		[Address(RVA = "0x14EEC6C", Offset = "0x14EEC6C", VA = "0x14EEC6C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC5")]
		[Address(RVA = "0x14EED08", Offset = "0x14EED08", VA = "0x14EED08", Slot = "25")]
		public override bool Equals(ECFieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC6")]
		[Address(RVA = "0x14EEDA4", Offset = "0x14EEDA4", VA = "0x14EEDA4", Slot = "27")]
		public virtual bool Equals(SecP192R1FieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC7")]
		[Address(RVA = "0x14EEDD0", Offset = "0x14EEDD0", VA = "0x14EEDD0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001D2")]
	internal class SecP192R1Point : AbstractFpPoint
	{
		[Token(Token = "0x6000EC9")]
		[Address(RVA = "0x14ECBB0", Offset = "0x14ECBB0", VA = "0x14ECBB0")]
		public SecP192R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y)
		{
		}

		[Token(Token = "0x6000ECA")]
		[Address(RVA = "0x14ECEFC", Offset = "0x14ECEFC", VA = "0x14ECEFC")]
		public SecP192R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression)
		{
		}

		[Token(Token = "0x6000ECB")]
		[Address(RVA = "0x14ED060", Offset = "0x14ED060", VA = "0x14ED060")]
		internal SecP192R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
		}

		[Token(Token = "0x6000ECC")]
		[Address(RVA = "0x14EEEEC", Offset = "0x14EEEEC", VA = "0x14EEEEC", Slot = "6")]
		protected override ECPoint Detach()
		{
			return null;
		}

		[Token(Token = "0x6000ECD")]
		[Address(RVA = "0x14EEF8C", Offset = "0x14EEF8C", VA = "0x14EEF8C", Slot = "27")]
		public override ECPoint Add(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6000ECE")]
		[Address(RVA = "0x14EF654", Offset = "0x14EF654", VA = "0x14EF654", Slot = "31")]
		public override ECPoint Twice()
		{
			return null;
		}

		[Token(Token = "0x6000ECF")]
		[Address(RVA = "0x14EFB20", Offset = "0x14EFB20", VA = "0x14EFB20", Slot = "33")]
		public override ECPoint TwicePlus(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6000ED0")]
		[Address(RVA = "0x14EFBF0", Offset = "0x14EFBF0", VA = "0x14EFBF0", Slot = "34")]
		public override ECPoint ThreeTimes()
		{
			return null;
		}

		[Token(Token = "0x6000ED1")]
		[Address(RVA = "0x14EFC70", Offset = "0x14EFC70", VA = "0x14EFC70", Slot = "29")]
		public override ECPoint Negate()
		{
			return null;
		}
	}
	[Token(Token = "0x20001D3")]
	internal class SecP224K1Curve : AbstractFpCurve
	{
		[Token(Token = "0x4000964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly BigInteger q;

		[Token(Token = "0x4000965")]
		private const int SECP224K1_DEFAULT_COORDS = 2;

		[Token(Token = "0x4000966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected readonly SecP224K1Point m_infinity;

		[Token(Token = "0x1700012F")]
		public virtual BigInteger Q
		{
			[Token(Token = "0x6000ED5")]
			[Address(RVA = "0x14EFF38", Offset = "0x14EFF38", VA = "0x14EFF38", Slot = "36")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000130")]
		public override ECPoint Infinity
		{
			[Token(Token = "0x6000ED6")]
			[Address(RVA = "0x14EFFA0", Offset = "0x14EFFA0", VA = "0x14EFFA0", Slot = "21")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000131")]
		public override int FieldSize
		{
			[Token(Token = "0x6000ED7")]
			[Address(RVA = "0x14EFFA8", Offset = "0x14EFFA8", VA = "0x14EFFA8", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000ED2")]
		[Address(RVA = "0x14EFD48", Offset = "0x14EFD48", VA = "0x14EFD48")]
		public SecP224K1Curve()
		{
		}

		[Token(Token = "0x6000ED3")]
		[Address(RVA = "0x14EFED4", Offset = "0x14EFED4", VA = "0x14EFED4", Slot = "11")]
		protected override ECCurve CloneCurve()
		{
			return null;
		}

		[Token(Token = "0x6000ED4")]
		[Address(RVA = "0x14EFF2C", Offset = "0x14EFF2C", VA = "0x14EFF2C", Slot = "15")]
		public override bool SupportsCoordinateSystem(int coord)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED8")]
		[Address(RVA = "0x14F001C", Offset = "0x14F001C", VA = "0x14F001C", Slot = "5")]
		public override ECFieldElement FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000ED9")]
		[Address(RVA = "0x14F0190", Offset = "0x14F0190", VA = "0x14F0190", Slot = "12")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x6000EDA")]
		[Address(RVA = "0x14F02E8", Offset = "0x14F02E8", VA = "0x14F02E8", Slot = "13")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
			return null;
		}
	}
	[Token(Token = "0x20001D4")]
	internal class SecP224K1Field
	{
		[Token(Token = "0x4000967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly uint[] P;

		[Token(Token = "0x4000968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly uint[] PExt;

		[Token(Token = "0x4000969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly uint[] PExtInv;

		[Token(Token = "0x400096A")]
		private const uint P6 = uint.MaxValue;

		[Token(Token = "0x400096B")]
		private const uint PExt13 = uint.MaxValue;

		[Token(Token = "0x400096C")]
		private const uint PInv33 = 6803u;

		[Token(Token = "0x6000EDC")]
		[Address(RVA = "0x14F0438", Offset = "0x14F0438", VA = "0x14F0438")]
		public static void Add(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6000EDD")]
		[Address(RVA = "0x14F0528", Offset = "0x14F0528", VA = "0x14F0528")]
		public static void AddExt(uint[] xx, uint[] yy, uint[] zz)
		{
		}

		[Token(Token = "0x6000EDE")]
		[Address(RVA = "0x14F068C", Offset = "0x14F068C", VA = "0x14F068C")]
		public static void AddOne(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000EDF")]
		[Address(RVA = "0x14F0778", Offset = "0x14F0778", VA = "0x14F0778")]
		public static uint[] FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000EE0")]
		[Address(RVA = "0x14F0864", Offset = "0x14F0864", VA = "0x14F0864")]
		public static void Half(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000EE1")]
		[Address(RVA = "0x14F0944", Offset = "0x14F0944", VA = "0x14F0944")]
		public static void Multiply(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6000EE2")]
		[Address(RVA = "0x14F0AF0", Offset = "0x14F0AF0", VA = "0x14F0AF0")]
		public static void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz)
		{
		}

		[Token(Token = "0x6000EE3")]
		[Address(RVA = "0x14F0C50", Offset = "0x14F0C50", VA = "0x14F0C50")]
		public static void Negate(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000EE4")]
		[Address(RVA = "0x14F09DC", Offset = "0x14F09DC", VA = "0x14F09DC")]
		public static void Reduce(uint[] xx, uint[] z)
		{
		}

		[Token(Token = "0x6000EE5")]
		[Address(RVA = "0x14F0CFC", Offset = "0x14F0CFC", VA = "0x14F0CFC")]
		public static void Reduce32(uint x, uint[] z)
		{
		}

		[Token(Token = "0x6000EE6")]
		[Address(RVA = "0x14F0DF0", Offset = "0x14F0DF0", VA = "0x14F0DF0")]
		public static void Square(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000EE7")]
		[Address(RVA = "0x14F0E80", Offset = "0x14F0E80", VA = "0x14F0E80")]
		public static void SquareN(uint[] x, int n, uint[] z)
		{
		}

		[Token(Token = "0x6000EE8")]
		[Address(RVA = "0x14F0F64", Offset = "0x14F0F64", VA = "0x14F0F64")]
		public static void Subtract(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6000EE9")]
		[Address(RVA = "0x14F0FA8", Offset = "0x14F0FA8", VA = "0x14F0FA8")]
		public static void SubtractExt(uint[] xx, uint[] yy, uint[] zz)
		{
		}

		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0x14F10A4", Offset = "0x14F10A4", VA = "0x14F10A4")]
		public static void Twice(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000EEB")]
		[Address(RVA = "0x14F1194", Offset = "0x14F1194", VA = "0x14F1194")]
		public SecP224K1Field()
		{
		}
	}
	[Token(Token = "0x20001D5")]
	internal class SecP224K1FieldElement : ECFieldElement
	{
		[Token(Token = "0x400096D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly BigInteger Q;

		[Token(Token = "0x400096E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly uint[] PRECOMP_POW2;

		[Token(Token = "0x400096F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected internal readonly uint[] x;

		[Token(Token = "0x17000132")]
		public override bool IsZero
		{
			[Token(Token = "0x6000EF0")]
			[Address(RVA = "0x14F12DC", Offset = "0x14F12DC", VA = "0x14F12DC", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000133")]
		public override bool IsOne
		{
			[Token(Token = "0x6000EF1")]
			[Address(RVA = "0x14F12E8", Offset = "0x14F12E8", VA = "0x14F12E8", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000134")]
		public override string FieldName
		{
			[Token(Token = "0x6000EF4")]
			[Address(RVA = "0x14F1328", Offset = "0x14F1328", VA = "0x14F1328", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000135")]
		public override int FieldSize
		{
			[Token(Token = "0x6000EF5")]
			[Address(RVA = "0x14F1370", Offset = "0x14F1370", VA = "0x14F1370", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000EED")]
		[Address(RVA = "0x14F007C", Offset = "0x14F007C", VA = "0x14F007C")]
		public SecP224K1FieldElement(BigInteger x)
		{
		}

		[Token(Token = "0x6000EEE")]
		[Address(RVA = "0x14F1280", Offset = "0x14F1280", VA = "0x14F1280")]
		public SecP224K1FieldElement()
		{
		}

		[Token(Token = "0x6000EEF")]
		[Address(RVA = "0x14F12B0", Offset = "0x14F12B0", VA = "0x14F12B0")]
		protected internal SecP224K1FieldElement(uint[] x)
		{
		}

		[Token(Token = "0x6000EF2")]
		[Address(RVA = "0x14F12F4", Offset = "0x14F12F4", VA = "0x14F12F4", Slot = "24")]
		public override bool TestBitZero()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EF3")]
		[Address(RVA = "0x14F131C", Offset = "0x14F131C", VA = "0x14F131C", Slot = "4")]
		public override BigInteger ToBigInteger()
		{
			return null;
		}

		[Token(Token = "0x6000EF6")]
		[Address(RVA = "0x14F13E4", Offset = "0x14F13E4", VA = "0x14F13E4", Slot = "7")]
		public override ECFieldElement Add(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000EF7")]
		[Address(RVA = "0x14F14D4", Offset = "0x14F14D4", VA = "0x14F14D4", Slot = "8")]
		public override ECFieldElement AddOne()
		{
			return null;
		}

		[Token(Token = "0x6000EF8")]
		[Address(RVA = "0x14F1578", Offset = "0x14F1578", VA = "0x14F1578", Slot = "9")]
		public override ECFieldElement Subtract(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000EF9")]
		[Address(RVA = "0x14F1668", Offset = "0x14F1668", VA = "0x14F1668", Slot = "10")]
		public override ECFieldElement Multiply(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000EFA")]
		[Address(RVA = "0x14F1758", Offset = "0x14F1758", VA = "0x14F1758", Slot = "11")]
		public override ECFieldElement Divide(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000EFB")]
		[Address(RVA = "0x14F1860", Offset = "0x14F1860", VA = "0x14F1860", Slot = "12")]
		public override ECFieldElement Negate()
		{
			return null;
		}

		[Token(Token = "0x6000EFC")]
		[Address(RVA = "0x14F1904", Offset = "0x14F1904", VA = "0x14F1904", Slot = "13")]
		public override ECFieldElement Square()
		{
			return null;
		}

		[Token(Token = "0x6000EFD")]
		[Address(RVA = "0x14F19A8", Offset = "0x14F19A8", VA = "0x14F19A8", Slot = "14")]
		public override ECFieldElement Invert()
		{
			return null;
		}

		[Token(Token = "0x6000EFE")]
		[Address(RVA = "0x14F1A60", Offset = "0x14F1A60", VA = "0x14F1A60", Slot = "15")]
		public override ECFieldElement Sqrt()
		{
			return null;
		}

		[Token(Token = "0x6000EFF")]
		[Address(RVA = "0x14F1DDC", Offset = "0x14F1DDC", VA = "0x14F1DDC", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F00")]
		[Address(RVA = "0x14F1E78", Offset = "0x14F1E78", VA = "0x14F1E78", Slot = "25")]
		public override bool Equals(ECFieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F01")]
		[Address(RVA = "0x14F1F14", Offset = "0x14F1F14", VA = "0x14F1F14", Slot = "27")]
		public virtual bool Equals(SecP224K1FieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F02")]
		[Address(RVA = "0x14F1F40", Offset = "0x14F1F40", VA = "0x14F1F40", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001D6")]
	internal class SecP224K1Point : AbstractFpPoint
	{
		[Token(Token = "0x6000F04")]
		[Address(RVA = "0x14EFECC", Offset = "0x14EFECC", VA = "0x14EFECC")]
		public SecP224K1Point(ECCurve curve, ECFieldElement x, ECFieldElement y)
		{
		}

		[Token(Token = "0x6000F05")]
		[Address(RVA = "0x14F0218", Offset = "0x14F0218", VA = "0x14F0218")]
		public SecP224K1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression)
		{
		}

		[Token(Token = "0x6000F06")]
		[Address(RVA = "0x14F037C", Offset = "0x14F037C", VA = "0x14F037C")]
		internal SecP224K1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
		}

		[Token(Token = "0x6000F07")]
		[Address(RVA = "0x14F2094", Offset = "0x14F2094", VA = "0x14F2094", Slot = "6")]
		protected override ECPoint Detach()
		{
			return null;
		}

		[Token(Token = "0x6000F08")]
		[Address(RVA = "0x14F2134", Offset = "0x14F2134", VA = "0x14F2134", Slot = "27")]
		public override ECPoint Add(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6000F09")]
		[Address(RVA = "0x14F27FC", Offset = "0x14F27FC", VA = "0x14F27FC", Slot = "31")]
		public override ECPoint Twice()
		{
			return null;
		}

		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0x14F2C1C", Offset = "0x14F2C1C", VA = "0x14F2C1C", Slot = "33")]
		public override ECPoint TwicePlus(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6000F0B")]
		[Address(RVA = "0x14F2CEC", Offset = "0x14F2CEC", VA = "0x14F2CEC", Slot = "34")]
		public override ECPoint ThreeTimes()
		{
			return null;
		}

		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0x14F2D6C", Offset = "0x14F2D6C", VA = "0x14F2D6C", Slot = "29")]
		public override ECPoint Negate()
		{
			return null;
		}
	}
	[Token(Token = "0x20001D7")]
	internal class SecP224R1Curve : AbstractFpCurve
	{
		[Token(Token = "0x4000970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly BigInteger q;

		[Token(Token = "0x4000971")]
		private const int SecP224R1_DEFAULT_COORDS = 2;

		[Token(Token = "0x4000972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected readonly SecP224R1Point m_infinity;

		[Token(Token = "0x17000136")]
		public virtual BigInteger Q
		{
			[Token(Token = "0x6000F10")]
			[Address(RVA = "0x14F3090", Offset = "0x14F3090", VA = "0x14F3090", Slot = "36")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000137")]
		public override ECPoint Infinity
		{
			[Token(Token = "0x6000F11")]
			[Address(RVA = "0x14F30F8", Offset = "0x14F30F8", VA = "0x14F30F8", Slot = "21")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000138")]
		public override int FieldSize
		{
			[Token(Token = "0x6000F12")]
			[Address(RVA = "0x14F3100", Offset = "0x14F3100", VA = "0x14F3100", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000F0D")]
		[Address(RVA = "0x14F2E44", Offset = "0x14F2E44", VA = "0x14F2E44")]
		public SecP224R1Curve()
		{
		}

		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0x14F302C", Offset = "0x14F302C", VA = "0x14F302C", Slot = "11")]
		protected override ECCurve CloneCurve()
		{
			return null;
		}

		[Token(Token = "0x6000F0F")]
		[Address(RVA = "0x14F3084", Offset = "0x14F3084", VA = "0x14F3084", Slot = "15")]
		public override bool SupportsCoordinateSystem(int coord)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F13")]
		[Address(RVA = "0x14F3174", Offset = "0x14F3174", VA = "0x14F3174", Slot = "5")]
		public override ECFieldElement FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000F14")]
		[Address(RVA = "0x14F32E8", Offset = "0x14F32E8", VA = "0x14F32E8", Slot = "12")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x6000F15")]
		[Address(RVA = "0x14F3440", Offset = "0x14F3440", VA = "0x14F3440", Slot = "13")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
			return null;
		}
	}
	[Token(Token = "0x20001D8")]
	internal class SecP224R1Field
	{
		[Token(Token = "0x4000973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly uint[] P;

		[Token(Token = "0x4000974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly uint[] PExt;

		[Token(Token = "0x4000975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly uint[] PExtInv;

		[Token(Token = "0x4000976")]
		private const uint P6 = uint.MaxValue;

		[Token(Token = "0x4000977")]
		private const uint PExt13 = uint.MaxValue;

		[Token(Token = "0x6000F17")]
		[Address(RVA = "0x14F3590", Offset = "0x14F3590", VA = "0x14F3590")]
		public static void Add(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6000F18")]
		[Address(RVA = "0x14F3740", Offset = "0x14F3740", VA = "0x14F3740")]
		public static void AddExt(uint[] xx, uint[] yy, uint[] zz)
		{
		}

		[Token(Token = "0x6000F19")]
		[Address(RVA = "0x14F38A4", Offset = "0x14F38A4", VA = "0x14F38A4")]
		public static void AddOne(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000F1A")]
		[Address(RVA = "0x14F39A4", Offset = "0x14F39A4", VA = "0x14F39A4")]
		public static uint[] FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000F1B")]
		[Address(RVA = "0x14F3A90", Offset = "0x14F3A90", VA = "0x14F3A90")]
		public static void Half(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000F1C")]
		[Address(RVA = "0x14F3B70", Offset = "0x14F3B70", VA = "0x14F3B70")]
		public static void Multiply(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6000F1D")]
		[Address(RVA = "0x14F3E64", Offset = "0x14F3E64", VA = "0x14F3E64")]
		public static void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz)
		{
		}

		[Token(Token = "0x6000F1E")]
		[Address(RVA = "0x14F3FC4", Offset = "0x14F3FC4", VA = "0x14F3FC4")]
		public static void Negate(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000F1F")]
		[Address(RVA = "0x14F3C08", Offset = "0x14F3C08", VA = "0x14F3C08")]
		public static void Reduce(uint[] xx, uint[] z)
		{
		}

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0x14F4070", Offset = "0x14F4070", VA = "0x14F4070")]
		public static void Reduce32(uint x, uint[] z)
		{
		}

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0x14F41E8", Offset = "0x14F41E8", VA = "0x14F41E8")]
		public static void Square(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000F22")]
		[Address(RVA = "0x14F4278", Offset = "0x14F4278", VA = "0x14F4278")]
		public static void SquareN(uint[] x, int n, uint[] z)
		{
		}

		[Token(Token = "0x6000F23")]
		[Address(RVA = "0x14F435C", Offset = "0x14F435C", VA = "0x14F435C")]
		public static void Subtract(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6000F24")]
		[Address(RVA = "0x14F44A4", Offset = "0x14F44A4", VA = "0x14F44A4")]
		public static void SubtractExt(uint[] xx, uint[] yy, uint[] zz)
		{
		}

		[Token(Token = "0x6000F25")]
		[Address(RVA = "0x14F45A0", Offset = "0x14F45A0", VA = "0x14F45A0")]
		public static void Twice(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000F26")]
		[Address(RVA = "0x14F3694", Offset = "0x14F3694", VA = "0x14F3694")]
		private static void AddPInvTo(uint[] z)
		{
		}

		[Token(Token = "0x6000F27")]
		[Address(RVA = "0x14F43F8", Offset = "0x14F43F8", VA = "0x14F43F8")]
		private static void SubPInvFrom(uint[] z)
		{
		}

		[Token(Token = "0x6000F28")]
		[Address(RVA = "0x14F46A4", Offset = "0x14F46A4", VA = "0x14F46A4")]
		public SecP224R1Field()
		{
		}
	}
	[Token(Token = "0x20001D9")]
	internal class SecP224R1FieldElement : ECFieldElement
	{
		[Token(Token = "0x4000978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly BigInteger Q;

		[Token(Token = "0x4000979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected internal readonly uint[] x;

		[Token(Token = "0x17000139")]
		public override bool IsZero
		{
			[Token(Token = "0x6000F2D")]
			[Address(RVA = "0x14F47EC", Offset = "0x14F47EC", VA = "0x14F47EC", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700013A")]
		public override bool IsOne
		{
			[Token(Token = "0x6000F2E")]
			[Address(RVA = "0x14F47F8", Offset = "0x14F47F8", VA = "0x14F47F8", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700013B")]
		public override string FieldName
		{
			[Token(Token = "0x6000F31")]
			[Address(RVA = "0x14F4838", Offset = "0x14F4838", VA = "0x14F4838", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013C")]
		public override int FieldSize
		{
			[Token(Token = "0x6000F32")]
			[Address(RVA = "0x14F4880", Offset = "0x14F4880", VA = "0x14F4880", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000F2A")]
		[Address(RVA = "0x14F31D4", Offset = "0x14F31D4", VA = "0x14F31D4")]
		public SecP224R1FieldElement(BigInteger x)
		{
		}

		[Token(Token = "0x6000F2B")]
		[Address(RVA = "0x14F4790", Offset = "0x14F4790", VA = "0x14F4790")]
		public SecP224R1FieldElement()
		{
		}

		[Token(Token = "0x6000F2C")]
		[Address(RVA = "0x14F47C0", Offset = "0x14F47C0", VA = "0x14F47C0")]
		protected internal SecP224R1FieldElement(uint[] x)
		{
		}

		[Token(Token = "0x6000F2F")]
		[Address(RVA = "0x14F4804", Offset = "0x14F4804", VA = "0x14F4804", Slot = "24")]
		public override bool TestBitZero()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F30")]
		[Address(RVA = "0x14F482C", Offset = "0x14F482C", VA = "0x14F482C", Slot = "4")]
		public override BigInteger ToBigInteger()
		{
			return null;
		}

		[Token(Token = "0x6000F33")]
		[Address(RVA = "0x14F48F4", Offset = "0x14F48F4", VA = "0x14F48F4", Slot = "7")]
		public override ECFieldElement Add(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000F34")]
		[Address(RVA = "0x14F49E4", Offset = "0x14F49E4", VA = "0x14F49E4", Slot = "8")]
		public override ECFieldElement AddOne()
		{
			return null;
		}

		[Token(Token = "0x6000F35")]
		[Address(RVA = "0x14F4A88", Offset = "0x14F4A88", VA = "0x14F4A88", Slot = "9")]
		public override ECFieldElement Subtract(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000F36")]
		[Address(RVA = "0x14F4B78", Offset = "0x14F4B78", VA = "0x14F4B78", Slot = "10")]
		public override ECFieldElement Multiply(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000F37")]
		[Address(RVA = "0x14F4C68", Offset = "0x14F4C68", VA = "0x14F4C68", Slot = "11")]
		public override ECFieldElement Divide(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000F38")]
		[Address(RVA = "0x14F4D70", Offset = "0x14F4D70", VA = "0x14F4D70", Slot = "12")]
		public override ECFieldElement Negate()
		{
			return null;
		}

		[Token(Token = "0x6000F39")]
		[Address(RVA = "0x14F4E14", Offset = "0x14F4E14", VA = "0x14F4E14", Slot = "13")]
		public override ECFieldElement Square()
		{
			return null;
		}

		[Token(Token = "0x6000F3A")]
		[Address(RVA = "0x14F4EB8", Offset = "0x14F4EB8", VA = "0x14F4EB8", Slot = "14")]
		public override ECFieldElement Invert()
		{
			return null;
		}

		[Token(Token = "0x6000F3B")]
		[Address(RVA = "0x14F4F70", Offset = "0x14F4F70", VA = "0x14F4F70", Slot = "15")]
		public override ECFieldElement Sqrt()
		{
			return null;
		}

		[Token(Token = "0x6000F3C")]
		[Address(RVA = "0x14F5400", Offset = "0x14F5400", VA = "0x14F5400", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F3D")]
		[Address(RVA = "0x14F549C", Offset = "0x14F549C", VA = "0x14F549C", Slot = "25")]
		public override bool Equals(ECFieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F3E")]
		[Address(RVA = "0x14F5538", Offset = "0x14F5538", VA = "0x14F5538", Slot = "27")]
		public virtual bool Equals(SecP224R1FieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F3F")]
		[Address(RVA = "0x14F5564", Offset = "0x14F5564", VA = "0x14F5564", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000F40")]
		[Address(RVA = "0x14F5124", Offset = "0x14F5124", VA = "0x14F5124")]
		private static bool IsSquare(uint[] x)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F41")]
		[Address(RVA = "0x14F5604", Offset = "0x14F5604", VA = "0x14F5604")]
		private static void RM(uint[] nc, uint[] d0, uint[] e0, uint[] d1, uint[] e1, uint[] f1, uint[] t)
		{
		}

		[Token(Token = "0x6000F42")]
		[Address(RVA = "0x14F572C", Offset = "0x14F572C", VA = "0x14F572C")]
		private static void RP(uint[] nc, uint[] d1, uint[] e1, uint[] f1, uint[] t)
		{
		}

		[Token(Token = "0x6000F43")]
		[Address(RVA = "0x14F5884", Offset = "0x14F5884", VA = "0x14F5884")]
		private static void RS(uint[] d, uint[] e, uint[] f, uint[] t)
		{
		}

		[Token(Token = "0x6000F44")]
		[Address(RVA = "0x14F5230", Offset = "0x14F5230", VA = "0x14F5230")]
		private static bool TrySqrt(uint[] nc, uint[] r, uint[] t)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001DA")]
	internal class SecP224R1Point : AbstractFpPoint
	{
		[Token(Token = "0x6000F46")]
		[Address(RVA = "0x14F3024", Offset = "0x14F3024", VA = "0x14F3024")]
		public SecP224R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y)
		{
		}

		[Token(Token = "0x6000F47")]
		[Address(RVA = "0x14F3370", Offset = "0x14F3370", VA = "0x14F3370")]
		public SecP224R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression)
		{
		}

		[Token(Token = "0x6000F48")]
		[Address(RVA = "0x14F34D4", Offset = "0x14F34D4", VA = "0x14F34D4")]
		internal SecP224R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
		}

		[Token(Token = "0x6000F49")]
		[Address(RVA = "0x14F59E0", Offset = "0x14F59E0", VA = "0x14F59E0", Slot = "6")]
		protected override ECPoint Detach()
		{
			return null;
		}

		[Token(Token = "0x6000F4A")]
		[Address(RVA = "0x14F5A80", Offset = "0x14F5A80", VA = "0x14F5A80", Slot = "27")]
		public override ECPoint Add(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6000F4B")]
		[Address(RVA = "0x14F6148", Offset = "0x14F6148", VA = "0x14F6148", Slot = "31")]
		public override ECPoint Twice()
		{
			return null;
		}

		[Token(Token = "0x6000F4C")]
		[Address(RVA = "0x14F6614", Offset = "0x14F6614", VA = "0x14F6614", Slot = "33")]
		public override ECPoint TwicePlus(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6000F4D")]
		[Address(RVA = "0x14F66E4", Offset = "0x14F66E4", VA = "0x14F66E4", Slot = "34")]
		public override ECPoint ThreeTimes()
		{
			return null;
		}

		[Token(Token = "0x6000F4E")]
		[Address(RVA = "0x14F6764", Offset = "0x14F6764", VA = "0x14F6764", Slot = "29")]
		public override ECPoint Negate()
		{
			return null;
		}
	}
	[Token(Token = "0x20001DB")]
	internal class SecP256K1Curve : AbstractFpCurve
	{
		[Token(Token = "0x400097A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly BigInteger q;

		[Token(Token = "0x400097B")]
		private const int SECP256K1_DEFAULT_COORDS = 2;

		[Token(Token = "0x400097C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected readonly SecP256K1Point m_infinity;

		[Token(Token = "0x1700013D")]
		public virtual BigInteger Q
		{
			[Token(Token = "0x6000F52")]
			[Address(RVA = "0x14F6A2C", Offset = "0x14F6A2C", VA = "0x14F6A2C", Slot = "36")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013E")]
		public override ECPoint Infinity
		{
			[Token(Token = "0x6000F53")]
			[Address(RVA = "0x14F6A94", Offset = "0x14F6A94", VA = "0x14F6A94", Slot = "21")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013F")]
		public override int FieldSize
		{
			[Token(Token = "0x6000F54")]
			[Address(RVA = "0x14F6A9C", Offset = "0x14F6A9C", VA = "0x14F6A9C", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000F4F")]
		[Address(RVA = "0x14F683C", Offset = "0x14F683C", VA = "0x14F683C")]
		public SecP256K1Curve()
		{
		}

		[Token(Token = "0x6000F50")]
		[Address(RVA = "0x14F69C8", Offset = "0x14F69C8", VA = "0x14F69C8", Slot = "11")]
		protected override ECCurve CloneCurve()
		{
			return null;
		}

		[Token(Token = "0x6000F51")]
		[Address(RVA = "0x14F6A20", Offset = "0x14F6A20", VA = "0x14F6A20", Slot = "15")]
		public override bool SupportsCoordinateSystem(int coord)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F55")]
		[Address(RVA = "0x14F6B10", Offset = "0x14F6B10", VA = "0x14F6B10", Slot = "5")]
		public override ECFieldElement FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000F56")]
		[Address(RVA = "0x14F6C84", Offset = "0x14F6C84", VA = "0x14F6C84", Slot = "12")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x6000F57")]
		[Address(RVA = "0x14F6DDC", Offset = "0x14F6DDC", VA = "0x14F6DDC", Slot = "13")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
			return null;
		}
	}
	[Token(Token = "0x20001DC")]
	internal class SecP256K1Field
	{
		[Token(Token = "0x400097D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly uint[] P;

		[Token(Token = "0x400097E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly uint[] PExt;

		[Token(Token = "0x400097F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly uint[] PExtInv;

		[Token(Token = "0x4000980")]
		private const uint P7 = uint.MaxValue;

		[Token(Token = "0x4000981")]
		private const uint PExt15 = uint.MaxValue;

		[Token(Token = "0x4000982")]
		private const uint PInv33 = 977u;

		[Token(Token = "0x6000F59")]
		[Address(RVA = "0x14F6F2C", Offset = "0x14F6F2C", VA = "0x14F6F2C")]
		public static void Add(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6000F5A")]
		[Address(RVA = "0x14F701C", Offset = "0x14F701C", VA = "0x14F701C")]
		public static void AddExt(uint[] xx, uint[] yy, uint[] zz)
		{
		}

		[Token(Token = "0x6000F5B")]
		[Address(RVA = "0x14F7180", Offset = "0x14F7180", VA = "0x14F7180")]
		public static void AddOne(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000F5C")]
		[Address(RVA = "0x14F726C", Offset = "0x14F726C", VA = "0x14F726C")]
		public static uint[] FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000F5D")]
		[Address(RVA = "0x14F7358", Offset = "0x14F7358", VA = "0x14F7358")]
		public static void Half(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000F5E")]
		[Address(RVA = "0x14F7438", Offset = "0x14F7438", VA = "0x14F7438")]
		public static void Multiply(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6000F5F")]
		[Address(RVA = "0x14F75E4", Offset = "0x14F75E4", VA = "0x14F75E4")]
		public static void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz)
		{
		}

		[Token(Token = "0x6000F60")]
		[Address(RVA = "0x14F7744", Offset = "0x14F7744", VA = "0x14F7744")]
		public static void Negate(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000F61")]
		[Address(RVA = "0x14F74D0", Offset = "0x14F74D0", VA = "0x14F74D0")]
		public static void Reduce(uint[] xx, uint[] z)
		{
		}

		[Token(Token = "0x6000F62")]
		[Address(RVA = "0x14F77F0", Offset = "0x14F77F0", VA = "0x14F77F0")]
		public static void Reduce32(uint x, uint[] z)
		{
		}

		[Token(Token = "0x6000F63")]
		[Address(RVA = "0x14F78E4", Offset = "0x14F78E4", VA = "0x14F78E4")]
		public static void Square(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000F64")]
		[Address(RVA = "0x14F7974", Offset = "0x14F7974", VA = "0x14F7974")]
		public static void SquareN(uint[] x, int n, uint[] z)
		{
		}

		[Token(Token = "0x6000F65")]
		[Address(RVA = "0x14F7A58", Offset = "0x14F7A58", VA = "0x14F7A58")]
		public static void Subtract(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6000F66")]
		[Address(RVA = "0x14F7A9C", Offset = "0x14F7A9C", VA = "0x14F7A9C")]
		public static void SubtractExt(uint[] xx, uint[] yy, uint[] zz)
		{
		}

		[Token(Token = "0x6000F67")]
		[Address(RVA = "0x14F7B98", Offset = "0x14F7B98", VA = "0x14F7B98")]
		public static void Twice(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000F68")]
		[Address(RVA = "0x14F7C88", Offset = "0x14F7C88", VA = "0x14F7C88")]
		public SecP256K1Field()
		{
		}
	}
	[Token(Token = "0x20001DD")]
	internal class SecP256K1FieldElement : ECFieldElement
	{
		[Token(Token = "0x4000983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly BigInteger Q;

		[Token(Token = "0x4000984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected internal readonly uint[] x;

		[Token(Token = "0x17000140")]
		public override bool IsZero
		{
			[Token(Token = "0x6000F6D")]
			[Address(RVA = "0x14F7DD0", Offset = "0x14F7DD0", VA = "0x14F7DD0", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000141")]
		public override bool IsOne
		{
			[Token(Token = "0x6000F6E")]
			[Address(RVA = "0x14F7DDC", Offset = "0x14F7DDC", VA = "0x14F7DDC", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000142")]
		public override string FieldName
		{
			[Token(Token = "0x6000F71")]
			[Address(RVA = "0x14F7E1C", Offset = "0x14F7E1C", VA = "0x14F7E1C", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000143")]
		public override int FieldSize
		{
			[Token(Token = "0x6000F72")]
			[Address(RVA = "0x14F7E64", Offset = "0x14F7E64", VA = "0x14F7E64", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000F6A")]
		[Address(RVA = "0x14F6B70", Offset = "0x14F6B70", VA = "0x14F6B70")]
		public SecP256K1FieldElement(BigInteger x)
		{
		}

		[Token(Token = "0x6000F6B")]
		[Address(RVA = "0x14F7D74", Offset = "0x14F7D74", VA = "0x14F7D74")]
		public SecP256K1FieldElement()
		{
		}

		[Token(Token = "0x6000F6C")]
		[Address(RVA = "0x14F7DA4", Offset = "0x14F7DA4", VA = "0x14F7DA4")]
		protected internal SecP256K1FieldElement(uint[] x)
		{
		}

		[Token(Token = "0x6000F6F")]
		[Address(RVA = "0x14F7DE8", Offset = "0x14F7DE8", VA = "0x14F7DE8", Slot = "24")]
		public override bool TestBitZero()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F70")]
		[Address(RVA = "0x14F7E10", Offset = "0x14F7E10", VA = "0x14F7E10", Slot = "4")]
		public override BigInteger ToBigInteger()
		{
			return null;
		}

		[Token(Token = "0x6000F73")]
		[Address(RVA = "0x14F7ED8", Offset = "0x14F7ED8", VA = "0x14F7ED8", Slot = "7")]
		public override ECFieldElement Add(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000F74")]
		[Address(RVA = "0x14F7FC8", Offset = "0x14F7FC8", VA = "0x14F7FC8", Slot = "8")]
		public override ECFieldElement AddOne()
		{
			return null;
		}

		[Token(Token = "0x6000F75")]
		[Address(RVA = "0x14F806C", Offset = "0x14F806C", VA = "0x14F806C", Slot = "9")]
		public override ECFieldElement Subtract(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000F76")]
		[Address(RVA = "0x14F815C", Offset = "0x14F815C", VA = "0x14F815C", Slot = "10")]
		public override ECFieldElement Multiply(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000F77")]
		[Address(RVA = "0x14F824C", Offset = "0x14F824C", VA = "0x14F824C", Slot = "11")]
		public override ECFieldElement Divide(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000F78")]
		[Address(RVA = "0x14F8354", Offset = "0x14F8354", VA = "0x14F8354", Slot = "12")]
		public override ECFieldElement Negate()
		{
			return null;
		}

		[Token(Token = "0x6000F79")]
		[Address(RVA = "0x14F83F8", Offset = "0x14F83F8", VA = "0x14F83F8", Slot = "13")]
		public override ECFieldElement Square()
		{
			return null;
		}

		[Token(Token = "0x6000F7A")]
		[Address(RVA = "0x14F849C", Offset = "0x14F849C", VA = "0x14F849C", Slot = "14")]
		public override ECFieldElement Invert()
		{
			return null;
		}

		[Token(Token = "0x6000F7B")]
		[Address(RVA = "0x14F8554", Offset = "0x14F8554", VA = "0x14F8554", Slot = "15")]
		public override ECFieldElement Sqrt()
		{
			return null;
		}

		[Token(Token = "0x6000F7C")]
		[Address(RVA = "0x14F882C", Offset = "0x14F882C", VA = "0x14F882C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F7D")]
		[Address(RVA = "0x14F88C8", Offset = "0x14F88C8", VA = "0x14F88C8", Slot = "25")]
		public override bool Equals(ECFieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F7E")]
		[Address(RVA = "0x14F8964", Offset = "0x14F8964", VA = "0x14F8964", Slot = "27")]
		public virtual bool Equals(SecP256K1FieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F7F")]
		[Address(RVA = "0x14F8990", Offset = "0x14F8990", VA = "0x14F8990", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001DE")]
	internal class SecP256K1Point : AbstractFpPoint
	{
		[Token(Token = "0x6000F81")]
		[Address(RVA = "0x14F69C0", Offset = "0x14F69C0", VA = "0x14F69C0")]
		public SecP256K1Point(ECCurve curve, ECFieldElement x, ECFieldElement y)
		{
		}

		[Token(Token = "0x6000F82")]
		[Address(RVA = "0x14F6D0C", Offset = "0x14F6D0C", VA = "0x14F6D0C")]
		public SecP256K1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression)
		{
		}

		[Token(Token = "0x6000F83")]
		[Address(RVA = "0x14F6E70", Offset = "0x14F6E70", VA = "0x14F6E70")]
		internal SecP256K1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
		}

		[Token(Token = "0x6000F84")]
		[Address(RVA = "0x14F8AAC", Offset = "0x14F8AAC", VA = "0x14F8AAC", Slot = "6")]
		protected override ECPoint Detach()
		{
			return null;
		}

		[Token(Token = "0x6000F85")]
		[Address(RVA = "0x14F8B4C", Offset = "0x14F8B4C", VA = "0x14F8B4C", Slot = "27")]
		public override ECPoint Add(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6000F86")]
		[Address(RVA = "0x14F9214", Offset = "0x14F9214", VA = "0x14F9214", Slot = "31")]
		public override ECPoint Twice()
		{
			return null;
		}

		[Token(Token = "0x6000F87")]
		[Address(RVA = "0x14F9634", Offset = "0x14F9634", VA = "0x14F9634", Slot = "33")]
		public override ECPoint TwicePlus(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6000F88")]
		[Address(RVA = "0x14F9704", Offset = "0x14F9704", VA = "0x14F9704", Slot = "34")]
		public override ECPoint ThreeTimes()
		{
			return null;
		}

		[Token(Token = "0x6000F89")]
		[Address(RVA = "0x14F9784", Offset = "0x14F9784", VA = "0x14F9784", Slot = "29")]
		public override ECPoint Negate()
		{
			return null;
		}
	}
	[Token(Token = "0x20001DF")]
	internal class SecP256R1Curve : AbstractFpCurve
	{
		[Token(Token = "0x4000985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly BigInteger q;

		[Token(Token = "0x4000986")]
		private const int SecP256R1_DEFAULT_COORDS = 2;

		[Token(Token = "0x4000987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected readonly SecP256R1Point m_infinity;

		[Token(Token = "0x17000144")]
		public virtual BigInteger Q
		{
			[Token(Token = "0x6000F8D")]
			[Address(RVA = "0x14F9AA8", Offset = "0x14F9AA8", VA = "0x14F9AA8", Slot = "36")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000145")]
		public override ECPoint Infinity
		{
			[Token(Token = "0x6000F8E")]
			[Address(RVA = "0x14F9B10", Offset = "0x14F9B10", VA = "0x14F9B10", Slot = "21")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000146")]
		public override int FieldSize
		{
			[Token(Token = "0x6000F8F")]
			[Address(RVA = "0x14F9B18", Offset = "0x14F9B18", VA = "0x14F9B18", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000F8A")]
		[Address(RVA = "0x14F985C", Offset = "0x14F985C", VA = "0x14F985C")]
		public SecP256R1Curve()
		{
		}

		[Token(Token = "0x6000F8B")]
		[Address(RVA = "0x14F9A44", Offset = "0x14F9A44", VA = "0x14F9A44", Slot = "11")]
		protected override ECCurve CloneCurve()
		{
			return null;
		}

		[Token(Token = "0x6000F8C")]
		[Address(RVA = "0x14F9A9C", Offset = "0x14F9A9C", VA = "0x14F9A9C", Slot = "15")]
		public override bool SupportsCoordinateSystem(int coord)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F90")]
		[Address(RVA = "0x14F9B8C", Offset = "0x14F9B8C", VA = "0x14F9B8C", Slot = "5")]
		public override ECFieldElement FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000F91")]
		[Address(RVA = "0x14F9D00", Offset = "0x14F9D00", VA = "0x14F9D00", Slot = "12")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x6000F92")]
		[Address(RVA = "0x14F9E58", Offset = "0x14F9E58", VA = "0x14F9E58", Slot = "13")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
			return null;
		}
	}
	[Token(Token = "0x20001E0")]
	internal class SecP256R1Field
	{
		[Token(Token = "0x4000988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly uint[] P;

		[Token(Token = "0x4000989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly uint[] PExt;

		[Token(Token = "0x400098A")]
		internal const uint P7 = uint.MaxValue;

		[Token(Token = "0x400098B")]
		internal const uint PExt15 = 4294967294u;

		[Token(Token = "0x6000F94")]
		[Address(RVA = "0x14F9FA8", Offset = "0x14F9FA8", VA = "0x14F9FA8")]
		public static void Add(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6000F95")]
		[Address(RVA = "0x14FA1A8", Offset = "0x14FA1A8", VA = "0x14FA1A8")]
		public static void AddExt(uint[] xx, uint[] yy, uint[] zz)
		{
		}

		[Token(Token = "0x6000F96")]
		[Address(RVA = "0x14FA2C8", Offset = "0x14FA2C8", VA = "0x14FA2C8")]
		public static void AddOne(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000F97")]
		[Address(RVA = "0x14FA3C8", Offset = "0x14FA3C8", VA = "0x14FA3C8")]
		public static uint[] FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000F98")]
		[Address(RVA = "0x14FA4B4", Offset = "0x14FA4B4", VA = "0x14FA4B4")]
		public static void Half(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000F99")]
		[Address(RVA = "0x14FA594", Offset = "0x14FA594", VA = "0x14FA594")]
		public static void Multiply(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6000F9A")]
		[Address(RVA = "0x14FA890", Offset = "0x14FA890", VA = "0x14FA890")]
		public static void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz)
		{
		}

		[Token(Token = "0x6000F9B")]
		[Address(RVA = "0x14FA9AC", Offset = "0x14FA9AC", VA = "0x14FA9AC")]
		public static void Negate(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000F9C")]
		[Address(RVA = "0x14FA62C", Offset = "0x14FA62C", VA = "0x14FA62C")]
		public static void Reduce(uint[] xx, uint[] z)
		{
		}

		[Token(Token = "0x6000F9D")]
		[Address(RVA = "0x14FAA58", Offset = "0x14FAA58", VA = "0x14FAA58")]
		public static void Reduce32(uint x, uint[] z)
		{
		}

		[Token(Token = "0x6000F9E")]
		[Address(RVA = "0x14FAC1C", Offset = "0x14FAC1C", VA = "0x14FAC1C")]
		public static void Square(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000F9F")]
		[Address(RVA = "0x14FACAC", Offset = "0x14FACAC", VA = "0x14FACAC")]
		public static void SquareN(uint[] x, int n, uint[] z)
		{
		}

		[Token(Token = "0x6000FA0")]
		[Address(RVA = "0x14FAD90", Offset = "0x14FAD90", VA = "0x14FAD90")]
		public static void Subtract(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6000FA1")]
		[Address(RVA = "0x14FAF28", Offset = "0x14FAF28", VA = "0x14FAF28")]
		public static void SubtractExt(uint[] xx, uint[] yy, uint[] zz)
		{
		}

		[Token(Token = "0x6000FA2")]
		[Address(RVA = "0x14FAFDC", Offset = "0x14FAFDC", VA = "0x14FAFDC")]
		public static void Twice(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000FA3")]
		[Address(RVA = "0x14FA0AC", Offset = "0x14FA0AC", VA = "0x14FA0AC")]
		private static void AddPInvTo(uint[] z)
		{
		}

		[Token(Token = "0x6000FA4")]
		[Address(RVA = "0x14FAE2C", Offset = "0x14FAE2C", VA = "0x14FAE2C")]
		private static void SubPInvFrom(uint[] z)
		{
		}

		[Token(Token = "0x6000FA5")]
		[Address(RVA = "0x14FB0E0", Offset = "0x14FB0E0", VA = "0x14FB0E0")]
		public SecP256R1Field()
		{
		}
	}
	[Token(Token = "0x20001E1")]
	internal class SecP256R1FieldElement : ECFieldElement
	{
		[Token(Token = "0x400098C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly BigInteger Q;

		[Token(Token = "0x400098D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected internal readonly uint[] x;

		[Token(Token = "0x17000147")]
		public override bool IsZero
		{
			[Token(Token = "0x6000FAA")]
			[Address(RVA = "0x14FB1F8", Offset = "0x14FB1F8", VA = "0x14FB1F8", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000148")]
		public override bool IsOne
		{
			[Token(Token = "0x6000FAB")]
			[Address(RVA = "0x14FB204", Offset = "0x14FB204", VA = "0x14FB204", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000149")]
		public override string FieldName
		{
			[Token(Token = "0x6000FAE")]
			[Address(RVA = "0x14FB244", Offset = "0x14FB244", VA = "0x14FB244", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014A")]
		public override int FieldSize
		{
			[Token(Token = "0x6000FAF")]
			[Address(RVA = "0x14FB28C", Offset = "0x14FB28C", VA = "0x14FB28C", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000FA7")]
		[Address(RVA = "0x14F9BEC", Offset = "0x14F9BEC", VA = "0x14F9BEC")]
		public SecP256R1FieldElement(BigInteger x)
		{
		}

		[Token(Token = "0x6000FA8")]
		[Address(RVA = "0x14FB19C", Offset = "0x14FB19C", VA = "0x14FB19C")]
		public SecP256R1FieldElement()
		{
		}

		[Token(Token = "0x6000FA9")]
		[Address(RVA = "0x14FB1CC", Offset = "0x14FB1CC", VA = "0x14FB1CC")]
		protected internal SecP256R1FieldElement(uint[] x)
		{
		}

		[Token(Token = "0x6000FAC")]
		[Address(RVA = "0x14FB210", Offset = "0x14FB210", VA = "0x14FB210", Slot = "24")]
		public override bool TestBitZero()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FAD")]
		[Address(RVA = "0x14FB238", Offset = "0x14FB238", VA = "0x14FB238", Slot = "4")]
		public override BigInteger ToBigInteger()
		{
			return null;
		}

		[Token(Token = "0x6000FB0")]
		[Address(RVA = "0x14FB300", Offset = "0x14FB300", VA = "0x14FB300", Slot = "7")]
		public override ECFieldElement Add(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000FB1")]
		[Address(RVA = "0x14FB3F0", Offset = "0x14FB3F0", VA = "0x14FB3F0", Slot = "8")]
		public override ECFieldElement AddOne()
		{
			return null;
		}

		[Token(Token = "0x6000FB2")]
		[Address(RVA = "0x14FB494", Offset = "0x14FB494", VA = "0x14FB494", Slot = "9")]
		public override ECFieldElement Subtract(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000FB3")]
		[Address(RVA = "0x14FB584", Offset = "0x14FB584", VA = "0x14FB584", Slot = "10")]
		public override ECFieldElement Multiply(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000FB4")]
		[Address(RVA = "0x14FB674", Offset = "0x14FB674", VA = "0x14FB674", Slot = "11")]
		public override ECFieldElement Divide(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000FB5")]
		[Address(RVA = "0x14FB77C", Offset = "0x14FB77C", VA = "0x14FB77C", Slot = "12")]
		public override ECFieldElement Negate()
		{
			return null;
		}

		[Token(Token = "0x6000FB6")]
		[Address(RVA = "0x14FB820", Offset = "0x14FB820", VA = "0x14FB820", Slot = "13")]
		public override ECFieldElement Square()
		{
			return null;
		}

		[Token(Token = "0x6000FB7")]
		[Address(RVA = "0x14FB8C4", Offset = "0x14FB8C4", VA = "0x14FB8C4", Slot = "14")]
		public override ECFieldElement Invert()
		{
			return null;
		}

		[Token(Token = "0x6000FB8")]
		[Address(RVA = "0x14FB97C", Offset = "0x14FB97C", VA = "0x14FB97C", Slot = "15")]
		public override ECFieldElement Sqrt()
		{
			return null;
		}

		[Token(Token = "0x6000FB9")]
		[Address(RVA = "0x14FBB5C", Offset = "0x14FBB5C", VA = "0x14FBB5C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FBA")]
		[Address(RVA = "0x14FBBF8", Offset = "0x14FBBF8", VA = "0x14FBBF8", Slot = "25")]
		public override bool Equals(ECFieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FBB")]
		[Address(RVA = "0x14FBC94", Offset = "0x14FBC94", VA = "0x14FBC94", Slot = "27")]
		public virtual bool Equals(SecP256R1FieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FBC")]
		[Address(RVA = "0x14FBCC0", Offset = "0x14FBCC0", VA = "0x14FBCC0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001E2")]
	internal class SecP256R1Point : AbstractFpPoint
	{
		[Token(Token = "0x6000FBE")]
		[Address(RVA = "0x14F9A3C", Offset = "0x14F9A3C", VA = "0x14F9A3C")]
		public SecP256R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y)
		{
		}

		[Token(Token = "0x6000FBF")]
		[Address(RVA = "0x14F9D88", Offset = "0x14F9D88", VA = "0x14F9D88")]
		public SecP256R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression)
		{
		}

		[Token(Token = "0x6000FC0")]
		[Address(RVA = "0x14F9EEC", Offset = "0x14F9EEC", VA = "0x14F9EEC")]
		internal SecP256R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
		}

		[Token(Token = "0x6000FC1")]
		[Address(RVA = "0x14FBDDC", Offset = "0x14FBDDC", VA = "0x14FBDDC", Slot = "6")]
		protected override ECPoint Detach()
		{
			return null;
		}

		[Token(Token = "0x6000FC2")]
		[Address(RVA = "0x14FBE7C", Offset = "0x14FBE7C", VA = "0x14FBE7C", Slot = "27")]
		public override ECPoint Add(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6000FC3")]
		[Address(RVA = "0x14FC544", Offset = "0x14FC544", VA = "0x14FC544", Slot = "31")]
		public override ECPoint Twice()
		{
			return null;
		}

		[Token(Token = "0x6000FC4")]
		[Address(RVA = "0x14FCA10", Offset = "0x14FCA10", VA = "0x14FCA10", Slot = "33")]
		public override ECPoint TwicePlus(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6000FC5")]
		[Address(RVA = "0x14FCAE0", Offset = "0x14FCAE0", VA = "0x14FCAE0", Slot = "34")]
		public override ECPoint ThreeTimes()
		{
			return null;
		}

		[Token(Token = "0x6000FC6")]
		[Address(RVA = "0x14FCB60", Offset = "0x14FCB60", VA = "0x14FCB60", Slot = "29")]
		public override ECPoint Negate()
		{
			return null;
		}
	}
	[Token(Token = "0x20001E3")]
	internal class SecP384R1Curve : AbstractFpCurve
	{
		[Token(Token = "0x400098E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly BigInteger q;

		[Token(Token = "0x400098F")]
		private const int SecP384R1_DEFAULT_COORDS = 2;

		[Token(Token = "0x4000990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected readonly SecP384R1Point m_infinity;

		[Token(Token = "0x1700014B")]
		public virtual BigInteger Q
		{
			[Token(Token = "0x6000FCA")]
			[Address(RVA = "0x14FCE7C", Offset = "0x14FCE7C", VA = "0x14FCE7C", Slot = "36")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014C")]
		public override ECPoint Infinity
		{
			[Token(Token = "0x6000FCB")]
			[Address(RVA = "0x14FCEE4", Offset = "0x14FCEE4", VA = "0x14FCEE4", Slot = "21")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014D")]
		public override int FieldSize
		{
			[Token(Token = "0x6000FCC")]
			[Address(RVA = "0x14FCEEC", Offset = "0x14FCEEC", VA = "0x14FCEEC", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000FC7")]
		[Address(RVA = "0x14FCC38", Offset = "0x14FCC38", VA = "0x14FCC38")]
		public SecP384R1Curve()
		{
		}

		[Token(Token = "0x6000FC8")]
		[Address(RVA = "0x14FCE18", Offset = "0x14FCE18", VA = "0x14FCE18", Slot = "11")]
		protected override ECCurve CloneCurve()
		{
			return null;
		}

		[Token(Token = "0x6000FC9")]
		[Address(RVA = "0x14FCE70", Offset = "0x14FCE70", VA = "0x14FCE70", Slot = "15")]
		public override bool SupportsCoordinateSystem(int coord)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FCD")]
		[Address(RVA = "0x14FCF60", Offset = "0x14FCF60", VA = "0x14FCF60", Slot = "5")]
		public override ECFieldElement FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000FCE")]
		[Address(RVA = "0x14FD0D4", Offset = "0x14FD0D4", VA = "0x14FD0D4", Slot = "12")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x6000FCF")]
		[Address(RVA = "0x14FD160", Offset = "0x14FD160", VA = "0x14FD160", Slot = "13")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
			return null;
		}
	}
	[Token(Token = "0x20001E4")]
	internal class SecP384R1Field
	{
		[Token(Token = "0x4000991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly uint[] P;

		[Token(Token = "0x4000992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly uint[] PExt;

		[Token(Token = "0x4000993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly uint[] PExtInv;

		[Token(Token = "0x4000994")]
		private const uint P11 = uint.MaxValue;

		[Token(Token = "0x4000995")]
		private const uint PExt23 = uint.MaxValue;

		[Token(Token = "0x6000FD1")]
		[Address(RVA = "0x14FD2A4", Offset = "0x14FD2A4", VA = "0x14FD2A4")]
		public static void Add(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6000FD2")]
		[Address(RVA = "0x14FD478", Offset = "0x14FD478", VA = "0x14FD478")]
		public static void AddExt(uint[] xx, uint[] yy, uint[] zz)
		{
		}

		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0x14FD5DC", Offset = "0x14FD5DC", VA = "0x14FD5DC")]
		public static void AddOne(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000FD4")]
		[Address(RVA = "0x14FD6E0", Offset = "0x14FD6E0", VA = "0x14FD6E0")]
		public static uint[] FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6000FD5")]
		[Address(RVA = "0x14FD7D8", Offset = "0x14FD7D8", VA = "0x14FD7D8")]
		public static void Half(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000FD6")]
		[Address(RVA = "0x14FD8BC", Offset = "0x14FD8BC", VA = "0x14FD8BC")]
		public static void Multiply(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6000FD7")]
		[Address(RVA = "0x14FDC84", Offset = "0x14FDC84", VA = "0x14FDC84")]
		public static void Negate(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000FD8")]
		[Address(RVA = "0x14FD958", Offset = "0x14FD958", VA = "0x14FD958")]
		public static void Reduce(uint[] xx, uint[] z)
		{
		}

		[Token(Token = "0x6000FD9")]
		[Address(RVA = "0x14FDD3C", Offset = "0x14FDD3C", VA = "0x14FDD3C")]
		public static void Reduce32(uint x, uint[] z)
		{
		}

		[Token(Token = "0x6000FDA")]
		[Address(RVA = "0x14FDED4", Offset = "0x14FDED4", VA = "0x14FDED4")]
		public static void Square(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000FDB")]
		[Address(RVA = "0x14FDF68", Offset = "0x14FDF68", VA = "0x14FDF68")]
		public static void SquareN(uint[] x, int n, uint[] z)
		{
		}

		[Token(Token = "0x6000FDC")]
		[Address(RVA = "0x14FE050", Offset = "0x14FE050", VA = "0x14FE050")]
		public static void Subtract(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6000FDD")]
		[Address(RVA = "0x14FE1B8", Offset = "0x14FE1B8", VA = "0x14FE1B8")]
		public static void SubtractExt(uint[] xx, uint[] yy, uint[] zz)
		{
		}

		[Token(Token = "0x6000FDE")]
		[Address(RVA = "0x14FE2B4", Offset = "0x14FE2B4", VA = "0x14FE2B4")]
		public static void Twice(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6000FDF")]
		[Address(RVA = "0x14FD3B0", Offset = "0x14FD3B0", VA = "0x14FD3B0")]
		private static void AddPInvTo(uint[] z)
		{
		}

		[Token(Token = "0x6000FE0")]
		[Address(RVA = "0x14FE0F0", Offset = "0x14FE0F0", VA = "0x14FE0F0")]
		private static void SubPInvFrom(uint[] z)
		{
		}

		[Token(Token = "0x6000FE1")]
		[Address(RVA = "0x14FE3BC", Offset = "0x14FE3BC", VA = "0x14FE3BC")]
		public SecP384R1Field()
		{
		}
	}
	[Token(Token = "0x20001E5")]
	internal class SecP384R1FieldElement : ECFieldElement
	{
		[Token(Token = "0x4000996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly BigInteger Q;

		[Token(Token = "0x4000997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected internal readonly uint[] x;

		[Token(Token = "0x1700014E")]
		public override bool IsZero
		{
			[Token(Token = "0x6000FE6")]
			[Address(RVA = "0x14FE508", Offset = "0x14FE508", VA = "0x14FE508", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700014F")]
		public override bool IsOne
		{
			[Token(Token = "0x6000FE7")]
			[Address(RVA = "0x14FE518", Offset = "0x14FE518", VA = "0x14FE518", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000150")]
		public override string FieldName
		{
			[Token(Token = "0x6000FEA")]
			[Address(RVA = "0x14FE560", Offset = "0x14FE560", VA = "0x14FE560", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000151")]
		public override int FieldSize
		{
			[Token(Token = "0x6000FEB")]
			[Address(RVA = "0x14FE5A8", Offset = "0x14FE5A8", VA = "0x14FE5A8", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000FE3")]
		[Address(RVA = "0x14FCFC0", Offset = "0x14FCFC0", VA = "0x14FCFC0")]
		public SecP384R1FieldElement(BigInteger x)
		{
		}

		[Token(Token = "0x6000FE4")]
		[Address(RVA = "0x14FE4A8", Offset = "0x14FE4A8", VA = "0x14FE4A8")]
		public SecP384R1FieldElement()
		{
		}

		[Token(Token = "0x6000FE5")]
		[Address(RVA = "0x14FE4DC", Offset = "0x14FE4DC", VA = "0x14FE4DC")]
		protected internal SecP384R1FieldElement(uint[] x)
		{
		}

		[Token(Token = "0x6000FE8")]
		[Address(RVA = "0x14FE528", Offset = "0x14FE528", VA = "0x14FE528", Slot = "24")]
		public override bool TestBitZero()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FE9")]
		[Address(RVA = "0x14FE550", Offset = "0x14FE550", VA = "0x14FE550", Slot = "4")]
		public override BigInteger ToBigInteger()
		{
			return null;
		}

		[Token(Token = "0x6000FEC")]
		[Address(RVA = "0x14FE61C", Offset = "0x14FE61C", VA = "0x14FE61C", Slot = "7")]
		public override ECFieldElement Add(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000FED")]
		[Address(RVA = "0x14FE710", Offset = "0x14FE710", VA = "0x14FE710", Slot = "8")]
		public override ECFieldElement AddOne()
		{
			return null;
		}

		[Token(Token = "0x6000FEE")]
		[Address(RVA = "0x14FE7B8", Offset = "0x14FE7B8", VA = "0x14FE7B8", Slot = "9")]
		public override ECFieldElement Subtract(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000FEF")]
		[Address(RVA = "0x14FE8AC", Offset = "0x14FE8AC", VA = "0x14FE8AC", Slot = "10")]
		public override ECFieldElement Multiply(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000FF0")]
		[Address(RVA = "0x14FE9A0", Offset = "0x14FE9A0", VA = "0x14FE9A0", Slot = "11")]
		public override ECFieldElement Divide(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6000FF1")]
		[Address(RVA = "0x14FEAAC", Offset = "0x14FEAAC", VA = "0x14FEAAC", Slot = "12")]
		public override ECFieldElement Negate()
		{
			return null;
		}

		[Token(Token = "0x6000FF2")]
		[Address(RVA = "0x14FEB54", Offset = "0x14FEB54", VA = "0x14FEB54", Slot = "13")]
		public override ECFieldElement Square()
		{
			return null;
		}

		[Token(Token = "0x6000FF3")]
		[Address(RVA = "0x14FEBFC", Offset = "0x14FEBFC", VA = "0x14FEBFC", Slot = "14")]
		public override ECFieldElement Invert()
		{
			return null;
		}

		[Token(Token = "0x6000FF4")]
		[Address(RVA = "0x14FECB8", Offset = "0x14FECB8", VA = "0x14FECB8", Slot = "15")]
		public override ECFieldElement Sqrt()
		{
			return null;
		}

		[Token(Token = "0x6000FF5")]
		[Address(RVA = "0x14FEF8C", Offset = "0x14FEF8C", VA = "0x14FEF8C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FF6")]
		[Address(RVA = "0x14FF028", Offset = "0x14FF028", VA = "0x14FF028", Slot = "25")]
		public override bool Equals(ECFieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FF7")]
		[Address(RVA = "0x14FF0C4", Offset = "0x14FF0C4", VA = "0x14FF0C4", Slot = "27")]
		public virtual bool Equals(SecP384R1FieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FF8")]
		[Address(RVA = "0x14FF0F8", Offset = "0x14FF0F8", VA = "0x14FF0F8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001E6")]
	internal class SecP384R1Point : AbstractFpPoint
	{
		[Token(Token = "0x6000FFA")]
		[Address(RVA = "0x15FE3FC", Offset = "0x15FE3FC", VA = "0x15FE3FC")]
		public SecP384R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y)
		{
		}

		[Token(Token = "0x6000FFB")]
		[Address(RVA = "0x15FE404", Offset = "0x15FE404", VA = "0x15FE404")]
		public SecP384R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression)
		{
		}

		[Token(Token = "0x6000FFC")]
		[Address(RVA = "0x15FE4D4", Offset = "0x15FE4D4", VA = "0x15FE4D4")]
		internal SecP384R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
		}

		[Token(Token = "0x6000FFD")]
		[Address(RVA = "0x15FE4E0", Offset = "0x15FE4E0", VA = "0x15FE4E0", Slot = "6")]
		protected override ECPoint Detach()
		{
			return null;
		}

		[Token(Token = "0x6000FFE")]
		[Address(RVA = "0x15FE580", Offset = "0x15FE580", VA = "0x15FE580", Slot = "27")]
		public override ECPoint Add(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6000FFF")]
		[Address(RVA = "0x15FECFC", Offset = "0x15FECFC", VA = "0x15FECFC", Slot = "31")]
		public override ECPoint Twice()
		{
			return null;
		}

		[Token(Token = "0x6001000")]
		[Address(RVA = "0x15FF224", Offset = "0x15FF224", VA = "0x15FF224", Slot = "33")]
		public override ECPoint TwicePlus(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6001001")]
		[Address(RVA = "0x15FF2F4", Offset = "0x15FF2F4", VA = "0x15FF2F4", Slot = "34")]
		public override ECPoint ThreeTimes()
		{
			return null;
		}

		[Token(Token = "0x6001002")]
		[Address(RVA = "0x15FF374", Offset = "0x15FF374", VA = "0x15FF374", Slot = "29")]
		public override ECPoint Negate()
		{
			return null;
		}
	}
	[Token(Token = "0x20001E7")]
	internal class SecP521R1Curve : AbstractFpCurve
	{
		[Token(Token = "0x4000998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly BigInteger q;

		[Token(Token = "0x4000999")]
		private const int SecP521R1_DEFAULT_COORDS = 2;

		[Token(Token = "0x400099A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected readonly SecP521R1Point m_infinity;

		[Token(Token = "0x17000152")]
		public virtual BigInteger Q
		{
			[Token(Token = "0x6001006")]
			[Address(RVA = "0x15FF698", Offset = "0x15FF698", VA = "0x15FF698", Slot = "36")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000153")]
		public override ECPoint Infinity
		{
			[Token(Token = "0x6001007")]
			[Address(RVA = "0x15FF700", Offset = "0x15FF700", VA = "0x15FF700", Slot = "21")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000154")]
		public override int FieldSize
		{
			[Token(Token = "0x6001008")]
			[Address(RVA = "0x15FF708", Offset = "0x15FF708", VA = "0x15FF708", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001003")]
		[Address(RVA = "0x15FF44C", Offset = "0x15FF44C", VA = "0x15FF44C")]
		public SecP521R1Curve()
		{
		}

		[Token(Token = "0x6001004")]
		[Address(RVA = "0x15FF634", Offset = "0x15FF634", VA = "0x15FF634", Slot = "11")]
		protected override ECCurve CloneCurve()
		{
			return null;
		}

		[Token(Token = "0x6001005")]
		[Address(RVA = "0x15FF68C", Offset = "0x15FF68C", VA = "0x15FF68C", Slot = "15")]
		public override bool SupportsCoordinateSystem(int coord)
		{
			return default(bool);
		}

		[Token(Token = "0x6001009")]
		[Address(RVA = "0x15FF77C", Offset = "0x15FF77C", VA = "0x15FF77C", Slot = "5")]
		public override ECFieldElement FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x600100A")]
		[Address(RVA = "0x15FF8F0", Offset = "0x15FF8F0", VA = "0x15FF8F0", Slot = "12")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x600100B")]
		[Address(RVA = "0x15FFA48", Offset = "0x15FFA48", VA = "0x15FFA48", Slot = "13")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
			return null;
		}
	}
	[Token(Token = "0x20001E8")]
	internal class SecP521R1Field
	{
		[Token(Token = "0x400099B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly uint[] P;

		[Token(Token = "0x400099C")]
		private const int P16 = 511;

		[Token(Token = "0x600100D")]
		[Address(RVA = "0x15FFB98", Offset = "0x15FFB98", VA = "0x15FFB98")]
		public static void Add(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x600100E")]
		[Address(RVA = "0x15FFCC0", Offset = "0x15FFCC0", VA = "0x15FFCC0")]
		public static void AddOne(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x600100F")]
		[Address(RVA = "0x15FFDC8", Offset = "0x15FFDC8", VA = "0x15FFDC8")]
		public static uint[] FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6001010")]
		[Address(RVA = "0x15FFE74", Offset = "0x15FFE74", VA = "0x15FFE74")]
		public static void Half(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6001011")]
		[Address(RVA = "0x15FFEE8", Offset = "0x15FFEE8", VA = "0x15FFEE8")]
		public static void Multiply(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6001012")]
		[Address(RVA = "0x1600168", Offset = "0x1600168", VA = "0x1600168")]
		public static void Negate(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6001013")]
		[Address(RVA = "0x1600034", Offset = "0x1600034", VA = "0x1600034")]
		public static void Reduce(uint[] xx, uint[] z)
		{
		}

		[Token(Token = "0x6001014")]
		[Address(RVA = "0x1600220", Offset = "0x1600220", VA = "0x1600220")]
		public static void Reduce23(uint[] z)
		{
		}

		[Token(Token = "0x6001015")]
		[Address(RVA = "0x1600324", Offset = "0x1600324", VA = "0x1600324")]
		public static void Square(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6001016")]
		[Address(RVA = "0x1600444", Offset = "0x1600444", VA = "0x1600444")]
		public static void SquareN(uint[] x, int n, uint[] z)
		{
		}

		[Token(Token = "0x6001017")]
		[Address(RVA = "0x1600530", Offset = "0x1600530", VA = "0x1600530")]
		public static void Subtract(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6001018")]
		[Address(RVA = "0x16005E4", Offset = "0x16005E4", VA = "0x16005E4")]
		public static void Twice(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6001019")]
		[Address(RVA = "0x15FFF84", Offset = "0x15FFF84", VA = "0x15FFF84")]
		protected static void ImplMultiply(uint[] x, uint[] y, uint[] zz)
		{
		}

		[Token(Token = "0x600101A")]
		[Address(RVA = "0x16003B8", Offset = "0x16003B8", VA = "0x16003B8")]
		protected static void ImplSquare(uint[] x, uint[] zz)
		{
		}

		[Token(Token = "0x600101B")]
		[Address(RVA = "0x1600658", Offset = "0x1600658", VA = "0x1600658")]
		public SecP521R1Field()
		{
		}
	}
	[Token(Token = "0x20001E9")]
	internal class SecP521R1FieldElement : ECFieldElement
	{
		[Token(Token = "0x400099D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly BigInteger Q;

		[Token(Token = "0x400099E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected internal readonly uint[] x;

		[Token(Token = "0x17000155")]
		public override bool IsZero
		{
			[Token(Token = "0x6001020")]
			[Address(RVA = "0x160073C", Offset = "0x160073C", VA = "0x160073C", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000156")]
		public override bool IsOne
		{
			[Token(Token = "0x6001021")]
			[Address(RVA = "0x160074C", Offset = "0x160074C", VA = "0x160074C", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000157")]
		public override string FieldName
		{
			[Token(Token = "0x6001024")]
			[Address(RVA = "0x1600794", Offset = "0x1600794", VA = "0x1600794", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000158")]
		public override int FieldSize
		{
			[Token(Token = "0x6001025")]
			[Address(RVA = "0x16007DC", Offset = "0x16007DC", VA = "0x16007DC", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600101D")]
		[Address(RVA = "0x15FF7DC", Offset = "0x15FF7DC", VA = "0x15FF7DC")]
		public SecP521R1FieldElement(BigInteger x)
		{
		}

		[Token(Token = "0x600101E")]
		[Address(RVA = "0x16006DC", Offset = "0x16006DC", VA = "0x16006DC")]
		public SecP521R1FieldElement()
		{
		}

		[Token(Token = "0x600101F")]
		[Address(RVA = "0x1600710", Offset = "0x1600710", VA = "0x1600710")]
		protected internal SecP521R1FieldElement(uint[] x)
		{
		}

		[Token(Token = "0x6001022")]
		[Address(RVA = "0x160075C", Offset = "0x160075C", VA = "0x160075C", Slot = "24")]
		public override bool TestBitZero()
		{
			return default(bool);
		}

		[Token(Token = "0x6001023")]
		[Address(RVA = "0x1600784", Offset = "0x1600784", VA = "0x1600784", Slot = "4")]
		public override BigInteger ToBigInteger()
		{
			return null;
		}

		[Token(Token = "0x6001026")]
		[Address(RVA = "0x1600850", Offset = "0x1600850", VA = "0x1600850", Slot = "7")]
		public override ECFieldElement Add(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6001027")]
		[Address(RVA = "0x1600944", Offset = "0x1600944", VA = "0x1600944", Slot = "8")]
		public override ECFieldElement AddOne()
		{
			return null;
		}

		[Token(Token = "0x6001028")]
		[Address(RVA = "0x16009EC", Offset = "0x16009EC", VA = "0x16009EC", Slot = "9")]
		public override ECFieldElement Subtract(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6001029")]
		[Address(RVA = "0x1600AE0", Offset = "0x1600AE0", VA = "0x1600AE0", Slot = "10")]
		public override ECFieldElement Multiply(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x600102A")]
		[Address(RVA = "0x1600BD4", Offset = "0x1600BD4", VA = "0x1600BD4", Slot = "11")]
		public override ECFieldElement Divide(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x600102B")]
		[Address(RVA = "0x1600CE0", Offset = "0x1600CE0", VA = "0x1600CE0", Slot = "12")]
		public override ECFieldElement Negate()
		{
			return null;
		}

		[Token(Token = "0x600102C")]
		[Address(RVA = "0x1600D88", Offset = "0x1600D88", VA = "0x1600D88", Slot = "13")]
		public override ECFieldElement Square()
		{
			return null;
		}

		[Token(Token = "0x600102D")]
		[Address(RVA = "0x1600E30", Offset = "0x1600E30", VA = "0x1600E30", Slot = "14")]
		public override ECFieldElement Invert()
		{
			return null;
		}

		[Token(Token = "0x600102E")]
		[Address(RVA = "0x1600EEC", Offset = "0x1600EEC", VA = "0x1600EEC", Slot = "15")]
		public override ECFieldElement Sqrt()
		{
			return null;
		}

		[Token(Token = "0x600102F")]
		[Address(RVA = "0x1601000", Offset = "0x1601000", VA = "0x1601000", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001030")]
		[Address(RVA = "0x160109C", Offset = "0x160109C", VA = "0x160109C", Slot = "25")]
		public override bool Equals(ECFieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001031")]
		[Address(RVA = "0x1601138", Offset = "0x1601138", VA = "0x1601138", Slot = "27")]
		public virtual bool Equals(SecP521R1FieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001032")]
		[Address(RVA = "0x160116C", Offset = "0x160116C", VA = "0x160116C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001EA")]
	internal class SecP521R1Point : AbstractFpPoint
	{
		[Token(Token = "0x6001034")]
		[Address(RVA = "0x15FF62C", Offset = "0x15FF62C", VA = "0x15FF62C")]
		public SecP521R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y)
		{
		}

		[Token(Token = "0x6001035")]
		[Address(RVA = "0x15FF978", Offset = "0x15FF978", VA = "0x15FF978")]
		public SecP521R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression)
		{
		}

		[Token(Token = "0x6001036")]
		[Address(RVA = "0x15FFADC", Offset = "0x15FFADC", VA = "0x15FFADC")]
		internal SecP521R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
		}

		[Token(Token = "0x6001037")]
		[Address(RVA = "0x1601288", Offset = "0x1601288", VA = "0x1601288", Slot = "6")]
		protected override ECPoint Detach()
		{
			return null;
		}

		[Token(Token = "0x6001038")]
		[Address(RVA = "0x1601328", Offset = "0x1601328", VA = "0x1601328", Slot = "27")]
		public override ECPoint Add(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6001039")]
		[Address(RVA = "0x1601A1C", Offset = "0x1601A1C", VA = "0x1601A1C", Slot = "31")]
		public override ECPoint Twice()
		{
			return null;
		}

		[Token(Token = "0x600103A")]
		[Address(RVA = "0x1601EFC", Offset = "0x1601EFC", VA = "0x1601EFC", Slot = "33")]
		public override ECPoint TwicePlus(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x600103B")]
		[Address(RVA = "0x1601FCC", Offset = "0x1601FCC", VA = "0x1601FCC", Slot = "34")]
		public override ECPoint ThreeTimes()
		{
			return null;
		}

		[Token(Token = "0x600103C")]
		[Address(RVA = "0x160204C", Offset = "0x160204C", VA = "0x160204C", Slot = "29")]
		public override ECPoint Negate()
		{
			return null;
		}
	}
	[Token(Token = "0x20001EB")]
	internal class SecT113Field
	{
		[Token(Token = "0x400099F")]
		private const ulong M49 = 562949953421311uL;

		[Token(Token = "0x40009A0")]
		private const ulong M57 = 144115188075855871uL;

		[Token(Token = "0x600103D")]
		[Address(RVA = "0x1602124", Offset = "0x1602124", VA = "0x1602124")]
		public static void Add(ulong[] x, ulong[] y, ulong[] z)
		{
		}

		[Token(Token = "0x600103E")]
		[Address(RVA = "0x16021A8", Offset = "0x16021A8", VA = "0x16021A8")]
		public static void AddExt(ulong[] xx, ulong[] yy, ulong[] zz)
		{
		}

		[Token(Token = "0x600103F")]
		[Address(RVA = "0x160228C", Offset = "0x160228C", VA = "0x160228C")]
		public static void AddOne(ulong[] x, ulong[] z)
		{
		}

		[Token(Token = "0x6001040")]
		[Address(RVA = "0x16022EC", Offset = "0x16022EC", VA = "0x16022EC")]
		public static ulong[] FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6001041")]
		[Address(RVA = "0x160238C", Offset = "0x160238C", VA = "0x160238C")]
		public static void Multiply(ulong[] x, ulong[] y, ulong[] z)
		{
		}

		[Token(Token = "0x6001042")]
		[Address(RVA = "0x160261C", Offset = "0x160261C", VA = "0x160261C")]
		public static void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz)
		{
		}

		[Token(Token = "0x6001043")]
		[Address(RVA = "0x160257C", Offset = "0x160257C", VA = "0x160257C")]
		public static void Reduce(ulong[] xx, ulong[] z)
		{
		}

		[Token(Token = "0x6001044")]
		[Address(RVA = "0x160231C", Offset = "0x160231C", VA = "0x160231C")]
		public static void Reduce15(ulong[] z, int zOff)
		{
		}

		[Token(Token = "0x6001045")]
		[Address(RVA = "0x1602670", Offset = "0x1602670", VA = "0x1602670")]
		public static void Square(ulong[] x, ulong[] z)
		{
		}

		[Token(Token = "0x6001046")]
		[Address(RVA = "0x1602774", Offset = "0x1602774", VA = "0x1602774")]
		public static void SquareAddToExt(ulong[] x, ulong[] zz)
		{
		}

		[Token(Token = "0x6001047")]
		[Address(RVA = "0x16027C0", Offset = "0x16027C0", VA = "0x16027C0")]
		public static void SquareN(ulong[] x, int n, ulong[] z)
		{
		}

		[Token(Token = "0x6001048")]
		[Address(RVA = "0x16023DC", Offset = "0x16023DC", VA = "0x16023DC")]
		protected static void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz)
		{
		}

		[Token(Token = "0x6001049")]
		[Address(RVA = "0x1602840", Offset = "0x1602840", VA = "0x1602840")]
		protected static void ImplMulw(ulong x, ulong y, ulong[] z, int zOff)
		{
		}

		[Token(Token = "0x600104A")]
		[Address(RVA = "0x16026B8", Offset = "0x16026B8", VA = "0x16026B8")]
		protected static void ImplSquare(ulong[] x, ulong[] zz)
		{
		}

		[Token(Token = "0x600104B")]
		[Address(RVA = "0x1602A10", Offset = "0x1602A10", VA = "0x1602A10")]
		public SecT113Field()
		{
		}
	}
	[Token(Token = "0x20001EC")]
	internal class SecT113FieldElement : ECFieldElement
	{
		[Token(Token = "0x40009A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected internal readonly ulong[] x;

		[Token(Token = "0x17000159")]
		public override bool IsOne
		{
			[Token(Token = "0x600104F")]
			[Address(RVA = "0x1602B3C", Offset = "0x1602B3C", VA = "0x1602B3C", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700015A")]
		public override bool IsZero
		{
			[Token(Token = "0x6001050")]
			[Address(RVA = "0x1602B48", Offset = "0x1602B48", VA = "0x1602B48", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700015B")]
		public override string FieldName
		{
			[Token(Token = "0x6001053")]
			[Address(RVA = "0x1602B98", Offset = "0x1602B98", VA = "0x1602B98", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015C")]
		public override int FieldSize
		{
			[Token(Token = "0x6001054")]
			[Address(RVA = "0x1602BE0", Offset = "0x1602BE0", VA = "0x1602BE0", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700015D")]
		public virtual int Representation
		{
			[Token(Token = "0x6001063")]
			[Address(RVA = "0x160332C", Offset = "0x160332C", VA = "0x160332C", Slot = "27")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700015E")]
		public virtual int M
		{
			[Token(Token = "0x6001064")]
			[Address(RVA = "0x1603334", Offset = "0x1603334", VA = "0x1603334", Slot = "28")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700015F")]
		public virtual int K1
		{
			[Token(Token = "0x6001065")]
			[Address(RVA = "0x160333C", Offset = "0x160333C", VA = "0x160333C", Slot = "29")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000160")]
		public virtual int K2
		{
			[Token(Token = "0x6001066")]
			[Address(RVA = "0x1603344", Offset = "0x1603344", VA = "0x1603344", Slot = "30")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000161")]
		public virtual int K3
		{
			[Token(Token = "0x6001067")]
			[Address(RVA = "0x160334C", Offset = "0x160334C", VA = "0x160334C", Slot = "31")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600104C")]
		[Address(RVA = "0x1602A18", Offset = "0x1602A18", VA = "0x1602A18")]
		public SecT113FieldElement(BigInteger x)
		{
		}

		[Token(Token = "0x600104D")]
		[Address(RVA = "0x1602AE0", Offset = "0x1602AE0", VA = "0x1602AE0")]
		public SecT113FieldElement()
		{
		}

		[Token(Token = "0x600104E")]
		[Address(RVA = "0x1602B10", Offset = "0x1602B10", VA = "0x1602B10")]
		protected internal SecT113FieldElement(ulong[] x)
		{
		}

		[Token(Token = "0x6001051")]
		[Address(RVA = "0x1602B54", Offset = "0x1602B54", VA = "0x1602B54", Slot = "24")]
		public override bool TestBitZero()
		{
			return default(bool);
		}

		[Token(Token = "0x6001052")]
		[Address(RVA = "0x1602B8C", Offset = "0x1602B8C", VA = "0x1602B8C", Slot = "4")]
		public override BigInteger ToBigInteger()
		{
			return null;
		}

		[Token(Token = "0x6001055")]
		[Address(RVA = "0x1602BE8", Offset = "0x1602BE8", VA = "0x1602BE8", Slot = "7")]
		public override ECFieldElement Add(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6001056")]
		[Address(RVA = "0x1602CB0", Offset = "0x1602CB0", VA = "0x1602CB0", Slot = "8")]
		public override ECFieldElement AddOne()
		{
			return null;
		}

		[Token(Token = "0x6001057")]
		[Address(RVA = "0x1602D30", Offset = "0x1602D30", VA = "0x1602D30", Slot = "9")]
		public override ECFieldElement Subtract(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6001058")]
		[Address(RVA = "0x1602D3C", Offset = "0x1602D3C", VA = "0x1602D3C", Slot = "10")]
		public override ECFieldElement Multiply(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6001059")]
		[Address(RVA = "0x1602E04", Offset = "0x1602E04", VA = "0x1602E04", Slot = "19")]
		public override ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x600105A")]
		[Address(RVA = "0x1602E14", Offset = "0x1602E14", VA = "0x1602E14", Slot = "20")]
		public override ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x600105B")]
		[Address(RVA = "0x1602F7C", Offset = "0x1602F7C", VA = "0x1602F7C", Slot = "11")]
		public override ECFieldElement Divide(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x600105C")]
		[Address(RVA = "0x1602FC8", Offset = "0x1602FC8", VA = "0x1602FC8", Slot = "12")]
		public override ECFieldElement Negate()
		{
			return null;
		}

		[Token(Token = "0x600105D")]
		[Address(RVA = "0x1602FCC", Offset = "0x1602FCC", VA = "0x1602FCC", Slot = "13")]
		public override ECFieldElement Square()
		{
			return null;
		}

		[Token(Token = "0x600105E")]
		[Address(RVA = "0x160304C", Offset = "0x160304C", VA = "0x160304C", Slot = "21")]
		public override ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x600105F")]
		[Address(RVA = "0x160305C", Offset = "0x160305C", VA = "0x160305C", Slot = "22")]
		public override ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x6001060")]
		[Address(RVA = "0x160318C", Offset = "0x160318C", VA = "0x160318C", Slot = "23")]
		public override ECFieldElement SquarePow(int pow)
		{
			return null;
		}

		[Token(Token = "0x6001061")]
		[Address(RVA = "0x1603224", Offset = "0x1603224", VA = "0x1603224", Slot = "14")]
		public override ECFieldElement Invert()
		{
			return null;
		}

		[Token(Token = "0x6001062")]
		[Address(RVA = "0x16032EC", Offset = "0x16032EC", VA = "0x16032EC", Slot = "15")]
		public override ECFieldElement Sqrt()
		{
			return null;
		}

		[Token(Token = "0x6001068")]
		[Address(RVA = "0x1603354", Offset = "0x1603354", VA = "0x1603354", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001069")]
		[Address(RVA = "0x16033F0", Offset = "0x16033F0", VA = "0x16033F0", Slot = "25")]
		public override bool Equals(ECFieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x600106A")]
		[Address(RVA = "0x160348C", Offset = "0x160348C", VA = "0x160348C", Slot = "32")]
		public virtual bool Equals(SecT113FieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x600106B")]
		[Address(RVA = "0x16034B8", Offset = "0x16034B8", VA = "0x16034B8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001ED")]
	internal class SecT113R1Curve : AbstractF2mCurve
	{
		[Token(Token = "0x40009A2")]
		private const int SecT113R1_DEFAULT_COORDS = 6;

		[Token(Token = "0x40009A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected readonly SecT113R1Point m_infinity;

		[Token(Token = "0x17000162")]
		public override ECPoint Infinity
		{
			[Token(Token = "0x600106F")]
			[Address(RVA = "0x1603718", Offset = "0x1603718", VA = "0x1603718", Slot = "21")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000163")]
		public override int FieldSize
		{
			[Token(Token = "0x6001070")]
			[Address(RVA = "0x1603720", Offset = "0x1603720", VA = "0x1603720", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000164")]
		public override bool IsKoblitz
		{
			[Token(Token = "0x6001074")]
			[Address(RVA = "0x1603980", Offset = "0x1603980", VA = "0x1603980", Slot = "37")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000165")]
		public virtual int M
		{
			[Token(Token = "0x6001077")]
			[Address(RVA = "0x1603DCC", Offset = "0x1603DCC", VA = "0x1603DCC", Slot = "38")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000166")]
		public virtual bool IsTrinomial
		{
			[Token(Token = "0x6001078")]
			[Address(RVA = "0x1603DD4", Offset = "0x1603DD4", VA = "0x1603DD4", Slot = "39")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000167")]
		public virtual int K1
		{
			[Token(Token = "0x6001079")]
			[Address(RVA = "0x1603DDC", Offset = "0x1603DDC", VA = "0x1603DDC", Slot = "40")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000168")]
		public virtual int K2
		{
			[Token(Token = "0x600107A")]
			[Address(RVA = "0x1603DE4", Offset = "0x1603DE4", VA = "0x1603DE4", Slot = "41")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000169")]
		public virtual int K3
		{
			[Token(Token = "0x600107B")]
			[Address(RVA = "0x1603DEC", Offset = "0x1603DEC", VA = "0x1603DEC", Slot = "42")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600106C")]
		[Address(RVA = "0x16034E8", Offset = "0x16034E8", VA = "0x16034E8")]
		public SecT113R1Curve()
		{
		}

		[Token(Token = "0x600106D")]
		[Address(RVA = "0x16036B4", Offset = "0x16036B4", VA = "0x16036B4", Slot = "11")]
		protected override ECCurve CloneCurve()
		{
			return null;
		}

		[Token(Token = "0x600106E")]
		[Address(RVA = "0x160370C", Offset = "0x160370C", VA = "0x160370C", Slot = "15")]
		public override bool SupportsCoordinateSystem(int coord)
		{
			return default(bool);
		}

		[Token(Token = "0x6001071")]
		[Address(RVA = "0x1603728", Offset = "0x1603728", VA = "0x1603728", Slot = "5")]
		public override ECFieldElement FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6001072")]
		[Address(RVA = "0x1603788", Offset = "0x1603788", VA = "0x1603788", Slot = "12")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x6001073")]
		[Address(RVA = "0x16038E0", Offset = "0x16038E0", VA = "0x16038E0", Slot = "13")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x6001075")]
		[Address(RVA = "0x1603988", Offset = "0x1603988", VA = "0x1603988", Slot = "32")]
		protected override ECPoint DecompressPoint(int yTilde, BigInteger X1)
		{
			return null;
		}

		[Token(Token = "0x6001076")]
		[Address(RVA = "0x1603BB4", Offset = "0x1603BB4", VA = "0x1603BB4")]
		private ECFieldElement SolveQuadraticEquation(ECFieldElement beta)
		{
			return null;
		}
	}
	[Token(Token = "0x20001EE")]
	internal class SecT113R1Point : AbstractF2mPoint
	{
		[Token(Token = "0x1700016A")]
		public override ECFieldElement YCoord
		{
			[Token(Token = "0x6001080")]
			[Address(RVA = "0x1603E94", Offset = "0x1603E94", VA = "0x1603E94", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016B")]
		protected internal override bool CompressionYTilde
		{
			[Token(Token = "0x6001081")]
			[Address(RVA = "0x1603F7C", Offset = "0x1603F7C", VA = "0x1603F7C", Slot = "26")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600107C")]
		[Address(RVA = "0x16036AC", Offset = "0x16036AC", VA = "0x16036AC")]
		public SecT113R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y)
		{
		}

		[Token(Token = "0x600107D")]
		[Address(RVA = "0x1603810", Offset = "0x1603810", VA = "0x1603810")]
		public SecT113R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression)
		{
		}

		[Token(Token = "0x600107E")]
		[Address(RVA = "0x1603974", Offset = "0x1603974", VA = "0x1603974")]
		internal SecT113R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
		}

		[Token(Token = "0x600107F")]
		[Address(RVA = "0x1603DF4", Offset = "0x1603DF4", VA = "0x1603DF4", Slot = "6")]
		protected override ECPoint Detach()
		{
			return null;
		}

		[Token(Token = "0x6001082")]
		[Address(RVA = "0x1603FFC", Offset = "0x1603FFC", VA = "0x1603FFC", Slot = "27")]
		public override ECPoint Add(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6001083")]
		[Address(RVA = "0x16046E8", Offset = "0x16046E8", VA = "0x16046E8", Slot = "31")]
		public override ECPoint Twice()
		{
			return null;
		}

		[Token(Token = "0x6001084")]
		[Address(RVA = "0x1604A64", Offset = "0x1604A64", VA = "0x1604A64", Slot = "33")]
		public override ECPoint TwicePlus(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6001085")]
		[Address(RVA = "0x1604F8C", Offset = "0x1604F8C", VA = "0x1604F8C", Slot = "29")]
		public override ECPoint Negate()
		{
			return null;
		}
	}
	[Token(Token = "0x20001EF")]
	internal class SecT113R2Curve : AbstractF2mCurve
	{
		[Token(Token = "0x40009A4")]
		private const int SecT113R2_DEFAULT_COORDS = 6;

		[Token(Token = "0x40009A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected readonly SecT113R2Point m_infinity;

		[Token(Token = "0x1700016C")]
		public override ECPoint Infinity
		{
			[Token(Token = "0x6001089")]
			[Address(RVA = "0x160531C", Offset = "0x160531C", VA = "0x160531C", Slot = "21")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016D")]
		public override int FieldSize
		{
			[Token(Token = "0x600108A")]
			[Address(RVA = "0x1605324", Offset = "0x1605324", VA = "0x1605324", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700016E")]
		public override bool IsKoblitz
		{
			[Token(Token = "0x600108E")]
			[Address(RVA = "0x1605584", Offset = "0x1605584", VA = "0x1605584", Slot = "37")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700016F")]
		public virtual int M
		{
			[Token(Token = "0x6001091")]
			[Address(RVA = "0x16059D0", Offset = "0x16059D0", VA = "0x16059D0", Slot = "38")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000170")]
		public virtual bool IsTrinomial
		{
			[Token(Token = "0x6001092")]
			[Address(RVA = "0x16059D8", Offset = "0x16059D8", VA = "0x16059D8", Slot = "39")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000171")]
		public virtual int K1
		{
			[Token(Token = "0x6001093")]
			[Address(RVA = "0x16059E0", Offset = "0x16059E0", VA = "0x16059E0", Slot = "40")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000172")]
		public virtual int K2
		{
			[Token(Token = "0x6001094")]
			[Address(RVA = "0x16059E8", Offset = "0x16059E8", VA = "0x16059E8", Slot = "41")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000173")]
		public virtual int K3
		{
			[Token(Token = "0x6001095")]
			[Address(RVA = "0x16059F0", Offset = "0x16059F0", VA = "0x16059F0", Slot = "42")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001086")]
		[Address(RVA = "0x16050EC", Offset = "0x16050EC", VA = "0x16050EC")]
		public SecT113R2Curve()
		{
		}

		[Token(Token = "0x6001087")]
		[Address(RVA = "0x16052B8", Offset = "0x16052B8", VA = "0x16052B8", Slot = "11")]
		protected override ECCurve CloneCurve()
		{
			return null;
		}

		[Token(Token = "0x6001088")]
		[Address(RVA = "0x1605310", Offset = "0x1605310", VA = "0x1605310", Slot = "15")]
		public override bool SupportsCoordinateSystem(int coord)
		{
			return default(bool);
		}

		[Token(Token = "0x600108B")]
		[Address(RVA = "0x160532C", Offset = "0x160532C", VA = "0x160532C", Slot = "5")]
		public override ECFieldElement FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x600108C")]
		[Address(RVA = "0x160538C", Offset = "0x160538C", VA = "0x160538C", Slot = "12")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x600108D")]
		[Address(RVA = "0x16054E4", Offset = "0x16054E4", VA = "0x16054E4", Slot = "13")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x600108F")]
		[Address(RVA = "0x160558C", Offset = "0x160558C", VA = "0x160558C", Slot = "32")]
		protected override ECPoint DecompressPoint(int yTilde, BigInteger X1)
		{
			return null;
		}

		[Token(Token = "0x6001090")]
		[Address(RVA = "0x16057B8", Offset = "0x16057B8", VA = "0x16057B8")]
		private ECFieldElement SolveQuadraticEquation(ECFieldElement beta)
		{
			return null;
		}
	}
	[Token(Token = "0x20001F0")]
	internal class SecT113R2Point : AbstractF2mPoint
	{
		[Token(Token = "0x17000174")]
		public override ECFieldElement YCoord
		{
			[Token(Token = "0x600109A")]
			[Address(RVA = "0x1605A98", Offset = "0x1605A98", VA = "0x1605A98", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000175")]
		protected internal override bool CompressionYTilde
		{
			[Token(Token = "0x600109B")]
			[Address(RVA = "0x1605B80", Offset = "0x1605B80", VA = "0x1605B80", Slot = "26")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001096")]
		[Address(RVA = "0x16052B0", Offset = "0x16052B0", VA = "0x16052B0")]
		public SecT113R2Point(ECCurve curve, ECFieldElement x, ECFieldElement y)
		{
		}

		[Token(Token = "0x6001097")]
		[Address(RVA = "0x1605414", Offset = "0x1605414", VA = "0x1605414")]
		public SecT113R2Point(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression)
		{
		}

		[Token(Token = "0x6001098")]
		[Address(RVA = "0x1605578", Offset = "0x1605578", VA = "0x1605578")]
		internal SecT113R2Point(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
		}

		[Token(Token = "0x6001099")]
		[Address(RVA = "0x16059F8", Offset = "0x16059F8", VA = "0x16059F8", Slot = "6")]
		protected override ECPoint Detach()
		{
			return null;
		}

		[Token(Token = "0x600109C")]
		[Address(RVA = "0x1605C00", Offset = "0x1605C00", VA = "0x1605C00", Slot = "27")]
		public override ECPoint Add(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x600109D")]
		[Address(RVA = "0x16062EC", Offset = "0x16062EC", VA = "0x16062EC", Slot = "31")]
		public override ECPoint Twice()
		{
			return null;
		}

		[Token(Token = "0x600109E")]
		[Address(RVA = "0x1606668", Offset = "0x1606668", VA = "0x1606668", Slot = "33")]
		public override ECPoint TwicePlus(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x600109F")]
		[Address(RVA = "0x1606B90", Offset = "0x1606B90", VA = "0x1606B90", Slot = "29")]
		public override ECPoint Negate()
		{
			return null;
		}
	}
	[Token(Token = "0x20001F1")]
	internal class SecT131Field
	{
		[Token(Token = "0x40009A6")]
		private const ulong M03 = 7uL;

		[Token(Token = "0x40009A7")]
		private const ulong M44 = 17592186044415uL;

		[Token(Token = "0x60010A0")]
		[Address(RVA = "0x1606CF0", Offset = "0x1606CF0", VA = "0x1606CF0")]
		public static void Add(ulong[] x, ulong[] y, ulong[] z)
		{
		}

		[Token(Token = "0x60010A1")]
		[Address(RVA = "0x1606DA4", Offset = "0x1606DA4", VA = "0x1606DA4")]
		public static void AddExt(ulong[] xx, ulong[] yy, ulong[] zz)
		{
		}

		[Token(Token = "0x60010A2")]
		[Address(RVA = "0x1606EB8", Offset = "0x1606EB8", VA = "0x1606EB8")]
		public static void AddOne(ulong[] x, ulong[] z)
		{
		}

		[Token(Token = "0x60010A3")]
		[Address(RVA = "0x1606F34", Offset = "0x1606F34", VA = "0x1606F34")]
		public static ulong[] FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x60010A4")]
		[Address(RVA = "0x1607000", Offset = "0x1607000", VA = "0x1607000")]
		public static void Multiply(ulong[] x, ulong[] y, ulong[] z)
		{
		}

		[Token(Token = "0x60010A5")]
		[Address(RVA = "0x1607454", Offset = "0x1607454", VA = "0x1607454")]
		public static void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz)
		{
		}

		[Token(Token = "0x60010A6")]
		[Address(RVA = "0x1607368", Offset = "0x1607368", VA = "0x1607368")]
		public static void Reduce(ulong[] xx, ulong[] z)
		{
		}

		[Token(Token = "0x60010A7")]
		[Address(RVA = "0x1606F64", Offset = "0x1606F64", VA = "0x1606F64")]
		public static void Reduce61(ulong[] z, int zOff)
		{
		}

		[Token(Token = "0x60010A8")]
		[Address(RVA = "0x16074A8", Offset = "0x16074A8", VA = "0x16074A8")]
		public static void Square(ulong[] x, ulong[] z)
		{
		}

		[Token(Token = "0x60010A9")]
		[Address(RVA = "0x16075E4", Offset = "0x16075E4", VA = "0x16075E4")]
		public static void SquareAddToExt(ulong[] x, ulong[] zz)
		{
		}

		[Token(Token = "0x60010AA")]
		[Address(RVA = "0x1607634", Offset = "0x1607634", VA = "0x1607634")]
		public static void SquareN(ulong[] x, int n, ulong[] z)
		{
		}

		[Token(Token = "0x60010AB")]
		[Address(RVA = "0x16076B8", Offset = "0x16076B8", VA = "0x16076B8")]
		protected static void ImplCompactExt(ulong[] zz)
		{
		}

		[Token(Token = "0x60010AC")]
		[Address(RVA = "0x1607050", Offset = "0x1607050", VA = "0x1607050")]
		protected static void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz)
		{
		}

		[Token(Token = "0x60010AD")]
		[Address(RVA = "0x1607754", Offset = "0x1607754", VA = "0x1607754")]
		protected static void ImplMulw(ulong x, ulong y, ulong[] z, int zOff)
		{
		}

		[Token(Token = "0x60010AE")]
		[Address(RVA = "0x16074F4", Offset = "0x16074F4", VA = "0x16074F4")]
		protected static void ImplSquare(ulong[] x, ulong[] zz)
		{
		}

		[Token(Token = "0x60010AF")]
		[Address(RVA = "0x1607948", Offset = "0x1607948", VA = "0x1607948")]
		public SecT131Field()
		{
		}
	}
	[Token(Token = "0x20001F2")]
	internal class SecT131FieldElement : ECFieldElement
	{
		[Token(Token = "0x40009A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly ulong[] x;

		[Token(Token = "0x17000176")]
		public override bool IsOne
		{
			[Token(Token = "0x60010B3")]
			[Address(RVA = "0x1607A74", Offset = "0x1607A74", VA = "0x1607A74", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000177")]
		public override bool IsZero
		{
			[Token(Token = "0x60010B4")]
			[Address(RVA = "0x1607A80", Offset = "0x1607A80", VA = "0x1607A80", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000178")]
		public override string FieldName
		{
			[Token(Token = "0x60010B7")]
			[Address(RVA = "0x1607AD0", Offset = "0x1607AD0", VA = "0x1607AD0", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000179")]
		public override int FieldSize
		{
			[Token(Token = "0x60010B8")]
			[Address(RVA = "0x1607B18", Offset = "0x1607B18", VA = "0x1607B18", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700017A")]
		public virtual int Representation
		{
			[Token(Token = "0x60010C7")]
			[Address(RVA = "0x160825C", Offset = "0x160825C", VA = "0x160825C", Slot = "27")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700017B")]
		public virtual int M
		{
			[Token(Token = "0x60010C8")]
			[Address(RVA = "0x1608264", Offset = "0x1608264", VA = "0x1608264", Slot = "28")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700017C")]
		public virtual int K1
		{
			[Token(Token = "0x60010C9")]
			[Address(RVA = "0x160826C", Offset = "0x160826C", VA = "0x160826C", Slot = "29")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700017D")]
		public virtual int K2
		{
			[Token(Token = "0x60010CA")]
			[Address(RVA = "0x1608274", Offset = "0x1608274", VA = "0x1608274", Slot = "30")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700017E")]
		public virtual int K3
		{
			[Token(Token = "0x60010CB")]
			[Address(RVA = "0x160827C", Offset = "0x160827C", VA = "0x160827C", Slot = "31")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60010B0")]
		[Address(RVA = "0x1607950", Offset = "0x1607950", VA = "0x1607950")]
		public SecT131FieldElement(BigInteger x)
		{
		}

		[Token(Token = "0x60010B1")]
		[Address(RVA = "0x1607A18", Offset = "0x1607A18", VA = "0x1607A18")]
		public SecT131FieldElement()
		{
		}

		[Token(Token = "0x60010B2")]
		[Address(RVA = "0x1607A48", Offset = "0x1607A48", VA = "0x1607A48")]
		protected internal SecT131FieldElement(ulong[] x)
		{
		}

		[Token(Token = "0x60010B5")]
		[Address(RVA = "0x1607A8C", Offset = "0x1607A8C", VA = "0x1607A8C", Slot = "24")]
		public override bool TestBitZero()
		{
			return default(bool);
		}

		[Token(Token = "0x60010B6")]
		[Address(RVA = "0x1607AC4", Offset = "0x1607AC4", VA = "0x1607AC4", Slot = "4")]
		public override BigInteger ToBigInteger()
		{
			return null;
		}

		[Token(Token = "0x60010B9")]
		[Address(RVA = "0x1607B20", Offset = "0x1607B20", VA = "0x1607B20", Slot = "7")]
		public override ECFieldElement Add(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x60010BA")]
		[Address(RVA = "0x1607BE8", Offset = "0x1607BE8", VA = "0x1607BE8", Slot = "8")]
		public override ECFieldElement AddOne()
		{
			return null;
		}

		[Token(Token = "0x60010BB")]
		[Address(RVA = "0x1607C68", Offset = "0x1607C68", VA = "0x1607C68", Slot = "9")]
		public override ECFieldElement Subtract(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x60010BC")]
		[Address(RVA = "0x1607C74", Offset = "0x1607C74", VA = "0x1607C74", Slot = "10")]
		public override ECFieldElement Multiply(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x60010BD")]
		[Address(RVA = "0x1607D3C", Offset = "0x1607D3C", VA = "0x1607D3C", Slot = "19")]
		public override ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x60010BE")]
		[Address(RVA = "0x1607D4C", Offset = "0x1607D4C", VA = "0x1607D4C", Slot = "20")]
		public override ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x60010BF")]
		[Address(RVA = "0x1607EB8", Offset = "0x1607EB8", VA = "0x1607EB8", Slot = "11")]
		public override ECFieldElement Divide(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x60010C0")]
		[Address(RVA = "0x1607F04", Offset = "0x1607F04", VA = "0x1607F04", Slot = "12")]
		public override ECFieldElement Negate()
		{
			return null;
		}

		[Token(Token = "0x60010C1")]
		[Address(RVA = "0x1607F08", Offset = "0x1607F08", VA = "0x1607F08", Slot = "13")]
		public override ECFieldElement Square()
		{
			return null;
		}

		[Token(Token = "0x60010C2")]
		[Address(RVA = "0x1607F88", Offset = "0x1607F88", VA = "0x1607F88", Slot = "21")]
		public override ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x60010C3")]
		[Address(RVA = "0x1607F98", Offset = "0x1607F98", VA = "0x1607F98", Slot = "22")]
		public override ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x60010C4")]
		[Address(RVA = "0x16080CC", Offset = "0x16080CC", VA = "0x16080CC", Slot = "23")]
		public override ECFieldElement SquarePow(int pow)
		{
			return null;
		}

		[Token(Token = "0x60010C5")]
		[Address(RVA = "0x1608164", Offset = "0x1608164", VA = "0x1608164", Slot = "14")]
		public override ECFieldElement Invert()
		{
			return null;
		}

		[Token(Token = "0x60010C6")]
		[Address(RVA = "0x160821C", Offset = "0x160821C", VA = "0x160821C", Slot = "15")]
		public override ECFieldElement Sqrt()
		{
			return null;
		}

		[Token(Token = "0x60010CC")]
		[Address(RVA = "0x1608284", Offset = "0x1608284", VA = "0x1608284", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60010CD")]
		[Address(RVA = "0x1608320", Offset = "0x1608320", VA = "0x1608320", Slot = "25")]
		public override bool Equals(ECFieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x60010CE")]
		[Address(RVA = "0x16083BC", Offset = "0x16083BC", VA = "0x16083BC", Slot = "32")]
		public virtual bool Equals(SecT131FieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x60010CF")]
		[Address(RVA = "0x16083E8", Offset = "0x16083E8", VA = "0x16083E8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001F3")]
	internal class SecT131R1Curve : AbstractF2mCurve
	{
		[Token(Token = "0x40009A9")]
		private const int SecT131R1_DEFAULT_COORDS = 6;

		[Token(Token = "0x40009AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected readonly SecT131R1Point m_infinity;

		[Token(Token = "0x1700017F")]
		public override ECPoint Infinity
		{
			[Token(Token = "0x60010D3")]
			[Address(RVA = "0x1608648", Offset = "0x1608648", VA = "0x1608648", Slot = "21")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000180")]
		public override int FieldSize
		{
			[Token(Token = "0x60010D4")]
			[Address(RVA = "0x1608650", Offset = "0x1608650", VA = "0x1608650", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000181")]
		public override bool IsKoblitz
		{
			[Token(Token = "0x60010D8")]
			[Address(RVA = "0x16088B0", Offset = "0x16088B0", VA = "0x16088B0", Slot = "37")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000182")]
		public virtual int M
		{
			[Token(Token = "0x60010DB")]
			[Address(RVA = "0x1608CFC", Offset = "0x1608CFC", VA = "0x1608CFC", Slot = "38")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000183")]
		public virtual bool IsTrinomial
		{
			[Token(Token = "0x60010DC")]
			[Address(RVA = "0x1608D04", Offset = "0x1608D04", VA = "0x1608D04", Slot = "39")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000184")]
		public virtual int K1
		{
			[Token(Token = "0x60010DD")]
			[Address(RVA = "0x1608D0C", Offset = "0x1608D0C", VA = "0x1608D0C", Slot = "40")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000185")]
		public virtual int K2
		{
			[Token(Token = "0x60010DE")]
			[Address(RVA = "0x1608D14", Offset = "0x1608D14", VA = "0x1608D14", Slot = "41")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000186")]
		public virtual int K3
		{
			[Token(Token = "0x60010DF")]
			[Address(RVA = "0x1608D1C", Offset = "0x1608D1C", VA = "0x1608D1C", Slot = "42")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60010D0")]
		[Address(RVA = "0x1608418", Offset = "0x1608418", VA = "0x1608418")]
		public SecT131R1Curve()
		{
		}

		[Token(Token = "0x60010D1")]
		[Address(RVA = "0x16085E4", Offset = "0x16085E4", VA = "0x16085E4", Slot = "11")]
		protected override ECCurve CloneCurve()
		{
			return null;
		}

		[Token(Token = "0x60010D2")]
		[Address(RVA = "0x160863C", Offset = "0x160863C", VA = "0x160863C", Slot = "15")]
		public override bool SupportsCoordinateSystem(int coord)
		{
			return default(bool);
		}

		[Token(Token = "0x60010D5")]
		[Address(RVA = "0x1608658", Offset = "0x1608658", VA = "0x1608658", Slot = "5")]
		public override ECFieldElement FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x60010D6")]
		[Address(RVA = "0x16086B8", Offset = "0x16086B8", VA = "0x16086B8", Slot = "12")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x60010D7")]
		[Address(RVA = "0x1608810", Offset = "0x1608810", VA = "0x1608810", Slot = "13")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x60010D9")]
		[Address(RVA = "0x16088B8", Offset = "0x16088B8", VA = "0x16088B8", Slot = "32")]
		protected override ECPoint DecompressPoint(int yTilde, BigInteger X1)
		{
			return null;
		}

		[Token(Token = "0x60010DA")]
		[Address(RVA = "0x1608AE4", Offset = "0x1608AE4", VA = "0x1608AE4")]
		private ECFieldElement SolveQuadraticEquation(ECFieldElement beta)
		{
			return null;
		}
	}
	[Token(Token = "0x20001F4")]
	internal class SecT131R1Point : AbstractF2mPoint
	{
		[Token(Token = "0x17000187")]
		public override ECFieldElement YCoord
		{
			[Token(Token = "0x60010E4")]
			[Address(RVA = "0x1608DC4", Offset = "0x1608DC4", VA = "0x1608DC4", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000188")]
		protected internal override bool CompressionYTilde
		{
			[Token(Token = "0x60010E5")]
			[Address(RVA = "0x1608EAC", Offset = "0x1608EAC", VA = "0x1608EAC", Slot = "26")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60010E0")]
		[Address(RVA = "0x16085DC", Offset = "0x16085DC", VA = "0x16085DC")]
		public SecT131R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y)
		{
		}

		[Token(Token = "0x60010E1")]
		[Address(RVA = "0x1608740", Offset = "0x1608740", VA = "0x1608740")]
		public SecT131R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression)
		{
		}

		[Token(Token = "0x60010E2")]
		[Address(RVA = "0x16088A4", Offset = "0x16088A4", VA = "0x16088A4")]
		internal SecT131R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
		}

		[Token(Token = "0x60010E3")]
		[Address(RVA = "0x1608D24", Offset = "0x1608D24", VA = "0x1608D24", Slot = "6")]
		protected override ECPoint Detach()
		{
			return null;
		}

		[Token(Token = "0x60010E6")]
		[Address(RVA = "0x1608F2C", Offset = "0x1608F2C", VA = "0x1608F2C", Slot = "27")]
		public override ECPoint Add(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x60010E7")]
		[Address(RVA = "0x1609618", Offset = "0x1609618", VA = "0x1609618", Slot = "31")]
		public override ECPoint Twice()
		{
			return null;
		}

		[Token(Token = "0x60010E8")]
		[Address(RVA = "0x1609994", Offset = "0x1609994", VA = "0x1609994", Slot = "33")]
		public override ECPoint TwicePlus(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x60010E9")]
		[Address(RVA = "0x1609EBC", Offset = "0x1609EBC", VA = "0x1609EBC", Slot = "29")]
		public override ECPoint Negate()
		{
			return null;
		}
	}
	[Token(Token = "0x20001F5")]
	internal class SecT131R2Curve : AbstractF2mCurve
	{
		[Token(Token = "0x40009AB")]
		private const int SecT131R2_DEFAULT_COORDS = 6;

		[Token(Token = "0x40009AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected readonly SecT131R2Point m_infinity;

		[Token(Token = "0x17000189")]
		public override int FieldSize
		{
			[Token(Token = "0x60010ED")]
			[Address(RVA = "0x160A24C", Offset = "0x160A24C", VA = "0x160A24C", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700018A")]
		public override ECPoint Infinity
		{
			[Token(Token = "0x60010F1")]
			[Address(RVA = "0x160A4AC", Offset = "0x160A4AC", VA = "0x160A4AC", Slot = "21")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700018B")]
		public override bool IsKoblitz
		{
			[Token(Token = "0x60010F2")]
			[Address(RVA = "0x160A4B4", Offset = "0x160A4B4", VA = "0x160A4B4", Slot = "37")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700018C")]
		public virtual int M
		{
			[Token(Token = "0x60010F5")]
			[Address(RVA = "0x160A900", Offset = "0x160A900", VA = "0x160A900", Slot = "38")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700018D")]
		public virtual bool IsTrinomial
		{
			[Token(Token = "0x60010F6")]
			[Address(RVA = "0x160A908", Offset = "0x160A908", VA = "0x160A908", Slot = "39")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700018E")]
		public virtual int K1
		{
			[Token(Token = "0x60010F7")]
			[Address(RVA = "0x160A910", Offset = "0x160A910", VA = "0x160A910", Slot = "40")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700018F")]
		public virtual int K2
		{
			[Token(Token = "0x60010F8")]
			[Address(RVA = "0x160A918", Offset = "0x160A918", VA = "0x160A918", Slot = "41")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000190")]
		public virtual int K3
		{
			[Token(Token = "0x60010F9")]
			[Address(RVA = "0x160A920", Offset = "0x160A920", VA = "0x160A920", Slot = "42")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60010EA")]
		[Address(RVA = "0x160A01C", Offset = "0x160A01C", VA = "0x160A01C")]
		public SecT131R2Curve()
		{
		}

		[Token(Token = "0x60010EB")]
		[Address(RVA = "0x160A1E8", Offset = "0x160A1E8", VA = "0x160A1E8", Slot = "11")]
		protected override ECCurve CloneCurve()
		{
			return null;
		}

		[Token(Token = "0x60010EC")]
		[Address(RVA = "0x160A240", Offset = "0x160A240", VA = "0x160A240", Slot = "15")]
		public override bool SupportsCoordinateSystem(int coord)
		{
			return default(bool);
		}

		[Token(Token = "0x60010EE")]
		[Address(RVA = "0x160A254", Offset = "0x160A254", VA = "0x160A254", Slot = "5")]
		public override ECFieldElement FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x60010EF")]
		[Address(RVA = "0x160A2B4", Offset = "0x160A2B4", VA = "0x160A2B4", Slot = "12")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x60010F0")]
		[Address(RVA = "0x160A40C", Offset = "0x160A40C", VA = "0x160A40C", Slot = "13")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x60010F3")]
		[Address(RVA = "0x160A4BC", Offset = "0x160A4BC", VA = "0x160A4BC", Slot = "32")]
		protected override ECPoint DecompressPoint(int yTilde, BigInteger X1)
		{
			return null;
		}

		[Token(Token = "0x60010F4")]
		[Address(RVA = "0x160A6E8", Offset = "0x160A6E8", VA = "0x160A6E8")]
		private ECFieldElement SolveQuadraticEquation(ECFieldElement beta)
		{
			return null;
		}
	}
	[Token(Token = "0x20001F6")]
	internal class SecT131R2Point : AbstractF2mPoint
	{
		[Token(Token = "0x17000191")]
		public override ECFieldElement YCoord
		{
			[Token(Token = "0x60010FE")]
			[Address(RVA = "0x160A9C8", Offset = "0x160A9C8", VA = "0x160A9C8", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000192")]
		protected internal override bool CompressionYTilde
		{
			[Token(Token = "0x60010FF")]
			[Address(RVA = "0x160AAB0", Offset = "0x160AAB0", VA = "0x160AAB0", Slot = "26")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60010FA")]
		[Address(RVA = "0x160A1E0", Offset = "0x160A1E0", VA = "0x160A1E0")]
		public SecT131R2Point(ECCurve curve, ECFieldElement x, ECFieldElement y)
		{
		}

		[Token(Token = "0x60010FB")]
		[Address(RVA = "0x160A33C", Offset = "0x160A33C", VA = "0x160A33C")]
		public SecT131R2Point(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression)
		{
		}

		[Token(Token = "0x60010FC")]
		[Address(RVA = "0x160A4A0", Offset = "0x160A4A0", VA = "0x160A4A0")]
		internal SecT131R2Point(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
		}

		[Token(Token = "0x60010FD")]
		[Address(RVA = "0x160A928", Offset = "0x160A928", VA = "0x160A928", Slot = "6")]
		protected override ECPoint Detach()
		{
			return null;
		}

		[Token(Token = "0x6001100")]
		[Address(RVA = "0x160AB30", Offset = "0x160AB30", VA = "0x160AB30", Slot = "27")]
		public override ECPoint Add(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6001101")]
		[Address(RVA = "0x160B21C", Offset = "0x160B21C", VA = "0x160B21C", Slot = "31")]
		public override ECPoint Twice()
		{
			return null;
		}

		[Token(Token = "0x6001102")]
		[Address(RVA = "0x160B598", Offset = "0x160B598", VA = "0x160B598", Slot = "33")]
		public override ECPoint TwicePlus(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6001103")]
		[Address(RVA = "0x160BAC0", Offset = "0x160BAC0", VA = "0x160BAC0", Slot = "29")]
		public override ECPoint Negate()
		{
			return null;
		}
	}
	[Token(Token = "0x20001F7")]
	internal class SecT163Field
	{
		[Token(Token = "0x40009AD")]
		private const ulong M35 = 34359738367uL;

		[Token(Token = "0x40009AE")]
		private const ulong M55 = 36028797018963967uL;

		[Token(Token = "0x6001104")]
		[Address(RVA = "0x160BC20", Offset = "0x160BC20", VA = "0x160BC20")]
		public static void Add(ulong[] x, ulong[] y, ulong[] z)
		{
		}

		[Token(Token = "0x6001105")]
		[Address(RVA = "0x160BCD4", Offset = "0x160BCD4", VA = "0x160BCD4")]
		public static void AddExt(ulong[] xx, ulong[] yy, ulong[] zz)
		{
		}

		[Token(Token = "0x6001106")]
		[Address(RVA = "0x160BE18", Offset = "0x160BE18", VA = "0x160BE18")]
		public static void AddOne(ulong[] x, ulong[] z)
		{
		}

		[Token(Token = "0x6001107")]
		[Address(RVA = "0x160BE94", Offset = "0x160BE94", VA = "0x160BE94")]
		public static ulong[] FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6001108")]
		[Address(RVA = "0x160BF3C", Offset = "0x160BF3C", VA = "0x160BF3C")]
		public static void Multiply(ulong[] x, ulong[] y, ulong[] z)
		{
		}

		[Token(Token = "0x6001109")]
		[Address(RVA = "0x160C39C", Offset = "0x160C39C", VA = "0x160C39C")]
		public static void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz)
		{
		}

		[Token(Token = "0x600110A")]
		[Address(RVA = "0x160C29C", Offset = "0x160C29C", VA = "0x160C29C")]
		public static void Reduce(ulong[] xx, ulong[] z)
		{
		}

		[Token(Token = "0x600110B")]
		[Address(RVA = "0x160BEC4", Offset = "0x160BEC4", VA = "0x160BEC4")]
		public static void Reduce29(ulong[] z, int zOff)
		{
		}

		[Token(Token = "0x600110C")]
		[Address(RVA = "0x160C3F0", Offset = "0x160C3F0", VA = "0x160C3F0")]
		public static void Square(ulong[] x, ulong[] z)
		{
		}

		[Token(Token = "0x600110D")]
		[Address(RVA = "0x160C548", Offset = "0x160C548", VA = "0x160C548")]
		public static void SquareAddToExt(ulong[] x, ulong[] zz)
		{
		}

		[Token(Token = "0x600110E")]
		[Address(RVA = "0x160C594", Offset = "0x160C594", VA = "0x160C594")]
		public static void SquareN(ulong[] x, int n, ulong[] z)
		{
		}

		[Token(Token = "0x600110F")]
		[Address(RVA = "0x160C614", Offset = "0x160C614", VA = "0x160C614")]
		protected static void ImplCompactExt(ulong[] zz)
		{
		}

		[Token(Token = "0x6001110")]
		[Address(RVA = "0x160BF8C", Offset = "0x160BF8C", VA = "0x160BF8C")]
		protected static void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz)
		{
		}

		[Token(Token = "0x6001111")]
		[Address(RVA = "0x160C6AC", Offset = "0x160C6AC", VA = "0x160C6AC")]
		protected static void ImplMulw(ulong x, ulong y, ulong[] z, int zOff)
		{
		}

		[Token(Token = "0x6001112")]
		[Address(RVA = "0x160C438", Offset = "0x160C438", VA = "0x160C438")]
		protected static void ImplSquare(ulong[] x, ulong[] zz)
		{
		}

		[Token(Token = "0x6001113")]
		[Address(RVA = "0x160C85C", Offset = "0x160C85C", VA = "0x160C85C")]
		public SecT163Field()
		{
		}
	}
	[Token(Token = "0x20001F8")]
	internal class SecT163FieldElement : ECFieldElement
	{
		[Token(Token = "0x40009AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly ulong[] x;

		[Token(Token = "0x17000193")]
		public override bool IsOne
		{
			[Token(Token = "0x6001117")]
			[Address(RVA = "0x160C988", Offset = "0x160C988", VA = "0x160C988", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000194")]
		public override bool IsZero
		{
			[Token(Token = "0x6001118")]
			[Address(RVA = "0x160C994", Offset = "0x160C994", VA = "0x160C994", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000195")]
		public override string FieldName
		{
			[Token(Token = "0x600111B")]
			[Address(RVA = "0x160C9E4", Offset = "0x160C9E4", VA = "0x160C9E4", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000196")]
		public override int FieldSize
		{
			[Token(Token = "0x600111C")]
			[Address(RVA = "0x160CA2C", Offset = "0x160CA2C", VA = "0x160CA2C", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000197")]
		public virtual int Representation
		{
			[Token(Token = "0x600112B")]
			[Address(RVA = "0x160D168", Offset = "0x160D168", VA = "0x160D168", Slot = "27")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000198")]
		public virtual int M
		{
			[Token(Token = "0x600112C")]
			[Address(RVA = "0x160D170", Offset = "0x160D170", VA = "0x160D170", Slot = "28")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000199")]
		public virtual int K1
		{
			[Token(Token = "0x600112D")]
			[Address(RVA = "0x160D178", Offset = "0x160D178", VA = "0x160D178", Slot = "29")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700019A")]
		public virtual int K2
		{
			[Token(Token = "0x600112E")]
			[Address(RVA = "0x160D180", Offset = "0x160D180", VA = "0x160D180", Slot = "30")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700019B")]
		public virtual int K3
		{
			[Token(Token = "0x600112F")]
			[Address(RVA = "0x160D188", Offset = "0x160D188", VA = "0x160D188", Slot = "31")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001114")]
		[Address(RVA = "0x160C864", Offset = "0x160C864", VA = "0x160C864")]
		public SecT163FieldElement(BigInteger x)
		{
		}

		[Token(Token = "0x6001115")]
		[Address(RVA = "0x160C92C", Offset = "0x160C92C", VA = "0x160C92C")]
		public SecT163FieldElement()
		{
		}

		[Token(Token = "0x6001116")]
		[Address(RVA = "0x160C95C", Offset = "0x160C95C", VA = "0x160C95C")]
		protected internal SecT163FieldElement(ulong[] x)
		{
		}

		[Token(Token = "0x6001119")]
		[Address(RVA = "0x160C9A0", Offset = "0x160C9A0", VA = "0x160C9A0", Slot = "24")]
		public override bool TestBitZero()
		{
			return default(bool);
		}

		[Token(Token = "0x600111A")]
		[Address(RVA = "0x160C9D8", Offset = "0x160C9D8", VA = "0x160C9D8", Slot = "4")]
		public override BigInteger ToBigInteger()
		{
			return null;
		}

		[Token(Token = "0x600111D")]
		[Address(RVA = "0x160CA34", Offset = "0x160CA34", VA = "0x160CA34", Slot = "7")]
		public override ECFieldElement Add(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x600111E")]
		[Address(RVA = "0x160CAFC", Offset = "0x160CAFC", VA = "0x160CAFC", Slot = "8")]
		public override ECFieldElement AddOne()
		{
			return null;
		}

		[Token(Token = "0x600111F")]
		[Address(RVA = "0x160CB7C", Offset = "0x160CB7C", VA = "0x160CB7C", Slot = "9")]
		public override ECFieldElement Subtract(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6001120")]
		[Address(RVA = "0x160CB88", Offset = "0x160CB88", VA = "0x160CB88", Slot = "10")]
		public override ECFieldElement Multiply(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6001121")]
		[Address(RVA = "0x160CC50", Offset = "0x160CC50", VA = "0x160CC50", Slot = "19")]
		public override ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x6001122")]
		[Address(RVA = "0x160CC60", Offset = "0x160CC60", VA = "0x160CC60", Slot = "20")]
		public override ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x6001123")]
		[Address(RVA = "0x160CDC8", Offset = "0x160CDC8", VA = "0x160CDC8", Slot = "11")]
		public override ECFieldElement Divide(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6001124")]
		[Address(RVA = "0x160CE14", Offset = "0x160CE14", VA = "0x160CE14", Slot = "12")]
		public override ECFieldElement Negate()
		{
			return null;
		}

		[Token(Token = "0x6001125")]
		[Address(RVA = "0x160CE18", Offset = "0x160CE18", VA = "0x160CE18", Slot = "13")]
		public override ECFieldElement Square()
		{
			return null;
		}

		[Token(Token = "0x6001126")]
		[Address(RVA = "0x160CE98", Offset = "0x160CE98", VA = "0x160CE98", Slot = "21")]
		public override ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x6001127")]
		[Address(RVA = "0x160CEA8", Offset = "0x160CEA8", VA = "0x160CEA8", Slot = "22")]
		public override ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x6001128")]
		[Address(RVA = "0x160CFD8", Offset = "0x160CFD8", VA = "0x160CFD8", Slot = "23")]
		public override ECFieldElement SquarePow(int pow)
		{
			return null;
		}

		[Token(Token = "0x6001129")]
		[Address(RVA = "0x160D070", Offset = "0x160D070", VA = "0x160D070", Slot = "14")]
		public override ECFieldElement Invert()
		{
			return null;
		}

		[Token(Token = "0x600112A")]
		[Address(RVA = "0x160D128", Offset = "0x160D128", VA = "0x160D128", Slot = "15")]
		public override ECFieldElement Sqrt()
		{
			return null;
		}

		[Token(Token = "0x6001130")]
		[Address(RVA = "0x160D190", Offset = "0x160D190", VA = "0x160D190", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001131")]
		[Address(RVA = "0x160D22C", Offset = "0x160D22C", VA = "0x160D22C", Slot = "25")]
		public override bool Equals(ECFieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001132")]
		[Address(RVA = "0x160D2C8", Offset = "0x160D2C8", VA = "0x160D2C8", Slot = "32")]
		public virtual bool Equals(SecT163FieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001133")]
		[Address(RVA = "0x160D2F4", Offset = "0x160D2F4", VA = "0x160D2F4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001F9")]
	internal class SecT163K1Curve : AbstractF2mCurve
	{
		[Token(Token = "0x40009B0")]
		private const int SecT163K1_DEFAULT_COORDS = 6;

		[Token(Token = "0x40009B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected readonly SecT163K1Point m_infinity;

		[Token(Token = "0x1700019C")]
		public override ECPoint Infinity
		{
			[Token(Token = "0x6001138")]
			[Address(RVA = "0x160D530", Offset = "0x160D530", VA = "0x160D530", Slot = "21")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019D")]
		public override int FieldSize
		{
			[Token(Token = "0x6001139")]
			[Address(RVA = "0x160D538", Offset = "0x160D538", VA = "0x160D538", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700019E")]
		public override bool IsKoblitz
		{
			[Token(Token = "0x600113D")]
			[Address(RVA = "0x160D798", Offset = "0x160D798", VA = "0x160D798", Slot = "37")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700019F")]
		public virtual int M
		{
			[Token(Token = "0x6001140")]
			[Address(RVA = "0x160DBE4", Offset = "0x160DBE4", VA = "0x160DBE4", Slot = "38")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001A0")]
		public virtual bool IsTrinomial
		{
			[Token(Token = "0x6001141")]
			[Address(RVA = "0x160DBEC", Offset = "0x160DBEC", VA = "0x160DBEC", Slot = "39")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001A1")]
		public virtual int K1
		{
			[Token(Token = "0x6001142")]
			[Address(RVA = "0x160DBF4", Offset = "0x160DBF4", VA = "0x160DBF4", Slot = "40")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001A2")]
		public virtual int K2
		{
			[Token(Token = "0x6001143")]
			[Address(RVA = "0x160DBFC", Offset = "0x160DBFC", VA = "0x160DBFC", Slot = "41")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001A3")]
		public virtual int K3
		{
			[Token(Token = "0x6001144")]
			[Address(RVA = "0x160DC04", Offset = "0x160DC04", VA = "0x160DC04", Slot = "42")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001134")]
		[Address(RVA = "0x160D324", Offset = "0x160D324", VA = "0x160D324")]
		public SecT163K1Curve()
		{
		}

		[Token(Token = "0x6001135")]
		[Address(RVA = "0x160D470", Offset = "0x160D470", VA = "0x160D470", Slot = "11")]
		protected override ECCurve CloneCurve()
		{
			return null;
		}

		[Token(Token = "0x6001136")]
		[Address(RVA = "0x160D4C8", Offset = "0x160D4C8", VA = "0x160D4C8", Slot = "15")]
		public override bool SupportsCoordinateSystem(int coord)
		{
			return default(bool);
		}

		[Token(Token = "0x6001137")]
		[Address(RVA = "0x160D4D4", Offset = "0x160D4D4", VA = "0x160D4D4", Slot = "14")]
		protected override ECMultiplier CreateDefaultMultiplier()
		{
			return null;
		}

		[Token(Token = "0x600113A")]
		[Address(RVA = "0x160D540", Offset = "0x160D540", VA = "0x160D540", Slot = "5")]
		public override ECFieldElement FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x600113B")]
		[Address(RVA = "0x160D5A0", Offset = "0x160D5A0", VA = "0x160D5A0", Slot = "12")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x600113C")]
		[Address(RVA = "0x160D6F8", Offset = "0x160D6F8", VA = "0x160D6F8", Slot = "13")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x600113E")]
		[Address(RVA = "0x160D7A0", Offset = "0x160D7A0", VA = "0x160D7A0", Slot = "32")]
		protected override ECPoint DecompressPoint(int yTilde, BigInteger X1)
		{
			return null;
		}

		[Token(Token = "0x600113F")]
		[Address(RVA = "0x160D9CC", Offset = "0x160D9CC", VA = "0x160D9CC")]
		private ECFieldElement SolveQuadraticEquation(ECFieldElement beta)
		{
			return null;
		}
	}
	[Token(Token = "0x20001FA")]
	internal class SecT163K1Point : AbstractF2mPoint
	{
		[Token(Token = "0x170001A4")]
		public override ECFieldElement YCoord
		{
			[Token(Token = "0x6001149")]
			[Address(RVA = "0x160DCAC", Offset = "0x160DCAC", VA = "0x160DCAC", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A5")]
		protected internal override bool CompressionYTilde
		{
			[Token(Token = "0x600114A")]
			[Address(RVA = "0x160DD94", Offset = "0x160DD94", VA = "0x160DD94", Slot = "26")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001145")]
		[Address(RVA = "0x160D468", Offset = "0x160D468", VA = "0x160D468")]
		public SecT163K1Point(ECCurve curve, ECFieldElement x, ECFieldElement y)
		{
		}

		[Token(Token = "0x6001146")]
		[Address(RVA = "0x160D628", Offset = "0x160D628", VA = "0x160D628")]
		public SecT163K1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression)
		{
		}

		[Token(Token = "0x6001147")]
		[Address(RVA = "0x160D78C", Offset = "0x160D78C", VA = "0x160D78C")]
		internal SecT163K1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
		}

		[Token(Token = "0x6001148")]
		[Address(RVA = "0x160DC0C", Offset = "0x160DC0C", VA = "0x160DC0C", Slot = "6")]
		protected override ECPoint Detach()
		{
			return null;
		}

		[Token(Token = "0x600114B")]
		[Address(RVA = "0x160DE14", Offset = "0x160DE14", VA = "0x160DE14", Slot = "27")]
		public override ECPoint Add(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x600114C")]
		[Address(RVA = "0x160E4CC", Offset = "0x160E4CC", VA = "0x160E4CC", Slot = "31")]
		public override ECPoint Twice()
		{
			return null;
		}

		[Token(Token = "0x600114D")]
		[Address(RVA = "0x160E814", Offset = "0x160E814", VA = "0x160E814", Slot = "33")]
		public override ECPoint TwicePlus(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x600114E")]
		[Address(RVA = "0x160ECF4", Offset = "0x160ECF4", VA = "0x160ECF4", Slot = "29")]
		public override ECPoint Negate()
		{
			return null;
		}
	}
	[Token(Token = "0x20001FB")]
	internal class SecT163R1Curve : AbstractF2mCurve
	{
		[Token(Token = "0x40009B2")]
		private const int SecT163R1_DEFAULT_COORDS = 6;

		[Token(Token = "0x40009B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected readonly SecT163R1Point m_infinity;

		[Token(Token = "0x170001A6")]
		public override ECPoint Infinity
		{
			[Token(Token = "0x6001152")]
			[Address(RVA = "0x153C8E0", Offset = "0x153C8E0", VA = "0x153C8E0", Slot = "21")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A7")]
		public override int FieldSize
		{
			[Token(Token = "0x6001153")]
			[Address(RVA = "0x153C8E8", Offset = "0x153C8E8", VA = "0x153C8E8", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001A8")]
		public override bool IsKoblitz
		{
			[Token(Token = "0x6001157")]
			[Address(RVA = "0x153CB4C", Offset = "0x153CB4C", VA = "0x153CB4C", Slot = "37")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001A9")]
		public virtual int M
		{
			[Token(Token = "0x600115A")]
			[Address(RVA = "0x153CF98", Offset = "0x153CF98", VA = "0x153CF98", Slot = "38")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001AA")]
		public virtual bool IsTrinomial
		{
			[Token(Token = "0x600115B")]
			[Address(RVA = "0x153CFA0", Offset = "0x153CFA0", VA = "0x153CFA0", Slot = "39")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001AB")]
		public virtual int K1
		{
			[Token(Token = "0x600115C")]
			[Address(RVA = "0x153CFA8", Offset = "0x153CFA8", VA = "0x153CFA8", Slot = "40")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001AC")]
		public virtual int K2
		{
			[Token(Token = "0x600115D")]
			[Address(RVA = "0x153CFB0", Offset = "0x153CFB0", VA = "0x153CFB0", Slot = "41")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001AD")]
		public virtual int K3
		{
			[Token(Token = "0x600115E")]
			[Address(RVA = "0x153CFB8", Offset = "0x153CFB8", VA = "0x153CFB8", Slot = "42")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600114F")]
		[Address(RVA = "0x153C6B0", Offset = "0x153C6B0", VA = "0x153C6B0")]
		public SecT163R1Curve()
		{
		}

		[Token(Token = "0x6001150")]
		[Address(RVA = "0x153C87C", Offset = "0x153C87C", VA = "0x153C87C", Slot = "11")]
		protected override ECCurve CloneCurve()
		{
			return null;
		}

		[Token(Token = "0x6001151")]
		[Address(RVA = "0x153C8D4", Offset = "0x153C8D4", VA = "0x153C8D4", Slot = "15")]
		public override bool SupportsCoordinateSystem(int coord)
		{
			return default(bool);
		}

		[Token(Token = "0x6001154")]
		[Address(RVA = "0x153C8F0", Offset = "0x153C8F0", VA = "0x153C8F0", Slot = "5")]
		public override ECFieldElement FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6001155")]
		[Address(RVA = "0x153C954", Offset = "0x153C954", VA = "0x153C954", Slot = "12")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x6001156")]
		[Address(RVA = "0x153CAAC", Offset = "0x153CAAC", VA = "0x153CAAC", Slot = "13")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x6001158")]
		[Address(RVA = "0x153CB54", Offset = "0x153CB54", VA = "0x153CB54", Slot = "32")]
		protected override ECPoint DecompressPoint(int yTilde, BigInteger X1)
		{
			return null;
		}

		[Token(Token = "0x6001159")]
		[Address(RVA = "0x153CD80", Offset = "0x153CD80", VA = "0x153CD80")]
		private ECFieldElement SolveQuadraticEquation(ECFieldElement beta)
		{
			return null;
		}
	}
	[Token(Token = "0x20001FC")]
	internal class SecT163R1Point : AbstractF2mPoint
	{
		[Token(Token = "0x170001AE")]
		public override ECFieldElement YCoord
		{
			[Token(Token = "0x6001163")]
			[Address(RVA = "0x153D060", Offset = "0x153D060", VA = "0x153D060", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001AF")]
		protected internal override bool CompressionYTilde
		{
			[Token(Token = "0x6001164")]
			[Address(RVA = "0x153D148", Offset = "0x153D148", VA = "0x153D148", Slot = "26")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600115F")]
		[Address(RVA = "0x153C874", Offset = "0x153C874", VA = "0x153C874")]
		public SecT163R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y)
		{
		}

		[Token(Token = "0x6001160")]
		[Address(RVA = "0x153C9DC", Offset = "0x153C9DC", VA = "0x153C9DC")]
		public SecT163R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression)
		{
		}

		[Token(Token = "0x6001161")]
		[Address(RVA = "0x153CB40", Offset = "0x153CB40", VA = "0x153CB40")]
		internal SecT163R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
		}

		[Token(Token = "0x6001162")]
		[Address(RVA = "0x153CFC0", Offset = "0x153CFC0", VA = "0x153CFC0", Slot = "6")]
		protected override ECPoint Detach()
		{
			return null;
		}

		[Token(Token = "0x6001165")]
		[Address(RVA = "0x153D1C8", Offset = "0x153D1C8", VA = "0x153D1C8", Slot = "27")]
		public override ECPoint Add(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6001166")]
		[Address(RVA = "0x153D8B4", Offset = "0x153D8B4", VA = "0x153D8B4", Slot = "31")]
		public override ECPoint Twice()
		{
			return null;
		}

		[Token(Token = "0x6001167")]
		[Address(RVA = "0x153DC30", Offset = "0x153DC30", VA = "0x153DC30", Slot = "33")]
		public override ECPoint TwicePlus(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6001168")]
		[Address(RVA = "0x153E158", Offset = "0x153E158", VA = "0x153E158", Slot = "29")]
		public override ECPoint Negate()
		{
			return null;
		}
	}
	[Token(Token = "0x20001FD")]
	internal class SecT163R2Curve : AbstractF2mCurve
	{
		[Token(Token = "0x40009B4")]
		private const int SecT163R2_DEFAULT_COORDS = 6;

		[Token(Token = "0x40009B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected readonly SecT163R2Point m_infinity;

		[Token(Token = "0x170001B0")]
		public override ECPoint Infinity
		{
			[Token(Token = "0x600116C")]
			[Address(RVA = "0x153E4B8", Offset = "0x153E4B8", VA = "0x153E4B8", Slot = "21")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B1")]
		public override int FieldSize
		{
			[Token(Token = "0x600116D")]
			[Address(RVA = "0x153E4C0", Offset = "0x153E4C0", VA = "0x153E4C0", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001B2")]
		public override bool IsKoblitz
		{
			[Token(Token = "0x6001171")]
			[Address(RVA = "0x153E724", Offset = "0x153E724", VA = "0x153E724", Slot = "37")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001B3")]
		public virtual int M
		{
			[Token(Token = "0x6001174")]
			[Address(RVA = "0x153EB70", Offset = "0x153EB70", VA = "0x153EB70", Slot = "38")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001B4")]
		public virtual bool IsTrinomial
		{
			[Token(Token = "0x6001175")]
			[Address(RVA = "0x153EB78", Offset = "0x153EB78", VA = "0x153EB78", Slot = "39")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001B5")]
		public virtual int K1
		{
			[Token(Token = "0x6001176")]
			[Address(RVA = "0x153EB80", Offset = "0x153EB80", VA = "0x153EB80", Slot = "40")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001B6")]
		public virtual int K2
		{
			[Token(Token = "0x6001177")]
			[Address(RVA = "0x153EB88", Offset = "0x153EB88", VA = "0x153EB88", Slot = "41")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001B7")]
		public virtual int K3
		{
			[Token(Token = "0x6001178")]
			[Address(RVA = "0x153EB90", Offset = "0x153EB90", VA = "0x153EB90", Slot = "42")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001169")]
		[Address(RVA = "0x153E2B8", Offset = "0x153E2B8", VA = "0x153E2B8")]
		public SecT163R2Curve()
		{
		}

		[Token(Token = "0x600116A")]
		[Address(RVA = "0x153E454", Offset = "0x153E454", VA = "0x153E454", Slot = "11")]
		protected override ECCurve CloneCurve()
		{
			return null;
		}

		[Token(Token = "0x600116B")]
		[Address(RVA = "0x153E4AC", Offset = "0x153E4AC", VA = "0x153E4AC", Slot = "15")]
		public override bool SupportsCoordinateSystem(int coord)
		{
			return default(bool);
		}

		[Token(Token = "0x600116E")]
		[Address(RVA = "0x153E4C8", Offset = "0x153E4C8", VA = "0x153E4C8", Slot = "5")]
		public override ECFieldElement FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x600116F")]
		[Address(RVA = "0x153E52C", Offset = "0x153E52C", VA = "0x153E52C", Slot = "12")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x6001170")]
		[Address(RVA = "0x153E684", Offset = "0x153E684", VA = "0x153E684", Slot = "13")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x6001172")]
		[Address(RVA = "0x153E72C", Offset = "0x153E72C", VA = "0x153E72C", Slot = "32")]
		protected override ECPoint DecompressPoint(int yTilde, BigInteger X1)
		{
			return null;
		}

		[Token(Token = "0x6001173")]
		[Address(RVA = "0x153E958", Offset = "0x153E958", VA = "0x153E958")]
		private ECFieldElement SolveQuadraticEquation(ECFieldElement beta)
		{
			return null;
		}
	}
	[Token(Token = "0x20001FE")]
	internal class SecT163R2Point : AbstractF2mPoint
	{
		[Token(Token = "0x170001B8")]
		public override ECFieldElement YCoord
		{
			[Token(Token = "0x600117D")]
			[Address(RVA = "0x153EC38", Offset = "0x153EC38", VA = "0x153EC38", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B9")]
		protected internal override bool CompressionYTilde
		{
			[Token(Token = "0x600117E")]
			[Address(RVA = "0x153ED20", Offset = "0x153ED20", VA = "0x153ED20", Slot = "26")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001179")]
		[Address(RVA = "0x153E44C", Offset = "0x153E44C", VA = "0x153E44C")]
		public SecT163R2Point(ECCurve curve, ECFieldElement x, ECFieldElement y)
		{
		}

		[Token(Token = "0x600117A")]
		[Address(RVA = "0x153E5B4", Offset = "0x153E5B4", VA = "0x153E5B4")]
		public SecT163R2Point(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression)
		{
		}

		[Token(Token = "0x600117B")]
		[Address(RVA = "0x153E718", Offset = "0x153E718", VA = "0x153E718")]
		internal SecT163R2Point(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
		}

		[Token(Token = "0x600117C")]
		[Address(RVA = "0x153EB98", Offset = "0x153EB98", VA = "0x153EB98", Slot = "6")]
		protected override ECPoint Detach()
		{
			return null;
		}

		[Token(Token = "0x600117F")]
		[Address(RVA = "0x153EDA0", Offset = "0x153EDA0", VA = "0x153EDA0", Slot = "27")]
		public override ECPoint Add(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6001180")]
		[Address(RVA = "0x153F46C", Offset = "0x153F46C", VA = "0x153F46C", Slot = "31")]
		public override ECPoint Twice()
		{
			return null;
		}

		[Token(Token = "0x6001181")]
		[Address(RVA = "0x153F7B4", Offset = "0x153F7B4", VA = "0x153F7B4", Slot = "33")]
		public override ECPoint TwicePlus(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6001182")]
		[Address(RVA = "0x153FCA8", Offset = "0x153FCA8", VA = "0x153FCA8", Slot = "29")]
		public override ECPoint Negate()
		{
			return null;
		}
	}
	[Token(Token = "0x20001FF")]
	internal class SecT233Field
	{
		[Token(Token = "0x40009B6")]
		private const ulong M41 = 2199023255551uL;

		[Token(Token = "0x40009B7")]
		private const ulong M59 = 576460752303423487uL;

		[Token(Token = "0x6001183")]
		[Address(RVA = "0x153FE08", Offset = "0x153FE08", VA = "0x153FE08")]
		public static void Add(ulong[] x, ulong[] y, ulong[] z)
		{
		}

		[Token(Token = "0x6001184")]
		[Address(RVA = "0x153FEEC", Offset = "0x153FEEC", VA = "0x153FEEC")]
		public static void AddExt(ulong[] xx, ulong[] yy, ulong[] zz)
		{
		}

		[Token(Token = "0x6001185")]
		[Address(RVA = "0x1540090", Offset = "0x1540090", VA = "0x1540090")]
		public static void AddOne(ulong[] x, ulong[] z)
		{
		}

		[Token(Token = "0x6001186")]
		[Address(RVA = "0x1540128", Offset = "0x1540128", VA = "0x1540128")]
		public static ulong[] FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6001187")]
		[Address(RVA = "0x15401E4", Offset = "0x15401E4", VA = "0x15401E4")]
		public static void Multiply(ulong[] x, ulong[] y, ulong[] z)
		{
		}

		[Token(Token = "0x6001188")]
		[Address(RVA = "0x15406C8", Offset = "0x15406C8", VA = "0x15406C8")]
		public static void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz)
		{
		}

		[Token(Token = "0x6001189")]
		[Address(RVA = "0x15405BC", Offset = "0x15405BC", VA = "0x15405BC")]
		public static void Reduce(ulong[] xx, ulong[] z)
		{
		}

		[Token(Token = "0x600118A")]
		[Address(RVA = "0x1540158", Offset = "0x1540158", VA = "0x1540158")]
		public static void Reduce23(ulong[] z, int zOff)
		{
		}

		[Token(Token = "0x600118B")]
		[Address(RVA = "0x154071C", Offset = "0x154071C", VA = "0x154071C")]
		public static void Square(ulong[] x, ulong[] z)
		{
		}

		[Token(Token = "0x600118C")]
		[Address(RVA = "0x1540894", Offset = "0x1540894", VA = "0x1540894")]
		public static void SquareAddToExt(ulong[] x, ulong[] zz)
		{
		}

		[Token(Token = "0x600118D")]
		[Address(RVA = "0x15408E0", Offset = "0x15408E0", VA = "0x15408E0")]
		public static void SquareN(ulong[] x, int n, ulong[] z)
		{
		}

		[Token(Token = "0x600118E")]
		[Address(RVA = "0x1540960", Offset = "0x1540960", VA = "0x1540960")]
		protected static void ImplCompactExt(ulong[] zz)
		{
		}

		[Token(Token = "0x600118F")]
		[Address(RVA = "0x1540A20", Offset = "0x1540A20", VA = "0x1540A20")]
		protected static void ImplExpand(ulong[] x, ulong[] z)
		{
		}

		[Token(Token = "0x6001190")]
		[Address(RVA = "0x1540234", Offset = "0x1540234", VA = "0x1540234")]
		protected static void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz)
		{
		}

		[Token(Token = "0x6001191")]
		[Address(RVA = "0x1540AB8", Offset = "0x1540AB8", VA = "0x1540AB8")]
		protected static void ImplMulwAcc(ulong x, ulong y, ulong[] z, int zOff)
		{
		}

		[Token(Token = "0x6001192")]
		[Address(RVA = "0x1540764", Offset = "0x1540764", VA = "0x1540764")]
		protected static void ImplSquare(ulong[] x, ulong[] zz)
		{
		}

		[Token(Token = "0x6001193")]
		[Address(RVA = "0x1540C74", Offset = "0x1540C74", VA = "0x1540C74")]
		public SecT233Field()
		{
		}
	}
	[Token(Token = "0x2000200")]
	internal class SecT233FieldElement : ECFieldElement
	{
		[Token(Token = "0x40009B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly ulong[] x;

		[Token(Token = "0x170001BA")]
		public override bool IsOne
		{
			[Token(Token = "0x6001197")]
			[Address(RVA = "0x1540DA0", Offset = "0x1540DA0", VA = "0x1540DA0", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001BB")]
		public override bool IsZero
		{
			[Token(Token = "0x6001198")]
			[Address(RVA = "0x1540DAC", Offset = "0x1540DAC", VA = "0x1540DAC", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001BC")]
		public override string FieldName
		{
			[Token(Token = "0x600119B")]
			[Address(RVA = "0x1540DFC", Offset = "0x1540DFC", VA = "0x1540DFC", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001BD")]
		public override int FieldSize
		{
			[Token(Token = "0x600119C")]
			[Address(RVA = "0x1540E44", Offset = "0x1540E44", VA = "0x1540E44", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001BE")]
		public virtual int Representation
		{
			[Token(Token = "0x60011AB")]
			[Address(RVA = "0x1541590", Offset = "0x1541590", VA = "0x1541590", Slot = "27")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001BF")]
		public virtual int M
		{
			[Token(Token = "0x60011AC")]
			[Address(RVA = "0x1541598", Offset = "0x1541598", VA = "0x1541598", Slot = "28")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001C0")]
		public virtual int K1
		{
			[Token(Token = "0x60011AD")]
			[Address(RVA = "0x15415A0", Offset = "0x15415A0", VA = "0x15415A0", Slot = "29")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001C1")]
		public virtual int K2
		{
			[Token(Token = "0x60011AE")]
			[Address(RVA = "0x15415A8", Offset = "0x15415A8", VA = "0x15415A8", Slot = "30")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001C2")]
		public virtual int K3
		{
			[Token(Token = "0x60011AF")]
			[Address(RVA = "0x15415B0", Offset = "0x15415B0", VA = "0x15415B0", Slot = "31")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001194")]
		[Address(RVA = "0x1540C7C", Offset = "0x1540C7C", VA = "0x1540C7C")]
		public SecT233FieldElement(BigInteger x)
		{
		}

		[Token(Token = "0x6001195")]
		[Address(RVA = "0x1540D44", Offset = "0x1540D44", VA = "0x1540D44")]
		public SecT233FieldElement()
		{
		}

		[Token(Token = "0x6001196")]
		[Address(RVA = "0x1540D74", Offset = "0x1540D74", VA = "0x1540D74")]
		protected internal SecT233FieldElement(ulong[] x)
		{
		}

		[Token(Token = "0x6001199")]
		[Address(RVA = "0x1540DB8", Offset = "0x1540DB8", VA = "0x1540DB8", Slot = "24")]
		public override bool TestBitZero()
		{
			return default(bool);
		}

		[Token(Token = "0x600119A")]
		[Address(RVA = "0x1540DF0", Offset = "0x1540DF0", VA = "0x1540DF0", Slot = "4")]
		public override BigInteger ToBigInteger()
		{
			return null;
		}

		[Token(Token = "0x600119D")]
		[Address(RVA = "0x1540E4C", Offset = "0x1540E4C", VA = "0x1540E4C", Slot = "7")]
		public override ECFieldElement Add(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x600119E")]
		[Address(RVA = "0x1540F14", Offset = "0x1540F14", VA = "0x1540F14", Slot = "8")]
		public override ECFieldElement AddOne()
		{
			return null;
		}

		[Token(Token = "0x600119F")]
		[Address(RVA = "0x1540F94", Offset = "0x1540F94", VA = "0x1540F94", Slot = "9")]
		public override ECFieldElement Subtract(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x60011A0")]
		[Address(RVA = "0x1540FA0", Offset = "0x1540FA0", VA = "0x1540FA0", Slot = "10")]
		public override ECFieldElement Multiply(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x60011A1")]
		[Address(RVA = "0x1541068", Offset = "0x1541068", VA = "0x1541068", Slot = "19")]
		public override ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x60011A2")]
		[Address(RVA = "0x1541078", Offset = "0x1541078", VA = "0x1541078", Slot = "20")]
		public override ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x60011A3")]
		[Address(RVA = "0x15411E0", Offset = "0x15411E0", VA = "0x15411E0", Slot = "11")]
		public override ECFieldElement Divide(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x60011A4")]
		[Address(RVA = "0x154122C", Offset = "0x154122C", VA = "0x154122C", Slot = "12")]
		public override ECFieldElement Negate()
		{
			return null;
		}

		[Token(Token = "0x60011A5")]
		[Address(RVA = "0x1541230", Offset = "0x1541230", VA = "0x1541230", Slot = "13")]
		public override ECFieldElement Square()
		{
			return null;
		}

		[Token(Token = "0x60011A6")]
		[Address(RVA = "0x15412B0", Offset = "0x15412B0", VA = "0x15412B0", Slot = "21")]
		public override ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x60011A7")]
		[Address(RVA = "0x15412C0", Offset = "0x15412C0", VA = "0x15412C0", Slot = "22")]
		public override ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x60011A8")]
		[Address(RVA = "0x15413F0", Offset = "0x15413F0", VA = "0x15413F0", Slot = "23")]
		public override ECFieldElement SquarePow(int pow)
		{
			return null;
		}

		[Token(Token = "0x60011A9")]
		[Address(RVA = "0x1541488", Offset = "0x1541488", VA = "0x1541488", Slot = "14")]
		public override ECFieldElement Invert()
		{
			return null;
		}

		[Token(Token = "0x60011AA")]
		[Address(RVA = "0x1541550", Offset = "0x1541550", VA = "0x1541550", Slot = "15")]
		public override ECFieldElement Sqrt()
		{
			return null;
		}

		[Token(Token = "0x60011B0")]
		[Address(RVA = "0x15415B8", Offset = "0x15415B8", VA = "0x15415B8", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60011B1")]
		[Address(RVA = "0x1541654", Offset = "0x1541654", VA = "0x1541654", Slot = "25")]
		public override bool Equals(ECFieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x60011B2")]
		[Address(RVA = "0x15416F0", Offset = "0x15416F0", VA = "0x15416F0", Slot = "32")]
		public virtual bool Equals(SecT233FieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x60011B3")]
		[Address(RVA = "0x154171C", Offset = "0x154171C", VA = "0x154171C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000201")]
	internal class SecT233K1Curve : AbstractF2mCurve
	{
		[Token(Token = "0x40009B9")]
		private const int SecT233K1_DEFAULT_COORDS = 6;

		[Token(Token = "0x40009BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected readonly SecT233K1Point m_infinity;

		[Token(Token = "0x170001C3")]
		public override int FieldSize
		{
			[Token(Token = "0x60011B8")]
			[Address(RVA = "0x1541978", Offset = "0x1541978", VA = "0x1541978", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001C4")]
		public override ECPoint Infinity
		{
			[Token(Token = "0x60011BC")]
			[Address(RVA = "0x1541BD8", Offset = "0x1541BD8", VA = "0x1541BD8", Slot = "21")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C5")]
		public override bool IsKoblitz
		{
			[Token(Token = "0x60011BD")]
			[Address(RVA = "0x1541BE0", Offset = "0x1541BE0", VA = "0x1541BE0", Slot = "37")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001C6")]
		public virtual int M
		{
			[Token(Token = "0x60011C0")]
			[Address(RVA = "0x154202C", Offset = "0x154202C", VA = "0x154202C", Slot = "38")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001C7")]
		public virtual bool IsTrinomial
		{
			[Token(Token = "0x60011C1")]
			[Address(RVA = "0x1542034", Offset = "0x1542034", VA = "0x1542034", Slot = "39")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001C8")]
		public virtual int K1
		{
			[Token(Token = "0x60011C2")]
			[Address(RVA = "0x154203C", Offset = "0x154203C", VA = "0x154203C", Slot = "40")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001C9")]
		public virtual int K2
		{
			[Token(Token = "0x60011C3")]
			[Address(RVA = "0x1542044", Offset = "0x1542044", VA = "0x1542044", Slot = "41")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001CA")]
		public virtual int K3
		{
			[Token(Token = "0x60011C4")]
			[Address(RVA = "0x154204C", Offset = "0x154204C", VA = "0x154204C", Slot = "42")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60011B4")]
		[Address(RVA = "0x154174C", Offset = "0x154174C", VA = "0x154174C")]
		public SecT233K1Curve()
		{
		}

		[Token(Token = "0x60011B5")]
		[Address(RVA = "0x15418B8", Offset = "0x15418B8", VA = "0x15418B8", Slot = "11")]
		protected override ECCurve CloneCurve()
		{
			return null;
		}

		[Token(Token = "0x60011B6")]
		[Address(RVA = "0x1541910", Offset = "0x1541910", VA = "0x1541910", Slot = "15")]
		public override bool SupportsCoordinateSystem(int coord)
		{
			return default(bool);
		}

		[Token(Token = "0x60011B7")]
		[Address(RVA = "0x154191C", Offset = "0x154191C", VA = "0x154191C", Slot = "14")]
		protected override ECMultiplier CreateDefaultMultiplier()
		{
			return null;
		}

		[Token(Token = "0x60011B9")]
		[Address(RVA = "0x1541980", Offset = "0x1541980", VA = "0x1541980", Slot = "5")]
		public override ECFieldElement FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x60011BA")]
		[Address(RVA = "0x15419E0", Offset = "0x15419E0", VA = "0x15419E0", Slot = "12")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x60011BB")]
		[Address(RVA = "0x1541B38", Offset = "0x1541B38", VA = "0x1541B38", Slot = "13")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x60011BE")]
		[Address(RVA = "0x1541BE8", Offset = "0x1541BE8", VA = "0x1541BE8", Slot = "32")]
		protected override ECPoint DecompressPoint(int yTilde, BigInteger X1)
		{
			return null;
		}

		[Token(Token = "0x60011BF")]
		[Address(RVA = "0x1541E14", Offset = "0x1541E14", VA = "0x1541E14")]
		private ECFieldElement SolveQuadraticEquation(ECFieldElement beta)
		{
			return null;
		}
	}
	[Token(Token = "0x2000202")]
	internal class SecT233K1Point : AbstractF2mPoint
	{
		[Token(Token = "0x170001CB")]
		public override ECFieldElement YCoord
		{
			[Token(Token = "0x60011C9")]
			[Address(RVA = "0x15420F4", Offset = "0x15420F4", VA = "0x15420F4", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CC")]
		protected internal override bool CompressionYTilde
		{
			[Token(Token = "0x60011CA")]
			[Address(RVA = "0x15421DC", Offset = "0x15421DC", VA = "0x15421DC", Slot = "26")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60011C5")]
		[Address(RVA = "0x15418B0", Offset = "0x15418B0", VA = "0x15418B0")]
		public SecT233K1Point(ECCurve curve, ECFieldElement x, ECFieldElement y)
		{
		}

		[Token(Token = "0x60011C6")]
		[Address(RVA = "0x1541A68", Offset = "0x1541A68", VA = "0x1541A68")]
		public SecT233K1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression)
		{
		}

		[Token(Token = "0x60011C7")]
		[Address(RVA = "0x1541BCC", Offset = "0x1541BCC", VA = "0x1541BCC")]
		internal SecT233K1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
		}

		[Token(Token = "0x60011C8")]
		[Address(RVA = "0x1542054", Offset = "0x1542054", VA = "0x1542054", Slot = "6")]
		protected override ECPoint Detach()
		{
			return null;
		}

		[Token(Token = "0x60011CB")]
		[Address(RVA = "0x154225C", Offset = "0x154225C", VA = "0x154225C", Slot = "27")]
		public override ECPoint Add(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x60011CC")]
		[Address(RVA = "0x1542904", Offset = "0x1542904", VA = "0x1542904", Slot = "31")]
		public override ECPoint Twice()
		{
			return null;
		}

		[Token(Token = "0x60011CD")]
		[Address(RVA = "0x1542C8C", Offset = "0x1542C8C", VA = "0x1542C8C", Slot = "33")]
		public override ECPoint TwicePlus(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x60011CE")]
		[Address(RVA = "0x1543140", Offset = "0x1543140", VA = "0x1543140", Slot = "29")]
		public override ECPoint Negate()
		{
			return null;
		}
	}
	[Token(Token = "0x2000203")]
	internal class SecT233R1Curve : AbstractF2mCurve
	{
		[Token(Token = "0x40009BB")]
		private const int SecT233R1_DEFAULT_COORDS = 6;

		[Token(Token = "0x40009BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected readonly SecT233R1Point m_infinity;

		[Token(Token = "0x170001CD")]
		public override ECPoint Infinity
		{
			[Token(Token = "0x60011D2")]
			[Address(RVA = "0x15434A0", Offset = "0x15434A0", VA = "0x15434A0", Slot = "21")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CE")]
		public override int FieldSize
		{
			[Token(Token = "0x60011D3")]
			[Address(RVA = "0x15434A8", Offset = "0x15434A8", VA = "0x15434A8", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001CF")]
		public override bool IsKoblitz
		{
			[Token(Token = "0x60011D7")]
			[Address(RVA = "0x1543708", Offset = "0x1543708", VA = "0x1543708", Slot = "37")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001D0")]
		public virtual int M
		{
			[Token(Token = "0x60011DA")]
			[Address(RVA = "0x1543B54", Offset = "0x1543B54", VA = "0x1543B54", Slot = "38")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001D1")]
		public virtual bool IsTrinomial
		{
			[Token(Token = "0x60011DB")]
			[Address(RVA = "0x1543B5C", Offset = "0x1543B5C", VA = "0x1543B5C", Slot = "39")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001D2")]
		public virtual int K1
		{
			[Token(Token = "0x60011DC")]
			[Address(RVA = "0x1543B64", Offset = "0x1543B64", VA = "0x1543B64", Slot = "40")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001D3")]
		public virtual int K2
		{
			[Token(Token = "0x60011DD")]
			[Address(RVA = "0x1543B6C", Offset = "0x1543B6C", VA = "0x1543B6C", Slot = "41")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001D4")]
		public virtual int K3
		{
			[Token(Token = "0x60011DE")]
			[Address(RVA = "0x1543B74", Offset = "0x1543B74", VA = "0x1543B74", Slot = "42")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60011CF")]
		[Address(RVA = "0x15432A0", Offset = "0x15432A0", VA = "0x15432A0")]
		public SecT233R1Curve()
		{
		}

		[Token(Token = "0x60011D0")]
		[Address(RVA = "0x154343C", Offset = "0x154343C", VA = "0x154343C", Slot = "11")]
		protected override ECCurve CloneCurve()
		{
			return null;
		}

		[Token(Token = "0x60011D1")]
		[Address(RVA = "0x1543494", Offset = "0x1543494", VA = "0x1543494", Slot = "15")]
		public override bool SupportsCoordinateSystem(int coord)
		{
			return default(bool);
		}

		[Token(Token = "0x60011D4")]
		[Address(RVA = "0x15434B0", Offset = "0x15434B0", VA = "0x15434B0", Slot = "5")]
		public override ECFieldElement FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x60011D5")]
		[Address(RVA = "0x1543510", Offset = "0x1543510", VA = "0x1543510", Slot = "12")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x60011D6")]
		[Address(RVA = "0x1543668", Offset = "0x1543668", VA = "0x1543668", Slot = "13")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x60011D8")]
		[Address(RVA = "0x1543710", Offset = "0x1543710", VA = "0x1543710", Slot = "32")]
		protected override ECPoint DecompressPoint(int yTilde, BigInteger X1)
		{
			return null;
		}

		[Token(Token = "0x60011D9")]
		[Address(RVA = "0x154393C", Offset = "0x154393C", VA = "0x154393C")]
		private ECFieldElement SolveQuadraticEquation(ECFieldElement beta)
		{
			return null;
		}
	}
	[Token(Token = "0x2000204")]
	internal class SecT233R1Point : AbstractF2mPoint
	{
		[Token(Token = "0x170001D5")]
		public override ECFieldElement YCoord
		{
			[Token(Token = "0x60011E3")]
			[Address(RVA = "0x1543C1C", Offset = "0x1543C1C", VA = "0x1543C1C", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D6")]
		protected internal override bool CompressionYTilde
		{
			[Token(Token = "0x60011E4")]
			[Address(RVA = "0x1543D04", Offset = "0x1543D04", VA = "0x1543D04", Slot = "26")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60011DF")]
		[Address(RVA = "0x1543434", Offset = "0x1543434", VA = "0x1543434")]
		public SecT233R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y)
		{
		}

		[Token(Token = "0x60011E0")]
		[Address(RVA = "0x1543598", Offset = "0x1543598", VA = "0x1543598")]
		public SecT233R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression)
		{
		}

		[Token(Token = "0x60011E1")]
		[Address(RVA = "0x15436FC", Offset = "0x15436FC", VA = "0x15436FC")]
		internal SecT233R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
		}

		[Token(Token = "0x60011E2")]
		[Address(RVA = "0x1543B7C", Offset = "0x1543B7C", VA = "0x1543B7C", Slot = "6")]
		protected override ECPoint Detach()
		{
			return null;
		}

		[Token(Token = "0x60011E5")]
		[Address(RVA = "0x1543D84", Offset = "0x1543D84", VA = "0x1543D84", Slot = "27")]
		public override ECPoint Add(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x60011E6")]
		[Address(RVA = "0x1544450", Offset = "0x1544450", VA = "0x1544450", Slot = "31")]
		public override ECPoint Twice()
		{
			return null;
		}

		[Token(Token = "0x60011E7")]
		[Address(RVA = "0x1544798", Offset = "0x1544798", VA = "0x1544798", Slot = "33")]
		public override ECPoint TwicePlus(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x60011E8")]
		[Address(RVA = "0x1544C8C", Offset = "0x1544C8C", VA = "0x1544C8C", Slot = "29")]
		public override ECPoint Negate()
		{
			return null;
		}
	}
	[Token(Token = "0x2000205")]
	internal class SecT239Field
	{
		[Token(Token = "0x40009BD")]
		private const ulong M47 = 140737488355327uL;

		[Token(Token = "0x40009BE")]
		private const ulong M60 = 1152921504606846975uL;

		[Token(Token = "0x60011E9")]
		[Address(RVA = "0x1544DEC", Offset = "0x1544DEC", VA = "0x1544DEC")]
		public static void Add(ulong[] x, ulong[] y, ulong[] z)
		{
		}

		[Token(Token = "0x60011EA")]
		[Address(RVA = "0x1544ED0", Offset = "0x1544ED0", VA = "0x1544ED0")]
		public static void AddExt(ulong[] xx, ulong[] yy, ulong[] zz)
		{
		}

		[Token(Token = "0x60011EB")]
		[Address(RVA = "0x1545074", Offset = "0x1545074", VA = "0x1545074")]
		public static void AddOne(ulong[] x, ulong[] z)
		{
		}

		[Token(Token = "0x60011EC")]
		[Address(RVA = "0x154510C", Offset = "0x154510C", VA = "0x154510C")]
		public static ulong[] FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x60011ED")]
		[Address(RVA = "0x15451C8", Offset = "0x15451C8", VA = "0x15451C8")]
		public static void Multiply(ulong[] x, ulong[] y, ulong[] z)
		{
		}

		[Token(Token = "0x60011EE")]
		[Address(RVA = "0x15456A0", Offset = "0x15456A0", VA = "0x15456A0")]
		public static void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz)
		{
		}

		[Token(Token = "0x60011EF")]
		[Address(RVA = "0x15455A0", Offset = "0x15455A0", VA = "0x15455A0")]
		public static void Reduce(ulong[] xx, ulong[] z)
		{
		}

		[Token(Token = "0x60011F0")]
		[Address(RVA = "0x154513C", Offset = "0x154513C", VA = "0x154513C")]
		public static void Reduce17(ulong[] z, int zOff)
		{
		}

		[Token(Token = "0x60011F1")]
		[Address(RVA = "0x15456F4", Offset = "0x15456F4", VA = "0x15456F4")]
		public static void Square(ulong[] x, ulong[] z)
		{
		}

		[Token(Token = "0x60011F2")]
		[Address(RVA = "0x154586C", Offset = "0x154586C", VA = "0x154586C")]
		public static void SquareAddToExt(ulong[] x, ulong[] zz)
		{
		}

		[Token(Token = "0x60011F3")]
		[Address(RVA = "0x15458B8", Offset = "0x15458B8", VA = "0x15458B8")]
		public static void SquareN(ulong[] x, int n, ulong[] z)
		{
		}

		[Token(Token = "0x60011F4")]
		[Address(RVA = "0x1545938", Offset = "0x1545938", VA = "0x1545938")]
		protected static void ImplCompactExt(ulong[] zz)
		{
		}

		[Token(Token = "0x60011F5")]
		[Address(RVA = "0x15459F8", Offset = "0x15459F8", VA = "0x15459F8")]
		protected static void ImplExpand(ulong[] x, ulong[] z)
		{
		}

		[Token(Token = "0x60011F6")]
		[Address(RVA = "0x1545218", Offset = "0x1545218", VA = "0x1545218")]
		protected static void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz)
		{
		}

		[Token(Token = "0x60011F7")]
		[Address(RVA = "0x1545A90", Offset = "0x1545A90", VA = "0x1545A90")]
		protected static void ImplMulwAcc(ulong x, ulong y, ulong[] z, int zOff)
		{
		}

		[Token(Token = "0x60011F8")]
		[Address(RVA = "0x154573C", Offset = "0x154573C", VA = "0x154573C")]
		protected static void ImplSquare(ulong[] x, ulong[] zz)
		{
		}

		[Token(Token = "0x60011F9")]
		[Address(RVA = "0x1545C6C", Offset = "0x1545C6C", VA = "0x1545C6C")]
		public SecT239Field()
		{
		}
	}
	[Token(Token = "0x2000206")]
	internal class SecT239FieldElement : ECFieldElement
	{
		[Token(Token = "0x40009BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected ulong[] x;

		[Token(Token = "0x170001D7")]
		public override bool IsOne
		{
			[Token(Token = "0x60011FD")]
			[Address(RVA = "0x1545D98", Offset = "0x1545D98", VA = "0x1545D98", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001D8")]
		public override bool IsZero
		{
			[Token(Token = "0x60011FE")]
			[Address(RVA = "0x1545DA4", Offset = "0x1545DA4", VA = "0x1545DA4", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001D9")]
		public override string FieldName
		{
			[Token(Token = "0x6001201")]
			[Address(RVA = "0x1545DF4", Offset = "0x1545DF4", VA = "0x1545DF4", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DA")]
		public override int FieldSize
		{
			[Token(Token = "0x6001202")]
			[Address(RVA = "0x1545E3C", Offset = "0x1545E3C", VA = "0x1545E3C", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001DB")]
		public virtual int Representation
		{
			[Token(Token = "0x6001211")]
			[Address(RVA = "0x1546588", Offset = "0x1546588", VA = "0x1546588", Slot = "27")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001DC")]
		public virtual int M
		{
			[Token(Token = "0x6001212")]
			[Address(RVA = "0x1546590", Offset = "0x1546590", VA = "0x1546590", Slot = "28")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001DD")]
		public virtual int K1
		{
			[Token(Token = "0x6001213")]
			[Address(RVA = "0x1546598", Offset = "0x1546598", VA = "0x1546598", Slot = "29")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001DE")]
		public virtual int K2
		{
			[Token(Token = "0x6001214")]
			[Address(RVA = "0x15465A0", Offset = "0x15465A0", VA = "0x15465A0", Slot = "30")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001DF")]
		public virtual int K3
		{
			[Token(Token = "0x6001215")]
			[Address(RVA = "0x15465A8", Offset = "0x15465A8", VA = "0x15465A8", Slot = "31")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60011FA")]
		[Address(RVA = "0x1545C74", Offset = "0x1545C74", VA = "0x1545C74")]
		public SecT239FieldElement(BigInteger x)
		{
		}

		[Token(Token = "0x60011FB")]
		[Address(RVA = "0x1545D3C", Offset = "0x1545D3C", VA = "0x1545D3C")]
		public SecT239FieldElement()
		{
		}

		[Token(Token = "0x60011FC")]
		[Address(RVA = "0x1545D6C", Offset = "0x1545D6C", VA = "0x1545D6C")]
		protected internal SecT239FieldElement(ulong[] x)
		{
		}

		[Token(Token = "0x60011FF")]
		[Address(RVA = "0x1545DB0", Offset = "0x1545DB0", VA = "0x1545DB0", Slot = "24")]
		public override bool TestBitZero()
		{
			return default(bool);
		}

		[Token(Token = "0x6001200")]
		[Address(RVA = "0x1545DE8", Offset = "0x1545DE8", VA = "0x1545DE8", Slot = "4")]
		public override BigInteger ToBigInteger()
		{
			return null;
		}

		[Token(Token = "0x6001203")]
		[Address(RVA = "0x1545E44", Offset = "0x1545E44", VA = "0x1545E44", Slot = "7")]
		public override ECFieldElement Add(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6001204")]
		[Address(RVA = "0x1545F0C", Offset = "0x1545F0C", VA = "0x1545F0C", Slot = "8")]
		public override ECFieldElement AddOne()
		{
			return null;
		}

		[Token(Token = "0x6001205")]
		[Address(RVA = "0x1545F8C", Offset = "0x1545F8C", VA = "0x1545F8C", Slot = "9")]
		public override ECFieldElement Subtract(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6001206")]
		[Address(RVA = "0x1545F98", Offset = "0x1545F98", VA = "0x1545F98", Slot = "10")]
		public override ECFieldElement Multiply(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6001207")]
		[Address(RVA = "0x1546060", Offset = "0x1546060", VA = "0x1546060", Slot = "19")]
		public override ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x6001208")]
		[Address(RVA = "0x1546070", Offset = "0x1546070", VA = "0x1546070", Slot = "20")]
		public override ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x6001209")]
		[Address(RVA = "0x15461D8", Offset = "0x15461D8", VA = "0x15461D8", Slot = "11")]
		public override ECFieldElement Divide(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x600120A")]
		[Address(RVA = "0x1546224", Offset = "0x1546224", VA = "0x1546224", Slot = "12")]
		public override ECFieldElement Negate()
		{
			return null;
		}

		[Token(Token = "0x600120B")]
		[Address(RVA = "0x1546228", Offset = "0x1546228", VA = "0x1546228", Slot = "13")]
		public override ECFieldElement Square()
		{
			return null;
		}

		[Token(Token = "0x600120C")]
		[Address(RVA = "0x15462A8", Offset = "0x15462A8", VA = "0x15462A8", Slot = "21")]
		public override ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x600120D")]
		[Address(RVA = "0x15462B8", Offset = "0x15462B8", VA = "0x15462B8", Slot = "22")]
		public override ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x600120E")]
		[Address(RVA = "0x15463E8", Offset = "0x15463E8", VA = "0x15463E8", Slot = "23")]
		public override ECFieldElement SquarePow(int pow)
		{
			return null;
		}

		[Token(Token = "0x600120F")]
		[Address(RVA = "0x1546480", Offset = "0x1546480", VA = "0x1546480", Slot = "14")]
		public override ECFieldElement Invert()
		{
			return null;
		}

		[Token(Token = "0x6001210")]
		[Address(RVA = "0x1546548", Offset = "0x1546548", VA = "0x1546548", Slot = "15")]
		public override ECFieldElement Sqrt()
		{
			return null;
		}

		[Token(Token = "0x6001216")]
		[Address(RVA = "0x15465B0", Offset = "0x15465B0", VA = "0x15465B0", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001217")]
		[Address(RVA = "0x154664C", Offset = "0x154664C", VA = "0x154664C", Slot = "25")]
		public override bool Equals(ECFieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001218")]
		[Address(RVA = "0x15466E8", Offset = "0x15466E8", VA = "0x15466E8", Slot = "32")]
		public virtual bool Equals(SecT239FieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001219")]
		[Address(RVA = "0x1546714", Offset = "0x1546714", VA = "0x1546714", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000207")]
	internal class SecT239K1Curve : AbstractF2mCurve
	{
		[Token(Token = "0x40009C0")]
		private const int SecT239K1_DEFAULT_COORDS = 6;

		[Token(Token = "0x40009C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected readonly SecT239K1Point m_infinity;

		[Token(Token = "0x170001E0")]
		public override ECPoint Infinity
		{
			[Token(Token = "0x600121E")]
			[Address(RVA = "0x1546970", Offset = "0x1546970", VA = "0x1546970", Slot = "21")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E1")]
		public override int FieldSize
		{
			[Token(Token = "0x600121F")]
			[Address(RVA = "0x1546978", Offset = "0x1546978", VA = "0x1546978", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001E2")]
		public override bool IsKoblitz
		{
			[Token(Token = "0x6001223")]
			[Address(RVA = "0x1546BD8", Offset = "0x1546BD8", VA = "0x1546BD8", Slot = "37")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001E3")]
		public virtual int M
		{
			[Token(Token = "0x6001226")]
			[Address(RVA = "0x1547024", Offset = "0x1547024", VA = "0x1547024", Slot = "38")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001E4")]
		public virtual bool IsTrinomial
		{
			[Token(Token = "0x6001227")]
			[Address(RVA = "0x154702C", Offset = "0x154702C", VA = "0x154702C", Slot = "39")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001E5")]
		public virtual int K1
		{
			[Token(Token = "0x6001228")]
			[Address(RVA = "0x1547034", Offset = "0x1547034", VA = "0x1547034", Slot = "40")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001E6")]
		public virtual int K2
		{
			[Token(Token = "0x6001229")]
			[Address(RVA = "0x154703C", Offset = "0x154703C", VA = "0x154703C", Slot = "41")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001E7")]
		public virtual int K3
		{
			[Token(Token = "0x600122A")]
			[Address(RVA = "0x1547044", Offset = "0x1547044", VA = "0x1547044", Slot = "42")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600121A")]
		[Address(RVA = "0x1546744", Offset = "0x1546744", VA = "0x1546744")]
		public SecT239K1Curve()
		{
		}

		[Token(Token = "0x600121B")]
		[Address(RVA = "0x15468B0", Offset = "0x15468B0", VA = "0x15468B0", Slot = "11")]
		protected override ECCurve CloneCurve()
		{
			return null;
		}

		[Token(Token = "0x600121C")]
		[Address(RVA = "0x1546908", Offset = "0x1546908", VA = "0x1546908", Slot = "15")]
		public override bool SupportsCoordinateSystem(int coord)
		{
			return default(bool);
		}

		[Token(Token = "0x600121D")]
		[Address(RVA = "0x1546914", Offset = "0x1546914", VA = "0x1546914", Slot = "14")]
		protected override ECMultiplier CreateDefaultMultiplier()
		{
			return null;
		}

		[Token(Token = "0x6001220")]
		[Address(RVA = "0x1546980", Offset = "0x1546980", VA = "0x1546980", Slot = "5")]
		public override ECFieldElement FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6001221")]
		[Address(RVA = "0x15469E0", Offset = "0x15469E0", VA = "0x15469E0", Slot = "12")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x6001222")]
		[Address(RVA = "0x1546B38", Offset = "0x1546B38", VA = "0x1546B38", Slot = "13")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x6001224")]
		[Address(RVA = "0x1546BE0", Offset = "0x1546BE0", VA = "0x1546BE0", Slot = "32")]
		protected override ECPoint DecompressPoint(int yTilde, BigInteger X1)
		{
			return null;
		}

		[Token(Token = "0x6001225")]
		[Address(RVA = "0x1546E0C", Offset = "0x1546E0C", VA = "0x1546E0C")]
		private ECFieldElement SolveQuadraticEquation(ECFieldElement beta)
		{
			return null;
		}
	}
	[Token(Token = "0x2000208")]
	internal class SecT239K1Point : AbstractF2mPoint
	{
		[Token(Token = "0x170001E8")]
		public override ECFieldElement YCoord
		{
			[Token(Token = "0x600122F")]
			[Address(RVA = "0x15470EC", Offset = "0x15470EC", VA = "0x15470EC", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E9")]
		protected internal override bool CompressionYTilde
		{
			[Token(Token = "0x6001230")]
			[Address(RVA = "0x15471D4", Offset = "0x15471D4", VA = "0x15471D4", Slot = "26")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600122B")]
		[Address(RVA = "0x15468A8", Offset = "0x15468A8", VA = "0x15468A8")]
		public SecT239K1Point(ECCurve curve, ECFieldElement x, ECFieldElement y)
		{
		}

		[Token(Token = "0x600122C")]
		[Address(RVA = "0x1546A68", Offset = "0x1546A68", VA = "0x1546A68")]
		public SecT239K1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression)
		{
		}

		[Token(Token = "0x600122D")]
		[Address(RVA = "0x1546BCC", Offset = "0x1546BCC", VA = "0x1546BCC")]
		internal SecT239K1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
		}

		[Token(Token = "0x600122E")]
		[Address(RVA = "0x154704C", Offset = "0x154704C", VA = "0x154704C", Slot = "6")]
		protected override ECPoint Detach()
		{
			return null;
		}

		[Token(Token = "0x6001231")]
		[Address(RVA = "0x1547254", Offset = "0x1547254", VA = "0x1547254", Slot = "27")]
		public override ECPoint Add(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6001232")]
		[Address(RVA = "0x15478FC", Offset = "0x15478FC", VA = "0x15478FC", Slot = "31")]
		public override ECPoint Twice()
		{
			return null;
		}

		[Token(Token = "0x6001233")]
		[Address(RVA = "0x1547C84", Offset = "0x1547C84", VA = "0x1547C84", Slot = "33")]
		public override ECPoint TwicePlus(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6001234")]
		[Address(RVA = "0x1548138", Offset = "0x1548138", VA = "0x1548138", Slot = "29")]
		public override ECPoint Negate()
		{
			return null;
		}
	}
	[Token(Token = "0x2000209")]
	internal class SecT283Field
	{
		[Token(Token = "0x40009C2")]
		private const ulong M27 = 134217727uL;

		[Token(Token = "0x40009C3")]
		private const ulong M57 = 144115188075855871uL;

		[Token(Token = "0x6001235")]
		[Address(RVA = "0x1548298", Offset = "0x1548298", VA = "0x1548298")]
		public static void Add(ulong[] x, ulong[] y, ulong[] z)
		{
		}

		[Token(Token = "0x6001236")]
		[Address(RVA = "0x15483AC", Offset = "0x15483AC", VA = "0x15483AC")]
		public static void AddExt(ulong[] xx, ulong[] yy, ulong[] zz)
		{
		}

		[Token(Token = "0x6001237")]
		[Address(RVA = "0x1548580", Offset = "0x1548580", VA = "0x1548580")]
		public static void AddOne(ulong[] x, ulong[] z)
		{
		}

		[Token(Token = "0x6001238")]
		[Address(RVA = "0x1548634", Offset = "0x1548634", VA = "0x1548634")]
		public static ulong[] FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6001239")]
		[Address(RVA = "0x15486DC", Offset = "0x15486DC", VA = "0x15486DC")]
		public static void Multiply(ulong[] x, ulong[] y, ulong[] z)
		{
		}

		[Token(Token = "0x600123A")]
		[Address(RVA = "0x1548E20", Offset = "0x1548E20", VA = "0x1548E20")]
		public static void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz)
		{
		}

		[Token(Token = "0x600123B")]
		[Address(RVA = "0x1548CC8", Offset = "0x1548CC8", VA = "0x1548CC8")]
		public static void Reduce(ulong[] xx, ulong[] z)
		{
		}

		[Token(Token = "0x600123C")]
		[Address(RVA = "0x1548664", Offset = "0x1548664", VA = "0x1548664")]
		public static void Reduce37(ulong[] z, int zOff)
		{
		}

		[Token(Token = "0x600123D")]
		[Address(RVA = "0x1548E74", Offset = "0x1548E74", VA = "0x1548E74")]
		public static void Square(ulong[] x, ulong[] z)
		{
		}

		[Token(Token = "0x600123E")]
		[Address(RVA = "0x1548FD8", Offset = "0x1548FD8", VA = "0x1548FD8")]
		public static void SquareAddToExt(ulong[] x, ulong[] zz)
		{
		}

		[Token(Token = "0x600123F")]
		[Address(RVA = "0x1549028", Offset = "0x1549028", VA = "0x1549028")]
		public static void SquareN(ulong[] x, int n, ulong[] z)
		{
		}

		[Token(Token = "0x6001240")]
		[Address(RVA = "0x15490AC", Offset = "0x15490AC", VA = "0x15490AC")]
		protected static void ImplCompactExt(ulong[] zz)
		{
		}

		[Token(Token = "0x6001241")]
		[Address(RVA = "0x1549194", Offset = "0x1549194", VA = "0x1549194")]
		protected static void ImplExpand(ulong[] x, ulong[] z)
		{
		}

		[Token(Token = "0x6001242")]
		[Address(RVA = "0x154872C", Offset = "0x154872C", VA = "0x154872C")]
		protected static void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz)
		{
		}

		[Token(Token = "0x6001243")]
		[Address(RVA = "0x154924C", Offset = "0x154924C", VA = "0x154924C")]
		protected static void ImplMulw(ulong x, ulong y, ulong[] z, int zOff)
		{
		}

		[Token(Token = "0x6001244")]
		[Address(RVA = "0x1548EC0", Offset = "0x1548EC0", VA = "0x1548EC0")]
		protected static void ImplSquare(ulong[] x, ulong[] zz)
		{
		}

		[Token(Token = "0x6001245")]
		[Address(RVA = "0x154941C", Offset = "0x154941C", VA = "0x154941C")]
		public SecT283Field()
		{
		}
	}
	[Token(Token = "0x200020A")]
	internal class SecT283FieldElement : ECFieldElement
	{
		[Token(Token = "0x40009C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly ulong[] x;

		[Token(Token = "0x170001EA")]
		public override bool IsOne
		{
			[Token(Token = "0x6001249")]
			[Address(RVA = "0x1549548", Offset = "0x1549548", VA = "0x1549548", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001EB")]
		public override bool IsZero
		{
			[Token(Token = "0x600124A")]
			[Address(RVA = "0x1549554", Offset = "0x1549554", VA = "0x1549554", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001EC")]
		public override string FieldName
		{
			[Token(Token = "0x600124D")]
			[Address(RVA = "0x15495A4", Offset = "0x15495A4", VA = "0x15495A4", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001ED")]
		public override int FieldSize
		{
			[Token(Token = "0x600124E")]
			[Address(RVA = "0x15495EC", Offset = "0x15495EC", VA = "0x15495EC", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001EE")]
		public virtual int Representation
		{
			[Token(Token = "0x600125D")]
			[Address(RVA = "0x1549D30", Offset = "0x1549D30", VA = "0x1549D30", Slot = "27")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001EF")]
		public virtual int M
		{
			[Token(Token = "0x600125E")]
			[Address(RVA = "0x1549D38", Offset = "0x1549D38", VA = "0x1549D38", Slot = "28")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001F0")]
		public virtual int K1
		{
			[Token(Token = "0x600125F")]
			[Address(RVA = "0x1549D40", Offset = "0x1549D40", VA = "0x1549D40", Slot = "29")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001F1")]
		public virtual int K2
		{
			[Token(Token = "0x6001260")]
			[Address(RVA = "0x1549D48", Offset = "0x1549D48", VA = "0x1549D48", Slot = "30")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001F2")]
		public virtual int K3
		{
			[Token(Token = "0x6001261")]
			[Address(RVA = "0x1549D50", Offset = "0x1549D50", VA = "0x1549D50", Slot = "31")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001246")]
		[Address(RVA = "0x1549424", Offset = "0x1549424", VA = "0x1549424")]
		public SecT283FieldElement(BigInteger x)
		{
		}

		[Token(Token = "0x6001247")]
		[Address(RVA = "0x15494EC", Offset = "0x15494EC", VA = "0x15494EC")]
		public SecT283FieldElement()
		{
		}

		[Token(Token = "0x6001248")]
		[Address(RVA = "0x154951C", Offset = "0x154951C", VA = "0x154951C")]
		protected internal SecT283FieldElement(ulong[] x)
		{
		}

		[Token(Token = "0x600124B")]
		[Address(RVA = "0x1549560", Offset = "0x1549560", VA = "0x1549560", Slot = "24")]
		public override bool TestBitZero()
		{
			return default(bool);
		}

		[Token(Token = "0x600124C")]
		[Address(RVA = "0x1549598", Offset = "0x1549598", VA = "0x1549598", Slot = "4")]
		public override BigInteger ToBigInteger()
		{
			return null;
		}

		[Token(Token = "0x600124F")]
		[Address(RVA = "0x15495F4", Offset = "0x15495F4", VA = "0x15495F4", Slot = "7")]
		public override ECFieldElement Add(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6001250")]
		[Address(RVA = "0x15496BC", Offset = "0x15496BC", VA = "0x15496BC", Slot = "8")]
		public override ECFieldElement AddOne()
		{
			return null;
		}

		[Token(Token = "0x6001251")]
		[Address(RVA = "0x154973C", Offset = "0x154973C", VA = "0x154973C", Slot = "9")]
		public override ECFieldElement Subtract(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6001252")]
		[Address(RVA = "0x1549748", Offset = "0x1549748", VA = "0x1549748", Slot = "10")]
		public override ECFieldElement Multiply(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6001253")]
		[Address(RVA = "0x1549810", Offset = "0x1549810", VA = "0x1549810", Slot = "19")]
		public override ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x6001254")]
		[Address(RVA = "0x1549820", Offset = "0x1549820", VA = "0x1549820", Slot = "20")]
		public override ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x6001255")]
		[Address(RVA = "0x154998C", Offset = "0x154998C", VA = "0x154998C", Slot = "11")]
		public override ECFieldElement Divide(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6001256")]
		[Address(RVA = "0x15499D8", Offset = "0x15499D8", VA = "0x15499D8", Slot = "12")]
		public override ECFieldElement Negate()
		{
			return null;
		}

		[Token(Token = "0x6001257")]
		[Address(RVA = "0x15499DC", Offset = "0x15499DC", VA = "0x15499DC", Slot = "13")]
		public override ECFieldElement Square()
		{
			return null;
		}

		[Token(Token = "0x6001258")]
		[Address(RVA = "0x1549A5C", Offset = "0x1549A5C", VA = "0x1549A5C", Slot = "21")]
		public override ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x6001259")]
		[Address(RVA = "0x1549A6C", Offset = "0x1549A6C", VA = "0x1549A6C", Slot = "22")]
		public override ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x600125A")]
		[Address(RVA = "0x1549BA0", Offset = "0x1549BA0", VA = "0x1549BA0", Slot = "23")]
		public override ECFieldElement SquarePow(int pow)
		{
			return null;
		}

		[Token(Token = "0x600125B")]
		[Address(RVA = "0x1549C38", Offset = "0x1549C38", VA = "0x1549C38", Slot = "14")]
		public override ECFieldElement Invert()
		{
			return null;
		}

		[Token(Token = "0x600125C")]
		[Address(RVA = "0x1549CF0", Offset = "0x1549CF0", VA = "0x1549CF0", Slot = "15")]
		public override ECFieldElement Sqrt()
		{
			return null;
		}

		[Token(Token = "0x6001262")]
		[Address(RVA = "0x1549D58", Offset = "0x1549D58", VA = "0x1549D58", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001263")]
		[Address(RVA = "0x1549DF4", Offset = "0x1549DF4", VA = "0x1549DF4", Slot = "25")]
		public override bool Equals(ECFieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001264")]
		[Address(RVA = "0x1549E90", Offset = "0x1549E90", VA = "0x1549E90", Slot = "32")]
		public virtual bool Equals(SecT283FieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001265")]
		[Address(RVA = "0x1549EBC", Offset = "0x1549EBC", VA = "0x1549EBC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x200020B")]
	internal class SecT283K1Curve : AbstractF2mCurve
	{
		[Token(Token = "0x40009C5")]
		private const int SecT283K1_DEFAULT_COORDS = 6;

		[Token(Token = "0x40009C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected readonly SecT283K1Point m_infinity;

		[Token(Token = "0x170001F3")]
		public override ECPoint Infinity
		{
			[Token(Token = "0x600126A")]
			[Address(RVA = "0x154A118", Offset = "0x154A118", VA = "0x154A118", Slot = "21")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F4")]
		public override int FieldSize
		{
			[Token(Token = "0x600126B")]
			[Address(RVA = "0x154A120", Offset = "0x154A120", VA = "0x154A120", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001F5")]
		public override bool IsKoblitz
		{
			[Token(Token = "0x600126F")]
			[Address(RVA = "0x154A380", Offset = "0x154A380", VA = "0x154A380", Slot = "37")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001F6")]
		public virtual int M
		{
			[Token(Token = "0x6001272")]
			[Address(RVA = "0x154A7CC", Offset = "0x154A7CC", VA = "0x154A7CC", Slot = "38")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001F7")]
		public virtual bool IsTrinomial
		{
			[Token(Token = "0x6001273")]
			[Address(RVA = "0x154A7D4", Offset = "0x154A7D4", VA = "0x154A7D4", Slot = "39")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001F8")]
		public virtual int K1
		{
			[Token(Token = "0x6001274")]
			[Address(RVA = "0x154A7DC", Offset = "0x154A7DC", VA = "0x154A7DC", Slot = "40")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001F9")]
		public virtual int K2
		{
			[Token(Token = "0x6001275")]
			[Address(RVA = "0x154A7E4", Offset = "0x154A7E4", VA = "0x154A7E4", Slot = "41")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001FA")]
		public virtual int K3
		{
			[Token(Token = "0x6001276")]
			[Address(RVA = "0x154A7EC", Offset = "0x154A7EC", VA = "0x154A7EC", Slot = "42")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001266")]
		[Address(RVA = "0x1549EEC", Offset = "0x1549EEC", VA = "0x1549EEC")]
		public SecT283K1Curve()
		{
		}

		[Token(Token = "0x6001267")]
		[Address(RVA = "0x154A058", Offset = "0x154A058", VA = "0x154A058", Slot = "11")]
		protected override ECCurve CloneCurve()
		{
			return null;
		}

		[Token(Token = "0x6001268")]
		[Address(RVA = "0x154A0B0", Offset = "0x154A0B0", VA = "0x154A0B0", Slot = "15")]
		public override bool SupportsCoordinateSystem(int coord)
		{
			return default(bool);
		}

		[Token(Token = "0x6001269")]
		[Address(RVA = "0x154A0BC", Offset = "0x154A0BC", VA = "0x154A0BC", Slot = "14")]
		protected override ECMultiplier CreateDefaultMultiplier()
		{
			return null;
		}

		[Token(Token = "0x600126C")]
		[Address(RVA = "0x154A128", Offset = "0x154A128", VA = "0x154A128", Slot = "5")]
		public override ECFieldElement FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x600126D")]
		[Address(RVA = "0x154A188", Offset = "0x154A188", VA = "0x154A188", Slot = "12")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x600126E")]
		[Address(RVA = "0x154A2E0", Offset = "0x154A2E0", VA = "0x154A2E0", Slot = "13")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x6001270")]
		[Address(RVA = "0x154A388", Offset = "0x154A388", VA = "0x154A388", Slot = "32")]
		protected override ECPoint DecompressPoint(int yTilde, BigInteger X1)
		{
			return null;
		}

		[Token(Token = "0x6001271")]
		[Address(RVA = "0x154A5B4", Offset = "0x154A5B4", VA = "0x154A5B4")]
		private ECFieldElement SolveQuadraticEquation(ECFieldElement beta)
		{
			return null;
		}
	}
	[Token(Token = "0x200020C")]
	internal class SecT283K1Point : AbstractF2mPoint
	{
		[Token(Token = "0x170001FB")]
		public override ECFieldElement YCoord
		{
			[Token(Token = "0x600127B")]
			[Address(RVA = "0x154A894", Offset = "0x154A894", VA = "0x154A894", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001FC")]
		protected internal override bool CompressionYTilde
		{
			[Token(Token = "0x600127C")]
			[Address(RVA = "0x154A97C", Offset = "0x154A97C", VA = "0x154A97C", Slot = "26")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001277")]
		[Address(RVA = "0x154A050", Offset = "0x154A050", VA = "0x154A050")]
		public SecT283K1Point(ECCurve curve, ECFieldElement x, ECFieldElement y)
		{
		}

		[Token(Token = "0x6001278")]
		[Address(RVA = "0x154A210", Offset = "0x154A210", VA = "0x154A210")]
		public SecT283K1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression)
		{
		}

		[Token(Token = "0x6001279")]
		[Address(RVA = "0x154A374", Offset = "0x154A374", VA = "0x154A374")]
		internal SecT283K1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
		}

		[Token(Token = "0x600127A")]
		[Address(RVA = "0x154A7F4", Offset = "0x154A7F4", VA = "0x154A7F4", Slot = "6")]
		protected override ECPoint Detach()
		{
			return null;
		}

		[Token(Token = "0x600127D")]
		[Address(RVA = "0x154A9FC", Offset = "0x154A9FC", VA = "0x154A9FC", Slot = "27")]
		public override ECPoint Add(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x600127E")]
		[Address(RVA = "0x154B0A4", Offset = "0x154B0A4", VA = "0x154B0A4", Slot = "31")]
		public override ECPoint Twice()
		{
			return null;
		}

		[Token(Token = "0x600127F")]
		[Address(RVA = "0x154B42C", Offset = "0x154B42C", VA = "0x154B42C", Slot = "33")]
		public override ECPoint TwicePlus(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6001280")]
		[Address(RVA = "0x154B8E0", Offset = "0x154B8E0", VA = "0x154B8E0", Slot = "29")]
		public override ECPoint Negate()
		{
			return null;
		}
	}
	[Token(Token = "0x200020D")]
	internal class SecT283R1Curve : AbstractF2mCurve
	{
		[Token(Token = "0x40009C7")]
		private const int SecT283R1_DEFAULT_COORDS = 6;

		[Token(Token = "0x40009C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected readonly SecT283R1Point m_infinity;

		[Token(Token = "0x170001FD")]
		public override ECPoint Infinity
		{
			[Token(Token = "0x6001284")]
			[Address(RVA = "0x154BC40", Offset = "0x154BC40", VA = "0x154BC40", Slot = "21")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001FE")]
		public override int FieldSize
		{
			[Token(Token = "0x6001285")]
			[Address(RVA = "0x154BC48", Offset = "0x154BC48", VA = "0x154BC48", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001FF")]
		public override bool IsKoblitz
		{
			[Token(Token = "0x6001289")]
			[Address(RVA = "0x154BEA8", Offset = "0x154BEA8", VA = "0x154BEA8", Slot = "37")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000200")]
		public virtual int M
		{
			[Token(Token = "0x600128C")]
			[Address(RVA = "0x154C2F4", Offset = "0x154C2F4", VA = "0x154C2F4", Slot = "38")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000201")]
		public virtual bool IsTrinomial
		{
			[Token(Token = "0x600128D")]
			[Address(RVA = "0x154C2FC", Offset = "0x154C2FC", VA = "0x154C2FC", Slot = "39")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000202")]
		public virtual int K1
		{
			[Token(Token = "0x600128E")]
			[Address(RVA = "0x154C304", Offset = "0x154C304", VA = "0x154C304", Slot = "40")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000203")]
		public virtual int K2
		{
			[Token(Token = "0x600128F")]
			[Address(RVA = "0x154C30C", Offset = "0x154C30C", VA = "0x154C30C", Slot = "41")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000204")]
		public virtual int K3
		{
			[Token(Token = "0x6001290")]
			[Address(RVA = "0x154C314", Offset = "0x154C314", VA = "0x154C314", Slot = "42")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001281")]
		[Address(RVA = "0x154BA40", Offset = "0x154BA40", VA = "0x154BA40")]
		public SecT283R1Curve()
		{
		}

		[Token(Token = "0x6001282")]
		[Address(RVA = "0x154BBDC", Offset = "0x154BBDC", VA = "0x154BBDC", Slot = "11")]
		protected override ECCurve CloneCurve()
		{
			return null;
		}

		[Token(Token = "0x6001283")]
		[Address(RVA = "0x154BC34", Offset = "0x154BC34", VA = "0x154BC34", Slot = "15")]
		public override bool SupportsCoordinateSystem(int coord)
		{
			return default(bool);
		}

		[Token(Token = "0x6001286")]
		[Address(RVA = "0x154BC50", Offset = "0x154BC50", VA = "0x154BC50", Slot = "5")]
		public override ECFieldElement FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6001287")]
		[Address(RVA = "0x154BCB0", Offset = "0x154BCB0", VA = "0x154BCB0", Slot = "12")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x6001288")]
		[Address(RVA = "0x154BE08", Offset = "0x154BE08", VA = "0x154BE08", Slot = "13")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x600128A")]
		[Address(RVA = "0x154BEB0", Offset = "0x154BEB0", VA = "0x154BEB0", Slot = "32")]
		protected override ECPoint DecompressPoint(int yTilde, BigInteger X1)
		{
			return null;
		}

		[Token(Token = "0x600128B")]
		[Address(RVA = "0x154C0DC", Offset = "0x154C0DC", VA = "0x154C0DC")]
		private ECFieldElement SolveQuadraticEquation(ECFieldElement beta)
		{
			return null;
		}
	}
	[Token(Token = "0x200020E")]
	internal class SecT283R1Point : AbstractF2mPoint
	{
		[Token(Token = "0x17000205")]
		public override ECFieldElement YCoord
		{
			[Token(Token = "0x6001295")]
			[Address(RVA = "0x154C3BC", Offset = "0x154C3BC", VA = "0x154C3BC", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000206")]
		protected internal override bool CompressionYTilde
		{
			[Token(Token = "0x6001296")]
			[Address(RVA = "0x154C4A4", Offset = "0x154C4A4", VA = "0x154C4A4", Slot = "26")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001291")]
		[Address(RVA = "0x154BBD4", Offset = "0x154BBD4", VA = "0x154BBD4")]
		public SecT283R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y)
		{
		}

		[Token(Token = "0x6001292")]
		[Address(RVA = "0x154BD38", Offset = "0x154BD38", VA = "0x154BD38")]
		public SecT283R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression)
		{
		}

		[Token(Token = "0x6001293")]
		[Address(RVA = "0x154BE9C", Offset = "0x154BE9C", VA = "0x154BE9C")]
		internal SecT283R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
		}

		[Token(Token = "0x6001294")]
		[Address(RVA = "0x154C31C", Offset = "0x154C31C", VA = "0x154C31C", Slot = "6")]
		protected override ECPoint Detach()
		{
			return null;
		}

		[Token(Token = "0x6001297")]
		[Address(RVA = "0x154C524", Offset = "0x154C524", VA = "0x154C524", Slot = "27")]
		public override ECPoint Add(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6001298")]
		[Address(RVA = "0x154CBF0", Offset = "0x154CBF0", VA = "0x154CBF0", Slot = "31")]
		public override ECPoint Twice()
		{
			return null;
		}

		[Token(Token = "0x6001299")]
		[Address(RVA = "0x154CF38", Offset = "0x154CF38", VA = "0x154CF38", Slot = "33")]
		public override ECPoint TwicePlus(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x600129A")]
		[Address(RVA = "0x154D42C", Offset = "0x154D42C", VA = "0x154D42C", Slot = "29")]
		public override ECPoint Negate()
		{
			return null;
		}
	}
	[Token(Token = "0x200020F")]
	internal class SecT409Field
	{
		[Token(Token = "0x40009C9")]
		private const ulong M25 = 33554431uL;

		[Token(Token = "0x40009CA")]
		private const ulong M59 = 576460752303423487uL;

		[Token(Token = "0x600129B")]
		[Address(RVA = "0x154D58C", Offset = "0x154D58C", VA = "0x154D58C")]
		public static void Add(ulong[] x, ulong[] y, ulong[] z)
		{
		}

		[Token(Token = "0x600129C")]
		[Address(RVA = "0x154D700", Offset = "0x154D700", VA = "0x154D700")]
		public static void AddExt(ulong[] xx, ulong[] yy, ulong[] zz)
		{
		}

		[Token(Token = "0x600129D")]
		[Address(RVA = "0x154D780", Offset = "0x154D780", VA = "0x154D780")]
		public static void AddOne(ulong[] x, ulong[] z)
		{
		}

		[Token(Token = "0x600129E")]
		[Address(RVA = "0x154D86C", Offset = "0x154D86C", VA = "0x154D86C")]
		public static ulong[] FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x600129F")]
		[Address(RVA = "0x154D928", Offset = "0x154D928", VA = "0x154D928")]
		public static void Multiply(ulong[] x, ulong[] y, ulong[] z)
		{
		}

		[Token(Token = "0x60012A0")]
		[Address(RVA = "0x154DBCC", Offset = "0x154DBCC", VA = "0x154DBCC")]
		public static void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz)
		{
		}

		[Token(Token = "0x60012A1")]
		[Address(RVA = "0x154DA60", Offset = "0x154DA60", VA = "0x154DA60")]
		public static void Reduce(ulong[] xx, ulong[] z)
		{
		}

		[Token(Token = "0x60012A2")]
		[Address(RVA = "0x154D89C", Offset = "0x154D89C", VA = "0x154D89C")]
		public static void Reduce39(ulong[] z, int zOff)
		{
		}

		[Token(Token = "0x60012A3")]
		[Address(RVA = "0x154DC20", Offset = "0x154DC20", VA = "0x154DC20")]
		public static void Square(ulong[] x, ulong[] z)
		{
		}

		[Token(Token = "0x60012A4")]
		[Address(RVA = "0x154DD84", Offset = "0x154DD84", VA = "0x154DD84")]
		public static void SquareAddToExt(ulong[] x, ulong[] zz)
		{
		}

		[Token(Token = "0x60012A5")]
		[Address(RVA = "0x154DDD4", Offset = "0x154DDD4", VA = "0x154DDD4")]
		public static void SquareN(ulong[] x, int n, ulong[] z)
		{
		}

		[Token(Token = "0x60012A6")]
		[Address(RVA = "0x154DE58", Offset = "0x154DE58", VA = "0x154DE58")]
		protected static void ImplCompactExt(ulong[] zz)
		{
		}

		[Token(Token = "0x60012A7")]
		[Address(RVA = "0x154DF90", Offset = "0x154DF90", VA = "0x154DF90")]
		protected static void ImplExpand(ulong[] x, ulong[] z)
		{
		}

		[Token(Token = "0x60012A8")]
		[Address(RVA = "0x154D978", Offset = "0x154D978", VA = "0x154D978")]
		protected static void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz)
		{
		}

		[Token(Token = "0x60012A9")]
		[Address(RVA = "0x154E084", Offset = "0x154E084", VA = "0x154E084")]
		protected static void ImplMulwAcc(ulong[] xs, ulong y, ulong[] z, int zOff)
		{
		}

		[Token(Token = "0x60012AA")]
		[Address(RVA = "0x154DC6C", Offset = "0x154DC6C", VA = "0x154DC6C")]
		protected static void ImplSquare(ulong[] x, ulong[] zz)
		{
		}

		[Token(Token = "0x60012AB")]
		[Address(RVA = "0x154E270", Offset = "0x154E270", VA = "0x154E270")]
		public SecT409Field()
		{
		}
	}
	[Token(Token = "0x2000210")]
	internal class SecT409FieldElement : ECFieldElement
	{
		[Token(Token = "0x40009CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected ulong[] x;

		[Token(Token = "0x17000207")]
		public override bool IsOne
		{
			[Token(Token = "0x60012AF")]
			[Address(RVA = "0x154E3A4", Offset = "0x154E3A4", VA = "0x154E3A4", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000208")]
		public override bool IsZero
		{
			[Token(Token = "0x60012B0")]
			[Address(RVA = "0x154E3B0", Offset = "0x154E3B0", VA = "0x154E3B0", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000209")]
		public override string FieldName
		{
			[Token(Token = "0x60012B3")]
			[Address(RVA = "0x154E400", Offset = "0x154E400", VA = "0x154E400", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700020A")]
		public override int FieldSize
		{
			[Token(Token = "0x60012B4")]
			[Address(RVA = "0x154E448", Offset = "0x154E448", VA = "0x154E448", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700020B")]
		public virtual int Representation
		{
			[Token(Token = "0x60012C3")]
			[Address(RVA = "0x154EB9C", Offset = "0x154EB9C", VA = "0x154EB9C", Slot = "27")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700020C")]
		public virtual int M
		{
			[Token(Token = "0x60012C4")]
			[Address(RVA = "0x154EBA4", Offset = "0x154EBA4", VA = "0x154EBA4", Slot = "28")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700020D")]
		public virtual int K1
		{
			[Token(Token = "0x60012C5")]
			[Address(RVA = "0x154EBAC", Offset = "0x154EBAC", VA = "0x154EBAC", Slot = "29")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700020E")]
		public virtual int K2
		{
			[Token(Token = "0x60012C6")]
			[Address(RVA = "0x154EBB4", Offset = "0x154EBB4", VA = "0x154EBB4", Slot = "30")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700020F")]
		public virtual int K3
		{
			[Token(Token = "0x60012C7")]
			[Address(RVA = "0x154EBBC", Offset = "0x154EBBC", VA = "0x154EBBC", Slot = "31")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60012AC")]
		[Address(RVA = "0x154E278", Offset = "0x154E278", VA = "0x154E278")]
		public SecT409FieldElement(BigInteger x)
		{
		}

		[Token(Token = "0x60012AD")]
		[Address(RVA = "0x154E348", Offset = "0x154E348", VA = "0x154E348")]
		public SecT409FieldElement()
		{
		}

		[Token(Token = "0x60012AE")]
		[Address(RVA = "0x154E378", Offset = "0x154E378", VA = "0x154E378")]
		protected internal SecT409FieldElement(ulong[] x)
		{
		}

		[Token(Token = "0x60012B1")]
		[Address(RVA = "0x154E3BC", Offset = "0x154E3BC", VA = "0x154E3BC", Slot = "24")]
		public override bool TestBitZero()
		{
			return default(bool);
		}

		[Token(Token = "0x60012B2")]
		[Address(RVA = "0x154E3F4", Offset = "0x154E3F4", VA = "0x154E3F4", Slot = "4")]
		public override BigInteger ToBigInteger()
		{
			return null;
		}

		[Token(Token = "0x60012B5")]
		[Address(RVA = "0x154E450", Offset = "0x154E450", VA = "0x154E450", Slot = "7")]
		public override ECFieldElement Add(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x60012B6")]
		[Address(RVA = "0x154E518", Offset = "0x154E518", VA = "0x154E518", Slot = "8")]
		public override ECFieldElement AddOne()
		{
			return null;
		}

		[Token(Token = "0x60012B7")]
		[Address(RVA = "0x154E598", Offset = "0x154E598", VA = "0x154E598", Slot = "9")]
		public override ECFieldElement Subtract(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x60012B8")]
		[Address(RVA = "0x154E5A4", Offset = "0x154E5A4", VA = "0x154E5A4", Slot = "10")]
		public override ECFieldElement Multiply(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x60012B9")]
		[Address(RVA = "0x154E66C", Offset = "0x154E66C", VA = "0x154E66C", Slot = "19")]
		public override ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x60012BA")]
		[Address(RVA = "0x154E67C", Offset = "0x154E67C", VA = "0x154E67C", Slot = "20")]
		public override ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x60012BB")]
		[Address(RVA = "0x154E7E8", Offset = "0x154E7E8", VA = "0x154E7E8", Slot = "11")]
		public override ECFieldElement Divide(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x60012BC")]
		[Address(RVA = "0x154E834", Offset = "0x154E834", VA = "0x154E834", Slot = "12")]
		public override ECFieldElement Negate()
		{
			return null;
		}

		[Token(Token = "0x60012BD")]
		[Address(RVA = "0x154E838", Offset = "0x154E838", VA = "0x154E838", Slot = "13")]
		public override ECFieldElement Square()
		{
			return null;
		}

		[Token(Token = "0x60012BE")]
		[Address(RVA = "0x154E8B8", Offset = "0x154E8B8", VA = "0x154E8B8", Slot = "21")]
		public override ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x60012BF")]
		[Address(RVA = "0x154E8C8", Offset = "0x154E8C8", VA = "0x154E8C8", Slot = "22")]
		public override ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x60012C0")]
		[Address(RVA = "0x154E9FC", Offset = "0x154E9FC", VA = "0x154E9FC", Slot = "23")]
		public override ECFieldElement SquarePow(int pow)
		{
			return null;
		}

		[Token(Token = "0x60012C1")]
		[Address(RVA = "0x154EA94", Offset = "0x154EA94", VA = "0x154EA94", Slot = "14")]
		public override ECFieldElement Invert()
		{
			return null;
		}

		[Token(Token = "0x60012C2")]
		[Address(RVA = "0x154EB5C", Offset = "0x154EB5C", VA = "0x154EB5C", Slot = "15")]
		public override ECFieldElement Sqrt()
		{
			return null;
		}

		[Token(Token = "0x60012C8")]
		[Address(RVA = "0x154EBC4", Offset = "0x154EBC4", VA = "0x154EBC4", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60012C9")]
		[Address(RVA = "0x154EC60", Offset = "0x154EC60", VA = "0x154EC60", Slot = "25")]
		public override bool Equals(ECFieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x60012CA")]
		[Address(RVA = "0x154ECFC", Offset = "0x154ECFC", VA = "0x154ECFC", Slot = "32")]
		public virtual bool Equals(SecT409FieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x60012CB")]
		[Address(RVA = "0x154ED28", Offset = "0x154ED28", VA = "0x154ED28", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000211")]
	internal class SecT409K1Curve : AbstractF2mCurve
	{
		[Token(Token = "0x40009CC")]
		private const int SecT409K1_DEFAULT_COORDS = 6;

		[Token(Token = "0x40009CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected readonly SecT409K1Point m_infinity;

		[Token(Token = "0x17000210")]
		public override ECPoint Infinity
		{
			[Token(Token = "0x60012D0")]
			[Address(RVA = "0x154EF84", Offset = "0x154EF84", VA = "0x154EF84", Slot = "21")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000211")]
		public override int FieldSize
		{
			[Token(Token = "0x60012D1")]
			[Address(RVA = "0x154EF8C", Offset = "0x154EF8C", VA = "0x154EF8C", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000212")]
		public override bool IsKoblitz
		{
			[Token(Token = "0x60012D5")]
			[Address(RVA = "0x154F1EC", Offset = "0x154F1EC", VA = "0x154F1EC", Slot = "37")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000213")]
		public virtual int M
		{
			[Token(Token = "0x60012D8")]
			[Address(RVA = "0x154F638", Offset = "0x154F638", VA = "0x154F638", Slot = "38")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000214")]
		public virtual bool IsTrinomial
		{
			[Token(Token = "0x60012D9")]
			[Address(RVA = "0x154F640", Offset = "0x154F640", VA = "0x154F640", Slot = "39")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000215")]
		public virtual int K1
		{
			[Token(Token = "0x60012DA")]
			[Address(RVA = "0x154F648", Offset = "0x154F648", VA = "0x154F648", Slot = "40")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000216")]
		public virtual int K2
		{
			[Token(Token = "0x60012DB")]
			[Address(RVA = "0x154F650", Offset = "0x154F650", VA = "0x154F650", Slot = "41")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000217")]
		public virtual int K3
		{
			[Token(Token = "0x60012DC")]
			[Address(RVA = "0x154F658", Offset = "0x154F658", VA = "0x154F658", Slot = "42")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60012CC")]
		[Address(RVA = "0x154ED58", Offset = "0x154ED58", VA = "0x154ED58")]
		public SecT409K1Curve()
		{
		}

		[Token(Token = "0x60012CD")]
		[Address(RVA = "0x154EEC4", Offset = "0x154EEC4", VA = "0x154EEC4", Slot = "11")]
		protected override ECCurve CloneCurve()
		{
			return null;
		}

		[Token(Token = "0x60012CE")]
		[Address(RVA = "0x154EF1C", Offset = "0x154EF1C", VA = "0x154EF1C", Slot = "15")]
		public override bool SupportsCoordinateSystem(int coord)
		{
			return default(bool);
		}

		[Token(Token = "0x60012CF")]
		[Address(RVA = "0x154EF28", Offset = "0x154EF28", VA = "0x154EF28", Slot = "14")]
		protected override ECMultiplier CreateDefaultMultiplier()
		{
			return null;
		}

		[Token(Token = "0x60012D2")]
		[Address(RVA = "0x154EF94", Offset = "0x154EF94", VA = "0x154EF94", Slot = "5")]
		public override ECFieldElement FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x60012D3")]
		[Address(RVA = "0x154EFF4", Offset = "0x154EFF4", VA = "0x154EFF4", Slot = "12")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x60012D4")]
		[Address(RVA = "0x154F14C", Offset = "0x154F14C", VA = "0x154F14C", Slot = "13")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x60012D6")]
		[Address(RVA = "0x154F1F4", Offset = "0x154F1F4", VA = "0x154F1F4", Slot = "32")]
		protected override ECPoint DecompressPoint(int yTilde, BigInteger X1)
		{
			return null;
		}

		[Token(Token = "0x60012D7")]
		[Address(RVA = "0x154F420", Offset = "0x154F420", VA = "0x154F420")]
		private ECFieldElement SolveQuadraticEquation(ECFieldElement beta)
		{
			return null;
		}
	}
	[Token(Token = "0x2000212")]
	internal class SecT409K1Point : AbstractF2mPoint
	{
		[Token(Token = "0x17000218")]
		public override ECFieldElement YCoord
		{
			[Token(Token = "0x60012E1")]
			[Address(RVA = "0x154F700", Offset = "0x154F700", VA = "0x154F700", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000219")]
		protected internal override bool CompressionYTilde
		{
			[Token(Token = "0x60012E2")]
			[Address(RVA = "0x154F80C", Offset = "0x154F80C", VA = "0x154F80C", Slot = "26")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60012DD")]
		[Address(RVA = "0x154EEBC", Offset = "0x154EEBC", VA = "0x154EEBC")]
		public SecT409K1Point(ECCurve curve, ECFieldElement x, ECFieldElement y)
		{
		}

		[Token(Token = "0x60012DE")]
		[Address(RVA = "0x154F07C", Offset = "0x154F07C", VA = "0x154F07C")]
		public SecT409K1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression)
		{
		}

		[Token(Token = "0x60012DF")]
		[Address(RVA = "0x154F1E0", Offset = "0x154F1E0", VA = "0x154F1E0")]
		internal SecT409K1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
		}

		[Token(Token = "0x60012E0")]
		[Address(RVA = "0x154F660", Offset = "0x154F660", VA = "0x154F660", Slot = "6")]
		protected override ECPoint Detach()
		{
			return null;
		}

		[Token(Token = "0x60012E3")]
		[Address(RVA = "0x154F88C", Offset = "0x154F88C", VA = "0x154F88C", Slot = "27")]
		public override ECPoint Add(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x60012E4")]
		[Address(RVA = "0x154FF30", Offset = "0x154FF30", VA = "0x154FF30", Slot = "31")]
		public override ECPoint Twice()
		{
			return null;
		}

		[Token(Token = "0x60012E5")]
		[Address(RVA = "0x15502B4", Offset = "0x15502B4", VA = "0x15502B4", Slot = "33")]
		public override ECPoint TwicePlus(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x60012E6")]
		[Address(RVA = "0x1550764", Offset = "0x1550764", VA = "0x1550764", Slot = "29")]
		public override ECPoint Negate()
		{
			return null;
		}
	}
	[Token(Token = "0x2000213")]
	internal class SecT409R1Curve : AbstractF2mCurve
	{
		[Token(Token = "0x40009CE")]
		private const int SecT409R1_DEFAULT_COORDS = 6;

		[Token(Token = "0x40009CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected readonly SecT409R1Point m_infinity;

		[Token(Token = "0x1700021A")]
		public override ECPoint Infinity
		{
			[Token(Token = "0x60012EA")]
			[Address(RVA = "0x1550AC0", Offset = "0x1550AC0", VA = "0x1550AC0", Slot = "21")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700021B")]
		public override int FieldSize
		{
			[Token(Token = "0x60012EB")]
			[Address(RVA = "0x1550AC8", Offset = "0x1550AC8", VA = "0x1550AC8", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700021C")]
		public override bool IsKoblitz
		{
			[Token(Token = "0x60012EF")]
			[Address(RVA = "0x1550D28", Offset = "0x1550D28", VA = "0x1550D28", Slot = "37")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700021D")]
		public virtual int M
		{
			[Token(Token = "0x60012F2")]
			[Address(RVA = "0x1551174", Offset = "0x1551174", VA = "0x1551174", Slot = "38")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700021E")]
		public virtual bool IsTrinomial
		{
			[Token(Token = "0x60012F3")]
			[Address(RVA = "0x155117C", Offset = "0x155117C", VA = "0x155117C", Slot = "39")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700021F")]
		public virtual int K1
		{
			[Token(Token = "0x60012F4")]
			[Address(RVA = "0x1551184", Offset = "0x1551184", VA = "0x1551184", Slot = "40")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000220")]
		public virtual int K2
		{
			[Token(Token = "0x60012F5")]
			[Address(RVA = "0x155118C", Offset = "0x155118C", VA = "0x155118C", Slot = "41")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000221")]
		public virtual int K3
		{
			[Token(Token = "0x60012F6")]
			[Address(RVA = "0x1551194", Offset = "0x1551194", VA = "0x1551194", Slot = "42")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60012E7")]
		[Address(RVA = "0x15508C0", Offset = "0x15508C0", VA = "0x15508C0")]
		public SecT409R1Curve()
		{
		}

		[Token(Token = "0x60012E8")]
		[Address(RVA = "0x1550A5C", Offset = "0x1550A5C", VA = "0x1550A5C", Slot = "11")]
		protected override ECCurve CloneCurve()
		{
			return null;
		}

		[Token(Token = "0x60012E9")]
		[Address(RVA = "0x1550AB4", Offset = "0x1550AB4", VA = "0x1550AB4", Slot = "15")]
		public override bool SupportsCoordinateSystem(int coord)
		{
			return default(bool);
		}

		[Token(Token = "0x60012EC")]
		[Address(RVA = "0x1550AD0", Offset = "0x1550AD0", VA = "0x1550AD0", Slot = "5")]
		public override ECFieldElement FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x60012ED")]
		[Address(RVA = "0x1550B30", Offset = "0x1550B30", VA = "0x1550B30", Slot = "12")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x60012EE")]
		[Address(RVA = "0x1550C88", Offset = "0x1550C88", VA = "0x1550C88", Slot = "13")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x60012F0")]
		[Address(RVA = "0x1550D30", Offset = "0x1550D30", VA = "0x1550D30", Slot = "32")]
		protected override ECPoint DecompressPoint(int yTilde, BigInteger X1)
		{
			return null;
		}

		[Token(Token = "0x60012F1")]
		[Address(RVA = "0x1550F5C", Offset = "0x1550F5C", VA = "0x1550F5C")]
		private ECFieldElement SolveQuadraticEquation(ECFieldElement beta)
		{
			return null;
		}
	}
	[Token(Token = "0x2000214")]
	internal class SecT409R1Point : AbstractF2mPoint
	{
		[Token(Token = "0x17000222")]
		public override ECFieldElement YCoord
		{
			[Token(Token = "0x60012FB")]
			[Address(RVA = "0x155123C", Offset = "0x155123C", VA = "0x155123C", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000223")]
		protected internal override bool CompressionYTilde
		{
			[Token(Token = "0x60012FC")]
			[Address(RVA = "0x1551328", Offset = "0x1551328", VA = "0x1551328", Slot = "26")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60012F7")]
		[Address(RVA = "0x1550A54", Offset = "0x1550A54", VA = "0x1550A54")]
		public SecT409R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y)
		{
		}

		[Token(Token = "0x60012F8")]
		[Address(RVA = "0x1550BB8", Offset = "0x1550BB8", VA = "0x1550BB8")]
		public SecT409R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression)
		{
		}

		[Token(Token = "0x60012F9")]
		[Address(RVA = "0x1550D1C", Offset = "0x1550D1C", VA = "0x1550D1C")]
		internal SecT409R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
		}

		[Token(Token = "0x60012FA")]
		[Address(RVA = "0x155119C", Offset = "0x155119C", VA = "0x155119C", Slot = "6")]
		protected override ECPoint Detach()
		{
			return null;
		}

		[Token(Token = "0x60012FD")]
		[Address(RVA = "0x15513A8", Offset = "0x15513A8", VA = "0x15513A8", Slot = "27")]
		public override ECPoint Add(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x60012FE")]
		[Address(RVA = "0x1551A70", Offset = "0x1551A70", VA = "0x1551A70", Slot = "31")]
		public override ECPoint Twice()
		{
			return null;
		}

		[Token(Token = "0x60012FF")]
		[Address(RVA = "0x1551DB4", Offset = "0x1551DB4", VA = "0x1551DB4", Slot = "33")]
		public override ECPoint TwicePlus(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6001300")]
		[Address(RVA = "0x15522A4", Offset = "0x15522A4", VA = "0x15522A4", Slot = "29")]
		public override ECPoint Negate()
		{
			return null;
		}
	}
	[Token(Token = "0x2000215")]
	internal class SecT571Field
	{
		[Token(Token = "0x40009D0")]
		private const ulong M59 = 576460752303423487uL;

		[Token(Token = "0x40009D1")]
		private const ulong RM = 17256631552825064414uL;

		[Token(Token = "0x6001301")]
		[Address(RVA = "0x1552400", Offset = "0x1552400", VA = "0x1552400")]
		public static void Add(ulong[] x, ulong[] y, ulong[] z)
		{
		}

		[Token(Token = "0x6001302")]
		[Address(RVA = "0x1552480", Offset = "0x1552480", VA = "0x1552480")]
		private static void Add(ulong[] x, int xOff, ulong[] y, int yOff, ulong[] z, int zOff)
		{
		}

		[Token(Token = "0x6001303")]
		[Address(RVA = "0x1552520", Offset = "0x1552520", VA = "0x1552520")]
		private static void AddBothTo(ulong[] x, int xOff, ulong[] y, int yOff, ulong[] z, int zOff)
		{
		}

		[Token(Token = "0x6001304")]
		[Address(RVA = "0x15525C8", Offset = "0x15525C8", VA = "0x15525C8")]
		public static void AddExt(ulong[] xx, ulong[] yy, ulong[] zz)
		{
		}

		[Token(Token = "0x6001305")]
		[Address(RVA = "0x1552648", Offset = "0x1552648", VA = "0x1552648")]
		public static void AddOne(ulong[] x, ulong[] z)
		{
		}

		[Token(Token = "0x6001306")]
		[Address(RVA = "0x15526C8", Offset = "0x15526C8", VA = "0x15526C8")]
		public static ulong[] FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6001307")]
		[Address(RVA = "0x1552770", Offset = "0x1552770", VA = "0x1552770")]
		public static void Multiply(ulong[] x, ulong[] y, ulong[] z)
		{
		}

		[Token(Token = "0x6001308")]
		[Address(RVA = "0x1552B5C", Offset = "0x1552B5C", VA = "0x1552B5C")]
		public static void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz)
		{
		}

		[Token(Token = "0x6001309")]
		[Address(RVA = "0x1552A08", Offset = "0x1552A08", VA = "0x1552A08")]
		public static void Reduce(ulong[] xx, ulong[] z)
		{
		}

		[Token(Token = "0x600130A")]
		[Address(RVA = "0x15526F8", Offset = "0x15526F8", VA = "0x15526F8")]
		public static void Reduce5(ulong[] z, int zOff)
		{
		}

		[Token(Token = "0x600130B")]
		[Address(RVA = "0x1552BB0", Offset = "0x1552BB0", VA = "0x1552BB0")]
		public static void Square(ulong[] x, ulong[] z)
		{
		}

		[Token(Token = "0x600130C")]
		[Address(RVA = "0x1552CC8", Offset = "0x1552CC8", VA = "0x1552CC8")]
		public static void SquareAddToExt(ulong[] x, ulong[] zz)
		{
		}

		[Token(Token = "0x600130D")]
		[Address(RVA = "0x1552D14", Offset = "0x1552D14", VA = "0x1552D14")]
		public static void SquareN(ulong[] x, int n, ulong[] z)
		{
		}

		[Token(Token = "0x600130E")]
		[Address(RVA = "0x15527C0", Offset = "0x15527C0", VA = "0x15527C0")]
		protected static void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz)
		{
		}

		[Token(Token = "0x600130F")]
		[Address(RVA = "0x1552D94", Offset = "0x1552D94", VA = "0x1552D94")]
		protected static void ImplMulwAcc(ulong[] xs, ulong y, ulong[] z, int zOff)
		{
		}

		[Token(Token = "0x6001310")]
		[Address(RVA = "0x1552BF8", Offset = "0x1552BF8", VA = "0x1552BF8")]
		protected static void ImplSquare(ulong[] x, ulong[] zz)
		{
		}

		[Token(Token = "0x6001311")]
		[Address(RVA = "0x1552F7C", Offset = "0x1552F7C", VA = "0x1552F7C")]
		public SecT571Field()
		{
		}
	}
	[Token(Token = "0x2000216")]
	internal class SecT571FieldElement : ECFieldElement
	{
		[Token(Token = "0x40009D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly ulong[] x;

		[Token(Token = "0x17000224")]
		public override bool IsOne
		{
			[Token(Token = "0x6001315")]
			[Address(RVA = "0x15530A8", Offset = "0x15530A8", VA = "0x15530A8", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000225")]
		public override bool IsZero
		{
			[Token(Token = "0x6001316")]
			[Address(RVA = "0x15530B4", Offset = "0x15530B4", VA = "0x15530B4", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000226")]
		public override string FieldName
		{
			[Token(Token = "0x6001319")]
			[Address(RVA = "0x1553104", Offset = "0x1553104", VA = "0x1553104", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000227")]
		public override int FieldSize
		{
			[Token(Token = "0x600131A")]
			[Address(RVA = "0x155314C", Offset = "0x155314C", VA = "0x155314C", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000228")]
		public virtual int Representation
		{
			[Token(Token = "0x6001329")]
			[Address(RVA = "0x1553888", Offset = "0x1553888", VA = "0x1553888", Slot = "27")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000229")]
		public virtual int M
		{
			[Token(Token = "0x600132A")]
			[Address(RVA = "0x1553890", Offset = "0x1553890", VA = "0x1553890", Slot = "28")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700022A")]
		public virtual int K1
		{
			[Token(Token = "0x600132B")]
			[Address(RVA = "0x1553898", Offset = "0x1553898", VA = "0x1553898", Slot = "29")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700022B")]
		public virtual int K2
		{
			[Token(Token = "0x600132C")]
			[Address(RVA = "0x15538A0", Offset = "0x15538A0", VA = "0x15538A0", Slot = "30")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700022C")]
		public virtual int K3
		{
			[Token(Token = "0x600132D")]
			[Address(RVA = "0x15538A8", Offset = "0x15538A8", VA = "0x15538A8", Slot = "31")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001312")]
		[Address(RVA = "0x1552F84", Offset = "0x1552F84", VA = "0x1552F84")]
		public SecT571FieldElement(BigInteger x)
		{
		}

		[Token(Token = "0x6001313")]
		[Address(RVA = "0x155304C", Offset = "0x155304C", VA = "0x155304C")]
		public SecT571FieldElement()
		{
		}

		[Token(Token = "0x6001314")]
		[Address(RVA = "0x155307C", Offset = "0x155307C", VA = "0x155307C")]
		protected internal SecT571FieldElement(ulong[] x)
		{
		}

		[Token(Token = "0x6001317")]
		[Address(RVA = "0x15530C0", Offset = "0x15530C0", VA = "0x15530C0", Slot = "24")]
		public override bool TestBitZero()
		{
			return default(bool);
		}

		[Token(Token = "0x6001318")]
		[Address(RVA = "0x15530F8", Offset = "0x15530F8", VA = "0x15530F8", Slot = "4")]
		public override BigInteger ToBigInteger()
		{
			return null;
		}

		[Token(Token = "0x600131B")]
		[Address(RVA = "0x1553154", Offset = "0x1553154", VA = "0x1553154", Slot = "7")]
		public override ECFieldElement Add(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x600131C")]
		[Address(RVA = "0x155321C", Offset = "0x155321C", VA = "0x155321C", Slot = "8")]
		public override ECFieldElement AddOne()
		{
			return null;
		}

		[Token(Token = "0x600131D")]
		[Address(RVA = "0x155329C", Offset = "0x155329C", VA = "0x155329C", Slot = "9")]
		public override ECFieldElement Subtract(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x600131E")]
		[Address(RVA = "0x15532A8", Offset = "0x15532A8", VA = "0x15532A8", Slot = "10")]
		public override ECFieldElement Multiply(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x600131F")]
		[Address(RVA = "0x1553370", Offset = "0x1553370", VA = "0x1553370", Slot = "19")]
		public override ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x6001320")]
		[Address(RVA = "0x1553380", Offset = "0x1553380", VA = "0x1553380", Slot = "20")]
		public override ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x6001321")]
		[Address(RVA = "0x15534E8", Offset = "0x15534E8", VA = "0x15534E8", Slot = "11")]
		public override ECFieldElement Divide(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6001322")]
		[Address(RVA = "0x1553534", Offset = "0x1553534", VA = "0x1553534", Slot = "12")]
		public override ECFieldElement Negate()
		{
			return null;
		}

		[Token(Token = "0x6001323")]
		[Address(RVA = "0x1553538", Offset = "0x1553538", VA = "0x1553538", Slot = "13")]
		public override ECFieldElement Square()
		{
			return null;
		}

		[Token(Token = "0x6001324")]
		[Address(RVA = "0x15535B8", Offset = "0x15535B8", VA = "0x15535B8", Slot = "21")]
		public override ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x6001325")]
		[Address(RVA = "0x15535C8", Offset = "0x15535C8", VA = "0x15535C8", Slot = "22")]
		public override ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y)
		{
			return null;
		}

		[Token(Token = "0x6001326")]
		[Address(RVA = "0x15536F8", Offset = "0x15536F8", VA = "0x15536F8", Slot = "23")]
		public override ECFieldElement SquarePow(int pow)
		{
			return null;
		}

		[Token(Token = "0x6001327")]
		[Address(RVA = "0x1553790", Offset = "0x1553790", VA = "0x1553790", Slot = "14")]
		public override ECFieldElement Invert()
		{
			return null;
		}

		[Token(Token = "0x6001328")]
		[Address(RVA = "0x1553848", Offset = "0x1553848", VA = "0x1553848", Slot = "15")]
		public override ECFieldElement Sqrt()
		{
			return null;
		}

		[Token(Token = "0x600132E")]
		[Address(RVA = "0x15538B0", Offset = "0x15538B0", VA = "0x15538B0", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600132F")]
		[Address(RVA = "0x155394C", Offset = "0x155394C", VA = "0x155394C", Slot = "25")]
		public override bool Equals(ECFieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001330")]
		[Address(RVA = "0x15539E8", Offset = "0x15539E8", VA = "0x15539E8", Slot = "32")]
		public virtual bool Equals(SecT571FieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001331")]
		[Address(RVA = "0x1553A14", Offset = "0x1553A14", VA = "0x1553A14", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000217")]
	internal class SecT571K1Curve : AbstractF2mCurve
	{
		[Token(Token = "0x40009D3")]
		private const int SecT571K1_DEFAULT_COORDS = 6;

		[Token(Token = "0x40009D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected readonly SecT571K1Point m_infinity;

		[Token(Token = "0x1700022D")]
		public override ECPoint Infinity
		{
			[Token(Token = "0x6001336")]
			[Address(RVA = "0x1553C70", Offset = "0x1553C70", VA = "0x1553C70", Slot = "21")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700022E")]
		public override int FieldSize
		{
			[Token(Token = "0x6001337")]
			[Address(RVA = "0x1553C78", Offset = "0x1553C78", VA = "0x1553C78", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700022F")]
		public override bool IsKoblitz
		{
			[Token(Token = "0x600133B")]
			[Address(RVA = "0x1553ED8", Offset = "0x1553ED8", VA = "0x1553ED8", Slot = "37")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000230")]
		public virtual int M
		{
			[Token(Token = "0x600133E")]
			[Address(RVA = "0x1554324", Offset = "0x1554324", VA = "0x1554324", Slot = "38")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000231")]
		public virtual bool IsTrinomial
		{
			[Token(Token = "0x600133F")]
			[Address(RVA = "0x155432C", Offset = "0x155432C", VA = "0x155432C", Slot = "39")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000232")]
		public virtual int K1
		{
			[Token(Token = "0x6001340")]
			[Address(RVA = "0x1554334", Offset = "0x1554334", VA = "0x1554334", Slot = "40")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000233")]
		public virtual int K2
		{
			[Token(Token = "0x6001341")]
			[Address(RVA = "0x155433C", Offset = "0x155433C", VA = "0x155433C", Slot = "41")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000234")]
		public virtual int K3
		{
			[Token(Token = "0x6001342")]
			[Address(RVA = "0x1554344", Offset = "0x1554344", VA = "0x1554344", Slot = "42")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001332")]
		[Address(RVA = "0x1553A44", Offset = "0x1553A44", VA = "0x1553A44")]
		public SecT571K1Curve()
		{
		}

		[Token(Token = "0x6001333")]
		[Address(RVA = "0x1553BB0", Offset = "0x1553BB0", VA = "0x1553BB0", Slot = "11")]
		protected override ECCurve CloneCurve()
		{
			return null;
		}

		[Token(Token = "0x6001334")]
		[Address(RVA = "0x1553C08", Offset = "0x1553C08", VA = "0x1553C08", Slot = "15")]
		public override bool SupportsCoordinateSystem(int coord)
		{
			return default(bool);
		}

		[Token(Token = "0x6001335")]
		[Address(RVA = "0x1553C14", Offset = "0x1553C14", VA = "0x1553C14", Slot = "14")]
		protected override ECMultiplier CreateDefaultMultiplier()
		{
			return null;
		}

		[Token(Token = "0x6001338")]
		[Address(RVA = "0x1553C80", Offset = "0x1553C80", VA = "0x1553C80", Slot = "5")]
		public override ECFieldElement FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6001339")]
		[Address(RVA = "0x1553CE0", Offset = "0x1553CE0", VA = "0x1553CE0", Slot = "12")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x600133A")]
		[Address(RVA = "0x1553E38", Offset = "0x1553E38", VA = "0x1553E38", Slot = "13")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x600133C")]
		[Address(RVA = "0x1553EE0", Offset = "0x1553EE0", VA = "0x1553EE0", Slot = "32")]
		protected override ECPoint DecompressPoint(int yTilde, BigInteger X1)
		{
			return null;
		}

		[Token(Token = "0x600133D")]
		[Address(RVA = "0x155410C", Offset = "0x155410C", VA = "0x155410C")]
		private ECFieldElement SolveQuadraticEquation(ECFieldElement beta)
		{
			return null;
		}
	}
	[Token(Token = "0x2000218")]
	internal class SecT571K1Point : AbstractF2mPoint
	{
		[Token(Token = "0x17000235")]
		public override ECFieldElement YCoord
		{
			[Token(Token = "0x6001347")]
			[Address(RVA = "0x15543EC", Offset = "0x15543EC", VA = "0x15543EC", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000236")]
		protected internal override bool CompressionYTilde
		{
			[Token(Token = "0x6001348")]
			[Address(RVA = "0x15544D8", Offset = "0x15544D8", VA = "0x15544D8", Slot = "26")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001343")]
		[Address(RVA = "0x1553BA8", Offset = "0x1553BA8", VA = "0x1553BA8")]
		public SecT571K1Point(ECCurve curve, ECFieldElement x, ECFieldElement y)
		{
		}

		[Token(Token = "0x6001344")]
		[Address(RVA = "0x1553D68", Offset = "0x1553D68", VA = "0x1553D68")]
		public SecT571K1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression)
		{
		}

		[Token(Token = "0x6001345")]
		[Address(RVA = "0x1553ECC", Offset = "0x1553ECC", VA = "0x1553ECC")]
		internal SecT571K1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
		}

		[Token(Token = "0x6001346")]
		[Address(RVA = "0x155434C", Offset = "0x155434C", VA = "0x155434C", Slot = "6")]
		protected override ECPoint Detach()
		{
			return null;
		}

		[Token(Token = "0x6001349")]
		[Address(RVA = "0x1554558", Offset = "0x1554558", VA = "0x1554558", Slot = "27")]
		public override ECPoint Add(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x600134A")]
		[Address(RVA = "0x1554C0C", Offset = "0x1554C0C", VA = "0x1554C0C", Slot = "31")]
		public override ECPoint Twice()
		{
			return null;
		}

		[Token(Token = "0x600134B")]
		[Address(RVA = "0x1554F90", Offset = "0x1554F90", VA = "0x1554F90", Slot = "33")]
		public override ECPoint TwicePlus(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x600134C")]
		[Address(RVA = "0x1555440", Offset = "0x1555440", VA = "0x1555440", Slot = "29")]
		public override ECPoint Negate()
		{
			return null;
		}
	}
	[Token(Token = "0x2000219")]
	internal class SecT571R1Curve : AbstractF2mCurve
	{
		[Token(Token = "0x40009D5")]
		private const int SecT571R1_DEFAULT_COORDS = 6;

		[Token(Token = "0x40009D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected readonly SecT571R1Point m_infinity;

		[Token(Token = "0x40009D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly SecT571FieldElement SecT571R1_B;

		[Token(Token = "0x40009D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly SecT571FieldElement SecT571R1_B_SQRT;

		[Token(Token = "0x17000237")]
		public override ECPoint Infinity
		{
			[Token(Token = "0x6001350")]
			[Address(RVA = "0x155577C", Offset = "0x155577C", VA = "0x155577C", Slot = "21")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000238")]
		public override int FieldSize
		{
			[Token(Token = "0x6001351")]
			[Address(RVA = "0x1555784", Offset = "0x1555784", VA = "0x1555784", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000239")]
		public override bool IsKoblitz
		{
			[Token(Token = "0x6001355")]
			[Address(RVA = "0x15559E4", Offset = "0x15559E4", VA = "0x15559E4", Slot = "37")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700023A")]
		public virtual int M
		{
			[Token(Token = "0x6001358")]
			[Address(RVA = "0x1555E38", Offset = "0x1555E38", VA = "0x1555E38", Slot = "38")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700023B")]
		public virtual bool IsTrinomial
		{
			[Token(Token = "0x6001359")]
			[Address(RVA = "0x1555E40", Offset = "0x1555E40", VA = "0x1555E40", Slot = "39")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700023C")]
		public virtual int K1
		{
			[Token(Token = "0x600135A")]
			[Address(RVA = "0x1555E48", Offset = "0x1555E48", VA = "0x1555E48", Slot = "40")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700023D")]
		public virtual int K2
		{
			[Token(Token = "0x600135B")]
			[Address(RVA = "0x1555E50", Offset = "0x1555E50", VA = "0x1555E50", Slot = "41")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700023E")]
		public virtual int K3
		{
			[Token(Token = "0x600135C")]
			[Address(RVA = "0x1555E58", Offset = "0x1555E58", VA = "0x1555E58", Slot = "42")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600134D")]
		[Address(RVA = "0x155559C", Offset = "0x155559C", VA = "0x155559C")]
		public SecT571R1Curve()
		{
		}

		[Token(Token = "0x600134E")]
		[Address(RVA = "0x1555718", Offset = "0x1555718", VA = "0x1555718", Slot = "11")]
		protected override ECCurve CloneCurve()
		{
			return null;
		}

		[Token(Token = "0x600134F")]
		[Address(RVA = "0x1555770", Offset = "0x1555770", VA = "0x1555770", Slot = "15")]
		public override bool SupportsCoordinateSystem(int coord)
		{
			return default(bool);
		}

		[Token(Token = "0x6001352")]
		[Address(RVA = "0x155578C", Offset = "0x155578C", VA = "0x155578C", Slot = "5")]
		public override ECFieldElement FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6001353")]
		[Address(RVA = "0x15557EC", Offset = "0x15557EC", VA = "0x15557EC", Slot = "12")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x6001354")]
		[Address(RVA = "0x1555944", Offset = "0x1555944", VA = "0x1555944", Slot = "13")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x6001356")]
		[Address(RVA = "0x15559EC", Offset = "0x15559EC", VA = "0x15559EC", Slot = "32")]
		protected override ECPoint DecompressPoint(int yTilde, BigInteger X1)
		{
			return null;
		}

		[Token(Token = "0x6001357")]
		[Address(RVA = "0x1555C20", Offset = "0x1555C20", VA = "0x1555C20")]
		private ECFieldElement SolveQuadraticEquation(ECFieldElement beta)
		{
			return null;
		}
	}
	[Token(Token = "0x200021A")]
	internal class SecT571R1Point : AbstractF2mPoint
	{
		[Token(Token = "0x1700023F")]
		public override ECFieldElement YCoord
		{
			[Token(Token = "0x6001362")]
			[Address(RVA = "0x1556038", Offset = "0x1556038", VA = "0x1556038", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000240")]
		protected internal override bool CompressionYTilde
		{
			[Token(Token = "0x6001363")]
			[Address(RVA = "0x1556124", Offset = "0x1556124", VA = "0x1556124", Slot = "26")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600135E")]
		[Address(RVA = "0x1555710", Offset = "0x1555710", VA = "0x1555710")]
		public SecT571R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y)
		{
		}

		[Token(Token = "0x600135F")]
		[Address(RVA = "0x1555874", Offset = "0x1555874", VA = "0x1555874")]
		public SecT571R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression)
		{
		}

		[Token(Token = "0x6001360")]
		[Address(RVA = "0x15559D8", Offset = "0x15559D8", VA = "0x15559D8")]
		internal SecT571R1Point(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
		}

		[Token(Token = "0x6001361")]
		[Address(RVA = "0x1555F98", Offset = "0x1555F98", VA = "0x1555F98", Slot = "6")]
		protected override ECPoint Detach()
		{
			return null;
		}

		[Token(Token = "0x6001364")]
		[Address(RVA = "0x15561A4", Offset = "0x15561A4", VA = "0x15561A4", Slot = "27")]
		public override ECPoint Add(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6001365")]
		[Address(RVA = "0x1556864", Offset = "0x1556864", VA = "0x1556864", Slot = "31")]
		public override ECPoint Twice()
		{
			return null;
		}

		[Token(Token = "0x6001366")]
		[Address(RVA = "0x1556BA0", Offset = "0x1556BA0", VA = "0x1556BA0", Slot = "33")]
		public override ECPoint TwicePlus(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x6001367")]
		[Address(RVA = "0x1557088", Offset = "0x1557088", VA = "0x1557088", Slot = "29")]
		public override ECPoint Negate()
		{
			return null;
		}
	}
}
namespace Org.BouncyCastle.Math.EC.Custom.Djb
{
	[Token(Token = "0x200021B")]
	internal class Curve25519 : AbstractFpCurve
	{
		[Token(Token = "0x40009D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly BigInteger q;

		[Token(Token = "0x40009DA")]
		private const int Curve25519_DEFAULT_COORDS = 4;

		[Token(Token = "0x40009DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected readonly Curve25519Point m_infinity;

		[Token(Token = "0x17000241")]
		public virtual BigInteger Q
		{
			[Token(Token = "0x600136B")]
			[Address(RVA = "0x14A3E68", Offset = "0x14A3E68", VA = "0x14A3E68", Slot = "36")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000242")]
		public override ECPoint Infinity
		{
			[Token(Token = "0x600136C")]
			[Address(RVA = "0x14A3ED0", Offset = "0x14A3ED0", VA = "0x14A3ED0", Slot = "21")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000243")]
		public override int FieldSize
		{
			[Token(Token = "0x600136D")]
			[Address(RVA = "0x14A3ED8", Offset = "0x14A3ED8", VA = "0x14A3ED8", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001368")]
		[Address(RVA = "0x14A3C20", Offset = "0x14A3C20", VA = "0x14A3C20")]
		public Curve25519()
		{
		}

		[Token(Token = "0x6001369")]
		[Address(RVA = "0x14A3E04", Offset = "0x14A3E04", VA = "0x14A3E04", Slot = "11")]
		protected override ECCurve CloneCurve()
		{
			return null;
		}

		[Token(Token = "0x600136A")]
		[Address(RVA = "0x14A3E5C", Offset = "0x14A3E5C", VA = "0x14A3E5C", Slot = "15")]
		public override bool SupportsCoordinateSystem(int coord)
		{
			return default(bool);
		}

		[Token(Token = "0x600136E")]
		[Address(RVA = "0x14A3F4C", Offset = "0x14A3F4C", VA = "0x14A3F4C", Slot = "5")]
		public override ECFieldElement FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x600136F")]
		[Address(RVA = "0x14A40C0", Offset = "0x14A40C0", VA = "0x14A40C0", Slot = "12")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression)
		{
			return null;
		}

		[Token(Token = "0x6001370")]
		[Address(RVA = "0x14A4218", Offset = "0x14A4218", VA = "0x14A4218", Slot = "13")]
		protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
			return null;
		}
	}
	[Token(Token = "0x200021C")]
	internal class Curve25519Field
	{
		[Token(Token = "0x40009DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly uint[] P;

		[Token(Token = "0x40009DD")]
		private const uint P7 = 2147483647u;

		[Token(Token = "0x40009DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly uint[] PExt;

		[Token(Token = "0x40009DF")]
		private const uint PInv = 19u;

		[Token(Token = "0x6001372")]
		[Address(RVA = "0x14A433C", Offset = "0x14A433C", VA = "0x14A433C")]
		public static void Add(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6001373")]
		[Address(RVA = "0x14A4488", Offset = "0x14A4488", VA = "0x14A4488")]
		public static void AddExt(uint[] xx, uint[] yy, uint[] zz)
		{
		}

		[Token(Token = "0x6001374")]
		[Address(RVA = "0x14A46E4", Offset = "0x14A46E4", VA = "0x14A46E4")]
		public static void AddOne(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6001375")]
		[Address(RVA = "0x14A47AC", Offset = "0x14A47AC", VA = "0x14A47AC")]
		public static uint[] FromBigInteger(BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6001376")]
		[Address(RVA = "0x14A4870", Offset = "0x14A4870", VA = "0x14A4870")]
		public static void Half(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6001377")]
		[Address(RVA = "0x14A4950", Offset = "0x14A4950", VA = "0x14A4950")]
		public static void Multiply(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6001378")]
		[Address(RVA = "0x14A4B50", Offset = "0x14A4B50", VA = "0x14A4B50")]
		public static void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz)
		{
		}

		[Token(Token = "0x6001379")]
		[Address(RVA = "0x14A4C20", Offset = "0x14A4C20", VA = "0x14A4C20")]
		public static void Negate(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x600137A")]
		[Address(RVA = "0x14A49E8", Offset = "0x14A49E8", VA = "0x14A49E8")]
		public static void Reduce(uint[] xx, uint[] z)
		{
		}

		[Token(Token = "0x600137B")]
		[Address(RVA = "0x14A4CCC", Offset = "0x14A4CCC", VA = "0x14A4CCC")]
		public static void Reduce27(uint x, uint[] z)
		{
		}

		[Token(Token = "0x600137C")]
		[Address(RVA = "0x14A4DE4", Offset = "0x14A4DE4", VA = "0x14A4DE4")]
		public static void Square(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x600137D")]
		[Address(RVA = "0x14A4E74", Offset = "0x14A4E74", VA = "0x14A4E74")]
		public static void SquareN(uint[] x, int n, uint[] z)
		{
		}

		[Token(Token = "0x600137E")]
		[Address(RVA = "0x14A4F58", Offset = "0x14A4F58", VA = "0x14A4F58")]
		public static void Subtract(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x600137F")]
		[Address(RVA = "0x14A5080", Offset = "0x14A5080", VA = "0x14A5080")]
		public static void SubtractExt(uint[] xx, uint[] yy, uint[] zz)
		{
		}

		[Token(Token = "0x6001380")]
		[Address(RVA = "0x14A52A4", Offset = "0x14A52A4", VA = "0x14A52A4")]
		public static void Twice(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6001381")]
		[Address(RVA = "0x14A4FF4", Offset = "0x14A4FF4", VA = "0x14A4FF4")]
		private static uint AddPTo(uint[] z)
		{
			return default(uint);
		}

		[Token(Token = "0x6001382")]
		[Address(RVA = "0x14A5120", Offset = "0x14A5120", VA = "0x14A5120")]
		private static uint AddPExtTo(uint[] zz)
		{
			return default(uint);
		}

		[Token(Token = "0x6001383")]
		[Address(RVA = "0x14A4408", Offset = "0x14A4408", VA = "0x14A4408")]
		private static int SubPFrom(uint[] z)
		{
			return default(int);
		}

		[Token(Token = "0x6001384")]
		[Address(RVA = "0x14A455C", Offset = "0x14A455C", VA = "0x14A455C")]
		private static int SubPExtFrom(uint[] zz)
		{
			return default(int);
		}

		[Token(Token = "0x6001385")]
		[Address(RVA = "0x14A5370", Offset = "0x14A5370", VA = "0x14A5370")]
		public Curve25519Field()
		{
		}
	}
	[Token(Token = "0x200021D")]
	internal class Curve25519FieldElement : ECFieldElement
	{
		[Token(Token = "0x40009E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly BigInteger Q;

		[Token(Token = "0x40009E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly uint[] PRECOMP_POW2;

		[Token(Token = "0x40009E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected internal readonly uint[] x;

		[Token(Token = "0x17000244")]
		public override bool IsZero
		{
			[Token(Token = "0x600138A")]
			[Address(RVA = "0x14A5488", Offset = "0x14A5488", VA = "0x14A5488", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000245")]
		public override bool IsOne
		{
			[Token(Token = "0x600138B")]
			[Address(RVA = "0x14A5494", Offset = "0x14A5494", VA = "0x14A5494", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000246")]
		public override string FieldName
		{
			[Token(Token = "0x600138E")]
			[Address(RVA = "0x14A54D4", Offset = "0x14A54D4", VA = "0x14A54D4", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000247")]
		public override int FieldSize
		{
			[Token(Token = "0x600138F")]
			[Address(RVA = "0x14A551C", Offset = "0x14A551C", VA = "0x14A551C", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001387")]
		[Address(RVA = "0x14A3FAC", Offset = "0x14A3FAC", VA = "0x14A3FAC")]
		public Curve25519FieldElement(BigInteger x)
		{
		}

		[Token(Token = "0x6001388")]
		[Address(RVA = "0x14A542C", Offset = "0x14A542C", VA = "0x14A542C")]
		public Curve25519FieldElement()
		{
		}

		[Token(Token = "0x6001389")]
		[Address(RVA = "0x14A545C", Offset = "0x14A545C", VA = "0x14A545C")]
		protected internal Curve25519FieldElement(uint[] x)
		{
		}

		[Token(Token = "0x600138C")]
		[Address(RVA = "0x14A54A0", Offset = "0x14A54A0", VA = "0x14A54A0", Slot = "24")]
		public override bool TestBitZero()
		{
			return default(bool);
		}

		[Token(Token = "0x600138D")]
		[Address(RVA = "0x14A54C8", Offset = "0x14A54C8", VA = "0x14A54C8", Slot = "4")]
		public override BigInteger ToBigInteger()
		{
			return null;
		}

		[Token(Token = "0x6001390")]
		[Address(RVA = "0x14A5590", Offset = "0x14A5590", VA = "0x14A5590", Slot = "7")]
		public override ECFieldElement Add(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6001391")]
		[Address(RVA = "0x14A5680", Offset = "0x14A5680", VA = "0x14A5680", Slot = "8")]
		public override ECFieldElement AddOne()
		{
			return null;
		}

		[Token(Token = "0x6001392")]
		[Address(RVA = "0x14A5724", Offset = "0x14A5724", VA = "0x14A5724", Slot = "9")]
		public override ECFieldElement Subtract(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6001393")]
		[Address(RVA = "0x14A5814", Offset = "0x14A5814", VA = "0x14A5814", Slot = "10")]
		public override ECFieldElement Multiply(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6001394")]
		[Address(RVA = "0x14A5904", Offset = "0x14A5904", VA = "0x14A5904", Slot = "11")]
		public override ECFieldElement Divide(ECFieldElement b)
		{
			return null;
		}

		[Token(Token = "0x6001395")]
		[Address(RVA = "0x14A5A0C", Offset = "0x14A5A0C", VA = "0x14A5A0C", Slot = "12")]
		public override ECFieldElement Negate()
		{
			return null;
		}

		[Token(Token = "0x6001396")]
		[Address(RVA = "0x14A5AB0", Offset = "0x14A5AB0", VA = "0x14A5AB0", Slot = "13")]
		public override ECFieldElement Square()
		{
			return null;
		}

		[Token(Token = "0x6001397")]
		[Address(RVA = "0x14A5B54", Offset = "0x14A5B54", VA = "0x14A5B54", Slot = "14")]
		public override ECFieldElement Invert()
		{
			return null;
		}

		[Token(Token = "0x6001398")]
		[Address(RVA = "0x14A5C0C", Offset = "0x14A5C0C", VA = "0x14A5C0C", Slot = "15")]
		public override ECFieldElement Sqrt()
		{
			return null;
		}

		[Token(Token = "0x6001399")]
		[Address(RVA = "0x14A5EE8", Offset = "0x14A5EE8", VA = "0x14A5EE8", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600139A")]
		[Address(RVA = "0x14A5F84", Offset = "0x14A5F84", VA = "0x14A5F84", Slot = "25")]
		public override bool Equals(ECFieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x600139B")]
		[Address(RVA = "0x14A6020", Offset = "0x14A6020", VA = "0x14A6020", Slot = "27")]
		public virtual bool Equals(Curve25519FieldElement other)
		{
			return default(bool);
		}

		[Token(Token = "0x600139C")]
		[Address(RVA = "0x14A604C", Offset = "0x14A604C", VA = "0x14A604C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x200021E")]
	internal class Curve25519Point : AbstractFpPoint
	{
		[Token(Token = "0x600139E")]
		[Address(RVA = "0x14A3DFC", Offset = "0x14A3DFC", VA = "0x14A3DFC")]
		public Curve25519Point(ECCurve curve, ECFieldElement x, ECFieldElement y)
		{
		}

		[Token(Token = "0x600139F")]
		[Address(RVA = "0x14A4148", Offset = "0x14A4148", VA = "0x14A4148")]
		public Curve25519Point(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression)
		{
		}

		[Token(Token = "0x60013A0")]
		[Address(RVA = "0x14A42AC", Offset = "0x14A42AC", VA = "0x14A42AC")]
		internal Curve25519Point(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression)
		{
		}

		[Token(Token = "0x60013A1")]
		[Address(RVA = "0x14A61A0", Offset = "0x14A61A0", VA = "0x14A61A0", Slot = "6")]
		protected override ECPoint Detach()
		{
			return null;
		}

		[Token(Token = "0x60013A2")]
		[Address(RVA = "0x14A6240", Offset = "0x14A6240", VA = "0x14A6240", Slot = "14")]
		public override ECFieldElement GetZCoord(int index)
		{
			return null;
		}

		[Token(Token = "0x60013A3")]
		[Address(RVA = "0x14A6260", Offset = "0x14A6260", VA = "0x14A6260", Slot = "27")]
		public override ECPoint Add(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x60013A4")]
		[Address(RVA = "0x14A698C", Offset = "0x14A698C", VA = "0x14A698C", Slot = "31")]
		public override ECPoint Twice()
		{
			return null;
		}

		[Token(Token = "0x60013A5")]
		[Address(RVA = "0x14A6A2C", Offset = "0x14A6A2C", VA = "0x14A6A2C", Slot = "33")]
		public override ECPoint TwicePlus(ECPoint b)
		{
			return null;
		}

		[Token(Token = "0x60013A6")]
		[Address(RVA = "0x14A6B00", Offset = "0x14A6B00", VA = "0x14A6B00", Slot = "34")]
		public override ECPoint ThreeTimes()
		{
			return null;
		}

		[Token(Token = "0x60013A7")]
		[Address(RVA = "0x14A6B84", Offset = "0x14A6B84", VA = "0x14A6B84", Slot = "29")]
		public override ECPoint Negate()
		{
			return null;
		}

		[Token(Token = "0x60013A8")]
		[Address(RVA = "0x14A6C5C", Offset = "0x14A6C5C", VA = "0x14A6C5C", Slot = "35")]
		protected virtual Curve25519FieldElement CalculateJacobianModifiedW(Curve25519FieldElement Z, uint[] ZSquared)
		{
			return null;
		}

		[Token(Token = "0x60013A9")]
		[Address(RVA = "0x14A6DF0", Offset = "0x14A6DF0", VA = "0x14A6DF0", Slot = "36")]
		protected virtual Curve25519FieldElement GetJacobianModifiedW()
		{
			return null;
		}

		[Token(Token = "0x60013AA")]
		[Address(RVA = "0x14A6F30", Offset = "0x14A6F30", VA = "0x14A6F30", Slot = "37")]
		protected virtual Curve25519Point TwiceJacobianModified(bool calculateW)
		{
			return null;
		}
	}
}
namespace Org.BouncyCastle.Math.EC.Abc
{
	[Token(Token = "0x200021F")]
	internal class SimpleBigDecimal
	{
		[Token(Token = "0x40009E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly BigInteger bigInt;

		[Token(Token = "0x40009E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly int scale;

		[Token(Token = "0x17000248")]
		public int IntValue
		{
			[Token(Token = "0x60013BE")]
			[Address(RVA = "0x149F460", Offset = "0x149F460", VA = "0x149F460")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000249")]
		public long LongValue
		{
			[Token(Token = "0x60013BF")]
			[Address(RVA = "0x149F480", Offset = "0x149F480", VA = "0x149F480")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x1700024A")]
		public int Scale
		{
			[Token(Token = "0x60013C0")]
			[Address(RVA = "0x149F4A0", Offset = "0x149F4A0", VA = "0x149F4A0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60013AB")]
		[Address(RVA = "0x149EA40", Offset = "0x149EA40", VA = "0x149EA40")]
		public static SimpleBigDecimal GetInstance(BigInteger val, int scale)
		{
			return null;
		}

		[Token(Token = "0x60013AC")]
		[Address(RVA = "0x149EAD0", Offset = "0x149EAD0", VA = "0x149EAD0")]
		public SimpleBigDecimal(BigInteger bigInt, int scale)
		{
		}

		[Token(Token = "0x60013AD")]
		[Address(RVA = "0x149EB74", Offset = "0x149EB74", VA = "0x149EB74")]
		private SimpleBigDecimal(SimpleBigDecimal limBigDec)
		{
		}

		[Token(Token = "0x60013AE")]
		[Address(RVA = "0x149EBB4", Offset = "0x149EBB4", VA = "0x149EBB4")]
		private void CheckScale(SimpleBigDecimal b)
		{
		}

		[Token(Token = "0x60013AF")]
		[Address(RVA = "0x149EC54", Offset = "0x149EC54", VA = "0x149EC54")]
		public SimpleBigDecimal AdjustScale(int newScale)
		{
			return null;
		}

		[Token(Token = "0x60013B0")]
		[Address(RVA = "0x149ED30", Offset = "0x149ED30", VA = "0x149ED30")]
		public SimpleBigDecimal Add(SimpleBigDecimal b)
		{
			return null;
		}

		[Token(Token = "0x60013B1")]
		[Address(RVA = "0x149EDD4", Offset = "0x149EDD4", VA = "0x149EDD4")]
		public SimpleBigDecimal Add(BigInteger b)
		{
			return null;
		}

		[Token(Token = "0x60013B2")]
		[Address(RVA = "0x149EE80", Offset = "0x149EE80", VA = "0x149EE80")]
		public SimpleBigDecimal Negate()
		{
			return null;
		}

		[Token(Token = "0x60013B3")]
		[Address(RVA = "0x149EF0C", Offset = "0x149EF0C", VA = "0x149EF0C")]
		public SimpleBigDecimal Subtract(SimpleBigDecimal b)
		{
			return null;
		}

		[Token(Token = "0x60013B4")]
		[Address(RVA = "0x149EF40", Offset = "0x149EF40", VA = "0x149EF40")]
		public SimpleBigDecimal Subtract(BigInteger b)
		{
			return null;
		}

		[Token(Token = "0x60013B5")]
		[Address(RVA = "0x149EFEC", Offset = "0x149EFEC", VA = "0x149EFEC")]
		public SimpleBigDecimal Multiply(SimpleBigDecimal b)
		{
			return null;
		}

		[Token(Token = "0x60013B6")]
		[Address(RVA = "0x149F090", Offset = "0x149F090", VA = "0x149F090")]
		public SimpleBigDecimal Multiply(BigInteger b)
		{
			return null;
		}

		[Token(Token = "0x60013B7")]
		[Address(RVA = "0x149F124", Offset = "0x149F124", VA = "0x149F124")]
		public SimpleBigDecimal Divide(SimpleBigDecimal b)
		{
			return null;
		}

		[Token(Token = "0x60013B8")]
		[Address(RVA = "0x149F1D8", Offset = "0x149F1D8", VA = "0x149F1D8")]
		public SimpleBigDecimal Divide(BigInteger b)
		{
			return null;
		}

		[Token(Token = "0x60013B9")]
		[Address(RVA = "0x149F26C", Offset = "0x149F26C", VA = "0x149F26C")]
		public SimpleBigDecimal ShiftLeft(int n)
		{
			return null;
		}

		[Token(Token = "0x60013BA")]
		[Address(RVA = "0x149F300", Offset = "0x149F300", VA = "0x149F300")]
		public int CompareTo(SimpleBigDecimal val)
		{
			return default(int);
		}

		[Token(Token = "0x60013BB")]
		[Address(RVA = "0x149F33C", Offset = "0x149F33C", VA = "0x149F33C")]
		public int CompareTo(BigInteger val)
		{
			return default(int);
		}

		[Token(Token = "0x60013BC")]
		[Address(RVA = "0x149F384", Offset = "0x149F384", VA = "0x149F384")]
		public BigInteger Floor()
		{
			return null;
		}

		[Token(Token = "0x60013BD")]
		[Address(RVA = "0x149F3A8", Offset = "0x149F3A8", VA = "0x149F3A8")]
		public BigInteger Round()
		{
			return null;
		}

		[Token(Token = "0x60013C1")]
		[Address(RVA = "0x149F4A8", Offset = "0x149F4A8", VA = "0x149F4A8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60013C2")]
		[Address(RVA = "0x149F79C", Offset = "0x149F79C", VA = "0x149F79C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60013C3")]
		[Address(RVA = "0x149F870", Offset = "0x149F870", VA = "0x149F870", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000220")]
	internal class Tnaf
	{
		[Token(Token = "0x40009E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly BigInteger MinusOne;

		[Token(Token = "0x40009E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly BigInteger MinusTwo;

		[Token(Token = "0x40009E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly BigInteger MinusThree;

		[Token(Token = "0x40009E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly BigInteger Four;

		[Token(Token = "0x40009E9")]
		public const sbyte Width = 4;

		[Token(Token = "0x40009EA")]
		public const sbyte Pow2Width = 16;

		[Token(Token = "0x40009EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly ZTauElement[] Alpha0;

		[Token(Token = "0x40009EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly sbyte[][] Alpha0Tnaf;

		[Token(Token = "0x40009ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly ZTauElement[] Alpha1;

		[Token(Token = "0x40009EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static readonly sbyte[][] Alpha1Tnaf;

		[Token(Token = "0x60013C4")]
		[Address(RVA = "0x149F8AC", Offset = "0x149F8AC", VA = "0x149F8AC")]
		public static BigInteger Norm(sbyte mu, ZTauElement lambda)
		{
			return null;
		}

		[Token(Token = "0x60013C5")]
		[Address(RVA = "0x149F9E8", Offset = "0x149F9E8", VA = "0x149F9E8")]
		public static SimpleBigDecimal Norm(sbyte mu, SimpleBigDecimal u, SimpleBigDecimal v)
		{
			return null;
		}

		[Token(Token = "0x60013C6")]
		[Address(RVA = "0x149FB00", Offset = "0x149FB00", VA = "0x149FB00")]
		public static ZTauElement Round(SimpleBigDecimal lambda0, SimpleBigDecimal lambda1, sbyte mu)
		{
			return null;
		}

		[Token(Token = "0x60013C7")]
		[Address(RVA = "0x149FF04", Offset = "0x149FF04", VA = "0x149FF04")]
		public static SimpleBigDecimal ApproximateDivisionByN(BigInteger k, BigInteger s, BigInteger vm, sbyte a, int m, int c)
		{
			return null;
		}

		[Token(Token = "0x60013C8")]
		[Address(RVA = "0x14A0084", Offset = "0x14A0084", VA = "0x14A0084")]
		public static sbyte[] TauAdicNaf(sbyte mu, ZTauElement lambda)
		{
			return null;
		}

		[Token(Token = "0x60013C9")]
		[Address(RVA = "0x14A0440", Offset = "0x14A0440", VA = "0x14A0440")]
		public static AbstractF2mPoint Tau(AbstractF2mPoint p)
		{
			return null;
		}

		[Token(Token = "0x60013CA")]
		[Address(RVA = "0x14A0460", Offset = "0x14A0460", VA = "0x14A0460")]
		public static sbyte GetMu(AbstractF2mCurve curve)
		{
			return default(sbyte);
		}

		[Token(Token = "0x60013CB")]
		[Address(RVA = "0x14A0564", Offset = "0x14A0564", VA = "0x14A0564")]
		public static sbyte GetMu(ECFieldElement curveA)
		{
			return default(sbyte);
		}

		[Token(Token = "0x60013CC")]
		[Address(RVA = "0x14A0598", Offset = "0x14A0598", VA = "0x14A0598")]
		public static sbyte GetMu(int curveA)
		{
			return default(sbyte);
		}

		[Token(Token = "0x60013CD")]
		[Address(RVA = "0x14A05A8", Offset = "0x14A05A8", VA = "0x14A05A8")]
		public static BigInteger[] GetLucas(sbyte mu, int k, bool doV)
		{
			return null;
		}

		[Token(Token = "0x60013CE")]
		[Address(RVA = "0x14A07AC", Offset = "0x14A07AC", VA = "0x14A07AC")]
		public static BigInteger GetTw(sbyte mu, int w)
		{
			return null;
		}

		[Token(Token = "0x60013CF")]
		[Address(RVA = "0x14A094C", Offset = "0x14A094C", VA = "0x14A094C")]
		public static BigInteger[] GetSi(AbstractF2mCurve curve)
		{
			return null;
		}

		[Token(Token = "0x60013D0")]
		[Address(RVA = "0x14A0D10", Offset = "0x14A0D10", VA = "0x14A0D10")]
		public static BigInteger[] GetSi(int fieldSize, int curveA, BigInteger cofactor)
		{
			return null;
		}

		[Token(Token = "0x60013D1")]
		[Address(RVA = "0x14A0C54", Offset = "0x14A0C54", VA = "0x14A0C54")]
		protected static int GetShiftsForCofactor(BigInteger h)
		{
			return default(int);
		}

		[Token(Token = "0x60013D2")]
		[Address(RVA = "0x14A0F6C", Offset = "0x14A0F6C", VA = "0x14A0F6C")]
		public static ZTauElement PartModReduction(BigInteger k, int m, sbyte a, BigInteger[] s, sbyte mu, sbyte c)
		{
			return null;
		}

		[Token(Token = "0x60013D3")]
		[Address(RVA = "0x14A1204", Offset = "0x14A1204", VA = "0x14A1204")]
		public static AbstractF2mPoint MultiplyRTnaf(AbstractF2mPoint p, BigInteger k)
		{
			return null;
		}

		[Token(Token = "0x60013D4")]
		[Address(RVA = "0x14A1364", Offset = "0x14A1364", VA = "0x14A1364")]
		public static AbstractF2mPoint MultiplyTnaf(AbstractF2mPoint p, ZTauElement lambda)
		{
			return null;
		}

		[Token(Token = "0x60013D5")]
		[Address(RVA = "0x14A1494", Offset = "0x14A1494", VA = "0x14A1494")]
		public static AbstractF2mPoint MultiplyFromTnaf(AbstractF2mPoint p, sbyte[] u)
		{
			return null;
		}

		[Token(Token = "0x60013D6")]
		[Address(RVA = "0x14A16B0", Offset = "0x14A16B0", VA = "0x14A16B0")]
		public static sbyte[] TauAdicWNaf(sbyte mu, ZTauElement lambda, sbyte width, BigInteger pow2w, BigInteger tw, ZTauElement[] alpha)
		{
			return null;
		}

		[Token(Token = "0x60013D7")]
		[Address(RVA = "0x14A1A70", Offset = "0x14A1A70", VA = "0x14A1A70")]
		public static AbstractF2mPoint[] GetPreComp(AbstractF2mPoint p, sbyte a)
		{
			return null;
		}

		[Token(Token = "0x60013D8")]
		[Address(RVA = "0x14A1C4C", Offset = "0x14A1C4C", VA = "0x14A1C4C")]
		public Tnaf()
		{
		}
	}
	[Token(Token = "0x2000221")]
	internal class ZTauElement
	{
		[Token(Token = "0x40009EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly BigInteger u;

		[Token(Token = "0x40009F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly BigInteger v;

		[Token(Token = "0x60013DA")]
		[Address(RVA = "0x149FECC", Offset = "0x149FECC", VA = "0x149FECC")]
		public ZTauElement(BigInteger u, BigInteger v)
		{
		}
	}
}
namespace Org.BouncyCastle.Crypto
{
	[Token(Token = "0x2000222")]
	public class AsymmetricCipherKeyPair
	{
		[Token(Token = "0x40009F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly AsymmetricKeyParameter publicParameter;

		[Token(Token = "0x40009F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly AsymmetricKeyParameter privateParameter;

		[Token(Token = "0x1700024B")]
		public AsymmetricKeyParameter Public
		{
			[Token(Token = "0x60013DC")]
			[Address(RVA = "0x11AFA7C", Offset = "0x11AFA7C", VA = "0x11AFA7C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700024C")]
		public AsymmetricKeyParameter Private
		{
			[Token(Token = "0x60013DD")]
			[Address(RVA = "0x11AFA84", Offset = "0x11AFA84", VA = "0x11AFA84")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013DB")]
		[Address(RVA = "0x11AF994", Offset = "0x11AF994", VA = "0x11AF994")]
		public AsymmetricCipherKeyPair(AsymmetricKeyParameter publicParameter, AsymmetricKeyParameter privateParameter)
		{
		}
	}
	[Token(Token = "0x2000223")]
	public abstract class AsymmetricKeyParameter : ICipherParameters
	{
		[Token(Token = "0x40009F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly bool privateKey;

		[Token(Token = "0x1700024D")]
		public bool IsPrivate
		{
			[Token(Token = "0x60013DF")]
			[Address(RVA = "0x11AFABC", Offset = "0x11AFABC", VA = "0x11AFABC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60013DE")]
		[Address(RVA = "0x11AFA8C", Offset = "0x11AFA8C", VA = "0x11AFA8C")]
		protected AsymmetricKeyParameter(bool privateKey)
		{
		}

		[Token(Token = "0x60013E0")]
		[Address(RVA = "0x11AFAC4", Offset = "0x11AFAC4", VA = "0x11AFAC4", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60013E1")]
		[Address(RVA = "0x11AFB78", Offset = "0x11AFB78", VA = "0x11AFB78")]
		protected bool Equals(AsymmetricKeyParameter other)
		{
			return default(bool);
		}

		[Token(Token = "0x60013E2")]
		[Address(RVA = "0x11AFBA8", Offset = "0x11AFBA8", VA = "0x11AFBA8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000224")]
	public class BufferedAeadBlockCipher : BufferedCipherBase
	{
		[Token(Token = "0x40009F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IAeadBlockCipher cipher;

		[Token(Token = "0x1700024E")]
		public override string AlgorithmName
		{
			[Token(Token = "0x60013E4")]
			[Address(RVA = "0x11AFC98", Offset = "0x11AFC98", VA = "0x11AFC98", Slot = "22")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013E3")]
		[Address(RVA = "0x11AFBD4", Offset = "0x11AFBD4", VA = "0x11AFBD4")]
		public BufferedAeadBlockCipher(IAeadBlockCipher cipher)
		{
		}

		[Token(Token = "0x60013E5")]
		[Address(RVA = "0x11AFD48", Offset = "0x11AFD48", VA = "0x11AFD48", Slot = "23")]
		public override void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x60013E6")]
		[Address(RVA = "0x11AFE50", Offset = "0x11AFE50", VA = "0x11AFE50", Slot = "24")]
		public override int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x60013E7")]
		[Address(RVA = "0x11AFF04", Offset = "0x11AFF04", VA = "0x11AFF04", Slot = "26")]
		public override int GetUpdateOutputSize(int length)
		{
			return default(int);
		}

		[Token(Token = "0x60013E8")]
		[Address(RVA = "0x11AFFC8", Offset = "0x11AFFC8", VA = "0x11AFFC8", Slot = "25")]
		public override int GetOutputSize(int length)
		{
			return default(int);
		}

		[Token(Token = "0x60013E9")]
		[Address(RVA = "0x11B008C", Offset = "0x11B008C", VA = "0x11B008C", Slot = "28")]
		public override int ProcessByte(byte input, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x60013EA")]
		[Address(RVA = "0x11B0168", Offset = "0x11B0168", VA = "0x11B0168", Slot = "27")]
		public override byte[] ProcessByte(byte input)
		{
			return null;
		}

		[Token(Token = "0x60013EB")]
		[Address(RVA = "0x11B0268", Offset = "0x11B0268", VA = "0x11B0268", Slot = "30")]
		public override byte[] ProcessBytes(byte[] input, int inOff, int length)
		{
			return null;
		}

		[Token(Token = "0x60013EC")]
		[Address(RVA = "0x11B03D0", Offset = "0x11B03D0", VA = "0x11B03D0", Slot = "32")]
		public override int ProcessBytes(byte[] input, int inOff, int length, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x60013ED")]
		[Address(RVA = "0x11B04C4", Offset = "0x11B04C4", VA = "0x11B04C4", Slot = "33")]
		public override byte[] DoFinal()
		{
			return null;
		}

		[Token(Token = "0x60013EE")]
		[Address(RVA = "0x11B05A8", Offset = "0x11B05A8", VA = "0x11B05A8", Slot = "35")]
		public override byte[] DoFinal(byte[] input, int inOff, int inLen)
		{
			return null;
		}

		[Token(Token = "0x60013EF")]
		[Address(RVA = "0x11B071C", Offset = "0x11B071C", VA = "0x11B071C", Slot = "36")]
		public override int DoFinal(byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x60013F0")]
		[Address(RVA = "0x11B07E8", Offset = "0x11B07E8", VA = "0x11B07E8", Slot = "39")]
		public override void Reset()
		{
		}
	}
	[Token(Token = "0x2000225")]
	public class BufferedAsymmetricBlockCipher : BufferedCipherBase
	{
		[Token(Token = "0x40009F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IAsymmetricBlockCipher cipher;

		[Token(Token = "0x40009F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private byte[] buffer;

		[Token(Token = "0x40009F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int bufOff;

		[Token(Token = "0x1700024F")]
		public override string AlgorithmName
		{
			[Token(Token = "0x60013F3")]
			[Address(RVA = "0x11B0920", Offset = "0x11B0920", VA = "0x11B0920", Slot = "22")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013F1")]
		[Address(RVA = "0x11B089C", Offset = "0x11B089C", VA = "0x11B089C")]
		public BufferedAsymmetricBlockCipher(IAsymmetricBlockCipher cipher)
		{
		}

		[Token(Token = "0x60013F2")]
		[Address(RVA = "0x11B0918", Offset = "0x11B0918", VA = "0x11B0918")]
		internal int GetBufferPosition()
		{
			return default(int);
		}

		[Token(Token = "0x60013F4")]
		[Address(RVA = "0x11B09D0", Offset = "0x11B09D0", VA = "0x11B09D0", Slot = "24")]
		public override int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x60013F5")]
		[Address(RVA = "0x11B0A84", Offset = "0x11B0A84", VA = "0x11B0A84", Slot = "25")]
		public override int GetOutputSize(int length)
		{
			return default(int);
		}

		[Token(Token = "0x60013F6")]
		[Address(RVA = "0x11B0B38", Offset = "0x11B0B38", VA = "0x11B0B38", Slot = "26")]
		public override int GetUpdateOutputSize(int length)
		{
			return default(int);
		}

		[Token(Token = "0x60013F7")]
		[Address(RVA = "0x11B0B40", Offset = "0x11B0B40", VA = "0x11B0B40", Slot = "23")]
		public override void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x60013F8")]
		[Address(RVA = "0x11B0CC0", Offset = "0x11B0CC0", VA = "0x11B0CC0", Slot = "27")]
		public override byte[] ProcessByte(byte input)
		{
			return null;
		}

		[Token(Token = "0x60013F9")]
		[Address(RVA = "0x11B0D90", Offset = "0x11B0D90", VA = "0x11B0D90", Slot = "30")]
		public override byte[] ProcessBytes(byte[] input, int inOff, int length)
		{
			return null;
		}

		[Token(Token = "0x60013FA")]
		[Address(RVA = "0x11B0EA0", Offset = "0x11B0EA0", VA = "0x11B0EA0", Slot = "33")]
		public override byte[] DoFinal()
		{
			return null;
		}

		[Token(Token = "0x60013FB")]
		[Address(RVA = "0x11B0FC8", Offset = "0x11B0FC8", VA = "0x11B0FC8", Slot = "35")]
		public override byte[] DoFinal(byte[] input, int inOff, int length)
		{
			return null;
		}

		[Token(Token = "0x60013FC")]
		[Address(RVA = "0x11B1004", Offset = "0x11B1004", VA = "0x11B1004", Slot = "39")]
		public override void Reset()
		{
		}
	}
	[Token(Token = "0x2000226")]
	public class BufferedBlockCipher : BufferedCipherBase
	{
		[Token(Token = "0x40009F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal byte[] buf;

		[Token(Token = "0x40009F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int bufOff;

		[Token(Token = "0x40009FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal bool forEncryption;

		[Token(Token = "0x40009FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal IBlockCipher cipher;

		[Token(Token = "0x17000250")]
		public override string AlgorithmName
		{
			[Token(Token = "0x60013FF")]
			[Address(RVA = "0x11B11EC", Offset = "0x11B11EC", VA = "0x11B11EC", Slot = "22")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013FD")]
		[Address(RVA = "0x11B103C", Offset = "0x11B103C", VA = "0x11B103C")]
		protected BufferedBlockCipher()
		{
		}

		[Token(Token = "0x60013FE")]
		[Address(RVA = "0x11B10A4", Offset = "0x11B10A4", VA = "0x11B10A4")]
		public BufferedBlockCipher(IBlockCipher cipher)
		{
		}

		[Token(Token = "0x6001400")]
		[Address(RVA = "0x11B129C", Offset = "0x11B129C", VA = "0x11B129C", Slot = "23")]
		public override void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001401")]
		[Address(RVA = "0x11B13C0", Offset = "0x11B13C0", VA = "0x11B13C0", Slot = "24")]
		public override int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001402")]
		[Address(RVA = "0x11B1474", Offset = "0x11B1474", VA = "0x11B1474", Slot = "26")]
		public override int GetUpdateOutputSize(int length)
		{
			return default(int);
		}

		[Token(Token = "0x6001403")]
		[Address(RVA = "0x11B14A0", Offset = "0x11B14A0", VA = "0x11B14A0", Slot = "25")]
		public override int GetOutputSize(int length)
		{
			return default(int);
		}

		[Token(Token = "0x6001404")]
		[Address(RVA = "0x11B14AC", Offset = "0x11B14AC", VA = "0x11B14AC", Slot = "28")]
		public override int ProcessByte(byte input, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001405")]
		[Address(RVA = "0x11B1640", Offset = "0x11B1640", VA = "0x11B1640", Slot = "27")]
		public override byte[] ProcessByte(byte input)
		{
			return null;
		}

		[Token(Token = "0x6001406")]
		[Address(RVA = "0x11B1740", Offset = "0x11B1740", VA = "0x11B1740", Slot = "30")]
		public override byte[] ProcessBytes(byte[] input, int inOff, int length)
		{
			return null;
		}

		[Token(Token = "0x6001407")]
		[Address(RVA = "0x11B18A8", Offset = "0x11B18A8", VA = "0x11B18A8", Slot = "32")]
		public override int ProcessBytes(byte[] input, int inOff, int length, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001408")]
		[Address(RVA = "0x11B1CB8", Offset = "0x11B1CB8", VA = "0x11B1CB8", Slot = "33")]
		public override byte[] DoFinal()
		{
			return null;
		}

		[Token(Token = "0x6001409")]
		[Address(RVA = "0x11B1DE4", Offset = "0x11B1DE4", VA = "0x11B1DE4", Slot = "35")]
		public override byte[] DoFinal(byte[] input, int inOff, int inLen)
		{
			return null;
		}

		[Token(Token = "0x600140A")]
		[Address(RVA = "0x11B1FA8", Offset = "0x11B1FA8", VA = "0x11B1FA8", Slot = "36")]
		public override int DoFinal(byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x600140B")]
		[Address(RVA = "0x11B223C", Offset = "0x11B223C", VA = "0x11B223C", Slot = "39")]
		public override void Reset()
		{
		}
	}
	[Token(Token = "0x2000227")]
	public abstract class BufferedCipherBase : IBufferedCipher
	{
		[Token(Token = "0x40009FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static readonly byte[] EmptyBuffer;

		[Token(Token = "0x17000251")]
		public abstract string AlgorithmName
		{
			[Token(Token = "0x600140C")]
			get;
		}

		[Token(Token = "0x600140D")]
		public abstract void Init(bool forEncryption, ICipherParameters parameters);

		[Token(Token = "0x600140E")]
		public abstract int GetBlockSize();

		[Token(Token = "0x600140F")]
		public abstract int GetOutputSize(int inputLen);

		[Token(Token = "0x6001410")]
		public abstract int GetUpdateOutputSize(int inputLen);

		[Token(Token = "0x6001411")]
		public abstract byte[] ProcessByte(byte input);

		[Token(Token = "0x6001412")]
		[Address(RVA = "0x11B230C", Offset = "0x11B230C", VA = "0x11B230C", Slot = "28")]
		public virtual int ProcessByte(byte input, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001413")]
		[Address(RVA = "0x11B23F4", Offset = "0x11B23F4", VA = "0x11B23F4", Slot = "29")]
		public virtual byte[] ProcessBytes(byte[] input)
		{
			return null;
		}

		[Token(Token = "0x6001414")]
		public abstract byte[] ProcessBytes(byte[] input, int inOff, int length);

		[Token(Token = "0x6001415")]
		[Address(RVA = "0x11B241C", Offset = "0x11B241C", VA = "0x11B241C", Slot = "31")]
		public virtual int ProcessBytes(byte[] input, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001416")]
		[Address(RVA = "0x11B244C", Offset = "0x11B244C", VA = "0x11B244C", Slot = "32")]
		public virtual int ProcessBytes(byte[] input, int inOff, int length, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001417")]
		public abstract byte[] DoFinal();

		[Token(Token = "0x6001418")]
		[Address(RVA = "0x11B254C", Offset = "0x11B254C", VA = "0x11B254C", Slot = "34")]
		public virtual byte[] DoFinal(byte[] input)
		{
			return null;
		}

		[Token(Token = "0x6001419")]
		public abstract byte[] DoFinal(byte[] input, int inOff, int length);

		[Token(Token = "0x600141A")]
		[Address(RVA = "0x11B2574", Offset = "0x11B2574", VA = "0x11B2574", Slot = "36")]
		public virtual int DoFinal(byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x600141B")]
		[Address(RVA = "0x11B264C", Offset = "0x11B264C", VA = "0x11B264C", Slot = "37")]
		public virtual int DoFinal(byte[] input, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x600141C")]
		[Address(RVA = "0x11B267C", Offset = "0x11B267C", VA = "0x11B267C", Slot = "38")]
		public virtual int DoFinal(byte[] input, int inOff, int length, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x600141D")]
		public abstract void Reset();

		[Token(Token = "0x600141E")]
		[Address(RVA = "0x11AFC90", Offset = "0x11AFC90", VA = "0x11AFC90")]
		protected BufferedCipherBase()
		{
		}
	}
	[Token(Token = "0x2000228")]
	public class BufferedIesCipher : BufferedCipherBase
	{
		[Token(Token = "0x40009FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IesEngine engine;

		[Token(Token = "0x40009FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool forEncryption;

		[Token(Token = "0x40009FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private MemoryStream buffer;

		[Token(Token = "0x17000252")]
		public override string AlgorithmName
		{
			[Token(Token = "0x6001421")]
			[Address(RVA = "0x11B281C", Offset = "0x11B281C", VA = "0x11B281C", Slot = "22")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001420")]
		[Address(RVA = "0x11B2740", Offset = "0x11B2740", VA = "0x11B2740")]
		public BufferedIesCipher(IesEngine engine)
		{
		}

		[Token(Token = "0x6001422")]
		[Address(RVA = "0x11B2864", Offset = "0x11B2864", VA = "0x11B2864", Slot = "23")]
		public override void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001423")]
		[Address(RVA = "0x11B28EC", Offset = "0x11B28EC", VA = "0x11B28EC", Slot = "24")]
		public override int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001424")]
		[Address(RVA = "0x11B28F4", Offset = "0x11B28F4", VA = "0x11B28F4", Slot = "25")]
		public override int GetOutputSize(int inputLen)
		{
			return default(int);
		}

		[Token(Token = "0x6001425")]
		[Address(RVA = "0x11B29B4", Offset = "0x11B29B4", VA = "0x11B29B4", Slot = "26")]
		public override int GetUpdateOutputSize(int inputLen)
		{
			return default(int);
		}

		[Token(Token = "0x6001426")]
		[Address(RVA = "0x11B29BC", Offset = "0x11B29BC", VA = "0x11B29BC", Slot = "27")]
		public override byte[] ProcessByte(byte input)
		{
			return null;
		}

		[Token(Token = "0x6001427")]
		[Address(RVA = "0x11B29EC", Offset = "0x11B29EC", VA = "0x11B29EC", Slot = "30")]
		public override byte[] ProcessBytes(byte[] input, int inOff, int length)
		{
			return null;
		}

		[Token(Token = "0x6001428")]
		[Address(RVA = "0x11B2B30", Offset = "0x11B2B30", VA = "0x11B2B30", Slot = "33")]
		public override byte[] DoFinal()
		{
			return null;
		}

		[Token(Token = "0x6001429")]
		[Address(RVA = "0x11B2BA0", Offset = "0x11B2BA0", VA = "0x11B2BA0", Slot = "35")]
		public override byte[] DoFinal(byte[] input, int inOff, int length)
		{
			return null;
		}

		[Token(Token = "0x600142A")]
		[Address(RVA = "0x11B2BDC", Offset = "0x11B2BDC", VA = "0x11B2BDC", Slot = "39")]
		public override void Reset()
		{
		}
	}
	[Token(Token = "0x2000229")]
	public class BufferedStreamCipher : BufferedCipherBase
	{
		[Token(Token = "0x4000A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IStreamCipher cipher;

		[Token(Token = "0x17000253")]
		public override string AlgorithmName
		{
			[Token(Token = "0x600142C")]
			[Address(RVA = "0x11B2CC0", Offset = "0x11B2CC0", VA = "0x11B2CC0", Slot = "22")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600142B")]
		[Address(RVA = "0x11B2C04", Offset = "0x11B2C04", VA = "0x11B2C04")]
		public BufferedStreamCipher(IStreamCipher cipher)
		{
		}

		[Token(Token = "0x600142D")]
		[Address(RVA = "0x11B2D70", Offset = "0x11B2D70", VA = "0x11B2D70", Slot = "23")]
		public override void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x600142E")]
		[Address(RVA = "0x11B2E78", Offset = "0x11B2E78", VA = "0x11B2E78", Slot = "24")]
		public override int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x600142F")]
		[Address(RVA = "0x11B2E80", Offset = "0x11B2E80", VA = "0x11B2E80", Slot = "25")]
		public override int GetOutputSize(int inputLen)
		{
			return default(int);
		}

		[Token(Token = "0x6001430")]
		[Address(RVA = "0x11B2E88", Offset = "0x11B2E88", VA = "0x11B2E88", Slot = "26")]
		public override int GetUpdateOutputSize(int inputLen)
		{
			return default(int);
		}

		[Token(Token = "0x6001431")]
		[Address(RVA = "0x11B2E90", Offset = "0x11B2E90", VA = "0x11B2E90", Slot = "27")]
		public override byte[] ProcessByte(byte input)
		{
			return null;
		}

		[Token(Token = "0x6001432")]
		[Address(RVA = "0x11B2F90", Offset = "0x11B2F90", VA = "0x11B2F90", Slot = "28")]
		public override int ProcessByte(byte input, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001433")]
		[Address(RVA = "0x11B30D8", Offset = "0x11B30D8", VA = "0x11B30D8", Slot = "30")]
		public override byte[] ProcessBytes(byte[] input, int inOff, int length)
		{
			return null;
		}

		[Token(Token = "0x6001434")]
		[Address(RVA = "0x11B31EC", Offset = "0x11B31EC", VA = "0x11B31EC", Slot = "32")]
		public override int ProcessBytes(byte[] input, int inOff, int length, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001435")]
		[Address(RVA = "0x11B32F8", Offset = "0x11B32F8", VA = "0x11B32F8", Slot = "33")]
		public override byte[] DoFinal()
		{
			return null;
		}

		[Token(Token = "0x6001436")]
		[Address(RVA = "0x11B3378", Offset = "0x11B3378", VA = "0x11B3378", Slot = "35")]
		public override byte[] DoFinal(byte[] input, int inOff, int length)
		{
			return null;
		}

		[Token(Token = "0x6001437")]
		[Address(RVA = "0x11B3448", Offset = "0x11B3448", VA = "0x11B3448", Slot = "39")]
		public override void Reset()
		{
		}
	}
	[Token(Token = "0x200022A")]
	internal class Check
	{
		[Token(Token = "0x6001438")]
		[Address(RVA = "0x11B21BC", Offset = "0x11B21BC", VA = "0x11B21BC")]
		internal static void DataLength(bool condition, string msg)
		{
		}

		[Token(Token = "0x6001439")]
		[Address(RVA = "0x11B34FC", Offset = "0x11B34FC", VA = "0x11B34FC")]
		internal static void DataLength(byte[] buf, int off, int len, string msg)
		{
		}

		[Token(Token = "0x600143A")]
		[Address(RVA = "0x11B1C10", Offset = "0x11B1C10", VA = "0x11B1C10")]
		internal static void OutputLength(byte[] buf, int off, int len, string msg)
		{
		}

		[Token(Token = "0x600143B")]
		[Address(RVA = "0x11B35A0", Offset = "0x11B35A0", VA = "0x11B35A0")]
		public Check()
		{
		}
	}
	[Token(Token = "0x200022B")]
	public class CipherKeyGenerator
	{
		[Token(Token = "0x4000A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected internal SecureRandom random;

		[Token(Token = "0x4000A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected internal int strength;

		[Token(Token = "0x4000A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool uninitialised;

		[Token(Token = "0x4000A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int defaultStrength;

		[Token(Token = "0x17000254")]
		public int DefaultStrength
		{
			[Token(Token = "0x600143E")]
			[Address(RVA = "0x11B366C", Offset = "0x11B366C", VA = "0x11B366C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600143C")]
		[Address(RVA = "0x11B35A8", Offset = "0x11B35A8", VA = "0x11B35A8")]
		public CipherKeyGenerator()
		{
		}

		[Token(Token = "0x600143D")]
		[Address(RVA = "0x11B35B8", Offset = "0x11B35B8", VA = "0x11B35B8")]
		internal CipherKeyGenerator(int defaultStrength)
		{
		}

		[Token(Token = "0x600143F")]
		[Address(RVA = "0x11B3674", Offset = "0x11B3674", VA = "0x11B3674")]
		public void Init(KeyGenerationParameters parameters)
		{
		}

		[Token(Token = "0x6001440")]
		[Address(RVA = "0x11B3714", Offset = "0x11B3714", VA = "0x11B3714", Slot = "4")]
		protected virtual void engineInit(KeyGenerationParameters parameters)
		{
		}

		[Token(Token = "0x6001441")]
		[Address(RVA = "0x11B374C", Offset = "0x11B374C", VA = "0x11B374C")]
		public byte[] GenerateKey()
		{
			return null;
		}

		[Token(Token = "0x6001442")]
		[Address(RVA = "0x11B384C", Offset = "0x11B384C", VA = "0x11B384C", Slot = "5")]
		protected virtual byte[] engineGenerateKey()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x200022C")]
	public class CryptoException : Exception
	{
		[Token(Token = "0x6001443")]
		[Address(RVA = "0x11B3874", Offset = "0x11B3874", VA = "0x11B3874")]
		public CryptoException()
		{
		}

		[Token(Token = "0x6001444")]
		[Address(RVA = "0x11B38DC", Offset = "0x11B38DC", VA = "0x11B38DC")]
		public CryptoException(string message)
		{
		}

		[Token(Token = "0x6001445")]
		[Address(RVA = "0x11B3954", Offset = "0x11B3954", VA = "0x11B3954")]
		public CryptoException(string message, Exception exception)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200022D")]
	public class DataLengthException : CryptoException
	{
		[Token(Token = "0x6001446")]
		[Address(RVA = "0x11B39D4", Offset = "0x11B39D4", VA = "0x11B39D4")]
		public DataLengthException()
		{
		}

		[Token(Token = "0x6001447")]
		[Address(RVA = "0x11B0D8C", Offset = "0x11B0D8C", VA = "0x11B0D8C")]
		public DataLengthException(string message)
		{
		}

		[Token(Token = "0x6001448")]
		[Address(RVA = "0x11B39D8", Offset = "0x11B39D8", VA = "0x11B39D8")]
		public DataLengthException(string message, Exception exception)
		{
		}
	}
	[Token(Token = "0x200022E")]
	public interface IAsymmetricBlockCipher
	{
		[Token(Token = "0x17000255")]
		string AlgorithmName
		{
			[Token(Token = "0x6001449")]
			get;
		}

		[Token(Token = "0x600144A")]
		void Init(bool forEncryption, ICipherParameters parameters);

		[Token(Token = "0x600144B")]
		int GetInputBlockSize();

		[Token(Token = "0x600144C")]
		int GetOutputBlockSize();

		[Token(Token = "0x600144D")]
		byte[] ProcessBlock(byte[] inBuf, int inOff, int inLen);
	}
	[Token(Token = "0x200022F")]
	public interface IAsymmetricCipherKeyPairGenerator
	{
		[Token(Token = "0x600144E")]
		void Init(KeyGenerationParameters parameters);

		[Token(Token = "0x600144F")]
		AsymmetricCipherKeyPair GenerateKeyPair();
	}
	[Token(Token = "0x2000230")]
	public interface IBasicAgreement
	{
		[Token(Token = "0x6001450")]
		void Init(ICipherParameters parameters);

		[Token(Token = "0x6001451")]
		int GetFieldSize();

		[Token(Token = "0x6001452")]
		BigInteger CalculateAgreement(ICipherParameters pubKey);
	}
	[Token(Token = "0x2000231")]
	public interface IBlockCipher
	{
		[Token(Token = "0x17000256")]
		string AlgorithmName
		{
			[Token(Token = "0x6001453")]
			get;
		}

		[Token(Token = "0x17000257")]
		bool IsPartialBlockOkay
		{
			[Token(Token = "0x6001456")]
			get;
		}

		[Token(Token = "0x6001454")]
		void Init(bool forEncryption, ICipherParameters parameters);

		[Token(Token = "0x6001455")]
		int GetBlockSize();

		[Token(Token = "0x6001457")]
		int ProcessBlock(byte[] inBuf, int inOff, byte[] outBuf, int outOff);

		[Token(Token = "0x6001458")]
		void Reset();
	}
	[Token(Token = "0x2000232")]
	public interface IBufferedCipher
	{
		[Token(Token = "0x17000258")]
		string AlgorithmName
		{
			[Token(Token = "0x6001459")]
			get;
		}

		[Token(Token = "0x600145A")]
		void Init(bool forEncryption, ICipherParameters parameters);

		[Token(Token = "0x600145B")]
		int GetBlockSize();

		[Token(Token = "0x600145C")]
		int GetOutputSize(int inputLen);

		[Token(Token = "0x600145D")]
		int GetUpdateOutputSize(int inputLen);

		[Token(Token = "0x600145E")]
		byte[] ProcessByte(byte input);

		[Token(Token = "0x600145F")]
		int ProcessByte(byte input, byte[] output, int outOff);

		[Token(Token = "0x6001460")]
		byte[] ProcessBytes(byte[] input);

		[Token(Token = "0x6001461")]
		byte[] ProcessBytes(byte[] input, int inOff, int length);

		[Token(Token = "0x6001462")]
		int ProcessBytes(byte[] input, byte[] output, int outOff);

		[Token(Token = "0x6001463")]
		int ProcessBytes(byte[] input, int inOff, int length, byte[] output, int outOff);

		[Token(Token = "0x6001464")]
		byte[] DoFinal();

		[Token(Token = "0x6001465")]
		byte[] DoFinal(byte[] input);

		[Token(Token = "0x6001466")]
		byte[] DoFinal(byte[] input, int inOff, int length);

		[Token(Token = "0x6001467")]
		int DoFinal(byte[] output, int outOff);

		[Token(Token = "0x6001468")]
		int DoFinal(byte[] input, byte[] output, int outOff);

		[Token(Token = "0x6001469")]
		int DoFinal(byte[] input, int inOff, int length, byte[] output, int outOff);

		[Token(Token = "0x600146A")]
		void Reset();
	}
	[Token(Token = "0x2000233")]
	public interface ICipherParameters
	{
	}
	[Token(Token = "0x2000234")]
	public interface IDsa
	{
		[Token(Token = "0x17000259")]
		string AlgorithmName
		{
			[Token(Token = "0x600146B")]
			get;
		}

		[Token(Token = "0x600146C")]
		void Init(bool forSigning, ICipherParameters parameters);

		[Token(Token = "0x600146D")]
		BigInteger[] GenerateSignature(byte[] message);

		[Token(Token = "0x600146E")]
		bool VerifySignature(byte[] message, BigInteger r, BigInteger s);
	}
	[Token(Token = "0x2000235")]
	public interface IDerivationFunction
	{
		[Token(Token = "0x1700025A")]
		IDigest Digest
		{
			[Token(Token = "0x6001470")]
			get;
		}

		[Token(Token = "0x600146F")]
		void Init(IDerivationParameters parameters);

		[Token(Token = "0x6001471")]
		int GenerateBytes(byte[] output, int outOff, int length);
	}
	[Token(Token = "0x2000236")]
	public interface IDerivationParameters
	{
	}
	[Token(Token = "0x2000237")]
	public interface IDigest
	{
		[Token(Token = "0x1700025B")]
		string AlgorithmName
		{
			[Token(Token = "0x6001472")]
			get;
		}

		[Token(Token = "0x6001473")]
		int GetDigestSize();

		[Token(Token = "0x6001474")]
		int GetByteLength();

		[Token(Token = "0x6001475")]
		void Update(byte input);

		[Token(Token = "0x6001476")]
		void BlockUpdate(byte[] input, int inOff, int length);

		[Token(Token = "0x6001477")]
		int DoFinal(byte[] output, int outOff);

		[Token(Token = "0x6001478")]
		void Reset();
	}
	[Token(Token = "0x2000238")]
	public interface IMac
	{
		[Token(Token = "0x1700025C")]
		string AlgorithmName
		{
			[Token(Token = "0x600147A")]
			get;
		}

		[Token(Token = "0x6001479")]
		void Init(ICipherParameters parameters);

		[Token(Token = "0x600147B")]
		int GetMacSize();

		[Token(Token = "0x600147C")]
		void Update(byte input);

		[Token(Token = "0x600147D")]
		void BlockUpdate(byte[] input, int inOff, int len);

		[Token(Token = "0x600147E")]
		int DoFinal(byte[] output, int outOff);

		[Token(Token = "0x600147F")]
		void Reset();
	}
	[Token(Token = "0x2000239")]
	public interface ISigner
	{
		[Token(Token = "0x1700025D")]
		string AlgorithmName
		{
			[Token(Token = "0x6001480")]
			get;
		}

		[Token(Token = "0x6001481")]
		void Init(bool forSigning, ICipherParameters parameters);

		[Token(Token = "0x6001482")]
		void Update(byte input);

		[Token(Token = "0x6001483")]
		void BlockUpdate(byte[] input, int inOff, int length);

		[Token(Token = "0x6001484")]
		byte[] GenerateSignature();

		[Token(Token = "0x6001485")]
		bool VerifySignature(byte[] signature);

		[Token(Token = "0x6001486")]
		void Reset();
	}
	[Token(Token = "0x200023A")]
	public interface ISignerWithRecovery : ISigner
	{
		[Token(Token = "0x6001487")]
		bool HasFullMessage();

		[Token(Token = "0x6001488")]
		byte[] GetRecoveredMessage();

		[Token(Token = "0x6001489")]
		void UpdateWithRecoveredMessage(byte[] signature);
	}
	[Token(Token = "0x200023B")]
	public interface IStreamCipher
	{
		[Token(Token = "0x1700025E")]
		string AlgorithmName
		{
			[Token(Token = "0x600148A")]
			get;
		}

		[Token(Token = "0x600148B")]
		void Init(bool forEncryption, ICipherParameters parameters);

		[Token(Token = "0x600148C")]
		byte ReturnByte(byte input);

		[Token(Token = "0x600148D")]
		void ProcessBytes(byte[] input, int inOff, int length, byte[] output, int outOff);

		[Token(Token = "0x600148E")]
		void Reset();
	}
	[Token(Token = "0x200023C")]
	public interface IWrapper
	{
		[Token(Token = "0x1700025F")]
		string AlgorithmName
		{
			[Token(Token = "0x600148F")]
			get;
		}

		[Token(Token = "0x6001490")]
		void Init(bool forWrapping, ICipherParameters parameters);

		[Token(Token = "0x6001491")]
		byte[] Wrap(byte[] input, int inOff, int length);

		[Token(Token = "0x6001492")]
		byte[] Unwrap(byte[] input, int inOff, int length);
	}
	[Serializable]
	[Token(Token = "0x200023D")]
	public class InvalidCipherTextException : CryptoException
	{
		[Token(Token = "0x6001493")]
		[Address(RVA = "0x10A760C", Offset = "0x10A760C", VA = "0x10A760C")]
		public InvalidCipherTextException()
		{
		}

		[Token(Token = "0x6001494")]
		[Address(RVA = "0x10A7614", Offset = "0x10A7614", VA = "0x10A7614")]
		public InvalidCipherTextException(string message)
		{
		}

		[Token(Token = "0x6001495")]
		[Address(RVA = "0x10A761C", Offset = "0x10A761C", VA = "0x10A761C")]
		public InvalidCipherTextException(string message, Exception exception)
		{
		}
	}
	[Token(Token = "0x200023E")]
	public class KeyGenerationParameters
	{
		[Token(Token = "0x4000A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private SecureRandom random;

		[Token(Token = "0x4000A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int strength;

		[Token(Token = "0x17000260")]
		public SecureRandom Random
		{
			[Token(Token = "0x6001497")]
			[Address(RVA = "0x10A7708", Offset = "0x10A7708", VA = "0x10A7708")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000261")]
		public int Strength
		{
			[Token(Token = "0x6001498")]
			[Address(RVA = "0x10A7710", Offset = "0x10A7710", VA = "0x10A7710")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001496")]
		[Address(RVA = "0x10A7624", Offset = "0x10A7624", VA = "0x10A7624")]
		public KeyGenerationParameters(SecureRandom random, int strength)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200023F")]
	public class MaxBytesExceededException : CryptoException
	{
		[Token(Token = "0x6001499")]
		[Address(RVA = "0x10AF17C", Offset = "0x10AF17C", VA = "0x10AF17C")]
		public MaxBytesExceededException()
		{
		}

		[Token(Token = "0x600149A")]
		[Address(RVA = "0x10AF184", Offset = "0x10AF184", VA = "0x10AF184")]
		public MaxBytesExceededException(string message)
		{
		}

		[Token(Token = "0x600149B")]
		[Address(RVA = "0x10AF18C", Offset = "0x10AF18C", VA = "0x10AF18C")]
		public MaxBytesExceededException(string message, Exception e)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000240")]
	public class OutputLengthException : DataLengthException
	{
		[Token(Token = "0x600149C")]
		[Address(RVA = "0xF72594", Offset = "0xF72594", VA = "0xF72594")]
		public OutputLengthException()
		{
		}

		[Token(Token = "0x600149D")]
		[Address(RVA = "0xF7259C", Offset = "0xF7259C", VA = "0xF7259C")]
		public OutputLengthException(string message)
		{
		}

		[Token(Token = "0x600149E")]
		[Address(RVA = "0xF725A4", Offset = "0xF725A4", VA = "0xF725A4")]
		public OutputLengthException(string message, Exception exception)
		{
		}
	}
	[Token(Token = "0x2000241")]
	public abstract class PbeParametersGenerator
	{
		[Token(Token = "0x4000A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected byte[] mPassword;

		[Token(Token = "0x4000A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected byte[] mSalt;

		[Token(Token = "0x4000A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected int mIterationCount;

		[Token(Token = "0x17000262")]
		public virtual byte[] Password
		{
			[Token(Token = "0x60014A1")]
			[Address(RVA = "0xF79E8C", Offset = "0xF79E8C", VA = "0xF79E8C", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000263")]
		public virtual byte[] Salt
		{
			[Token(Token = "0x60014A3")]
			[Address(RVA = "0xF79EA4", Offset = "0xF79EA4", VA = "0xF79EA4", Slot = "6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000264")]
		public virtual int IterationCount
		{
			[Token(Token = "0x60014A5")]
			[Address(RVA = "0xF79EBC", Offset = "0xF79EBC", VA = "0xF79EBC", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600149F")]
		[Address(RVA = "0xF79DA4", Offset = "0xF79DA4", VA = "0xF79DA4")]
		protected PbeParametersGenerator()
		{
		}

		[Token(Token = "0x60014A0")]
		[Address(RVA = "0xF79DAC", Offset = "0xF79DAC", VA = "0xF79DAC", Slot = "4")]
		public virtual void Init(byte[] password, byte[] salt, int iterationCount)
		{
		}

		[Token(Token = "0x60014A2")]
		[Address(RVA = "0xF79E98", Offset = "0xF79E98", VA = "0xF79E98")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x830630", Offset = "0x830630")]
		public byte[] GetPassword()
		{
			return null;
		}

		[Token(Token = "0x60014A4")]
		[Address(RVA = "0xF79EB0", Offset = "0xF79EB0", VA = "0xF79EB0")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x830668", Offset = "0x830668")]
		public byte[] GetSalt()
		{
			return null;
		}

		[Token(Token = "0x60014A6")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x8306A0", Offset = "0x8306A0")]
		public abstract ICipherParameters GenerateDerivedParameters(int keySize);

		[Token(Token = "0x60014A7")]
		public abstract ICipherParameters GenerateDerivedParameters(string algorithm, int keySize);

		[Token(Token = "0x60014A8")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x8306D8", Offset = "0x8306D8")]
		public abstract ICipherParameters GenerateDerivedParameters(int keySize, int ivSize);

		[Token(Token = "0x60014A9")]
		public abstract ICipherParameters GenerateDerivedParameters(string algorithm, int keySize, int ivSize);

		[Token(Token = "0x60014AA")]
		public abstract ICipherParameters GenerateDerivedMacParameters(int keySize);

		[Token(Token = "0x60014AB")]
		[Address(RVA = "0xF79EC4", Offset = "0xF79EC4", VA = "0xF79EC4")]
		public static byte[] Pkcs5PasswordToBytes(char[] password)
		{
			return null;
		}

		[Token(Token = "0x60014AC")]
		[Address(RVA = "0xF79F2C", Offset = "0xF79F2C", VA = "0xF79F2C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x830710", Offset = "0x830710")]
		public static byte[] Pkcs5PasswordToBytes(string password)
		{
			return null;
		}

		[Token(Token = "0x60014AD")]
		[Address(RVA = "0xF79F94", Offset = "0xF79F94", VA = "0xF79F94")]
		public static byte[] Pkcs5PasswordToUtf8Bytes(char[] password)
		{
			return null;
		}

		[Token(Token = "0x60014AE")]
		[Address(RVA = "0xF7A014", Offset = "0xF7A014", VA = "0xF7A014")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x830748", Offset = "0x830748")]
		public static byte[] Pkcs5PasswordToUtf8Bytes(string password)
		{
			return null;
		}

		[Token(Token = "0x60014AF")]
		[Address(RVA = "0xF7A094", Offset = "0xF7A094", VA = "0xF7A094")]
		public static byte[] Pkcs12PasswordToBytes(char[] password)
		{
			return null;
		}

		[Token(Token = "0x60014B0")]
		[Address(RVA = "0xF7A09C", Offset = "0xF7A09C", VA = "0xF7A09C")]
		public static byte[] Pkcs12PasswordToBytes(char[] password, bool wrongPkcs12Zero)
		{
			return null;
		}
	}
}
namespace Org.BouncyCastle.Crypto.Utilities
{
	[Token(Token = "0x2000242")]
	internal sealed class Pack
	{
		[Token(Token = "0x60014B1")]
		[Address(RVA = "0xB1808C", Offset = "0xB1808C", VA = "0xB1808C")]
		private Pack()
		{
		}

		[Token(Token = "0x60014B2")]
		[Address(RVA = "0xB18094", Offset = "0xB18094", VA = "0xB18094")]
		internal static void UInt16_To_BE(ushort n, byte[] bs)
		{
		}

		[Token(Token = "0x60014B3")]
		[Address(RVA = "0xB180D4", Offset = "0xB180D4", VA = "0xB180D4")]
		internal static void UInt16_To_BE(ushort n, byte[] bs, int off)
		{
		}

		[Token(Token = "0x60014B4")]
		[Address(RVA = "0xB18128", Offset = "0xB18128", VA = "0xB18128")]
		internal static ushort BE_To_UInt16(byte[] bs)
		{
			return default(ushort);
		}

		[Token(Token = "0x60014B5")]
		[Address(RVA = "0xB18168", Offset = "0xB18168", VA = "0xB18168")]
		internal static ushort BE_To_UInt16(byte[] bs, int off)
		{
			return default(ushort);
		}

		[Token(Token = "0x60014B6")]
		[Address(RVA = "0xB181B4", Offset = "0xB181B4", VA = "0xB181B4")]
		internal static byte[] UInt32_To_BE(uint n)
		{
			return null;
		}

		[Token(Token = "0x60014B7")]
		[Address(RVA = "0xB182AC", Offset = "0xB182AC", VA = "0xB182AC")]
		internal static void UInt32_To_BE(uint n, byte[] bs)
		{
		}

		[Token(Token = "0x60014B8")]
		[Address(RVA = "0xB18220", Offset = "0xB18220", VA = "0xB18220")]
		internal static void UInt32_To_BE(uint n, byte[] bs, int off)
		{
		}

		[Token(Token = "0x60014B9")]
		[Address(RVA = "0xB1830C", Offset = "0xB1830C", VA = "0xB1830C")]
		internal static byte[] UInt32_To_BE(uint[] ns)
		{
			return null;
		}

		[Token(Token = "0x60014BA")]
		[Address(RVA = "0xB18384", Offset = "0xB18384", VA = "0xB18384")]
		internal static void UInt32_To_BE(uint[] ns, byte[] bs, int off)
		{
		}

		[Token(Token = "0x60014BB")]
		[Address(RVA = "0xB18410", Offset = "0xB18410", VA = "0xB18410")]
		internal static uint BE_To_UInt32(byte[] bs)
		{
			return default(uint);
		}

		[Token(Token = "0x60014BC")]
		[Address(RVA = "0xB18474", Offset = "0xB18474", VA = "0xB18474")]
		internal static uint BE_To_UInt32(byte[] bs, int off)
		{
			return default(uint);
		}

		[Token(Token = "0x60014BD")]
		[Address(RVA = "0xB184F4", Offset = "0xB184F4", VA = "0xB184F4")]
		internal static void BE_To_UInt32(byte[] bs, int off, uint[] ns)
		{
		}

		[Token(Token = "0x60014BE")]
		[Address(RVA = "0xB1857C", Offset = "0xB1857C", VA = "0xB1857C")]
		internal static byte[] UInt64_To_BE(ulong n)
		{
			return null;
		}

		[Token(Token = "0x60014BF")]
		[Address(RVA = "0xB18638", Offset = "0xB18638", VA = "0xB18638")]
		internal static void UInt64_To_BE(ulong n, byte[] bs)
		{
		}

		[Token(Token = "0x60014C0")]
		[Address(RVA = "0xB185F8", Offset = "0xB185F8", VA = "0xB185F8")]
		internal static void UInt64_To_BE(ulong n, byte[] bs, int off)
		{
		}

		[Token(Token = "0x60014C1")]
		[Address(RVA = "0xB1866C", Offset = "0xB1866C", VA = "0xB1866C")]
		internal static ulong BE_To_UInt64(byte[] bs)
		{
			return default(ulong);
		}

		[Token(Token = "0x60014C2")]
		[Address(RVA = "0xB186A4", Offset = "0xB186A4", VA = "0xB186A4")]
		internal static ulong BE_To_UInt64(byte[] bs, int off)
		{
			return default(ulong);
		}

		[Token(Token = "0x60014C3")]
		[Address(RVA = "0xB186E8", Offset = "0xB186E8", VA = "0xB186E8")]
		internal static void UInt16_To_LE(ushort n, byte[] bs)
		{
		}

		[Token(Token = "0x60014C4")]
		[Address(RVA = "0xB18728", Offset = "0xB18728", VA = "0xB18728")]
		internal static void UInt16_To_LE(ushort n, byte[] bs, int off)
		{
		}

		[Token(Token = "0x60014C5")]
		[Address(RVA = "0xB1877C", Offset = "0xB1877C", VA = "0xB1877C")]
		internal static ushort LE_To_UInt16(byte[] bs)
		{
			return default(ushort);
		}

		[Token(Token = "0x60014C6")]
		[Address(RVA = "0xB187B4", Offset = "0xB187B4", VA = "0xB187B4")]
		internal static ushort LE_To_UInt16(byte[] bs, int off)
		{
			return default(ushort);
		}

		[Token(Token = "0x60014C7")]
		[Address(RVA = "0xB18800", Offset = "0xB18800", VA = "0xB18800")]
		internal static byte[] UInt32_To_LE(uint n)
		{
			return null;
		}

		[Token(Token = "0x60014C8")]
		[Address(RVA = "0xB188F8", Offset = "0xB188F8", VA = "0xB188F8")]
		internal static void UInt32_To_LE(uint n, byte[] bs)
		{
		}

		[Token(Token = "0x60014C9")]
		[Address(RVA = "0xB1886C", Offset = "0xB1886C", VA = "0xB1886C")]
		internal static void UInt32_To_LE(uint n, byte[] bs, int off)
		{
		}

		[Token(Token = "0x60014CA")]
		[Address(RVA = "0xB18958", Offset = "0xB18958", VA = "0xB18958")]
		internal static byte[] UInt32_To_LE(uint[] ns)
		{
			return null;
		}

		[Token(Token = "0x60014CB")]
		[Address(RVA = "0xB189D0", Offset = "0xB189D0", VA = "0xB189D0")]
		internal static void UInt32_To_LE(uint[] ns, byte[] bs, int off)
		{
		}

		[Token(Token = "0x60014CC")]
		[Address(RVA = "0xB18A5C", Offset = "0xB18A5C", VA = "0xB18A5C")]
		internal static uint LE_To_UInt32(byte[] bs)
		{
			return default(uint);
		}

		[Token(Token = "0x60014CD")]
		[Address(RVA = "0xB18AC0", Offset = "0xB18AC0", VA = "0xB18AC0")]
		internal static uint LE_To_UInt32(byte[] bs, int off)
		{
			return default(uint);
		}

		[Token(Token = "0x60014CE")]
		[Address(RVA = "0xB18B40", Offset = "0xB18B40", VA = "0xB18B40")]
		internal static void LE_To_UInt32(byte[] bs, int off, uint[] ns)
		{
		}

		[Token(Token = "0x60014CF")]
		[Address(RVA = "0xB18BC8", Offset = "0xB18BC8", VA = "0xB18BC8")]
		internal static void LE_To_UInt32(byte[] bs, int bOff, uint[] ns, int nOff, int count)
		{
		}

		[Token(Token = "0x60014D0")]
		[Address(RVA = "0xB18C6C", Offset = "0xB18C6C", VA = "0xB18C6C")]
		internal static byte[] UInt64_To_LE(ulong n)
		{
			return null;
		}

		[Token(Token = "0x60014D1")]
		[Address(RVA = "0xB18D24", Offset = "0xB18D24", VA = "0xB18D24")]
		internal static void UInt64_To_LE(ulong n, byte[] bs)
		{
		}

		[Token(Token = "0x60014D2")]
		[Address(RVA = "0xB18CE8", Offset = "0xB18CE8", VA = "0xB18CE8")]
		internal static void UInt64_To_LE(ulong n, byte[] bs, int off)
		{
		}

		[Token(Token = "0x60014D3")]
		[Address(RVA = "0xB18D54", Offset = "0xB18D54", VA = "0xB18D54")]
		internal static ulong LE_To_UInt64(byte[] bs)
		{
			return default(ulong);
		}

		[Token(Token = "0x60014D4")]
		[Address(RVA = "0xB18D90", Offset = "0xB18D90", VA = "0xB18D90")]
		internal static ulong LE_To_UInt64(byte[] bs, int off)
		{
			return default(ulong);
		}
	}
}
namespace Org.BouncyCastle.Crypto.Tls
{
	[Token(Token = "0x2000243")]
	public abstract class AbstractTlsAgreementCredentials : AbstractTlsCredentials, TlsAgreementCredentials, TlsCredentials
	{
		[Token(Token = "0x60014D5")]
		public abstract byte[] GenerateAgreement(AsymmetricKeyParameter peerPublicKey);

		[Token(Token = "0x60014D6")]
		[Address(RVA = "0xF06C60", Offset = "0xF06C60", VA = "0xF06C60")]
		protected AbstractTlsAgreementCredentials()
		{
		}
	}
	[Token(Token = "0x2000244")]
	public class AbstractTlsCipherFactory : TlsCipherFactory
	{
		[Token(Token = "0x60014D7")]
		[Address(RVA = "0xF06C70", Offset = "0xF06C70", VA = "0xF06C70", Slot = "5")]
		public virtual TlsCipher CreateCipher(TlsContext context, int encryptionAlgorithm, int macAlgorithm)
		{
			return null;
		}

		[Token(Token = "0x60014D8")]
		[Address(RVA = "0xF06CD4", Offset = "0xF06CD4", VA = "0xF06CD4")]
		public AbstractTlsCipherFactory()
		{
		}
	}
	[Token(Token = "0x2000245")]
	public abstract class AbstractTlsClient : AbstractTlsPeer, TlsClient, TlsPeer
	{
		[Token(Token = "0x4000A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected TlsCipherFactory mCipherFactory;

		[Token(Token = "0x4000A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected TlsClientContext mContext;

		[Token(Token = "0x4000A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected IList mSupportedSignatureAlgorithms;

		[Token(Token = "0x4000A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected int[] mNamedCurves;

		[Token(Token = "0x4000A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected byte[] mClientECPointFormats;

		[Token(Token = "0x4000A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected byte[] mServerECPointFormats;

		[Token(Token = "0x4000A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected int mSelectedCipherSuite;

		[Token(Token = "0x4000A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected short mSelectedCompressionMethod;

		[Token(Token = "0x4000A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82334C", Offset = "0x82334C")]
		private List<string> <HostNames>k__BackingField;

		[Token(Token = "0x17000265")]
		public List<string> HostNames
		{
			[Token(Token = "0x60014D9")]
			[Address(RVA = "0xF06CDC", Offset = "0xF06CDC", VA = "0xF06CDC", Slot = "18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830780", Offset = "0x830780")]
			get
			{
				return null;
			}
			[Token(Token = "0x60014DA")]
			[Address(RVA = "0xF06CE4", Offset = "0xF06CE4", VA = "0xF06CE4", Slot = "19")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830790", Offset = "0x830790")]
			set
			{
			}
		}

		[Token(Token = "0x17000266")]
		public virtual ProtocolVersion ClientHelloRecordLayerVersion
		{
			[Token(Token = "0x60014E1")]
			[Address(RVA = "0xF06F08", Offset = "0xF06F08", VA = "0xF06F08", Slot = "42")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000267")]
		public virtual ProtocolVersion ClientVersion
		{
			[Token(Token = "0x60014E2")]
			[Address(RVA = "0xF06F18", Offset = "0xF06F18", VA = "0xF06F18", Slot = "43")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000268")]
		public virtual bool IsFallback
		{
			[Token(Token = "0x60014E3")]
			[Address(RVA = "0xF06F80", Offset = "0xF06F80", VA = "0xF06F80", Slot = "44")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000269")]
		public virtual ProtocolVersion MinimumVersion
		{
			[Token(Token = "0x60014E5")]
			[Address(RVA = "0xF074BC", Offset = "0xF074BC", VA = "0xF074BC", Slot = "46")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014DB")]
		[Address(RVA = "0xF06CEC", Offset = "0xF06CEC", VA = "0xF06CEC")]
		public AbstractTlsClient()
		{
		}

		[Token(Token = "0x60014DC")]
		[Address(RVA = "0xF06D60", Offset = "0xF06D60", VA = "0xF06D60")]
		public AbstractTlsClient(TlsCipherFactory cipherFactory)
		{
		}

		[Token(Token = "0x60014DD")]
		[Address(RVA = "0xF06D94", Offset = "0xF06D94", VA = "0xF06D94", Slot = "38")]
		protected virtual bool AllowUnexpectedServerExtension(int extensionType, byte[] extensionData)
		{
			return default(bool);
		}

		[Token(Token = "0x60014DE")]
		[Address(RVA = "0xF06E20", Offset = "0xF06E20", VA = "0xF06E20", Slot = "39")]
		protected virtual void CheckForUnexpectedServerExtension(IDictionary serverExtensions, int extensionType)
		{
		}

		[Token(Token = "0x60014DF")]
		[Address(RVA = "0xF06EF8", Offset = "0xF06EF8", VA = "0xF06EF8", Slot = "40")]
		public virtual void Init(TlsClientContext context)
		{
		}

		[Token(Token = "0x60014E0")]
		[Address(RVA = "0xF06F00", Offset = "0xF06F00", VA = "0xF06F00", Slot = "41")]
		public virtual TlsSession GetSessionToResume()
		{
			return null;
		}

		[Token(Token = "0x60014E4")]
		[Address(RVA = "0xF06F88", Offset = "0xF06F88", VA = "0xF06F88", Slot = "45")]
		public virtual IDictionary GetClientExtensions()
		{
			return null;
		}

		[Token(Token = "0x60014E6")]
		[Address(RVA = "0xF07524", Offset = "0xF07524", VA = "0xF07524", Slot = "47")]
		public virtual void NotifyServerVersion(ProtocolVersion serverVersion)
		{
		}

		[Token(Token = "0x60014E7")]
		public abstract int[] GetCipherSuites();

		[Token(Token = "0x60014E8")]
		[Address(RVA = "0xF07624", Offset = "0xF07624", VA = "0xF07624", Slot = "49")]
		public virtual byte[] GetCompressionMethods()
		{
			return null;
		}

		[Token(Token = "0x60014E9")]
		[Address(RVA = "0xF07670", Offset = "0xF07670", VA = "0xF07670", Slot = "50")]
		public virtual void NotifySessionID(byte[] sessionID)
		{
		}

		[Token(Token = "0x60014EA")]
		[Address(RVA = "0xF07674", Offset = "0xF07674", VA = "0xF07674", Slot = "51")]
		public virtual void NotifySelectedCipherSuite(int selectedCipherSuite)
		{
		}

		[Token(Token = "0x60014EB")]
		[Address(RVA = "0xF0767C", Offset = "0xF0767C", VA = "0xF0767C", Slot = "52")]
		public virtual void NotifySelectedCompressionMethod(byte selectedCompressionMethod)
		{
		}

		[Token(Token = "0x60014EC")]
		[Address(RVA = "0xF07688", Offset = "0xF07688", VA = "0xF07688", Slot = "53")]
		public virtual void ProcessServerExtensions(IDictionary serverExtensions)
		{
		}

		[Token(Token = "0x60014ED")]
		[Address(RVA = "0xF07794", Offset = "0xF07794", VA = "0xF07794", Slot = "54")]
		public virtual void ProcessServerSupplementalData(IList serverSupplementalData)
		{
		}

		[Token(Token = "0x60014EE")]
		public abstract TlsKeyExchange GetKeyExchange();

		[Token(Token = "0x60014EF")]
		public abstract TlsAuthentication GetAuthentication();

		[Token(Token = "0x60014F0")]
		[Address(RVA = "0xF0780C", Offset = "0xF0780C", VA = "0xF0780C", Slot = "57")]
		public virtual IList GetClientSupplementalData()
		{
			return null;
		}

		[Token(Token = "0x60014F1")]
		[Address(RVA = "0xF07814", Offset = "0xF07814", VA = "0xF07814", Slot = "13")]
		public override TlsCompression GetCompression()
		{
			return null;
		}

		[Token(Token = "0x60014F2")]
		[Address(RVA = "0xF078E0", Offset = "0xF078E0", VA = "0xF078E0", Slot = "14")]
		public override TlsCipher GetCipher()
		{
			return null;
		}

		[Token(Token = "0x60014F3")]
		[Address(RVA = "0xF079F0", Offset = "0xF079F0", VA = "0xF079F0", Slot = "58")]
		public virtual void NotifyNewSessionTicket(NewSessionTicket newSessionTicket)
		{
		}
	}
	[Token(Token = "0x2000246")]
	internal abstract class AbstractTlsContext : TlsContext
	{
		[Token(Token = "0x4000A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static long counter;

		[Token(Token = "0x4000A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IRandomGenerator mNonceRandom;

		[Token(Token = "0x4000A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly SecureRandom mSecureRandom;

		[Token(Token = "0x4000A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly SecurityParameters mSecurityParameters;

		[Token(Token = "0x4000A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ProtocolVersion mClientVersion;

		[Token(Token = "0x4000A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ProtocolVersion mServerVersion;

		[Token(Token = "0x4000A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TlsSession mSession;

		[Token(Token = "0x4000A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private object mUserObject;

		[Token(Token = "0x1700026A")]
		public virtual IRandomGenerator NonceRandomGenerator
		{
			[Token(Token = "0x60014F6")]
			[Address(RVA = "0xF07D6C", Offset = "0xF07D6C", VA = "0xF07D6C", Slot = "14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700026B")]
		public virtual SecureRandom SecureRandom
		{
			[Token(Token = "0x60014F7")]
			[Address(RVA = "0xF07D74", Offset = "0xF07D74", VA = "0xF07D74", Slot = "15")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700026C")]
		public virtual SecurityParameters SecurityParameters
		{
			[Token(Token = "0x60014F8")]
			[Address(RVA = "0xF07D7C", Offset = "0xF07D7C", VA = "0xF07D7C", Slot = "16")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700026D")]
		public abstract bool IsServer
		{
			[Token(Token = "0x60014F9")]
			get;
		}

		[Token(Token = "0x1700026E")]
		public virtual ProtocolVersion ClientVersion
		{
			[Token(Token = "0x60014FA")]
			[Address(RVA = "0xF07D84", Offset = "0xF07D84", VA = "0xF07D84", Slot = "18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700026F")]
		public virtual ProtocolVersion ServerVersion
		{
			[Token(Token = "0x60014FC")]
			[Address(RVA = "0xF07D94", Offset = "0xF07D94", VA = "0xF07D94", Slot = "20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000270")]
		public virtual TlsSession ResumableSession
		{
			[Token(Token = "0x60014FE")]
			[Address(RVA = "0xF07DA4", Offset = "0xF07DA4", VA = "0xF07DA4", Slot = "22")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000271")]
		public virtual object UserObject
		{
			[Token(Token = "0x6001500")]
			[Address(RVA = "0xF07DB4", Offset = "0xF07DB4", VA = "0xF07DB4", Slot = "24")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001501")]
			[Address(RVA = "0xF07DBC", Offset = "0xF07DBC", VA = "0xF07DBC", Slot = "25")]
			set
			{
			}
		}

		[Token(Token = "0x60014F4")]
		[Address(RVA = "0xF079F4", Offset = "0xF079F4", VA = "0xF079F4")]
		private static long NextCounterValue()
		{
			return default(long);
		}

		[Token(Token = "0x60014F5")]
		[Address(RVA = "0xF07A5C", Offset = "0xF07A5C", VA = "0xF07A5C")]
		internal AbstractTlsContext(SecureRandom secureRandom, SecurityParameters securityParameters)
		{
		}

		[Token(Token = "0x60014FB")]
		[Address(RVA = "0xF07D8C", Offset = "0xF07D8C", VA = "0xF07D8C", Slot = "19")]
		internal virtual void SetClientVersion(ProtocolVersion clientVersion)
		{
		}

		[Token(Token = "0x60014FD")]
		[Address(RVA = "0xF07D9C", Offset = "0xF07D9C", VA = "0xF07D9C", Slot = "21")]
		internal virtual void SetServerVersion(ProtocolVersion serverVersion)
		{
		}

		[Token(Token = "0x60014FF")]
		[Address(RVA = "0xF07DAC", Offset = "0xF07DAC", VA = "0xF07DAC", Slot = "23")]
		internal virtual void SetResumableSession(TlsSession session)
		{
		}

		[Token(Token = "0x6001502")]
		[Address(RVA = "0xF07DC4", Offset = "0xF07DC4", VA = "0xF07DC4", Slot = "26")]
		public virtual byte[] ExportKeyingMaterial(string asciiLabel, byte[] context_value, int length)
		{
			return null;
		}
	}
	[Token(Token = "0x2000247")]
	public abstract class AbstractTlsCredentials : TlsCredentials
	{
		[Token(Token = "0x17000272")]
		public abstract Certificate Certificate
		{
			[Token(Token = "0x6001504")]
			get;
		}

		[Token(Token = "0x6001505")]
		[Address(RVA = "0xF06C68", Offset = "0xF06C68", VA = "0xF06C68")]
		protected AbstractTlsCredentials()
		{
		}
	}
	[Token(Token = "0x2000248")]
	public abstract class AbstractTlsEncryptionCredentials : AbstractTlsCredentials, TlsEncryptionCredentials, TlsCredentials
	{
		[Token(Token = "0x6001506")]
		public abstract byte[] DecryptPreMasterSecret(byte[] encryptedPreMasterSecret);

		[Token(Token = "0x6001507")]
		[Address(RVA = "0xF080CC", Offset = "0xF080CC", VA = "0xF080CC")]
		protected AbstractTlsEncryptionCredentials()
		{
		}
	}
	[Token(Token = "0x2000249")]
	public abstract class AbstractTlsKeyExchange : TlsKeyExchange
	{
		[Token(Token = "0x4000A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly int mKeyExchange;

		[Token(Token = "0x4000A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected IList mSupportedSignatureAlgorithms;

		[Token(Token = "0x4000A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected TlsContext mContext;

		[Token(Token = "0x17000273")]
		public virtual bool RequiresServerKeyExchange
		{
			[Token(Token = "0x600150D")]
			[Address(RVA = "0xF0840C", Offset = "0xF0840C", VA = "0xF0840C", Slot = "23")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001508")]
		[Address(RVA = "0xF080D4", Offset = "0xF080D4", VA = "0xF080D4")]
		protected AbstractTlsKeyExchange(int keyExchange, IList supportedSignatureAlgorithms)
		{
		}

		[Token(Token = "0x6001509")]
		[Address(RVA = "0xF08110", Offset = "0xF08110", VA = "0xF08110", Slot = "19")]
		public virtual void Init(TlsContext context)
		{
		}

		[Token(Token = "0x600150A")]
		public abstract void SkipServerCredentials();

		[Token(Token = "0x600150B")]
		[Address(RVA = "0xF08338", Offset = "0xF08338", VA = "0xF08338", Slot = "21")]
		public virtual void ProcessServerCertificate(Certificate serverCertificate)
		{
		}

		[Token(Token = "0x600150C")]
		[Address(RVA = "0xF0833C", Offset = "0xF0833C", VA = "0xF0833C", Slot = "22")]
		public virtual void ProcessServerCredentials(TlsCredentials serverCredentials)
		{
		}

		[Token(Token = "0x600150E")]
		[Address(RVA = "0xF08414", Offset = "0xF08414", VA = "0xF08414", Slot = "24")]
		public virtual byte[] GenerateServerKeyExchange()
		{
			return null;
		}

		[Token(Token = "0x600150F")]
		[Address(RVA = "0xF084A4", Offset = "0xF084A4", VA = "0xF084A4", Slot = "25")]
		public virtual void SkipServerKeyExchange()
		{
		}

		[Token(Token = "0x6001510")]
		[Address(RVA = "0xF08530", Offset = "0xF08530", VA = "0xF08530", Slot = "26")]
		public virtual void ProcessServerKeyExchange(Stream input)
		{
		}

		[Token(Token = "0x6001511")]
		public abstract void ValidateCertificateRequest(CertificateRequest certificateRequest);

		[Token(Token = "0x6001512")]
		[Address(RVA = "0xF085BC", Offset = "0xF085BC", VA = "0xF085BC", Slot = "28")]
		public virtual void SkipClientCredentials()
		{
		}

		[Token(Token = "0x6001513")]
		public abstract void ProcessClientCredentials(TlsCredentials clientCredentials);

		[Token(Token = "0x6001514")]
		[Address(RVA = "0xF085C0", Offset = "0xF085C0", VA = "0xF085C0", Slot = "30")]
		public virtual void ProcessClientCertificate(Certificate clientCertificate)
		{
		}

		[Token(Token = "0x6001515")]
		public abstract void GenerateClientKeyExchange(Stream output);

		[Token(Token = "0x6001516")]
		[Address(RVA = "0xF085C4", Offset = "0xF085C4", VA = "0xF085C4", Slot = "32")]
		public virtual void ProcessClientKeyExchange(Stream input)
		{
		}

		[Token(Token = "0x6001517")]
		public abstract byte[] GeneratePremasterSecret();
	}
	[Token(Token = "0x200024A")]
	public abstract class AbstractTlsPeer : TlsPeer
	{
		[Token(Token = "0x6001518")]
		[Address(RVA = "0xF08628", Offset = "0xF08628", VA = "0xF08628", Slot = "11")]
		public virtual bool ShouldUseGmtUnixTime()
		{
			return default(bool);
		}

		[Token(Token = "0x6001519")]
		[Address(RVA = "0xF08630", Offset = "0xF08630", VA = "0xF08630", Slot = "12")]
		public virtual void NotifySecureRenegotiation(bool secureRenegotiation)
		{
		}

		[Token(Token = "0x600151A")]
		public abstract TlsCompression GetCompression();

		[Token(Token = "0x600151B")]
		public abstract TlsCipher GetCipher();

		[Token(Token = "0x600151C")]
		[Address(RVA = "0xF086A8", Offset = "0xF086A8", VA = "0xF086A8", Slot = "15")]
		public virtual void NotifyAlertRaised(byte alertLevel, byte alertDescription, string message, Exception cause)
		{
		}

		[Token(Token = "0x600151D")]
		[Address(RVA = "0xF086AC", Offset = "0xF086AC", VA = "0xF086AC", Slot = "16")]
		public virtual void NotifyAlertReceived(byte alertLevel, byte alertDescription)
		{
		}

		[Token(Token = "0x600151E")]
		[Address(RVA = "0xF086B0", Offset = "0xF086B0", VA = "0xF086B0", Slot = "17")]
		public virtual void NotifyHandshakeComplete()
		{
		}

		[Token(Token = "0x600151F")]
		[Address(RVA = "0xF06D8C", Offset = "0xF06D8C", VA = "0xF06D8C")]
		protected AbstractTlsPeer()
		{
		}
	}
	[Token(Token = "0x200024B")]
	public abstract class AbstractTlsServer : AbstractTlsPeer, TlsServer, TlsPeer
	{
		[Token(Token = "0x4000A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected TlsCipherFactory mCipherFactory;

		[Token(Token = "0x4000A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected TlsServerContext mContext;

		[Token(Token = "0x4000A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected ProtocolVersion mClientVersion;

		[Token(Token = "0x4000A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected int[] mOfferedCipherSuites;

		[Token(Token = "0x4000A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected byte[] mOfferedCompressionMethods;

		[Token(Token = "0x4000A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected IDictionary mClientExtensions;

		[Token(Token = "0x4000A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected bool mEncryptThenMacOffered;

		[Token(Token = "0x4000A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		protected short mMaxFragmentLengthOffered;

		[Token(Token = "0x4000A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected bool mTruncatedHMacOffered;

		[Token(Token = "0x4000A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected IList mSupportedSignatureAlgorithms;

		[Token(Token = "0x4000A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected bool mEccCipherSuitesOffered;

		[Token(Token = "0x4000A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected int[] mNamedCurves;

		[Token(Token = "0x4000A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected byte[] mClientECPointFormats;

		[Token(Token = "0x4000A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected byte[] mServerECPointFormats;

		[Token(Token = "0x4000A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected ProtocolVersion mServerVersion;

		[Token(Token = "0x4000A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected int mSelectedCipherSuite;

		[Token(Token = "0x4000A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		protected byte mSelectedCompressionMethod;

		[Token(Token = "0x4000A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected IDictionary mServerExtensions;

		[Token(Token = "0x17000274")]
		protected virtual bool AllowEncryptThenMac
		{
			[Token(Token = "0x6001522")]
			[Address(RVA = "0xF0874C", Offset = "0xF0874C", VA = "0xF0874C", Slot = "36")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000275")]
		protected virtual bool AllowTruncatedHMac
		{
			[Token(Token = "0x6001523")]
			[Address(RVA = "0xF08754", Offset = "0xF08754", VA = "0xF08754", Slot = "37")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000276")]
		protected virtual ProtocolVersion MaximumVersion
		{
			[Token(Token = "0x6001527")]
			[Address(RVA = "0xF087D4", Offset = "0xF087D4", VA = "0xF087D4", Slot = "40")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000277")]
		protected virtual ProtocolVersion MinimumVersion
		{
			[Token(Token = "0x6001528")]
			[Address(RVA = "0xF0883C", Offset = "0xF0883C", VA = "0xF0883C", Slot = "41")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001520")]
		[Address(RVA = "0xF086B4", Offset = "0xF086B4", VA = "0xF086B4")]
		public AbstractTlsServer()
		{
		}

		[Token(Token = "0x6001521")]
		[Address(RVA = "0xF08720", Offset = "0xF08720", VA = "0xF08720")]
		public AbstractTlsServer(TlsCipherFactory cipherFactory)
		{
		}

		[Token(Token = "0x6001524")]
		[Address(RVA = "0xF0875C", Offset = "0xF0875C", VA = "0xF0875C", Slot = "38")]
		protected virtual IDictionary CheckServerExtensions()
		{
			return null;
		}

		[Token(Token = "0x6001525")]
		protected abstract int[] GetCipherSuites();

		[Token(Token = "0x6001526")]
		[Address(RVA = "0xF08788", Offset = "0xF08788", VA = "0xF08788")]
		protected byte[] GetCompressionMethods()
		{
			return null;
		}

		[Token(Token = "0x6001529")]
		[Address(RVA = "0xF088A4", Offset = "0xF088A4", VA = "0xF088A4", Slot = "42")]
		protected virtual bool SupportsClientEccCapabilities(int[] namedCurves, byte[] ecPointFormats)
		{
			return default(bool);
		}

		[Token(Token = "0x600152A")]
		[Address(RVA = "0xF08A08", Offset = "0xF08A08", VA = "0xF08A08", Slot = "43")]
		public virtual void Init(TlsServerContext context)
		{
		}

		[Token(Token = "0x600152B")]
		[Address(RVA = "0xF08A10", Offset = "0xF08A10", VA = "0xF08A10", Slot = "44")]
		public virtual void NotifyClientVersion(ProtocolVersion clientVersion)
		{
		}

		[Token(Token = "0x600152C")]
		[Address(RVA = "0xF08A18", Offset = "0xF08A18", VA = "0xF08A18", Slot = "45")]
		public virtual void NotifyFallback(bool isFallback)
		{
		}

		[Token(Token = "0x600152D")]
		[Address(RVA = "0xF08B18", Offset = "0xF08B18", VA = "0xF08B18", Slot = "46")]
		public virtual void NotifyOfferedCipherSuites(int[] offeredCipherSuites)
		{
		}

		[Token(Token = "0x600152E")]
		[Address(RVA = "0xF08B9C", Offset = "0xF08B9C", VA = "0xF08B9C", Slot = "47")]
		public virtual void NotifyOfferedCompressionMethods(byte[] offeredCompressionMethods)
		{
		}

		[Token(Token = "0x600152F")]
		[Address(RVA = "0xF08BA4", Offset = "0xF08BA4", VA = "0xF08BA4", Slot = "48")]
		public virtual void ProcessClientExtensions(IDictionary clientExtensions)
		{
		}

		[Token(Token = "0x6001530")]
		[Address(RVA = "0xF08D48", Offset = "0xF08D48", VA = "0xF08D48", Slot = "49")]
		public virtual ProtocolVersion GetServerVersion()
		{
			return null;
		}

		[Token(Token = "0x6001531")]
		[Address(RVA = "0xF08E3C", Offset = "0xF08E3C", VA = "0xF08E3C", Slot = "50")]
		public virtual int GetSelectedCipherSuite()
		{
			return default(int);
		}

		[Token(Token = "0x6001532")]
		[Address(RVA = "0xF08FD4", Offset = "0xF08FD4", VA = "0xF08FD4", Slot = "51")]
		public virtual byte GetSelectedCompressionMethod()
		{
			return default(byte);
		}

		[Token(Token = "0x6001533")]
		[Address(RVA = "0xF090C8", Offset = "0xF090C8", VA = "0xF090C8", Slot = "52")]
		public virtual IDictionary GetServerExtensions()
		{
			return null;
		}

		[Token(Token = "0x6001534")]
		[Address(RVA = "0xF092FC", Offset = "0xF092FC", VA = "0xF092FC", Slot = "53")]
		public virtual IList GetServerSupplementalData()
		{
			return null;
		}

		[Token(Token = "0x6001535")]
		public abstract TlsCredentials GetCredentials();

		[Token(Token = "0x6001536")]
		[Address(RVA = "0xF09304", Offset = "0xF09304", VA = "0xF09304", Slot = "55")]
		public virtual CertificateStatus GetCertificateStatus()
		{
			return null;
		}

		[Token(Token = "0x6001537")]
		public abstract TlsKeyExchange GetKeyExchange();

		[Token(Token = "0x6001538")]
		[Address(RVA = "0xF0930C", Offset = "0xF0930C", VA = "0xF0930C", Slot = "57")]
		public virtual CertificateRequest GetCertificateRequest()
		{
			return null;
		}

		[Token(Token = "0x6001539")]
		[Address(RVA = "0xF09314", Offset = "0xF09314", VA = "0xF09314", Slot = "58")]
		public virtual void ProcessClientSupplementalData(IList clientSupplementalData)
		{
		}

		[Token(Token = "0x600153A")]
		[Address(RVA = "0xF0938C", Offset = "0xF0938C", VA = "0xF0938C", Slot = "59")]
		public virtual void NotifyClientCertificate(Certificate clientCertificate)
		{
		}

		[Token(Token = "0x600153B")]
		[Address(RVA = "0xF093F0", Offset = "0xF093F0", VA = "0xF093F0", Slot = "13")]
		public override TlsCompression GetCompression()
		{
			return null;
		}

		[Token(Token = "0x600153C")]
		[Address(RVA = "0xF0948C", Offset = "0xF0948C", VA = "0xF0948C", Slot = "14")]
		public override TlsCipher GetCipher()
		{
			return null;
		}

		[Token(Token = "0x600153D")]
		[Address(RVA = "0xF0959C", Offset = "0xF0959C", VA = "0xF0959C", Slot = "60")]
		public virtual NewSessionTicket GetNewSessionTicket()
		{
			return null;
		}
	}
	[Token(Token = "0x200024C")]
	public abstract class AbstractTlsSigner : TlsSigner
	{
		[Token(Token = "0x4000A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected TlsContext mContext;

		[Token(Token = "0x600153E")]
		[Address(RVA = "0xF09660", Offset = "0xF09660", VA = "0xF09660", Slot = "14")]
		public virtual void Init(TlsContext context)
		{
		}

		[Token(Token = "0x600153F")]
		[Address(RVA = "0xF09668", Offset = "0xF09668", VA = "0xF09668", Slot = "15")]
		public virtual byte[] GenerateRawSignature(AsymmetricKeyParameter privateKey, byte[] md5AndSha1)
		{
			return null;
		}

		[Token(Token = "0x6001540")]
		public abstract byte[] GenerateRawSignature(SignatureAndHashAlgorithm algorithm, AsymmetricKeyParameter privateKey, byte[] hash);

		[Token(Token = "0x6001541")]
		[Address(RVA = "0xF09684", Offset = "0xF09684", VA = "0xF09684", Slot = "17")]
		public virtual bool VerifyRawSignature(byte[] sigBytes, AsymmetricKeyParameter publicKey, byte[] md5AndSha1)
		{
			return default(bool);
		}

		[Token(Token = "0x6001542")]
		public abstract bool VerifyRawSignature(SignatureAndHashAlgorithm algorithm, byte[] sigBytes, AsymmetricKeyParameter publicKey, byte[] hash);

		[Token(Token = "0x6001543")]
		[Address(RVA = "0xF096A4", Offset = "0xF096A4", VA = "0xF096A4", Slot = "19")]
		public virtual ISigner CreateSigner(AsymmetricKeyParameter privateKey)
		{
			return null;
		}

		[Token(Token = "0x6001544")]
		public abstract ISigner CreateSigner(SignatureAndHashAlgorithm algorithm, AsymmetricKeyParameter privateKey);

		[Token(Token = "0x6001545")]
		[Address(RVA = "0xF096BC", Offset = "0xF096BC", VA = "0xF096BC", Slot = "21")]
		public virtual ISigner CreateVerifyer(AsymmetricKeyParameter publicKey)
		{
			return null;
		}

		[Token(Token = "0x6001546")]
		public abstract ISigner CreateVerifyer(SignatureAndHashAlgorithm algorithm, AsymmetricKeyParameter publicKey);

		[Token(Token = "0x6001547")]
		public abstract bool IsValidPublicKey(AsymmetricKeyParameter publicKey);

		[Token(Token = "0x6001548")]
		[Address(RVA = "0xF096D4", Offset = "0xF096D4", VA = "0xF096D4")]
		protected AbstractTlsSigner()
		{
		}
	}
	[Token(Token = "0x200024D")]
	public abstract class AbstractTlsSignerCredentials : AbstractTlsCredentials, TlsSignerCredentials, TlsCredentials
	{
		[Token(Token = "0x17000278")]
		public virtual SignatureAndHashAlgorithm SignatureAndHashAlgorithm
		{
			[Token(Token = "0x600154A")]
			[Address(RVA = "0xF096DC", Offset = "0xF096DC", VA = "0xF096DC", Slot = "9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001549")]
		public abstract byte[] GenerateCertificateSignature(byte[] hash);

		[Token(Token = "0x600154B")]
		[Address(RVA = "0xF09748", Offset = "0xF09748", VA = "0xF09748")]
		protected AbstractTlsSignerCredentials()
		{
		}
	}
	[Token(Token = "0x200024E")]
	public abstract class AlertDescription
	{
		[Token(Token = "0x4000A31")]
		public const byte close_notify = 0;

		[Token(Token = "0x4000A32")]
		public const byte unexpected_message = 10;

		[Token(Token = "0x4000A33")]
		public const byte bad_record_mac = 20;

		[Token(Token = "0x4000A34")]
		public const byte decryption_failed = 21;

		[Token(Token = "0x4000A35")]
		public const byte record_overflow = 22;

		[Token(Token = "0x4000A36")]
		public const byte decompression_failure = 30;

		[Token(Token = "0x4000A37")]
		public const byte handshake_failure = 40;

		[Token(Token = "0x4000A38")]
		public const byte no_certificate = 41;

		[Token(Token = "0x4000A39")]
		public const byte bad_certificate = 42;

		[Token(Token = "0x4000A3A")]
		public const byte unsupported_certificate = 43;

		[Token(Token = "0x4000A3B")]
		public const byte certificate_revoked = 44;

		[Token(Token = "0x4000A3C")]
		public const byte certificate_expired = 45;

		[Token(Token = "0x4000A3D")]
		public const byte certificate_unknown = 46;

		[Token(Token = "0x4000A3E")]
		public const byte illegal_parameter = 47;

		[Token(Token = "0x4000A3F")]
		public const byte unknown_ca = 48;

		[Token(Token = "0x4000A40")]
		public const byte access_denied = 49;

		[Token(Token = "0x4000A41")]
		public const byte decode_error = 50;

		[Token(Token = "0x4000A42")]
		public const byte decrypt_error = 51;

		[Token(Token = "0x4000A43")]
		public const byte export_restriction = 60;

		[Token(Token = "0x4000A44")]
		public const byte protocol_version = 70;

		[Token(Token = "0x4000A45")]
		public const byte insufficient_security = 71;

		[Token(Token = "0x4000A46")]
		public const byte internal_error = 80;

		[Token(Token = "0x4000A47")]
		public const byte user_canceled = 90;

		[Token(Token = "0x4000A48")]
		public const byte no_renegotiation = 100;

		[Token(Token = "0x4000A49")]
		public const byte unsupported_extension = 110;

		[Token(Token = "0x4000A4A")]
		public const byte certificate_unobtainable = 111;

		[Token(Token = "0x4000A4B")]
		public const byte unrecognized_name = 112;

		[Token(Token = "0x4000A4C")]
		public const byte bad_certificate_status_response = 113;

		[Token(Token = "0x4000A4D")]
		public const byte bad_certificate_hash_value = 114;

		[Token(Token = "0x4000A4E")]
		public const byte unknown_psk_identity = 115;

		[Token(Token = "0x4000A4F")]
		public const byte inappropriate_fallback = 86;

		[Token(Token = "0x600154C")]
		[Address(RVA = "0xF09750", Offset = "0xF09750", VA = "0xF09750")]
		public static string GetName(byte alertDescription)
		{
			return null;
		}

		[Token(Token = "0x600154D")]
		[Address(RVA = "0xF099CC", Offset = "0xF099CC", VA = "0xF099CC")]
		public static string GetText(byte alertDescription)
		{
			return null;
		}

		[Token(Token = "0x600154E")]
		[Address(RVA = "0xF09B34", Offset = "0xF09B34", VA = "0xF09B34")]
		protected AlertDescription()
		{
		}
	}
	[Token(Token = "0x200024F")]
	public abstract class AlertLevel
	{
		[Token(Token = "0x4000A50")]
		public const byte warning = 1;

		[Token(Token = "0x4000A51")]
		public const byte fatal = 2;

		[Token(Token = "0x600154F")]
		[Address(RVA = "0xF09B3C", Offset = "0xF09B3C", VA = "0xF09B3C")]
		public static string GetName(byte alertDescription)
		{
			return null;
		}

		[Token(Token = "0x6001550")]
		[Address(RVA = "0xF09BAC", Offset = "0xF09BAC", VA = "0xF09BAC")]
		public static string GetText(byte alertDescription)
		{
			return null;
		}

		[Token(Token = "0x6001551")]
		[Address(RVA = "0xF09D5C", Offset = "0xF09D5C", VA = "0xF09D5C")]
		protected AlertLevel()
		{
		}
	}
	[Token(Token = "0x2000250")]
	public class AlwaysValidVerifyer : ICertificateVerifyer
	{
		[Token(Token = "0x6001552")]
		[Address(RVA = "0xF09D64", Offset = "0xF09D64", VA = "0xF09D64", Slot = "4")]
		public bool IsValid(Uri targetUri, X509CertificateStructure[] certs)
		{
			return default(bool);
		}

		[Token(Token = "0x6001553")]
		[Address(RVA = "0xF09D6C", Offset = "0xF09D6C", VA = "0xF09D6C")]
		public AlwaysValidVerifyer()
		{
		}
	}
	[Token(Token = "0x2000251")]
	public class ByteQueue
	{
		[Token(Token = "0x4000A52")]
		private const int DefaultCapacity = 1024;

		[Token(Token = "0x4000A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private byte[] databuf;

		[Token(Token = "0x4000A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int skipped;

		[Token(Token = "0x4000A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int available;

		[Token(Token = "0x17000279")]
		public int Available
		{
			[Token(Token = "0x600155C")]
			[Address(RVA = "0xF0A3EC", Offset = "0xF0A3EC", VA = "0xF0A3EC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001554")]
		[Address(RVA = "0xF09D74", Offset = "0xF09D74", VA = "0xF09D74")]
		public static int NextTwoPow(int i)
		{
			return default(int);
		}

		[Token(Token = "0x6001555")]
		[Address(RVA = "0xF09D90", Offset = "0xF09D90", VA = "0xF09D90")]
		public ByteQueue()
		{
		}

		[Token(Token = "0x6001556")]
		[Address(RVA = "0xF09D98", Offset = "0xF09D98", VA = "0xF09D98")]
		public ByteQueue(int capacity)
		{
		}

		[Token(Token = "0x6001557")]
		[Address(RVA = "0xF09E08", Offset = "0xF09E08", VA = "0xF09E08")]
		public void Read(byte[] buf, int offset, int len, int skip)
		{
		}

		[Token(Token = "0x6001558")]
		[Address(RVA = "0xF0A058", Offset = "0xF0A058", VA = "0xF0A058")]
		public void AddData(byte[] data, int offset, int len)
		{
		}

		[Token(Token = "0x6001559")]
		[Address(RVA = "0xF0A180", Offset = "0xF0A180", VA = "0xF0A180")]
		public void RemoveData(int i)
		{
		}

		[Token(Token = "0x600155A")]
		[Address(RVA = "0xF0A324", Offset = "0xF0A324", VA = "0xF0A324")]
		public void RemoveData(byte[] buf, int off, int len, int skip)
		{
		}

		[Token(Token = "0x600155B")]
		[Address(RVA = "0xF0A35C", Offset = "0xF0A35C", VA = "0xF0A35C")]
		public byte[] RemoveData(int len, int skip)
		{
			return null;
		}
	}
	[Token(Token = "0x2000252")]
	public abstract class CertChainType
	{
		[Token(Token = "0x4000A56")]
		public const byte individual_certs = 0;

		[Token(Token = "0x4000A57")]
		public const byte pkipath = 1;

		[Token(Token = "0x600155D")]
		[Address(RVA = "0xF0A3F4", Offset = "0xF0A3F4", VA = "0xF0A3F4")]
		public static bool IsValid(byte certChainType)
		{
			return default(bool);
		}

		[Token(Token = "0x600155E")]
		[Address(RVA = "0xF0A404", Offset = "0xF0A404", VA = "0xF0A404")]
		protected CertChainType()
		{
		}
	}
	[Token(Token = "0x2000253")]
	public class Certificate
	{
		[Token(Token = "0x4000A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Certificate EmptyChain;

		[Token(Token = "0x4000A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly X509CertificateStructure[] mCertificateList;

		[Token(Token = "0x1700027A")]
		public virtual int Length
		{
			[Token(Token = "0x6001562")]
			[Address(RVA = "0xF0A4F0", Offset = "0xF0A4F0", VA = "0xF0A4F0", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700027B")]
		public virtual bool IsEmpty
		{
			[Token(Token = "0x6001563")]
			[Address(RVA = "0xF0A50C", Offset = "0xF0A50C", VA = "0xF0A50C", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600155F")]
		[Address(RVA = "0xF0A40C", Offset = "0xF0A40C", VA = "0xF0A40C")]
		public Certificate(X509CertificateStructure[] certificateList)
		{
		}

		[Token(Token = "0x6001560")]
		[Address(RVA = "0xF0A4A8", Offset = "0xF0A4A8", VA = "0xF0A4A8", Slot = "4")]
		public virtual X509CertificateStructure[] GetCertificateList()
		{
			return null;
		}

		[Token(Token = "0x6001561")]
		[Address(RVA = "0xF0A4B4", Offset = "0xF0A4B4", VA = "0xF0A4B4", Slot = "5")]
		public virtual X509CertificateStructure GetCertificateAt(int index)
		{
			return null;
		}

		[Token(Token = "0x6001564")]
		[Address(RVA = "0xF0A530", Offset = "0xF0A530", VA = "0xF0A530", Slot = "8")]
		public virtual void Encode(Stream output)
		{
		}

		[Token(Token = "0x6001565")]
		[Address(RVA = "0xF0A958", Offset = "0xF0A958", VA = "0xF0A958")]
		public static Certificate Parse(Stream input)
		{
			return null;
		}

		[Token(Token = "0x6001566")]
		[Address(RVA = "0xF0ADE4", Offset = "0xF0ADE4", VA = "0xF0ADE4", Slot = "9")]
		protected virtual X509CertificateStructure[] CloneCertificateList()
		{
			return null;
		}
	}
	[Token(Token = "0x2000254")]
	public class CertificateRequest
	{
		[Token(Token = "0x4000A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly byte[] mCertificateTypes;

		[Token(Token = "0x4000A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected readonly IList mSupportedSignatureAlgorithms;

		[Token(Token = "0x4000A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected readonly IList mCertificateAuthorities;

		[Token(Token = "0x1700027C")]
		public virtual byte[] CertificateTypes
		{
			[Token(Token = "0x6001569")]
			[Address(RVA = "0xF0AF2C", Offset = "0xF0AF2C", VA = "0xF0AF2C", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700027D")]
		public virtual IList SupportedSignatureAlgorithms
		{
			[Token(Token = "0x600156A")]
			[Address(RVA = "0xF0AF34", Offset = "0xF0AF34", VA = "0xF0AF34", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700027E")]
		public virtual IList CertificateAuthorities
		{
			[Token(Token = "0x600156B")]
			[Address(RVA = "0xF0AF3C", Offset = "0xF0AF3C", VA = "0xF0AF3C", Slot = "6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001568")]
		[Address(RVA = "0xF0AEEC", Offset = "0xF0AEEC", VA = "0xF0AEEC")]
		public CertificateRequest(byte[] certificateTypes, IList supportedSignatureAlgorithms, IList certificateAuthorities)
		{
		}

		[Token(Token = "0x600156C")]
		[Address(RVA = "0xF0AF44", Offset = "0xF0AF44", VA = "0xF0AF44", Slot = "7")]
		public virtual void Encode(Stream output)
		{
		}

		[Token(Token = "0x600156D")]
		[Address(RVA = "0xF0B7B8", Offset = "0xF0B7B8", VA = "0xF0B7B8")]
		public static CertificateRequest Parse(TlsContext context, Stream input)
		{
			return null;
		}
	}
	[Token(Token = "0x2000255")]
	public class CertificateStatus
	{
		[Token(Token = "0x4000A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly byte mStatusType;

		[Token(Token = "0x4000A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected readonly object mResponse;

		[Token(Token = "0x1700027F")]
		public virtual byte StatusType
		{
			[Token(Token = "0x600156F")]
			[Address(RVA = "0xF0BCA8", Offset = "0xF0BCA8", VA = "0xF0BCA8", Slot = "4")]
			get
			{
				return default(byte);
			}
		}

		[Token(Token = "0x17000280")]
		public virtual object Response
		{
			[Token(Token = "0x6001570")]
			[Address(RVA = "0xF0BCB0", Offset = "0xF0BCB0", VA = "0xF0BCB0", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600156E")]
		[Address(RVA = "0xF0BB0C", Offset = "0xF0BB0C", VA = "0xF0BB0C")]
		public CertificateStatus(byte statusType, object response)
		{
		}

		[Token(Token = "0x6001571")]
		[Address(RVA = "0xF0BCB8", Offset = "0xF0BCB8", VA = "0xF0BCB8", Slot = "6")]
		public virtual OcspResponse GetOcspResponse()
		{
			return null;
		}

		[Token(Token = "0x6001572")]
		[Address(RVA = "0xF0BD84", Offset = "0xF0BD84", VA = "0xF0BD84", Slot = "7")]
		public virtual void Encode(Stream output)
		{
		}

		[Token(Token = "0x6001573")]
		[Address(RVA = "0xF0BEC8", Offset = "0xF0BEC8", VA = "0xF0BEC8")]
		public static CertificateStatus Parse(Stream input)
		{
			return null;
		}

		[Token(Token = "0x6001574")]
		[Address(RVA = "0xF0BBC8", Offset = "0xF0BBC8", VA = "0xF0BBC8")]
		protected static bool IsCorrectType(byte statusType, object response)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000256")]
	public class CertificateStatusRequest
	{
		[Token(Token = "0x4000A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly byte mStatusType;

		[Token(Token = "0x4000A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected readonly object mRequest;

		[Token(Token = "0x17000281")]
		public virtual byte StatusType
		{
			[Token(Token = "0x6001576")]
			[Address(RVA = "0xF0C170", Offset = "0xF0C170", VA = "0xF0C170", Slot = "4")]
			get
			{
				return default(byte);
			}
		}

		[Token(Token = "0x17000282")]
		public virtual object Request
		{
			[Token(Token = "0x6001577")]
			[Address(RVA = "0xF0C178", Offset = "0xF0C178", VA = "0xF0C178", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001575")]
		[Address(RVA = "0xF0BFD4", Offset = "0xF0BFD4", VA = "0xF0BFD4")]
		public CertificateStatusRequest(byte statusType, object request)
		{
		}

		[Token(Token = "0x6001578")]
		[Address(RVA = "0xF0C180", Offset = "0xF0C180", VA = "0xF0C180", Slot = "6")]
		public virtual OcspStatusRequest GetOcspStatusRequest()
		{
			return null;
		}

		[Token(Token = "0x6001579")]
		[Address(RVA = "0xF0C24C", Offset = "0xF0C24C", VA = "0xF0C24C", Slot = "7")]
		public virtual void Encode(Stream output)
		{
		}

		[Token(Token = "0x600157A")]
		[Address(RVA = "0xF0C380", Offset = "0xF0C380", VA = "0xF0C380")]
		public static CertificateStatusRequest Parse(Stream input)
		{
			return null;
		}

		[Token(Token = "0x600157B")]
		[Address(RVA = "0xF0C090", Offset = "0xF0C090", VA = "0xF0C090")]
		protected static bool IsCorrectType(byte statusType, object request)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000257")]
	public abstract class CertificateStatusType
	{
		[Token(Token = "0x4000A61")]
		public const byte ocsp = 1;

		[Token(Token = "0x600157C")]
		[Address(RVA = "0xF0C710", Offset = "0xF0C710", VA = "0xF0C710")]
		protected CertificateStatusType()
		{
		}
	}
	[Token(Token = "0x2000258")]
	public class Chacha20Poly1305 : TlsCipher
	{
		[Token(Token = "0x4000A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly TlsContext context;

		[Token(Token = "0x4000A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected readonly ChaChaEngine encryptCipher;

		[Token(Token = "0x4000A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected readonly ChaChaEngine decryptCipher;

		[Token(Token = "0x600157D")]
		[Address(RVA = "0xF0C718", Offset = "0xF0C718", VA = "0xF0C718")]
		public Chacha20Poly1305(TlsContext context)
		{
		}

		[Token(Token = "0x600157E")]
		[Address(RVA = "0xF0C9CC", Offset = "0xF0C9CC", VA = "0xF0C9CC", Slot = "7")]
		public virtual int GetPlaintextLimit(int ciphertextLimit)
		{
			return default(int);
		}

		[Token(Token = "0x600157F")]
		[Address(RVA = "0xF0C9D4", Offset = "0xF0C9D4", VA = "0xF0C9D4", Slot = "8")]
		public virtual byte[] EncodePlaintext(long seqNo, byte type, byte[] plaintext, int offset, int len)
		{
			return null;
		}

		[Token(Token = "0x6001580")]
		[Address(RVA = "0xF0CB10", Offset = "0xF0CB10", VA = "0xF0CB10", Slot = "9")]
		public virtual byte[] DecodeCiphertext(long seqNo, byte type, byte[] ciphertext, int offset, int len)
		{
			return null;
		}

		[Token(Token = "0x6001581")]
		[Address(RVA = "0xF0CCC4", Offset = "0xF0CCC4", VA = "0xF0CCC4", Slot = "10")]
		protected virtual KeyParameter InitRecordMac(ChaChaEngine cipher, bool forEncryption, long seqNo)
		{
			return null;
		}

		[Token(Token = "0x6001582")]
		[Address(RVA = "0xF0CE4C", Offset = "0xF0CE4C", VA = "0xF0CE4C", Slot = "11")]
		protected virtual byte[] CalculateRecordMac(KeyParameter macKey, byte[] additionalData, byte[] buf, int off, int len)
		{
			return null;
		}

		[Token(Token = "0x6001583")]
		[Address(RVA = "0xF0CFB4", Offset = "0xF0CFB4", VA = "0xF0CFB4", Slot = "12")]
		protected virtual void UpdateRecordMac(IMac mac, byte[] buf, int off, int len)
		{
		}

		[Token(Token = "0x6001584")]
		[Address(RVA = "0xF0D114", Offset = "0xF0D114", VA = "0xF0D114", Slot = "13")]
		protected virtual byte[] GetAdditionalData(long seqNo, byte type, int len)
		{
			return null;
		}
	}
	[Token(Token = "0x2000259")]
	public abstract class ChangeCipherSpec
	{
		[Token(Token = "0x4000A65")]
		public const byte change_cipher_spec = 1;

		[Token(Token = "0x6001585")]
		[Address(RVA = "0xF0D274", Offset = "0xF0D274", VA = "0xF0D274")]
		protected ChangeCipherSpec()
		{
		}
	}
	[Token(Token = "0x200025A")]
	public abstract class CipherSuite
	{
		[Token(Token = "0x4000A66")]
		public const int TLS_NULL_WITH_NULL_NULL = 0;

		[Token(Token = "0x4000A67")]
		public const int TLS_RSA_WITH_NULL_MD5 = 1;

		[Token(Token = "0x4000A68")]
		public const int TLS_RSA_WITH_NULL_SHA = 2;

		[Token(Token = "0x4000A69")]
		public const int TLS_RSA_EXPORT_WITH_RC4_40_MD5 = 3;

		[Token(Token = "0x4000A6A")]
		public const int TLS_RSA_WITH_RC4_128_MD5 = 4;

		[Token(Token = "0x4000A6B")]
		public const int TLS_RSA_WITH_RC4_128_SHA = 5;

		[Token(Token = "0x4000A6C")]
		public const int TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5 = 6;

		[Token(Token = "0x4000A6D")]
		public const int TLS_RSA_WITH_IDEA_CBC_SHA = 7;

		[Token(Token = "0x4000A6E")]
		public const int TLS_RSA_EXPORT_WITH_DES40_CBC_SHA = 8;

		[Token(Token = "0x4000A6F")]
		public const int TLS_RSA_WITH_DES_CBC_SHA = 9;

		[Token(Token = "0x4000A70")]
		public const int TLS_RSA_WITH_3DES_EDE_CBC_SHA = 10;

		[Token(Token = "0x4000A71")]
		public const int TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA = 11;

		[Token(Token = "0x4000A72")]
		public const int TLS_DH_DSS_WITH_DES_CBC_SHA = 12;

		[Token(Token = "0x4000A73")]
		public const int TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA = 13;

		[Token(Token = "0x4000A74")]
		public const int TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA = 14;

		[Token(Token = "0x4000A75")]
		public const int TLS_DH_RSA_WITH_DES_CBC_SHA = 15;

		[Token(Token = "0x4000A76")]
		public const int TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA = 16;

		[Token(Token = "0x4000A77")]
		public const int TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA = 17;

		[Token(Token = "0x4000A78")]
		public const int TLS_DHE_DSS_WITH_DES_CBC_SHA = 18;

		[Token(Token = "0x4000A79")]
		public const int TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA = 19;

		[Token(Token = "0x4000A7A")]
		public const int TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA = 20;

		[Token(Token = "0x4000A7B")]
		public const int TLS_DHE_RSA_WITH_DES_CBC_SHA = 21;

		[Token(Token = "0x4000A7C")]
		public const int TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA = 22;

		[Token(Token = "0x4000A7D")]
		public const int TLS_DH_anon_EXPORT_WITH_RC4_40_MD5 = 23;

		[Token(Token = "0x4000A7E")]
		public const int TLS_DH_anon_WITH_RC4_128_MD5 = 24;

		[Token(Token = "0x4000A7F")]
		public const int TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA = 25;

		[Token(Token = "0x4000A80")]
		public const int TLS_DH_anon_WITH_DES_CBC_SHA = 26;

		[Token(Token = "0x4000A81")]
		public const int TLS_DH_anon_WITH_3DES_EDE_CBC_SHA = 27;

		[Token(Token = "0x4000A82")]
		public const int TLS_RSA_WITH_AES_128_CBC_SHA = 47;

		[Token(Token = "0x4000A83")]
		public const int TLS_DH_DSS_WITH_AES_128_CBC_SHA = 48;

		[Token(Token = "0x4000A84")]
		public const int TLS_DH_RSA_WITH_AES_128_CBC_SHA = 49;

		[Token(Token = "0x4000A85")]
		public const int TLS_DHE_DSS_WITH_AES_128_CBC_SHA = 50;

		[Token(Token = "0x4000A86")]
		public const int TLS_DHE_RSA_WITH_AES_128_CBC_SHA = 51;

		[Token(Token = "0x4000A87")]
		public const int TLS_DH_anon_WITH_AES_128_CBC_SHA = 52;

		[Token(Token = "0x4000A88")]
		public const int TLS_RSA_WITH_AES_256_CBC_SHA = 53;

		[Token(Token = "0x4000A89")]
		public const int TLS_DH_DSS_WITH_AES_256_CBC_SHA = 54;

		[Token(Token = "0x4000A8A")]
		public const int TLS_DH_RSA_WITH_AES_256_CBC_SHA = 55;

		[Token(Token = "0x4000A8B")]
		public const int TLS_DHE_DSS_WITH_AES_256_CBC_SHA = 56;

		[Token(Token = "0x4000A8C")]
		public const int TLS_DHE_RSA_WITH_AES_256_CBC_SHA = 57;

		[Token(Token = "0x4000A8D")]
		public const int TLS_DH_anon_WITH_AES_256_CBC_SHA = 58;

		[Token(Token = "0x4000A8E")]
		public const int TLS_RSA_WITH_CAMELLIA_128_CBC_SHA = 65;

		[Token(Token = "0x4000A8F")]
		public const int TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA = 66;

		[Token(Token = "0x4000A90")]
		public const int TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA = 67;

		[Token(Token = "0x4000A91")]
		public const int TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA = 68;

		[Token(Token = "0x4000A92")]
		public const int TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA = 69;

		[Token(Token = "0x4000A93")]
		public const int TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA = 70;

		[Token(Token = "0x4000A94")]
		public const int TLS_RSA_WITH_CAMELLIA_256_CBC_SHA = 132;

		[Token(Token = "0x4000A95")]
		public const int TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA = 133;

		[Token(Token = "0x4000A96")]
		public const int TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA = 134;

		[Token(Token = "0x4000A97")]
		public const int TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA = 135;

		[Token(Token = "0x4000A98")]
		public const int TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA = 136;

		[Token(Token = "0x4000A99")]
		public const int TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA = 137;

		[Token(Token = "0x4000A9A")]
		public const int TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 186;

		[Token(Token = "0x4000A9B")]
		public const int TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256 = 187;

		[Token(Token = "0x4000A9C")]
		public const int TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 188;

		[Token(Token = "0x4000A9D")]
		public const int TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256 = 189;

		[Token(Token = "0x4000A9E")]
		public const int TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 190;

		[Token(Token = "0x4000A9F")]
		public const int TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256 = 191;

		[Token(Token = "0x4000AA0")]
		public const int TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256 = 192;

		[Token(Token = "0x4000AA1")]
		public const int TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256 = 193;

		[Token(Token = "0x4000AA2")]
		public const int TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256 = 194;

		[Token(Token = "0x4000AA3")]
		public const int TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256 = 195;

		[Token(Token = "0x4000AA4")]
		public const int TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256 = 196;

		[Token(Token = "0x4000AA5")]
		public const int TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256 = 197;

		[Token(Token = "0x4000AA6")]
		public const int TLS_RSA_WITH_SEED_CBC_SHA = 150;

		[Token(Token = "0x4000AA7")]
		public const int TLS_DH_DSS_WITH_SEED_CBC_SHA = 151;

		[Token(Token = "0x4000AA8")]
		public const int TLS_DH_RSA_WITH_SEED_CBC_SHA = 152;

		[Token(Token = "0x4000AA9")]
		public const int TLS_DHE_DSS_WITH_SEED_CBC_SHA = 153;

		[Token(Token = "0x4000AAA")]
		public const int TLS_DHE_RSA_WITH_SEED_CBC_SHA = 154;

		[Token(Token = "0x4000AAB")]
		public const int TLS_DH_anon_WITH_SEED_CBC_SHA = 155;

		[Token(Token = "0x4000AAC")]
		public const int TLS_PSK_WITH_RC4_128_SHA = 138;

		[Token(Token = "0x4000AAD")]
		public const int TLS_PSK_WITH_3DES_EDE_CBC_SHA = 139;

		[Token(Token = "0x4000AAE")]
		public const int TLS_PSK_WITH_AES_128_CBC_SHA = 140;

		[Token(Token = "0x4000AAF")]
		public const int TLS_PSK_WITH_AES_256_CBC_SHA = 141;

		[Token(Token = "0x4000AB0")]
		public const int TLS_DHE_PSK_WITH_RC4_128_SHA = 142;

		[Token(Token = "0x4000AB1")]
		public const int TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA = 143;

		[Token(Token = "0x4000AB2")]
		public const int TLS_DHE_PSK_WITH_AES_128_CBC_SHA = 144;

		[Token(Token = "0x4000AB3")]
		public const int TLS_DHE_PSK_WITH_AES_256_CBC_SHA = 145;

		[Token(Token = "0x4000AB4")]
		public const int TLS_RSA_PSK_WITH_RC4_128_SHA = 146;

		[Token(Token = "0x4000AB5")]
		public const int TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA = 147;

		[Token(Token = "0x4000AB6")]
		public const int TLS_RSA_PSK_WITH_AES_128_CBC_SHA = 148;

		[Token(Token = "0x4000AB7")]
		public const int TLS_RSA_PSK_WITH_AES_256_CBC_SHA = 149;

		[Token(Token = "0x4000AB8")]
		public const int TLS_ECDH_ECDSA_WITH_NULL_SHA = 49153;

		[Token(Token = "0x4000AB9")]
		public const int TLS_ECDH_ECDSA_WITH_RC4_128_SHA = 49154;

		[Token(Token = "0x4000ABA")]
		public const int TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA = 49155;

		[Token(Token = "0x4000ABB")]
		public const int TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA = 49156;

		[Token(Token = "0x4000ABC")]
		public const int TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA = 49157;

		[Token(Token = "0x4000ABD")]
		public const int TLS_ECDHE_ECDSA_WITH_NULL_SHA = 49158;

		[Token(Token = "0x4000ABE")]
		public const int TLS_ECDHE_ECDSA_WITH_RC4_128_SHA = 49159;

		[Token(Token = "0x4000ABF")]
		public const int TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA = 49160;

		[Token(Token = "0x4000AC0")]
		public const int TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = 49161;

		[Token(Token = "0x4000AC1")]
		public const int TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = 49162;

		[Token(Token = "0x4000AC2")]
		public const int TLS_ECDH_RSA_WITH_NULL_SHA = 49163;

		[Token(Token = "0x4000AC3")]
		public const int TLS_ECDH_RSA_WITH_RC4_128_SHA = 49164;

		[Token(Token = "0x4000AC4")]
		public const int TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA = 49165;

		[Token(Token = "0x4000AC5")]
		public const int TLS_ECDH_RSA_WITH_AES_128_CBC_SHA = 49166;

		[Token(Token = "0x4000AC6")]
		public const int TLS_ECDH_RSA_WITH_AES_256_CBC_SHA = 49167;

		[Token(Token = "0x4000AC7")]
		public const int TLS_ECDHE_RSA_WITH_NULL_SHA = 49168;

		[Token(Token = "0x4000AC8")]
		public const int TLS_ECDHE_RSA_WITH_RC4_128_SHA = 49169;

		[Token(Token = "0x4000AC9")]
		public const int TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA = 49170;

		[Token(Token = "0x4000ACA")]
		public const int TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA = 49171;

		[Token(Token = "0x4000ACB")]
		public const int TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA = 49172;

		[Token(Token = "0x4000ACC")]
		public const int TLS_ECDH_anon_WITH_NULL_SHA = 49173;

		[Token(Token = "0x4000ACD")]
		public const int TLS_ECDH_anon_WITH_RC4_128_SHA = 49174;

		[Token(Token = "0x4000ACE")]
		public const int TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA = 49175;

		[Token(Token = "0x4000ACF")]
		public const int TLS_ECDH_anon_WITH_AES_128_CBC_SHA = 49176;

		[Token(Token = "0x4000AD0")]
		public const int TLS_ECDH_anon_WITH_AES_256_CBC_SHA = 49177;

		[Token(Token = "0x4000AD1")]
		public const int TLS_PSK_WITH_NULL_SHA = 44;

		[Token(Token = "0x4000AD2")]
		public const int TLS_DHE_PSK_WITH_NULL_SHA = 45;

		[Token(Token = "0x4000AD3")]
		public const int TLS_RSA_PSK_WITH_NULL_SHA = 46;

		[Token(Token = "0x4000AD4")]
		public const int TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA = 49178;

		[Token(Token = "0x4000AD5")]
		public const int TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA = 49179;

		[Token(Token = "0x4000AD6")]
		public const int TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA = 49180;

		[Token(Token = "0x4000AD7")]
		public const int TLS_SRP_SHA_WITH_AES_128_CBC_SHA = 49181;

		[Token(Token = "0x4000AD8")]
		public const int TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA = 49182;

		[Token(Token = "0x4000AD9")]
		public const int TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA = 49183;

		[Token(Token = "0x4000ADA")]
		public const int TLS_SRP_SHA_WITH_AES_256_CBC_SHA = 49184;

		[Token(Token = "0x4000ADB")]
		public const int TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA = 49185;

		[Token(Token = "0x4000ADC")]
		public const int TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA = 49186;

		[Token(Token = "0x4000ADD")]
		public const int TLS_RSA_WITH_NULL_SHA256 = 59;

		[Token(Token = "0x4000ADE")]
		public const int TLS_RSA_WITH_AES_128_CBC_SHA256 = 60;

		[Token(Token = "0x4000ADF")]
		public const int TLS_RSA_WITH_AES_256_CBC_SHA256 = 61;

		[Token(Token = "0x4000AE0")]
		public const int TLS_DH_DSS_WITH_AES_128_CBC_SHA256 = 62;

		[Token(Token = "0x4000AE1")]
		public const int TLS_DH_RSA_WITH_AES_128_CBC_SHA256 = 63;

		[Token(Token = "0x4000AE2")]
		public const int TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 = 64;

		[Token(Token = "0x4000AE3")]
		public const int TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 = 103;

		[Token(Token = "0x4000AE4")]
		public const int TLS_DH_DSS_WITH_AES_256_CBC_SHA256 = 104;

		[Token(Token = "0x4000AE5")]
		public const int TLS_DH_RSA_WITH_AES_256_CBC_SHA256 = 105;

		[Token(Token = "0x4000AE6")]
		public const int TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 = 106;

		[Token(Token = "0x4000AE7")]
		public const int TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 = 107;

		[Token(Token = "0x4000AE8")]
		public const int TLS_DH_anon_WITH_AES_128_CBC_SHA256 = 108;

		[Token(Token = "0x4000AE9")]
		public const int TLS_DH_anon_WITH_AES_256_CBC_SHA256 = 109;

		[Token(Token = "0x4000AEA")]
		public const int TLS_RSA_WITH_AES_128_GCM_SHA256 = 156;

		[Token(Token = "0x4000AEB")]
		public const int TLS_RSA_WITH_AES_256_GCM_SHA384 = 157;

		[Token(Token = "0x4000AEC")]
		public const int TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 = 158;

		[Token(Token = "0x4000AED")]
		public const int TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 = 159;

		[Token(Token = "0x4000AEE")]
		public const int TLS_DH_RSA_WITH_AES_128_GCM_SHA256 = 160;

		[Token(Token = "0x4000AEF")]
		public const int TLS_DH_RSA_WITH_AES_256_GCM_SHA384 = 161;

		[Token(Token = "0x4000AF0")]
		public const int TLS_DHE_DSS_WITH_AES_128_GCM_SHA256 = 162;

		[Token(Token = "0x4000AF1")]
		public const int TLS_DHE_DSS_WITH_AES_256_GCM_SHA384 = 163;

		[Token(Token = "0x4000AF2")]
		public const int TLS_DH_DSS_WITH_AES_128_GCM_SHA256 = 164;

		[Token(Token = "0x4000AF3")]
		public const int TLS_DH_DSS_WITH_AES_256_GCM_SHA384 = 165;

		[Token(Token = "0x4000AF4")]
		public const int TLS_DH_anon_WITH_AES_128_GCM_SHA256 = 166;

		[Token(Token = "0x4000AF5")]
		public const int TLS_DH_anon_WITH_AES_256_GCM_SHA384 = 167;

		[Token(Token = "0x4000AF6")]
		public const int TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 = 49187;

		[Token(Token = "0x4000AF7")]
		public const int TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 = 49188;

		[Token(Token = "0x4000AF8")]
		public const int TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 = 49189;

		[Token(Token = "0x4000AF9")]
		public const int TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 = 49190;

		[Token(Token = "0x4000AFA")]
		public const int TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 = 49191;

		[Token(Token = "0x4000AFB")]
		public const int TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 = 49192;

		[Token(Token = "0x4000AFC")]
		public const int TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 = 49193;

		[Token(Token = "0x4000AFD")]
		public const int TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 = 49194;

		[Token(Token = "0x4000AFE")]
		public const int TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = 49195;

		[Token(Token = "0x4000AFF")]
		public const int TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = 49196;

		[Token(Token = "0x4000B00")]
		public const int TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 = 49197;

		[Token(Token = "0x4000B01")]
		public const int TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 = 49198;

		[Token(Token = "0x4000B02")]
		public const int TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = 49199;

		[Token(Token = "0x4000B03")]
		public const int TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = 49200;

		[Token(Token = "0x4000B04")]
		public const int TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 = 49201;

		[Token(Token = "0x4000B05")]
		public const int TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 = 49202;

		[Token(Token = "0x4000B06")]
		public const int TLS_PSK_WITH_AES_128_GCM_SHA256 = 168;

		[Token(Token = "0x4000B07")]
		public const int TLS_PSK_WITH_AES_256_GCM_SHA384 = 169;

		[Token(Token = "0x4000B08")]
		public const int TLS_DHE_PSK_WITH_AES_128_GCM_SHA256 = 170;

		[Token(Token = "0x4000B09")]
		public const int TLS_DHE_PSK_WITH_AES_256_GCM_SHA384 = 171;

		[Token(Token = "0x4000B0A")]
		public const int TLS_RSA_PSK_WITH_AES_128_GCM_SHA256 = 172;

		[Token(Token = "0x4000B0B")]
		public const int TLS_RSA_PSK_WITH_AES_256_GCM_SHA384 = 173;

		[Token(Token = "0x4000B0C")]
		public const int TLS_PSK_WITH_AES_128_CBC_SHA256 = 174;

		[Token(Token = "0x4000B0D")]
		public const int TLS_PSK_WITH_AES_256_CBC_SHA384 = 175;

		[Token(Token = "0x4000B0E")]
		public const int TLS_PSK_WITH_NULL_SHA256 = 176;

		[Token(Token = "0x4000B0F")]
		public const int TLS_PSK_WITH_NULL_SHA384 = 177;

		[Token(Token = "0x4000B10")]
		public const int TLS_DHE_PSK_WITH_AES_128_CBC_SHA256 = 178;

		[Token(Token = "0x4000B11")]
		public const int TLS_DHE_PSK_WITH_AES_256_CBC_SHA384 = 179;

		[Token(Token = "0x4000B12")]
		public const int TLS_DHE_PSK_WITH_NULL_SHA256 = 180;

		[Token(Token = "0x4000B13")]
		public const int TLS_DHE_PSK_WITH_NULL_SHA384 = 181;

		[Token(Token = "0x4000B14")]
		public const int TLS_RSA_PSK_WITH_AES_128_CBC_SHA256 = 182;

		[Token(Token = "0x4000B15")]
		public const int TLS_RSA_PSK_WITH_AES_256_CBC_SHA384 = 183;

		[Token(Token = "0x4000B16")]
		public const int TLS_RSA_PSK_WITH_NULL_SHA256 = 184;

		[Token(Token = "0x4000B17")]
		public const int TLS_RSA_PSK_WITH_NULL_SHA384 = 185;

		[Token(Token = "0x4000B18")]
		public const int TLS_ECDHE_PSK_WITH_RC4_128_SHA = 49203;

		[Token(Token = "0x4000B19")]
		public const int TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA = 49204;

		[Token(Token = "0x4000B1A")]
		public const int TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA = 49205;

		[Token(Token = "0x4000B1B")]
		public const int TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA = 49206;

		[Token(Token = "0x4000B1C")]
		public const int TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256 = 49207;

		[Token(Token = "0x4000B1D")]
		public const int TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384 = 49208;

		[Token(Token = "0x4000B1E")]
		public const int TLS_ECDHE_PSK_WITH_NULL_SHA = 49209;

		[Token(Token = "0x4000B1F")]
		public const int TLS_ECDHE_PSK_WITH_NULL_SHA256 = 49210;

		[Token(Token = "0x4000B20")]
		public const int TLS_ECDHE_PSK_WITH_NULL_SHA384 = 49211;

		[Token(Token = "0x4000B21")]
		public const int TLS_EMPTY_RENEGOTIATION_INFO_SCSV = 255;

		[Token(Token = "0x4000B22")]
		public const int TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = 49266;

		[Token(Token = "0x4000B23")]
		public const int TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = 49267;

		[Token(Token = "0x4000B24")]
		public const int TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = 49268;

		[Token(Token = "0x4000B25")]
		public const int TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = 49269;

		[Token(Token = "0x4000B26")]
		public const int TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 49270;

		[Token(Token = "0x4000B27")]
		public const int TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384 = 49271;

		[Token(Token = "0x4000B28")]
		public const int TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 49272;

		[Token(Token = "0x4000B29")]
		public const int TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384 = 49273;

		[Token(Token = "0x4000B2A")]
		public const int TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256 = 49274;

		[Token(Token = "0x4000B2B")]
		public const int TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384 = 49275;

		[Token(Token = "0x4000B2C")]
		public const int TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256 = 49276;

		[Token(Token = "0x4000B2D")]
		public const int TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384 = 49277;

		[Token(Token = "0x4000B2E")]
		public const int TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256 = 49278;

		[Token(Token = "0x4000B2F")]
		public const int TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384 = 49279;

		[Token(Token = "0x4000B30")]
		public const int TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256 = 49280;

		[Token(Token = "0x4000B31")]
		public const int TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384 = 49281;

		[Token(Token = "0x4000B32")]
		public const int TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256 = 49282;

		[Token(Token = "0x4000B33")]
		public const int TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384 = 49283;

		[Token(Token = "0x4000B34")]
		public const int TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256 = 49284;

		[Token(Token = "0x4000B35")]
		public const int TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384 = 49285;

		[Token(Token = "0x4000B36")]
		public const int TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256 = 49286;

		[Token(Token = "0x4000B37")]
		public const int TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384 = 49287;

		[Token(Token = "0x4000B38")]
		public const int TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256 = 49288;

		[Token(Token = "0x4000B39")]
		public const int TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384 = 49289;

		[Token(Token = "0x4000B3A")]
		public const int TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256 = 49290;

		[Token(Token = "0x4000B3B")]
		public const int TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384 = 49291;

		[Token(Token = "0x4000B3C")]
		public const int TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256 = 49292;

		[Token(Token = "0x4000B3D")]
		public const int TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384 = 49293;

		[Token(Token = "0x4000B3E")]
		public const int TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256 = 49294;

		[Token(Token = "0x4000B3F")]
		public const int TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384 = 49295;

		[Token(Token = "0x4000B40")]
		public const int TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256 = 49296;

		[Token(Token = "0x4000B41")]
		public const int TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384 = 49297;

		[Token(Token = "0x4000B42")]
		public const int TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256 = 49298;

		[Token(Token = "0x4000B43")]
		public const int TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384 = 49299;

		[Token(Token = "0x4000B44")]
		public const int TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 49300;

		[Token(Token = "0x4000B45")]
		public const int TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 49301;

		[Token(Token = "0x4000B46")]
		public const int TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 49302;

		[Token(Token = "0x4000B47")]
		public const int TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 49303;

		[Token(Token = "0x4000B48")]
		public const int TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 49304;

		[Token(Token = "0x4000B49")]
		public const int TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 49305;

		[Token(Token = "0x4000B4A")]
		public const int TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 49306;

		[Token(Token = "0x4000B4B")]
		public const int TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 49307;

		[Token(Token = "0x4000B4C")]
		public const int TLS_RSA_WITH_AES_128_CCM = 49308;

		[Token(Token = "0x4000B4D")]
		public const int TLS_RSA_WITH_AES_256_CCM = 49309;

		[Token(Token = "0x4000B4E")]
		public const int TLS_DHE_RSA_WITH_AES_128_CCM = 49310;

		[Token(Token = "0x4000B4F")]
		public const int TLS_DHE_RSA_WITH_AES_256_CCM = 49311;

		[Token(Token = "0x4000B50")]
		public const int TLS_RSA_WITH_AES_128_CCM_8 = 49312;

		[Token(Token = "0x4000B51")]
		public const int TLS_RSA_WITH_AES_256_CCM_8 = 49313;

		[Token(Token = "0x4000B52")]
		public const int TLS_DHE_RSA_WITH_AES_128_CCM_8 = 49314;

		[Token(Token = "0x4000B53")]
		public const int TLS_DHE_RSA_WITH_AES_256_CCM_8 = 49315;

		[Token(Token = "0x4000B54")]
		public const int TLS_PSK_WITH_AES_128_CCM = 49316;

		[Token(Token = "0x4000B55")]
		public const int TLS_PSK_WITH_AES_256_CCM = 49317;

		[Token(Token = "0x4000B56")]
		public const int TLS_DHE_PSK_WITH_AES_128_CCM = 49318;

		[Token(Token = "0x4000B57")]
		public const int TLS_DHE_PSK_WITH_AES_256_CCM = 49319;

		[Token(Token = "0x4000B58")]
		public const int TLS_PSK_WITH_AES_128_CCM_8 = 49320;

		[Token(Token = "0x4000B59")]
		public const int TLS_PSK_WITH_AES_256_CCM_8 = 49321;

		[Token(Token = "0x4000B5A")]
		public const int TLS_PSK_DHE_WITH_AES_128_CCM_8 = 49322;

		[Token(Token = "0x4000B5B")]
		public const int TLS_PSK_DHE_WITH_AES_256_CCM_8 = 49323;

		[Token(Token = "0x4000B5C")]
		public const int TLS_ECDHE_ECDSA_WITH_AES_128_CCM = 49324;

		[Token(Token = "0x4000B5D")]
		public const int TLS_ECDHE_ECDSA_WITH_AES_256_CCM = 49325;

		[Token(Token = "0x4000B5E")]
		public const int TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8 = 49326;

		[Token(Token = "0x4000B5F")]
		public const int TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8 = 49327;

		[Token(Token = "0x4000B60")]
		public const int TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 = 52243;

		[Token(Token = "0x4000B61")]
		public const int TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 = 52244;

		[Token(Token = "0x4000B62")]
		public const int TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256 = 52245;

		[Token(Token = "0x4000B63")]
		public const int TLS_RSA_WITH_ESTREAM_SALSA20_SHA1 = 58384;

		[Token(Token = "0x4000B64")]
		public const int TLS_RSA_WITH_SALSA20_SHA1 = 58385;

		[Token(Token = "0x4000B65")]
		public const int TLS_ECDHE_RSA_WITH_ESTREAM_SALSA20_SHA1 = 58386;

		[Token(Token = "0x4000B66")]
		public const int TLS_ECDHE_RSA_WITH_SALSA20_SHA1 = 58387;

		[Token(Token = "0x4000B67")]
		public const int TLS_ECDHE_ECDSA_WITH_ESTREAM_SALSA20_SHA1 = 58388;

		[Token(Token = "0x4000B68")]
		public const int TLS_ECDHE_ECDSA_WITH_SALSA20_SHA1 = 58389;

		[Token(Token = "0x4000B69")]
		public const int TLS_PSK_WITH_ESTREAM_SALSA20_SHA1 = 58390;

		[Token(Token = "0x4000B6A")]
		public const int TLS_PSK_WITH_SALSA20_SHA1 = 58391;

		[Token(Token = "0x4000B6B")]
		public const int TLS_ECDHE_PSK_WITH_ESTREAM_SALSA20_SHA1 = 58392;

		[Token(Token = "0x4000B6C")]
		public const int TLS_ECDHE_PSK_WITH_SALSA20_SHA1 = 58393;

		[Token(Token = "0x4000B6D")]
		public const int TLS_RSA_PSK_WITH_ESTREAM_SALSA20_SHA1 = 58394;

		[Token(Token = "0x4000B6E")]
		public const int TLS_RSA_PSK_WITH_SALSA20_SHA1 = 58395;

		[Token(Token = "0x4000B6F")]
		public const int TLS_DHE_PSK_WITH_ESTREAM_SALSA20_SHA1 = 58396;

		[Token(Token = "0x4000B70")]
		public const int TLS_DHE_PSK_WITH_SALSA20_SHA1 = 58397;

		[Token(Token = "0x4000B71")]
		public const int TLS_DHE_RSA_WITH_ESTREAM_SALSA20_SHA1 = 58398;

		[Token(Token = "0x4000B72")]
		public const int TLS_DHE_RSA_WITH_SALSA20_SHA1 = 58399;

		[Token(Token = "0x4000B73")]
		public const int TLS_FALLBACK_SCSV = 22016;

		[Token(Token = "0x6001586")]
		[Address(RVA = "0xF0D27C", Offset = "0xF0D27C", VA = "0xF0D27C")]
		public static bool IsScsv(int cipherSuite)
		{
			return default(bool);
		}

		[Token(Token = "0x6001587")]
		[Address(RVA = "0xF0D29C", Offset = "0xF0D29C", VA = "0xF0D29C")]
		protected CipherSuite()
		{
		}
	}
	[Token(Token = "0x200025B")]
	public abstract class CipherType
	{
		[Token(Token = "0x4000B74")]
		public const int stream = 0;

		[Token(Token = "0x4000B75")]
		public const int block = 1;

		[Token(Token = "0x4000B76")]
		public const int aead = 2;

		[Token(Token = "0x6001588")]
		[Address(RVA = "0xF0D2A4", Offset = "0xF0D2A4", VA = "0xF0D2A4")]
		protected CipherType()
		{
		}
	}
	[Token(Token = "0x200025C")]
	public abstract class ClientCertificateType
	{
		[Token(Token = "0x4000B77")]
		public const byte rsa_sign = 1;

		[Token(Token = "0x4000B78")]
		public const byte dss_sign = 2;

		[Token(Token = "0x4000B79")]
		public const byte rsa_fixed_dh = 3;

		[Token(Token = "0x4000B7A")]
		public const byte dss_fixed_dh = 4;

		[Token(Token = "0x4000B7B")]
		public const byte rsa_ephemeral_dh_RESERVED = 5;

		[Token(Token = "0x4000B7C")]
		public const byte dss_ephemeral_dh_RESERVED = 6;

		[Token(Token = "0x4000B7D")]
		public const byte fortezza_dms_RESERVED = 20;

		[Token(Token = "0x4000B7E")]
		public const byte ecdsa_sign = 64;

		[Token(Token = "0x4000B7F")]
		public const byte rsa_fixed_ecdh = 65;

		[Token(Token = "0x4000B80")]
		public const byte ecdsa_fixed_ecdh = 66;

		[Token(Token = "0x6001589")]
		[Address(RVA = "0xF0D2AC", Offset = "0xF0D2AC", VA = "0xF0D2AC")]
		protected ClientCertificateType()
		{
		}
	}
	[Token(Token = "0x200025D")]
	internal class CombinedHash : TlsHandshakeHash, IDigest
	{
		[Token(Token = "0x4000B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected TlsContext mContext;

		[Token(Token = "0x4000B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected IDigest mMd5;

		[Token(Token = "0x4000B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected IDigest mSha1;

		[Token(Token = "0x17000283")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001593")]
			[Address(RVA = "0xF0D59C", Offset = "0xF0D59C", VA = "0xF0D59C", Slot = "25")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600158A")]
		[Address(RVA = "0xF0D2B4", Offset = "0xF0D2B4", VA = "0xF0D2B4")]
		internal CombinedHash()
		{
		}

		[Token(Token = "0x600158B")]
		[Address(RVA = "0xF0D340", Offset = "0xF0D340", VA = "0xF0D340")]
		internal CombinedHash(CombinedHash t)
		{
		}

		[Token(Token = "0x600158C")]
		[Address(RVA = "0xF0D3F4", Offset = "0xF0D3F4", VA = "0xF0D3F4", Slot = "18")]
		public virtual void Init(TlsContext context)
		{
		}

		[Token(Token = "0x600158D")]
		[Address(RVA = "0xF0D3FC", Offset = "0xF0D3FC", VA = "0xF0D3FC", Slot = "19")]
		public virtual TlsHandshakeHash NotifyPrfDetermined()
		{
			return null;
		}

		[Token(Token = "0x600158E")]
		[Address(RVA = "0xF0D400", Offset = "0xF0D400", VA = "0xF0D400", Slot = "20")]
		public virtual void TrackHashAlgorithm(byte hashAlgorithm)
		{
		}

		[Token(Token = "0x600158F")]
		[Address(RVA = "0xF0D46C", Offset = "0xF0D46C", VA = "0xF0D46C", Slot = "21")]
		public virtual void SealHashAlgorithms()
		{
		}

		[Token(Token = "0x6001590")]
		[Address(RVA = "0xF0D470", Offset = "0xF0D470", VA = "0xF0D470", Slot = "22")]
		public virtual TlsHandshakeHash StopTracking()
		{
			return null;
		}

		[Token(Token = "0x6001591")]
		[Address(RVA = "0xF0D4D0", Offset = "0xF0D4D0", VA = "0xF0D4D0", Slot = "23")]
		public virtual IDigest ForkPrfHash()
		{
			return null;
		}

		[Token(Token = "0x6001592")]
		[Address(RVA = "0xF0D530", Offset = "0xF0D530", VA = "0xF0D530", Slot = "24")]
		public virtual byte[] GetFinalHash(byte hashAlgorithm)
		{
			return null;
		}

		[Token(Token = "0x6001594")]
		[Address(RVA = "0xF0D6DC", Offset = "0xF0D6DC", VA = "0xF0D6DC", Slot = "26")]
		public virtual int GetByteLength()
		{
			return default(int);
		}

		[Token(Token = "0x6001595")]
		[Address(RVA = "0xF0D840", Offset = "0xF0D840", VA = "0xF0D840", Slot = "27")]
		public virtual int GetDigestSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001596")]
		[Address(RVA = "0xF0D974", Offset = "0xF0D974", VA = "0xF0D974", Slot = "28")]
		public virtual void Update(byte input)
		{
		}

		[Token(Token = "0x6001597")]
		[Address(RVA = "0xF0DAA8", Offset = "0xF0DAA8", VA = "0xF0DAA8", Slot = "29")]
		public virtual void BlockUpdate(byte[] input, int inOff, int len)
		{
		}

		[Token(Token = "0x6001598")]
		[Address(RVA = "0xF0DBFC", Offset = "0xF0DBFC", VA = "0xF0DBFC", Slot = "30")]
		public virtual int DoFinal(byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001599")]
		[Address(RVA = "0xF0DE00", Offset = "0xF0DE00", VA = "0xF0DE00", Slot = "31")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x600159A")]
		[Address(RVA = "0xF0DF28", Offset = "0xF0DF28", VA = "0xF0DF28", Slot = "32")]
		protected virtual void Ssl3Complete(IDigest d, byte[] ipad, byte[] opad, int padLength)
		{
		}
	}
	[Token(Token = "0x200025E")]
	public abstract class CompressionMethod
	{
		[Token(Token = "0x4000B84")]
		public const byte cls_null = 0;

		[Token(Token = "0x4000B85")]
		public const byte DEFLATE = 1;

		[Token(Token = "0x600159B")]
		[Address(RVA = "0xF0E28C", Offset = "0xF0E28C", VA = "0xF0E28C")]
		protected CompressionMethod()
		{
		}
	}
	[Token(Token = "0x200025F")]
	public abstract class ConnectionEnd
	{
		[Token(Token = "0x4000B86")]
		public const int server = 0;

		[Token(Token = "0x4000B87")]
		public const int client = 1;

		[Token(Token = "0x600159C")]
		[Address(RVA = "0xF0E294", Offset = "0xF0E294", VA = "0xF0E294")]
		protected ConnectionEnd()
		{
		}
	}
	[Token(Token = "0x2000260")]
	public abstract class ContentType
	{
		[Token(Token = "0x4000B88")]
		public const byte change_cipher_spec = 20;

		[Token(Token = "0x4000B89")]
		public const byte alert = 21;

		[Token(Token = "0x4000B8A")]
		public const byte handshake = 22;

		[Token(Token = "0x4000B8B")]
		public const byte application_data = 23;

		[Token(Token = "0x4000B8C")]
		public const byte heartbeat = 24;

		[Token(Token = "0x600159D")]
		[Address(RVA = "0xF0E29C", Offset = "0xF0E29C", VA = "0xF0E29C")]
		protected ContentType()
		{
		}
	}
	[Token(Token = "0x2000261")]
	public interface DatagramTransport
	{
		[Token(Token = "0x600159E")]
		int GetReceiveLimit();

		[Token(Token = "0x600159F")]
		int GetSendLimit();

		[Token(Token = "0x60015A0")]
		int Receive(byte[] buf, int off, int len, int waitMillis);

		[Token(Token = "0x60015A1")]
		void Send(byte[] buf, int off, int len);

		[Token(Token = "0x60015A2")]
		void Close();
	}
	[Token(Token = "0x2000262")]
	public class DefaultTlsCipherFactory : AbstractTlsCipherFactory
	{
		[Token(Token = "0x60015A3")]
		[Address(RVA = "0xF0E2A4", Offset = "0xF0E2A4", VA = "0xF0E2A4", Slot = "5")]
		public override TlsCipher CreateCipher(TlsContext context, int encryptionAlgorithm, int macAlgorithm)
		{
			return null;
		}

		[Token(Token = "0x60015A4")]
		[Address(RVA = "0xF0E4D8", Offset = "0xF0E4D8", VA = "0xF0E4D8", Slot = "6")]
		protected virtual TlsBlockCipher CreateAESCipher(TlsContext context, int cipherKeySize, int macAlgorithm)
		{
			return null;
		}

		[Token(Token = "0x60015A5")]
		[Address(RVA = "0xF0F180", Offset = "0xF0F180", VA = "0xF0F180", Slot = "7")]
		protected virtual TlsBlockCipher CreateCamelliaCipher(TlsContext context, int cipherKeySize, int macAlgorithm)
		{
			return null;
		}

		[Token(Token = "0x60015A6")]
		[Address(RVA = "0xF0F284", Offset = "0xF0F284", VA = "0xF0F284", Slot = "8")]
		protected virtual TlsCipher CreateChaCha20Poly1305(TlsContext context)
		{
			return null;
		}

		[Token(Token = "0x60015A7")]
		[Address(RVA = "0xF0F2E4", Offset = "0xF0F2E4", VA = "0xF0F2E4", Slot = "9")]
		protected virtual TlsAeadCipher CreateCipher_Aes_Ccm(TlsContext context, int cipherKeySize, int macSize)
		{
			return null;
		}

		[Token(Token = "0x60015A8")]
		[Address(RVA = "0xF0F750", Offset = "0xF0F750", VA = "0xF0F750", Slot = "10")]
		protected virtual TlsAeadCipher CreateCipher_Aes_Gcm(TlsContext context, int cipherKeySize, int macSize)
		{
			return null;
		}

		[Token(Token = "0x60015A9")]
		[Address(RVA = "0xF0F810", Offset = "0xF0F810", VA = "0xF0F810", Slot = "11")]
		protected virtual TlsAeadCipher CreateCipher_Camellia_Gcm(TlsContext context, int cipherKeySize, int macSize)
		{
			return null;
		}

		[Token(Token = "0x60015AA")]
		[Address(RVA = "0xF0F8D0", Offset = "0xF0F8D0", VA = "0xF0F8D0", Slot = "12")]
		protected virtual TlsBlockCipher CreateDesEdeCipher(TlsContext context, int macAlgorithm)
		{
			return null;
		}

		[Token(Token = "0x60015AB")]
		[Address(RVA = "0xF0F9C8", Offset = "0xF0F9C8", VA = "0xF0F9C8", Slot = "13")]
		protected virtual TlsNullCipher CreateNullCipher(TlsContext context, int macAlgorithm)
		{
			return null;
		}

		[Token(Token = "0x60015AC")]
		[Address(RVA = "0xF0FA80", Offset = "0xF0FA80", VA = "0xF0FA80", Slot = "14")]
		protected virtual TlsStreamCipher CreateRC4Cipher(TlsContext context, int cipherKeySize, int macAlgorithm)
		{
			return null;
		}

		[Token(Token = "0x60015AD")]
		[Address(RVA = "0xF0FB94", Offset = "0xF0FB94", VA = "0xF0FB94", Slot = "15")]
		protected virtual TlsStreamCipher CreateSalsa20Cipher(TlsContext context, int rounds, int cipherKeySize, int macAlgorithm)
		{
			return null;
		}

		[Token(Token = "0x60015AE")]
		[Address(RVA = "0xF0FCB4", Offset = "0xF0FCB4", VA = "0xF0FCB4", Slot = "16")]
		protected virtual TlsBlockCipher CreateSeedCipher(TlsContext context, int macAlgorithm)
		{
			return null;
		}

		[Token(Token = "0x60015AF")]
		[Address(RVA = "0xF0FDAC", Offset = "0xF0FDAC", VA = "0xF0FDAC", Slot = "17")]
		protected virtual IBlockCipher CreateAesEngine()
		{
			return null;
		}

		[Token(Token = "0x60015B0")]
		[Address(RVA = "0xF0FE08", Offset = "0xF0FE08", VA = "0xF0FE08", Slot = "18")]
		protected virtual IBlockCipher CreateCamelliaEngine()
		{
			return null;
		}

		[Token(Token = "0x60015B1")]
		[Address(RVA = "0xF0FE64", Offset = "0xF0FE64", VA = "0xF0FE64", Slot = "19")]
		protected virtual IBlockCipher CreateAesBlockCipher()
		{
			return null;
		}

		[Token(Token = "0x60015B2")]
		[Address(RVA = "0xF0FEE4", Offset = "0xF0FEE4", VA = "0xF0FEE4", Slot = "20")]
		protected virtual IAeadBlockCipher CreateAeadBlockCipher_Aes_Ccm()
		{
			return null;
		}

		[Token(Token = "0x60015B3")]
		[Address(RVA = "0xF0FF64", Offset = "0xF0FF64", VA = "0xF0FF64", Slot = "21")]
		protected virtual IAeadBlockCipher CreateAeadBlockCipher_Aes_Gcm()
		{
			return null;
		}

		[Token(Token = "0x60015B4")]
		[Address(RVA = "0xF0FFE4", Offset = "0xF0FFE4", VA = "0xF0FFE4", Slot = "22")]
		protected virtual IAeadBlockCipher CreateAeadBlockCipher_Camellia_Gcm()
		{
			return null;
		}

		[Token(Token = "0x60015B5")]
		[Address(RVA = "0xF10064", Offset = "0xF10064", VA = "0xF10064", Slot = "23")]
		protected virtual IBlockCipher CreateCamelliaBlockCipher()
		{
			return null;
		}

		[Token(Token = "0x60015B6")]
		[Address(RVA = "0xF100E4", Offset = "0xF100E4", VA = "0xF100E4", Slot = "24")]
		protected virtual IBlockCipher CreateDesEdeBlockCipher()
		{
			return null;
		}

		[Token(Token = "0x60015B7")]
		[Address(RVA = "0xF10160", Offset = "0xF10160", VA = "0xF10160", Slot = "25")]
		protected virtual IStreamCipher CreateRC4StreamCipher()
		{
			return null;
		}

		[Token(Token = "0x60015B8")]
		[Address(RVA = "0xF101BC", Offset = "0xF101BC", VA = "0xF101BC", Slot = "26")]
		protected virtual IStreamCipher CreateSalsa20StreamCipher(int rounds)
		{
			return null;
		}

		[Token(Token = "0x60015B9")]
		[Address(RVA = "0xF10220", Offset = "0xF10220", VA = "0xF10220", Slot = "27")]
		protected virtual IBlockCipher CreateSeedBlockCipher()
		{
			return null;
		}

		[Token(Token = "0x60015BA")]
		[Address(RVA = "0xF1029C", Offset = "0xF1029C", VA = "0xF1029C", Slot = "28")]
		protected virtual IDigest CreateHMacDigest(int macAlgorithm)
		{
			return null;
		}

		[Token(Token = "0x60015BB")]
		[Address(RVA = "0xF06D58", Offset = "0xF06D58", VA = "0xF06D58")]
		public DefaultTlsCipherFactory()
		{
		}
	}
	[Token(Token = "0x2000263")]
	public abstract class DefaultTlsClient : AbstractTlsClient
	{
		[Token(Token = "0x60015BC")]
		[Address(RVA = "0xF10408", Offset = "0xF10408", VA = "0xF10408")]
		public DefaultTlsClient()
		{
		}

		[Token(Token = "0x60015BD")]
		[Address(RVA = "0xF1040C", Offset = "0xF1040C", VA = "0xF1040C")]
		public DefaultTlsClient(TlsCipherFactory cipherFactory)
		{
		}

		[Token(Token = "0x60015BE")]
		[Address(RVA = "0xF10438", Offset = "0xF10438", VA = "0xF10438", Slot = "48")]
		public override int[] GetCipherSuites()
		{
			return null;
		}

		[Token(Token = "0x60015BF")]
		[Address(RVA = "0xF104A4", Offset = "0xF104A4", VA = "0xF104A4", Slot = "55")]
		public override TlsKeyExchange GetKeyExchange()
		{
			return null;
		}

		[Token(Token = "0x60015C0")]
		[Address(RVA = "0xF105C8", Offset = "0xF105C8", VA = "0xF105C8", Slot = "59")]
		protected virtual TlsKeyExchange CreateDHKeyExchange(int keyExchange)
		{
			return null;
		}

		[Token(Token = "0x60015C1")]
		[Address(RVA = "0xF10750", Offset = "0xF10750", VA = "0xF10750", Slot = "60")]
		protected virtual TlsKeyExchange CreateDheKeyExchange(int keyExchange)
		{
			return null;
		}

		[Token(Token = "0x60015C2")]
		[Address(RVA = "0xF107CC", Offset = "0xF107CC", VA = "0xF107CC", Slot = "61")]
		protected virtual TlsKeyExchange CreateECDHKeyExchange(int keyExchange)
		{
			return null;
		}

		[Token(Token = "0x60015C3")]
		[Address(RVA = "0xF1085C", Offset = "0xF1085C", VA = "0xF1085C", Slot = "62")]
		protected virtual TlsKeyExchange CreateECDheKeyExchange(int keyExchange)
		{
			return null;
		}

		[Token(Token = "0x60015C4")]
		[Address(RVA = "0xF108EC", Offset = "0xF108EC", VA = "0xF108EC", Slot = "63")]
		protected virtual TlsKeyExchange CreateRsaKeyExchange()
		{
			return null;
		}
	}
	[Token(Token = "0x2000264")]
	internal class DeferredHash : TlsHandshakeHash, IDigest
	{
		[Token(Token = "0x4000B8D")]
		protected const int BUFFERING_HASH_LIMIT = 4;

		[Token(Token = "0x4000B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected TlsContext mContext;

		[Token(Token = "0x4000B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private DigestInputBuffer mBuf;

		[Token(Token = "0x4000B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private IDictionary mHashes;

		[Token(Token = "0x4000B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int mPrfHashAlgorithm;

		[Token(Token = "0x17000284")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x60015CE")]
			[Address(RVA = "0xF11354", Offset = "0xF11354", VA = "0xF11354", Slot = "25")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60015C5")]
		[Address(RVA = "0xF10954", Offset = "0xF10954", VA = "0xF10954")]
		internal DeferredHash()
		{
		}

		[Token(Token = "0x60015C6")]
		[Address(RVA = "0xF109FC", Offset = "0xF109FC", VA = "0xF109FC")]
		private DeferredHash(byte prfHashAlgorithm, IDigest prfHash)
		{
		}

		[Token(Token = "0x60015C7")]
		[Address(RVA = "0xF10B34", Offset = "0xF10B34", VA = "0xF10B34", Slot = "18")]
		public virtual void Init(TlsContext context)
		{
		}

		[Token(Token = "0x60015C8")]
		[Address(RVA = "0xF10B3C", Offset = "0xF10B3C", VA = "0xF10B3C", Slot = "19")]
		public virtual TlsHandshakeHash NotifyPrfDetermined()
		{
			return null;
		}

		[Token(Token = "0x60015C9")]
		[Address(RVA = "0xF10D3C", Offset = "0xF10D3C", VA = "0xF10D3C", Slot = "20")]
		public virtual void TrackHashAlgorithm(byte hashAlgorithm)
		{
		}

		[Token(Token = "0x60015CA")]
		[Address(RVA = "0xF10DE0", Offset = "0xF10DE0", VA = "0xF10DE0", Slot = "21")]
		public virtual void SealHashAlgorithms()
		{
		}

		[Token(Token = "0x60015CB")]
		[Address(RVA = "0xF10DF0", Offset = "0xF10DF0", VA = "0xF10DF0", Slot = "22")]
		public virtual TlsHandshakeHash StopTracking()
		{
			return null;
		}

		[Token(Token = "0x60015CC")]
		[Address(RVA = "0xF10F9C", Offset = "0xF10F9C", VA = "0xF10F9C", Slot = "23")]
		public virtual IDigest ForkPrfHash()
		{
			return null;
		}

		[Token(Token = "0x60015CD")]
		[Address(RVA = "0xF11154", Offset = "0xF11154", VA = "0xF11154", Slot = "24")]
		public virtual byte[] GetFinalHash(byte hashAlgorithm)
		{
			return null;
		}

		[Token(Token = "0x60015CF")]
		[Address(RVA = "0xF113C0", Offset = "0xF113C0", VA = "0xF113C0", Slot = "26")]
		public virtual int GetByteLength()
		{
			return default(int);
		}

		[Token(Token = "0x60015D0")]
		[Address(RVA = "0xF1142C", Offset = "0xF1142C", VA = "0xF1142C", Slot = "27")]
		public virtual int GetDigestSize()
		{
			return default(int);
		}

		[Token(Token = "0x60015D1")]
		[Address(RVA = "0xF11498", Offset = "0xF11498", VA = "0xF11498", Slot = "28")]
		public virtual void Update(byte input)
		{
		}

		[Token(Token = "0x60015D2")]
		[Address(RVA = "0xF11868", Offset = "0xF11868", VA = "0xF11868", Slot = "29")]
		public virtual void BlockUpdate(byte[] input, int inOff, int len)
		{
		}

		[Token(Token = "0x60015D3")]
		[Address(RVA = "0xF11C5C", Offset = "0xF11C5C", VA = "0xF11C5C", Slot = "30")]
		public virtual int DoFinal(byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x60015D4")]
		[Address(RVA = "0xF11CC8", Offset = "0xF11CC8", VA = "0xF11CC8", Slot = "31")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x60015D5")]
		[Address(RVA = "0xF12080", Offset = "0xF12080", VA = "0xF12080", Slot = "32")]
		protected virtual void CheckStopBuffering()
		{
		}

		[Token(Token = "0x60015D6")]
		[Address(RVA = "0xF1242C", Offset = "0xF1242C", VA = "0xF1242C", Slot = "33")]
		protected virtual void CheckTrackingHash(byte hashAlgorithm)
		{
		}
	}
	[Token(Token = "0x2000265")]
	internal class DigestInputBuffer : MemoryStream
	{
		[Token(Token = "0x200066C")]
		private class DigStream : BaseOutputStream
		{
			[Token(Token = "0x40025AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private readonly IDigest d;

			[Token(Token = "0x60034DB")]
			[Address(RVA = "0xF125DC", Offset = "0xF125DC", VA = "0xF125DC")]
			internal DigStream(IDigest d)
			{
			}

			[Token(Token = "0x60034DC")]
			[Address(RVA = "0xF12608", Offset = "0xF12608", VA = "0xF12608", Slot = "30")]
			public override void WriteByte(byte b)
			{
			}

			[Token(Token = "0x60034DD")]
			[Address(RVA = "0xF126CC", Offset = "0xF126CC", VA = "0xF126CC", Slot = "29")]
			public override void Write(byte[] buf, int off, int len)
			{
			}
		}

		[Token(Token = "0x60015D7")]
		[Address(RVA = "0xF10CBC", Offset = "0xF10CBC", VA = "0xF10CBC")]
		internal void UpdateDigest(IDigest d)
		{
		}

		[Token(Token = "0x60015D8")]
		[Address(RVA = "0xF109F4", Offset = "0xF109F4", VA = "0xF109F4")]
		public DigestInputBuffer()
		{
		}
	}
	[Token(Token = "0x2000266")]
	public class DigitallySigned
	{
		[Token(Token = "0x4000B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly SignatureAndHashAlgorithm mAlgorithm;

		[Token(Token = "0x4000B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected readonly byte[] mSignature;

		[Token(Token = "0x17000285")]
		public virtual SignatureAndHashAlgorithm Algorithm
		{
			[Token(Token = "0x60015DA")]
			[Address(RVA = "0xF12848", Offset = "0xF12848", VA = "0xF12848", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000286")]
		public virtual byte[] Signature
		{
			[Token(Token = "0x60015DB")]
			[Address(RVA = "0xF12850", Offset = "0xF12850", VA = "0xF12850", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60015D9")]
		[Address(RVA = "0xF127A8", Offset = "0xF127A8", VA = "0xF127A8")]
		public DigitallySigned(SignatureAndHashAlgorithm algorithm, byte[] signature)
		{
		}

		[Token(Token = "0x60015DC")]
		[Address(RVA = "0xF12858", Offset = "0xF12858", VA = "0xF12858", Slot = "6")]
		public virtual void Encode(Stream output)
		{
		}

		[Token(Token = "0x60015DD")]
		[Address(RVA = "0xF128EC", Offset = "0xF128EC", VA = "0xF128EC")]
		public static DigitallySigned Parse(TlsContext context, Stream input)
		{
			return null;
		}
	}
	[Token(Token = "0x2000267")]
	public abstract class ECBasisType
	{
		[Token(Token = "0x4000B94")]
		public const byte ec_basis_trinomial = 1;

		[Token(Token = "0x4000B95")]
		public const byte ec_basis_pentanomial = 2;

		[Token(Token = "0x60015DE")]
		[Address(RVA = "0xF12A78", Offset = "0xF12A78", VA = "0xF12A78")]
		public static bool IsValid(byte ecBasisType)
		{
			return default(bool);
		}

		[Token(Token = "0x60015DF")]
		[Address(RVA = "0xF12A8C", Offset = "0xF12A8C", VA = "0xF12A8C")]
		protected ECBasisType()
		{
		}
	}
	[Token(Token = "0x2000268")]
	public abstract class ECCurveType
	{
		[Token(Token = "0x4000B96")]
		public const byte explicit_prime = 1;

		[Token(Token = "0x4000B97")]
		public const byte explicit_char2 = 2;

		[Token(Token = "0x4000B98")]
		public const byte named_curve = 3;

		[Token(Token = "0x60015E0")]
		[Address(RVA = "0xF12A94", Offset = "0xF12A94", VA = "0xF12A94")]
		protected ECCurveType()
		{
		}
	}
	[Token(Token = "0x2000269")]
	public abstract class ECPointFormat
	{
		[Token(Token = "0x4000B99")]
		public const byte uncompressed = 0;

		[Token(Token = "0x4000B9A")]
		public const byte ansiX962_compressed_prime = 1;

		[Token(Token = "0x4000B9B")]
		public const byte ansiX962_compressed_char2 = 2;

		[Token(Token = "0x60015E1")]
		[Address(RVA = "0xF12A9C", Offset = "0xF12A9C", VA = "0xF12A9C")]
		protected ECPointFormat()
		{
		}
	}
	[Token(Token = "0x200026A")]
	public abstract class EncryptionAlgorithm
	{
		[Token(Token = "0x4000B9C")]
		public const int NULL = 0;

		[Token(Token = "0x4000B9D")]
		public const int RC4_40 = 1;

		[Token(Token = "0x4000B9E")]
		public const int RC4_128 = 2;

		[Token(Token = "0x4000B9F")]
		public const int RC2_CBC_40 = 3;

		[Token(Token = "0x4000BA0")]
		public const int IDEA_CBC = 4;

		[Token(Token = "0x4000BA1")]
		public const int DES40_CBC = 5;

		[Token(Token = "0x4000BA2")]
		public const int DES_CBC = 6;

		[Token(Token = "0x4000BA3")]
		public const int cls_3DES_EDE_CBC = 7;

		[Token(Token = "0x4000BA4")]
		public const int AES_128_CBC = 8;

		[Token(Token = "0x4000BA5")]
		public const int AES_256_CBC = 9;

		[Token(Token = "0x4000BA6")]
		public const int AES_128_GCM = 10;

		[Token(Token = "0x4000BA7")]
		public const int AES_256_GCM = 11;

		[Token(Token = "0x4000BA8")]
		public const int CAMELLIA_128_CBC = 12;

		[Token(Token = "0x4000BA9")]
		public const int CAMELLIA_256_CBC = 13;

		[Token(Token = "0x4000BAA")]
		public const int SEED_CBC = 14;

		[Token(Token = "0x4000BAB")]
		public const int AES_128_CCM = 15;

		[Token(Token = "0x4000BAC")]
		public const int AES_128_CCM_8 = 16;

		[Token(Token = "0x4000BAD")]
		public const int AES_256_CCM = 17;

		[Token(Token = "0x4000BAE")]
		public const int AES_256_CCM_8 = 18;

		[Token(Token = "0x4000BAF")]
		public const int CAMELLIA_128_GCM = 19;

		[Token(Token = "0x4000BB0")]
		public const int CAMELLIA_256_GCM = 20;

		[Token(Token = "0x4000BB1")]
		public const int ESTREAM_SALSA20 = 100;

		[Token(Token = "0x4000BB2")]
		public const int SALSA20 = 101;

		[Token(Token = "0x4000BB3")]
		public const int AEAD_CHACHA20_POLY1305 = 102;

		[Token(Token = "0x60015E2")]
		[Address(RVA = "0xF12AA4", Offset = "0xF12AA4", VA = "0xF12AA4")]
		protected EncryptionAlgorithm()
		{
		}
	}
	[Token(Token = "0x200026B")]
	public abstract class ExporterLabel
	{
		[Token(Token = "0x4000BB4")]
		public const string client_finished = "client finished";

		[Token(Token = "0x4000BB5")]
		public const string server_finished = "server finished";

		[Token(Token = "0x4000BB6")]
		public const string master_secret = "master secret";

		[Token(Token = "0x4000BB7")]
		public const string key_expansion = "key expansion";

		[Token(Token = "0x4000BB8")]
		public const string client_EAP_encryption = "client EAP encryption";

		[Token(Token = "0x4000BB9")]
		public const string ttls_keying_material = "ttls keying material";

		[Token(Token = "0x4000BBA")]
		public const string ttls_challenge = "ttls challenge";

		[Token(Token = "0x4000BBB")]
		public const string dtls_srtp = "EXTRACTOR-dtls_srtp";

		[Token(Token = "0x4000BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string extended_master_secret;

		[Token(Token = "0x60015E3")]
		[Address(RVA = "0xF12AAC", Offset = "0xF12AAC", VA = "0xF12AAC")]
		protected ExporterLabel()
		{
		}
	}
	[Token(Token = "0x200026C")]
	public abstract class ExtensionType
	{
		[Token(Token = "0x4000BBD")]
		public const int server_name = 0;

		[Token(Token = "0x4000BBE")]
		public const int max_fragment_length = 1;

		[Token(Token = "0x4000BBF")]
		public const int client_certificate_url = 2;

		[Token(Token = "0x4000BC0")]
		public const int trusted_ca_keys = 3;

		[Token(Token = "0x4000BC1")]
		public const int truncated_hmac = 4;

		[Token(Token = "0x4000BC2")]
		public const int status_request = 5;

		[Token(Token = "0x4000BC3")]
		public const int user_mapping = 6;

		[Token(Token = "0x4000BC4")]
		public const int elliptic_curves = 10;

		[Token(Token = "0x4000BC5")]
		public const int ec_point_formats = 11;

		[Token(Token = "0x4000BC6")]
		public const int srp = 12;

		[Token(Token = "0x4000BC7")]
		public const int signature_algorithms = 13;

		[Token(Token = "0x4000BC8")]
		public const int use_srtp = 14;

		[Token(Token = "0x4000BC9")]
		public const int heartbeat = 15;

		[Token(Token = "0x4000BCA")]
		public const int encrypt_then_mac = 22;

		[Token(Token = "0x4000BCB")]
		public const int extended_master_secret = 23;

		[Token(Token = "0x4000BCC")]
		public const int session_ticket = 35;

		[Token(Token = "0x4000BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int negotiated_ff_dhe_groups;

		[Token(Token = "0x4000BCE")]
		public const int renegotiation_info = 65281;

		[Token(Token = "0x60015E5")]
		[Address(RVA = "0xF12B10", Offset = "0xF12B10", VA = "0xF12B10")]
		protected ExtensionType()
		{
		}
	}
	[Token(Token = "0x200026D")]
	public abstract class FiniteFieldDheGroup
	{
		[Token(Token = "0x4000BCF")]
		public const byte ffdhe2432 = 0;

		[Token(Token = "0x4000BD0")]
		public const byte ffdhe3072 = 1;

		[Token(Token = "0x4000BD1")]
		public const byte ffdhe4096 = 2;

		[Token(Token = "0x4000BD2")]
		public const byte ffdhe6144 = 3;

		[Token(Token = "0x4000BD3")]
		public const byte ffdhe8192 = 4;

		[Token(Token = "0x60015E7")]
		[Address(RVA = "0xF12B6C", Offset = "0xF12B6C", VA = "0xF12B6C")]
		public static bool IsValid(byte group)
		{
			return default(bool);
		}

		[Token(Token = "0x60015E8")]
		[Address(RVA = "0xF12B7C", Offset = "0xF12B7C", VA = "0xF12B7C")]
		protected FiniteFieldDheGroup()
		{
		}
	}
	[Token(Token = "0x200026E")]
	public abstract class HandshakeType
	{
		[Token(Token = "0x4000BD4")]
		public const byte hello_request = 0;

		[Token(Token = "0x4000BD5")]
		public const byte client_hello = 1;

		[Token(Token = "0x4000BD6")]
		public const byte server_hello = 2;

		[Token(Token = "0x4000BD7")]
		public const byte certificate = 11;

		[Token(Token = "0x4000BD8")]
		public const byte server_key_exchange = 12;

		[Token(Token = "0x4000BD9")]
		public const byte certificate_request = 13;

		[Token(Token = "0x4000BDA")]
		public const byte server_hello_done = 14;

		[Token(Token = "0x4000BDB")]
		public const byte certificate_verify = 15;

		[Token(Token = "0x4000BDC")]
		public const byte client_key_exchange = 16;

		[Token(Token = "0x4000BDD")]
		public const byte finished = 20;

		[Token(Token = "0x4000BDE")]
		public const byte certificate_url = 21;

		[Token(Token = "0x4000BDF")]
		public const byte certificate_status = 22;

		[Token(Token = "0x4000BE0")]
		public const byte hello_verify_request = 3;

		[Token(Token = "0x4000BE1")]
		public const byte supplemental_data = 23;

		[Token(Token = "0x4000BE2")]
		public const byte session_ticket = 4;

		[Token(Token = "0x60015E9")]
		[Address(RVA = "0xF12B84", Offset = "0xF12B84", VA = "0xF12B84")]
		protected HandshakeType()
		{
		}
	}
	[Token(Token = "0x200026F")]
	public abstract class HashAlgorithm
	{
		[Token(Token = "0x4000BE3")]
		public const byte none = 0;

		[Token(Token = "0x4000BE4")]
		public const byte md5 = 1;

		[Token(Token = "0x4000BE5")]
		public const byte sha1 = 2;

		[Token(Token = "0x4000BE6")]
		public const byte sha224 = 3;

		[Token(Token = "0x4000BE7")]
		public const byte sha256 = 4;

		[Token(Token = "0x4000BE8")]
		public const byte sha384 = 5;

		[Token(Token = "0x4000BE9")]
		public const byte sha512 = 6;

		[Token(Token = "0x60015EA")]
		[Address(RVA = "0xF12B8C", Offset = "0xF12B8C", VA = "0xF12B8C")]
		protected HashAlgorithm()
		{
		}
	}
	[Token(Token = "0x2000270")]
	public class HeartbeatExtension
	{
		[Token(Token = "0x4000BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly byte mMode;

		[Token(Token = "0x17000287")]
		public virtual byte Mode
		{
			[Token(Token = "0x60015EC")]
			[Address(RVA = "0xF12C5C", Offset = "0xF12C5C", VA = "0xF12C5C", Slot = "4")]
			get
			{
				return default(byte);
			}
		}

		[Token(Token = "0x60015EB")]
		[Address(RVA = "0xF12B94", Offset = "0xF12B94", VA = "0xF12B94")]
		public HeartbeatExtension(byte mode)
		{
		}

		[Token(Token = "0x60015ED")]
		[Address(RVA = "0xF12C64", Offset = "0xF12C64", VA = "0xF12C64", Slot = "5")]
		public virtual void Encode(Stream output)
		{
		}

		[Token(Token = "0x60015EE")]
		[Address(RVA = "0xF12CE0", Offset = "0xF12CE0", VA = "0xF12CE0")]
		public static HeartbeatExtension Parse(Stream input)
		{
			return null;
		}
	}
	[Token(Token = "0x2000271")]
	public abstract class HeartbeatMessageType
	{
		[Token(Token = "0x4000BEB")]
		public const byte heartbeat_request = 1;

		[Token(Token = "0x4000BEC")]
		public const byte heartbeat_response = 2;

		[Token(Token = "0x60015EF")]
		[Address(RVA = "0xF12DB4", Offset = "0xF12DB4", VA = "0xF12DB4")]
		public static bool IsValid(byte heartbeatMessageType)
		{
			return default(bool);
		}

		[Token(Token = "0x60015F0")]
		[Address(RVA = "0xF12DC8", Offset = "0xF12DC8", VA = "0xF12DC8")]
		protected HeartbeatMessageType()
		{
		}
	}
	[Token(Token = "0x2000272")]
	public abstract class HeartbeatMode
	{
		[Token(Token = "0x4000BED")]
		public const byte peer_allowed_to_send = 1;

		[Token(Token = "0x4000BEE")]
		public const byte peer_not_allowed_to_send = 2;

		[Token(Token = "0x60015F1")]
		[Address(RVA = "0xF12C48", Offset = "0xF12C48", VA = "0xF12C48")]
		public static bool IsValid(byte heartbeatMode)
		{
			return default(bool);
		}

		[Token(Token = "0x60015F2")]
		[Address(RVA = "0xF12DD0", Offset = "0xF12DD0", VA = "0xF12DD0")]
		protected HeartbeatMode()
		{
		}
	}
	[Token(Token = "0x2000273")]
	public interface ICertificateVerifyer
	{
		[Token(Token = "0x60015F3")]
		bool IsValid(Uri targetUri, X509CertificateStructure[] certs);
	}
	[Token(Token = "0x2000274")]
	public abstract class KeyExchangeAlgorithm
	{
		[Token(Token = "0x4000BEF")]
		public const int NULL = 0;

		[Token(Token = "0x4000BF0")]
		public const int RSA = 1;

		[Token(Token = "0x4000BF1")]
		public const int RSA_EXPORT = 2;

		[Token(Token = "0x4000BF2")]
		public const int DHE_DSS = 3;

		[Token(Token = "0x4000BF3")]
		public const int DHE_DSS_EXPORT = 4;

		[Token(Token = "0x4000BF4")]
		public const int DHE_RSA = 5;

		[Token(Token = "0x4000BF5")]
		public const int DHE_RSA_EXPORT = 6;

		[Token(Token = "0x4000BF6")]
		public const int DH_DSS = 7;

		[Token(Token = "0x4000BF7")]
		public const int DH_DSS_EXPORT = 8;

		[Token(Token = "0x4000BF8")]
		public const int DH_RSA = 9;

		[Token(Token = "0x4000BF9")]
		public const int DH_RSA_EXPORT = 10;

		[Token(Token = "0x4000BFA")]
		public const int DH_anon = 11;

		[Token(Token = "0x4000BFB")]
		public const int DH_anon_EXPORT = 12;

		[Token(Token = "0x4000BFC")]
		public const int PSK = 13;

		[Token(Token = "0x4000BFD")]
		public const int DHE_PSK = 14;

		[Token(Token = "0x4000BFE")]
		public const int RSA_PSK = 15;

		[Token(Token = "0x4000BFF")]
		public const int ECDH_ECDSA = 16;

		[Token(Token = "0x4000C00")]
		public const int ECDHE_ECDSA = 17;

		[Token(Token = "0x4000C01")]
		public const int ECDH_RSA = 18;

		[Token(Token = "0x4000C02")]
		public const int ECDHE_RSA = 19;

		[Token(Token = "0x4000C03")]
		public const int ECDH_anon = 20;

		[Token(Token = "0x4000C04")]
		public const int SRP = 21;

		[Token(Token = "0x4000C05")]
		public const int SRP_DSS = 22;

		[Token(Token = "0x4000C06")]
		public const int SRP_RSA = 23;

		[Token(Token = "0x4000C07")]
		public const int ECDHE_PSK = 24;

		[Token(Token = "0x60015F4")]
		[Address(RVA = "0xF12DD8", Offset = "0xF12DD8", VA = "0xF12DD8")]
		protected KeyExchangeAlgorithm()
		{
		}
	}
	[Token(Token = "0x2000275")]
	public interface IClientCredentialsProvider
	{
		[Token(Token = "0x60015F5")]
		TlsCredentials GetClientCredentials(TlsContext context, CertificateRequest certificateRequest);
	}
	[Token(Token = "0x2000276")]
	public class LegacyTlsAuthentication : TlsAuthentication
	{
		[Token(Token = "0x4000C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected ICertificateVerifyer verifyer;

		[Token(Token = "0x4000C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected IClientCredentialsProvider credProvider;

		[Token(Token = "0x4000C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Uri TargetUri;

		[Token(Token = "0x60015F6")]
		[Address(RVA = "0xF12DE0", Offset = "0xF12DE0", VA = "0xF12DE0")]
		public LegacyTlsAuthentication(Uri targetUri, ICertificateVerifyer verifyer, IClientCredentialsProvider prov)
		{
		}

		[Token(Token = "0x60015F7")]
		[Address(RVA = "0xF12E20", Offset = "0xF12E20", VA = "0xF12E20", Slot = "6")]
		public virtual void NotifyServerCertificate(Certificate serverCertificate)
		{
		}

		[Token(Token = "0x60015F8")]
		[Address(RVA = "0xF12F3C", Offset = "0xF12F3C", VA = "0xF12F3C", Slot = "7")]
		public virtual TlsCredentials GetClientCredentials(TlsContext context, CertificateRequest certificateRequest)
		{
			return null;
		}
	}
	[Token(Token = "0x2000277")]
	public sealed class LegacyTlsClient : DefaultTlsClient
	{
		[Token(Token = "0x4000C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly Uri TargetUri;

		[Token(Token = "0x4000C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly ICertificateVerifyer verifyer;

		[Token(Token = "0x4000C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly IClientCredentialsProvider credProvider;

		[Token(Token = "0x60015F9")]
		[Address(RVA = "0xF13014", Offset = "0xF13014", VA = "0xF13014")]
		public LegacyTlsClient(Uri targetUri, ICertificateVerifyer verifyer, IClientCredentialsProvider prov, List<string> hostNames)
		{
		}

		[Token(Token = "0x60015FA")]
		[Address(RVA = "0xF1305C", Offset = "0xF1305C", VA = "0xF1305C", Slot = "56")]
		public override TlsAuthentication GetAuthentication()
		{
			return null;
		}
	}
	[Token(Token = "0x2000278")]
	public abstract class MacAlgorithm
	{
		[Token(Token = "0x4000C0E")]
		public const int cls_null = 0;

		[Token(Token = "0x4000C0F")]
		public const int md5 = 1;

		[Token(Token = "0x4000C10")]
		public const int sha = 2;

		[Token(Token = "0x4000C11")]
		public const int hmac_md5 = 1;

		[Token(Token = "0x4000C12")]
		public const int hmac_sha1 = 2;

		[Token(Token = "0x4000C13")]
		public const int hmac_sha256 = 3;

		[Token(Token = "0x4000C14")]
		public const int hmac_sha384 = 4;

		[Token(Token = "0x4000C15")]
		public const int hmac_sha512 = 5;

		[Token(Token = "0x60015FB")]
		[Address(RVA = "0xF130DC", Offset = "0xF130DC", VA = "0xF130DC")]
		protected MacAlgorithm()
		{
		}
	}
	[Token(Token = "0x2000279")]
	public abstract class MaxFragmentLength
	{
		[Token(Token = "0x4000C16")]
		public const byte pow2_9 = 1;

		[Token(Token = "0x4000C17")]
		public const byte pow2_10 = 2;

		[Token(Token = "0x4000C18")]
		public const byte pow2_11 = 3;

		[Token(Token = "0x4000C19")]
		public const byte pow2_12 = 4;

		[Token(Token = "0x60015FC")]
		[Address(RVA = "0xF08D34", Offset = "0xF08D34", VA = "0xF08D34")]
		public static bool IsValid(byte maxFragmentLength)
		{
			return default(bool);
		}

		[Token(Token = "0x60015FD")]
		[Address(RVA = "0xF130E4", Offset = "0xF130E4", VA = "0xF130E4")]
		protected MaxFragmentLength()
		{
		}
	}
	[Token(Token = "0x200027A")]
	public abstract class NameType
	{
		[Token(Token = "0x4000C1A")]
		public const byte host_name = 0;

		[Token(Token = "0x60015FE")]
		[Address(RVA = "0xF130EC", Offset = "0xF130EC", VA = "0xF130EC")]
		protected NameType()
		{
		}
	}
	[Token(Token = "0x200027B")]
	public abstract class NamedCurve
	{
		[Token(Token = "0x4000C1B")]
		public const int sect163k1 = 1;

		[Token(Token = "0x4000C1C")]
		public const int sect163r1 = 2;

		[Token(Token = "0x4000C1D")]
		public const int sect163r2 = 3;

		[Token(Token = "0x4000C1E")]
		public const int sect193r1 = 4;

		[Token(Token = "0x4000C1F")]
		public const int sect193r2 = 5;

		[Token(Token = "0x4000C20")]
		public const int sect233k1 = 6;

		[Token(Token = "0x4000C21")]
		public const int sect233r1 = 7;

		[Token(Token = "0x4000C22")]
		public const int sect239k1 = 8;

		[Token(Token = "0x4000C23")]
		public const int sect283k1 = 9;

		[Token(Token = "0x4000C24")]
		public const int sect283r1 = 10;

		[Token(Token = "0x4000C25")]
		public const int sect409k1 = 11;

		[Token(Token = "0x4000C26")]
		public const int sect409r1 = 12;

		[Token(Token = "0x4000C27")]
		public const int sect571k1 = 13;

		[Token(Token = "0x4000C28")]
		public const int sect571r1 = 14;

		[Token(Token = "0x4000C29")]
		public const int secp160k1 = 15;

		[Token(Token = "0x4000C2A")]
		public const int secp160r1 = 16;

		[Token(Token = "0x4000C2B")]
		public const int secp160r2 = 17;

		[Token(Token = "0x4000C2C")]
		public const int secp192k1 = 18;

		[Token(Token = "0x4000C2D")]
		public const int secp192r1 = 19;

		[Token(Token = "0x4000C2E")]
		public const int secp224k1 = 20;

		[Token(Token = "0x4000C2F")]
		public const int secp224r1 = 21;

		[Token(Token = "0x4000C30")]
		public const int secp256k1 = 22;

		[Token(Token = "0x4000C31")]
		public const int secp256r1 = 23;

		[Token(Token = "0x4000C32")]
		public const int secp384r1 = 24;

		[Token(Token = "0x4000C33")]
		public const int secp521r1 = 25;

		[Token(Token = "0x4000C34")]
		public const int brainpoolP256r1 = 26;

		[Token(Token = "0x4000C35")]
		public const int brainpoolP384r1 = 27;

		[Token(Token = "0x4000C36")]
		public const int brainpoolP512r1 = 28;

		[Token(Token = "0x4000C37")]
		public const int arbitrary_explicit_prime_curves = 65281;

		[Token(Token = "0x4000C38")]
		public const int arbitrary_explicit_char2_curves = 65282;

		[Token(Token = "0x60015FF")]
		[Address(RVA = "0xF089CC", Offset = "0xF089CC", VA = "0xF089CC")]
		public static bool IsValid(int namedCurve)
		{
			return default(bool);
		}

		[Token(Token = "0x6001600")]
		[Address(RVA = "0xF089F4", Offset = "0xF089F4", VA = "0xF089F4")]
		public static bool RefersToASpecificNamedCurve(int namedCurve)
		{
			return default(bool);
		}

		[Token(Token = "0x6001601")]
		[Address(RVA = "0xF130F4", Offset = "0xF130F4", VA = "0xF130F4")]
		protected NamedCurve()
		{
		}
	}
	[Token(Token = "0x200027C")]
	public class NewSessionTicket
	{
		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly long mTicketLifetimeHint;

		[Token(Token = "0x4000C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected readonly byte[] mTicket;

		[Token(Token = "0x17000288")]
		public virtual long TicketLifetimeHint
		{
			[Token(Token = "0x6001603")]
			[Address(RVA = "0xF130FC", Offset = "0xF130FC", VA = "0xF130FC", Slot = "4")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x17000289")]
		public virtual byte[] Ticket
		{
			[Token(Token = "0x6001604")]
			[Address(RVA = "0xF13104", Offset = "0xF13104", VA = "0xF13104", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001602")]
		[Address(RVA = "0xF09628", Offset = "0xF09628", VA = "0xF09628")]
		public NewSessionTicket(long ticketLifetimeHint, byte[] ticket)
		{
		}

		[Token(Token = "0x6001605")]
		[Address(RVA = "0xF1310C", Offset = "0xF1310C", VA = "0xF1310C", Slot = "6")]
		public virtual void Encode(Stream output)
		{
		}

		[Token(Token = "0x6001606")]
		[Address(RVA = "0xF13198", Offset = "0xF13198", VA = "0xF13198")]
		public static NewSessionTicket Parse(Stream input)
		{
			return null;
		}
	}
	[Token(Token = "0x200027D")]
	public class OcspStatusRequest
	{
		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly IList mResponderIDList;

		[Token(Token = "0x4000C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected readonly X509Extensions mRequestExtensions;

		[Token(Token = "0x1700028A")]
		public virtual IList ResponderIDList
		{
			[Token(Token = "0x6001608")]
			[Address(RVA = "0xF13280", Offset = "0xF13280", VA = "0xF13280", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700028B")]
		public virtual X509Extensions RequestExtensions
		{
			[Token(Token = "0x6001609")]
			[Address(RVA = "0xF13288", Offset = "0xF13288", VA = "0xF13288", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001607")]
		[Address(RVA = "0xF13248", Offset = "0xF13248", VA = "0xF13248")]
		public OcspStatusRequest(IList responderIDList, X509Extensions requestExtensions)
		{
		}

		[Token(Token = "0x600160A")]
		[Address(RVA = "0xF13290", Offset = "0xF13290", VA = "0xF13290", Slot = "6")]
		public virtual void Encode(Stream output)
		{
		}

		[Token(Token = "0x600160B")]
		[Address(RVA = "0xF0C460", Offset = "0xF0C460", VA = "0xF0C460")]
		public static OcspStatusRequest Parse(Stream input)
		{
			return null;
		}
	}
	[Token(Token = "0x200027E")]
	public abstract class PrfAlgorithm
	{
		[Token(Token = "0x4000C3D")]
		public const int tls_prf_legacy = 0;

		[Token(Token = "0x4000C3E")]
		public const int tls_prf_sha256 = 1;

		[Token(Token = "0x4000C3F")]
		public const int tls_prf_sha384 = 2;

		[Token(Token = "0x600160C")]
		[Address(RVA = "0xF13684", Offset = "0xF13684", VA = "0xF13684")]
		protected PrfAlgorithm()
		{
		}
	}
	[Token(Token = "0x200027F")]
	public sealed class ProtocolVersion
	{
		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ProtocolVersion SSLv3;

		[Token(Token = "0x4000C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly ProtocolVersion TLSv10;

		[Token(Token = "0x4000C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly ProtocolVersion TLSv11;

		[Token(Token = "0x4000C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly ProtocolVersion TLSv12;

		[Token(Token = "0x4000C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly ProtocolVersion DTLSv10;

		[Token(Token = "0x4000C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly ProtocolVersion DTLSv12;

		[Token(Token = "0x4000C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly int version;

		[Token(Token = "0x4000C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly string name;

		[Token(Token = "0x1700028C")]
		public int FullVersion
		{
			[Token(Token = "0x600160E")]
			[Address(RVA = "0xF136CC", Offset = "0xF136CC", VA = "0xF136CC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700028D")]
		public int MajorVersion
		{
			[Token(Token = "0x600160F")]
			[Address(RVA = "0xF136D4", Offset = "0xF136D4", VA = "0xF136D4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700028E")]
		public int MinorVersion
		{
			[Token(Token = "0x6001610")]
			[Address(RVA = "0xF136E0", Offset = "0xF136E0", VA = "0xF136E0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700028F")]
		public bool IsDtls
		{
			[Token(Token = "0x6001611")]
			[Address(RVA = "0xF136E8", Offset = "0xF136E8", VA = "0xF136E8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000290")]
		public bool IsSsl
		{
			[Token(Token = "0x6001612")]
			[Address(RVA = "0xF136FC", Offset = "0xF136FC", VA = "0xF136FC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000291")]
		public bool IsTls
		{
			[Token(Token = "0x6001613")]
			[Address(RVA = "0xF13770", Offset = "0xF13770", VA = "0xF13770")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600160D")]
		[Address(RVA = "0xF1368C", Offset = "0xF1368C", VA = "0xF1368C")]
		private ProtocolVersion(int v, string name)
		{
		}

		[Token(Token = "0x6001614")]
		[Address(RVA = "0xF13784", Offset = "0xF13784", VA = "0xF13784")]
		public ProtocolVersion GetEquivalentTLSVersion()
		{
			return null;
		}

		[Token(Token = "0x6001615")]
		[Address(RVA = "0xF075CC", Offset = "0xF075CC", VA = "0xF075CC")]
		public bool IsEqualOrEarlierVersionOf(ProtocolVersion version)
		{
			return default(bool);
		}

		[Token(Token = "0x6001616")]
		[Address(RVA = "0xF08AC4", Offset = "0xF08AC4", VA = "0xF08AC4")]
		public bool IsLaterVersionOf(ProtocolVersion version)
		{
			return default(bool);
		}

		[Token(Token = "0x6001617")]
		[Address(RVA = "0xF1385C", Offset = "0xF1385C", VA = "0xF1385C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001618")]
		[Address(RVA = "0xF138EC", Offset = "0xF138EC", VA = "0xF138EC")]
		public bool Equals(ProtocolVersion other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001619")]
		[Address(RVA = "0xF1390C", Offset = "0xF1390C", VA = "0xF1390C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600161A")]
		[Address(RVA = "0xF13914", Offset = "0xF13914", VA = "0xF13914")]
		public static ProtocolVersion Get(int major, int minor)
		{
			return null;
		}

		[Token(Token = "0x600161B")]
		[Address(RVA = "0xF13CC0", Offset = "0xF13CC0", VA = "0xF13CC0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600161C")]
		[Address(RVA = "0xF13B6C", Offset = "0xF13B6C", VA = "0xF13B6C")]
		private static ProtocolVersion GetUnknownVersion(int major, int minor, string prefix)
		{
			return null;
		}
	}
	[Token(Token = "0x2000280")]
	internal class RecordStream
	{
		[Token(Token = "0x4000C48")]
		private const int DEFAULT_PLAINTEXT_LIMIT = 16384;

		[Token(Token = "0x4000C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private TlsProtocol mHandler;

		[Token(Token = "0x4000C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Stream mInput;

		[Token(Token = "0x4000C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Stream mOutput;

		[Token(Token = "0x4000C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TlsCompression mPendingCompression;

		[Token(Token = "0x4000C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TlsCompression mReadCompression;

		[Token(Token = "0x4000C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TlsCompression mWriteCompression;

		[Token(Token = "0x4000C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private TlsCipher mPendingCipher;

		[Token(Token = "0x4000C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private TlsCipher mReadCipher;

		[Token(Token = "0x4000C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private TlsCipher mWriteCipher;

		[Token(Token = "0x4000C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private long mReadSeqNo;

		[Token(Token = "0x4000C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private long mWriteSeqNo;

		[Token(Token = "0x4000C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private MemoryStream mBuffer;

		[Token(Token = "0x4000C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private TlsHandshakeHash mHandshakeHash;

		[Token(Token = "0x4000C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private ProtocolVersion mReadVersion;

		[Token(Token = "0x4000C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private ProtocolVersion mWriteVersion;

		[Token(Token = "0x4000C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool mRestrictReadVersion;

		[Token(Token = "0x4000C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private int mPlaintextLimit;

		[Token(Token = "0x4000C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int mCompressedLimit;

		[Token(Token = "0x4000C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private int mCiphertextLimit;

		[Token(Token = "0x17000292")]
		internal virtual ProtocolVersion ReadVersion
		{
			[Token(Token = "0x6001622")]
			[Address(RVA = "0xF14040", Offset = "0xF14040", VA = "0xF14040", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001623")]
			[Address(RVA = "0xF14048", Offset = "0xF14048", VA = "0xF14048", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000293")]
		internal virtual TlsHandshakeHash HandshakeHash
		{
			[Token(Token = "0x600162E")]
			[Address(RVA = "0xF14CF0", Offset = "0xF14CF0", VA = "0xF14CF0", Slot = "19")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600161E")]
		[Address(RVA = "0xF13E54", Offset = "0xF13E54", VA = "0xF13E54")]
		internal RecordStream(TlsProtocol handler, Stream input, Stream output)
		{
		}

		[Token(Token = "0x600161F")]
		[Address(RVA = "0xF13F0C", Offset = "0xF13F0C", VA = "0xF13F0C", Slot = "4")]
		internal virtual void Init(TlsContext context)
		{
		}

		[Token(Token = "0x6001620")]
		[Address(RVA = "0xF1401C", Offset = "0xF1401C", VA = "0xF1401C", Slot = "5")]
		internal virtual int GetPlaintextLimit()
		{
			return default(int);
		}

		[Token(Token = "0x6001621")]
		[Address(RVA = "0xF14024", Offset = "0xF14024", VA = "0xF14024", Slot = "6")]
		internal virtual void SetPlaintextLimit(int plaintextLimit)
		{
		}

		[Token(Token = "0x6001624")]
		[Address(RVA = "0xF14050", Offset = "0xF14050", VA = "0xF14050", Slot = "9")]
		internal virtual void SetWriteVersion(ProtocolVersion writeVersion)
		{
		}

		[Token(Token = "0x6001625")]
		[Address(RVA = "0xF14058", Offset = "0xF14058", VA = "0xF14058", Slot = "10")]
		internal virtual void SetRestrictReadVersion(bool enabled)
		{
		}

		[Token(Token = "0x6001626")]
		[Address(RVA = "0xF14064", Offset = "0xF14064", VA = "0xF14064", Slot = "11")]
		internal virtual void SetPendingConnectionState(TlsCompression tlsCompression, TlsCipher tlsCipher)
		{
		}

		[Token(Token = "0x6001627")]
		[Address(RVA = "0xF14070", Offset = "0xF14070", VA = "0xF14070", Slot = "12")]
		internal virtual void SentWriteCipherSpec()
		{
		}

		[Token(Token = "0x6001628")]
		[Address(RVA = "0xF14100", Offset = "0xF14100", VA = "0xF14100", Slot = "13")]
		internal virtual void ReceivedReadCipherSpec()
		{
		}

		[Token(Token = "0x6001629")]
		[Address(RVA = "0xF14190", Offset = "0xF14190", VA = "0xF14190", Slot = "14")]
		internal virtual void FinaliseHandshake()
		{
		}

		[Token(Token = "0x600162A")]
		[Address(RVA = "0xF1423C", Offset = "0xF1423C", VA = "0xF1423C", Slot = "15")]
		internal virtual bool ReadRecord()
		{
			return default(bool);
		}

		[Token(Token = "0x600162B")]
		[Address(RVA = "0xF144AC", Offset = "0xF144AC", VA = "0xF144AC", Slot = "16")]
		internal virtual byte[] DecodeAndVerify(byte type, Stream input, int len)
		{
			return null;
		}

		[Token(Token = "0x600162C")]
		[Address(RVA = "0xF14824", Offset = "0xF14824", VA = "0xF14824", Slot = "17")]
		internal virtual void WriteRecord(byte type, byte[] plaintext, int plaintextOffset, int plaintextLength)
		{
		}

		[Token(Token = "0x600162D")]
		[Address(RVA = "0xF14C34", Offset = "0xF14C34", VA = "0xF14C34", Slot = "18")]
		internal virtual void NotifyHelloComplete()
		{
		}

		[Token(Token = "0x600162F")]
		[Address(RVA = "0xF14CF8", Offset = "0xF14CF8", VA = "0xF14CF8", Slot = "20")]
		internal virtual TlsHandshakeHash PrepareToFinish()
		{
			return null;
		}

		[Token(Token = "0x6001630")]
		[Address(RVA = "0xF14DB8", Offset = "0xF14DB8", VA = "0xF14DB8", Slot = "21")]
		internal virtual void UpdateHandshakeData(byte[] message, int offset, int len)
		{
		}

		[Token(Token = "0x6001631")]
		[Address(RVA = "0xF14E94", Offset = "0xF14E94", VA = "0xF14E94", Slot = "22")]
		internal virtual void SafeClose()
		{
		}

		[Token(Token = "0x6001632")]
		[Address(RVA = "0xF14FDC", Offset = "0xF14FDC", VA = "0xF14FDC", Slot = "23")]
		internal virtual void Flush()
		{
		}

		[Token(Token = "0x6001633")]
		[Address(RVA = "0xF147C4", Offset = "0xF147C4", VA = "0xF147C4")]
		private byte[] GetBufferContents()
		{
			return null;
		}

		[Token(Token = "0x6001634")]
		[Address(RVA = "0xF1441C", Offset = "0xF1441C", VA = "0xF1441C")]
		private static void CheckType(byte type, byte alertDescription)
		{
		}

		[Token(Token = "0x6001635")]
		[Address(RVA = "0xF14738", Offset = "0xF14738", VA = "0xF14738")]
		private static void CheckLength(int length, int limit, byte alertDescription)
		{
		}
	}
	[Token(Token = "0x2000281")]
	public class SecurityParameters
	{
		[Token(Token = "0x4000C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int entity;

		[Token(Token = "0x4000C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal int cipherSuite;

		[Token(Token = "0x4000C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal byte compressionAlgorithm;

		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int prfAlgorithm;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal int verifyDataLength;

		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal byte[] masterSecret;

		[Token(Token = "0x4000C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal byte[] clientRandom;

		[Token(Token = "0x4000C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal byte[] serverRandom;

		[Token(Token = "0x4000C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal byte[] sessionHash;

		[Token(Token = "0x4000C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal byte[] pskIdentity;

		[Token(Token = "0x4000C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal byte[] srpIdentity;

		[Token(Token = "0x4000C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal short maxFragmentLength;

		[Token(Token = "0x4000C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		internal bool truncatedHMac;

		[Token(Token = "0x4000C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5B")]
		internal bool encryptThenMac;

		[Token(Token = "0x4000C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		internal bool extendedMasterSecret;

		[Token(Token = "0x17000294")]
		public virtual int Entity
		{
			[Token(Token = "0x6001637")]
			[Address(RVA = "0xF15034", Offset = "0xF15034", VA = "0xF15034", Slot = "5")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000295")]
		public virtual int CipherSuite
		{
			[Token(Token = "0x6001638")]
			[Address(RVA = "0xF1503C", Offset = "0xF1503C", VA = "0xF1503C", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000296")]
		public byte CompressionAlgorithm
		{
			[Token(Token = "0x6001639")]
			[Address(RVA = "0xF15044", Offset = "0xF15044", VA = "0xF15044")]
			get
			{
				return default(byte);
			}
		}

		[Token(Token = "0x17000297")]
		public virtual int PrfAlgorithm
		{
			[Token(Token = "0x600163A")]
			[Address(RVA = "0xF1504C", Offset = "0xF1504C", VA = "0xF1504C", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000298")]
		public virtual int VerifyDataLength
		{
			[Token(Token = "0x600163B")]
			[Address(RVA = "0xF15054", Offset = "0xF15054", VA = "0xF15054", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000299")]
		public virtual byte[] MasterSecret
		{
			[Token(Token = "0x600163C")]
			[Address(RVA = "0xF1505C", Offset = "0xF1505C", VA = "0xF1505C", Slot = "9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700029A")]
		public virtual byte[] ClientRandom
		{
			[Token(Token = "0x600163D")]
			[Address(RVA = "0xF15064", Offset = "0xF15064", VA = "0xF15064", Slot = "10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700029B")]
		public virtual byte[] ServerRandom
		{
			[Token(Token = "0x600163E")]
			[Address(RVA = "0xF1506C", Offset = "0xF1506C", VA = "0xF1506C", Slot = "11")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700029C")]
		public virtual byte[] SessionHash
		{
			[Token(Token = "0x600163F")]
			[Address(RVA = "0xF15074", Offset = "0xF15074", VA = "0xF15074", Slot = "12")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700029D")]
		public virtual byte[] PskIdentity
		{
			[Token(Token = "0x6001640")]
			[Address(RVA = "0xF1507C", Offset = "0xF1507C", VA = "0xF1507C", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700029E")]
		public virtual byte[] SrpIdentity
		{
			[Token(Token = "0x6001641")]
			[Address(RVA = "0xF15084", Offset = "0xF15084", VA = "0xF15084", Slot = "14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001636")]
		[Address(RVA = "0xF15000", Offset = "0xF15000", VA = "0xF15000", Slot = "4")]
		internal virtual void Clear()
		{
		}

		[Token(Token = "0x6001642")]
		[Address(RVA = "0xF1508C", Offset = "0xF1508C", VA = "0xF1508C")]
		public SecurityParameters()
		{
		}
	}
	[Token(Token = "0x2000282")]
	public class ServerDHParams
	{
		[Token(Token = "0x4000C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly DHPublicKeyParameters mPublicKey;

		[Token(Token = "0x1700029F")]
		public virtual DHPublicKeyParameters PublicKey
		{
			[Token(Token = "0x6001644")]
			[Address(RVA = "0xF15144", Offset = "0xF15144", VA = "0xF15144", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001643")]
		[Address(RVA = "0xF150A8", Offset = "0xF150A8", VA = "0xF150A8")]
		public ServerDHParams(DHPublicKeyParameters publicKey)
		{
		}

		[Token(Token = "0x6001645")]
		[Address(RVA = "0xF1514C", Offset = "0xF1514C", VA = "0xF1514C", Slot = "5")]
		public virtual void Encode(Stream output)
		{
		}

		[Token(Token = "0x6001646")]
		[Address(RVA = "0xF15280", Offset = "0xF15280", VA = "0xF15280")]
		public static ServerDHParams Parse(Stream input)
		{
			return null;
		}
	}
	[Token(Token = "0x2000283")]
	public class ServerName
	{
		[Token(Token = "0x4000C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly byte mNameType;

		[Token(Token = "0x4000C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected readonly object mName;

		[Token(Token = "0x170002A0")]
		public virtual byte NameType
		{
			[Token(Token = "0x6001648")]
			[Address(RVA = "0xF156A0", Offset = "0xF156A0", VA = "0xF156A0", Slot = "4")]
			get
			{
				return default(byte);
			}
		}

		[Token(Token = "0x170002A1")]
		public virtual object Name
		{
			[Token(Token = "0x6001649")]
			[Address(RVA = "0xF156A8", Offset = "0xF156A8", VA = "0xF156A8", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001647")]
		[Address(RVA = "0xF072E4", Offset = "0xF072E4", VA = "0xF072E4")]
		public ServerName(byte nameType, object name)
		{
		}

		[Token(Token = "0x600164A")]
		[Address(RVA = "0xF156B0", Offset = "0xF156B0", VA = "0xF156B0", Slot = "6")]
		public virtual string GetHostName()
		{
			return null;
		}

		[Token(Token = "0x600164B")]
		[Address(RVA = "0xF15790", Offset = "0xF15790", VA = "0xF15790", Slot = "7")]
		public virtual void Encode(Stream output)
		{
		}

		[Token(Token = "0x600164C")]
		[Address(RVA = "0xF158B4", Offset = "0xF158B4", VA = "0xF158B4")]
		public static ServerName Parse(Stream input)
		{
			return null;
		}

		[Token(Token = "0x600164D")]
		[Address(RVA = "0xF155E0", Offset = "0xF155E0", VA = "0xF155E0")]
		protected static bool IsCorrectType(byte nameType, object name)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000284")]
	public class ServerNameList
	{
		[Token(Token = "0x4000C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly IList mServerNameList;

		[Token(Token = "0x170002A2")]
		public virtual IList ServerNames
		{
			[Token(Token = "0x600164F")]
			[Address(RVA = "0xF159C8", Offset = "0xF159C8", VA = "0xF159C8", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600164E")]
		[Address(RVA = "0xF073A0", Offset = "0xF073A0", VA = "0xF073A0")]
		public ServerNameList(IList serverNameList)
		{
		}

		[Token(Token = "0x6001650")]
		[Address(RVA = "0xF159D0", Offset = "0xF159D0", VA = "0xF159D0", Slot = "5")]
		public virtual void Encode(Stream output)
		{
		}

		[Token(Token = "0x6001651")]
		[Address(RVA = "0xF15D50", Offset = "0xF15D50", VA = "0xF15D50")]
		public static ServerNameList Parse(Stream input)
		{
			return null;
		}
	}
	[Token(Token = "0x2000285")]
	public sealed class SessionParameters
	{
		[Token(Token = "0x200066D")]
		public sealed class Builder
		{
			[Token(Token = "0x40025AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int mCipherSuite;

			[Token(Token = "0x40025AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private short mCompressionAlgorithm;

			[Token(Token = "0x40025B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private byte[] mMasterSecret;

			[Token(Token = "0x40025B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Certificate mPeerCertificate;

			[Token(Token = "0x40025B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private byte[] mPskIdentity;

			[Token(Token = "0x40025B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private byte[] mSrpIdentity;

			[Token(Token = "0x40025B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private byte[] mEncodedServerExtensions;

			[Token(Token = "0x60034DE")]
			[Address(RVA = "0xF161B0", Offset = "0xF161B0", VA = "0xF161B0")]
			public Builder()
			{
			}

			[Token(Token = "0x60034DF")]
			[Address(RVA = "0xF161C8", Offset = "0xF161C8", VA = "0xF161C8")]
			public SessionParameters Build()
			{
				return null;
			}

			[Token(Token = "0x60034E0")]
			[Address(RVA = "0xF16378", Offset = "0xF16378", VA = "0xF16378")]
			public Builder SetCipherSuite(int cipherSuite)
			{
				return null;
			}

			[Token(Token = "0x60034E1")]
			[Address(RVA = "0xF16380", Offset = "0xF16380", VA = "0xF16380")]
			public Builder SetCompressionAlgorithm(byte compressionAlgorithm)
			{
				return null;
			}

			[Token(Token = "0x60034E2")]
			[Address(RVA = "0xF1638C", Offset = "0xF1638C", VA = "0xF1638C")]
			public Builder SetMasterSecret(byte[] masterSecret)
			{
				return null;
			}

			[Token(Token = "0x60034E3")]
			[Address(RVA = "0xF16394", Offset = "0xF16394", VA = "0xF16394")]
			public Builder SetPeerCertificate(Certificate peerCertificate)
			{
				return null;
			}

			[Token(Token = "0x60034E4")]
			[Address(RVA = "0xF1639C", Offset = "0xF1639C", VA = "0xF1639C")]
			public Builder SetPskIdentity(byte[] pskIdentity)
			{
				return null;
			}

			[Token(Token = "0x60034E5")]
			[Address(RVA = "0xF163A4", Offset = "0xF163A4", VA = "0xF163A4")]
			public Builder SetSrpIdentity(byte[] srpIdentity)
			{
				return null;
			}

			[Token(Token = "0x60034E6")]
			[Address(RVA = "0xF163AC", Offset = "0xF163AC", VA = "0xF163AC")]
			public Builder SetServerExtensions(IDictionary serverExtensions)
			{
				return null;
			}

			[Token(Token = "0x60034E7")]
			[Address(RVA = "0xF162C8", Offset = "0xF162C8", VA = "0xF162C8")]
			private void Validate(bool condition, string parameter)
			{
			}
		}

		[Token(Token = "0x4000C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int mCipherSuite;

		[Token(Token = "0x4000C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private byte mCompressionAlgorithm;

		[Token(Token = "0x4000C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private byte[] mMasterSecret;

		[Token(Token = "0x4000C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Certificate mPeerCertificate;

		[Token(Token = "0x4000C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private byte[] mPskIdentity;

		[Token(Token = "0x4000C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private byte[] mSrpIdentity;

		[Token(Token = "0x4000C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private byte[] mEncodedServerExtensions;

		[Token(Token = "0x170002A3")]
		public int CipherSuite
		{
			[Token(Token = "0x6001655")]
			[Address(RVA = "0xF160DC", Offset = "0xF160DC", VA = "0xF160DC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002A4")]
		public byte CompressionAlgorithm
		{
			[Token(Token = "0x6001656")]
			[Address(RVA = "0xF160E4", Offset = "0xF160E4", VA = "0xF160E4")]
			get
			{
				return default(byte);
			}
		}

		[Token(Token = "0x170002A5")]
		public byte[] MasterSecret
		{
			[Token(Token = "0x6001657")]
			[Address(RVA = "0xF160EC", Offset = "0xF160EC", VA = "0xF160EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A6")]
		public Certificate PeerCertificate
		{
			[Token(Token = "0x6001658")]
			[Address(RVA = "0xF160F4", Offset = "0xF160F4", VA = "0xF160F4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A7")]
		public byte[] PskIdentity
		{
			[Token(Token = "0x6001659")]
			[Address(RVA = "0xF160FC", Offset = "0xF160FC", VA = "0xF160FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A8")]
		public byte[] SrpIdentity
		{
			[Token(Token = "0x600165A")]
			[Address(RVA = "0xF16104", Offset = "0xF16104", VA = "0xF16104")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001652")]
		[Address(RVA = "0xF15F88", Offset = "0xF15F88", VA = "0xF15F88")]
		private SessionParameters(int cipherSuite, byte compressionAlgorithm, byte[] masterSecret, Certificate peerCertificate, byte[] pskIdentity, byte[] srpIdentity, byte[] encodedServerExtensions)
		{
		}

		[Token(Token = "0x6001653")]
		[Address(RVA = "0xF16018", Offset = "0xF16018", VA = "0xF16018")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001654")]
		[Address(RVA = "0xF16030", Offset = "0xF16030", VA = "0xF16030")]
		public SessionParameters Copy()
		{
			return null;
		}

		[Token(Token = "0x600165B")]
		[Address(RVA = "0xF1610C", Offset = "0xF1610C", VA = "0xF1610C")]
		public IDictionary ReadServerExtensions()
		{
			return null;
		}
	}
	[Token(Token = "0x2000286")]
	public abstract class SignatureAlgorithm
	{
		[Token(Token = "0x4000C76")]
		public const byte anonymous = 0;

		[Token(Token = "0x4000C77")]
		public const byte rsa = 1;

		[Token(Token = "0x4000C78")]
		public const byte dsa = 2;

		[Token(Token = "0x4000C79")]
		public const byte ecdsa = 3;

		[Token(Token = "0x600165C")]
		[Address(RVA = "0xF16474", Offset = "0xF16474", VA = "0xF16474")]
		protected SignatureAlgorithm()
		{
		}
	}
	[Token(Token = "0x2000287")]
	public class SignatureAndHashAlgorithm
	{
		[Token(Token = "0x4000C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly byte mHash;

		[Token(Token = "0x4000C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		protected readonly byte mSignature;

		[Token(Token = "0x170002A9")]
		public virtual byte Hash
		{
			[Token(Token = "0x600165E")]
			[Address(RVA = "0xF165C8", Offset = "0xF165C8", VA = "0xF165C8", Slot = "4")]
			get
			{
				return default(byte);
			}
		}

		[Token(Token = "0x170002AA")]
		public virtual byte Signature
		{
			[Token(Token = "0x600165F")]
			[Address(RVA = "0xF165D0", Offset = "0xF165D0", VA = "0xF165D0", Slot = "5")]
			get
			{
				return default(byte);
			}
		}

		[Token(Token = "0x600165D")]
		[Address(RVA = "0xF1647C", Offset = "0xF1647C", VA = "0xF1647C")]
		public SignatureAndHashAlgorithm(byte hash, byte signature)
		{
		}

		[Token(Token = "0x6001660")]
		[Address(RVA = "0xF165D8", Offset = "0xF165D8", VA = "0xF165D8", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001661")]
		[Address(RVA = "0xF166B8", Offset = "0xF166B8", VA = "0xF166B8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001662")]
		[Address(RVA = "0xF16700", Offset = "0xF16700", VA = "0xF16700", Slot = "6")]
		public virtual void Encode(Stream output)
		{
		}

		[Token(Token = "0x6001663")]
		[Address(RVA = "0xF129C8", Offset = "0xF129C8", VA = "0xF129C8")]
		public static SignatureAndHashAlgorithm Parse(Stream input)
		{
			return null;
		}
	}
	[Token(Token = "0x2000288")]
	internal class SignerInputBuffer : MemoryStream
	{
		[Token(Token = "0x200066E")]
		private class SigStream : BaseOutputStream
		{
			[Token(Token = "0x40025B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private readonly ISigner s;

			[Token(Token = "0x60034E8")]
			[Address(RVA = "0xF1682C", Offset = "0xF1682C", VA = "0xF1682C")]
			internal SigStream(ISigner s)
			{
			}

			[Token(Token = "0x60034E9")]
			[Address(RVA = "0xF16860", Offset = "0xF16860", VA = "0xF16860", Slot = "30")]
			public override void WriteByte(byte b)
			{
			}

			[Token(Token = "0x60034EA")]
			[Address(RVA = "0xF16924", Offset = "0xF16924", VA = "0xF16924", Slot = "29")]
			public override void Write(byte[] buf, int off, int len)
			{
			}
		}

		[Token(Token = "0x6001664")]
		[Address(RVA = "0xF167AC", Offset = "0xF167AC", VA = "0xF167AC")]
		internal void UpdateSigner(ISigner s)
		{
		}

		[Token(Token = "0x6001665")]
		[Address(RVA = "0xF16858", Offset = "0xF16858", VA = "0xF16858")]
		public SignerInputBuffer()
		{
		}
	}
	[Token(Token = "0x2000289")]
	public class Ssl3Mac : IMac
	{
		[Token(Token = "0x4000C7C")]
		private const byte IPAD_BYTE = 54;

		[Token(Token = "0x4000C7D")]
		private const byte OPAD_BYTE = 92;

		[Token(Token = "0x4000C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly byte[] IPAD;

		[Token(Token = "0x4000C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly byte[] OPAD;

		[Token(Token = "0x4000C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IDigest digest;

		[Token(Token = "0x4000C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly int padLength;

		[Token(Token = "0x4000C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private byte[] secret;

		[Token(Token = "0x170002AB")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001667")]
			[Address(RVA = "0xF16AE4", Offset = "0xF16AE4", VA = "0xF16AE4", Slot = "11")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001666")]
		[Address(RVA = "0xF16A00", Offset = "0xF16A00", VA = "0xF16A00")]
		public Ssl3Mac(IDigest digest)
		{
		}

		[Token(Token = "0x6001668")]
		[Address(RVA = "0xF16BA8", Offset = "0xF16BA8", VA = "0xF16BA8", Slot = "12")]
		public virtual void Init(ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001669")]
		[Address(RVA = "0xF16C60", Offset = "0xF16C60", VA = "0xF16C60", Slot = "13")]
		public virtual int GetMacSize()
		{
			return default(int);
		}

		[Token(Token = "0x600166A")]
		[Address(RVA = "0xF16D14", Offset = "0xF16D14", VA = "0xF16D14", Slot = "14")]
		public virtual void Update(byte input)
		{
		}

		[Token(Token = "0x600166B")]
		[Address(RVA = "0xF16DD8", Offset = "0xF16DD8", VA = "0xF16DD8", Slot = "15")]
		public virtual void BlockUpdate(byte[] input, int inOff, int len)
		{
		}

		[Token(Token = "0x600166C")]
		[Address(RVA = "0xF16EB4", Offset = "0xF16EB4", VA = "0xF16EB4", Slot = "16")]
		public virtual int DoFinal(byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x600166D")]
		[Address(RVA = "0xF17258", Offset = "0xF17258", VA = "0xF17258", Slot = "17")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x600166E")]
		[Address(RVA = "0xF17448", Offset = "0xF17448", VA = "0xF17448")]
		private static byte[] GenPad(byte b, int count)
		{
			return null;
		}
	}
	[Token(Token = "0x200028A")]
	public class SupplementalDataEntry
	{
		[Token(Token = "0x4000C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly int mDataType;

		[Token(Token = "0x4000C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected readonly byte[] mData;

		[Token(Token = "0x170002AC")]
		public virtual int DataType
		{
			[Token(Token = "0x6001671")]
			[Address(RVA = "0xF1756C", Offset = "0xF1756C", VA = "0xF1756C", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002AD")]
		public virtual byte[] Data
		{
			[Token(Token = "0x6001672")]
			[Address(RVA = "0xF17574", Offset = "0xF17574", VA = "0xF17574", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001670")]
		[Address(RVA = "0xF17530", Offset = "0xF17530", VA = "0xF17530")]
		public SupplementalDataEntry(int dataType, byte[] data)
		{
		}
	}
	[Token(Token = "0x200028B")]
	public class TlsAeadCipher : TlsCipher
	{
		[Token(Token = "0x4000C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly TlsContext context;

		[Token(Token = "0x4000C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected readonly int macSize;

		[Token(Token = "0x4000C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		protected readonly int nonce_explicit_length;

		[Token(Token = "0x4000C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected readonly IAeadBlockCipher encryptCipher;

		[Token(Token = "0x4000C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected readonly IAeadBlockCipher decryptCipher;

		[Token(Token = "0x4000C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected readonly byte[] encryptImplicitNonce;

		[Token(Token = "0x4000C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected readonly byte[] decryptImplicitNonce;

		[Token(Token = "0x6001673")]
		[Address(RVA = "0xF0F3A4", Offset = "0xF0F3A4", VA = "0xF0F3A4")]
		public TlsAeadCipher(TlsContext context, IAeadBlockCipher clientWriteCipher, IAeadBlockCipher serverWriteCipher, int cipherKeySize, int macSize)
		{
		}

		[Token(Token = "0x6001674")]
		[Address(RVA = "0xF1757C", Offset = "0xF1757C", VA = "0xF1757C", Slot = "7")]
		public virtual int GetPlaintextLimit(int ciphertextLimit)
		{
			return default(int);
		}

		[Token(Token = "0x6001675")]
		[Address(RVA = "0xF1758C", Offset = "0xF1758C", VA = "0xF1758C", Slot = "8")]
		public virtual byte[] EncodePlaintext(long seqNo, byte type, byte[] plaintext, int offset, int len)
		{
			return null;
		}

		[Token(Token = "0x6001676")]
		[Address(RVA = "0xF17A20", Offset = "0xF17A20", VA = "0xF17A20", Slot = "9")]
		public virtual byte[] DecodeCiphertext(long seqNo, byte type, byte[] ciphertext, int offset, int len)
		{
			return null;
		}

		[Token(Token = "0x6001677")]
		[Address(RVA = "0xF17EB4", Offset = "0xF17EB4", VA = "0xF17EB4", Slot = "10")]
		protected virtual byte[] GetAdditionalData(long seqNo, byte type, int len)
		{
			return null;
		}
	}
	[Token(Token = "0x200028C")]
	public interface TlsAgreementCredentials : TlsCredentials
	{
		[Token(Token = "0x6001678")]
		byte[] GenerateAgreement(AsymmetricKeyParameter peerPublicKey);
	}
	[Token(Token = "0x200028D")]
	public interface TlsAuthentication
	{
		[Token(Token = "0x6001679")]
		void NotifyServerCertificate(Certificate serverCertificate);

		[Token(Token = "0x600167A")]
		TlsCredentials GetClientCredentials(TlsContext context, CertificateRequest certificateRequest);
	}
	[Token(Token = "0x200028E")]
	public class TlsBlockCipher : TlsCipher
	{
		[Token(Token = "0x4000C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly TlsContext context;

		[Token(Token = "0x4000C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected readonly byte[] randomData;

		[Token(Token = "0x4000C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected readonly bool useExplicitIV;

		[Token(Token = "0x4000C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		protected readonly bool encryptThenMac;

		[Token(Token = "0x4000C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected readonly IBlockCipher encryptCipher;

		[Token(Token = "0x4000C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected readonly IBlockCipher decryptCipher;

		[Token(Token = "0x4000C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected readonly TlsMac mWriteMac;

		[Token(Token = "0x4000C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected readonly TlsMac mReadMac;

		[Token(Token = "0x170002AE")]
		public virtual TlsMac WriteMac
		{
			[Token(Token = "0x600167B")]
			[Address(RVA = "0xF18014", Offset = "0xF18014", VA = "0xF18014", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002AF")]
		public virtual TlsMac ReadMac
		{
			[Token(Token = "0x600167C")]
			[Address(RVA = "0xF1801C", Offset = "0xF1801C", VA = "0xF1801C", Slot = "8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600167D")]
		[Address(RVA = "0xF0E5DC", Offset = "0xF0E5DC", VA = "0xF0E5DC")]
		public TlsBlockCipher(TlsContext context, IBlockCipher clientWriteCipher, IBlockCipher serverWriteCipher, IDigest clientWriteDigest, IDigest serverWriteDigest, int cipherKeySize)
		{
		}

		[Token(Token = "0x600167E")]
		[Address(RVA = "0xF18024", Offset = "0xF18024", VA = "0xF18024", Slot = "9")]
		public virtual int GetPlaintextLimit(int ciphertextLimit)
		{
			return default(int);
		}

		[Token(Token = "0x600167F")]
		[Address(RVA = "0xF18144", Offset = "0xF18144", VA = "0xF18144", Slot = "10")]
		public virtual byte[] EncodePlaintext(long seqNo, byte type, byte[] plaintext, int offset, int len)
		{
			return null;
		}

		[Token(Token = "0x6001680")]
		[Address(RVA = "0xF18728", Offset = "0xF18728", VA = "0xF18728", Slot = "11")]
		public virtual byte[] DecodeCiphertext(long seqNo, byte type, byte[] ciphertext, int offset, int len)
		{
			return null;
		}

		[Token(Token = "0x6001681")]
		[Address(RVA = "0xF18B88", Offset = "0xF18B88", VA = "0xF18B88", Slot = "12")]
		protected virtual int CheckPaddingConstantTime(byte[] buf, int off, int len, int blockSize, int macSize)
		{
			return default(int);
		}

		[Token(Token = "0x6001682")]
		[Address(RVA = "0xF18D14", Offset = "0xF18D14", VA = "0xF18D14", Slot = "13")]
		protected virtual int ChooseExtraPadBlocks(SecureRandom r, int max)
		{
			return default(int);
		}

		[Token(Token = "0x6001683")]
		[Address(RVA = "0xF18DCC", Offset = "0xF18DCC", VA = "0xF18DCC", Slot = "14")]
		protected virtual int LowestBitSet(int x)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200028F")]
	public interface TlsCipher
	{
		[Token(Token = "0x6001684")]
		int GetPlaintextLimit(int ciphertextLimit);

		[Token(Token = "0x6001685")]
		byte[] EncodePlaintext(long seqNo, byte type, byte[] plaintext, int offset, int len);

		[Token(Token = "0x6001686")]
		byte[] DecodeCiphertext(long seqNo, byte type, byte[] ciphertext, int offset, int len);
	}
	[Token(Token = "0x2000290")]
	public interface TlsCipherFactory
	{
		[Token(Token = "0x6001687")]
		TlsCipher CreateCipher(TlsContext context, int encryptionAlgorithm, int macAlgorithm);
	}
	[Token(Token = "0x2000291")]
	public interface TlsClient : TlsPeer
	{
		[Token(Token = "0x170002B0")]
		List<string> HostNames
		{
			[Token(Token = "0x6001688")]
			get;
			[Token(Token = "0x6001689")]
			set;
		}

		[Token(Token = "0x170002B1")]
		ProtocolVersion ClientHelloRecordLayerVersion
		{
			[Token(Token = "0x600168C")]
			get;
		}

		[Token(Token = "0x170002B2")]
		ProtocolVersion ClientVersion
		{
			[Token(Token = "0x600168D")]
			get;
		}

		[Token(Token = "0x170002B3")]
		bool IsFallback
		{
			[Token(Token = "0x600168E")]
			get;
		}

		[Token(Token = "0x600168A")]
		void Init(TlsClientContext context);

		[Token(Token = "0x600168B")]
		TlsSession GetSessionToResume();

		[Token(Token = "0x600168F")]
		int[] GetCipherSuites();

		[Token(Token = "0x6001690")]
		byte[] GetCompressionMethods();

		[Token(Token = "0x6001691")]
		IDictionary GetClientExtensions();

		[Token(Token = "0x6001692")]
		void NotifyServerVersion(ProtocolVersion selectedVersion);

		[Token(Token = "0x6001693")]
		void NotifySessionID(byte[] sessionID);

		[Token(Token = "0x6001694")]
		void NotifySelectedCipherSuite(int selectedCipherSuite);

		[Token(Token = "0x6001695")]
		void NotifySelectedCompressionMethod(byte selectedCompressionMethod);

		[Token(Token = "0x6001696")]
		void ProcessServerExtensions(IDictionary serverExtensions);

		[Token(Token = "0x6001697")]
		void ProcessServerSupplementalData(IList serverSupplementalData);

		[Token(Token = "0x6001698")]
		TlsKeyExchange GetKeyExchange();

		[Token(Token = "0x6001699")]
		TlsAuthentication GetAuthentication();

		[Token(Token = "0x600169A")]
		IList GetClientSupplementalData();

		[Token(Token = "0x600169B")]
		void NotifyNewSessionTicket(NewSessionTicket newSessionTicket);
	}
	[Token(Token = "0x2000292")]
	public interface TlsClientContext : TlsContext
	{
	}
	[Token(Token = "0x2000293")]
	internal class TlsClientContextImpl : AbstractTlsContext, TlsClientContext, TlsContext
	{
		[Token(Token = "0x170002B4")]
		public override bool IsServer
		{
			[Token(Token = "0x600169D")]
			[Address(RVA = "0xF18E70", Offset = "0xF18E70", VA = "0xF18E70", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600169C")]
		[Address(RVA = "0xF18DF4", Offset = "0xF18DF4", VA = "0xF18DF4")]
		internal TlsClientContextImpl(SecureRandom secureRandom, SecurityParameters securityParameters)
		{
		}
	}
	[Token(Token = "0x2000294")]
	public class TlsClientProtocol : TlsProtocol
	{
		[Token(Token = "0x4000C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected TlsClient mTlsClient;

		[Token(Token = "0x4000C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal TlsClientContextImpl mTlsClientContext;

		[Token(Token = "0x4000C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected byte[] mSelectedSessionID;

		[Token(Token = "0x4000C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected TlsKeyExchange mKeyExchange;

		[Token(Token = "0x4000C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected TlsAuthentication mAuthentication;

		[Token(Token = "0x4000C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected CertificateStatus mCertificateStatus;

		[Token(Token = "0x4000C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected CertificateRequest mCertificateRequest;

		[Token(Token = "0x170002B5")]
		protected override TlsContext Context
		{
			[Token(Token = "0x60016A2")]
			[Address(RVA = "0xF193C8", Offset = "0xF193C8", VA = "0xF193C8", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B6")]
		internal override AbstractTlsContext ContextAdmin
		{
			[Token(Token = "0x60016A3")]
			[Address(RVA = "0xF193D0", Offset = "0xF193D0", VA = "0xF193D0", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B7")]
		protected override TlsPeer Peer
		{
			[Token(Token = "0x60016A4")]
			[Address(RVA = "0xF193D8", Offset = "0xF193D8", VA = "0xF193D8", Slot = "6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600169E")]
		[Address(RVA = "0xF18E78", Offset = "0xF18E78", VA = "0xF18E78")]
		public TlsClientProtocol(Stream stream, SecureRandom secureRandom)
		{
		}

		[Token(Token = "0x600169F")]
		[Address(RVA = "0xF18EF8", Offset = "0xF18EF8", VA = "0xF18EF8")]
		public TlsClientProtocol(Stream input, Stream output, SecureRandom secureRandom)
		{
		}

		[Token(Token = "0x60016A0")]
		[Address(RVA = "0xF18F88", Offset = "0xF18F88", VA = "0xF18F88", Slot = "37")]
		public virtual void Connect(TlsClient tlsClient)
		{
		}

		[Token(Token = "0x60016A1")]
		[Address(RVA = "0xF19394", Offset = "0xF19394", VA = "0xF19394", Slot = "12")]
		protected override void CleanupHandshake()
		{
		}

		[Token(Token = "0x60016A5")]
		[Address(RVA = "0xF193E0", Offset = "0xF193E0", VA = "0xF193E0", Slot = "8")]
		protected override void HandleHandshakeMessage(byte type, byte[] data)
		{
		}

		[Token(Token = "0x60016A6")]
		[Address(RVA = "0xF1A744", Offset = "0xF1A744", VA = "0xF1A744", Slot = "38")]
		protected virtual void HandleSupplementalData(IList serverSupplementalData)
		{
		}

		[Token(Token = "0x60016A7")]
		[Address(RVA = "0xF1A908", Offset = "0xF1A908", VA = "0xF1A908", Slot = "39")]
		protected virtual void ReceiveNewSessionTicketMessage(MemoryStream buf)
		{
		}

		[Token(Token = "0x60016A8")]
		[Address(RVA = "0xF1AA08", Offset = "0xF1AA08", VA = "0xF1AA08", Slot = "40")]
		protected virtual void ReceiveServerHelloMessage(MemoryStream buf)
		{
		}

		[Token(Token = "0x60016A9")]
		[Address(RVA = "0xF1B718", Offset = "0xF1B718", VA = "0xF1B718", Slot = "41")]
		protected virtual void SendCertificateVerifyMessage(DigitallySigned certificateVerify)
		{
		}

		[Token(Token = "0x60016AA")]
		[Address(RVA = "0xF1B7B0", Offset = "0xF1B7B0", VA = "0xF1B7B0", Slot = "42")]
		protected virtual void SendClientHelloMessage()
		{
		}

		[Token(Token = "0x60016AB")]
		[Address(RVA = "0xF1BDEC", Offset = "0xF1BDEC", VA = "0xF1BDEC", Slot = "43")]
		protected virtual void SendClientKeyExchangeMessage()
		{
		}
	}
	[Token(Token = "0x2000295")]
	public interface TlsCompression
	{
		[Token(Token = "0x60016AC")]
		Stream Compress(Stream output);

		[Token(Token = "0x60016AD")]
		Stream Decompress(Stream output);
	}
	[Token(Token = "0x2000296")]
	public interface TlsContext
	{
		[Token(Token = "0x170002B8")]
		IRandomGenerator NonceRandomGenerator
		{
			[Token(Token = "0x60016AE")]
			get;
		}

		[Token(Token = "0x170002B9")]
		SecureRandom SecureRandom
		{
			[Token(Token = "0x60016AF")]
			get;
		}

		[Token(Token = "0x170002BA")]
		SecurityParameters SecurityParameters
		{
			[Token(Token = "0x60016B0")]
			get;
		}

		[Token(Token = "0x170002BB")]
		bool IsServer
		{
			[Token(Token = "0x60016B1")]
			get;
		}

		[Token(Token = "0x170002BC")]
		ProtocolVersion ClientVersion
		{
			[Token(Token = "0x60016B2")]
			get;
		}

		[Token(Token = "0x170002BD")]
		ProtocolVersion ServerVersion
		{
			[Token(Token = "0x60016B3")]
			get;
		}

		[Token(Token = "0x170002BE")]
		TlsSession ResumableSession
		{
			[Token(Token = "0x60016B4")]
			get;
		}

		[Token(Token = "0x170002BF")]
		object UserObject
		{
			[Token(Token = "0x60016B5")]
			get;
			[Token(Token = "0x60016B6")]
			set;
		}

		[Token(Token = "0x60016B7")]
		byte[] ExportKeyingMaterial(string asciiLabel, byte[] context_value, int length);
	}
	[Token(Token = "0x2000297")]
	public interface TlsCredentials
	{
		[Token(Token = "0x170002C0")]
		Certificate Certificate
		{
			[Token(Token = "0x60016B8")]
			get;
		}
	}
	[Token(Token = "0x2000298")]
	public class TlsDHKeyExchange : AbstractTlsKeyExchange
	{
		[Token(Token = "0x4000C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected TlsSigner mTlsSigner;

		[Token(Token = "0x4000C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected DHParameters mDHParameters;

		[Token(Token = "0x4000C9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected AsymmetricKeyParameter mServerPublicKey;

		[Token(Token = "0x4000C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected TlsAgreementCredentials mAgreementCredentials;

		[Token(Token = "0x4000C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected DHPrivateKeyParameters mDHAgreePrivateKey;

		[Token(Token = "0x4000CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected DHPublicKeyParameters mDHAgreePublicKey;

		[Token(Token = "0x170002C1")]
		public override bool RequiresServerKeyExchange
		{
			[Token(Token = "0x60016BD")]
			[Address(RVA = "0xF1C370", Offset = "0xF1C370", VA = "0xF1C370", Slot = "23")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60016B9")]
		[Address(RVA = "0xF10640", Offset = "0xF10640", VA = "0xF10640")]
		public TlsDHKeyExchange(int keyExchange, IList supportedSignatureAlgorithms, DHParameters dhParameters)
		{
		}

		[Token(Token = "0x60016BA")]
		[Address(RVA = "0xF1BEE0", Offset = "0xF1BEE0", VA = "0xF1BEE0", Slot = "19")]
		public override void Init(TlsContext context)
		{
		}

		[Token(Token = "0x60016BB")]
		[Address(RVA = "0xF1BFB8", Offset = "0xF1BFB8", VA = "0xF1BFB8", Slot = "20")]
		public override void SkipServerCredentials()
		{
		}

		[Token(Token = "0x60016BC")]
		[Address(RVA = "0xF1C01C", Offset = "0xF1C01C", VA = "0xF1C01C", Slot = "21")]
		public override void ProcessServerCertificate(Certificate serverCertificate)
		{
		}

		[Token(Token = "0x60016BE")]
		[Address(RVA = "0xF1C398", Offset = "0xF1C398", VA = "0xF1C398", Slot = "27")]
		public override void ValidateCertificateRequest(CertificateRequest certificateRequest)
		{
		}

		[Token(Token = "0x60016BF")]
		[Address(RVA = "0xF1C474", Offset = "0xF1C474", VA = "0xF1C474", Slot = "29")]
		public override void ProcessClientCredentials(TlsCredentials clientCredentials)
		{
		}

		[Token(Token = "0x60016C0")]
		[Address(RVA = "0xF1C550", Offset = "0xF1C550", VA = "0xF1C550", Slot = "31")]
		public override void GenerateClientKeyExchange(Stream output)
		{
		}

		[Token(Token = "0x60016C1")]
		[Address(RVA = "0xF1C76C", Offset = "0xF1C76C", VA = "0xF1C76C", Slot = "30")]
		public override void ProcessClientCertificate(Certificate clientCertificate)
		{
		}

		[Token(Token = "0x60016C2")]
		[Address(RVA = "0xF1C770", Offset = "0xF1C770", VA = "0xF1C770", Slot = "32")]
		public override void ProcessClientKeyExchange(Stream input)
		{
		}

		[Token(Token = "0x60016C3")]
		[Address(RVA = "0xF1C828", Offset = "0xF1C828", VA = "0xF1C828", Slot = "33")]
		public override byte[] GeneratePremasterSecret()
		{
			return null;
		}
	}
	[Token(Token = "0x2000299")]
	public abstract class TlsDHUtilities
	{
		[Token(Token = "0x4000CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly BigInteger Two;

		[Token(Token = "0x4000CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly string draft_ffdhe2432_p;

		[Token(Token = "0x4000CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal static readonly DHParameters draft_ffdhe2432;

		[Token(Token = "0x4000CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly string draft_ffdhe3072_p;

		[Token(Token = "0x4000CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal static readonly DHParameters draft_ffdhe3072;

		[Token(Token = "0x4000CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static readonly string draft_ffdhe4096_p;

		[Token(Token = "0x4000CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal static readonly DHParameters draft_ffdhe4096;

		[Token(Token = "0x4000CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static readonly string draft_ffdhe6144_p;

		[Token(Token = "0x4000CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal static readonly DHParameters draft_ffdhe6144;

		[Token(Token = "0x4000CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static readonly string draft_ffdhe8192_p;

		[Token(Token = "0x4000CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal static readonly DHParameters draft_ffdhe8192;

		[Token(Token = "0x60016C4")]
		[Address(RVA = "0xF1C9EC", Offset = "0xF1C9EC", VA = "0xF1C9EC")]
		private static BigInteger FromHex(string hex)
		{
			return null;
		}

		[Token(Token = "0x60016C5")]
		[Address(RVA = "0xF1CA88", Offset = "0xF1CA88", VA = "0xF1CA88")]
		private static DHParameters FromSafeP(string hexP)
		{
			return null;
		}

		[Token(Token = "0x60016C6")]
		[Address(RVA = "0xF1CB50", Offset = "0xF1CB50", VA = "0xF1CB50")]
		public static void AddNegotiatedDheGroupsClientExtension(IDictionary extensions, byte[] dheGroups)
		{
		}

		[Token(Token = "0x60016C7")]
		[Address(RVA = "0xF1CD40", Offset = "0xF1CD40", VA = "0xF1CD40")]
		public static void AddNegotiatedDheGroupsServerExtension(IDictionary extensions, byte dheGroup)
		{
		}

		[Token(Token = "0x60016C8")]
		[Address(RVA = "0xF1CEF4", Offset = "0xF1CEF4", VA = "0xF1CEF4")]
		public static byte[] GetNegotiatedDheGroupsClientExtension(IDictionary extensions)
		{
			return null;
		}

		[Token(Token = "0x60016C9")]
		[Address(RVA = "0xF1D130", Offset = "0xF1D130", VA = "0xF1D130")]
		public static short GetNegotiatedDheGroupsServerExtension(IDictionary extensions)
		{
			return default(short);
		}

		[Token(Token = "0x60016CA")]
		[Address(RVA = "0xF1CC90", Offset = "0xF1CC90", VA = "0xF1CC90")]
		public static byte[] CreateNegotiatedDheGroupsClientExtension(byte[] dheGroups)
		{
			return null;
		}

		[Token(Token = "0x60016CB")]
		[Address(RVA = "0xF1CE80", Offset = "0xF1CE80", VA = "0xF1CE80")]
		public static byte[] CreateNegotiatedDheGroupsServerExtension(byte dheGroup)
		{
			return null;
		}

		[Token(Token = "0x60016CC")]
		[Address(RVA = "0xF1CFCC", Offset = "0xF1CFCC", VA = "0xF1CFCC")]
		public static byte[] ReadNegotiatedDheGroupsClientExtension(byte[] extensionData)
		{
			return null;
		}

		[Token(Token = "0x60016CD")]
		[Address(RVA = "0xF1D20C", Offset = "0xF1D20C", VA = "0xF1D20C")]
		public static byte ReadNegotiatedDheGroupsServerExtension(byte[] extensionData)
		{
			return default(byte);
		}

		[Token(Token = "0x60016CE")]
		[Address(RVA = "0xF1D2C0", Offset = "0xF1D2C0", VA = "0xF1D2C0")]
		public static DHParameters GetParametersForDHEGroup(short dheGroup)
		{
			return null;
		}

		[Token(Token = "0x60016CF")]
		[Address(RVA = "0xF1D418", Offset = "0xF1D418", VA = "0xF1D418")]
		public static bool ContainsDheCipherSuites(int[] cipherSuites)
		{
			return default(bool);
		}

		[Token(Token = "0x60016D0")]
		[Address(RVA = "0xF1D4E8", Offset = "0xF1D4E8", VA = "0xF1D4E8")]
		public static bool IsDheCipherSuite(int cipherSuite)
		{
			return default(bool);
		}

		[Token(Token = "0x60016D1")]
		[Address(RVA = "0xF1D650", Offset = "0xF1D650", VA = "0xF1D650")]
		public static bool AreCompatibleParameters(DHParameters a, DHParameters b)
		{
			return default(bool);
		}

		[Token(Token = "0x60016D2")]
		[Address(RVA = "0xF1C950", Offset = "0xF1C950", VA = "0xF1C950")]
		public static byte[] CalculateDHBasicAgreement(DHPublicKeyParameters publicKey, DHPrivateKeyParameters privateKey)
		{
			return null;
		}

		[Token(Token = "0x60016D3")]
		[Address(RVA = "0xF1D6BC", Offset = "0xF1D6BC", VA = "0xF1D6BC")]
		public static AsymmetricCipherKeyPair GenerateDHKeyPair(SecureRandom random, DHParameters dhParams)
		{
			return null;
		}

		[Token(Token = "0x60016D4")]
		[Address(RVA = "0xF1C65C", Offset = "0xF1C65C", VA = "0xF1C65C")]
		public static DHPrivateKeyParameters GenerateEphemeralClientKeyExchange(SecureRandom random, DHParameters dhParams, Stream output)
		{
			return null;
		}

		[Token(Token = "0x60016D5")]
		[Address(RVA = "0xF1D770", Offset = "0xF1D770", VA = "0xF1D770")]
		public static DHPrivateKeyParameters GenerateEphemeralServerKeyExchange(SecureRandom random, DHParameters dhParams, Stream output)
		{
			return null;
		}

		[Token(Token = "0x60016D6")]
		[Address(RVA = "0xF1541C", Offset = "0xF1541C", VA = "0xF1541C")]
		public static DHPublicKeyParameters ValidateDHPublicKey(DHPublicKeyParameters key)
		{
			return null;
		}

		[Token(Token = "0x60016D7")]
		[Address(RVA = "0xF15380", Offset = "0xF15380", VA = "0xF15380")]
		public static BigInteger ReadDHParameter(Stream input)
		{
			return null;
		}

		[Token(Token = "0x60016D8")]
		[Address(RVA = "0xF151F4", Offset = "0xF151F4", VA = "0xF151F4")]
		public static void WriteDHParameter(BigInteger x, Stream output)
		{
		}

		[Token(Token = "0x60016D9")]
		[Address(RVA = "0xF1D8B0", Offset = "0xF1D8B0", VA = "0xF1D8B0")]
		protected TlsDHUtilities()
		{
		}
	}
	[Token(Token = "0x200029A")]
	public class TlsDeflateCompression : TlsCompression
	{
		[Token(Token = "0x200066F")]
		protected class DeflateOutputStream : ZOutputStream
		{
			[Token(Token = "0x60034EB")]
			[Address(RVA = "0xF1DB60", Offset = "0xF1DB60", VA = "0xF1DB60")]
			public DeflateOutputStream(Stream output, ZStream z, bool compress)
			{
			}

			[Token(Token = "0x60034EC")]
			[Address(RVA = "0xF1DC38", Offset = "0xF1DC38", VA = "0xF1DC38", Slot = "17")]
			public override void Flush()
			{
			}
		}

		[Token(Token = "0x4000CAC")]
		public const int LEVEL_NONE = 0;

		[Token(Token = "0x4000CAD")]
		public const int LEVEL_FASTEST = 1;

		[Token(Token = "0x4000CAE")]
		public const int LEVEL_SMALLEST = 9;

		[Token(Token = "0x4000CAF")]
		public const int LEVEL_DEFAULT = -1;

		[Token(Token = "0x4000CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly ZStream zIn;

		[Token(Token = "0x4000CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected readonly ZStream zOut;

		[Token(Token = "0x60016DB")]
		[Address(RVA = "0xF078D8", Offset = "0xF078D8", VA = "0xF078D8")]
		public TlsDeflateCompression()
		{
		}

		[Token(Token = "0x60016DC")]
		[Address(RVA = "0xF1DA14", Offset = "0xF1DA14", VA = "0xF1DA14")]
		public TlsDeflateCompression(int level)
		{
		}

		[Token(Token = "0x60016DD")]
		[Address(RVA = "0xF1DAC8", Offset = "0xF1DAC8", VA = "0xF1DAC8", Slot = "6")]
		public virtual Stream Compress(Stream output)
		{
			return null;
		}

		[Token(Token = "0x60016DE")]
		[Address(RVA = "0xF1DBA4", Offset = "0xF1DBA4", VA = "0xF1DBA4", Slot = "7")]
		public virtual Stream Decompress(Stream output)
		{
			return null;
		}
	}
	[Token(Token = "0x200029B")]
	public class TlsDheKeyExchange : TlsDHKeyExchange
	{
		[Token(Token = "0x4000CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected TlsSignerCredentials mServerCredentials;

		[Token(Token = "0x60016DF")]
		[Address(RVA = "0xF107C8", Offset = "0xF107C8", VA = "0xF107C8")]
		public TlsDheKeyExchange(int keyExchange, IList supportedSignatureAlgorithms, DHParameters dhParameters)
		{
		}

		[Token(Token = "0x60016E0")]
		[Address(RVA = "0xF1DC3C", Offset = "0xF1DC3C", VA = "0xF1DC3C", Slot = "22")]
		public override void ProcessServerCredentials(TlsCredentials serverCredentials)
		{
		}

		[Token(Token = "0x60016E1")]
		[Address(RVA = "0xF1DD80", Offset = "0xF1DD80", VA = "0xF1DD80", Slot = "24")]
		public override byte[] GenerateServerKeyExchange()
		{
			return null;
		}

		[Token(Token = "0x60016E2")]
		[Address(RVA = "0xF1E1AC", Offset = "0xF1E1AC", VA = "0xF1E1AC", Slot = "26")]
		public override void ProcessServerKeyExchange(Stream input)
		{
		}

		[Token(Token = "0x60016E3")]
		[Address(RVA = "0xF1E43C", Offset = "0xF1E43C", VA = "0xF1E43C", Slot = "34")]
		protected virtual ISigner InitVerifyer(TlsSigner tlsSigner, SignatureAndHashAlgorithm algorithm, SecurityParameters securityParameters)
		{
			return null;
		}
	}
	[Token(Token = "0x200029C")]
	public abstract class TlsDsaSigner : AbstractTlsSigner
	{
		[Token(Token = "0x170002C2")]
		protected abstract byte SignatureAlgorithm
		{
			[Token(Token = "0x60016EA")]
			get;
		}

		[Token(Token = "0x60016E4")]
		[Address(RVA = "0xF1E628", Offset = "0xF1E628", VA = "0xF1E628", Slot = "16")]
		public override byte[] GenerateRawSignature(SignatureAndHashAlgorithm algorithm, AsymmetricKeyParameter privateKey, byte[] hash)
		{
			return null;
		}

		[Token(Token = "0x60016E5")]
		[Address(RVA = "0xF1E8C0", Offset = "0xF1E8C0", VA = "0xF1E8C0", Slot = "18")]
		public override bool VerifyRawSignature(SignatureAndHashAlgorithm algorithm, byte[] sigBytes, AsymmetricKeyParameter publicKey, byte[] hash)
		{
			return default(bool);
		}

		[Token(Token = "0x60016E6")]
		[Address(RVA = "0xF1EAC0", Offset = "0xF1EAC0", VA = "0xF1EAC0", Slot = "20")]
		public override ISigner CreateSigner(SignatureAndHashAlgorithm algorithm, AsymmetricKeyParameter privateKey)
		{
			return null;
		}

		[Token(Token = "0x60016E7")]
		[Address(RVA = "0xF1EADC", Offset = "0xF1EADC", VA = "0xF1EADC", Slot = "22")]
		public override ISigner CreateVerifyer(SignatureAndHashAlgorithm algorithm, AsymmetricKeyParameter publicKey)
		{
			return null;
		}

		[Token(Token = "0x60016E8")]
		[Address(RVA = "0xF1EAF8", Offset = "0xF1EAF8", VA = "0xF1EAF8", Slot = "24")]
		protected virtual ICipherParameters MakeInitParameters(bool forSigning, ICipherParameters cp)
		{
			return null;
		}

		[Token(Token = "0x60016E9")]
		[Address(RVA = "0xF1EB00", Offset = "0xF1EB00", VA = "0xF1EB00", Slot = "25")]
		protected virtual ISigner MakeSigner(SignatureAndHashAlgorithm algorithm, bool raw, bool forSigning, ICipherParameters cp)
		{
			return null;
		}

		[Token(Token = "0x60016EB")]
		protected abstract IDsa CreateDsaImpl(byte hashAlgorithm);

		[Token(Token = "0x60016EC")]
		[Address(RVA = "0xF1ED58", Offset = "0xF1ED58", VA = "0xF1ED58")]
		protected TlsDsaSigner()
		{
		}
	}
	[Token(Token = "0x200029D")]
	public class TlsDssSigner : TlsDsaSigner
	{
		[Token(Token = "0x170002C3")]
		protected override byte SignatureAlgorithm
		{
			[Token(Token = "0x60016EF")]
			[Address(RVA = "0xB03B10", Offset = "0xB03B10", VA = "0xB03B10", Slot = "26")]
			get
			{
				return default(byte);
			}
		}

		[Token(Token = "0x60016ED")]
		[Address(RVA = "0xB03870", Offset = "0xB03870", VA = "0xB03870", Slot = "23")]
		public override bool IsValidPublicKey(AsymmetricKeyParameter publicKey)
		{
			return default(bool);
		}

		[Token(Token = "0x60016EE")]
		[Address(RVA = "0xB038F0", Offset = "0xB038F0", VA = "0xB038F0", Slot = "27")]
		protected override IDsa CreateDsaImpl(byte hashAlgorithm)
		{
			return null;
		}

		[Token(Token = "0x60016F0")]
		[Address(RVA = "0xB03B18", Offset = "0xB03B18", VA = "0xB03B18")]
		public TlsDssSigner()
		{
		}
	}
	[Token(Token = "0x200029E")]
	public class TlsECDHKeyExchange : AbstractTlsKeyExchange
	{
		[Token(Token = "0x4000CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected TlsSigner mTlsSigner;

		[Token(Token = "0x4000CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected int[] mNamedCurves;

		[Token(Token = "0x4000CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected byte[] mClientECPointFormats;

		[Token(Token = "0x4000CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected byte[] mServerECPointFormats;

		[Token(Token = "0x4000CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected AsymmetricKeyParameter mServerPublicKey;

		[Token(Token = "0x4000CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected TlsAgreementCredentials mAgreementCredentials;

		[Token(Token = "0x4000CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected ECPrivateKeyParameters mECAgreePrivateKey;

		[Token(Token = "0x4000CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected ECPublicKeyParameters mECAgreePublicKey;

		[Token(Token = "0x170002C4")]
		public override bool RequiresServerKeyExchange
		{
			[Token(Token = "0x60016F5")]
			[Address(RVA = "0xB04284", Offset = "0xB04284", VA = "0xB04284", Slot = "23")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60016F1")]
		[Address(RVA = "0xB03B20", Offset = "0xB03B20", VA = "0xB03B20")]
		public TlsECDHKeyExchange(int keyExchange, IList supportedSignatureAlgorithms, int[] namedCurves, byte[] clientECPointFormats, byte[] serverECPointFormats)
		{
		}

		[Token(Token = "0x60016F2")]
		[Address(RVA = "0xB03C54", Offset = "0xB03C54", VA = "0xB03C54", Slot = "19")]
		public override void Init(TlsContext context)
		{
		}

		[Token(Token = "0x60016F3")]
		[Address(RVA = "0xB03D30", Offset = "0xB03D30", VA = "0xB03D30", Slot = "20")]
		public override void SkipServerCredentials()
		{
		}

		[Token(Token = "0x60016F4")]
		[Address(RVA = "0xB03DD4", Offset = "0xB03DD4", VA = "0xB03DD4", Slot = "21")]
		public override void ProcessServerCertificate(Certificate serverCertificate)
		{
		}

		[Token(Token = "0x60016F6")]
		[Address(RVA = "0xB042A8", Offset = "0xB042A8", VA = "0xB042A8", Slot = "27")]
		public override void ValidateCertificateRequest(CertificateRequest certificateRequest)
		{
		}

		[Token(Token = "0x60016F7")]
		[Address(RVA = "0xB0438C", Offset = "0xB0438C", VA = "0xB0438C", Slot = "29")]
		public override void ProcessClientCredentials(TlsCredentials clientCredentials)
		{
		}

		[Token(Token = "0x60016F8")]
		[Address(RVA = "0xB04464", Offset = "0xB04464", VA = "0xB04464", Slot = "31")]
		public override void GenerateClientKeyExchange(Stream output)
		{
		}

		[Token(Token = "0x60016F9")]
		[Address(RVA = "0xB046A4", Offset = "0xB046A4", VA = "0xB046A4", Slot = "30")]
		public override void ProcessClientCertificate(Certificate clientCertificate)
		{
		}

		[Token(Token = "0x60016FA")]
		[Address(RVA = "0xB046A8", Offset = "0xB046A8", VA = "0xB046A8", Slot = "32")]
		public override void ProcessClientKeyExchange(Stream input)
		{
		}

		[Token(Token = "0x60016FB")]
		[Address(RVA = "0xB04964", Offset = "0xB04964", VA = "0xB04964", Slot = "33")]
		public override byte[] GeneratePremasterSecret()
		{
			return null;
		}
	}
	[Token(Token = "0x200029F")]
	public class TlsECDheKeyExchange : TlsECDHKeyExchange
	{
		[Token(Token = "0x4000CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected TlsSignerCredentials mServerCredentials;

		[Token(Token = "0x60016FC")]
		[Address(RVA = "0xB04B3C", Offset = "0xB04B3C", VA = "0xB04B3C")]
		public TlsECDheKeyExchange(int keyExchange, IList supportedSignatureAlgorithms, int[] namedCurves, byte[] clientECPointFormats, byte[] serverECPointFormats)
		{
		}

		[Token(Token = "0x60016FD")]
		[Address(RVA = "0xB04B40", Offset = "0xB04B40", VA = "0xB04B40", Slot = "22")]
		public override void ProcessServerCredentials(TlsCredentials serverCredentials)
		{
		}

		[Token(Token = "0x60016FE")]
		[Address(RVA = "0xB04C80", Offset = "0xB04C80", VA = "0xB04C80", Slot = "24")]
		public override byte[] GenerateServerKeyExchange()
		{
			return null;
		}

		[Token(Token = "0x60016FF")]
		[Address(RVA = "0xB05490", Offset = "0xB05490", VA = "0xB05490", Slot = "26")]
		public override void ProcessServerKeyExchange(Stream input)
		{
		}

		[Token(Token = "0x6001700")]
		[Address(RVA = "0xB05E20", Offset = "0xB05E20", VA = "0xB05E20", Slot = "27")]
		public override void ValidateCertificateRequest(CertificateRequest certificateRequest)
		{
		}

		[Token(Token = "0x6001701")]
		[Address(RVA = "0xB05EF8", Offset = "0xB05EF8", VA = "0xB05EF8", Slot = "29")]
		public override void ProcessClientCredentials(TlsCredentials clientCredentials)
		{
		}

		[Token(Token = "0x6001702")]
		[Address(RVA = "0xB05F80", Offset = "0xB05F80", VA = "0xB05F80", Slot = "34")]
		protected virtual ISigner InitVerifyer(TlsSigner tlsSigner, SignatureAndHashAlgorithm algorithm, SecurityParameters securityParameters)
		{
			return null;
		}
	}
	[Token(Token = "0x20002A0")]
	public class TlsECDsaSigner : TlsDsaSigner
	{
		[Token(Token = "0x170002C5")]
		protected override byte SignatureAlgorithm
		{
			[Token(Token = "0x6001705")]
			[Address(RVA = "0xB062A0", Offset = "0xB062A0", VA = "0xB062A0", Slot = "26")]
			get
			{
				return default(byte);
			}
		}

		[Token(Token = "0x6001703")]
		[Address(RVA = "0xB0616C", Offset = "0xB0616C", VA = "0xB0616C", Slot = "23")]
		public override bool IsValidPublicKey(AsymmetricKeyParameter publicKey)
		{
			return default(bool);
		}

		[Token(Token = "0x6001704")]
		[Address(RVA = "0xB061EC", Offset = "0xB061EC", VA = "0xB061EC", Slot = "27")]
		protected override IDsa CreateDsaImpl(byte hashAlgorithm)
		{
			return null;
		}

		[Token(Token = "0x6001706")]
		[Address(RVA = "0xB03C4C", Offset = "0xB03C4C", VA = "0xB03C4C")]
		public TlsECDsaSigner()
		{
		}
	}
	[Token(Token = "0x20002A1")]
	public abstract class TlsEccUtilities
	{
		[Token(Token = "0x4000CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly string[] CurveNames;

		[Token(Token = "0x6001707")]
		[Address(RVA = "0xB062A8", Offset = "0xB062A8", VA = "0xB062A8")]
		public static void AddSupportedEllipticCurvesExtension(IDictionary extensions, int[] namedCurves)
		{
		}

		[Token(Token = "0x6001708")]
		[Address(RVA = "0xB06464", Offset = "0xB06464", VA = "0xB06464")]
		public static void AddSupportedPointFormatsExtension(IDictionary extensions, byte[] ecPointFormats)
		{
		}

		[Token(Token = "0x6001709")]
		[Address(RVA = "0xB0660C", Offset = "0xB0660C", VA = "0xB0660C")]
		public static int[] GetSupportedEllipticCurvesExtension(IDictionary extensions)
		{
			return null;
		}

		[Token(Token = "0x600170A")]
		[Address(RVA = "0xB06918", Offset = "0xB06918", VA = "0xB06918")]
		public static byte[] GetSupportedPointFormatsExtension(IDictionary extensions)
		{
			return null;
		}

		[Token(Token = "0x600170B")]
		[Address(RVA = "0xB063C0", Offset = "0xB063C0", VA = "0xB063C0")]
		public static byte[] CreateSupportedEllipticCurvesExtension(int[] namedCurves)
		{
			return null;
		}

		[Token(Token = "0x600170C")]
		[Address(RVA = "0xB0657C", Offset = "0xB0657C", VA = "0xB0657C")]
		public static byte[] CreateSupportedPointFormatsExtension(byte[] ecPointFormats)
		{
			return null;
		}

		[Token(Token = "0x600170D")]
		[Address(RVA = "0xB067BC", Offset = "0xB067BC", VA = "0xB067BC")]
		public static int[] ReadSupportedEllipticCurvesExtension(byte[] extensionData)
		{
			return null;
		}

		[Token(Token = "0x600170E")]
		[Address(RVA = "0xB069BC", Offset = "0xB069BC", VA = "0xB069BC")]
		public static byte[] ReadSupportedPointFormatsExtension(byte[] extensionData)
		{
			return null;
		}

		[Token(Token = "0x600170F")]
		[Address(RVA = "0xB07018", Offset = "0xB07018", VA = "0xB07018")]
		public static string GetNameOfNamedCurve(int namedCurve)
		{
			return null;
		}

		[Token(Token = "0x6001710")]
		[Address(RVA = "0xB0716C", Offset = "0xB0716C", VA = "0xB0716C")]
		public static ECDomainParameters GetParametersForNamedCurve(int namedCurve)
		{
			return null;
		}

		[Token(Token = "0x6001711")]
		[Address(RVA = "0xB07290", Offset = "0xB07290", VA = "0xB07290")]
		public static bool HasAnySupportedNamedCurves()
		{
			return default(bool);
		}

		[Token(Token = "0x6001712")]
		[Address(RVA = "0xB0730C", Offset = "0xB0730C", VA = "0xB0730C")]
		public static bool ContainsEccCipherSuites(int[] cipherSuites)
		{
			return default(bool);
		}

		[Token(Token = "0x6001713")]
		[Address(RVA = "0xB073DC", Offset = "0xB073DC", VA = "0xB073DC")]
		public static bool IsEccCipherSuite(int cipherSuite)
		{
			return default(bool);
		}

		[Token(Token = "0x6001714")]
		[Address(RVA = "0xB074B4", Offset = "0xB074B4", VA = "0xB074B4")]
		public static bool AreOnSameCurve(ECDomainParameters a, ECDomainParameters b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001715")]
		[Address(RVA = "0xB070DC", Offset = "0xB070DC", VA = "0xB070DC")]
		public static bool IsSupportedNamedCurve(int namedCurve)
		{
			return default(bool);
		}

		[Token(Token = "0x6001716")]
		[Address(RVA = "0xB07560", Offset = "0xB07560", VA = "0xB07560")]
		public static bool IsCompressionPreferred(byte[] ecPointFormats, byte compressionFormat)
		{
			return default(bool);
		}

		[Token(Token = "0x6001717")]
		[Address(RVA = "0xB075C0", Offset = "0xB075C0", VA = "0xB075C0")]
		public static byte[] SerializeECFieldElement(int fieldSize, BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6001718")]
		[Address(RVA = "0xB075DC", Offset = "0xB075DC", VA = "0xB075DC")]
		public static byte[] SerializeECPoint(byte[] ecPointFormats, ECPoint point)
		{
			return null;
		}

		[Token(Token = "0x6001719")]
		[Address(RVA = "0xB076D0", Offset = "0xB076D0", VA = "0xB076D0")]
		public static byte[] SerializeECPublicKey(byte[] ecPointFormats, ECPublicKeyParameters keyParameters)
		{
			return null;
		}

		[Token(Token = "0x600171A")]
		[Address(RVA = "0xB07750", Offset = "0xB07750", VA = "0xB07750")]
		public static BigInteger DeserializeECFieldElement(int fieldSize, byte[] encoding)
		{
			return null;
		}

		[Token(Token = "0x600171B")]
		[Address(RVA = "0xB07834", Offset = "0xB07834", VA = "0xB07834")]
		public static ECPoint DeserializeECPoint(byte[] ecPointFormats, ECCurve curve, byte[] encoding)
		{
			return null;
		}

		[Token(Token = "0x600171C")]
		[Address(RVA = "0xB04800", Offset = "0xB04800", VA = "0xB04800")]
		public static ECPublicKeyParameters DeserializeECPublicKey(byte[] ecPointFormats, ECDomainParameters curve_params, byte[] encoding)
		{
			return null;
		}

		[Token(Token = "0x600171D")]
		[Address(RVA = "0xB04A88", Offset = "0xB04A88", VA = "0xB04A88")]
		public static byte[] CalculateECDHBasicAgreement(ECPublicKeyParameters publicKey, ECPrivateKeyParameters privateKey)
		{
			return null;
		}

		[Token(Token = "0x600171E")]
		[Address(RVA = "0xB07940", Offset = "0xB07940", VA = "0xB07940")]
		public static AsymmetricCipherKeyPair GenerateECKeyPair(SecureRandom random, ECDomainParameters ecParams)
		{
			return null;
		}

		[Token(Token = "0x600171F")]
		[Address(RVA = "0xB04584", Offset = "0xB04584", VA = "0xB04584")]
		public static ECPrivateKeyParameters GenerateEphemeralClientKeyExchange(SecureRandom random, byte[] ecPointFormats, ECDomainParameters ecParams, Stream output)
		{
			return null;
		}

		[Token(Token = "0x6001720")]
		[Address(RVA = "0xB05074", Offset = "0xB05074", VA = "0xB05074")]
		internal static ECPrivateKeyParameters GenerateEphemeralServerKeyExchange(SecureRandom random, int[] namedCurves, byte[] ecPointFormats, Stream output)
		{
			return null;
		}

		[Token(Token = "0x6001721")]
		[Address(RVA = "0xB0417C", Offset = "0xB0417C", VA = "0xB0417C")]
		public static ECPublicKeyParameters ValidateECPublicKey(ECPublicKeyParameters key)
		{
			return null;
		}

		[Token(Token = "0x6001722")]
		[Address(RVA = "0xB080E8", Offset = "0xB080E8", VA = "0xB080E8")]
		public static int ReadECExponent(int fieldSize, Stream input)
		{
			return default(int);
		}

		[Token(Token = "0x6001723")]
		[Address(RVA = "0xB08348", Offset = "0xB08348", VA = "0xB08348")]
		public static BigInteger ReadECFieldElement(int fieldSize, Stream input)
		{
			return null;
		}

		[Token(Token = "0x6001724")]
		[Address(RVA = "0xB081BC", Offset = "0xB081BC", VA = "0xB081BC")]
		public static BigInteger ReadECParameter(Stream input)
		{
			return null;
		}

		[Token(Token = "0x6001725")]
		[Address(RVA = "0xB05764", Offset = "0xB05764", VA = "0xB05764")]
		public static ECDomainParameters ReadECParameters(int[] namedCurves, byte[] ecPointFormats, Stream input)
		{
			return null;
		}

		[Token(Token = "0x6001726")]
		[Address(RVA = "0xB083EC", Offset = "0xB083EC", VA = "0xB083EC")]
		private static void CheckNamedCurve(int[] namedCurves, int namedCurve)
		{
		}

		[Token(Token = "0x6001727")]
		[Address(RVA = "0xB08480", Offset = "0xB08480", VA = "0xB08480")]
		public static void WriteECExponent(int k, Stream output)
		{
		}

		[Token(Token = "0x6001728")]
		[Address(RVA = "0xB08698", Offset = "0xB08698", VA = "0xB08698")]
		public static void WriteECFieldElement(ECFieldElement x, Stream output)
		{
		}

		[Token(Token = "0x6001729")]
		[Address(RVA = "0xB087DC", Offset = "0xB087DC", VA = "0xB087DC")]
		public static void WriteECFieldElement(int fieldSize, BigInteger x, Stream output)
		{
		}

		[Token(Token = "0x600172A")]
		[Address(RVA = "0xB08610", Offset = "0xB08610", VA = "0xB08610")]
		public static void WriteECParameter(BigInteger x, Stream output)
		{
		}

		[Token(Token = "0x600172B")]
		[Address(RVA = "0xB07A98", Offset = "0xB07A98", VA = "0xB07A98")]
		public static void WriteExplicitECParameters(byte[] ecPointFormats, ECDomainParameters ecParameters, Stream output)
		{
		}

		[Token(Token = "0x600172C")]
		[Address(RVA = "0xB079EC", Offset = "0xB079EC", VA = "0xB079EC")]
		public static void WriteECPoint(byte[] ecPointFormats, ECPoint point, Stream output)
		{
		}

		[Token(Token = "0x600172D")]
		[Address(RVA = "0xB0800C", Offset = "0xB0800C", VA = "0xB0800C")]
		public static void WriteNamedECParameters(int namedCurve, Stream output)
		{
		}

		[Token(Token = "0x600172E")]
		[Address(RVA = "0xB089B4", Offset = "0xB089B4", VA = "0xB089B4")]
		protected TlsEccUtilities()
		{
		}
	}
	[Token(Token = "0x20002A2")]
	public interface TlsEncryptionCredentials : TlsCredentials
	{
		[Token(Token = "0x6001730")]
		byte[] DecryptPreMasterSecret(byte[] encryptedPreMasterSecret);
	}
	[Token(Token = "0x20002A3")]
	public abstract class TlsExtensionsUtilities
	{
		[Token(Token = "0x6001731")]
		[Address(RVA = "0xB08FFC", Offset = "0xB08FFC", VA = "0xB08FFC")]
		public static IDictionary EnsureExtensionsInitialised(IDictionary extensions)
		{
			return null;
		}

		[Token(Token = "0x6001732")]
		[Address(RVA = "0xB09074", Offset = "0xB09074", VA = "0xB09074")]
		public static void AddEncryptThenMacExtension(IDictionary extensions)
		{
		}

		[Token(Token = "0x6001733")]
		[Address(RVA = "0xB091C8", Offset = "0xB091C8", VA = "0xB091C8")]
		public static void AddExtendedMasterSecretExtension(IDictionary extensions)
		{
		}

		[Token(Token = "0x6001734")]
		[Address(RVA = "0xB0931C", Offset = "0xB0931C", VA = "0xB0931C")]
		public static void AddHeartbeatExtension(IDictionary extensions, HeartbeatExtension heartbeatExtension)
		{
		}

		[Token(Token = "0x6001735")]
		[Address(RVA = "0xB094CC", Offset = "0xB094CC", VA = "0xB094CC")]
		public static void AddMaxFragmentLengthExtension(IDictionary extensions, byte maxFragmentLength)
		{
		}

		[Token(Token = "0x6001736")]
		[Address(RVA = "0xB09634", Offset = "0xB09634", VA = "0xB09634")]
		public static void AddServerNameExtension(IDictionary extensions, ServerNameList serverNameList)
		{
		}

		[Token(Token = "0x6001737")]
		[Address(RVA = "0xB097E0", Offset = "0xB097E0", VA = "0xB097E0")]
		public static void AddStatusRequestExtension(IDictionary extensions, CertificateStatusRequest statusRequest)
		{
		}

		[Token(Token = "0x6001738")]
		[Address(RVA = "0xB09990", Offset = "0xB09990", VA = "0xB09990")]
		public static void AddTruncatedHMacExtension(IDictionary extensions)
		{
		}

		[Token(Token = "0x6001739")]
		[Address(RVA = "0xB09AE4", Offset = "0xB09AE4", VA = "0xB09AE4")]
		public static HeartbeatExtension GetHeartbeatExtension(IDictionary extensions)
		{
			return null;
		}

		[Token(Token = "0x600173A")]
		[Address(RVA = "0xB09C44", Offset = "0xB09C44", VA = "0xB09C44")]
		public static short GetMaxFragmentLengthExtension(IDictionary extensions)
		{
			return default(short);
		}

		[Token(Token = "0x600173B")]
		[Address(RVA = "0xB09D74", Offset = "0xB09D74", VA = "0xB09D74")]
		public static ServerNameList GetServerNameExtension(IDictionary extensions)
		{
			return null;
		}

		[Token(Token = "0x600173C")]
		[Address(RVA = "0xB09ED4", Offset = "0xB09ED4", VA = "0xB09ED4")]
		public static CertificateStatusRequest GetStatusRequestExtension(IDictionary extensions)
		{
			return null;
		}

		[Token(Token = "0x600173D")]
		[Address(RVA = "0xB0A034", Offset = "0xB0A034", VA = "0xB0A034")]
		public static bool HasEncryptThenMacExtension(IDictionary extensions)
		{
			return default(bool);
		}

		[Token(Token = "0x600173E")]
		[Address(RVA = "0xB0A0C4", Offset = "0xB0A0C4", VA = "0xB0A0C4")]
		public static bool HasExtendedMasterSecretExtension(IDictionary extensions)
		{
			return default(bool);
		}

		[Token(Token = "0x600173F")]
		[Address(RVA = "0xB0A154", Offset = "0xB0A154", VA = "0xB0A154")]
		public static bool HasTruncatedHMacExtension(IDictionary extensions)
		{
			return default(bool);
		}

		[Token(Token = "0x6001740")]
		[Address(RVA = "0xB0A1E4", Offset = "0xB0A1E4", VA = "0xB0A1E4")]
		public static byte[] CreateEmptyExtensionData()
		{
			return null;
		}

		[Token(Token = "0x6001741")]
		[Address(RVA = "0xB09160", Offset = "0xB09160", VA = "0xB09160")]
		public static byte[] CreateEncryptThenMacExtension()
		{
			return null;
		}

		[Token(Token = "0x6001742")]
		[Address(RVA = "0xB092B4", Offset = "0xB092B4", VA = "0xB092B4")]
		public static byte[] CreateExtendedMasterSecretExtension()
		{
			return null;
		}

		[Token(Token = "0x6001743")]
		[Address(RVA = "0xB09410", Offset = "0xB09410", VA = "0xB09410")]
		public static byte[] CreateHeartbeatExtension(HeartbeatExtension heartbeatExtension)
		{
			return null;
		}

		[Token(Token = "0x6001744")]
		[Address(RVA = "0xB095C0", Offset = "0xB095C0", VA = "0xB095C0")]
		public static byte[] CreateMaxFragmentLengthExtension(byte maxFragmentLength)
		{
			return null;
		}

		[Token(Token = "0x6001745")]
		[Address(RVA = "0xB09724", Offset = "0xB09724", VA = "0xB09724")]
		public static byte[] CreateServerNameExtension(ServerNameList serverNameList)
		{
			return null;
		}

		[Token(Token = "0x6001746")]
		[Address(RVA = "0xB098D4", Offset = "0xB098D4", VA = "0xB098D4")]
		public static byte[] CreateStatusRequestExtension(CertificateStatusRequest statusRequest)
		{
			return null;
		}

		[Token(Token = "0x6001747")]
		[Address(RVA = "0xB09A7C", Offset = "0xB09A7C", VA = "0xB09A7C")]
		public static byte[] CreateTruncatedHMacExtension()
		{
			return null;
		}

		[Token(Token = "0x6001748")]
		[Address(RVA = "0xB0A24C", Offset = "0xB0A24C", VA = "0xB0A24C")]
		private static bool ReadEmptyExtensionData(byte[] extensionData)
		{
			return default(bool);
		}

		[Token(Token = "0x6001749")]
		[Address(RVA = "0xB0A0AC", Offset = "0xB0A0AC", VA = "0xB0A0AC")]
		public static bool ReadEncryptThenMacExtension(byte[] extensionData)
		{
			return default(bool);
		}

		[Token(Token = "0x600174A")]
		[Address(RVA = "0xB0A13C", Offset = "0xB0A13C", VA = "0xB0A13C")]
		public static bool ReadExtendedMasterSecretExtension(byte[] extensionData)
		{
			return default(bool);
		}

		[Token(Token = "0x600174B")]
		[Address(RVA = "0xB09B60", Offset = "0xB09B60", VA = "0xB09B60")]
		public static HeartbeatExtension ReadHeartbeatExtension(byte[] extensionData)
		{
			return null;
		}

		[Token(Token = "0x600174C")]
		[Address(RVA = "0xB09CC4", Offset = "0xB09CC4", VA = "0xB09CC4")]
		public static short ReadMaxFragmentLengthExtension(byte[] extensionData)
		{
			return default(short);
		}

		[Token(Token = "0x600174D")]
		[Address(RVA = "0xB09DF0", Offset = "0xB09DF0", VA = "0xB09DF0")]
		public static ServerNameList ReadServerNameExtension(byte[] extensionData)
		{
			return null;
		}

		[Token(Token = "0x600174E")]
		[Address(RVA = "0xB09F50", Offset = "0xB09F50", VA = "0xB09F50")]
		public static CertificateStatusRequest ReadStatusRequestExtension(byte[] extensionData)
		{
			return null;
		}

		[Token(Token = "0x600174F")]
		[Address(RVA = "0xB0A1CC", Offset = "0xB0A1CC", VA = "0xB0A1CC")]
		public static bool ReadTruncatedHMacExtension(byte[] extensionData)
		{
			return default(bool);
		}

		[Token(Token = "0x6001750")]
		[Address(RVA = "0xB0A2F8", Offset = "0xB0A2F8", VA = "0xB0A2F8")]
		protected TlsExtensionsUtilities()
		{
		}
	}
	[Token(Token = "0x20002A4")]
	public class TlsFatalAlert : IOException
	{
		[Token(Token = "0x4000CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly byte alertDescription;

		[Token(Token = "0x170002C6")]
		public virtual byte AlertDescription
		{
			[Token(Token = "0x6001753")]
			[Address(RVA = "0xB0A300", Offset = "0xB0A300", VA = "0xB0A300", Slot = "12")]
			get
			{
				return default(byte);
			}
		}

		[Token(Token = "0x6001751")]
		[Address(RVA = "0xB03D90", Offset = "0xB03D90", VA = "0xB03D90")]
		public TlsFatalAlert(byte alertDescription)
		{
		}

		[Token(Token = "0x6001752")]
		[Address(RVA = "0xB0412C", Offset = "0xB0412C", VA = "0xB0412C")]
		public TlsFatalAlert(byte alertDescription, Exception alertCause)
		{
		}
	}
	[Token(Token = "0x20002A5")]
	public interface TlsHandshakeHash : IDigest
	{
		[Token(Token = "0x6001754")]
		void Init(TlsContext context);

		[Token(Token = "0x6001755")]
		TlsHandshakeHash NotifyPrfDetermined();

		[Token(Token = "0x6001756")]
		void TrackHashAlgorithm(byte hashAlgorithm);

		[Token(Token = "0x6001757")]
		void SealHashAlgorithms();

		[Token(Token = "0x6001758")]
		TlsHandshakeHash StopTracking();

		[Token(Token = "0x6001759")]
		IDigest ForkPrfHash();

		[Token(Token = "0x600175A")]
		byte[] GetFinalHash(byte hashAlgorithm);
	}
	[Token(Token = "0x20002A6")]
	public interface TlsKeyExchange
	{
		[Token(Token = "0x170002C7")]
		bool RequiresServerKeyExchange
		{
			[Token(Token = "0x600175F")]
			get;
		}

		[Token(Token = "0x600175B")]
		void Init(TlsContext context);

		[Token(Token = "0x600175C")]
		void SkipServerCredentials();

		[Token(Token = "0x600175D")]
		void ProcessServerCredentials(TlsCredentials serverCredentials);

		[Token(Token = "0x600175E")]
		void ProcessServerCertificate(Certificate serverCertificate);

		[Token(Token = "0x6001760")]
		byte[] GenerateServerKeyExchange();

		[Token(Token = "0x6001761")]
		void SkipServerKeyExchange();

		[Token(Token = "0x6001762")]
		void ProcessServerKeyExchange(Stream input);

		[Token(Token = "0x6001763")]
		void ValidateCertificateRequest(CertificateRequest certificateRequest);

		[Token(Token = "0x6001764")]
		void SkipClientCredentials();

		[Token(Token = "0x6001765")]
		void ProcessClientCredentials(TlsCredentials clientCredentials);

		[Token(Token = "0x6001766")]
		void ProcessClientCertificate(Certificate clientCertificate);

		[Token(Token = "0x6001767")]
		void GenerateClientKeyExchange(Stream output);

		[Token(Token = "0x6001768")]
		void ProcessClientKeyExchange(Stream input);

		[Token(Token = "0x6001769")]
		byte[] GeneratePremasterSecret();
	}
	[Token(Token = "0x20002A7")]
	public class TlsMac
	{
		[Token(Token = "0x4000CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly TlsContext context;

		[Token(Token = "0x4000CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected readonly byte[] secret;

		[Token(Token = "0x4000CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected readonly IMac mac;

		[Token(Token = "0x4000CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected readonly int digestBlockSize;

		[Token(Token = "0x4000CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		protected readonly int digestOverhead;

		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected readonly int macLength;

		[Token(Token = "0x170002C8")]
		public virtual byte[] MacSecret
		{
			[Token(Token = "0x600176B")]
			[Address(RVA = "0xB0A774", Offset = "0xB0A774", VA = "0xB0A774", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002C9")]
		public virtual int Size
		{
			[Token(Token = "0x600176C")]
			[Address(RVA = "0xB0A77C", Offset = "0xB0A77C", VA = "0xB0A77C", Slot = "5")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600176A")]
		[Address(RVA = "0xB0A308", Offset = "0xB0A308", VA = "0xB0A308")]
		public TlsMac(TlsContext context, IDigest digest, byte[] key, int keyOff, int keyLen)
		{
		}

		[Token(Token = "0x600176D")]
		[Address(RVA = "0xB0A784", Offset = "0xB0A784", VA = "0xB0A784", Slot = "6")]
		public virtual byte[] CalculateMac(long seqNo, byte type, byte[] message, int offset, int length)
		{
			return null;
		}

		[Token(Token = "0x600176E")]
		[Address(RVA = "0xB0AC90", Offset = "0xB0AC90", VA = "0xB0AC90", Slot = "7")]
		public virtual byte[] CalculateMacConstantTime(long seqNo, byte type, byte[] message, int offset, int length, int fullLength, byte[] dummyData)
		{
			return null;
		}

		[Token(Token = "0x600176F")]
		[Address(RVA = "0xB0AF40", Offset = "0xB0AF40", VA = "0xB0AF40", Slot = "8")]
		protected virtual int GetDigestBlockCount(int inputLength)
		{
			return default(int);
		}

		[Token(Token = "0x6001770")]
		[Address(RVA = "0xB0AF50", Offset = "0xB0AF50", VA = "0xB0AF50", Slot = "9")]
		protected virtual byte[] Truncate(byte[] bs)
		{
			return null;
		}
	}
	[Token(Token = "0x20002A8")]
	public class TlsNullCipher : TlsCipher
	{
		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly TlsContext context;

		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected readonly TlsMac writeMac;

		[Token(Token = "0x4000CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected readonly TlsMac readMac;

		[Token(Token = "0x6001771")]
		[Address(RVA = "0xB0AF84", Offset = "0xB0AF84", VA = "0xB0AF84")]
		public TlsNullCipher(TlsContext context)
		{
		}

		[Token(Token = "0x6001772")]
		[Address(RVA = "0xB0AFB4", Offset = "0xB0AFB4", VA = "0xB0AFB4")]
		public TlsNullCipher(TlsContext context, IDigest clientWriteDigest, IDigest serverWriteDigest)
		{
		}

		[Token(Token = "0x6001773")]
		[Address(RVA = "0xB0B5D0", Offset = "0xB0B5D0", VA = "0xB0B5D0", Slot = "7")]
		public virtual int GetPlaintextLimit(int ciphertextLimit)
		{
			return default(int);
		}

		[Token(Token = "0x6001774")]
		[Address(RVA = "0xB0B608", Offset = "0xB0B608", VA = "0xB0B608", Slot = "8")]
		public virtual byte[] EncodePlaintext(long seqNo, byte type, byte[] plaintext, int offset, int len)
		{
			return null;
		}

		[Token(Token = "0x6001775")]
		[Address(RVA = "0xB0B728", Offset = "0xB0B728", VA = "0xB0B728", Slot = "9")]
		public virtual byte[] DecodeCiphertext(long seqNo, byte type, byte[] ciphertext, int offset, int len)
		{
			return null;
		}
	}
	[Token(Token = "0x20002A9")]
	public class TlsNullCompression : TlsCompression
	{
		[Token(Token = "0x6001776")]
		[Address(RVA = "0xB0B874", Offset = "0xB0B874", VA = "0xB0B874", Slot = "6")]
		public virtual Stream Compress(Stream output)
		{
			return null;
		}

		[Token(Token = "0x6001777")]
		[Address(RVA = "0xB0B87C", Offset = "0xB0B87C", VA = "0xB0B87C", Slot = "7")]
		public virtual Stream Decompress(Stream output)
		{
			return null;
		}

		[Token(Token = "0x6001778")]
		[Address(RVA = "0xB0B884", Offset = "0xB0B884", VA = "0xB0B884")]
		public TlsNullCompression()
		{
		}
	}
	[Token(Token = "0x20002AA")]
	public interface TlsPeer
	{
		[Token(Token = "0x6001779")]
		bool ShouldUseGmtUnixTime();

		[Token(Token = "0x600177A")]
		void NotifySecureRenegotiation(bool secureRenegotiation);

		[Token(Token = "0x600177B")]
		TlsCompression GetCompression();

		[Token(Token = "0x600177C")]
		TlsCipher GetCipher();

		[Token(Token = "0x600177D")]
		void NotifyAlertRaised(byte alertLevel, byte alertDescription, string message, Exception cause);

		[Token(Token = "0x600177E")]
		void NotifyAlertReceived(byte alertLevel, byte alertDescription);

		[Token(Token = "0x600177F")]
		void NotifyHandshakeComplete();
	}
	[Token(Token = "0x20002AB")]
	public abstract class TlsProtocol
	{
		[Token(Token = "0x2000670")]
		internal class HandshakeMessage : MemoryStream
		{
			[Token(Token = "0x60034ED")]
			[Address(RVA = "0xB0DA44", Offset = "0xB0DA44", VA = "0xB0DA44")]
			internal HandshakeMessage(byte handshakeType)
			{
			}

			[Token(Token = "0x60034EE")]
			[Address(RVA = "0xB0DD34", Offset = "0xB0DD34", VA = "0xB0DD34")]
			internal HandshakeMessage(byte handshakeType, int length)
			{
			}

			[Token(Token = "0x60034EF")]
			[Address(RVA = "0xB0FF3C", Offset = "0xB0FF3C", VA = "0xB0FF3C")]
			internal void Write(byte[] data)
			{
			}

			[Token(Token = "0x60034F0")]
			[Address(RVA = "0xB0DA4C", Offset = "0xB0DA4C", VA = "0xB0DA4C")]
			internal void WriteToRecordStream(TlsProtocol protocol)
			{
			}
		}

		[Token(Token = "0x4000CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly string TLS_ERROR_MESSAGE;

		[Token(Token = "0x4000CC8")]
		protected const short CS_START = 0;

		[Token(Token = "0x4000CC9")]
		protected const short CS_CLIENT_HELLO = 1;

		[Token(Token = "0x4000CCA")]
		protected const short CS_SERVER_HELLO = 2;

		[Token(Token = "0x4000CCB")]
		protected const short CS_SERVER_SUPPLEMENTAL_DATA = 3;

		[Token(Token = "0x4000CCC")]
		protected const short CS_SERVER_CERTIFICATE = 4;

		[Token(Token = "0x4000CCD")]
		protected const short CS_CERTIFICATE_STATUS = 5;

		[Token(Token = "0x4000CCE")]
		protected const short CS_SERVER_KEY_EXCHANGE = 6;

		[Token(Token = "0x4000CCF")]
		protected const short CS_CERTIFICATE_REQUEST = 7;

		[Token(Token = "0x4000CD0")]
		protected const short CS_SERVER_HELLO_DONE = 8;

		[Token(Token = "0x4000CD1")]
		protected const short CS_CLIENT_SUPPLEMENTAL_DATA = 9;

		[Token(Token = "0x4000CD2")]
		protected const short CS_CLIENT_CERTIFICATE = 10;

		[Token(Token = "0x4000CD3")]
		protected const short CS_CLIENT_KEY_EXCHANGE = 11;

		[Token(Token = "0x4000CD4")]
		protected const short CS_CERTIFICATE_VERIFY = 12;

		[Token(Token = "0x4000CD5")]
		protected const short CS_CLIENT_FINISHED = 13;

		[Token(Token = "0x4000CD6")]
		protected const short CS_SERVER_SESSION_TICKET = 14;

		[Token(Token = "0x4000CD7")]
		protected const short CS_SERVER_FINISHED = 15;

		[Token(Token = "0x4000CD8")]
		protected const short CS_END = 16;

		[Token(Token = "0x4000CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ByteQueue mApplicationDataQueue;

		[Token(Token = "0x4000CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ByteQueue mAlertQueue;

		[Token(Token = "0x4000CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ByteQueue mHandshakeQueue;

		[Token(Token = "0x4000CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal RecordStream mRecordStream;

		[Token(Token = "0x4000CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected SecureRandom mSecureRandom;

		[Token(Token = "0x4000CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TlsStream mTlsStream;

		[Token(Token = "0x4000CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool mClosed;

		[Token(Token = "0x4000CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		private bool mFailedWithError;

		[Token(Token = "0x4000CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		private bool mAppDataReady;

		[Token(Token = "0x4000CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x43")]
		private bool mSplitApplicationDataRecords;

		[Token(Token = "0x4000CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private byte[] mExpectedVerifyData;

		[Token(Token = "0x4000CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected TlsSession mTlsSession;

		[Token(Token = "0x4000CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected SessionParameters mSessionParameters;

		[Token(Token = "0x4000CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected SecurityParameters mSecurityParameters;

		[Token(Token = "0x4000CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected Certificate mPeerCertificate;

		[Token(Token = "0x4000CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected int[] mOfferedCipherSuites;

		[Token(Token = "0x4000CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected byte[] mOfferedCompressionMethods;

		[Token(Token = "0x4000CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected IDictionary mClientExtensions;

		[Token(Token = "0x4000CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected IDictionary mServerExtensions;

		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected short mConnectionState;

		[Token(Token = "0x4000CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
		protected bool mResumedSession;

		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x93")]
		protected bool mReceivedChangeCipherSpec;

		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected bool mSecureRenegotiation;

		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
		protected bool mAllowCertificateStatus;

		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x96")]
		protected bool mExpectSessionTicket;

		[Token(Token = "0x170002CA")]
		protected abstract TlsContext Context
		{
			[Token(Token = "0x6001782")]
			get;
		}

		[Token(Token = "0x170002CB")]
		internal abstract AbstractTlsContext ContextAdmin
		{
			[Token(Token = "0x6001783")]
			get;
		}

		[Token(Token = "0x170002CC")]
		protected abstract TlsPeer Peer
		{
			[Token(Token = "0x6001784")]
			get;
		}

		[Token(Token = "0x170002CD")]
		public virtual Stream Stream
		{
			[Token(Token = "0x6001797")]
			[Address(RVA = "0xB0D27C", Offset = "0xB0D27C", VA = "0xB0D27C", Slot = "20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002CE")]
		protected internal virtual bool IsClosed
		{
			[Token(Token = "0x60017A5")]
			[Address(RVA = "0xB0E770", Offset = "0xB0E770", VA = "0xB0E770", Slot = "34")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001780")]
		[Address(RVA = "0xB0B88C", Offset = "0xB0B88C", VA = "0xB0B88C")]
		public TlsProtocol(Stream stream, SecureRandom secureRandom)
		{
		}

		[Token(Token = "0x6001781")]
		[Address(RVA = "0xB0B898", Offset = "0xB0B898", VA = "0xB0B898")]
		public TlsProtocol(Stream input, Stream output, SecureRandom secureRandom)
		{
		}

		[Token(Token = "0x6001785")]
		[Address(RVA = "0xB0B98C", Offset = "0xB0B98C", VA = "0xB0B98C", Slot = "7")]
		protected virtual void HandleChangeCipherSpecMessage()
		{
		}

		[Token(Token = "0x6001786")]
		protected abstract void HandleHandshakeMessage(byte type, byte[] buf);

		[Token(Token = "0x6001787")]
		[Address(RVA = "0xB0B990", Offset = "0xB0B990", VA = "0xB0B990", Slot = "9")]
		protected virtual void HandleWarningMessage(byte description)
		{
		}

		[Token(Token = "0x6001788")]
		[Address(RVA = "0xB0B994", Offset = "0xB0B994", VA = "0xB0B994", Slot = "10")]
		protected virtual void ApplyMaxFragmentLengthExtension()
		{
		}

		[Token(Token = "0x6001789")]
		[Address(RVA = "0xB0BA58", Offset = "0xB0BA58", VA = "0xB0BA58", Slot = "11")]
		protected virtual void CheckReceivedChangeCipherSpec(bool expected)
		{
		}

		[Token(Token = "0x600178A")]
		[Address(RVA = "0xB0BAE8", Offset = "0xB0BAE8", VA = "0xB0BAE8", Slot = "12")]
		protected virtual void CleanupHandshake()
		{
		}

		[Token(Token = "0x600178B")]
		[Address(RVA = "0xB0BB4C", Offset = "0xB0BB4C", VA = "0xB0BB4C", Slot = "13")]
		protected virtual void CompleteHandshake()
		{
		}

		[Token(Token = "0x600178C")]
		[Address(RVA = "0xB0C244", Offset = "0xB0C244", VA = "0xB0C244")]
		protected internal void ProcessRecord(byte protocol, byte[] buf, int offset, int len)
		{
		}

		[Token(Token = "0x600178D")]
		[Address(RVA = "0xB0C744", Offset = "0xB0C744", VA = "0xB0C744")]
		private void ProcessHandshake()
		{
		}

		[Token(Token = "0x600178E")]
		[Address(RVA = "0xB0C5DC", Offset = "0xB0C5DC", VA = "0xB0C5DC")]
		private void ProcessApplicationData()
		{
		}

		[Token(Token = "0x600178F")]
		[Address(RVA = "0xB0C3CC", Offset = "0xB0C3CC", VA = "0xB0C3CC")]
		private void ProcessAlert()
		{
		}

		[Token(Token = "0x6001790")]
		[Address(RVA = "0xB0C5E0", Offset = "0xB0C5E0", VA = "0xB0C5E0")]
		private void ProcessChangeCipherSpec(byte[] buf, int off, int len)
		{
		}

		[Token(Token = "0x6001791")]
		[Address(RVA = "0xB0CACC", Offset = "0xB0CACC", VA = "0xB0CACC", Slot = "14")]
		protected internal virtual int ApplicationDataAvailable()
		{
			return default(int);
		}

		[Token(Token = "0x6001792")]
		[Address(RVA = "0xB0CAE8", Offset = "0xB0CAE8", VA = "0xB0CAE8", Slot = "15")]
		protected internal virtual int ReadApplicationData(byte[] buf, int offset, int len)
		{
			return default(int);
		}

		[Token(Token = "0x6001793")]
		[Address(RVA = "0xB0CC54", Offset = "0xB0CC54", VA = "0xB0CC54", Slot = "16")]
		protected virtual void SafeReadRecord()
		{
		}

		[Token(Token = "0x6001794")]
		[Address(RVA = "0xB0CE0C", Offset = "0xB0CE0C", VA = "0xB0CE0C", Slot = "17")]
		protected virtual void SafeWriteRecord(byte type, byte[] buf, int offset, int len)
		{
		}

		[Token(Token = "0x6001795")]
		[Address(RVA = "0xB0CFB0", Offset = "0xB0CFB0", VA = "0xB0CFB0", Slot = "18")]
		protected internal virtual void WriteData(byte[] buf, int offset, int len)
		{
		}

		[Token(Token = "0x6001796")]
		[Address(RVA = "0xB0D190", Offset = "0xB0D190", VA = "0xB0D190", Slot = "19")]
		protected virtual void WriteHandshakeMessage(byte[] buf, int off, int len)
		{
		}

		[Token(Token = "0x6001798")]
		[Address(RVA = "0xB0D284", Offset = "0xB0D284", VA = "0xB0D284", Slot = "21")]
		protected virtual void FailWithError(byte alertLevel, byte alertDescription, string message, Exception cause)
		{
		}

		[Token(Token = "0x6001799")]
		[Address(RVA = "0xB0D3D0", Offset = "0xB0D3D0", VA = "0xB0D3D0", Slot = "22")]
		protected virtual void InvalidateSession()
		{
		}

		[Token(Token = "0x600179A")]
		[Address(RVA = "0xB0D49C", Offset = "0xB0D49C", VA = "0xB0D49C", Slot = "23")]
		protected virtual void ProcessFinishedMessage(MemoryStream buf)
		{
		}

		[Token(Token = "0x600179B")]
		[Address(RVA = "0xB0D690", Offset = "0xB0D690", VA = "0xB0D690", Slot = "24")]
		protected virtual void RaiseAlert(byte alertLevel, byte alertDescription, string message, Exception cause)
		{
		}

		[Token(Token = "0x600179C")]
		[Address(RVA = "0xB0D7E4", Offset = "0xB0D7E4", VA = "0xB0D7E4", Slot = "25")]
		protected virtual void RaiseWarning(byte alertDescription, string message)
		{
		}

		[Token(Token = "0x600179D")]
		[Address(RVA = "0xB0D808", Offset = "0xB0D808", VA = "0xB0D808", Slot = "26")]
		protected virtual void SendCertificateMessage(Certificate certificate)
		{
		}

		[Token(Token = "0x600179E")]
		[Address(RVA = "0xB0DB50", Offset = "0xB0DB50", VA = "0xB0DB50", Slot = "27")]
		protected virtual void SendChangeCipherSpecMessage()
		{
		}

		[Token(Token = "0x600179F")]
		[Address(RVA = "0xB0DBF8", Offset = "0xB0DBF8", VA = "0xB0DBF8", Slot = "28")]
		protected virtual void SendFinishedMessage()
		{
		}

		[Token(Token = "0x60017A0")]
		[Address(RVA = "0xB0DDDC", Offset = "0xB0DDDC", VA = "0xB0DDDC", Slot = "29")]
		protected virtual void SendSupplementalDataMessage(IList supplementalData)
		{
		}

		[Token(Token = "0x60017A1")]
		[Address(RVA = "0xB0E208", Offset = "0xB0E208", VA = "0xB0E208", Slot = "30")]
		protected virtual byte[] CreateVerifyData(bool isServer)
		{
			return null;
		}

		[Token(Token = "0x60017A2")]
		[Address(RVA = "0xB0E674", Offset = "0xB0E674", VA = "0xB0E674", Slot = "31")]
		public virtual void Close()
		{
		}

		[Token(Token = "0x60017A3")]
		[Address(RVA = "0xB0E688", Offset = "0xB0E688", VA = "0xB0E688", Slot = "32")]
		protected virtual void HandleClose(bool user_canceled)
		{
		}

		[Token(Token = "0x60017A4")]
		[Address(RVA = "0xB0E74C", Offset = "0xB0E74C", VA = "0xB0E74C", Slot = "33")]
		protected internal virtual void Flush()
		{
		}

		[Token(Token = "0x60017A6")]
		[Address(RVA = "0xB0E794", Offset = "0xB0E794", VA = "0xB0E794", Slot = "35")]
		protected virtual short ProcessMaxFragmentLengthExtension(IDictionary clientExtensions, IDictionary serverExtensions, byte alertDescription)
		{
			return default(short);
		}

		[Token(Token = "0x60017A7")]
		[Address(RVA = "0xB0E860", Offset = "0xB0E860", VA = "0xB0E860", Slot = "36")]
		protected virtual void RefuseRenegotiation()
		{
		}

		[Token(Token = "0x60017A8")]
		[Address(RVA = "0xB06E08", Offset = "0xB06E08", VA = "0xB06E08")]
		protected internal static void AssertEmpty(MemoryStream buf)
		{
		}

		[Token(Token = "0x60017A9")]
		[Address(RVA = "0xB0E934", Offset = "0xB0E934", VA = "0xB0E934")]
		protected internal static byte[] CreateRandomBlock(bool useGmtUnixTime, IRandomGenerator randomGenerator)
		{
			return null;
		}

		[Token(Token = "0x60017AA")]
		[Address(RVA = "0xB0EB50", Offset = "0xB0EB50", VA = "0xB0EB50")]
		protected internal static byte[] CreateRenegotiationInfo(byte[] renegotiated_connection)
		{
			return null;
		}

		[Token(Token = "0x60017AB")]
		[Address(RVA = "0xB0EC30", Offset = "0xB0EC30", VA = "0xB0EC30")]
		protected internal static void EstablishMasterSecret(TlsContext context, TlsKeyExchange keyExchange)
		{
		}

		[Token(Token = "0x60017AC")]
		[Address(RVA = "0xB0E368", Offset = "0xB0E368", VA = "0xB0E368")]
		protected internal static byte[] GetCurrentPrfHash(TlsContext context, TlsHandshakeHash handshakeHash, byte[] sslSender)
		{
			return null;
		}

		[Token(Token = "0x60017AD")]
		[Address(RVA = "0xB0F008", Offset = "0xB0F008", VA = "0xB0F008")]
		protected internal static IDictionary ReadExtensions(MemoryStream input)
		{
			return null;
		}

		[Token(Token = "0x60017AE")]
		[Address(RVA = "0xB0F3B0", Offset = "0xB0F3B0", VA = "0xB0F3B0")]
		protected internal static IList ReadSupplementalDataMessage(MemoryStream input)
		{
			return null;
		}

		[Token(Token = "0x60017AF")]
		[Address(RVA = "0xB0F64C", Offset = "0xB0F64C", VA = "0xB0F64C")]
		protected internal static void WriteExtensions(Stream output, IDictionary extensions)
		{
		}

		[Token(Token = "0x60017B0")]
		[Address(RVA = "0xB0DE84", Offset = "0xB0DE84", VA = "0xB0DE84")]
		protected internal static void WriteSupplementalData(Stream output, IList supplementalData)
		{
		}

		[Token(Token = "0x60017B1")]
		[Address(RVA = "0xB0FC24", Offset = "0xB0FC24", VA = "0xB0FC24")]
		protected internal static int GetPrfAlgorithm(TlsContext context, int ciphersuite)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002AC")]
	public class TlsRsaKeyExchange : AbstractTlsKeyExchange
	{
		[Token(Token = "0x4000CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected AsymmetricKeyParameter mServerPublicKey;

		[Token(Token = "0x4000CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected RsaKeyParameters mRsaServerPublicKey;

		[Token(Token = "0x4000CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected TlsEncryptionCredentials mServerCredentials;

		[Token(Token = "0x4000CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected byte[] mPremasterSecret;

		[Token(Token = "0x60017B3")]
		[Address(RVA = "0xB0FFFC", Offset = "0xB0FFFC", VA = "0xB0FFFC")]
		public TlsRsaKeyExchange(IList supportedSignatureAlgorithms)
		{
		}

		[Token(Token = "0x60017B4")]
		[Address(RVA = "0xB1000C", Offset = "0xB1000C", VA = "0xB1000C", Slot = "20")]
		public override void SkipServerCredentials()
		{
		}

		[Token(Token = "0x60017B5")]
		[Address(RVA = "0xB1006C", Offset = "0xB1006C", VA = "0xB1006C", Slot = "22")]
		public override void ProcessServerCredentials(TlsCredentials serverCredentials)
		{
		}

		[Token(Token = "0x60017B6")]
		[Address(RVA = "0xB101AC", Offset = "0xB101AC", VA = "0xB101AC", Slot = "21")]
		public override void ProcessServerCertificate(Certificate serverCertificate)
		{
		}

		[Token(Token = "0x60017B7")]
		[Address(RVA = "0xB103D0", Offset = "0xB103D0", VA = "0xB103D0", Slot = "27")]
		public override void ValidateCertificateRequest(CertificateRequest certificateRequest)
		{
		}

		[Token(Token = "0x60017B8")]
		[Address(RVA = "0xB104A8", Offset = "0xB104A8", VA = "0xB104A8", Slot = "29")]
		public override void ProcessClientCredentials(TlsCredentials clientCredentials)
		{
		}

		[Token(Token = "0x60017B9")]
		[Address(RVA = "0xB10530", Offset = "0xB10530", VA = "0xB10530", Slot = "31")]
		public override void GenerateClientKeyExchange(Stream output)
		{
		}

		[Token(Token = "0x60017BA")]
		[Address(RVA = "0xB1093C", Offset = "0xB1093C", VA = "0xB1093C", Slot = "32")]
		public override void ProcessClientKeyExchange(Stream input)
		{
		}

		[Token(Token = "0x60017BB")]
		[Address(RVA = "0xB10A68", Offset = "0xB10A68", VA = "0xB10A68", Slot = "33")]
		public override byte[] GeneratePremasterSecret()
		{
			return null;
		}

		[Token(Token = "0x60017BC")]
		[Address(RVA = "0xB10AE4", Offset = "0xB10AE4", VA = "0xB10AE4", Slot = "34")]
		protected virtual RsaKeyParameters ValidateRsaPublicKey(RsaKeyParameters key)
		{
			return null;
		}
	}
	[Token(Token = "0x20002AD")]
	public class TlsRsaSigner : AbstractTlsSigner
	{
		[Token(Token = "0x60017BD")]
		[Address(RVA = "0xB10CBC", Offset = "0xB10CBC", VA = "0xB10CBC", Slot = "16")]
		public override byte[] GenerateRawSignature(SignatureAndHashAlgorithm algorithm, AsymmetricKeyParameter privateKey, byte[] hash)
		{
			return null;
		}

		[Token(Token = "0x60017BE")]
		[Address(RVA = "0xB10EC8", Offset = "0xB10EC8", VA = "0xB10EC8", Slot = "18")]
		public override bool VerifyRawSignature(SignatureAndHashAlgorithm algorithm, byte[] sigBytes, AsymmetricKeyParameter publicKey, byte[] hash)
		{
			return default(bool);
		}

		[Token(Token = "0x60017BF")]
		[Address(RVA = "0xB1103C", Offset = "0xB1103C", VA = "0xB1103C", Slot = "20")]
		public override ISigner CreateSigner(SignatureAndHashAlgorithm algorithm, AsymmetricKeyParameter privateKey)
		{
			return null;
		}

		[Token(Token = "0x60017C0")]
		[Address(RVA = "0xB11158", Offset = "0xB11158", VA = "0xB11158", Slot = "22")]
		public override ISigner CreateVerifyer(SignatureAndHashAlgorithm algorithm, AsymmetricKeyParameter publicKey)
		{
			return null;
		}

		[Token(Token = "0x60017C1")]
		[Address(RVA = "0xB11174", Offset = "0xB11174", VA = "0xB11174", Slot = "23")]
		public override bool IsValidPublicKey(AsymmetricKeyParameter publicKey)
		{
			return default(bool);
		}

		[Token(Token = "0x60017C2")]
		[Address(RVA = "0xB11200", Offset = "0xB11200", VA = "0xB11200", Slot = "24")]
		protected virtual ISigner MakeSigner(SignatureAndHashAlgorithm algorithm, bool raw, bool forSigning, ICipherParameters cp)
		{
			return null;
		}

		[Token(Token = "0x60017C3")]
		[Address(RVA = "0xB1166C", Offset = "0xB1166C", VA = "0xB1166C", Slot = "25")]
		protected virtual IAsymmetricBlockCipher CreateRsaImpl()
		{
			return null;
		}

		[Token(Token = "0x60017C4")]
		[Address(RVA = "0xB03C44", Offset = "0xB03C44", VA = "0xB03C44")]
		public TlsRsaSigner()
		{
		}
	}
	[Token(Token = "0x20002AE")]
	public abstract class TlsRsaUtilities
	{
		[Token(Token = "0x60017C5")]
		[Address(RVA = "0xB10564", Offset = "0xB10564", VA = "0xB10564")]
		public static byte[] GenerateEncryptedPreMasterSecret(TlsContext context, RsaKeyParameters rsaServerPublicKey, Stream output)
		{
			return null;
		}

		[Token(Token = "0x60017C6")]
		[Address(RVA = "0xB116E8", Offset = "0xB116E8", VA = "0xB116E8")]
		public static byte[] SafeDecryptPreMasterSecret(TlsContext context, RsaKeyParameters rsaServerPrivateKey, byte[] encryptedPreMasterSecret)
		{
			return null;
		}

		[Token(Token = "0x60017C7")]
		[Address(RVA = "0xB11AC0", Offset = "0xB11AC0", VA = "0xB11AC0")]
		protected TlsRsaUtilities()
		{
		}
	}
	[Token(Token = "0x20002AF")]
	public interface TlsServer : TlsPeer
	{
		[Token(Token = "0x60017C8")]
		void Init(TlsServerContext context);

		[Token(Token = "0x60017C9")]
		void NotifyClientVersion(ProtocolVersion clientVersion);

		[Token(Token = "0x60017CA")]
		void NotifyFallback(bool isFallback);

		[Token(Token = "0x60017CB")]
		void NotifyOfferedCipherSuites(int[] offeredCipherSuites);

		[Token(Token = "0x60017CC")]
		void NotifyOfferedCompressionMethods(byte[] offeredCompressionMethods);

		[Token(Token = "0x60017CD")]
		void ProcessClientExtensions(IDictionary clientExtensions);

		[Token(Token = "0x60017CE")]
		ProtocolVersion GetServerVersion();

		[Token(Token = "0x60017CF")]
		int GetSelectedCipherSuite();

		[Token(Token = "0x60017D0")]
		byte GetSelectedCompressionMethod();

		[Token(Token = "0x60017D1")]
		IDictionary GetServerExtensions();

		[Token(Token = "0x60017D2")]
		IList GetServerSupplementalData();

		[Token(Token = "0x60017D3")]
		TlsCredentials GetCredentials();

		[Token(Token = "0x60017D4")]
		CertificateStatus GetCertificateStatus();

		[Token(Token = "0x60017D5")]
		TlsKeyExchange GetKeyExchange();

		[Token(Token = "0x60017D6")]
		CertificateRequest GetCertificateRequest();

		[Token(Token = "0x60017D7")]
		void ProcessClientSupplementalData(IList clientSupplementalData);

		[Token(Token = "0x60017D8")]
		void NotifyClientCertificate(Certificate clientCertificate);

		[Token(Token = "0x60017D9")]
		NewSessionTicket GetNewSessionTicket();
	}
	[Token(Token = "0x20002B0")]
	public interface TlsServerContext : TlsContext
	{
	}
	[Token(Token = "0x20002B1")]
	internal class TlsServerContextImpl : AbstractTlsContext, TlsServerContext, TlsContext
	{
		[Token(Token = "0x170002CF")]
		public override bool IsServer
		{
			[Token(Token = "0x60017DB")]
			[Address(RVA = "0xB11B48", Offset = "0xB11B48", VA = "0xB11B48", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60017DA")]
		[Address(RVA = "0xB11AC8", Offset = "0xB11AC8", VA = "0xB11AC8")]
		internal TlsServerContextImpl(SecureRandom secureRandom, SecurityParameters securityParameters)
		{
		}
	}
	[Token(Token = "0x20002B2")]
	public interface TlsSession
	{
		[Token(Token = "0x170002D0")]
		byte[] SessionID
		{
			[Token(Token = "0x60017DD")]
			get;
		}

		[Token(Token = "0x170002D1")]
		bool IsResumable
		{
			[Token(Token = "0x60017DF")]
			get;
		}

		[Token(Token = "0x60017DC")]
		SessionParameters ExportSessionParameters();

		[Token(Token = "0x60017DE")]
		void Invalidate();
	}
	[Token(Token = "0x20002B3")]
	internal class TlsSessionImpl : TlsSession
	{
		[Token(Token = "0x4000CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal readonly byte[] mSessionID;

		[Token(Token = "0x4000CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal SessionParameters mSessionParameters;

		[Token(Token = "0x170002D2")]
		public virtual byte[] SessionID
		{
			[Token(Token = "0x60017E2")]
			[Address(RVA = "0xB11BF0", Offset = "0xB11BF0", VA = "0xB11BF0", Slot = "9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002D3")]
		public virtual bool IsResumable
		{
			[Token(Token = "0x60017E4")]
			[Address(RVA = "0xB11D0C", Offset = "0xB11D0C", VA = "0xB11D0C", Slot = "11")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60017E0")]
		[Address(RVA = "0xB0C150", Offset = "0xB0C150", VA = "0xB0C150")]
		internal TlsSessionImpl(byte[] sessionID, SessionParameters sessionParameters)
		{
		}

		[Token(Token = "0x60017E1")]
		[Address(RVA = "0xB11B50", Offset = "0xB11B50", VA = "0xB11B50", Slot = "8")]
		public virtual SessionParameters ExportSessionParameters()
		{
			return null;
		}

		[Token(Token = "0x60017E3")]
		[Address(RVA = "0xB11C74", Offset = "0xB11C74", VA = "0xB11C74", Slot = "10")]
		public virtual void Invalidate()
		{
		}
	}
	[Token(Token = "0x20002B4")]
	public interface TlsSigner
	{
		[Token(Token = "0x60017E5")]
		void Init(TlsContext context);

		[Token(Token = "0x60017E6")]
		byte[] GenerateRawSignature(AsymmetricKeyParameter privateKey, byte[] md5AndSha1);

		[Token(Token = "0x60017E7")]
		byte[] GenerateRawSignature(SignatureAndHashAlgorithm algorithm, AsymmetricKeyParameter privateKey, byte[] hash);

		[Token(Token = "0x60017E8")]
		bool VerifyRawSignature(byte[] sigBytes, AsymmetricKeyParameter publicKey, byte[] md5AndSha1);

		[Token(Token = "0x60017E9")]
		bool VerifyRawSignature(SignatureAndHashAlgorithm algorithm, byte[] sigBytes, AsymmetricKeyParameter publicKey, byte[] hash);

		[Token(Token = "0x60017EA")]
		ISigner CreateSigner(AsymmetricKeyParameter privateKey);

		[Token(Token = "0x60017EB")]
		ISigner CreateSigner(SignatureAndHashAlgorithm algorithm, AsymmetricKeyParameter privateKey);

		[Token(Token = "0x60017EC")]
		ISigner CreateVerifyer(AsymmetricKeyParameter publicKey);

		[Token(Token = "0x60017ED")]
		ISigner CreateVerifyer(SignatureAndHashAlgorithm algorithm, AsymmetricKeyParameter publicKey);

		[Token(Token = "0x60017EE")]
		bool IsValidPublicKey(AsymmetricKeyParameter publicKey);
	}
	[Token(Token = "0x20002B5")]
	public interface TlsSignerCredentials : TlsCredentials
	{
		[Token(Token = "0x170002D4")]
		SignatureAndHashAlgorithm SignatureAndHashAlgorithm
		{
			[Token(Token = "0x60017F0")]
			get;
		}

		[Token(Token = "0x60017EF")]
		byte[] GenerateCertificateSignature(byte[] hash);
	}
	[Token(Token = "0x20002B6")]
	internal class TlsStream : Stream
	{
		[Token(Token = "0x4000CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly TlsProtocol handler;

		[Token(Token = "0x170002D5")]
		public override bool CanRead
		{
			[Token(Token = "0x60017F2")]
			[Address(RVA = "0xB11D98", Offset = "0xB11D98", VA = "0xB11D98", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002D6")]
		public override bool CanSeek
		{
			[Token(Token = "0x60017F3")]
			[Address(RVA = "0xB11DCC", Offset = "0xB11DCC", VA = "0xB11DCC", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002D7")]
		public override bool CanWrite
		{
			[Token(Token = "0x60017F4")]
			[Address(RVA = "0xB11DD4", Offset = "0xB11DD4", VA = "0xB11DD4", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002D8")]
		public override long Length
		{
			[Token(Token = "0x60017F7")]
			[Address(RVA = "0xB11EC4", Offset = "0xB11EC4", VA = "0xB11EC4", Slot = "10")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x170002D9")]
		public override long Position
		{
			[Token(Token = "0x60017F8")]
			[Address(RVA = "0xB11F24", Offset = "0xB11F24", VA = "0xB11F24", Slot = "11")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x60017F9")]
			[Address(RVA = "0xB11F84", Offset = "0xB11F84", VA = "0xB11F84", Slot = "12")]
			set
			{
			}
		}

		[Token(Token = "0x60017F1")]
		[Address(RVA = "0xB0C0D4", Offset = "0xB0C0D4", VA = "0xB0C0D4")]
		internal TlsStream(TlsProtocol handler)
		{
		}

		[Token(Token = "0x60017F5")]
		[Address(RVA = "0xB11E08", Offset = "0xB11E08", VA = "0xB11E08", Slot = "16")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x60017F6")]
		[Address(RVA = "0xB11EA0", Offset = "0xB11EA0", VA = "0xB11EA0", Slot = "17")]
		public override void Flush()
		{
		}

		[Token(Token = "0x60017FA")]
		[Address(RVA = "0xB11FE4", Offset = "0xB11FE4", VA = "0xB11FE4", Slot = "27")]
		public override int Read(byte[] buf, int off, int len)
		{
			return default(int);
		}

		[Token(Token = "0x60017FB")]
		[Address(RVA = "0xB12008", Offset = "0xB12008", VA = "0xB12008", Slot = "28")]
		public override int ReadByte()
		{
			return default(int);
		}

		[Token(Token = "0x60017FC")]
		[Address(RVA = "0xB120B0", Offset = "0xB120B0", VA = "0xB120B0", Slot = "25")]
		public override long Seek(long offset, SeekOrigin origin)
		{
			return default(long);
		}

		[Token(Token = "0x60017FD")]
		[Address(RVA = "0xB12110", Offset = "0xB12110", VA = "0xB12110", Slot = "26")]
		public override void SetLength(long value)
		{
		}

		[Token(Token = "0x60017FE")]
		[Address(RVA = "0xB12170", Offset = "0xB12170", VA = "0xB12170", Slot = "29")]
		public override void Write(byte[] buf, int off, int len)
		{
		}

		[Token(Token = "0x60017FF")]
		[Address(RVA = "0xB12194", Offset = "0xB12194", VA = "0xB12194", Slot = "30")]
		public override void WriteByte(byte b)
		{
		}
	}
	[Token(Token = "0x20002B7")]
	public class TlsStreamCipher : TlsCipher
	{
		[Token(Token = "0x4000CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly TlsContext context;

		[Token(Token = "0x4000CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected readonly IStreamCipher encryptCipher;

		[Token(Token = "0x4000CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected readonly IStreamCipher decryptCipher;

		[Token(Token = "0x4000CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected readonly TlsMac writeMac;

		[Token(Token = "0x4000CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected readonly TlsMac readMac;

		[Token(Token = "0x4000CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected readonly bool usesNonce;

		[Token(Token = "0x6001800")]
		[Address(RVA = "0xB12238", Offset = "0xB12238", VA = "0xB12238")]
		public TlsStreamCipher(TlsContext context, IStreamCipher clientWriteCipher, IStreamCipher serverWriteCipher, IDigest clientWriteDigest, IDigest serverWriteDigest, int cipherKeySize, bool usesNonce)
		{
		}

		[Token(Token = "0x6001801")]
		[Address(RVA = "0xB12884", Offset = "0xB12884", VA = "0xB12884", Slot = "7")]
		public virtual int GetPlaintextLimit(int ciphertextLimit)
		{
			return default(int);
		}

		[Token(Token = "0x6001802")]
		[Address(RVA = "0xB128BC", Offset = "0xB128BC", VA = "0xB128BC", Slot = "8")]
		public virtual byte[] EncodePlaintext(long seqNo, byte type, byte[] plaintext, int offset, int len)
		{
			return null;
		}

		[Token(Token = "0x6001803")]
		[Address(RVA = "0xB12AC8", Offset = "0xB12AC8", VA = "0xB12AC8", Slot = "9")]
		public virtual byte[] DecodeCiphertext(long seqNo, byte type, byte[] ciphertext, int offset, int len)
		{
			return null;
		}

		[Token(Token = "0x6001804")]
		[Address(RVA = "0xB12CA4", Offset = "0xB12CA4", VA = "0xB12CA4", Slot = "10")]
		protected virtual void CheckMac(long seqNo, byte type, byte[] recBuf, int recStart, int recEnd, byte[] calcBuf, int calcOff, int calcLen)
		{
		}

		[Token(Token = "0x6001805")]
		[Address(RVA = "0xB12DAC", Offset = "0xB12DAC", VA = "0xB12DAC", Slot = "11")]
		protected virtual void UpdateIV(IStreamCipher cipher, bool forEncryption, long seqNo)
		{
		}
	}
	[Token(Token = "0x20002B8")]
	public abstract class TlsUtilities
	{
		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly byte[] EmptyBytes;

		[Token(Token = "0x4000D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly short[] EmptyShorts;

		[Token(Token = "0x4000D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly int[] EmptyInts;

		[Token(Token = "0x4000D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly long[] EmptyLongs;

		[Token(Token = "0x4000D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal static readonly byte[] SSL_CLIENT;

		[Token(Token = "0x4000D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal static readonly byte[] SSL_SERVER;

		[Token(Token = "0x4000D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal static readonly byte[][] SSL3_CONST;

		[Token(Token = "0x6001806")]
		[Address(RVA = "0xB12EE4", Offset = "0xB12EE4", VA = "0xB12EE4")]
		public static void CheckUint8(int i)
		{
		}

		[Token(Token = "0x6001807")]
		[Address(RVA = "0xB12F88", Offset = "0xB12F88", VA = "0xB12F88")]
		public static void CheckUint8(long i)
		{
		}

		[Token(Token = "0x6001808")]
		[Address(RVA = "0xB088C8", Offset = "0xB088C8", VA = "0xB088C8")]
		public static void CheckUint16(int i)
		{
		}

		[Token(Token = "0x6001809")]
		[Address(RVA = "0xB13038", Offset = "0xB13038", VA = "0xB13038")]
		public static void CheckUint16(long i)
		{
		}

		[Token(Token = "0x600180A")]
		[Address(RVA = "0xB130DC", Offset = "0xB130DC", VA = "0xB130DC")]
		public static void CheckUint24(int i)
		{
		}

		[Token(Token = "0x600180B")]
		[Address(RVA = "0xB0FF64", Offset = "0xB0FF64", VA = "0xB0FF64")]
		public static void CheckUint24(long i)
		{
		}

		[Token(Token = "0x600180C")]
		[Address(RVA = "0xB13194", Offset = "0xB13194", VA = "0xB13194")]
		public static void CheckUint32(long i)
		{
		}

		[Token(Token = "0x600180D")]
		[Address(RVA = "0xB1323C", Offset = "0xB1323C", VA = "0xB1323C")]
		public static void CheckUint48(long i)
		{
		}

		[Token(Token = "0x600180E")]
		[Address(RVA = "0xB132E4", Offset = "0xB132E4", VA = "0xB132E4")]
		public static void CheckUint64(long i)
		{
		}

		[Token(Token = "0x600180F")]
		[Address(RVA = "0xB12F7C", Offset = "0xB12F7C", VA = "0xB12F7C")]
		public static bool IsValidUint8(int i)
		{
			return default(bool);
		}

		[Token(Token = "0x6001810")]
		[Address(RVA = "0xB13020", Offset = "0xB13020", VA = "0xB13020")]
		public static bool IsValidUint8(long i)
		{
			return default(bool);
		}

		[Token(Token = "0x6001811")]
		[Address(RVA = "0xB1302C", Offset = "0xB1302C", VA = "0xB1302C")]
		public static bool IsValidUint16(int i)
		{
			return default(bool);
		}

		[Token(Token = "0x6001812")]
		[Address(RVA = "0xB130D0", Offset = "0xB130D0", VA = "0xB130D0")]
		public static bool IsValidUint16(long i)
		{
			return default(bool);
		}

		[Token(Token = "0x6001813")]
		[Address(RVA = "0xB13174", Offset = "0xB13174", VA = "0xB13174")]
		public static bool IsValidUint24(int i)
		{
			return default(bool);
		}

		[Token(Token = "0x6001814")]
		[Address(RVA = "0xB13184", Offset = "0xB13184", VA = "0xB13184")]
		public static bool IsValidUint24(long i)
		{
			return default(bool);
		}

		[Token(Token = "0x6001815")]
		[Address(RVA = "0xB1322C", Offset = "0xB1322C", VA = "0xB1322C")]
		public static bool IsValidUint32(long i)
		{
			return default(bool);
		}

		[Token(Token = "0x6001816")]
		[Address(RVA = "0xB132D4", Offset = "0xB132D4", VA = "0xB132D4")]
		public static bool IsValidUint48(long i)
		{
			return default(bool);
		}

		[Token(Token = "0x6001817")]
		[Address(RVA = "0xB13348", Offset = "0xB13348", VA = "0xB13348")]
		public static bool IsValidUint64(long i)
		{
			return default(bool);
		}

		[Token(Token = "0x6001818")]
		[Address(RVA = "0xB0A6B8", Offset = "0xB0A6B8", VA = "0xB0A6B8")]
		public static bool IsSsl(TlsContext context)
		{
			return default(bool);
		}

		[Token(Token = "0x6001819")]
		[Address(RVA = "0xB0BFD8", Offset = "0xB0BFD8", VA = "0xB0BFD8")]
		public static bool IsTlsV11(TlsContext context)
		{
			return default(bool);
		}

		[Token(Token = "0x600181A")]
		[Address(RVA = "0xB0FD78", Offset = "0xB0FD78", VA = "0xB0FD78")]
		public static bool IsTlsV12(TlsContext context)
		{
			return default(bool);
		}

		[Token(Token = "0x600181B")]
		[Address(RVA = "0xB0889C", Offset = "0xB0889C", VA = "0xB0889C")]
		public static void WriteUint8(byte i, Stream output)
		{
		}

		[Token(Token = "0x600181C")]
		[Address(RVA = "0xB0AB80", Offset = "0xB0AB80", VA = "0xB0AB80")]
		public static void WriteUint8(byte i, byte[] buf, int offset)
		{
		}

		[Token(Token = "0x600181D")]
		[Address(RVA = "0xB08960", Offset = "0xB08960", VA = "0xB08960")]
		public static void WriteUint16(int i, Stream output)
		{
		}

		[Token(Token = "0x600181E")]
		[Address(RVA = "0xB0AC3C", Offset = "0xB0AC3C", VA = "0xB0AC3C")]
		public static void WriteUint16(int i, byte[] buf, int offset)
		{
		}

		[Token(Token = "0x600181F")]
		[Address(RVA = "0xB0FED0", Offset = "0xB0FED0", VA = "0xB0FED0")]
		public static void WriteUint24(int i, Stream output)
		{
		}

		[Token(Token = "0x6001820")]
		[Address(RVA = "0xB13350", Offset = "0xB13350", VA = "0xB13350")]
		public static void WriteUint24(int i, byte[] buf, int offset)
		{
		}

		[Token(Token = "0x6001821")]
		[Address(RVA = "0xB133C0", Offset = "0xB133C0", VA = "0xB133C0")]
		public static void WriteUint32(long i, Stream output)
		{
		}

		[Token(Token = "0x6001822")]
		[Address(RVA = "0xB13444", Offset = "0xB13444", VA = "0xB13444")]
		public static void WriteUint32(long i, byte[] buf, int offset)
		{
		}

		[Token(Token = "0x6001823")]
		[Address(RVA = "0xB134D0", Offset = "0xB134D0", VA = "0xB134D0")]
		public static void WriteUint48(long i, Stream output)
		{
		}

		[Token(Token = "0x6001824")]
		[Address(RVA = "0xB13584", Offset = "0xB13584", VA = "0xB13584")]
		public static void WriteUint48(long i, byte[] buf, int offset)
		{
		}

		[Token(Token = "0x6001825")]
		[Address(RVA = "0xB13648", Offset = "0xB13648", VA = "0xB13648")]
		public static void WriteUint64(long i, Stream output)
		{
		}

		[Token(Token = "0x6001826")]
		[Address(RVA = "0xB0AA84", Offset = "0xB0AA84", VA = "0xB0AA84")]
		public static void WriteUint64(long i, byte[] buf, int offset)
		{
		}

		[Token(Token = "0x6001827")]
		[Address(RVA = "0xB08730", Offset = "0xB08730", VA = "0xB08730")]
		public static void WriteOpaque8(byte[] buf, Stream output)
		{
		}

		[Token(Token = "0x6001828")]
		[Address(RVA = "0xB0FAE4", Offset = "0xB0FAE4", VA = "0xB0FAE4")]
		public static void WriteOpaque16(byte[] buf, Stream output)
		{
		}

		[Token(Token = "0x6001829")]
		[Address(RVA = "0xB0FB84", Offset = "0xB0FB84", VA = "0xB0FB84")]
		public static void WriteOpaque24(byte[] buf, Stream output)
		{
		}

		[Token(Token = "0x600182A")]
		[Address(RVA = "0xB1372C", Offset = "0xB1372C", VA = "0xB1372C")]
		public static void WriteUint8Array(byte[] uints, Stream output)
		{
		}

		[Token(Token = "0x600182B")]
		[Address(RVA = "0xB13768", Offset = "0xB13768", VA = "0xB13768")]
		public static void WriteUint8Array(byte[] uints, byte[] buf, int offset)
		{
		}

		[Token(Token = "0x600182C")]
		[Address(RVA = "0xB13848", Offset = "0xB13848", VA = "0xB13848")]
		public static void WriteUint8ArrayWithUint8Length(byte[] uints, Stream output)
		{
		}

		[Token(Token = "0x600182D")]
		[Address(RVA = "0xB138E8", Offset = "0xB138E8", VA = "0xB138E8")]
		public static void WriteUint8ArrayWithUint8Length(byte[] uints, byte[] buf, int offset)
		{
		}

		[Token(Token = "0x600182E")]
		[Address(RVA = "0xB13984", Offset = "0xB13984", VA = "0xB13984")]
		public static void WriteUint16Array(int[] uints, Stream output)
		{
		}

		[Token(Token = "0x600182F")]
		[Address(RVA = "0xB13A4C", Offset = "0xB13A4C", VA = "0xB13A4C")]
		public static void WriteUint16Array(int[] uints, byte[] buf, int offset)
		{
		}

		[Token(Token = "0x6001830")]
		[Address(RVA = "0xB13B28", Offset = "0xB13B28", VA = "0xB13B28")]
		public static void WriteUint16ArrayWithUint16Length(int[] uints, Stream output)
		{
		}

		[Token(Token = "0x6001831")]
		[Address(RVA = "0xB13BC0", Offset = "0xB13BC0", VA = "0xB13BC0")]
		public static void WriteUint16ArrayWithUint16Length(int[] uints, byte[] buf, int offset)
		{
		}

		[Token(Token = "0x6001832")]
		[Address(RVA = "0xB0EBB4", Offset = "0xB0EBB4", VA = "0xB0EBB4")]
		public static byte[] EncodeOpaque8(byte[] buf)
		{
			return null;
		}

		[Token(Token = "0x6001833")]
		[Address(RVA = "0xB06BE0", Offset = "0xB06BE0", VA = "0xB06BE0")]
		public static byte[] EncodeUint8ArrayWithUint8Length(byte[] uints)
		{
			return null;
		}

		[Token(Token = "0x6001834")]
		[Address(RVA = "0xB06B40", Offset = "0xB06B40", VA = "0xB06B40")]
		public static byte[] EncodeUint16ArrayWithUint16Length(int[] uints)
		{
			return null;
		}

		[Token(Token = "0x6001835")]
		[Address(RVA = "0xB06EAC", Offset = "0xB06EAC", VA = "0xB06EAC")]
		public static byte ReadUint8(Stream input)
		{
			return default(byte);
		}

		[Token(Token = "0x6001836")]
		[Address(RVA = "0xB0CA2C", Offset = "0xB0CA2C", VA = "0xB0CA2C")]
		public static byte ReadUint8(byte[] buf, int offset)
		{
			return default(byte);
		}

		[Token(Token = "0x6001837")]
		[Address(RVA = "0xB06C7C", Offset = "0xB06C7C", VA = "0xB06C7C")]
		public static int ReadUint16(Stream input)
		{
			return default(int);
		}

		[Token(Token = "0x6001838")]
		[Address(RVA = "0xB13C64", Offset = "0xB13C64", VA = "0xB13C64")]
		public static int ReadUint16(byte[] buf, int offset)
		{
			return default(int);
		}

		[Token(Token = "0x6001839")]
		[Address(RVA = "0xB13CB0", Offset = "0xB13CB0", VA = "0xB13CB0")]
		public static int ReadUint24(Stream input)
		{
			return default(int);
		}

		[Token(Token = "0x600183A")]
		[Address(RVA = "0xB0CA64", Offset = "0xB0CA64", VA = "0xB0CA64")]
		public static int ReadUint24(byte[] buf, int offset)
		{
			return default(int);
		}

		[Token(Token = "0x600183B")]
		[Address(RVA = "0xB13D8C", Offset = "0xB13D8C", VA = "0xB13D8C")]
		public static long ReadUint32(Stream input)
		{
			return default(long);
		}

		[Token(Token = "0x600183C")]
		[Address(RVA = "0xB13E7C", Offset = "0xB13E7C", VA = "0xB13E7C")]
		public static long ReadUint32(byte[] buf, int offset)
		{
			return default(long);
		}

		[Token(Token = "0x600183D")]
		[Address(RVA = "0xB13EFC", Offset = "0xB13EFC", VA = "0xB13EFC")]
		public static long ReadUint48(Stream input)
		{
			return default(long);
		}

		[Token(Token = "0x600183E")]
		[Address(RVA = "0xB13F7C", Offset = "0xB13F7C", VA = "0xB13F7C")]
		public static long ReadUint48(byte[] buf, int offset)
		{
			return default(long);
		}

		[Token(Token = "0x600183F")]
		[Address(RVA = "0xB14010", Offset = "0xB14010", VA = "0xB14010")]
		public static byte[] ReadAllOrNothing(int length, Stream input)
		{
			return null;
		}

		[Token(Token = "0x6001840")]
		[Address(RVA = "0xB0D5AC", Offset = "0xB0D5AC", VA = "0xB0D5AC")]
		public static byte[] ReadFully(int length, Stream input)
		{
			return null;
		}

		[Token(Token = "0x6001841")]
		[Address(RVA = "0xB14100", Offset = "0xB14100", VA = "0xB14100")]
		public static void ReadFully(byte[] buf, Stream input)
		{
		}

		[Token(Token = "0x6001842")]
		[Address(RVA = "0xB04770", Offset = "0xB04770", VA = "0xB04770")]
		public static byte[] ReadOpaque8(Stream input)
		{
			return null;
		}

		[Token(Token = "0x6001843")]
		[Address(RVA = "0xB0F320", Offset = "0xB0F320", VA = "0xB0F320")]
		public static byte[] ReadOpaque16(Stream input)
		{
			return null;
		}

		[Token(Token = "0x6001844")]
		[Address(RVA = "0xB0F5E0", Offset = "0xB0F5E0", VA = "0xB0F5E0")]
		public static byte[] ReadOpaque24(Stream input)
		{
			return null;
		}

		[Token(Token = "0x6001845")]
		[Address(RVA = "0xB06F3C", Offset = "0xB06F3C", VA = "0xB06F3C")]
		public static byte[] ReadUint8Array(int count, Stream input)
		{
			return null;
		}

		[Token(Token = "0x6001846")]
		[Address(RVA = "0xB06D2C", Offset = "0xB06D2C", VA = "0xB06D2C")]
		public static int[] ReadUint16Array(int count, Stream input)
		{
			return null;
		}

		[Token(Token = "0x6001847")]
		[Address(RVA = "0xB141A8", Offset = "0xB141A8", VA = "0xB141A8")]
		public static ProtocolVersion ReadVersion(byte[] buf, int offset)
		{
			return null;
		}

		[Token(Token = "0x6001848")]
		[Address(RVA = "0xB1425C", Offset = "0xB1425C", VA = "0xB1425C")]
		public static ProtocolVersion ReadVersion(Stream input)
		{
			return null;
		}

		[Token(Token = "0x6001849")]
		[Address(RVA = "0xB14338", Offset = "0xB14338", VA = "0xB14338")]
		public static int ReadVersionRaw(byte[] buf, int offset)
		{
			return default(int);
		}

		[Token(Token = "0x600184A")]
		[Address(RVA = "0xB14384", Offset = "0xB14384", VA = "0xB14384")]
		public static int ReadVersionRaw(Stream input)
		{
			return default(int);
		}

		[Token(Token = "0x600184B")]
		[Address(RVA = "0xB14430", Offset = "0xB14430", VA = "0xB14430")]
		public static Asn1Object ReadAsn1Object(byte[] encoding)
		{
			return null;
		}

		[Token(Token = "0x600184C")]
		[Address(RVA = "0xB144F0", Offset = "0xB144F0", VA = "0xB144F0")]
		public static Asn1Object ReadDerObject(byte[] encoding)
		{
			return null;
		}

		[Token(Token = "0x600184D")]
		[Address(RVA = "0xB0EA44", Offset = "0xB0EA44", VA = "0xB0EA44")]
		public static void WriteGmtUnixTime(byte[] buf, int offset)
		{
		}

		[Token(Token = "0x600184E")]
		[Address(RVA = "0xB145BC", Offset = "0xB145BC", VA = "0xB145BC")]
		public static void WriteVersion(ProtocolVersion version, Stream output)
		{
		}

		[Token(Token = "0x600184F")]
		[Address(RVA = "0xB0ABB8", Offset = "0xB0ABB8", VA = "0xB0ABB8")]
		public static void WriteVersion(ProtocolVersion version, byte[] buf, int offset)
		{
		}

		[Token(Token = "0x6001850")]
		[Address(RVA = "0xB14628", Offset = "0xB14628", VA = "0xB14628")]
		public static IList GetDefaultDssSignatureAlgorithms()
		{
			return null;
		}

		[Token(Token = "0x6001851")]
		[Address(RVA = "0xB14798", Offset = "0xB14798", VA = "0xB14798")]
		public static IList GetDefaultECDsaSignatureAlgorithms()
		{
			return null;
		}

		[Token(Token = "0x6001852")]
		[Address(RVA = "0xB1481C", Offset = "0xB1481C", VA = "0xB1481C")]
		public static IList GetDefaultRsaSignatureAlgorithms()
		{
			return null;
		}

		[Token(Token = "0x6001853")]
		[Address(RVA = "0xB066B0", Offset = "0xB066B0", VA = "0xB066B0")]
		public static byte[] GetExtensionData(IDictionary extensions, int extensionType)
		{
			return null;
		}

		[Token(Token = "0x6001854")]
		[Address(RVA = "0xB148A0", Offset = "0xB148A0", VA = "0xB148A0")]
		public static IList GetDefaultSupportedSignatureAlgorithms()
		{
			return null;
		}

		[Token(Token = "0x6001855")]
		[Address(RVA = "0xB052BC", Offset = "0xB052BC", VA = "0xB052BC")]
		public static SignatureAndHashAlgorithm GetSignatureAndHashAlgorithm(TlsContext context, TlsSignerCredentials signerCredentials)
		{
			return null;
		}

		[Token(Token = "0x6001856")]
		[Address(RVA = "0xB14A98", Offset = "0xB14A98", VA = "0xB14A98")]
		public static bool HasExpectedEmptyExtensionData(IDictionary extensions, int extensionType, byte alertDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x6001857")]
		[Address(RVA = "0xB14B54", Offset = "0xB14B54", VA = "0xB14B54")]
		public static TlsSession ImportSession(byte[] sessionID, SessionParameters sessionParameters)
		{
			return null;
		}

		[Token(Token = "0x6001858")]
		[Address(RVA = "0xB14BC4", Offset = "0xB14BC4", VA = "0xB14BC4")]
		public static bool IsSignatureAlgorithmsExtensionAllowed(ProtocolVersion clientVersion)
		{
			return default(bool);
		}

		[Token(Token = "0x6001859")]
		[Address(RVA = "0xB14C54", Offset = "0xB14C54", VA = "0xB14C54")]
		public static void AddSignatureAlgorithmsExtension(IDictionary extensions, IList supportedSignatureAlgorithms)
		{
		}

		[Token(Token = "0x600185A")]
		[Address(RVA = "0xB14E10", Offset = "0xB14E10", VA = "0xB14E10")]
		public static IList GetSignatureAlgorithmsExtension(IDictionary extensions)
		{
			return null;
		}

		[Token(Token = "0x600185B")]
		[Address(RVA = "0xB14D6C", Offset = "0xB14D6C", VA = "0xB14D6C")]
		public static byte[] CreateSignatureAlgorithmsExtension(IList supportedSignatureAlgorithms)
		{
			return null;
		}

		[Token(Token = "0x600185C")]
		[Address(RVA = "0xB14EAC", Offset = "0xB14EAC", VA = "0xB14EAC")]
		public static IList ReadSignatureAlgorithmsExtension(byte[] extensionData)
		{
			return null;
		}

		[Token(Token = "0x600185D")]
		[Address(RVA = "0xB14FB0", Offset = "0xB14FB0", VA = "0xB14FB0")]
		public static void EncodeSupportedSignatureAlgorithms(IList supportedSignatureAlgorithms, bool allowAnonymous, Stream output)
		{
		}

		[Token(Token = "0x600185E")]
		[Address(RVA = "0xB154AC", Offset = "0xB154AC", VA = "0xB154AC")]
		public static IList ParseSupportedSignatureAlgorithms(bool allowAnonymous, Stream input)
		{
			return null;
		}

		[Token(Token = "0x600185F")]
		[Address(RVA = "0xB1567C", Offset = "0xB1567C", VA = "0xB1567C")]
		public static byte[] PRF(TlsContext context, byte[] secret, string asciiLabel, byte[] seed, int size)
		{
			return null;
		}

		[Token(Token = "0x6001860")]
		[Address(RVA = "0xB15ED4", Offset = "0xB15ED4", VA = "0xB15ED4")]
		public static byte[] PRF_legacy(byte[] secret, string asciiLabel, byte[] seed, int size)
		{
			return null;
		}

		[Token(Token = "0x6001861")]
		[Address(RVA = "0xB159AC", Offset = "0xB159AC", VA = "0xB159AC")]
		internal static byte[] PRF_legacy(byte[] secret, byte[] label, byte[] labelSeed, int size)
		{
			return null;
		}

		[Token(Token = "0x6001862")]
		[Address(RVA = "0xB158F8", Offset = "0xB158F8", VA = "0xB158F8")]
		internal static byte[] Concat(byte[] a, byte[] b)
		{
			return null;
		}

		[Token(Token = "0x6001863")]
		[Address(RVA = "0xB15C08", Offset = "0xB15C08", VA = "0xB15C08")]
		internal static void HMacHash(IDigest digest, byte[] secret, byte[] seed, byte[] output)
		{
		}

		[Token(Token = "0x6001864")]
		[Address(RVA = "0xB04180", Offset = "0xB04180", VA = "0xB04180")]
		internal static void ValidateKeyUsage(X509CertificateStructure c, int keyUsageBits)
		{
		}

		[Token(Token = "0x6001865")]
		[Address(RVA = "0xB0B41C", Offset = "0xB0B41C", VA = "0xB0B41C")]
		internal static byte[] CalculateKeyBlock(TlsContext context, int size)
		{
			return null;
		}

		[Token(Token = "0x6001866")]
		[Address(RVA = "0xB15F7C", Offset = "0xB15F7C", VA = "0xB15F7C")]
		internal static byte[] CalculateKeyBlock_Ssl(byte[] master_secret, byte[] random, int size)
		{
			return null;
		}

		[Token(Token = "0x6001867")]
		[Address(RVA = "0xB0EDF8", Offset = "0xB0EDF8", VA = "0xB0EDF8")]
		internal static byte[] CalculateMasterSecret(TlsContext context, byte[] pre_master_secret)
		{
			return null;
		}

		[Token(Token = "0x6001868")]
		[Address(RVA = "0xB164F0", Offset = "0xB164F0", VA = "0xB164F0")]
		internal static byte[] CalculateMasterSecret_Ssl(byte[] pre_master_secret, byte[] random)
		{
			return null;
		}

		[Token(Token = "0x6001869")]
		[Address(RVA = "0xB0E508", Offset = "0xB0E508", VA = "0xB0E508")]
		internal static byte[] CalculateVerifyData(TlsContext context, string asciiLabel, byte[] handshakeHash)
		{
			return null;
		}

		[Token(Token = "0x600186A")]
		[Address(RVA = "0xB039A4", Offset = "0xB039A4", VA = "0xB039A4")]
		public static IDigest CreateHash(byte hashAlgorithm)
		{
			return null;
		}

		[Token(Token = "0x600186B")]
		[Address(RVA = "0xB053E4", Offset = "0xB053E4", VA = "0xB053E4")]
		public static IDigest CreateHash(SignatureAndHashAlgorithm signatureAndHashAlgorithm)
		{
			return null;
		}

		[Token(Token = "0x600186C")]
		[Address(RVA = "0xB16A48", Offset = "0xB16A48", VA = "0xB16A48")]
		public static IDigest CloneHash(byte hashAlgorithm, IDigest hash)
		{
			return null;
		}

		[Token(Token = "0x600186D")]
		[Address(RVA = "0xB15B70", Offset = "0xB15B70", VA = "0xB15B70")]
		public static IDigest CreatePrfHash(int prfAlgorithm)
		{
			return null;
		}

		[Token(Token = "0x600186E")]
		[Address(RVA = "0xB16DD4", Offset = "0xB16DD4", VA = "0xB16DD4")]
		public static IDigest ClonePrfHash(int prfAlgorithm, IDigest hash)
		{
			return null;
		}

		[Token(Token = "0x600186F")]
		[Address(RVA = "0xB16D18", Offset = "0xB16D18", VA = "0xB16D18")]
		public static byte GetHashAlgorithmForPrfAlgorithm(int prfAlgorithm)
		{
			return default(byte);
		}

		[Token(Token = "0x6001870")]
		[Address(RVA = "0xB114A0", Offset = "0xB114A0", VA = "0xB114A0")]
		public static DerObjectIdentifier GetOidForHashAlgorithm(byte hashAlgorithm)
		{
			return null;
		}

		[Token(Token = "0x6001871")]
		[Address(RVA = "0xB16EC0", Offset = "0xB16EC0", VA = "0xB16EC0")]
		internal static short GetClientCertificateType(Certificate clientCertificate, Certificate serverCertificate)
		{
			return default(short);
		}

		[Token(Token = "0x6001872")]
		[Address(RVA = "0xB171E0", Offset = "0xB171E0", VA = "0xB171E0")]
		internal static void TrackHashAlgorithms(TlsHandshakeHash handshakeHash, IList supportedSignatureAlgorithms)
		{
		}

		[Token(Token = "0x6001873")]
		[Address(RVA = "0xB17538", Offset = "0xB17538", VA = "0xB17538")]
		public static bool HasSigningCapability(byte clientCertificateType)
		{
			return default(bool);
		}

		[Token(Token = "0x6001874")]
		[Address(RVA = "0xB1755C", Offset = "0xB1755C", VA = "0xB1755C")]
		public static TlsSigner CreateTlsSigner(byte clientCertificateType)
		{
			return null;
		}

		[Token(Token = "0x6001875")]
		[Address(RVA = "0xB1764C", Offset = "0xB1764C", VA = "0xB1764C")]
		private static byte[][] GenSsl3Const()
		{
			return null;
		}

		[Token(Token = "0x6001876")]
		[Address(RVA = "0xB146AC", Offset = "0xB146AC", VA = "0xB146AC")]
		private static IList VectorOfOne(object obj)
		{
			return null;
		}

		[Token(Token = "0x6001877")]
		[Address(RVA = "0xB1773C", Offset = "0xB1773C", VA = "0xB1773C")]
		public static int GetCipherType(int ciphersuite)
		{
			return default(int);
		}

		[Token(Token = "0x6001878")]
		[Address(RVA = "0xB17810", Offset = "0xB17810", VA = "0xB17810")]
		public static int GetEncryptionAlgorithm(int ciphersuite)
		{
			return default(int);
		}

		[Token(Token = "0x6001879")]
		[Address(RVA = "0xB17984", Offset = "0xB17984", VA = "0xB17984")]
		public static int GetKeyExchangeAlgorithm(int ciphersuite)
		{
			return default(int);
		}

		[Token(Token = "0x600187A")]
		[Address(RVA = "0xB17B14", Offset = "0xB17B14", VA = "0xB17B14")]
		public static int GetMacAlgorithm(int ciphersuite)
		{
			return default(int);
		}

		[Token(Token = "0x600187B")]
		[Address(RVA = "0xB17C18", Offset = "0xB17C18", VA = "0xB17C18")]
		public static ProtocolVersion GetMinimumVersion(int ciphersuite)
		{
			return null;
		}

		[Token(Token = "0x600187C")]
		[Address(RVA = "0xB17D5C", Offset = "0xB17D5C", VA = "0xB17D5C")]
		public static bool IsAeadCipherSuite(int ciphersuite)
		{
			return default(bool);
		}

		[Token(Token = "0x600187D")]
		[Address(RVA = "0xB17DCC", Offset = "0xB17DCC", VA = "0xB17DCC")]
		public static bool IsBlockCipherSuite(int ciphersuite)
		{
			return default(bool);
		}

		[Token(Token = "0x600187E")]
		[Address(RVA = "0xB17E3C", Offset = "0xB17E3C", VA = "0xB17E3C")]
		public static bool IsStreamCipherSuite(int ciphersuite)
		{
			return default(bool);
		}

		[Token(Token = "0x600187F")]
		[Address(RVA = "0xB17EAC", Offset = "0xB17EAC", VA = "0xB17EAC")]
		public static bool IsValidCipherSuiteForVersion(int cipherSuite, ProtocolVersion serverVersion)
		{
			return default(bool);
		}

		[Token(Token = "0x6001880")]
		[Address(RVA = "0xB17F48", Offset = "0xB17F48", VA = "0xB17F48")]
		protected TlsUtilities()
		{
		}
	}
}
namespace Org.BouncyCastle.Crypto.Signers
{
	[Token(Token = "0x20002B9")]
	public class DsaDigestSigner : ISigner
	{
		[Token(Token = "0x4000D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IDigest digest;

		[Token(Token = "0x4000D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IDsa dsaSigner;

		[Token(Token = "0x4000D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool forSigning;

		[Token(Token = "0x170002DA")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001883")]
			[Address(RVA = "0xF7AB4C", Offset = "0xF7AB4C", VA = "0xF7AB4C", Slot = "11")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001882")]
		[Address(RVA = "0xF7AB14", Offset = "0xF7AB14", VA = "0xF7AB14")]
		public DsaDigestSigner(IDsa signer, IDigest digest)
		{
		}

		[Token(Token = "0x6001884")]
		[Address(RVA = "0xF7AC8C", Offset = "0xF7AC8C", VA = "0xF7AC8C", Slot = "12")]
		public virtual void Init(bool forSigning, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001885")]
		[Address(RVA = "0xF7AE9C", Offset = "0xF7AE9C", VA = "0xF7AE9C", Slot = "13")]
		public virtual void Update(byte input)
		{
		}

		[Token(Token = "0x6001886")]
		[Address(RVA = "0xF7AF60", Offset = "0xF7AF60", VA = "0xF7AF60", Slot = "14")]
		public virtual void BlockUpdate(byte[] input, int inOff, int length)
		{
		}

		[Token(Token = "0x6001887")]
		[Address(RVA = "0xF7B03C", Offset = "0xF7B03C", VA = "0xF7B03C", Slot = "15")]
		public virtual byte[] GenerateSignature()
		{
			return null;
		}

		[Token(Token = "0x6001888")]
		[Address(RVA = "0xF7B3AC", Offset = "0xF7B3AC", VA = "0xF7B3AC", Slot = "16")]
		public virtual bool VerifySignature(byte[] signature)
		{
			return default(bool);
		}

		[Token(Token = "0x6001889")]
		[Address(RVA = "0xF7B878", Offset = "0xF7B878", VA = "0xF7B878", Slot = "17")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x600188A")]
		[Address(RVA = "0xF7B26C", Offset = "0xF7B26C", VA = "0xF7B26C")]
		private byte[] DerEncode(BigInteger r, BigInteger s)
		{
			return null;
		}

		[Token(Token = "0x600188B")]
		[Address(RVA = "0xF7B694", Offset = "0xF7B694", VA = "0xF7B694")]
		private BigInteger[] DerDecode(byte[] encoding)
		{
			return null;
		}
	}
	[Token(Token = "0x20002BA")]
	public class DsaSigner : IDsa
	{
		[Token(Token = "0x4000D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly IDsaKCalculator kCalculator;

		[Token(Token = "0x4000D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected DsaKeyParameters key;

		[Token(Token = "0x4000D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected SecureRandom random;

		[Token(Token = "0x170002DB")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x600188E")]
			[Address(RVA = "0xF7B9CC", Offset = "0xF7B9CC", VA = "0xF7B9CC", Slot = "8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600188C")]
		[Address(RVA = "0xF7B92C", Offset = "0xF7B92C", VA = "0xF7B92C")]
		public DsaSigner()
		{
		}

		[Token(Token = "0x600188D")]
		[Address(RVA = "0xF7B9A0", Offset = "0xF7B9A0", VA = "0xF7B9A0")]
		public DsaSigner(IDsaKCalculator kCalculator)
		{
		}

		[Token(Token = "0x600188F")]
		[Address(RVA = "0xF7BA14", Offset = "0xF7BA14", VA = "0xF7BA14", Slot = "9")]
		public virtual void Init(bool forSigning, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001890")]
		[Address(RVA = "0xF7BC2C", Offset = "0xF7BC2C", VA = "0xF7BC2C", Slot = "10")]
		public virtual BigInteger[] GenerateSignature(byte[] message)
		{
			return null;
		}

		[Token(Token = "0x6001891")]
		[Address(RVA = "0xF7BFF8", Offset = "0xF7BFF8", VA = "0xF7BFF8", Slot = "11")]
		public virtual bool VerifySignature(byte[] message, BigInteger r, BigInteger s)
		{
			return default(bool);
		}

		[Token(Token = "0x6001892")]
		[Address(RVA = "0xF7C224", Offset = "0xF7C224", VA = "0xF7C224", Slot = "12")]
		protected virtual BigInteger CalculateE(BigInteger n, byte[] message)
		{
			return null;
		}

		[Token(Token = "0x6001893")]
		[Address(RVA = "0xF7C304", Offset = "0xF7C304", VA = "0xF7C304", Slot = "13")]
		protected virtual SecureRandom InitSecureRandom(bool needed, SecureRandom provided)
		{
			return null;
		}
	}
	[Token(Token = "0x20002BB")]
	public class ECDsaSigner : IDsa
	{
		[Token(Token = "0x4000D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly IDsaKCalculator kCalculator;

		[Token(Token = "0x4000D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected ECKeyParameters key;

		[Token(Token = "0x4000D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected SecureRandom random;

		[Token(Token = "0x170002DC")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001896")]
			[Address(RVA = "0xF7C41C", Offset = "0xF7C41C", VA = "0xF7C41C", Slot = "8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001894")]
		[Address(RVA = "0xF7C384", Offset = "0xF7C384", VA = "0xF7C384")]
		public ECDsaSigner()
		{
		}

		[Token(Token = "0x6001895")]
		[Address(RVA = "0xF7C3F0", Offset = "0xF7C3F0", VA = "0xF7C3F0")]
		public ECDsaSigner(IDsaKCalculator kCalculator)
		{
		}

		[Token(Token = "0x6001897")]
		[Address(RVA = "0xF7C464", Offset = "0xF7C464", VA = "0xF7C464", Slot = "9")]
		public virtual void Init(bool forSigning, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001898")]
		[Address(RVA = "0xF7C67C", Offset = "0xF7C67C", VA = "0xF7C67C", Slot = "10")]
		public virtual BigInteger[] GenerateSignature(byte[] message)
		{
			return null;
		}

		[Token(Token = "0x6001899")]
		[Address(RVA = "0xF7CB0C", Offset = "0xF7CB0C", VA = "0xF7CB0C", Slot = "11")]
		public virtual bool VerifySignature(byte[] message, BigInteger r, BigInteger s)
		{
			return default(bool);
		}

		[Token(Token = "0x600189A")]
		[Address(RVA = "0xF7CD24", Offset = "0xF7CD24", VA = "0xF7CD24", Slot = "12")]
		protected virtual BigInteger CalculateE(BigInteger n, byte[] message)
		{
			return null;
		}

		[Token(Token = "0x600189B")]
		[Address(RVA = "0xF7CDEC", Offset = "0xF7CDEC", VA = "0xF7CDEC", Slot = "13")]
		protected virtual ECMultiplier CreateBasePointMultiplier()
		{
			return null;
		}

		[Token(Token = "0x600189C")]
		[Address(RVA = "0xF7CE48", Offset = "0xF7CE48", VA = "0xF7CE48", Slot = "14")]
		protected virtual SecureRandom InitSecureRandom(bool needed, SecureRandom provided)
		{
			return null;
		}
	}
	[Token(Token = "0x20002BC")]
	public class ECGost3410Signer : IDsa
	{
		[Token(Token = "0x4000D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ECKeyParameters key;

		[Token(Token = "0x4000D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private SecureRandom random;

		[Token(Token = "0x170002DD")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x600189D")]
			[Address(RVA = "0xF7CEC8", Offset = "0xF7CEC8", VA = "0xF7CEC8", Slot = "8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600189E")]
		[Address(RVA = "0xF7CF10", Offset = "0xF7CF10", VA = "0xF7CF10", Slot = "9")]
		public virtual void Init(bool forSigning, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x600189F")]
		[Address(RVA = "0xF7D09C", Offset = "0xF7D09C", VA = "0xF7D09C", Slot = "10")]
		public virtual BigInteger[] GenerateSignature(byte[] message)
		{
			return null;
		}

		[Token(Token = "0x60018A0")]
		[Address(RVA = "0xF7D420", Offset = "0xF7D420", VA = "0xF7D420", Slot = "11")]
		public virtual bool VerifySignature(byte[] message, BigInteger r, BigInteger s)
		{
			return default(bool);
		}

		[Token(Token = "0x60018A1")]
		[Address(RVA = "0xF7D728", Offset = "0xF7D728", VA = "0xF7D728", Slot = "12")]
		protected virtual ECMultiplier CreateBasePointMultiplier()
		{
			return null;
		}

		[Token(Token = "0x60018A2")]
		[Address(RVA = "0xF7D784", Offset = "0xF7D784", VA = "0xF7D784")]
		public ECGost3410Signer()
		{
		}
	}
	[Token(Token = "0x20002BD")]
	public class ECNRSigner : IDsa
	{
		[Token(Token = "0x4000D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool forSigning;

		[Token(Token = "0x4000D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ECKeyParameters key;

		[Token(Token = "0x4000D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private SecureRandom random;

		[Token(Token = "0x170002DE")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x60018A3")]
			[Address(RVA = "0xF7D78C", Offset = "0xF7D78C", VA = "0xF7D78C", Slot = "8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018A4")]
		[Address(RVA = "0xF7D7D4", Offset = "0xF7D7D4", VA = "0xF7D7D4", Slot = "9")]
		public virtual void Init(bool forSigning, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x60018A5")]
		[Address(RVA = "0xF7D968", Offset = "0xF7D968", VA = "0xF7D968", Slot = "10")]
		public virtual BigInteger[] GenerateSignature(byte[] message)
		{
			return null;
		}

		[Token(Token = "0x60018A6")]
		[Address(RVA = "0xF7DD18", Offset = "0xF7DD18", VA = "0xF7DD18", Slot = "11")]
		public virtual bool VerifySignature(byte[] message, BigInteger r, BigInteger s)
		{
			return default(bool);
		}

		[Token(Token = "0x60018A7")]
		[Address(RVA = "0xF7DFE0", Offset = "0xF7DFE0", VA = "0xF7DFE0")]
		public ECNRSigner()
		{
		}
	}
	[Token(Token = "0x20002BE")]
	public class Gost3410DigestSigner : ISigner
	{
		[Token(Token = "0x4000D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IDigest digest;

		[Token(Token = "0x4000D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IDsa dsaSigner;

		[Token(Token = "0x4000D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool forSigning;

		[Token(Token = "0x170002DF")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x60018A9")]
			[Address(RVA = "0xF7EC5C", Offset = "0xF7EC5C", VA = "0xF7EC5C", Slot = "11")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018A8")]
		[Address(RVA = "0xF7EC24", Offset = "0xF7EC24", VA = "0xF7EC24")]
		public Gost3410DigestSigner(IDsa signer, IDigest digest)
		{
		}

		[Token(Token = "0x60018AA")]
		[Address(RVA = "0xF7ED9C", Offset = "0xF7ED9C", VA = "0xF7ED9C", Slot = "12")]
		public virtual void Init(bool forSigning, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x60018AB")]
		[Address(RVA = "0xF7EFAC", Offset = "0xF7EFAC", VA = "0xF7EFAC", Slot = "13")]
		public virtual void Update(byte input)
		{
		}

		[Token(Token = "0x60018AC")]
		[Address(RVA = "0xF7F070", Offset = "0xF7F070", VA = "0xF7F070", Slot = "14")]
		public virtual void BlockUpdate(byte[] input, int inOff, int length)
		{
		}

		[Token(Token = "0x60018AD")]
		[Address(RVA = "0xF7F14C", Offset = "0xF7F14C", VA = "0xF7F14C", Slot = "15")]
		public virtual byte[] GenerateSignature()
		{
			return null;
		}

		[Token(Token = "0x60018AE")]
		[Address(RVA = "0xF7F508", Offset = "0xF7F508", VA = "0xF7F508", Slot = "16")]
		public virtual bool VerifySignature(byte[] signature)
		{
			return default(bool);
		}

		[Token(Token = "0x60018AF")]
		[Address(RVA = "0xF7F824", Offset = "0xF7F824", VA = "0xF7F824", Slot = "17")]
		public virtual void Reset()
		{
		}
	}
	[Token(Token = "0x20002BF")]
	public class Gost3410Signer : IDsa
	{
		[Token(Token = "0x4000D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Gost3410KeyParameters key;

		[Token(Token = "0x4000D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private SecureRandom random;

		[Token(Token = "0x170002E0")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x60018B0")]
			[Address(RVA = "0xF7F8D8", Offset = "0xF7F8D8", VA = "0xF7F8D8", Slot = "8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018B1")]
		[Address(RVA = "0xF7F920", Offset = "0xF7F920", VA = "0xF7F920", Slot = "9")]
		public virtual void Init(bool forSigning, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x60018B2")]
		[Address(RVA = "0xF7FAAC", Offset = "0xF7FAAC", VA = "0xF7FAAC", Slot = "10")]
		public virtual BigInteger[] GenerateSignature(byte[] message)
		{
			return null;
		}

		[Token(Token = "0x60018B3")]
		[Address(RVA = "0xF7FD44", Offset = "0xF7FD44", VA = "0xF7FD44", Slot = "11")]
		public virtual bool VerifySignature(byte[] message, BigInteger r, BigInteger s)
		{
			return default(bool);
		}

		[Token(Token = "0x60018B4")]
		[Address(RVA = "0xF80038", Offset = "0xF80038", VA = "0xF80038")]
		public Gost3410Signer()
		{
		}
	}
	[Token(Token = "0x20002C0")]
	public class GenericSigner : ISigner
	{
		[Token(Token = "0x4000D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IAsymmetricBlockCipher engine;

		[Token(Token = "0x4000D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IDigest digest;

		[Token(Token = "0x4000D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool forSigning;

		[Token(Token = "0x170002E1")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x60018B6")]
			[Address(RVA = "0xF7E020", Offset = "0xF7E020", VA = "0xF7E020", Slot = "11")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018B5")]
		[Address(RVA = "0xF7DFE8", Offset = "0xF7DFE8", VA = "0xF7DFE8")]
		public GenericSigner(IAsymmetricBlockCipher engine, IDigest digest)
		{
		}

		[Token(Token = "0x60018B7")]
		[Address(RVA = "0xF7E278", Offset = "0xF7E278", VA = "0xF7E278", Slot = "12")]
		public virtual void Init(bool forSigning, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x60018B8")]
		[Address(RVA = "0xF7E488", Offset = "0xF7E488", VA = "0xF7E488", Slot = "13")]
		public virtual void Update(byte input)
		{
		}

		[Token(Token = "0x60018B9")]
		[Address(RVA = "0xF7E54C", Offset = "0xF7E54C", VA = "0xF7E54C", Slot = "14")]
		public virtual void BlockUpdate(byte[] input, int inOff, int length)
		{
		}

		[Token(Token = "0x60018BA")]
		[Address(RVA = "0xF7E628", Offset = "0xF7E628", VA = "0xF7E628", Slot = "15")]
		public virtual byte[] GenerateSignature()
		{
			return null;
		}

		[Token(Token = "0x60018BB")]
		[Address(RVA = "0xF7E840", Offset = "0xF7E840", VA = "0xF7E840", Slot = "16")]
		public virtual bool VerifySignature(byte[] signature)
		{
			return default(bool);
		}

		[Token(Token = "0x60018BC")]
		[Address(RVA = "0xF7EB70", Offset = "0xF7EB70", VA = "0xF7EB70", Slot = "17")]
		public virtual void Reset()
		{
		}
	}
	[Token(Token = "0x20002C1")]
	public class HMacDsaKCalculator : IDsaKCalculator
	{
		[Token(Token = "0x4000D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly HMac hMac;

		[Token(Token = "0x4000D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly byte[] K;

		[Token(Token = "0x4000D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly byte[] V;

		[Token(Token = "0x4000D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private BigInteger n;

		[Token(Token = "0x170002E2")]
		public virtual bool IsDeterministic
		{
			[Token(Token = "0x60018BE")]
			[Address(RVA = "0xF80124", Offset = "0xF80124", VA = "0xF80124", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60018BD")]
		[Address(RVA = "0xF80040", Offset = "0xF80040", VA = "0xF80040")]
		public HMacDsaKCalculator(IDigest digest)
		{
		}

		[Token(Token = "0x60018BF")]
		[Address(RVA = "0xF8012C", Offset = "0xF8012C", VA = "0xF8012C", Slot = "9")]
		public virtual void Init(BigInteger n, SecureRandom random)
		{
		}

		[Token(Token = "0x60018C0")]
		[Address(RVA = "0xF80198", Offset = "0xF80198", VA = "0xF80198", Slot = "6")]
		public void Init(BigInteger n, BigInteger d, byte[] message)
		{
		}

		[Token(Token = "0x60018C1")]
		[Address(RVA = "0xF80684", Offset = "0xF80684", VA = "0xF80684", Slot = "10")]
		public virtual BigInteger NextK()
		{
			return null;
		}

		[Token(Token = "0x60018C2")]
		[Address(RVA = "0xF805B0", Offset = "0xF805B0", VA = "0xF805B0")]
		private BigInteger BitsToInt(byte[] t)
		{
			return null;
		}
	}
	[Token(Token = "0x20002C2")]
	public interface IDsaKCalculator
	{
		[Token(Token = "0x170002E3")]
		bool IsDeterministic
		{
			[Token(Token = "0x60018C3")]
			get;
		}

		[Token(Token = "0x60018C4")]
		void Init(BigInteger n, SecureRandom random);

		[Token(Token = "0x60018C5")]
		void Init(BigInteger n, BigInteger d, byte[] message);

		[Token(Token = "0x60018C6")]
		BigInteger NextK();
	}
	[Token(Token = "0x20002C3")]
	public class Iso9796d2Signer : ISignerWithRecovery, ISigner
	{
		[Token(Token = "0x4000D20")]
		public const int TrailerImplicit = 188;

		[Token(Token = "0x4000D21")]
		public const int TrailerRipeMD160 = 12748;

		[Token(Token = "0x4000D22")]
		public const int TrailerRipeMD128 = 13004;

		[Token(Token = "0x4000D23")]
		public const int TrailerSha1 = 13260;

		[Token(Token = "0x4000D24")]
		public const int TrailerSha256 = 13516;

		[Token(Token = "0x4000D25")]
		public const int TrailerSha512 = 13772;

		[Token(Token = "0x4000D26")]
		public const int TrailerSha384 = 14028;

		[Token(Token = "0x4000D27")]
		public const int TrailerWhirlpool = 14284;

		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static IDictionary trailerMap;

		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IDigest digest;

		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IAsymmetricBlockCipher cipher;

		[Token(Token = "0x4000D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int trailer;

		[Token(Token = "0x4000D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int keyBits;

		[Token(Token = "0x4000D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private byte[] block;

		[Token(Token = "0x4000D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private byte[] mBuf;

		[Token(Token = "0x4000D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int messageLength;

		[Token(Token = "0x4000D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool fullMessage;

		[Token(Token = "0x4000D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private byte[] recoveredMessage;

		[Token(Token = "0x4000D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private byte[] preSig;

		[Token(Token = "0x4000D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private byte[] preBlock;

		[Token(Token = "0x170002E4")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x60018CB")]
			[Address(RVA = "0xF8111C", Offset = "0xF8111C", VA = "0xF8111C", Slot = "14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018C7")]
		[Address(RVA = "0xF8090C", Offset = "0xF8090C", VA = "0xF8090C", Slot = "5")]
		public byte[] GetRecoveredMessage()
		{
			return null;
		}

		[Token(Token = "0x60018C8")]
		[Address(RVA = "0xF80914", Offset = "0xF80914", VA = "0xF80914")]
		static Iso9796d2Signer()
		{
		}

		[Token(Token = "0x60018C9")]
		[Address(RVA = "0xF80E18", Offset = "0xF80E18", VA = "0xF80E18")]
		public Iso9796d2Signer(IAsymmetricBlockCipher cipher, IDigest digest, bool isImplicit)
		{
		}

		[Token(Token = "0x60018CA")]
		[Address(RVA = "0xF81114", Offset = "0xF81114", VA = "0xF81114")]
		public Iso9796d2Signer(IAsymmetricBlockCipher cipher, IDigest digest)
		{
		}

		[Token(Token = "0x60018CC")]
		[Address(RVA = "0xF811E0", Offset = "0xF811E0", VA = "0xF811E0", Slot = "15")]
		public virtual void Init(bool forSigning, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x60018CD")]
		[Address(RVA = "0xF813F4", Offset = "0xF813F4", VA = "0xF813F4")]
		private bool IsSameAs(byte[] a, byte[] b)
		{
			return default(bool);
		}

		[Token(Token = "0x60018CE")]
		[Address(RVA = "0xF814B0", Offset = "0xF814B0", VA = "0xF814B0")]
		private void ClearBlock(byte[] block)
		{
		}

		[Token(Token = "0x60018CF")]
		[Address(RVA = "0xF814D4", Offset = "0xF814D4", VA = "0xF814D4", Slot = "16")]
		public virtual void UpdateWithRecoveredMessage(byte[] signature)
		{
		}

		[Token(Token = "0x60018D0")]
		[Address(RVA = "0xF81AD8", Offset = "0xF81AD8", VA = "0xF81AD8", Slot = "17")]
		public virtual void Update(byte input)
		{
		}

		[Token(Token = "0x60018D1")]
		[Address(RVA = "0xF81BE0", Offset = "0xF81BE0", VA = "0xF81BE0", Slot = "18")]
		public virtual void BlockUpdate(byte[] input, int inOff, int length)
		{
		}

		[Token(Token = "0x60018D2")]
		[Address(RVA = "0xF81D40", Offset = "0xF81D40", VA = "0xF81D40", Slot = "19")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x60018D3")]
		[Address(RVA = "0xF81E30", Offset = "0xF81E30", VA = "0xF81E30", Slot = "20")]
		public virtual byte[] GenerateSignature()
		{
			return null;
		}

		[Token(Token = "0x60018D4")]
		[Address(RVA = "0xF82238", Offset = "0xF82238", VA = "0xF82238", Slot = "21")]
		public virtual bool VerifySignature(byte[] signature)
		{
			return default(bool);
		}

		[Token(Token = "0x60018D5")]
		[Address(RVA = "0xF82B38", Offset = "0xF82B38", VA = "0xF82B38")]
		private bool ReturnFalse(byte[] block)
		{
			return default(bool);
		}

		[Token(Token = "0x60018D6")]
		[Address(RVA = "0xF82B6C", Offset = "0xF82B6C", VA = "0xF82B6C", Slot = "22")]
		public virtual bool HasFullMessage()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002C4")]
	public class PssSigner : ISigner
	{
		[Token(Token = "0x4000D34")]
		public const byte TrailerImplicit = 188;

		[Token(Token = "0x4000D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IDigest contentDigest1;

		[Token(Token = "0x4000D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IDigest contentDigest2;

		[Token(Token = "0x4000D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly IDigest mgfDigest;

		[Token(Token = "0x4000D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly IAsymmetricBlockCipher cipher;

		[Token(Token = "0x4000D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SecureRandom random;

		[Token(Token = "0x4000D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int hLen;

		[Token(Token = "0x4000D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int mgfhLen;

		[Token(Token = "0x4000D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int sLen;

		[Token(Token = "0x4000D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int emBits;

		[Token(Token = "0x4000D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private byte[] salt;

		[Token(Token = "0x4000D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private byte[] mDash;

		[Token(Token = "0x4000D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private byte[] block;

		[Token(Token = "0x4000D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private byte trailer;

		[Token(Token = "0x170002E5")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x60018DF")]
			[Address(RVA = "0xF83018", Offset = "0xF83018", VA = "0xF83018", Slot = "11")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018D7")]
		[Address(RVA = "0xF82B74", Offset = "0xF82B74", VA = "0xF82B74")]
		public static PssSigner CreateRawSigner(IAsymmetricBlockCipher cipher, IDigest digest)
		{
			return null;
		}

		[Token(Token = "0x60018D8")]
		[Address(RVA = "0xF82E30", Offset = "0xF82E30", VA = "0xF82E30")]
		public static PssSigner CreateRawSigner(IAsymmetricBlockCipher cipher, IDigest contentDigest, IDigest mgfDigest, int saltLen, byte trailer)
		{
			return null;
		}

		[Token(Token = "0x60018D9")]
		[Address(RVA = "0xF82EE8", Offset = "0xF82EE8", VA = "0xF82EE8")]
		public PssSigner(IAsymmetricBlockCipher cipher, IDigest digest)
		{
		}

		[Token(Token = "0x60018DA")]
		[Address(RVA = "0xF82FC8", Offset = "0xF82FC8", VA = "0xF82FC8")]
		public PssSigner(IAsymmetricBlockCipher cipher, IDigest digest, int saltLen)
		{
		}

		[Token(Token = "0x60018DB")]
		[Address(RVA = "0xF82FF0", Offset = "0xF82FF0", VA = "0xF82FF0")]
		public PssSigner(IAsymmetricBlockCipher cipher, IDigest contentDigest, IDigest mgfDigest, int saltLen)
		{
		}

		[Token(Token = "0x60018DC")]
		[Address(RVA = "0xF82FDC", Offset = "0xF82FDC", VA = "0xF82FDC")]
		public PssSigner(IAsymmetricBlockCipher cipher, IDigest digest, int saltLen, byte trailer)
		{
		}

		[Token(Token = "0x60018DD")]
		[Address(RVA = "0xF83004", Offset = "0xF83004", VA = "0xF83004")]
		public PssSigner(IAsymmetricBlockCipher cipher, IDigest contentDigest, IDigest mgfDigest, int saltLen, byte trailer)
		{
		}

		[Token(Token = "0x60018DE")]
		[Address(RVA = "0xF82C94", Offset = "0xF82C94", VA = "0xF82C94")]
		private PssSigner(IAsymmetricBlockCipher cipher, IDigest contentDigest1, IDigest contentDigest2, IDigest mgfDigest, int saltLen, byte trailer)
		{
		}

		[Token(Token = "0x60018E0")]
		[Address(RVA = "0xF830DC", Offset = "0xF830DC", VA = "0xF830DC", Slot = "12")]
		public virtual void Init(bool forSigning, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x60018E1")]
		[Address(RVA = "0xF83328", Offset = "0xF83328", VA = "0xF83328")]
		private void ClearBlock(byte[] block)
		{
		}

		[Token(Token = "0x60018E2")]
		[Address(RVA = "0xF8334C", Offset = "0xF8334C", VA = "0xF8334C", Slot = "13")]
		public virtual void Update(byte input)
		{
		}

		[Token(Token = "0x60018E3")]
		[Address(RVA = "0xF83410", Offset = "0xF83410", VA = "0xF83410", Slot = "14")]
		public virtual void BlockUpdate(byte[] input, int inOff, int length)
		{
		}

		[Token(Token = "0x60018E4")]
		[Address(RVA = "0xF834EC", Offset = "0xF834EC", VA = "0xF834EC", Slot = "15")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x60018E5")]
		[Address(RVA = "0xF835A0", Offset = "0xF835A0", VA = "0xF835A0", Slot = "16")]
		public virtual byte[] GenerateSignature()
		{
			return null;
		}

		[Token(Token = "0x60018E6")]
		[Address(RVA = "0xF83E88", Offset = "0xF83E88", VA = "0xF83E88", Slot = "17")]
		public virtual bool VerifySignature(byte[] signature)
		{
			return default(bool);
		}

		[Token(Token = "0x60018E7")]
		[Address(RVA = "0xF8432C", Offset = "0xF8432C", VA = "0xF8432C")]
		private void ItoOSP(int i, byte[] sp)
		{
		}

		[Token(Token = "0x60018E8")]
		[Address(RVA = "0xF839E8", Offset = "0xF839E8", VA = "0xF839E8")]
		private byte[] MaskGeneratorFunction1(byte[] Z, int zOff, int zLen, int length)
		{
			return null;
		}
	}
	[Token(Token = "0x20002C5")]
	public class RandomDsaKCalculator : IDsaKCalculator
	{
		[Token(Token = "0x4000D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BigInteger q;

		[Token(Token = "0x4000D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private SecureRandom random;

		[Token(Token = "0x170002E6")]
		public virtual bool IsDeterministic
		{
			[Token(Token = "0x60018E9")]
			[Address(RVA = "0xF8438C", Offset = "0xF8438C", VA = "0xF8438C", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60018EA")]
		[Address(RVA = "0xF84394", Offset = "0xF84394", VA = "0xF84394", Slot = "9")]
		public virtual void Init(BigInteger n, SecureRandom random)
		{
		}

		[Token(Token = "0x60018EB")]
		[Address(RVA = "0xF8439C", Offset = "0xF8439C", VA = "0xF8439C", Slot = "10")]
		public virtual void Init(BigInteger n, BigInteger d, byte[] message)
		{
		}

		[Token(Token = "0x60018EC")]
		[Address(RVA = "0xF84408", Offset = "0xF84408", VA = "0xF84408", Slot = "11")]
		public virtual BigInteger NextK()
		{
			return null;
		}

		[Token(Token = "0x60018ED")]
		[Address(RVA = "0xF7B998", Offset = "0xF7B998", VA = "0xF7B998")]
		public RandomDsaKCalculator()
		{
		}
	}
	[Token(Token = "0x20002C6")]
	public class RsaDigestSigner : ISigner
	{
		[Token(Token = "0x4000D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IAsymmetricBlockCipher rsaEngine;

		[Token(Token = "0x4000D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly AlgorithmIdentifier algId;

		[Token(Token = "0x4000D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly IDigest digest;

		[Token(Token = "0x4000D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool forSigning;

		[Token(Token = "0x4000D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly IDictionary oidMap;

		[Token(Token = "0x170002E7")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x60018F2")]
			[Address(RVA = "0xF84F40", Offset = "0xF84F40", VA = "0xF84F40", Slot = "11")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018EE")]
		[Address(RVA = "0xF844D0", Offset = "0xF844D0", VA = "0xF844D0")]
		static RsaDigestSigner()
		{
		}

		[Token(Token = "0x60018EF")]
		[Address(RVA = "0xF84C3C", Offset = "0xF84C3C", VA = "0xF84C3C")]
		public RsaDigestSigner(IDigest digest)
		{
		}

		[Token(Token = "0x60018F0")]
		[Address(RVA = "0xF84DE4", Offset = "0xF84DE4", VA = "0xF84DE4")]
		public RsaDigestSigner(IDigest digest, DerObjectIdentifier digestOid)
		{
		}

		[Token(Token = "0x60018F1")]
		[Address(RVA = "0xF84E98", Offset = "0xF84E98", VA = "0xF84E98")]
		public RsaDigestSigner(IDigest digest, AlgorithmIdentifier algId)
		{
		}

		[Token(Token = "0x60018F3")]
		[Address(RVA = "0xF85004", Offset = "0xF85004", VA = "0xF85004", Slot = "12")]
		public virtual void Init(bool forSigning, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x60018F4")]
		[Address(RVA = "0xF85214", Offset = "0xF85214", VA = "0xF85214", Slot = "13")]
		public virtual void Update(byte input)
		{
		}

		[Token(Token = "0x60018F5")]
		[Address(RVA = "0xF852D8", Offset = "0xF852D8", VA = "0xF852D8", Slot = "14")]
		public virtual void BlockUpdate(byte[] input, int inOff, int length)
		{
		}

		[Token(Token = "0x60018F6")]
		[Address(RVA = "0xF853B4", Offset = "0xF853B4", VA = "0xF853B4", Slot = "15")]
		public virtual byte[] GenerateSignature()
		{
			return null;
		}

		[Token(Token = "0x60018F7")]
		[Address(RVA = "0xF85678", Offset = "0xF85678", VA = "0xF85678", Slot = "16")]
		public virtual bool VerifySignature(byte[] signature)
		{
			return default(bool);
		}

		[Token(Token = "0x60018F8")]
		[Address(RVA = "0xF85A8C", Offset = "0xF85A8C", VA = "0xF85A8C", Slot = "17")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x60018F9")]
		[Address(RVA = "0xF855DC", Offset = "0xF855DC", VA = "0xF855DC")]
		private byte[] DerEncode(byte[] hash)
		{
			return null;
		}
	}
	[Token(Token = "0x20002C7")]
	public class X931Signer : ISigner
	{
		[Token(Token = "0x4000D49")]
		public const int TRAILER_IMPLICIT = 188;

		[Token(Token = "0x4000D4A")]
		public const int TRAILER_RIPEMD160 = 12748;

		[Token(Token = "0x4000D4B")]
		public const int TRAILER_RIPEMD128 = 13004;

		[Token(Token = "0x4000D4C")]
		public const int TRAILER_SHA1 = 13260;

		[Token(Token = "0x4000D4D")]
		public const int TRAILER_SHA256 = 13516;

		[Token(Token = "0x4000D4E")]
		public const int TRAILER_SHA512 = 13772;

		[Token(Token = "0x4000D4F")]
		public const int TRAILER_SHA384 = 14028;

		[Token(Token = "0x4000D50")]
		public const int TRAILER_WHIRLPOOL = 14284;

		[Token(Token = "0x4000D51")]
		public const int TRAILER_SHA224 = 14540;

		[Token(Token = "0x4000D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly IDictionary trailerMap;

		[Token(Token = "0x4000D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IDigest digest;

		[Token(Token = "0x4000D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IAsymmetricBlockCipher cipher;

		[Token(Token = "0x4000D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RsaKeyParameters kParam;

		[Token(Token = "0x4000D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int trailer;

		[Token(Token = "0x4000D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int keyBits;

		[Token(Token = "0x4000D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private byte[] block;

		[Token(Token = "0x170002E8")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x60018FC")]
			[Address(RVA = "0xF060D8", Offset = "0xF060D8", VA = "0xF060D8", Slot = "11")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018FA")]
		[Address(RVA = "0xF05898", Offset = "0xF05898", VA = "0xF05898")]
		static X931Signer()
		{
		}

		[Token(Token = "0x60018FB")]
		[Address(RVA = "0xF05E3C", Offset = "0xF05E3C", VA = "0xF05E3C")]
		public X931Signer(IAsymmetricBlockCipher cipher, IDigest digest, bool isImplicit)
		{
		}

		[Token(Token = "0x60018FD")]
		[Address(RVA = "0xF06224", Offset = "0xF06224", VA = "0xF06224")]
		public X931Signer(IAsymmetricBlockCipher cipher, IDigest digest)
		{
		}

		[Token(Token = "0x60018FE")]
		[Address(RVA = "0xF0622C", Offset = "0xF0622C", VA = "0xF0622C", Slot = "12")]
		public virtual void Init(bool forSigning, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x60018FF")]
		[Address(RVA = "0xF06398", Offset = "0xF06398", VA = "0xF06398")]
		private void ClearBlock(byte[] block)
		{
		}

		[Token(Token = "0x6001900")]
		[Address(RVA = "0xF063BC", Offset = "0xF063BC", VA = "0xF063BC", Slot = "13")]
		public virtual void Update(byte b)
		{
		}

		[Token(Token = "0x6001901")]
		[Address(RVA = "0xF06480", Offset = "0xF06480", VA = "0xF06480", Slot = "14")]
		public virtual void BlockUpdate(byte[] input, int off, int len)
		{
		}

		[Token(Token = "0x6001902")]
		[Address(RVA = "0xF0655C", Offset = "0xF0655C", VA = "0xF0655C", Slot = "15")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x6001903")]
		[Address(RVA = "0xF06610", Offset = "0xF06610", VA = "0xF06610", Slot = "16")]
		public virtual byte[] GenerateSignature()
		{
			return null;
		}

		[Token(Token = "0x6001904")]
		[Address(RVA = "0xF0678C", Offset = "0xF0678C", VA = "0xF0678C")]
		private void CreateSignatureBlock()
		{
		}

		[Token(Token = "0x6001905")]
		[Address(RVA = "0xF06A3C", Offset = "0xF06A3C", VA = "0xF06A3C", Slot = "17")]
		public virtual bool VerifySignature(byte[] signature)
		{
			return default(bool);
		}
	}
}
namespace Org.BouncyCastle.Crypto.Prng
{
	[Token(Token = "0x20002C8")]
	public class CryptoApiRandomGenerator : IRandomGenerator
	{
		[Token(Token = "0x4000D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly RandomNumberGenerator rndProv;

		[Token(Token = "0x6001906")]
		[Address(RVA = "0xF7A170", Offset = "0xF7A170", VA = "0xF7A170")]
		public CryptoApiRandomGenerator()
		{
		}

		[Token(Token = "0x6001907")]
		[Address(RVA = "0xF7A1DC", Offset = "0xF7A1DC", VA = "0xF7A1DC")]
		public CryptoApiRandomGenerator(RandomNumberGenerator rng)
		{
		}

		[Token(Token = "0x6001908")]
		[Address(RVA = "0xF7A208", Offset = "0xF7A208", VA = "0xF7A208", Slot = "8")]
		public virtual void AddSeedMaterial(byte[] seed)
		{
		}

		[Token(Token = "0x6001909")]
		[Address(RVA = "0xF7A20C", Offset = "0xF7A20C", VA = "0xF7A20C", Slot = "9")]
		public virtual void AddSeedMaterial(long seed)
		{
		}

		[Token(Token = "0x600190A")]
		[Address(RVA = "0xF7A210", Offset = "0xF7A210", VA = "0xF7A210", Slot = "10")]
		public virtual void NextBytes(byte[] bytes)
		{
		}

		[Token(Token = "0x600190B")]
		[Address(RVA = "0xF7A230", Offset = "0xF7A230", VA = "0xF7A230", Slot = "11")]
		public virtual void NextBytes(byte[] bytes, int start, int len)
		{
		}
	}
	[Token(Token = "0x20002C9")]
	public class DigestRandomGenerator : IRandomGenerator
	{
		[Token(Token = "0x4000D5A")]
		private const long CYCLE_COUNT = 10L;

		[Token(Token = "0x4000D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private long stateCounter;

		[Token(Token = "0x4000D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private long seedCounter;

		[Token(Token = "0x4000D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private IDigest digest;

		[Token(Token = "0x4000D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private byte[] state;

		[Token(Token = "0x4000D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private byte[] seed;

		[Token(Token = "0x600190C")]
		[Address(RVA = "0xF7A390", Offset = "0xF7A390", VA = "0xF7A390")]
		public DigestRandomGenerator(IDigest digest)
		{
		}

		[Token(Token = "0x600190D")]
		[Address(RVA = "0xF7A504", Offset = "0xF7A504", VA = "0xF7A504", Slot = "4")]
		public void AddSeedMaterial(byte[] inSeed)
		{
		}

		[Token(Token = "0x600190E")]
		[Address(RVA = "0xF7A74C", Offset = "0xF7A74C", VA = "0xF7A74C", Slot = "5")]
		public void AddSeedMaterial(long rSeed)
		{
		}

		[Token(Token = "0x600190F")]
		[Address(RVA = "0xF7A8DC", Offset = "0xF7A8DC", VA = "0xF7A8DC", Slot = "6")]
		public void NextBytes(byte[] bytes)
		{
		}

		[Token(Token = "0x6001910")]
		[Address(RVA = "0xF7A8F8", Offset = "0xF7A8F8", VA = "0xF7A8F8", Slot = "7")]
		public void NextBytes(byte[] bytes, int start, int len)
		{
		}

		[Token(Token = "0x6001911")]
		[Address(RVA = "0xF7AAD4", Offset = "0xF7AAD4", VA = "0xF7AAD4")]
		private void CycleSeed()
		{
		}

		[Token(Token = "0x6001912")]
		[Address(RVA = "0xF7AA50", Offset = "0xF7AA50", VA = "0xF7AA50")]
		private void GenerateState()
		{
		}

		[Token(Token = "0x6001913")]
		[Address(RVA = "0xF7A7F8", Offset = "0xF7A7F8", VA = "0xF7A7F8")]
		private void DigestAddCounter(long seedVal)
		{
		}

		[Token(Token = "0x6001914")]
		[Address(RVA = "0xF7A5B0", Offset = "0xF7A5B0", VA = "0xF7A5B0")]
		private void DigestUpdate(byte[] inSeed)
		{
		}

		[Token(Token = "0x6001915")]
		[Address(RVA = "0xF7A684", Offset = "0xF7A684", VA = "0xF7A684")]
		private void DigestDoFinal(byte[] result)
		{
		}
	}
	[Token(Token = "0x20002CA")]
	public interface IRandomGenerator
	{
		[Token(Token = "0x6001916")]
		void AddSeedMaterial(byte[] seed);

		[Token(Token = "0x6001917")]
		void AddSeedMaterial(long seed);

		[Token(Token = "0x6001918")]
		void NextBytes(byte[] bytes);

		[Token(Token = "0x6001919")]
		void NextBytes(byte[] bytes, int start, int len);
	}
}
namespace Org.BouncyCastle.Crypto.Parameters
{
	[Token(Token = "0x20002CB")]
	public class AeadParameters : ICipherParameters
	{
		[Token(Token = "0x4000D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly byte[] associatedText;

		[Token(Token = "0x4000D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly byte[] nonce;

		[Token(Token = "0x4000D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly KeyParameter key;

		[Token(Token = "0x4000D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly int macSize;

		[Token(Token = "0x170002E9")]
		public virtual KeyParameter Key
		{
			[Token(Token = "0x600191C")]
			[Address(RVA = "0xF73C88", Offset = "0xF73C88", VA = "0xF73C88", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002EA")]
		public virtual int MacSize
		{
			[Token(Token = "0x600191D")]
			[Address(RVA = "0xF73C90", Offset = "0xF73C90", VA = "0xF73C90", Slot = "5")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600191A")]
		[Address(RVA = "0xF73BF4", Offset = "0xF73BF4", VA = "0xF73BF4")]
		public AeadParameters(KeyParameter key, int macSize, byte[] nonce)
		{
		}

		[Token(Token = "0x600191B")]
		[Address(RVA = "0xF73C38", Offset = "0xF73C38", VA = "0xF73C38")]
		public AeadParameters(KeyParameter key, int macSize, byte[] nonce, byte[] associatedText)
		{
		}

		[Token(Token = "0x600191E")]
		[Address(RVA = "0xF73C98", Offset = "0xF73C98", VA = "0xF73C98", Slot = "6")]
		public virtual byte[] GetAssociatedText()
		{
			return null;
		}

		[Token(Token = "0x600191F")]
		[Address(RVA = "0xF73CA0", Offset = "0xF73CA0", VA = "0xF73CA0", Slot = "7")]
		public virtual byte[] GetNonce()
		{
			return null;
		}
	}
	[Token(Token = "0x20002CC")]
	public class DHKeyGenerationParameters : KeyGenerationParameters
	{
		[Token(Token = "0x4000D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly DHParameters parameters;

		[Token(Token = "0x170002EB")]
		public DHParameters Parameters
		{
			[Token(Token = "0x6001921")]
			[Address(RVA = "0xF73D2C", Offset = "0xF73D2C", VA = "0xF73D2C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001920")]
		[Address(RVA = "0xF73CA8", Offset = "0xF73CA8", VA = "0xF73CA8")]
		public DHKeyGenerationParameters(SecureRandom random, DHParameters parameters)
		{
		}

		[Token(Token = "0x6001922")]
		[Address(RVA = "0xF73CF4", Offset = "0xF73CF4", VA = "0xF73CF4")]
		internal static int GetStrength(DHParameters parameters)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002CD")]
	public class DHKeyParameters : AsymmetricKeyParameter
	{
		[Token(Token = "0x4000D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly DHParameters parameters;

		[Token(Token = "0x4000D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly DerObjectIdentifier algorithmOid;

		[Token(Token = "0x170002EC")]
		public DHParameters Parameters
		{
			[Token(Token = "0x6001925")]
			[Address(RVA = "0xF73E00", Offset = "0xF73E00", VA = "0xF73E00")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002ED")]
		public DerObjectIdentifier AlgorithmOid
		{
			[Token(Token = "0x6001926")]
			[Address(RVA = "0xF73E08", Offset = "0xF73E08", VA = "0xF73E08")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001923")]
		[Address(RVA = "0xF73D34", Offset = "0xF73D34", VA = "0xF73D34")]
		protected DHKeyParameters(bool isPrivate, DHParameters parameters)
		{
		}

		[Token(Token = "0x6001924")]
		[Address(RVA = "0xF73DC4", Offset = "0xF73DC4", VA = "0xF73DC4")]
		protected DHKeyParameters(bool isPrivate, DHParameters parameters, DerObjectIdentifier algorithmOid)
		{
		}

		[Token(Token = "0x6001927")]
		[Address(RVA = "0xF73E10", Offset = "0xF73E10", VA = "0xF73E10", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001928")]
		[Address(RVA = "0xF73EC0", Offset = "0xF73EC0", VA = "0xF73EC0")]
		protected bool Equals(DHKeyParameters other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001929")]
		[Address(RVA = "0xF73F18", Offset = "0xF73F18", VA = "0xF73F18", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002CE")]
	public class DHParameters : ICipherParameters
	{
		[Token(Token = "0x4000D67")]
		private const int DefaultMinimumLength = 160;

		[Token(Token = "0x4000D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly BigInteger p;

		[Token(Token = "0x4000D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly BigInteger g;

		[Token(Token = "0x4000D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly BigInteger q;

		[Token(Token = "0x4000D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly BigInteger j;

		[Token(Token = "0x4000D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly int m;

		[Token(Token = "0x4000D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private readonly int l;

		[Token(Token = "0x4000D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly DHValidationParameters validation;

		[Token(Token = "0x170002EE")]
		public BigInteger P
		{
			[Token(Token = "0x6001931")]
			[Address(RVA = "0xF744D0", Offset = "0xF744D0", VA = "0xF744D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002EF")]
		public BigInteger G
		{
			[Token(Token = "0x6001932")]
			[Address(RVA = "0xF744D8", Offset = "0xF744D8", VA = "0xF744D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F0")]
		public BigInteger Q
		{
			[Token(Token = "0x6001933")]
			[Address(RVA = "0xF744E0", Offset = "0xF744E0", VA = "0xF744E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F1")]
		public BigInteger J
		{
			[Token(Token = "0x6001934")]
			[Address(RVA = "0xF744E8", Offset = "0xF744E8", VA = "0xF744E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F2")]
		public int M
		{
			[Token(Token = "0x6001935")]
			[Address(RVA = "0xF744F0", Offset = "0xF744F0", VA = "0xF744F0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002F3")]
		public int L
		{
			[Token(Token = "0x6001936")]
			[Address(RVA = "0xF744F8", Offset = "0xF744F8", VA = "0xF744F8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002F4")]
		public DHValidationParameters ValidationParameters
		{
			[Token(Token = "0x6001937")]
			[Address(RVA = "0xF74500", Offset = "0xF74500", VA = "0xF74500")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600192A")]
		[Address(RVA = "0xF73F60", Offset = "0xF73F60", VA = "0xF73F60")]
		private static int GetDefaultMParam(int lParam)
		{
			return default(int);
		}

		[Token(Token = "0x600192B")]
		[Address(RVA = "0xF73FE0", Offset = "0xF73FE0", VA = "0xF73FE0")]
		public DHParameters(BigInteger p, BigInteger g)
		{
		}

		[Token(Token = "0x600192C")]
		[Address(RVA = "0xF740CC", Offset = "0xF740CC", VA = "0xF740CC")]
		public DHParameters(BigInteger p, BigInteger g, BigInteger q)
		{
		}

		[Token(Token = "0x600192D")]
		[Address(RVA = "0xF7405C", Offset = "0xF7405C", VA = "0xF7405C")]
		public DHParameters(BigInteger p, BigInteger g, BigInteger q, int l)
		{
		}

		[Token(Token = "0x600192E")]
		[Address(RVA = "0xF74480", Offset = "0xF74480", VA = "0xF74480")]
		public DHParameters(BigInteger p, BigInteger g, BigInteger q, int m, int l)
		{
		}

		[Token(Token = "0x600192F")]
		[Address(RVA = "0xF744A4", Offset = "0xF744A4", VA = "0xF744A4")]
		public DHParameters(BigInteger p, BigInteger g, BigInteger q, BigInteger j, DHValidationParameters validation)
		{
		}

		[Token(Token = "0x6001930")]
		[Address(RVA = "0xF74154", Offset = "0xF74154", VA = "0xF74154")]
		public DHParameters(BigInteger p, BigInteger g, BigInteger q, int m, int l, BigInteger j, DHValidationParameters validation)
		{
		}

		[Token(Token = "0x6001938")]
		[Address(RVA = "0xF74508", Offset = "0xF74508", VA = "0xF74508", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001939")]
		[Address(RVA = "0xF745B8", Offset = "0xF745B8", VA = "0xF745B8")]
		protected bool Equals(DHParameters other)
		{
			return default(bool);
		}

		[Token(Token = "0x600193A")]
		[Address(RVA = "0xF74634", Offset = "0xF74634", VA = "0xF74634", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002CF")]
	public class DHPrivateKeyParameters : DHKeyParameters
	{
		[Token(Token = "0x4000D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly BigInteger x;

		[Token(Token = "0x170002F5")]
		public BigInteger X
		{
			[Token(Token = "0x600193D")]
			[Address(RVA = "0xF74718", Offset = "0xF74718", VA = "0xF74718")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600193B")]
		[Address(RVA = "0xF746A8", Offset = "0xF746A8", VA = "0xF746A8")]
		public DHPrivateKeyParameters(BigInteger x, DHParameters parameters)
		{
		}

		[Token(Token = "0x600193C")]
		[Address(RVA = "0xF746D4", Offset = "0xF746D4", VA = "0xF746D4")]
		public DHPrivateKeyParameters(BigInteger x, DHParameters parameters, DerObjectIdentifier algorithmOid)
		{
		}

		[Token(Token = "0x600193E")]
		[Address(RVA = "0xF74720", Offset = "0xF74720", VA = "0xF74720", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600193F")]
		[Address(RVA = "0xF747D0", Offset = "0xF747D0", VA = "0xF747D0")]
		protected bool Equals(DHPrivateKeyParameters other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001940")]
		[Address(RVA = "0xF7482C", Offset = "0xF7482C", VA = "0xF7482C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002D0")]
	public class DHPublicKeyParameters : DHKeyParameters
	{
		[Token(Token = "0x4000D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly BigInteger y;

		[Token(Token = "0x170002F6")]
		public BigInteger Y
		{
			[Token(Token = "0x6001943")]
			[Address(RVA = "0xF749C8", Offset = "0xF749C8", VA = "0xF749C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001941")]
		[Address(RVA = "0xF74870", Offset = "0xF74870", VA = "0xF74870")]
		public DHPublicKeyParameters(BigInteger y, DHParameters parameters)
		{
		}

		[Token(Token = "0x6001942")]
		[Address(RVA = "0xF74914", Offset = "0xF74914", VA = "0xF74914")]
		public DHPublicKeyParameters(BigInteger y, DHParameters parameters, DerObjectIdentifier algorithmOid)
		{
		}

		[Token(Token = "0x6001944")]
		[Address(RVA = "0xF749D0", Offset = "0xF749D0", VA = "0xF749D0", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001945")]
		[Address(RVA = "0xF74A80", Offset = "0xF74A80", VA = "0xF74A80")]
		protected bool Equals(DHPublicKeyParameters other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001946")]
		[Address(RVA = "0xF74ADC", Offset = "0xF74ADC", VA = "0xF74ADC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002D1")]
	public class DHValidationParameters
	{
		[Token(Token = "0x4000D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly byte[] seed;

		[Token(Token = "0x4000D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly int counter;

		[Token(Token = "0x170002F7")]
		public int Counter
		{
			[Token(Token = "0x6001949")]
			[Address(RVA = "0xF74C7C", Offset = "0xF74C7C", VA = "0xF74C7C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001947")]
		[Address(RVA = "0xF74B20", Offset = "0xF74B20", VA = "0xF74B20")]
		public DHValidationParameters(byte[] seed, int counter)
		{
		}

		[Token(Token = "0x6001948")]
		[Address(RVA = "0xF74BFC", Offset = "0xF74BFC", VA = "0xF74BFC")]
		public byte[] GetSeed()
		{
			return null;
		}

		[Token(Token = "0x600194A")]
		[Address(RVA = "0xF74C84", Offset = "0xF74C84", VA = "0xF74C84", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600194B")]
		[Address(RVA = "0xF74D34", Offset = "0xF74D34", VA = "0xF74D34")]
		protected bool Equals(DHValidationParameters other)
		{
			return default(bool);
		}

		[Token(Token = "0x600194C")]
		[Address(RVA = "0xF74D6C", Offset = "0xF74D6C", VA = "0xF74D6C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002D2")]
	public class DesEdeParameters : DesParameters
	{
		[Token(Token = "0x4000D73")]
		public const int DesEdeKeyLength = 24;

		[Token(Token = "0x600194D")]
		[Address(RVA = "0xF74DB4", Offset = "0xF74DB4", VA = "0xF74DB4")]
		private static byte[] FixKey(byte[] key, int keyOff, int keyLen)
		{
			return null;
		}

		[Token(Token = "0x600194E")]
		[Address(RVA = "0xF74F68", Offset = "0xF74F68", VA = "0xF74F68")]
		public DesEdeParameters(byte[] key)
		{
		}

		[Token(Token = "0x600194F")]
		[Address(RVA = "0xF750BC", Offset = "0xF750BC", VA = "0xF750BC")]
		public DesEdeParameters(byte[] key, int keyOff, int keyLen)
		{
		}

		[Token(Token = "0x6001950")]
		[Address(RVA = "0xF75158", Offset = "0xF75158", VA = "0xF75158")]
		public static bool IsWeakKey(byte[] key, int offset, int length)
		{
			return default(bool);
		}

		[Token(Token = "0x6001951")]
		[Address(RVA = "0xF7535C", Offset = "0xF7535C", VA = "0xF7535C")]
		public new static bool IsWeakKey(byte[] key, int offset)
		{
			return default(bool);
		}

		[Token(Token = "0x6001952")]
		[Address(RVA = "0xF74F4C", Offset = "0xF74F4C", VA = "0xF74F4C")]
		public new static bool IsWeakKey(byte[] key)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002D3")]
	public class DesParameters : KeyParameter
	{
		[Token(Token = "0x4000D74")]
		public const int DesKeyLength = 8;

		[Token(Token = "0x4000D75")]
		private const int N_DES_WEAK_KEYS = 16;

		[Token(Token = "0x4000D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly byte[] DES_weak_keys;

		[Token(Token = "0x6001953")]
		[Address(RVA = "0xF74FFC", Offset = "0xF74FFC", VA = "0xF74FFC")]
		public DesParameters(byte[] key)
		{
		}

		[Token(Token = "0x6001954")]
		[Address(RVA = "0xF754B4", Offset = "0xF754B4", VA = "0xF754B4")]
		public DesParameters(byte[] key, int keyOff, int keyLen)
		{
		}

		[Token(Token = "0x6001955")]
		[Address(RVA = "0xF751F8", Offset = "0xF751F8", VA = "0xF751F8")]
		public static bool IsWeakKey(byte[] key, int offset)
		{
			return default(bool);
		}

		[Token(Token = "0x6001956")]
		[Address(RVA = "0xF7544C", Offset = "0xF7544C", VA = "0xF7544C")]
		public static bool IsWeakKey(byte[] key)
		{
			return default(bool);
		}

		[Token(Token = "0x6001957")]
		[Address(RVA = "0xF756D0", Offset = "0xF756D0", VA = "0xF756D0")]
		public static void SetOddParity(byte[] bytes)
		{
		}
	}
	[Token(Token = "0x20002D4")]
	public class DsaKeyGenerationParameters : KeyGenerationParameters
	{
		[Token(Token = "0x4000D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly DsaParameters parameters;

		[Token(Token = "0x170002F8")]
		public DsaParameters Parameters
		{
			[Token(Token = "0x600195A")]
			[Address(RVA = "0xF75830", Offset = "0xF75830", VA = "0xF75830")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001959")]
		[Address(RVA = "0xF757D4", Offset = "0xF757D4", VA = "0xF757D4")]
		public DsaKeyGenerationParameters(SecureRandom random, DsaParameters parameters)
		{
		}
	}
	[Token(Token = "0x20002D5")]
	public abstract class DsaKeyParameters : AsymmetricKeyParameter
	{
		[Token(Token = "0x4000D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly DsaParameters parameters;

		[Token(Token = "0x170002F9")]
		public DsaParameters Parameters
		{
			[Token(Token = "0x600195C")]
			[Address(RVA = "0xF75868", Offset = "0xF75868", VA = "0xF75868")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600195B")]
		[Address(RVA = "0xF75838", Offset = "0xF75838", VA = "0xF75838")]
		protected DsaKeyParameters(bool isPrivate, DsaParameters parameters)
		{
		}

		[Token(Token = "0x600195D")]
		[Address(RVA = "0xF75870", Offset = "0xF75870", VA = "0xF75870", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600195E")]
		[Address(RVA = "0xF75920", Offset = "0xF75920", VA = "0xF75920")]
		protected bool Equals(DsaKeyParameters other)
		{
			return default(bool);
		}

		[Token(Token = "0x600195F")]
		[Address(RVA = "0xF75978", Offset = "0xF75978", VA = "0xF75978", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002D6")]
	public class DsaParameters : ICipherParameters
	{
		[Token(Token = "0x4000D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly BigInteger p;

		[Token(Token = "0x4000D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly BigInteger q;

		[Token(Token = "0x4000D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly BigInteger g;

		[Token(Token = "0x4000D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly DsaValidationParameters validation;

		[Token(Token = "0x170002FA")]
		public BigInteger P
		{
			[Token(Token = "0x6001962")]
			[Address(RVA = "0xF75ABC", Offset = "0xF75ABC", VA = "0xF75ABC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002FB")]
		public BigInteger Q
		{
			[Token(Token = "0x6001963")]
			[Address(RVA = "0xF75AC4", Offset = "0xF75AC4", VA = "0xF75AC4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002FC")]
		public BigInteger G
		{
			[Token(Token = "0x6001964")]
			[Address(RVA = "0xF75ACC", Offset = "0xF75ACC", VA = "0xF75ACC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002FD")]
		public DsaValidationParameters ValidationParameters
		{
			[Token(Token = "0x6001965")]
			[Address(RVA = "0xF75AD4", Offset = "0xF75AD4", VA = "0xF75AD4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001960")]
		[Address(RVA = "0xF759C0", Offset = "0xF759C0", VA = "0xF759C0")]
		public DsaParameters(BigInteger p, BigInteger q, BigInteger g)
		{
		}

		[Token(Token = "0x6001961")]
		[Address(RVA = "0xF759C8", Offset = "0xF759C8", VA = "0xF759C8")]
		public DsaParameters(BigInteger p, BigInteger q, BigInteger g, DsaValidationParameters parameters)
		{
		}

		[Token(Token = "0x6001966")]
		[Address(RVA = "0xF75ADC", Offset = "0xF75ADC", VA = "0xF75ADC", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001967")]
		[Address(RVA = "0xF75B8C", Offset = "0xF75B8C", VA = "0xF75B8C")]
		protected bool Equals(DsaParameters other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001968")]
		[Address(RVA = "0xF75C10", Offset = "0xF75C10", VA = "0xF75C10", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002D7")]
	public class DsaPrivateKeyParameters : DsaKeyParameters
	{
		[Token(Token = "0x4000D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly BigInteger x;

		[Token(Token = "0x170002FE")]
		public BigInteger X
		{
			[Token(Token = "0x600196A")]
			[Address(RVA = "0xF75D2C", Offset = "0xF75D2C", VA = "0xF75D2C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001969")]
		[Address(RVA = "0xF75C84", Offset = "0xF75C84", VA = "0xF75C84")]
		public DsaPrivateKeyParameters(BigInteger x, DsaParameters parameters)
		{
		}

		[Token(Token = "0x600196B")]
		[Address(RVA = "0xF75D34", Offset = "0xF75D34", VA = "0xF75D34", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600196C")]
		[Address(RVA = "0xF75DE4", Offset = "0xF75DE4", VA = "0xF75DE4")]
		protected bool Equals(DsaPrivateKeyParameters other)
		{
			return default(bool);
		}

		[Token(Token = "0x600196D")]
		[Address(RVA = "0xF75E40", Offset = "0xF75E40", VA = "0xF75E40", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002D8")]
	public class DsaPublicKeyParameters : DsaKeyParameters
	{
		[Token(Token = "0x4000D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly BigInteger y;

		[Token(Token = "0x170002FF")]
		public BigInteger Y
		{
			[Token(Token = "0x600196F")]
			[Address(RVA = "0xF75F2C", Offset = "0xF75F2C", VA = "0xF75F2C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600196E")]
		[Address(RVA = "0xF75E84", Offset = "0xF75E84", VA = "0xF75E84")]
		public DsaPublicKeyParameters(BigInteger y, DsaParameters parameters)
		{
		}

		[Token(Token = "0x6001970")]
		[Address(RVA = "0xF75F34", Offset = "0xF75F34", VA = "0xF75F34", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001971")]
		[Address(RVA = "0xF75FE4", Offset = "0xF75FE4", VA = "0xF75FE4")]
		protected bool Equals(DsaPublicKeyParameters other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001972")]
		[Address(RVA = "0xF76040", Offset = "0xF76040", VA = "0xF76040", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002D9")]
	public class DsaValidationParameters
	{
		[Token(Token = "0x4000D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly byte[] seed;

		[Token(Token = "0x4000D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly int counter;

		[Token(Token = "0x4000D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private readonly int usageIndex;

		[Token(Token = "0x17000300")]
		public virtual int Counter
		{
			[Token(Token = "0x6001976")]
			[Address(RVA = "0xF761F4", Offset = "0xF761F4", VA = "0xF761F4", Slot = "5")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000301")]
		public virtual int UsageIndex
		{
			[Token(Token = "0x6001977")]
			[Address(RVA = "0xF761FC", Offset = "0xF761FC", VA = "0xF761FC", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001973")]
		[Address(RVA = "0xF76084", Offset = "0xF76084", VA = "0xF76084")]
		public DsaValidationParameters(byte[] seed, int counter)
		{
		}

		[Token(Token = "0x6001974")]
		[Address(RVA = "0xF7608C", Offset = "0xF7608C", VA = "0xF7608C")]
		public DsaValidationParameters(byte[] seed, int counter, int usageIndex)
		{
		}

		[Token(Token = "0x6001975")]
		[Address(RVA = "0xF76174", Offset = "0xF76174", VA = "0xF76174", Slot = "4")]
		public virtual byte[] GetSeed()
		{
			return null;
		}

		[Token(Token = "0x6001978")]
		[Address(RVA = "0xF76204", Offset = "0xF76204", VA = "0xF76204", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001979")]
		[Address(RVA = "0xF762BC", Offset = "0xF762BC", VA = "0xF762BC", Slot = "7")]
		protected virtual bool Equals(DsaValidationParameters other)
		{
			return default(bool);
		}

		[Token(Token = "0x600197A")]
		[Address(RVA = "0xF762F4", Offset = "0xF762F4", VA = "0xF762F4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002DA")]
	public class ECDomainParameters
	{
		[Token(Token = "0x4000D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal ECCurve curve;

		[Token(Token = "0x4000D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal byte[] seed;

		[Token(Token = "0x4000D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal ECPoint g;

		[Token(Token = "0x4000D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal BigInteger n;

		[Token(Token = "0x4000D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal BigInteger h;

		[Token(Token = "0x17000302")]
		public ECCurve Curve
		{
			[Token(Token = "0x600197E")]
			[Address(RVA = "0xF76528", Offset = "0xF76528", VA = "0xF76528")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000303")]
		public ECPoint G
		{
			[Token(Token = "0x600197F")]
			[Address(RVA = "0xF76530", Offset = "0xF76530", VA = "0xF76530")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000304")]
		public BigInteger N
		{
			[Token(Token = "0x6001980")]
			[Address(RVA = "0xF76538", Offset = "0xF76538", VA = "0xF76538")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000305")]
		public BigInteger H
		{
			[Token(Token = "0x6001981")]
			[Address(RVA = "0xF76540", Offset = "0xF76540", VA = "0xF76540")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600197B")]
		[Address(RVA = "0xF7633C", Offset = "0xF7633C", VA = "0xF7633C")]
		public ECDomainParameters(ECCurve curve, ECPoint g, BigInteger n)
		{
		}

		[Token(Token = "0x600197C")]
		[Address(RVA = "0xF763D8", Offset = "0xF763D8", VA = "0xF763D8")]
		public ECDomainParameters(ECCurve curve, ECPoint g, BigInteger n, BigInteger h)
		{
		}

		[Token(Token = "0x600197D")]
		[Address(RVA = "0xF763E0", Offset = "0xF763E0", VA = "0xF763E0")]
		public ECDomainParameters(ECCurve curve, ECPoint g, BigInteger n, BigInteger h, byte[] seed)
		{
		}

		[Token(Token = "0x6001982")]
		[Address(RVA = "0xF76548", Offset = "0xF76548", VA = "0xF76548")]
		public byte[] GetSeed()
		{
			return null;
		}

		[Token(Token = "0x6001983")]
		[Address(RVA = "0xF76554", Offset = "0xF76554", VA = "0xF76554", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001984")]
		[Address(RVA = "0xF76604", Offset = "0xF76604", VA = "0xF76604")]
		protected bool Equals(ECDomainParameters other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001985")]
		[Address(RVA = "0xF766C0", Offset = "0xF766C0", VA = "0xF766C0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002DB")]
	public class ECKeyGenerationParameters : KeyGenerationParameters
	{
		[Token(Token = "0x4000D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ECDomainParameters domainParams;

		[Token(Token = "0x4000D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly DerObjectIdentifier publicKeyParamSet;

		[Token(Token = "0x17000306")]
		public ECDomainParameters DomainParameters
		{
			[Token(Token = "0x6001988")]
			[Address(RVA = "0xF769B8", Offset = "0xF769B8", VA = "0xF769B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000307")]
		public DerObjectIdentifier PublicKeyParamSet
		{
			[Token(Token = "0x6001989")]
			[Address(RVA = "0xF769C0", Offset = "0xF769C0", VA = "0xF769C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001986")]
		[Address(RVA = "0xF76774", Offset = "0xF76774", VA = "0xF76774")]
		public ECKeyGenerationParameters(ECDomainParameters domainParameters, SecureRandom random)
		{
		}

		[Token(Token = "0x6001987")]
		[Address(RVA = "0xF767D0", Offset = "0xF767D0", VA = "0xF767D0")]
		public ECKeyGenerationParameters(DerObjectIdentifier publicKeyParamSet, SecureRandom random)
		{
		}
	}
	[Token(Token = "0x20002DC")]
	public abstract class ECKeyParameters : AsymmetricKeyParameter
	{
		[Token(Token = "0x4000D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly string[] algorithms;

		[Token(Token = "0x4000D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly string algorithm;

		[Token(Token = "0x4000D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ECDomainParameters parameters;

		[Token(Token = "0x4000D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly DerObjectIdentifier publicKeyParamSet;

		[Token(Token = "0x17000308")]
		public string AlgorithmName
		{
			[Token(Token = "0x600198C")]
			[Address(RVA = "0xF76CF8", Offset = "0xF76CF8", VA = "0xF76CF8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000309")]
		public ECDomainParameters Parameters
		{
			[Token(Token = "0x600198D")]
			[Address(RVA = "0xF76D00", Offset = "0xF76D00", VA = "0xF76D00")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700030A")]
		public DerObjectIdentifier PublicKeyParamSet
		{
			[Token(Token = "0x600198E")]
			[Address(RVA = "0xF76D08", Offset = "0xF76D08", VA = "0xF76D08")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600198A")]
		[Address(RVA = "0xF769C8", Offset = "0xF769C8", VA = "0xF769C8")]
		protected ECKeyParameters(string algorithm, bool isPrivate, ECDomainParameters parameters)
		{
		}

		[Token(Token = "0x600198B")]
		[Address(RVA = "0xF76BF4", Offset = "0xF76BF4", VA = "0xF76BF4")]
		protected ECKeyParameters(string algorithm, bool isPrivate, DerObjectIdentifier publicKeyParamSet)
		{
		}

		[Token(Token = "0x600198F")]
		[Address(RVA = "0xF76D10", Offset = "0xF76D10", VA = "0xF76D10", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001990")]
		[Address(RVA = "0xF76DC8", Offset = "0xF76DC8", VA = "0xF76DC8")]
		protected bool Equals(ECKeyParameters other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001991")]
		[Address(RVA = "0xF76E28", Offset = "0xF76E28", VA = "0xF76E28", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001992")]
		[Address(RVA = "0xF76E70", Offset = "0xF76E70", VA = "0xF76E70")]
		internal ECKeyGenerationParameters CreateKeyGenerationParameters(SecureRandom random)
		{
			return null;
		}

		[Token(Token = "0x6001993")]
		[Address(RVA = "0xF76AC0", Offset = "0xF76AC0", VA = "0xF76AC0")]
		internal static string VerifyAlgorithmName(string algorithm)
		{
			return null;
		}

		[Token(Token = "0x6001994")]
		[Address(RVA = "0xF7685C", Offset = "0xF7685C", VA = "0xF7685C")]
		internal static ECDomainParameters LookupParameters(DerObjectIdentifier publicKeyParamSet)
		{
			return null;
		}
	}
	[Token(Token = "0x20002DD")]
	public class ECPrivateKeyParameters : ECKeyParameters
	{
		[Token(Token = "0x4000D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly BigInteger d;

		[Token(Token = "0x1700030B")]
		public BigInteger D
		{
			[Token(Token = "0x600199A")]
			[Address(RVA = "0xF773AC", Offset = "0xF773AC", VA = "0xF773AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001996")]
		[Address(RVA = "0xF770CC", Offset = "0xF770CC", VA = "0xF770CC")]
		public ECPrivateKeyParameters(BigInteger d, ECDomainParameters parameters)
		{
		}

		[Token(Token = "0x6001997")]
		[Address(RVA = "0xF77208", Offset = "0xF77208", VA = "0xF77208")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x8307A0", Offset = "0x8307A0")]
		public ECPrivateKeyParameters(BigInteger d, DerObjectIdentifier publicKeyParamSet)
		{
		}

		[Token(Token = "0x6001998")]
		[Address(RVA = "0xF77134", Offset = "0xF77134", VA = "0xF77134")]
		public ECPrivateKeyParameters(string algorithm, BigInteger d, ECDomainParameters parameters)
		{
		}

		[Token(Token = "0x6001999")]
		[Address(RVA = "0xF772D8", Offset = "0xF772D8", VA = "0xF772D8")]
		public ECPrivateKeyParameters(string algorithm, BigInteger d, DerObjectIdentifier publicKeyParamSet)
		{
		}

		[Token(Token = "0x600199B")]
		[Address(RVA = "0xF773B4", Offset = "0xF773B4", VA = "0xF773B4", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600199C")]
		[Address(RVA = "0xF77464", Offset = "0xF77464", VA = "0xF77464")]
		protected bool Equals(ECPrivateKeyParameters other)
		{
			return default(bool);
		}

		[Token(Token = "0x600199D")]
		[Address(RVA = "0xF774C0", Offset = "0xF774C0", VA = "0xF774C0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002DE")]
	public class ECPublicKeyParameters : ECKeyParameters
	{
		[Token(Token = "0x4000D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ECPoint q;

		[Token(Token = "0x1700030C")]
		public ECPoint Q
		{
			[Token(Token = "0x60019A2")]
			[Address(RVA = "0xF77820", Offset = "0xF77820", VA = "0xF77820")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600199E")]
		[Address(RVA = "0xF77504", Offset = "0xF77504", VA = "0xF77504")]
		public ECPublicKeyParameters(ECPoint q, ECDomainParameters parameters)
		{
		}

		[Token(Token = "0x600199F")]
		[Address(RVA = "0xF77654", Offset = "0xF77654", VA = "0xF77654")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x8307D8", Offset = "0x8307D8")]
		public ECPublicKeyParameters(ECPoint q, DerObjectIdentifier publicKeyParamSet)
		{
		}

		[Token(Token = "0x60019A0")]
		[Address(RVA = "0xF7756C", Offset = "0xF7756C", VA = "0xF7756C")]
		public ECPublicKeyParameters(string algorithm, ECPoint q, ECDomainParameters parameters)
		{
		}

		[Token(Token = "0x60019A1")]
		[Address(RVA = "0xF77738", Offset = "0xF77738", VA = "0xF77738")]
		public ECPublicKeyParameters(string algorithm, ECPoint q, DerObjectIdentifier publicKeyParamSet)
		{
		}

		[Token(Token = "0x60019A3")]
		[Address(RVA = "0xF77828", Offset = "0xF77828", VA = "0xF77828", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60019A4")]
		[Address(RVA = "0xF778D8", Offset = "0xF778D8", VA = "0xF778D8")]
		protected bool Equals(ECPublicKeyParameters other)
		{
			return default(bool);
		}

		[Token(Token = "0x60019A5")]
		[Address(RVA = "0xF77938", Offset = "0xF77938", VA = "0xF77938", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002DF")]
	public class ElGamalKeyGenerationParameters : KeyGenerationParameters
	{
		[Token(Token = "0x4000D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ElGamalParameters parameters;

		[Token(Token = "0x1700030D")]
		public ElGamalParameters Parameters
		{
			[Token(Token = "0x60019A7")]
			[Address(RVA = "0xF77A00", Offset = "0xF77A00", VA = "0xF77A00")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019A6")]
		[Address(RVA = "0xF7797C", Offset = "0xF7797C", VA = "0xF7797C")]
		public ElGamalKeyGenerationParameters(SecureRandom random, ElGamalParameters parameters)
		{
		}

		[Token(Token = "0x60019A8")]
		[Address(RVA = "0xF779C8", Offset = "0xF779C8", VA = "0xF779C8")]
		internal static int GetStrength(ElGamalParameters parameters)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002E0")]
	public class ElGamalKeyParameters : AsymmetricKeyParameter
	{
		[Token(Token = "0x4000D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ElGamalParameters parameters;

		[Token(Token = "0x1700030E")]
		public ElGamalParameters Parameters
		{
			[Token(Token = "0x60019AA")]
			[Address(RVA = "0xF77A38", Offset = "0xF77A38", VA = "0xF77A38")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019A9")]
		[Address(RVA = "0xF77A08", Offset = "0xF77A08", VA = "0xF77A08")]
		protected ElGamalKeyParameters(bool isPrivate, ElGamalParameters parameters)
		{
		}

		[Token(Token = "0x60019AB")]
		[Address(RVA = "0xF77A40", Offset = "0xF77A40", VA = "0xF77A40", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60019AC")]
		[Address(RVA = "0xF77AF0", Offset = "0xF77AF0", VA = "0xF77AF0")]
		protected bool Equals(ElGamalKeyParameters other)
		{
			return default(bool);
		}

		[Token(Token = "0x60019AD")]
		[Address(RVA = "0xF77B48", Offset = "0xF77B48", VA = "0xF77B48", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002E1")]
	public class ElGamalParameters : ICipherParameters
	{
		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly BigInteger p;

		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly BigInteger g;

		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly int l;

		[Token(Token = "0x1700030F")]
		public BigInteger P
		{
			[Token(Token = "0x60019B0")]
			[Address(RVA = "0xF77C68", Offset = "0xF77C68", VA = "0xF77C68")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000310")]
		public BigInteger G
		{
			[Token(Token = "0x60019B1")]
			[Address(RVA = "0xF77C70", Offset = "0xF77C70", VA = "0xF77C70")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000311")]
		public int L
		{
			[Token(Token = "0x60019B2")]
			[Address(RVA = "0xF77C78", Offset = "0xF77C78", VA = "0xF77C78")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60019AE")]
		[Address(RVA = "0xF77B90", Offset = "0xF77B90", VA = "0xF77B90")]
		public ElGamalParameters(BigInteger p, BigInteger g)
		{
		}

		[Token(Token = "0x60019AF")]
		[Address(RVA = "0xF77B98", Offset = "0xF77B98", VA = "0xF77B98")]
		public ElGamalParameters(BigInteger p, BigInteger g, int l)
		{
		}

		[Token(Token = "0x60019B3")]
		[Address(RVA = "0xF77C80", Offset = "0xF77C80", VA = "0xF77C80", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60019B4")]
		[Address(RVA = "0xF77D30", Offset = "0xF77D30", VA = "0xF77D30")]
		protected bool Equals(ElGamalParameters other)
		{
			return default(bool);
		}

		[Token(Token = "0x60019B5")]
		[Address(RVA = "0xF77DA8", Offset = "0xF77DA8", VA = "0xF77DA8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002E2")]
	public class ElGamalPrivateKeyParameters : ElGamalKeyParameters
	{
		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly BigInteger x;

		[Token(Token = "0x17000312")]
		public BigInteger X
		{
			[Token(Token = "0x60019B7")]
			[Address(RVA = "0xF77EAC", Offset = "0xF77EAC", VA = "0xF77EAC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019B6")]
		[Address(RVA = "0xF77E04", Offset = "0xF77E04", VA = "0xF77E04")]
		public ElGamalPrivateKeyParameters(BigInteger x, ElGamalParameters parameters)
		{
		}

		[Token(Token = "0x60019B8")]
		[Address(RVA = "0xF77EB4", Offset = "0xF77EB4", VA = "0xF77EB4", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60019B9")]
		[Address(RVA = "0xF77F64", Offset = "0xF77F64", VA = "0xF77F64")]
		protected bool Equals(ElGamalPrivateKeyParameters other)
		{
			return default(bool);
		}

		[Token(Token = "0x60019BA")]
		[Address(RVA = "0xF77FC0", Offset = "0xF77FC0", VA = "0xF77FC0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002E3")]
	public class ElGamalPublicKeyParameters : ElGamalKeyParameters
	{
		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly BigInteger y;

		[Token(Token = "0x17000313")]
		public BigInteger Y
		{
			[Token(Token = "0x60019BC")]
			[Address(RVA = "0xF780AC", Offset = "0xF780AC", VA = "0xF780AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019BB")]
		[Address(RVA = "0xF78004", Offset = "0xF78004", VA = "0xF78004")]
		public ElGamalPublicKeyParameters(BigInteger y, ElGamalParameters parameters)
		{
		}

		[Token(Token = "0x60019BD")]
		[Address(RVA = "0xF780B4", Offset = "0xF780B4", VA = "0xF780B4", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60019BE")]
		[Address(RVA = "0xF78164", Offset = "0xF78164", VA = "0xF78164")]
		protected bool Equals(ElGamalPublicKeyParameters other)
		{
			return default(bool);
		}

		[Token(Token = "0x60019BF")]
		[Address(RVA = "0xF781C0", Offset = "0xF781C0", VA = "0xF781C0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002E4")]
	public abstract class Gost3410KeyParameters : AsymmetricKeyParameter
	{
		[Token(Token = "0x4000D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Gost3410Parameters parameters;

		[Token(Token = "0x4000D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly DerObjectIdentifier publicKeyParamSet;

		[Token(Token = "0x17000314")]
		public Gost3410Parameters Parameters
		{
			[Token(Token = "0x60019C2")]
			[Address(RVA = "0xF783BC", Offset = "0xF783BC", VA = "0xF783BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000315")]
		public DerObjectIdentifier PublicKeyParamSet
		{
			[Token(Token = "0x60019C3")]
			[Address(RVA = "0xF783C4", Offset = "0xF783C4", VA = "0xF783C4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019C0")]
		[Address(RVA = "0xF78204", Offset = "0xF78204", VA = "0xF78204")]
		protected Gost3410KeyParameters(bool isPrivate, Gost3410Parameters parameters)
		{
		}

		[Token(Token = "0x60019C1")]
		[Address(RVA = "0xF78234", Offset = "0xF78234", VA = "0xF78234")]
		protected Gost3410KeyParameters(bool isPrivate, DerObjectIdentifier publicKeyParamSet)
		{
		}

		[Token(Token = "0x60019C4")]
		[Address(RVA = "0xF7826C", Offset = "0xF7826C", VA = "0xF7826C")]
		private static Gost3410Parameters LookupParameters(DerObjectIdentifier publicKeyParamSet)
		{
			return null;
		}
	}
	[Token(Token = "0x20002E5")]
	public class Gost3410Parameters : ICipherParameters
	{
		[Token(Token = "0x4000D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly BigInteger p;

		[Token(Token = "0x4000D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly BigInteger q;

		[Token(Token = "0x4000D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly BigInteger a;

		[Token(Token = "0x4000D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly Gost3410ValidationParameters validation;

		[Token(Token = "0x17000316")]
		public BigInteger P
		{
			[Token(Token = "0x60019C7")]
			[Address(RVA = "0xF784C8", Offset = "0xF784C8", VA = "0xF784C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000317")]
		public BigInteger Q
		{
			[Token(Token = "0x60019C8")]
			[Address(RVA = "0xF784D0", Offset = "0xF784D0", VA = "0xF784D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000318")]
		public BigInteger A
		{
			[Token(Token = "0x60019C9")]
			[Address(RVA = "0xF784D8", Offset = "0xF784D8", VA = "0xF784D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000319")]
		public Gost3410ValidationParameters ValidationParameters
		{
			[Token(Token = "0x60019CA")]
			[Address(RVA = "0xF784E0", Offset = "0xF784E0", VA = "0xF784E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019C5")]
		[Address(RVA = "0xF783CC", Offset = "0xF783CC", VA = "0xF783CC")]
		public Gost3410Parameters(BigInteger p, BigInteger q, BigInteger a)
		{
		}

		[Token(Token = "0x60019C6")]
		[Address(RVA = "0xF783D4", Offset = "0xF783D4", VA = "0xF783D4")]
		public Gost3410Parameters(BigInteger p, BigInteger q, BigInteger a, Gost3410ValidationParameters validation)
		{
		}

		[Token(Token = "0x60019CB")]
		[Address(RVA = "0xF784E8", Offset = "0xF784E8", VA = "0xF784E8", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60019CC")]
		[Address(RVA = "0xF78598", Offset = "0xF78598", VA = "0xF78598")]
		protected bool Equals(Gost3410Parameters other)
		{
			return default(bool);
		}

		[Token(Token = "0x60019CD")]
		[Address(RVA = "0xF7861C", Offset = "0xF7861C", VA = "0xF7861C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002E6")]
	public class Gost3410PrivateKeyParameters : Gost3410KeyParameters
	{
		[Token(Token = "0x4000D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly BigInteger x;

		[Token(Token = "0x1700031A")]
		public BigInteger X
		{
			[Token(Token = "0x60019D0")]
			[Address(RVA = "0xF78880", Offset = "0xF78880", VA = "0xF78880")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019CE")]
		[Address(RVA = "0xF78690", Offset = "0xF78690", VA = "0xF78690")]
		public Gost3410PrivateKeyParameters(BigInteger x, Gost3410Parameters parameters)
		{
		}

		[Token(Token = "0x60019CF")]
		[Address(RVA = "0xF78784", Offset = "0xF78784", VA = "0xF78784")]
		public Gost3410PrivateKeyParameters(BigInteger x, DerObjectIdentifier publicKeyParamSet)
		{
		}
	}
	[Token(Token = "0x20002E7")]
	public class Gost3410PublicKeyParameters : Gost3410KeyParameters
	{
		[Token(Token = "0x4000D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly BigInteger y;

		[Token(Token = "0x1700031B")]
		public BigInteger Y
		{
			[Token(Token = "0x60019D3")]
			[Address(RVA = "0xF78A48", Offset = "0xF78A48", VA = "0xF78A48")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019D1")]
		[Address(RVA = "0xF78888", Offset = "0xF78888", VA = "0xF78888")]
		public Gost3410PublicKeyParameters(BigInteger y, Gost3410Parameters parameters)
		{
		}

		[Token(Token = "0x60019D2")]
		[Address(RVA = "0xF78964", Offset = "0xF78964", VA = "0xF78964")]
		public Gost3410PublicKeyParameters(BigInteger y, DerObjectIdentifier publicKeyParamSet)
		{
		}
	}
	[Token(Token = "0x20002E8")]
	public class Gost3410ValidationParameters
	{
		[Token(Token = "0x4000D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int x0;

		[Token(Token = "0x4000D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int c;

		[Token(Token = "0x4000DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private long x0L;

		[Token(Token = "0x4000DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private long cL;

		[Token(Token = "0x1700031C")]
		public int C
		{
			[Token(Token = "0x60019D6")]
			[Address(RVA = "0xF78AC0", Offset = "0xF78AC0", VA = "0xF78AC0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700031D")]
		public int X0
		{
			[Token(Token = "0x60019D7")]
			[Address(RVA = "0xF78AC8", Offset = "0xF78AC8", VA = "0xF78AC8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700031E")]
		public long CL
		{
			[Token(Token = "0x60019D8")]
			[Address(RVA = "0xF78AD0", Offset = "0xF78AD0", VA = "0xF78AD0")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x1700031F")]
		public long X0L
		{
			[Token(Token = "0x60019D9")]
			[Address(RVA = "0xF78AD8", Offset = "0xF78AD8", VA = "0xF78AD8")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x60019D4")]
		[Address(RVA = "0xF78A50", Offset = "0xF78A50", VA = "0xF78A50")]
		public Gost3410ValidationParameters(int x0, int c)
		{
		}

		[Token(Token = "0x60019D5")]
		[Address(RVA = "0xF78A88", Offset = "0xF78A88", VA = "0xF78A88")]
		public Gost3410ValidationParameters(long x0L, long cL)
		{
		}

		[Token(Token = "0x60019DA")]
		[Address(RVA = "0xF78AE0", Offset = "0xF78AE0", VA = "0xF78AE0", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60019DB")]
		[Address(RVA = "0xF78BB8", Offset = "0xF78BB8", VA = "0xF78BB8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002E9")]
	public class Iso18033KdfParameters : IDerivationParameters
	{
		[Token(Token = "0x4000DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private byte[] seed;

		[Token(Token = "0x60019DC")]
		[Address(RVA = "0xF78CD0", Offset = "0xF78CD0", VA = "0xF78CD0")]
		public Iso18033KdfParameters(byte[] seed)
		{
		}

		[Token(Token = "0x60019DD")]
		[Address(RVA = "0xF78CFC", Offset = "0xF78CFC", VA = "0xF78CFC")]
		public byte[] GetSeed()
		{
			return null;
		}
	}
	[Token(Token = "0x20002EA")]
	public class IesParameters : ICipherParameters
	{
		[Token(Token = "0x4000DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private byte[] derivation;

		[Token(Token = "0x4000DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private byte[] encoding;

		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int macKeySize;

		[Token(Token = "0x17000320")]
		public int MacKeySize
		{
			[Token(Token = "0x60019E1")]
			[Address(RVA = "0xF78C74", Offset = "0xF78C74", VA = "0xF78C74")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60019DE")]
		[Address(RVA = "0xF78C24", Offset = "0xF78C24", VA = "0xF78C24")]
		public IesParameters(byte[] derivation, byte[] encoding, int macKeySize)
		{
		}

		[Token(Token = "0x60019DF")]
		[Address(RVA = "0xF78C64", Offset = "0xF78C64", VA = "0xF78C64")]
		public byte[] GetDerivationV()
		{
			return null;
		}

		[Token(Token = "0x60019E0")]
		[Address(RVA = "0xF78C6C", Offset = "0xF78C6C", VA = "0xF78C6C")]
		public byte[] GetEncodingV()
		{
			return null;
		}
	}
	[Token(Token = "0x20002EB")]
	public class IesWithCipherParameters : IesParameters
	{
		[Token(Token = "0x4000DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int cipherKeySize;

		[Token(Token = "0x17000321")]
		public int CipherKeySize
		{
			[Token(Token = "0x60019E3")]
			[Address(RVA = "0xF78CC8", Offset = "0xF78CC8", VA = "0xF78CC8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60019E2")]
		[Address(RVA = "0xF78C7C", Offset = "0xF78C7C", VA = "0xF78C7C")]
		public IesWithCipherParameters(byte[] derivation, byte[] encoding, int macKeySize, int cipherKeySize)
		{
		}
	}
	[Token(Token = "0x20002EC")]
	public class KdfParameters : IDerivationParameters
	{
		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private byte[] iv;

		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private byte[] shared;

		[Token(Token = "0x60019E4")]
		[Address(RVA = "0xF78D04", Offset = "0xF78D04", VA = "0xF78D04")]
		public KdfParameters(byte[] shared, byte[] iv)
		{
		}

		[Token(Token = "0x60019E5")]
		[Address(RVA = "0xF78D3C", Offset = "0xF78D3C", VA = "0xF78D3C")]
		public byte[] GetSharedSecret()
		{
			return null;
		}

		[Token(Token = "0x60019E6")]
		[Address(RVA = "0xF78D44", Offset = "0xF78D44", VA = "0xF78D44")]
		public byte[] GetIV()
		{
			return null;
		}
	}
	[Token(Token = "0x20002ED")]
	public class KeyParameter : ICipherParameters
	{
		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly byte[] key;

		[Token(Token = "0x60019E7")]
		[Address(RVA = "0xF75378", Offset = "0xF75378", VA = "0xF75378")]
		public KeyParameter(byte[] key)
		{
		}

		[Token(Token = "0x60019E8")]
		[Address(RVA = "0xF75590", Offset = "0xF75590", VA = "0xF75590")]
		public KeyParameter(byte[] key, int keyOff, int keyLen)
		{
		}

		[Token(Token = "0x60019E9")]
		[Address(RVA = "0xF78D4C", Offset = "0xF78D4C", VA = "0xF78D4C")]
		public byte[] GetKey()
		{
			return null;
		}
	}
	[Token(Token = "0x20002EE")]
	public class MqvPrivateParameters : ICipherParameters
	{
		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ECPrivateKeyParameters staticPrivateKey;

		[Token(Token = "0x4000DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ECPrivateKeyParameters ephemeralPrivateKey;

		[Token(Token = "0x4000DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ECPublicKeyParameters ephemeralPublicKey;

		[Token(Token = "0x17000322")]
		public ECPrivateKeyParameters StaticPrivateKey
		{
			[Token(Token = "0x60019EC")]
			[Address(RVA = "0xF78E48", Offset = "0xF78E48", VA = "0xF78E48")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000323")]
		public ECPrivateKeyParameters EphemeralPrivateKey
		{
			[Token(Token = "0x60019ED")]
			[Address(RVA = "0xF78E50", Offset = "0xF78E50", VA = "0xF78E50")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000324")]
		public ECPublicKeyParameters EphemeralPublicKey
		{
			[Token(Token = "0x60019EE")]
			[Address(RVA = "0xF78E58", Offset = "0xF78E58", VA = "0xF78E58")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019EA")]
		[Address(RVA = "0xF78DCC", Offset = "0xF78DCC", VA = "0xF78DCC")]
		public MqvPrivateParameters(ECPrivateKeyParameters staticPrivateKey, ECPrivateKeyParameters ephemeralPrivateKey)
		{
		}

		[Token(Token = "0x60019EB")]
		[Address(RVA = "0xF78E08", Offset = "0xF78E08", VA = "0xF78E08")]
		public MqvPrivateParameters(ECPrivateKeyParameters staticPrivateKey, ECPrivateKeyParameters ephemeralPrivateKey, ECPublicKeyParameters ephemeralPublicKey)
		{
		}
	}
	[Token(Token = "0x20002EF")]
	public class MqvPublicParameters : ICipherParameters
	{
		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ECPublicKeyParameters staticPublicKey;

		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ECPublicKeyParameters ephemeralPublicKey;

		[Token(Token = "0x17000325")]
		public ECPublicKeyParameters StaticPublicKey
		{
			[Token(Token = "0x60019F0")]
			[Address(RVA = "0xF78E98", Offset = "0xF78E98", VA = "0xF78E98")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000326")]
		public ECPublicKeyParameters EphemeralPublicKey
		{
			[Token(Token = "0x60019F1")]
			[Address(RVA = "0xF78EA0", Offset = "0xF78EA0", VA = "0xF78EA0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019EF")]
		[Address(RVA = "0xF78E60", Offset = "0xF78E60", VA = "0xF78E60")]
		public MqvPublicParameters(ECPublicKeyParameters staticPublicKey, ECPublicKeyParameters ephemeralPublicKey)
		{
		}
	}
	[Token(Token = "0x20002F0")]
	public class ParametersWithIV : ICipherParameters
	{
		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ICipherParameters parameters;

		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly byte[] iv;

		[Token(Token = "0x17000327")]
		public ICipherParameters Parameters
		{
			[Token(Token = "0x60019F5")]
			[Address(RVA = "0xF78FA4", Offset = "0xF78FA4", VA = "0xF78FA4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019F2")]
		[Address(RVA = "0xF78EA8", Offset = "0xF78EA8", VA = "0xF78EA8")]
		public ParametersWithIV(ICipherParameters parameters, byte[] iv)
		{
		}

		[Token(Token = "0x60019F3")]
		[Address(RVA = "0xF78EC4", Offset = "0xF78EC4", VA = "0xF78EC4")]
		public ParametersWithIV(ICipherParameters parameters, byte[] iv, int ivOff, int ivLen)
		{
		}

		[Token(Token = "0x60019F4")]
		[Address(RVA = "0xF6F05C", Offset = "0xF6F05C", VA = "0xF6F05C")]
		public byte[] GetIV()
		{
			return null;
		}
	}
	[Token(Token = "0x20002F1")]
	public class ParametersWithRandom : ICipherParameters
	{
		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ICipherParameters parameters;

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly SecureRandom random;

		[Token(Token = "0x17000328")]
		public SecureRandom Random
		{
			[Token(Token = "0x60019F9")]
			[Address(RVA = "0xF790CC", Offset = "0xF790CC", VA = "0xF790CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000329")]
		public ICipherParameters Parameters
		{
			[Token(Token = "0x60019FA")]
			[Address(RVA = "0xF790D4", Offset = "0xF790D4", VA = "0xF790D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019F6")]
		[Address(RVA = "0xF78FAC", Offset = "0xF78FAC", VA = "0xF78FAC")]
		public ParametersWithRandom(ICipherParameters parameters, SecureRandom random)
		{
		}

		[Token(Token = "0x60019F7")]
		[Address(RVA = "0xF79050", Offset = "0xF79050", VA = "0xF79050")]
		public ParametersWithRandom(ICipherParameters parameters)
		{
		}

		[Token(Token = "0x60019F8")]
		[Address(RVA = "0xF790C4", Offset = "0xF790C4", VA = "0xF790C4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x830810", Offset = "0x830810")]
		public SecureRandom GetRandom()
		{
			return null;
		}
	}
	[Token(Token = "0x20002F2")]
	public class ParametersWithSBox : ICipherParameters
	{
		[Token(Token = "0x4000DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ICipherParameters parameters;

		[Token(Token = "0x4000DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private byte[] sBox;

		[Token(Token = "0x1700032A")]
		public ICipherParameters Parameters
		{
			[Token(Token = "0x60019FD")]
			[Address(RVA = "0xF7911C", Offset = "0xF7911C", VA = "0xF7911C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019FB")]
		[Address(RVA = "0xF790DC", Offset = "0xF790DC", VA = "0xF790DC")]
		public ParametersWithSBox(ICipherParameters parameters, byte[] sBox)
		{
		}

		[Token(Token = "0x60019FC")]
		[Address(RVA = "0xF79114", Offset = "0xF79114", VA = "0xF79114")]
		public byte[] GetSBox()
		{
			return null;
		}
	}
	[Token(Token = "0x20002F3")]
	public class ParametersWithSalt : ICipherParameters
	{
		[Token(Token = "0x4000DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private byte[] salt;

		[Token(Token = "0x4000DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ICipherParameters parameters;

		[Token(Token = "0x1700032B")]
		public ICipherParameters Parameters
		{
			[Token(Token = "0x6001A01")]
			[Address(RVA = "0xF791E4", Offset = "0xF791E4", VA = "0xF791E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019FE")]
		[Address(RVA = "0xF79124", Offset = "0xF79124", VA = "0xF79124")]
		public ParametersWithSalt(ICipherParameters parameters, byte[] salt)
		{
		}

		[Token(Token = "0x60019FF")]
		[Address(RVA = "0xF79140", Offset = "0xF79140", VA = "0xF79140")]
		public ParametersWithSalt(ICipherParameters parameters, byte[] salt, int saltOff, int saltLen)
		{
		}

		[Token(Token = "0x6001A00")]
		[Address(RVA = "0xF791DC", Offset = "0xF791DC", VA = "0xF791DC")]
		public byte[] GetSalt()
		{
			return null;
		}
	}
	[Token(Token = "0x20002F4")]
	public class RC2Parameters : KeyParameter
	{
		[Token(Token = "0x4000DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly int bits;

		[Token(Token = "0x1700032C")]
		public int EffectiveKeyBits
		{
			[Token(Token = "0x6001A06")]
			[Address(RVA = "0xF792C0", Offset = "0xF792C0", VA = "0xF792C0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001A02")]
		[Address(RVA = "0xF791EC", Offset = "0xF791EC", VA = "0xF791EC")]
		public RC2Parameters(byte[] key)
		{
		}

		[Token(Token = "0x6001A03")]
		[Address(RVA = "0xF7925C", Offset = "0xF7925C", VA = "0xF7925C")]
		public RC2Parameters(byte[] key, int keyOff, int keyLen)
		{
		}

		[Token(Token = "0x6001A04")]
		[Address(RVA = "0xF79234", Offset = "0xF79234", VA = "0xF79234")]
		public RC2Parameters(byte[] key, int bits)
		{
		}

		[Token(Token = "0x6001A05")]
		[Address(RVA = "0xF79298", Offset = "0xF79298", VA = "0xF79298")]
		public RC2Parameters(byte[] key, int keyOff, int keyLen, int bits)
		{
		}
	}
	[Token(Token = "0x20002F5")]
	public class RC5Parameters : KeyParameter
	{
		[Token(Token = "0x4000DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly int rounds;

		[Token(Token = "0x1700032D")]
		public int Rounds
		{
			[Token(Token = "0x6001A08")]
			[Address(RVA = "0xF79378", Offset = "0xF79378", VA = "0xF79378")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001A07")]
		[Address(RVA = "0xF792C8", Offset = "0xF792C8", VA = "0xF792C8")]
		public RC5Parameters(byte[] key, int rounds)
		{
		}
	}
	[Token(Token = "0x20002F6")]
	public class RsaBlindingParameters : ICipherParameters
	{
		[Token(Token = "0x4000DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly RsaKeyParameters publicKey;

		[Token(Token = "0x4000DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly BigInteger blindingFactor;

		[Token(Token = "0x1700032E")]
		public RsaKeyParameters PublicKey
		{
			[Token(Token = "0x6001A0A")]
			[Address(RVA = "0xF7942C", Offset = "0xF7942C", VA = "0xF7942C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700032F")]
		public BigInteger BlindingFactor
		{
			[Token(Token = "0x6001A0B")]
			[Address(RVA = "0xF79434", Offset = "0xF79434", VA = "0xF79434")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A09")]
		[Address(RVA = "0xF79380", Offset = "0xF79380", VA = "0xF79380")]
		public RsaBlindingParameters(RsaKeyParameters publicKey, BigInteger blindingFactor)
		{
		}
	}
	[Token(Token = "0x20002F7")]
	public class RsaKeyGenerationParameters : KeyGenerationParameters
	{
		[Token(Token = "0x4000DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly BigInteger publicExponent;

		[Token(Token = "0x4000DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly int certainty;

		[Token(Token = "0x17000330")]
		public BigInteger PublicExponent
		{
			[Token(Token = "0x6001A0D")]
			[Address(RVA = "0xF79480", Offset = "0xF79480", VA = "0xF79480")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000331")]
		public int Certainty
		{
			[Token(Token = "0x6001A0E")]
			[Address(RVA = "0xF79488", Offset = "0xF79488", VA = "0xF79488")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001A0C")]
		[Address(RVA = "0xF7943C", Offset = "0xF7943C", VA = "0xF7943C")]
		public RsaKeyGenerationParameters(BigInteger publicExponent, SecureRandom random, int strength, int certainty)
		{
		}

		[Token(Token = "0x6001A0F")]
		[Address(RVA = "0xF79490", Offset = "0xF79490", VA = "0xF79490", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A10")]
		[Address(RVA = "0xF79558", Offset = "0xF79558", VA = "0xF79558", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002F8")]
	public class RsaKeyParameters : AsymmetricKeyParameter
	{
		[Token(Token = "0x4000DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly BigInteger modulus;

		[Token(Token = "0x4000DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly BigInteger exponent;

		[Token(Token = "0x17000332")]
		public BigInteger Modulus
		{
			[Token(Token = "0x6001A12")]
			[Address(RVA = "0xF796F0", Offset = "0xF796F0", VA = "0xF796F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000333")]
		public BigInteger Exponent
		{
			[Token(Token = "0x6001A13")]
			[Address(RVA = "0xF796F8", Offset = "0xF796F8", VA = "0xF796F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A11")]
		[Address(RVA = "0xF795AC", Offset = "0xF795AC", VA = "0xF795AC")]
		public RsaKeyParameters(bool isPrivate, BigInteger modulus, BigInteger exponent)
		{
		}

		[Token(Token = "0x6001A14")]
		[Address(RVA = "0xF79700", Offset = "0xF79700", VA = "0xF79700", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A15")]
		[Address(RVA = "0xF797F4", Offset = "0xF797F4", VA = "0xF797F4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002F9")]
	public class RsaPrivateCrtKeyParameters : RsaKeyParameters
	{
		[Token(Token = "0x4000DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly BigInteger e;

		[Token(Token = "0x4000DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly BigInteger p;

		[Token(Token = "0x4000DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly BigInteger q;

		[Token(Token = "0x4000DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly BigInteger dP;

		[Token(Token = "0x4000DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly BigInteger dQ;

		[Token(Token = "0x4000DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly BigInteger qInv;

		[Token(Token = "0x17000334")]
		public BigInteger PublicExponent
		{
			[Token(Token = "0x6001A17")]
			[Address(RVA = "0xF79ABC", Offset = "0xF79ABC", VA = "0xF79ABC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000335")]
		public BigInteger P
		{
			[Token(Token = "0x6001A18")]
			[Address(RVA = "0xF79AC4", Offset = "0xF79AC4", VA = "0xF79AC4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000336")]
		public BigInteger Q
		{
			[Token(Token = "0x6001A19")]
			[Address(RVA = "0xF79ACC", Offset = "0xF79ACC", VA = "0xF79ACC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000337")]
		public BigInteger DP
		{
			[Token(Token = "0x6001A1A")]
			[Address(RVA = "0xF79AD4", Offset = "0xF79AD4", VA = "0xF79AD4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000338")]
		public BigInteger DQ
		{
			[Token(Token = "0x6001A1B")]
			[Address(RVA = "0xF79ADC", Offset = "0xF79ADC", VA = "0xF79ADC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000339")]
		public BigInteger QInv
		{
			[Token(Token = "0x6001A1C")]
			[Address(RVA = "0xF79AE4", Offset = "0xF79AE4", VA = "0xF79AE4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A16")]
		[Address(RVA = "0xF79870", Offset = "0xF79870", VA = "0xF79870")]
		public RsaPrivateCrtKeyParameters(BigInteger modulus, BigInteger publicExponent, BigInteger privateExponent, BigInteger p, BigInteger q, BigInteger dP, BigInteger dQ, BigInteger qInv)
		{
		}

		[Token(Token = "0x6001A1D")]
		[Address(RVA = "0xF79AEC", Offset = "0xF79AEC", VA = "0xF79AEC", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A1E")]
		[Address(RVA = "0xF79C78", Offset = "0xF79C78", VA = "0xF79C78", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001A1F")]
		[Address(RVA = "0xF799D0", Offset = "0xF799D0", VA = "0xF799D0")]
		private static void ValidateValue(BigInteger x, string name, string desc)
		{
		}
	}
}
namespace Org.BouncyCastle.Crypto.Paddings
{
	[Token(Token = "0x20002FA")]
	public interface IBlockCipherPadding
	{
		[Token(Token = "0x1700033A")]
		string PaddingName
		{
			[Token(Token = "0x6001A21")]
			get;
		}

		[Token(Token = "0x6001A20")]
		void Init(SecureRandom random);

		[Token(Token = "0x6001A22")]
		int AddPadding(byte[] input, int inOff);

		[Token(Token = "0x6001A23")]
		int PadCount(byte[] input);
	}
	[Token(Token = "0x20002FB")]
	public class ISO10126d2Padding : IBlockCipherPadding
	{
		[Token(Token = "0x4000DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private SecureRandom random;

		[Token(Token = "0x1700033B")]
		public string PaddingName
		{
			[Token(Token = "0x6001A25")]
			[Address(RVA = "0xF7262C", Offset = "0xF7262C", VA = "0xF7262C", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A24")]
		[Address(RVA = "0xF725AC", Offset = "0xF725AC", VA = "0xF725AC", Slot = "4")]
		public void Init(SecureRandom random)
		{
		}

		[Token(Token = "0x6001A26")]
		[Address(RVA = "0xF72674", Offset = "0xF72674", VA = "0xF72674", Slot = "6")]
		public int AddPadding(byte[] input, int inOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001A27")]
		[Address(RVA = "0xF72748", Offset = "0xF72748", VA = "0xF72748", Slot = "7")]
		public int PadCount(byte[] input)
		{
			return default(int);
		}

		[Token(Token = "0x6001A28")]
		[Address(RVA = "0xF727F8", Offset = "0xF727F8", VA = "0xF727F8")]
		public ISO10126d2Padding()
		{
		}
	}
	[Token(Token = "0x20002FC")]
	public class ISO7816d4Padding : IBlockCipherPadding
	{
		[Token(Token = "0x1700033C")]
		public string PaddingName
		{
			[Token(Token = "0x6001A2A")]
			[Address(RVA = "0xF72804", Offset = "0xF72804", VA = "0xF72804", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A29")]
		[Address(RVA = "0xF72800", Offset = "0xF72800", VA = "0xF72800", Slot = "4")]
		public void Init(SecureRandom random)
		{
		}

		[Token(Token = "0x6001A2B")]
		[Address(RVA = "0xF7284C", Offset = "0xF7284C", VA = "0xF7284C", Slot = "6")]
		public int AddPadding(byte[] input, int inOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001A2C")]
		[Address(RVA = "0xF728BC", Offset = "0xF728BC", VA = "0xF728BC", Slot = "7")]
		public int PadCount(byte[] input)
		{
			return default(int);
		}

		[Token(Token = "0x6001A2D")]
		[Address(RVA = "0xF72998", Offset = "0xF72998", VA = "0xF72998")]
		public ISO7816d4Padding()
		{
		}
	}
	[Token(Token = "0x20002FD")]
	public class PaddedBufferedBlockCipher : BufferedBlockCipher
	{
		[Token(Token = "0x4000DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly IBlockCipherPadding padding;

		[Token(Token = "0x6001A2E")]
		[Address(RVA = "0xF729A0", Offset = "0xF729A0", VA = "0xF729A0")]
		public PaddedBufferedBlockCipher(IBlockCipher cipher, IBlockCipherPadding padding)
		{
		}

		[Token(Token = "0x6001A2F")]
		[Address(RVA = "0xF72A94", Offset = "0xF72A94", VA = "0xF72A94")]
		public PaddedBufferedBlockCipher(IBlockCipher cipher)
		{
		}

		[Token(Token = "0x6001A30")]
		[Address(RVA = "0xF72B10", Offset = "0xF72B10", VA = "0xF72B10", Slot = "23")]
		public override void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001A31")]
		[Address(RVA = "0xF72CB8", Offset = "0xF72CB8", VA = "0xF72CB8", Slot = "25")]
		public override int GetOutputSize(int length)
		{
			return default(int);
		}

		[Token(Token = "0x6001A32")]
		[Address(RVA = "0xF72D04", Offset = "0xF72D04", VA = "0xF72D04", Slot = "26")]
		public override int GetUpdateOutputSize(int length)
		{
			return default(int);
		}

		[Token(Token = "0x6001A33")]
		[Address(RVA = "0xF72D3C", Offset = "0xF72D3C", VA = "0xF72D3C", Slot = "28")]
		public override int ProcessByte(byte input, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001A34")]
		[Address(RVA = "0xF72E7C", Offset = "0xF72E7C", VA = "0xF72E7C", Slot = "32")]
		public override int ProcessBytes(byte[] input, int inOff, int length, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001A35")]
		[Address(RVA = "0xF73134", Offset = "0xF73134", VA = "0xF73134", Slot = "36")]
		public override int DoFinal(byte[] output, int outOff)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002FE")]
	public class Pkcs7Padding : IBlockCipherPadding
	{
		[Token(Token = "0x1700033D")]
		public string PaddingName
		{
			[Token(Token = "0x6001A37")]
			[Address(RVA = "0xF73600", Offset = "0xF73600", VA = "0xF73600", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A36")]
		[Address(RVA = "0xF735FC", Offset = "0xF735FC", VA = "0xF735FC", Slot = "4")]
		public void Init(SecureRandom random)
		{
		}

		[Token(Token = "0x6001A38")]
		[Address(RVA = "0xF73648", Offset = "0xF73648", VA = "0xF73648", Slot = "6")]
		public int AddPadding(byte[] input, int inOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001A39")]
		[Address(RVA = "0xF736A8", Offset = "0xF736A8", VA = "0xF736A8", Slot = "7")]
		public int PadCount(byte[] input)
		{
			return default(int);
		}

		[Token(Token = "0x6001A3A")]
		[Address(RVA = "0xF72B08", Offset = "0xF72B08", VA = "0xF72B08")]
		public Pkcs7Padding()
		{
		}
	}
	[Token(Token = "0x20002FF")]
	public class TbcPadding : IBlockCipherPadding
	{
		[Token(Token = "0x1700033E")]
		public string PaddingName
		{
			[Token(Token = "0x6001A3B")]
			[Address(RVA = "0xF73794", Offset = "0xF73794", VA = "0xF73794", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A3C")]
		[Address(RVA = "0xF737DC", Offset = "0xF737DC", VA = "0xF737DC", Slot = "8")]
		public virtual void Init(SecureRandom random)
		{
		}

		[Token(Token = "0x6001A3D")]
		[Address(RVA = "0xF737E0", Offset = "0xF737E0", VA = "0xF737E0", Slot = "9")]
		public virtual int AddPadding(byte[] input, int inOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001A3E")]
		[Address(RVA = "0xF73880", Offset = "0xF73880", VA = "0xF73880", Slot = "10")]
		public virtual int PadCount(byte[] input)
		{
			return default(int);
		}

		[Token(Token = "0x6001A3F")]
		[Address(RVA = "0xF738E8", Offset = "0xF738E8", VA = "0xF738E8")]
		public TbcPadding()
		{
		}
	}
	[Token(Token = "0x2000300")]
	public class X923Padding : IBlockCipherPadding
	{
		[Token(Token = "0x4000DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private SecureRandom random;

		[Token(Token = "0x1700033F")]
		public string PaddingName
		{
			[Token(Token = "0x6001A41")]
			[Address(RVA = "0xF738F8", Offset = "0xF738F8", VA = "0xF738F8", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A40")]
		[Address(RVA = "0xF738F0", Offset = "0xF738F0", VA = "0xF738F0", Slot = "4")]
		public void Init(SecureRandom random)
		{
		}

		[Token(Token = "0x6001A42")]
		[Address(RVA = "0xF73940", Offset = "0xF73940", VA = "0xF73940", Slot = "6")]
		public int AddPadding(byte[] input, int inOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001A43")]
		[Address(RVA = "0xF73A2C", Offset = "0xF73A2C", VA = "0xF73A2C", Slot = "7")]
		public int PadCount(byte[] input)
		{
			return default(int);
		}

		[Token(Token = "0x6001A44")]
		[Address(RVA = "0xF73ADC", Offset = "0xF73ADC", VA = "0xF73ADC")]
		public X923Padding()
		{
		}
	}
	[Token(Token = "0x2000301")]
	public class ZeroBytePadding : IBlockCipherPadding
	{
		[Token(Token = "0x17000340")]
		public string PaddingName
		{
			[Token(Token = "0x6001A45")]
			[Address(RVA = "0xF73AE4", Offset = "0xF73AE4", VA = "0xF73AE4", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A46")]
		[Address(RVA = "0xF73B2C", Offset = "0xF73B2C", VA = "0xF73B2C", Slot = "4")]
		public void Init(SecureRandom random)
		{
		}

		[Token(Token = "0x6001A47")]
		[Address(RVA = "0xF73B30", Offset = "0xF73B30", VA = "0xF73B30", Slot = "6")]
		public int AddPadding(byte[] input, int inOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001A48")]
		[Address(RVA = "0xF73B8C", Offset = "0xF73B8C", VA = "0xF73B8C", Slot = "7")]
		public int PadCount(byte[] input)
		{
			return default(int);
		}

		[Token(Token = "0x6001A49")]
		[Address(RVA = "0xF73BEC", Offset = "0xF73BEC", VA = "0xF73BEC")]
		public ZeroBytePadding()
		{
		}
	}
}
namespace Org.BouncyCastle.Crypto.Modes
{
	[Token(Token = "0x2000302")]
	public class CbcBlockCipher : IBlockCipher
	{
		[Token(Token = "0x4000DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private byte[] IV;

		[Token(Token = "0x4000DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private byte[] cbcV;

		[Token(Token = "0x4000DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private byte[] cbcNextV;

		[Token(Token = "0x4000DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int blockSize;

		[Token(Token = "0x4000DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private IBlockCipher cipher;

		[Token(Token = "0x4000DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool encrypting;

		[Token(Token = "0x17000341")]
		public string AlgorithmName
		{
			[Token(Token = "0x6001A4D")]
			[Address(RVA = "0x10AF484", Offset = "0x10AF484", VA = "0x10AF484", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000342")]
		public bool IsPartialBlockOkay
		{
			[Token(Token = "0x6001A4E")]
			[Address(RVA = "0x10AF548", Offset = "0x10AF548", VA = "0x10AF548", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001A4A")]
		[Address(RVA = "0x10A7C20", Offset = "0x10A7C20", VA = "0x10A7C20")]
		public CbcBlockCipher(IBlockCipher cipher)
		{
		}

		[Token(Token = "0x6001A4B")]
		[Address(RVA = "0x10AF194", Offset = "0x10AF194", VA = "0x10AF194")]
		public IBlockCipher GetUnderlyingCipher()
		{
			return null;
		}

		[Token(Token = "0x6001A4C")]
		[Address(RVA = "0x10AF19C", Offset = "0x10AF19C", VA = "0x10AF19C", Slot = "5")]
		public void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001A4F")]
		[Address(RVA = "0x10AF550", Offset = "0x10AF550", VA = "0x10AF550", Slot = "6")]
		public int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001A50")]
		[Address(RVA = "0x10AF604", Offset = "0x10AF604", VA = "0x10AF604", Slot = "8")]
		public int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001A51")]
		[Address(RVA = "0x10AF398", Offset = "0x10AF398", VA = "0x10AF398", Slot = "9")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001A52")]
		[Address(RVA = "0x10AF7F4", Offset = "0x10AF7F4", VA = "0x10AF7F4")]
		private int EncryptBlock(byte[] input, int inOff, byte[] outBytes, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001A53")]
		[Address(RVA = "0x10AF614", Offset = "0x10AF614", VA = "0x10AF614")]
		private int DecryptBlock(byte[] input, int inOff, byte[] outBytes, int outOff)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000303")]
	public class CcmBlockCipher : IAeadBlockCipher
	{
		[Token(Token = "0x4000DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int BlockSize;

		[Token(Token = "0x4000DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IBlockCipher cipher;

		[Token(Token = "0x4000DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly byte[] macBlock;

		[Token(Token = "0x4000DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool forEncryption;

		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private byte[] nonce;

		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private byte[] initialAssociatedText;

		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int macSize;

		[Token(Token = "0x4000DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ICipherParameters keyParam;

		[Token(Token = "0x4000DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly MemoryStream associatedText;

		[Token(Token = "0x4000DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly MemoryStream data;

		[Token(Token = "0x17000343")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001A57")]
			[Address(RVA = "0x10AFDB4", Offset = "0x10AFDB4", VA = "0x10AFDB4", Slot = "19")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A54")]
		[Address(RVA = "0x10AF9D0", Offset = "0x10AF9D0", VA = "0x10AF9D0")]
		public CcmBlockCipher(IBlockCipher cipher)
		{
		}

		[Token(Token = "0x6001A55")]
		[Address(RVA = "0x10AFBD4", Offset = "0x10AFBD4", VA = "0x10AFBD4", Slot = "17")]
		public virtual IBlockCipher GetUnderlyingCipher()
		{
			return null;
		}

		[Token(Token = "0x6001A56")]
		[Address(RVA = "0x10AFBDC", Offset = "0x10AFBDC", VA = "0x10AFBDC", Slot = "18")]
		public virtual void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001A58")]
		[Address(RVA = "0x10AFE78", Offset = "0x10AFE78", VA = "0x10AFE78", Slot = "20")]
		public virtual int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001A59")]
		[Address(RVA = "0x10AFF2C", Offset = "0x10AFF2C", VA = "0x10AFF2C", Slot = "21")]
		public virtual void ProcessAadByte(byte input)
		{
		}

		[Token(Token = "0x6001A5A")]
		[Address(RVA = "0x10AFF50", Offset = "0x10AFF50", VA = "0x10AFF50", Slot = "22")]
		public virtual void ProcessAadBytes(byte[] inBytes, int inOff, int len)
		{
		}

		[Token(Token = "0x6001A5B")]
		[Address(RVA = "0x10AFF74", Offset = "0x10AFF74", VA = "0x10AFF74", Slot = "23")]
		public virtual int ProcessByte(byte input, byte[] outBytes, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001A5C")]
		[Address(RVA = "0x10AFFA4", Offset = "0x10AFFA4", VA = "0x10AFFA4", Slot = "24")]
		public virtual int ProcessBytes(byte[] inBytes, int inOff, int inLen, byte[] outBytes, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001A5D")]
		[Address(RVA = "0x10B004C", Offset = "0x10B004C", VA = "0x10B004C", Slot = "25")]
		public virtual int DoFinal(byte[] outBytes, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001A5E")]
		[Address(RVA = "0x10B00F4", Offset = "0x10B00F4", VA = "0x10B00F4", Slot = "26")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x6001A5F")]
		[Address(RVA = "0x10B01E0", Offset = "0x10B01E0", VA = "0x10B01E0", Slot = "27")]
		public virtual byte[] GetMac()
		{
			return null;
		}

		[Token(Token = "0x6001A60")]
		[Address(RVA = "0x10B01F8", Offset = "0x10B01F8", VA = "0x10B01F8", Slot = "28")]
		public virtual int GetUpdateOutputSize(int len)
		{
			return default(int);
		}

		[Token(Token = "0x6001A61")]
		[Address(RVA = "0x10B0200", Offset = "0x10B0200", VA = "0x10B0200", Slot = "29")]
		public virtual int GetOutputSize(int len)
		{
			return default(int);
		}

		[Token(Token = "0x6001A62")]
		[Address(RVA = "0x10B0258", Offset = "0x10B0258", VA = "0x10B0258", Slot = "30")]
		public virtual byte[] ProcessPacket(byte[] input, int inOff, int inLen)
		{
			return null;
		}

		[Token(Token = "0x6001A63")]
		[Address(RVA = "0x10B0354", Offset = "0x10B0354", VA = "0x10B0354", Slot = "31")]
		public virtual int ProcessPacket(byte[] input, int inOff, int inLen, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001A64")]
		[Address(RVA = "0x10B0BB4", Offset = "0x10B0BB4", VA = "0x10B0BB4")]
		private int calculateMac(byte[] data, int dataOff, int dataLen, byte[] macBlock)
		{
			return default(int);
		}

		[Token(Token = "0x6001A65")]
		[Address(RVA = "0x10B151C", Offset = "0x10B151C", VA = "0x10B151C")]
		private int GetAssociatedTextLength()
		{
			return default(int);
		}

		[Token(Token = "0x6001A66")]
		[Address(RVA = "0x10B1500", Offset = "0x10B1500", VA = "0x10B1500")]
		private bool HasAssociatedText()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000304")]
	public class CfbBlockCipher : IBlockCipher
	{
		[Token(Token = "0x4000DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private byte[] IV;

		[Token(Token = "0x4000DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private byte[] cfbV;

		[Token(Token = "0x4000DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private byte[] cfbOutV;

		[Token(Token = "0x4000DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool encrypting;

		[Token(Token = "0x4000DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private readonly int blockSize;

		[Token(Token = "0x4000DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly IBlockCipher cipher;

		[Token(Token = "0x17000344")]
		public string AlgorithmName
		{
			[Token(Token = "0x6001A6B")]
			[Address(RVA = "0x10B1A14", Offset = "0x10B1A14", VA = "0x10B1A14", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000345")]
		public bool IsPartialBlockOkay
		{
			[Token(Token = "0x6001A6C")]
			[Address(RVA = "0x10B1B10", Offset = "0x10B1B10", VA = "0x10B1B10", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001A68")]
		[Address(RVA = "0x10B15B4", Offset = "0x10B15B4", VA = "0x10B15B4")]
		public CfbBlockCipher(IBlockCipher cipher, int bitBlockSize)
		{
		}

		[Token(Token = "0x6001A69")]
		[Address(RVA = "0x10B17A8", Offset = "0x10B17A8", VA = "0x10B17A8")]
		public IBlockCipher GetUnderlyingCipher()
		{
			return null;
		}

		[Token(Token = "0x6001A6A")]
		[Address(RVA = "0x10B17B0", Offset = "0x10B17B0", VA = "0x10B17B0", Slot = "5")]
		public void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001A6D")]
		[Address(RVA = "0x10B1B18", Offset = "0x10B1B18", VA = "0x10B1B18", Slot = "6")]
		public int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001A6E")]
		[Address(RVA = "0x10B1B20", Offset = "0x10B1B20", VA = "0x10B1B20", Slot = "8")]
		public int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001A6F")]
		[Address(RVA = "0x10B1D88", Offset = "0x10B1D88", VA = "0x10B1D88")]
		public int EncryptBlock(byte[] input, int inOff, byte[] outBytes, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001A70")]
		[Address(RVA = "0x10B1B30", Offset = "0x10B1B30", VA = "0x10B1B30")]
		public int DecryptBlock(byte[] input, int inOff, byte[] outBytes, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001A71")]
		[Address(RVA = "0x10B1940", Offset = "0x10B1940", VA = "0x10B1940", Slot = "9")]
		public void Reset()
		{
		}
	}
	[Token(Token = "0x2000305")]
	public class CtsBlockCipher : BufferedBlockCipher
	{
		[Token(Token = "0x4000DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly int blockSize;

		[Token(Token = "0x6001A72")]
		[Address(RVA = "0x10B1FE0", Offset = "0x10B1FE0", VA = "0x10B1FE0")]
		public CtsBlockCipher(IBlockCipher cipher)
		{
		}

		[Token(Token = "0x6001A73")]
		[Address(RVA = "0x10B2174", Offset = "0x10B2174", VA = "0x10B2174", Slot = "26")]
		public override int GetUpdateOutputSize(int length)
		{
			return default(int);
		}

		[Token(Token = "0x6001A74")]
		[Address(RVA = "0x10B21AC", Offset = "0x10B21AC", VA = "0x10B21AC", Slot = "25")]
		public override int GetOutputSize(int length)
		{
			return default(int);
		}

		[Token(Token = "0x6001A75")]
		[Address(RVA = "0x10B21B8", Offset = "0x10B21B8", VA = "0x10B21B8", Slot = "28")]
		public override int ProcessByte(byte input, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001A76")]
		[Address(RVA = "0x10B231C", Offset = "0x10B231C", VA = "0x10B231C", Slot = "32")]
		public override int ProcessBytes(byte[] input, int inOff, int length, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001A77")]
		[Address(RVA = "0x10B2664", Offset = "0x10B2664", VA = "0x10B2664", Slot = "36")]
		public override int DoFinal(byte[] output, int outOff)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000306")]
	public class EaxBlockCipher : IAeadBlockCipher
	{
		[Token(Token = "0x2000671")]
		private enum Tag : byte
		{
			[Token(Token = "0x40025B7")]
			N,
			[Token(Token = "0x40025B8")]
			H,
			[Token(Token = "0x40025B9")]
			C
		}

		[Token(Token = "0x4000DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private SicBlockCipher cipher;

		[Token(Token = "0x4000DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool forEncryption;

		[Token(Token = "0x4000DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int blockSize;

		[Token(Token = "0x4000DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private IMac mac;

		[Token(Token = "0x4000DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private byte[] nonceMac;

		[Token(Token = "0x4000DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private byte[] associatedTextMac;

		[Token(Token = "0x4000DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private byte[] macBlock;

		[Token(Token = "0x4000DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int macSize;

		[Token(Token = "0x4000DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private byte[] bufBlock;

		[Token(Token = "0x4000DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int bufOff;

		[Token(Token = "0x4000DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool cipherInitialized;

		[Token(Token = "0x4000DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private byte[] initialAssociatedText;

		[Token(Token = "0x17000346")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001A79")]
			[Address(RVA = "0x10B2E5C", Offset = "0x10B2E5C", VA = "0x10B2E5C", Slot = "17")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A78")]
		[Address(RVA = "0x10B2C20", Offset = "0x10B2C20", VA = "0x10B2C20")]
		public EaxBlockCipher(IBlockCipher cipher)
		{
		}

		[Token(Token = "0x6001A7A")]
		[Address(RVA = "0x10B2F28", Offset = "0x10B2F28", VA = "0x10B2F28", Slot = "18")]
		public virtual IBlockCipher GetUnderlyingCipher()
		{
			return null;
		}

		[Token(Token = "0x6001A7B")]
		[Address(RVA = "0x10B2F30", Offset = "0x10B2F30", VA = "0x10B2F30", Slot = "19")]
		public virtual int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001A7C")]
		[Address(RVA = "0x10B2F4C", Offset = "0x10B2F4C", VA = "0x10B2F4C", Slot = "20")]
		public virtual void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001A7D")]
		[Address(RVA = "0x10B33E8", Offset = "0x10B33E8", VA = "0x10B33E8")]
		private void InitCipher()
		{
		}

		[Token(Token = "0x6001A7E")]
		[Address(RVA = "0x10B3594", Offset = "0x10B3594", VA = "0x10B3594")]
		private void CalculateMac()
		{
		}

		[Token(Token = "0x6001A7F")]
		[Address(RVA = "0x10B3700", Offset = "0x10B3700", VA = "0x10B3700", Slot = "21")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x6001A80")]
		[Address(RVA = "0x10B3708", Offset = "0x10B3708", VA = "0x10B3708")]
		private void Reset(bool clearMac)
		{
		}

		[Token(Token = "0x6001A81")]
		[Address(RVA = "0x10B3918", Offset = "0x10B3918", VA = "0x10B3918", Slot = "22")]
		public virtual void ProcessAadByte(byte input)
		{
		}

		[Token(Token = "0x6001A82")]
		[Address(RVA = "0x10B3A20", Offset = "0x10B3A20", VA = "0x10B3A20", Slot = "23")]
		public virtual void ProcessAadBytes(byte[] inBytes, int inOff, int len)
		{
		}

		[Token(Token = "0x6001A83")]
		[Address(RVA = "0x10B3B40", Offset = "0x10B3B40", VA = "0x10B3B40", Slot = "24")]
		public virtual int ProcessByte(byte input, byte[] outBytes, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001A84")]
		[Address(RVA = "0x10B3DEC", Offset = "0x10B3DEC", VA = "0x10B3DEC", Slot = "25")]
		public virtual int ProcessBytes(byte[] inBytes, int inOff, int len, byte[] outBytes, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001A85")]
		[Address(RVA = "0x10B3E94", Offset = "0x10B3E94", VA = "0x10B3E94", Slot = "26")]
		public virtual int DoFinal(byte[] outBytes, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001A86")]
		[Address(RVA = "0x10B4268", Offset = "0x10B4268", VA = "0x10B4268", Slot = "27")]
		public virtual byte[] GetMac()
		{
			return null;
		}

		[Token(Token = "0x6001A87")]
		[Address(RVA = "0x10B42E4", Offset = "0x10B42E4", VA = "0x10B42E4", Slot = "28")]
		public virtual int GetUpdateOutputSize(int len)
		{
			return default(int);
		}

		[Token(Token = "0x6001A88")]
		[Address(RVA = "0x10B4318", Offset = "0x10B4318", VA = "0x10B4318", Slot = "29")]
		public virtual int GetOutputSize(int len)
		{
			return default(int);
		}

		[Token(Token = "0x6001A89")]
		[Address(RVA = "0x10B3B84", Offset = "0x10B3B84", VA = "0x10B3B84")]
		private int Process(byte b, byte[] outBytes, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001A8A")]
		[Address(RVA = "0x10B41C8", Offset = "0x10B41C8", VA = "0x10B41C8")]
		private bool VerifyMac(byte[] mac, int off)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000307")]
	public class GcmBlockCipher : IAeadBlockCipher
	{
		[Token(Token = "0x4000DEB")]
		private const int BlockSize = 16;

		[Token(Token = "0x4000DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IBlockCipher cipher;

		[Token(Token = "0x4000DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IGcmMultiplier multiplier;

		[Token(Token = "0x4000DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private IGcmExponentiator exp;

		[Token(Token = "0x4000DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool forEncryption;

		[Token(Token = "0x4000DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int macSize;

		[Token(Token = "0x4000DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private byte[] nonce;

		[Token(Token = "0x4000DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private byte[] initialAssociatedText;

		[Token(Token = "0x4000DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private byte[] H;

		[Token(Token = "0x4000DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private byte[] J0;

		[Token(Token = "0x4000DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private byte[] bufBlock;

		[Token(Token = "0x4000DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private byte[] macBlock;

		[Token(Token = "0x4000DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private byte[] S;

		[Token(Token = "0x4000DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private byte[] S_at;

		[Token(Token = "0x4000DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private byte[] S_atPre;

		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private byte[] counter;

		[Token(Token = "0x4000DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int bufOff;

		[Token(Token = "0x4000DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private ulong totalLength;

		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private byte[] atBlock;

		[Token(Token = "0x4000DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int atBlockPos;

		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private ulong atLength;

		[Token(Token = "0x4000E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private ulong atLengthPre;

		[Token(Token = "0x17000347")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001A8D")]
			[Address(RVA = "0x10B6E6C", Offset = "0x10B6E6C", VA = "0x10B6E6C", Slot = "17")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A8B")]
		[Address(RVA = "0x10B6CE0", Offset = "0x10B6CE0", VA = "0x10B6CE0")]
		public GcmBlockCipher(IBlockCipher c)
		{
		}

		[Token(Token = "0x6001A8C")]
		[Address(RVA = "0x10B6CE8", Offset = "0x10B6CE8", VA = "0x10B6CE8")]
		public GcmBlockCipher(IBlockCipher c, IGcmMultiplier m)
		{
		}

		[Token(Token = "0x6001A8E")]
		[Address(RVA = "0x10B6F30", Offset = "0x10B6F30", VA = "0x10B6F30", Slot = "5")]
		public IBlockCipher GetUnderlyingCipher()
		{
			return null;
		}

		[Token(Token = "0x6001A8F")]
		[Address(RVA = "0x10B6F38", Offset = "0x10B6F38", VA = "0x10B6F38", Slot = "18")]
		public virtual int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001A90")]
		[Address(RVA = "0x10B6F40", Offset = "0x10B6F40", VA = "0x10B6F40", Slot = "19")]
		public virtual void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001A91")]
		[Address(RVA = "0x10B7698", Offset = "0x10B7698", VA = "0x10B7698", Slot = "20")]
		public virtual byte[] GetMac()
		{
			return null;
		}

		[Token(Token = "0x6001A92")]
		[Address(RVA = "0x10B76A4", Offset = "0x10B76A4", VA = "0x10B76A4", Slot = "21")]
		public virtual int GetOutputSize(int len)
		{
			return default(int);
		}

		[Token(Token = "0x6001A93")]
		[Address(RVA = "0x10B76CC", Offset = "0x10B76CC", VA = "0x10B76CC", Slot = "22")]
		public virtual int GetUpdateOutputSize(int len)
		{
			return default(int);
		}

		[Token(Token = "0x6001A94")]
		[Address(RVA = "0x10B7704", Offset = "0x10B7704", VA = "0x10B7704", Slot = "23")]
		public virtual void ProcessAadByte(byte input)
		{
		}

		[Token(Token = "0x6001A95")]
		[Address(RVA = "0x10B7784", Offset = "0x10B7784", VA = "0x10B7784", Slot = "24")]
		public virtual void ProcessAadBytes(byte[] inBytes, int inOff, int len)
		{
		}

		[Token(Token = "0x6001A96")]
		[Address(RVA = "0x10B7858", Offset = "0x10B7858", VA = "0x10B7858")]
		private void InitCipher()
		{
		}

		[Token(Token = "0x6001A97")]
		[Address(RVA = "0x10B7A08", Offset = "0x10B7A08", VA = "0x10B7A08", Slot = "25")]
		public virtual int ProcessByte(byte input, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001A98")]
		[Address(RVA = "0x10B7B48", Offset = "0x10B7B48", VA = "0x10B7B48", Slot = "26")]
		public virtual int ProcessBytes(byte[] input, int inOff, int len, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001A99")]
		[Address(RVA = "0x10B7A80", Offset = "0x10B7A80", VA = "0x10B7A80")]
		private void OutputBlock(byte[] output, int offset)
		{
		}

		[Token(Token = "0x6001A9A")]
		[Address(RVA = "0x10B7DA0", Offset = "0x10B7DA0", VA = "0x10B7DA0", Slot = "12")]
		public int DoFinal(byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001A9B")]
		[Address(RVA = "0x10B852C", Offset = "0x10B852C", VA = "0x10B852C", Slot = "27")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x6001A9C")]
		[Address(RVA = "0x10B83B0", Offset = "0x10B83B0", VA = "0x10B83B0")]
		private void Reset(bool clearMac)
		{
		}

		[Token(Token = "0x6001A9D")]
		[Address(RVA = "0x10B7CC0", Offset = "0x10B7CC0", VA = "0x10B7CC0")]
		private void gCTRBlock(byte[] block, byte[] output, int outOff)
		{
		}

		[Token(Token = "0x6001A9E")]
		[Address(RVA = "0x10B82B0", Offset = "0x10B82B0", VA = "0x10B82B0")]
		private void gCTRPartial(byte[] buf, int off, int len, byte[] output, int outOff)
		{
		}

		[Token(Token = "0x6001A9F")]
		[Address(RVA = "0x10B74D8", Offset = "0x10B74D8", VA = "0x10B74D8")]
		private void gHASH(byte[] Y, byte[] b, int len)
		{
		}

		[Token(Token = "0x6001AA0")]
		[Address(RVA = "0x10B75A4", Offset = "0x10B75A4", VA = "0x10B75A4")]
		private void gHASHBlock(byte[] Y, byte[] b)
		{
		}

		[Token(Token = "0x6001AA1")]
		[Address(RVA = "0x10B78FC", Offset = "0x10B78FC", VA = "0x10B78FC")]
		private void gHASHPartial(byte[] Y, byte[] b, int off, int len)
		{
		}

		[Token(Token = "0x6001AA2")]
		[Address(RVA = "0x10B8534", Offset = "0x10B8534", VA = "0x10B8534")]
		private byte[] GetNextCounterBlock()
		{
			return null;
		}
	}
	[Token(Token = "0x2000308")]
	public class GOfbBlockCipher : IBlockCipher
	{
		[Token(Token = "0x4000E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private byte[] IV;

		[Token(Token = "0x4000E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private byte[] ofbV;

		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private byte[] ofbOutV;

		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly int blockSize;

		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly IBlockCipher cipher;

		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool firstStep;

		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int N3;

		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int N4;

		[Token(Token = "0x4000E09")]
		private const int C1 = 16843012;

		[Token(Token = "0x4000E0A")]
		private const int C2 = 16843009;

		[Token(Token = "0x17000348")]
		public string AlgorithmName
		{
			[Token(Token = "0x6001AA6")]
			[Address(RVA = "0x10B4890", Offset = "0x10B4890", VA = "0x10B4890", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000349")]
		public bool IsPartialBlockOkay
		{
			[Token(Token = "0x6001AA7")]
			[Address(RVA = "0x10B4954", Offset = "0x10B4954", VA = "0x10B4954", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001AA3")]
		[Address(RVA = "0x10B4340", Offset = "0x10B4340", VA = "0x10B4340")]
		public GOfbBlockCipher(IBlockCipher cipher)
		{
		}

		[Token(Token = "0x6001AA4")]
		[Address(RVA = "0x10B45D0", Offset = "0x10B45D0", VA = "0x10B45D0")]
		public IBlockCipher GetUnderlyingCipher()
		{
			return null;
		}

		[Token(Token = "0x6001AA5")]
		[Address(RVA = "0x10B45D8", Offset = "0x10B45D8", VA = "0x10B45D8", Slot = "5")]
		public void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001AA8")]
		[Address(RVA = "0x10B495C", Offset = "0x10B495C", VA = "0x10B495C", Slot = "6")]
		public int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001AA9")]
		[Address(RVA = "0x10B4964", Offset = "0x10B4964", VA = "0x10B4964", Slot = "8")]
		public int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001AAA")]
		[Address(RVA = "0x10B47BC", Offset = "0x10B47BC", VA = "0x10B47BC", Slot = "9")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001AAB")]
		[Address(RVA = "0x10B4CF8", Offset = "0x10B4CF8", VA = "0x10B4CF8")]
		private int bytesToint(byte[] inBytes, int inOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001AAC")]
		[Address(RVA = "0x10B4D78", Offset = "0x10B4D78", VA = "0x10B4D78")]
		private void intTobytes(int num, byte[] outBytes, int outOff)
		{
		}
	}
	[Token(Token = "0x2000309")]
	public interface IAeadBlockCipher
	{
		[Token(Token = "0x1700034A")]
		string AlgorithmName
		{
			[Token(Token = "0x6001AAD")]
			get;
		}

		[Token(Token = "0x6001AAE")]
		IBlockCipher GetUnderlyingCipher();

		[Token(Token = "0x6001AAF")]
		void Init(bool forEncryption, ICipherParameters parameters);

		[Token(Token = "0x6001AB0")]
		int GetBlockSize();

		[Token(Token = "0x6001AB1")]
		void ProcessAadByte(byte input);

		[Token(Token = "0x6001AB2")]
		void ProcessAadBytes(byte[] inBytes, int inOff, int len);

		[Token(Token = "0x6001AB3")]
		int ProcessByte(byte input, byte[] outBytes, int outOff);

		[Token(Token = "0x6001AB4")]
		int ProcessBytes(byte[] inBytes, int inOff, int len, byte[] outBytes, int outOff);

		[Token(Token = "0x6001AB5")]
		int DoFinal(byte[] outBytes, int outOff);

		[Token(Token = "0x6001AB6")]
		byte[] GetMac();

		[Token(Token = "0x6001AB7")]
		int GetUpdateOutputSize(int len);

		[Token(Token = "0x6001AB8")]
		int GetOutputSize(int len);

		[Token(Token = "0x6001AB9")]
		void Reset();
	}
	[Token(Token = "0x200030A")]
	public class OcbBlockCipher : IAeadBlockCipher
	{
		[Token(Token = "0x4000E0B")]
		private const int BLOCK_SIZE = 16;

		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IBlockCipher hashCipher;

		[Token(Token = "0x4000E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IBlockCipher mainCipher;

		[Token(Token = "0x4000E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool forEncryption;

		[Token(Token = "0x4000E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int macSize;

		[Token(Token = "0x4000E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private byte[] initialAssociatedText;

		[Token(Token = "0x4000E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private IList L;

		[Token(Token = "0x4000E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private byte[] L_Asterisk;

		[Token(Token = "0x4000E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private byte[] L_Dollar;

		[Token(Token = "0x4000E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private byte[] KtopInput;

		[Token(Token = "0x4000E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private byte[] Stretch;

		[Token(Token = "0x4000E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private byte[] OffsetMAIN_0;

		[Token(Token = "0x4000E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private byte[] hashBlock;

		[Token(Token = "0x4000E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private byte[] mainBlock;

		[Token(Token = "0x4000E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int hashBlockPos;

		[Token(Token = "0x4000E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int mainBlockPos;

		[Token(Token = "0x4000E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private long hashBlockCount;

		[Token(Token = "0x4000E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private long mainBlockCount;

		[Token(Token = "0x4000E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private byte[] OffsetHASH;

		[Token(Token = "0x4000E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private byte[] Sum;

		[Token(Token = "0x4000E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private byte[] OffsetMAIN;

		[Token(Token = "0x4000E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private byte[] Checksum;

		[Token(Token = "0x4000E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private byte[] macBlock;

		[Token(Token = "0x1700034B")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001ABC")]
			[Address(RVA = "0xF6E8E0", Offset = "0xF6E8E0", VA = "0xF6E8E0", Slot = "18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001ABA")]
		[Address(RVA = "0xF6E510", Offset = "0xF6E510", VA = "0xF6E510")]
		public OcbBlockCipher(IBlockCipher hashCipher, IBlockCipher mainCipher)
		{
		}

		[Token(Token = "0x6001ABB")]
		[Address(RVA = "0xF6E8D8", Offset = "0xF6E8D8", VA = "0xF6E8D8", Slot = "17")]
		public virtual IBlockCipher GetUnderlyingCipher()
		{
			return null;
		}

		[Token(Token = "0x6001ABD")]
		[Address(RVA = "0xF6E9A4", Offset = "0xF6E9A4", VA = "0xF6E9A4", Slot = "19")]
		public virtual void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001ABE")]
		[Address(RVA = "0xF6F184", Offset = "0xF6F184", VA = "0xF6F184", Slot = "20")]
		protected virtual int ProcessNonce(byte[] N)
		{
			return default(int);
		}

		[Token(Token = "0x6001ABF")]
		[Address(RVA = "0xF6F3AC", Offset = "0xF6F3AC", VA = "0xF6F3AC", Slot = "21")]
		public virtual int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001AC0")]
		[Address(RVA = "0xF6F3B4", Offset = "0xF6F3B4", VA = "0xF6F3B4", Slot = "22")]
		public virtual byte[] GetMac()
		{
			return null;
		}

		[Token(Token = "0x6001AC1")]
		[Address(RVA = "0xF6F3C0", Offset = "0xF6F3C0", VA = "0xF6F3C0", Slot = "23")]
		public virtual int GetOutputSize(int len)
		{
			return default(int);
		}

		[Token(Token = "0x6001AC2")]
		[Address(RVA = "0xF6F3E8", Offset = "0xF6F3E8", VA = "0xF6F3E8", Slot = "24")]
		public virtual int GetUpdateOutputSize(int len)
		{
			return default(int);
		}

		[Token(Token = "0x6001AC3")]
		[Address(RVA = "0xF6F420", Offset = "0xF6F420", VA = "0xF6F420", Slot = "25")]
		public virtual void ProcessAadByte(byte input)
		{
		}

		[Token(Token = "0x6001AC4")]
		[Address(RVA = "0xF6F494", Offset = "0xF6F494", VA = "0xF6F494", Slot = "26")]
		public virtual void ProcessAadBytes(byte[] input, int off, int len)
		{
		}

		[Token(Token = "0x6001AC5")]
		[Address(RVA = "0xF6F564", Offset = "0xF6F564", VA = "0xF6F564", Slot = "27")]
		public virtual int ProcessByte(byte input, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001AC6")]
		[Address(RVA = "0xF6F5EC", Offset = "0xF6F5EC", VA = "0xF6F5EC", Slot = "28")]
		public virtual int ProcessBytes(byte[] input, int inOff, int len, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001AC7")]
		[Address(RVA = "0xF6F6E8", Offset = "0xF6F6E8", VA = "0xF6F6E8", Slot = "29")]
		public virtual int DoFinal(byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001AC8")]
		[Address(RVA = "0xF6FB9C", Offset = "0xF6FB9C", VA = "0xF6FB9C", Slot = "30")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x6001AC9")]
		[Address(RVA = "0xF6FBB0", Offset = "0xF6FBB0", VA = "0xF6FBB0", Slot = "31")]
		protected virtual void Clear(byte[] bs)
		{
		}

		[Token(Token = "0x6001ACA")]
		[Address(RVA = "0xF6FBCC", Offset = "0xF6FBCC", VA = "0xF6FBCC", Slot = "32")]
		protected virtual byte[] GetLSub(int n)
		{
			return null;
		}

		[Token(Token = "0x6001ACB")]
		[Address(RVA = "0xF6FEB4", Offset = "0xF6FEB4", VA = "0xF6FEB4", Slot = "33")]
		protected virtual void ProcessHashBlock()
		{
		}

		[Token(Token = "0x6001ACC")]
		[Address(RVA = "0xF6FF64", Offset = "0xF6FF64", VA = "0xF6FF64", Slot = "34")]
		protected virtual void ProcessMainBlock(byte[] output, int outOff)
		{
		}

		[Token(Token = "0x6001ACD")]
		[Address(RVA = "0xF70140", Offset = "0xF70140", VA = "0xF70140", Slot = "35")]
		protected virtual void Reset(bool clearMac)
		{
		}

		[Token(Token = "0x6001ACE")]
		[Address(RVA = "0xF70344", Offset = "0xF70344", VA = "0xF70344", Slot = "36")]
		protected virtual void UpdateHASH(byte[] LSub)
		{
		}

		[Token(Token = "0x6001ACF")]
		[Address(RVA = "0xF6F0DC", Offset = "0xF6F0DC", VA = "0xF6F0DC")]
		protected static byte[] OCB_double(byte[] block)
		{
			return null;
		}

		[Token(Token = "0x6001AD0")]
		[Address(RVA = "0xF6FACC", Offset = "0xF6FACC", VA = "0xF6FACC")]
		protected static void OCB_extend(byte[] block, int pos)
		{
		}

		[Token(Token = "0x6001AD1")]
		[Address(RVA = "0xF6FF30", Offset = "0xF6FF30", VA = "0xF6FF30")]
		protected static int OCB_ntz(long x)
		{
			return default(int);
		}

		[Token(Token = "0x6001AD2")]
		[Address(RVA = "0xF7043C", Offset = "0xF7043C", VA = "0xF7043C")]
		protected static int ShiftLeft(byte[] block, byte[] output)
		{
			return default(int);
		}

		[Token(Token = "0x6001AD3")]
		[Address(RVA = "0xF6FB38", Offset = "0xF6FB38", VA = "0xF6FB38")]
		protected static void Xor(byte[] block, byte[] val)
		{
		}
	}
	[Token(Token = "0x200030B")]
	public class OfbBlockCipher : IBlockCipher
	{
		[Token(Token = "0x4000E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private byte[] IV;

		[Token(Token = "0x4000E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private byte[] ofbV;

		[Token(Token = "0x4000E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private byte[] ofbOutV;

		[Token(Token = "0x4000E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly int blockSize;

		[Token(Token = "0x4000E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly IBlockCipher cipher;

		[Token(Token = "0x1700034C")]
		public string AlgorithmName
		{
			[Token(Token = "0x6001AD7")]
			[Address(RVA = "0xF7094C", Offset = "0xF7094C", VA = "0xF7094C", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700034D")]
		public bool IsPartialBlockOkay
		{
			[Token(Token = "0x6001AD8")]
			[Address(RVA = "0xF70A48", Offset = "0xF70A48", VA = "0xF70A48", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001AD4")]
		[Address(RVA = "0xF704A8", Offset = "0xF704A8", VA = "0xF704A8")]
		public OfbBlockCipher(IBlockCipher cipher, int blockSize)
		{
		}

		[Token(Token = "0x6001AD5")]
		[Address(RVA = "0xF7069C", Offset = "0xF7069C", VA = "0xF7069C")]
		public IBlockCipher GetUnderlyingCipher()
		{
			return null;
		}

		[Token(Token = "0x6001AD6")]
		[Address(RVA = "0xF706A4", Offset = "0xF706A4", VA = "0xF706A4", Slot = "5")]
		public void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001AD9")]
		[Address(RVA = "0xF70A50", Offset = "0xF70A50", VA = "0xF70A50", Slot = "6")]
		public int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001ADA")]
		[Address(RVA = "0xF70A58", Offset = "0xF70A58", VA = "0xF70A58", Slot = "8")]
		public int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001ADB")]
		[Address(RVA = "0xF70878", Offset = "0xF70878", VA = "0xF70878", Slot = "9")]
		public void Reset()
		{
		}
	}
	[Token(Token = "0x200030C")]
	public class OpenPgpCfbBlockCipher : IBlockCipher
	{
		[Token(Token = "0x4000E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private byte[] IV;

		[Token(Token = "0x4000E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private byte[] FR;

		[Token(Token = "0x4000E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private byte[] FRE;

		[Token(Token = "0x4000E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly IBlockCipher cipher;

		[Token(Token = "0x4000E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly int blockSize;

		[Token(Token = "0x4000E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int count;

		[Token(Token = "0x4000E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool forEncryption;

		[Token(Token = "0x1700034E")]
		public string AlgorithmName
		{
			[Token(Token = "0x6001ADE")]
			[Address(RVA = "0xF70DC4", Offset = "0xF70DC4", VA = "0xF70DC4", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700034F")]
		public bool IsPartialBlockOkay
		{
			[Token(Token = "0x6001ADF")]
			[Address(RVA = "0xF70E88", Offset = "0xF70E88", VA = "0xF70E88", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001ADC")]
		[Address(RVA = "0xF70CB0", Offset = "0xF70CB0", VA = "0xF70CB0")]
		public OpenPgpCfbBlockCipher(IBlockCipher cipher)
		{
		}

		[Token(Token = "0x6001ADD")]
		[Address(RVA = "0xF70DBC", Offset = "0xF70DBC", VA = "0xF70DBC")]
		public IBlockCipher GetUnderlyingCipher()
		{
			return null;
		}

		[Token(Token = "0x6001AE0")]
		[Address(RVA = "0xF70E90", Offset = "0xF70E90", VA = "0xF70E90", Slot = "6")]
		public int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001AE1")]
		[Address(RVA = "0xF70F44", Offset = "0xF70F44", VA = "0xF70F44", Slot = "8")]
		public int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001AE2")]
		[Address(RVA = "0xF71BFC", Offset = "0xF71BFC", VA = "0xF71BFC", Slot = "9")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001AE3")]
		[Address(RVA = "0xF71CD4", Offset = "0xF71CD4", VA = "0xF71CD4", Slot = "5")]
		public void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001AE4")]
		[Address(RVA = "0xF71E88", Offset = "0xF71E88", VA = "0xF71E88")]
		private byte EncryptByte(byte data, int blockOff)
		{
			return default(byte);
		}

		[Token(Token = "0x6001AE5")]
		[Address(RVA = "0xF715CC", Offset = "0xF715CC", VA = "0xF715CC")]
		private int EncryptBlock(byte[] input, int inOff, byte[] outBytes, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001AE6")]
		[Address(RVA = "0xF70F54", Offset = "0xF70F54", VA = "0xF70F54")]
		private int DecryptBlock(byte[] input, int inOff, byte[] outBytes, int outOff)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200030D")]
	public class SicBlockCipher : IBlockCipher
	{
		[Token(Token = "0x4000E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IBlockCipher cipher;

		[Token(Token = "0x4000E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly int blockSize;

		[Token(Token = "0x4000E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly byte[] IV;

		[Token(Token = "0x4000E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly byte[] counter;

		[Token(Token = "0x4000E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly byte[] counterOut;

		[Token(Token = "0x17000350")]
		public string AlgorithmName
		{
			[Token(Token = "0x6001AEA")]
			[Address(RVA = "0xF7223C", Offset = "0xF7223C", VA = "0xF7223C", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000351")]
		public bool IsPartialBlockOkay
		{
			[Token(Token = "0x6001AEB")]
			[Address(RVA = "0xF72300", Offset = "0xF72300", VA = "0xF72300", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001AE7")]
		[Address(RVA = "0xF71EC8", Offset = "0xF71EC8", VA = "0xF71EC8")]
		public SicBlockCipher(IBlockCipher cipher)
		{
		}

		[Token(Token = "0x6001AE8")]
		[Address(RVA = "0xF71FD4", Offset = "0xF71FD4", VA = "0xF71FD4")]
		public IBlockCipher GetUnderlyingCipher()
		{
			return null;
		}

		[Token(Token = "0x6001AE9")]
		[Address(RVA = "0xF71FDC", Offset = "0xF71FDC", VA = "0xF71FDC", Slot = "5")]
		public void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001AEC")]
		[Address(RVA = "0xF72308", Offset = "0xF72308", VA = "0xF72308", Slot = "6")]
		public int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001AED")]
		[Address(RVA = "0xF723BC", Offset = "0xF723BC", VA = "0xF723BC", Slot = "8")]
		public int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001AEE")]
		[Address(RVA = "0xF72168", Offset = "0xF72168", VA = "0xF72168", Slot = "9")]
		public void Reset()
		{
		}
	}
}
namespace Org.BouncyCastle.Crypto.Modes.Gcm
{
	[Token(Token = "0x200030E")]
	internal abstract class GcmUtilities
	{
		[Token(Token = "0x4000E33")]
		private const uint E1 = 3774873600u;

		[Token(Token = "0x4000E34")]
		private const ulong E1L = 16212958658533785600uL;

		[Token(Token = "0x4000E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly uint[] LOOKUP;

		[Token(Token = "0x6001AEF")]
		[Address(RVA = "0x10B4E04", Offset = "0x10B4E04", VA = "0x10B4E04")]
		private static uint[] GenerateLookup()
		{
			return null;
		}

		[Token(Token = "0x6001AF0")]
		[Address(RVA = "0x10B4EF4", Offset = "0x10B4EF4", VA = "0x10B4EF4")]
		internal static byte[] OneAsBytes()
		{
			return null;
		}

		[Token(Token = "0x6001AF1")]
		[Address(RVA = "0x10B4F68", Offset = "0x10B4F68", VA = "0x10B4F68")]
		internal static uint[] OneAsUints()
		{
			return null;
		}

		[Token(Token = "0x6001AF2")]
		[Address(RVA = "0x10B4FDC", Offset = "0x10B4FDC", VA = "0x10B4FDC")]
		internal static byte[] AsBytes(uint[] x)
		{
			return null;
		}

		[Token(Token = "0x6001AF3")]
		[Address(RVA = "0x10B4FE4", Offset = "0x10B4FE4", VA = "0x10B4FE4")]
		internal static void AsBytes(uint[] x, byte[] z)
		{
		}

		[Token(Token = "0x6001AF4")]
		[Address(RVA = "0x10B4FF0", Offset = "0x10B4FF0", VA = "0x10B4FF0")]
		internal static uint[] AsUints(byte[] bs)
		{
			return null;
		}

		[Token(Token = "0x6001AF5")]
		[Address(RVA = "0x10B5060", Offset = "0x10B5060", VA = "0x10B5060")]
		internal static void AsUints(byte[] bs, uint[] output)
		{
		}

		[Token(Token = "0x6001AF6")]
		[Address(RVA = "0x10B5070", Offset = "0x10B5070", VA = "0x10B5070")]
		internal static void Multiply(byte[] x, byte[] y)
		{
		}

		[Token(Token = "0x6001AF7")]
		[Address(RVA = "0x10B510C", Offset = "0x10B510C", VA = "0x10B510C")]
		internal static void Multiply(uint[] x, uint[] y)
		{
		}

		[Token(Token = "0x6001AF8")]
		[Address(RVA = "0x10B51E4", Offset = "0x10B51E4", VA = "0x10B51E4")]
		internal static void Multiply(ulong[] x, ulong[] y)
		{
		}

		[Token(Token = "0x6001AF9")]
		[Address(RVA = "0x10B5278", Offset = "0x10B5278", VA = "0x10B5278")]
		internal static void MultiplyP(uint[] x)
		{
		}

		[Token(Token = "0x6001AFA")]
		[Address(RVA = "0x10B5390", Offset = "0x10B5390", VA = "0x10B5390")]
		internal static void MultiplyP(uint[] x, uint[] z)
		{
		}

		[Token(Token = "0x6001AFB")]
		[Address(RVA = "0x10B54E4", Offset = "0x10B54E4", VA = "0x10B54E4")]
		internal static void MultiplyP8(uint[] x)
		{
		}

		[Token(Token = "0x6001AFC")]
		[Address(RVA = "0x10B5640", Offset = "0x10B5640", VA = "0x10B5640")]
		internal static void MultiplyP8(uint[] x, uint[] y)
		{
		}

		[Token(Token = "0x6001AFD")]
		[Address(RVA = "0x10B5314", Offset = "0x10B5314", VA = "0x10B5314")]
		internal static uint ShiftRight(uint[] x)
		{
			return default(uint);
		}

		[Token(Token = "0x6001AFE")]
		[Address(RVA = "0x10B543C", Offset = "0x10B543C", VA = "0x10B543C")]
		internal static uint ShiftRight(uint[] x, uint[] z)
		{
			return default(uint);
		}

		[Token(Token = "0x6001AFF")]
		[Address(RVA = "0x10B55A0", Offset = "0x10B55A0", VA = "0x10B55A0")]
		internal static uint ShiftRightN(uint[] x, int n)
		{
			return default(uint);
		}

		[Token(Token = "0x6001B00")]
		[Address(RVA = "0x10B570C", Offset = "0x10B570C", VA = "0x10B570C")]
		internal static uint ShiftRightN(uint[] x, int n, uint[] z)
		{
			return default(uint);
		}

		[Token(Token = "0x6001B01")]
		[Address(RVA = "0x10B57D8", Offset = "0x10B57D8", VA = "0x10B57D8")]
		internal static void Xor(byte[] x, byte[] y)
		{
		}

		[Token(Token = "0x6001B02")]
		[Address(RVA = "0x10B58D0", Offset = "0x10B58D0", VA = "0x10B58D0")]
		internal static void Xor(byte[] x, byte[] y, int yOff, int yLen)
		{
		}

		[Token(Token = "0x6001B03")]
		[Address(RVA = "0x10B5944", Offset = "0x10B5944", VA = "0x10B5944")]
		internal static void Xor(byte[] x, byte[] y, byte[] z)
		{
		}

		[Token(Token = "0x6001B04")]
		[Address(RVA = "0x10B5A80", Offset = "0x10B5A80", VA = "0x10B5A80")]
		internal static void Xor(uint[] x, uint[] y)
		{
		}

		[Token(Token = "0x6001B05")]
		[Address(RVA = "0x10B5B34", Offset = "0x10B5B34", VA = "0x10B5B34")]
		internal static void Xor(uint[] x, uint[] y, uint[] z)
		{
		}

		[Token(Token = "0x6001B06")]
		[Address(RVA = "0x10B5C18", Offset = "0x10B5C18", VA = "0x10B5C18")]
		protected GcmUtilities()
		{
		}
	}
	[Token(Token = "0x200030F")]
	public interface IGcmExponentiator
	{
		[Token(Token = "0x6001B08")]
		void Init(byte[] x);

		[Token(Token = "0x6001B09")]
		void ExponentiateX(long pow, byte[] output);
	}
	[Token(Token = "0x2000310")]
	public interface IGcmMultiplier
	{
		[Token(Token = "0x6001B0A")]
		void Init(byte[] H);

		[Token(Token = "0x6001B0B")]
		void MultiplyH(byte[] x);
	}
	[Token(Token = "0x2000311")]
	public class Tables1kGcmExponentiator : IGcmExponentiator
	{
		[Token(Token = "0x4000E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IList lookupPowX2;

		[Token(Token = "0x6001B0C")]
		[Address(RVA = "0x10B5C74", Offset = "0x10B5C74", VA = "0x10B5C74", Slot = "4")]
		public void Init(byte[] x)
		{
		}

		[Token(Token = "0x6001B0D")]
		[Address(RVA = "0x10B5E5C", Offset = "0x10B5E5C", VA = "0x10B5E5C", Slot = "5")]
		public void ExponentiateX(long pow, byte[] output)
		{
		}

		[Token(Token = "0x6001B0E")]
		[Address(RVA = "0x10B601C", Offset = "0x10B601C", VA = "0x10B601C")]
		private void EnsureAvailable(int bit)
		{
		}

		[Token(Token = "0x6001B0F")]
		[Address(RVA = "0x10B6264", Offset = "0x10B6264", VA = "0x10B6264")]
		public Tables1kGcmExponentiator()
		{
		}
	}
	[Token(Token = "0x2000312")]
	public class Tables8kGcmMultiplier : IGcmMultiplier
	{
		[Token(Token = "0x4000E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private byte[] H;

		[Token(Token = "0x4000E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private uint[][][] M;

		[Token(Token = "0x6001B10")]
		[Address(RVA = "0x10B626C", Offset = "0x10B626C", VA = "0x10B626C", Slot = "4")]
		public void Init(byte[] H)
		{
		}

		[Token(Token = "0x6001B11")]
		[Address(RVA = "0x10B6AB4", Offset = "0x10B6AB4", VA = "0x10B6AB4", Slot = "5")]
		public void MultiplyH(byte[] x)
		{
		}

		[Token(Token = "0x6001B12")]
		[Address(RVA = "0x10B6CD8", Offset = "0x10B6CD8", VA = "0x10B6CD8")]
		public Tables8kGcmMultiplier()
		{
		}
	}
}
namespace Org.BouncyCastle.Crypto.Macs
{
	[Token(Token = "0x2000313")]
	public class CMac : IMac
	{
		[Token(Token = "0x4000E39")]
		private const byte CONSTANT_128 = 135;

		[Token(Token = "0x4000E3A")]
		private const byte CONSTANT_64 = 27;

		[Token(Token = "0x4000E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private byte[] ZEROES;

		[Token(Token = "0x4000E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private byte[] mac;

		[Token(Token = "0x4000E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private byte[] buf;

		[Token(Token = "0x4000E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int bufOff;

		[Token(Token = "0x4000E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private IBlockCipher cipher;

		[Token(Token = "0x4000E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int macSize;

		[Token(Token = "0x4000E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private byte[] L;

		[Token(Token = "0x4000E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private byte[] Lu;

		[Token(Token = "0x4000E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private byte[] Lu2;

		[Token(Token = "0x17000352")]
		public string AlgorithmName
		{
			[Token(Token = "0x6001B15")]
			[Address(RVA = "0x10A7D2C", Offset = "0x10A7D2C", VA = "0x10A7D2C", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001B13")]
		[Address(RVA = "0x10A7718", Offset = "0x10A7718", VA = "0x10A7718")]
		public CMac(IBlockCipher cipher)
		{
		}

		[Token(Token = "0x6001B14")]
		[Address(RVA = "0x10A77E4", Offset = "0x10A77E4", VA = "0x10A77E4")]
		public CMac(IBlockCipher cipher, int macSizeInBits)
		{
		}

		[Token(Token = "0x6001B16")]
		[Address(RVA = "0x10A7DDC", Offset = "0x10A7DDC", VA = "0x10A7DDC")]
		private static int ShiftLeft(byte[] block, byte[] output)
		{
			return default(int);
		}

		[Token(Token = "0x6001B17")]
		[Address(RVA = "0x10A7E70", Offset = "0x10A7E70", VA = "0x10A7E70")]
		private static byte[] DoubleLu(byte[] input)
		{
			return null;
		}

		[Token(Token = "0x6001B18")]
		[Address(RVA = "0x10A7F34", Offset = "0x10A7F34", VA = "0x10A7F34", Slot = "4")]
		public void Init(ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001B19")]
		[Address(RVA = "0x10A8214", Offset = "0x10A8214", VA = "0x10A8214", Slot = "6")]
		public int GetMacSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001B1A")]
		[Address(RVA = "0x10A821C", Offset = "0x10A821C", VA = "0x10A821C", Slot = "7")]
		public void Update(byte input)
		{
		}

		[Token(Token = "0x6001B1B")]
		[Address(RVA = "0x10A8354", Offset = "0x10A8354", VA = "0x10A8354", Slot = "8")]
		public void BlockUpdate(byte[] inBytes, int inOff, int len)
		{
		}

		[Token(Token = "0x6001B1C")]
		[Address(RVA = "0x10A85F8", Offset = "0x10A85F8", VA = "0x10A85F8", Slot = "9")]
		public int DoFinal(byte[] outBytes, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001B1D")]
		[Address(RVA = "0x10A8144", Offset = "0x10A8144", VA = "0x10A8144", Slot = "10")]
		public void Reset()
		{
		}
	}
	[Token(Token = "0x2000314")]
	public class CbcBlockCipherMac : IMac
	{
		[Token(Token = "0x4000E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private byte[] buf;

		[Token(Token = "0x4000E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int bufOff;

		[Token(Token = "0x4000E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private IBlockCipher cipher;

		[Token(Token = "0x4000E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private IBlockCipherPadding padding;

		[Token(Token = "0x4000E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int macSize;

		[Token(Token = "0x17000353")]
		public string AlgorithmName
		{
			[Token(Token = "0x6001B22")]
			[Address(RVA = "0x10A8B7C", Offset = "0x10A8B7C", VA = "0x10A8B7C", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001B1E")]
		[Address(RVA = "0x10A8834", Offset = "0x10A8834", VA = "0x10A8834")]
		public CbcBlockCipherMac(IBlockCipher cipher)
		{
		}

		[Token(Token = "0x6001B1F")]
		[Address(RVA = "0x10A8A8C", Offset = "0x10A8A8C", VA = "0x10A8A8C")]
		public CbcBlockCipherMac(IBlockCipher cipher, IBlockCipherPadding padding)
		{
		}

		[Token(Token = "0x6001B20")]
		[Address(RVA = "0x10A8B74", Offset = "0x10A8B74", VA = "0x10A8B74")]
		public CbcBlockCipherMac(IBlockCipher cipher, int macSizeInBits)
		{
		}

		[Token(Token = "0x6001B21")]
		[Address(RVA = "0x10A8918", Offset = "0x10A8918", VA = "0x10A8918")]
		public CbcBlockCipherMac(IBlockCipher cipher, int macSizeInBits, IBlockCipherPadding padding)
		{
		}

		[Token(Token = "0x6001B23")]
		[Address(RVA = "0x10A8C2C", Offset = "0x10A8C2C", VA = "0x10A8C2C", Slot = "4")]
		public void Init(ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001B24")]
		[Address(RVA = "0x10A8DCC", Offset = "0x10A8DCC", VA = "0x10A8DCC", Slot = "6")]
		public int GetMacSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001B25")]
		[Address(RVA = "0x10A8DD4", Offset = "0x10A8DD4", VA = "0x10A8DD4", Slot = "7")]
		public void Update(byte input)
		{
		}

		[Token(Token = "0x6001B26")]
		[Address(RVA = "0x10A8F00", Offset = "0x10A8F00", VA = "0x10A8F00", Slot = "8")]
		public void BlockUpdate(byte[] input, int inOff, int len)
		{
		}

		[Token(Token = "0x6001B27")]
		[Address(RVA = "0x10A91A4", Offset = "0x10A91A4", VA = "0x10A91A4", Slot = "9")]
		public int DoFinal(byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001B28")]
		[Address(RVA = "0x10A8CFC", Offset = "0x10A8CFC", VA = "0x10A8CFC", Slot = "10")]
		public void Reset()
		{
		}
	}
	[Token(Token = "0x2000315")]
	internal class MacCFBBlockCipher : IBlockCipher
	{
		[Token(Token = "0x4000E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private byte[] IV;

		[Token(Token = "0x4000E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private byte[] cfbV;

		[Token(Token = "0x4000E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private byte[] cfbOutV;

		[Token(Token = "0x4000E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly int blockSize;

		[Token(Token = "0x4000E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly IBlockCipher cipher;

		[Token(Token = "0x17000354")]
		public string AlgorithmName
		{
			[Token(Token = "0x6001B2B")]
			[Address(RVA = "0x10A9A0C", Offset = "0x10A9A0C", VA = "0x10A9A0C", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000355")]
		public bool IsPartialBlockOkay
		{
			[Token(Token = "0x6001B2C")]
			[Address(RVA = "0x10AD0B0", Offset = "0x10AD0B0", VA = "0x10AD0B0", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001B29")]
		[Address(RVA = "0x10A9800", Offset = "0x10A9800", VA = "0x10A9800")]
		public MacCFBBlockCipher(IBlockCipher cipher, int bitBlockSize)
		{
		}

		[Token(Token = "0x6001B2A")]
		[Address(RVA = "0x10A9B84", Offset = "0x10A9B84", VA = "0x10A9B84", Slot = "5")]
		public void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001B2D")]
		[Address(RVA = "0x10AD0B8", Offset = "0x10AD0B8", VA = "0x10AD0B8", Slot = "6")]
		public int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001B2E")]
		[Address(RVA = "0x10A9D6C", Offset = "0x10A9D6C", VA = "0x10A9D6C", Slot = "8")]
		public int ProcessBlock(byte[] input, int inOff, byte[] outBytes, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001B2F")]
		[Address(RVA = "0x10AA374", Offset = "0x10AA374", VA = "0x10AA374", Slot = "9")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001B30")]
		[Address(RVA = "0x10AA2A0", Offset = "0x10AA2A0", VA = "0x10AA2A0")]
		public void GetMacBlock(byte[] mac)
		{
		}
	}
	[Token(Token = "0x2000316")]
	public class CfbBlockCipherMac : IMac
	{
		[Token(Token = "0x4000E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private byte[] mac;

		[Token(Token = "0x4000E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private byte[] Buffer;

		[Token(Token = "0x4000E50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int bufOff;

		[Token(Token = "0x4000E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private MacCFBBlockCipher cipher;

		[Token(Token = "0x4000E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private IBlockCipherPadding padding;

		[Token(Token = "0x4000E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int macSize;

		[Token(Token = "0x17000356")]
		public string AlgorithmName
		{
			[Token(Token = "0x6001B35")]
			[Address(RVA = "0x10A99F4", Offset = "0x10A99F4", VA = "0x10A99F4", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001B31")]
		[Address(RVA = "0x10A948C", Offset = "0x10A948C", VA = "0x10A948C")]
		public CfbBlockCipherMac(IBlockCipher cipher)
		{
		}

		[Token(Token = "0x6001B32")]
		[Address(RVA = "0x10A970C", Offset = "0x10A970C", VA = "0x10A970C")]
		public CfbBlockCipherMac(IBlockCipher cipher, IBlockCipherPadding padding)
		{
		}

		[Token(Token = "0x6001B33")]
		[Address(RVA = "0x10A97F8", Offset = "0x10A97F8", VA = "0x10A97F8")]
		public CfbBlockCipherMac(IBlockCipher cipher, int cfbBitSize, int macSizeInBits)
		{
		}

		[Token(Token = "0x6001B34")]
		[Address(RVA = "0x10A9574", Offset = "0x10A9574", VA = "0x10A9574")]
		public CfbBlockCipherMac(IBlockCipher cipher, int cfbBitSize, int macSizeInBits, IBlockCipherPadding padding)
		{
		}

		[Token(Token = "0x6001B36")]
		[Address(RVA = "0x10A9B08", Offset = "0x10A9B08", VA = "0x10A9B08", Slot = "4")]
		public void Init(ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001B37")]
		[Address(RVA = "0x10A9CCC", Offset = "0x10A9CCC", VA = "0x10A9CCC", Slot = "6")]
		public int GetMacSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001B38")]
		[Address(RVA = "0x10A9CD4", Offset = "0x10A9CD4", VA = "0x10A9CD4", Slot = "7")]
		public void Update(byte input)
		{
		}

		[Token(Token = "0x6001B39")]
		[Address(RVA = "0x10A9FC4", Offset = "0x10A9FC4", VA = "0x10A9FC4", Slot = "8")]
		public void BlockUpdate(byte[] input, int inOff, int len)
		{
		}

		[Token(Token = "0x6001B3A")]
		[Address(RVA = "0x10AA120", Offset = "0x10AA120", VA = "0x10AA120", Slot = "9")]
		public int DoFinal(byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001B3B")]
		[Address(RVA = "0x10A9B40", Offset = "0x10A9B40", VA = "0x10A9B40", Slot = "10")]
		public void Reset()
		{
		}
	}
	[Token(Token = "0x2000317")]
	public class Gost28147Mac : IMac
	{
		[Token(Token = "0x4000E54")]
		private const int blockSize = 8;

		[Token(Token = "0x4000E55")]
		private const int macSize = 4;

		[Token(Token = "0x4000E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int bufOff;

		[Token(Token = "0x4000E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private byte[] buf;

		[Token(Token = "0x4000E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private byte[] mac;

		[Token(Token = "0x4000E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool firstStep;

		[Token(Token = "0x4000E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int[] workingKey;

		[Token(Token = "0x4000E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private byte[] S;

		[Token(Token = "0x17000357")]
		public string AlgorithmName
		{
			[Token(Token = "0x6001B3F")]
			[Address(RVA = "0x10AA880", Offset = "0x10AA880", VA = "0x10AA880", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001B3C")]
		[Address(RVA = "0x10AA440", Offset = "0x10AA440", VA = "0x10AA440")]
		public Gost28147Mac()
		{
		}

		[Token(Token = "0x6001B3D")]
		[Address(RVA = "0x10AA4F0", Offset = "0x10AA4F0", VA = "0x10AA4F0")]
		private static int[] generateWorkingKey(byte[] userKey)
		{
			return null;
		}

		[Token(Token = "0x6001B3E")]
		[Address(RVA = "0x10AA674", Offset = "0x10AA674", VA = "0x10AA674", Slot = "4")]
		public void Init(ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001B40")]
		[Address(RVA = "0x10AA8C8", Offset = "0x10AA8C8", VA = "0x10AA8C8", Slot = "6")]
		public int GetMacSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001B41")]
		[Address(RVA = "0x10AA8D0", Offset = "0x10AA8D0", VA = "0x10AA8D0")]
		private int gost28147_mainStep(int n1, int key)
		{
			return default(int);
		}

		[Token(Token = "0x6001B42")]
		[Address(RVA = "0x10AA9D8", Offset = "0x10AA9D8", VA = "0x10AA9D8")]
		private void gost28147MacFunc(int[] workingKey, byte[] input, int inOff, byte[] output, int outOff)
		{
		}

		[Token(Token = "0x6001B43")]
		[Address(RVA = "0x10AA5F4", Offset = "0x10AA5F4", VA = "0x10AA5F4")]
		private static int bytesToint(byte[] input, int inOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001B44")]
		[Address(RVA = "0x10AAAC8", Offset = "0x10AAAC8", VA = "0x10AAAC8")]
		private static void intTobytes(int num, byte[] output, int outOff)
		{
		}

		[Token(Token = "0x6001B45")]
		[Address(RVA = "0x10AAB54", Offset = "0x10AAB54", VA = "0x10AAB54")]
		private static byte[] CM5func(byte[] buf, int bufOff, byte[] mac)
		{
			return null;
		}

		[Token(Token = "0x6001B46")]
		[Address(RVA = "0x10AAC48", Offset = "0x10AAC48", VA = "0x10AAC48", Slot = "7")]
		public void Update(byte input)
		{
		}

		[Token(Token = "0x6001B47")]
		[Address(RVA = "0x10AAD64", Offset = "0x10AAD64", VA = "0x10AAD64", Slot = "8")]
		public void BlockUpdate(byte[] input, int inOff, int len)
		{
		}

		[Token(Token = "0x6001B48")]
		[Address(RVA = "0x10AAF68", Offset = "0x10AAF68", VA = "0x10AAF68", Slot = "9")]
		public int DoFinal(byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001B49")]
		[Address(RVA = "0x10AA83C", Offset = "0x10AA83C", VA = "0x10AA83C", Slot = "10")]
		public void Reset()
		{
		}
	}
	[Token(Token = "0x2000318")]
	public class HMac : IMac
	{
		[Token(Token = "0x4000E5C")]
		private const byte IPAD = 54;

		[Token(Token = "0x4000E5D")]
		private const byte OPAD = 92;

		[Token(Token = "0x4000E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IDigest digest;

		[Token(Token = "0x4000E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly int digestSize;

		[Token(Token = "0x4000E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private readonly int blockLength;

		[Token(Token = "0x4000E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private IMemoable ipadState;

		[Token(Token = "0x4000E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private IMemoable opadState;

		[Token(Token = "0x4000E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly byte[] inputPad;

		[Token(Token = "0x4000E64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly byte[] outputBuf;

		[Token(Token = "0x17000358")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001B4B")]
			[Address(RVA = "0x10AB228", Offset = "0x10AB228", VA = "0x10AB228", Slot = "11")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001B4A")]
		[Address(RVA = "0x10AB0C0", Offset = "0x10AB0C0", VA = "0x10AB0C0")]
		public HMac(IDigest digest)
		{
		}

		[Token(Token = "0x6001B4C")]
		[Address(RVA = "0x10AB2EC", Offset = "0x10AB2EC", VA = "0x10AB2EC", Slot = "12")]
		public virtual IDigest GetUnderlyingDigest()
		{
			return null;
		}

		[Token(Token = "0x6001B4D")]
		[Address(RVA = "0x10AB2F4", Offset = "0x10AB2F4", VA = "0x10AB2F4", Slot = "13")]
		public virtual void Init(ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001B4E")]
		[Address(RVA = "0x10AB8A0", Offset = "0x10AB8A0", VA = "0x10AB8A0", Slot = "14")]
		public virtual int GetMacSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001B4F")]
		[Address(RVA = "0x10AB8A8", Offset = "0x10AB8A8", VA = "0x10AB8A8", Slot = "15")]
		public virtual void Update(byte input)
		{
		}

		[Token(Token = "0x6001B50")]
		[Address(RVA = "0x10AB96C", Offset = "0x10AB96C", VA = "0x10AB96C", Slot = "16")]
		public virtual void BlockUpdate(byte[] input, int inOff, int len)
		{
		}

		[Token(Token = "0x6001B51")]
		[Address(RVA = "0x10ABA48", Offset = "0x10ABA48", VA = "0x10ABA48", Slot = "17")]
		public virtual int DoFinal(byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001B52")]
		[Address(RVA = "0x10ABF40", Offset = "0x10ABF40", VA = "0x10ABF40", Slot = "18")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x6001B53")]
		[Address(RVA = "0x10AB844", Offset = "0x10AB844", VA = "0x10AB844")]
		private static void XorPad(byte[] pad, int len, byte n)
		{
		}
	}
	[Token(Token = "0x2000319")]
	public class ISO9797Alg3Mac : IMac
	{
		[Token(Token = "0x4000E65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private byte[] mac;

		[Token(Token = "0x4000E66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private byte[] buf;

		[Token(Token = "0x4000E67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int bufOff;

		[Token(Token = "0x4000E68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private IBlockCipher cipher;

		[Token(Token = "0x4000E69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private IBlockCipherPadding padding;

		[Token(Token = "0x4000E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int macSize;

		[Token(Token = "0x4000E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private KeyParameter lastKey2;

		[Token(Token = "0x4000E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private KeyParameter lastKey3;

		[Token(Token = "0x17000359")]
		public string AlgorithmName
		{
			[Token(Token = "0x6001B58")]
			[Address(RVA = "0x10AC464", Offset = "0x10AC464", VA = "0x10AC464", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001B54")]
		[Address(RVA = "0x10AC080", Offset = "0x10AC080", VA = "0x10AC080")]
		public ISO9797Alg3Mac(IBlockCipher cipher)
		{
		}

		[Token(Token = "0x6001B55")]
		[Address(RVA = "0x10AC388", Offset = "0x10AC388", VA = "0x10AC388")]
		public ISO9797Alg3Mac(IBlockCipher cipher, IBlockCipherPadding padding)
		{
		}

		[Token(Token = "0x6001B56")]
		[Address(RVA = "0x10AC45C", Offset = "0x10AC45C", VA = "0x10AC45C")]
		public ISO9797Alg3Mac(IBlockCipher cipher, int macSizeInBits)
		{
		}

		[Token(Token = "0x6001B57")]
		[Address(RVA = "0x10AC150", Offset = "0x10AC150", VA = "0x10AC150")]
		public ISO9797Alg3Mac(IBlockCipher cipher, int macSizeInBits, IBlockCipherPadding padding)
		{
		}

		[Token(Token = "0x6001B59")]
		[Address(RVA = "0x10AC4AC", Offset = "0x10AC4AC", VA = "0x10AC4AC", Slot = "4")]
		public void Init(ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001B5A")]
		[Address(RVA = "0x10AC948", Offset = "0x10AC948", VA = "0x10AC948", Slot = "6")]
		public int GetMacSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001B5B")]
		[Address(RVA = "0x10AC950", Offset = "0x10AC950", VA = "0x10AC950", Slot = "7")]
		public void Update(byte input)
		{
		}

		[Token(Token = "0x6001B5C")]
		[Address(RVA = "0x10ACA88", Offset = "0x10ACA88", VA = "0x10ACA88", Slot = "8")]
		public void BlockUpdate(byte[] input, int inOff, int len)
		{
		}

		[Token(Token = "0x6001B5D")]
		[Address(RVA = "0x10ACD2C", Offset = "0x10ACD2C", VA = "0x10ACD2C", Slot = "9")]
		public int DoFinal(byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001B5E")]
		[Address(RVA = "0x10AC878", Offset = "0x10AC878", VA = "0x10AC878", Slot = "10")]
		public void Reset()
		{
		}
	}
	[Token(Token = "0x200031A")]
	public class Poly1305 : IMac
	{
		[Token(Token = "0x4000E6D")]
		private const int BLOCK_SIZE = 16;

		[Token(Token = "0x4000E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IBlockCipher cipher;

		[Token(Token = "0x4000E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly byte[] singleByte;

		[Token(Token = "0x4000E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private uint r0;

		[Token(Token = "0x4000E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private uint r1;

		[Token(Token = "0x4000E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private uint r2;

		[Token(Token = "0x4000E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private uint r3;

		[Token(Token = "0x4000E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private uint r4;

		[Token(Token = "0x4000E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private uint s1;

		[Token(Token = "0x4000E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private uint s2;

		[Token(Token = "0x4000E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private uint s3;

		[Token(Token = "0x4000E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private uint s4;

		[Token(Token = "0x4000E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private uint k0;

		[Token(Token = "0x4000E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private uint k1;

		[Token(Token = "0x4000E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private uint k2;

		[Token(Token = "0x4000E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private uint k3;

		[Token(Token = "0x4000E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private byte[] currentBlock;

		[Token(Token = "0x4000E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int currentBlockOffset;

		[Token(Token = "0x4000E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private uint h0;

		[Token(Token = "0x4000E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private uint h1;

		[Token(Token = "0x4000E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private uint h2;

		[Token(Token = "0x4000E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private uint h3;

		[Token(Token = "0x4000E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private uint h4;

		[Token(Token = "0x1700035A")]
		public string AlgorithmName
		{
			[Token(Token = "0x6001B63")]
			[Address(RVA = "0x10AD6FC", Offset = "0x10AD6FC", VA = "0x10AD6FC", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001B5F")]
		[Address(RVA = "0x10AD0C0", Offset = "0x10AD0C0", VA = "0x10AD0C0")]
		public Poly1305()
		{
		}

		[Token(Token = "0x6001B60")]
		[Address(RVA = "0x10AD138", Offset = "0x10AD138", VA = "0x10AD138")]
		public Poly1305(IBlockCipher cipher)
		{
		}

		[Token(Token = "0x6001B61")]
		[Address(RVA = "0x10AD274", Offset = "0x10AD274", VA = "0x10AD274", Slot = "4")]
		public void Init(ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001B62")]
		[Address(RVA = "0x10AD3F0", Offset = "0x10AD3F0", VA = "0x10AD3F0")]
		private void SetKey(byte[] key, byte[] nonce)
		{
		}

		[Token(Token = "0x6001B64")]
		[Address(RVA = "0x10AD7DC", Offset = "0x10AD7DC", VA = "0x10AD7DC", Slot = "6")]
		public int GetMacSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001B65")]
		[Address(RVA = "0x10AD7E4", Offset = "0x10AD7E4", VA = "0x10AD7E4", Slot = "7")]
		public void Update(byte input)
		{
		}

		[Token(Token = "0x6001B66")]
		[Address(RVA = "0x10AD824", Offset = "0x10AD824", VA = "0x10AD824", Slot = "8")]
		public void BlockUpdate(byte[] input, int inOff, int len)
		{
		}

		[Token(Token = "0x6001B67")]
		[Address(RVA = "0x10AD91C", Offset = "0x10AD91C", VA = "0x10AD91C")]
		private void processBlock()
		{
		}

		[Token(Token = "0x6001B68")]
		[Address(RVA = "0x10ADB4C", Offset = "0x10ADB4C", VA = "0x10ADB4C", Slot = "9")]
		public int DoFinal(byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001B69")]
		[Address(RVA = "0x10AD6F0", Offset = "0x10AD6F0", VA = "0x10AD6F0", Slot = "10")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001B6A")]
		[Address(RVA = "0x10ADB44", Offset = "0x10ADB44", VA = "0x10ADB44")]
		private static ulong mul32x32_64(uint i1, uint i2)
		{
			return default(ulong);
		}
	}
	[Token(Token = "0x200031B")]
	public class SipHash : IMac
	{
		[Token(Token = "0x4000E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly int c;

		[Token(Token = "0x4000E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		protected readonly int d;

		[Token(Token = "0x4000E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected long k0;

		[Token(Token = "0x4000E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected long k1;

		[Token(Token = "0x4000E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected long v0;

		[Token(Token = "0x4000E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected long v1;

		[Token(Token = "0x4000E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected long v2;

		[Token(Token = "0x4000E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected long v3;

		[Token(Token = "0x4000E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected long m;

		[Token(Token = "0x4000E8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected int wordPos;

		[Token(Token = "0x4000E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		protected int wordCount;

		[Token(Token = "0x1700035B")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001B6D")]
			[Address(RVA = "0x10ADDD8", Offset = "0x10ADDD8", VA = "0x10ADDD8", Slot = "11")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001B6B")]
		[Address(RVA = "0x10ADD70", Offset = "0x10ADD70", VA = "0x10ADD70")]
		public SipHash()
		{
		}

		[Token(Token = "0x6001B6C")]
		[Address(RVA = "0x10ADDA0", Offset = "0x10ADDA0", VA = "0x10ADDA0")]
		public SipHash(int c, int d)
		{
		}

		[Token(Token = "0x6001B6E")]
		[Address(RVA = "0x10ADF58", Offset = "0x10ADF58", VA = "0x10ADF58", Slot = "12")]
		public virtual int GetMacSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001B6F")]
		[Address(RVA = "0x10ADF60", Offset = "0x10ADF60", VA = "0x10ADF60", Slot = "13")]
		public virtual void Init(ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001B70")]
		[Address(RVA = "0x10AE0A4", Offset = "0x10AE0A4", VA = "0x10AE0A4", Slot = "14")]
		public virtual void Update(byte input)
		{
		}

		[Token(Token = "0x6001B71")]
		[Address(RVA = "0x10AE0F4", Offset = "0x10AE0F4", VA = "0x10AE0F4", Slot = "15")]
		public virtual void BlockUpdate(byte[] input, int offset, int length)
		{
		}

		[Token(Token = "0x6001B72")]
		[Address(RVA = "0x10AE2C4", Offset = "0x10AE2C4", VA = "0x10AE2C4", Slot = "16")]
		public virtual long DoFinal()
		{
			return default(long);
		}

		[Token(Token = "0x6001B73")]
		[Address(RVA = "0x10AE370", Offset = "0x10AE370", VA = "0x10AE370", Slot = "17")]
		public virtual int DoFinal(byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001B74")]
		[Address(RVA = "0x10AE3B8", Offset = "0x10AE3B8", VA = "0x10AE3B8", Slot = "18")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x6001B75")]
		[Address(RVA = "0x10AE41C", Offset = "0x10AE41C", VA = "0x10AE41C", Slot = "19")]
		protected virtual void ProcessMessageWord()
		{
		}

		[Token(Token = "0x6001B76")]
		[Address(RVA = "0x10AE474", Offset = "0x10AE474", VA = "0x10AE474", Slot = "20")]
		protected virtual void ApplySipRounds(int n)
		{
		}

		[Token(Token = "0x6001B77")]
		[Address(RVA = "0x10AE4C0", Offset = "0x10AE4C0", VA = "0x10AE4C0")]
		protected static long RotateLeft(long x, int n)
		{
			return default(long);
		}
	}
	[Token(Token = "0x200031C")]
	public class VmpcMac : IMac
	{
		[Token(Token = "0x4000E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private byte g;

		[Token(Token = "0x4000E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private byte n;

		[Token(Token = "0x4000E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private byte[] P;

		[Token(Token = "0x4000E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private byte s;

		[Token(Token = "0x4000E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private byte[] T;

		[Token(Token = "0x4000E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private byte[] workingIV;

		[Token(Token = "0x4000E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private byte[] workingKey;

		[Token(Token = "0x4000E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private byte x1;

		[Token(Token = "0x4000E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		private byte x2;

		[Token(Token = "0x4000E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		private byte x3;

		[Token(Token = "0x4000E99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x43")]
		private byte x4;

		[Token(Token = "0x1700035C")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001B79")]
			[Address(RVA = "0x10AE94C", Offset = "0x10AE94C", VA = "0x10AE94C", Slot = "12")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001B78")]
		[Address(RVA = "0x10AE4CC", Offset = "0x10AE4CC", VA = "0x10AE4CC", Slot = "11")]
		public virtual int DoFinal(byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001B7A")]
		[Address(RVA = "0x10AE994", Offset = "0x10AE994", VA = "0x10AE994", Slot = "13")]
		public virtual int GetMacSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001B7B")]
		[Address(RVA = "0x10AE99C", Offset = "0x10AE99C", VA = "0x10AE99C", Slot = "14")]
		public virtual void Init(ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001B7C")]
		[Address(RVA = "0x10AEB28", Offset = "0x10AEB28", VA = "0x10AEB28")]
		private void initKey(byte[] keyBytes, byte[] ivBytes)
		{
		}

		[Token(Token = "0x6001B7D")]
		[Address(RVA = "0x10AED54", Offset = "0x10AED54", VA = "0x10AED54", Slot = "15")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x6001B7E")]
		[Address(RVA = "0x10AEE00", Offset = "0x10AEE00", VA = "0x10AEE00", Slot = "16")]
		public virtual void Update(byte input)
		{
		}

		[Token(Token = "0x6001B7F")]
		[Address(RVA = "0x10AF06C", Offset = "0x10AF06C", VA = "0x10AF06C", Slot = "17")]
		public virtual void BlockUpdate(byte[] input, int inOff, int len)
		{
		}

		[Token(Token = "0x6001B80")]
		[Address(RVA = "0x10AF174", Offset = "0x10AF174", VA = "0x10AF174")]
		public VmpcMac()
		{
		}
	}
}
namespace Org.BouncyCastle.Crypto.Generators
{
	[Token(Token = "0x200031D")]
	public class DHBasicKeyPairGenerator : IAsymmetricCipherKeyPairGenerator
	{
		[Token(Token = "0x4000E9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private DHKeyGenerationParameters param;

		[Token(Token = "0x6001B81")]
		[Address(RVA = "0x10A4F40", Offset = "0x10A4F40", VA = "0x10A4F40", Slot = "6")]
		public virtual void Init(KeyGenerationParameters parameters)
		{
		}

		[Token(Token = "0x6001B82")]
		[Address(RVA = "0x10A4FD0", Offset = "0x10A4FD0", VA = "0x10A4FD0", Slot = "7")]
		public virtual AsymmetricCipherKeyPair GenerateKeyPair()
		{
			return null;
		}

		[Token(Token = "0x6001B83")]
		[Address(RVA = "0x10A531C", Offset = "0x10A531C", VA = "0x10A531C")]
		public DHBasicKeyPairGenerator()
		{
		}
	}
	[Token(Token = "0x200031E")]
	internal class DHKeyGeneratorHelper
	{
		[Token(Token = "0x4000E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly DHKeyGeneratorHelper Instance;

		[Token(Token = "0x6001B84")]
		[Address(RVA = "0x10A5324", Offset = "0x10A5324", VA = "0x10A5324")]
		private DHKeyGeneratorHelper()
		{
		}

		[Token(Token = "0x6001B85")]
		[Address(RVA = "0x10A50EC", Offset = "0x10A50EC", VA = "0x10A50EC")]
		internal BigInteger CalculatePrivate(DHParameters dhParams, SecureRandom random)
		{
			return null;
		}

		[Token(Token = "0x6001B86")]
		[Address(RVA = "0x10A52EC", Offset = "0x10A52EC", VA = "0x10A52EC")]
		internal BigInteger CalculatePublic(DHParameters dhParams, BigInteger x)
		{
			return null;
		}
	}
	[Token(Token = "0x200031F")]
	public class DHKeyPairGenerator : IAsymmetricCipherKeyPairGenerator
	{
		[Token(Token = "0x4000E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private DHKeyGenerationParameters param;

		[Token(Token = "0x6001B88")]
		[Address(RVA = "0x10A5390", Offset = "0x10A5390", VA = "0x10A5390", Slot = "6")]
		public virtual void Init(KeyGenerationParameters parameters)
		{
		}

		[Token(Token = "0x6001B89")]
		[Address(RVA = "0x10A5420", Offset = "0x10A5420", VA = "0x10A5420", Slot = "7")]
		public virtual AsymmetricCipherKeyPair GenerateKeyPair()
		{
			return null;
		}

		[Token(Token = "0x6001B8A")]
		[Address(RVA = "0x10A553C", Offset = "0x10A553C", VA = "0x10A553C")]
		public DHKeyPairGenerator()
		{
		}
	}
	[Token(Token = "0x2000320")]
	internal class DHParametersHelper
	{
		[Token(Token = "0x4000E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly BigInteger Six;

		[Token(Token = "0x4000E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int[][] primeLists;

		[Token(Token = "0x4000E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly int[] primeProducts;

		[Token(Token = "0x4000EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly BigInteger[] BigPrimeProducts;

		[Token(Token = "0x6001B8B")]
		[Address(RVA = "0x10A5544", Offset = "0x10A5544", VA = "0x10A5544")]
		private static BigInteger[] ConstructBigPrimeProducts(int[] primeProducts)
		{
			return null;
		}

		[Token(Token = "0x6001B8C")]
		[Address(RVA = "0x10A5668", Offset = "0x10A5668", VA = "0x10A5668")]
		internal static BigInteger[] GenerateSafePrimes(int size, int certainty, SecureRandom random)
		{
			return null;
		}

		[Token(Token = "0x6001B8D")]
		[Address(RVA = "0x10A5B90", Offset = "0x10A5B90", VA = "0x10A5B90")]
		internal static BigInteger SelectGenerator(BigInteger p, BigInteger q, SecureRandom random)
		{
			return null;
		}

		[Token(Token = "0x6001B8E")]
		[Address(RVA = "0x10A5CA0", Offset = "0x10A5CA0", VA = "0x10A5CA0")]
		public DHParametersHelper()
		{
		}
	}
	[Token(Token = "0x2000321")]
	public class DsaKeyPairGenerator : IAsymmetricCipherKeyPairGenerator
	{
		[Token(Token = "0x4000EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly BigInteger One;

		[Token(Token = "0x4000EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private DsaKeyGenerationParameters param;

		[Token(Token = "0x6001B90")]
		[Address(RVA = "0x10A5D64", Offset = "0x10A5D64", VA = "0x10A5D64", Slot = "4")]
		public void Init(KeyGenerationParameters parameters)
		{
		}

		[Token(Token = "0x6001B91")]
		[Address(RVA = "0x10A5E30", Offset = "0x10A5E30", VA = "0x10A5E30", Slot = "5")]
		public AsymmetricCipherKeyPair GenerateKeyPair()
		{
			return null;
		}

		[Token(Token = "0x6001B92")]
		[Address(RVA = "0x10A5F58", Offset = "0x10A5F58", VA = "0x10A5F58")]
		private static BigInteger GeneratePrivateKey(BigInteger q, SecureRandom random)
		{
			return null;
		}

		[Token(Token = "0x6001B93")]
		[Address(RVA = "0x10A6054", Offset = "0x10A6054", VA = "0x10A6054")]
		private static BigInteger CalculatePublicKey(BigInteger p, BigInteger g, BigInteger x)
		{
			return null;
		}

		[Token(Token = "0x6001B94")]
		[Address(RVA = "0x10A607C", Offset = "0x10A607C", VA = "0x10A607C")]
		public DsaKeyPairGenerator()
		{
		}
	}
	[Token(Token = "0x2000322")]
	public class ECKeyPairGenerator : IAsymmetricCipherKeyPairGenerator
	{
		[Token(Token = "0x4000EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly string algorithm;

		[Token(Token = "0x4000EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ECDomainParameters parameters;

		[Token(Token = "0x4000EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private DerObjectIdentifier publicKeyParamSet;

		[Token(Token = "0x4000EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private SecureRandom random;

		[Token(Token = "0x6001B96")]
		[Address(RVA = "0x10A6100", Offset = "0x10A6100", VA = "0x10A6100")]
		public ECKeyPairGenerator()
		{
		}

		[Token(Token = "0x6001B97")]
		[Address(RVA = "0x10A6150", Offset = "0x10A6150", VA = "0x10A6150")]
		public ECKeyPairGenerator(string algorithm)
		{
		}

		[Token(Token = "0x6001B98")]
		[Address(RVA = "0x10A6218", Offset = "0x10A6218", VA = "0x10A6218", Slot = "4")]
		public void Init(KeyGenerationParameters parameters)
		{
		}

		[Token(Token = "0x6001B99")]
		[Address(RVA = "0x10A6568", Offset = "0x10A6568", VA = "0x10A6568", Slot = "5")]
		public AsymmetricCipherKeyPair GenerateKeyPair()
		{
			return null;
		}

		[Token(Token = "0x6001B9A")]
		[Address(RVA = "0x10A6820", Offset = "0x10A6820", VA = "0x10A6820", Slot = "6")]
		protected virtual ECMultiplier CreateBasePointMultiplier()
		{
			return null;
		}

		[Token(Token = "0x6001B9B")]
		[Address(RVA = "0x10A64E4", Offset = "0x10A64E4", VA = "0x10A64E4")]
		internal static X9ECParameters FindECCurveByOid(DerObjectIdentifier oid)
		{
			return null;
		}

		[Token(Token = "0x6001B9C")]
		[Address(RVA = "0x10A687C", Offset = "0x10A687C", VA = "0x10A687C")]
		internal static ECPublicKeyParameters GetCorrespondingPublicKey(ECPrivateKeyParameters privKey)
		{
			return null;
		}
	}
	[Token(Token = "0x2000323")]
	public class ElGamalKeyPairGenerator : IAsymmetricCipherKeyPairGenerator
	{
		[Token(Token = "0x4000EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ElGamalKeyGenerationParameters param;

		[Token(Token = "0x6001B9D")]
		[Address(RVA = "0x10A6964", Offset = "0x10A6964", VA = "0x10A6964", Slot = "4")]
		public void Init(KeyGenerationParameters parameters)
		{
		}

		[Token(Token = "0x6001B9E")]
		[Address(RVA = "0x10A69F4", Offset = "0x10A69F4", VA = "0x10A69F4", Slot = "5")]
		public AsymmetricCipherKeyPair GenerateKeyPair()
		{
			return null;
		}

		[Token(Token = "0x6001B9F")]
		[Address(RVA = "0x10A6B64", Offset = "0x10A6B64", VA = "0x10A6B64")]
		public ElGamalKeyPairGenerator()
		{
		}
	}
	[Token(Token = "0x2000324")]
	public class Poly1305KeyGenerator : CipherKeyGenerator
	{
		[Token(Token = "0x4000EA8")]
		private const byte R_MASK_LOW_2 = 252;

		[Token(Token = "0x4000EA9")]
		private const byte R_MASK_HIGH_4 = 15;

		[Token(Token = "0x6001BA0")]
		[Address(RVA = "0x10A6B6C", Offset = "0x10A6B6C", VA = "0x10A6B6C", Slot = "4")]
		protected override void engineInit(KeyGenerationParameters param)
		{
		}

		[Token(Token = "0x6001BA1")]
		[Address(RVA = "0x10A6B90", Offset = "0x10A6B90", VA = "0x10A6B90", Slot = "5")]
		protected override byte[] engineGenerateKey()
		{
			return null;
		}

		[Token(Token = "0x6001BA2")]
		[Address(RVA = "0x10A6BBC", Offset = "0x10A6BBC", VA = "0x10A6BBC")]
		public static void Clamp(byte[] key)
		{
		}

		[Token(Token = "0x6001BA3")]
		[Address(RVA = "0x10A6CA0", Offset = "0x10A6CA0", VA = "0x10A6CA0")]
		public static void CheckKey(byte[] key)
		{
		}

		[Token(Token = "0x6001BA4")]
		[Address(RVA = "0x10A6DD4", Offset = "0x10A6DD4", VA = "0x10A6DD4")]
		private static void checkMask(byte b, byte mask)
		{
		}

		[Token(Token = "0x6001BA5")]
		[Address(RVA = "0x10A6E68", Offset = "0x10A6E68", VA = "0x10A6E68")]
		public Poly1305KeyGenerator()
		{
		}
	}
	[Token(Token = "0x2000325")]
	public class RsaKeyPairGenerator : IAsymmetricCipherKeyPairGenerator
	{
		[Token(Token = "0x4000EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int[] SPECIAL_E_VALUES;

		[Token(Token = "0x4000EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int SPECIAL_E_HIGHEST;

		[Token(Token = "0x4000EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static readonly int SPECIAL_E_BITS;

		[Token(Token = "0x4000EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected static readonly BigInteger One;

		[Token(Token = "0x4000EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected static readonly BigInteger DefaultPublicExponent;

		[Token(Token = "0x4000EAF")]
		protected const int DefaultTests = 100;

		[Token(Token = "0x4000EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected RsaKeyGenerationParameters parameters;

		[Token(Token = "0x6001BA6")]
		[Address(RVA = "0x10A6E70", Offset = "0x10A6E70", VA = "0x10A6E70", Slot = "6")]
		public virtual void Init(KeyGenerationParameters parameters)
		{
		}

		[Token(Token = "0x6001BA7")]
		[Address(RVA = "0x10A6F68", Offset = "0x10A6F68", VA = "0x10A6F68", Slot = "7")]
		public virtual AsymmetricCipherKeyPair GenerateKeyPair()
		{
			return null;
		}

		[Token(Token = "0x6001BA8")]
		[Address(RVA = "0x10A72B0", Offset = "0x10A72B0", VA = "0x10A72B0", Slot = "8")]
		protected virtual BigInteger ChooseRandomPrime(int bitlength, BigInteger e)
		{
			return null;
		}

		[Token(Token = "0x6001BA9")]
		[Address(RVA = "0x10A74CC", Offset = "0x10A74CC", VA = "0x10A74CC")]
		public RsaKeyPairGenerator()
		{
		}
	}
}
namespace Org.BouncyCastle.Crypto.Engines
{
	[Token(Token = "0x2000326")]
	public class AesEngine : IBlockCipher
	{
		[Token(Token = "0x4000EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly byte[] S;

		[Token(Token = "0x4000EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly byte[] Si;

		[Token(Token = "0x4000EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly byte[] rcon;

		[Token(Token = "0x4000EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly uint[] T0;

		[Token(Token = "0x4000EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly uint[] Tinv0;

		[Token(Token = "0x4000EB6")]
		private const uint m1 = 2155905152u;

		[Token(Token = "0x4000EB7")]
		private const uint m2 = 2139062143u;

		[Token(Token = "0x4000EB8")]
		private const uint m3 = 27u;

		[Token(Token = "0x4000EB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int ROUNDS;

		[Token(Token = "0x4000EBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private uint[][] WorkingKey;

		[Token(Token = "0x4000EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private uint C0;

		[Token(Token = "0x4000EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private uint C1;

		[Token(Token = "0x4000EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private uint C2;

		[Token(Token = "0x4000EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private uint C3;

		[Token(Token = "0x4000EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool forEncryption;

		[Token(Token = "0x4000EC0")]
		private const int BLOCK_SIZE = 16;

		[Token(Token = "0x1700035D")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001BB2")]
			[Address(RVA = "0x1518D70", Offset = "0x1518D70", VA = "0x1518D70", Slot = "11")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700035E")]
		public virtual bool IsPartialBlockOkay
		{
			[Token(Token = "0x6001BB3")]
			[Address(RVA = "0x1518DB8", Offset = "0x1518DB8", VA = "0x1518DB8", Slot = "12")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001BAB")]
		[Address(RVA = "0x1518634", Offset = "0x1518634", VA = "0x1518634")]
		private static uint Shift(uint r, int shift)
		{
			return default(uint);
		}

		[Token(Token = "0x6001BAC")]
		[Address(RVA = "0x151863C", Offset = "0x151863C", VA = "0x151863C")]
		private static uint FFmulX(uint x)
		{
			return default(uint);
		}

		[Token(Token = "0x6001BAD")]
		[Address(RVA = "0x151865C", Offset = "0x151865C", VA = "0x151865C")]
		private static uint Inv_Mcol(uint x)
		{
			return default(uint);
		}

		[Token(Token = "0x6001BAE")]
		[Address(RVA = "0x1518728", Offset = "0x1518728", VA = "0x1518728")]
		private static uint SubWord(uint x)
		{
			return default(uint);
		}

		[Token(Token = "0x6001BAF")]
		[Address(RVA = "0x1518804", Offset = "0x1518804", VA = "0x1518804")]
		private uint[][] GenerateWorkingKey(byte[] key, bool forEncryption)
		{
			return null;
		}

		[Token(Token = "0x6001BB0")]
		[Address(RVA = "0x1518C34", Offset = "0x1518C34", VA = "0x1518C34")]
		public AesEngine()
		{
		}

		[Token(Token = "0x6001BB1")]
		[Address(RVA = "0x1518C3C", Offset = "0x1518C3C", VA = "0x1518C3C", Slot = "10")]
		public virtual void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001BB4")]
		[Address(RVA = "0x1518DC0", Offset = "0x1518DC0", VA = "0x1518DC0", Slot = "13")]
		public virtual int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001BB5")]
		[Address(RVA = "0x1518DC8", Offset = "0x1518DC8", VA = "0x1518DC8", Slot = "14")]
		public virtual int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001BB6")]
		[Address(RVA = "0x151A210", Offset = "0x151A210", VA = "0x151A210", Slot = "15")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x6001BB7")]
		[Address(RVA = "0x1518EEC", Offset = "0x1518EEC", VA = "0x1518EEC")]
		private void UnPackBlock(byte[] bytes, int off)
		{
		}

		[Token(Token = "0x6001BB8")]
		[Address(RVA = "0x151A1A0", Offset = "0x151A1A0", VA = "0x151A1A0")]
		private void PackBlock(byte[] bytes, int off)
		{
		}

		[Token(Token = "0x6001BB9")]
		[Address(RVA = "0x1518F68", Offset = "0x1518F68", VA = "0x1518F68")]
		private void EncryptBlock(uint[][] KW)
		{
		}

		[Token(Token = "0x6001BBA")]
		[Address(RVA = "0x1519878", Offset = "0x1519878", VA = "0x1519878")]
		private void DecryptBlock(uint[][] KW)
		{
		}
	}
	[Token(Token = "0x2000327")]
	public class AesFastEngine : IBlockCipher
	{
		[Token(Token = "0x4000EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly byte[] S;

		[Token(Token = "0x4000EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly byte[] Si;

		[Token(Token = "0x4000EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly byte[] rcon;

		[Token(Token = "0x4000EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly uint[] T0;

		[Token(Token = "0x4000EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly uint[] T1;

		[Token(Token = "0x4000EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static readonly uint[] T2;

		[Token(Token = "0x4000EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static readonly uint[] T3;

		[Token(Token = "0x4000EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static readonly uint[] Tinv0;

		[Token(Token = "0x4000EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static readonly uint[] Tinv1;

		[Token(Token = "0x4000ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static readonly uint[] Tinv2;

		[Token(Token = "0x4000ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static readonly uint[] Tinv3;

		[Token(Token = "0x4000ECC")]
		private const uint m1 = 2155905152u;

		[Token(Token = "0x4000ECD")]
		private const uint m2 = 2139062143u;

		[Token(Token = "0x4000ECE")]
		private const uint m3 = 27u;

		[Token(Token = "0x4000ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int ROUNDS;

		[Token(Token = "0x4000ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private uint[][] WorkingKey;

		[Token(Token = "0x4000ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private uint C0;

		[Token(Token = "0x4000ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private uint C1;

		[Token(Token = "0x4000ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private uint C2;

		[Token(Token = "0x4000ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private uint C3;

		[Token(Token = "0x4000ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool forEncryption;

		[Token(Token = "0x4000ED6")]
		private const int BLOCK_SIZE = 16;

		[Token(Token = "0x1700035F")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001BC3")]
			[Address(RVA = "0x151AAAC", Offset = "0x151AAAC", VA = "0x151AAAC", Slot = "11")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000360")]
		public virtual bool IsPartialBlockOkay
		{
			[Token(Token = "0x6001BC4")]
			[Address(RVA = "0x151AAF4", Offset = "0x151AAF4", VA = "0x151AAF4", Slot = "12")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001BBC")]
		[Address(RVA = "0x151A360", Offset = "0x151A360", VA = "0x151A360")]
		private static uint Shift(uint r, int shift)
		{
			return default(uint);
		}

		[Token(Token = "0x6001BBD")]
		[Address(RVA = "0x151A368", Offset = "0x151A368", VA = "0x151A368")]
		private static uint FFmulX(uint x)
		{
			return default(uint);
		}

		[Token(Token = "0x6001BBE")]
		[Address(RVA = "0x151A388", Offset = "0x151A388", VA = "0x151A388")]
		private static uint Inv_Mcol(uint x)
		{
			return default(uint);
		}

		[Token(Token = "0x6001BBF")]
		[Address(RVA = "0x151A454", Offset = "0x151A454", VA = "0x151A454")]
		private static uint SubWord(uint x)
		{
			return default(uint);
		}

		[Token(Token = "0x6001BC0")]
		[Address(RVA = "0x151A530", Offset = "0x151A530", VA = "0x151A530")]
		private uint[][] GenerateWorkingKey(byte[] key, bool forEncryption)
		{
			return null;
		}

		[Token(Token = "0x6001BC1")]
		[Address(RVA = "0x151A970", Offset = "0x151A970", VA = "0x151A970")]
		public AesFastEngine()
		{
		}

		[Token(Token = "0x6001BC2")]
		[Address(RVA = "0x151A978", Offset = "0x151A978", VA = "0x151A978", Slot = "10")]
		public virtual void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001BC5")]
		[Address(RVA = "0x151AAFC", Offset = "0x151AAFC", VA = "0x151AAFC", Slot = "13")]
		public virtual int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001BC6")]
		[Address(RVA = "0x151AB04", Offset = "0x151AB04", VA = "0x151AB04", Slot = "14")]
		public virtual int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001BC7")]
		[Address(RVA = "0x151BF60", Offset = "0x151BF60", VA = "0x151BF60", Slot = "15")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x6001BC8")]
		[Address(RVA = "0x151AC28", Offset = "0x151AC28", VA = "0x151AC28")]
		private void UnPackBlock(byte[] bytes, int off)
		{
		}

		[Token(Token = "0x6001BC9")]
		[Address(RVA = "0x151BEF0", Offset = "0x151BEF0", VA = "0x151BEF0")]
		private void PackBlock(byte[] bytes, int off)
		{
		}

		[Token(Token = "0x6001BCA")]
		[Address(RVA = "0x151ACA4", Offset = "0x151ACA4", VA = "0x151ACA4")]
		private void EncryptBlock(uint[][] KW)
		{
		}

		[Token(Token = "0x6001BCB")]
		[Address(RVA = "0x151B5C0", Offset = "0x151B5C0", VA = "0x151B5C0")]
		private void DecryptBlock(uint[][] KW)
		{
		}
	}
	[Token(Token = "0x2000328")]
	public class AesWrapEngine : Rfc3394WrapEngine
	{
		[Token(Token = "0x6001BCD")]
		[Address(RVA = "0x151C1D0", Offset = "0x151C1D0", VA = "0x151C1D0")]
		public AesWrapEngine()
		{
		}
	}
	[Token(Token = "0x2000329")]
	public sealed class BlowfishEngine : IBlockCipher
	{
		[Token(Token = "0x4000ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly uint[] KP;

		[Token(Token = "0x4000ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly uint[] KS0;

		[Token(Token = "0x4000ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly uint[] KS1;

		[Token(Token = "0x4000EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly uint[] KS2;

		[Token(Token = "0x4000EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly uint[] KS3;

		[Token(Token = "0x4000EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static readonly int ROUNDS;

		[Token(Token = "0x4000EDD")]
		private const int BLOCK_SIZE = 8;

		[Token(Token = "0x4000EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private static readonly int SBOX_SK;

		[Token(Token = "0x4000EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static readonly int P_SZ;

		[Token(Token = "0x4000EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly uint[] S0;

		[Token(Token = "0x4000EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly uint[] S1;

		[Token(Token = "0x4000EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly uint[] S2;

		[Token(Token = "0x4000EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly uint[] S3;

		[Token(Token = "0x4000EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly uint[] P;

		[Token(Token = "0x4000EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool encrypting;

		[Token(Token = "0x4000EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private byte[] workingKey;

		[Token(Token = "0x17000361")]
		public string AlgorithmName
		{
			[Token(Token = "0x6001BD0")]
			[Address(RVA = "0x151C7BC", Offset = "0x151C7BC", VA = "0x151C7BC", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000362")]
		public bool IsPartialBlockOkay
		{
			[Token(Token = "0x6001BD1")]
			[Address(RVA = "0x151C804", Offset = "0x151C804", VA = "0x151C804", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001BCE")]
		[Address(RVA = "0x151C238", Offset = "0x151C238", VA = "0x151C238")]
		public BlowfishEngine()
		{
		}

		[Token(Token = "0x6001BCF")]
		[Address(RVA = "0x151C32C", Offset = "0x151C32C", VA = "0x151C32C", Slot = "5")]
		public void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001BD2")]
		[Address(RVA = "0x151C80C", Offset = "0x151C80C", VA = "0x151C80C", Slot = "8")]
		public int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001BD3")]
		[Address(RVA = "0x151CC9C", Offset = "0x151CC9C", VA = "0x151CC9C", Slot = "9")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001BD4")]
		[Address(RVA = "0x151CCA0", Offset = "0x151CCA0", VA = "0x151CCA0", Slot = "6")]
		public int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001BD5")]
		[Address(RVA = "0x151CCA8", Offset = "0x151CCA8", VA = "0x151CCA8")]
		private uint F(uint x)
		{
			return default(uint);
		}

		[Token(Token = "0x6001BD6")]
		[Address(RVA = "0x151CD54", Offset = "0x151CD54", VA = "0x151CD54")]
		private void ProcessTable(uint xl, uint xr, uint[] table)
		{
		}

		[Token(Token = "0x6001BD7")]
		[Address(RVA = "0x151C488", Offset = "0x151C488", VA = "0x151C488")]
		private void SetKey(byte[] key)
		{
		}

		[Token(Token = "0x6001BD8")]
		[Address(RVA = "0x151C930", Offset = "0x151C930", VA = "0x151C930")]
		private void EncryptBlock(byte[] src, int srcIndex, byte[] dst, int dstIndex)
		{
		}

		[Token(Token = "0x6001BD9")]
		[Address(RVA = "0x151CAF4", Offset = "0x151CAF4", VA = "0x151CAF4")]
		private void DecryptBlock(byte[] src, int srcIndex, byte[] dst, int dstIndex)
		{
		}
	}
	[Token(Token = "0x200032A")]
	public class CamelliaEngine : IBlockCipher
	{
		[Token(Token = "0x4000EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool initialised;

		[Token(Token = "0x4000EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool _keyIs128;

		[Token(Token = "0x4000EE9")]
		private const int BLOCK_SIZE = 16;

		[Token(Token = "0x4000EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private uint[] subkey;

		[Token(Token = "0x4000EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private uint[] kw;

		[Token(Token = "0x4000EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private uint[] ke;

		[Token(Token = "0x4000EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private uint[] state;

		[Token(Token = "0x4000EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly uint[] SIGMA;

		[Token(Token = "0x4000EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly uint[] SBOX1_1110;

		[Token(Token = "0x4000EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly uint[] SBOX4_4404;

		[Token(Token = "0x4000EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly uint[] SBOX2_0222;

		[Token(Token = "0x4000EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly uint[] SBOX3_3033;

		[Token(Token = "0x17000363")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001BEA")]
			[Address(RVA = "0x151F798", Offset = "0x151F798", VA = "0x151F798", Slot = "11")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000364")]
		public virtual bool IsPartialBlockOkay
		{
			[Token(Token = "0x6001BEB")]
			[Address(RVA = "0x151F7E0", Offset = "0x151F7E0", VA = "0x151F7E0", Slot = "12")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001BDB")]
		[Address(RVA = "0x151D0A0", Offset = "0x151D0A0", VA = "0x151D0A0")]
		private static uint rightRotate(uint x, int s)
		{
			return default(uint);
		}

		[Token(Token = "0x6001BDC")]
		[Address(RVA = "0x151D0B4", Offset = "0x151D0B4", VA = "0x151D0B4")]
		private static uint leftRotate(uint x, int s)
		{
			return default(uint);
		}

		[Token(Token = "0x6001BDD")]
		[Address(RVA = "0x151D0C8", Offset = "0x151D0C8", VA = "0x151D0C8")]
		private static void roldq(int rot, uint[] ki, int ioff, uint[] ko, int ooff)
		{
		}

		[Token(Token = "0x6001BDE")]
		[Address(RVA = "0x151D298", Offset = "0x151D298", VA = "0x151D298")]
		private static void decroldq(int rot, uint[] ki, int ioff, uint[] ko, int ooff)
		{
		}

		[Token(Token = "0x6001BDF")]
		[Address(RVA = "0x151D468", Offset = "0x151D468", VA = "0x151D468")]
		private static void roldqo32(int rot, uint[] ki, int ioff, uint[] ko, int ooff)
		{
		}

		[Token(Token = "0x6001BE0")]
		[Address(RVA = "0x151D63C", Offset = "0x151D63C", VA = "0x151D63C")]
		private static void decroldqo32(int rot, uint[] ki, int ioff, uint[] ko, int ooff)
		{
		}

		[Token(Token = "0x6001BE1")]
		[Address(RVA = "0x151D810", Offset = "0x151D810", VA = "0x151D810")]
		private static uint bytes2uint(byte[] src, int offset)
		{
			return default(uint);
		}

		[Token(Token = "0x6001BE2")]
		[Address(RVA = "0x151D880", Offset = "0x151D880", VA = "0x151D880")]
		private static void uint2bytes(uint word, byte[] dst, int offset)
		{
		}

		[Token(Token = "0x6001BE3")]
		[Address(RVA = "0x151D8D4", Offset = "0x151D8D4", VA = "0x151D8D4")]
		private static void camelliaF2(uint[] s, uint[] skey, int keyoff)
		{
		}

		[Token(Token = "0x6001BE4")]
		[Address(RVA = "0x151DC10", Offset = "0x151DC10", VA = "0x151DC10")]
		private static void camelliaFLs(uint[] s, uint[] fkey, int keyoff)
		{
		}

		[Token(Token = "0x6001BE5")]
		[Address(RVA = "0x151DD64", Offset = "0x151DD64", VA = "0x151DD64")]
		private void setKey(bool forEncryption, byte[] key)
		{
		}

		[Token(Token = "0x6001BE6")]
		[Address(RVA = "0x151EF64", Offset = "0x151EF64", VA = "0x151EF64")]
		private int processBlock128(byte[] input, int inOff, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001BE7")]
		[Address(RVA = "0x151F2A4", Offset = "0x151F2A4", VA = "0x151F2A4")]
		private int processBlock192or256(byte[] input, int inOff, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001BE8")]
		[Address(RVA = "0x151F620", Offset = "0x151F620", VA = "0x151F620")]
		public CamelliaEngine()
		{
		}

		[Token(Token = "0x6001BE9")]
		[Address(RVA = "0x151F6B0", Offset = "0x151F6B0", VA = "0x151F6B0", Slot = "10")]
		public virtual void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001BEC")]
		[Address(RVA = "0x151F7E8", Offset = "0x151F7E8", VA = "0x151F7E8", Slot = "13")]
		public virtual int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001BED")]
		[Address(RVA = "0x151F7F0", Offset = "0x151F7F0", VA = "0x151F7F0", Slot = "14")]
		public virtual int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001BEE")]
		[Address(RVA = "0x151F914", Offset = "0x151F914", VA = "0x151F914", Slot = "15")]
		public virtual void Reset()
		{
		}
	}
	[Token(Token = "0x200032B")]
	public class CamelliaWrapEngine : Rfc3394WrapEngine
	{
		[Token(Token = "0x6001BF0")]
		[Address(RVA = "0x151FA5C", Offset = "0x151FA5C", VA = "0x151FA5C")]
		public CamelliaWrapEngine()
		{
		}
	}
	[Token(Token = "0x200032C")]
	public class Cast5Engine : IBlockCipher
	{
		[Token(Token = "0x4000EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly uint[] S1;

		[Token(Token = "0x4000EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly uint[] S2;

		[Token(Token = "0x4000EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal static readonly uint[] S3;

		[Token(Token = "0x4000EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal static readonly uint[] S4;

		[Token(Token = "0x4000EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal static readonly uint[] S5;

		[Token(Token = "0x4000EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal static readonly uint[] S6;

		[Token(Token = "0x4000EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal static readonly uint[] S7;

		[Token(Token = "0x4000EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal static readonly uint[] S8;

		[Token(Token = "0x4000EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal static readonly int MAX_ROUNDS;

		[Token(Token = "0x4000EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		internal static readonly int RED_ROUNDS;

		[Token(Token = "0x4000EFD")]
		private const int BLOCK_SIZE = 8;

		[Token(Token = "0x4000EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int[] _Kr;

		[Token(Token = "0x4000EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private uint[] _Km;

		[Token(Token = "0x4000F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool _encrypting;

		[Token(Token = "0x4000F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private byte[] _workingKey;

		[Token(Token = "0x4000F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int _rounds;

		[Token(Token = "0x17000365")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001BF3")]
			[Address(RVA = "0x151FCF4", Offset = "0x151FCF4", VA = "0x151FCF4", Slot = "11")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000366")]
		public virtual bool IsPartialBlockOkay
		{
			[Token(Token = "0x6001BF4")]
			[Address(RVA = "0x151FD3C", Offset = "0x151FD3C", VA = "0x151FD3C", Slot = "12")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001BF1")]
		[Address(RVA = "0x151FAC0", Offset = "0x151FAC0", VA = "0x151FAC0")]
		public Cast5Engine()
		{
		}

		[Token(Token = "0x6001BF2")]
		[Address(RVA = "0x151FB68", Offset = "0x151FB68", VA = "0x151FB68", Slot = "10")]
		public virtual void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001BF5")]
		[Address(RVA = "0x151FD44", Offset = "0x151FD44", VA = "0x151FD44", Slot = "13")]
		public virtual int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001BF6")]
		[Address(RVA = "0x151FE98", Offset = "0x151FE98", VA = "0x151FE98", Slot = "14")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x6001BF7")]
		[Address(RVA = "0x151FE9C", Offset = "0x151FE9C", VA = "0x151FE9C", Slot = "15")]
		public virtual int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001BF8")]
		[Address(RVA = "0x151FEA4", Offset = "0x151FEA4", VA = "0x151FEA4", Slot = "16")]
		internal virtual void SetKey(byte[] key)
		{
		}

		[Token(Token = "0x6001BF9")]
		[Address(RVA = "0x1523A24", Offset = "0x1523A24", VA = "0x1523A24", Slot = "17")]
		internal virtual int EncryptBlock(byte[] src, int srcIndex, byte[] dst, int dstIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6001BFA")]
		[Address(RVA = "0x1523D80", Offset = "0x1523D80", VA = "0x1523D80", Slot = "18")]
		internal virtual int DecryptBlock(byte[] src, int srcIndex, byte[] dst, int dstIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6001BFB")]
		[Address(RVA = "0x15240F8", Offset = "0x15240F8", VA = "0x15240F8")]
		internal static uint F1(uint D, uint Kmi, int Kri)
		{
			return default(uint);
		}

		[Token(Token = "0x6001BFC")]
		[Address(RVA = "0x1524218", Offset = "0x1524218", VA = "0x1524218")]
		internal static uint F2(uint D, uint Kmi, int Kri)
		{
			return default(uint);
		}

		[Token(Token = "0x6001BFD")]
		[Address(RVA = "0x1524338", Offset = "0x1524338", VA = "0x1524338")]
		internal static uint F3(uint D, uint Kmi, int Kri)
		{
			return default(uint);
		}

		[Token(Token = "0x6001BFE")]
		[Address(RVA = "0x1523B30", Offset = "0x1523B30", VA = "0x1523B30")]
		internal void CAST_Encipher(uint L0, uint R0, uint[] result)
		{
		}

		[Token(Token = "0x6001BFF")]
		[Address(RVA = "0x1523E8C", Offset = "0x1523E8C", VA = "0x1523E8C")]
		internal void CAST_Decipher(uint L16, uint R16, uint[] result)
		{
		}

		[Token(Token = "0x6001C00")]
		[Address(RVA = "0x1523994", Offset = "0x1523994", VA = "0x1523994")]
		internal static void Bits32ToInts(uint inData, int[] b, int offset)
		{
		}

		[Token(Token = "0x6001C01")]
		[Address(RVA = "0x1523910", Offset = "0x1523910", VA = "0x1523910")]
		internal static uint IntsTo32bits(int[] b, int i)
		{
			return default(uint);
		}
	}
	[Token(Token = "0x200032D")]
	public sealed class Cast6Engine : Cast5Engine
	{
		[Token(Token = "0x4000F03")]
		private const int ROUNDS = 12;

		[Token(Token = "0x4000F04")]
		private const int BLOCK_SIZE = 16;

		[Token(Token = "0x4000F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int[] _Kr;

		[Token(Token = "0x4000F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private uint[] _Km;

		[Token(Token = "0x4000F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int[] _Tr;

		[Token(Token = "0x4000F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private uint[] _Tm;

		[Token(Token = "0x4000F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private uint[] _workingKey;

		[Token(Token = "0x17000367")]
		public override string AlgorithmName
		{
			[Token(Token = "0x6001C04")]
			[Address(RVA = "0x1524710", Offset = "0x1524710", VA = "0x1524710", Slot = "11")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001C03")]
		[Address(RVA = "0x1524644", Offset = "0x1524644", VA = "0x1524644")]
		public Cast6Engine()
		{
		}

		[Token(Token = "0x6001C05")]
		[Address(RVA = "0x1524758", Offset = "0x1524758", VA = "0x1524758", Slot = "14")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C06")]
		[Address(RVA = "0x152475C", Offset = "0x152475C", VA = "0x152475C", Slot = "15")]
		public override int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001C07")]
		[Address(RVA = "0x1524764", Offset = "0x1524764", VA = "0x1524764", Slot = "16")]
		internal override void SetKey(byte[] key)
		{
		}

		[Token(Token = "0x6001C08")]
		[Address(RVA = "0x152514C", Offset = "0x152514C", VA = "0x152514C", Slot = "17")]
		internal override int EncryptBlock(byte[] src, int srcIndex, byte[] dst, int dstIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6001C09")]
		[Address(RVA = "0x1525650", Offset = "0x1525650", VA = "0x1525650", Slot = "18")]
		internal override int DecryptBlock(byte[] src, int srcIndex, byte[] dst, int dstIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6001C0A")]
		[Address(RVA = "0x15252D0", Offset = "0x15252D0", VA = "0x15252D0")]
		private void CAST_Encipher(uint A, uint B, uint C, uint D, uint[] result)
		{
		}

		[Token(Token = "0x6001C0B")]
		[Address(RVA = "0x15257D4", Offset = "0x15257D4", VA = "0x15257D4")]
		private void CAST_Decipher(uint A, uint B, uint C, uint D, uint[] result)
		{
		}
	}
	[Token(Token = "0x200032E")]
	public class ChaChaEngine : Salsa20Engine
	{
		[Token(Token = "0x17000368")]
		public override string AlgorithmName
		{
			[Token(Token = "0x6001C0E")]
			[Address(RVA = "0x1525C38", Offset = "0x1525C38", VA = "0x1525C38", Slot = "11")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001C0C")]
		[Address(RVA = "0x1525B58", Offset = "0x1525B58", VA = "0x1525B58")]
		public ChaChaEngine()
		{
		}

		[Token(Token = "0x6001C0D")]
		[Address(RVA = "0x1525BC0", Offset = "0x1525BC0", VA = "0x1525BC0")]
		public ChaChaEngine(int rounds)
		{
		}

		[Token(Token = "0x6001C0F")]
		[Address(RVA = "0x1525CB8", Offset = "0x1525CB8", VA = "0x1525CB8", Slot = "13")]
		protected override void AdvanceCounter()
		{
		}

		[Token(Token = "0x6001C10")]
		[Address(RVA = "0x1525D1C", Offset = "0x1525D1C", VA = "0x1525D1C", Slot = "16")]
		protected override void ResetCounter()
		{
		}

		[Token(Token = "0x6001C11")]
		[Address(RVA = "0x1525D54", Offset = "0x1525D54", VA = "0x1525D54", Slot = "17")]
		protected override void SetKey(byte[] keyBytes, byte[] ivBytes)
		{
		}

		[Token(Token = "0x6001C12")]
		[Address(RVA = "0x15260DC", Offset = "0x15260DC", VA = "0x15260DC", Slot = "18")]
		protected override void GenerateKeyStream(byte[] output)
		{
		}

		[Token(Token = "0x6001C13")]
		[Address(RVA = "0x152611C", Offset = "0x152611C", VA = "0x152611C")]
		internal static void ChachaCore(int rounds, uint[] input, uint[] x)
		{
		}
	}
	[Token(Token = "0x200032F")]
	public class DesEdeEngine : DesEngine
	{
		[Token(Token = "0x4000F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int[] workingKey1;

		[Token(Token = "0x4000F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int[] workingKey2;

		[Token(Token = "0x4000F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int[] workingKey3;

		[Token(Token = "0x4000F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool forEncryption;

		[Token(Token = "0x17000369")]
		public override string AlgorithmName
		{
			[Token(Token = "0x6001C15")]
			[Address(RVA = "0x10D2C3C", Offset = "0x10D2C3C", VA = "0x10D2C3C", Slot = "12")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001C14")]
		[Address(RVA = "0x10D2440", Offset = "0x10D2440", VA = "0x10D2440", Slot = "11")]
		public override void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001C16")]
		[Address(RVA = "0x10D2C84", Offset = "0x10D2C84", VA = "0x10D2C84", Slot = "14")]
		public override int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001C17")]
		[Address(RVA = "0x10D2C8C", Offset = "0x10D2C8C", VA = "0x10D2C8C", Slot = "15")]
		public override int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001C18")]
		[Address(RVA = "0x10D32B8", Offset = "0x10D32B8", VA = "0x10D32B8", Slot = "16")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C19")]
		[Address(RVA = "0x10D32BC", Offset = "0x10D32BC", VA = "0x10D32BC")]
		public DesEdeEngine()
		{
		}
	}
	[Token(Token = "0x2000330")]
	public class DesEdeWrapEngine : IWrapper
	{
		[Token(Token = "0x4000F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private CbcBlockCipher engine;

		[Token(Token = "0x4000F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private KeyParameter param;

		[Token(Token = "0x4000F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ParametersWithIV paramPlusIV;

		[Token(Token = "0x4000F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private byte[] iv;

		[Token(Token = "0x4000F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool forWrapping;

		[Token(Token = "0x4000F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly byte[] IV2;

		[Token(Token = "0x4000F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly IDigest sha1;

		[Token(Token = "0x4000F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly byte[] digest;

		[Token(Token = "0x1700036A")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001C1B")]
			[Address(RVA = "0x10D35E4", Offset = "0x10D35E4", VA = "0x10D35E4", Slot = "9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001C1A")]
		[Address(RVA = "0x10D332C", Offset = "0x10D332C", VA = "0x10D332C", Slot = "8")]
		public virtual void Init(bool forWrapping, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001C1C")]
		[Address(RVA = "0x10D362C", Offset = "0x10D362C", VA = "0x10D362C", Slot = "10")]
		public virtual byte[] Wrap(byte[] input, int inOff, int length)
		{
			return null;
		}

		[Token(Token = "0x6001C1D")]
		[Address(RVA = "0x10D3B8C", Offset = "0x10D3B8C", VA = "0x10D3B8C", Slot = "11")]
		public virtual byte[] Unwrap(byte[] input, int inOff, int length)
		{
			return null;
		}

		[Token(Token = "0x6001C1E")]
		[Address(RVA = "0x10D3940", Offset = "0x10D3940", VA = "0x10D3940")]
		private byte[] CalculateCmsKeyChecksum(byte[] key)
		{
			return null;
		}

		[Token(Token = "0x6001C1F")]
		[Address(RVA = "0x10D3F98", Offset = "0x10D3F98", VA = "0x10D3F98")]
		private bool CheckCmsKeyChecksum(byte[] key, byte[] checksum)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C20")]
		[Address(RVA = "0x10D3AD4", Offset = "0x10D3AD4", VA = "0x10D3AD4")]
		private static byte[] reverse(byte[] bs)
		{
			return null;
		}

		[Token(Token = "0x6001C21")]
		[Address(RVA = "0x10D3FC0", Offset = "0x10D3FC0", VA = "0x10D3FC0")]
		public DesEdeWrapEngine()
		{
		}
	}
	[Token(Token = "0x2000331")]
	public class DesEngine : IBlockCipher
	{
		[Token(Token = "0x4000F16")]
		internal const int BLOCK_SIZE = 8;

		[Token(Token = "0x4000F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int[] workingKey;

		[Token(Token = "0x4000F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly short[] bytebit;

		[Token(Token = "0x4000F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int[] bigbyte;

		[Token(Token = "0x4000F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly byte[] pc1;

		[Token(Token = "0x4000F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly byte[] totrot;

		[Token(Token = "0x4000F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly byte[] pc2;

		[Token(Token = "0x4000F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static readonly uint[] SP1;

		[Token(Token = "0x4000F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static readonly uint[] SP2;

		[Token(Token = "0x4000F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static readonly uint[] SP3;

		[Token(Token = "0x4000F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static readonly uint[] SP4;

		[Token(Token = "0x4000F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static readonly uint[] SP5;

		[Token(Token = "0x4000F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static readonly uint[] SP6;

		[Token(Token = "0x4000F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private static readonly uint[] SP7;

		[Token(Token = "0x4000F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private static readonly uint[] SP8;

		[Token(Token = "0x1700036B")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001C25")]
			[Address(RVA = "0x10D4214", Offset = "0x10D4214", VA = "0x10D4214", Slot = "12")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700036C")]
		public virtual bool IsPartialBlockOkay
		{
			[Token(Token = "0x6001C26")]
			[Address(RVA = "0x10D425C", Offset = "0x10D425C", VA = "0x10D425C", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001C23")]
		[Address(RVA = "0x10D40BC", Offset = "0x10D40BC", VA = "0x10D40BC", Slot = "10")]
		public virtual int[] GetWorkingKey()
		{
			return null;
		}

		[Token(Token = "0x6001C24")]
		[Address(RVA = "0x10D40C4", Offset = "0x10D40C4", VA = "0x10D40C4", Slot = "11")]
		public virtual void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001C27")]
		[Address(RVA = "0x10D4264", Offset = "0x10D4264", VA = "0x10D4264", Slot = "14")]
		public virtual int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001C28")]
		[Address(RVA = "0x10D426C", Offset = "0x10D426C", VA = "0x10D426C", Slot = "15")]
		public virtual int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001C29")]
		[Address(RVA = "0x10D4390", Offset = "0x10D4390", VA = "0x10D4390", Slot = "16")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x6001C2A")]
		[Address(RVA = "0x10D26DC", Offset = "0x10D26DC", VA = "0x10D26DC")]
		protected static int[] GenerateWorkingKey(bool encrypting, byte[] key)
		{
			return null;
		}

		[Token(Token = "0x6001C2B")]
		[Address(RVA = "0x10D2E64", Offset = "0x10D2E64", VA = "0x10D2E64")]
		internal static void DesFunc(int[] wKey, byte[] input, int inOff, byte[] outBytes, int outOff)
		{
		}

		[Token(Token = "0x6001C2C")]
		[Address(RVA = "0x10D3324", Offset = "0x10D3324", VA = "0x10D3324")]
		public DesEngine()
		{
		}
	}
	[Token(Token = "0x2000332")]
	public class ElGamalEngine : IAsymmetricBlockCipher
	{
		[Token(Token = "0x4000F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ElGamalKeyParameters key;

		[Token(Token = "0x4000F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private SecureRandom random;

		[Token(Token = "0x4000F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool forEncryption;

		[Token(Token = "0x4000F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int bitSize;

		[Token(Token = "0x1700036D")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001C2E")]
			[Address(RVA = "0x10D4670", Offset = "0x10D4670", VA = "0x10D4670", Slot = "9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001C2F")]
		[Address(RVA = "0x10D46B8", Offset = "0x10D46B8", VA = "0x10D46B8", Slot = "10")]
		public virtual void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001C30")]
		[Address(RVA = "0x10D48E8", Offset = "0x10D48E8", VA = "0x10D48E8", Slot = "11")]
		public virtual int GetInputBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001C31")]
		[Address(RVA = "0x10D4928", Offset = "0x10D4928", VA = "0x10D4928", Slot = "12")]
		public virtual int GetOutputBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001C32")]
		[Address(RVA = "0x10D4968", Offset = "0x10D4968", VA = "0x10D4968", Slot = "13")]
		public virtual byte[] ProcessBlock(byte[] input, int inOff, int length)
		{
			return null;
		}

		[Token(Token = "0x6001C33")]
		[Address(RVA = "0x10D4E44", Offset = "0x10D4E44", VA = "0x10D4E44")]
		public ElGamalEngine()
		{
		}
	}
	[Token(Token = "0x2000333")]
	public class Gost28147Engine : IBlockCipher
	{
		[Token(Token = "0x4000F29")]
		private const int BlockSize = 8;

		[Token(Token = "0x4000F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int[] workingKey;

		[Token(Token = "0x4000F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool forEncryption;

		[Token(Token = "0x4000F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private byte[] S;

		[Token(Token = "0x4000F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly byte[] Sbox_Default;

		[Token(Token = "0x4000F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly byte[] ESbox_Test;

		[Token(Token = "0x4000F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly byte[] ESbox_A;

		[Token(Token = "0x4000F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly byte[] ESbox_B;

		[Token(Token = "0x4000F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly byte[] ESbox_C;

		[Token(Token = "0x4000F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static readonly byte[] ESbox_D;

		[Token(Token = "0x4000F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static readonly byte[] DSbox_Test;

		[Token(Token = "0x4000F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static readonly byte[] DSbox_A;

		[Token(Token = "0x4000F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static readonly IDictionary sBoxes;

		[Token(Token = "0x1700036E")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001C38")]
			[Address(RVA = "0x10D562C", Offset = "0x10D562C", VA = "0x10D562C", Slot = "11")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700036F")]
		public virtual bool IsPartialBlockOkay
		{
			[Token(Token = "0x6001C39")]
			[Address(RVA = "0x10D5674", Offset = "0x10D5674", VA = "0x10D5674", Slot = "12")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001C34")]
		[Address(RVA = "0x10D4E4C", Offset = "0x10D4E4C", VA = "0x10D4E4C")]
		static Gost28147Engine()
		{
		}

		[Token(Token = "0x6001C35")]
		[Address(RVA = "0x10D5124", Offset = "0x10D5124", VA = "0x10D5124")]
		private static void AddSBox(string sBoxName, byte[] sBox)
		{
		}

		[Token(Token = "0x6001C36")]
		[Address(RVA = "0x10D5248", Offset = "0x10D5248", VA = "0x10D5248")]
		public Gost28147Engine()
		{
		}

		[Token(Token = "0x6001C37")]
		[Address(RVA = "0x10D52C0", Offset = "0x10D52C0", VA = "0x10D52C0", Slot = "10")]
		public virtual void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001C3A")]
		[Address(RVA = "0x10D567C", Offset = "0x10D567C", VA = "0x10D567C", Slot = "13")]
		public virtual int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001C3B")]
		[Address(RVA = "0x10D5684", Offset = "0x10D5684", VA = "0x10D5684", Slot = "14")]
		public virtual int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001C3C")]
		[Address(RVA = "0x10D59F4", Offset = "0x10D59F4", VA = "0x10D59F4", Slot = "15")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x6001C3D")]
		[Address(RVA = "0x10D54F8", Offset = "0x10D54F8", VA = "0x10D54F8")]
		private int[] generateWorkingKey(bool forEncryption, byte[] userKey)
		{
			return null;
		}

		[Token(Token = "0x6001C3E")]
		[Address(RVA = "0x10D5A78", Offset = "0x10D5A78", VA = "0x10D5A78")]
		private int Gost28147_mainStep(int n1, int key)
		{
			return default(int);
		}

		[Token(Token = "0x6001C3F")]
		[Address(RVA = "0x10D5788", Offset = "0x10D5788", VA = "0x10D5788")]
		private void Gost28147Func(int[] workingKey, byte[] inBytes, int inOff, byte[] outBytes, int outOff)
		{
		}

		[Token(Token = "0x6001C40")]
		[Address(RVA = "0x10D59F8", Offset = "0x10D59F8", VA = "0x10D59F8")]
		private static int bytesToint(byte[] inBytes, int inOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001C41")]
		[Address(RVA = "0x10D5B80", Offset = "0x10D5B80", VA = "0x10D5B80")]
		private static void intTobytes(int num, byte[] outBytes, int outOff)
		{
		}

		[Token(Token = "0x6001C42")]
		[Address(RVA = "0x10D5C0C", Offset = "0x10D5C0C", VA = "0x10D5C0C")]
		public static byte[] GetSBox(string sBoxName)
		{
			return null;
		}
	}
	[Token(Token = "0x2000334")]
	public class HC128Engine : IStreamCipher
	{
		[Token(Token = "0x4000F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private uint[] p;

		[Token(Token = "0x4000F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private uint[] q;

		[Token(Token = "0x4000F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private uint cnt;

		[Token(Token = "0x4000F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private byte[] key;

		[Token(Token = "0x4000F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private byte[] iv;

		[Token(Token = "0x4000F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool initialised;

		[Token(Token = "0x4000F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private byte[] buf;

		[Token(Token = "0x4000F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int idx;

		[Token(Token = "0x17000370")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001C50")]
			[Address(RVA = "0x10D638C", Offset = "0x10D638C", VA = "0x10D638C", Slot = "9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001C43")]
		[Address(RVA = "0x10D5D8C", Offset = "0x10D5D8C", VA = "0x10D5D8C")]
		private static uint F1(uint x)
		{
			return default(uint);
		}

		[Token(Token = "0x6001C44")]
		[Address(RVA = "0x10D5DA4", Offset = "0x10D5DA4", VA = "0x10D5DA4")]
		private static uint F2(uint x)
		{
			return default(uint);
		}

		[Token(Token = "0x6001C45")]
		[Address(RVA = "0x10D5DB4", Offset = "0x10D5DB4", VA = "0x10D5DB4")]
		private uint G1(uint x, uint y, uint z)
		{
			return default(uint);
		}

		[Token(Token = "0x6001C46")]
		[Address(RVA = "0x10D5DC8", Offset = "0x10D5DC8", VA = "0x10D5DC8")]
		private uint G2(uint x, uint y, uint z)
		{
			return default(uint);
		}

		[Token(Token = "0x6001C47")]
		[Address(RVA = "0x10D5DDC", Offset = "0x10D5DDC", VA = "0x10D5DDC")]
		private static uint RotateLeft(uint x, int bits)
		{
			return default(uint);
		}

		[Token(Token = "0x6001C48")]
		[Address(RVA = "0x10D5D9C", Offset = "0x10D5D9C", VA = "0x10D5D9C")]
		private static uint RotateRight(uint x, int bits)
		{
			return default(uint);
		}

		[Token(Token = "0x6001C49")]
		[Address(RVA = "0x10D5DE8", Offset = "0x10D5DE8", VA = "0x10D5DE8")]
		private uint H1(uint x)
		{
			return default(uint);
		}

		[Token(Token = "0x6001C4A")]
		[Address(RVA = "0x10D5E40", Offset = "0x10D5E40", VA = "0x10D5E40")]
		private uint H2(uint x)
		{
			return default(uint);
		}

		[Token(Token = "0x6001C4B")]
		[Address(RVA = "0x10D5E98", Offset = "0x10D5E98", VA = "0x10D5E98")]
		private static uint Mod1024(uint x)
		{
			return default(uint);
		}

		[Token(Token = "0x6001C4C")]
		[Address(RVA = "0x10D5EA0", Offset = "0x10D5EA0", VA = "0x10D5EA0")]
		private static uint Mod512(uint x)
		{
			return default(uint);
		}

		[Token(Token = "0x6001C4D")]
		[Address(RVA = "0x10D5EA8", Offset = "0x10D5EA8", VA = "0x10D5EA8")]
		private static uint Dim(uint x, uint y)
		{
			return default(uint);
		}

		[Token(Token = "0x6001C4E")]
		[Address(RVA = "0x10D5EB4", Offset = "0x10D5EB4", VA = "0x10D5EB4")]
		private uint Step()
		{
			return default(uint);
		}

		[Token(Token = "0x6001C4F")]
		[Address(RVA = "0x10D6080", Offset = "0x10D6080", VA = "0x10D6080")]
		private void Init()
		{
		}

		[Token(Token = "0x6001C51")]
		[Address(RVA = "0x10D63D4", Offset = "0x10D63D4", VA = "0x10D63D4", Slot = "10")]
		public virtual void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001C52")]
		[Address(RVA = "0x10D65A4", Offset = "0x10D65A4", VA = "0x10D65A4")]
		private byte GetByte()
		{
			return default(byte);
		}

		[Token(Token = "0x6001C53")]
		[Address(RVA = "0x10D6624", Offset = "0x10D6624", VA = "0x10D6624", Slot = "11")]
		public virtual void ProcessBytes(byte[] input, int inOff, int len, byte[] output, int outOff)
		{
		}

		[Token(Token = "0x6001C54")]
		[Address(RVA = "0x10D67C4", Offset = "0x10D67C4", VA = "0x10D67C4", Slot = "12")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x6001C55")]
		[Address(RVA = "0x10D67CC", Offset = "0x10D67CC", VA = "0x10D67CC", Slot = "13")]
		public virtual byte ReturnByte(byte input)
		{
			return default(byte);
		}

		[Token(Token = "0x6001C56")]
		[Address(RVA = "0x10D67F0", Offset = "0x10D67F0", VA = "0x10D67F0")]
		public HC128Engine()
		{
		}
	}
	[Token(Token = "0x2000335")]
	public class HC256Engine : IStreamCipher
	{
		[Token(Token = "0x4000F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private uint[] p;

		[Token(Token = "0x4000F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private uint[] q;

		[Token(Token = "0x4000F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private uint cnt;

		[Token(Token = "0x4000F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private byte[] key;

		[Token(Token = "0x4000F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private byte[] iv;

		[Token(Token = "0x4000F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool initialised;

		[Token(Token = "0x4000F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private byte[] buf;

		[Token(Token = "0x4000F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int idx;

		[Token(Token = "0x17000371")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001C59")]
			[Address(RVA = "0x10D6E64", Offset = "0x10D6E64", VA = "0x10D6E64", Slot = "9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001C57")]
		[Address(RVA = "0x10D6878", Offset = "0x10D6878", VA = "0x10D6878")]
		private uint Step()
		{
			return default(uint);
		}

		[Token(Token = "0x6001C58")]
		[Address(RVA = "0x10D6AE8", Offset = "0x10D6AE8", VA = "0x10D6AE8")]
		private void Init()
		{
		}

		[Token(Token = "0x6001C5A")]
		[Address(RVA = "0x10D6EAC", Offset = "0x10D6EAC", VA = "0x10D6EAC", Slot = "10")]
		public virtual void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001C5B")]
		[Address(RVA = "0x10D707C", Offset = "0x10D707C", VA = "0x10D707C")]
		private byte GetByte()
		{
			return default(byte);
		}

		[Token(Token = "0x6001C5C")]
		[Address(RVA = "0x10D70FC", Offset = "0x10D70FC", VA = "0x10D70FC", Slot = "11")]
		public virtual void ProcessBytes(byte[] input, int inOff, int len, byte[] output, int outOff)
		{
		}

		[Token(Token = "0x6001C5D")]
		[Address(RVA = "0x10D729C", Offset = "0x10D729C", VA = "0x10D729C", Slot = "12")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x6001C5E")]
		[Address(RVA = "0x10D72A4", Offset = "0x10D72A4", VA = "0x10D72A4", Slot = "13")]
		public virtual byte ReturnByte(byte input)
		{
			return default(byte);
		}

		[Token(Token = "0x6001C5F")]
		[Address(RVA = "0x10D6AE0", Offset = "0x10D6AE0", VA = "0x10D6AE0")]
		private static uint RotateRight(uint x, int bits)
		{
			return default(uint);
		}

		[Token(Token = "0x6001C60")]
		[Address(RVA = "0x10D72C8", Offset = "0x10D72C8", VA = "0x10D72C8")]
		public HC256Engine()
		{
		}
	}
	[Token(Token = "0x2000336")]
	public class IdeaEngine : IBlockCipher
	{
		[Token(Token = "0x4000F46")]
		private const int BLOCK_SIZE = 8;

		[Token(Token = "0x4000F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int[] workingKey;

		[Token(Token = "0x4000F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int MASK;

		[Token(Token = "0x4000F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly int BASE;

		[Token(Token = "0x17000372")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001C63")]
			[Address(RVA = "0x10D74C0", Offset = "0x10D74C0", VA = "0x10D74C0", Slot = "11")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000373")]
		public virtual bool IsPartialBlockOkay
		{
			[Token(Token = "0x6001C64")]
			[Address(RVA = "0x10D7508", Offset = "0x10D7508", VA = "0x10D7508", Slot = "12")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001C61")]
		[Address(RVA = "0x10D7350", Offset = "0x10D7350", VA = "0x10D7350")]
		public IdeaEngine()
		{
		}

		[Token(Token = "0x6001C62")]
		[Address(RVA = "0x10D7358", Offset = "0x10D7358", VA = "0x10D7358", Slot = "10")]
		public virtual void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001C65")]
		[Address(RVA = "0x10D7510", Offset = "0x10D7510", VA = "0x10D7510", Slot = "13")]
		public virtual int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001C66")]
		[Address(RVA = "0x10D7518", Offset = "0x10D7518", VA = "0x10D7518", Slot = "14")]
		public virtual int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001C67")]
		[Address(RVA = "0x10D78F4", Offset = "0x10D78F4", VA = "0x10D78F4", Slot = "15")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x6001C68")]
		[Address(RVA = "0x10D78F8", Offset = "0x10D78F8", VA = "0x10D78F8")]
		private int BytesToWord(byte[] input, int inOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001C69")]
		[Address(RVA = "0x10D7944", Offset = "0x10D7944", VA = "0x10D7944")]
		private void WordToBytes(int word, byte[] outBytes, int outOff)
		{
		}

		[Token(Token = "0x6001C6A")]
		[Address(RVA = "0x10D7998", Offset = "0x10D7998", VA = "0x10D7998")]
		private int Mul(int x, int y)
		{
			return default(int);
		}

		[Token(Token = "0x6001C6B")]
		[Address(RVA = "0x10D761C", Offset = "0x10D761C", VA = "0x10D761C")]
		private void IdeaFunc(int[] workingKey, byte[] input, int inOff, byte[] outBytes, int outOff)
		{
		}

		[Token(Token = "0x6001C6C")]
		[Address(RVA = "0x10D7ABC", Offset = "0x10D7ABC", VA = "0x10D7ABC")]
		private int[] ExpandKey(byte[] uKey)
		{
			return null;
		}

		[Token(Token = "0x6001C6D")]
		[Address(RVA = "0x10D7CB8", Offset = "0x10D7CB8", VA = "0x10D7CB8")]
		private int MulInv(int x)
		{
			return default(int);
		}

		[Token(Token = "0x6001C6E")]
		[Address(RVA = "0x10D7DF8", Offset = "0x10D7DF8", VA = "0x10D7DF8")]
		private int AddInv(int x)
		{
			return default(int);
		}

		[Token(Token = "0x6001C6F")]
		[Address(RVA = "0x10D7E6C", Offset = "0x10D7E6C", VA = "0x10D7E6C")]
		private int[] InvertKey(int[] inKey)
		{
			return null;
		}

		[Token(Token = "0x6001C70")]
		[Address(RVA = "0x10D7488", Offset = "0x10D7488", VA = "0x10D7488")]
		private int[] GenerateWorkingKey(bool forEncryption, byte[] userKey)
		{
			return null;
		}
	}
	[Token(Token = "0x2000337")]
	public class IesEngine
	{
		[Token(Token = "0x4000F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IBasicAgreement agree;

		[Token(Token = "0x4000F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IDerivationFunction kdf;

		[Token(Token = "0x4000F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly IMac mac;

		[Token(Token = "0x4000F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly BufferedBlockCipher cipher;

		[Token(Token = "0x4000F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly byte[] macBuf;

		[Token(Token = "0x4000F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool forEncryption;

		[Token(Token = "0x4000F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ICipherParameters privParam;

		[Token(Token = "0x4000F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ICipherParameters pubParam;

		[Token(Token = "0x4000F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IesParameters param;

		[Token(Token = "0x6001C72")]
		[Address(RVA = "0x10D81A8", Offset = "0x10D81A8", VA = "0x10D81A8")]
		public IesEngine(IBasicAgreement agree, IDerivationFunction kdf, IMac mac)
		{
		}

		[Token(Token = "0x6001C73")]
		[Address(RVA = "0x10D82A8", Offset = "0x10D82A8", VA = "0x10D82A8")]
		public IesEngine(IBasicAgreement agree, IDerivationFunction kdf, IMac mac, BufferedBlockCipher cipher)
		{
		}

		[Token(Token = "0x6001C74")]
		[Address(RVA = "0x10D83AC", Offset = "0x10D83AC", VA = "0x10D83AC", Slot = "4")]
		public virtual void Init(bool forEncryption, ICipherParameters privParameters, ICipherParameters pubParameters, ICipherParameters iesParameters)
		{
		}

		[Token(Token = "0x6001C75")]
		[Address(RVA = "0x10D845C", Offset = "0x10D845C", VA = "0x10D845C")]
		private byte[] DecryptBlock(byte[] in_enc, int inOff, int inLen, byte[] z)
		{
			return null;
		}

		[Token(Token = "0x6001C76")]
		[Address(RVA = "0x10D8BC0", Offset = "0x10D8BC0", VA = "0x10D8BC0")]
		private byte[] EncryptBlock(byte[] input, int inOff, int inLen, byte[] z)
		{
			return null;
		}

		[Token(Token = "0x6001C77")]
		[Address(RVA = "0x10D8A54", Offset = "0x10D8A54", VA = "0x10D8A54")]
		private byte[] GenerateKdfBytes(KdfParameters kParam, int length)
		{
			return null;
		}

		[Token(Token = "0x6001C78")]
		[Address(RVA = "0x10D91D0", Offset = "0x10D91D0", VA = "0x10D91D0", Slot = "5")]
		public virtual byte[] ProcessBlock(byte[] input, int inOff, int inLen)
		{
			return null;
		}
	}
	[Token(Token = "0x2000338")]
	public class NoekeonEngine : IBlockCipher
	{
		[Token(Token = "0x4000F53")]
		private const int GenericSize = 16;

		[Token(Token = "0x4000F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly uint[] nullVector;

		[Token(Token = "0x4000F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly uint[] roundConstants;

		[Token(Token = "0x4000F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private uint[] state;

		[Token(Token = "0x4000F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private uint[] subKeys;

		[Token(Token = "0x4000F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private uint[] decryptKeys;

		[Token(Token = "0x4000F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _initialised;

		[Token(Token = "0x4000F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool _forEncryption;

		[Token(Token = "0x17000374")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001C7A")]
			[Address(RVA = "0x10D94C0", Offset = "0x10D94C0", VA = "0x10D94C0", Slot = "10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000375")]
		public virtual bool IsPartialBlockOkay
		{
			[Token(Token = "0x6001C7B")]
			[Address(RVA = "0x10D9508", Offset = "0x10D9508", VA = "0x10D9508", Slot = "11")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001C79")]
		[Address(RVA = "0x10D9438", Offset = "0x10D9438", VA = "0x10D9438")]
		public NoekeonEngine()
		{
		}

		[Token(Token = "0x6001C7C")]
		[Address(RVA = "0x10D9510", Offset = "0x10D9510", VA = "0x10D9510", Slot = "12")]
		public virtual int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001C7D")]
		[Address(RVA = "0x10D9518", Offset = "0x10D9518", VA = "0x10D9518", Slot = "13")]
		public virtual void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001C7E")]
		[Address(RVA = "0x10D9758", Offset = "0x10D9758", VA = "0x10D9758", Slot = "14")]
		public virtual int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001C7F")]
		[Address(RVA = "0x10D9E54", Offset = "0x10D9E54", VA = "0x10D9E54", Slot = "15")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x6001C80")]
		[Address(RVA = "0x10D9684", Offset = "0x10D9684", VA = "0x10D9684")]
		private void setKey(byte[] key)
		{
		}

		[Token(Token = "0x6001C81")]
		[Address(RVA = "0x10D9BAC", Offset = "0x10D9BAC", VA = "0x10D9BAC")]
		private int encryptBlock(byte[] input, int inOff, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001C82")]
		[Address(RVA = "0x10D98A0", Offset = "0x10D98A0", VA = "0x10D98A0")]
		private int decryptBlock(byte[] input, int inOff, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001C83")]
		[Address(RVA = "0x10D9F9C", Offset = "0x10D9F9C", VA = "0x10D9F9C")]
		private void gamma(uint[] a)
		{
		}

		[Token(Token = "0x6001C84")]
		[Address(RVA = "0x10D9E58", Offset = "0x10D9E58", VA = "0x10D9E58")]
		private void theta(uint[] a, uint[] k)
		{
		}

		[Token(Token = "0x6001C85")]
		[Address(RVA = "0x10D9F38", Offset = "0x10D9F38", VA = "0x10D9F38")]
		private void pi1(uint[] a)
		{
		}

		[Token(Token = "0x6001C86")]
		[Address(RVA = "0x10DA014", Offset = "0x10DA014", VA = "0x10DA014")]
		private void pi2(uint[] a)
		{
		}

		[Token(Token = "0x6001C87")]
		[Address(RVA = "0x10DA078", Offset = "0x10DA078", VA = "0x10DA078")]
		private uint rotl(uint x, int y)
		{
			return default(uint);
		}
	}
	[Token(Token = "0x2000339")]
	public class RC2Engine : IBlockCipher
	{
		[Token(Token = "0x4000F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly byte[] piTable;

		[Token(Token = "0x4000F5C")]
		private const int BLOCK_SIZE = 8;

		[Token(Token = "0x4000F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int[] workingKey;

		[Token(Token = "0x4000F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool encrypting;

		[Token(Token = "0x17000376")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001C8C")]
			[Address(RVA = "0x10DA5CC", Offset = "0x10DA5CC", VA = "0x10DA5CC", Slot = "12")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000377")]
		public virtual bool IsPartialBlockOkay
		{
			[Token(Token = "0x6001C8D")]
			[Address(RVA = "0x10DA614", Offset = "0x10DA614", VA = "0x10DA614", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001C89")]
		[Address(RVA = "0x10DA118", Offset = "0x10DA118", VA = "0x10DA118")]
		private int[] GenerateWorkingKey(byte[] key, int bits)
		{
			return null;
		}

		[Token(Token = "0x6001C8A")]
		[Address(RVA = "0x10DA44C", Offset = "0x10DA44C", VA = "0x10DA44C", Slot = "10")]
		public virtual void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001C8B")]
		[Address(RVA = "0x10DA5C8", Offset = "0x10DA5C8", VA = "0x10DA5C8", Slot = "11")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x6001C8E")]
		[Address(RVA = "0x10DA61C", Offset = "0x10DA61C", VA = "0x10DA61C", Slot = "14")]
		public virtual int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001C8F")]
		[Address(RVA = "0x10DA624", Offset = "0x10DA624", VA = "0x10DA624", Slot = "15")]
		public virtual int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001C90")]
		[Address(RVA = "0x10DB09C", Offset = "0x10DB09C", VA = "0x10DB09C")]
		private int RotateWordLeft(int x, int y)
		{
			return default(int);
		}

		[Token(Token = "0x6001C91")]
		[Address(RVA = "0x10DA748", Offset = "0x10DA748", VA = "0x10DA748")]
		private void EncryptBlock(byte[] input, int inOff, byte[] outBytes, int outOff)
		{
		}

		[Token(Token = "0x6001C92")]
		[Address(RVA = "0x10DAC34", Offset = "0x10DAC34", VA = "0x10DAC34")]
		private void DecryptBlock(byte[] input, int inOff, byte[] outBytes, int outOff)
		{
		}

		[Token(Token = "0x6001C93")]
		[Address(RVA = "0x10DB0B8", Offset = "0x10DB0B8", VA = "0x10DB0B8")]
		public RC2Engine()
		{
		}
	}
	[Token(Token = "0x200033A")]
	public class RC2WrapEngine : IWrapper
	{
		[Token(Token = "0x4000F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private CbcBlockCipher engine;

		[Token(Token = "0x4000F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ICipherParameters parameters;

		[Token(Token = "0x4000F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ParametersWithIV paramPlusIV;

		[Token(Token = "0x4000F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private byte[] iv;

		[Token(Token = "0x4000F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool forWrapping;

		[Token(Token = "0x4000F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SecureRandom sr;

		[Token(Token = "0x4000F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly byte[] IV2;

		[Token(Token = "0x4000F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private IDigest sha1;

		[Token(Token = "0x4000F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private byte[] digest;

		[Token(Token = "0x17000378")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001C96")]
			[Address(RVA = "0x10DB378", Offset = "0x10DB378", VA = "0x10DB378", Slot = "9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001C95")]
		[Address(RVA = "0x10DB13C", Offset = "0x10DB13C", VA = "0x10DB13C", Slot = "8")]
		public virtual void Init(bool forWrapping, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001C97")]
		[Address(RVA = "0x10DB3C0", Offset = "0x10DB3C0", VA = "0x10DB3C0", Slot = "10")]
		public virtual byte[] Wrap(byte[] input, int inOff, int length)
		{
			return null;
		}

		[Token(Token = "0x6001C98")]
		[Address(RVA = "0x10DB9B4", Offset = "0x10DB9B4", VA = "0x10DB9B4", Slot = "11")]
		public virtual byte[] Unwrap(byte[] input, int inOff, int length)
		{
			return null;
		}

		[Token(Token = "0x6001C99")]
		[Address(RVA = "0x10DB820", Offset = "0x10DB820", VA = "0x10DB820")]
		private byte[] CalculateCmsKeyChecksum(byte[] key)
		{
			return null;
		}

		[Token(Token = "0x6001C9A")]
		[Address(RVA = "0x10DBF48", Offset = "0x10DBF48", VA = "0x10DBF48")]
		private bool CheckCmsKeyChecksum(byte[] key, byte[] checksum)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C9B")]
		[Address(RVA = "0x10DBF70", Offset = "0x10DBF70", VA = "0x10DBF70")]
		public RC2WrapEngine()
		{
		}
	}
	[Token(Token = "0x200033B")]
	public class RC4Engine : IStreamCipher
	{
		[Token(Token = "0x4000F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int STATE_LENGTH;

		[Token(Token = "0x4000F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private byte[] engineState;

		[Token(Token = "0x4000F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int x;

		[Token(Token = "0x4000F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int y;

		[Token(Token = "0x4000F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private byte[] workingKey;

		[Token(Token = "0x17000379")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001C9E")]
			[Address(RVA = "0x10DC358", Offset = "0x10DC358", VA = "0x10DC358", Slot = "10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001C9D")]
		[Address(RVA = "0x10DC06C", Offset = "0x10DC06C", VA = "0x10DC06C", Slot = "9")]
		public virtual void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001C9F")]
		[Address(RVA = "0x10DC3A0", Offset = "0x10DC3A0", VA = "0x10DC3A0", Slot = "11")]
		public virtual byte ReturnByte(byte input)
		{
			return default(byte);
		}

		[Token(Token = "0x6001CA0")]
		[Address(RVA = "0x10DC48C", Offset = "0x10DC48C", VA = "0x10DC48C", Slot = "12")]
		public virtual void ProcessBytes(byte[] input, int inOff, int length, byte[] output, int outOff)
		{
		}

		[Token(Token = "0x6001CA1")]
		[Address(RVA = "0x10DC67C", Offset = "0x10DC67C", VA = "0x10DC67C", Slot = "13")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x6001CA2")]
		[Address(RVA = "0x10DC18C", Offset = "0x10DC18C", VA = "0x10DC18C")]
		private void SetKey(byte[] keyBytes)
		{
		}

		[Token(Token = "0x6001CA3")]
		[Address(RVA = "0x10DC684", Offset = "0x10DC684", VA = "0x10DC684")]
		public RC4Engine()
		{
		}
	}
	[Token(Token = "0x200033C")]
	public class RC532Engine : IBlockCipher
	{
		[Token(Token = "0x4000F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int _noRounds;

		[Token(Token = "0x4000F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int[] _S;

		[Token(Token = "0x4000F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int P32;

		[Token(Token = "0x4000F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly int Q32;

		[Token(Token = "0x4000F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool forEncryption;

		[Token(Token = "0x1700037A")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001CA6")]
			[Address(RVA = "0x10DC70C", Offset = "0x10DC70C", VA = "0x10DC70C", Slot = "10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700037B")]
		public virtual bool IsPartialBlockOkay
		{
			[Token(Token = "0x6001CA7")]
			[Address(RVA = "0x10DC754", Offset = "0x10DC754", VA = "0x10DC754", Slot = "11")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001CA5")]
		[Address(RVA = "0x10DC6E0", Offset = "0x10DC6E0", VA = "0x10DC6E0")]
		public RC532Engine()
		{
		}

		[Token(Token = "0x6001CA8")]
		[Address(RVA = "0x10DC75C", Offset = "0x10DC75C", VA = "0x10DC75C", Slot = "12")]
		public virtual int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001CA9")]
		[Address(RVA = "0x10DC764", Offset = "0x10DC764", VA = "0x10DC764", Slot = "13")]
		public virtual void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001CAA")]
		[Address(RVA = "0x10DCC18", Offset = "0x10DCC18", VA = "0x10DCC18", Slot = "14")]
		public virtual int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001CAB")]
		[Address(RVA = "0x10DCE80", Offset = "0x10DCE80", VA = "0x10DCE80", Slot = "15")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x6001CAC")]
		[Address(RVA = "0x10DC988", Offset = "0x10DC988", VA = "0x10DC988")]
		private void SetKey(byte[] key)
		{
		}

		[Token(Token = "0x6001CAD")]
		[Address(RVA = "0x10DCD5C", Offset = "0x10DCD5C", VA = "0x10DCD5C")]
		private int EncryptBlock(byte[] input, int inOff, byte[] outBytes, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001CAE")]
		[Address(RVA = "0x10DCC40", Offset = "0x10DCC40", VA = "0x10DCC40")]
		private int DecryptBlock(byte[] input, int inOff, byte[] outBytes, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001CAF")]
		[Address(RVA = "0x10DCE84", Offset = "0x10DCE84", VA = "0x10DCE84")]
		private int RotateLeft(int x, int y)
		{
			return default(int);
		}

		[Token(Token = "0x6001CB0")]
		[Address(RVA = "0x10DCF98", Offset = "0x10DCF98", VA = "0x10DCF98")]
		private int RotateRight(int x, int y)
		{
			return default(int);
		}

		[Token(Token = "0x6001CB1")]
		[Address(RVA = "0x10DCE90", Offset = "0x10DCE90", VA = "0x10DCE90")]
		private int BytesToWord(byte[] src, int srcOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001CB2")]
		[Address(RVA = "0x10DCF0C", Offset = "0x10DCF0C", VA = "0x10DCF0C")]
		private void WordToBytes(int word, byte[] dst, int dstOff)
		{
		}
	}
	[Token(Token = "0x200033D")]
	public class RC564Engine : IBlockCipher
	{
		[Token(Token = "0x4000F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int wordSize;

		[Token(Token = "0x4000F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly int bytesPerWord;

		[Token(Token = "0x4000F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int _noRounds;

		[Token(Token = "0x4000F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private long[] _S;

		[Token(Token = "0x4000F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly long P64;

		[Token(Token = "0x4000F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly long Q64;

		[Token(Token = "0x4000F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool forEncryption;

		[Token(Token = "0x1700037C")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001CB5")]
			[Address(RVA = "0x10DD038", Offset = "0x10DD038", VA = "0x10DD038", Slot = "10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700037D")]
		public virtual bool IsPartialBlockOkay
		{
			[Token(Token = "0x6001CB6")]
			[Address(RVA = "0x10DD080", Offset = "0x10DD080", VA = "0x10DD080", Slot = "11")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001CB4")]
		[Address(RVA = "0x10DD00C", Offset = "0x10DD00C", VA = "0x10DD00C")]
		public RC564Engine()
		{
		}

		[Token(Token = "0x6001CB7")]
		[Address(RVA = "0x10DD088", Offset = "0x10DD088", VA = "0x10DD088", Slot = "12")]
		public virtual int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001CB8")]
		[Address(RVA = "0x10DD0F4", Offset = "0x10DD0F4", VA = "0x10DD0F4", Slot = "13")]
		public virtual void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001CB9")]
		[Address(RVA = "0x10DD588", Offset = "0x10DD588", VA = "0x10DD588", Slot = "14")]
		public virtual int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001CBA")]
		[Address(RVA = "0x10DD92C", Offset = "0x10DD92C", VA = "0x10DD92C", Slot = "15")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x6001CBB")]
		[Address(RVA = "0x10DD290", Offset = "0x10DD290", VA = "0x10DD290")]
		private void SetKey(byte[] key)
		{
		}

		[Token(Token = "0x6001CBC")]
		[Address(RVA = "0x10DD760", Offset = "0x10DD760", VA = "0x10DD760")]
		private int EncryptBlock(byte[] input, int inOff, byte[] outBytes, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001CBD")]
		[Address(RVA = "0x10DD598", Offset = "0x10DD598", VA = "0x10DD598")]
		private int DecryptBlock(byte[] input, int inOff, byte[] outBytes, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001CBE")]
		[Address(RVA = "0x10DD930", Offset = "0x10DD930", VA = "0x10DD930")]
		private long RotateLeft(long x, long y)
		{
			return default(long);
		}

		[Token(Token = "0x6001CBF")]
		[Address(RVA = "0x10DDB68", Offset = "0x10DDB68", VA = "0x10DDB68")]
		private long RotateRight(long x, long y)
		{
			return default(long);
		}

		[Token(Token = "0x6001CC0")]
		[Address(RVA = "0x10DD9C0", Offset = "0x10DD9C0", VA = "0x10DD9C0")]
		private long BytesToWord(byte[] src, int srcOff)
		{
			return default(long);
		}

		[Token(Token = "0x6001CC1")]
		[Address(RVA = "0x10DDA88", Offset = "0x10DDA88", VA = "0x10DDA88")]
		private void WordToBytes(long word, byte[] dst, int dstOff)
		{
		}
	}
	[Token(Token = "0x200033E")]
	public class RC6Engine : IBlockCipher
	{
		[Token(Token = "0x4000F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int wordSize;

		[Token(Token = "0x4000F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly int bytesPerWord;

		[Token(Token = "0x4000F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int _noRounds;

		[Token(Token = "0x4000F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int[] _S;

		[Token(Token = "0x4000F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static readonly int P32;

		[Token(Token = "0x4000F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly int Q32;

		[Token(Token = "0x4000F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static readonly int LGW;

		[Token(Token = "0x4000F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool forEncryption;

		[Token(Token = "0x1700037E")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001CC4")]
			[Address(RVA = "0x10DDCA8", Offset = "0x10DDCA8", VA = "0x10DDCA8", Slot = "10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700037F")]
		public virtual bool IsPartialBlockOkay
		{
			[Token(Token = "0x6001CC5")]
			[Address(RVA = "0x10DDCF0", Offset = "0x10DDCF0", VA = "0x10DDCF0", Slot = "11")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001CC3")]
		[Address(RVA = "0x10DDCA0", Offset = "0x10DDCA0", VA = "0x10DDCA0")]
		public RC6Engine()
		{
		}

		[Token(Token = "0x6001CC6")]
		[Address(RVA = "0x10DDCF8", Offset = "0x10DDCF8", VA = "0x10DDCF8", Slot = "12")]
		public virtual int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001CC7")]
		[Address(RVA = "0x10DDD64", Offset = "0x10DDD64", VA = "0x10DDD64", Slot = "13")]
		public virtual void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001CC8")]
		[Address(RVA = "0x10DE1A8", Offset = "0x10DE1A8", VA = "0x10DE1A8", Slot = "14")]
		public virtual int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001CC9")]
		[Address(RVA = "0x10DE94C", Offset = "0x10DE94C", VA = "0x10DE94C", Slot = "15")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x6001CCA")]
		[Address(RVA = "0x10DDEBC", Offset = "0x10DDEBC", VA = "0x10DDEBC")]
		private void SetKey(byte[] key)
		{
		}

		[Token(Token = "0x6001CCB")]
		[Address(RVA = "0x10DE610", Offset = "0x10DE610", VA = "0x10DE610")]
		private int EncryptBlock(byte[] input, int inOff, byte[] outBytes, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001CCC")]
		[Address(RVA = "0x10DE2E4", Offset = "0x10DE2E4", VA = "0x10DE2E4")]
		private int DecryptBlock(byte[] input, int inOff, byte[] outBytes, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001CCD")]
		[Address(RVA = "0x10DE950", Offset = "0x10DE950", VA = "0x10DE950")]
		private int RotateLeft(int x, int y)
		{
			return default(int);
		}

		[Token(Token = "0x6001CCE")]
		[Address(RVA = "0x10DEB88", Offset = "0x10DEB88", VA = "0x10DEB88")]
		private int RotateRight(int x, int y)
		{
			return default(int);
		}

		[Token(Token = "0x6001CCF")]
		[Address(RVA = "0x10DE9E0", Offset = "0x10DE9E0", VA = "0x10DE9E0")]
		private int BytesToWord(byte[] src, int srcOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001CD0")]
		[Address(RVA = "0x10DEAA8", Offset = "0x10DEAA8", VA = "0x10DEAA8")]
		private void WordToBytes(int word, byte[] dst, int dstOff)
		{
		}
	}
	[Token(Token = "0x200033F")]
	public class Rfc3211WrapEngine : IWrapper
	{
		[Token(Token = "0x4000F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private CbcBlockCipher engine;

		[Token(Token = "0x4000F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ParametersWithIV param;

		[Token(Token = "0x4000F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool forWrapping;

		[Token(Token = "0x4000F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private SecureRandom rand;

		[Token(Token = "0x17000380")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001CD4")]
			[Address(RVA = "0x10DEE50", Offset = "0x10DEE50", VA = "0x10DEE50", Slot = "9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001CD2")]
		[Address(RVA = "0x10DECC8", Offset = "0x10DECC8", VA = "0x10DECC8")]
		public Rfc3211WrapEngine(IBlockCipher engine)
		{
		}

		[Token(Token = "0x6001CD3")]
		[Address(RVA = "0x10DED44", Offset = "0x10DED44", VA = "0x10DED44", Slot = "8")]
		public virtual void Init(bool forWrapping, ICipherParameters param)
		{
		}

		[Token(Token = "0x6001CD5")]
		[Address(RVA = "0x10DEF1C", Offset = "0x10DEF1C", VA = "0x10DEF1C", Slot = "10")]
		public virtual byte[] Wrap(byte[] inBytes, int inOff, int inLen)
		{
			return null;
		}

		[Token(Token = "0x6001CD6")]
		[Address(RVA = "0x10DF194", Offset = "0x10DF194", VA = "0x10DF194", Slot = "11")]
		public virtual byte[] Unwrap(byte[] inBytes, int inOff, int inLen)
		{
			return null;
		}
	}
	[Token(Token = "0x2000340")]
	public class Rfc3394WrapEngine : IWrapper
	{
		[Token(Token = "0x4000F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IBlockCipher engine;

		[Token(Token = "0x4000F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private KeyParameter param;

		[Token(Token = "0x4000F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool forWrapping;

		[Token(Token = "0x4000F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private byte[] iv;

		[Token(Token = "0x17000381")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001CD9")]
			[Address(RVA = "0x10DF77C", Offset = "0x10DF77C", VA = "0x10DF77C", Slot = "9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001CD7")]
		[Address(RVA = "0x10DF548", Offset = "0x10DF548", VA = "0x10DF548")]
		public Rfc3394WrapEngine(IBlockCipher engine)
		{
		}

		[Token(Token = "0x6001CD8")]
		[Address(RVA = "0x10DF5D4", Offset = "0x10DF5D4", VA = "0x10DF5D4", Slot = "8")]
		public virtual void Init(bool forWrapping, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001CDA")]
		[Address(RVA = "0x10DF82C", Offset = "0x10DF82C", VA = "0x10DF82C", Slot = "10")]
		public virtual byte[] Wrap(byte[] input, int inOff, int inLen)
		{
			return null;
		}

		[Token(Token = "0x6001CDB")]
		[Address(RVA = "0x10DFBC8", Offset = "0x10DFBC8", VA = "0x10DFBC8", Slot = "11")]
		public virtual byte[] Unwrap(byte[] input, int inOff, int inLen)
		{
			return null;
		}
	}
	[Token(Token = "0x2000341")]
	public class RsaBlindedEngine : IAsymmetricBlockCipher
	{
		[Token(Token = "0x4000F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly RsaCoreEngine core;

		[Token(Token = "0x4000F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private RsaKeyParameters key;

		[Token(Token = "0x4000F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private SecureRandom random;

		[Token(Token = "0x17000382")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001CDC")]
			[Address(RVA = "0x10E2380", Offset = "0x10E2380", VA = "0x10E2380", Slot = "9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001CDD")]
		[Address(RVA = "0x10E23C8", Offset = "0x10E23C8", VA = "0x10E23C8", Slot = "10")]
		public virtual void Init(bool forEncryption, ICipherParameters param)
		{
		}

		[Token(Token = "0x6001CDE")]
		[Address(RVA = "0x10E2518", Offset = "0x10E2518", VA = "0x10E2518", Slot = "11")]
		public virtual int GetInputBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001CDF")]
		[Address(RVA = "0x10E2538", Offset = "0x10E2538", VA = "0x10E2538", Slot = "12")]
		public virtual int GetOutputBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001CE0")]
		[Address(RVA = "0x10E2558", Offset = "0x10E2558", VA = "0x10E2558", Slot = "13")]
		public virtual byte[] ProcessBlock(byte[] inBuf, int inOff, int inLen)
		{
			return null;
		}

		[Token(Token = "0x6001CE1")]
		[Address(RVA = "0x10E2778", Offset = "0x10E2778", VA = "0x10E2778")]
		public RsaBlindedEngine()
		{
		}
	}
	[Token(Token = "0x2000342")]
	internal class RsaCoreEngine
	{
		[Token(Token = "0x4000F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private RsaKeyParameters key;

		[Token(Token = "0x4000F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool forEncryption;

		[Token(Token = "0x4000F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int bitSize;

		[Token(Token = "0x6001CE2")]
		[Address(RVA = "0x10E27E8", Offset = "0x10E27E8", VA = "0x10E27E8", Slot = "4")]
		public virtual void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001CE3")]
		[Address(RVA = "0x10E290C", Offset = "0x10E290C", VA = "0x10E290C", Slot = "5")]
		public virtual int GetInputBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001CE4")]
		[Address(RVA = "0x10E2938", Offset = "0x10E2938", VA = "0x10E2938", Slot = "6")]
		public virtual int GetOutputBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001CE5")]
		[Address(RVA = "0x10E2964", Offset = "0x10E2964", VA = "0x10E2964", Slot = "7")]
		public virtual BigInteger ConvertInput(byte[] inBuf, int inOff, int inLen)
		{
			return null;
		}

		[Token(Token = "0x6001CE6")]
		[Address(RVA = "0x10E2A70", Offset = "0x10E2A70", VA = "0x10E2A70", Slot = "8")]
		public virtual byte[] ConvertOutput(BigInteger result)
		{
			return null;
		}

		[Token(Token = "0x6001CE7")]
		[Address(RVA = "0x10E2B3C", Offset = "0x10E2B3C", VA = "0x10E2B3C", Slot = "9")]
		public virtual BigInteger ProcessBlock(BigInteger input)
		{
			return null;
		}

		[Token(Token = "0x6001CE8")]
		[Address(RVA = "0x10E27E0", Offset = "0x10E27E0", VA = "0x10E27E0")]
		public RsaCoreEngine()
		{
		}
	}
	[Token(Token = "0x2000343")]
	public class RijndaelEngine : IBlockCipher
	{
		[Token(Token = "0x4000F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int MAXROUNDS;

		[Token(Token = "0x4000F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly int MAXKC;

		[Token(Token = "0x4000F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly byte[] Logtable;

		[Token(Token = "0x4000F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly byte[] Alogtable;

		[Token(Token = "0x4000F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly byte[] S;

		[Token(Token = "0x4000F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly byte[] Si;

		[Token(Token = "0x4000F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static readonly byte[] rcon;

		[Token(Token = "0x4000F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static readonly byte[][] shifts0;

		[Token(Token = "0x4000F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static readonly byte[][] shifts1;

		[Token(Token = "0x4000F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int BC;

		[Token(Token = "0x4000F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private long BC_MASK;

		[Token(Token = "0x4000F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int ROUNDS;

		[Token(Token = "0x4000F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int blockBits;

		[Token(Token = "0x4000F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private long[][] workingKey;

		[Token(Token = "0x4000F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private long A0;

		[Token(Token = "0x4000F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private long A1;

		[Token(Token = "0x4000F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private long A2;

		[Token(Token = "0x4000FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private long A3;

		[Token(Token = "0x4000FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool forEncryption;

		[Token(Token = "0x4000FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private byte[] shifts0SC;

		[Token(Token = "0x4000FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private byte[] shifts1SC;

		[Token(Token = "0x17000383")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001CFA")]
			[Address(RVA = "0x10E185C", Offset = "0x10E185C", VA = "0x10E185C", Slot = "11")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000384")]
		public virtual bool IsPartialBlockOkay
		{
			[Token(Token = "0x6001CFB")]
			[Address(RVA = "0x10E18A4", Offset = "0x10E18A4", VA = "0x10E18A4", Slot = "12")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001CE9")]
		[Address(RVA = "0x10DFFBC", Offset = "0x10DFFBC", VA = "0x10DFFBC")]
		private byte Mul0x2(int b)
		{
			return default(byte);
		}

		[Token(Token = "0x6001CEA")]
		[Address(RVA = "0x10E007C", Offset = "0x10E007C", VA = "0x10E007C")]
		private byte Mul0x3(int b)
		{
			return default(byte);
		}

		[Token(Token = "0x6001CEB")]
		[Address(RVA = "0x10E013C", Offset = "0x10E013C", VA = "0x10E013C")]
		private byte Mul0x9(int b)
		{
			return default(byte);
		}

		[Token(Token = "0x6001CEC")]
		[Address(RVA = "0x10E01E0", Offset = "0x10E01E0", VA = "0x10E01E0")]
		private byte Mul0xb(int b)
		{
			return default(byte);
		}

		[Token(Token = "0x6001CED")]
		[Address(RVA = "0x10E0284", Offset = "0x10E0284", VA = "0x10E0284")]
		private byte Mul0xd(int b)
		{
			return default(byte);
		}

		[Token(Token = "0x6001CEE")]
		[Address(RVA = "0x10E0328", Offset = "0x10E0328", VA = "0x10E0328")]
		private byte Mul0xe(int b)
		{
			return default(byte);
		}

		[Token(Token = "0x6001CEF")]
		[Address(RVA = "0x10E03CC", Offset = "0x10E03CC", VA = "0x10E03CC")]
		private void KeyAddition(long[] rk)
		{
		}

		[Token(Token = "0x6001CF0")]
		[Address(RVA = "0x10E045C", Offset = "0x10E045C", VA = "0x10E045C")]
		private long Shift(long r, int shift)
		{
			return default(long);
		}

		[Token(Token = "0x6001CF1")]
		[Address(RVA = "0x10E0488", Offset = "0x10E0488", VA = "0x10E0488")]
		private void ShiftRow(byte[] shiftsSC)
		{
		}

		[Token(Token = "0x6001CF2")]
		[Address(RVA = "0x10E055C", Offset = "0x10E055C", VA = "0x10E055C")]
		private long ApplyS(long r, byte[] box)
		{
			return default(long);
		}

		[Token(Token = "0x6001CF3")]
		[Address(RVA = "0x10E05D0", Offset = "0x10E05D0", VA = "0x10E05D0")]
		private void Substitution(byte[] box)
		{
		}

		[Token(Token = "0x6001CF4")]
		[Address(RVA = "0x10E0640", Offset = "0x10E0640", VA = "0x10E0640")]
		private void MixColumn()
		{
		}

		[Token(Token = "0x6001CF5")]
		[Address(RVA = "0x10E07E4", Offset = "0x10E07E4", VA = "0x10E07E4")]
		private void InvMixColumn()
		{
		}

		[Token(Token = "0x6001CF6")]
		[Address(RVA = "0x10E0B28", Offset = "0x10E0B28", VA = "0x10E0B28")]
		private long[][] GenerateWorkingKey(byte[] key)
		{
			return null;
		}

		[Token(Token = "0x6001CF7")]
		[Address(RVA = "0x10E13AC", Offset = "0x10E13AC", VA = "0x10E13AC")]
		public RijndaelEngine()
		{
		}

		[Token(Token = "0x6001CF8")]
		[Address(RVA = "0x10E13B4", Offset = "0x10E13B4", VA = "0x10E13B4")]
		public RijndaelEngine(int blockBits)
		{
		}

		[Token(Token = "0x6001CF9")]
		[Address(RVA = "0x10E16CC", Offset = "0x10E16CC", VA = "0x10E16CC", Slot = "10")]
		public virtual void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001CFC")]
		[Address(RVA = "0x10E18AC", Offset = "0x10E18AC", VA = "0x10E18AC", Slot = "13")]
		public virtual int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001CFD")]
		[Address(RVA = "0x10E18C0", Offset = "0x10E18C0", VA = "0x10E18C0", Slot = "14")]
		public virtual int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001CFE")]
		[Address(RVA = "0x10E1EC4", Offset = "0x10E1EC4", VA = "0x10E1EC4", Slot = "15")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x6001CFF")]
		[Address(RVA = "0x10E1A08", Offset = "0x10E1A08", VA = "0x10E1A08")]
		private void UnPackBlock(byte[] bytes, int off)
		{
		}

		[Token(Token = "0x6001D00")]
		[Address(RVA = "0x10E1DF8", Offset = "0x10E1DF8", VA = "0x10E1DF8")]
		private void PackBlock(byte[] bytes, int off)
		{
		}

		[Token(Token = "0x6001D01")]
		[Address(RVA = "0x10E1B4C", Offset = "0x10E1B4C", VA = "0x10E1B4C")]
		private void EncryptBlock(long[][] rk)
		{
		}

		[Token(Token = "0x6001D02")]
		[Address(RVA = "0x10E1CAC", Offset = "0x10E1CAC", VA = "0x10E1CAC")]
		private void DecryptBlock(long[][] rk)
		{
		}
	}
	[Token(Token = "0x2000344")]
	public class SeedEngine : IBlockCipher
	{
		[Token(Token = "0x4000FA4")]
		private const int BlockSize = 16;

		[Token(Token = "0x4000FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly uint[] SS0;

		[Token(Token = "0x4000FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly uint[] SS1;

		[Token(Token = "0x4000FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly uint[] SS2;

		[Token(Token = "0x4000FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly uint[] SS3;

		[Token(Token = "0x4000FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly uint[] KC;

		[Token(Token = "0x4000FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int[] wKey;

		[Token(Token = "0x4000FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool forEncryption;

		[Token(Token = "0x17000385")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001D05")]
			[Address(RVA = "0x10E4254", Offset = "0x10E4254", VA = "0x10E4254", Slot = "11")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000386")]
		public virtual bool IsPartialBlockOkay
		{
			[Token(Token = "0x6001D06")]
			[Address(RVA = "0x10E429C", Offset = "0x10E429C", VA = "0x10E429C", Slot = "12")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001D04")]
		[Address(RVA = "0x10E3FD8", Offset = "0x10E3FD8", VA = "0x10E3FD8", Slot = "10")]
		public virtual void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001D07")]
		[Address(RVA = "0x10E42A4", Offset = "0x10E42A4", VA = "0x10E42A4", Slot = "13")]
		public virtual int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001D08")]
		[Address(RVA = "0x10E42AC", Offset = "0x10E42AC", VA = "0x10E42AC", Slot = "14")]
		public virtual int ProcessBlock(byte[] inBuf, int inOff, byte[] outBuf, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001D09")]
		[Address(RVA = "0x10E45F4", Offset = "0x10E45F4", VA = "0x10E45F4", Slot = "15")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x6001D0A")]
		[Address(RVA = "0x10E4090", Offset = "0x10E4090", VA = "0x10E4090")]
		private int[] createWorkingKey(byte[] inKey)
		{
			return null;
		}

		[Token(Token = "0x6001D0B")]
		[Address(RVA = "0x10E4600", Offset = "0x10E4600", VA = "0x10E4600")]
		private int extractW1(long lVal)
		{
			return default(int);
		}

		[Token(Token = "0x6001D0C")]
		[Address(RVA = "0x10E45F8", Offset = "0x10E45F8", VA = "0x10E45F8")]
		private int extractW0(long lVal)
		{
			return default(int);
		}

		[Token(Token = "0x6001D0D")]
		[Address(RVA = "0x10E4714", Offset = "0x10E4714", VA = "0x10E4714")]
		private long rotateLeft8(long x)
		{
			return default(long);
		}

		[Token(Token = "0x6001D0E")]
		[Address(RVA = "0x10E470C", Offset = "0x10E470C", VA = "0x10E470C")]
		private long rotateRight8(long x)
		{
			return default(long);
		}

		[Token(Token = "0x6001D0F")]
		[Address(RVA = "0x10E44A8", Offset = "0x10E44A8", VA = "0x10E44A8")]
		private long bytesToLong(byte[] src, int srcOff)
		{
			return default(long);
		}

		[Token(Token = "0x6001D10")]
		[Address(RVA = "0x10E4584", Offset = "0x10E4584", VA = "0x10E4584")]
		private void longToBytes(byte[] dest, int destOff, long value)
		{
		}

		[Token(Token = "0x6001D11")]
		[Address(RVA = "0x10E4608", Offset = "0x10E4608", VA = "0x10E4608")]
		private int G(int x)
		{
			return default(int);
		}

		[Token(Token = "0x6001D12")]
		[Address(RVA = "0x10E4514", Offset = "0x10E4514", VA = "0x10E4514")]
		private long F(int ki0, int ki1, long r)
		{
			return default(long);
		}

		[Token(Token = "0x6001D13")]
		[Address(RVA = "0x10E4760", Offset = "0x10E4760", VA = "0x10E4760")]
		private int phaseCalc1(int r0, int ki0, int r1, int ki1)
		{
			return default(int);
		}

		[Token(Token = "0x6001D14")]
		[Address(RVA = "0x10E471C", Offset = "0x10E471C", VA = "0x10E471C")]
		private int phaseCalc2(int r0, int ki0, int r1, int ki1)
		{
			return default(int);
		}

		[Token(Token = "0x6001D15")]
		[Address(RVA = "0x10E478C", Offset = "0x10E478C", VA = "0x10E478C")]
		public SeedEngine()
		{
		}
	}
	[Token(Token = "0x2000345")]
	public class SeedWrapEngine : Rfc3394WrapEngine
	{
		[Token(Token = "0x6001D17")]
		[Address(RVA = "0x10E48D8", Offset = "0x10E48D8", VA = "0x10E48D8")]
		public SeedWrapEngine()
		{
		}
	}
	[Token(Token = "0x2000346")]
	public class Salsa20Engine : IStreamCipher
	{
		[Token(Token = "0x4000FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int DEFAULT_ROUNDS;

		[Token(Token = "0x4000FAD")]
		private const int StateSize = 16;

		[Token(Token = "0x4000FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		protected static readonly byte[] sigma;

		[Token(Token = "0x4000FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected static readonly byte[] tau;

		[Token(Token = "0x4000FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected int rounds;

		[Token(Token = "0x4000FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int index;

		[Token(Token = "0x4000FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal uint[] engineState;

		[Token(Token = "0x4000FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal uint[] x;

		[Token(Token = "0x4000FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private byte[] keyStream;

		[Token(Token = "0x4000FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool initialised;

		[Token(Token = "0x4000FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private uint cW0;

		[Token(Token = "0x4000FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private uint cW1;

		[Token(Token = "0x4000FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private uint cW2;

		[Token(Token = "0x17000387")]
		protected virtual int NonceSize
		{
			[Token(Token = "0x6001D1B")]
			[Address(RVA = "0x10E30E4", Offset = "0x10E30E4", VA = "0x10E30E4", Slot = "10")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000388")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001D1C")]
			[Address(RVA = "0x10E30EC", Offset = "0x10E30EC", VA = "0x10E30EC", Slot = "11")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001D18")]
		[Address(RVA = "0x10E2CA4", Offset = "0x10E2CA4", VA = "0x10E2CA4")]
		public Salsa20Engine()
		{
		}

		[Token(Token = "0x6001D19")]
		[Address(RVA = "0x10E2D14", Offset = "0x10E2D14", VA = "0x10E2D14")]
		public Salsa20Engine(int rounds)
		{
		}

		[Token(Token = "0x6001D1A")]
		[Address(RVA = "0x10E2DF8", Offset = "0x10E2DF8", VA = "0x10E2DF8", Slot = "9")]
		public virtual void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001D1D")]
		[Address(RVA = "0x10E31C0", Offset = "0x10E31C0", VA = "0x10E31C0", Slot = "12")]
		public virtual byte ReturnByte(byte input)
		{
			return default(byte);
		}

		[Token(Token = "0x6001D1E")]
		[Address(RVA = "0x10E3328", Offset = "0x10E3328", VA = "0x10E3328", Slot = "13")]
		protected virtual void AdvanceCounter()
		{
		}

		[Token(Token = "0x6001D1F")]
		[Address(RVA = "0x10E338C", Offset = "0x10E338C", VA = "0x10E338C", Slot = "14")]
		public virtual void ProcessBytes(byte[] inBytes, int inOff, int len, byte[] outBytes, int outOff)
		{
		}

		[Token(Token = "0x6001D20")]
		[Address(RVA = "0x10E3630", Offset = "0x10E3630", VA = "0x10E3630", Slot = "15")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x6001D21")]
		[Address(RVA = "0x10E3658", Offset = "0x10E3658", VA = "0x10E3658", Slot = "16")]
		protected virtual void ResetCounter()
		{
		}

		[Token(Token = "0x6001D22")]
		[Address(RVA = "0x10E3690", Offset = "0x10E3690", VA = "0x10E3690", Slot = "17")]
		protected virtual void SetKey(byte[] keyBytes, byte[] ivBytes)
		{
		}

		[Token(Token = "0x6001D23")]
		[Address(RVA = "0x10E3A10", Offset = "0x10E3A10", VA = "0x10E3A10", Slot = "18")]
		protected virtual void GenerateKeyStream(byte[] output)
		{
		}

		[Token(Token = "0x6001D24")]
		[Address(RVA = "0x10E3AAC", Offset = "0x10E3AAC", VA = "0x10E3AAC")]
		internal static void SalsaCore(int rounds, uint[] input, uint[] x)
		{
		}

		[Token(Token = "0x6001D25")]
		[Address(RVA = "0x10E3F38", Offset = "0x10E3F38", VA = "0x10E3F38")]
		internal static uint R(uint x, int y)
		{
			return default(uint);
		}

		[Token(Token = "0x6001D26")]
		[Address(RVA = "0x10E364C", Offset = "0x10E364C", VA = "0x10E364C")]
		private void ResetLimitCounter()
		{
		}

		[Token(Token = "0x6001D27")]
		[Address(RVA = "0x10E32EC", Offset = "0x10E32EC", VA = "0x10E32EC")]
		private bool LimitExceeded()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D28")]
		[Address(RVA = "0x10E35F4", Offset = "0x10E35F4", VA = "0x10E35F4")]
		private bool LimitExceeded(uint len)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000347")]
	public class SerpentEngine : IBlockCipher
	{
		[Token(Token = "0x4000FB9")]
		private const int BLOCK_SIZE = 16;

		[Token(Token = "0x4000FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int ROUNDS;

		[Token(Token = "0x4000FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly int PHI;

		[Token(Token = "0x4000FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool encrypting;

		[Token(Token = "0x4000FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int[] wKey;

		[Token(Token = "0x4000FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int X0;

		[Token(Token = "0x4000FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int X1;

		[Token(Token = "0x4000FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int X2;

		[Token(Token = "0x4000FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int X3;

		[Token(Token = "0x17000389")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001D2B")]
			[Address(RVA = "0x10E657C", Offset = "0x10E657C", VA = "0x10E657C", Slot = "11")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700038A")]
		public virtual bool IsPartialBlockOkay
		{
			[Token(Token = "0x6001D2C")]
			[Address(RVA = "0x10E65C4", Offset = "0x10E65C4", VA = "0x10E65C4", Slot = "12")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001D2A")]
		[Address(RVA = "0x10E493C", Offset = "0x10E493C", VA = "0x10E493C", Slot = "10")]
		public virtual void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001D2D")]
		[Address(RVA = "0x10E65CC", Offset = "0x10E65CC", VA = "0x10E65CC", Slot = "13")]
		public virtual int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001D2E")]
		[Address(RVA = "0x10E65D4", Offset = "0x10E65D4", VA = "0x10E65D4", Slot = "14")]
		public virtual int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001D2F")]
		[Address(RVA = "0x10E94EC", Offset = "0x10E94EC", VA = "0x10E94EC", Slot = "15")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x6001D30")]
		[Address(RVA = "0x10E4A9C", Offset = "0x10E4A9C", VA = "0x10E4A9C")]
		private int[] MakeWorkingKey(byte[] key)
		{
			return null;
		}

		[Token(Token = "0x6001D31")]
		[Address(RVA = "0x10E9570", Offset = "0x10E9570", VA = "0x10E9570")]
		private int RotateLeft(int x, int bits)
		{
			return default(int);
		}

		[Token(Token = "0x6001D32")]
		[Address(RVA = "0x10E97A8", Offset = "0x10E97A8", VA = "0x10E97A8")]
		private int RotateRight(int x, int bits)
		{
			return default(int);
		}

		[Token(Token = "0x6001D33")]
		[Address(RVA = "0x10E94F0", Offset = "0x10E94F0", VA = "0x10E94F0")]
		private int BytesToWord(byte[] src, int srcOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001D34")]
		[Address(RVA = "0x10E97B0", Offset = "0x10E97B0", VA = "0x10E97B0")]
		private void WordToBytes(int word, byte[] dst, int dstOff)
		{
		}

		[Token(Token = "0x6001D35")]
		[Address(RVA = "0x10E66F8", Offset = "0x10E66F8", VA = "0x10E66F8")]
		private void EncryptBlock(byte[] input, int inOff, byte[] outBytes, int outOff)
		{
		}

		[Token(Token = "0x6001D36")]
		[Address(RVA = "0x10E7C40", Offset = "0x10E7C40", VA = "0x10E7C40")]
		private void DecryptBlock(byte[] input, int inOff, byte[] outBytes, int outOff)
		{
		}

		[Token(Token = "0x6001D37")]
		[Address(RVA = "0x10E9654", Offset = "0x10E9654", VA = "0x10E9654")]
		private void Sb0(int a, int b, int c, int d)
		{
		}

		[Token(Token = "0x6001D38")]
		[Address(RVA = "0x10E9AAC", Offset = "0x10E9AAC", VA = "0x10E9AAC")]
		private void Ib0(int a, int b, int c, int d)
		{
		}

		[Token(Token = "0x6001D39")]
		[Address(RVA = "0x10E9614", Offset = "0x10E9614", VA = "0x10E9614")]
		private void Sb1(int a, int b, int c, int d)
		{
		}

		[Token(Token = "0x6001D3A")]
		[Address(RVA = "0x10E9A6C", Offset = "0x10E9A6C", VA = "0x10E9A6C")]
		private void Ib1(int a, int b, int c, int d)
		{
		}

		[Token(Token = "0x6001D3B")]
		[Address(RVA = "0x10E95C8", Offset = "0x10E95C8", VA = "0x10E95C8")]
		private void Sb2(int a, int b, int c, int d)
		{
		}

		[Token(Token = "0x6001D3C")]
		[Address(RVA = "0x10E9A28", Offset = "0x10E9A28", VA = "0x10E9A28")]
		private void Ib2(int a, int b, int c, int d)
		{
		}

		[Token(Token = "0x6001D3D")]
		[Address(RVA = "0x10E957C", Offset = "0x10E957C", VA = "0x10E957C")]
		private void Sb3(int a, int b, int c, int d)
		{
		}

		[Token(Token = "0x6001D3E")]
		[Address(RVA = "0x10E99E0", Offset = "0x10E99E0", VA = "0x10E99E0")]
		private void Ib3(int a, int b, int c, int d)
		{
		}

		[Token(Token = "0x6001D3F")]
		[Address(RVA = "0x10E9764", Offset = "0x10E9764", VA = "0x10E9764")]
		private void Sb4(int a, int b, int c, int d)
		{
		}

		[Token(Token = "0x6001D40")]
		[Address(RVA = "0x10E999C", Offset = "0x10E999C", VA = "0x10E999C")]
		private void Ib4(int a, int b, int c, int d)
		{
		}

		[Token(Token = "0x6001D41")]
		[Address(RVA = "0x10E971C", Offset = "0x10E971C", VA = "0x10E971C")]
		private void Sb5(int a, int b, int c, int d)
		{
		}

		[Token(Token = "0x6001D42")]
		[Address(RVA = "0x10E9954", Offset = "0x10E9954", VA = "0x10E9954")]
		private void Ib5(int a, int b, int c, int d)
		{
		}

		[Token(Token = "0x6001D43")]
		[Address(RVA = "0x10E96DC", Offset = "0x10E96DC", VA = "0x10E96DC")]
		private void Sb6(int a, int b, int c, int d)
		{
		}

		[Token(Token = "0x6001D44")]
		[Address(RVA = "0x10E9910", Offset = "0x10E9910", VA = "0x10E9910")]
		private void Ib6(int a, int b, int c, int d)
		{
		}

		[Token(Token = "0x6001D45")]
		[Address(RVA = "0x10E9694", Offset = "0x10E9694", VA = "0x10E9694")]
		private void Sb7(int a, int b, int c, int d)
		{
		}

		[Token(Token = "0x6001D46")]
		[Address(RVA = "0x10E9888", Offset = "0x10E9888", VA = "0x10E9888")]
		private void Ib7(int a, int b, int c, int d)
		{
		}

		[Token(Token = "0x6001D47")]
		[Address(RVA = "0x10E983C", Offset = "0x10E983C", VA = "0x10E983C")]
		private void LT()
		{
		}

		[Token(Token = "0x6001D48")]
		[Address(RVA = "0x10E98D4", Offset = "0x10E98D4", VA = "0x10E98D4")]
		private void InverseLT()
		{
		}

		[Token(Token = "0x6001D49")]
		[Address(RVA = "0x10E9AF0", Offset = "0x10E9AF0", VA = "0x10E9AF0")]
		public SerpentEngine()
		{
		}
	}
	[Token(Token = "0x2000348")]
	public class SkipjackEngine : IBlockCipher
	{
		[Token(Token = "0x4000FC2")]
		private const int BLOCK_SIZE = 8;

		[Token(Token = "0x4000FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly short[] ftable;

		[Token(Token = "0x4000FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int[] key0;

		[Token(Token = "0x4000FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int[] key1;

		[Token(Token = "0x4000FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int[] key2;

		[Token(Token = "0x4000FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int[] key3;

		[Token(Token = "0x4000FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool encrypting;

		[Token(Token = "0x1700038B")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001D4C")]
			[Address(RVA = "0x10A10E0", Offset = "0x10A10E0", VA = "0x10A10E0", Slot = "11")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700038C")]
		public virtual bool IsPartialBlockOkay
		{
			[Token(Token = "0x6001D4D")]
			[Address(RVA = "0x10A1128", Offset = "0x10A1128", VA = "0x10A1128", Slot = "12")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001D4B")]
		[Address(RVA = "0x10A0DAC", Offset = "0x10A0DAC", VA = "0x10A0DAC", Slot = "10")]
		public virtual void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001D4E")]
		[Address(RVA = "0x10A1130", Offset = "0x10A1130", VA = "0x10A1130", Slot = "13")]
		public virtual int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001D4F")]
		[Address(RVA = "0x10A1138", Offset = "0x10A1138", VA = "0x10A1138", Slot = "14")]
		public virtual int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001D50")]
		[Address(RVA = "0x10A1258", Offset = "0x10A1258", VA = "0x10A1258", Slot = "15")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x6001D51")]
		[Address(RVA = "0x10A125C", Offset = "0x10A125C", VA = "0x10A125C")]
		private int G(int k, int w)
		{
			return default(int);
		}

		[Token(Token = "0x6001D52")]
		[Address(RVA = "0x10A13D0", Offset = "0x10A13D0", VA = "0x10A13D0", Slot = "16")]
		public virtual int EncryptBlock(byte[] input, int inOff, byte[] outBytes, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001D53")]
		[Address(RVA = "0x10A1624", Offset = "0x10A1624", VA = "0x10A1624")]
		private int H(int k, int w)
		{
			return default(int);
		}

		[Token(Token = "0x6001D54")]
		[Address(RVA = "0x10A1798", Offset = "0x10A1798", VA = "0x10A1798", Slot = "17")]
		public virtual int DecryptBlock(byte[] input, int inOff, byte[] outBytes, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001D55")]
		[Address(RVA = "0x10A1A08", Offset = "0x10A1A08", VA = "0x10A1A08")]
		public SkipjackEngine()
		{
		}
	}
	[Token(Token = "0x2000349")]
	public class TeaEngine : IBlockCipher
	{
		[Token(Token = "0x4000FC9")]
		private const int rounds = 32;

		[Token(Token = "0x4000FCA")]
		private const int block_size = 8;

		[Token(Token = "0x4000FCB")]
		private const uint delta = 2654435769u;

		[Token(Token = "0x4000FCC")]
		private const uint d_sum = 3337565984u;

		[Token(Token = "0x4000FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private uint _a;

		[Token(Token = "0x4000FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private uint _b;

		[Token(Token = "0x4000FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private uint _c;

		[Token(Token = "0x4000FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private uint _d;

		[Token(Token = "0x4000FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool _initialised;

		[Token(Token = "0x4000FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private bool _forEncryption;

		[Token(Token = "0x1700038D")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001D58")]
			[Address(RVA = "0x10A1AB4", Offset = "0x10A1AB4", VA = "0x10A1AB4", Slot = "10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700038E")]
		public virtual bool IsPartialBlockOkay
		{
			[Token(Token = "0x6001D59")]
			[Address(RVA = "0x10A1AFC", Offset = "0x10A1AFC", VA = "0x10A1AFC", Slot = "11")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001D57")]
		[Address(RVA = "0x10A1A8C", Offset = "0x10A1A8C", VA = "0x10A1A8C")]
		public TeaEngine()
		{
		}

		[Token(Token = "0x6001D5A")]
		[Address(RVA = "0x10A1B04", Offset = "0x10A1B04", VA = "0x10A1B04", Slot = "12")]
		public virtual int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001D5B")]
		[Address(RVA = "0x10A1B0C", Offset = "0x10A1B0C", VA = "0x10A1B0C", Slot = "13")]
		public virtual void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001D5C")]
		[Address(RVA = "0x10A1CE0", Offset = "0x10A1CE0", VA = "0x10A1CE0", Slot = "14")]
		public virtual int ProcessBlock(byte[] inBytes, int inOff, byte[] outBytes, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001D5D")]
		[Address(RVA = "0x10A2000", Offset = "0x10A2000", VA = "0x10A2000", Slot = "15")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x6001D5E")]
		[Address(RVA = "0x10A1C70", Offset = "0x10A1C70", VA = "0x10A1C70")]
		private void setKey(byte[] key)
		{
		}

		[Token(Token = "0x6001D5F")]
		[Address(RVA = "0x10A1F10", Offset = "0x10A1F10", VA = "0x10A1F10")]
		private int encryptBlock(byte[] inBytes, int inOff, byte[] outBytes, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001D60")]
		[Address(RVA = "0x10A1E28", Offset = "0x10A1E28", VA = "0x10A1E28")]
		private int decryptBlock(byte[] inBytes, int inOff, byte[] outBytes, int outOff)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200034A")]
	public sealed class TwofishEngine : IBlockCipher
	{
		[Token(Token = "0x4000FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly byte[,] P;

		[Token(Token = "0x4000FD4")]
		private const int P_00 = 1;

		[Token(Token = "0x4000FD5")]
		private const int P_01 = 0;

		[Token(Token = "0x4000FD6")]
		private const int P_02 = 0;

		[Token(Token = "0x4000FD7")]
		private const int P_03 = 1;

		[Token(Token = "0x4000FD8")]
		private const int P_04 = 1;

		[Token(Token = "0x4000FD9")]
		private const int P_10 = 0;

		[Token(Token = "0x4000FDA")]
		private const int P_11 = 0;

		[Token(Token = "0x4000FDB")]
		private const int P_12 = 1;

		[Token(Token = "0x4000FDC")]
		private const int P_13 = 1;

		[Token(Token = "0x4000FDD")]
		private const int P_14 = 0;

		[Token(Token = "0x4000FDE")]
		private const int P_20 = 1;

		[Token(Token = "0x4000FDF")]
		private const int P_21 = 1;

		[Token(Token = "0x4000FE0")]
		private const int P_22 = 0;

		[Token(Token = "0x4000FE1")]
		private const int P_23 = 0;

		[Token(Token = "0x4000FE2")]
		private const int P_24 = 0;

		[Token(Token = "0x4000FE3")]
		private const int P_30 = 0;

		[Token(Token = "0x4000FE4")]
		private const int P_31 = 1;

		[Token(Token = "0x4000FE5")]
		private const int P_32 = 1;

		[Token(Token = "0x4000FE6")]
		private const int P_33 = 0;

		[Token(Token = "0x4000FE7")]
		private const int P_34 = 1;

		[Token(Token = "0x4000FE8")]
		private const int GF256_FDBK = 361;

		[Token(Token = "0x4000FE9")]
		private const int GF256_FDBK_2 = 180;

		[Token(Token = "0x4000FEA")]
		private const int GF256_FDBK_4 = 90;

		[Token(Token = "0x4000FEB")]
		private const int RS_GF_FDBK = 333;

		[Token(Token = "0x4000FEC")]
		private const int ROUNDS = 16;

		[Token(Token = "0x4000FED")]
		private const int MAX_ROUNDS = 16;

		[Token(Token = "0x4000FEE")]
		private const int BLOCK_SIZE = 16;

		[Token(Token = "0x4000FEF")]
		private const int MAX_KEY_BITS = 256;

		[Token(Token = "0x4000FF0")]
		private const int INPUT_WHITEN = 0;

		[Token(Token = "0x4000FF1")]
		private const int OUTPUT_WHITEN = 4;

		[Token(Token = "0x4000FF2")]
		private const int ROUND_SUBKEYS = 8;

		[Token(Token = "0x4000FF3")]
		private const int TOTAL_SUBKEYS = 40;

		[Token(Token = "0x4000FF4")]
		private const int SK_STEP = 33686018;

		[Token(Token = "0x4000FF5")]
		private const int SK_BUMP = 16843009;

		[Token(Token = "0x4000FF6")]
		private const int SK_ROTL = 9;

		[Token(Token = "0x4000FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool encrypting;

		[Token(Token = "0x4000FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int[] gMDS0;

		[Token(Token = "0x4000FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int[] gMDS1;

		[Token(Token = "0x4000FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int[] gMDS2;

		[Token(Token = "0x4000FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int[] gMDS3;

		[Token(Token = "0x4000FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int[] gSubKeys;

		[Token(Token = "0x4000FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int[] gSBox;

		[Token(Token = "0x4000FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int k64Cnt;

		[Token(Token = "0x4000FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private byte[] workingKey;

		[Token(Token = "0x1700038F")]
		public string AlgorithmName
		{
			[Token(Token = "0x6001D63")]
			[Address(RVA = "0x10A2F1C", Offset = "0x10A2F1C", VA = "0x10A2F1C", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000390")]
		public bool IsPartialBlockOkay
		{
			[Token(Token = "0x6001D64")]
			[Address(RVA = "0x10A2F64", Offset = "0x10A2F64", VA = "0x10A2F64", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001D61")]
		[Address(RVA = "0x10A2004", Offset = "0x10A2004", VA = "0x10A2004")]
		public TwofishEngine()
		{
		}

		[Token(Token = "0x6001D62")]
		[Address(RVA = "0x10A23F4", Offset = "0x10A23F4", VA = "0x10A23F4", Slot = "5")]
		public void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001D65")]
		[Address(RVA = "0x10A2F6C", Offset = "0x10A2F6C", VA = "0x10A2F6C", Slot = "8")]
		public int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001D66")]
		[Address(RVA = "0x10A35A0", Offset = "0x10A35A0", VA = "0x10A35A0", Slot = "9")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001D67")]
		[Address(RVA = "0x10A35B0", Offset = "0x10A35B0", VA = "0x10A35B0", Slot = "6")]
		public int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001D68")]
		[Address(RVA = "0x10A2570", Offset = "0x10A2570", VA = "0x10A2570")]
		private void SetKey(byte[] key)
		{
		}

		[Token(Token = "0x6001D69")]
		[Address(RVA = "0x10A3090", Offset = "0x10A3090", VA = "0x10A3090")]
		private void EncryptBlock(byte[] src, int srcIndex, byte[] dst, int dstIndex)
		{
		}

		[Token(Token = "0x6001D6A")]
		[Address(RVA = "0x10A3318", Offset = "0x10A3318", VA = "0x10A3318")]
		private void DecryptBlock(byte[] src, int srcIndex, byte[] dst, int dstIndex)
		{
		}

		[Token(Token = "0x6001D6B")]
		[Address(RVA = "0x10A36D4", Offset = "0x10A36D4", VA = "0x10A36D4")]
		private int F32(int x, int[] k32)
		{
			return default(int);
		}

		[Token(Token = "0x6001D6C")]
		[Address(RVA = "0x10A3634", Offset = "0x10A3634", VA = "0x10A3634")]
		private int RS_MDS_Encode(int k0, int k1)
		{
			return default(int);
		}

		[Token(Token = "0x6001D6D")]
		[Address(RVA = "0x10A3D68", Offset = "0x10A3D68", VA = "0x10A3D68")]
		private int RS_rem(int x)
		{
			return default(int);
		}

		[Token(Token = "0x6001D6E")]
		[Address(RVA = "0x10A3DA8", Offset = "0x10A3DA8", VA = "0x10A3DA8")]
		private int LFSR1(int x)
		{
			return default(int);
		}

		[Token(Token = "0x6001D6F")]
		[Address(RVA = "0x10A3DBC", Offset = "0x10A3DBC", VA = "0x10A3DBC")]
		private int LFSR2(int x)
		{
			return default(int);
		}

		[Token(Token = "0x6001D70")]
		[Address(RVA = "0x10A2398", Offset = "0x10A2398", VA = "0x10A2398")]
		private int Mx_X(int x)
		{
			return default(int);
		}

		[Token(Token = "0x6001D71")]
		[Address(RVA = "0x10A23C0", Offset = "0x10A23C0", VA = "0x10A23C0")]
		private int Mx_Y(int x)
		{
			return default(int);
		}

		[Token(Token = "0x6001D72")]
		[Address(RVA = "0x10A3B84", Offset = "0x10A3B84", VA = "0x10A3B84")]
		private int M_b0(int x)
		{
			return default(int);
		}

		[Token(Token = "0x6001D73")]
		[Address(RVA = "0x10A3B8C", Offset = "0x10A3B8C", VA = "0x10A3B8C")]
		private int M_b1(int x)
		{
			return default(int);
		}

		[Token(Token = "0x6001D74")]
		[Address(RVA = "0x10A3B94", Offset = "0x10A3B94", VA = "0x10A3B94")]
		private int M_b2(int x)
		{
			return default(int);
		}

		[Token(Token = "0x6001D75")]
		[Address(RVA = "0x10A3B9C", Offset = "0x10A3B9C", VA = "0x10A3B9C")]
		private int M_b3(int x)
		{
			return default(int);
		}

		[Token(Token = "0x6001D76")]
		[Address(RVA = "0x10A3BA4", Offset = "0x10A3BA4", VA = "0x10A3BA4")]
		private int Fe32_0(int x)
		{
			return default(int);
		}

		[Token(Token = "0x6001D77")]
		[Address(RVA = "0x10A3C3C", Offset = "0x10A3C3C", VA = "0x10A3C3C")]
		private int Fe32_3(int x)
		{
			return default(int);
		}

		[Token(Token = "0x6001D78")]
		[Address(RVA = "0x10A35B8", Offset = "0x10A35B8", VA = "0x10A35B8")]
		private int BytesTo32Bits(byte[] b, int p)
		{
			return default(int);
		}

		[Token(Token = "0x6001D79")]
		[Address(RVA = "0x10A3CDC", Offset = "0x10A3CDC", VA = "0x10A3CDC")]
		private void Bits32ToBytes(int inData, byte[] b, int offset)
		{
		}
	}
	[Token(Token = "0x200034B")]
	public class VmpcEngine : IStreamCipher
	{
		[Token(Token = "0x4001000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected byte n;

		[Token(Token = "0x4001001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected byte[] P;

		[Token(Token = "0x4001002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected byte s;

		[Token(Token = "0x4001003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected byte[] workingIV;

		[Token(Token = "0x4001004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected byte[] workingKey;

		[Token(Token = "0x17000391")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001D7B")]
			[Address(RVA = "0x10A3E74", Offset = "0x10A3E74", VA = "0x10A3E74", Slot = "9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001D7C")]
		[Address(RVA = "0x10A3EBC", Offset = "0x10A3EBC", VA = "0x10A3EBC", Slot = "10")]
		public virtual void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001D7D")]
		[Address(RVA = "0x10A4038", Offset = "0x10A4038", VA = "0x10A4038", Slot = "11")]
		protected virtual void InitKey(byte[] keyBytes, byte[] ivBytes)
		{
		}

		[Token(Token = "0x6001D7E")]
		[Address(RVA = "0x10A4264", Offset = "0x10A4264", VA = "0x10A4264", Slot = "12")]
		public virtual void ProcessBytes(byte[] input, int inOff, int len, byte[] output, int outOff)
		{
		}

		[Token(Token = "0x6001D7F")]
		[Address(RVA = "0x10A4444", Offset = "0x10A4444", VA = "0x10A4444", Slot = "13")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x6001D80")]
		[Address(RVA = "0x10A4454", Offset = "0x10A4454", VA = "0x10A4454", Slot = "14")]
		public virtual byte ReturnByte(byte input)
		{
			return default(byte);
		}

		[Token(Token = "0x6001D81")]
		[Address(RVA = "0x10A4534", Offset = "0x10A4534", VA = "0x10A4534")]
		public VmpcEngine()
		{
		}
	}
	[Token(Token = "0x200034C")]
	public class VmpcKsa3Engine : VmpcEngine
	{
		[Token(Token = "0x17000392")]
		public override string AlgorithmName
		{
			[Token(Token = "0x6001D82")]
			[Address(RVA = "0x10A453C", Offset = "0x10A453C", VA = "0x10A453C", Slot = "9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001D83")]
		[Address(RVA = "0x10A4584", Offset = "0x10A4584", VA = "0x10A4584", Slot = "11")]
		protected override void InitKey(byte[] keyBytes, byte[] ivBytes)
		{
		}

		[Token(Token = "0x6001D84")]
		[Address(RVA = "0x10A4868", Offset = "0x10A4868", VA = "0x10A4868")]
		public VmpcKsa3Engine()
		{
		}
	}
	[Token(Token = "0x200034D")]
	public class XteaEngine : IBlockCipher
	{
		[Token(Token = "0x4001005")]
		private const int rounds = 32;

		[Token(Token = "0x4001006")]
		private const int block_size = 8;

		[Token(Token = "0x4001007")]
		private const int delta = -1640531527;

		[Token(Token = "0x4001008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private uint[] _S;

		[Token(Token = "0x4001009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private uint[] _sum0;

		[Token(Token = "0x400100A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private uint[] _sum1;

		[Token(Token = "0x400100B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _initialised;

		[Token(Token = "0x400100C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool _forEncryption;

		[Token(Token = "0x17000393")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001D86")]
			[Address(RVA = "0x10A48F8", Offset = "0x10A48F8", VA = "0x10A48F8", Slot = "10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000394")]
		public virtual bool IsPartialBlockOkay
		{
			[Token(Token = "0x6001D87")]
			[Address(RVA = "0x10A4940", Offset = "0x10A4940", VA = "0x10A4940", Slot = "11")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001D85")]
		[Address(RVA = "0x10A4870", Offset = "0x10A4870", VA = "0x10A4870")]
		public XteaEngine()
		{
		}

		[Token(Token = "0x6001D88")]
		[Address(RVA = "0x10A4948", Offset = "0x10A4948", VA = "0x10A4948", Slot = "12")]
		public virtual int GetBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001D89")]
		[Address(RVA = "0x10A4950", Offset = "0x10A4950", VA = "0x10A4950", Slot = "13")]
		public virtual void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001D8A")]
		[Address(RVA = "0x10A4BDC", Offset = "0x10A4BDC", VA = "0x10A4BDC", Slot = "14")]
		public virtual int ProcessBlock(byte[] inBytes, int inOff, byte[] outBytes, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001D8B")]
		[Address(RVA = "0x10A4F3C", Offset = "0x10A4F3C", VA = "0x10A4F3C", Slot = "15")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x6001D8C")]
		[Address(RVA = "0x10A4AB4", Offset = "0x10A4AB4", VA = "0x10A4AB4")]
		private void setKey(byte[] key)
		{
		}

		[Token(Token = "0x6001D8D")]
		[Address(RVA = "0x10A4E30", Offset = "0x10A4E30", VA = "0x10A4E30")]
		private int encryptBlock(byte[] inBytes, int inOff, byte[] outBytes, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001D8E")]
		[Address(RVA = "0x10A4D24", Offset = "0x10A4D24", VA = "0x10A4D24")]
		private int decryptBlock(byte[] inBytes, int inOff, byte[] outBytes, int outOff)
		{
			return default(int);
		}
	}
}
namespace Org.BouncyCastle.Crypto.Encodings
{
	[Token(Token = "0x200034E")]
	public class ISO9796d1Encoding : IAsymmetricBlockCipher
	{
		[Token(Token = "0x400100D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly BigInteger Sixteen;

		[Token(Token = "0x400100E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly BigInteger Six;

		[Token(Token = "0x400100F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly byte[] shadows;

		[Token(Token = "0x4001010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly byte[] inverse;

		[Token(Token = "0x4001011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IAsymmetricBlockCipher engine;

		[Token(Token = "0x4001012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool forEncryption;

		[Token(Token = "0x4001013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int bitSize;

		[Token(Token = "0x4001014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int padBits;

		[Token(Token = "0x4001015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private BigInteger modulus;

		[Token(Token = "0x17000395")]
		public string AlgorithmName
		{
			[Token(Token = "0x6001D90")]
			[Address(RVA = "0x1515328", Offset = "0x1515328", VA = "0x1515328", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001D8F")]
		[Address(RVA = "0x15152FC", Offset = "0x15152FC", VA = "0x15152FC")]
		public ISO9796d1Encoding(IAsymmetricBlockCipher cipher)
		{
		}

		[Token(Token = "0x6001D91")]
		[Address(RVA = "0x15153EC", Offset = "0x15153EC", VA = "0x15153EC")]
		public IAsymmetricBlockCipher GetUnderlyingCipher()
		{
			return null;
		}

		[Token(Token = "0x6001D92")]
		[Address(RVA = "0x15153F4", Offset = "0x15153F4", VA = "0x15153F4", Slot = "5")]
		public void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001D93")]
		[Address(RVA = "0x15155A8", Offset = "0x15155A8", VA = "0x15155A8", Slot = "6")]
		public int GetInputBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001D94")]
		[Address(RVA = "0x151567C", Offset = "0x151567C", VA = "0x151567C", Slot = "7")]
		public int GetOutputBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001D95")]
		[Address(RVA = "0x1515750", Offset = "0x1515750", VA = "0x1515750")]
		public void SetPadBits(int padBits)
		{
		}

		[Token(Token = "0x6001D96")]
		[Address(RVA = "0x15157E4", Offset = "0x15157E4", VA = "0x15157E4")]
		public int GetPadBits()
		{
			return default(int);
		}

		[Token(Token = "0x6001D97")]
		[Address(RVA = "0x15157EC", Offset = "0x15157EC", VA = "0x15157EC", Slot = "8")]
		public byte[] ProcessBlock(byte[] input, int inOff, int length)
		{
			return null;
		}

		[Token(Token = "0x6001D98")]
		[Address(RVA = "0x15157FC", Offset = "0x15157FC", VA = "0x15157FC")]
		private byte[] EncodeBlock(byte[] input, int inOff, int inLen)
		{
			return null;
		}

		[Token(Token = "0x6001D99")]
		[Address(RVA = "0x1515B60", Offset = "0x1515B60", VA = "0x1515B60")]
		private byte[] DecodeBlock(byte[] input, int inOff, int inLen)
		{
			return null;
		}
	}
	[Token(Token = "0x200034F")]
	public class OaepEncoding : IAsymmetricBlockCipher
	{
		[Token(Token = "0x4001016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private byte[] defHash;

		[Token(Token = "0x4001017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IDigest hash;

		[Token(Token = "0x4001018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private IDigest mgf1Hash;

		[Token(Token = "0x4001019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private IAsymmetricBlockCipher engine;

		[Token(Token = "0x400101A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SecureRandom random;

		[Token(Token = "0x400101B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool forEncryption;

		[Token(Token = "0x17000396")]
		public string AlgorithmName
		{
			[Token(Token = "0x6001DA0")]
			[Address(RVA = "0x15163C4", Offset = "0x15163C4", VA = "0x15163C4", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001D9B")]
		[Address(RVA = "0x1516138", Offset = "0x1516138", VA = "0x1516138")]
		public OaepEncoding(IAsymmetricBlockCipher cipher)
		{
		}

		[Token(Token = "0x6001D9C")]
		[Address(RVA = "0x15161C0", Offset = "0x15161C0", VA = "0x15161C0")]
		public OaepEncoding(IAsymmetricBlockCipher cipher, IDigest hash)
		{
		}

		[Token(Token = "0x6001D9D")]
		[Address(RVA = "0x15161B4", Offset = "0x15161B4", VA = "0x15161B4")]
		public OaepEncoding(IAsymmetricBlockCipher cipher, IDigest hash, byte[] encodingParams)
		{
		}

		[Token(Token = "0x6001D9E")]
		[Address(RVA = "0x15161CC", Offset = "0x15161CC", VA = "0x15161CC")]
		public OaepEncoding(IAsymmetricBlockCipher cipher, IDigest hash, IDigest mgf1Hash, byte[] encodingParams)
		{
		}

		[Token(Token = "0x6001D9F")]
		[Address(RVA = "0x15163BC", Offset = "0x15163BC", VA = "0x15163BC")]
		public IAsymmetricBlockCipher GetUnderlyingCipher()
		{
			return null;
		}

		[Token(Token = "0x6001DA1")]
		[Address(RVA = "0x1516488", Offset = "0x1516488", VA = "0x1516488", Slot = "5")]
		public void Init(bool forEncryption, ICipherParameters param)
		{
		}

		[Token(Token = "0x6001DA2")]
		[Address(RVA = "0x15165C4", Offset = "0x15165C4", VA = "0x15165C4", Slot = "6")]
		public int GetInputBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001DA3")]
		[Address(RVA = "0x151669C", Offset = "0x151669C", VA = "0x151669C", Slot = "7")]
		public int GetOutputBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001DA4")]
		[Address(RVA = "0x1516774", Offset = "0x1516774", VA = "0x1516774", Slot = "8")]
		public byte[] ProcessBlock(byte[] inBytes, int inOff, int inLen)
		{
			return null;
		}

		[Token(Token = "0x6001DA5")]
		[Address(RVA = "0x1516784", Offset = "0x1516784", VA = "0x1516784")]
		private byte[] EncodeBlock(byte[] inBytes, int inOff, int inLen)
		{
			return null;
		}

		[Token(Token = "0x6001DA6")]
		[Address(RVA = "0x1516A64", Offset = "0x1516A64", VA = "0x1516A64")]
		private byte[] DecodeBlock(byte[] inBytes, int inOff, int inLen)
		{
			return null;
		}

		[Token(Token = "0x6001DA7")]
		[Address(RVA = "0x1517458", Offset = "0x1517458", VA = "0x1517458")]
		private void ItoOSP(int i, byte[] sp)
		{
		}

		[Token(Token = "0x6001DA8")]
		[Address(RVA = "0x1516F64", Offset = "0x1516F64", VA = "0x1516F64")]
		private byte[] maskGeneratorFunction1(byte[] Z, int zOff, int zLen, int length)
		{
			return null;
		}
	}
	[Token(Token = "0x2000350")]
	public class Pkcs1Encoding : IAsymmetricBlockCipher
	{
		[Token(Token = "0x400101C")]
		public const string StrictLengthEnabledProperty = "Org.BouncyCastle.Pkcs1.Strict";

		[Token(Token = "0x400101D")]
		private const int HeaderLength = 10;

		[Token(Token = "0x400101E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly bool[] strictLengthEnabled;

		[Token(Token = "0x400101F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private SecureRandom random;

		[Token(Token = "0x4001020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IAsymmetricBlockCipher engine;

		[Token(Token = "0x4001021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool forEncryption;

		[Token(Token = "0x4001022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private bool forPrivateKey;

		[Token(Token = "0x4001023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		private bool useStrictLength;

		[Token(Token = "0x4001024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int pLen;

		[Token(Token = "0x4001025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private byte[] fallback;

		[Token(Token = "0x17000397")]
		public static bool StrictLengthEnabled
		{
			[Token(Token = "0x6001DA9")]
			[Address(RVA = "0x15174B8", Offset = "0x15174B8", VA = "0x15174B8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001DAA")]
			[Address(RVA = "0x1517540", Offset = "0x1517540", VA = "0x1517540")]
			set
			{
			}
		}

		[Token(Token = "0x17000398")]
		public string AlgorithmName
		{
			[Token(Token = "0x6001DB0")]
			[Address(RVA = "0x1517830", Offset = "0x1517830", VA = "0x1517830", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001DAB")]
		[Address(RVA = "0x15175D0", Offset = "0x15175D0", VA = "0x15175D0")]
		static Pkcs1Encoding()
		{
		}

		[Token(Token = "0x6001DAC")]
		[Address(RVA = "0x1517658", Offset = "0x1517658", VA = "0x1517658")]
		public Pkcs1Encoding(IAsymmetricBlockCipher cipher)
		{
		}

		[Token(Token = "0x6001DAD")]
		[Address(RVA = "0x15176E8", Offset = "0x15176E8", VA = "0x15176E8")]
		public Pkcs1Encoding(IAsymmetricBlockCipher cipher, int pLen)
		{
		}

		[Token(Token = "0x6001DAE")]
		[Address(RVA = "0x1517780", Offset = "0x1517780", VA = "0x1517780")]
		public Pkcs1Encoding(IAsymmetricBlockCipher cipher, byte[] fallback)
		{
		}

		[Token(Token = "0x6001DAF")]
		[Address(RVA = "0x1517828", Offset = "0x1517828", VA = "0x1517828")]
		public IAsymmetricBlockCipher GetUnderlyingCipher()
		{
			return null;
		}

		[Token(Token = "0x6001DB1")]
		[Address(RVA = "0x15178F4", Offset = "0x15178F4", VA = "0x15178F4", Slot = "5")]
		public void Init(bool forEncryption, ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001DB2")]
		[Address(RVA = "0x1517ACC", Offset = "0x1517ACC", VA = "0x1517ACC", Slot = "6")]
		public int GetInputBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001DB3")]
		[Address(RVA = "0x1517B94", Offset = "0x1517B94", VA = "0x1517B94", Slot = "7")]
		public int GetOutputBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001DB4")]
		[Address(RVA = "0x1517C5C", Offset = "0x1517C5C", VA = "0x1517C5C", Slot = "8")]
		public byte[] ProcessBlock(byte[] input, int inOff, int length)
		{
			return null;
		}

		[Token(Token = "0x6001DB5")]
		[Address(RVA = "0x1517F70", Offset = "0x1517F70", VA = "0x1517F70")]
		private byte[] EncodeBlock(byte[] input, int inOff, int inLen)
		{
			return null;
		}

		[Token(Token = "0x6001DB6")]
		[Address(RVA = "0x151827C", Offset = "0x151827C", VA = "0x151827C")]
		private static int CheckPkcs1Encoding(byte[] encoded, int pLen)
		{
			return default(int);
		}

		[Token(Token = "0x6001DB7")]
		[Address(RVA = "0x151832C", Offset = "0x151832C", VA = "0x151832C")]
		private byte[] DecodeBlockOrRandom(byte[] input, int inOff, int inLen)
		{
			return null;
		}

		[Token(Token = "0x6001DB8")]
		[Address(RVA = "0x1517C6C", Offset = "0x1517C6C", VA = "0x1517C6C")]
		private byte[] DecodeBlock(byte[] input, int inOff, int inLen)
		{
			return null;
		}
	}
}
namespace Org.BouncyCastle.Crypto.EC
{
	[Token(Token = "0x2000351")]
	public sealed class CustomNamedCurves
	{
		[Token(Token = "0x2000672")]
		internal class Curve25519Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x60034F1")]
			[Address(RVA = "0x13D9B6C", Offset = "0x13D9B6C", VA = "0x13D9B6C")]
			private Curve25519Holder()
			{
			}

			[Token(Token = "0x60034F2")]
			[Address(RVA = "0x13D9B74", Offset = "0x13D9B74", VA = "0x13D9B74", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x2000673")]
		internal class SecP128R1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x60034F4")]
			[Address(RVA = "0x13D9D20", Offset = "0x13D9D20", VA = "0x13D9D20")]
			private SecP128R1Holder()
			{
			}

			[Token(Token = "0x60034F5")]
			[Address(RVA = "0x13D9D28", Offset = "0x13D9D28", VA = "0x13D9D28", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x2000674")]
		internal class SecP160K1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x60034F7")]
			[Address(RVA = "0x13D9EF0", Offset = "0x13D9EF0", VA = "0x13D9EF0")]
			private SecP160K1Holder()
			{
			}

			[Token(Token = "0x60034F8")]
			[Address(RVA = "0x13D9EF8", Offset = "0x13D9EF8", VA = "0x13D9EF8", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x2000675")]
		internal class SecP160R1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x60034FA")]
			[Address(RVA = "0x13DA308", Offset = "0x13DA308", VA = "0x13DA308")]
			private SecP160R1Holder()
			{
			}

			[Token(Token = "0x60034FB")]
			[Address(RVA = "0x13DA310", Offset = "0x13DA310", VA = "0x13DA310", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x2000676")]
		internal class SecP160R2Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x60034FD")]
			[Address(RVA = "0x13DA4D8", Offset = "0x13DA4D8", VA = "0x13DA4D8")]
			private SecP160R2Holder()
			{
			}

			[Token(Token = "0x60034FE")]
			[Address(RVA = "0x13DA4E0", Offset = "0x13DA4E0", VA = "0x13DA4E0", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x2000677")]
		internal class SecP192K1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x6003500")]
			[Address(RVA = "0x13DA6A8", Offset = "0x13DA6A8", VA = "0x13DA6A8")]
			private SecP192K1Holder()
			{
			}

			[Token(Token = "0x6003501")]
			[Address(RVA = "0x13DA6B0", Offset = "0x13DA6B0", VA = "0x13DA6B0", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x2000678")]
		internal class SecP192R1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x6003503")]
			[Address(RVA = "0x13DAAC0", Offset = "0x13DAAC0", VA = "0x13DAAC0")]
			private SecP192R1Holder()
			{
			}

			[Token(Token = "0x6003504")]
			[Address(RVA = "0x13DAAC8", Offset = "0x13DAAC8", VA = "0x13DAAC8", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x2000679")]
		internal class SecP224K1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x6003506")]
			[Address(RVA = "0x13DAC90", Offset = "0x13DAC90", VA = "0x13DAC90")]
			private SecP224K1Holder()
			{
			}

			[Token(Token = "0x6003507")]
			[Address(RVA = "0x13DAC98", Offset = "0x13DAC98", VA = "0x13DAC98", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x200067A")]
		internal class SecP224R1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x6003509")]
			[Address(RVA = "0x13DB0A8", Offset = "0x13DB0A8", VA = "0x13DB0A8")]
			private SecP224R1Holder()
			{
			}

			[Token(Token = "0x600350A")]
			[Address(RVA = "0x13DB0B0", Offset = "0x13DB0B0", VA = "0x13DB0B0", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x200067B")]
		internal class SecP256K1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x600350C")]
			[Address(RVA = "0x13DB278", Offset = "0x13DB278", VA = "0x13DB278")]
			private SecP256K1Holder()
			{
			}

			[Token(Token = "0x600350D")]
			[Address(RVA = "0x13DB280", Offset = "0x13DB280", VA = "0x13DB280", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x200067C")]
		internal class SecP256R1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x600350F")]
			[Address(RVA = "0x13DB690", Offset = "0x13DB690", VA = "0x13DB690")]
			private SecP256R1Holder()
			{
			}

			[Token(Token = "0x6003510")]
			[Address(RVA = "0x13DB698", Offset = "0x13DB698", VA = "0x13DB698", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x200067D")]
		internal class SecP384R1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x6003512")]
			[Address(RVA = "0x13DB860", Offset = "0x13DB860", VA = "0x13DB860")]
			private SecP384R1Holder()
			{
			}

			[Token(Token = "0x6003513")]
			[Address(RVA = "0x13DB868", Offset = "0x13DB868", VA = "0x13DB868", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x200067E")]
		internal class SecP521R1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x6003515")]
			[Address(RVA = "0x13DBA30", Offset = "0x13DBA30", VA = "0x13DBA30")]
			private SecP521R1Holder()
			{
			}

			[Token(Token = "0x6003516")]
			[Address(RVA = "0x13DBA38", Offset = "0x13DBA38", VA = "0x13DBA38", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x200067F")]
		internal class SecT113R1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x6003518")]
			[Address(RVA = "0x13DBC00", Offset = "0x13DBC00", VA = "0x13DBC00")]
			private SecT113R1Holder()
			{
			}

			[Token(Token = "0x6003519")]
			[Address(RVA = "0x13DBC08", Offset = "0x13DBC08", VA = "0x13DBC08", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x2000680")]
		internal class SecT113R2Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x600351B")]
			[Address(RVA = "0x13DBDD0", Offset = "0x13DBDD0", VA = "0x13DBDD0")]
			private SecT113R2Holder()
			{
			}

			[Token(Token = "0x600351C")]
			[Address(RVA = "0x13DBDD8", Offset = "0x13DBDD8", VA = "0x13DBDD8", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x2000681")]
		internal class SecT131R1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x600351E")]
			[Address(RVA = "0x13DBFA0", Offset = "0x13DBFA0", VA = "0x13DBFA0")]
			private SecT131R1Holder()
			{
			}

			[Token(Token = "0x600351F")]
			[Address(RVA = "0x13DBFA8", Offset = "0x13DBFA8", VA = "0x13DBFA8", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x2000682")]
		internal class SecT131R2Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x6003521")]
			[Address(RVA = "0x13DC170", Offset = "0x13DC170", VA = "0x13DC170")]
			private SecT131R2Holder()
			{
			}

			[Token(Token = "0x6003522")]
			[Address(RVA = "0x13DC178", Offset = "0x13DC178", VA = "0x13DC178", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x2000683")]
		internal class SecT163K1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x6003524")]
			[Address(RVA = "0x13DC340", Offset = "0x13DC340", VA = "0x13DC340")]
			private SecT163K1Holder()
			{
			}

			[Token(Token = "0x6003525")]
			[Address(RVA = "0x13DC348", Offset = "0x13DC348", VA = "0x13DC348", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x2000684")]
		internal class SecT163R1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x6003527")]
			[Address(RVA = "0x13DC4F4", Offset = "0x13DC4F4", VA = "0x13DC4F4")]
			private SecT163R1Holder()
			{
			}

			[Token(Token = "0x6003528")]
			[Address(RVA = "0x13DC4FC", Offset = "0x13DC4FC", VA = "0x13DC4FC", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x2000685")]
		internal class SecT163R2Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x600352A")]
			[Address(RVA = "0x13DC6C4", Offset = "0x13DC6C4", VA = "0x13DC6C4")]
			private SecT163R2Holder()
			{
			}

			[Token(Token = "0x600352B")]
			[Address(RVA = "0x13DC6CC", Offset = "0x13DC6CC", VA = "0x13DC6CC", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x2000686")]
		internal class SecT233K1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x600352D")]
			[Address(RVA = "0x13DC894", Offset = "0x13DC894", VA = "0x13DC894")]
			private SecT233K1Holder()
			{
			}

			[Token(Token = "0x600352E")]
			[Address(RVA = "0x13DC89C", Offset = "0x13DC89C", VA = "0x13DC89C", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x2000687")]
		internal class SecT233R1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x6003530")]
			[Address(RVA = "0x13DCA48", Offset = "0x13DCA48", VA = "0x13DCA48")]
			private SecT233R1Holder()
			{
			}

			[Token(Token = "0x6003531")]
			[Address(RVA = "0x13DCA50", Offset = "0x13DCA50", VA = "0x13DCA50", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x2000688")]
		internal class SecT239K1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x6003533")]
			[Address(RVA = "0x13DCC18", Offset = "0x13DCC18", VA = "0x13DCC18")]
			private SecT239K1Holder()
			{
			}

			[Token(Token = "0x6003534")]
			[Address(RVA = "0x13DCC20", Offset = "0x13DCC20", VA = "0x13DCC20", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x2000689")]
		internal class SecT283K1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x6003536")]
			[Address(RVA = "0x13DCDCC", Offset = "0x13DCDCC", VA = "0x13DCDCC")]
			private SecT283K1Holder()
			{
			}

			[Token(Token = "0x6003537")]
			[Address(RVA = "0x13DCDD4", Offset = "0x13DCDD4", VA = "0x13DCDD4", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x200068A")]
		internal class SecT283R1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x6003539")]
			[Address(RVA = "0x13DCF80", Offset = "0x13DCF80", VA = "0x13DCF80")]
			private SecT283R1Holder()
			{
			}

			[Token(Token = "0x600353A")]
			[Address(RVA = "0x13DCF88", Offset = "0x13DCF88", VA = "0x13DCF88", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x200068B")]
		internal class SecT409K1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x600353C")]
			[Address(RVA = "0x13DD150", Offset = "0x13DD150", VA = "0x13DD150")]
			private SecT409K1Holder()
			{
			}

			[Token(Token = "0x600353D")]
			[Address(RVA = "0x13DD158", Offset = "0x13DD158", VA = "0x13DD158", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x200068C")]
		internal class SecT409R1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x600353F")]
			[Address(RVA = "0x13DD304", Offset = "0x13DD304", VA = "0x13DD304")]
			private SecT409R1Holder()
			{
			}

			[Token(Token = "0x6003540")]
			[Address(RVA = "0x13DD30C", Offset = "0x13DD30C", VA = "0x13DD30C", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x200068D")]
		internal class SecT571K1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x6003542")]
			[Address(RVA = "0x13DD4D4", Offset = "0x13DD4D4", VA = "0x13DD4D4")]
			private SecT571K1Holder()
			{
			}

			[Token(Token = "0x6003543")]
			[Address(RVA = "0x13DD4DC", Offset = "0x13DD4DC", VA = "0x13DD4DC", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x200068E")]
		internal class SecT571R1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x6003545")]
			[Address(RVA = "0x1515118", Offset = "0x1515118", VA = "0x1515118")]
			private SecT571R1Holder()
			{
			}

			[Token(Token = "0x6003546")]
			[Address(RVA = "0x1515120", Offset = "0x1515120", VA = "0x1515120", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x4001026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly IDictionary nameToCurve;

		[Token(Token = "0x4001027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly IDictionary nameToOid;

		[Token(Token = "0x4001028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly IDictionary oidToCurve;

		[Token(Token = "0x4001029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly IDictionary oidToName;

		[Token(Token = "0x400102A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly IList names;

		[Token(Token = "0x17000399")]
		public static IEnumerable Names
		{
			[Token(Token = "0x6001DC5")]
			[Address(RVA = "0x13D9AE0", Offset = "0x13D9AE0", VA = "0x13D9AE0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001DB9")]
		[Address(RVA = "0x13D8264", Offset = "0x13D8264", VA = "0x13D8264")]
		private CustomNamedCurves()
		{
		}

		[Token(Token = "0x6001DBA")]
		[Address(RVA = "0x13D826C", Offset = "0x13D826C", VA = "0x13D826C")]
		private static BigInteger FromHex(string hex)
		{
			return null;
		}

		[Token(Token = "0x6001DBB")]
		[Address(RVA = "0x13D8308", Offset = "0x13D8308", VA = "0x13D8308")]
		private static ECCurve ConfigureCurve(ECCurve curve)
		{
			return null;
		}

		[Token(Token = "0x6001DBC")]
		[Address(RVA = "0x13D830C", Offset = "0x13D830C", VA = "0x13D830C")]
		private static ECCurve ConfigureCurveGlv(ECCurve c, GlvTypeBParameters p)
		{
			return null;
		}

		[Token(Token = "0x6001DBD")]
		[Address(RVA = "0x13D83B8", Offset = "0x13D83B8", VA = "0x13D83B8")]
		private static void DefineCurve(string name, X9ECParametersHolder holder)
		{
		}

		[Token(Token = "0x6001DBE")]
		[Address(RVA = "0x13D8558", Offset = "0x13D8558", VA = "0x13D8558")]
		private static void DefineCurveWithOid(string name, DerObjectIdentifier oid, X9ECParametersHolder holder)
		{
		}

		[Token(Token = "0x6001DBF")]
		[Address(RVA = "0x13D8878", Offset = "0x13D8878", VA = "0x13D8878")]
		private static void DefineCurveAlias(string name, DerObjectIdentifier oid)
		{
		}

		[Token(Token = "0x6001DC0")]
		[Address(RVA = "0x13D8AE4", Offset = "0x13D8AE4", VA = "0x13D8AE4")]
		static CustomNamedCurves()
		{
		}

		[Token(Token = "0x6001DC1")]
		[Address(RVA = "0x13D9604", Offset = "0x13D9604", VA = "0x13D9604")]
		public static X9ECParameters GetByName(string name)
		{
			return null;
		}

		[Token(Token = "0x6001DC2")]
		[Address(RVA = "0x13D9764", Offset = "0x13D9764", VA = "0x13D9764")]
		public static X9ECParameters GetByOid(DerObjectIdentifier oid)
		{
			return null;
		}

		[Token(Token = "0x6001DC3")]
		[Address(RVA = "0x13D9890", Offset = "0x13D9890", VA = "0x13D9890")]
		public static DerObjectIdentifier GetOid(string name)
		{
			return null;
		}

		[Token(Token = "0x6001DC4")]
		[Address(RVA = "0x13D99E0", Offset = "0x13D99E0", VA = "0x13D99E0")]
		public static string GetName(DerObjectIdentifier oid)
		{
			return null;
		}
	}
}
namespace Org.BouncyCastle.Crypto.Digests
{
	[Token(Token = "0x2000352")]
	public class Gost3411Digest : IDigest, IMemoable
	{
		[Token(Token = "0x400102B")]
		private const int DIGEST_LENGTH = 32;

		[Token(Token = "0x400102C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private byte[] H;

		[Token(Token = "0x400102D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private byte[] L;

		[Token(Token = "0x400102E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private byte[] M;

		[Token(Token = "0x400102F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private byte[] Sum;

		[Token(Token = "0x4001030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private byte[][] C;

		[Token(Token = "0x4001031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private byte[] xBuf;

		[Token(Token = "0x4001032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int xBufOff;

		[Token(Token = "0x4001033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ulong byteCount;

		[Token(Token = "0x4001034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly IBlockCipher cipher;

		[Token(Token = "0x4001035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private byte[] sBox;

		[Token(Token = "0x4001036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private byte[] K;

		[Token(Token = "0x4001037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private byte[] a;

		[Token(Token = "0x4001038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal short[] wS;

		[Token(Token = "0x4001039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal short[] w_S;

		[Token(Token = "0x400103A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal byte[] S;

		[Token(Token = "0x400103B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal byte[] U;

		[Token(Token = "0x400103C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal byte[] V;

		[Token(Token = "0x400103D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal byte[] W;

		[Token(Token = "0x400103E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly byte[] C2;

		[Token(Token = "0x1700039A")]
		public string AlgorithmName
		{
			[Token(Token = "0x6001DCA")]
			[Address(RVA = "0x11B48D8", Offset = "0x11B48D8", VA = "0x11B48D8", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001DC6")]
		[Address(RVA = "0x11B3D88", Offset = "0x11B3D88", VA = "0x11B3D88")]
		private static byte[][] MakeC()
		{
			return null;
		}

		[Token(Token = "0x6001DC7")]
		[Address(RVA = "0x11B3E68", Offset = "0x11B3E68", VA = "0x11B3E68")]
		public Gost3411Digest()
		{
		}

		[Token(Token = "0x6001DC8")]
		[Address(RVA = "0x11B4238", Offset = "0x11B4238", VA = "0x11B4238")]
		public Gost3411Digest(byte[] sBoxParam)
		{
		}

		[Token(Token = "0x6001DC9")]
		[Address(RVA = "0x11B4474", Offset = "0x11B4474", VA = "0x11B4474")]
		public Gost3411Digest(Gost3411Digest t)
		{
		}

		[Token(Token = "0x6001DCB")]
		[Address(RVA = "0x11B4920", Offset = "0x11B4920", VA = "0x11B4920", Slot = "5")]
		public int GetDigestSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001DCC")]
		[Address(RVA = "0x11B4928", Offset = "0x11B4928", VA = "0x11B4928", Slot = "7")]
		public void Update(byte input)
		{
		}

		[Token(Token = "0x6001DCD")]
		[Address(RVA = "0x11B4D7C", Offset = "0x11B4D7C", VA = "0x11B4D7C", Slot = "8")]
		public void BlockUpdate(byte[] input, int inOff, int length)
		{
		}

		[Token(Token = "0x6001DCE")]
		[Address(RVA = "0x11B4EC4", Offset = "0x11B4EC4", VA = "0x11B4EC4")]
		private byte[] P(byte[] input)
		{
			return null;
		}

		[Token(Token = "0x6001DCF")]
		[Address(RVA = "0x11B4FE4", Offset = "0x11B4FE4", VA = "0x11B4FE4")]
		private byte[] A(byte[] input)
		{
			return null;
		}

		[Token(Token = "0x6001DD0")]
		[Address(RVA = "0x11B50B0", Offset = "0x11B50B0", VA = "0x11B50B0")]
		private void E(byte[] key, byte[] s, int sOff, byte[] input, int inOff)
		{
		}

		[Token(Token = "0x6001DD1")]
		[Address(RVA = "0x11B5234", Offset = "0x11B5234", VA = "0x11B5234")]
		private void fw(byte[] input)
		{
		}

		[Token(Token = "0x6001DD2")]
		[Address(RVA = "0x11B4A40", Offset = "0x11B4A40", VA = "0x11B4A40")]
		private void processBlock(byte[] input, int inOff)
		{
		}

		[Token(Token = "0x6001DD3")]
		[Address(RVA = "0x11B54A8", Offset = "0x11B54A8", VA = "0x11B54A8")]
		private void finish()
		{
		}

		[Token(Token = "0x6001DD4")]
		[Address(RVA = "0x11B550C", Offset = "0x11B550C", VA = "0x11B550C", Slot = "9")]
		public int DoFinal(byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001DD5")]
		[Address(RVA = "0x11B40C0", Offset = "0x11B40C0", VA = "0x11B40C0", Slot = "10")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001DD6")]
		[Address(RVA = "0x11B49BC", Offset = "0x11B49BC", VA = "0x11B49BC")]
		private void sumByteArray(byte[] input)
		{
		}

		[Token(Token = "0x6001DD7")]
		[Address(RVA = "0x11B535C", Offset = "0x11B535C", VA = "0x11B535C")]
		private static void cpyBytesToShort(byte[] S, short[] wS)
		{
		}

		[Token(Token = "0x6001DD8")]
		[Address(RVA = "0x11B5400", Offset = "0x11B5400", VA = "0x11B5400")]
		private static void cpyShortToBytes(short[] wS, byte[] S)
		{
		}

		[Token(Token = "0x6001DD9")]
		[Address(RVA = "0x11B5564", Offset = "0x11B5564", VA = "0x11B5564", Slot = "6")]
		public int GetByteLength()
		{
			return default(int);
		}

		[Token(Token = "0x6001DDA")]
		[Address(RVA = "0x11B556C", Offset = "0x11B556C", VA = "0x11B556C", Slot = "11")]
		public IMemoable Copy()
		{
			return null;
		}

		[Token(Token = "0x6001DDB")]
		[Address(RVA = "0x11B45FC", Offset = "0x11B45FC", VA = "0x11B45FC", Slot = "12")]
		public void Reset(IMemoable other)
		{
		}
	}
	[Token(Token = "0x2000353")]
	public abstract class GeneralDigest : IDigest, IMemoable
	{
		[Token(Token = "0x400103F")]
		private const int BYTE_LENGTH = 64;

		[Token(Token = "0x4001040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private byte[] xBuf;

		[Token(Token = "0x4001041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int xBufOff;

		[Token(Token = "0x4001042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private long byteCount;

		[Token(Token = "0x1700039B")]
		public abstract string AlgorithmName
		{
			[Token(Token = "0x6001DE8")]
			get;
		}

		[Token(Token = "0x6001DDD")]
		[Address(RVA = "0x11B39DC", Offset = "0x11B39DC", VA = "0x11B39DC")]
		internal GeneralDigest()
		{
		}

		[Token(Token = "0x6001DDE")]
		[Address(RVA = "0x11B3A40", Offset = "0x11B3A40", VA = "0x11B3A40")]
		internal GeneralDigest(GeneralDigest t)
		{
		}

		[Token(Token = "0x6001DDF")]
		[Address(RVA = "0x11B3AC8", Offset = "0x11B3AC8", VA = "0x11B3AC8")]
		protected void CopyIn(GeneralDigest t)
		{
		}

		[Token(Token = "0x6001DE0")]
		[Address(RVA = "0x11B3B20", Offset = "0x11B3B20", VA = "0x11B3B20", Slot = "7")]
		public void Update(byte input)
		{
		}

		[Token(Token = "0x6001DE1")]
		[Address(RVA = "0x11B3BB4", Offset = "0x11B3BB4", VA = "0x11B3BB4", Slot = "8")]
		public void BlockUpdate(byte[] input, int inOff, int length)
		{
		}

		[Token(Token = "0x6001DE2")]
		[Address(RVA = "0x11B3CE8", Offset = "0x11B3CE8", VA = "0x11B3CE8")]
		public void Finish()
		{
		}

		[Token(Token = "0x6001DE3")]
		[Address(RVA = "0x11B3D50", Offset = "0x11B3D50", VA = "0x11B3D50", Slot = "13")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x6001DE4")]
		[Address(RVA = "0x11B3D80", Offset = "0x11B3D80", VA = "0x11B3D80", Slot = "6")]
		public int GetByteLength()
		{
			return default(int);
		}

		[Token(Token = "0x6001DE5")]
		internal abstract void ProcessWord(byte[] input, int inOff);

		[Token(Token = "0x6001DE6")]
		internal abstract void ProcessLength(long bitLength);

		[Token(Token = "0x6001DE7")]
		internal abstract void ProcessBlock();

		[Token(Token = "0x6001DE9")]
		public abstract int GetDigestSize();

		[Token(Token = "0x6001DEA")]
		public abstract int DoFinal(byte[] output, int outOff);

		[Token(Token = "0x6001DEB")]
		public abstract IMemoable Copy();

		[Token(Token = "0x6001DEC")]
		public abstract void Reset(IMemoable t);
	}
	[Token(Token = "0x2000354")]
	public abstract class LongDigest : IDigest, IMemoable
	{
		[Token(Token = "0x4001043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int MyByteLength;

		[Token(Token = "0x4001044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private byte[] xBuf;

		[Token(Token = "0x4001045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int xBufOff;

		[Token(Token = "0x4001046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private long byteCount1;

		[Token(Token = "0x4001047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private long byteCount2;

		[Token(Token = "0x4001048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal ulong H1;

		[Token(Token = "0x4001049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal ulong H2;

		[Token(Token = "0x400104A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal ulong H3;

		[Token(Token = "0x400104B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal ulong H4;

		[Token(Token = "0x400104C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal ulong H5;

		[Token(Token = "0x400104D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal ulong H6;

		[Token(Token = "0x400104E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal ulong H7;

		[Token(Token = "0x400104F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal ulong H8;

		[Token(Token = "0x4001050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private ulong[] W;

		[Token(Token = "0x4001051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int wOff;

		[Token(Token = "0x4001052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly ulong[] K;

		[Token(Token = "0x1700039C")]
		public abstract string AlgorithmName
		{
			[Token(Token = "0x6001DFF")]
			get;
		}

		[Token(Token = "0x6001DED")]
		[Address(RVA = "0x11B5648", Offset = "0x11B5648", VA = "0x11B5648")]
		internal LongDigest()
		{
		}

		[Token(Token = "0x6001DEE")]
		[Address(RVA = "0x11B56DC", Offset = "0x11B56DC", VA = "0x11B56DC")]
		internal LongDigest(LongDigest t)
		{
		}

		[Token(Token = "0x6001DEF")]
		[Address(RVA = "0x11B5784", Offset = "0x11B5784", VA = "0x11B5784")]
		protected void CopyIn(LongDigest t)
		{
		}

		[Token(Token = "0x6001DF0")]
		[Address(RVA = "0x11B584C", Offset = "0x11B584C", VA = "0x11B584C", Slot = "7")]
		public void Update(byte input)
		{
		}

		[Token(Token = "0x6001DF1")]
		[Address(RVA = "0x11B5960", Offset = "0x11B5960", VA = "0x11B5960", Slot = "8")]
		public void BlockUpdate(byte[] input, int inOff, int length)
		{
		}

		[Token(Token = "0x6001DF2")]
		[Address(RVA = "0x11B5A88", Offset = "0x11B5A88", VA = "0x11B5A88")]
		public void Finish()
		{
		}

		[Token(Token = "0x6001DF3")]
		[Address(RVA = "0x11B6180", Offset = "0x11B6180", VA = "0x11B6180", Slot = "13")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x6001DF4")]
		[Address(RVA = "0x11B58D4", Offset = "0x11B58D4", VA = "0x11B58D4")]
		internal void ProcessWord(byte[] input, int inOff)
		{
		}

		[Token(Token = "0x6001DF5")]
		[Address(RVA = "0x11B5B00", Offset = "0x11B5B00", VA = "0x11B5B00")]
		private void AdjustByteCounts()
		{
		}

		[Token(Token = "0x6001DF6")]
		[Address(RVA = "0x11B5B24", Offset = "0x11B5B24", VA = "0x11B5B24")]
		internal void ProcessLength(long lowW, long hiW)
		{
		}

		[Token(Token = "0x6001DF7")]
		[Address(RVA = "0x11B5BA4", Offset = "0x11B5BA4", VA = "0x11B5BA4")]
		internal void ProcessBlock()
		{
		}

		[Token(Token = "0x6001DF8")]
		[Address(RVA = "0x11B6228", Offset = "0x11B6228", VA = "0x11B6228")]
		private static ulong Ch(ulong x, ulong y, ulong z)
		{
			return default(ulong);
		}

		[Token(Token = "0x6001DF9")]
		[Address(RVA = "0x11B6248", Offset = "0x11B6248", VA = "0x11B6248")]
		private static ulong Maj(ulong x, ulong y, ulong z)
		{
			return default(ulong);
		}

		[Token(Token = "0x6001DFA")]
		[Address(RVA = "0x11B6238", Offset = "0x11B6238", VA = "0x11B6238")]
		private static ulong Sum0(ulong x)
		{
			return default(ulong);
		}

		[Token(Token = "0x6001DFB")]
		[Address(RVA = "0x11B6218", Offset = "0x11B6218", VA = "0x11B6218")]
		private static ulong Sum1(ulong x)
		{
			return default(ulong);
		}

		[Token(Token = "0x6001DFC")]
		[Address(RVA = "0x11B6208", Offset = "0x11B6208", VA = "0x11B6208")]
		private static ulong Sigma0(ulong x)
		{
			return default(ulong);
		}

		[Token(Token = "0x6001DFD")]
		[Address(RVA = "0x11B61F8", Offset = "0x11B61F8", VA = "0x11B61F8")]
		private static ulong Sigma1(ulong x)
		{
			return default(ulong);
		}

		[Token(Token = "0x6001DFE")]
		[Address(RVA = "0x11B625C", Offset = "0x11B625C", VA = "0x11B625C", Slot = "6")]
		public int GetByteLength()
		{
			return default(int);
		}

		[Token(Token = "0x6001E00")]
		public abstract int GetDigestSize();

		[Token(Token = "0x6001E01")]
		public abstract int DoFinal(byte[] output, int outOff);

		[Token(Token = "0x6001E02")]
		public abstract IMemoable Copy();

		[Token(Token = "0x6001E03")]
		public abstract void Reset(IMemoable t);
	}
	[Token(Token = "0x2000355")]
	public class MD2Digest : IDigest, IMemoable
	{
		[Token(Token = "0x4001053")]
		private const int DigestLength = 16;

		[Token(Token = "0x4001054")]
		private const int BYTE_LENGTH = 16;

		[Token(Token = "0x4001055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private byte[] X;

		[Token(Token = "0x4001056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int xOff;

		[Token(Token = "0x4001057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private byte[] M;

		[Token(Token = "0x4001058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int mOff;

		[Token(Token = "0x4001059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private byte[] C;

		[Token(Token = "0x400105A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int COff;

		[Token(Token = "0x400105B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly byte[] S;

		[Token(Token = "0x1700039D")]
		public string AlgorithmName
		{
			[Token(Token = "0x6001E08")]
			[Address(RVA = "0x11B6564", Offset = "0x11B6564", VA = "0x11B6564", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001E05")]
		[Address(RVA = "0x11B62E0", Offset = "0x11B62E0", VA = "0x11B62E0")]
		public MD2Digest()
		{
		}

		[Token(Token = "0x6001E06")]
		[Address(RVA = "0x11B642C", Offset = "0x11B642C", VA = "0x11B642C")]
		public MD2Digest(MD2Digest t)
		{
		}

		[Token(Token = "0x6001E07")]
		[Address(RVA = "0x11B64C4", Offset = "0x11B64C4", VA = "0x11B64C4")]
		private void CopyIn(MD2Digest t)
		{
		}

		[Token(Token = "0x6001E09")]
		[Address(RVA = "0x11B65AC", Offset = "0x11B65AC", VA = "0x11B65AC", Slot = "5")]
		public int GetDigestSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001E0A")]
		[Address(RVA = "0x11B65B4", Offset = "0x11B65B4", VA = "0x11B65B4", Slot = "6")]
		public int GetByteLength()
		{
			return default(int);
		}

		[Token(Token = "0x6001E0B")]
		[Address(RVA = "0x11B65BC", Offset = "0x11B65BC", VA = "0x11B65BC", Slot = "9")]
		public int DoFinal(byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001E0C")]
		[Address(RVA = "0x11B6368", Offset = "0x11B6368", VA = "0x11B6368", Slot = "10")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001E0D")]
		[Address(RVA = "0x11B6968", Offset = "0x11B6968", VA = "0x11B6968", Slot = "7")]
		public void Update(byte input)
		{
		}

		[Token(Token = "0x6001E0E")]
		[Address(RVA = "0x11B69E4", Offset = "0x11B69E4", VA = "0x11B69E4", Slot = "8")]
		public void BlockUpdate(byte[] input, int inOff, int length)
		{
		}

		[Token(Token = "0x6001E0F")]
		[Address(RVA = "0x11B668C", Offset = "0x11B668C", VA = "0x11B668C")]
		internal void ProcessChecksum(byte[] m)
		{
		}

		[Token(Token = "0x6001E10")]
		[Address(RVA = "0x11B67C4", Offset = "0x11B67C4", VA = "0x11B67C4")]
		internal void ProcessBlock(byte[] m)
		{
		}

		[Token(Token = "0x6001E11")]
		[Address(RVA = "0x11B6B28", Offset = "0x11B6B28", VA = "0x11B6B28", Slot = "11")]
		public IMemoable Copy()
		{
			return null;
		}

		[Token(Token = "0x6001E12")]
		[Address(RVA = "0x11B6B88", Offset = "0x11B6B88", VA = "0x11B6B88", Slot = "12")]
		public void Reset(IMemoable other)
		{
		}
	}
	[Token(Token = "0x2000356")]
	public class MD4Digest : GeneralDigest
	{
		[Token(Token = "0x400105C")]
		private const int DigestLength = 16;

		[Token(Token = "0x400105D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int H1;

		[Token(Token = "0x400105E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int H2;

		[Token(Token = "0x400105F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int H3;

		[Token(Token = "0x4001060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int H4;

		[Token(Token = "0x4001061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int[] X;

		[Token(Token = "0x4001062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int xOff;

		[Token(Token = "0x4001063")]
		private const int S11 = 3;

		[Token(Token = "0x4001064")]
		private const int S12 = 7;

		[Token(Token = "0x4001065")]
		private const int S13 = 11;

		[Token(Token = "0x4001066")]
		private const int S14 = 19;

		[Token(Token = "0x4001067")]
		private const int S21 = 3;

		[Token(Token = "0x4001068")]
		private const int S22 = 5;

		[Token(Token = "0x4001069")]
		private const int S23 = 9;

		[Token(Token = "0x400106A")]
		private const int S24 = 13;

		[Token(Token = "0x400106B")]
		private const int S31 = 3;

		[Token(Token = "0x400106C")]
		private const int S32 = 9;

		[Token(Token = "0x400106D")]
		private const int S33 = 11;

		[Token(Token = "0x400106E")]
		private const int S34 = 15;

		[Token(Token = "0x1700039E")]
		public override string AlgorithmName
		{
			[Token(Token = "0x6001E17")]
			[Address(RVA = "0x11B6DF4", Offset = "0x11B6DF4", VA = "0x11B6DF4", Slot = "17")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001E14")]
		[Address(RVA = "0x11B6C98", Offset = "0x11B6C98", VA = "0x11B6C98")]
		public MD4Digest()
		{
		}

		[Token(Token = "0x6001E15")]
		[Address(RVA = "0x11B6D08", Offset = "0x11B6D08", VA = "0x11B6D08")]
		public MD4Digest(MD4Digest t)
		{
		}

		[Token(Token = "0x6001E16")]
		[Address(RVA = "0x11B6D80", Offset = "0x11B6D80", VA = "0x11B6D80")]
		private void CopyIn(MD4Digest t)
		{
		}

		[Token(Token = "0x6001E18")]
		[Address(RVA = "0x11B6E3C", Offset = "0x11B6E3C", VA = "0x11B6E3C", Slot = "18")]
		public override int GetDigestSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001E19")]
		[Address(RVA = "0x11B6E44", Offset = "0x11B6E44", VA = "0x11B6E44", Slot = "14")]
		internal override void ProcessWord(byte[] input, int inOff)
		{
		}

		[Token(Token = "0x6001E1A")]
		[Address(RVA = "0x11B6F0C", Offset = "0x11B6F0C", VA = "0x11B6F0C", Slot = "15")]
		internal override void ProcessLength(long bitLength)
		{
		}

		[Token(Token = "0x6001E1B")]
		[Address(RVA = "0x11B6F90", Offset = "0x11B6F90", VA = "0x11B6F90")]
		private void UnpackWord(int word, byte[] outBytes, int outOff)
		{
		}

		[Token(Token = "0x6001E1C")]
		[Address(RVA = "0x11B701C", Offset = "0x11B701C", VA = "0x11B701C", Slot = "19")]
		public override int DoFinal(byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001E1D")]
		[Address(RVA = "0x11B70A4", Offset = "0x11B70A4", VA = "0x11B70A4", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E1E")]
		[Address(RVA = "0x11B7114", Offset = "0x11B7114", VA = "0x11B7114")]
		private int RotateLeft(int x, int n)
		{
			return default(int);
		}

		[Token(Token = "0x6001E1F")]
		[Address(RVA = "0x11B7120", Offset = "0x11B7120", VA = "0x11B7120")]
		private int F(int u, int v, int w)
		{
			return default(int);
		}

		[Token(Token = "0x6001E20")]
		[Address(RVA = "0x11B7130", Offset = "0x11B7130", VA = "0x11B7130")]
		private int G(int u, int v, int w)
		{
			return default(int);
		}

		[Token(Token = "0x6001E21")]
		[Address(RVA = "0x11B7144", Offset = "0x11B7144", VA = "0x11B7144")]
		private int H(int u, int v, int w)
		{
			return default(int);
		}

		[Token(Token = "0x6001E22")]
		[Address(RVA = "0x11B7150", Offset = "0x11B7150", VA = "0x11B7150", Slot = "16")]
		internal override void ProcessBlock()
		{
		}

		[Token(Token = "0x6001E23")]
		[Address(RVA = "0x11B77AC", Offset = "0x11B77AC", VA = "0x11B77AC", Slot = "20")]
		public override IMemoable Copy()
		{
			return null;
		}

		[Token(Token = "0x6001E24")]
		[Address(RVA = "0x11B780C", Offset = "0x11B780C", VA = "0x11B780C", Slot = "21")]
		public override void Reset(IMemoable other)
		{
		}
	}
	[Token(Token = "0x2000357")]
	public class MD5Digest : GeneralDigest
	{
		[Token(Token = "0x400106F")]
		private const int DigestLength = 16;

		[Token(Token = "0x4001070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private uint H1;

		[Token(Token = "0x4001071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private uint H2;

		[Token(Token = "0x4001072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private uint H3;

		[Token(Token = "0x4001073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private uint H4;

		[Token(Token = "0x4001074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private uint[] X;

		[Token(Token = "0x4001075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int xOff;

		[Token(Token = "0x4001076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int S11;

		[Token(Token = "0x4001077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly int S12;

		[Token(Token = "0x4001078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int S13;

		[Token(Token = "0x4001079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static readonly int S14;

		[Token(Token = "0x400107A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly int S21;

		[Token(Token = "0x400107B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static readonly int S22;

		[Token(Token = "0x400107C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly int S23;

		[Token(Token = "0x400107D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private static readonly int S24;

		[Token(Token = "0x400107E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly int S31;

		[Token(Token = "0x400107F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private static readonly int S32;

		[Token(Token = "0x4001080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static readonly int S33;

		[Token(Token = "0x4001081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private static readonly int S34;

		[Token(Token = "0x4001082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static readonly int S41;

		[Token(Token = "0x4001083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private static readonly int S42;

		[Token(Token = "0x4001084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static readonly int S43;

		[Token(Token = "0x4001085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private static readonly int S44;

		[Token(Token = "0x1700039F")]
		public override string AlgorithmName
		{
			[Token(Token = "0x6001E28")]
			[Address(RVA = "0x11B79FC", Offset = "0x11B79FC", VA = "0x11B79FC", Slot = "17")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001E25")]
		[Address(RVA = "0x11B78A0", Offset = "0x11B78A0", VA = "0x11B78A0")]
		public MD5Digest()
		{
		}

		[Token(Token = "0x6001E26")]
		[Address(RVA = "0x11B7910", Offset = "0x11B7910", VA = "0x11B7910")]
		public MD5Digest(MD5Digest t)
		{
		}

		[Token(Token = "0x6001E27")]
		[Address(RVA = "0x11B7988", Offset = "0x11B7988", VA = "0x11B7988")]
		private void CopyIn(MD5Digest t)
		{
		}

		[Token(Token = "0x6001E29")]
		[Address(RVA = "0x11B7A44", Offset = "0x11B7A44", VA = "0x11B7A44", Slot = "18")]
		public override int GetDigestSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001E2A")]
		[Address(RVA = "0x11B7A4C", Offset = "0x11B7A4C", VA = "0x11B7A4C", Slot = "14")]
		internal override void ProcessWord(byte[] input, int inOff)
		{
		}

		[Token(Token = "0x6001E2B")]
		[Address(RVA = "0x11B7AE4", Offset = "0x11B7AE4", VA = "0x11B7AE4", Slot = "15")]
		internal override void ProcessLength(long bitLength)
		{
		}

		[Token(Token = "0x6001E2C")]
		[Address(RVA = "0x11B7BB0", Offset = "0x11B7BB0", VA = "0x11B7BB0", Slot = "19")]
		public override int DoFinal(byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001E2D")]
		[Address(RVA = "0x11B7C48", Offset = "0x11B7C48", VA = "0x11B7C48", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E2E")]
		[Address(RVA = "0x11B7CB8", Offset = "0x11B7CB8", VA = "0x11B7CB8")]
		private static uint RotateLeft(uint x, int n)
		{
			return default(uint);
		}

		[Token(Token = "0x6001E2F")]
		[Address(RVA = "0x11B7CC4", Offset = "0x11B7CC4", VA = "0x11B7CC4")]
		private static uint F(uint u, uint v, uint w)
		{
			return default(uint);
		}

		[Token(Token = "0x6001E30")]
		[Address(RVA = "0x11B7CD4", Offset = "0x11B7CD4", VA = "0x11B7CD4")]
		private static uint G(uint u, uint v, uint w)
		{
			return default(uint);
		}

		[Token(Token = "0x6001E31")]
		[Address(RVA = "0x11B7CE4", Offset = "0x11B7CE4", VA = "0x11B7CE4")]
		private static uint H(uint u, uint v, uint w)
		{
			return default(uint);
		}

		[Token(Token = "0x6001E32")]
		[Address(RVA = "0x11B7CF0", Offset = "0x11B7CF0", VA = "0x11B7CF0")]
		private static uint K(uint u, uint v, uint w)
		{
			return default(uint);
		}

		[Token(Token = "0x6001E33")]
		[Address(RVA = "0x11B7CFC", Offset = "0x11B7CFC", VA = "0x11B7CFC", Slot = "16")]
		internal override void ProcessBlock()
		{
		}

		[Token(Token = "0x6001E34")]
		[Address(RVA = "0x11B894C", Offset = "0x11B894C", VA = "0x11B894C", Slot = "20")]
		public override IMemoable Copy()
		{
			return null;
		}

		[Token(Token = "0x6001E35")]
		[Address(RVA = "0x11B89AC", Offset = "0x11B89AC", VA = "0x11B89AC", Slot = "21")]
		public override void Reset(IMemoable other)
		{
		}
	}
	[Token(Token = "0x2000358")]
	public class NullDigest : IDigest
	{
		[Token(Token = "0x4001086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly MemoryStream bOut;

		[Token(Token = "0x170003A0")]
		public string AlgorithmName
		{
			[Token(Token = "0x6001E37")]
			[Address(RVA = "0x11B8B50", Offset = "0x11B8B50", VA = "0x11B8B50", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001E38")]
		[Address(RVA = "0x11B8B98", Offset = "0x11B8B98", VA = "0x11B8B98", Slot = "6")]
		public int GetByteLength()
		{
			return default(int);
		}

		[Token(Token = "0x6001E39")]
		[Address(RVA = "0x11B8BA0", Offset = "0x11B8BA0", VA = "0x11B8BA0", Slot = "5")]
		public int GetDigestSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001E3A")]
		[Address(RVA = "0x11B8BC8", Offset = "0x11B8BC8", VA = "0x11B8BC8", Slot = "7")]
		public void Update(byte b)
		{
		}

		[Token(Token = "0x6001E3B")]
		[Address(RVA = "0x11B8BEC", Offset = "0x11B8BEC", VA = "0x11B8BEC", Slot = "8")]
		public void BlockUpdate(byte[] inBytes, int inOff, int len)
		{
		}

		[Token(Token = "0x6001E3C")]
		[Address(RVA = "0x11B8C10", Offset = "0x11B8C10", VA = "0x11B8C10", Slot = "9")]
		public int DoFinal(byte[] outBytes, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001E3D")]
		[Address(RVA = "0x11B8C90", Offset = "0x11B8C90", VA = "0x11B8C90", Slot = "10")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001E3E")]
		[Address(RVA = "0x11B8CB8", Offset = "0x11B8CB8", VA = "0x11B8CB8")]
		public NullDigest()
		{
		}
	}
	[Token(Token = "0x2000359")]
	public class RipeMD128Digest : GeneralDigest
	{
		[Token(Token = "0x4001087")]
		private const int DigestLength = 16;

		[Token(Token = "0x4001088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int H0;

		[Token(Token = "0x4001089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int H1;

		[Token(Token = "0x400108A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int H2;

		[Token(Token = "0x400108B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int H3;

		[Token(Token = "0x400108C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int[] X;

		[Token(Token = "0x400108D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int xOff;

		[Token(Token = "0x170003A1")]
		public override string AlgorithmName
		{
			[Token(Token = "0x6001E42")]
			[Address(RVA = "0x11B8E7C", Offset = "0x11B8E7C", VA = "0x11B8E7C", Slot = "17")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001E3F")]
		[Address(RVA = "0x11B8D20", Offset = "0x11B8D20", VA = "0x11B8D20")]
		public RipeMD128Digest()
		{
		}

		[Token(Token = "0x6001E40")]
		[Address(RVA = "0x11B8D90", Offset = "0x11B8D90", VA = "0x11B8D90")]
		public RipeMD128Digest(RipeMD128Digest t)
		{
		}

		[Token(Token = "0x6001E41")]
		[Address(RVA = "0x11B8E08", Offset = "0x11B8E08", VA = "0x11B8E08")]
		private void CopyIn(RipeMD128Digest t)
		{
		}

		[Token(Token = "0x6001E43")]
		[Address(RVA = "0x11B8EC4", Offset = "0x11B8EC4", VA = "0x11B8EC4", Slot = "18")]
		public override int GetDigestSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001E44")]
		[Address(RVA = "0x11B8ECC", Offset = "0x11B8ECC", VA = "0x11B8ECC", Slot = "14")]
		internal override void ProcessWord(byte[] input, int inOff)
		{
		}

		[Token(Token = "0x6001E45")]
		[Address(RVA = "0x11B8F94", Offset = "0x11B8F94", VA = "0x11B8F94", Slot = "15")]
		internal override void ProcessLength(long bitLength)
		{
		}

		[Token(Token = "0x6001E46")]
		[Address(RVA = "0x11B9018", Offset = "0x11B9018", VA = "0x11B9018")]
		private void UnpackWord(int word, byte[] outBytes, int outOff)
		{
		}

		[Token(Token = "0x6001E47")]
		[Address(RVA = "0x11B90A4", Offset = "0x11B90A4", VA = "0x11B90A4", Slot = "19")]
		public override int DoFinal(byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001E48")]
		[Address(RVA = "0x11B912C", Offset = "0x11B912C", VA = "0x11B912C", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E49")]
		[Address(RVA = "0x11B919C", Offset = "0x11B919C", VA = "0x11B919C")]
		private int RL(int x, int n)
		{
			return default(int);
		}

		[Token(Token = "0x6001E4A")]
		[Address(RVA = "0x11B91A8", Offset = "0x11B91A8", VA = "0x11B91A8")]
		private int F1(int x, int y, int z)
		{
			return default(int);
		}

		[Token(Token = "0x6001E4B")]
		[Address(RVA = "0x11B91B4", Offset = "0x11B91B4", VA = "0x11B91B4")]
		private int F2(int x, int y, int z)
		{
			return default(int);
		}

		[Token(Token = "0x6001E4C")]
		[Address(RVA = "0x11B91C4", Offset = "0x11B91C4", VA = "0x11B91C4")]
		private int F3(int x, int y, int z)
		{
			return default(int);
		}

		[Token(Token = "0x6001E4D")]
		[Address(RVA = "0x11B91D0", Offset = "0x11B91D0", VA = "0x11B91D0")]
		private int F4(int x, int y, int z)
		{
			return default(int);
		}

		[Token(Token = "0x6001E4E")]
		[Address(RVA = "0x11B91E0", Offset = "0x11B91E0", VA = "0x11B91E0")]
		private int F1(int a, int b, int c, int d, int x, int s)
		{
			return default(int);
		}

		[Token(Token = "0x6001E4F")]
		[Address(RVA = "0x11B91FC", Offset = "0x11B91FC", VA = "0x11B91FC")]
		private int F2(int a, int b, int c, int d, int x, int s)
		{
			return default(int);
		}

		[Token(Token = "0x6001E50")]
		[Address(RVA = "0x11B9228", Offset = "0x11B9228", VA = "0x11B9228")]
		private int F3(int a, int b, int c, int d, int x, int s)
		{
			return default(int);
		}

		[Token(Token = "0x6001E51")]
		[Address(RVA = "0x11B9250", Offset = "0x11B9250", VA = "0x11B9250")]
		private int F4(int a, int b, int c, int d, int x, int s)
		{
			return default(int);
		}

		[Token(Token = "0x6001E52")]
		[Address(RVA = "0x11B927C", Offset = "0x11B927C", VA = "0x11B927C")]
		private int FF1(int a, int b, int c, int d, int x, int s)
		{
			return default(int);
		}

		[Token(Token = "0x6001E53")]
		[Address(RVA = "0x11B9298", Offset = "0x11B9298", VA = "0x11B9298")]
		private int FF2(int a, int b, int c, int d, int x, int s)
		{
			return default(int);
		}

		[Token(Token = "0x6001E54")]
		[Address(RVA = "0x11B92C4", Offset = "0x11B92C4", VA = "0x11B92C4")]
		private int FF3(int a, int b, int c, int d, int x, int s)
		{
			return default(int);
		}

		[Token(Token = "0x6001E55")]
		[Address(RVA = "0x11B92EC", Offset = "0x11B92EC", VA = "0x11B92EC")]
		private int FF4(int a, int b, int c, int d, int x, int s)
		{
			return default(int);
		}

		[Token(Token = "0x6001E56")]
		[Address(RVA = "0x11B9318", Offset = "0x11B9318", VA = "0x11B9318", Slot = "16")]
		internal override void ProcessBlock()
		{
		}

		[Token(Token = "0x6001E57")]
		[Address(RVA = "0x11BA1D8", Offset = "0x11BA1D8", VA = "0x11BA1D8", Slot = "20")]
		public override IMemoable Copy()
		{
			return null;
		}

		[Token(Token = "0x6001E58")]
		[Address(RVA = "0x11BA238", Offset = "0x11BA238", VA = "0x11BA238", Slot = "21")]
		public override void Reset(IMemoable other)
		{
		}
	}
	[Token(Token = "0x200035A")]
	public class RipeMD160Digest : GeneralDigest
	{
		[Token(Token = "0x400108E")]
		private const int DigestLength = 20;

		[Token(Token = "0x400108F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int H0;

		[Token(Token = "0x4001090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int H1;

		[Token(Token = "0x4001091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int H2;

		[Token(Token = "0x4001092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int H3;

		[Token(Token = "0x4001093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int H4;

		[Token(Token = "0x4001094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int[] X;

		[Token(Token = "0x4001095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int xOff;

		[Token(Token = "0x170003A2")]
		public override string AlgorithmName
		{
			[Token(Token = "0x6001E5C")]
			[Address(RVA = "0x11BA430", Offset = "0x11BA430", VA = "0x11BA430", Slot = "17")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001E59")]
		[Address(RVA = "0x11BA2CC", Offset = "0x11BA2CC", VA = "0x11BA2CC")]
		public RipeMD160Digest()
		{
		}

		[Token(Token = "0x6001E5A")]
		[Address(RVA = "0x11BA33C", Offset = "0x11BA33C", VA = "0x11BA33C")]
		public RipeMD160Digest(RipeMD160Digest t)
		{
		}

		[Token(Token = "0x6001E5B")]
		[Address(RVA = "0x11BA3B4", Offset = "0x11BA3B4", VA = "0x11BA3B4")]
		private void CopyIn(RipeMD160Digest t)
		{
		}

		[Token(Token = "0x6001E5D")]
		[Address(RVA = "0x11BA478", Offset = "0x11BA478", VA = "0x11BA478", Slot = "18")]
		public override int GetDigestSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001E5E")]
		[Address(RVA = "0x11BA480", Offset = "0x11BA480", VA = "0x11BA480", Slot = "14")]
		internal override void ProcessWord(byte[] input, int inOff)
		{
		}

		[Token(Token = "0x6001E5F")]
		[Address(RVA = "0x11BA548", Offset = "0x11BA548", VA = "0x11BA548", Slot = "15")]
		internal override void ProcessLength(long bitLength)
		{
		}

		[Token(Token = "0x6001E60")]
		[Address(RVA = "0x11BA5CC", Offset = "0x11BA5CC", VA = "0x11BA5CC")]
		private void UnpackWord(int word, byte[] outBytes, int outOff)
		{
		}

		[Token(Token = "0x6001E61")]
		[Address(RVA = "0x11BA658", Offset = "0x11BA658", VA = "0x11BA658", Slot = "19")]
		public override int DoFinal(byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001E62")]
		[Address(RVA = "0x11BA6F0", Offset = "0x11BA6F0", VA = "0x11BA6F0", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E63")]
		[Address(RVA = "0x11BA76C", Offset = "0x11BA76C", VA = "0x11BA76C")]
		private int RL(int x, int n)
		{
			return default(int);
		}

		[Token(Token = "0x6001E64")]
		[Address(RVA = "0x11BA778", Offset = "0x11BA778", VA = "0x11BA778")]
		private int F1(int x, int y, int z)
		{
			return default(int);
		}

		[Token(Token = "0x6001E65")]
		[Address(RVA = "0x11BA784", Offset = "0x11BA784", VA = "0x11BA784")]
		private int F2(int x, int y, int z)
		{
			return default(int);
		}

		[Token(Token = "0x6001E66")]
		[Address(RVA = "0x11BA794", Offset = "0x11BA794", VA = "0x11BA794")]
		private int F3(int x, int y, int z)
		{
			return default(int);
		}

		[Token(Token = "0x6001E67")]
		[Address(RVA = "0x11BA7A0", Offset = "0x11BA7A0", VA = "0x11BA7A0")]
		private int F4(int x, int y, int z)
		{
			return default(int);
		}

		[Token(Token = "0x6001E68")]
		[Address(RVA = "0x11BA7B0", Offset = "0x11BA7B0", VA = "0x11BA7B0")]
		private int F5(int x, int y, int z)
		{
			return default(int);
		}

		[Token(Token = "0x6001E69")]
		[Address(RVA = "0x11BA7BC", Offset = "0x11BA7BC", VA = "0x11BA7BC", Slot = "16")]
		internal override void ProcessBlock()
		{
		}

		[Token(Token = "0x6001E6A")]
		[Address(RVA = "0x11BBF38", Offset = "0x11BBF38", VA = "0x11BBF38", Slot = "20")]
		public override IMemoable Copy()
		{
			return null;
		}

		[Token(Token = "0x6001E6B")]
		[Address(RVA = "0x11BBF98", Offset = "0x11BBF98", VA = "0x11BBF98", Slot = "21")]
		public override void Reset(IMemoable other)
		{
		}
	}
	[Token(Token = "0x200035B")]
	public class RipeMD256Digest : GeneralDigest
	{
		[Token(Token = "0x4001096")]
		private const int DigestLength = 32;

		[Token(Token = "0x4001097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int H0;

		[Token(Token = "0x4001098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int H1;

		[Token(Token = "0x4001099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int H2;

		[Token(Token = "0x400109A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int H3;

		[Token(Token = "0x400109B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int H4;

		[Token(Token = "0x400109C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int H5;

		[Token(Token = "0x400109D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int H6;

		[Token(Token = "0x400109E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int H7;

		[Token(Token = "0x400109F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int[] X;

		[Token(Token = "0x40010A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int xOff;

		[Token(Token = "0x170003A3")]
		public override string AlgorithmName
		{
			[Token(Token = "0x6001E6C")]
			[Address(RVA = "0x13CD224", Offset = "0x13CD224", VA = "0x13CD224", Slot = "17")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001E6D")]
		[Address(RVA = "0x13CD26C", Offset = "0x13CD26C", VA = "0x13CD26C", Slot = "18")]
		public override int GetDigestSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001E6E")]
		[Address(RVA = "0x13CD274", Offset = "0x13CD274", VA = "0x13CD274")]
		public RipeMD256Digest()
		{
		}

		[Token(Token = "0x6001E6F")]
		[Address(RVA = "0x13CD2E8", Offset = "0x13CD2E8", VA = "0x13CD2E8")]
		public RipeMD256Digest(RipeMD256Digest t)
		{
		}

		[Token(Token = "0x6001E70")]
		[Address(RVA = "0x13CD364", Offset = "0x13CD364", VA = "0x13CD364")]
		private void CopyIn(RipeMD256Digest t)
		{
		}

		[Token(Token = "0x6001E71")]
		[Address(RVA = "0x13CD3FC", Offset = "0x13CD3FC", VA = "0x13CD3FC", Slot = "14")]
		internal override void ProcessWord(byte[] input, int inOff)
		{
		}

		[Token(Token = "0x6001E72")]
		[Address(RVA = "0x13CD4C4", Offset = "0x13CD4C4", VA = "0x13CD4C4", Slot = "15")]
		internal override void ProcessLength(long bitLength)
		{
		}

		[Token(Token = "0x6001E73")]
		[Address(RVA = "0x13CD548", Offset = "0x13CD548", VA = "0x13CD548")]
		private void UnpackWord(int word, byte[] outBytes, int outOff)
		{
		}

		[Token(Token = "0x6001E74")]
		[Address(RVA = "0x13CD5D4", Offset = "0x13CD5D4", VA = "0x13CD5D4", Slot = "19")]
		public override int DoFinal(byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001E75")]
		[Address(RVA = "0x13CD6A0", Offset = "0x13CD6A0", VA = "0x13CD6A0", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E76")]
		[Address(RVA = "0x13CD720", Offset = "0x13CD720", VA = "0x13CD720")]
		private int RL(int x, int n)
		{
			return default(int);
		}

		[Token(Token = "0x6001E77")]
		[Address(RVA = "0x13CD72C", Offset = "0x13CD72C", VA = "0x13CD72C")]
		private int F1(int x, int y, int z)
		{
			return default(int);
		}

		[Token(Token = "0x6001E78")]
		[Address(RVA = "0x13CD738", Offset = "0x13CD738", VA = "0x13CD738")]
		private int F2(int x, int y, int z)
		{
			return default(int);
		}

		[Token(Token = "0x6001E79")]
		[Address(RVA = "0x13CD748", Offset = "0x13CD748", VA = "0x13CD748")]
		private int F3(int x, int y, int z)
		{
			return default(int);
		}

		[Token(Token = "0x6001E7A")]
		[Address(RVA = "0x13CD754", Offset = "0x13CD754", VA = "0x13CD754")]
		private int F4(int x, int y, int z)
		{
			return default(int);
		}

		[Token(Token = "0x6001E7B")]
		[Address(RVA = "0x13CD764", Offset = "0x13CD764", VA = "0x13CD764")]
		private int F1(int a, int b, int c, int d, int x, int s)
		{
			return default(int);
		}

		[Token(Token = "0x6001E7C")]
		[Address(RVA = "0x13CD780", Offset = "0x13CD780", VA = "0x13CD780")]
		private int F2(int a, int b, int c, int d, int x, int s)
		{
			return default(int);
		}

		[Token(Token = "0x6001E7D")]
		[Address(RVA = "0x13CD7AC", Offset = "0x13CD7AC", VA = "0x13CD7AC")]
		private int F3(int a, int b, int c, int d, int x, int s)
		{
			return default(int);
		}

		[Token(Token = "0x6001E7E")]
		[Address(RVA = "0x13CD7D4", Offset = "0x13CD7D4", VA = "0x13CD7D4")]
		private int F4(int a, int b, int c, int d, int x, int s)
		{
			return default(int);
		}

		[Token(Token = "0x6001E7F")]
		[Address(RVA = "0x13CD800", Offset = "0x13CD800", VA = "0x13CD800")]
		private int FF1(int a, int b, int c, int d, int x, int s)
		{
			return default(int);
		}

		[Token(Token = "0x6001E80")]
		[Address(RVA = "0x13CD81C", Offset = "0x13CD81C", VA = "0x13CD81C")]
		private int FF2(int a, int b, int c, int d, int x, int s)
		{
			return default(int);
		}

		[Token(Token = "0x6001E81")]
		[Address(RVA = "0x13CD848", Offset = "0x13CD848", VA = "0x13CD848")]
		private int FF3(int a, int b, int c, int d, int x, int s)
		{
			return default(int);
		}

		[Token(Token = "0x6001E82")]
		[Address(RVA = "0x13CD870", Offset = "0x13CD870", VA = "0x13CD870")]
		private int FF4(int a, int b, int c, int d, int x, int s)
		{
			return default(int);
		}

		[Token(Token = "0x6001E83")]
		[Address(RVA = "0x13CD89C", Offset = "0x13CD89C", VA = "0x13CD89C", Slot = "16")]
		internal override void ProcessBlock()
		{
		}

		[Token(Token = "0x6001E84")]
		[Address(RVA = "0x13CE7A4", Offset = "0x13CE7A4", VA = "0x13CE7A4", Slot = "20")]
		public override IMemoable Copy()
		{
			return null;
		}

		[Token(Token = "0x6001E85")]
		[Address(RVA = "0x13CE804", Offset = "0x13CE804", VA = "0x13CE804", Slot = "21")]
		public override void Reset(IMemoable other)
		{
		}
	}
	[Token(Token = "0x200035C")]
	public class RipeMD320Digest : GeneralDigest
	{
		[Token(Token = "0x40010A1")]
		private const int DigestLength = 40;

		[Token(Token = "0x40010A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int H0;

		[Token(Token = "0x40010A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int H1;

		[Token(Token = "0x40010A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int H2;

		[Token(Token = "0x40010A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int H3;

		[Token(Token = "0x40010A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int H4;

		[Token(Token = "0x40010A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int H5;

		[Token(Token = "0x40010A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int H6;

		[Token(Token = "0x40010A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int H7;

		[Token(Token = "0x40010AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int H8;

		[Token(Token = "0x40010AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int H9;

		[Token(Token = "0x40010AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int[] X;

		[Token(Token = "0x40010AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int xOff;

		[Token(Token = "0x170003A4")]
		public override string AlgorithmName
		{
			[Token(Token = "0x6001E86")]
			[Address(RVA = "0x13CE898", Offset = "0x13CE898", VA = "0x13CE898", Slot = "17")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001E87")]
		[Address(RVA = "0x13CE8E0", Offset = "0x13CE8E0", VA = "0x13CE8E0", Slot = "18")]
		public override int GetDigestSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001E88")]
		[Address(RVA = "0x13CE8E8", Offset = "0x13CE8E8", VA = "0x13CE8E8")]
		public RipeMD320Digest()
		{
		}

		[Token(Token = "0x6001E89")]
		[Address(RVA = "0x13CE95C", Offset = "0x13CE95C", VA = "0x13CE95C")]
		public RipeMD320Digest(RipeMD320Digest t)
		{
		}

		[Token(Token = "0x6001E8A")]
		[Address(RVA = "0x13CE9D8", Offset = "0x13CE9D8", VA = "0x13CE9D8")]
		private void CopyIn(RipeMD320Digest t)
		{
		}

		[Token(Token = "0x6001E8B")]
		[Address(RVA = "0x13CEA80", Offset = "0x13CEA80", VA = "0x13CEA80", Slot = "14")]
		internal override void ProcessWord(byte[] input, int inOff)
		{
		}

		[Token(Token = "0x6001E8C")]
		[Address(RVA = "0x13CEB48", Offset = "0x13CEB48", VA = "0x13CEB48", Slot = "15")]
		internal override void ProcessLength(long bitLength)
		{
		}

		[Token(Token = "0x6001E8D")]
		[Address(RVA = "0x13CEBCC", Offset = "0x13CEBCC", VA = "0x13CEBCC")]
		private void UnpackWord(int word, byte[] outBytes, int outOff)
		{
		}

		[Token(Token = "0x6001E8E")]
		[Address(RVA = "0x13CEC58", Offset = "0x13CEC58", VA = "0x13CEC58", Slot = "19")]
		public override int DoFinal(byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001E8F")]
		[Address(RVA = "0x13CED44", Offset = "0x13CED44", VA = "0x13CED44", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E90")]
		[Address(RVA = "0x13CEDD8", Offset = "0x13CEDD8", VA = "0x13CEDD8")]
		private int RL(int x, int n)
		{
			return default(int);
		}

		[Token(Token = "0x6001E91")]
		[Address(RVA = "0x13CEDE4", Offset = "0x13CEDE4", VA = "0x13CEDE4")]
		private int F1(int x, int y, int z)
		{
			return default(int);
		}

		[Token(Token = "0x6001E92")]
		[Address(RVA = "0x13CEDF0", Offset = "0x13CEDF0", VA = "0x13CEDF0")]
		private int F2(int x, int y, int z)
		{
			return default(int);
		}

		[Token(Token = "0x6001E93")]
		[Address(RVA = "0x13CEE00", Offset = "0x13CEE00", VA = "0x13CEE00")]
		private int F3(int x, int y, int z)
		{
			return default(int);
		}

		[Token(Token = "0x6001E94")]
		[Address(RVA = "0x13CEE0C", Offset = "0x13CEE0C", VA = "0x13CEE0C")]
		private int F4(int x, int y, int z)
		{
			return default(int);
		}

		[Token(Token = "0x6001E95")]
		[Address(RVA = "0x13CEE1C", Offset = "0x13CEE1C", VA = "0x13CEE1C")]
		private int F5(int x, int y, int z)
		{
			return default(int);
		}

		[Token(Token = "0x6001E96")]
		[Address(RVA = "0x13CEE28", Offset = "0x13CEE28", VA = "0x13CEE28", Slot = "16")]
		internal override void ProcessBlock()
		{
		}

		[Token(Token = "0x6001E97")]
		[Address(RVA = "0x13D05E8", Offset = "0x13D05E8", VA = "0x13D05E8", Slot = "20")]
		public override IMemoable Copy()
		{
			return null;
		}

		[Token(Token = "0x6001E98")]
		[Address(RVA = "0x13D0648", Offset = "0x13D0648", VA = "0x13D0648", Slot = "21")]
		public override void Reset(IMemoable other)
		{
		}
	}
	[Token(Token = "0x200035D")]
	public class Sha3Digest : IDigest, IMemoable
	{
		[Token(Token = "0x40010AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly ulong[] KeccakRoundConstants;

		[Token(Token = "0x40010AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int[] KeccakRhoOffsets;

		[Token(Token = "0x40010B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private byte[] state;

		[Token(Token = "0x40010B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private byte[] dataQueue;

		[Token(Token = "0x40010B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int rate;

		[Token(Token = "0x40010B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int bitsInQueue;

		[Token(Token = "0x40010B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int fixedOutputLength;

		[Token(Token = "0x40010B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool squeezing;

		[Token(Token = "0x40010B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int bitsAvailableForSqueezing;

		[Token(Token = "0x40010B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private byte[] chunk;

		[Token(Token = "0x40010B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private byte[] oneByte;

		[Token(Token = "0x40010B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ulong[] C;

		[Token(Token = "0x40010BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private ulong[] tempA;

		[Token(Token = "0x40010BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ulong[] chiC;

		[Token(Token = "0x170003A5")]
		public virtual string AlgorithmName
		{
			[Token(Token = "0x6001EA0")]
			[Address(RVA = "0x13D3230", Offset = "0x13D3230", VA = "0x13D3230", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001E99")]
		[Address(RVA = "0x13D2C2C", Offset = "0x13D2C2C", VA = "0x13D2C2C")]
		private static ulong[] KeccakInitializeRoundConstants()
		{
			return null;
		}

		[Token(Token = "0x6001E9A")]
		[Address(RVA = "0x13D2D0C", Offset = "0x13D2D0C", VA = "0x13D2D0C")]
		private static int[] KeccakInitializeRhoOffsets()
		{
			return null;
		}

		[Token(Token = "0x6001E9B")]
		[Address(RVA = "0x13D2DFC", Offset = "0x13D2DFC", VA = "0x13D2DFC")]
		private void ClearDataQueueSection(int off, int len)
		{
		}

		[Token(Token = "0x6001E9C")]
		[Address(RVA = "0x13D2E48", Offset = "0x13D2E48", VA = "0x13D2E48")]
		public Sha3Digest()
		{
		}

		[Token(Token = "0x6001E9D")]
		[Address(RVA = "0x13D3000", Offset = "0x13D3000", VA = "0x13D3000")]
		public Sha3Digest(int bitLength)
		{
		}

		[Token(Token = "0x6001E9E")]
		[Address(RVA = "0x13D30C0", Offset = "0x13D30C0", VA = "0x13D30C0")]
		public Sha3Digest(Sha3Digest source)
		{
		}

		[Token(Token = "0x6001E9F")]
		[Address(RVA = "0x13D3180", Offset = "0x13D3180", VA = "0x13D3180")]
		private void CopyIn(Sha3Digest source)
		{
		}

		[Token(Token = "0x6001EA1")]
		[Address(RVA = "0x13D32B0", Offset = "0x13D32B0", VA = "0x13D32B0", Slot = "14")]
		public virtual int GetDigestSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001EA2")]
		[Address(RVA = "0x13D32C8", Offset = "0x13D32C8", VA = "0x13D32C8", Slot = "15")]
		public virtual void Update(byte input)
		{
		}

		[Token(Token = "0x6001EA3")]
		[Address(RVA = "0x13D3414", Offset = "0x13D3414", VA = "0x13D3414", Slot = "16")]
		public virtual void BlockUpdate(byte[] input, int inOff, int len)
		{
		}

		[Token(Token = "0x6001EA4")]
		[Address(RVA = "0x13D341C", Offset = "0x13D341C", VA = "0x13D341C", Slot = "17")]
		public virtual int DoFinal(byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001EA5")]
		[Address(RVA = "0x13D35FC", Offset = "0x13D35FC", VA = "0x13D35FC", Slot = "18")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x6001EA6")]
		[Address(RVA = "0x13D3604", Offset = "0x13D3604", VA = "0x13D3604", Slot = "19")]
		public virtual int GetByteLength()
		{
			return default(int);
		}

		[Token(Token = "0x6001EA7")]
		[Address(RVA = "0x13D2EFC", Offset = "0x13D2EFC", VA = "0x13D2EFC")]
		private void Init(int bitLength)
		{
		}

		[Token(Token = "0x6001EA8")]
		[Address(RVA = "0x13D3308", Offset = "0x13D3308", VA = "0x13D3308")]
		private void DoUpdate(byte[] data, int off, long databitlen)
		{
		}

		[Token(Token = "0x6001EA9")]
		[Address(RVA = "0x13D361C", Offset = "0x13D361C", VA = "0x13D361C")]
		private void InitSponge(int rate, int capacity)
		{
		}

		[Token(Token = "0x6001EAA")]
		[Address(RVA = "0x13D3A00", Offset = "0x13D3A00", VA = "0x13D3A00")]
		private void AbsorbQueue()
		{
		}

		[Token(Token = "0x6001EAB")]
		[Address(RVA = "0x13D374C", Offset = "0x13D374C", VA = "0x13D374C")]
		private void Absorb(byte[] data, int off, long databitlen)
		{
		}

		[Token(Token = "0x6001EAC")]
		[Address(RVA = "0x13D3A40", Offset = "0x13D3A40", VA = "0x13D3A40")]
		private void PadAndSwitchToSqueezingPhase()
		{
		}

		[Token(Token = "0x6001EAD")]
		[Address(RVA = "0x13D3464", Offset = "0x13D3464", VA = "0x13D3464")]
		private void Squeeze(byte[] output, int offset, long outputLength)
		{
		}

		[Token(Token = "0x6001EAE")]
		[Address(RVA = "0x13D3D3C", Offset = "0x13D3D3C", VA = "0x13D3D3C")]
		private static void FromBytesToWords(ulong[] stateAsWords, byte[] state)
		{
		}

		[Token(Token = "0x6001EAF")]
		[Address(RVA = "0x13D3DD4", Offset = "0x13D3DD4", VA = "0x13D3DD4")]
		private static void FromWordsToBytes(byte[] state, ulong[] stateAsWords)
		{
		}

		[Token(Token = "0x6001EB0")]
		[Address(RVA = "0x13D3C7C", Offset = "0x13D3C7C", VA = "0x13D3C7C")]
		private void KeccakPermutation(byte[] state)
		{
		}

		[Token(Token = "0x6001EB1")]
		[Address(RVA = "0x13D3F18", Offset = "0x13D3F18", VA = "0x13D3F18")]
		private void KeccakPermutationAfterXor(byte[] state, byte[] data, int dataLengthInBytes)
		{
		}

		[Token(Token = "0x6001EB2")]
		[Address(RVA = "0x13D3E64", Offset = "0x13D3E64", VA = "0x13D3E64")]
		private void KeccakPermutationOnWords(ulong[] state)
		{
		}

		[Token(Token = "0x6001EB3")]
		[Address(RVA = "0x13D3F8C", Offset = "0x13D3F8C", VA = "0x13D3F8C")]
		private void Theta(ulong[] A)
		{
		}

		[Token(Token = "0x6001EB4")]
		[Address(RVA = "0x13D40D8", Offset = "0x13D40D8", VA = "0x13D40D8")]
		private void Rho(ulong[] A)
		{
		}

		[Token(Token = "0x6001EB5")]
		[Address(RVA = "0x13D422C", Offset = "0x13D422C", VA = "0x13D422C")]
		private void Pi(ulong[] A)
		{
		}

		[Token(Token = "0x6001EB6")]
		[Address(RVA = "0x13D4310", Offset = "0x13D4310", VA = "0x13D4310")]
		private void Chi(ulong[] A)
		{
		}

		[Token(Token = "0x6001EB7")]
		[Address(RVA = "0x13D4444", Offset = "0x13D4444", VA = "0x13D4444")]
		private static void Iota(ulong[] A, int indexRound)
		{
		}

		[Token(Token = "0x6001EB8")]
		[Address(RVA = "0x13D3A3C", Offset = "0x13D3A3C", VA = "0x13D3A3C")]
		private void KeccakAbsorb(byte[] byteState, byte[] data, int dataInBytes)
		{
		}

		[Token(Token = "0x6001EB9")]
		[Address(RVA = "0x13D3C4C", Offset = "0x13D3C4C", VA = "0x13D3C4C")]
		private void KeccakExtract1024bits(byte[] byteState, byte[] data)
		{
		}

		[Token(Token = "0x6001EBA")]
		[Address(RVA = "0x13D3C64", Offset = "0x13D3C64", VA = "0x13D3C64")]
		private void KeccakExtract(byte[] byteState, byte[] data, int laneCount)
		{
		}

		[Token(Token = "0x6001EBB")]
		[Address(RVA = "0x13D44FC", Offset = "0x13D44FC", VA = "0x13D44FC", Slot = "11")]
		public IMemoable Copy()
		{
			return null;
		}

		[Token(Token = "0x6001EBC")]
		[Address(RVA = "0x13D455C", Offset = "0x13D455C", VA = "0x13D455C", Slot = "12")]
		public void Reset(IMemoable other)
		{
		}
	}
	[Token(Token = "0x200035E")]
	public class Sha1Digest : GeneralDigest
	{
		[Token(Token = "0x40010BC")]
		private const int DigestLength = 20;

		[Token(Token = "0x40010BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private uint H1;

		[Token(Token = "0x40010BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private uint H2;

		[Token(Token = "0x40010BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private uint H3;

		[Token(Token = "0x40010C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private uint H4;

		[Token(Token = "0x40010C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private uint H5;

		[Token(Token = "0x40010C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private uint[] X;

		[Token(Token = "0x40010C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int xOff;

		[Token(Token = "0x40010C4")]
		private const uint Y1 = 1518500249u;

		[Token(Token = "0x40010C5")]
		private const uint Y2 = 1859775393u;

		[Token(Token = "0x40010C6")]
		private const uint Y3 = 2400959708u;

		[Token(Token = "0x40010C7")]
		private const uint Y4 = 3395469782u;

		[Token(Token = "0x170003A6")]
		public override string AlgorithmName
		{
			[Token(Token = "0x6001EC1")]
			[Address(RVA = "0x13D084C", Offset = "0x13D084C", VA = "0x13D084C", Slot = "17")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001EBE")]
		[Address(RVA = "0x13D06DC", Offset = "0x13D06DC", VA = "0x13D06DC")]
		public Sha1Digest()
		{
		}

		[Token(Token = "0x6001EBF")]
		[Address(RVA = "0x13D0750", Offset = "0x13D0750", VA = "0x13D0750")]
		public Sha1Digest(Sha1Digest t)
		{
		}

		[Token(Token = "0x6001EC0")]
		[Address(RVA = "0x13D07CC", Offset = "0x13D07CC", VA = "0x13D07CC")]
		private void CopyIn(Sha1Digest t)
		{
		}

		[Token(Token = "0x6001EC2")]
		[Address(RVA = "0x13D0894", Offset = "0x13D0894", VA = "0x13D0894", Slot = "18")]
		public override int GetDigestSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001EC3")]
		[Address(RVA = "0x13D089C", Offset = "0x13D089C", VA = "0x13D089C", Slot = "14")]
		internal override void ProcessWord(byte[] input, int inOff)
		{
		}

		[Token(Token = "0x6001EC4")]
		[Address(RVA = "0x13D0934", Offset = "0x13D0934", VA = "0x13D0934", Slot = "15")]
		internal override void ProcessLength(long bitLength)
		{
		}

		[Token(Token = "0x6001EC5")]
		[Address(RVA = "0x13D09B8", Offset = "0x13D09B8", VA = "0x13D09B8", Slot = "19")]
		public override int DoFinal(byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001EC6")]
		[Address(RVA = "0x13D0A68", Offset = "0x13D0A68", VA = "0x13D0A68", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001EC7")]
		[Address(RVA = "0x13D0AC0", Offset = "0x13D0AC0", VA = "0x13D0AC0")]
		private static uint F(uint u, uint v, uint w)
		{
			return default(uint);
		}

		[Token(Token = "0x6001EC8")]
		[Address(RVA = "0x13D0AD0", Offset = "0x13D0AD0", VA = "0x13D0AD0")]
		private static uint H(uint u, uint v, uint w)
		{
			return default(uint);
		}

		[Token(Token = "0x6001EC9")]
		[Address(RVA = "0x13D0ADC", Offset = "0x13D0ADC", VA = "0x13D0ADC")]
		private static uint G(uint u, uint v, uint w)
		{
			return default(uint);
		}

		[Token(Token = "0x6001ECA")]
		[Address(RVA = "0x13D0AF0", Offset = "0x13D0AF0", VA = "0x13D0AF0", Slot = "16")]
		internal override void ProcessBlock()
		{
		}

		[Token(Token = "0x6001ECB")]
		[Address(RVA = "0x13D1058", Offset = "0x13D1058", VA = "0x13D1058", Slot = "20")]
		public override IMemoable Copy()
		{
			return null;
		}

		[Token(Token = "0x6001ECC")]
		[Address(RVA = "0x13D10B8", Offset = "0x13D10B8", VA = "0x13D10B8", Slot = "21")]
		public override void Reset(IMemoable other)
		{
		}
	}
	[Token(Token = "0x200035F")]
	public class Sha224Digest : GeneralDigest
	{
		[Token(Token = "0x40010C8")]
		private const int DigestLength = 28;

		[Token(Token = "0x40010C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private uint H1;

		[Token(Token = "0x40010CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private uint H2;

		[Token(Token = "0x40010CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private uint H3;

		[Token(Token = "0x40010CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private uint H4;

		[Token(Token = "0x40010CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private uint H5;

		[Token(Token = "0x40010CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private uint H6;

		[Token(Token = "0x40010CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private uint H7;

		[Token(Token = "0x40010D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private uint H8;

		[Token(Token = "0x40010D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private uint[] X;

		[Token(Token = "0x40010D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int xOff;

		[Token(Token = "0x40010D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly uint[] K;

		[Token(Token = "0x170003A7")]
		public override string AlgorithmName
		{
			[Token(Token = "0x6001ED0")]
			[Address(RVA = "0x13D12D4", Offset = "0x13D12D4", VA = "0x13D12D4", Slot = "17")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001ECD")]
		[Address(RVA = "0x13D114C", Offset = "0x13D114C", VA = "0x13D114C")]
		public Sha224Digest()
		{
		}

		[Token(Token = "0x6001ECE")]
		[Address(RVA = "0x13D11C0", Offset = "0x13D11C0", VA = "0x13D11C0")]
		public Sha224Digest(Sha224Digest t)
		{
		}

		[Token(Token = "0x6001ECF")]
		[Address(RVA = "0x13D123C", Offset = "0x13D123C", VA = "0x13D123C")]
		private void CopyIn(Sha224Digest t)
		{
		}

		[Token(Token = "0x6001ED1")]
		[Address(RVA = "0x13D131C", Offset = "0x13D131C", VA = "0x13D131C", Slot = "18")]
		public override int GetDigestSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001ED2")]
		[Address(RVA = "0x13D1324", Offset = "0x13D1324", VA = "0x13D1324", Slot = "14")]
		internal override void ProcessWord(byte[] input, int inOff)
		{
		}

		[Token(Token = "0x6001ED3")]
		[Address(RVA = "0x13D13BC", Offset = "0x13D13BC", VA = "0x13D13BC", Slot = "15")]
		internal override void ProcessLength(long bitLength)
		{
		}

		[Token(Token = "0x6001ED4")]
		[Address(RVA = "0x13D1440", Offset = "0x13D1440", VA = "0x13D1440", Slot = "19")]
		public override int DoFinal(byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001ED5")]
		[Address(RVA = "0x13D1518", Offset = "0x13D1518", VA = "0x13D1518", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001ED6")]
		[Address(RVA = "0x13D1570", Offset = "0x13D1570", VA = "0x13D1570", Slot = "16")]
		internal override void ProcessBlock()
		{
		}

		[Token(Token = "0x6001ED7")]
		[Address(RVA = "0x13D1B5C", Offset = "0x13D1B5C", VA = "0x13D1B5C")]
		private static uint Ch(uint x, uint y, uint z)
		{
			return default(uint);
		}

		[Token(Token = "0x6001ED8")]
		[Address(RVA = "0x13D1B7C", Offset = "0x13D1B7C", VA = "0x13D1B7C")]
		private static uint Maj(uint x, uint y, uint z)
		{
			return default(uint);
		}

		[Token(Token = "0x6001ED9")]
		[Address(RVA = "0x13D1B6C", Offset = "0x13D1B6C", VA = "0x13D1B6C")]
		private static uint Sum0(uint x)
		{
			return default(uint);
		}

		[Token(Token = "0x6001EDA")]
		[Address(RVA = "0x13D1B4C", Offset = "0x13D1B4C", VA = "0x13D1B4C")]
		private static uint Sum1(uint x)
		{
			return default(uint);
		}

		[Token(Token = "0x6001EDB")]
		[Address(RVA = "0x13D1B3C", Offset = "0x13D1B3C", VA = "0x13D1B3C")]
		private static uint Theta0(uint x)
		{
			return default(uint);
		}

		[Token(Token = "0x6001EDC")]
		[Address(RVA = "0x13D1B2C", Offset = "0x13D1B2C", VA = "0x13D1B2C")]
		private static uint Theta1(uint x)
		{
			return default(uint);
		}

		[Token(Token = "0x6001EDD")]
		[Address(RVA = "0x13D1B90", Offset = "0x13D1B90", VA = "0x13D1B90", Slot = "20")]
		public override IMemoable Copy()
		{
			return null;
		}

		[Token(Token = "0x6001EDE")]
		[Address(RVA = "0x13D1BF0", Offset = "0x13D1BF0", VA = "0x13D1BF0", Slot = "21")]
		public override void Reset(IMemoable other)
		{
		}
	}
	[Token(Token = "0x2000360")]
	public class Sha256Digest : GeneralDigest
	{
		[Token(Token = "0x40010D4")]
		private const int DigestLength = 32;

		[Token(Token = "0x40010D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private uint H1;

		[Token(Token = "0x40010D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private uint H2;

		[Token(Token = "0x40010D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private uint H3;

		[Token(Token = "0x40010D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private uint H4;

		[Token(Token = "0x40010D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private uint H5;

		[Token(Token = "0x40010DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private uint H6;

		[Token(Token = "0x40010DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private uint H7;

		[Token(Token = "0x40010DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private uint H8;

		[Token(Token = "0x40010DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private uint[] X;

		[Token(Token = "0x40010DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int xOff;

		[Token(Token = "0x40010DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly uint[] K;

		[Token(Token = "0x170003A8")]
		public override string AlgorithmName
		{
			[Token(Token = "0x6001EE3")]
			[Address(RVA = "0x13D1EAC", Offset = "0x13D1EAC", VA = "0x13D1EAC", Slot = "17")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001EE0")]
		[Address(RVA = "0x13D1D00", Offset = "0x13D1D00", VA = "0x13D1D00")]
		public Sha256Digest()
		{
		}

		[Token(Token = "0x6001EE1")]
		[Address(RVA = "0x13D1D98", Offset = "0x13D1D98", VA = "0x13D1D98")]
		public Sha256Digest(Sha256Digest t)
		{
		}

		[Token(Token = "0x6001EE2")]
		[Address(RVA = "0x13D1E14", Offset = "0x13D1E14", VA = "0x13D1E14")]
		private void CopyIn(Sha256Digest t)
		{
		}

		[Token(Token = "0x6001EE4")]
		[Address(RVA = "0x13D1EF4", Offset = "0x13D1EF4", VA = "0x13D1EF4", Slot = "18")]
		public override int GetDigestSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001EE5")]
		[Address(RVA = "0x13D1EFC", Offset = "0x13D1EFC", VA = "0x13D1EFC", Slot = "14")]
		internal override void ProcessWord(byte[] input, int inOff)
		{
		}

		[Token(Token = "0x6001EE6")]
		[Address(RVA = "0x13D1F94", Offset = "0x13D1F94", VA = "0x13D1F94", Slot = "15")]
		internal override void ProcessLength(long bitLength)
		{
		}

		[Token(Token = "0x6001EE7")]
		[Address(RVA = "0x13D2018", Offset = "0x13D2018", VA = "0x13D2018", Slot = "19")]
		public override int DoFinal(byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001EE8")]
		[Address(RVA = "0x13D2104", Offset = "0x13D2104", VA = "0x13D2104", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001EE9")]
		[Address(RVA = "0x13D1D7C", Offset = "0x13D1D7C", VA = "0x13D1D7C")]
		private void initHs()
		{
		}

		[Token(Token = "0x6001EEA")]
		[Address(RVA = "0x13D215C", Offset = "0x13D215C", VA = "0x13D215C", Slot = "16")]
		internal override void ProcessBlock()
		{
		}

		[Token(Token = "0x6001EEB")]
		[Address(RVA = "0x13D2738", Offset = "0x13D2738", VA = "0x13D2738")]
		private static uint Sum1Ch(uint x, uint y, uint z)
		{
			return default(uint);
		}

		[Token(Token = "0x6001EEC")]
		[Address(RVA = "0x13D2758", Offset = "0x13D2758", VA = "0x13D2758")]
		private static uint Sum0Maj(uint x, uint y, uint z)
		{
			return default(uint);
		}

		[Token(Token = "0x6001EED")]
		[Address(RVA = "0x13D2728", Offset = "0x13D2728", VA = "0x13D2728")]
		private static uint Theta0(uint x)
		{
			return default(uint);
		}

		[Token(Token = "0x6001EEE")]
		[Address(RVA = "0x13D2718", Offset = "0x13D2718", VA = "0x13D2718")]
		private static uint Theta1(uint x)
		{
			return default(uint);
		}

		[Token(Token = "0x6001EEF")]
		[Address(RVA = "0x13D277C", Offset = "0x13D277C", VA = "0x13D277C", Slot = "20")]
		public override IMemoable Copy()
		{
			return null;
		}

		[Token(Token = "0x6001EF0")]
		[Address(RVA = "0x13D27DC", Offset = "0x13D27DC", VA = "0x13D27DC", Slot = "21")]
		public override void Reset(IMemoable other)
		{
		}
	}
	[Token(Token = "0x2000361")]
	public class Sha384Digest : LongDigest
	{
		[Token(Token = "0x40010E0")]
		private const int DigestLength = 48;

		[Token(Token = "0x170003A9")]
		public override string AlgorithmName
		{
			[Token(Token = "0x6001EF4")]
			[Address(RVA = "0x13D29CC", Offset = "0x13D29CC", VA = "0x13D29CC", Slot = "14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001EF2")]
		[Address(RVA = "0x13D28EC", Offset = "0x13D28EC", VA = "0x13D28EC")]
		public Sha384Digest()
		{
		}

		[Token(Token = "0x6001EF3")]
		[Address(RVA = "0x13D2954", Offset = "0x13D2954", VA = "0x13D2954")]
		public Sha384Digest(Sha384Digest t)
		{
		}

		[Token(Token = "0x6001EF5")]
		[Address(RVA = "0x13D2A14", Offset = "0x13D2A14", VA = "0x13D2A14", Slot = "15")]
		public override int GetDigestSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001EF6")]
		[Address(RVA = "0x13D2A1C", Offset = "0x13D2A1C", VA = "0x13D2A1C", Slot = "16")]
		public override int DoFinal(byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001EF7")]
		[Address(RVA = "0x13D2AE0", Offset = "0x13D2AE0", VA = "0x13D2AE0", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001EF8")]
		[Address(RVA = "0x13D2B34", Offset = "0x13D2B34", VA = "0x13D2B34", Slot = "17")]
		public override IMemoable Copy()
		{
			return null;
		}

		[Token(Token = "0x6001EF9")]
		[Address(RVA = "0x13D2B94", Offset = "0x13D2B94", VA = "0x13D2B94", Slot = "18")]
		public override void Reset(IMemoable other)
		{
		}
	}
	[Token(Token = "0x2000362")]
	public class Sha512Digest : LongDigest
	{
		[Token(Token = "0x40010E1")]
		private const int DigestLength = 64;

		[Token(Token = "0x170003AA")]
		public override string AlgorithmName
		{
			[Token(Token = "0x6001EFC")]
			[Address(RVA = "0x13D4734", Offset = "0x13D4734", VA = "0x13D4734", Slot = "14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001EFA")]
		[Address(RVA = "0x13D4654", Offset = "0x13D4654", VA = "0x13D4654")]
		public Sha512Digest()
		{
		}

		[Token(Token = "0x6001EFB")]
		[Address(RVA = "0x13D46BC", Offset = "0x13D46BC", VA = "0x13D46BC")]
		public Sha512Digest(Sha512Digest t)
		{
		}

		[Token(Token = "0x6001EFD")]
		[Address(RVA = "0x13D477C", Offset = "0x13D477C", VA = "0x13D477C", Slot = "15")]
		public override int GetDigestSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001EFE")]
		[Address(RVA = "0x13D4784", Offset = "0x13D4784", VA = "0x13D4784", Slot = "16")]
		public override int DoFinal(byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001EFF")]
		[Address(RVA = "0x13D4870", Offset = "0x13D4870", VA = "0x13D4870", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001F00")]
		[Address(RVA = "0x13D48C4", Offset = "0x13D48C4", VA = "0x13D48C4", Slot = "17")]
		public override IMemoable Copy()
		{
			return null;
		}

		[Token(Token = "0x6001F01")]
		[Address(RVA = "0x13D4924", Offset = "0x13D4924", VA = "0x13D4924", Slot = "18")]
		public override void Reset(IMemoable other)
		{
		}
	}
	[Token(Token = "0x2000363")]
	public class Sha512tDigest : LongDigest
	{
		[Token(Token = "0x40010E2")]
		private const ulong A5 = 11936128518282651045uL;

		[Token(Token = "0x40010E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private readonly int digestLength;

		[Token(Token = "0x40010E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private ulong H1t;

		[Token(Token = "0x40010E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private ulong H2t;

		[Token(Token = "0x40010E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private ulong H3t;

		[Token(Token = "0x40010E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private ulong H4t;

		[Token(Token = "0x40010E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private ulong H5t;

		[Token(Token = "0x40010E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private ulong H6t;

		[Token(Token = "0x40010EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private ulong H7t;

		[Token(Token = "0x40010EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private ulong H8t;

		[Token(Token = "0x170003AB")]
		public override string AlgorithmName
		{
			[Token(Token = "0x6001F04")]
			[Address(RVA = "0x13D4D48", Offset = "0x13D4D48", VA = "0x13D4D48", Slot = "14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001F02")]
		[Address(RVA = "0x13D49BC", Offset = "0x13D49BC", VA = "0x13D49BC")]
		public Sha512tDigest(int bitLength)
		{
		}

		[Token(Token = "0x6001F03")]
		[Address(RVA = "0x13D4CA8", Offset = "0x13D4CA8", VA = "0x13D4CA8")]
		public Sha512tDigest(Sha512tDigest t)
		{
		}

		[Token(Token = "0x6001F05")]
		[Address(RVA = "0x13D4DCC", Offset = "0x13D4DCC", VA = "0x13D4DCC", Slot = "15")]
		public override int GetDigestSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001F06")]
		[Address(RVA = "0x13D4DD4", Offset = "0x13D4DD4", VA = "0x13D4DD4", Slot = "16")]
		public override int DoFinal(byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001F07")]
		[Address(RVA = "0x13D4F44", Offset = "0x13D4F44", VA = "0x13D4F44", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001F08")]
		[Address(RVA = "0x13D4B14", Offset = "0x13D4B14", VA = "0x13D4B14")]
		private void tIvGenerate(int bitLength)
		{
		}

		[Token(Token = "0x6001F09")]
		[Address(RVA = "0x13D4EDC", Offset = "0x13D4EDC", VA = "0x13D4EDC")]
		private static void UInt64_To_BE(ulong n, byte[] bs, int off, int max)
		{
		}

		[Token(Token = "0x6001F0A")]
		[Address(RVA = "0x13D4F88", Offset = "0x13D4F88", VA = "0x13D4F88")]
		private static void UInt32_To_BE(uint n, byte[] bs, int off, int max)
		{
		}

		[Token(Token = "0x6001F0B")]
		[Address(RVA = "0x13D5060", Offset = "0x13D5060", VA = "0x13D5060", Slot = "17")]
		public override IMemoable Copy()
		{
			return null;
		}

		[Token(Token = "0x6001F0C")]
		[Address(RVA = "0x13D50C0", Offset = "0x13D50C0", VA = "0x13D50C0", Slot = "18")]
		public override void Reset(IMemoable other)
		{
		}
	}
	[Token(Token = "0x2000364")]
	public class TigerDigest : IDigest, IMemoable
	{
		[Token(Token = "0x40010EC")]
		private const int MyByteLength = 64;

		[Token(Token = "0x40010ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly long[] t1;

		[Token(Token = "0x40010EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly long[] t2;

		[Token(Token = "0x40010EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly long[] t3;

		[Token(Token = "0x40010F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly long[] t4;

		[Token(Token = "0x40010F1")]
		private const int DigestLength = 24;

		[Token(Token = "0x40010F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private long a;

		[Token(Token = "0x40010F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private long b;

		[Token(Token = "0x40010F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private long c;

		[Token(Token = "0x40010F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private long byteCount;

		[Token(Token = "0x40010F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private byte[] Buffer;

		[Token(Token = "0x40010F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int bOff;

		[Token(Token = "0x40010F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private long[] x;

		[Token(Token = "0x40010F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int xOff;

		[Token(Token = "0x170003AC")]
		public string AlgorithmName
		{
			[Token(Token = "0x6001F0F")]
			[Address(RVA = "0x13D54AC", Offset = "0x13D54AC", VA = "0x13D54AC", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001F0D")]
		[Address(RVA = "0x13D51EC", Offset = "0x13D51EC", VA = "0x13D51EC")]
		public TigerDigest()
		{
		}

		[Token(Token = "0x6001F0E")]
		[Address(RVA = "0x13D531C", Offset = "0x13D531C", VA = "0x13D531C")]
		public TigerDigest(TigerDigest t)
		{
		}

		[Token(Token = "0x6001F10")]
		[Address(RVA = "0x13D54F4", Offset = "0x13D54F4", VA = "0x13D54F4", Slot = "5")]
		public int GetDigestSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001F11")]
		[Address(RVA = "0x13D54FC", Offset = "0x13D54FC", VA = "0x13D54FC", Slot = "6")]
		public int GetByteLength()
		{
			return default(int);
		}

		[Token(Token = "0x6001F12")]
		[Address(RVA = "0x13D5504", Offset = "0x13D5504", VA = "0x13D5504")]
		private void ProcessWord(byte[] b, int off)
		{
		}

		[Token(Token = "0x6001F13")]
		[Address(RVA = "0x13D5A2C", Offset = "0x13D5A2C", VA = "0x13D5A2C", Slot = "7")]
		public void Update(byte input)
		{
		}

		[Token(Token = "0x6001F14")]
		[Address(RVA = "0x13D5AB0", Offset = "0x13D5AB0", VA = "0x13D5AB0", Slot = "8")]
		public void BlockUpdate(byte[] input, int inOff, int length)
		{
		}

		[Token(Token = "0x6001F15")]
		[Address(RVA = "0x13D5BDC", Offset = "0x13D5BDC", VA = "0x13D5BDC")]
		private void RoundABC(long x, long mul)
		{
		}

		[Token(Token = "0x6001F16")]
		[Address(RVA = "0x13D5DAC", Offset = "0x13D5DAC", VA = "0x13D5DAC")]
		private void RoundBCA(long x, long mul)
		{
		}

		[Token(Token = "0x6001F17")]
		[Address(RVA = "0x13D5F78", Offset = "0x13D5F78", VA = "0x13D5F78")]
		private void RoundCAB(long x, long mul)
		{
		}

		[Token(Token = "0x6001F18")]
		[Address(RVA = "0x13D6144", Offset = "0x13D6144", VA = "0x13D6144")]
		private void KeySchedule()
		{
		}

		[Token(Token = "0x6001F19")]
		[Address(RVA = "0x13D5640", Offset = "0x13D5640", VA = "0x13D5640")]
		private void ProcessBlock()
		{
		}

		[Token(Token = "0x6001F1A")]
		[Address(RVA = "0x13D63D4", Offset = "0x13D63D4", VA = "0x13D63D4")]
		private void UnpackWord(long r, byte[] output, int outOff)
		{
		}

		[Token(Token = "0x6001F1B")]
		[Address(RVA = "0x13D64D0", Offset = "0x13D64D0", VA = "0x13D64D0")]
		private void ProcessLength(long bitLength)
		{
		}

		[Token(Token = "0x6001F1C")]
		[Address(RVA = "0x13D6508", Offset = "0x13D6508", VA = "0x13D6508")]
		private void Finish()
		{
		}

		[Token(Token = "0x6001F1D")]
		[Address(RVA = "0x13D6558", Offset = "0x13D6558", VA = "0x13D6558", Slot = "9")]
		public int DoFinal(byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001F1E")]
		[Address(RVA = "0x13D526C", Offset = "0x13D526C", VA = "0x13D526C", Slot = "10")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001F1F")]
		[Address(RVA = "0x13D65C4", Offset = "0x13D65C4", VA = "0x13D65C4", Slot = "11")]
		public IMemoable Copy()
		{
			return null;
		}

		[Token(Token = "0x6001F20")]
		[Address(RVA = "0x13D53AC", Offset = "0x13D53AC", VA = "0x13D53AC", Slot = "12")]
		public void Reset(IMemoable other)
		{
		}
	}
	[Token(Token = "0x2000365")]
	public sealed class WhirlpoolDigest : IDigest, IMemoable
	{
		[Token(Token = "0x40010FA")]
		private const int BYTE_LENGTH = 64;

		[Token(Token = "0x40010FB")]
		private const int DIGEST_LENGTH_BYTES = 64;

		[Token(Token = "0x40010FC")]
		private const int ROUNDS = 10;

		[Token(Token = "0x40010FD")]
		private const int REDUCTION_POLYNOMIAL = 285;

		[Token(Token = "0x40010FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int[] SBOX;

		[Token(Token = "0x40010FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly long[] C0;

		[Token(Token = "0x4001100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly long[] C1;

		[Token(Token = "0x4001101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly long[] C2;

		[Token(Token = "0x4001102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly long[] C3;

		[Token(Token = "0x4001103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static readonly long[] C4;

		[Token(Token = "0x4001104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static readonly long[] C5;

		[Token(Token = "0x4001105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static readonly long[] C6;

		[Token(Token = "0x4001106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static readonly long[] C7;

		[Token(Token = "0x4001107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly long[] _rc;

		[Token(Token = "0x4001108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static readonly short[] EIGHT;

		[Token(Token = "0x4001109")]
		private const int BITCOUNT_ARRAY_SIZE = 32;

		[Token(Token = "0x400110A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private byte[] _buffer;

		[Token(Token = "0x400110B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int _bufferPos;

		[Token(Token = "0x400110C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private short[] _bitCount;

		[Token(Token = "0x400110D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private long[] _hash;

		[Token(Token = "0x400110E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private long[] _K;

		[Token(Token = "0x400110F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private long[] _L;

		[Token(Token = "0x4001110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private long[] _block;

		[Token(Token = "0x4001111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private long[] _state;

		[Token(Token = "0x170003AD")]
		public string AlgorithmName
		{
			[Token(Token = "0x6001F27")]
			[Address(RVA = "0x13D70DC", Offset = "0x13D70DC", VA = "0x13D70DC", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001F22")]
		[Address(RVA = "0x13D6738", Offset = "0x13D6738", VA = "0x13D6738")]
		static WhirlpoolDigest()
		{
		}

		[Token(Token = "0x6001F23")]
		[Address(RVA = "0x13D6BC0", Offset = "0x13D6BC0", VA = "0x13D6BC0")]
		public WhirlpoolDigest()
		{
		}

		[Token(Token = "0x6001F24")]
		[Address(RVA = "0x13D6B8C", Offset = "0x13D6B8C", VA = "0x13D6B8C")]
		private static long packIntoLong(int b7, int b6, int b5, int b4, int b3, int b2, int b1, int b0)
		{
			return default(long);
		}

		[Token(Token = "0x6001F25")]
		[Address(RVA = "0x13D6B78", Offset = "0x13D6B78", VA = "0x13D6B78")]
		private static int maskWithReductionPolynomial(int input)
		{
			return default(int);
		}

		[Token(Token = "0x6001F26")]
		[Address(RVA = "0x13D6E6C", Offset = "0x13D6E6C", VA = "0x13D6E6C")]
		public WhirlpoolDigest(WhirlpoolDigest originalDigest)
		{
		}

		[Token(Token = "0x6001F28")]
		[Address(RVA = "0x13D7124", Offset = "0x13D7124", VA = "0x13D7124", Slot = "5")]
		public int GetDigestSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001F29")]
		[Address(RVA = "0x13D712C", Offset = "0x13D712C", VA = "0x13D712C", Slot = "9")]
		public int DoFinal(byte[] output, int outOff)
		{
			return default(int);
		}

		[Token(Token = "0x6001F2A")]
		[Address(RVA = "0x13D7358", Offset = "0x13D7358", VA = "0x13D7358", Slot = "10")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001F2B")]
		[Address(RVA = "0x13D7420", Offset = "0x13D7420", VA = "0x13D7420")]
		private void processFilledBuffer()
		{
		}

		[Token(Token = "0x6001F2C")]
		[Address(RVA = "0x13D7518", Offset = "0x13D7518", VA = "0x13D7518")]
		private static long bytesToLongFromBuffer(byte[] buffer, int startPos)
		{
			return default(long);
		}

		[Token(Token = "0x6001F2D")]
		[Address(RVA = "0x13D72E8", Offset = "0x13D72E8", VA = "0x13D72E8")]
		private static void convertLongToByteArray(long inputLong, byte[] outputArray, int offSet)
		{
		}

		[Token(Token = "0x6001F2E")]
		[Address(RVA = "0x13D75F8", Offset = "0x13D75F8", VA = "0x13D75F8")]
		private void processBlock()
		{
		}

		[Token(Token = "0x6001F2F")]
		[Address(RVA = "0x13D7F34", Offset = "0x13D7F34", VA = "0x13D7F34", Slot = "7")]
		public void Update(byte input)
		{
		}

		[Token(Token = "0x6001F30")]
		[Address(RVA = "0x13D7FAC", Offset = "0x13D7FAC", VA = "0x13D7FAC")]
		private void increment()
		{
		}

		[Token(Token = "0x6001F31")]
		[Address(RVA = "0x13D80CC", Offset = "0x13D80CC", VA = "0x13D80CC", Slot = "8")]
		public void BlockUpdate(byte[] input, int inOff, int length)
		{
		}

		[Token(Token = "0x6001F32")]
		[Address(RVA = "0x13D7208", Offset = "0x13D7208", VA = "0x13D7208")]
		private void finish()
		{
		}

		[Token(Token = "0x6001F33")]
		[Address(RVA = "0x13D8144", Offset = "0x13D8144", VA = "0x13D8144")]
		private byte[] copyBitLength()
		{
			return null;
		}

		[Token(Token = "0x6001F34")]
		[Address(RVA = "0x13D81FC", Offset = "0x13D81FC", VA = "0x13D81FC", Slot = "6")]
		public int GetByteLength()
		{
			return default(int);
		}

		[Token(Token = "0x6001F35")]
		[Address(RVA = "0x13D8204", Offset = "0x13D8204", VA = "0x13D8204", Slot = "11")]
		public IMemoable Copy()
		{
			return null;
		}

		[Token(Token = "0x6001F36")]
		[Address(RVA = "0x13D6F64", Offset = "0x13D6F64", VA = "0x13D6F64", Slot = "12")]
		public void Reset(IMemoable other)
		{
		}
	}
}
namespace Org.BouncyCastle.Crypto.Agreement
{
	[Token(Token = "0x2000366")]
	public class DHBasicAgreement : IBasicAgreement
	{
		[Token(Token = "0x4001112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private DHPrivateKeyParameters key;

		[Token(Token = "0x4001113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private DHParameters dhParams;

		[Token(Token = "0x6001F37")]
		[Address(RVA = "0x11AF494", Offset = "0x11AF494", VA = "0x11AF494", Slot = "7")]
		public virtual void Init(ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001F38")]
		[Address(RVA = "0x11AF59C", Offset = "0x11AF59C", VA = "0x11AF59C", Slot = "8")]
		public virtual int GetFieldSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001F39")]
		[Address(RVA = "0x11AF5E4", Offset = "0x11AF5E4", VA = "0x11AF5E4", Slot = "9")]
		public virtual BigInteger CalculateAgreement(ICipherParameters pubKey)
		{
			return null;
		}

		[Token(Token = "0x6001F3A")]
		[Address(RVA = "0x11AF730", Offset = "0x11AF730", VA = "0x11AF730")]
		public DHBasicAgreement()
		{
		}
	}
	[Token(Token = "0x2000367")]
	public class ECDHBasicAgreement : IBasicAgreement
	{
		[Token(Token = "0x4001114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected internal ECPrivateKeyParameters privKey;

		[Token(Token = "0x6001F3B")]
		[Address(RVA = "0x11AF738", Offset = "0x11AF738", VA = "0x11AF738", Slot = "7")]
		public virtual void Init(ICipherParameters parameters)
		{
		}

		[Token(Token = "0x6001F3C")]
		[Address(RVA = "0x11AF804", Offset = "0x11AF804", VA = "0x11AF804", Slot = "8")]
		public virtual int GetFieldSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001F3D")]
		[Address(RVA = "0x11AF850", Offset = "0x11AF850", VA = "0x11AF850", Slot = "9")]
		public virtual BigInteger CalculateAgreement(ICipherParameters pubKey)
		{
			return null;
		}

		[Token(Token = "0x6001F3E")]
		[Address(RVA = "0x11AF98C", Offset = "0x11AF98C", VA = "0x11AF98C")]
		public ECDHBasicAgreement()
		{
		}
	}
}
namespace Org.BouncyCastle.Asn1
{
	[Token(Token = "0x2000368")]
	public abstract class Asn1Generator
	{
		[Token(Token = "0x4001115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Stream _out;

		[Token(Token = "0x170003AE")]
		protected Stream Out
		{
			[Token(Token = "0x6001F40")]
			[Address(RVA = "0xE899C0", Offset = "0xE899C0", VA = "0xE899C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001F3F")]
		[Address(RVA = "0xE89994", Offset = "0xE89994", VA = "0xE89994")]
		protected Asn1Generator(Stream outStream)
		{
		}

		[Token(Token = "0x6001F41")]
		public abstract void AddObject(Asn1Encodable obj);

		[Token(Token = "0x6001F42")]
		public abstract Stream GetRawOutputStream();

		[Token(Token = "0x6001F43")]
		public abstract void Close();
	}
	[Token(Token = "0x2000369")]
	public interface Asn1OctetStringParser : IAsn1Convertible
	{
		[Token(Token = "0x6001F44")]
		Stream GetOctetStream();
	}
	[Token(Token = "0x200036A")]
	public interface Asn1SequenceParser : IAsn1Convertible
	{
		[Token(Token = "0x6001F45")]
		IAsn1Convertible ReadObject();
	}
	[Token(Token = "0x200036B")]
	public interface Asn1SetParser : IAsn1Convertible
	{
		[Token(Token = "0x6001F46")]
		IAsn1Convertible ReadObject();
	}
	[Token(Token = "0x200036C")]
	public class Asn1StreamParser
	{
		[Token(Token = "0x4001116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Stream _in;

		[Token(Token = "0x4001117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly int _limit;

		[Token(Token = "0x4001118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly byte[][] tmpBuffers;

		[Token(Token = "0x6001F47")]
		[Address(RVA = "0xE8A1DC", Offset = "0xE8A1DC", VA = "0xE8A1DC")]
		public Asn1StreamParser(Stream inStream)
		{
		}

		[Token(Token = "0x6001F48")]
		[Address(RVA = "0xE8B568", Offset = "0xE8B568", VA = "0xE8B568")]
		public Asn1StreamParser(Stream inStream, int limit)
		{
		}

		[Token(Token = "0x6001F49")]
		[Address(RVA = "0xE8FE30", Offset = "0xE8FE30", VA = "0xE8FE30")]
		public Asn1StreamParser(byte[] encoding)
		{
		}

		[Token(Token = "0x6001F4A")]
		[Address(RVA = "0xE8FEB4", Offset = "0xE8FEB4", VA = "0xE8FEB4")]
		internal IAsn1Convertible ReadIndef(int tagValue)
		{
			return null;
		}

		[Token(Token = "0x6001F4B")]
		[Address(RVA = "0xE8FFE0", Offset = "0xE8FFE0", VA = "0xE8FFE0")]
		internal IAsn1Convertible ReadImplicit(bool constructed, int tag)
		{
			return null;
		}

		[Token(Token = "0x6001F4C")]
		[Address(RVA = "0xE8A210", Offset = "0xE8A210", VA = "0xE8A210")]
		internal Asn1Object ReadTaggedObject(bool constructed, int tag)
		{
			return null;
		}

		[Token(Token = "0x6001F4D")]
		[Address(RVA = "0xE904DC", Offset = "0xE904DC", VA = "0xE904DC", Slot = "4")]
		public virtual IAsn1Convertible ReadObject()
		{
			return null;
		}

		[Token(Token = "0x6001F4E")]
		[Address(RVA = "0xE90A14", Offset = "0xE90A14", VA = "0xE90A14")]
		private void Set00Check(bool enabled)
		{
		}

		[Token(Token = "0x6001F4F")]
		[Address(RVA = "0xE90228", Offset = "0xE90228", VA = "0xE90228")]
		internal Asn1EncodableVector ReadVector()
		{
			return null;
		}
	}
	[Token(Token = "0x200036D")]
	public interface Asn1TaggedObjectParser : IAsn1Convertible
	{
		[Token(Token = "0x170003AF")]
		int TagNo
		{
			[Token(Token = "0x6001F50")]
			get;
		}

		[Token(Token = "0x6001F51")]
		IAsn1Convertible GetObjectParser(int tag, bool isExplicit);
	}
	[Token(Token = "0x200036E")]
	public abstract class Asn1Encodable : IAsn1Convertible
	{
		[Token(Token = "0x4001119")]
		public const string Der = "DER";

		[Token(Token = "0x400111A")]
		public const string Ber = "BER";

		[Token(Token = "0x6001F52")]
		[Address(RVA = "0xE88C00", Offset = "0xE88C00", VA = "0xE88C00")]
		public byte[] GetEncoded()
		{
			return null;
		}

		[Token(Token = "0x6001F53")]
		[Address(RVA = "0xE88CC0", Offset = "0xE88CC0", VA = "0xE88CC0")]
		public byte[] GetEncoded(string encoding)
		{
			return null;
		}

		[Token(Token = "0x6001F54")]
		[Address(RVA = "0xE88DB0", Offset = "0xE88DB0", VA = "0xE88DB0")]
		public byte[] GetDerEncoded()
		{
			return null;
		}

		[Token(Token = "0x6001F55")]
		[Address(RVA = "0xE88E78", Offset = "0xE88E78", VA = "0xE88E78", Slot = "2")]
		public sealed override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001F56")]
		[Address(RVA = "0xE88EB0", Offset = "0xE88EB0", VA = "0xE88EB0", Slot = "0")]
		public sealed override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F57")]
		public abstract Asn1Object ToAsn1Object();

		[Token(Token = "0x6001F58")]
		[Address(RVA = "0xE88FD4", Offset = "0xE88FD4", VA = "0xE88FD4")]
		protected Asn1Encodable()
		{
		}
	}
	[Token(Token = "0x200036F")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x81F2AC", Offset = "0x81F2AC")]
	public class Asn1EncodableVector : IEnumerable
	{
		[Token(Token = "0x400111B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IList v;

		[Token(Token = "0x170003B0")]
		public Asn1Encodable Item
		{
			[Token(Token = "0x6001F5D")]
			[Address(RVA = "0xE89660", Offset = "0xE89660", VA = "0xE89660")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003B1")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x8366B0", Offset = "0x8366B0")]
		public int Size
		{
			[Token(Token = "0x6001F5F")]
			[Address(RVA = "0xE89764", Offset = "0xE89764", VA = "0xE89764")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170003B2")]
		public int Count
		{
			[Token(Token = "0x6001F60")]
			[Address(RVA = "0xE89818", Offset = "0xE89818", VA = "0xE89818")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001F59")]
		[Address(RVA = "0xE88FDC", Offset = "0xE88FDC", VA = "0xE88FDC")]
		public static Asn1EncodableVector FromEnumerable(IEnumerable e)
		{
			return null;
		}

		[Token(Token = "0x6001F5A")]
		[Address(RVA = "0xE893A8", Offset = "0xE893A8", VA = "0xE893A8")]
		public Asn1EncodableVector(params Asn1Encodable[] v)
		{
		}

		[Token(Token = "0x6001F5B")]
		[Address(RVA = "0xE89434", Offset = "0xE89434", VA = "0xE89434")]
		public void Add(params Asn1Encodable[] objs)
		{
		}

		[Token(Token = "0x6001F5C")]
		[Address(RVA = "0xE89548", Offset = "0xE89548", VA = "0xE89548")]
		public void AddOptional(params Asn1Encodable[] objs)
		{
		}

		[Token(Token = "0x6001F5E")]
		[Address(RVA = "0xE89760", Offset = "0xE89760", VA = "0xE89760")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x830848", Offset = "0x830848")]
		public Asn1Encodable Get(int index)
		{
			return null;
		}

		[Token(Token = "0x6001F61")]
		[Address(RVA = "0xE898CC", Offset = "0xE898CC", VA = "0xE898CC", Slot = "4")]
		public IEnumerator GetEnumerator()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000370")]
	public class Asn1Exception : IOException
	{
		[Token(Token = "0x6001F62")]
		[Address(RVA = "0xE8997C", Offset = "0xE8997C", VA = "0xE8997C")]
		public Asn1Exception()
		{
		}

		[Token(Token = "0x6001F63")]
		[Address(RVA = "0xE89984", Offset = "0xE89984", VA = "0xE89984")]
		public Asn1Exception(string message)
		{
		}

		[Token(Token = "0x6001F64")]
		[Address(RVA = "0xE8998C", Offset = "0xE8998C", VA = "0xE8998C")]
		public Asn1Exception(string message, Exception exception)
		{
		}
	}
	[Token(Token = "0x2000371")]
	public class Asn1InputStream : FilterStream
	{
		[Token(Token = "0x400111C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly int limit;

		[Token(Token = "0x400111D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly byte[][] tmpBuffers;

		[Token(Token = "0x6001F65")]
		[Address(RVA = "0xE899C8", Offset = "0xE899C8", VA = "0xE899C8")]
		internal static int FindLimit(Stream input)
		{
			return default(int);
		}

		[Token(Token = "0x6001F66")]
		[Address(RVA = "0xE89AB0", Offset = "0xE89AB0", VA = "0xE89AB0")]
		public Asn1InputStream(Stream inputStream)
		{
		}

		[Token(Token = "0x6001F67")]
		[Address(RVA = "0xE89AE4", Offset = "0xE89AE4", VA = "0xE89AE4")]
		public Asn1InputStream(Stream inputStream, int limit)
		{
		}

		[Token(Token = "0x6001F68")]
		[Address(RVA = "0xE89B60", Offset = "0xE89B60", VA = "0xE89B60")]
		public Asn1InputStream(byte[] input)
		{
		}

		[Token(Token = "0x6001F69")]
		[Address(RVA = "0xE89BE4", Offset = "0xE89BE4", VA = "0xE89BE4")]
		private Asn1Object BuildObject(int tag, int tagNo, int length)
		{
			return null;
		}

		[Token(Token = "0x6001F6A")]
		[Address(RVA = "0xE8AB64", Offset = "0xE8AB64", VA = "0xE8AB64")]
		internal Asn1EncodableVector BuildEncodableVector()
		{
			return null;
		}

		[Token(Token = "0x6001F6B")]
		[Address(RVA = "0xE8B0C0", Offset = "0xE8B0C0", VA = "0xE8B0C0", Slot = "31")]
		internal virtual Asn1EncodableVector BuildDerEncodableVector(DefiniteLengthInputStream dIn)
		{
			return null;
		}

		[Token(Token = "0x6001F6C")]
		[Address(RVA = "0xE8B138", Offset = "0xE8B138", VA = "0xE8B138", Slot = "32")]
		internal virtual DerSequence CreateDerSequence(DefiniteLengthInputStream dIn)
		{
			return null;
		}

		[Token(Token = "0x6001F6D")]
		[Address(RVA = "0xE8B1CC", Offset = "0xE8B1CC", VA = "0xE8B1CC", Slot = "33")]
		internal virtual DerSet CreateDerSet(DefiniteLengthInputStream dIn)
		{
			return null;
		}

		[Token(Token = "0x6001F6E")]
		[Address(RVA = "0xE8ACE8", Offset = "0xE8ACE8", VA = "0xE8ACE8")]
		public Asn1Object ReadObject()
		{
			return null;
		}

		[Token(Token = "0x6001F6F")]
		[Address(RVA = "0xE8B264", Offset = "0xE8B264", VA = "0xE8B264")]
		internal static int ReadTagNumber(Stream s, int tag)
		{
			return default(int);
		}

		[Token(Token = "0x6001F70")]
		[Address(RVA = "0xE8B37C", Offset = "0xE8B37C", VA = "0xE8B37C")]
		internal static int ReadLength(Stream s, int limit)
		{
			return default(int);
		}

		[Token(Token = "0x6001F71")]
		[Address(RVA = "0xE8BB74", Offset = "0xE8BB74", VA = "0xE8BB74")]
		internal static byte[] GetBuffer(DefiniteLengthInputStream defIn, byte[][] tmpBuffers)
		{
			return null;
		}

		[Token(Token = "0x6001F72")]
		[Address(RVA = "0xE8A738", Offset = "0xE8A738", VA = "0xE8A738")]
		internal static Asn1Object CreatePrimitiveDerObject(int tagNo, DefiniteLengthInputStream defIn, byte[][] tmpBuffers)
		{
			return null;
		}
	}
	[Token(Token = "0x2000372")]
	public abstract class Asn1Null : Asn1Object
	{
		[Token(Token = "0x6001F73")]
		[Address(RVA = "0xE8C45C", Offset = "0xE8C45C", VA = "0xE8C45C")]
		internal Asn1Null()
		{
		}

		[Token(Token = "0x6001F74")]
		[Address(RVA = "0xE8C46C", Offset = "0xE8C46C", VA = "0xE8C46C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000373")]
	public abstract class Asn1Object : Asn1Encodable
	{
		[Token(Token = "0x6001F75")]
		[Address(RVA = "0xE8C4B4", Offset = "0xE8C4B4", VA = "0xE8C4B4")]
		public static Asn1Object FromByteArray(byte[] data)
		{
			return null;
		}

		[Token(Token = "0x6001F76")]
		[Address(RVA = "0xE8C5CC", Offset = "0xE8C5CC", VA = "0xE8C5CC")]
		public static Asn1Object FromStream(Stream inStr)
		{
			return null;
		}

		[Token(Token = "0x6001F77")]
		[Address(RVA = "0xE8C6F4", Offset = "0xE8C6F4", VA = "0xE8C6F4", Slot = "5")]
		public sealed override Asn1Object ToAsn1Object()
		{
			return null;
		}

		[Token(Token = "0x6001F78")]
		internal abstract void Encode(DerOutputStream derOut);

		[Token(Token = "0x6001F79")]
		protected abstract bool Asn1Equals(Asn1Object asn1Object);

		[Token(Token = "0x6001F7A")]
		protected abstract int Asn1GetHashCode();

		[Token(Token = "0x6001F7B")]
		[Address(RVA = "0xE88FC8", Offset = "0xE88FC8", VA = "0xE88FC8")]
		internal bool CallAsn1Equals(Asn1Object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F7C")]
		[Address(RVA = "0xE88EA4", Offset = "0xE88EA4", VA = "0xE88EA4")]
		internal int CallAsn1GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001F7D")]
		[Address(RVA = "0xE8C464", Offset = "0xE8C464", VA = "0xE8C464")]
		protected Asn1Object()
		{
		}
	}
	[Token(Token = "0x2000374")]
	public abstract class Asn1OctetString : Asn1Object, Asn1OctetStringParser, IAsn1Convertible
	{
		[Token(Token = "0x400111E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal byte[] str;

		[Token(Token = "0x170003B3")]
		public Asn1OctetStringParser Parser
		{
			[Token(Token = "0x6001F83")]
			[Address(RVA = "0xE8D240", Offset = "0xE8D240", VA = "0xE8D240")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001F7E")]
		[Address(RVA = "0xE8C6F8", Offset = "0xE8C6F8", VA = "0xE8C6F8")]
		public static Asn1OctetString GetInstance(Asn1TaggedObject obj, bool isExplicit)
		{
			return null;
		}

		[Token(Token = "0x6001F7F")]
		[Address(RVA = "0xE8C7C8", Offset = "0xE8C7C8", VA = "0xE8C7C8")]
		public static Asn1OctetString GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x6001F80")]
		[Address(RVA = "0xE8CFE0", Offset = "0xE8CFE0", VA = "0xE8CFE0")]
		internal Asn1OctetString(byte[] str)
		{
		}

		[Token(Token = "0x6001F81")]
		[Address(RVA = "0xE8D07C", Offset = "0xE8D07C", VA = "0xE8D07C")]
		internal Asn1OctetString(Asn1Encodable obj)
		{
		}

		[Token(Token = "0x6001F82")]
		[Address(RVA = "0xE8D1D4", Offset = "0xE8D1D4", VA = "0xE8D1D4", Slot = "9")]
		public Stream GetOctetStream()
		{
			return null;
		}

		[Token(Token = "0x6001F84")]
		[Address(RVA = "0xE8D244", Offset = "0xE8D244", VA = "0xE8D244", Slot = "10")]
		public virtual byte[] GetOctets()
		{
			return null;
		}

		[Token(Token = "0x6001F85")]
		[Address(RVA = "0xE8D24C", Offset = "0xE8D24C", VA = "0xE8D24C", Slot = "8")]
		protected override int Asn1GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001F86")]
		[Address(RVA = "0xE8D26C", Offset = "0xE8D26C", VA = "0xE8D26C", Slot = "7")]
		protected override bool Asn1Equals(Asn1Object asn1Object)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F87")]
		[Address(RVA = "0xE8D340", Offset = "0xE8D340", VA = "0xE8D340", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000375")]
	public class Asn1OutputStream : DerOutputStream
	{
		[Token(Token = "0x6001F88")]
		[Address(RVA = "0xE88CB8", Offset = "0xE88CB8", VA = "0xE88CB8")]
		public Asn1OutputStream(Stream os)
		{
		}

		[Token(Token = "0x6001F89")]
		[Address(RVA = "0xE8D3C8", Offset = "0xE8D3C8", VA = "0xE8D3C8", Slot = "31")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x830880", Offset = "0x830880")]
		public override void WriteObject(object obj)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000376")]
	public class Asn1ParsingException : InvalidOperationException
	{
		[Token(Token = "0x6001F8A")]
		[Address(RVA = "0xE8D4F8", Offset = "0xE8D4F8", VA = "0xE8D4F8")]
		public Asn1ParsingException()
		{
		}

		[Token(Token = "0x6001F8B")]
		[Address(RVA = "0xE8D500", Offset = "0xE8D500", VA = "0xE8D500")]
		public Asn1ParsingException(string message)
		{
		}

		[Token(Token = "0x6001F8C")]
		[Address(RVA = "0xE8D508", Offset = "0xE8D508", VA = "0xE8D508")]
		public Asn1ParsingException(string message, Exception exception)
		{
		}
	}
	[Token(Token = "0x2000377")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x81F2E4", Offset = "0x81F2E4")]
	public abstract class Asn1Sequence : Asn1Object, IEnumerable
	{
		[Token(Token = "0x200068F")]
		private class Asn1SequenceParserImpl : Asn1SequenceParser, IAsn1Convertible
		{
			[Token(Token = "0x40025D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Asn1Sequence outer;

			[Token(Token = "0x40025D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly int max;

			[Token(Token = "0x40025D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private int index;

			[Token(Token = "0x6003548")]
			[Address(RVA = "0xE8D978", Offset = "0xE8D978", VA = "0xE8D978")]
			public Asn1SequenceParserImpl(Asn1Sequence outer)
			{
			}

			[Token(Token = "0x6003549")]
			[Address(RVA = "0xE8E220", Offset = "0xE8E220", VA = "0xE8E220", Slot = "4")]
			public IAsn1Convertible ReadObject()
			{
				return null;
			}

			[Token(Token = "0x600354A")]
			[Address(RVA = "0xE8E374", Offset = "0xE8E374", VA = "0xE8E374", Slot = "5")]
			public Asn1Object ToAsn1Object()
			{
				return null;
			}
		}

		[Token(Token = "0x400111F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IList seq;

		[Token(Token = "0x170003B4")]
		public virtual Asn1SequenceParser Parser
		{
			[Token(Token = "0x6001F92")]
			[Address(RVA = "0xE8D918", Offset = "0xE8D918", VA = "0xE8D918", Slot = "11")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003B5")]
		public virtual Asn1Encodable Item
		{
			[Token(Token = "0x6001F93")]
			[Address(RVA = "0xE8D9C4", Offset = "0xE8D9C4", VA = "0xE8D9C4", Slot = "12")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003B6")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x8366E8", Offset = "0x8366E8")]
		public int Size
		{
			[Token(Token = "0x6001F95")]
			[Address(RVA = "0xE8DAD0", Offset = "0xE8DAD0", VA = "0xE8DAD0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170003B7")]
		public virtual int Count
		{
			[Token(Token = "0x6001F96")]
			[Address(RVA = "0xE8DAE0", Offset = "0xE8DAE0", VA = "0xE8DAE0", Slot = "13")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001F8D")]
		[Address(RVA = "0xE8C92C", Offset = "0xE8C92C", VA = "0xE8C92C")]
		public static Asn1Sequence GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x6001F8E")]
		[Address(RVA = "0xE8D510", Offset = "0xE8D510", VA = "0xE8D510")]
		public static Asn1Sequence GetInstance(Asn1TaggedObject obj, bool explicitly)
		{
			return null;
		}

		[Token(Token = "0x6001F8F")]
		[Address(RVA = "0xE8D7D4", Offset = "0xE8D7D4", VA = "0xE8D7D4")]
		protected internal Asn1Sequence(int capacity)
		{
		}

		[Token(Token = "0x6001F90")]
		[Address(RVA = "0xE8D85C", Offset = "0xE8D85C", VA = "0xE8D85C", Slot = "10")]
		public virtual IEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001F91")]
		[Address(RVA = "0xE8D90C", Offset = "0xE8D90C", VA = "0xE8D90C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x8308B8", Offset = "0x8308B8")]
		public IEnumerator GetObjects()
		{
			return null;
		}

		[Token(Token = "0x6001F94")]
		[Address(RVA = "0xE8DAC4", Offset = "0xE8DAC4", VA = "0xE8DAC4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x8308F0", Offset = "0x8308F0")]
		public Asn1Encodable GetObjectAt(int index)
		{
			return null;
		}

		[Token(Token = "0x6001F97")]
		[Address(RVA = "0xE8DB94", Offset = "0xE8DB94", VA = "0xE8DB94", Slot = "8")]
		protected override int Asn1GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001F98")]
		[Address(RVA = "0xE8DE08", Offset = "0xE8DE08", VA = "0xE8DE08", Slot = "7")]
		protected override bool Asn1Equals(Asn1Object asn1Object)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F99")]
		[Address(RVA = "0xE8E034", Offset = "0xE8E034", VA = "0xE8E034")]
		private Asn1Encodable GetCurrent(IEnumerator e)
		{
			return null;
		}

		[Token(Token = "0x6001F9A")]
		[Address(RVA = "0xE8E150", Offset = "0xE8E150", VA = "0xE8E150")]
		protected internal void AddObject(Asn1Encodable obj)
		{
		}

		[Token(Token = "0x6001F9B")]
		[Address(RVA = "0xE8E214", Offset = "0xE8E214", VA = "0xE8E214", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000378")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x81F31C", Offset = "0x81F31C")]
	public abstract class Asn1Set : Asn1Object, IEnumerable
	{
		[Token(Token = "0x2000690")]
		private class Asn1SetParserImpl : Asn1SetParser, IAsn1Convertible
		{
			[Token(Token = "0x40025DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Asn1Set outer;

			[Token(Token = "0x40025DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly int max;

			[Token(Token = "0x40025DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private int index;

			[Token(Token = "0x600354B")]
			[Address(RVA = "0xE8F0CC", Offset = "0xE8F0CC", VA = "0xE8F0CC")]
			public Asn1SetParserImpl(Asn1Set outer)
			{
			}

			[Token(Token = "0x600354C")]
			[Address(RVA = "0xE8FD34", Offset = "0xE8FD34", VA = "0xE8FD34", Slot = "4")]
			public IAsn1Convertible ReadObject()
			{
				return null;
			}

			[Token(Token = "0x600354D")]
			[Address(RVA = "0xE8FE28", Offset = "0xE8FE28", VA = "0xE8FE28", Slot = "6")]
			public virtual Asn1Object ToAsn1Object()
			{
				return null;
			}
		}

		[Token(Token = "0x4001120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IList _set;

		[Token(Token = "0x170003B8")]
		public virtual Asn1Encodable Item
		{
			[Token(Token = "0x6001FA1")]
			[Address(RVA = "0xE8EDE4", Offset = "0xE8EDE4", VA = "0xE8EDE4", Slot = "11")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003B9")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x836720", Offset = "0x836720")]
		public int Size
		{
			[Token(Token = "0x6001FA3")]
			[Address(RVA = "0xE8EEF0", Offset = "0xE8EEF0", VA = "0xE8EEF0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170003BA")]
		public virtual int Count
		{
			[Token(Token = "0x6001FA4")]
			[Address(RVA = "0xE8EEFC", Offset = "0xE8EEFC", VA = "0xE8EEFC", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170003BB")]
		public Asn1SetParser Parser
		{
			[Token(Token = "0x6001FA6")]
			[Address(RVA = "0xE8E314", Offset = "0xE8E314", VA = "0xE8E314")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001F9C")]
		[Address(RVA = "0xE8E37C", Offset = "0xE8E37C", VA = "0xE8E37C")]
		public static Asn1Set GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x6001F9D")]
		[Address(RVA = "0xE8E70C", Offset = "0xE8E70C", VA = "0xE8E70C")]
		public static Asn1Set GetInstance(Asn1TaggedObject obj, bool explicitly)
		{
			return null;
		}

		[Token(Token = "0x6001F9E")]
		[Address(RVA = "0xE8ECA0", Offset = "0xE8ECA0", VA = "0xE8ECA0")]
		protected internal Asn1Set(int capacity)
		{
		}

		[Token(Token = "0x6001F9F")]
		[Address(RVA = "0xE8ED28", Offset = "0xE8ED28", VA = "0xE8ED28", Slot = "10")]
		public virtual IEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001FA0")]
		[Address(RVA = "0xE8EDD8", Offset = "0xE8EDD8", VA = "0xE8EDD8")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x830928", Offset = "0x830928")]
		public IEnumerator GetObjects()
		{
			return null;
		}

		[Token(Token = "0x6001FA2")]
		[Address(RVA = "0xE8EEE4", Offset = "0xE8EEE4", VA = "0xE8EEE4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x830960", Offset = "0x830960")]
		public Asn1Encodable GetObjectAt(int index)
		{
			return null;
		}

		[Token(Token = "0x6001FA5")]
		[Address(RVA = "0xE8EFB0", Offset = "0xE8EFB0", VA = "0xE8EFB0", Slot = "13")]
		public virtual Asn1Encodable[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x6001FA7")]
		[Address(RVA = "0xE8F114", Offset = "0xE8F114", VA = "0xE8F114", Slot = "8")]
		protected override int Asn1GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001FA8")]
		[Address(RVA = "0xE8F384", Offset = "0xE8F384", VA = "0xE8F384", Slot = "7")]
		protected override bool Asn1Equals(Asn1Object asn1Object)
		{
			return default(bool);
		}

		[Token(Token = "0x6001FA9")]
		[Address(RVA = "0xE8F5A8", Offset = "0xE8F5A8", VA = "0xE8F5A8")]
		private Asn1Encodable GetCurrent(IEnumerator e)
		{
			return null;
		}

		[Token(Token = "0x6001FAA")]
		[Address(RVA = "0xE8F6C4", Offset = "0xE8F6C4", VA = "0xE8F6C4")]
		private bool LessThanOrEqual(byte[] a, byte[] b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001FAB")]
		[Address(RVA = "0xE8F7B0", Offset = "0xE8F7B0", VA = "0xE8F7B0")]
		protected internal void Sort()
		{
		}

		[Token(Token = "0x6001FAC")]
		[Address(RVA = "0xE8FC64", Offset = "0xE8FC64", VA = "0xE8FC64")]
		protected internal void AddObject(Asn1Encodable obj)
		{
		}

		[Token(Token = "0x6001FAD")]
		[Address(RVA = "0xE8FD28", Offset = "0xE8FD28", VA = "0xE8FD28", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000379")]
	public abstract class Asn1TaggedObject : Asn1Object, Asn1TaggedObjectParser, IAsn1Convertible
	{
		[Token(Token = "0x4001121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int tagNo;

		[Token(Token = "0x4001122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal bool explicitly;

		[Token(Token = "0x4001123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal Asn1Encodable obj;

		[Token(Token = "0x170003BC")]
		public int TagNo
		{
			[Token(Token = "0x6001FB4")]
			[Address(RVA = "0xE90EF4", Offset = "0xE90EF4", VA = "0xE90EF4", Slot = "9")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001FAE")]
		[Address(RVA = "0xE90AB4", Offset = "0xE90AB4", VA = "0xE90AB4")]
		public static Asn1TaggedObject GetInstance(Asn1TaggedObject obj, bool explicitly)
		{
			return null;
		}

		[Token(Token = "0x6001FAF")]
		[Address(RVA = "0xE90B98", Offset = "0xE90B98", VA = "0xE90B98")]
		public static Asn1TaggedObject GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x6001FB0")]
		[Address(RVA = "0xE90CA8", Offset = "0xE90CA8", VA = "0xE90CA8")]
		protected Asn1TaggedObject(int tagNo, Asn1Encodable obj)
		{
		}

		[Token(Token = "0x6001FB1")]
		[Address(RVA = "0xE90CF0", Offset = "0xE90CF0", VA = "0xE90CF0")]
		protected Asn1TaggedObject(bool explicitly, int tagNo, Asn1Encodable obj)
		{
		}

		[Token(Token = "0x6001FB2")]
		[Address(RVA = "0xE90D8C", Offset = "0xE90D8C", VA = "0xE90D8C", Slot = "7")]
		protected override bool Asn1Equals(Asn1Object asn1Object)
		{
			return default(bool);
		}

		[Token(Token = "0x6001FB3")]
		[Address(RVA = "0xE90EA8", Offset = "0xE90EA8", VA = "0xE90EA8", Slot = "8")]
		protected override int Asn1GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001FB5")]
		[Address(RVA = "0xE90EFC", Offset = "0xE90EFC", VA = "0xE90EFC")]
		public bool IsExplicit()
		{
			return default(bool);
		}

		[Token(Token = "0x6001FB6")]
		[Address(RVA = "0xE90F04", Offset = "0xE90F04", VA = "0xE90F04")]
		public bool IsEmpty()
		{
			return default(bool);
		}

		[Token(Token = "0x6001FB7")]
		[Address(RVA = "0xE8C7B0", Offset = "0xE8C7B0", VA = "0xE8C7B0")]
		public Asn1Object GetObject()
		{
			return null;
		}

		[Token(Token = "0x6001FB8")]
		[Address(RVA = "0xE90F0C", Offset = "0xE90F0C", VA = "0xE90F0C", Slot = "10")]
		public IAsn1Convertible GetObjectParser(int tag, bool isExplicit)
		{
			return null;
		}

		[Token(Token = "0x6001FB9")]
		[Address(RVA = "0xE91070", Offset = "0xE91070", VA = "0xE91070", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200037A")]
	public class Asn1Tags
	{
		[Token(Token = "0x4001124")]
		public const int Boolean = 1;

		[Token(Token = "0x4001125")]
		public const int Integer = 2;

		[Token(Token = "0x4001126")]
		public const int BitString = 3;

		[Token(Token = "0x4001127")]
		public const int OctetString = 4;

		[Token(Token = "0x4001128")]
		public const int Null = 5;

		[Token(Token = "0x4001129")]
		public const int ObjectIdentifier = 6;

		[Token(Token = "0x400112A")]
		public const int External = 8;

		[Token(Token = "0x400112B")]
		public const int Enumerated = 10;

		[Token(Token = "0x400112C")]
		public const int Sequence = 16;

		[Token(Token = "0x400112D")]
		public const int SequenceOf = 16;

		[Token(Token = "0x400112E")]
		public const int Set = 17;

		[Token(Token = "0x400112F")]
		public const int SetOf = 17;

		[Token(Token = "0x4001130")]
		public const int NumericString = 18;

		[Token(Token = "0x4001131")]
		public const int PrintableString = 19;

		[Token(Token = "0x4001132")]
		public const int T61String = 20;

		[Token(Token = "0x4001133")]
		public const int VideotexString = 21;

		[Token(Token = "0x4001134")]
		public const int IA5String = 22;

		[Token(Token = "0x4001135")]
		public const int UtcTime = 23;

		[Token(Token = "0x4001136")]
		public const int GeneralizedTime = 24;

		[Token(Token = "0x4001137")]
		public const int GraphicString = 25;

		[Token(Token = "0x4001138")]
		public const int VisibleString = 26;

		[Token(Token = "0x4001139")]
		public const int GeneralString = 27;

		[Token(Token = "0x400113A")]
		public const int UniversalString = 28;

		[Token(Token = "0x400113B")]
		public const int BmpString = 30;

		[Token(Token = "0x400113C")]
		public const int Utf8String = 12;

		[Token(Token = "0x400113D")]
		public const int Constructed = 32;

		[Token(Token = "0x400113E")]
		public const int Application = 64;

		[Token(Token = "0x400113F")]
		public const int Tagged = 128;

		[Token(Token = "0x6001FBA")]
		[Address(RVA = "0xE911D4", Offset = "0xE911D4", VA = "0xE911D4")]
		public Asn1Tags()
		{
		}
	}
	[Token(Token = "0x200037B")]
	public class BerGenerator : Asn1Generator
	{
		[Token(Token = "0x4001140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool _tagged;

		[Token(Token = "0x4001141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool _isExplicit;

		[Token(Token = "0x4001142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int _tagNo;

		[Token(Token = "0x6001FBB")]
		[Address(RVA = "0xE913D0", Offset = "0xE913D0", VA = "0xE913D0")]
		protected BerGenerator(Stream outStream)
		{
		}

		[Token(Token = "0x6001FBC")]
		[Address(RVA = "0xE913FC", Offset = "0xE913FC", VA = "0xE913FC")]
		public BerGenerator(Stream outStream, int tagNo, bool isExplicit)
		{
		}

		[Token(Token = "0x6001FBD")]
		[Address(RVA = "0xE9144C", Offset = "0xE9144C", VA = "0xE9144C", Slot = "4")]
		public override void AddObject(Asn1Encodable obj)
		{
		}

		[Token(Token = "0x6001FBE")]
		[Address(RVA = "0xE914E0", Offset = "0xE914E0", VA = "0xE914E0", Slot = "5")]
		public override Stream GetRawOutputStream()
		{
			return null;
		}

		[Token(Token = "0x6001FBF")]
		[Address(RVA = "0xE914E8", Offset = "0xE914E8", VA = "0xE914E8", Slot = "6")]
		public override void Close()
		{
		}

		[Token(Token = "0x6001FC0")]
		[Address(RVA = "0xE91594", Offset = "0xE91594", VA = "0xE91594")]
		private void WriteHdr(int tag)
		{
		}

		[Token(Token = "0x6001FC1")]
		[Address(RVA = "0xE915E4", Offset = "0xE915E4", VA = "0xE915E4")]
		protected void WriteBerHeader(int tag)
		{
		}

		[Token(Token = "0x6001FC2")]
		[Address(RVA = "0xE9164C", Offset = "0xE9164C", VA = "0xE9164C")]
		protected void WriteBerBody(Stream contentStream)
		{
		}

		[Token(Token = "0x6001FC3")]
		[Address(RVA = "0xE914EC", Offset = "0xE914EC", VA = "0xE914EC")]
		protected void WriteBerEnd()
		{
		}
	}
	[Token(Token = "0x200037C")]
	public class BerOctetStringParser : Asn1OctetStringParser, IAsn1Convertible
	{
		[Token(Token = "0x4001143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Asn1StreamParser _parser;

		[Token(Token = "0x6001FC4")]
		[Address(RVA = "0xE8B86C", Offset = "0xE8B86C", VA = "0xE8B86C")]
		internal BerOctetStringParser(Asn1StreamParser parser)
		{
		}

		[Token(Token = "0x6001FC5")]
		[Address(RVA = "0xE91FDC", Offset = "0xE91FDC", VA = "0xE91FDC", Slot = "4")]
		public Stream GetOctetStream()
		{
			return null;
		}

		[Token(Token = "0x6001FC6")]
		[Address(RVA = "0xE8B898", Offset = "0xE8B898", VA = "0xE8B898", Slot = "5")]
		public Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
	[Token(Token = "0x200037D")]
	public class BerSequenceGenerator : BerGenerator
	{
		[Token(Token = "0x6001FC7")]
		[Address(RVA = "0xE92694", Offset = "0xE92694", VA = "0xE92694")]
		public BerSequenceGenerator(Stream outStream)
		{
		}

		[Token(Token = "0x6001FC8")]
		[Address(RVA = "0xE926C8", Offset = "0xE926C8", VA = "0xE926C8")]
		public BerSequenceGenerator(Stream outStream, int tagNo, bool isExplicit)
		{
		}
	}
	[Token(Token = "0x200037E")]
	public class BerSequenceParser : Asn1SequenceParser, IAsn1Convertible
	{
		[Token(Token = "0x4001144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Asn1StreamParser _parser;

		[Token(Token = "0x6001FC9")]
		[Address(RVA = "0xE8B9FC", Offset = "0xE8B9FC", VA = "0xE8B9FC")]
		internal BerSequenceParser(Asn1StreamParser parser)
		{
		}

		[Token(Token = "0x6001FCA")]
		[Address(RVA = "0xE92720", Offset = "0xE92720", VA = "0xE92720", Slot = "4")]
		public IAsn1Convertible ReadObject()
		{
			return null;
		}

		[Token(Token = "0x6001FCB")]
		[Address(RVA = "0xE8BA28", Offset = "0xE8BA28", VA = "0xE8BA28", Slot = "5")]
		public Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
	[Token(Token = "0x200037F")]
	public class BerSetGenerator : BerGenerator
	{
		[Token(Token = "0x6001FCC")]
		[Address(RVA = "0xE92E00", Offset = "0xE92E00", VA = "0xE92E00")]
		public BerSetGenerator(Stream outStream)
		{
		}

		[Token(Token = "0x6001FCD")]
		[Address(RVA = "0xE92E34", Offset = "0xE92E34", VA = "0xE92E34")]
		public BerSetGenerator(Stream outStream, int tagNo, bool isExplicit)
		{
		}
	}
	[Token(Token = "0x2000380")]
	public class BerSetParser : Asn1SetParser, IAsn1Convertible
	{
		[Token(Token = "0x4001145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Asn1StreamParser _parser;

		[Token(Token = "0x6001FCE")]
		[Address(RVA = "0xE8BAA0", Offset = "0xE8BAA0", VA = "0xE8BAA0")]
		internal BerSetParser(Asn1StreamParser parser)
		{
		}

		[Token(Token = "0x6001FCF")]
		[Address(RVA = "0xE92E8C", Offset = "0xE92E8C", VA = "0xE92E8C", Slot = "4")]
		public IAsn1Convertible ReadObject()
		{
			return null;
		}

		[Token(Token = "0x6001FD0")]
		[Address(RVA = "0xE8BACC", Offset = "0xE8BACC", VA = "0xE8BACC", Slot = "5")]
		public Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
	[Token(Token = "0x2000381")]
	public class BerTaggedObjectParser : Asn1TaggedObjectParser, IAsn1Convertible
	{
		[Token(Token = "0x4001146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool _constructed;

		[Token(Token = "0x4001147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int _tagNumber;

		[Token(Token = "0x4001148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Asn1StreamParser _parser;

		[Token(Token = "0x170003BD")]
		public bool IsConstructed
		{
			[Token(Token = "0x6001FD3")]
			[Address(RVA = "0xE934F8", Offset = "0xE934F8", VA = "0xE934F8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170003BE")]
		public int TagNo
		{
			[Token(Token = "0x6001FD4")]
			[Address(RVA = "0xE93500", Offset = "0xE93500", VA = "0xE93500", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001FD1")]
		[Address(RVA = "0xE93454", Offset = "0xE93454", VA = "0xE93454")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x830998", Offset = "0x830998")]
		internal BerTaggedObjectParser(int baseTag, int tagNumber, Stream contentStream)
		{
		}

		[Token(Token = "0x6001FD2")]
		[Address(RVA = "0xE8B70C", Offset = "0xE8B70C", VA = "0xE8B70C")]
		internal BerTaggedObjectParser(bool constructed, int tagNumber, Asn1StreamParser parser)
		{
		}

		[Token(Token = "0x6001FD5")]
		[Address(RVA = "0xE93508", Offset = "0xE93508", VA = "0xE93508", Slot = "5")]
		public IAsn1Convertible GetObjectParser(int tag, bool isExplicit)
		{
			return null;
		}

		[Token(Token = "0x6001FD6")]
		[Address(RVA = "0xE8B754", Offset = "0xE8B754", VA = "0xE8B754", Slot = "6")]
		public Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
	[Token(Token = "0x2000382")]
	public class BerApplicationSpecific : DerApplicationSpecific
	{
		[Token(Token = "0x6001FD7")]
		[Address(RVA = "0xE911DC", Offset = "0xE911DC", VA = "0xE911DC")]
		public BerApplicationSpecific(int tagNo, Asn1EncodableVector vec)
		{
		}
	}
	[Token(Token = "0x2000383")]
	public class BerApplicationSpecificParser : IAsn1ApplicationSpecificParser, IAsn1Convertible
	{
		[Token(Token = "0x4001149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly int tag;

		[Token(Token = "0x400114A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Asn1StreamParser parser;

		[Token(Token = "0x6001FD8")]
		[Address(RVA = "0xE8B648", Offset = "0xE8B648", VA = "0xE8B648")]
		internal BerApplicationSpecificParser(int tag, Asn1StreamParser parser)
		{
		}

		[Token(Token = "0x6001FD9")]
		[Address(RVA = "0xE913B0", Offset = "0xE913B0", VA = "0xE913B0", Slot = "4")]
		public IAsn1Convertible ReadObject()
		{
			return null;
		}

		[Token(Token = "0x6001FDA")]
		[Address(RVA = "0xE8B684", Offset = "0xE8B684", VA = "0xE8B684", Slot = "5")]
		public Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
	[Token(Token = "0x2000384")]
	public class BerOctetString : DerOctetString, IEnumerable
	{
		[Token(Token = "0x400114B")]
		private const int MaxLength = 1000;

		[Token(Token = "0x400114C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IEnumerable octs;

		[Token(Token = "0x6001FDB")]
		[Address(RVA = "0xE8CCBC", Offset = "0xE8CCBC", VA = "0xE8CCBC")]
		public static BerOctetString FromSequence(Asn1Sequence seq)
		{
			return null;
		}

		[Token(Token = "0x6001FDC")]
		[Address(RVA = "0xE91660", Offset = "0xE91660", VA = "0xE91660")]
		private static byte[] ToBytes(IEnumerable octs)
		{
			return null;
		}

		[Token(Token = "0x6001FDD")]
		[Address(RVA = "0xE91994", Offset = "0xE91994", VA = "0xE91994")]
		public BerOctetString(byte[] str)
		{
		}

		[Token(Token = "0x6001FDE")]
		[Address(RVA = "0xE8A430", Offset = "0xE8A430", VA = "0xE8A430")]
		public BerOctetString(IEnumerable octets)
		{
		}

		[Token(Token = "0x6001FDF")]
		[Address(RVA = "0xE9199C", Offset = "0xE9199C", VA = "0xE9199C")]
		public BerOctetString(Asn1Object obj)
		{
		}

		[Token(Token = "0x6001FE0")]
		[Address(RVA = "0xE919A4", Offset = "0xE919A4", VA = "0xE919A4")]
		public BerOctetString(Asn1Encodable obj)
		{
		}

		[Token(Token = "0x6001FE1")]
		[Address(RVA = "0xE919E8", Offset = "0xE919E8", VA = "0xE919E8", Slot = "10")]
		public override byte[] GetOctets()
		{
			return null;
		}

		[Token(Token = "0x6001FE2")]
		[Address(RVA = "0xE919F0", Offset = "0xE919F0", VA = "0xE919F0", Slot = "11")]
		public IEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001FE3")]
		[Address(RVA = "0xE91CB4", Offset = "0xE91CB4", VA = "0xE91CB4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x8309A8", Offset = "0x8309A8")]
		public IEnumerator GetObjects()
		{
			return null;
		}

		[Token(Token = "0x6001FE4")]
		[Address(RVA = "0xE91AF4", Offset = "0xE91AF4", VA = "0xE91AF4")]
		private IList GenerateOcts()
		{
			return null;
		}

		[Token(Token = "0x6001FE5")]
		[Address(RVA = "0xE91CB8", Offset = "0xE91CB8", VA = "0xE91CB8", Slot = "6")]
		internal override void Encode(DerOutputStream derOut)
		{
		}
	}
	[Token(Token = "0x2000385")]
	public class BerOutputStream : DerOutputStream
	{
		[Token(Token = "0x6001FE6")]
		[Address(RVA = "0xE914D8", Offset = "0xE914D8", VA = "0xE914D8")]
		public BerOutputStream(Stream os)
		{
		}

		[Token(Token = "0x6001FE7")]
		[Address(RVA = "0xE92080", Offset = "0xE92080", VA = "0xE92080", Slot = "31")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x8309E0", Offset = "0x8309E0")]
		public override void WriteObject(object obj)
		{
		}
	}
	[Token(Token = "0x2000386")]
	public class BerSequence : DerSequence
	{
		[Token(Token = "0x400114D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public new static readonly BerSequence Empty;

		[Token(Token = "0x6001FE8")]
		[Address(RVA = "0xE9042C", Offset = "0xE9042C", VA = "0xE9042C")]
		public new static BerSequence FromVector(Asn1EncodableVector v)
		{
			return null;
		}

		[Token(Token = "0x6001FE9")]
		[Address(RVA = "0xE92228", Offset = "0xE92228", VA = "0xE92228")]
		public BerSequence()
		{
		}

		[Token(Token = "0x6001FEA")]
		[Address(RVA = "0xE8D75C", Offset = "0xE8D75C", VA = "0xE8D75C")]
		public BerSequence(Asn1Encodable obj)
		{
		}

		[Token(Token = "0x6001FEB")]
		[Address(RVA = "0xE92290", Offset = "0xE92290", VA = "0xE92290")]
		public BerSequence(params Asn1Encodable[] v)
		{
		}

		[Token(Token = "0x6001FEC")]
		[Address(RVA = "0xE921B0", Offset = "0xE921B0", VA = "0xE921B0")]
		public BerSequence(Asn1EncodableVector v)
		{
		}

		[Token(Token = "0x6001FED")]
		[Address(RVA = "0xE92308", Offset = "0xE92308", VA = "0xE92308", Slot = "6")]
		internal override void Encode(DerOutputStream derOut)
		{
		}
	}
	[Token(Token = "0x2000387")]
	public class BerSet : DerSet
	{
		[Token(Token = "0x400114E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public new static readonly BerSet Empty;

		[Token(Token = "0x6001FEF")]
		[Address(RVA = "0xE92740", Offset = "0xE92740", VA = "0xE92740")]
		public new static BerSet FromVector(Asn1EncodableVector v)
		{
			return null;
		}

		[Token(Token = "0x6001FF0")]
		[Address(RVA = "0xE92860", Offset = "0xE92860", VA = "0xE92860")]
		internal new static BerSet FromVector(Asn1EncodableVector v, bool needsSorting)
		{
			return null;
		}

		[Token(Token = "0x6001FF1")]
		[Address(RVA = "0xE92994", Offset = "0xE92994", VA = "0xE92994")]
		public BerSet()
		{
		}

		[Token(Token = "0x6001FF2")]
		[Address(RVA = "0xE929FC", Offset = "0xE929FC", VA = "0xE929FC")]
		public BerSet(Asn1Encodable obj)
		{
		}

		[Token(Token = "0x6001FF3")]
		[Address(RVA = "0xE927E4", Offset = "0xE927E4", VA = "0xE927E4")]
		public BerSet(Asn1EncodableVector v)
		{
		}

		[Token(Token = "0x6001FF4")]
		[Address(RVA = "0xE92914", Offset = "0xE92914", VA = "0xE92914")]
		internal BerSet(Asn1EncodableVector v, bool needsSorting)
		{
		}

		[Token(Token = "0x6001FF5")]
		[Address(RVA = "0xE92A74", Offset = "0xE92A74", VA = "0xE92A74", Slot = "6")]
		internal override void Encode(DerOutputStream derOut)
		{
		}
	}
	[Token(Token = "0x2000388")]
	public class BerTaggedObject : DerTaggedObject
	{
		[Token(Token = "0x6001FF7")]
		[Address(RVA = "0xE92EAC", Offset = "0xE92EAC", VA = "0xE92EAC")]
		public BerTaggedObject(int tagNo, Asn1Encodable obj)
		{
		}

		[Token(Token = "0x6001FF8")]
		[Address(RVA = "0xE904D0", Offset = "0xE904D0", VA = "0xE904D0")]
		public BerTaggedObject(bool explicitly, int tagNo, Asn1Encodable obj)
		{
		}

		[Token(Token = "0x6001FF9")]
		[Address(RVA = "0xE92EB4", Offset = "0xE92EB4", VA = "0xE92EB4")]
		public BerTaggedObject(int tagNo)
		{
		}

		[Token(Token = "0x6001FFA")]
		[Address(RVA = "0xE92F3C", Offset = "0xE92F3C", VA = "0xE92F3C", Slot = "6")]
		internal override void Encode(DerOutputStream derOut)
		{
		}
	}
	[Token(Token = "0x2000389")]
	internal class ConstructedOctetStream : BaseInputStream
	{
		[Token(Token = "0x400114F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly Asn1StreamParser _parser;

		[Token(Token = "0x4001150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool _first;

		[Token(Token = "0x4001151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Stream _currentStream;

		[Token(Token = "0x6001FFB")]
		[Address(RVA = "0xE9204C", Offset = "0xE9204C", VA = "0xE9204C")]
		internal ConstructedOctetStream(Asn1StreamParser parser)
		{
		}

		[Token(Token = "0x6001FFC")]
		[Address(RVA = "0xE935D4", Offset = "0xE935D4", VA = "0xE935D4", Slot = "27")]
		public override int Read(byte[] buffer, int offset, int count)
		{
			return default(int);
		}

		[Token(Token = "0x6001FFD")]
		[Address(RVA = "0xE93830", Offset = "0xE93830", VA = "0xE93830", Slot = "28")]
		public override int ReadByte()
		{
			return default(int);
		}
	}
	[Token(Token = "0x200038A")]
	public class DerExternal : Asn1Object
	{
		[Token(Token = "0x4001152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private DerObjectIdentifier directReference;

		[Token(Token = "0x4001153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private DerInteger indirectReference;

		[Token(Token = "0x4001154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Asn1Object dataValueDescriptor;

		[Token(Token = "0x4001155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int encoding;

		[Token(Token = "0x4001156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Asn1Object externalContent;

		[Token(Token = "0x170003BF")]
		public Asn1Object DataValueDescriptor
		{
			[Token(Token = "0x6002004")]
			[Address(RVA = "0xE99400", Offset = "0xE99400", VA = "0xE99400")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002005")]
			[Address(RVA = "0xE99408", Offset = "0xE99408", VA = "0xE99408")]
			set
			{
			}
		}

		[Token(Token = "0x170003C0")]
		public DerObjectIdentifier DirectReference
		{
			[Token(Token = "0x6002006")]
			[Address(RVA = "0xE99410", Offset = "0xE99410", VA = "0xE99410")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002007")]
			[Address(RVA = "0xE99418", Offset = "0xE99418", VA = "0xE99418")]
			set
			{
			}
		}

		[Token(Token = "0x170003C1")]
		public int Encoding
		{
			[Token(Token = "0x6002008")]
			[Address(RVA = "0xE99420", Offset = "0xE99420", VA = "0xE99420")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002009")]
			[Address(RVA = "0xE98F74", Offset = "0xE98F74", VA = "0xE98F74")]
			set
			{
			}
		}

		[Token(Token = "0x170003C2")]
		public Asn1Object ExternalContent
		{
			[Token(Token = "0x600200A")]
			[Address(RVA = "0xE99428", Offset = "0xE99428", VA = "0xE99428")]
			get
			{
				return null;
			}
			[Token(Token = "0x600200B")]
			[Address(RVA = "0xE99430", Offset = "0xE99430", VA = "0xE99430")]
			set
			{
			}
		}

		[Token(Token = "0x170003C3")]
		public DerInteger IndirectReference
		{
			[Token(Token = "0x600200C")]
			[Address(RVA = "0xE99438", Offset = "0xE99438", VA = "0xE99438")]
			get
			{
				return null;
			}
			[Token(Token = "0x600200D")]
			[Address(RVA = "0xE99440", Offset = "0xE99440", VA = "0xE99440")]
			set
			{
			}
		}

		[Token(Token = "0x6001FFE")]
		[Address(RVA = "0xE8A46C", Offset = "0xE8A46C", VA = "0xE8A46C")]
		public DerExternal(Asn1EncodableVector vector)
		{
		}

		[Token(Token = "0x6001FFF")]
		[Address(RVA = "0xE99040", Offset = "0xE99040", VA = "0xE99040")]
		public DerExternal(DerObjectIdentifier directReference, DerInteger indirectReference, Asn1Object dataValueDescriptor, DerTaggedObject externalData)
		{
		}

		[Token(Token = "0x6002000")]
		[Address(RVA = "0xE990AC", Offset = "0xE990AC", VA = "0xE990AC")]
		public DerExternal(DerObjectIdentifier directReference, DerInteger indirectReference, Asn1Object dataValueDescriptor, int encoding, Asn1Object externalData)
		{
		}

		[Token(Token = "0x6002001")]
		[Address(RVA = "0xE99124", Offset = "0xE99124", VA = "0xE99124", Slot = "6")]
		internal override void Encode(DerOutputStream derOut)
		{
		}

		[Token(Token = "0x6002002")]
		[Address(RVA = "0xE99274", Offset = "0xE99274", VA = "0xE99274", Slot = "8")]
		protected override int Asn1GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6002003")]
		[Address(RVA = "0xE992FC", Offset = "0xE992FC", VA = "0xE992FC", Slot = "7")]
		protected override bool Asn1Equals(Asn1Object asn1Object)
		{
			return default(bool);
		}

		[Token(Token = "0x600200E")]
		[Address(RVA = "0xE98EB0", Offset = "0xE98EB0", VA = "0xE98EB0")]
		private static Asn1Object GetObjFromVector(Asn1EncodableVector v, int index)
		{
			return null;
		}

		[Token(Token = "0x600200F")]
		[Address(RVA = "0xE99218", Offset = "0xE99218", VA = "0xE99218")]
		private static void WriteEncodable(MemoryStream ms, Asn1Encodable e)
		{
		}
	}
	[Token(Token = "0x200038B")]
	public class DerExternalParser : Asn1Encodable
	{
		[Token(Token = "0x4001157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Asn1StreamParser _parser;

		[Token(Token = "0x6002010")]
		[Address(RVA = "0xE8BB48", Offset = "0xE8BB48", VA = "0xE8BB48")]
		public DerExternalParser(Asn1StreamParser parser)
		{
		}

		[Token(Token = "0x6002011")]
		[Address(RVA = "0xE99448", Offset = "0xE99448", VA = "0xE99448")]
		public IAsn1Convertible ReadObject()
		{
			return null;
		}

		[Token(Token = "0x6002012")]
		[Address(RVA = "0xE99468", Offset = "0xE99468", VA = "0xE99468", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
	[Token(Token = "0x200038C")]
	public abstract class DerGenerator : Asn1Generator
	{
		[Token(Token = "0x4001158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool _tagged;

		[Token(Token = "0x4001159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool _isExplicit;

		[Token(Token = "0x400115A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int _tagNo;

		[Token(Token = "0x6002013")]
		[Address(RVA = "0xE9A904", Offset = "0xE9A904", VA = "0xE9A904")]
		protected DerGenerator(Stream outStream)
		{
		}

		[Token(Token = "0x6002014")]
		[Address(RVA = "0xE9A930", Offset = "0xE9A930", VA = "0xE9A930")]
		protected DerGenerator(Stream outStream, int tagNo, bool isExplicit)
		{
		}

		[Token(Token = "0x6002015")]
		[Address(RVA = "0xE9A980", Offset = "0xE9A980", VA = "0xE9A980")]
		private static void WriteLength(Stream outStr, int length)
		{
		}

		[Token(Token = "0x6002016")]
		[Address(RVA = "0xE9AA3C", Offset = "0xE9AA3C", VA = "0xE9AA3C")]
		internal static void WriteDerEncoded(Stream outStream, int tag, byte[] bytes)
		{
		}

		[Token(Token = "0x6002017")]
		[Address(RVA = "0xE9AAA0", Offset = "0xE9AAA0", VA = "0xE9AAA0")]
		internal void WriteDerEncoded(int tag, byte[] bytes)
		{
		}

		[Token(Token = "0x6002018")]
		[Address(RVA = "0xE9AB90", Offset = "0xE9AB90", VA = "0xE9AB90")]
		internal static void WriteDerEncoded(Stream outStr, int tag, Stream inStr)
		{
		}
	}
	[Token(Token = "0x200038D")]
	public class DerOctetStringParser : Asn1OctetStringParser, IAsn1Convertible
	{
		[Token(Token = "0x400115B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly DefiniteLengthInputStream stream;

		[Token(Token = "0x6002019")]
		[Address(RVA = "0xE17474", Offset = "0xE17474", VA = "0xE17474")]
		internal DerOctetStringParser(DefiniteLengthInputStream stream)
		{
		}

		[Token(Token = "0x600201A")]
		[Address(RVA = "0xE174A0", Offset = "0xE174A0", VA = "0xE174A0", Slot = "4")]
		public Stream GetOctetStream()
		{
			return null;
		}

		[Token(Token = "0x600201B")]
		[Address(RVA = "0xE174A8", Offset = "0xE174A8", VA = "0xE174A8", Slot = "5")]
		public Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
	[Token(Token = "0x200038E")]
	public class DerSequenceParser : Asn1SequenceParser, IAsn1Convertible
	{
		[Token(Token = "0x400115C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Asn1StreamParser _parser;

		[Token(Token = "0x600201C")]
		[Address(RVA = "0xE18738", Offset = "0xE18738", VA = "0xE18738")]
		internal DerSequenceParser(Asn1StreamParser parser)
		{
		}

		[Token(Token = "0x600201D")]
		[Address(RVA = "0xE18764", Offset = "0xE18764", VA = "0xE18764", Slot = "4")]
		public IAsn1Convertible ReadObject()
		{
			return null;
		}

		[Token(Token = "0x600201E")]
		[Address(RVA = "0xE18784", Offset = "0xE18784", VA = "0xE18784", Slot = "5")]
		public Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
	[Token(Token = "0x200038F")]
	public class DerSetGenerator : DerGenerator
	{
		[Token(Token = "0x400115D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly MemoryStream _bOut;

		[Token(Token = "0x600201F")]
		[Address(RVA = "0xE19020", Offset = "0xE19020", VA = "0xE19020")]
		public DerSetGenerator(Stream outStream)
		{
		}

		[Token(Token = "0x6002020")]
		[Address(RVA = "0xE19098", Offset = "0xE19098", VA = "0xE19098")]
		public DerSetGenerator(Stream outStream, int tagNo, bool isExplicit)
		{
		}

		[Token(Token = "0x6002021")]
		[Address(RVA = "0xE19128", Offset = "0xE19128", VA = "0xE19128", Slot = "4")]
		public override void AddObject(Asn1Encodable obj)
		{
		}

		[Token(Token = "0x6002022")]
		[Address(RVA = "0xE191B4", Offset = "0xE191B4", VA = "0xE191B4", Slot = "5")]
		public override Stream GetRawOutputStream()
		{
			return null;
		}

		[Token(Token = "0x6002023")]
		[Address(RVA = "0xE191BC", Offset = "0xE191BC", VA = "0xE191BC", Slot = "6")]
		public override void Close()
		{
		}
	}
	[Token(Token = "0x2000390")]
	public class DerSetParser : Asn1SetParser, IAsn1Convertible
	{
		[Token(Token = "0x400115E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Asn1StreamParser _parser;

		[Token(Token = "0x6002024")]
		[Address(RVA = "0xE19204", Offset = "0xE19204", VA = "0xE19204")]
		internal DerSetParser(Asn1StreamParser parser)
		{
		}

		[Token(Token = "0x6002025")]
		[Address(RVA = "0xE19230", Offset = "0xE19230", VA = "0xE19230", Slot = "4")]
		public IAsn1Convertible ReadObject()
		{
			return null;
		}

		[Token(Token = "0x6002026")]
		[Address(RVA = "0xE19250", Offset = "0xE19250", VA = "0xE19250", Slot = "5")]
		public Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
	[Token(Token = "0x2000391")]
	internal class DefiniteLengthInputStream : LimitedInputStream
	{
		[Token(Token = "0x400115F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly byte[] EmptyBytes;

		[Token(Token = "0x4001160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private readonly int _originalLength;

		[Token(Token = "0x4001161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int _remaining;

		[Token(Token = "0x170003C4")]
		internal int Remaining
		{
			[Token(Token = "0x6002028")]
			[Address(RVA = "0xE96A58", Offset = "0xE96A58", VA = "0xE96A58")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6002027")]
		[Address(RVA = "0xE89EA8", Offset = "0xE89EA8", VA = "0xE89EA8")]
		internal DefiniteLengthInputStream(Stream inStream, int length)
		{
		}

		[Token(Token = "0x6002029")]
		[Address(RVA = "0xE96A60", Offset = "0xE96A60", VA = "0xE96A60", Slot = "28")]
		public override int ReadByte()
		{
			return default(int);
		}

		[Token(Token = "0x600202A")]
		[Address(RVA = "0xE96C44", Offset = "0xE96C44", VA = "0xE96C44", Slot = "27")]
		public override int Read(byte[] buf, int off, int len)
		{
			return default(int);
		}

		[Token(Token = "0x600202B")]
		[Address(RVA = "0xE8BC88", Offset = "0xE8BC88", VA = "0xE8BC88")]
		internal void ReadAllIntoByteArray(byte[] buf)
		{
		}

		[Token(Token = "0x600202C")]
		[Address(RVA = "0xE89F84", Offset = "0xE89F84", VA = "0xE89F84")]
		internal byte[] ToArray()
		{
			return null;
		}
	}
	[Token(Token = "0x2000392")]
	public class DerApplicationSpecific : Asn1Object
	{
		[Token(Token = "0x4001162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly bool isConstructed;

		[Token(Token = "0x4001163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private readonly int tag;

		[Token(Token = "0x4001164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly byte[] octets;

		[Token(Token = "0x170003C5")]
		public int ApplicationTag
		{
			[Token(Token = "0x6002036")]
			[Address(RVA = "0xE971D0", Offset = "0xE971D0", VA = "0xE971D0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600202E")]
		[Address(RVA = "0xE8A194", Offset = "0xE8A194", VA = "0xE8A194")]
		internal DerApplicationSpecific(bool isConstructed, int tag, byte[] octets)
		{
		}

		[Token(Token = "0x600202F")]
		[Address(RVA = "0xE96EDC", Offset = "0xE96EDC", VA = "0xE96EDC")]
		public DerApplicationSpecific(int tag, byte[] octets)
		{
		}

		[Token(Token = "0x6002030")]
		[Address(RVA = "0xE96F1C", Offset = "0xE96F1C", VA = "0xE96F1C")]
		public DerApplicationSpecific(int tag, Asn1Encodable obj)
		{
		}

		[Token(Token = "0x6002031")]
		[Address(RVA = "0xE96F2C", Offset = "0xE96F2C", VA = "0xE96F2C")]
		public DerApplicationSpecific(bool isExplicit, int tag, Asn1Encodable obj)
		{
		}

		[Token(Token = "0x6002032")]
		[Address(RVA = "0xE911E0", Offset = "0xE911E0", VA = "0xE911E0")]
		public DerApplicationSpecific(int tagNo, Asn1EncodableVector vec)
		{
		}

		[Token(Token = "0x6002033")]
		[Address(RVA = "0xE970B4", Offset = "0xE970B4", VA = "0xE970B4")]
		private int GetLengthOfHeader(byte[] data)
		{
			return default(int);
		}

		[Token(Token = "0x6002034")]
		[Address(RVA = "0xE971C0", Offset = "0xE971C0", VA = "0xE971C0")]
		public bool IsConstructed()
		{
			return default(bool);
		}

		[Token(Token = "0x6002035")]
		[Address(RVA = "0xE971C8", Offset = "0xE971C8", VA = "0xE971C8")]
		public byte[] GetContents()
		{
			return null;
		}

		[Token(Token = "0x6002037")]
		[Address(RVA = "0xE971D8", Offset = "0xE971D8", VA = "0xE971D8")]
		public Asn1Object GetObject()
		{
			return null;
		}

		[Token(Token = "0x6002038")]
		[Address(RVA = "0xE971E0", Offset = "0xE971E0", VA = "0xE971E0")]
		public Asn1Object GetObject(int derTagNo)
		{
			return null;
		}

		[Token(Token = "0x6002039")]
		[Address(RVA = "0xE97410", Offset = "0xE97410", VA = "0xE97410", Slot = "6")]
		internal override void Encode(DerOutputStream derOut)
		{
		}

		[Token(Token = "0x600203A")]
		[Address(RVA = "0xE9744C", Offset = "0xE9744C", VA = "0xE9744C", Slot = "7")]
		protected override bool Asn1Equals(Asn1Object asn1Object)
		{
			return default(bool);
		}

		[Token(Token = "0x600203B")]
		[Address(RVA = "0xE9752C", Offset = "0xE9752C", VA = "0xE9752C", Slot = "8")]
		protected override int Asn1GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600203C")]
		[Address(RVA = "0xE972C4", Offset = "0xE972C4", VA = "0xE972C4")]
		private byte[] ReplaceTagNumber(int newTag, byte[] input)
		{
			return null;
		}
	}
	[Token(Token = "0x2000393")]
	public class DerBmpString : DerStringBase
	{
		[Token(Token = "0x4001165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly string str;

		[Token(Token = "0x600203D")]
		[Address(RVA = "0xE97EB4", Offset = "0xE97EB4", VA = "0xE97EB4")]
		public static DerBmpString GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x600203E")]
		[Address(RVA = "0xE97FB4", Offset = "0xE97FB4", VA = "0xE97FB4")]
		public static DerBmpString GetInstance(Asn1TaggedObject obj, bool isExplicit)
		{
			return null;
		}

		[Token(Token = "0x600203F")]
		[Address(RVA = "0xE8C2B8", Offset = "0xE8C2B8", VA = "0xE8C2B8")]
		public DerBmpString(byte[] str)
		{
		}

		[Token(Token = "0x6002040")]
		[Address(RVA = "0xE9809C", Offset = "0xE9809C", VA = "0xE9809C")]
		public DerBmpString(string str)
		{
		}

		[Token(Token = "0x6002041")]
		[Address(RVA = "0xE98138", Offset = "0xE98138", VA = "0xE98138", Slot = "10")]
		public override string GetString()
		{
			return null;
		}

		[Token(Token = "0x6002042")]
		[Address(RVA = "0xE98140", Offset = "0xE98140", VA = "0xE98140", Slot = "7")]
		protected override bool Asn1Equals(Asn1Object asn1Object)
		{
			return default(bool);
		}

		[Token(Token = "0x6002043")]
		[Address(RVA = "0xE981F4", Offset = "0xE981F4", VA = "0xE981F4", Slot = "6")]
		internal override void Encode(DerOutputStream derOut)
		{
		}
	}
	[Token(Token = "0x2000394")]
	public class DerBitString : DerStringBase
	{
		[Token(Token = "0x4001166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly char[] table;

		[Token(Token = "0x4001167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly byte[] data;

		[Token(Token = "0x4001168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly int padBits;

		[Token(Token = "0x170003C6")]
		public int PadBits
		{
			[Token(Token = "0x600204D")]
			[Address(RVA = "0xE97A7C", Offset = "0xE97A7C", VA = "0xE97A7C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170003C7")]
		public int IntValue
		{
			[Token(Token = "0x600204E")]
			[Address(RVA = "0xE97A84", Offset = "0xE97A84", VA = "0xE97A84")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6002044")]
		[Address(RVA = "0xE97598", Offset = "0xE97598", VA = "0xE97598")]
		internal static int GetPadBits(int bitString)
		{
			return default(int);
		}

		[Token(Token = "0x6002045")]
		[Address(RVA = "0xE975FC", Offset = "0xE975FC", VA = "0xE975FC")]
		internal static byte[] GetBytes(int bitString)
		{
			return null;
		}

		[Token(Token = "0x6002046")]
		[Address(RVA = "0xE976C8", Offset = "0xE976C8", VA = "0xE976C8")]
		public static DerBitString GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x6002047")]
		[Address(RVA = "0xE977C8", Offset = "0xE977C8", VA = "0xE977C8")]
		public static DerBitString GetInstance(Asn1TaggedObject obj, bool isExplicit)
		{
			return null;
		}

		[Token(Token = "0x6002048")]
		[Address(RVA = "0xE97938", Offset = "0xE97938", VA = "0xE97938")]
		internal DerBitString(byte data, int padBits)
		{
		}

		[Token(Token = "0x6002049")]
		[Address(RVA = "0xE979D0", Offset = "0xE979D0", VA = "0xE979D0")]
		public DerBitString(byte[] data, int padBits)
		{
		}

		[Token(Token = "0x600204A")]
		[Address(RVA = "0xE97A0C", Offset = "0xE97A0C", VA = "0xE97A0C")]
		public DerBitString(byte[] data)
		{
		}

		[Token(Token = "0x600204B")]
		[Address(RVA = "0xE97A38", Offset = "0xE97A38", VA = "0xE97A38")]
		public DerBitString(Asn1Encodable obj)
		{
		}

		[Token(Token = "0x600204C")]
		[Address(RVA = "0xE97A74", Offset = "0xE97A74", VA = "0xE97A74")]
		public byte[] GetBytes()
		{
			return null;
		}

		[Token(Token = "0x600204F")]
		[Address(RVA = "0xE97AFC", Offset = "0xE97AFC", VA = "0xE97AFC", Slot = "6")]
		internal override void Encode(DerOutputStream derOut)
		{
		}

		[Token(Token = "0x6002050")]
		[Address(RVA = "0xE97BC0", Offset = "0xE97BC0", VA = "0xE97BC0", Slot = "8")]
		protected override int Asn1GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6002051")]
		[Address(RVA = "0xE97C08", Offset = "0xE97C08", VA = "0xE97C08", Slot = "7")]
		protected override bool Asn1Equals(Asn1Object asn1Object)
		{
			return default(bool);
		}

		[Token(Token = "0x6002052")]
		[Address(RVA = "0xE97CC8", Offset = "0xE97CC8", VA = "0xE97CC8", Slot = "10")]
		public override string GetString()
		{
			return null;
		}

		[Token(Token = "0x6002053")]
		[Address(RVA = "0xE8C1BC", Offset = "0xE8C1BC", VA = "0xE8C1BC")]
		internal static DerBitString FromAsn1Octets(byte[] octets)
		{
			return null;
		}
	}
	[Token(Token = "0x2000395")]
	public class DerBoolean : Asn1Object
	{
		[Token(Token = "0x4001169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly byte value;

		[Token(Token = "0x400116A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly DerBoolean False;

		[Token(Token = "0x400116B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly DerBoolean True;

		[Token(Token = "0x170003C8")]
		public bool IsTrue
		{
			[Token(Token = "0x600205A")]
			[Address(RVA = "0xE98700", Offset = "0xE98700", VA = "0xE98700")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6002055")]
		[Address(RVA = "0xE9830C", Offset = "0xE9830C", VA = "0xE9830C")]
		public static DerBoolean GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x6002056")]
		[Address(RVA = "0xE9840C", Offset = "0xE9840C", VA = "0xE9840C")]
		public static DerBoolean GetInstance(bool value)
		{
			return null;
		}

		[Token(Token = "0x6002057")]
		[Address(RVA = "0xE9849C", Offset = "0xE9849C", VA = "0xE9849C")]
		public static DerBoolean GetInstance(Asn1TaggedObject obj, bool isExplicit)
		{
			return null;
		}

		[Token(Token = "0x6002058")]
		[Address(RVA = "0xE9860C", Offset = "0xE9860C", VA = "0xE9860C")]
		public DerBoolean(byte[] val)
		{
		}

		[Token(Token = "0x6002059")]
		[Address(RVA = "0xE986C8", Offset = "0xE986C8", VA = "0xE986C8")]
		private DerBoolean(bool value)
		{
		}

		[Token(Token = "0x600205B")]
		[Address(RVA = "0xE98710", Offset = "0xE98710", VA = "0xE98710", Slot = "6")]
		internal override void Encode(DerOutputStream derOut)
		{
		}

		[Token(Token = "0x600205C")]
		[Address(RVA = "0xE987A8", Offset = "0xE987A8", VA = "0xE987A8", Slot = "7")]
		protected override bool Asn1Equals(Asn1Object asn1Object)
		{
			return default(bool);
		}

		[Token(Token = "0x600205D")]
		[Address(RVA = "0xE9885C", Offset = "0xE9885C", VA = "0xE9885C", Slot = "8")]
		protected override int Asn1GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600205E")]
		[Address(RVA = "0xE98890", Offset = "0xE98890", VA = "0xE98890", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600205F")]
		[Address(RVA = "0xE8BE94", Offset = "0xE8BE94", VA = "0xE8BE94")]
		internal static DerBoolean FromOctetString(byte[] value)
		{
			return null;
		}
	}
	[Token(Token = "0x2000396")]
	public class DerEnumerated : Asn1Object
	{
		[Token(Token = "0x400116C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly byte[] bytes;

		[Token(Token = "0x400116D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly DerEnumerated[] cache;

		[Token(Token = "0x170003C9")]
		public BigInteger Value
		{
			[Token(Token = "0x6002066")]
			[Address(RVA = "0xE98D00", Offset = "0xE98D00", VA = "0xE98D00")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002061")]
		[Address(RVA = "0xE9898C", Offset = "0xE9898C", VA = "0xE9898C")]
		public static DerEnumerated GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x6002062")]
		[Address(RVA = "0xE98A8C", Offset = "0xE98A8C", VA = "0xE98A8C")]
		public static DerEnumerated GetInstance(Asn1TaggedObject obj, bool isExplicit)
		{
			return null;
		}

		[Token(Token = "0x6002063")]
		[Address(RVA = "0xE98BFC", Offset = "0xE98BFC", VA = "0xE98BFC")]
		public DerEnumerated(int val)
		{
		}

		[Token(Token = "0x6002064")]
		[Address(RVA = "0xE98C94", Offset = "0xE98C94", VA = "0xE98C94")]
		public DerEnumerated(BigInteger val)
		{
		}

		[Token(Token = "0x6002065")]
		[Address(RVA = "0xE98CD4", Offset = "0xE98CD4", VA = "0xE98CD4")]
		public DerEnumerated(byte[] bytes)
		{
		}

		[Token(Token = "0x6002067")]
		[Address(RVA = "0xE98D68", Offset = "0xE98D68", VA = "0xE98D68", Slot = "6")]
		internal override void Encode(DerOutputStream derOut)
		{
		}

		[Token(Token = "0x6002068")]
		[Address(RVA = "0xE98D90", Offset = "0xE98D90", VA = "0xE98D90", Slot = "7")]
		protected override bool Asn1Equals(Asn1Object asn1Object)
		{
			return default(bool);
		}

		[Token(Token = "0x6002069")]
		[Address(RVA = "0xE98E40", Offset = "0xE98E40", VA = "0xE98E40", Slot = "8")]
		protected override int Asn1GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600206A")]
		[Address(RVA = "0xE8BFC0", Offset = "0xE8BFC0", VA = "0xE8BFC0")]
		internal static DerEnumerated FromOctetString(byte[] enc)
		{
			return null;
		}
	}
	[Token(Token = "0x2000397")]
	public class DerGeneralString : DerStringBase
	{
		[Token(Token = "0x400116E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly string str;

		[Token(Token = "0x600206C")]
		[Address(RVA = "0xE994E0", Offset = "0xE994E0", VA = "0xE994E0")]
		public static DerGeneralString GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x600206D")]
		[Address(RVA = "0xE995E0", Offset = "0xE995E0", VA = "0xE995E0")]
		public static DerGeneralString GetInstance(Asn1TaggedObject obj, bool isExplicit)
		{
			return null;
		}

		[Token(Token = "0x600206E")]
		[Address(RVA = "0xE8C42C", Offset = "0xE8C42C", VA = "0xE8C42C")]
		public DerGeneralString(byte[] str)
		{
		}

		[Token(Token = "0x600206F")]
		[Address(RVA = "0xE99724", Offset = "0xE99724", VA = "0xE99724")]
		public DerGeneralString(string str)
		{
		}

		[Token(Token = "0x6002070")]
		[Address(RVA = "0xE997C0", Offset = "0xE997C0", VA = "0xE997C0", Slot = "10")]
		public override string GetString()
		{
			return null;
		}

		[Token(Token = "0x6002071")]
		[Address(RVA = "0xE997C8", Offset = "0xE997C8", VA = "0xE997C8")]
		public byte[] GetOctets()
		{
			return null;
		}

		[Token(Token = "0x6002072")]
		[Address(RVA = "0xE997D4", Offset = "0xE997D4", VA = "0xE997D4", Slot = "6")]
		internal override void Encode(DerOutputStream derOut)
		{
		}

		[Token(Token = "0x6002073")]
		[Address(RVA = "0xE99814", Offset = "0xE99814", VA = "0xE99814", Slot = "7")]
		protected override bool Asn1Equals(Asn1Object asn1Object)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000398")]
	public class DerGeneralizedTime : Asn1Object
	{
		[Token(Token = "0x400116F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly string time;

		[Token(Token = "0x170003CA")]
		public string TimeString
		{
			[Token(Token = "0x6002079")]
			[Address(RVA = "0xE99ED0", Offset = "0xE99ED0", VA = "0xE99ED0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003CB")]
		private bool HasFractionalSeconds
		{
			[Token(Token = "0x6002080")]
			[Address(RVA = "0xE9A4E8", Offset = "0xE9A4E8", VA = "0xE9A4E8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6002074")]
		[Address(RVA = "0xE998C8", Offset = "0xE998C8", VA = "0xE998C8")]
		public static DerGeneralizedTime GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x6002075")]
		[Address(RVA = "0xE999D4", Offset = "0xE999D4", VA = "0xE999D4")]
		public static DerGeneralizedTime GetInstance(Asn1TaggedObject obj, bool isExplicit)
		{
			return null;
		}

		[Token(Token = "0x6002076")]
		[Address(RVA = "0xE99B18", Offset = "0xE99B18", VA = "0xE99B18")]
		public DerGeneralizedTime(string time)
		{
		}

		[Token(Token = "0x6002077")]
		[Address(RVA = "0xE99E5C", Offset = "0xE99E5C", VA = "0xE99E5C")]
		public DerGeneralizedTime(DateTime time)
		{
		}

		[Token(Token = "0x6002078")]
		[Address(RVA = "0xE8C3F4", Offset = "0xE8C3F4", VA = "0xE8C3F4")]
		internal DerGeneralizedTime(byte[] bytes)
		{
		}

		[Token(Token = "0x600207A")]
		[Address(RVA = "0xE99ED8", Offset = "0xE99ED8", VA = "0xE99ED8")]
		public string GetTime()
		{
			return null;
		}

		[Token(Token = "0x600207B")]
		[Address(RVA = "0xE9A1E0", Offset = "0xE9A1E0", VA = "0xE9A1E0")]
		private string CalculateGmtOffset()
		{
			return null;
		}

		[Token(Token = "0x600207C")]
		[Address(RVA = "0xE9A450", Offset = "0xE9A450", VA = "0xE9A450")]
		private static string Convert(int time)
		{
			return null;
		}

		[Token(Token = "0x600207D")]
		[Address(RVA = "0xE99C58", Offset = "0xE99C58", VA = "0xE99C58")]
		public DateTime ToDateTime()
		{
			return default(DateTime);
		}

		[Token(Token = "0x600207E")]
		[Address(RVA = "0xE9A518", Offset = "0xE9A518", VA = "0xE9A518")]
		private string FString(int count)
		{
			return null;
		}

		[Token(Token = "0x600207F")]
		[Address(RVA = "0xE9A5B8", Offset = "0xE9A5B8", VA = "0xE9A5B8")]
		private DateTime ParseDateString(string s, string format, bool makeUniversal)
		{
			return default(DateTime);
		}

		[Token(Token = "0x6002081")]
		[Address(RVA = "0xE9A7E4", Offset = "0xE9A7E4", VA = "0xE9A7E4")]
		private byte[] GetOctets()
		{
			return null;
		}

		[Token(Token = "0x6002082")]
		[Address(RVA = "0xE9A7F0", Offset = "0xE9A7F0", VA = "0xE9A7F0", Slot = "6")]
		internal override void Encode(DerOutputStream derOut)
		{
		}

		[Token(Token = "0x6002083")]
		[Address(RVA = "0xE9A830", Offset = "0xE9A830", VA = "0xE9A830", Slot = "7")]
		protected override bool Asn1Equals(Asn1Object asn1Object)
		{
			return default(bool);
		}

		[Token(Token = "0x6002084")]
		[Address(RVA = "0xE9A8E4", Offset = "0xE9A8E4", VA = "0xE9A8E4", Slot = "8")]
		protected override int Asn1GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000399")]
	public class DerIA5String : DerStringBase
	{
		[Token(Token = "0x4001170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly string str;

		[Token(Token = "0x6002085")]
		[Address(RVA = "0xE14EA0", Offset = "0xE14EA0", VA = "0xE14EA0")]
		public static DerIA5String GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x6002086")]
		[Address(RVA = "0xE14FA0", Offset = "0xE14FA0", VA = "0xE14FA0")]
		public static DerIA5String GetInstance(Asn1TaggedObject obj, bool isExplicit)
		{
			return null;
		}

		[Token(Token = "0x6002087")]
		[Address(RVA = "0xE150E0", Offset = "0xE150E0", VA = "0xE150E0")]
		public DerIA5String(byte[] str)
		{
		}

		[Token(Token = "0x6002088")]
		[Address(RVA = "0xE151FC", Offset = "0xE151FC", VA = "0xE151FC")]
		public DerIA5String(string str)
		{
		}

		[Token(Token = "0x6002089")]
		[Address(RVA = "0xE15114", Offset = "0xE15114", VA = "0xE15114")]
		public DerIA5String(string str, bool validate)
		{
		}

		[Token(Token = "0x600208A")]
		[Address(RVA = "0xE15278", Offset = "0xE15278", VA = "0xE15278", Slot = "10")]
		public override string GetString()
		{
			return null;
		}

		[Token(Token = "0x600208B")]
		[Address(RVA = "0xE15280", Offset = "0xE15280", VA = "0xE15280")]
		public byte[] GetOctets()
		{
			return null;
		}

		[Token(Token = "0x600208C")]
		[Address(RVA = "0xE1528C", Offset = "0xE1528C", VA = "0xE1528C", Slot = "6")]
		internal override void Encode(DerOutputStream derOut)
		{
		}

		[Token(Token = "0x600208D")]
		[Address(RVA = "0xE15328", Offset = "0xE15328", VA = "0xE15328", Slot = "8")]
		protected override int Asn1GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600208E")]
		[Address(RVA = "0xE15348", Offset = "0xE15348", VA = "0xE15348", Slot = "7")]
		protected override bool Asn1Equals(Asn1Object asn1Object)
		{
			return default(bool);
		}

		[Token(Token = "0x600208F")]
		[Address(RVA = "0xE1520C", Offset = "0xE1520C", VA = "0xE1520C")]
		public static bool IsIA5String(string str)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200039A")]
	public class DerInteger : Asn1Object
	{
		[Token(Token = "0x4001171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly byte[] bytes;

		[Token(Token = "0x170003CC")]
		public BigInteger Value
		{
			[Token(Token = "0x6002095")]
			[Address(RVA = "0xE1578C", Offset = "0xE1578C", VA = "0xE1578C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003CD")]
		public BigInteger PositiveValue
		{
			[Token(Token = "0x6002096")]
			[Address(RVA = "0xE157F4", Offset = "0xE157F4", VA = "0xE157F4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002090")]
		[Address(RVA = "0xE153FC", Offset = "0xE153FC", VA = "0xE153FC")]
		public static DerInteger GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x6002091")]
		[Address(RVA = "0xE154FC", Offset = "0xE154FC", VA = "0xE154FC")]
		public static DerInteger GetInstance(Asn1TaggedObject obj, bool isExplicit)
		{
			return null;
		}

		[Token(Token = "0x6002092")]
		[Address(RVA = "0xE1564C", Offset = "0xE1564C", VA = "0xE1564C")]
		public DerInteger(int value)
		{
		}

		[Token(Token = "0x6002093")]
		[Address(RVA = "0xE156E4", Offset = "0xE156E4", VA = "0xE156E4")]
		public DerInteger(BigInteger value)
		{
		}

		[Token(Token = "0x6002094")]
		[Address(RVA = "0xE15620", Offset = "0xE15620", VA = "0xE15620")]
		public DerInteger(byte[] bytes)
		{
		}

		[Token(Token = "0x6002097")]
		[Address(RVA = "0xE15860", Offset = "0xE15860", VA = "0xE15860", Slot = "6")]
		internal override void Encode(DerOutputStream derOut)
		{
		}

		[Token(Token = "0x6002098")]
		[Address(RVA = "0xE15884", Offset = "0xE15884", VA = "0xE15884", Slot = "8")]
		protected override int Asn1GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6002099")]
		[Address(RVA = "0xE15890", Offset = "0xE15890", VA = "0xE15890", Slot = "7")]
		protected override bool Asn1Equals(Asn1Object asn1Object)
		{
			return default(bool);
		}

		[Token(Token = "0x600209A")]
		[Address(RVA = "0xE15940", Offset = "0xE15940", VA = "0xE15940", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200039B")]
	public class DerNull : Asn1Null
	{
		[Token(Token = "0x4001172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly DerNull Instance;

		[Token(Token = "0x4001173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private byte[] zeroBytes;

		[Token(Token = "0x600209B")]
		[Address(RVA = "0xE15964", Offset = "0xE15964", VA = "0xE15964")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x830A18", Offset = "0x830A18")]
		public DerNull()
		{
		}

		[Token(Token = "0x600209C")]
		[Address(RVA = "0xE159C4", Offset = "0xE159C4", VA = "0xE159C4")]
		protected internal DerNull(int dummy)
		{
		}

		[Token(Token = "0x600209D")]
		[Address(RVA = "0xE15A24", Offset = "0xE15A24", VA = "0xE15A24", Slot = "6")]
		internal override void Encode(DerOutputStream derOut)
		{
		}

		[Token(Token = "0x600209E")]
		[Address(RVA = "0xE15A48", Offset = "0xE15A48", VA = "0xE15A48", Slot = "7")]
		protected override bool Asn1Equals(Asn1Object asn1Object)
		{
			return default(bool);
		}

		[Token(Token = "0x600209F")]
		[Address(RVA = "0xE15AC8", Offset = "0xE15AC8", VA = "0xE15AC8", Slot = "8")]
		protected override int Asn1GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x200039C")]
	public class DerNumericString : DerStringBase
	{
		[Token(Token = "0x4001174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly string str;

		[Token(Token = "0x60020A1")]
		[Address(RVA = "0xE15B30", Offset = "0xE15B30", VA = "0xE15B30")]
		public static DerNumericString GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x60020A2")]
		[Address(RVA = "0xE15C30", Offset = "0xE15C30", VA = "0xE15C30")]
		public static DerNumericString GetInstance(Asn1TaggedObject obj, bool isExplicit)
		{
			return null;
		}

		[Token(Token = "0x60020A3")]
		[Address(RVA = "0xE15D28", Offset = "0xE15D28", VA = "0xE15D28")]
		public DerNumericString(byte[] str)
		{
		}

		[Token(Token = "0x60020A4")]
		[Address(RVA = "0xE15E44", Offset = "0xE15E44", VA = "0xE15E44")]
		public DerNumericString(string str)
		{
		}

		[Token(Token = "0x60020A5")]
		[Address(RVA = "0xE15D5C", Offset = "0xE15D5C", VA = "0xE15D5C")]
		public DerNumericString(string str, bool validate)
		{
		}

		[Token(Token = "0x60020A6")]
		[Address(RVA = "0xE15F20", Offset = "0xE15F20", VA = "0xE15F20", Slot = "10")]
		public override string GetString()
		{
			return null;
		}

		[Token(Token = "0x60020A7")]
		[Address(RVA = "0xE15F28", Offset = "0xE15F28", VA = "0xE15F28")]
		public byte[] GetOctets()
		{
			return null;
		}

		[Token(Token = "0x60020A8")]
		[Address(RVA = "0xE15F34", Offset = "0xE15F34", VA = "0xE15F34", Slot = "6")]
		internal override void Encode(DerOutputStream derOut)
		{
		}

		[Token(Token = "0x60020A9")]
		[Address(RVA = "0xE15F70", Offset = "0xE15F70", VA = "0xE15F70", Slot = "7")]
		protected override bool Asn1Equals(Asn1Object asn1Object)
		{
			return default(bool);
		}

		[Token(Token = "0x60020AA")]
		[Address(RVA = "0xE15E4C", Offset = "0xE15E4C", VA = "0xE15E4C")]
		public static bool IsNumericString(string str)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200039D")]
	public class DerObjectIdentifier : Asn1Object
	{
		[Token(Token = "0x4001175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly string identifier;

		[Token(Token = "0x4001176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private byte[] body;

		[Token(Token = "0x4001177")]
		private const long LONG_LIMIT = 72057594037927808L;

		[Token(Token = "0x4001178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly DerObjectIdentifier[] cache;

		[Token(Token = "0x170003CE")]
		public string Id
		{
			[Token(Token = "0x60020AF")]
			[Address(RVA = "0xE167CC", Offset = "0xE167CC", VA = "0xE167CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60020AB")]
		[Address(RVA = "0xE16024", Offset = "0xE16024", VA = "0xE16024")]
		public static DerObjectIdentifier GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x60020AC")]
		[Address(RVA = "0xE163A0", Offset = "0xE163A0", VA = "0xE163A0")]
		public static DerObjectIdentifier GetInstance(Asn1TaggedObject obj, bool explicitly)
		{
			return null;
		}

		[Token(Token = "0x60020AD")]
		[Address(RVA = "0xE16420", Offset = "0xE16420", VA = "0xE16420")]
		public DerObjectIdentifier(string identifier)
		{
		}

		[Token(Token = "0x60020AE")]
		[Address(RVA = "0xE16610", Offset = "0xE16610", VA = "0xE16610")]
		internal DerObjectIdentifier(DerObjectIdentifier oid, string branchID)
		{
		}

		[Token(Token = "0x60020B0")]
		[Address(RVA = "0xE167D4", Offset = "0xE167D4", VA = "0xE167D4", Slot = "9")]
		public virtual DerObjectIdentifier Branch(string branchID)
		{
			return null;
		}

		[Token(Token = "0x60020B1")]
		[Address(RVA = "0xE16844", Offset = "0xE16844", VA = "0xE16844", Slot = "10")]
		public virtual bool On(DerObjectIdentifier stem)
		{
			return default(bool);
		}

		[Token(Token = "0x60020B2")]
		[Address(RVA = "0xE168B8", Offset = "0xE168B8", VA = "0xE168B8")]
		internal DerObjectIdentifier(byte[] bytes)
		{
		}

		[Token(Token = "0x60020B3")]
		[Address(RVA = "0xE16BE8", Offset = "0xE16BE8", VA = "0xE16BE8")]
		private void WriteField(Stream outputStream, long fieldValue)
		{
		}

		[Token(Token = "0x60020B4")]
		[Address(RVA = "0xE16CD8", Offset = "0xE16CD8", VA = "0xE16CD8")]
		private void WriteField(Stream outputStream, BigInteger fieldValue)
		{
		}

		[Token(Token = "0x60020B5")]
		[Address(RVA = "0xE16E64", Offset = "0xE16E64", VA = "0xE16E64")]
		private void DoOutput(MemoryStream bOut)
		{
		}

		[Token(Token = "0x60020B6")]
		[Address(RVA = "0xE170E4", Offset = "0xE170E4", VA = "0xE170E4")]
		internal byte[] GetBody()
		{
			return null;
		}

		[Token(Token = "0x60020B7")]
		[Address(RVA = "0xE171F0", Offset = "0xE171F0", VA = "0xE171F0", Slot = "6")]
		internal override void Encode(DerOutputStream derOut)
		{
		}

		[Token(Token = "0x60020B8")]
		[Address(RVA = "0xE17224", Offset = "0xE17224", VA = "0xE17224", Slot = "8")]
		protected override int Asn1GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60020B9")]
		[Address(RVA = "0xE17244", Offset = "0xE17244", VA = "0xE17244", Slot = "7")]
		protected override bool Asn1Equals(Asn1Object asn1Object)
		{
			return default(bool);
		}

		[Token(Token = "0x60020BA")]
		[Address(RVA = "0xE172F8", Offset = "0xE172F8", VA = "0xE172F8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60020BB")]
		[Address(RVA = "0xE16730", Offset = "0xE16730", VA = "0xE16730")]
		private static bool IsValidBranchID(string branchID, int start)
		{
			return default(bool);
		}

		[Token(Token = "0x60020BC")]
		[Address(RVA = "0xE16548", Offset = "0xE16548", VA = "0xE16548")]
		private static bool IsValidIdentifier(string identifier)
		{
			return default(bool);
		}

		[Token(Token = "0x60020BD")]
		[Address(RVA = "0xE1694C", Offset = "0xE1694C", VA = "0xE1694C")]
		private static string MakeOidStringFromBytes(byte[] bytes)
		{
			return null;
		}

		[Token(Token = "0x60020BE")]
		[Address(RVA = "0xE16198", Offset = "0xE16198", VA = "0xE16198")]
		internal static DerObjectIdentifier FromOctetString(byte[] enc)
		{
			return null;
		}
	}
	[Token(Token = "0x200039E")]
	public class DerOctetString : Asn1OctetString
	{
		[Token(Token = "0x60020C0")]
		[Address(RVA = "0xE17364", Offset = "0xE17364", VA = "0xE17364")]
		public DerOctetString(byte[] str)
		{
		}

		[Token(Token = "0x60020C1")]
		[Address(RVA = "0xE1736C", Offset = "0xE1736C", VA = "0xE1736C")]
		public DerOctetString(Asn1Encodable obj)
		{
		}

		[Token(Token = "0x60020C2")]
		[Address(RVA = "0xE17374", Offset = "0xE17374", VA = "0xE17374", Slot = "6")]
		internal override void Encode(DerOutputStream derOut)
		{
		}

		[Token(Token = "0x60020C3")]
		[Address(RVA = "0xE17398", Offset = "0xE17398", VA = "0xE17398")]
		internal static void Encode(DerOutputStream derOut, byte[] bytes, int offset, int length)
		{
		}
	}
	[Token(Token = "0x200039F")]
	public class DerOutputStream : FilterStream
	{
		[Token(Token = "0x60020C4")]
		[Address(RVA = "0xE17614", Offset = "0xE17614", VA = "0xE17614")]
		public DerOutputStream(Stream os)
		{
		}

		[Token(Token = "0x60020C5")]
		[Address(RVA = "0xE1761C", Offset = "0xE1761C", VA = "0xE1761C")]
		private void WriteLength(int length)
		{
		}

		[Token(Token = "0x60020C6")]
		[Address(RVA = "0xE152C8", Offset = "0xE152C8", VA = "0xE152C8")]
		internal void WriteEncoded(int tag, byte[] bytes)
		{
		}

		[Token(Token = "0x60020C7")]
		[Address(RVA = "0xE1740C", Offset = "0xE1740C", VA = "0xE1740C")]
		internal void WriteEncoded(int tag, byte[] bytes, int offset, int length)
		{
		}

		[Token(Token = "0x60020C8")]
		[Address(RVA = "0xE176CC", Offset = "0xE176CC", VA = "0xE176CC")]
		internal void WriteTag(int flags, int tagNo)
		{
		}

		[Token(Token = "0x60020C9")]
		[Address(RVA = "0xE17800", Offset = "0xE17800", VA = "0xE17800")]
		internal void WriteEncoded(int flags, int tagNo, byte[] bytes)
		{
		}

		[Token(Token = "0x60020CA")]
		[Address(RVA = "0xE17854", Offset = "0xE17854", VA = "0xE17854")]
		protected void WriteNull()
		{
		}

		[Token(Token = "0x60020CB")]
		[Address(RVA = "0xE17898", Offset = "0xE17898", VA = "0xE17898", Slot = "31")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x830A50", Offset = "0x830A50")]
		public virtual void WriteObject(object obj)
		{
		}

		[Token(Token = "0x60020CC")]
		[Address(RVA = "0xE179EC", Offset = "0xE179EC", VA = "0xE179EC", Slot = "32")]
		public virtual void WriteObject(Asn1Encodable obj)
		{
		}

		[Token(Token = "0x60020CD")]
		[Address(RVA = "0xE17A6C", Offset = "0xE17A6C", VA = "0xE17A6C", Slot = "33")]
		public virtual void WriteObject(Asn1Object obj)
		{
		}
	}
	[Token(Token = "0x20003A0")]
	public class DerPrintableString : DerStringBase
	{
		[Token(Token = "0x4001179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly string str;

		[Token(Token = "0x60020CE")]
		[Address(RVA = "0xE17AD4", Offset = "0xE17AD4", VA = "0xE17AD4")]
		public static DerPrintableString GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x60020CF")]
		[Address(RVA = "0xE17BD4", Offset = "0xE17BD4", VA = "0xE17BD4")]
		public static DerPrintableString GetInstance(Asn1TaggedObject obj, bool isExplicit)
		{
			return null;
		}

		[Token(Token = "0x60020D0")]
		[Address(RVA = "0xE17CCC", Offset = "0xE17CCC", VA = "0xE17CCC")]
		public DerPrintableString(byte[] str)
		{
		}

		[Token(Token = "0x60020D1")]
		[Address(RVA = "0xE17DE8", Offset = "0xE17DE8", VA = "0xE17DE8")]
		public DerPrintableString(string str)
		{
		}

		[Token(Token = "0x60020D2")]
		[Address(RVA = "0xE17D00", Offset = "0xE17D00", VA = "0xE17D00")]
		public DerPrintableString(string str, bool validate)
		{
		}

		[Token(Token = "0x60020D3")]
		[Address(RVA = "0xE17F0C", Offset = "0xE17F0C", VA = "0xE17F0C", Slot = "10")]
		public override string GetString()
		{
			return null;
		}

		[Token(Token = "0x60020D4")]
		[Address(RVA = "0xE17F14", Offset = "0xE17F14", VA = "0xE17F14")]
		public byte[] GetOctets()
		{
			return null;
		}

		[Token(Token = "0x60020D5")]
		[Address(RVA = "0xE17F20", Offset = "0xE17F20", VA = "0xE17F20", Slot = "6")]
		internal override void Encode(DerOutputStream derOut)
		{
		}

		[Token(Token = "0x60020D6")]
		[Address(RVA = "0xE17F5C", Offset = "0xE17F5C", VA = "0xE17F5C", Slot = "7")]
		protected override bool Asn1Equals(Asn1Object asn1Object)
		{
			return default(bool);
		}

		[Token(Token = "0x60020D7")]
		[Address(RVA = "0xE17DF0", Offset = "0xE17DF0", VA = "0xE17DF0")]
		public static bool IsPrintableString(string str)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20003A1")]
	public class DerSequence : Asn1Sequence
	{
		[Token(Token = "0x400117A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly DerSequence Empty;

		[Token(Token = "0x60020D8")]
		[Address(RVA = "0xE18010", Offset = "0xE18010", VA = "0xE18010")]
		public static DerSequence FromVector(Asn1EncodableVector v)
		{
			return null;
		}

		[Token(Token = "0x60020D9")]
		[Address(RVA = "0xE18324", Offset = "0xE18324", VA = "0xE18324")]
		public DerSequence()
		{
		}

		[Token(Token = "0x60020DA")]
		[Address(RVA = "0xE18330", Offset = "0xE18330", VA = "0xE18330")]
		public DerSequence(Asn1Encodable obj)
		{
		}

		[Token(Token = "0x60020DB")]
		[Address(RVA = "0xE18368", Offset = "0xE18368", VA = "0xE18368")]
		public DerSequence(params Asn1Encodable[] v)
		{
		}

		[Token(Token = "0x60020DC")]
		[Address(RVA = "0xE180B8", Offset = "0xE180B8", VA = "0xE180B8")]
		public DerSequence(Asn1EncodableVector v)
		{
		}

		[Token(Token = "0x60020DD")]
		[Address(RVA = "0xE183F0", Offset = "0xE183F0", VA = "0xE183F0", Slot = "6")]
		internal override void Encode(DerOutputStream derOut)
		{
		}
	}
	[Token(Token = "0x20003A2")]
	public class DerSet : Asn1Set
	{
		[Token(Token = "0x400117B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly DerSet Empty;

		[Token(Token = "0x60020DF")]
		[Address(RVA = "0xE18800", Offset = "0xE18800", VA = "0xE18800")]
		public static DerSet FromVector(Asn1EncodableVector v)
		{
			return null;
		}

		[Token(Token = "0x60020E0")]
		[Address(RVA = "0xE188B4", Offset = "0xE188B4", VA = "0xE188B4")]
		internal static DerSet FromVector(Asn1EncodableVector v, bool needsSorting)
		{
			return null;
		}

		[Token(Token = "0x60020E1")]
		[Address(RVA = "0xE18C04", Offset = "0xE18C04", VA = "0xE18C04")]
		public DerSet()
		{
		}

		[Token(Token = "0x60020E2")]
		[Address(RVA = "0xE18C10", Offset = "0xE18C10", VA = "0xE18C10")]
		public DerSet(Asn1Encodable obj)
		{
		}

		[Token(Token = "0x60020E3")]
		[Address(RVA = "0xE18C48", Offset = "0xE18C48", VA = "0xE18C48")]
		public DerSet(params Asn1Encodable[] v)
		{
		}

		[Token(Token = "0x60020E4")]
		[Address(RVA = "0xE188AC", Offset = "0xE188AC", VA = "0xE188AC")]
		public DerSet(Asn1EncodableVector v)
		{
		}

		[Token(Token = "0x60020E5")]
		[Address(RVA = "0xE1896C", Offset = "0xE1896C", VA = "0xE1896C")]
		internal DerSet(Asn1EncodableVector v, bool needsSorting)
		{
		}

		[Token(Token = "0x60020E6")]
		[Address(RVA = "0xE18CD8", Offset = "0xE18CD8", VA = "0xE18CD8", Slot = "6")]
		internal override void Encode(DerOutputStream derOut)
		{
		}
	}
	[Token(Token = "0x20003A3")]
	public abstract class DerStringBase : Asn1Object, IAsn1String
	{
		[Token(Token = "0x60020E8")]
		[Address(RVA = "0xE15204", Offset = "0xE15204", VA = "0xE15204")]
		protected DerStringBase()
		{
		}

		[Token(Token = "0x60020E9")]
		public abstract string GetString();

		[Token(Token = "0x60020EA")]
		[Address(RVA = "0xE192D0", Offset = "0xE192D0", VA = "0xE192D0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60020EB")]
		[Address(RVA = "0xE192DC", Offset = "0xE192DC", VA = "0xE192DC", Slot = "8")]
		protected override int Asn1GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20003A4")]
	public class DerT61String : DerStringBase
	{
		[Token(Token = "0x400117C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly string str;

		[Token(Token = "0x60020EC")]
		[Address(RVA = "0xE19308", Offset = "0xE19308", VA = "0xE19308")]
		public static DerT61String GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x60020ED")]
		[Address(RVA = "0xE19408", Offset = "0xE19408", VA = "0xE19408")]
		public static DerT61String GetInstance(Asn1TaggedObject obj, bool isExplicit)
		{
			return null;
		}

		[Token(Token = "0x60020EE")]
		[Address(RVA = "0xE194FC", Offset = "0xE194FC", VA = "0xE194FC")]
		public DerT61String(byte[] str)
		{
		}

		[Token(Token = "0x60020EF")]
		[Address(RVA = "0xE1952C", Offset = "0xE1952C", VA = "0xE1952C")]
		public DerT61String(string str)
		{
		}

		[Token(Token = "0x60020F0")]
		[Address(RVA = "0xE195C8", Offset = "0xE195C8", VA = "0xE195C8", Slot = "10")]
		public override string GetString()
		{
			return null;
		}

		[Token(Token = "0x60020F1")]
		[Address(RVA = "0xE195D0", Offset = "0xE195D0", VA = "0xE195D0", Slot = "6")]
		internal override void Encode(DerOutputStream derOut)
		{
		}

		[Token(Token = "0x60020F2")]
		[Address(RVA = "0xE1960C", Offset = "0xE1960C", VA = "0xE1960C")]
		public byte[] GetOctets()
		{
			return null;
		}

		[Token(Token = "0x60020F3")]
		[Address(RVA = "0xE19618", Offset = "0xE19618", VA = "0xE19618", Slot = "7")]
		protected override bool Asn1Equals(Asn1Object asn1Object)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20003A5")]
	public class DerTaggedObject : Asn1TaggedObject
	{
		[Token(Token = "0x60020F4")]
		[Address(RVA = "0xE196CC", Offset = "0xE196CC", VA = "0xE196CC")]
		public DerTaggedObject(int tagNo, Asn1Encodable obj)
		{
		}

		[Token(Token = "0x60020F5")]
		[Address(RVA = "0xE196D4", Offset = "0xE196D4", VA = "0xE196D4")]
		public DerTaggedObject(bool explicitly, int tagNo, Asn1Encodable obj)
		{
		}

		[Token(Token = "0x60020F6")]
		[Address(RVA = "0xE196E0", Offset = "0xE196E0", VA = "0xE196E0")]
		public DerTaggedObject(int tagNo)
		{
		}

		[Token(Token = "0x60020F7")]
		[Address(RVA = "0xE19768", Offset = "0xE19768", VA = "0xE19768", Slot = "6")]
		internal override void Encode(DerOutputStream derOut)
		{
		}
	}
	[Token(Token = "0x20003A6")]
	public class DerUtcTime : Asn1Object
	{
		[Token(Token = "0x400117D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly string time;

		[Token(Token = "0x170003CF")]
		public string TimeString
		{
			[Token(Token = "0x6002100")]
			[Address(RVA = "0xE1A350", Offset = "0xE1A350", VA = "0xE1A350")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003D0")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x836758", Offset = "0x836758")]
		public string AdjustedTime
		{
			[Token(Token = "0x6002101")]
			[Address(RVA = "0xE1A8AC", Offset = "0xE1A8AC", VA = "0xE1A8AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003D1")]
		public string AdjustedTimeString
		{
			[Token(Token = "0x6002102")]
			[Address(RVA = "0xE1A824", Offset = "0xE1A824", VA = "0xE1A824")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60020F8")]
		[Address(RVA = "0xE19E7C", Offset = "0xE19E7C", VA = "0xE19E7C")]
		public static DerUtcTime GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x60020F9")]
		[Address(RVA = "0xE19F7C", Offset = "0xE19F7C", VA = "0xE19F7C")]
		public static DerUtcTime GetInstance(Asn1TaggedObject obj, bool isExplicit)
		{
			return null;
		}

		[Token(Token = "0x60020FA")]
		[Address(RVA = "0xE1A0F0", Offset = "0xE1A0F0", VA = "0xE1A0F0")]
		public DerUtcTime(string time)
		{
		}

		[Token(Token = "0x60020FB")]
		[Address(RVA = "0xE1A2C8", Offset = "0xE1A2C8", VA = "0xE1A2C8")]
		public DerUtcTime(DateTime time)
		{
		}

		[Token(Token = "0x60020FC")]
		[Address(RVA = "0xE1A0B8", Offset = "0xE1A0B8", VA = "0xE1A0B8")]
		internal DerUtcTime(byte[] bytes)
		{
		}

		[Token(Token = "0x60020FD")]
		[Address(RVA = "0xE1A270", Offset = "0xE1A270", VA = "0xE1A270")]
		public DateTime ToDateTime()
		{
			return default(DateTime);
		}

		[Token(Token = "0x60020FE")]
		[Address(RVA = "0xE1A7CC", Offset = "0xE1A7CC", VA = "0xE1A7CC")]
		public DateTime ToAdjustedDateTime()
		{
			return default(DateTime);
		}

		[Token(Token = "0x60020FF")]
		[Address(RVA = "0xE1A708", Offset = "0xE1A708", VA = "0xE1A708")]
		private DateTime ParseDateString(string dateStr, string formatStr)
		{
			return default(DateTime);
		}

		[Token(Token = "0x6002103")]
		[Address(RVA = "0xE1A8B0", Offset = "0xE1A8B0", VA = "0xE1A8B0")]
		private byte[] GetOctets()
		{
			return null;
		}

		[Token(Token = "0x6002104")]
		[Address(RVA = "0xE1A8BC", Offset = "0xE1A8BC", VA = "0xE1A8BC", Slot = "6")]
		internal override void Encode(DerOutputStream derOut)
		{
		}

		[Token(Token = "0x6002105")]
		[Address(RVA = "0xE1A8F8", Offset = "0xE1A8F8", VA = "0xE1A8F8", Slot = "7")]
		protected override bool Asn1Equals(Asn1Object asn1Object)
		{
			return default(bool);
		}

		[Token(Token = "0x6002106")]
		[Address(RVA = "0xE1A9AC", Offset = "0xE1A9AC", VA = "0xE1A9AC", Slot = "8")]
		protected override int Asn1GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6002107")]
		[Address(RVA = "0xE1A9CC", Offset = "0xE1A9CC", VA = "0xE1A9CC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20003A7")]
	public class DerUtf8String : DerStringBase
	{
		[Token(Token = "0x400117E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly string str;

		[Token(Token = "0x6002108")]
		[Address(RVA = "0xE1A9D4", Offset = "0xE1A9D4", VA = "0xE1A9D4")]
		public static DerUtf8String GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x6002109")]
		[Address(RVA = "0xE1AAD4", Offset = "0xE1AAD4", VA = "0xE1AAD4")]
		public static DerUtf8String GetInstance(Asn1TaggedObject obj, bool isExplicit)
		{
			return null;
		}

		[Token(Token = "0x600210A")]
		[Address(RVA = "0xE1ABB8", Offset = "0xE1ABB8", VA = "0xE1ABB8")]
		public DerUtf8String(byte[] str)
		{
		}

		[Token(Token = "0x600210B")]
		[Address(RVA = "0xE1AC10", Offset = "0xE1AC10", VA = "0xE1AC10")]
		public DerUtf8String(string str)
		{
		}

		[Token(Token = "0x600210C")]
		[Address(RVA = "0xE1ACAC", Offset = "0xE1ACAC", VA = "0xE1ACAC", Slot = "10")]
		public override string GetString()
		{
			return null;
		}

		[Token(Token = "0x600210D")]
		[Address(RVA = "0xE1ACB4", Offset = "0xE1ACB4", VA = "0xE1ACB4", Slot = "7")]
		protected override bool Asn1Equals(Asn1Object asn1Object)
		{
			return default(bool);
		}

		[Token(Token = "0x600210E")]
		[Address(RVA = "0xE1AD68", Offset = "0xE1AD68", VA = "0xE1AD68", Slot = "6")]
		internal override void Encode(DerOutputStream derOut)
		{
		}
	}
	[Token(Token = "0x20003A8")]
	public class DerUniversalString : DerStringBase
	{
		[Token(Token = "0x400117F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly char[] table;

		[Token(Token = "0x4001180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly byte[] str;

		[Token(Token = "0x600210F")]
		[Address(RVA = "0xE1988C", Offset = "0xE1988C", VA = "0xE1988C")]
		public static DerUniversalString GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x6002110")]
		[Address(RVA = "0xE1998C", Offset = "0xE1998C", VA = "0xE1998C")]
		public static DerUniversalString GetInstance(Asn1TaggedObject obj, bool isExplicit)
		{
			return null;
		}

		[Token(Token = "0x6002111")]
		[Address(RVA = "0xE19A9C", Offset = "0xE19A9C", VA = "0xE19A9C")]
		public DerUniversalString(byte[] str)
		{
		}

		[Token(Token = "0x6002112")]
		[Address(RVA = "0xE19B38", Offset = "0xE19B38", VA = "0xE19B38", Slot = "10")]
		public override string GetString()
		{
			return null;
		}

		[Token(Token = "0x6002113")]
		[Address(RVA = "0xE19CAC", Offset = "0xE19CAC", VA = "0xE19CAC")]
		public byte[] GetOctets()
		{
			return null;
		}

		[Token(Token = "0x6002114")]
		[Address(RVA = "0xE19D2C", Offset = "0xE19D2C", VA = "0xE19D2C", Slot = "6")]
		internal override void Encode(DerOutputStream derOut)
		{
		}

		[Token(Token = "0x6002115")]
		[Address(RVA = "0xE19D50", Offset = "0xE19D50", VA = "0xE19D50", Slot = "7")]
		protected override bool Asn1Equals(Asn1Object asn1Object)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20003A9")]
	public class DerVisibleString : DerStringBase
	{
		[Token(Token = "0x4001181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly string str;

		[Token(Token = "0x6002117")]
		[Address(RVA = "0xE1ADBC", Offset = "0xE1ADBC", VA = "0xE1ADBC")]
		public static DerVisibleString GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x6002118")]
		[Address(RVA = "0xE1AFB0", Offset = "0xE1AFB0", VA = "0xE1AFB0")]
		public static DerVisibleString GetInstance(Asn1TaggedObject obj, bool explicitly)
		{
			return null;
		}

		[Token(Token = "0x6002119")]
		[Address(RVA = "0xE1AF80", Offset = "0xE1AF80", VA = "0xE1AF80")]
		public DerVisibleString(byte[] str)
		{
		}

		[Token(Token = "0x600211A")]
		[Address(RVA = "0xE1AFD0", Offset = "0xE1AFD0", VA = "0xE1AFD0")]
		public DerVisibleString(string str)
		{
		}

		[Token(Token = "0x600211B")]
		[Address(RVA = "0xE1B06C", Offset = "0xE1B06C", VA = "0xE1B06C", Slot = "10")]
		public override string GetString()
		{
			return null;
		}

		[Token(Token = "0x600211C")]
		[Address(RVA = "0xE1B074", Offset = "0xE1B074", VA = "0xE1B074")]
		public byte[] GetOctets()
		{
			return null;
		}

		[Token(Token = "0x600211D")]
		[Address(RVA = "0xE1B080", Offset = "0xE1B080", VA = "0xE1B080", Slot = "6")]
		internal override void Encode(DerOutputStream derOut)
		{
		}

		[Token(Token = "0x600211E")]
		[Address(RVA = "0xE1B0BC", Offset = "0xE1B0BC", VA = "0xE1B0BC", Slot = "7")]
		protected override bool Asn1Equals(Asn1Object asn1Object)
		{
			return default(bool);
		}

		[Token(Token = "0x600211F")]
		[Address(RVA = "0xE1B170", Offset = "0xE1B170", VA = "0xE1B170", Slot = "8")]
		protected override int Asn1GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20003AA")]
	public interface IAsn1ApplicationSpecificParser : IAsn1Convertible
	{
		[Token(Token = "0x6002120")]
		IAsn1Convertible ReadObject();
	}
	[Token(Token = "0x20003AB")]
	public interface IAsn1Choice
	{
	}
	[Token(Token = "0x20003AC")]
	public interface IAsn1Convertible
	{
		[Token(Token = "0x6002121")]
		Asn1Object ToAsn1Object();
	}
	[Token(Token = "0x20003AD")]
	public interface IAsn1String
	{
		[Token(Token = "0x6002122")]
		string GetString();
	}
	[Token(Token = "0x20003AE")]
	internal class IndefiniteLengthInputStream : LimitedInputStream
	{
		[Token(Token = "0x4001182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int _lookAhead;

		[Token(Token = "0x4001183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool _eofOn00;

		[Token(Token = "0x6002123")]
		[Address(RVA = "0xE1B328", Offset = "0xE1B328", VA = "0xE1B328")]
		internal IndefiniteLengthInputStream(Stream inStream, int limit)
		{
		}

		[Token(Token = "0x6002124")]
		[Address(RVA = "0xE1B508", Offset = "0xE1B508", VA = "0xE1B508")]
		internal void SetEofOn00(bool eofOn00)
		{
		}

		[Token(Token = "0x6002125")]
		[Address(RVA = "0xE1B448", Offset = "0xE1B448", VA = "0xE1B448")]
		private bool CheckForEof()
		{
			return default(bool);
		}

		[Token(Token = "0x6002126")]
		[Address(RVA = "0xE1B51C", Offset = "0xE1B51C", VA = "0xE1B51C", Slot = "27")]
		public override int Read(byte[] buffer, int offset, int count)
		{
			return default(int);
		}

		[Token(Token = "0x6002127")]
		[Address(RVA = "0xE1B65C", Offset = "0xE1B65C", VA = "0xE1B65C", Slot = "28")]
		public override int ReadByte()
		{
			return default(int);
		}

		[Token(Token = "0x6002128")]
		[Address(RVA = "0xE1B3B8", Offset = "0xE1B3B8", VA = "0xE1B3B8")]
		private int RequireByte()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20003AF")]
	public class LazyAsn1InputStream : Asn1InputStream
	{
		[Token(Token = "0x6002129")]
		[Address(RVA = "0xE1B6A8", Offset = "0xE1B6A8", VA = "0xE1B6A8")]
		public LazyAsn1InputStream(byte[] input)
		{
		}

		[Token(Token = "0x600212A")]
		[Address(RVA = "0xE1B6B0", Offset = "0xE1B6B0", VA = "0xE1B6B0")]
		public LazyAsn1InputStream(Stream inputStream)
		{
		}

		[Token(Token = "0x600212B")]
		[Address(RVA = "0xE1B6B8", Offset = "0xE1B6B8", VA = "0xE1B6B8", Slot = "32")]
		internal override DerSequence CreateDerSequence(DefiniteLengthInputStream dIn)
		{
			return null;
		}

		[Token(Token = "0x600212C")]
		[Address(RVA = "0xE1B7B4", Offset = "0xE1B7B4", VA = "0xE1B7B4", Slot = "33")]
		internal override DerSet CreateDerSet(DefiniteLengthInputStream dIn)
		{
			return null;
		}
	}
	[Token(Token = "0x20003B0")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x81F354", Offset = "0x81F354")]
	internal class LazyDerSequence : DerSequence
	{
		[Token(Token = "0x4001184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private byte[] encoded;

		[Token(Token = "0x170003D2")]
		public override Asn1Encodable Item
		{
			[Token(Token = "0x600212F")]
			[Address(RVA = "0xE1B9C4", Offset = "0xE1B9C4", VA = "0xE1B9C4", Slot = "12")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003D3")]
		public override int Count
		{
			[Token(Token = "0x6002131")]
			[Address(RVA = "0xE1BA1C", Offset = "0xE1BA1C", VA = "0xE1BA1C", Slot = "13")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600212D")]
		[Address(RVA = "0xE1B734", Offset = "0xE1B734", VA = "0xE1B734")]
		internal LazyDerSequence(byte[] encoded)
		{
		}

		[Token(Token = "0x600212E")]
		[Address(RVA = "0xE1B8B0", Offset = "0xE1B8B0", VA = "0xE1B8B0")]
		private void Parse()
		{
		}

		[Token(Token = "0x6002130")]
		[Address(RVA = "0xE1B9F4", Offset = "0xE1B9F4", VA = "0xE1B9F4", Slot = "10")]
		public override IEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6002132")]
		[Address(RVA = "0xE1BA44", Offset = "0xE1BA44", VA = "0xE1BA44", Slot = "6")]
		internal override void Encode(DerOutputStream derOut)
		{
		}
	}
	[Token(Token = "0x20003B1")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x81F38C", Offset = "0x81F38C")]
	internal class LazyDerSet : DerSet
	{
		[Token(Token = "0x4001185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private byte[] encoded;

		[Token(Token = "0x170003D4")]
		public override Asn1Encodable Item
		{
			[Token(Token = "0x6002135")]
			[Address(RVA = "0xE1BC08", Offset = "0xE1BC08", VA = "0xE1BC08", Slot = "11")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003D5")]
		public override int Count
		{
			[Token(Token = "0x6002137")]
			[Address(RVA = "0xE1BC60", Offset = "0xE1BC60", VA = "0xE1BC60", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6002133")]
		[Address(RVA = "0xE1B830", Offset = "0xE1B830", VA = "0xE1B830")]
		internal LazyDerSet(byte[] encoded)
		{
		}

		[Token(Token = "0x6002134")]
		[Address(RVA = "0xE1BAF4", Offset = "0xE1BAF4", VA = "0xE1BAF4")]
		private void Parse()
		{
		}

		[Token(Token = "0x6002136")]
		[Address(RVA = "0xE1BC38", Offset = "0xE1BC38", VA = "0xE1BC38", Slot = "10")]
		public override IEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6002138")]
		[Address(RVA = "0xE1BC88", Offset = "0xE1BC88", VA = "0xE1BC88", Slot = "6")]
		internal override void Encode(DerOutputStream derOut)
		{
		}
	}
	[Token(Token = "0x20003B2")]
	internal abstract class LimitedInputStream : BaseInputStream
	{
		[Token(Token = "0x4001186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected readonly Stream _in;

		[Token(Token = "0x4001187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int _limit;

		[Token(Token = "0x6002139")]
		[Address(RVA = "0xE1B37C", Offset = "0xE1B37C", VA = "0xE1B37C")]
		internal LimitedInputStream(Stream inStream, int limit)
		{
		}

		[Token(Token = "0x600213A")]
		[Address(RVA = "0xE1BD38", Offset = "0xE1BD38", VA = "0xE1BD38", Slot = "31")]
		internal virtual int GetRemaining()
		{
			return default(int);
		}

		[Token(Token = "0x600213B")]
		[Address(RVA = "0xE1BD40", Offset = "0xE1BD40", VA = "0xE1BD40", Slot = "32")]
		protected virtual void SetParentEofDetect(bool on)
		{
		}
	}
	[Token(Token = "0x20003B3")]
	public class OidTokenizer
	{
		[Token(Token = "0x4001188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string oid;

		[Token(Token = "0x4001189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int index;

		[Token(Token = "0x170003D6")]
		public bool HasMoreTokens
		{
			[Token(Token = "0x600213D")]
			[Address(RVA = "0xE170D4", Offset = "0xE170D4", VA = "0xE170D4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600213C")]
		[Address(RVA = "0xE17018", Offset = "0xE17018", VA = "0xE17018")]
		public OidTokenizer(string oid)
		{
		}

		[Token(Token = "0x600213E")]
		[Address(RVA = "0xE17044", Offset = "0xE17044", VA = "0xE17044")]
		public string NextToken()
		{
			return null;
		}
	}
}
namespace Org.BouncyCastle.Asn1.X9
{
	[Token(Token = "0x20003B4")]
	public class DHDomainParameters : Asn1Encodable
	{
		[Token(Token = "0x400118A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly DerInteger p;

		[Token(Token = "0x400118B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly DerInteger g;

		[Token(Token = "0x400118C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly DerInteger q;

		[Token(Token = "0x400118D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly DerInteger j;

		[Token(Token = "0x400118E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly DHValidationParms validationParms;

		[Token(Token = "0x170003D7")]
		public DerInteger P
		{
			[Token(Token = "0x6002144")]
			[Address(RVA = "0x1319B54", Offset = "0x1319B54", VA = "0x1319B54")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003D8")]
		public DerInteger G
		{
			[Token(Token = "0x6002145")]
			[Address(RVA = "0x1319B5C", Offset = "0x1319B5C", VA = "0x1319B5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003D9")]
		public DerInteger Q
		{
			[Token(Token = "0x6002146")]
			[Address(RVA = "0x1319B64", Offset = "0x1319B64", VA = "0x1319B64")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003DA")]
		public DerInteger J
		{
			[Token(Token = "0x6002147")]
			[Address(RVA = "0x1319B6C", Offset = "0x1319B6C", VA = "0x1319B6C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003DB")]
		public DHValidationParms ValidationParms
		{
			[Token(Token = "0x6002148")]
			[Address(RVA = "0x1319B74", Offset = "0x1319B74", VA = "0x1319B74")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600213F")]
		[Address(RVA = "0x13193B0", Offset = "0x13193B0", VA = "0x13193B0")]
		public static DHDomainParameters GetInstance(Asn1TaggedObject obj, bool isExplicit)
		{
			return null;
		}

		[Token(Token = "0x6002140")]
		[Address(RVA = "0x13193CC", Offset = "0x13193CC", VA = "0x13193CC")]
		public static DHDomainParameters GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x6002141")]
		[Address(RVA = "0x131973C", Offset = "0x131973C", VA = "0x131973C")]
		public DHDomainParameters(DerInteger p, DerInteger g, DerInteger q, DerInteger j, DHValidationParms validationParms)
		{
		}

		[Token(Token = "0x6002142")]
		[Address(RVA = "0x1319550", Offset = "0x1319550", VA = "0x1319550")]
		private DHDomainParameters(Asn1Sequence seq)
		{
		}

		[Token(Token = "0x6002143")]
		[Address(RVA = "0x1319840", Offset = "0x1319840", VA = "0x1319840")]
		private static Asn1Encodable GetNext(IEnumerator e)
		{
			return null;
		}

		[Token(Token = "0x6002149")]
		[Address(RVA = "0x1319B7C", Offset = "0x1319B7C", VA = "0x1319B7C", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
	[Token(Token = "0x20003B5")]
	public class DHPublicKey : Asn1Encodable
	{
		[Token(Token = "0x400118F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly DerInteger y;

		[Token(Token = "0x170003DC")]
		public DerInteger Y
		{
			[Token(Token = "0x600214D")]
			[Address(RVA = "0x1319FB4", Offset = "0x1319FB4", VA = "0x1319FB4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600214A")]
		[Address(RVA = "0x1319D78", Offset = "0x1319D78", VA = "0x1319D78")]
		public static DHPublicKey GetInstance(Asn1TaggedObject obj, bool isExplicit)
		{
			return null;
		}

		[Token(Token = "0x600214B")]
		[Address(RVA = "0x1319D94", Offset = "0x1319D94", VA = "0x1319D94")]
		public static DHPublicKey GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x600214C")]
		[Address(RVA = "0x1319F18", Offset = "0x1319F18", VA = "0x1319F18")]
		public DHPublicKey(DerInteger y)
		{
		}

		[Token(Token = "0x600214E")]
		[Address(RVA = "0x1319FBC", Offset = "0x1319FBC", VA = "0x1319FBC", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
	[Token(Token = "0x20003B6")]
	public class DHValidationParms : Asn1Encodable
	{
		[Token(Token = "0x4001190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly DerBitString seed;

		[Token(Token = "0x4001191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly DerInteger pgenCounter;

		[Token(Token = "0x170003DD")]
		public DerBitString Seed
		{
			[Token(Token = "0x6002153")]
			[Address(RVA = "0x131A218", Offset = "0x131A218", VA = "0x131A218")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003DE")]
		public DerInteger PgenCounter
		{
			[Token(Token = "0x6002154")]
			[Address(RVA = "0x131A220", Offset = "0x131A220", VA = "0x131A220")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600214F")]
		[Address(RVA = "0x1319FC4", Offset = "0x1319FC4", VA = "0x1319FC4")]
		public static DHValidationParms GetInstance(Asn1TaggedObject obj, bool isExplicit)
		{
			return null;
		}

		[Token(Token = "0x6002150")]
		[Address(RVA = "0x131999C", Offset = "0x131999C", VA = "0x131999C")]
		public static DHValidationParms GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x6002151")]
		[Address(RVA = "0x131A158", Offset = "0x131A158", VA = "0x131A158")]
		public DHValidationParms(DerBitString seed, DerInteger pgenCounter)
		{
		}

		[Token(Token = "0x6002152")]
		[Address(RVA = "0x1319FE0", Offset = "0x1319FE0", VA = "0x1319FE0")]
		private DHValidationParms(Asn1Sequence seq)
		{
		}

		[Token(Token = "0x6002155")]
		[Address(RVA = "0x131A228", Offset = "0x131A228", VA = "0x131A228", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
	[Token(Token = "0x20003B7")]
	public class ECNamedCurveTable
	{
		[Token(Token = "0x170003DF")]
		public static IEnumerable Names
		{
			[Token(Token = "0x6002159")]
			[Address(RVA = "0x131A964", Offset = "0x131A964", VA = "0x131A964")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002156")]
		[Address(RVA = "0x131A320", Offset = "0x131A320", VA = "0x131A320")]
		public static X9ECParameters GetByName(string name)
		{
			return null;
		}

		[Token(Token = "0x6002157")]
		[Address(RVA = "0x131A4E8", Offset = "0x131A4E8", VA = "0x131A4E8")]
		public static DerObjectIdentifier GetOid(string name)
		{
			return null;
		}

		[Token(Token = "0x6002158")]
		[Address(RVA = "0x131A768", Offset = "0x131A768", VA = "0x131A768")]
		public static X9ECParameters GetByOid(DerObjectIdentifier oid)
		{
			return null;
		}

		[Token(Token = "0x600215A")]
		[Address(RVA = "0x131ABF0", Offset = "0x131ABF0", VA = "0x131ABF0")]
		public ECNamedCurveTable()
		{
		}
	}
	[Token(Token = "0x20003B8")]
	public sealed class X962NamedCurves
	{
		[Token(Token = "0x2000691")]
		internal class Prime192v1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x600354E")]
			[Address(RVA = "0x11AB5E8", Offset = "0x11AB5E8", VA = "0x11AB5E8")]
			private Prime192v1Holder()
			{
			}

			[Token(Token = "0x600354F")]
			[Address(RVA = "0x11AB5F0", Offset = "0x11AB5F0", VA = "0x11AB5F0", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x2000692")]
		internal class Prime192v2Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x6003551")]
			[Address(RVA = "0x11AB82C", Offset = "0x11AB82C", VA = "0x11AB82C")]
			private Prime192v2Holder()
			{
			}

			[Token(Token = "0x6003552")]
			[Address(RVA = "0x11AB834", Offset = "0x11AB834", VA = "0x11AB834", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x2000693")]
		internal class Prime192v3Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x6003554")]
			[Address(RVA = "0x11ABA70", Offset = "0x11ABA70", VA = "0x11ABA70")]
			private Prime192v3Holder()
			{
			}

			[Token(Token = "0x6003555")]
			[Address(RVA = "0x11ABA78", Offset = "0x11ABA78", VA = "0x11ABA78", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x2000694")]
		internal class Prime239v1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x6003557")]
			[Address(RVA = "0x11ABCB4", Offset = "0x11ABCB4", VA = "0x11ABCB4")]
			private Prime239v1Holder()
			{
			}

			[Token(Token = "0x6003558")]
			[Address(RVA = "0x11ABCBC", Offset = "0x11ABCBC", VA = "0x11ABCBC", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x2000695")]
		internal class Prime239v2Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x600355A")]
			[Address(RVA = "0x11ABEF8", Offset = "0x11ABEF8", VA = "0x11ABEF8")]
			private Prime239v2Holder()
			{
			}

			[Token(Token = "0x600355B")]
			[Address(RVA = "0x11ABF00", Offset = "0x11ABF00", VA = "0x11ABF00", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x2000696")]
		internal class Prime239v3Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x600355D")]
			[Address(RVA = "0x11AC13C", Offset = "0x11AC13C", VA = "0x11AC13C")]
			private Prime239v3Holder()
			{
			}

			[Token(Token = "0x600355E")]
			[Address(RVA = "0x11AC144", Offset = "0x11AC144", VA = "0x11AC144", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x2000697")]
		internal class Prime256v1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x6003560")]
			[Address(RVA = "0x11AC380", Offset = "0x11AC380", VA = "0x11AC380")]
			private Prime256v1Holder()
			{
			}

			[Token(Token = "0x6003561")]
			[Address(RVA = "0x11AC388", Offset = "0x11AC388", VA = "0x11AC388", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x2000698")]
		internal class C2pnb163v1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x6003563")]
			[Address(RVA = "0x11A907C", Offset = "0x11A907C", VA = "0x11A907C")]
			private C2pnb163v1Holder()
			{
			}

			[Token(Token = "0x6003564")]
			[Address(RVA = "0x11A908C", Offset = "0x11A908C", VA = "0x11A908C", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x2000699")]
		internal class C2pnb163v2Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x6003566")]
			[Address(RVA = "0x11A9634", Offset = "0x11A9634", VA = "0x11A9634")]
			private C2pnb163v2Holder()
			{
			}

			[Token(Token = "0x6003567")]
			[Address(RVA = "0x11A963C", Offset = "0x11A963C", VA = "0x11A963C", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x200069A")]
		internal class C2pnb163v3Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x6003569")]
			[Address(RVA = "0x11A984C", Offset = "0x11A984C", VA = "0x11A984C")]
			private C2pnb163v3Holder()
			{
			}

			[Token(Token = "0x600356A")]
			[Address(RVA = "0x11A9854", Offset = "0x11A9854", VA = "0x11A9854", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x200069B")]
		internal class C2pnb176w1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x600356C")]
			[Address(RVA = "0x11A9A64", Offset = "0x11A9A64", VA = "0x11A9A64")]
			private C2pnb176w1Holder()
			{
			}

			[Token(Token = "0x600356D")]
			[Address(RVA = "0x11A9A6C", Offset = "0x11A9A6C", VA = "0x11A9A6C", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x200069C")]
		internal class C2tnb191v1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x600356F")]
			[Address(RVA = "0x11AA518", Offset = "0x11AA518", VA = "0x11AA518")]
			private C2tnb191v1Holder()
			{
			}

			[Token(Token = "0x6003570")]
			[Address(RVA = "0x11AA520", Offset = "0x11AA520", VA = "0x11AA520", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x200069D")]
		internal class C2tnb191v2Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x6003572")]
			[Address(RVA = "0x11AA740", Offset = "0x11AA740", VA = "0x11AA740")]
			private C2tnb191v2Holder()
			{
			}

			[Token(Token = "0x6003573")]
			[Address(RVA = "0x11AA748", Offset = "0x11AA748", VA = "0x11AA748", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x200069E")]
		internal class C2tnb191v3Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x6003575")]
			[Address(RVA = "0x11AA958", Offset = "0x11AA958", VA = "0x11AA958")]
			private C2tnb191v3Holder()
			{
			}

			[Token(Token = "0x6003576")]
			[Address(RVA = "0x11AA960", Offset = "0x11AA960", VA = "0x11AA960", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x200069F")]
		internal class C2pnb208w1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x6003578")]
			[Address(RVA = "0x11A9C88", Offset = "0x11A9C88", VA = "0x11A9C88")]
			private C2pnb208w1Holder()
			{
			}

			[Token(Token = "0x6003579")]
			[Address(RVA = "0x11A9C90", Offset = "0x11A9C90", VA = "0x11A9C90", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006A0")]
		internal class C2tnb239v1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x600357B")]
			[Address(RVA = "0x11AAB70", Offset = "0x11AAB70", VA = "0x11AAB70")]
			private C2tnb239v1Holder()
			{
			}

			[Token(Token = "0x600357C")]
			[Address(RVA = "0x11AAB78", Offset = "0x11AAB78", VA = "0x11AAB78", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006A1")]
		internal class C2tnb239v2Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x600357E")]
			[Address(RVA = "0x11AAD88", Offset = "0x11AAD88", VA = "0x11AAD88")]
			private C2tnb239v2Holder()
			{
			}

			[Token(Token = "0x600357F")]
			[Address(RVA = "0x11AAD90", Offset = "0x11AAD90", VA = "0x11AAD90", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006A2")]
		internal class C2tnb239v3Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x6003581")]
			[Address(RVA = "0x11AAFA0", Offset = "0x11AAFA0", VA = "0x11AAFA0")]
			private C2tnb239v3Holder()
			{
			}

			[Token(Token = "0x6003582")]
			[Address(RVA = "0x11AAFA8", Offset = "0x11AAFA8", VA = "0x11AAFA8", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006A3")]
		internal class C2pnb272w1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x6003584")]
			[Address(RVA = "0x11A9EAC", Offset = "0x11A9EAC", VA = "0x11A9EAC")]
			private C2pnb272w1Holder()
			{
			}

			[Token(Token = "0x6003585")]
			[Address(RVA = "0x11A9EB4", Offset = "0x11A9EB4", VA = "0x11A9EB4", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006A4")]
		internal class C2pnb304w1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x6003587")]
			[Address(RVA = "0x11AA0D0", Offset = "0x11AA0D0", VA = "0x11AA0D0")]
			private C2pnb304w1Holder()
			{
			}

			[Token(Token = "0x6003588")]
			[Address(RVA = "0x11AA0D8", Offset = "0x11AA0D8", VA = "0x11AA0D8", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006A5")]
		internal class C2tnb359v1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x600358A")]
			[Address(RVA = "0x11AB1B8", Offset = "0x11AB1B8", VA = "0x11AB1B8")]
			private C2tnb359v1Holder()
			{
			}

			[Token(Token = "0x600358B")]
			[Address(RVA = "0x11AB1C0", Offset = "0x11AB1C0", VA = "0x11AB1C0", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006A6")]
		internal class C2pnb368w1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x600358D")]
			[Address(RVA = "0x11AA2F4", Offset = "0x11AA2F4", VA = "0x11AA2F4")]
			private C2pnb368w1Holder()
			{
			}

			[Token(Token = "0x600358E")]
			[Address(RVA = "0x11AA2FC", Offset = "0x11AA2FC", VA = "0x11AA2FC", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006A7")]
		internal class C2tnb431r1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x6003590")]
			[Address(RVA = "0x11AB3D0", Offset = "0x11AB3D0", VA = "0x11AB3D0")]
			private C2tnb431r1Holder()
			{
			}

			[Token(Token = "0x6003591")]
			[Address(RVA = "0x11AB3D8", Offset = "0x11AB3D8", VA = "0x11AB3D8", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x4001192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly IDictionary objIds;

		[Token(Token = "0x4001193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly IDictionary curves;

		[Token(Token = "0x4001194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly IDictionary names;

		[Token(Token = "0x170003E0")]
		public static IEnumerable Names
		{
			[Token(Token = "0x6002162")]
			[Address(RVA = "0x131AAE8", Offset = "0x131AAE8", VA = "0x131AAE8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600215B")]
		[Address(RVA = "0x131ABF8", Offset = "0x131ABF8", VA = "0x131ABF8")]
		private X962NamedCurves()
		{
		}

		[Token(Token = "0x600215C")]
		[Address(RVA = "0x131AC00", Offset = "0x131AC00", VA = "0x131AC00")]
		private static void DefineCurve(string name, DerObjectIdentifier oid, X9ECParametersHolder holder)
		{
		}

		[Token(Token = "0x600215D")]
		[Address(RVA = "0x131AE30", Offset = "0x131AE30", VA = "0x131AE30")]
		static X962NamedCurves()
		{
		}

		[Token(Token = "0x600215E")]
		[Address(RVA = "0x131A450", Offset = "0x131A450", VA = "0x131A450")]
		public static X9ECParameters GetByName(string name)
		{
			return null;
		}

		[Token(Token = "0x600215F")]
		[Address(RVA = "0x131A838", Offset = "0x131A838", VA = "0x131A838")]
		public static X9ECParameters GetByOid(DerObjectIdentifier oid)
		{
			return null;
		}

		[Token(Token = "0x6002160")]
		[Address(RVA = "0x131A618", Offset = "0x131A618", VA = "0x131A618")]
		public static DerObjectIdentifier GetOid(string name)
		{
			return null;
		}

		[Token(Token = "0x6002161")]
		[Address(RVA = "0x131B5CC", Offset = "0x131B5CC", VA = "0x131B5CC")]
		public static string GetName(DerObjectIdentifier oid)
		{
			return null;
		}
	}
	[Token(Token = "0x20003B9")]
	public class X962Parameters : Asn1Encodable, IAsn1Choice
	{
		[Token(Token = "0x4001195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Asn1Object _params;

		[Token(Token = "0x170003E1")]
		public bool IsNamedCurve
		{
			[Token(Token = "0x6002166")]
			[Address(RVA = "0x11AC660", Offset = "0x11AC660", VA = "0x11AC660")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170003E2")]
		public Asn1Object Parameters
		{
			[Token(Token = "0x6002167")]
			[Address(RVA = "0x11AC6E4", Offset = "0x11AC6E4", VA = "0x11AC6E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002163")]
		[Address(RVA = "0x11AC5C4", Offset = "0x11AC5C4", VA = "0x11AC5C4")]
		public X962Parameters(X9ECParameters ecParameters)
		{
		}

		[Token(Token = "0x6002164")]
		[Address(RVA = "0x11AC608", Offset = "0x11AC608", VA = "0x11AC608")]
		public X962Parameters(DerObjectIdentifier namedCurve)
		{
		}

		[Token(Token = "0x6002165")]
		[Address(RVA = "0x11AC634", Offset = "0x11AC634", VA = "0x11AC634")]
		public X962Parameters(Asn1Object obj)
		{
		}

		[Token(Token = "0x6002168")]
		[Address(RVA = "0x11AC6EC", Offset = "0x11AC6EC", VA = "0x11AC6EC", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
	[Token(Token = "0x20003BA")]
	public class X9Curve : Asn1Encodable
	{
		[Token(Token = "0x4001196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ECCurve curve;

		[Token(Token = "0x4001197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly byte[] seed;

		[Token(Token = "0x4001198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly DerObjectIdentifier fieldIdentifier;

		[Token(Token = "0x170003E3")]
		public ECCurve Curve
		{
			[Token(Token = "0x600216C")]
			[Address(RVA = "0x11AD218", Offset = "0x11AD218", VA = "0x11AD218")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002169")]
		[Address(RVA = "0x11AC6F4", Offset = "0x11AC6F4", VA = "0x11AC6F4")]
		public X9Curve(ECCurve curve)
		{
		}

		[Token(Token = "0x600216A")]
		[Address(RVA = "0x11AC6FC", Offset = "0x11AC6FC", VA = "0x11AC6FC")]
		public X9Curve(ECCurve curve, byte[] seed)
		{
		}

		[Token(Token = "0x600216B")]
		[Address(RVA = "0x11AC85C", Offset = "0x11AC85C", VA = "0x11AC85C")]
		public X9Curve(X9FieldID fieldID, Asn1Sequence seq)
		{
		}

		[Token(Token = "0x600216D")]
		[Address(RVA = "0x11AD220", Offset = "0x11AD220", VA = "0x11AD220")]
		public byte[] GetSeed()
		{
			return null;
		}

		[Token(Token = "0x600216E")]
		[Address(RVA = "0x11AD22C", Offset = "0x11AD22C", VA = "0x11AD22C", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
	[Token(Token = "0x20003BB")]
	public class X9ECParameters : Asn1Encodable
	{
		[Token(Token = "0x4001199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private X9FieldID fieldID;

		[Token(Token = "0x400119A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ECCurve curve;

		[Token(Token = "0x400119B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ECPoint g;

		[Token(Token = "0x400119C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private BigInteger n;

		[Token(Token = "0x400119D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private BigInteger h;

		[Token(Token = "0x400119E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private byte[] seed;

		[Token(Token = "0x170003E4")]
		public ECCurve Curve
		{
			[Token(Token = "0x6002173")]
			[Address(RVA = "0x11AE1C8", Offset = "0x11AE1C8", VA = "0x11AE1C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003E5")]
		public ECPoint G
		{
			[Token(Token = "0x6002174")]
			[Address(RVA = "0x11AE1D0", Offset = "0x11AE1D0", VA = "0x11AE1D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003E6")]
		public BigInteger N
		{
			[Token(Token = "0x6002175")]
			[Address(RVA = "0x11AE1D8", Offset = "0x11AE1D8", VA = "0x11AE1D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003E7")]
		public BigInteger H
		{
			[Token(Token = "0x6002176")]
			[Address(RVA = "0x11AE1E0", Offset = "0x11AE1E0", VA = "0x11AE1E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600216F")]
		[Address(RVA = "0x11AD5F4", Offset = "0x11AD5F4", VA = "0x11AD5F4")]
		public X9ECParameters(Asn1Sequence seq)
		{
		}

		[Token(Token = "0x6002170")]
		[Address(RVA = "0x11ADC68", Offset = "0x11ADC68", VA = "0x11ADC68")]
		public X9ECParameters(ECCurve curve, ECPoint g, BigInteger n)
		{
		}

		[Token(Token = "0x6002171")]
		[Address(RVA = "0x11ADD04", Offset = "0x11ADD04", VA = "0x11ADD04")]
		public X9ECParameters(ECCurve curve, ECPoint g, BigInteger n, BigInteger h)
		{
		}

		[Token(Token = "0x6002172")]
		[Address(RVA = "0x11A9254", Offset = "0x11A9254", VA = "0x11A9254")]
		public X9ECParameters(ECCurve curve, ECPoint g, BigInteger n, BigInteger h, byte[] seed)
		{
		}

		[Token(Token = "0x6002177")]
		[Address(RVA = "0x11AE254", Offset = "0x11AE254", VA = "0x11AE254")]
		public byte[] GetSeed()
		{
			return null;
		}

		[Token(Token = "0x6002178")]
		[Address(RVA = "0x11AE25C", Offset = "0x11AE25C", VA = "0x11AE25C", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
	[Token(Token = "0x20003BC")]
	public abstract class X9ECParametersHolder
	{
		[Token(Token = "0x400119F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private X9ECParameters parameters;

		[Token(Token = "0x170003E8")]
		public X9ECParameters Parameters
		{
			[Token(Token = "0x6002179")]
			[Address(RVA = "0x11AE53C", Offset = "0x11AE53C", VA = "0x11AE53C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600217A")]
		protected abstract X9ECParameters CreateParameters();

		[Token(Token = "0x600217B")]
		[Address(RVA = "0x11A9084", Offset = "0x11A9084", VA = "0x11A9084")]
		protected X9ECParametersHolder()
		{
		}
	}
	[Token(Token = "0x20003BD")]
	public class X9ECPoint : Asn1Encodable
	{
		[Token(Token = "0x40011A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ECPoint p;

		[Token(Token = "0x170003E9")]
		public ECPoint Point
		{
			[Token(Token = "0x600217E")]
			[Address(RVA = "0x11AE574", Offset = "0x11AE574", VA = "0x11AE574")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600217C")]
		[Address(RVA = "0x11AE4F4", Offset = "0x11AE4F4", VA = "0x11AE4F4")]
		public X9ECPoint(ECPoint p)
		{
		}

		[Token(Token = "0x600217D")]
		[Address(RVA = "0x11ADBFC", Offset = "0x11ADBFC", VA = "0x11ADBFC")]
		public X9ECPoint(ECCurve c, Asn1OctetString s)
		{
		}

		[Token(Token = "0x600217F")]
		[Address(RVA = "0x11AE57C", Offset = "0x11AE57C", VA = "0x11AE57C", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
	[Token(Token = "0x20003BE")]
	public class X9FieldElement : Asn1Encodable
	{
		[Token(Token = "0x40011A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ECFieldElement f;

		[Token(Token = "0x170003EA")]
		public ECFieldElement Value
		{
			[Token(Token = "0x6002183")]
			[Address(RVA = "0x11AE604", Offset = "0x11AE604", VA = "0x11AE604")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002180")]
		[Address(RVA = "0x11AD5C8", Offset = "0x11AD5C8", VA = "0x11AD5C8")]
		public X9FieldElement(ECFieldElement f)
		{
		}

		[Token(Token = "0x6002181")]
		[Address(RVA = "0x11AD060", Offset = "0x11AD060", VA = "0x11AD060")]
		public X9FieldElement(BigInteger p, Asn1OctetString s)
		{
		}

		[Token(Token = "0x6002182")]
		[Address(RVA = "0x11AD128", Offset = "0x11AD128", VA = "0x11AD128")]
		public X9FieldElement(int m, int k1, int k2, int k3, Asn1OctetString s)
		{
		}

		[Token(Token = "0x6002184")]
		[Address(RVA = "0x11AE60C", Offset = "0x11AE60C", VA = "0x11AE60C", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
	[Token(Token = "0x20003BF")]
	public class X9FieldID : Asn1Encodable
	{
		[Token(Token = "0x40011A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly DerObjectIdentifier id;

		[Token(Token = "0x40011A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Asn1Object parameters;

		[Token(Token = "0x170003EB")]
		public DerObjectIdentifier Identifier
		{
			[Token(Token = "0x6002189")]
			[Address(RVA = "0x11AE7F0", Offset = "0x11AE7F0", VA = "0x11AE7F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003EC")]
		public Asn1Object Parameters
		{
			[Token(Token = "0x600218A")]
			[Address(RVA = "0x11AE7F8", Offset = "0x11AE7F8", VA = "0x11AE7F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002185")]
		[Address(RVA = "0x11ADD0C", Offset = "0x11ADD0C", VA = "0x11ADD0C")]
		public X9FieldID(BigInteger primeP)
		{
		}

		[Token(Token = "0x6002186")]
		[Address(RVA = "0x11ADDB8", Offset = "0x11ADDB8", VA = "0x11ADDB8")]
		public X9FieldID(int m, int k1)
		{
		}

		[Token(Token = "0x6002187")]
		[Address(RVA = "0x11ADDC4", Offset = "0x11ADDC4", VA = "0x11ADDC4")]
		public X9FieldID(int m, int k1, int k2, int k3)
		{
		}

		[Token(Token = "0x6002188")]
		[Address(RVA = "0x11ADAF8", Offset = "0x11ADAF8", VA = "0x11ADAF8")]
		internal X9FieldID(Asn1Sequence seq)
		{
		}

		[Token(Token = "0x600218B")]
		[Address(RVA = "0x11AE800", Offset = "0x11AE800", VA = "0x11AE800", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
	[Token(Token = "0x20003C0")]
	public abstract class X9IntegerConverter
	{
		[Token(Token = "0x600218C")]
		[Address(RVA = "0x11AE6C4", Offset = "0x11AE6C4", VA = "0x11AE6C4")]
		public static int GetByteLength(ECFieldElement fe)
		{
			return default(int);
		}

		[Token(Token = "0x600218D")]
		[Address(RVA = "0x11AE8F8", Offset = "0x11AE8F8", VA = "0x11AE8F8")]
		public static int GetByteLength(ECCurve c)
		{
			return default(int);
		}

		[Token(Token = "0x600218E")]
		[Address(RVA = "0x11AE6FC", Offset = "0x11AE6FC", VA = "0x11AE6FC")]
		public static byte[] IntegerToBytes(BigInteger s, int qLength)
		{
			return null;
		}

		[Token(Token = "0x600218F")]
		[Address(RVA = "0x11AE930", Offset = "0x11AE930", VA = "0x11AE930")]
		protected X9IntegerConverter()
		{
		}
	}
	[Token(Token = "0x20003C1")]
	public abstract class X9ObjectIdentifiers
	{
		[Token(Token = "0x40011A4")]
		internal const string AnsiX962 = "1.2.840.10045";

		[Token(Token = "0x40011A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly DerObjectIdentifier ansi_X9_62;

		[Token(Token = "0x40011A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly DerObjectIdentifier IdFieldType;

		[Token(Token = "0x40011A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly DerObjectIdentifier PrimeField;

		[Token(Token = "0x40011A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly DerObjectIdentifier CharacteristicTwoField;

		[Token(Token = "0x40011A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly DerObjectIdentifier GNBasis;

		[Token(Token = "0x40011AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly DerObjectIdentifier TPBasis;

		[Token(Token = "0x40011AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly DerObjectIdentifier PPBasis;

		[Token(Token = "0x40011AC")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x82335C", Offset = "0x82335C")]
		public const string IdECSigType = "1.2.840.10045.4";

		[Token(Token = "0x40011AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static readonly DerObjectIdentifier id_ecSigType;

		[Token(Token = "0x40011AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static readonly DerObjectIdentifier ECDsaWithSha1;

		[Token(Token = "0x40011AF")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x823394", Offset = "0x823394")]
		public const string IdPublicKeyType = "1.2.840.10045.2";

		[Token(Token = "0x40011B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static readonly DerObjectIdentifier id_publicKeyType;

		[Token(Token = "0x40011B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static readonly DerObjectIdentifier IdECPublicKey;

		[Token(Token = "0x40011B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static readonly DerObjectIdentifier ECDsaWithSha2;

		[Token(Token = "0x40011B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static readonly DerObjectIdentifier ECDsaWithSha224;

		[Token(Token = "0x40011B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static readonly DerObjectIdentifier ECDsaWithSha256;

		[Token(Token = "0x40011B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static readonly DerObjectIdentifier ECDsaWithSha384;

		[Token(Token = "0x40011B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static readonly DerObjectIdentifier ECDsaWithSha512;

		[Token(Token = "0x40011B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static readonly DerObjectIdentifier EllipticCurve;

		[Token(Token = "0x40011B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static readonly DerObjectIdentifier CTwoCurve;

		[Token(Token = "0x40011B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public static readonly DerObjectIdentifier C2Pnb163v1;

		[Token(Token = "0x40011BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public static readonly DerObjectIdentifier C2Pnb163v2;

		[Token(Token = "0x40011BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public static readonly DerObjectIdentifier C2Pnb163v3;

		[Token(Token = "0x40011BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public static readonly DerObjectIdentifier C2Pnb176w1;

		[Token(Token = "0x40011BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public static readonly DerObjectIdentifier C2Tnb191v1;

		[Token(Token = "0x40011BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public static readonly DerObjectIdentifier C2Tnb191v2;

		[Token(Token = "0x40011BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public static readonly DerObjectIdentifier C2Tnb191v3;

		[Token(Token = "0x40011C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public static readonly DerObjectIdentifier C2Onb191v4;

		[Token(Token = "0x40011C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public static readonly DerObjectIdentifier C2Onb191v5;

		[Token(Token = "0x40011C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public static readonly DerObjectIdentifier C2Pnb208w1;

		[Token(Token = "0x40011C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public static readonly DerObjectIdentifier C2Tnb239v1;

		[Token(Token = "0x40011C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public static readonly DerObjectIdentifier C2Tnb239v2;

		[Token(Token = "0x40011C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public static readonly DerObjectIdentifier C2Tnb239v3;

		[Token(Token = "0x40011C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public static readonly DerObjectIdentifier C2Onb239v4;

		[Token(Token = "0x40011C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public static readonly DerObjectIdentifier C2Onb239v5;

		[Token(Token = "0x40011C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public static readonly DerObjectIdentifier C2Pnb272w1;

		[Token(Token = "0x40011C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public static readonly DerObjectIdentifier C2Pnb304w1;

		[Token(Token = "0x40011CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public static readonly DerObjectIdentifier C2Tnb359v1;

		[Token(Token = "0x40011CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public static readonly DerObjectIdentifier C2Pnb368w1;

		[Token(Token = "0x40011CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public static readonly DerObjectIdentifier C2Tnb431r1;

		[Token(Token = "0x40011CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public static readonly DerObjectIdentifier PrimeCurve;

		[Token(Token = "0x40011CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public static readonly DerObjectIdentifier Prime192v1;

		[Token(Token = "0x40011CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public static readonly DerObjectIdentifier Prime192v2;

		[Token(Token = "0x40011D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public static readonly DerObjectIdentifier Prime192v3;

		[Token(Token = "0x40011D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public static readonly DerObjectIdentifier Prime239v1;

		[Token(Token = "0x40011D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public static readonly DerObjectIdentifier Prime239v2;

		[Token(Token = "0x40011D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public static readonly DerObjectIdentifier Prime239v3;

		[Token(Token = "0x40011D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public static readonly DerObjectIdentifier Prime256v1;

		[Token(Token = "0x40011D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public static readonly DerObjectIdentifier IdDsa;

		[Token(Token = "0x40011D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public static readonly DerObjectIdentifier IdDsaWithSha1;

		[Token(Token = "0x40011D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public static readonly DerObjectIdentifier X9x63Scheme;

		[Token(Token = "0x40011D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public static readonly DerObjectIdentifier DHSinglePassStdDHSha1KdfScheme;

		[Token(Token = "0x40011D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public static readonly DerObjectIdentifier DHSinglePassCofactorDHSha1KdfScheme;

		[Token(Token = "0x40011DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public static readonly DerObjectIdentifier MqvSinglePassSha1KdfScheme;

		[Token(Token = "0x40011DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public static readonly DerObjectIdentifier ansi_x9_42;

		[Token(Token = "0x40011DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public static readonly DerObjectIdentifier DHPublicNumber;

		[Token(Token = "0x40011DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public static readonly DerObjectIdentifier X9x42Schemes;

		[Token(Token = "0x40011DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public static readonly DerObjectIdentifier DHStatic;

		[Token(Token = "0x40011DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public static readonly DerObjectIdentifier DHEphem;

		[Token(Token = "0x40011E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public static readonly DerObjectIdentifier DHOneFlow;

		[Token(Token = "0x40011E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public static readonly DerObjectIdentifier DHHybrid1;

		[Token(Token = "0x40011E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public static readonly DerObjectIdentifier DHHybrid2;

		[Token(Token = "0x40011E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public static readonly DerObjectIdentifier DHHybridOneFlow;

		[Token(Token = "0x40011E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public static readonly DerObjectIdentifier Mqv2;

		[Token(Token = "0x40011E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		public static readonly DerObjectIdentifier Mqv1;

		[Token(Token = "0x6002190")]
		[Address(RVA = "0x11AE938", Offset = "0x11AE938", VA = "0x11AE938")]
		protected X9ObjectIdentifiers()
		{
		}
	}
}
namespace Org.BouncyCastle.Asn1.X509
{
	[Token(Token = "0x20003C2")]
	public class AlgorithmIdentifier : Asn1Encodable
	{
		[Token(Token = "0x40011E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly DerObjectIdentifier objectID;

		[Token(Token = "0x40011E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Asn1Encodable parameters;

		[Token(Token = "0x40011E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly bool parametersDefined;

		[Token(Token = "0x170003ED")]
		public virtual DerObjectIdentifier ObjectID
		{
			[Token(Token = "0x6002198")]
			[Address(RVA = "0x1307008", Offset = "0x1307008", VA = "0x1307008", Slot = "6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003EE")]
		public Asn1Encodable Parameters
		{
			[Token(Token = "0x6002199")]
			[Address(RVA = "0x1307010", Offset = "0x1307010", VA = "0x1307010")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002192")]
		[Address(RVA = "0x1306BF4", Offset = "0x1306BF4", VA = "0x1306BF4")]
		public static AlgorithmIdentifier GetInstance(Asn1TaggedObject obj, bool explicitly)
		{
			return null;
		}

		[Token(Token = "0x6002193")]
		[Address(RVA = "0x1306C10", Offset = "0x1306C10", VA = "0x1306C10")]
		public static AlgorithmIdentifier GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x6002194")]
		[Address(RVA = "0x1306D70", Offset = "0x1306D70", VA = "0x1306D70")]
		public AlgorithmIdentifier(DerObjectIdentifier objectID)
		{
		}

		[Token(Token = "0x6002195")]
		[Address(RVA = "0x1306D9C", Offset = "0x1306D9C", VA = "0x1306D9C")]
		public AlgorithmIdentifier(string objectID)
		{
		}

		[Token(Token = "0x6002196")]
		[Address(RVA = "0x1306FC8", Offset = "0x1306FC8", VA = "0x1306FC8")]
		public AlgorithmIdentifier(DerObjectIdentifier objectID, Asn1Encodable parameters)
		{
		}

		[Token(Token = "0x6002197")]
		[Address(RVA = "0x1306E18", Offset = "0x1306E18", VA = "0x1306E18")]
		internal AlgorithmIdentifier(Asn1Sequence seq)
		{
		}

		[Token(Token = "0x600219A")]
		[Address(RVA = "0x1307018", Offset = "0x1307018", VA = "0x1307018", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
	[Token(Token = "0x20003C3")]
	public class BasicConstraints : Asn1Encodable
	{
		[Token(Token = "0x40011E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly DerBoolean cA;

		[Token(Token = "0x40011EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly DerInteger pathLenConstraint;

		[Token(Token = "0x170003EF")]
		public BigInteger PathLenConstraint
		{
			[Token(Token = "0x60021A1")]
			[Address(RVA = "0x13077C4", Offset = "0x13077C4", VA = "0x13077C4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600219B")]
		[Address(RVA = "0x13071A4", Offset = "0x13071A4", VA = "0x13071A4")]
		public static BasicConstraints GetInstance(Asn1TaggedObject obj, bool explicitly)
		{
			return null;
		}

		[Token(Token = "0x600219C")]
		[Address(RVA = "0x13071C0", Offset = "0x13071C0", VA = "0x13071C0")]
		public static BasicConstraints GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x600219D")]
		[Address(RVA = "0x130739C", Offset = "0x130739C", VA = "0x130739C")]
		private BasicConstraints(Asn1Sequence seq)
		{
		}

		[Token(Token = "0x600219E")]
		[Address(RVA = "0x1307678", Offset = "0x1307678", VA = "0x1307678")]
		public BasicConstraints(bool cA)
		{
		}

		[Token(Token = "0x600219F")]
		[Address(RVA = "0x1307704", Offset = "0x1307704", VA = "0x1307704")]
		public BasicConstraints(int pathLenConstraint)
		{
		}

		[Token(Token = "0x60021A0")]
		[Address(RVA = "0x13077B0", Offset = "0x13077B0", VA = "0x13077B0")]
		public bool IsCA()
		{
			return default(bool);
		}

		[Token(Token = "0x60021A2")]
		[Address(RVA = "0x13077D8", Offset = "0x13077D8", VA = "0x13077D8", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}

		[Token(Token = "0x60021A3")]
		[Address(RVA = "0x13079CC", Offset = "0x13079CC", VA = "0x13079CC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20003C4")]
	public class CrlDistPoint : Asn1Encodable
	{
		[Token(Token = "0x40011EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal readonly Asn1Sequence seq;

		[Token(Token = "0x60021A4")]
		[Address(RVA = "0x130833C", Offset = "0x130833C", VA = "0x130833C")]
		public static CrlDistPoint GetInstance(Asn1TaggedObject obj, bool explicitly)
		{
			return null;
		}

		[Token(Token = "0x60021A5")]
		[Address(RVA = "0x1308358", Offset = "0x1308358", VA = "0x1308358")]
		public static CrlDistPoint GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x60021A6")]
		[Address(RVA = "0x13084DC", Offset = "0x13084DC", VA = "0x13084DC")]
		private CrlDistPoint(Asn1Sequence seq)
		{
		}

		[Token(Token = "0x60021A7")]
		[Address(RVA = "0x1308508", Offset = "0x1308508", VA = "0x1308508")]
		public CrlDistPoint(DistributionPoint[] points)
		{
		}

		[Token(Token = "0x60021A8")]
		[Address(RVA = "0x1308584", Offset = "0x1308584", VA = "0x1308584")]
		public DistributionPoint[] GetDistributionPoints()
		{
			return null;
		}

		[Token(Token = "0x60021A9")]
		[Address(RVA = "0x1308818", Offset = "0x1308818", VA = "0x1308818", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}

		[Token(Token = "0x60021AA")]
		[Address(RVA = "0x1308820", Offset = "0x1308820", VA = "0x1308820", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20003C5")]
	public class CrlNumber : DerInteger
	{
		[Token(Token = "0x170003F0")]
		public BigInteger Number
		{
			[Token(Token = "0x60021AC")]
			[Address(RVA = "0x1308F64", Offset = "0x1308F64", VA = "0x1308F64")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60021AB")]
		[Address(RVA = "0x1308F5C", Offset = "0x1308F5C", VA = "0x1308F5C")]
		public CrlNumber(BigInteger number)
		{
		}

		[Token(Token = "0x60021AD")]
		[Address(RVA = "0x1308F6C", Offset = "0x1308F6C", VA = "0x1308F6C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20003C6")]
	public class CrlReason : DerEnumerated
	{
		[Token(Token = "0x40011EC")]
		public const int Unspecified = 0;

		[Token(Token = "0x40011ED")]
		public const int KeyCompromise = 1;

		[Token(Token = "0x40011EE")]
		public const int CACompromise = 2;

		[Token(Token = "0x40011EF")]
		public const int AffiliationChanged = 3;

		[Token(Token = "0x40011F0")]
		public const int Superseded = 4;

		[Token(Token = "0x40011F1")]
		public const int CessationOfOperation = 5;

		[Token(Token = "0x40011F2")]
		public const int CertificateHold = 6;

		[Token(Token = "0x40011F3")]
		public const int RemoveFromCrl = 8;

		[Token(Token = "0x40011F4")]
		public const int PrivilegeWithdrawn = 9;

		[Token(Token = "0x40011F5")]
		public const int AACompromise = 10;

		[Token(Token = "0x40011F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly string[] ReasonString;

		[Token(Token = "0x60021AE")]
		[Address(RVA = "0x1308FD0", Offset = "0x1308FD0", VA = "0x1308FD0")]
		public CrlReason(int reason)
		{
		}

		[Token(Token = "0x60021AF")]
		[Address(RVA = "0x1309048", Offset = "0x1309048", VA = "0x1309048")]
		public CrlReason(DerEnumerated reason)
		{
		}

		[Token(Token = "0x60021B0")]
		[Address(RVA = "0x13090E0", Offset = "0x13090E0", VA = "0x13090E0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20003C7")]
	public class CertificateList : Asn1Encodable
	{
		[Token(Token = "0x40011F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly TbsCertificateList tbsCertList;

		[Token(Token = "0x40011F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly AlgorithmIdentifier sigAlgID;

		[Token(Token = "0x40011F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly DerBitString sig;

		[Token(Token = "0x170003F1")]
		public TbsCertificateList TbsCertList
		{
			[Token(Token = "0x60021B5")]
			[Address(RVA = "0x1307F3C", Offset = "0x1307F3C", VA = "0x1307F3C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003F2")]
		public AlgorithmIdentifier SignatureAlgorithm
		{
			[Token(Token = "0x60021B8")]
			[Address(RVA = "0x1308168", Offset = "0x1308168", VA = "0x1308168")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003F3")]
		public DerBitString Signature
		{
			[Token(Token = "0x60021B9")]
			[Address(RVA = "0x1308170", Offset = "0x1308170", VA = "0x1308170")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003F4")]
		public int Version
		{
			[Token(Token = "0x60021BA")]
			[Address(RVA = "0x1308178", Offset = "0x1308178", VA = "0x1308178")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170003F5")]
		public X509Name Issuer
		{
			[Token(Token = "0x60021BB")]
			[Address(RVA = "0x13081C4", Offset = "0x13081C4", VA = "0x13081C4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003F6")]
		public Time ThisUpdate
		{
			[Token(Token = "0x60021BC")]
			[Address(RVA = "0x13081E0", Offset = "0x13081E0", VA = "0x13081E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003F7")]
		public Time NextUpdate
		{
			[Token(Token = "0x60021BD")]
			[Address(RVA = "0x13081FC", Offset = "0x13081FC", VA = "0x13081FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60021B2")]
		[Address(RVA = "0x1307BB4", Offset = "0x1307BB4", VA = "0x1307BB4")]
		public static CertificateList GetInstance(Asn1TaggedObject obj, bool explicitly)
		{
			return null;
		}

		[Token(Token = "0x60021B3")]
		[Address(RVA = "0x1307BD0", Offset = "0x1307BD0", VA = "0x1307BD0")]
		public static CertificateList GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x60021B4")]
		[Address(RVA = "0x1307C74", Offset = "0x1307C74", VA = "0x1307C74")]
		private CertificateList(Asn1Sequence seq)
		{
		}

		[Token(Token = "0x60021B6")]
		[Address(RVA = "0x1307F44", Offset = "0x1307F44", VA = "0x1307F44")]
		public CrlEntry[] GetRevokedCertificates()
		{
			return null;
		}

		[Token(Token = "0x60021B7")]
		[Address(RVA = "0x13080B4", Offset = "0x13080B4", VA = "0x13080B4")]
		public IEnumerable GetRevokedCertificateEnumeration()
		{
			return null;
		}

		[Token(Token = "0x60021BE")]
		[Address(RVA = "0x1308218", Offset = "0x1308218", VA = "0x1308218", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
	[Token(Token = "0x20003C8")]
	public class DsaParameter : Asn1Encodable
	{
		[Token(Token = "0x40011FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal readonly DerInteger p;

		[Token(Token = "0x40011FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal readonly DerInteger q;

		[Token(Token = "0x40011FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal readonly DerInteger g;

		[Token(Token = "0x170003F8")]
		public BigInteger P
		{
			[Token(Token = "0x60021C3")]
			[Address(RVA = "0x130A940", Offset = "0x130A940", VA = "0x130A940")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003F9")]
		public BigInteger Q
		{
			[Token(Token = "0x60021C4")]
			[Address(RVA = "0x130A95C", Offset = "0x130A95C", VA = "0x130A95C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003FA")]
		public BigInteger G
		{
			[Token(Token = "0x60021C5")]
			[Address(RVA = "0x130A978", Offset = "0x130A978", VA = "0x130A978")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60021BF")]
		[Address(RVA = "0x130A580", Offset = "0x130A580", VA = "0x130A580")]
		public static DsaParameter GetInstance(Asn1TaggedObject obj, bool explicitly)
		{
			return null;
		}

		[Token(Token = "0x60021C0")]
		[Address(RVA = "0x130A59C", Offset = "0x130A59C", VA = "0x130A59C")]
		public static DsaParameter GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x60021C1")]
		[Address(RVA = "0x130A87C", Offset = "0x130A87C", VA = "0x130A87C")]
		public DsaParameter(BigInteger p, BigInteger q, BigInteger g)
		{
		}

		[Token(Token = "0x60021C2")]
		[Address(RVA = "0x130A710", Offset = "0x130A710", VA = "0x130A710")]
		private DsaParameter(Asn1Sequence seq)
		{
		}

		[Token(Token = "0x60021C6")]
		[Address(RVA = "0x130A994", Offset = "0x130A994", VA = "0x130A994", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
	[Token(Token = "0x20003C9")]
	public class DigestInfo : Asn1Encodable
	{
		[Token(Token = "0x40011FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly byte[] digest;

		[Token(Token = "0x40011FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly AlgorithmIdentifier algID;

		[Token(Token = "0x170003FB")]
		public AlgorithmIdentifier AlgorithmID
		{
			[Token(Token = "0x60021CB")]
			[Address(RVA = "0x130975C", Offset = "0x130975C", VA = "0x130975C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60021C7")]
		[Address(RVA = "0x1309478", Offset = "0x1309478", VA = "0x1309478")]
		public static DigestInfo GetInstance(Asn1TaggedObject obj, bool explicitly)
		{
			return null;
		}

		[Token(Token = "0x60021C8")]
		[Address(RVA = "0x1309494", Offset = "0x1309494", VA = "0x1309494")]
		public static DigestInfo GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x60021C9")]
		[Address(RVA = "0x1309724", Offset = "0x1309724", VA = "0x1309724")]
		public DigestInfo(AlgorithmIdentifier algID, byte[] digest)
		{
		}

		[Token(Token = "0x60021CA")]
		[Address(RVA = "0x1309614", Offset = "0x1309614", VA = "0x1309614")]
		private DigestInfo(Asn1Sequence seq)
		{
		}

		[Token(Token = "0x60021CC")]
		[Address(RVA = "0x1309764", Offset = "0x1309764", VA = "0x1309764")]
		public byte[] GetDigest()
		{
			return null;
		}

		[Token(Token = "0x60021CD")]
		[Address(RVA = "0x130976C", Offset = "0x130976C", VA = "0x130976C", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
	[Token(Token = "0x20003CA")]
	public class DistributionPoint : Asn1Encodable
	{
		[Token(Token = "0x40011FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal readonly DistributionPointName distributionPoint;

		[Token(Token = "0x4001200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal readonly ReasonFlags reasons;

		[Token(Token = "0x4001201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal readonly GeneralNames cRLIssuer;

		[Token(Token = "0x170003FC")]
		public DistributionPointName DistributionPointName
		{
			[Token(Token = "0x60021D2")]
			[Address(RVA = "0x1309B14", Offset = "0x1309B14", VA = "0x1309B14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003FD")]
		public ReasonFlags Reasons
		{
			[Token(Token = "0x60021D3")]
			[Address(RVA = "0x1309B1C", Offset = "0x1309B1C", VA = "0x1309B1C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003FE")]
		public GeneralNames CrlIssuer
		{
			[Token(Token = "0x60021D4")]
			[Address(RVA = "0x1309B24", Offset = "0x1309B24", VA = "0x1309B24")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60021CE")]
		[Address(RVA = "0x1309884", Offset = "0x1309884", VA = "0x1309884")]
		public static DistributionPoint GetInstance(Asn1TaggedObject obj, bool explicitly)
		{
			return null;
		}

		[Token(Token = "0x60021CF")]
		[Address(RVA = "0x13086A4", Offset = "0x13086A4", VA = "0x13086A4")]
		public static DistributionPoint GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x60021D0")]
		[Address(RVA = "0x13098A0", Offset = "0x13098A0", VA = "0x13098A0")]
		private DistributionPoint(Asn1Sequence seq)
		{
		}

		[Token(Token = "0x60021D1")]
		[Address(RVA = "0x1309AD4", Offset = "0x1309AD4", VA = "0x1309AD4")]
		public DistributionPoint(DistributionPointName distributionPointName, ReasonFlags reasons, GeneralNames crlIssuer)
		{
		}

		[Token(Token = "0x60021D5")]
		[Address(RVA = "0x1309B2C", Offset = "0x1309B2C", VA = "0x1309B2C", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}

		[Token(Token = "0x60021D6")]
		[Address(RVA = "0x1309E08", Offset = "0x1309E08", VA = "0x1309E08", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60021D7")]
		[Address(RVA = "0x1309F8C", Offset = "0x1309F8C", VA = "0x1309F8C")]
		private void appendObject(StringBuilder buf, string sep, string name, string val)
		{
		}
	}
	[Token(Token = "0x20003CB")]
	public class DistributionPointName : Asn1Encodable, IAsn1Choice
	{
		[Token(Token = "0x4001202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal readonly Asn1Encodable name;

		[Token(Token = "0x4001203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal readonly int type;

		[Token(Token = "0x4001204")]
		public const int FullName = 0;

		[Token(Token = "0x4001205")]
		public const int NameRelativeToCrlIssuer = 1;

		[Token(Token = "0x170003FF")]
		public int PointType
		{
			[Token(Token = "0x60021DC")]
			[Address(RVA = "0x130A2C8", Offset = "0x130A2C8", VA = "0x130A2C8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000400")]
		public Asn1Encodable Name
		{
			[Token(Token = "0x60021DD")]
			[Address(RVA = "0x130A2D0", Offset = "0x130A2D0", VA = "0x130A2D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60021D8")]
		[Address(RVA = "0x1309A18", Offset = "0x1309A18", VA = "0x1309A18")]
		public static DistributionPointName GetInstance(Asn1TaggedObject obj, bool explicitly)
		{
			return null;
		}

		[Token(Token = "0x60021D9")]
		[Address(RVA = "0x130A080", Offset = "0x130A080", VA = "0x130A080")]
		public static DistributionPointName GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x60021DA")]
		[Address(RVA = "0x130A25C", Offset = "0x130A25C", VA = "0x130A25C")]
		public DistributionPointName(int type, Asn1Encodable name)
		{
		}

		[Token(Token = "0x60021DB")]
		[Address(RVA = "0x130A298", Offset = "0x130A298", VA = "0x130A298")]
		public DistributionPointName(GeneralNames name)
		{
		}

		[Token(Token = "0x60021DE")]
		[Address(RVA = "0x130A200", Offset = "0x130A200", VA = "0x130A200")]
		public DistributionPointName(Asn1TaggedObject obj)
		{
		}

		[Token(Token = "0x60021DF")]
		[Address(RVA = "0x130A2D8", Offset = "0x130A2D8", VA = "0x130A2D8", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}

		[Token(Token = "0x60021E0")]
		[Address(RVA = "0x130A354", Offset = "0x130A354", VA = "0x130A354", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60021E1")]
		[Address(RVA = "0x130A48C", Offset = "0x130A48C", VA = "0x130A48C")]
		private void appendObject(StringBuilder buf, string sep, string name, string val)
		{
		}
	}
	[Token(Token = "0x20003CC")]
	public class GeneralName : Asn1Encodable, IAsn1Choice
	{
		[Token(Token = "0x4001206")]
		public const int OtherName = 0;

		[Token(Token = "0x4001207")]
		public const int Rfc822Name = 1;

		[Token(Token = "0x4001208")]
		public const int DnsName = 2;

		[Token(Token = "0x4001209")]
		public const int X400Address = 3;

		[Token(Token = "0x400120A")]
		public const int DirectoryName = 4;

		[Token(Token = "0x400120B")]
		public const int EdiPartyName = 5;

		[Token(Token = "0x400120C")]
		public const int UniformResourceIdentifier = 6;

		[Token(Token = "0x400120D")]
		public const int IPAddress = 7;

		[Token(Token = "0x400120E")]
		public const int RegisteredID = 8;

		[Token(Token = "0x400120F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal readonly Asn1Encodable obj;

		[Token(Token = "0x4001210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal readonly int tag;

		[Token(Token = "0x17000401")]
		public int TagNo
		{
			[Token(Token = "0x60021E8")]
			[Address(RVA = "0x130B54C", Offset = "0x130B54C", VA = "0x130B54C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000402")]
		public Asn1Encodable Name
		{
			[Token(Token = "0x60021E9")]
			[Address(RVA = "0x130B554", Offset = "0x130B554", VA = "0x130B554")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60021E2")]
		[Address(RVA = "0x130AAB8", Offset = "0x130AAB8", VA = "0x130AAB8")]
		public GeneralName(X509Name directoryName)
		{
		}

		[Token(Token = "0x60021E3")]
		[Address(RVA = "0x130AAEC", Offset = "0x130AAEC", VA = "0x130AAEC")]
		public GeneralName(Asn1Object name, int tag)
		{
		}

		[Token(Token = "0x60021E4")]
		[Address(RVA = "0x130AB28", Offset = "0x130AB28", VA = "0x130AB28")]
		public GeneralName(int tag, Asn1Encodable name)
		{
		}

		[Token(Token = "0x60021E5")]
		[Address(RVA = "0x130AB64", Offset = "0x130AB64", VA = "0x130AB64")]
		public GeneralName(int tag, string name)
		{
		}

		[Token(Token = "0x60021E6")]
		[Address(RVA = "0x130B004", Offset = "0x130B004", VA = "0x130B004")]
		public static GeneralName GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x60021E7")]
		[Address(RVA = "0x130B530", Offset = "0x130B530", VA = "0x130B530")]
		public static GeneralName GetInstance(Asn1TaggedObject tagObj, bool explicitly)
		{
			return null;
		}

		[Token(Token = "0x60021EA")]
		[Address(RVA = "0x130B55C", Offset = "0x130B55C", VA = "0x130B55C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60021EB")]
		[Address(RVA = "0x130ADD8", Offset = "0x130ADD8", VA = "0x130ADD8")]
		private byte[] toGeneralNameEncoding(string ip)
		{
			return null;
		}

		[Token(Token = "0x60021EC")]
		[Address(RVA = "0x130BD8C", Offset = "0x130BD8C", VA = "0x130BD8C")]
		private void parseIPv4Mask(string mask, byte[] addr, int offset)
		{
		}

		[Token(Token = "0x60021ED")]
		[Address(RVA = "0x130BC74", Offset = "0x130BC74", VA = "0x130BC74")]
		private void parseIPv4(string ip, byte[] addr, int offset)
		{
		}

		[Token(Token = "0x60021EE")]
		[Address(RVA = "0x130BBAC", Offset = "0x130BBAC", VA = "0x130BBAC")]
		private int[] parseMask(string mask)
		{
			return null;
		}

		[Token(Token = "0x60021EF")]
		[Address(RVA = "0x130BB14", Offset = "0x130BB14", VA = "0x130BB14")]
		private void copyInts(int[] parsedIp, byte[] addr, int offSet)
		{
		}

		[Token(Token = "0x60021F0")]
		[Address(RVA = "0x130B728", Offset = "0x130B728", VA = "0x130B728")]
		private int[] parseIPv6(string ip)
		{
			return null;
		}

		[Token(Token = "0x60021F1")]
		[Address(RVA = "0x130BE1C", Offset = "0x130BE1C", VA = "0x130BE1C", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
	[Token(Token = "0x20003CD")]
	public class GeneralNames : Asn1Encodable
	{
		[Token(Token = "0x4001211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly GeneralName[] names;

		[Token(Token = "0x60021F2")]
		[Address(RVA = "0x130BE9C", Offset = "0x130BE9C", VA = "0x130BE9C")]
		public static GeneralNames GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x60021F3")]
		[Address(RVA = "0x1309AB8", Offset = "0x1309AB8", VA = "0x1309AB8")]
		public static GeneralNames GetInstance(Asn1TaggedObject obj, bool explicitly)
		{
			return null;
		}

		[Token(Token = "0x60021F4")]
		[Address(RVA = "0x130C158", Offset = "0x130C158", VA = "0x130C158")]
		public GeneralNames(GeneralName name)
		{
		}

		[Token(Token = "0x60021F5")]
		[Address(RVA = "0x130C210", Offset = "0x130C210", VA = "0x130C210")]
		public GeneralNames(GeneralName[] names)
		{
		}

		[Token(Token = "0x60021F6")]
		[Address(RVA = "0x130C01C", Offset = "0x130C01C", VA = "0x130C01C")]
		private GeneralNames(Asn1Sequence seq)
		{
		}

		[Token(Token = "0x60021F7")]
		[Address(RVA = "0x130C2AC", Offset = "0x130C2AC", VA = "0x130C2AC")]
		public GeneralName[] GetNames()
		{
			return null;
		}

		[Token(Token = "0x60021F8")]
		[Address(RVA = "0x130C32C", Offset = "0x130C32C", VA = "0x130C32C", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}

		[Token(Token = "0x60021F9")]
		[Address(RVA = "0x130C394", Offset = "0x130C394", VA = "0x130C394", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20003CE")]
	public class IssuingDistributionPoint : Asn1Encodable
	{
		[Token(Token = "0x4001212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly DistributionPointName _distributionPoint;

		[Token(Token = "0x4001213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly bool _onlyContainsUserCerts;

		[Token(Token = "0x4001214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private readonly bool _onlyContainsCACerts;

		[Token(Token = "0x4001215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ReasonFlags _onlySomeReasons;

		[Token(Token = "0x4001216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly bool _indirectCRL;

		[Token(Token = "0x4001217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private readonly bool _onlyContainsAttributeCerts;

		[Token(Token = "0x4001218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly Asn1Sequence seq;

		[Token(Token = "0x17000403")]
		public bool OnlyContainsUserCerts
		{
			[Token(Token = "0x60021FE")]
			[Address(RVA = "0x130CEA0", Offset = "0x130CEA0", VA = "0x130CEA0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000404")]
		public bool OnlyContainsCACerts
		{
			[Token(Token = "0x60021FF")]
			[Address(RVA = "0x130CEA8", Offset = "0x130CEA8", VA = "0x130CEA8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000405")]
		public bool IsIndirectCrl
		{
			[Token(Token = "0x6002200")]
			[Address(RVA = "0x130CEB0", Offset = "0x130CEB0", VA = "0x130CEB0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000406")]
		public bool OnlyContainsAttributeCerts
		{
			[Token(Token = "0x6002201")]
			[Address(RVA = "0x130CEB8", Offset = "0x130CEB8", VA = "0x130CEB8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000407")]
		public DistributionPointName DistributionPoint
		{
			[Token(Token = "0x6002202")]
			[Address(RVA = "0x130CEC0", Offset = "0x130CEC0", VA = "0x130CEC0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000408")]
		public ReasonFlags OnlySomeReasons
		{
			[Token(Token = "0x6002203")]
			[Address(RVA = "0x130CEC8", Offset = "0x130CEC8", VA = "0x130CEC8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60021FA")]
		[Address(RVA = "0x130C4F0", Offset = "0x130C4F0", VA = "0x130C4F0")]
		public static IssuingDistributionPoint GetInstance(Asn1TaggedObject obj, bool explicitly)
		{
			return null;
		}

		[Token(Token = "0x60021FB")]
		[Address(RVA = "0x130C50C", Offset = "0x130C50C", VA = "0x130C50C")]
		public static IssuingDistributionPoint GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x60021FC")]
		[Address(RVA = "0x130C940", Offset = "0x130C940", VA = "0x130C940")]
		public IssuingDistributionPoint(DistributionPointName distributionPoint, bool onlyContainsUserCerts, bool onlyContainsCACerts, ReasonFlags onlySomeReasons, bool indirectCRL, bool onlyContainsAttributeCerts)
		{
		}

		[Token(Token = "0x60021FD")]
		[Address(RVA = "0x130C68C", Offset = "0x130C68C", VA = "0x130C68C")]
		private IssuingDistributionPoint(Asn1Sequence seq)
		{
		}

		[Token(Token = "0x6002204")]
		[Address(RVA = "0x130CED0", Offset = "0x130CED0", VA = "0x130CED0", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}

		[Token(Token = "0x6002205")]
		[Address(RVA = "0x130CED8", Offset = "0x130CED8", VA = "0x130CED8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6002206")]
		[Address(RVA = "0x130D114", Offset = "0x130D114", VA = "0x130D114")]
		private void appendObject(StringBuilder buf, string sep, string name, string val)
		{
		}
	}
	[Token(Token = "0x20003CF")]
	public class KeyUsage : DerBitString
	{
		[Token(Token = "0x4001219")]
		public const int DigitalSignature = 128;

		[Token(Token = "0x400121A")]
		public const int NonRepudiation = 64;

		[Token(Token = "0x400121B")]
		public const int KeyEncipherment = 32;

		[Token(Token = "0x400121C")]
		public const int DataEncipherment = 16;

		[Token(Token = "0x400121D")]
		public const int KeyAgreement = 8;

		[Token(Token = "0x400121E")]
		public const int KeyCertSign = 4;

		[Token(Token = "0x400121F")]
		public const int CrlSign = 2;

		[Token(Token = "0x4001220")]
		public const int EncipherOnly = 1;

		[Token(Token = "0x4001221")]
		public const int DecipherOnly = 32768;

		[Token(Token = "0x6002207")]
		[Address(RVA = "0x130D208", Offset = "0x130D208", VA = "0x130D208")]
		public new static KeyUsage GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x6002208")]
		[Address(RVA = "0x130D3A0", Offset = "0x130D3A0", VA = "0x130D3A0")]
		public KeyUsage(int usage)
		{
		}

		[Token(Token = "0x6002209")]
		[Address(RVA = "0x130D31C", Offset = "0x130D31C", VA = "0x130D31C")]
		private KeyUsage(DerBitString usage)
		{
		}

		[Token(Token = "0x600220A")]
		[Address(RVA = "0x130D438", Offset = "0x130D438", VA = "0x130D438", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20003D0")]
	public class RsaPublicKeyStructure : Asn1Encodable
	{
		[Token(Token = "0x4001222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BigInteger modulus;

		[Token(Token = "0x4001223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BigInteger publicExponent;

		[Token(Token = "0x17000409")]
		public BigInteger Modulus
		{
			[Token(Token = "0x600220F")]
			[Address(RVA = "0x130D9AC", Offset = "0x130D9AC", VA = "0x130D9AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700040A")]
		public BigInteger PublicExponent
		{
			[Token(Token = "0x6002210")]
			[Address(RVA = "0x130D9B4", Offset = "0x130D9B4", VA = "0x130D9B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600220B")]
		[Address(RVA = "0x130D590", Offset = "0x130D590", VA = "0x130D590")]
		public static RsaPublicKeyStructure GetInstance(Asn1TaggedObject obj, bool explicitly)
		{
			return null;
		}

		[Token(Token = "0x600220C")]
		[Address(RVA = "0x130D5AC", Offset = "0x130D5AC", VA = "0x130D5AC")]
		public static RsaPublicKeyStructure GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x600220D")]
		[Address(RVA = "0x130D878", Offset = "0x130D878", VA = "0x130D878")]
		public RsaPublicKeyStructure(BigInteger modulus, BigInteger publicExponent)
		{
		}

		[Token(Token = "0x600220E")]
		[Address(RVA = "0x130D720", Offset = "0x130D720", VA = "0x130D720")]
		private RsaPublicKeyStructure(Asn1Sequence seq)
		{
		}

		[Token(Token = "0x6002211")]
		[Address(RVA = "0x130D9BC", Offset = "0x130D9BC", VA = "0x130D9BC", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
	[Token(Token = "0x20003D1")]
	public class ReasonFlags : DerBitString
	{
		[Token(Token = "0x4001224")]
		public const int Unused = 128;

		[Token(Token = "0x4001225")]
		public const int KeyCompromise = 64;

		[Token(Token = "0x4001226")]
		public const int CACompromise = 32;

		[Token(Token = "0x4001227")]
		public const int AffiliationChanged = 16;

		[Token(Token = "0x4001228")]
		public const int Superseded = 8;

		[Token(Token = "0x4001229")]
		public const int CessationOfOperation = 4;

		[Token(Token = "0x400122A")]
		public const int CertificateHold = 2;

		[Token(Token = "0x400122B")]
		public const int PrivilegeWithdrawn = 1;

		[Token(Token = "0x400122C")]
		public const int AACompromise = 32768;

		[Token(Token = "0x6002212")]
		[Address(RVA = "0x130D4F8", Offset = "0x130D4F8", VA = "0x130D4F8")]
		public ReasonFlags(int reasons)
		{
		}

		[Token(Token = "0x6002213")]
		[Address(RVA = "0x1309A34", Offset = "0x1309A34", VA = "0x1309A34")]
		public ReasonFlags(DerBitString reasons)
		{
		}
	}
	[Token(Token = "0x20003D2")]
	public class SubjectPublicKeyInfo : Asn1Encodable
	{
		[Token(Token = "0x400122D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly AlgorithmIdentifier algID;

		[Token(Token = "0x400122E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly DerBitString keyData;

		[Token(Token = "0x1700040B")]
		public AlgorithmIdentifier AlgorithmID
		{
			[Token(Token = "0x6002219")]
			[Address(RVA = "0x130DE2C", Offset = "0x130DE2C", VA = "0x130DE2C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700040C")]
		public DerBitString PublicKeyData
		{
			[Token(Token = "0x600221B")]
			[Address(RVA = "0x130DE54", Offset = "0x130DE54", VA = "0x130DE54")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002214")]
		[Address(RVA = "0x130DAF8", Offset = "0x130DAF8", VA = "0x130DAF8")]
		public static SubjectPublicKeyInfo GetInstance(Asn1TaggedObject obj, bool explicitly)
		{
			return null;
		}

		[Token(Token = "0x6002215")]
		[Address(RVA = "0x130DB14", Offset = "0x130DB14", VA = "0x130DB14")]
		public static SubjectPublicKeyInfo GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x6002216")]
		[Address(RVA = "0x130DD2C", Offset = "0x130DD2C", VA = "0x130DD2C")]
		public SubjectPublicKeyInfo(AlgorithmIdentifier algID, Asn1Encodable publicKey)
		{
		}

		[Token(Token = "0x6002217")]
		[Address(RVA = "0x130DDAC", Offset = "0x130DDAC", VA = "0x130DDAC")]
		public SubjectPublicKeyInfo(AlgorithmIdentifier algID, byte[] publicKey)
		{
		}

		[Token(Token = "0x6002218")]
		[Address(RVA = "0x130DBB8", Offset = "0x130DBB8", VA = "0x130DBB8")]
		private SubjectPublicKeyInfo(Asn1Sequence seq)
		{
		}

		[Token(Token = "0x600221A")]
		[Address(RVA = "0x130DE34", Offset = "0x130DE34", VA = "0x130DE34")]
		public Asn1Object GetPublicKey()
		{
			return null;
		}

		[Token(Token = "0x600221C")]
		[Address(RVA = "0x130DE5C", Offset = "0x130DE5C", VA = "0x130DE5C", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
	[Token(Token = "0x20003D3")]
	public class CrlEntry : Asn1Encodable
	{
		[Token(Token = "0x400122F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Asn1Sequence seq;

		[Token(Token = "0x4001230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal DerInteger userCertificate;

		[Token(Token = "0x4001231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal Time revocationDate;

		[Token(Token = "0x4001232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal X509Extensions crlEntryExtensions;

		[Token(Token = "0x1700040D")]
		public DerInteger UserCertificate
		{
			[Token(Token = "0x600221E")]
			[Address(RVA = "0x1308C88", Offset = "0x1308C88", VA = "0x1308C88")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700040E")]
		public Time RevocationDate
		{
			[Token(Token = "0x600221F")]
			[Address(RVA = "0x1308C90", Offset = "0x1308C90", VA = "0x1308C90")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700040F")]
		public X509Extensions Extensions
		{
			[Token(Token = "0x6002220")]
			[Address(RVA = "0x1308C98", Offset = "0x1308C98", VA = "0x1308C98")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600221D")]
		[Address(RVA = "0x1308974", Offset = "0x1308974", VA = "0x1308974")]
		public CrlEntry(Asn1Sequence seq)
		{
		}

		[Token(Token = "0x6002221")]
		[Address(RVA = "0x1308F54", Offset = "0x1308F54", VA = "0x1308F54", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
	[Token(Token = "0x20003D4")]
	public class TbsCertificateList : Asn1Encodable
	{
		[Token(Token = "0x20006A8")]
		private class RevokedCertificatesEnumeration : IEnumerable
		{
			[Token(Token = "0x2000771")]
			private class RevokedCertificatesEnumerator : IEnumerator
			{
				[Token(Token = "0x4002813")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				private readonly IEnumerator e;

				[Token(Token = "0x17000750")]
				public object Current
				{
					[Token(Token = "0x600376E")]
					[Address(RVA = "0x130E6FC", Offset = "0x130E6FC", VA = "0x130E6FC", Slot = "5")]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x600376B")]
				[Address(RVA = "0x130E56C", Offset = "0x130E56C", VA = "0x130E56C")]
				internal RevokedCertificatesEnumerator(IEnumerator e)
				{
				}

				[Token(Token = "0x600376C")]
				[Address(RVA = "0x130E598", Offset = "0x130E598", VA = "0x130E598", Slot = "4")]
				public bool MoveNext()
				{
					return default(bool);
				}

				[Token(Token = "0x600376D")]
				[Address(RVA = "0x130E648", Offset = "0x130E648", VA = "0x130E648", Slot = "6")]
				public void Reset()
				{
				}
			}

			[Token(Token = "0x40025F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly IEnumerable en;

			[Token(Token = "0x6003593")]
			[Address(RVA = "0x130E450", Offset = "0x130E450", VA = "0x130E450")]
			internal RevokedCertificatesEnumeration(IEnumerable en)
			{
			}

			[Token(Token = "0x6003594")]
			[Address(RVA = "0x130E48C", Offset = "0x130E48C", VA = "0x130E48C", Slot = "4")]
			public IEnumerator GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x4001233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Asn1Sequence seq;

		[Token(Token = "0x4001234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal DerInteger version;

		[Token(Token = "0x4001235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal AlgorithmIdentifier signature;

		[Token(Token = "0x4001236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal X509Name issuer;

		[Token(Token = "0x4001237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal Time thisUpdate;

		[Token(Token = "0x4001238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal Time nextUpdate;

		[Token(Token = "0x4001239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal Asn1Sequence revokedCertificates;

		[Token(Token = "0x400123A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal X509Extensions crlExtensions;

		[Token(Token = "0x17000410")]
		public int Version
		{
			[Token(Token = "0x6002225")]
			[Address(RVA = "0x1308190", Offset = "0x1308190", VA = "0x1308190")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000411")]
		public DerInteger VersionNumber
		{
			[Token(Token = "0x6002226")]
			[Address(RVA = "0x130E428", Offset = "0x130E428", VA = "0x130E428")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000412")]
		public AlgorithmIdentifier Signature
		{
			[Token(Token = "0x6002227")]
			[Address(RVA = "0x130E430", Offset = "0x130E430", VA = "0x130E430")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000413")]
		public X509Name Issuer
		{
			[Token(Token = "0x6002228")]
			[Address(RVA = "0x130E438", Offset = "0x130E438", VA = "0x130E438")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000414")]
		public Time ThisUpdate
		{
			[Token(Token = "0x6002229")]
			[Address(RVA = "0x130E440", Offset = "0x130E440", VA = "0x130E440")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000415")]
		public Time NextUpdate
		{
			[Token(Token = "0x600222A")]
			[Address(RVA = "0x130E448", Offset = "0x130E448", VA = "0x130E448")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000416")]
		public X509Extensions Extensions
		{
			[Token(Token = "0x600222D")]
			[Address(RVA = "0x130E47C", Offset = "0x130E47C", VA = "0x130E47C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002222")]
		[Address(RVA = "0x130DF54", Offset = "0x130DF54", VA = "0x130DF54")]
		public static TbsCertificateList GetInstance(Asn1TaggedObject obj, bool explicitly)
		{
			return null;
		}

		[Token(Token = "0x6002223")]
		[Address(RVA = "0x1307DBC", Offset = "0x1307DBC", VA = "0x1307DBC")]
		public static TbsCertificateList GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x6002224")]
		[Address(RVA = "0x130DF70", Offset = "0x130DF70", VA = "0x130DF70")]
		internal TbsCertificateList(Asn1Sequence seq)
		{
		}

		[Token(Token = "0x600222B")]
		[Address(RVA = "0x1307F5C", Offset = "0x1307F5C", VA = "0x1307F5C")]
		public CrlEntry[] GetRevokedCertificates()
		{
			return null;
		}

		[Token(Token = "0x600222C")]
		[Address(RVA = "0x13080CC", Offset = "0x13080CC", VA = "0x13080CC")]
		public IEnumerable GetRevokedCertificateEnumeration()
		{
			return null;
		}

		[Token(Token = "0x600222E")]
		[Address(RVA = "0x130E484", Offset = "0x130E484", VA = "0x130E484", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
	[Token(Token = "0x20003D5")]
	public class TbsCertificateStructure : Asn1Encodable
	{
		[Token(Token = "0x400123B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Asn1Sequence seq;

		[Token(Token = "0x400123C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal DerInteger version;

		[Token(Token = "0x400123D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal DerInteger serialNumber;

		[Token(Token = "0x400123E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal AlgorithmIdentifier signature;

		[Token(Token = "0x400123F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal X509Name issuer;

		[Token(Token = "0x4001240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal Time startDate;

		[Token(Token = "0x4001241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal Time endDate;

		[Token(Token = "0x4001242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal X509Name subject;

		[Token(Token = "0x4001243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal SubjectPublicKeyInfo subjectPublicKeyInfo;

		[Token(Token = "0x4001244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal DerBitString issuerUniqueID;

		[Token(Token = "0x4001245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal DerBitString subjectUniqueID;

		[Token(Token = "0x4001246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal X509Extensions extensions;

		[Token(Token = "0x17000417")]
		public int Version
		{
			[Token(Token = "0x6002232")]
			[Address(RVA = "0x130EC7C", Offset = "0x130EC7C", VA = "0x130EC7C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000418")]
		public DerInteger VersionNumber
		{
			[Token(Token = "0x6002233")]
			[Address(RVA = "0x130ECB0", Offset = "0x130ECB0", VA = "0x130ECB0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000419")]
		public DerInteger SerialNumber
		{
			[Token(Token = "0x6002234")]
			[Address(RVA = "0x130ECB8", Offset = "0x130ECB8", VA = "0x130ECB8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700041A")]
		public AlgorithmIdentifier Signature
		{
			[Token(Token = "0x6002235")]
			[Address(RVA = "0x130ECC0", Offset = "0x130ECC0", VA = "0x130ECC0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700041B")]
		public X509Name Issuer
		{
			[Token(Token = "0x6002236")]
			[Address(RVA = "0x130ECC8", Offset = "0x130ECC8", VA = "0x130ECC8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700041C")]
		public Time StartDate
		{
			[Token(Token = "0x6002237")]
			[Address(RVA = "0x130ECD0", Offset = "0x130ECD0", VA = "0x130ECD0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700041D")]
		public Time EndDate
		{
			[Token(Token = "0x6002238")]
			[Address(RVA = "0x130ECD8", Offset = "0x130ECD8", VA = "0x130ECD8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700041E")]
		public X509Name Subject
		{
			[Token(Token = "0x6002239")]
			[Address(RVA = "0x130ECE0", Offset = "0x130ECE0", VA = "0x130ECE0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700041F")]
		public SubjectPublicKeyInfo SubjectPublicKeyInfo
		{
			[Token(Token = "0x600223A")]
			[Address(RVA = "0x130ECE8", Offset = "0x130ECE8", VA = "0x130ECE8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000420")]
		public DerBitString IssuerUniqueID
		{
			[Token(Token = "0x600223B")]
			[Address(RVA = "0x130ECF0", Offset = "0x130ECF0", VA = "0x130ECF0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000421")]
		public DerBitString SubjectUniqueID
		{
			[Token(Token = "0x600223C")]
			[Address(RVA = "0x130ECF8", Offset = "0x130ECF8", VA = "0x130ECF8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000422")]
		public X509Extensions Extensions
		{
			[Token(Token = "0x600223D")]
			[Address(RVA = "0x130ED00", Offset = "0x130ED00", VA = "0x130ED00")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600222F")]
		[Address(RVA = "0x130E7E4", Offset = "0x130E7E4", VA = "0x130E7E4")]
		public static TbsCertificateStructure GetInstance(Asn1TaggedObject obj, bool explicitly)
		{
			return null;
		}

		[Token(Token = "0x6002230")]
		[Address(RVA = "0x130E800", Offset = "0x130E800", VA = "0x130E800")]
		public static TbsCertificateStructure GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x6002231")]
		[Address(RVA = "0x130E8A4", Offset = "0x130E8A4", VA = "0x130E8A4")]
		internal TbsCertificateStructure(Asn1Sequence seq)
		{
		}

		[Token(Token = "0x600223E")]
		[Address(RVA = "0x130ED08", Offset = "0x130ED08", VA = "0x130ED08", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
	[Token(Token = "0x20003D6")]
	public class Time : Asn1Encodable, IAsn1Choice
	{
		[Token(Token = "0x4001247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Asn1Object time;

		[Token(Token = "0x600223F")]
		[Address(RVA = "0x130ED10", Offset = "0x130ED10", VA = "0x130ED10")]
		public static Time GetInstance(Asn1TaggedObject obj, bool explicitly)
		{
			return null;
		}

		[Token(Token = "0x6002240")]
		[Address(RVA = "0x130ED30", Offset = "0x130ED30", VA = "0x130ED30")]
		public Time(Asn1Object time)
		{
		}

		[Token(Token = "0x6002241")]
		[Address(RVA = "0x130EE58", Offset = "0x130EE58", VA = "0x130EE58")]
		public Time(DateTime date)
		{
		}

		[Token(Token = "0x6002242")]
		[Address(RVA = "0x1308ADC", Offset = "0x1308ADC", VA = "0x1308ADC")]
		public static Time GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x6002243")]
		[Address(RVA = "0x130EF6C", Offset = "0x130EF6C", VA = "0x130EF6C")]
		public string GetTime()
		{
			return null;
		}

		[Token(Token = "0x6002244")]
		[Address(RVA = "0x130F058", Offset = "0x130F058", VA = "0x130F058")]
		public DateTime ToDateTime()
		{
			return default(DateTime);
		}

		[Token(Token = "0x6002245")]
		[Address(RVA = "0x130F22C", Offset = "0x130F22C", VA = "0x130F22C", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}

		[Token(Token = "0x6002246")]
		[Address(RVA = "0x130F234", Offset = "0x130F234", VA = "0x130F234", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20003D7")]
	public class X509CertificateStructure : Asn1Encodable
	{
		[Token(Token = "0x4001248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly TbsCertificateStructure tbsCert;

		[Token(Token = "0x4001249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly AlgorithmIdentifier sigAlgID;

		[Token(Token = "0x400124A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly DerBitString sig;

		[Token(Token = "0x17000423")]
		public TbsCertificateStructure TbsCertificate
		{
			[Token(Token = "0x600224B")]
			[Address(RVA = "0x130F530", Offset = "0x130F530", VA = "0x130F530")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000424")]
		public int Version
		{
			[Token(Token = "0x600224C")]
			[Address(RVA = "0x130F538", Offset = "0x130F538", VA = "0x130F538")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000425")]
		public DerInteger SerialNumber
		{
			[Token(Token = "0x600224D")]
			[Address(RVA = "0x130F550", Offset = "0x130F550", VA = "0x130F550")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000426")]
		public X509Name Issuer
		{
			[Token(Token = "0x600224E")]
			[Address(RVA = "0x130F56C", Offset = "0x130F56C", VA = "0x130F56C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000427")]
		public Time StartDate
		{
			[Token(Token = "0x600224F")]
			[Address(RVA = "0x130F588", Offset = "0x130F588", VA = "0x130F588")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000428")]
		public Time EndDate
		{
			[Token(Token = "0x6002250")]
			[Address(RVA = "0x130F5A4", Offset = "0x130F5A4", VA = "0x130F5A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000429")]
		public X509Name Subject
		{
			[Token(Token = "0x6002251")]
			[Address(RVA = "0x130F5C0", Offset = "0x130F5C0", VA = "0x130F5C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700042A")]
		public SubjectPublicKeyInfo SubjectPublicKeyInfo
		{
			[Token(Token = "0x6002252")]
			[Address(RVA = "0x130F5DC", Offset = "0x130F5DC", VA = "0x130F5DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700042B")]
		public AlgorithmIdentifier SignatureAlgorithm
		{
			[Token(Token = "0x6002253")]
			[Address(RVA = "0x130F5F8", Offset = "0x130F5F8", VA = "0x130F5F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700042C")]
		public DerBitString Signature
		{
			[Token(Token = "0x6002254")]
			[Address(RVA = "0x130F600", Offset = "0x130F600", VA = "0x130F600")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002247")]
		[Address(RVA = "0x130F238", Offset = "0x130F238", VA = "0x130F238")]
		public static X509CertificateStructure GetInstance(Asn1TaggedObject obj, bool explicitly)
		{
			return null;
		}

		[Token(Token = "0x6002248")]
		[Address(RVA = "0x130F254", Offset = "0x130F254", VA = "0x130F254")]
		public static X509CertificateStructure GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x6002249")]
		[Address(RVA = "0x130F440", Offset = "0x130F440", VA = "0x130F440")]
		public X509CertificateStructure(TbsCertificateStructure tbsCert, AlgorithmIdentifier sigAlgID, DerBitString sig)
		{
		}

		[Token(Token = "0x600224A")]
		[Address(RVA = "0x130F2F8", Offset = "0x130F2F8", VA = "0x130F2F8")]
		private X509CertificateStructure(Asn1Sequence seq)
		{
		}

		[Token(Token = "0x6002255")]
		[Address(RVA = "0x130F608", Offset = "0x130F608", VA = "0x130F608", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
	[Token(Token = "0x20003D8")]
	public class X509DefaultEntryConverter : X509NameEntryConverter
	{
		[Token(Token = "0x6002256")]
		[Address(RVA = "0x130F72C", Offset = "0x130F72C", VA = "0x130F72C", Slot = "4")]
		public override Asn1Object GetConvertedValue(DerObjectIdentifier oid, string value)
		{
			return null;
		}

		[Token(Token = "0x6002257")]
		[Address(RVA = "0x130FB78", Offset = "0x130FB78", VA = "0x130FB78")]
		public X509DefaultEntryConverter()
		{
		}
	}
	[Token(Token = "0x20003D9")]
	public class X509Extension
	{
		[Token(Token = "0x400124B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal bool critical;

		[Token(Token = "0x400124C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal Asn1OctetString value;

		[Token(Token = "0x1700042D")]
		public bool IsCritical
		{
			[Token(Token = "0x600225A")]
			[Address(RVA = "0x130FC7C", Offset = "0x130FC7C", VA = "0x130FC7C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700042E")]
		public Asn1OctetString Value
		{
			[Token(Token = "0x600225B")]
			[Address(RVA = "0x130FC84", Offset = "0x130FC84", VA = "0x130FC84")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002258")]
		[Address(RVA = "0x130FB88", Offset = "0x130FB88", VA = "0x130FB88")]
		public X509Extension(DerBoolean critical, Asn1OctetString value)
		{
		}

		[Token(Token = "0x6002259")]
		[Address(RVA = "0x130FC3C", Offset = "0x130FC3C", VA = "0x130FC3C")]
		public X509Extension(bool critical, Asn1OctetString value)
		{
		}

		[Token(Token = "0x600225C")]
		[Address(RVA = "0x130FC8C", Offset = "0x130FC8C", VA = "0x130FC8C")]
		public Asn1Encodable GetParsedValue()
		{
			return null;
		}

		[Token(Token = "0x600225D")]
		[Address(RVA = "0x130FC90", Offset = "0x130FC90", VA = "0x130FC90", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600225E")]
		[Address(RVA = "0x130FCD0", Offset = "0x130FCD0", VA = "0x130FCD0", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600225F")]
		[Address(RVA = "0x1307558", Offset = "0x1307558", VA = "0x1307558")]
		public static Asn1Object ConvertValueToObject(X509Extension ext)
		{
			return null;
		}
	}
	[Token(Token = "0x20003DA")]
	public class X509Extensions : Asn1Encodable
	{
		[Token(Token = "0x400124D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly DerObjectIdentifier SubjectDirectoryAttributes;

		[Token(Token = "0x400124E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly DerObjectIdentifier SubjectKeyIdentifier;

		[Token(Token = "0x400124F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly DerObjectIdentifier KeyUsage;

		[Token(Token = "0x4001250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly DerObjectIdentifier PrivateKeyUsagePeriod;

		[Token(Token = "0x4001251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly DerObjectIdentifier SubjectAlternativeName;

		[Token(Token = "0x4001252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly DerObjectIdentifier IssuerAlternativeName;

		[Token(Token = "0x4001253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly DerObjectIdentifier BasicConstraints;

		[Token(Token = "0x4001254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static readonly DerObjectIdentifier CrlNumber;

		[Token(Token = "0x4001255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static readonly DerObjectIdentifier ReasonCode;

		[Token(Token = "0x4001256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static readonly DerObjectIdentifier InstructionCode;

		[Token(Token = "0x4001257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static readonly DerObjectIdentifier InvalidityDate;

		[Token(Token = "0x4001258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static readonly DerObjectIdentifier DeltaCrlIndicator;

		[Token(Token = "0x4001259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static readonly DerObjectIdentifier IssuingDistributionPoint;

		[Token(Token = "0x400125A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static readonly DerObjectIdentifier CertificateIssuer;

		[Token(Token = "0x400125B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static readonly DerObjectIdentifier NameConstraints;

		[Token(Token = "0x400125C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static readonly DerObjectIdentifier CrlDistributionPoints;

		[Token(Token = "0x400125D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static readonly DerObjectIdentifier CertificatePolicies;

		[Token(Token = "0x400125E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static readonly DerObjectIdentifier PolicyMappings;

		[Token(Token = "0x400125F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public static readonly DerObjectIdentifier AuthorityKeyIdentifier;

		[Token(Token = "0x4001260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public static readonly DerObjectIdentifier PolicyConstraints;

		[Token(Token = "0x4001261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public static readonly DerObjectIdentifier ExtendedKeyUsage;

		[Token(Token = "0x4001262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public static readonly DerObjectIdentifier FreshestCrl;

		[Token(Token = "0x4001263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public static readonly DerObjectIdentifier InhibitAnyPolicy;

		[Token(Token = "0x4001264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public static readonly DerObjectIdentifier AuthorityInfoAccess;

		[Token(Token = "0x4001265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public static readonly DerObjectIdentifier SubjectInfoAccess;

		[Token(Token = "0x4001266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public static readonly DerObjectIdentifier LogoType;

		[Token(Token = "0x4001267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public static readonly DerObjectIdentifier BiometricInfo;

		[Token(Token = "0x4001268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public static readonly DerObjectIdentifier QCStatements;

		[Token(Token = "0x4001269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public static readonly DerObjectIdentifier AuditIdentity;

		[Token(Token = "0x400126A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public static readonly DerObjectIdentifier NoRevAvail;

		[Token(Token = "0x400126B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public static readonly DerObjectIdentifier TargetInformation;

		[Token(Token = "0x400126C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IDictionary extensions;

		[Token(Token = "0x400126D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IList ordering;

		[Token(Token = "0x1700042F")]
		public IEnumerable ExtensionOids
		{
			[Token(Token = "0x600226A")]
			[Address(RVA = "0x13116EC", Offset = "0x13116EC", VA = "0x13116EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002260")]
		[Address(RVA = "0x130FDA0", Offset = "0x130FDA0", VA = "0x130FDA0")]
		public static X509Extensions GetInstance(Asn1TaggedObject obj, bool explicitly)
		{
			return null;
		}

		[Token(Token = "0x6002261")]
		[Address(RVA = "0x1308D58", Offset = "0x1308D58", VA = "0x1308D58")]
		public static X509Extensions GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x6002262")]
		[Address(RVA = "0x130FE28", Offset = "0x130FE28", VA = "0x130FE28")]
		private X509Extensions(Asn1Sequence seq)
		{
		}

		[Token(Token = "0x6002263")]
		[Address(RVA = "0x131049C", Offset = "0x131049C", VA = "0x131049C")]
		public X509Extensions(IDictionary extensions)
		{
		}

		[Token(Token = "0x6002264")]
		[Address(RVA = "0x13104A8", Offset = "0x13104A8", VA = "0x13104A8")]
		public X509Extensions(IList ordering, IDictionary extensions)
		{
		}

		[Token(Token = "0x6002265")]
		[Address(RVA = "0x1310994", Offset = "0x1310994", VA = "0x1310994")]
		public X509Extensions(IList oids, IList values)
		{
		}

		[Token(Token = "0x6002266")]
		[Address(RVA = "0x1310DE4", Offset = "0x1310DE4", VA = "0x1310DE4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x830A88", Offset = "0x830A88")]
		public X509Extensions(Hashtable extensions)
		{
		}

		[Token(Token = "0x6002267")]
		[Address(RVA = "0x1310DF0", Offset = "0x1310DF0", VA = "0x1310DF0")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x830A98", Offset = "0x830A98")]
		public X509Extensions(ArrayList ordering, Hashtable extensions)
		{
		}

		[Token(Token = "0x6002268")]
		[Address(RVA = "0x1311238", Offset = "0x1311238", VA = "0x1311238")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x830AA8", Offset = "0x830AA8")]
		public X509Extensions(ArrayList oids, ArrayList values)
		{
		}

		[Token(Token = "0x6002269")]
		[Address(RVA = "0x1311634", Offset = "0x1311634", VA = "0x1311634")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x830AB8", Offset = "0x830AB8")]
		public IEnumerator Oids()
		{
			return null;
		}

		[Token(Token = "0x600226B")]
		[Address(RVA = "0x1311754", Offset = "0x1311754", VA = "0x1311754")]
		public X509Extension GetExtension(DerObjectIdentifier oid)
		{
			return null;
		}

		[Token(Token = "0x600226C")]
		[Address(RVA = "0x1311854", Offset = "0x1311854", VA = "0x1311854", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}

		[Token(Token = "0x600226D")]
		[Address(RVA = "0x1311F00", Offset = "0x1311F00", VA = "0x1311F00")]
		public bool Equivalent(X509Extensions other)
		{
			return default(bool);
		}

		[Token(Token = "0x600226E")]
		[Address(RVA = "0x1312478", Offset = "0x1312478", VA = "0x1312478")]
		public DerObjectIdentifier[] GetExtensionOids()
		{
			return null;
		}

		[Token(Token = "0x600226F")]
		[Address(RVA = "0x131261C", Offset = "0x131261C", VA = "0x131261C")]
		public DerObjectIdentifier[] GetNonCriticalExtensionOids()
		{
			return null;
		}

		[Token(Token = "0x6002270")]
		[Address(RVA = "0x1312A80", Offset = "0x1312A80", VA = "0x1312A80")]
		public DerObjectIdentifier[] GetCriticalExtensionOids()
		{
			return null;
		}

		[Token(Token = "0x6002271")]
		[Address(RVA = "0x1312624", Offset = "0x1312624", VA = "0x1312624")]
		private DerObjectIdentifier[] GetExtensionOids(bool isCritical)
		{
			return null;
		}

		[Token(Token = "0x6002272")]
		[Address(RVA = "0x13124E0", Offset = "0x13124E0", VA = "0x13124E0")]
		private static DerObjectIdentifier[] ToOidArray(IList oids)
		{
			return null;
		}
	}
	[Token(Token = "0x20003DB")]
	public class X509Name : Asn1Encodable
	{
		[Token(Token = "0x400126E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly DerObjectIdentifier C;

		[Token(Token = "0x400126F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly DerObjectIdentifier O;

		[Token(Token = "0x4001270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly DerObjectIdentifier OU;

		[Token(Token = "0x4001271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly DerObjectIdentifier T;

		[Token(Token = "0x4001272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly DerObjectIdentifier CN;

		[Token(Token = "0x4001273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly DerObjectIdentifier Street;

		[Token(Token = "0x4001274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly DerObjectIdentifier SerialNumber;

		[Token(Token = "0x4001275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static readonly DerObjectIdentifier L;

		[Token(Token = "0x4001276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static readonly DerObjectIdentifier ST;

		[Token(Token = "0x4001277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static readonly DerObjectIdentifier Surname;

		[Token(Token = "0x4001278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static readonly DerObjectIdentifier GivenName;

		[Token(Token = "0x4001279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static readonly DerObjectIdentifier Initials;

		[Token(Token = "0x400127A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static readonly DerObjectIdentifier Generation;

		[Token(Token = "0x400127B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static readonly DerObjectIdentifier UniqueIdentifier;

		[Token(Token = "0x400127C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static readonly DerObjectIdentifier BusinessCategory;

		[Token(Token = "0x400127D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static readonly DerObjectIdentifier PostalCode;

		[Token(Token = "0x400127E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static readonly DerObjectIdentifier DnQualifier;

		[Token(Token = "0x400127F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static readonly DerObjectIdentifier Pseudonym;

		[Token(Token = "0x4001280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public static readonly DerObjectIdentifier DateOfBirth;

		[Token(Token = "0x4001281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public static readonly DerObjectIdentifier PlaceOfBirth;

		[Token(Token = "0x4001282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public static readonly DerObjectIdentifier Gender;

		[Token(Token = "0x4001283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public static readonly DerObjectIdentifier CountryOfCitizenship;

		[Token(Token = "0x4001284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public static readonly DerObjectIdentifier CountryOfResidence;

		[Token(Token = "0x4001285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public static readonly DerObjectIdentifier NameAtBirth;

		[Token(Token = "0x4001286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public static readonly DerObjectIdentifier PostalAddress;

		[Token(Token = "0x4001287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public static readonly DerObjectIdentifier DmdName;

		[Token(Token = "0x4001288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public static readonly DerObjectIdentifier TelephoneNumber;

		[Token(Token = "0x4001289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public static readonly DerObjectIdentifier Name;

		[Token(Token = "0x400128A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public static readonly DerObjectIdentifier EmailAddress;

		[Token(Token = "0x400128B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public static readonly DerObjectIdentifier UnstructuredName;

		[Token(Token = "0x400128C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public static readonly DerObjectIdentifier UnstructuredAddress;

		[Token(Token = "0x400128D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public static readonly DerObjectIdentifier E;

		[Token(Token = "0x400128E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public static readonly DerObjectIdentifier DC;

		[Token(Token = "0x400128F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public static readonly DerObjectIdentifier UID;

		[Token(Token = "0x4001290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private static readonly bool[] defaultReverse;

		[Token(Token = "0x4001291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public static readonly Hashtable DefaultSymbols;

		[Token(Token = "0x4001292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public static readonly Hashtable RFC2253Symbols;

		[Token(Token = "0x4001293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public static readonly Hashtable RFC1779Symbols;

		[Token(Token = "0x4001294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public static readonly Hashtable DefaultLookup;

		[Token(Token = "0x4001295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IList ordering;

		[Token(Token = "0x4001296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly X509NameEntryConverter converter;

		[Token(Token = "0x4001297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private IList values;

		[Token(Token = "0x4001298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private IList added;

		[Token(Token = "0x4001299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Asn1Sequence seq;

		[Token(Token = "0x17000430")]
		public static bool DefaultReverse
		{
			[Token(Token = "0x6002274")]
			[Address(RVA = "0x1313030", Offset = "0x1313030", VA = "0x1313030")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002275")]
			[Address(RVA = "0x13130B8", Offset = "0x13130B8", VA = "0x13130B8")]
			set
			{
			}
		}

		[Token(Token = "0x6002276")]
		[Address(RVA = "0x1313148", Offset = "0x1313148", VA = "0x1313148")]
		static X509Name()
		{
		}

		[Token(Token = "0x6002277")]
		[Address(RVA = "0x130B4A8", Offset = "0x130B4A8", VA = "0x130B4A8")]
		public static X509Name GetInstance(Asn1TaggedObject obj, bool explicitly)
		{
			return null;
		}

		[Token(Token = "0x6002278")]
		[Address(RVA = "0x130B684", Offset = "0x130B684", VA = "0x130B684")]
		public static X509Name GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x6002279")]
		[Address(RVA = "0x1314E9C", Offset = "0x1314E9C", VA = "0x1314E9C")]
		protected X509Name()
		{
		}

		[Token(Token = "0x600227A")]
		[Address(RVA = "0x131462C", Offset = "0x131462C", VA = "0x131462C")]
		protected X509Name(Asn1Sequence seq)
		{
		}

		[Token(Token = "0x600227B")]
		[Address(RVA = "0x1314F28", Offset = "0x1314F28", VA = "0x1314F28")]
		public X509Name(IList ordering, IDictionary attributes)
		{
		}

		[Token(Token = "0x600227C")]
		[Address(RVA = "0x1314FA4", Offset = "0x1314FA4", VA = "0x1314FA4")]
		public X509Name(IList ordering, IDictionary attributes, X509NameEntryConverter converter)
		{
		}

		[Token(Token = "0x600227D")]
		[Address(RVA = "0x1315540", Offset = "0x1315540", VA = "0x1315540")]
		public X509Name(IList oids, IList values)
		{
		}

		[Token(Token = "0x600227E")]
		[Address(RVA = "0x13155BC", Offset = "0x13155BC", VA = "0x13155BC")]
		public X509Name(IList oids, IList values, X509NameEntryConverter converter)
		{
		}

		[Token(Token = "0x600227F")]
		[Address(RVA = "0x130AD50", Offset = "0x130AD50", VA = "0x130AD50")]
		public X509Name(string dirName)
		{
		}

		[Token(Token = "0x6002280")]
		[Address(RVA = "0x1315AE8", Offset = "0x1315AE8", VA = "0x1315AE8")]
		public X509Name(string dirName, X509NameEntryConverter converter)
		{
		}

		[Token(Token = "0x6002281")]
		[Address(RVA = "0x1316640", Offset = "0x1316640", VA = "0x1316640")]
		public X509Name(bool reverse, string dirName)
		{
		}

		[Token(Token = "0x6002282")]
		[Address(RVA = "0x13166C8", Offset = "0x13166C8", VA = "0x13166C8")]
		public X509Name(bool reverse, string dirName, X509NameEntryConverter converter)
		{
		}

		[Token(Token = "0x6002283")]
		[Address(RVA = "0x1315A5C", Offset = "0x1315A5C", VA = "0x1315A5C")]
		public X509Name(bool reverse, IDictionary lookUp, string dirName)
		{
		}

		[Token(Token = "0x6002284")]
		[Address(RVA = "0x1316760", Offset = "0x1316760", VA = "0x1316760")]
		private DerObjectIdentifier DecodeOid(string name, IDictionary lookUp)
		{
			return null;
		}

		[Token(Token = "0x6002285")]
		[Address(RVA = "0x1315B78", Offset = "0x1315B78", VA = "0x1315B78")]
		public X509Name(bool reverse, IDictionary lookUp, string dirName, X509NameEntryConverter converter)
		{
		}

		[Token(Token = "0x6002286")]
		[Address(RVA = "0x1316C5C", Offset = "0x1316C5C", VA = "0x1316C5C")]
		public IList GetOidList()
		{
			return null;
		}

		[Token(Token = "0x6002287")]
		[Address(RVA = "0x1316CC8", Offset = "0x1316CC8", VA = "0x1316CC8")]
		public IList GetValueList()
		{
			return null;
		}

		[Token(Token = "0x6002288")]
		[Address(RVA = "0x1316CD0", Offset = "0x1316CD0", VA = "0x1316CD0")]
		public IList GetValueList(DerObjectIdentifier oid)
		{
			return null;
		}

		[Token(Token = "0x6002289")]
		[Address(RVA = "0x1316FB4", Offset = "0x1316FB4", VA = "0x1316FB4", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}

		[Token(Token = "0x600228A")]
		[Address(RVA = "0x13176D0", Offset = "0x13176D0", VA = "0x13176D0")]
		public bool Equivalent(X509Name other, bool inOrder)
		{
			return default(bool);
		}

		[Token(Token = "0x600228B")]
		[Address(RVA = "0x1317B6C", Offset = "0x1317B6C", VA = "0x1317B6C")]
		public bool Equivalent(X509Name other)
		{
			return default(bool);
		}

		[Token(Token = "0x600228C")]
		[Address(RVA = "0x131818C", Offset = "0x131818C", VA = "0x131818C")]
		private static bool equivalentStrings(string s1, string s2)
		{
			return default(bool);
		}

		[Token(Token = "0x600228D")]
		[Address(RVA = "0x131827C", Offset = "0x131827C", VA = "0x131827C")]
		private static string canonicalize(string s)
		{
			return null;
		}

		[Token(Token = "0x600228E")]
		[Address(RVA = "0x1318558", Offset = "0x1318558", VA = "0x1318558")]
		private static Asn1Object decodeObject(string v)
		{
			return null;
		}

		[Token(Token = "0x600228F")]
		[Address(RVA = "0x1318450", Offset = "0x1318450", VA = "0x1318450")]
		private static string stripInternalSpaces(string str)
		{
			return null;
		}

		[Token(Token = "0x6002290")]
		[Address(RVA = "0x13186DC", Offset = "0x13186DC", VA = "0x13186DC")]
		private void AppendValue(StringBuilder buf, IDictionary oidSymbols, DerObjectIdentifier oid, string val)
		{
		}

		[Token(Token = "0x6002291")]
		[Address(RVA = "0x1318980", Offset = "0x1318980", VA = "0x1318980")]
		public string ToString(bool reverse, IDictionary oidSymbols)
		{
			return null;
		}

		[Token(Token = "0x6002292")]
		[Address(RVA = "0x1318F5C", Offset = "0x1318F5C", VA = "0x1318F5C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20003DC")]
	public abstract class X509NameEntryConverter
	{
		[Token(Token = "0x6002293")]
		[Address(RVA = "0x130FADC", Offset = "0x130FADC", VA = "0x130FADC")]
		protected Asn1Object ConvertHexEncoded(string hexString, int offset)
		{
			return null;
		}

		[Token(Token = "0x6002294")]
		[Address(RVA = "0x1318FD4", Offset = "0x1318FD4", VA = "0x1318FD4")]
		protected bool CanBePrintable(string str)
		{
			return default(bool);
		}

		[Token(Token = "0x6002295")]
		public abstract Asn1Object GetConvertedValue(DerObjectIdentifier oid, string value);

		[Token(Token = "0x6002296")]
		[Address(RVA = "0x130FB80", Offset = "0x130FB80", VA = "0x130FB80")]
		protected X509NameEntryConverter()
		{
		}
	}
	[Token(Token = "0x20003DD")]
	public class X509NameTokenizer
	{
		[Token(Token = "0x400129A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string value;

		[Token(Token = "0x400129B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int index;

		[Token(Token = "0x400129C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private char separator;

		[Token(Token = "0x400129D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private StringBuilder buffer;

		[Token(Token = "0x6002297")]
		[Address(RVA = "0x13169C0", Offset = "0x13169C0", VA = "0x13169C0")]
		public X509NameTokenizer(string oid)
		{
		}

		[Token(Token = "0x6002298")]
		[Address(RVA = "0x1316BA8", Offset = "0x1316BA8", VA = "0x1316BA8")]
		public X509NameTokenizer(string oid, char separator)
		{
		}

		[Token(Token = "0x6002299")]
		[Address(RVA = "0x1316C34", Offset = "0x1316C34", VA = "0x1316C34")]
		public bool HasMoreTokens()
		{
			return default(bool);
		}

		[Token(Token = "0x600229A")]
		[Address(RVA = "0x13169C8", Offset = "0x13169C8", VA = "0x13169C8")]
		public string NextToken()
		{
			return null;
		}
	}
	[Token(Token = "0x20003DE")]
	public abstract class X509ObjectIdentifiers
	{
		[Token(Token = "0x400129E")]
		internal const string ID = "2.5.4";

		[Token(Token = "0x400129F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly DerObjectIdentifier CommonName;

		[Token(Token = "0x40012A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly DerObjectIdentifier CountryName;

		[Token(Token = "0x40012A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly DerObjectIdentifier LocalityName;

		[Token(Token = "0x40012A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly DerObjectIdentifier StateOrProvinceName;

		[Token(Token = "0x40012A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly DerObjectIdentifier Organization;

		[Token(Token = "0x40012A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly DerObjectIdentifier OrganizationalUnitName;

		[Token(Token = "0x40012A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly DerObjectIdentifier id_at_telephoneNumber;

		[Token(Token = "0x40012A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static readonly DerObjectIdentifier id_at_name;

		[Token(Token = "0x40012A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static readonly DerObjectIdentifier IdSha1;

		[Token(Token = "0x40012A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static readonly DerObjectIdentifier RipeMD160;

		[Token(Token = "0x40012A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static readonly DerObjectIdentifier RipeMD160WithRsaEncryption;

		[Token(Token = "0x40012AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static readonly DerObjectIdentifier IdEARsa;

		[Token(Token = "0x40012AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static readonly DerObjectIdentifier IdPkix;

		[Token(Token = "0x40012AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static readonly DerObjectIdentifier IdPE;

		[Token(Token = "0x40012AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static readonly DerObjectIdentifier IdAD;

		[Token(Token = "0x40012AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static readonly DerObjectIdentifier IdADCAIssuers;

		[Token(Token = "0x40012AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static readonly DerObjectIdentifier IdADOcsp;

		[Token(Token = "0x40012B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static readonly DerObjectIdentifier OcspAccessMethod;

		[Token(Token = "0x40012B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public static readonly DerObjectIdentifier CrlAccessMethod;

		[Token(Token = "0x600229B")]
		[Address(RVA = "0x1318FE0", Offset = "0x1318FE0", VA = "0x1318FE0")]
		protected X509ObjectIdentifiers()
		{
		}
	}
}
namespace Org.BouncyCastle.Asn1.Utilities
{
	[Token(Token = "0x20003DF")]
	public sealed class Asn1Dump
	{
		[Token(Token = "0x40012B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly string NewLine;

		[Token(Token = "0x40012B3")]
		private const string Tab = "    ";

		[Token(Token = "0x40012B4")]
		private const int SampleSize = 32;

		[Token(Token = "0x600229D")]
		[Address(RVA = "0x1303640", Offset = "0x1303640", VA = "0x1303640")]
		private Asn1Dump()
		{
		}

		[Token(Token = "0x600229E")]
		[Address(RVA = "0x1303648", Offset = "0x1303648", VA = "0x1303648")]
		private static void AsString(string indent, bool verbose, Asn1Object obj, StringBuilder buf)
		{
		}

		[Token(Token = "0x600229F")]
		[Address(RVA = "0x1305CF0", Offset = "0x1305CF0", VA = "0x1305CF0")]
		private static string outputApplicationSpecific(string type, string indent, bool verbose, DerApplicationSpecific app)
		{
			return null;
		}

		[Token(Token = "0x60022A0")]
		[Address(RVA = "0x130653C", Offset = "0x130653C", VA = "0x130653C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x830AF0", Offset = "0x830AF0")]
		public static string DumpAsString(object obj)
		{
			return null;
		}

		[Token(Token = "0x60022A1")]
		[Address(RVA = "0x13066A4", Offset = "0x13066A4", VA = "0x13066A4")]
		public static string DumpAsString(Asn1Encodable obj)
		{
			return null;
		}

		[Token(Token = "0x60022A2")]
		[Address(RVA = "0x130670C", Offset = "0x130670C", VA = "0x130670C")]
		public static string DumpAsString(Asn1Encodable obj, bool verbose)
		{
			return null;
		}

		[Token(Token = "0x60022A3")]
		[Address(RVA = "0x1305A7C", Offset = "0x1305A7C", VA = "0x1305A7C")]
		private static string dumpBinaryDataAsString(string indent, byte[] bytes)
		{
			return null;
		}

		[Token(Token = "0x60022A4")]
		[Address(RVA = "0x13067E0", Offset = "0x13067E0", VA = "0x13067E0")]
		private static string calculateAscString(byte[] bytes, int off, int len)
		{
			return null;
		}
	}
	[Token(Token = "0x20003E0")]
	public class FilterStream : Stream
	{
		[Token(Token = "0x40012B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected readonly Stream s;

		[Token(Token = "0x17000431")]
		public override bool CanRead
		{
			[Token(Token = "0x60022A7")]
			[Address(RVA = "0x13069A8", Offset = "0x13069A8", VA = "0x13069A8", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000432")]
		public override bool CanSeek
		{
			[Token(Token = "0x60022A8")]
			[Address(RVA = "0x13069C8", Offset = "0x13069C8", VA = "0x13069C8", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000433")]
		public override bool CanWrite
		{
			[Token(Token = "0x60022A9")]
			[Address(RVA = "0x13069E8", Offset = "0x13069E8", VA = "0x13069E8", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000434")]
		public override long Length
		{
			[Token(Token = "0x60022AA")]
			[Address(RVA = "0x1306A08", Offset = "0x1306A08", VA = "0x1306A08", Slot = "10")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x17000435")]
		public override long Position
		{
			[Token(Token = "0x60022AB")]
			[Address(RVA = "0x1306A28", Offset = "0x1306A28", VA = "0x1306A28", Slot = "11")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x60022AC")]
			[Address(RVA = "0x1306A48", Offset = "0x1306A48", VA = "0x1306A48", Slot = "12")]
			set
			{
			}
		}

		[Token(Token = "0x60022A6")]
		[Address(RVA = "0x130692C", Offset = "0x130692C", VA = "0x130692C")]
		public FilterStream(Stream s)
		{
		}

		[Token(Token = "0x60022AD")]
		[Address(RVA = "0x1306A68", Offset = "0x1306A68", VA = "0x1306A68", Slot = "16")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x60022AE")]
		[Address(RVA = "0x1306AF8", Offset = "0x1306AF8", VA = "0x1306AF8", Slot = "17")]
		public override void Flush()
		{
		}

		[Token(Token = "0x60022AF")]
		[Address(RVA = "0x1306B1C", Offset = "0x1306B1C", VA = "0x1306B1C", Slot = "25")]
		public override long Seek(long offset, SeekOrigin origin)
		{
			return default(long);
		}

		[Token(Token = "0x60022B0")]
		[Address(RVA = "0x1306B40", Offset = "0x1306B40", VA = "0x1306B40", Slot = "26")]
		public override void SetLength(long value)
		{
		}

		[Token(Token = "0x60022B1")]
		[Address(RVA = "0x1306B64", Offset = "0x1306B64", VA = "0x1306B64", Slot = "27")]
		public override int Read(byte[] buffer, int offset, int count)
		{
			return default(int);
		}

		[Token(Token = "0x60022B2")]
		[Address(RVA = "0x1306B88", Offset = "0x1306B88", VA = "0x1306B88", Slot = "28")]
		public override int ReadByte()
		{
			return default(int);
		}

		[Token(Token = "0x60022B3")]
		[Address(RVA = "0x1306BAC", Offset = "0x1306BAC", VA = "0x1306BAC", Slot = "29")]
		public override void Write(byte[] buffer, int offset, int count)
		{
		}

		[Token(Token = "0x60022B4")]
		[Address(RVA = "0x1306BD0", Offset = "0x1306BD0", VA = "0x1306BD0", Slot = "30")]
		public override void WriteByte(byte value)
		{
		}
	}
}
namespace Org.BouncyCastle.Asn1.TeleTrust
{
	[Token(Token = "0x20003E1")]
	public class TeleTrusTNamedCurves
	{
		[Token(Token = "0x20006A9")]
		internal class BrainpoolP160r1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x6003595")]
			[Address(RVA = "0xE29554", Offset = "0xE29554", VA = "0xE29554")]
			private BrainpoolP160r1Holder()
			{
			}

			[Token(Token = "0x6003596")]
			[Address(RVA = "0xE2955C", Offset = "0xE2955C", VA = "0xE2955C", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006AA")]
		internal class BrainpoolP160t1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x6003598")]
			[Address(RVA = "0xE297A4", Offset = "0xE297A4", VA = "0xE297A4")]
			private BrainpoolP160t1Holder()
			{
			}

			[Token(Token = "0x6003599")]
			[Address(RVA = "0xE297AC", Offset = "0xE297AC", VA = "0xE297AC", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006AB")]
		internal class BrainpoolP192r1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x600359B")]
			[Address(RVA = "0xE299F4", Offset = "0xE299F4", VA = "0xE299F4")]
			private BrainpoolP192r1Holder()
			{
			}

			[Token(Token = "0x600359C")]
			[Address(RVA = "0xE299FC", Offset = "0xE299FC", VA = "0xE299FC", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006AC")]
		internal class BrainpoolP192t1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x600359E")]
			[Address(RVA = "0xE29C44", Offset = "0xE29C44", VA = "0xE29C44")]
			private BrainpoolP192t1Holder()
			{
			}

			[Token(Token = "0x600359F")]
			[Address(RVA = "0xE29C4C", Offset = "0xE29C4C", VA = "0xE29C4C", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006AD")]
		internal class BrainpoolP224r1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x60035A1")]
			[Address(RVA = "0xE29E94", Offset = "0xE29E94", VA = "0xE29E94")]
			private BrainpoolP224r1Holder()
			{
			}

			[Token(Token = "0x60035A2")]
			[Address(RVA = "0xE29E9C", Offset = "0xE29E9C", VA = "0xE29E9C", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006AE")]
		internal class BrainpoolP224t1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x60035A4")]
			[Address(RVA = "0xE2A0E4", Offset = "0xE2A0E4", VA = "0xE2A0E4")]
			private BrainpoolP224t1Holder()
			{
			}

			[Token(Token = "0x60035A5")]
			[Address(RVA = "0xE2A0EC", Offset = "0xE2A0EC", VA = "0xE2A0EC", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006AF")]
		internal class BrainpoolP256r1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x60035A7")]
			[Address(RVA = "0xE2A334", Offset = "0xE2A334", VA = "0xE2A334")]
			private BrainpoolP256r1Holder()
			{
			}

			[Token(Token = "0x60035A8")]
			[Address(RVA = "0xE2A33C", Offset = "0xE2A33C", VA = "0xE2A33C", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006B0")]
		internal class BrainpoolP256t1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x60035AA")]
			[Address(RVA = "0x1301D88", Offset = "0x1301D88", VA = "0x1301D88")]
			private BrainpoolP256t1Holder()
			{
			}

			[Token(Token = "0x60035AB")]
			[Address(RVA = "0x1301D90", Offset = "0x1301D90", VA = "0x1301D90", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006B1")]
		internal class BrainpoolP320r1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x60035AD")]
			[Address(RVA = "0x1301FEC", Offset = "0x1301FEC", VA = "0x1301FEC")]
			private BrainpoolP320r1Holder()
			{
			}

			[Token(Token = "0x60035AE")]
			[Address(RVA = "0x1301FF4", Offset = "0x1301FF4", VA = "0x1301FF4", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006B2")]
		internal class BrainpoolP320t1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x60035B0")]
			[Address(RVA = "0x1302250", Offset = "0x1302250", VA = "0x1302250")]
			private BrainpoolP320t1Holder()
			{
			}

			[Token(Token = "0x60035B1")]
			[Address(RVA = "0x1302258", Offset = "0x1302258", VA = "0x1302258", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006B3")]
		internal class BrainpoolP384r1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x40025FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x60035B3")]
			[Address(RVA = "0x13024B4", Offset = "0x13024B4", VA = "0x13024B4")]
			private BrainpoolP384r1Holder()
			{
			}

			[Token(Token = "0x60035B4")]
			[Address(RVA = "0x13024BC", Offset = "0x13024BC", VA = "0x13024BC", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006B4")]
		internal class BrainpoolP384t1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x4002600")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x60035B6")]
			[Address(RVA = "0x1302718", Offset = "0x1302718", VA = "0x1302718")]
			private BrainpoolP384t1Holder()
			{
			}

			[Token(Token = "0x60035B7")]
			[Address(RVA = "0x1302720", Offset = "0x1302720", VA = "0x1302720", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006B5")]
		internal class BrainpoolP512r1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x4002601")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x60035B9")]
			[Address(RVA = "0x130297C", Offset = "0x130297C", VA = "0x130297C")]
			private BrainpoolP512r1Holder()
			{
			}

			[Token(Token = "0x60035BA")]
			[Address(RVA = "0x1302984", Offset = "0x1302984", VA = "0x1302984", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006B6")]
		internal class BrainpoolP512t1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x4002602")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x60035BC")]
			[Address(RVA = "0x1302BE0", Offset = "0x1302BE0", VA = "0x1302BE0")]
			private BrainpoolP512t1Holder()
			{
			}

			[Token(Token = "0x60035BD")]
			[Address(RVA = "0x1302BE8", Offset = "0x1302BE8", VA = "0x1302BE8", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x40012B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly IDictionary objIds;

		[Token(Token = "0x40012B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly IDictionary curves;

		[Token(Token = "0x40012B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly IDictionary names;

		[Token(Token = "0x17000436")]
		public static IEnumerable Names
		{
			[Token(Token = "0x60022BC")]
			[Address(RVA = "0xE29290", Offset = "0xE29290", VA = "0xE29290")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60022B5")]
		[Address(RVA = "0xE28758", Offset = "0xE28758", VA = "0xE28758")]
		private static ECCurve ConfigureCurve(ECCurve curve)
		{
			return null;
		}

		[Token(Token = "0x60022B6")]
		[Address(RVA = "0xE2875C", Offset = "0xE2875C", VA = "0xE2875C")]
		private static void DefineCurve(string name, DerObjectIdentifier oid, X9ECParametersHolder holder)
		{
		}

		[Token(Token = "0x60022B7")]
		[Address(RVA = "0xE2898C", Offset = "0xE2898C", VA = "0xE2898C")]
		static TeleTrusTNamedCurves()
		{
		}

		[Token(Token = "0x60022B8")]
		[Address(RVA = "0xE28E7C", Offset = "0xE28E7C", VA = "0xE28E7C")]
		public static X9ECParameters GetByName(string name)
		{
			return null;
		}

		[Token(Token = "0x60022B9")]
		[Address(RVA = "0xE29064", Offset = "0xE29064", VA = "0xE29064")]
		public static X9ECParameters GetByOid(DerObjectIdentifier oid)
		{
			return null;
		}

		[Token(Token = "0x60022BA")]
		[Address(RVA = "0xE28F14", Offset = "0xE28F14", VA = "0xE28F14")]
		public static DerObjectIdentifier GetOid(string name)
		{
			return null;
		}

		[Token(Token = "0x60022BB")]
		[Address(RVA = "0xE29190", Offset = "0xE29190", VA = "0xE29190")]
		public static string GetName(DerObjectIdentifier oid)
		{
			return null;
		}

		[Token(Token = "0x60022BD")]
		[Address(RVA = "0xE29398", Offset = "0xE29398", VA = "0xE29398")]
		public static DerObjectIdentifier GetOid(short curvesize, bool twisted)
		{
			return null;
		}

		[Token(Token = "0x60022BE")]
		[Address(RVA = "0xE2954C", Offset = "0xE2954C", VA = "0xE2954C")]
		public TeleTrusTNamedCurves()
		{
		}
	}
	[Token(Token = "0x20003E2")]
	public sealed class TeleTrusTObjectIdentifiers
	{
		[Token(Token = "0x40012B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly DerObjectIdentifier TeleTrusTAlgorithm;

		[Token(Token = "0x40012BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly DerObjectIdentifier RipeMD160;

		[Token(Token = "0x40012BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly DerObjectIdentifier RipeMD128;

		[Token(Token = "0x40012BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly DerObjectIdentifier RipeMD256;

		[Token(Token = "0x40012BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly DerObjectIdentifier TeleTrusTRsaSignatureAlgorithm;

		[Token(Token = "0x40012BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly DerObjectIdentifier RsaSignatureWithRipeMD160;

		[Token(Token = "0x40012BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly DerObjectIdentifier RsaSignatureWithRipeMD128;

		[Token(Token = "0x40012C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static readonly DerObjectIdentifier RsaSignatureWithRipeMD256;

		[Token(Token = "0x40012C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static readonly DerObjectIdentifier ECSign;

		[Token(Token = "0x40012C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static readonly DerObjectIdentifier ECSignWithSha1;

		[Token(Token = "0x40012C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static readonly DerObjectIdentifier ECSignWithRipeMD160;

		[Token(Token = "0x40012C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static readonly DerObjectIdentifier EccBrainpool;

		[Token(Token = "0x40012C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static readonly DerObjectIdentifier EllipticCurve;

		[Token(Token = "0x40012C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static readonly DerObjectIdentifier VersionOne;

		[Token(Token = "0x40012C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static readonly DerObjectIdentifier BrainpoolP160R1;

		[Token(Token = "0x40012C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static readonly DerObjectIdentifier BrainpoolP160T1;

		[Token(Token = "0x40012C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static readonly DerObjectIdentifier BrainpoolP192R1;

		[Token(Token = "0x40012CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static readonly DerObjectIdentifier BrainpoolP192T1;

		[Token(Token = "0x40012CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public static readonly DerObjectIdentifier BrainpoolP224R1;

		[Token(Token = "0x40012CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public static readonly DerObjectIdentifier BrainpoolP224T1;

		[Token(Token = "0x40012CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public static readonly DerObjectIdentifier BrainpoolP256R1;

		[Token(Token = "0x40012CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public static readonly DerObjectIdentifier BrainpoolP256T1;

		[Token(Token = "0x40012CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public static readonly DerObjectIdentifier BrainpoolP320R1;

		[Token(Token = "0x40012D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public static readonly DerObjectIdentifier BrainpoolP320T1;

		[Token(Token = "0x40012D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public static readonly DerObjectIdentifier BrainpoolP384R1;

		[Token(Token = "0x40012D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public static readonly DerObjectIdentifier BrainpoolP384T1;

		[Token(Token = "0x40012D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public static readonly DerObjectIdentifier BrainpoolP512R1;

		[Token(Token = "0x40012D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public static readonly DerObjectIdentifier BrainpoolP512T1;

		[Token(Token = "0x60022BF")]
		[Address(RVA = "0x1302E44", Offset = "0x1302E44", VA = "0x1302E44")]
		private TeleTrusTObjectIdentifiers()
		{
		}
	}
}
namespace Org.BouncyCastle.Asn1.Sec
{
	[Token(Token = "0x20003E3")]
	public sealed class SecNamedCurves
	{
		[Token(Token = "0x20006B7")]
		internal class Secp112r1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x4002603")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x60035BF")]
			[Address(RVA = "0xE22CF8", Offset = "0xE22CF8", VA = "0xE22CF8")]
			private Secp112r1Holder()
			{
			}

			[Token(Token = "0x60035C0")]
			[Address(RVA = "0xE22D00", Offset = "0xE22D00", VA = "0xE22D00", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006B8")]
		internal class Secp112r2Holder : X9ECParametersHolder
		{
			[Token(Token = "0x4002604")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x60035C2")]
			[Address(RVA = "0xE22F40", Offset = "0xE22F40", VA = "0xE22F40")]
			private Secp112r2Holder()
			{
			}

			[Token(Token = "0x60035C3")]
			[Address(RVA = "0xE22F48", Offset = "0xE22F48", VA = "0xE22F48", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006B9")]
		internal class Secp128r1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x4002605")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x60035C5")]
			[Address(RVA = "0xE23190", Offset = "0xE23190", VA = "0xE23190")]
			private Secp128r1Holder()
			{
			}

			[Token(Token = "0x60035C6")]
			[Address(RVA = "0xE23198", Offset = "0xE23198", VA = "0xE23198", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006BA")]
		internal class Secp128r2Holder : X9ECParametersHolder
		{
			[Token(Token = "0x4002606")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x60035C8")]
			[Address(RVA = "0xE233D8", Offset = "0xE233D8", VA = "0xE233D8")]
			private Secp128r2Holder()
			{
			}

			[Token(Token = "0x60035C9")]
			[Address(RVA = "0xE233E0", Offset = "0xE233E0", VA = "0xE233E0", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006BB")]
		internal class Secp160k1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x4002607")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x60035CB")]
			[Address(RVA = "0xE23628", Offset = "0xE23628", VA = "0xE23628")]
			private Secp160k1Holder()
			{
			}

			[Token(Token = "0x60035CC")]
			[Address(RVA = "0xE23630", Offset = "0xE23630", VA = "0xE23630", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006BC")]
		internal class Secp160r1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x4002608")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x60035CE")]
			[Address(RVA = "0xE23A9C", Offset = "0xE23A9C", VA = "0xE23A9C")]
			private Secp160r1Holder()
			{
			}

			[Token(Token = "0x60035CF")]
			[Address(RVA = "0xE23AA4", Offset = "0xE23AA4", VA = "0xE23AA4", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006BD")]
		internal class Secp160r2Holder : X9ECParametersHolder
		{
			[Token(Token = "0x4002609")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x60035D1")]
			[Address(RVA = "0xE23CE4", Offset = "0xE23CE4", VA = "0xE23CE4")]
			private Secp160r2Holder()
			{
			}

			[Token(Token = "0x60035D2")]
			[Address(RVA = "0xE23CEC", Offset = "0xE23CEC", VA = "0xE23CEC", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006BE")]
		internal class Secp192k1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x400260A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x60035D4")]
			[Address(RVA = "0xE23F2C", Offset = "0xE23F2C", VA = "0xE23F2C")]
			private Secp192k1Holder()
			{
			}

			[Token(Token = "0x60035D5")]
			[Address(RVA = "0xE23F34", Offset = "0xE23F34", VA = "0xE23F34", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006BF")]
		internal class Secp192r1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x400260B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x60035D7")]
			[Address(RVA = "0xE243A0", Offset = "0xE243A0", VA = "0xE243A0")]
			private Secp192r1Holder()
			{
			}

			[Token(Token = "0x60035D8")]
			[Address(RVA = "0xE243A8", Offset = "0xE243A8", VA = "0xE243A8", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006C0")]
		internal class Secp224k1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x400260C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x60035DA")]
			[Address(RVA = "0xE245E8", Offset = "0xE245E8", VA = "0xE245E8")]
			private Secp224k1Holder()
			{
			}

			[Token(Token = "0x60035DB")]
			[Address(RVA = "0xE245F0", Offset = "0xE245F0", VA = "0xE245F0", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006C1")]
		internal class Secp224r1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x400260D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x60035DD")]
			[Address(RVA = "0xE24A5C", Offset = "0xE24A5C", VA = "0xE24A5C")]
			private Secp224r1Holder()
			{
			}

			[Token(Token = "0x60035DE")]
			[Address(RVA = "0xE24A64", Offset = "0xE24A64", VA = "0xE24A64", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006C2")]
		internal class Secp256k1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x400260E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x60035E0")]
			[Address(RVA = "0xE24CA4", Offset = "0xE24CA4", VA = "0xE24CA4")]
			private Secp256k1Holder()
			{
			}

			[Token(Token = "0x60035E1")]
			[Address(RVA = "0xE24CAC", Offset = "0xE24CAC", VA = "0xE24CAC", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006C3")]
		internal class Secp256r1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x400260F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x60035E3")]
			[Address(RVA = "0xE25118", Offset = "0xE25118", VA = "0xE25118")]
			private Secp256r1Holder()
			{
			}

			[Token(Token = "0x60035E4")]
			[Address(RVA = "0xE25120", Offset = "0xE25120", VA = "0xE25120", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006C4")]
		internal class Secp384r1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x4002610")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x60035E6")]
			[Address(RVA = "0xE25360", Offset = "0xE25360", VA = "0xE25360")]
			private Secp384r1Holder()
			{
			}

			[Token(Token = "0x60035E7")]
			[Address(RVA = "0xE25368", Offset = "0xE25368", VA = "0xE25368", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006C5")]
		internal class Secp521r1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x4002611")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x60035E9")]
			[Address(RVA = "0xE255A8", Offset = "0xE255A8", VA = "0xE255A8")]
			private Secp521r1Holder()
			{
			}

			[Token(Token = "0x60035EA")]
			[Address(RVA = "0xE255B0", Offset = "0xE255B0", VA = "0xE255B0", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006C6")]
		internal class Sect113r1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x4002612")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x4002613")]
			private const int m = 113;

			[Token(Token = "0x4002614")]
			private const int k = 9;

			[Token(Token = "0x60035EC")]
			[Address(RVA = "0xE257F0", Offset = "0xE257F0", VA = "0xE257F0")]
			private Sect113r1Holder()
			{
			}

			[Token(Token = "0x60035ED")]
			[Address(RVA = "0xE257F8", Offset = "0xE257F8", VA = "0xE257F8", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006C7")]
		internal class Sect113r2Holder : X9ECParametersHolder
		{
			[Token(Token = "0x4002615")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x4002616")]
			private const int m = 113;

			[Token(Token = "0x4002617")]
			private const int k = 9;

			[Token(Token = "0x60035EF")]
			[Address(RVA = "0xE25A24", Offset = "0xE25A24", VA = "0xE25A24")]
			private Sect113r2Holder()
			{
			}

			[Token(Token = "0x60035F0")]
			[Address(RVA = "0xE25A2C", Offset = "0xE25A2C", VA = "0xE25A2C", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006C8")]
		internal class Sect131r1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x4002618")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x4002619")]
			private const int m = 131;

			[Token(Token = "0x400261A")]
			private const int k1 = 2;

			[Token(Token = "0x400261B")]
			private const int k2 = 3;

			[Token(Token = "0x400261C")]
			private const int k3 = 8;

			[Token(Token = "0x60035F2")]
			[Address(RVA = "0xE25C58", Offset = "0xE25C58", VA = "0xE25C58")]
			private Sect131r1Holder()
			{
			}

			[Token(Token = "0x60035F3")]
			[Address(RVA = "0xE25C60", Offset = "0xE25C60", VA = "0xE25C60", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006C9")]
		internal class Sect131r2Holder : X9ECParametersHolder
		{
			[Token(Token = "0x400261D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x400261E")]
			private const int m = 131;

			[Token(Token = "0x400261F")]
			private const int k1 = 2;

			[Token(Token = "0x4002620")]
			private const int k2 = 3;

			[Token(Token = "0x4002621")]
			private const int k3 = 8;

			[Token(Token = "0x60035F5")]
			[Address(RVA = "0xE25E98", Offset = "0xE25E98", VA = "0xE25E98")]
			private Sect131r2Holder()
			{
			}

			[Token(Token = "0x60035F6")]
			[Address(RVA = "0xE25EA0", Offset = "0xE25EA0", VA = "0xE25EA0", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006CA")]
		internal class Sect163k1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x4002622")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x4002623")]
			private const int m = 163;

			[Token(Token = "0x4002624")]
			private const int k1 = 3;

			[Token(Token = "0x4002625")]
			private const int k2 = 6;

			[Token(Token = "0x4002626")]
			private const int k3 = 7;

			[Token(Token = "0x60035F8")]
			[Address(RVA = "0xE260D8", Offset = "0xE260D8", VA = "0xE260D8")]
			private Sect163k1Holder()
			{
			}

			[Token(Token = "0x60035F9")]
			[Address(RVA = "0xE260E0", Offset = "0xE260E0", VA = "0xE260E0", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006CB")]
		internal class Sect163r1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x4002627")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x4002628")]
			private const int m = 163;

			[Token(Token = "0x4002629")]
			private const int k1 = 3;

			[Token(Token = "0x400262A")]
			private const int k2 = 6;

			[Token(Token = "0x400262B")]
			private const int k3 = 7;

			[Token(Token = "0x60035FB")]
			[Address(RVA = "0xE262D8", Offset = "0xE262D8", VA = "0xE262D8")]
			private Sect163r1Holder()
			{
			}

			[Token(Token = "0x60035FC")]
			[Address(RVA = "0xE262E0", Offset = "0xE262E0", VA = "0xE262E0", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006CC")]
		internal class Sect163r2Holder : X9ECParametersHolder
		{
			[Token(Token = "0x400262C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x400262D")]
			private const int m = 163;

			[Token(Token = "0x400262E")]
			private const int k1 = 3;

			[Token(Token = "0x400262F")]
			private const int k2 = 6;

			[Token(Token = "0x4002630")]
			private const int k3 = 7;

			[Token(Token = "0x60035FE")]
			[Address(RVA = "0xE26518", Offset = "0xE26518", VA = "0xE26518")]
			private Sect163r2Holder()
			{
			}

			[Token(Token = "0x60035FF")]
			[Address(RVA = "0xE26520", Offset = "0xE26520", VA = "0xE26520", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006CD")]
		internal class Sect193r1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x4002631")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x4002632")]
			private const int m = 193;

			[Token(Token = "0x4002633")]
			private const int k = 15;

			[Token(Token = "0x6003601")]
			[Address(RVA = "0xE2674C", Offset = "0xE2674C", VA = "0xE2674C")]
			private Sect193r1Holder()
			{
			}

			[Token(Token = "0x6003602")]
			[Address(RVA = "0xE26754", Offset = "0xE26754", VA = "0xE26754", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006CE")]
		internal class Sect193r2Holder : X9ECParametersHolder
		{
			[Token(Token = "0x4002634")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x4002635")]
			private const int m = 193;

			[Token(Token = "0x4002636")]
			private const int k = 15;

			[Token(Token = "0x6003604")]
			[Address(RVA = "0xE26980", Offset = "0xE26980", VA = "0xE26980")]
			private Sect193r2Holder()
			{
			}

			[Token(Token = "0x6003605")]
			[Address(RVA = "0xE26988", Offset = "0xE26988", VA = "0xE26988", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006CF")]
		internal class Sect233k1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x4002637")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x4002638")]
			private const int m = 233;

			[Token(Token = "0x4002639")]
			private const int k = 74;

			[Token(Token = "0x6003607")]
			[Address(RVA = "0xE26BB4", Offset = "0xE26BB4", VA = "0xE26BB4")]
			private Sect233k1Holder()
			{
			}

			[Token(Token = "0x6003608")]
			[Address(RVA = "0xE26BBC", Offset = "0xE26BBC", VA = "0xE26BBC", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006D0")]
		internal class Sect233r1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x400263A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x400263B")]
			private const int m = 233;

			[Token(Token = "0x400263C")]
			private const int k = 74;

			[Token(Token = "0x600360A")]
			[Address(RVA = "0xE26DA8", Offset = "0xE26DA8", VA = "0xE26DA8")]
			private Sect233r1Holder()
			{
			}

			[Token(Token = "0x600360B")]
			[Address(RVA = "0xE26DB0", Offset = "0xE26DB0", VA = "0xE26DB0", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006D1")]
		internal class Sect239k1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x400263D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x400263E")]
			private const int m = 239;

			[Token(Token = "0x400263F")]
			private const int k = 158;

			[Token(Token = "0x600360D")]
			[Address(RVA = "0xE26FD0", Offset = "0xE26FD0", VA = "0xE26FD0")]
			private Sect239k1Holder()
			{
			}

			[Token(Token = "0x600360E")]
			[Address(RVA = "0xE26FD8", Offset = "0xE26FD8", VA = "0xE26FD8", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006D2")]
		internal class Sect283k1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x4002640")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x4002641")]
			private const int m = 283;

			[Token(Token = "0x4002642")]
			private const int k1 = 5;

			[Token(Token = "0x4002643")]
			private const int k2 = 7;

			[Token(Token = "0x4002644")]
			private const int k3 = 12;

			[Token(Token = "0x6003610")]
			[Address(RVA = "0xE271C4", Offset = "0xE271C4", VA = "0xE271C4")]
			private Sect283k1Holder()
			{
			}

			[Token(Token = "0x6003611")]
			[Address(RVA = "0xE271CC", Offset = "0xE271CC", VA = "0xE271CC", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006D3")]
		internal class Sect283r1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x4002645")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x4002646")]
			private const int m = 283;

			[Token(Token = "0x4002647")]
			private const int k1 = 5;

			[Token(Token = "0x4002648")]
			private const int k2 = 7;

			[Token(Token = "0x4002649")]
			private const int k3 = 12;

			[Token(Token = "0x6003613")]
			[Address(RVA = "0xE273C4", Offset = "0xE273C4", VA = "0xE273C4")]
			private Sect283r1Holder()
			{
			}

			[Token(Token = "0x6003614")]
			[Address(RVA = "0xE273CC", Offset = "0xE273CC", VA = "0xE273CC", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006D4")]
		internal class Sect409k1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x400264A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x400264B")]
			private const int m = 409;

			[Token(Token = "0x400264C")]
			private const int k = 87;

			[Token(Token = "0x6003616")]
			[Address(RVA = "0xE275F8", Offset = "0xE275F8", VA = "0xE275F8")]
			private Sect409k1Holder()
			{
			}

			[Token(Token = "0x6003617")]
			[Address(RVA = "0xE27600", Offset = "0xE27600", VA = "0xE27600", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006D5")]
		internal class Sect409r1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x400264D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x400264E")]
			private const int m = 409;

			[Token(Token = "0x400264F")]
			private const int k = 87;

			[Token(Token = "0x6003619")]
			[Address(RVA = "0xE277EC", Offset = "0xE277EC", VA = "0xE277EC")]
			private Sect409r1Holder()
			{
			}

			[Token(Token = "0x600361A")]
			[Address(RVA = "0xE277F4", Offset = "0xE277F4", VA = "0xE277F4", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006D6")]
		internal class Sect571k1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x4002650")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x4002651")]
			private const int m = 571;

			[Token(Token = "0x4002652")]
			private const int k1 = 2;

			[Token(Token = "0x4002653")]
			private const int k2 = 5;

			[Token(Token = "0x4002654")]
			private const int k3 = 10;

			[Token(Token = "0x600361C")]
			[Address(RVA = "0xE27A14", Offset = "0xE27A14", VA = "0xE27A14")]
			private Sect571k1Holder()
			{
			}

			[Token(Token = "0x600361D")]
			[Address(RVA = "0xE27A1C", Offset = "0xE27A1C", VA = "0xE27A1C", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x20006D7")]
		internal class Sect571r1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x4002655")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x4002656")]
			private const int m = 571;

			[Token(Token = "0x4002657")]
			private const int k1 = 2;

			[Token(Token = "0x4002658")]
			private const int k2 = 5;

			[Token(Token = "0x4002659")]
			private const int k3 = 10;

			[Token(Token = "0x600361F")]
			[Address(RVA = "0xE27C14", Offset = "0xE27C14", VA = "0xE27C14")]
			private Sect571r1Holder()
			{
			}

			[Token(Token = "0x6003620")]
			[Address(RVA = "0xE27C1C", Offset = "0xE27C1C", VA = "0xE27C1C", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x40012D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly IDictionary objIds;

		[Token(Token = "0x40012D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly IDictionary curves;

		[Token(Token = "0x40012D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly IDictionary names;

		[Token(Token = "0x17000437")]
		public static IEnumerable Names
		{
			[Token(Token = "0x60022CB")]
			[Address(RVA = "0xE22BF0", Offset = "0xE22BF0", VA = "0xE22BF0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60022C1")]
		[Address(RVA = "0xE21AF0", Offset = "0xE21AF0", VA = "0xE21AF0")]
		private SecNamedCurves()
		{
		}

		[Token(Token = "0x60022C2")]
		[Address(RVA = "0xE21AF8", Offset = "0xE21AF8", VA = "0xE21AF8")]
		private static ECCurve ConfigureCurve(ECCurve curve)
		{
			return null;
		}

		[Token(Token = "0x60022C3")]
		[Address(RVA = "0xE21AFC", Offset = "0xE21AFC", VA = "0xE21AFC")]
		private static ECCurve ConfigureCurveGlv(ECCurve c, GlvTypeBParameters p)
		{
			return null;
		}

		[Token(Token = "0x60022C4")]
		[Address(RVA = "0xE21BA8", Offset = "0xE21BA8", VA = "0xE21BA8")]
		private static BigInteger FromHex(string hex)
		{
			return null;
		}

		[Token(Token = "0x60022C5")]
		[Address(RVA = "0xE21C44", Offset = "0xE21C44", VA = "0xE21C44")]
		private static void DefineCurve(string name, DerObjectIdentifier oid, X9ECParametersHolder holder)
		{
		}

		[Token(Token = "0x60022C6")]
		[Address(RVA = "0xE21E74", Offset = "0xE21E74", VA = "0xE21E74")]
		static SecNamedCurves()
		{
		}

		[Token(Token = "0x60022C7")]
		[Address(RVA = "0xE22908", Offset = "0xE22908", VA = "0xE22908")]
		public static X9ECParameters GetByName(string name)
		{
			return null;
		}

		[Token(Token = "0x60022C8")]
		[Address(RVA = "0xE1CB4C", Offset = "0xE1CB4C", VA = "0xE1CB4C")]
		public static X9ECParameters GetByOid(DerObjectIdentifier oid)
		{
			return null;
		}

		[Token(Token = "0x60022C9")]
		[Address(RVA = "0xE229A0", Offset = "0xE229A0", VA = "0xE229A0")]
		public static DerObjectIdentifier GetOid(string name)
		{
			return null;
		}

		[Token(Token = "0x60022CA")]
		[Address(RVA = "0xE22AF0", Offset = "0xE22AF0", VA = "0xE22AF0")]
		public static string GetName(DerObjectIdentifier oid)
		{
			return null;
		}
	}
	[Token(Token = "0x20003E4")]
	public abstract class SecObjectIdentifiers
	{
		[Token(Token = "0x40012D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly DerObjectIdentifier EllipticCurve;

		[Token(Token = "0x40012D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly DerObjectIdentifier SecT163k1;

		[Token(Token = "0x40012DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly DerObjectIdentifier SecT163r1;

		[Token(Token = "0x40012DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly DerObjectIdentifier SecT239k1;

		[Token(Token = "0x40012DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly DerObjectIdentifier SecT113r1;

		[Token(Token = "0x40012DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly DerObjectIdentifier SecT113r2;

		[Token(Token = "0x40012DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly DerObjectIdentifier SecP112r1;

		[Token(Token = "0x40012DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static readonly DerObjectIdentifier SecP112r2;

		[Token(Token = "0x40012E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static readonly DerObjectIdentifier SecP160r1;

		[Token(Token = "0x40012E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static readonly DerObjectIdentifier SecP160k1;

		[Token(Token = "0x40012E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static readonly DerObjectIdentifier SecP256k1;

		[Token(Token = "0x40012E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static readonly DerObjectIdentifier SecT163r2;

		[Token(Token = "0x40012E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static readonly DerObjectIdentifier SecT283k1;

		[Token(Token = "0x40012E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static readonly DerObjectIdentifier SecT283r1;

		[Token(Token = "0x40012E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static readonly DerObjectIdentifier SecT131r1;

		[Token(Token = "0x40012E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static readonly DerObjectIdentifier SecT131r2;

		[Token(Token = "0x40012E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static readonly DerObjectIdentifier SecT193r1;

		[Token(Token = "0x40012E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static readonly DerObjectIdentifier SecT193r2;

		[Token(Token = "0x40012EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public static readonly DerObjectIdentifier SecT233k1;

		[Token(Token = "0x40012EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public static readonly DerObjectIdentifier SecT233r1;

		[Token(Token = "0x40012EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public static readonly DerObjectIdentifier SecP128r1;

		[Token(Token = "0x40012ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public static readonly DerObjectIdentifier SecP128r2;

		[Token(Token = "0x40012EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public static readonly DerObjectIdentifier SecP160r2;

		[Token(Token = "0x40012EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public static readonly DerObjectIdentifier SecP192k1;

		[Token(Token = "0x40012F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public static readonly DerObjectIdentifier SecP224k1;

		[Token(Token = "0x40012F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public static readonly DerObjectIdentifier SecP224r1;

		[Token(Token = "0x40012F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public static readonly DerObjectIdentifier SecP384r1;

		[Token(Token = "0x40012F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public static readonly DerObjectIdentifier SecP521r1;

		[Token(Token = "0x40012F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public static readonly DerObjectIdentifier SecT409k1;

		[Token(Token = "0x40012F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public static readonly DerObjectIdentifier SecT409r1;

		[Token(Token = "0x40012F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public static readonly DerObjectIdentifier SecT571k1;

		[Token(Token = "0x40012F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public static readonly DerObjectIdentifier SecT571r1;

		[Token(Token = "0x40012F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public static readonly DerObjectIdentifier SecP192r1;

		[Token(Token = "0x40012F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public static readonly DerObjectIdentifier SecP256r1;

		[Token(Token = "0x60022CC")]
		[Address(RVA = "0xE27E48", Offset = "0xE27E48", VA = "0xE27E48")]
		protected SecObjectIdentifiers()
		{
		}
	}
}
namespace Org.BouncyCastle.Asn1.Pkcs
{
	[Token(Token = "0x20003E5")]
	public class ContentInfo : Asn1Encodable
	{
		[Token(Token = "0x40012FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly DerObjectIdentifier contentType;

		[Token(Token = "0x40012FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Asn1Encodable content;

		[Token(Token = "0x17000438")]
		public DerObjectIdentifier ContentType
		{
			[Token(Token = "0x60022D1")]
			[Address(RVA = "0xE1EE54", Offset = "0xE1EE54", VA = "0xE1EE54")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000439")]
		public Asn1Encodable Content
		{
			[Token(Token = "0x60022D2")]
			[Address(RVA = "0xE1EE5C", Offset = "0xE1EE5C", VA = "0xE1EE5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60022CE")]
		[Address(RVA = "0xE1EC50", Offset = "0xE1EC50", VA = "0xE1EC50")]
		public static ContentInfo GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x60022CF")]
		[Address(RVA = "0xE1ECF4", Offset = "0xE1ECF4", VA = "0xE1ECF4")]
		private ContentInfo(Asn1Sequence seq)
		{
		}

		[Token(Token = "0x60022D0")]
		[Address(RVA = "0xE1EE1C", Offset = "0xE1EE1C", VA = "0xE1EE1C")]
		public ContentInfo(DerObjectIdentifier contentType, Asn1Encodable content)
		{
		}

		[Token(Token = "0x60022D3")]
		[Address(RVA = "0xE1EE64", Offset = "0xE1EE64", VA = "0xE1EE64", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
	[Token(Token = "0x20003E6")]
	public class DHParameter : Asn1Encodable
	{
		[Token(Token = "0x40012FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal DerInteger p;

		[Token(Token = "0x40012FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal DerInteger g;

		[Token(Token = "0x40012FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal DerInteger l;

		[Token(Token = "0x1700043A")]
		public BigInteger P
		{
			[Token(Token = "0x60022D6")]
			[Address(RVA = "0xE1F404", Offset = "0xE1F404", VA = "0xE1F404")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700043B")]
		public BigInteger G
		{
			[Token(Token = "0x60022D7")]
			[Address(RVA = "0xE1F41C", Offset = "0xE1F41C", VA = "0xE1F41C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700043C")]
		public BigInteger L
		{
			[Token(Token = "0x60022D8")]
			[Address(RVA = "0xE1F434", Offset = "0xE1F434", VA = "0xE1F434")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60022D4")]
		[Address(RVA = "0xE1EFD0", Offset = "0xE1EFD0", VA = "0xE1EFD0")]
		public DHParameter(BigInteger p, BigInteger g, int l)
		{
		}

		[Token(Token = "0x60022D5")]
		[Address(RVA = "0xE1F08C", Offset = "0xE1F08C", VA = "0xE1F08C")]
		public DHParameter(Asn1Sequence seq)
		{
		}

		[Token(Token = "0x60022D9")]
		[Address(RVA = "0xE1F444", Offset = "0xE1F444", VA = "0xE1F444", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
	[Token(Token = "0x20003E7")]
	public abstract class PkcsObjectIdentifiers
	{
		[Token(Token = "0x40012FF")]
		public const string Pkcs1 = "1.2.840.113549.1.1";

		[Token(Token = "0x4001300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly DerObjectIdentifier RsaEncryption;

		[Token(Token = "0x4001301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly DerObjectIdentifier MD2WithRsaEncryption;

		[Token(Token = "0x4001302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly DerObjectIdentifier MD4WithRsaEncryption;

		[Token(Token = "0x4001303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly DerObjectIdentifier MD5WithRsaEncryption;

		[Token(Token = "0x4001304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly DerObjectIdentifier Sha1WithRsaEncryption;

		[Token(Token = "0x4001305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly DerObjectIdentifier SrsaOaepEncryptionSet;

		[Token(Token = "0x4001306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly DerObjectIdentifier IdRsaesOaep;

		[Token(Token = "0x4001307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static readonly DerObjectIdentifier IdMgf1;

		[Token(Token = "0x4001308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static readonly DerObjectIdentifier IdPSpecified;

		[Token(Token = "0x4001309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static readonly DerObjectIdentifier IdRsassaPss;

		[Token(Token = "0x400130A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static readonly DerObjectIdentifier Sha256WithRsaEncryption;

		[Token(Token = "0x400130B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static readonly DerObjectIdentifier Sha384WithRsaEncryption;

		[Token(Token = "0x400130C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static readonly DerObjectIdentifier Sha512WithRsaEncryption;

		[Token(Token = "0x400130D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static readonly DerObjectIdentifier Sha224WithRsaEncryption;

		[Token(Token = "0x400130E")]
		public const string Pkcs3 = "1.2.840.113549.1.3";

		[Token(Token = "0x400130F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static readonly DerObjectIdentifier DhKeyAgreement;

		[Token(Token = "0x4001310")]
		public const string Pkcs5 = "1.2.840.113549.1.5";

		[Token(Token = "0x4001311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static readonly DerObjectIdentifier PbeWithMD2AndDesCbc;

		[Token(Token = "0x4001312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static readonly DerObjectIdentifier PbeWithMD2AndRC2Cbc;

		[Token(Token = "0x4001313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static readonly DerObjectIdentifier PbeWithMD5AndDesCbc;

		[Token(Token = "0x4001314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public static readonly DerObjectIdentifier PbeWithMD5AndRC2Cbc;

		[Token(Token = "0x4001315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public static readonly DerObjectIdentifier PbeWithSha1AndDesCbc;

		[Token(Token = "0x4001316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public static readonly DerObjectIdentifier PbeWithSha1AndRC2Cbc;

		[Token(Token = "0x4001317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public static readonly DerObjectIdentifier IdPbeS2;

		[Token(Token = "0x4001318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public static readonly DerObjectIdentifier IdPbkdf2;

		[Token(Token = "0x4001319")]
		public const string EncryptionAlgorithm = "1.2.840.113549.3";

		[Token(Token = "0x400131A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public static readonly DerObjectIdentifier DesEde3Cbc;

		[Token(Token = "0x400131B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public static readonly DerObjectIdentifier RC2Cbc;

		[Token(Token = "0x400131C")]
		public const string DigestAlgorithm = "1.2.840.113549.2";

		[Token(Token = "0x400131D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public static readonly DerObjectIdentifier MD2;

		[Token(Token = "0x400131E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public static readonly DerObjectIdentifier MD4;

		[Token(Token = "0x400131F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public static readonly DerObjectIdentifier MD5;

		[Token(Token = "0x4001320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public static readonly DerObjectIdentifier IdHmacWithSha1;

		[Token(Token = "0x4001321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public static readonly DerObjectIdentifier IdHmacWithSha224;

		[Token(Token = "0x4001322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public static readonly DerObjectIdentifier IdHmacWithSha256;

		[Token(Token = "0x4001323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public static readonly DerObjectIdentifier IdHmacWithSha384;

		[Token(Token = "0x4001324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public static readonly DerObjectIdentifier IdHmacWithSha512;

		[Token(Token = "0x4001325")]
		public const string Pkcs7 = "1.2.840.113549.1.7";

		[Token(Token = "0x4001326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public static readonly DerObjectIdentifier Data;

		[Token(Token = "0x4001327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public static readonly DerObjectIdentifier SignedData;

		[Token(Token = "0x4001328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public static readonly DerObjectIdentifier EnvelopedData;

		[Token(Token = "0x4001329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public static readonly DerObjectIdentifier SignedAndEnvelopedData;

		[Token(Token = "0x400132A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public static readonly DerObjectIdentifier DigestedData;

		[Token(Token = "0x400132B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public static readonly DerObjectIdentifier EncryptedData;

		[Token(Token = "0x400132C")]
		public const string Pkcs9 = "1.2.840.113549.1.9";

		[Token(Token = "0x400132D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public static readonly DerObjectIdentifier Pkcs9AtEmailAddress;

		[Token(Token = "0x400132E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public static readonly DerObjectIdentifier Pkcs9AtUnstructuredName;

		[Token(Token = "0x400132F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public static readonly DerObjectIdentifier Pkcs9AtContentType;

		[Token(Token = "0x4001330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public static readonly DerObjectIdentifier Pkcs9AtMessageDigest;

		[Token(Token = "0x4001331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public static readonly DerObjectIdentifier Pkcs9AtSigningTime;

		[Token(Token = "0x4001332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public static readonly DerObjectIdentifier Pkcs9AtCounterSignature;

		[Token(Token = "0x4001333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public static readonly DerObjectIdentifier Pkcs9AtChallengePassword;

		[Token(Token = "0x4001334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public static readonly DerObjectIdentifier Pkcs9AtUnstructuredAddress;

		[Token(Token = "0x4001335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public static readonly DerObjectIdentifier Pkcs9AtExtendedCertificateAttributes;

		[Token(Token = "0x4001336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public static readonly DerObjectIdentifier Pkcs9AtSigningDescription;

		[Token(Token = "0x4001337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public static readonly DerObjectIdentifier Pkcs9AtExtensionRequest;

		[Token(Token = "0x4001338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public static readonly DerObjectIdentifier Pkcs9AtSmimeCapabilities;

		[Token(Token = "0x4001339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public static readonly DerObjectIdentifier Pkcs9AtFriendlyName;

		[Token(Token = "0x400133A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public static readonly DerObjectIdentifier Pkcs9AtLocalKeyID;

		[Token(Token = "0x400133B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x8233CC", Offset = "0x8233CC")]
		public static readonly DerObjectIdentifier X509CertType;

		[Token(Token = "0x400133C")]
		public const string CertTypes = "1.2.840.113549.1.9.22";

		[Token(Token = "0x400133D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public static readonly DerObjectIdentifier X509Certificate;

		[Token(Token = "0x400133E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public static readonly DerObjectIdentifier SdsiCertificate;

		[Token(Token = "0x400133F")]
		public const string CrlTypes = "1.2.840.113549.1.9.23";

		[Token(Token = "0x4001340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public static readonly DerObjectIdentifier X509Crl;

		[Token(Token = "0x4001341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public static readonly DerObjectIdentifier IdAlgPwriKek;

		[Token(Token = "0x4001342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public static readonly DerObjectIdentifier PreferSignedData;

		[Token(Token = "0x4001343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public static readonly DerObjectIdentifier CannotDecryptAny;

		[Token(Token = "0x4001344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public static readonly DerObjectIdentifier SmimeCapabilitiesVersions;

		[Token(Token = "0x4001345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public static readonly DerObjectIdentifier IdAAReceiptRequest;

		[Token(Token = "0x4001346")]
		public const string IdCT = "1.2.840.113549.1.9.16.1";

		[Token(Token = "0x4001347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		public static readonly DerObjectIdentifier IdCTAuthData;

		[Token(Token = "0x4001348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		public static readonly DerObjectIdentifier IdCTTstInfo;

		[Token(Token = "0x4001349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public static readonly DerObjectIdentifier IdCTCompressedData;

		[Token(Token = "0x400134A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		public static readonly DerObjectIdentifier IdCTAuthEnvelopedData;

		[Token(Token = "0x400134B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		public static readonly DerObjectIdentifier IdCTTimestampedData;

		[Token(Token = "0x400134C")]
		public const string IdCti = "1.2.840.113549.1.9.16.6";

		[Token(Token = "0x400134D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		public static readonly DerObjectIdentifier IdCtiEtsProofOfOrigin;

		[Token(Token = "0x400134E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		public static readonly DerObjectIdentifier IdCtiEtsProofOfReceipt;

		[Token(Token = "0x400134F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		public static readonly DerObjectIdentifier IdCtiEtsProofOfDelivery;

		[Token(Token = "0x4001350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		public static readonly DerObjectIdentifier IdCtiEtsProofOfSender;

		[Token(Token = "0x4001351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		public static readonly DerObjectIdentifier IdCtiEtsProofOfApproval;

		[Token(Token = "0x4001352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		public static readonly DerObjectIdentifier IdCtiEtsProofOfCreation;

		[Token(Token = "0x4001353")]
		public const string IdAA = "1.2.840.113549.1.9.16.2";

		[Token(Token = "0x4001354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		public static readonly DerObjectIdentifier IdAAContentHint;

		[Token(Token = "0x4001355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		public static readonly DerObjectIdentifier IdAAMsgSigDigest;

		[Token(Token = "0x4001356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		public static readonly DerObjectIdentifier IdAAContentReference;

		[Token(Token = "0x4001357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		public static readonly DerObjectIdentifier IdAAEncrypKeyPref;

		[Token(Token = "0x4001358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		public static readonly DerObjectIdentifier IdAASigningCertificate;

		[Token(Token = "0x4001359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		public static readonly DerObjectIdentifier IdAASigningCertificateV2;

		[Token(Token = "0x400135A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		public static readonly DerObjectIdentifier IdAAContentIdentifier;

		[Token(Token = "0x400135B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		public static readonly DerObjectIdentifier IdAASignatureTimeStampToken;

		[Token(Token = "0x400135C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		public static readonly DerObjectIdentifier IdAAEtsSigPolicyID;

		[Token(Token = "0x400135D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		public static readonly DerObjectIdentifier IdAAEtsCommitmentType;

		[Token(Token = "0x400135E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		public static readonly DerObjectIdentifier IdAAEtsSignerLocation;

		[Token(Token = "0x400135F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		public static readonly DerObjectIdentifier IdAAEtsSignerAttr;

		[Token(Token = "0x4001360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		public static readonly DerObjectIdentifier IdAAEtsOtherSigCert;

		[Token(Token = "0x4001361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		public static readonly DerObjectIdentifier IdAAEtsContentTimestamp;

		[Token(Token = "0x4001362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		public static readonly DerObjectIdentifier IdAAEtsCertificateRefs;

		[Token(Token = "0x4001363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		public static readonly DerObjectIdentifier IdAAEtsRevocationRefs;

		[Token(Token = "0x4001364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		public static readonly DerObjectIdentifier IdAAEtsCertValues;

		[Token(Token = "0x4001365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		public static readonly DerObjectIdentifier IdAAEtsRevocationValues;

		[Token(Token = "0x4001366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
		public static readonly DerObjectIdentifier IdAAEtsEscTimeStamp;

		[Token(Token = "0x4001367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		public static readonly DerObjectIdentifier IdAAEtsCertCrlTimestamp;

		[Token(Token = "0x4001368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		public static readonly DerObjectIdentifier IdAAEtsArchiveTimestamp;

		[Token(Token = "0x4001369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x823404", Offset = "0x823404")]
		public static readonly DerObjectIdentifier IdAASigPolicyID;

		[Token(Token = "0x400136A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x82343C", Offset = "0x82343C")]
		public static readonly DerObjectIdentifier IdAACommitmentType;

		[Token(Token = "0x400136B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x823474", Offset = "0x823474")]
		public static readonly DerObjectIdentifier IdAASignerLocation;

		[Token(Token = "0x400136C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x8234AC", Offset = "0x8234AC")]
		public static readonly DerObjectIdentifier IdAAOtherSigCert;

		[Token(Token = "0x400136D")]
		public const string IdSpq = "1.2.840.113549.1.9.16.5";

		[Token(Token = "0x400136E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
		public static readonly DerObjectIdentifier IdSpqEtsUri;

		[Token(Token = "0x400136F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		public static readonly DerObjectIdentifier IdSpqEtsUNotice;

		[Token(Token = "0x4001370")]
		public const string Pkcs12 = "1.2.840.113549.1.12";

		[Token(Token = "0x4001371")]
		public const string BagTypes = "1.2.840.113549.1.12.10.1";

		[Token(Token = "0x4001372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
		public static readonly DerObjectIdentifier KeyBag;

		[Token(Token = "0x4001373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
		public static readonly DerObjectIdentifier Pkcs8ShroudedKeyBag;

		[Token(Token = "0x4001374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
		public static readonly DerObjectIdentifier CertBag;

		[Token(Token = "0x4001375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x338")]
		public static readonly DerObjectIdentifier CrlBag;

		[Token(Token = "0x4001376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
		public static readonly DerObjectIdentifier SecretBag;

		[Token(Token = "0x4001377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
		public static readonly DerObjectIdentifier SafeContentsBag;

		[Token(Token = "0x4001378")]
		public const string Pkcs12PbeIds = "1.2.840.113549.1.12.1";

		[Token(Token = "0x4001379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
		public static readonly DerObjectIdentifier PbeWithShaAnd128BitRC4;

		[Token(Token = "0x400137A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
		public static readonly DerObjectIdentifier PbeWithShaAnd40BitRC4;

		[Token(Token = "0x400137B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x360")]
		public static readonly DerObjectIdentifier PbeWithShaAnd3KeyTripleDesCbc;

		[Token(Token = "0x400137C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x368")]
		public static readonly DerObjectIdentifier PbeWithShaAnd2KeyTripleDesCbc;

		[Token(Token = "0x400137D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x370")]
		public static readonly DerObjectIdentifier PbeWithShaAnd128BitRC2Cbc;

		[Token(Token = "0x400137E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x378")]
		public static readonly DerObjectIdentifier PbewithShaAnd40BitRC2Cbc;

		[Token(Token = "0x400137F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x380")]
		public static readonly DerObjectIdentifier IdAlgCms3DesWrap;

		[Token(Token = "0x4001380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x388")]
		public static readonly DerObjectIdentifier IdAlgCmsRC2Wrap;

		[Token(Token = "0x60022DA")]
		[Address(RVA = "0xE1F5B0", Offset = "0xE1F5B0", VA = "0xE1F5B0")]
		protected PkcsObjectIdentifiers()
		{
		}
	}
	[Token(Token = "0x20003E8")]
	public class RsassaPssParameters : Asn1Encodable
	{
		[Token(Token = "0x4001381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private AlgorithmIdentifier hashAlgorithm;

		[Token(Token = "0x4001382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private AlgorithmIdentifier maskGenAlgorithm;

		[Token(Token = "0x4001383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private DerInteger saltLength;

		[Token(Token = "0x4001384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private DerInteger trailerField;

		[Token(Token = "0x4001385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly AlgorithmIdentifier DefaultHashAlgorithm;

		[Token(Token = "0x4001386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly AlgorithmIdentifier DefaultMaskGenFunction;

		[Token(Token = "0x4001387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly DerInteger DefaultSaltLength;

		[Token(Token = "0x4001388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly DerInteger DefaultTrailerField;

		[Token(Token = "0x1700043D")]
		public AlgorithmIdentifier HashAlgorithm
		{
			[Token(Token = "0x60022E0")]
			[Address(RVA = "0xE20BBC", Offset = "0xE20BBC", VA = "0xE20BBC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700043E")]
		public AlgorithmIdentifier MaskGenAlgorithm
		{
			[Token(Token = "0x60022E1")]
			[Address(RVA = "0xE20BC4", Offset = "0xE20BC4", VA = "0xE20BC4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700043F")]
		public DerInteger SaltLength
		{
			[Token(Token = "0x60022E2")]
			[Address(RVA = "0xE20BCC", Offset = "0xE20BCC", VA = "0xE20BCC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000440")]
		public DerInteger TrailerField
		{
			[Token(Token = "0x60022E3")]
			[Address(RVA = "0xE20BD4", Offset = "0xE20BD4", VA = "0xE20BD4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60022DC")]
		[Address(RVA = "0xE20764", Offset = "0xE20764", VA = "0xE20764")]
		public static RsassaPssParameters GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x60022DD")]
		[Address(RVA = "0xE20AD0", Offset = "0xE20AD0", VA = "0xE20AD0")]
		public RsassaPssParameters()
		{
		}

		[Token(Token = "0x60022DE")]
		[Address(RVA = "0xE20B70", Offset = "0xE20B70", VA = "0xE20B70")]
		public RsassaPssParameters(AlgorithmIdentifier hashAlgorithm, AlgorithmIdentifier maskGenAlgorithm, DerInteger saltLength, DerInteger trailerField)
		{
		}

		[Token(Token = "0x60022DF")]
		[Address(RVA = "0xE208E8", Offset = "0xE208E8", VA = "0xE208E8")]
		public RsassaPssParameters(Asn1Sequence seq)
		{
		}

		[Token(Token = "0x60022E4")]
		[Address(RVA = "0xE20BDC", Offset = "0xE20BDC", VA = "0xE20BDC", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
	[Token(Token = "0x20003E9")]
	public class SignedData : Asn1Encodable
	{
		[Token(Token = "0x4001389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly DerInteger version;

		[Token(Token = "0x400138A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Asn1Set digestAlgorithms;

		[Token(Token = "0x400138B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ContentInfo contentInfo;

		[Token(Token = "0x400138C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly Asn1Set certificates;

		[Token(Token = "0x400138D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly Asn1Set crls;

		[Token(Token = "0x400138E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly Asn1Set signerInfos;

		[Token(Token = "0x17000441")]
		public DerInteger Version
		{
			[Token(Token = "0x60022E9")]
			[Address(RVA = "0xE2181C", Offset = "0xE2181C", VA = "0xE2181C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000442")]
		public Asn1Set DigestAlgorithms
		{
			[Token(Token = "0x60022EA")]
			[Address(RVA = "0xE21824", Offset = "0xE21824", VA = "0xE21824")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000443")]
		public ContentInfo ContentInfo
		{
			[Token(Token = "0x60022EB")]
			[Address(RVA = "0xE2182C", Offset = "0xE2182C", VA = "0xE2182C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000444")]
		public Asn1Set Certificates
		{
			[Token(Token = "0x60022EC")]
			[Address(RVA = "0xE21834", Offset = "0xE21834", VA = "0xE21834")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000445")]
		public Asn1Set Crls
		{
			[Token(Token = "0x60022ED")]
			[Address(RVA = "0xE2183C", Offset = "0xE2183C", VA = "0xE2183C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000446")]
		public Asn1Set SignerInfos
		{
			[Token(Token = "0x60022EE")]
			[Address(RVA = "0xE21844", Offset = "0xE21844", VA = "0xE21844")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60022E6")]
		[Address(RVA = "0xE211B4", Offset = "0xE211B4", VA = "0xE211B4")]
		public static SignedData GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x60022E7")]
		[Address(RVA = "0xE217BC", Offset = "0xE217BC", VA = "0xE217BC")]
		public SignedData(DerInteger _version, Asn1Set _digestAlgorithms, ContentInfo _contentInfo, Asn1Set _certificates, Asn1Set _crls, Asn1Set _signerInfos)
		{
		}

		[Token(Token = "0x60022E8")]
		[Address(RVA = "0xE21258", Offset = "0xE21258", VA = "0xE21258")]
		private SignedData(Asn1Sequence seq)
		{
		}

		[Token(Token = "0x60022EF")]
		[Address(RVA = "0xE2184C", Offset = "0xE2184C", VA = "0xE2184C", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
}
namespace Org.BouncyCastle.Asn1.Oiw
{
	[Token(Token = "0x20003EA")]
	public class ElGamalParameter : Asn1Encodable
	{
		[Token(Token = "0x400138F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal DerInteger p;

		[Token(Token = "0x4001390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal DerInteger g;

		[Token(Token = "0x17000447")]
		public BigInteger P
		{
			[Token(Token = "0x60022F2")]
			[Address(RVA = "0xE1E8F0", Offset = "0xE1E8F0", VA = "0xE1E8F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000448")]
		public BigInteger G
		{
			[Token(Token = "0x60022F3")]
			[Address(RVA = "0xE1E908", Offset = "0xE1E908", VA = "0xE1E908")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60022F0")]
		[Address(RVA = "0xE1E758", Offset = "0xE1E758", VA = "0xE1E758")]
		public ElGamalParameter(BigInteger p, BigInteger g)
		{
		}

		[Token(Token = "0x60022F1")]
		[Address(RVA = "0xE1E7F4", Offset = "0xE1E7F4", VA = "0xE1E7F4")]
		public ElGamalParameter(Asn1Sequence seq)
		{
		}

		[Token(Token = "0x60022F4")]
		[Address(RVA = "0xE1E920", Offset = "0xE1E920", VA = "0xE1E920", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
	[Token(Token = "0x20003EB")]
	public abstract class OiwObjectIdentifiers
	{
		[Token(Token = "0x4001391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly DerObjectIdentifier MD4WithRsa;

		[Token(Token = "0x4001392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly DerObjectIdentifier MD5WithRsa;

		[Token(Token = "0x4001393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly DerObjectIdentifier MD4WithRsaEncryption;

		[Token(Token = "0x4001394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly DerObjectIdentifier DesEcb;

		[Token(Token = "0x4001395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly DerObjectIdentifier DesCbc;

		[Token(Token = "0x4001396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly DerObjectIdentifier DesOfb;

		[Token(Token = "0x4001397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly DerObjectIdentifier DesCfb;

		[Token(Token = "0x4001398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static readonly DerObjectIdentifier DesEde;

		[Token(Token = "0x4001399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static readonly DerObjectIdentifier IdSha1;

		[Token(Token = "0x400139A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static readonly DerObjectIdentifier DsaWithSha1;

		[Token(Token = "0x400139B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static readonly DerObjectIdentifier Sha1WithRsa;

		[Token(Token = "0x400139C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static readonly DerObjectIdentifier ElGamalAlgorithm;

		[Token(Token = "0x60022F5")]
		[Address(RVA = "0xE1EA14", Offset = "0xE1EA14", VA = "0xE1EA14")]
		protected OiwObjectIdentifiers()
		{
		}
	}
}
namespace Org.BouncyCastle.Asn1.Ocsp
{
	[Token(Token = "0x20003EC")]
	public class OcspResponse : Asn1Encodable
	{
		[Token(Token = "0x400139D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly OcspResponseStatus responseStatus;

		[Token(Token = "0x400139E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ResponseBytes responseBytes;

		[Token(Token = "0x17000449")]
		public OcspResponseStatus ResponseStatus
		{
			[Token(Token = "0x60022FB")]
			[Address(RVA = "0xE1DBA0", Offset = "0xE1DBA0", VA = "0xE1DBA0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700044A")]
		public ResponseBytes ResponseBytes
		{
			[Token(Token = "0x60022FC")]
			[Address(RVA = "0xE1DBA8", Offset = "0xE1DBA8", VA = "0xE1DBA8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60022F7")]
		[Address(RVA = "0xE1D760", Offset = "0xE1D760", VA = "0xE1D760")]
		public static OcspResponse GetInstance(Asn1TaggedObject obj, bool explicitly)
		{
			return null;
		}

		[Token(Token = "0x60022F8")]
		[Address(RVA = "0xE1D77C", Offset = "0xE1D77C", VA = "0xE1D77C")]
		public static OcspResponse GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x60022F9")]
		[Address(RVA = "0xE1DA4C", Offset = "0xE1DA4C", VA = "0xE1DA4C")]
		public OcspResponse(OcspResponseStatus responseStatus, ResponseBytes responseBytes)
		{
		}

		[Token(Token = "0x60022FA")]
		[Address(RVA = "0xE1D8FC", Offset = "0xE1D8FC", VA = "0xE1D8FC")]
		private OcspResponse(Asn1Sequence seq)
		{
		}

		[Token(Token = "0x60022FD")]
		[Address(RVA = "0xE1DBB0", Offset = "0xE1DBB0", VA = "0xE1DBB0", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
	[Token(Token = "0x20003ED")]
	public class OcspResponseStatus : DerEnumerated
	{
		[Token(Token = "0x400139F")]
		public const int Successful = 0;

		[Token(Token = "0x40013A0")]
		public const int MalformedRequest = 1;

		[Token(Token = "0x40013A1")]
		public const int InternalError = 2;

		[Token(Token = "0x40013A2")]
		public const int TryLater = 3;

		[Token(Token = "0x40013A3")]
		public const int SignatureRequired = 5;

		[Token(Token = "0x40013A4")]
		public const int Unauthorized = 6;

		[Token(Token = "0x60022FE")]
		[Address(RVA = "0xE1DD1C", Offset = "0xE1DD1C", VA = "0xE1DD1C")]
		public OcspResponseStatus(int value)
		{
		}

		[Token(Token = "0x60022FF")]
		[Address(RVA = "0xE1DAEC", Offset = "0xE1DAEC", VA = "0xE1DAEC")]
		public OcspResponseStatus(DerEnumerated value)
		{
		}
	}
	[Token(Token = "0x20003EE")]
	public class ResponderID : Asn1Encodable, IAsn1Choice
	{
		[Token(Token = "0x40013A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Asn1Encodable id;

		[Token(Token = "0x1700044B")]
		public virtual X509Name Name
		{
			[Token(Token = "0x6002305")]
			[Address(RVA = "0xE1E15C", Offset = "0xE1E15C", VA = "0xE1E15C", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002300")]
		[Address(RVA = "0xE1DD94", Offset = "0xE1DD94", VA = "0xE1DD94")]
		public static ResponderID GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x6002301")]
		[Address(RVA = "0xE1DF74", Offset = "0xE1DF74", VA = "0xE1DF74")]
		public ResponderID(Asn1OctetString id)
		{
		}

		[Token(Token = "0x6002302")]
		[Address(RVA = "0xE1E010", Offset = "0xE1E010", VA = "0xE1E010")]
		public ResponderID(X509Name id)
		{
		}

		[Token(Token = "0x6002303")]
		[Address(RVA = "0xE1E0AC", Offset = "0xE1E0AC", VA = "0xE1E0AC")]
		public static ResponderID GetInstance(Asn1TaggedObject obj, bool isExplicit)
		{
			return null;
		}

		[Token(Token = "0x6002304")]
		[Address(RVA = "0xE1E0CC", Offset = "0xE1E0CC", VA = "0xE1E0CC", Slot = "6")]
		public virtual byte[] GetKeyHash()
		{
			return null;
		}

		[Token(Token = "0x6002306")]
		[Address(RVA = "0xE1E210", Offset = "0xE1E210", VA = "0xE1E210", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
	[Token(Token = "0x20003EF")]
	public class ResponseBytes : Asn1Encodable
	{
		[Token(Token = "0x40013A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly DerObjectIdentifier responseType;

		[Token(Token = "0x40013A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Asn1OctetString response;

		[Token(Token = "0x1700044C")]
		public DerObjectIdentifier ResponseType
		{
			[Token(Token = "0x600230B")]
			[Address(RVA = "0xE1E654", Offset = "0xE1E654", VA = "0xE1E654")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700044D")]
		public Asn1OctetString Response
		{
			[Token(Token = "0x600230C")]
			[Address(RVA = "0xE1E65C", Offset = "0xE1E65C", VA = "0xE1E65C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002307")]
		[Address(RVA = "0xE1DB84", Offset = "0xE1DB84", VA = "0xE1DB84")]
		public static ResponseBytes GetInstance(Asn1TaggedObject obj, bool explicitly)
		{
			return null;
		}

		[Token(Token = "0x6002308")]
		[Address(RVA = "0xE1E2E8", Offset = "0xE1E2E8", VA = "0xE1E2E8")]
		public static ResponseBytes GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x6002309")]
		[Address(RVA = "0xE1E594", Offset = "0xE1E594", VA = "0xE1E594")]
		public ResponseBytes(DerObjectIdentifier responseType, Asn1OctetString response)
		{
		}

		[Token(Token = "0x600230A")]
		[Address(RVA = "0xE1E468", Offset = "0xE1E468", VA = "0xE1E468")]
		private ResponseBytes(Asn1Sequence seq)
		{
		}

		[Token(Token = "0x600230D")]
		[Address(RVA = "0xE1E664", Offset = "0xE1E664", VA = "0xE1E664", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
}
namespace Org.BouncyCastle.Asn1.Nist
{
	[Token(Token = "0x20003F0")]
	public sealed class NistNamedCurves
	{
		[Token(Token = "0x40013A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly IDictionary objIds;

		[Token(Token = "0x40013A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly IDictionary names;

		[Token(Token = "0x1700044E")]
		public static IEnumerable Names
		{
			[Token(Token = "0x6002315")]
			[Address(RVA = "0xE1CD78", Offset = "0xE1CD78", VA = "0xE1CD78")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600230E")]
		[Address(RVA = "0xE1C504", Offset = "0xE1C504", VA = "0xE1C504")]
		private NistNamedCurves()
		{
		}

		[Token(Token = "0x600230F")]
		[Address(RVA = "0xE1C50C", Offset = "0xE1C50C", VA = "0xE1C50C")]
		private static void DefineCurveAlias(string name, DerObjectIdentifier oid)
		{
		}

		[Token(Token = "0x6002310")]
		[Address(RVA = "0xE1C6B4", Offset = "0xE1C6B4", VA = "0xE1C6B4")]
		static NistNamedCurves()
		{
		}

		[Token(Token = "0x6002311")]
		[Address(RVA = "0xE1C900", Offset = "0xE1C900", VA = "0xE1C900")]
		public static X9ECParameters GetByName(string name)
		{
			return null;
		}

		[Token(Token = "0x6002312")]
		[Address(RVA = "0xE1CAE8", Offset = "0xE1CAE8", VA = "0xE1CAE8")]
		public static X9ECParameters GetByOid(DerObjectIdentifier oid)
		{
			return null;
		}

		[Token(Token = "0x6002313")]
		[Address(RVA = "0xE1C998", Offset = "0xE1C998", VA = "0xE1C998")]
		public static DerObjectIdentifier GetOid(string name)
		{
			return null;
		}

		[Token(Token = "0x6002314")]
		[Address(RVA = "0xE1CC78", Offset = "0xE1CC78", VA = "0xE1CC78")]
		public static string GetName(DerObjectIdentifier oid)
		{
			return null;
		}
	}
	[Token(Token = "0x20003F1")]
	public sealed class NistObjectIdentifiers
	{
		[Token(Token = "0x40013AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly DerObjectIdentifier NistAlgorithm;

		[Token(Token = "0x40013AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly DerObjectIdentifier HashAlgs;

		[Token(Token = "0x40013AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly DerObjectIdentifier IdSha256;

		[Token(Token = "0x40013AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly DerObjectIdentifier IdSha384;

		[Token(Token = "0x40013AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly DerObjectIdentifier IdSha512;

		[Token(Token = "0x40013AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly DerObjectIdentifier IdSha224;

		[Token(Token = "0x40013B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly DerObjectIdentifier IdSha512_224;

		[Token(Token = "0x40013B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static readonly DerObjectIdentifier IdSha512_256;

		[Token(Token = "0x40013B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static readonly DerObjectIdentifier Aes;

		[Token(Token = "0x40013B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static readonly DerObjectIdentifier IdAes128Ecb;

		[Token(Token = "0x40013B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static readonly DerObjectIdentifier IdAes128Cbc;

		[Token(Token = "0x40013B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static readonly DerObjectIdentifier IdAes128Ofb;

		[Token(Token = "0x40013B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static readonly DerObjectIdentifier IdAes128Cfb;

		[Token(Token = "0x40013B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static readonly DerObjectIdentifier IdAes128Wrap;

		[Token(Token = "0x40013B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static readonly DerObjectIdentifier IdAes128Gcm;

		[Token(Token = "0x40013B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static readonly DerObjectIdentifier IdAes128Ccm;

		[Token(Token = "0x40013BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static readonly DerObjectIdentifier IdAes192Ecb;

		[Token(Token = "0x40013BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static readonly DerObjectIdentifier IdAes192Cbc;

		[Token(Token = "0x40013BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public static readonly DerObjectIdentifier IdAes192Ofb;

		[Token(Token = "0x40013BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public static readonly DerObjectIdentifier IdAes192Cfb;

		[Token(Token = "0x40013BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public static readonly DerObjectIdentifier IdAes192Wrap;

		[Token(Token = "0x40013BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public static readonly DerObjectIdentifier IdAes192Gcm;

		[Token(Token = "0x40013C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public static readonly DerObjectIdentifier IdAes192Ccm;

		[Token(Token = "0x40013C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public static readonly DerObjectIdentifier IdAes256Ecb;

		[Token(Token = "0x40013C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public static readonly DerObjectIdentifier IdAes256Cbc;

		[Token(Token = "0x40013C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public static readonly DerObjectIdentifier IdAes256Ofb;

		[Token(Token = "0x40013C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public static readonly DerObjectIdentifier IdAes256Cfb;

		[Token(Token = "0x40013C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public static readonly DerObjectIdentifier IdAes256Wrap;

		[Token(Token = "0x40013C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public static readonly DerObjectIdentifier IdAes256Gcm;

		[Token(Token = "0x40013C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public static readonly DerObjectIdentifier IdAes256Ccm;

		[Token(Token = "0x40013C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public static readonly DerObjectIdentifier IdDsaWithSha2;

		[Token(Token = "0x40013C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public static readonly DerObjectIdentifier DsaWithSha224;

		[Token(Token = "0x40013CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public static readonly DerObjectIdentifier DsaWithSha256;

		[Token(Token = "0x40013CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public static readonly DerObjectIdentifier DsaWithSha384;

		[Token(Token = "0x40013CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public static readonly DerObjectIdentifier DsaWithSha512;

		[Token(Token = "0x6002316")]
		[Address(RVA = "0xE1CE80", Offset = "0xE1CE80", VA = "0xE1CE80")]
		private NistObjectIdentifiers()
		{
		}
	}
}
namespace Org.BouncyCastle.Asn1.Misc
{
	[Token(Token = "0x20003F2")]
	public abstract class MiscObjectIdentifiers
	{
		[Token(Token = "0x40013CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly DerObjectIdentifier Netscape;

		[Token(Token = "0x40013CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly DerObjectIdentifier NetscapeCertType;

		[Token(Token = "0x40013CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly DerObjectIdentifier NetscapeBaseUrl;

		[Token(Token = "0x40013D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly DerObjectIdentifier NetscapeRevocationUrl;

		[Token(Token = "0x40013D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly DerObjectIdentifier NetscapeCARevocationUrl;

		[Token(Token = "0x40013D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly DerObjectIdentifier NetscapeRenewalUrl;

		[Token(Token = "0x40013D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly DerObjectIdentifier NetscapeCAPolicyUrl;

		[Token(Token = "0x40013D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static readonly DerObjectIdentifier NetscapeSslServerName;

		[Token(Token = "0x40013D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static readonly DerObjectIdentifier NetscapeCertComment;

		[Token(Token = "0x40013D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static readonly DerObjectIdentifier Verisign;

		[Token(Token = "0x40013D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static readonly DerObjectIdentifier VerisignCzagExtension;

		[Token(Token = "0x40013D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static readonly DerObjectIdentifier VerisignPrivate_6_9;

		[Token(Token = "0x40013D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static readonly DerObjectIdentifier VerisignOnSiteJurisdictionHash;

		[Token(Token = "0x40013DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static readonly DerObjectIdentifier VerisignBitString_6_13;

		[Token(Token = "0x40013DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static readonly DerObjectIdentifier VerisignDnbDunsNumber;

		[Token(Token = "0x40013DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static readonly DerObjectIdentifier VerisignIssStrongCrypto;

		[Token(Token = "0x40013DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static readonly string Novell;

		[Token(Token = "0x40013DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static readonly DerObjectIdentifier NovellSecurityAttribs;

		[Token(Token = "0x40013DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public static readonly string Entrust;

		[Token(Token = "0x40013E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public static readonly DerObjectIdentifier EntrustVersionExtension;

		[Token(Token = "0x6002318")]
		[Address(RVA = "0xE1BDE4", Offset = "0xE1BDE4", VA = "0xE1BDE4")]
		protected MiscObjectIdentifiers()
		{
		}
	}
	[Token(Token = "0x20003F3")]
	public class NetscapeCertType : DerBitString
	{
		[Token(Token = "0x40013E1")]
		public const int SslClient = 128;

		[Token(Token = "0x40013E2")]
		public const int SslServer = 64;

		[Token(Token = "0x40013E3")]
		public const int Smime = 32;

		[Token(Token = "0x40013E4")]
		public const int ObjectSigning = 16;

		[Token(Token = "0x40013E5")]
		public const int Reserved = 8;

		[Token(Token = "0x40013E6")]
		public const int SslCA = 4;

		[Token(Token = "0x40013E7")]
		public const int SmimeCA = 2;

		[Token(Token = "0x40013E8")]
		public const int ObjectSigningCA = 1;

		[Token(Token = "0x600231A")]
		[Address(RVA = "0xE1C1E8", Offset = "0xE1C1E8", VA = "0xE1C1E8")]
		public NetscapeCertType(int usage)
		{
		}

		[Token(Token = "0x600231B")]
		[Address(RVA = "0xE1C280", Offset = "0xE1C280", VA = "0xE1C280")]
		public NetscapeCertType(DerBitString usage)
		{
		}

		[Token(Token = "0x600231C")]
		[Address(RVA = "0xE1C304", Offset = "0xE1C304", VA = "0xE1C304", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20003F4")]
	public class NetscapeRevocationUrl : DerIA5String
	{
		[Token(Token = "0x600231D")]
		[Address(RVA = "0xE1C3AC", Offset = "0xE1C3AC", VA = "0xE1C3AC")]
		public NetscapeRevocationUrl(DerIA5String str)
		{
		}

		[Token(Token = "0x600231E")]
		[Address(RVA = "0xE1C3F0", Offset = "0xE1C3F0", VA = "0xE1C3F0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20003F5")]
	public class VerisignCzagExtension : DerIA5String
	{
		[Token(Token = "0x600231F")]
		[Address(RVA = "0xE1C458", Offset = "0xE1C458", VA = "0xE1C458")]
		public VerisignCzagExtension(DerIA5String str)
		{
		}

		[Token(Token = "0x6002320")]
		[Address(RVA = "0xE1C49C", Offset = "0xE1C49C", VA = "0xE1C49C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
}
namespace Org.BouncyCastle.Asn1.Iana
{
	[Token(Token = "0x20003F6")]
	public abstract class IanaObjectIdentifiers
	{
		[Token(Token = "0x40013E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly DerObjectIdentifier IsakmpOakley;

		[Token(Token = "0x40013EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly DerObjectIdentifier HmacMD5;

		[Token(Token = "0x40013EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly DerObjectIdentifier HmacSha1;

		[Token(Token = "0x40013EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly DerObjectIdentifier HmacTiger;

		[Token(Token = "0x40013ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly DerObjectIdentifier HmacRipeMD160;

		[Token(Token = "0x6002321")]
		[Address(RVA = "0xE1B190", Offset = "0xE1B190", VA = "0xE1B190")]
		protected IanaObjectIdentifiers()
		{
		}
	}
}
namespace Org.BouncyCastle.Asn1.CryptoPro
{
	[Token(Token = "0x20003F7")]
	public abstract class CryptoProObjectIdentifiers
	{
		[Token(Token = "0x40013EE")]
		public const string GostID = "1.2.643.2.2";

		[Token(Token = "0x40013EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly DerObjectIdentifier GostR3411;

		[Token(Token = "0x40013F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly DerObjectIdentifier GostR3411Hmac;

		[Token(Token = "0x40013F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly DerObjectIdentifier GostR28147Cbc;

		[Token(Token = "0x40013F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly DerObjectIdentifier ID_Gost28147_89_CryptoPro_A_ParamSet;

		[Token(Token = "0x40013F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly DerObjectIdentifier GostR3410x94;

		[Token(Token = "0x40013F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly DerObjectIdentifier GostR3410x2001;

		[Token(Token = "0x40013F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly DerObjectIdentifier GostR3411x94WithGostR3410x94;

		[Token(Token = "0x40013F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static readonly DerObjectIdentifier GostR3411x94WithGostR3410x2001;

		[Token(Token = "0x40013F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static readonly DerObjectIdentifier GostR3411x94CryptoProParamSet;

		[Token(Token = "0x40013F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static readonly DerObjectIdentifier GostR3410x94CryptoProA;

		[Token(Token = "0x40013F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static readonly DerObjectIdentifier GostR3410x94CryptoProB;

		[Token(Token = "0x40013FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static readonly DerObjectIdentifier GostR3410x94CryptoProC;

		[Token(Token = "0x40013FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static readonly DerObjectIdentifier GostR3410x94CryptoProD;

		[Token(Token = "0x40013FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static readonly DerObjectIdentifier GostR3410x94CryptoProXchA;

		[Token(Token = "0x40013FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static readonly DerObjectIdentifier GostR3410x94CryptoProXchB;

		[Token(Token = "0x40013FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static readonly DerObjectIdentifier GostR3410x94CryptoProXchC;

		[Token(Token = "0x40013FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static readonly DerObjectIdentifier GostR3410x2001CryptoProA;

		[Token(Token = "0x4001400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static readonly DerObjectIdentifier GostR3410x2001CryptoProB;

		[Token(Token = "0x4001401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public static readonly DerObjectIdentifier GostR3410x2001CryptoProC;

		[Token(Token = "0x4001402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public static readonly DerObjectIdentifier GostR3410x2001CryptoProXchA;

		[Token(Token = "0x4001403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public static readonly DerObjectIdentifier GostR3410x2001CryptoProXchB;

		[Token(Token = "0x4001404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public static readonly DerObjectIdentifier GostElSgDH3410Default;

		[Token(Token = "0x4001405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public static readonly DerObjectIdentifier GostElSgDH3410x1;

		[Token(Token = "0x6002323")]
		[Address(RVA = "0xE93A0C", Offset = "0xE93A0C", VA = "0xE93A0C")]
		protected CryptoProObjectIdentifiers()
		{
		}
	}
	[Token(Token = "0x20003F8")]
	public sealed class ECGost3410NamedCurves
	{
		[Token(Token = "0x4001406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly IDictionary objIds;

		[Token(Token = "0x4001407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly IDictionary parameters;

		[Token(Token = "0x4001408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal static readonly IDictionary names;

		[Token(Token = "0x1700044F")]
		public static IEnumerable Names
		{
			[Token(Token = "0x6002328")]
			[Address(RVA = "0xE94F60", Offset = "0xE94F60", VA = "0xE94F60")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002325")]
		[Address(RVA = "0xE93E54", Offset = "0xE93E54", VA = "0xE93E54")]
		private ECGost3410NamedCurves()
		{
		}

		[Token(Token = "0x6002326")]
		[Address(RVA = "0xE93E5C", Offset = "0xE93E5C", VA = "0xE93E5C")]
		static ECGost3410NamedCurves()
		{
		}

		[Token(Token = "0x6002327")]
		[Address(RVA = "0xE94E44", Offset = "0xE94E44", VA = "0xE94E44")]
		public static ECDomainParameters GetByOid(DerObjectIdentifier oid)
		{
			return null;
		}

		[Token(Token = "0x6002329")]
		[Address(RVA = "0xE95068", Offset = "0xE95068", VA = "0xE95068")]
		public static ECDomainParameters GetByName(string name)
		{
			return null;
		}

		[Token(Token = "0x600232A")]
		[Address(RVA = "0xE95258", Offset = "0xE95258", VA = "0xE95258")]
		public static string GetName(DerObjectIdentifier oid)
		{
			return null;
		}

		[Token(Token = "0x600232B")]
		[Address(RVA = "0xE95358", Offset = "0xE95358", VA = "0xE95358")]
		public static DerObjectIdentifier GetOid(string name)
		{
			return null;
		}
	}
	[Token(Token = "0x20003F9")]
	public sealed class Gost3410NamedParameters
	{
		[Token(Token = "0x4001409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly IDictionary objIds;

		[Token(Token = "0x400140A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly IDictionary parameters;

		[Token(Token = "0x400140B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly Gost3410ParamSetParameters cryptoProA;

		[Token(Token = "0x400140C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly Gost3410ParamSetParameters cryptoProB;

		[Token(Token = "0x400140D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly Gost3410ParamSetParameters cryptoProXchA;

		[Token(Token = "0x17000450")]
		public static IEnumerable Names
		{
			[Token(Token = "0x600232F")]
			[Address(RVA = "0xE95C48", Offset = "0xE95C48", VA = "0xE95C48")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600232C")]
		[Address(RVA = "0xE95474", Offset = "0xE95474", VA = "0xE95474")]
		private Gost3410NamedParameters()
		{
		}

		[Token(Token = "0x600232D")]
		[Address(RVA = "0xE9547C", Offset = "0xE9547C", VA = "0xE9547C")]
		static Gost3410NamedParameters()
		{
		}

		[Token(Token = "0x600232E")]
		[Address(RVA = "0xE95B2C", Offset = "0xE95B2C", VA = "0xE95B2C")]
		public static Gost3410ParamSetParameters GetByOid(DerObjectIdentifier oid)
		{
			return null;
		}

		[Token(Token = "0x6002330")]
		[Address(RVA = "0xE95D50", Offset = "0xE95D50", VA = "0xE95D50")]
		public static Gost3410ParamSetParameters GetByName(string name)
		{
			return null;
		}

		[Token(Token = "0x6002331")]
		[Address(RVA = "0xE95F40", Offset = "0xE95F40", VA = "0xE95F40")]
		public static DerObjectIdentifier GetOid(string name)
		{
			return null;
		}
	}
	[Token(Token = "0x20003FA")]
	public class Gost3410ParamSetParameters : Asn1Encodable
	{
		[Token(Token = "0x400140E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly int keySize;

		[Token(Token = "0x400140F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly DerInteger p;

		[Token(Token = "0x4001410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly DerInteger q;

		[Token(Token = "0x4001411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly DerInteger a;

		[Token(Token = "0x17000451")]
		public int KeySize
		{
			[Token(Token = "0x6002336")]
			[Address(RVA = "0xE96344", Offset = "0xE96344", VA = "0xE96344")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000452")]
		public BigInteger P
		{
			[Token(Token = "0x6002337")]
			[Address(RVA = "0xE9634C", Offset = "0xE9634C", VA = "0xE9634C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000453")]
		public BigInteger Q
		{
			[Token(Token = "0x6002338")]
			[Address(RVA = "0xE96368", Offset = "0xE96368", VA = "0xE96368")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000454")]
		public BigInteger A
		{
			[Token(Token = "0x6002339")]
			[Address(RVA = "0xE96384", Offset = "0xE96384", VA = "0xE96384")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002332")]
		[Address(RVA = "0xE9605C", Offset = "0xE9605C", VA = "0xE9605C")]
		public static Gost3410ParamSetParameters GetInstance(Asn1TaggedObject obj, bool explicitly)
		{
			return null;
		}

		[Token(Token = "0x6002333")]
		[Address(RVA = "0xE96074", Offset = "0xE96074", VA = "0xE96074")]
		public static Gost3410ParamSetParameters GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x6002334")]
		[Address(RVA = "0xE95A60", Offset = "0xE95A60", VA = "0xE95A60")]
		public Gost3410ParamSetParameters(int keySize, BigInteger p, BigInteger q, BigInteger a)
		{
		}

		[Token(Token = "0x6002335")]
		[Address(RVA = "0xE961E8", Offset = "0xE961E8", VA = "0xE961E8")]
		private Gost3410ParamSetParameters(Asn1Sequence seq)
		{
		}

		[Token(Token = "0x600233A")]
		[Address(RVA = "0xE963A0", Offset = "0xE963A0", VA = "0xE963A0", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
	[Token(Token = "0x20003FB")]
	public class Gost3410PublicKeyAlgParameters : Asn1Encodable
	{
		[Token(Token = "0x4001412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private DerObjectIdentifier publicKeyParamSet;

		[Token(Token = "0x4001413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private DerObjectIdentifier digestParamSet;

		[Token(Token = "0x4001414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private DerObjectIdentifier encryptionParamSet;

		[Token(Token = "0x17000455")]
		public DerObjectIdentifier PublicKeyParamSet
		{
			[Token(Token = "0x6002340")]
			[Address(RVA = "0xE968D8", Offset = "0xE968D8", VA = "0xE968D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000456")]
		public DerObjectIdentifier DigestParamSet
		{
			[Token(Token = "0x6002341")]
			[Address(RVA = "0xE968E0", Offset = "0xE968E0", VA = "0xE968E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000457")]
		public DerObjectIdentifier EncryptionParamSet
		{
			[Token(Token = "0x6002342")]
			[Address(RVA = "0xE968E8", Offset = "0xE968E8", VA = "0xE968E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600233B")]
		[Address(RVA = "0xE96514", Offset = "0xE96514", VA = "0xE96514")]
		public static Gost3410PublicKeyAlgParameters GetInstance(Asn1TaggedObject obj, bool explicitly)
		{
			return null;
		}

		[Token(Token = "0x600233C")]
		[Address(RVA = "0xE9652C", Offset = "0xE9652C", VA = "0xE9652C")]
		public static Gost3410PublicKeyAlgParameters GetInstance(object obj)
		{
			return null;
		}

		[Token(Token = "0x600233D")]
		[Address(RVA = "0xE96800", Offset = "0xE96800", VA = "0xE96800")]
		public Gost3410PublicKeyAlgParameters(DerObjectIdentifier publicKeyParamSet, DerObjectIdentifier digestParamSet)
		{
		}

		[Token(Token = "0x600233E")]
		[Address(RVA = "0xE96808", Offset = "0xE96808", VA = "0xE96808")]
		public Gost3410PublicKeyAlgParameters(DerObjectIdentifier publicKeyParamSet, DerObjectIdentifier digestParamSet, DerObjectIdentifier encryptionParamSet)
		{
		}

		[Token(Token = "0x600233F")]
		[Address(RVA = "0xE966A0", Offset = "0xE966A0", VA = "0xE966A0")]
		public Gost3410PublicKeyAlgParameters(Asn1Sequence seq)
		{
		}

		[Token(Token = "0x6002343")]
		[Address(RVA = "0xE968F0", Offset = "0xE968F0", VA = "0xE968F0", Slot = "5")]
		public override Asn1Object ToAsn1Object()
		{
			return null;
		}
	}
}
namespace Org.BouncyCastle.Asn1.Anssi
{
	[Token(Token = "0x20003FC")]
	public class AnssiNamedCurves
	{
		[Token(Token = "0x20006D8")]
		internal class Frp256v1Holder : X9ECParametersHolder
		{
			[Token(Token = "0x400265A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly X9ECParametersHolder Instance;

			[Token(Token = "0x6003622")]
			[Address(RVA = "0xE8895C", Offset = "0xE8895C", VA = "0xE8895C")]
			private Frp256v1Holder()
			{
			}

			[Token(Token = "0x6003623")]
			[Address(RVA = "0xE88964", Offset = "0xE88964", VA = "0xE88964", Slot = "4")]
			protected override X9ECParameters CreateParameters()
			{
				return null;
			}
		}

		[Token(Token = "0x4001415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly IDictionary objIds;

		[Token(Token = "0x4001416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly IDictionary curves;

		[Token(Token = "0x4001417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly IDictionary names;

		[Token(Token = "0x17000458")]
		public static IEnumerable Names
		{
			[Token(Token = "0x600234C")]
			[Address(RVA = "0xE8884C", Offset = "0xE8884C", VA = "0xE8884C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002344")]
		[Address(RVA = "0xE8805C", Offset = "0xE8805C", VA = "0xE8805C")]
		private static ECCurve ConfigureCurve(ECCurve curve)
		{
			return null;
		}

		[Token(Token = "0x6002345")]
		[Address(RVA = "0xE88060", Offset = "0xE88060", VA = "0xE88060")]
		private static BigInteger FromHex(string hex)
		{
			return null;
		}

		[Token(Token = "0x6002346")]
		[Address(RVA = "0xE880FC", Offset = "0xE880FC", VA = "0xE880FC")]
		private static void DefineCurve(string name, DerObjectIdentifier oid, X9ECParametersHolder holder)
		{
		}

		[Token(Token = "0x6002347")]
		[Address(RVA = "0xE8832C", Offset = "0xE8832C", VA = "0xE8832C")]
		static AnssiNamedCurves()
		{
		}

		[Token(Token = "0x6002348")]
		[Address(RVA = "0xE88438", Offset = "0xE88438", VA = "0xE88438")]
		public static X9ECParameters GetByName(string name)
		{
			return null;
		}

		[Token(Token = "0x6002349")]
		[Address(RVA = "0xE88620", Offset = "0xE88620", VA = "0xE88620")]
		public static X9ECParameters GetByOid(DerObjectIdentifier oid)
		{
			return null;
		}

		[Token(Token = "0x600234A")]
		[Address(RVA = "0xE884D0", Offset = "0xE884D0", VA = "0xE884D0")]
		public static DerObjectIdentifier GetOid(string name)
		{
			return null;
		}

		[Token(Token = "0x600234B")]
		[Address(RVA = "0xE8874C", Offset = "0xE8874C", VA = "0xE8874C")]
		public static string GetName(DerObjectIdentifier oid)
		{
			return null;
		}

		[Token(Token = "0x600234D")]
		[Address(RVA = "0xE88954", Offset = "0xE88954", VA = "0xE88954")]
		public AnssiNamedCurves()
		{
		}
	}
	[Token(Token = "0x20003FD")]
	public sealed class AnssiObjectIdentifiers
	{
		[Token(Token = "0x4001418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly DerObjectIdentifier FRP256v1;

		[Token(Token = "0x600234E")]
		[Address(RVA = "0xE88B80", Offset = "0xE88B80", VA = "0xE88B80")]
		private AnssiObjectIdentifiers()
		{
		}
	}
}
namespace PlatformSupport.Collections.Specialized
{
	[Token(Token = "0x20003FE")]
	public enum NotifyCollectionChangedAction
	{
		[Token(Token = "0x400141A")]
		Add,
		[Token(Token = "0x400141B")]
		Remove,
		[Token(Token = "0x400141C")]
		Replace,
		[Token(Token = "0x400141D")]
		Move,
		[Token(Token = "0x400141E")]
		Reset
	}
	[Token(Token = "0x20003FF")]
	public class NotifyCollectionChangedEventArgs : EventArgs
	{
		[Token(Token = "0x400141F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private NotifyCollectionChangedAction _action;

		[Token(Token = "0x4001420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IList _newItems;

		[Token(Token = "0x4001421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private IList _oldItems;

		[Token(Token = "0x4001422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int _newStartingIndex;

		[Token(Token = "0x4001423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int _oldStartingIndex;

		[Token(Token = "0x17000459")]
		public NotifyCollectionChangedAction Action
		{
			[Token(Token = "0x6002360")]
			[Address(RVA = "0xA6F77C", Offset = "0xA6F77C", VA = "0xA6F77C")]
			get
			{
				return default(NotifyCollectionChangedAction);
			}
		}

		[Token(Token = "0x1700045A")]
		public IList NewItems
		{
			[Token(Token = "0x6002361")]
			[Address(RVA = "0xA6F784", Offset = "0xA6F784", VA = "0xA6F784")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700045B")]
		public IList OldItems
		{
			[Token(Token = "0x6002362")]
			[Address(RVA = "0xA6F78C", Offset = "0xA6F78C", VA = "0xA6F78C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700045C")]
		public int NewStartingIndex
		{
			[Token(Token = "0x6002363")]
			[Address(RVA = "0xA6F794", Offset = "0xA6F794", VA = "0xA6F794")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700045D")]
		public int OldStartingIndex
		{
			[Token(Token = "0x6002364")]
			[Address(RVA = "0xA6F79C", Offset = "0xA6F79C", VA = "0xA6F79C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6002350")]
		[Address(RVA = "0xA6E554", Offset = "0xA6E554", VA = "0xA6E554")]
		public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action)
		{
		}

		[Token(Token = "0x6002351")]
		[Address(RVA = "0xA6E6E4", Offset = "0xA6E6E4", VA = "0xA6E6E4")]
		public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object changedItem)
		{
		}

		[Token(Token = "0x6002352")]
		[Address(RVA = "0xA6E884", Offset = "0xA6E884", VA = "0xA6E884")]
		public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object changedItem, int index)
		{
		}

		[Token(Token = "0x6002353")]
		[Address(RVA = "0xA6EA24", Offset = "0xA6EA24", VA = "0xA6EA24")]
		public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList changedItems)
		{
		}

		[Token(Token = "0x6002354")]
		[Address(RVA = "0xA6EB88", Offset = "0xA6EB88", VA = "0xA6EB88")]
		public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList changedItems, int startingIndex)
		{
		}

		[Token(Token = "0x6002355")]
		[Address(RVA = "0xA6ED28", Offset = "0xA6ED28", VA = "0xA6ED28")]
		public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object newItem, object oldItem)
		{
		}

		[Token(Token = "0x6002356")]
		[Address(RVA = "0xA6EEFC", Offset = "0xA6EEFC", VA = "0xA6EEFC")]
		public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object newItem, object oldItem, int index)
		{
		}

		[Token(Token = "0x6002357")]
		[Address(RVA = "0xA6F08C", Offset = "0xA6F08C", VA = "0xA6F08C")]
		public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList newItems, IList oldItems)
		{
		}

		[Token(Token = "0x6002358")]
		[Address(RVA = "0xA6F1D4", Offset = "0xA6F1D4", VA = "0xA6F1D4")]
		public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList newItems, IList oldItems, int startingIndex)
		{
		}

		[Token(Token = "0x6002359")]
		[Address(RVA = "0xA6F320", Offset = "0xA6F320", VA = "0xA6F320")]
		public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object changedItem, int index, int oldIndex)
		{
		}

		[Token(Token = "0x600235A")]
		[Address(RVA = "0xA6F498", Offset = "0xA6F498", VA = "0xA6F498")]
		public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList changedItems, int index, int oldIndex)
		{
		}

		[Token(Token = "0x600235B")]
		[Address(RVA = "0xA6F5B4", Offset = "0xA6F5B4", VA = "0xA6F5B4")]
		internal NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList newItems, IList oldItems, int newIndex, int oldIndex)
		{
		}

		[Token(Token = "0x600235C")]
		[Address(RVA = "0xA6E86C", Offset = "0xA6E86C", VA = "0xA6E86C")]
		private void InitializeAddOrRemove(NotifyCollectionChangedAction action, IList changedItems, int startingIndex)
		{
		}

		[Token(Token = "0x600235D")]
		[Address(RVA = "0xA6E650", Offset = "0xA6E650", VA = "0xA6E650")]
		private void InitializeAdd(NotifyCollectionChangedAction action, IList newItems, int newStartingIndex)
		{
		}

		[Token(Token = "0x600235E")]
		[Address(RVA = "0xA6F6E8", Offset = "0xA6F6E8", VA = "0xA6F6E8")]
		private void InitializeRemove(NotifyCollectionChangedAction action, IList oldItems, int oldStartingIndex)
		{
		}

		[Token(Token = "0x600235F")]
		[Address(RVA = "0xA6EEB4", Offset = "0xA6EEB4", VA = "0xA6EEB4")]
		private void InitializeMoveOrReplace(NotifyCollectionChangedAction action, IList newItems, IList oldItems, int startingIndex, int oldStartingIndex)
		{
		}
	}
	[Token(Token = "0x2000400")]
	public delegate void NotifyCollectionChangedEventHandler(object sender, NotifyCollectionChangedEventArgs e);
	[Token(Token = "0x2000401")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x81F3C4", Offset = "0x81F3C4")]
	internal sealed class ReadOnlyList : IList, ICollection, IEnumerable
	{
		[Token(Token = "0x4001424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IList _list;

		[Token(Token = "0x1700045E")]
		public int Count
		{
			[Token(Token = "0x600236A")]
			[Address(RVA = "0xA6FBD8", Offset = "0xA6FBD8", VA = "0xA6FBD8", Slot = "16")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700045F")]
		public bool IsReadOnly
		{
			[Token(Token = "0x600236B")]
			[Address(RVA = "0xA6FC8C", Offset = "0xA6FC8C", VA = "0xA6FC8C", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000460")]
		public bool IsFixedSize
		{
			[Token(Token = "0x600236C")]
			[Address(RVA = "0xA6FC94", Offset = "0xA6FC94", VA = "0xA6FC94", Slot = "10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000461")]
		public bool IsSynchronized
		{
			[Token(Token = "0x600236D")]
			[Address(RVA = "0xA6FC9C", Offset = "0xA6FC9C", VA = "0xA6FC9C", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000462")]
		public object Item
		{
			[Token(Token = "0x600236E")]
			[Address(RVA = "0xA6FD50", Offset = "0xA6FD50", VA = "0xA6FD50", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600236F")]
			[Address(RVA = "0xA6FE10", Offset = "0xA6FE10", VA = "0xA6FE10", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x17000463")]
		public object SyncRoot
		{
			[Token(Token = "0x6002370")]
			[Address(RVA = "0xA6FE70", Offset = "0xA6FE70", VA = "0xA6FE70", Slot = "17")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002369")]
		[Address(RVA = "0xA6F6BC", Offset = "0xA6F6BC", VA = "0xA6F6BC")]
		internal ReadOnlyList(IList list)
		{
		}

		[Token(Token = "0x6002371")]
		[Address(RVA = "0xA6FF24", Offset = "0xA6FF24", VA = "0xA6FF24", Slot = "6")]
		public int Add(object value)
		{
			return default(int);
		}

		[Token(Token = "0x6002372")]
		[Address(RVA = "0xA6FF84", Offset = "0xA6FF84", VA = "0xA6FF84", Slot = "8")]
		public void Clear()
		{
		}

		[Token(Token = "0x6002373")]
		[Address(RVA = "0xA6FFE4", Offset = "0xA6FFE4", VA = "0xA6FFE4", Slot = "7")]
		public bool Contains(object value)
		{
			return default(bool);
		}

		[Token(Token = "0x6002374")]
		[Address(RVA = "0xA700A8", Offset = "0xA700A8", VA = "0xA700A8", Slot = "15")]
		public void CopyTo(Array array, int index)
		{
		}

		[Token(Token = "0x6002375")]
		[Address(RVA = "0xA70170", Offset = "0xA70170", VA = "0xA70170", Slot = "19")]
		public IEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6002376")]
		[Address(RVA = "0xA70220", Offset = "0xA70220", VA = "0xA70220", Slot = "11")]
		public int IndexOf(object value)
		{
			return default(int);
		}

		[Token(Token = "0x6002377")]
		[Address(RVA = "0xA702E4", Offset = "0xA702E4", VA = "0xA702E4", Slot = "12")]
		public void Insert(int index, object value)
		{
		}

		[Token(Token = "0x6002378")]
		[Address(RVA = "0xA70344", Offset = "0xA70344", VA = "0xA70344", Slot = "13")]
		public void Remove(object value)
		{
		}

		[Token(Token = "0x6002379")]
		[Address(RVA = "0xA703A4", Offset = "0xA703A4", VA = "0xA703A4", Slot = "14")]
		public void RemoveAt(int index)
		{
		}
	}
}
namespace PlatformSupport.Collections.ObjectModel
{
	[Token(Token = "0x2000402")]
	public delegate void NotifyCollectionChangedEventHandler(object sender, NotifyCollectionChangedEventArgs e);
	[Token(Token = "0x2000403")]
	public interface INotifyCollectionChanged
	{
		[Token(Token = "0x14000013")]
		event NotifyCollectionChangedEventHandler CollectionChanged;
	}
	[Token(Token = "0x2000404")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x81F3FC", Offset = "0x81F3FC")]
	public class ObservableDictionary<TKey, TValue> : IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable, INotifyCollectionChanged, INotifyPropertyChanged
	{
		[Token(Token = "0x4001425")]
		private const string CountString = "Count";

		[Token(Token = "0x4001426")]
		private const string IndexerName = "Item[]";

		[Token(Token = "0x4001427")]
		private const string KeysName = "Keys";

		[Token(Token = "0x4001428")]
		private const string ValuesName = "Values";

		[Token(Token = "0x4001429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IDictionary<TKey, TValue> _Dictionary;

		[Token(Token = "0x17000464")]
		protected IDictionary<TKey, TValue> Dictionary
		{
			[Token(Token = "0x6002380")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000465")]
		public ICollection<TKey> Keys
		{
			[Token(Token = "0x6002389")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000466")]
		public ICollection<TValue> Values
		{
			[Token(Token = "0x600238C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000467")]
		public TValue Item
		{
			[Token(Token = "0x600238D")]
			get
			{
				return (TValue)null;
			}
			[Token(Token = "0x600238E")]
			set
			{
			}
		}

		[Token(Token = "0x17000468")]
		public int Count
		{
			[Token(Token = "0x6002393")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000469")]
		public bool IsReadOnly
		{
			[Token(Token = "0x6002394")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x14000014")]
		public event NotifyCollectionChangedEventHandler CollectionChanged
		{
			[Token(Token = "0x6002398")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830B48", Offset = "0x830B48")]
			add
			{
			}
			[Token(Token = "0x6002399")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830B58", Offset = "0x830B58")]
			remove
			{
			}
		}

		[Token(Token = "0x14000015")]
		public event PropertyChangedEventHandler PropertyChanged
		{
			[Token(Token = "0x600239A")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830B68", Offset = "0x830B68")]
			add
			{
			}
			[Token(Token = "0x600239B")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830B78", Offset = "0x830B78")]
			remove
			{
			}
		}

		[Token(Token = "0x6002381")]
		public ObservableDictionary()
		{
		}

		[Token(Token = "0x6002382")]
		public ObservableDictionary(IDictionary<TKey, TValue> dictionary)
		{
		}

		[Token(Token = "0x6002383")]
		public ObservableDictionary(IEqualityComparer<TKey> comparer)
		{
		}

		[Token(Token = "0x6002384")]
		public ObservableDictionary(int capacity)
		{
		}

		[Token(Token = "0x6002385")]
		public ObservableDictionary(IDictionary<TKey, TValue> dictionary, IEqualityComparer<TKey> comparer)
		{
		}

		[Token(Token = "0x6002386")]
		public ObservableDictionary(int capacity, IEqualityComparer<TKey> comparer)
		{
		}

		[Token(Token = "0x6002387")]
		public void Add(TKey key, TValue value)
		{
		}

		[Token(Token = "0x6002388")]
		public bool ContainsKey(TKey key)
		{
			return default(bool);
		}

		[Token(Token = "0x600238A")]
		public bool Remove(TKey key)
		{
			return default(bool);
		}

		[Token(Token = "0x600238B")]
		public bool TryGetValue(TKey key, out TValue value)
		{
			return default(bool);
		}

		[Token(Token = "0x600238F")]
		public void Add(KeyValuePair<TKey, TValue> item)
		{
		}

		[Token(Token = "0x6002390")]
		public void Clear()
		{
		}

		[Token(Token = "0x6002391")]
		public bool Contains(KeyValuePair<TKey, TValue> item)
		{
			return default(bool);
		}

		[Token(Token = "0x6002392")]
		public void CopyTo(KeyValuePair<TKey, TValue>[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6002395")]
		public bool Remove(KeyValuePair<TKey, TValue> item)
		{
			return default(bool);
		}

		[Token(Token = "0x6002396")]
		public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6002397")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600239C")]
		public void AddRange(IDictionary<TKey, TValue> items)
		{
		}

		[Token(Token = "0x600239D")]
		private void Insert(TKey key, TValue value, bool add)
		{
		}

		[Token(Token = "0x600239E")]
		private void OnPropertyChanged()
		{
		}

		[Token(Token = "0x600239F")]
		protected virtual void OnPropertyChanged(string propertyName)
		{
		}

		[Token(Token = "0x60023A0")]
		private void OnCollectionChanged()
		{
		}

		[Token(Token = "0x60023A1")]
		private void OnCollectionChanged(NotifyCollectionChangedAction action, KeyValuePair<TKey, TValue> changedItem)
		{
		}

		[Token(Token = "0x60023A2")]
		private void OnCollectionChanged(NotifyCollectionChangedAction action, KeyValuePair<TKey, TValue> newItem, KeyValuePair<TKey, TValue> oldItem)
		{
		}

		[Token(Token = "0x60023A3")]
		private void OnCollectionChanged(NotifyCollectionChangedAction action, IList newItems)
		{
		}

		[Token(Token = "0x60023A4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830B88", Offset = "0x830B88")]
		private bool <AddRange>b__41_0(TKey k)
		{
			return default(bool);
		}
	}
}
namespace BestHTTP
{
	[Token(Token = "0x2000405")]
	internal delegate void HTTPConnectionRecycledDelegate(ConnectionBase conn);
	[Token(Token = "0x2000406")]
	internal abstract class ConnectionBase : IDisposable
	{
		[Token(Token = "0x400142C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823504", Offset = "0x823504")]
		private string <ServerAddress>k__BackingField;

		[Token(Token = "0x400142D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823514", Offset = "0x823514")]
		private HTTPConnectionStates <State>k__BackingField;

		[Token(Token = "0x400142E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823524", Offset = "0x823524")]
		private HTTPRequest <CurrentRequest>k__BackingField;

		[Token(Token = "0x400142F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823534", Offset = "0x823534")]
		private DateTime <StartTime>k__BackingField;

		[Token(Token = "0x4001430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823544", Offset = "0x823544")]
		private DateTime <TimedOutStart>k__BackingField;

		[Token(Token = "0x4001431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823554", Offset = "0x823554")]
		private HTTPProxy <Proxy>k__BackingField;

		[Token(Token = "0x4001432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823564", Offset = "0x823564")]
		private Uri <LastProcessedUri>k__BackingField;

		[Token(Token = "0x4001433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected DateTime LastProcessTime;

		[Token(Token = "0x4001434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected HTTPConnectionRecycledDelegate OnConnectionRecycled;

		[Token(Token = "0x4001435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool IsThreaded;

		[Token(Token = "0x4001436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823574", Offset = "0x823574")]
		private bool <IsDisposed>k__BackingField;

		[Token(Token = "0x1700046A")]
		public string ServerAddress
		{
			[Token(Token = "0x60023A9")]
			[Address(RVA = "0xBB3D7C", Offset = "0xBB3D7C", VA = "0xBB3D7C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830B98", Offset = "0x830B98")]
			get
			{
				return null;
			}
			[Token(Token = "0x60023AA")]
			[Address(RVA = "0xBB3D84", Offset = "0xBB3D84", VA = "0xBB3D84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830BA8", Offset = "0x830BA8")]
			protected set
			{
			}
		}

		[Token(Token = "0x1700046B")]
		public HTTPConnectionStates State
		{
			[Token(Token = "0x60023AB")]
			[Address(RVA = "0xBB3D8C", Offset = "0xBB3D8C", VA = "0xBB3D8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830BB8", Offset = "0x830BB8")]
			get
			{
				return default(HTTPConnectionStates);
			}
			[Token(Token = "0x60023AC")]
			[Address(RVA = "0xBB3D94", Offset = "0xBB3D94", VA = "0xBB3D94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830BC8", Offset = "0x830BC8")]
			protected set
			{
			}
		}

		[Token(Token = "0x1700046C")]
		public bool IsFree
		{
			[Token(Token = "0x60023AD")]
			[Address(RVA = "0xBB3D9C", Offset = "0xBB3D9C", VA = "0xBB3D9C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700046D")]
		public bool IsActive
		{
			[Token(Token = "0x60023AE")]
			[Address(RVA = "0xBB3DB8", Offset = "0xBB3DB8", VA = "0xBB3DB8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700046E")]
		public HTTPRequest CurrentRequest
		{
			[Token(Token = "0x60023AF")]
			[Address(RVA = "0xBB3DCC", Offset = "0xBB3DCC", VA = "0xBB3DCC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830BD8", Offset = "0x830BD8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60023B0")]
			[Address(RVA = "0xBB3DD4", Offset = "0xBB3DD4", VA = "0xBB3DD4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830BE8", Offset = "0x830BE8")]
			protected set
			{
			}
		}

		[Token(Token = "0x1700046F")]
		public bool IsRemovable
		{
			[Token(Token = "0x60023B1")]
			[Address(RVA = "0xBB3DDC", Offset = "0xBB3DDC", VA = "0xBB3DDC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000470")]
		public DateTime StartTime
		{
			[Token(Token = "0x60023B2")]
			[Address(RVA = "0xBB3F1C", Offset = "0xBB3F1C", VA = "0xBB3F1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830BF8", Offset = "0x830BF8")]
			get
			{
				return default(DateTime);
			}
			[Token(Token = "0x60023B3")]
			[Address(RVA = "0xBB3F24", Offset = "0xBB3F24", VA = "0xBB3F24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830C08", Offset = "0x830C08")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000471")]
		public DateTime TimedOutStart
		{
			[Token(Token = "0x60023B4")]
			[Address(RVA = "0xBB3F2C", Offset = "0xBB3F2C", VA = "0xBB3F2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830C18", Offset = "0x830C18")]
			get
			{
				return default(DateTime);
			}
			[Token(Token = "0x60023B5")]
			[Address(RVA = "0xBB3F34", Offset = "0xBB3F34", VA = "0xBB3F34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830C28", Offset = "0x830C28")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000472")]
		protected HTTPProxy Proxy
		{
			[Token(Token = "0x60023B6")]
			[Address(RVA = "0xBB3F3C", Offset = "0xBB3F3C", VA = "0xBB3F3C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830C38", Offset = "0x830C38")]
			get
			{
				return null;
			}
			[Token(Token = "0x60023B7")]
			[Address(RVA = "0xBB3F44", Offset = "0xBB3F44", VA = "0xBB3F44")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830C48", Offset = "0x830C48")]
			set
			{
			}
		}

		[Token(Token = "0x17000473")]
		public bool HasProxy
		{
			[Token(Token = "0x60023B8")]
			[Address(RVA = "0xBB3F4C", Offset = "0xBB3F4C", VA = "0xBB3F4C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000474")]
		public Uri LastProcessedUri
		{
			[Token(Token = "0x60023B9")]
			[Address(RVA = "0xBB3F5C", Offset = "0xBB3F5C", VA = "0xBB3F5C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830C58", Offset = "0x830C58")]
			get
			{
				return null;
			}
			[Token(Token = "0x60023BA")]
			[Address(RVA = "0xBB3F64", Offset = "0xBB3F64", VA = "0xBB3F64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830C68", Offset = "0x830C68")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000475")]
		protected bool IsDisposed
		{
			[Token(Token = "0x60023C4")]
			[Address(RVA = "0xBB4710", Offset = "0xBB4710", VA = "0xBB4710")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830C78", Offset = "0x830C78")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60023C5")]
			[Address(RVA = "0xBB4718", Offset = "0xBB4718", VA = "0xBB4718")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830C88", Offset = "0x830C88")]
			private set
			{
			}
		}

		[Token(Token = "0x60023BB")]
		[Address(RVA = "0xBB3F6C", Offset = "0xBB3F6C", VA = "0xBB3F6C")]
		public ConnectionBase(string serverAddress)
		{
		}

		[Token(Token = "0x60023BC")]
		[Address(RVA = "0xBB3F74", Offset = "0xBB3F74", VA = "0xBB3F74")]
		public ConnectionBase(string serverAddress, bool threaded)
		{
		}

		[Token(Token = "0x60023BD")]
		internal abstract void Abort(HTTPConnectionStates hTTPConnectionStates);

		[Token(Token = "0x60023BE")]
		[Address(RVA = "0xBB400C", Offset = "0xBB400C", VA = "0xBB400C")]
		internal void Process(HTTPRequest request)
		{
		}

		[Token(Token = "0x60023BF")]
		[Address(RVA = "0xBB4158", Offset = "0xBB4158", VA = "0xBB4158", Slot = "6")]
		protected virtual void ThreadFunc(object param)
		{
		}

		[Token(Token = "0x60023C0")]
		[Address(RVA = "0xBB415C", Offset = "0xBB415C", VA = "0xBB415C")]
		internal void HandleProgressCallback()
		{
		}

		[Token(Token = "0x60023C1")]
		[Address(RVA = "0xBB446C", Offset = "0xBB446C", VA = "0xBB446C")]
		internal void HandleCallback()
		{
		}

		[Token(Token = "0x60023C2")]
		[Address(RVA = "0xBB4648", Offset = "0xBB4648", VA = "0xBB4648")]
		internal void Recycle(HTTPConnectionRecycledDelegate onConnectionRecycled)
		{
		}

		[Token(Token = "0x60023C3")]
		[Address(RVA = "0xBB466C", Offset = "0xBB466C", VA = "0xBB466C")]
		protected void RecycleNow()
		{
		}

		[Token(Token = "0x60023C6")]
		[Address(RVA = "0xBB4724", Offset = "0xBB4724", VA = "0xBB4724", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60023C7")]
		[Address(RVA = "0xBB47A0", Offset = "0xBB47A0", VA = "0xBB47A0", Slot = "7")]
		protected virtual void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x2000407")]
	internal sealed class StreamList : Stream
	{
		[Token(Token = "0x4001437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Stream[] Streams;

		[Token(Token = "0x4001438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int CurrentIdx;

		[Token(Token = "0x17000476")]
		public override bool CanRead
		{
			[Token(Token = "0x60023C9")]
			[Address(RVA = "0x1085FB4", Offset = "0x1085FB4", VA = "0x1085FB4", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000477")]
		public override bool CanSeek
		{
			[Token(Token = "0x60023CA")]
			[Address(RVA = "0x1086014", Offset = "0x1086014", VA = "0x1086014", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000478")]
		public override bool CanWrite
		{
			[Token(Token = "0x60023CB")]
			[Address(RVA = "0x108601C", Offset = "0x108601C", VA = "0x108601C", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000479")]
		public override long Length
		{
			[Token(Token = "0x60023CD")]
			[Address(RVA = "0x1086108", Offset = "0x1086108", VA = "0x1086108", Slot = "10")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x1700047A")]
		public override long Position
		{
			[Token(Token = "0x60023D2")]
			[Address(RVA = "0x1086550", Offset = "0x1086550", VA = "0x1086550", Slot = "11")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x60023D3")]
			[Address(RVA = "0x10865BC", Offset = "0x10865BC", VA = "0x10865BC", Slot = "12")]
			set
			{
			}
		}

		[Token(Token = "0x60023C8")]
		[Address(RVA = "0x1085F34", Offset = "0x1085F34", VA = "0x1085F34")]
		public StreamList(params Stream[] streams)
		{
		}

		[Token(Token = "0x60023CC")]
		[Address(RVA = "0x108607C", Offset = "0x108607C", VA = "0x108607C", Slot = "17")]
		public override void Flush()
		{
		}

		[Token(Token = "0x60023CE")]
		[Address(RVA = "0x10861AC", Offset = "0x10861AC", VA = "0x10861AC", Slot = "27")]
		public override int Read(byte[] buffer, int offset, int count)
		{
			return default(int);
		}

		[Token(Token = "0x60023CF")]
		[Address(RVA = "0x10862A4", Offset = "0x10862A4", VA = "0x10862A4", Slot = "29")]
		public override void Write(byte[] buffer, int offset, int count)
		{
		}

		[Token(Token = "0x60023D0")]
		[Address(RVA = "0x1086304", Offset = "0x1086304", VA = "0x1086304")]
		public void Write(string str)
		{
		}

		[Token(Token = "0x60023D1")]
		[Address(RVA = "0x1086350", Offset = "0x1086350", VA = "0x1086350", Slot = "16")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x60023D4")]
		[Address(RVA = "0x1086628", Offset = "0x1086628", VA = "0x1086628", Slot = "25")]
		public override long Seek(long offset, SeekOrigin origin)
		{
			return default(long);
		}

		[Token(Token = "0x60023D5")]
		[Address(RVA = "0x108668C", Offset = "0x108668C", VA = "0x108668C", Slot = "26")]
		public override void SetLength(long value)
		{
		}
	}
	[Token(Token = "0x2000408")]
	internal sealed class FileConnection : ConnectionBase
	{
		[Token(Token = "0x60023D6")]
		[Address(RVA = "0xC05A90", Offset = "0xC05A90", VA = "0xC05A90")]
		public FileConnection(string serverAddress)
		{
		}

		[Token(Token = "0x60023D7")]
		[Address(RVA = "0xC05A98", Offset = "0xC05A98", VA = "0xC05A98", Slot = "5")]
		internal override void Abort(HTTPConnectionStates newState)
		{
		}

		[Token(Token = "0x60023D8")]
		[Address(RVA = "0xC05B3C", Offset = "0xC05B3C", VA = "0xC05B3C", Slot = "6")]
		protected override void ThreadFunc(object param)
		{
		}
	}
	[Token(Token = "0x2000409")]
	internal sealed class HTTPConnection : ConnectionBase
	{
		[Token(Token = "0x20006D9")]
		private enum RetryCauses
		{
			[Token(Token = "0x400265C")]
			None,
			[Token(Token = "0x400265D")]
			Reconnect,
			[Token(Token = "0x400265E")]
			Authenticate,
			[Token(Token = "0x400265F")]
			ProxyAuthenticate
		}

		[Token(Token = "0x4001439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private BestHTTP.PlatformSupport.TcpClient.General.TcpClient Client;

		[Token(Token = "0x400143A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Stream Stream;

		[Token(Token = "0x60023D9")]
		[Address(RVA = "0xC071C4", Offset = "0xC071C4", VA = "0xC071C4")]
		internal HTTPConnection(string serverAddress)
		{
		}

		[Token(Token = "0x60023DA")]
		[Address(RVA = "0xC071CC", Offset = "0xC071CC", VA = "0xC071CC", Slot = "6")]
		protected override void ThreadFunc(object param)
		{
		}

		[Token(Token = "0x60023DB")]
		[Address(RVA = "0xC08338", Offset = "0xC08338", VA = "0xC08338")]
		private void Connect()
		{
		}

		[Token(Token = "0x60023DC")]
		[Address(RVA = "0xC093B0", Offset = "0xC093B0", VA = "0xC093B0")]
		private bool Receive()
		{
			return default(bool);
		}

		[Token(Token = "0x60023DD")]
		[Address(RVA = "0xC097A4", Offset = "0xC097A4", VA = "0xC097A4")]
		private bool LoadFromCache(Uri uri)
		{
			return default(bool);
		}

		[Token(Token = "0x60023DE")]
		[Address(RVA = "0xC08064", Offset = "0xC08064", VA = "0xC08064")]
		private bool TryLoadAllFromCache()
		{
			return default(bool);
		}

		[Token(Token = "0x60023DF")]
		[Address(RVA = "0xC09610", Offset = "0xC09610", VA = "0xC09610")]
		private void TryStoreInCache()
		{
		}

		[Token(Token = "0x60023E0")]
		[Address(RVA = "0xC09498", Offset = "0xC09498", VA = "0xC09498")]
		private Uri GetRedirectUri(string location)
		{
			return null;
		}

		[Token(Token = "0x60023E1")]
		[Address(RVA = "0xC09A48", Offset = "0xC09A48", VA = "0xC09A48", Slot = "5")]
		internal override void Abort(HTTPConnectionStates newState)
		{
		}

		[Token(Token = "0x60023E2")]
		[Address(RVA = "0xC08228", Offset = "0xC08228", VA = "0xC08228")]
		private void Close()
		{
		}

		[Token(Token = "0x60023E3")]
		[Address(RVA = "0xC09AE8", Offset = "0xC09AE8", VA = "0xC09AE8", Slot = "7")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x60023E4")]
		[Address(RVA = "0xC09B18", Offset = "0xC09B18", VA = "0xC09B18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830C98", Offset = "0x830C98")]
		private bool <Connect>b__5_0(object sender, X509Certificate cert, X509Chain chain, SslPolicyErrors errors)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200040A")]
	internal enum HTTPConnectionStates
	{
		[Token(Token = "0x400143C")]
		Initial,
		[Token(Token = "0x400143D")]
		Processing,
		[Token(Token = "0x400143E")]
		Redirected,
		[Token(Token = "0x400143F")]
		Upgraded,
		[Token(Token = "0x4001440")]
		WaitForProtocolShutdown,
		[Token(Token = "0x4001441")]
		WaitForRecycle,
		[Token(Token = "0x4001442")]
		Free,
		[Token(Token = "0x4001443")]
		AbortRequested,
		[Token(Token = "0x4001444")]
		TimedOut,
		[Token(Token = "0x4001445")]
		Closed
	}
	[Token(Token = "0x200040B")]
	public static class HTTPManager
	{
		[Token(Token = "0x20006DA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820E10", Offset = "0x820E10")]
		private sealed class <>c__DisplayClass82_0
		{
			[Token(Token = "0x4002660")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ConnectionBase conn;

			[Token(Token = "0x6003625")]
			[Address(RVA = "0xBBF84C", Offset = "0xBBF84C", VA = "0xBBF84C")]
			public <>c__DisplayClass82_0()
			{
			}

			[Token(Token = "0x6003626")]
			[Address(RVA = "0xBBF854", Offset = "0xBBF854", VA = "0xBBF854")]
			internal bool <SendRequestImpl>b__0(ConnectionBase c)
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x20006DB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820E20", Offset = "0x820E20")]
		private sealed class <>c
		{
			[Token(Token = "0x4002661")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4002662")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Predicate<HTTPRequest> <>9__92_0;

			[Token(Token = "0x4002663")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Comparison<HTTPRequest> <>9__92_1;

			[Token(Token = "0x6003628")]
			[Address(RVA = "0xBBF7FC", Offset = "0xBBF7FC", VA = "0xBBF7FC")]
			public <>c()
			{
			}

			[Token(Token = "0x6003629")]
			[Address(RVA = "0xBBF804", Offset = "0xBBF804", VA = "0xBBF804")]
			internal bool <OnUpdate>b__92_0(HTTPRequest req)
			{
				return default(bool);
			}

			[Token(Token = "0x600362A")]
			[Address(RVA = "0xBBF824", Offset = "0xBBF824", VA = "0xBBF824")]
			internal int <OnUpdate>b__92_1(HTTPRequest req1, HTTPRequest req2)
			{
				return default(int);
			}
		}

		[Token(Token = "0x4001446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static byte maxConnectionPerServer;

		[Token(Token = "0x4001447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823584", Offset = "0x823584")]
		private static bool <KeepAliveDefaultValue>k__BackingField;

		[Token(Token = "0x4001448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823594", Offset = "0x823594")]
		private static bool <IsCachingDisabled>k__BackingField;

		[Token(Token = "0x4001449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8235A4", Offset = "0x8235A4")]
		private static TimeSpan <MaxConnectionIdleTime>k__BackingField;

		[Token(Token = "0x400144A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8235B4", Offset = "0x8235B4")]
		private static bool <IsCookiesEnabled>k__BackingField;

		[Token(Token = "0x400144B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8235C4", Offset = "0x8235C4")]
		private static uint <CookieJarSize>k__BackingField;

		[Token(Token = "0x400144C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8235D4", Offset = "0x8235D4")]
		private static bool <EnablePrivateBrowsing>k__BackingField;

		[Token(Token = "0x400144D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8235E4", Offset = "0x8235E4")]
		private static TimeSpan <ConnectTimeout>k__BackingField;

		[Token(Token = "0x400144E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8235F4", Offset = "0x8235F4")]
		private static TimeSpan <RequestTimeout>k__BackingField;

		[Token(Token = "0x400144F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823604", Offset = "0x823604")]
		private static Func<string> <RootCacheFolderProvider>k__BackingField;

		[Token(Token = "0x4001450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823614", Offset = "0x823614")]
		private static HTTPProxy <Proxy>k__BackingField;

		[Token(Token = "0x4001451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static HeartbeatManager heartbeats;

		[Token(Token = "0x4001452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static BestHTTP.Logger.ILogger logger;

		[Token(Token = "0x4001453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823624", Offset = "0x823624")]
		private static ICertificateVerifyer <DefaultCertificateVerifyer>k__BackingField;

		[Token(Token = "0x4001454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823634", Offset = "0x823634")]
		private static IClientCredentialsProvider <DefaultClientCredentialsProvider>k__BackingField;

		[Token(Token = "0x4001455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823644", Offset = "0x823644")]
		private static bool <UseAlternateSSLDefaultValue>k__BackingField;

		[Token(Token = "0x4001456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823654", Offset = "0x823654")]
		private static int <MaxPathLength>k__BackingField;

		[Token(Token = "0x4001457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private static Dictionary<string, List<ConnectionBase>> Connections;

		[Token(Token = "0x4001458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private static List<ConnectionBase> ActiveConnections;

		[Token(Token = "0x4001459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private static List<ConnectionBase> FreeConnections;

		[Token(Token = "0x400145A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private static List<ConnectionBase> RecycledConnections;

		[Token(Token = "0x400145B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private static List<HTTPRequest> RequestQueue;

		[Token(Token = "0x400145C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private static bool IsCallingCallbacks;

		[Token(Token = "0x400145D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal static object Locker;

		[Token(Token = "0x1700047B")]
		public static byte MaxConnectionPerServer
		{
			[Token(Token = "0x60023E6")]
			[Address(RVA = "0xC0A460", Offset = "0xC0A460", VA = "0xC0A460")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x60023E7")]
			[Address(RVA = "0xC0A3B0", Offset = "0xC0A3B0", VA = "0xC0A3B0")]
			set
			{
			}
		}

		[Token(Token = "0x1700047C")]
		public static bool KeepAliveDefaultValue
		{
			[Token(Token = "0x60023E8")]
			[Address(RVA = "0xC0A4C8", Offset = "0xC0A4C8", VA = "0xC0A4C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830CA8", Offset = "0x830CA8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60023E9")]
			[Address(RVA = "0xC0A530", Offset = "0xC0A530", VA = "0xC0A530")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830CB8", Offset = "0x830CB8")]
			set
			{
			}
		}

		[Token(Token = "0x1700047D")]
		public static bool IsCachingDisabled
		{
			[Token(Token = "0x60023EA")]
			[Address(RVA = "0xC0A5A0", Offset = "0xC0A5A0", VA = "0xC0A5A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830CC8", Offset = "0x830CC8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60023EB")]
			[Address(RVA = "0xC0A608", Offset = "0xC0A608", VA = "0xC0A608")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830CD8", Offset = "0x830CD8")]
			set
			{
			}
		}

		[Token(Token = "0x1700047E")]
		public static TimeSpan MaxConnectionIdleTime
		{
			[Token(Token = "0x60023EC")]
			[Address(RVA = "0xC0A678", Offset = "0xC0A678", VA = "0xC0A678")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830CE8", Offset = "0x830CE8")]
			get
			{
				return default(TimeSpan);
			}
			[Token(Token = "0x60023ED")]
			[Address(RVA = "0xC0A6E0", Offset = "0xC0A6E0", VA = "0xC0A6E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830CF8", Offset = "0x830CF8")]
			set
			{
			}
		}

		[Token(Token = "0x1700047F")]
		public static bool IsCookiesEnabled
		{
			[Token(Token = "0x60023EE")]
			[Address(RVA = "0xC0A74C", Offset = "0xC0A74C", VA = "0xC0A74C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830D08", Offset = "0x830D08")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60023EF")]
			[Address(RVA = "0xC0A7B4", Offset = "0xC0A7B4", VA = "0xC0A7B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830D18", Offset = "0x830D18")]
			set
			{
			}
		}

		[Token(Token = "0x17000480")]
		public static uint CookieJarSize
		{
			[Token(Token = "0x60023F0")]
			[Address(RVA = "0xC0A824", Offset = "0xC0A824", VA = "0xC0A824")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830D28", Offset = "0x830D28")]
			get
			{
				return default(uint);
			}
			[Token(Token = "0x60023F1")]
			[Address(RVA = "0xC0A88C", Offset = "0xC0A88C", VA = "0xC0A88C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830D38", Offset = "0x830D38")]
			set
			{
			}
		}

		[Token(Token = "0x17000481")]
		public static bool EnablePrivateBrowsing
		{
			[Token(Token = "0x60023F2")]
			[Address(RVA = "0xC0A8F8", Offset = "0xC0A8F8", VA = "0xC0A8F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830D48", Offset = "0x830D48")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60023F3")]
			[Address(RVA = "0xC0A960", Offset = "0xC0A960", VA = "0xC0A960")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830D58", Offset = "0x830D58")]
			set
			{
			}
		}

		[Token(Token = "0x17000482")]
		public static TimeSpan ConnectTimeout
		{
			[Token(Token = "0x60023F4")]
			[Address(RVA = "0xC0A9D0", Offset = "0xC0A9D0", VA = "0xC0A9D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830D68", Offset = "0x830D68")]
			get
			{
				return default(TimeSpan);
			}
			[Token(Token = "0x60023F5")]
			[Address(RVA = "0xC0AA38", Offset = "0xC0AA38", VA = "0xC0AA38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830D78", Offset = "0x830D78")]
			set
			{
			}
		}

		[Token(Token = "0x17000483")]
		public static TimeSpan RequestTimeout
		{
			[Token(Token = "0x60023F6")]
			[Address(RVA = "0xC0AAA4", Offset = "0xC0AAA4", VA = "0xC0AAA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830D88", Offset = "0x830D88")]
			get
			{
				return default(TimeSpan);
			}
			[Token(Token = "0x60023F7")]
			[Address(RVA = "0xC0AB0C", Offset = "0xC0AB0C", VA = "0xC0AB0C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830D98", Offset = "0x830D98")]
			set
			{
			}
		}

		[Token(Token = "0x17000484")]
		public static Func<string> RootCacheFolderProvider
		{
			[Token(Token = "0x60023F8")]
			[Address(RVA = "0xC0AB78", Offset = "0xC0AB78", VA = "0xC0AB78")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830DA8", Offset = "0x830DA8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60023F9")]
			[Address(RVA = "0xC0ABE0", Offset = "0xC0ABE0", VA = "0xC0ABE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830DB8", Offset = "0x830DB8")]
			set
			{
			}
		}

		[Token(Token = "0x17000485")]
		public static HTTPProxy Proxy
		{
			[Token(Token = "0x60023FA")]
			[Address(RVA = "0xC0AC4C", Offset = "0xC0AC4C", VA = "0xC0AC4C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830DC8", Offset = "0x830DC8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60023FB")]
			[Address(RVA = "0xC0ACB4", Offset = "0xC0ACB4", VA = "0xC0ACB4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830DD8", Offset = "0x830DD8")]
			set
			{
			}
		}

		[Token(Token = "0x17000486")]
		public static HeartbeatManager Heartbeats
		{
			[Token(Token = "0x60023FC")]
			[Address(RVA = "0xC0AD20", Offset = "0xC0AD20", VA = "0xC0AD20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000487")]
		public static BestHTTP.Logger.ILogger Logger
		{
			[Token(Token = "0x60023FD")]
			[Address(RVA = "0xC049AC", Offset = "0xC049AC", VA = "0xC049AC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60023FE")]
			[Address(RVA = "0xC0ADE8", Offset = "0xC0ADE8", VA = "0xC0ADE8")]
			set
			{
			}
		}

		[Token(Token = "0x17000488")]
		public static ICertificateVerifyer DefaultCertificateVerifyer
		{
			[Token(Token = "0x60023FF")]
			[Address(RVA = "0xC0AE54", Offset = "0xC0AE54", VA = "0xC0AE54")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830DE8", Offset = "0x830DE8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002400")]
			[Address(RVA = "0xC0AEBC", Offset = "0xC0AEBC", VA = "0xC0AEBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830DF8", Offset = "0x830DF8")]
			set
			{
			}
		}

		[Token(Token = "0x17000489")]
		public static IClientCredentialsProvider DefaultClientCredentialsProvider
		{
			[Token(Token = "0x6002401")]
			[Address(RVA = "0xC0AF28", Offset = "0xC0AF28", VA = "0xC0AF28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830E08", Offset = "0x830E08")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002402")]
			[Address(RVA = "0xC0AF90", Offset = "0xC0AF90", VA = "0xC0AF90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830E18", Offset = "0x830E18")]
			set
			{
			}
		}

		[Token(Token = "0x1700048A")]
		public static bool UseAlternateSSLDefaultValue
		{
			[Token(Token = "0x6002403")]
			[Address(RVA = "0xC0AFFC", Offset = "0xC0AFFC", VA = "0xC0AFFC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830E28", Offset = "0x830E28")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002404")]
			[Address(RVA = "0xC0B064", Offset = "0xC0B064", VA = "0xC0B064")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830E38", Offset = "0x830E38")]
			set
			{
			}
		}

		[Token(Token = "0x1700048B")]
		internal static int MaxPathLength
		{
			[Token(Token = "0x6002405")]
			[Address(RVA = "0xC0B0D4", Offset = "0xC0B0D4", VA = "0xC0B0D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830E48", Offset = "0x830E48")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002406")]
			[Address(RVA = "0xC0B13C", Offset = "0xC0B13C", VA = "0xC0B13C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830E58", Offset = "0x830E58")]
			set
			{
			}
		}

		[Token(Token = "0x60023E5")]
		[Address(RVA = "0xC09F10", Offset = "0xC09F10", VA = "0xC09F10")]
		static HTTPManager()
		{
		}

		[Token(Token = "0x6002407")]
		[Address(RVA = "0xC0B1A8", Offset = "0xC0B1A8", VA = "0xC0B1A8")]
		public static void Setup()
		{
		}

		[Token(Token = "0x6002408")]
		[Address(RVA = "0xC0B258", Offset = "0xC0B258", VA = "0xC0B258")]
		public static HTTPRequest SendRequest(string url, OnRequestFinishedDelegate callback)
		{
			return null;
		}

		[Token(Token = "0x6002409")]
		[Address(RVA = "0xC0B494", Offset = "0xC0B494", VA = "0xC0B494")]
		public static HTTPRequest SendRequest(string url, HTTPMethods methodType, OnRequestFinishedDelegate callback)
		{
			return null;
		}

		[Token(Token = "0x600240A")]
		[Address(RVA = "0xC0B550", Offset = "0xC0B550", VA = "0xC0B550")]
		public static HTTPRequest SendRequest(string url, HTTPMethods methodType, bool isKeepAlive, OnRequestFinishedDelegate callback)
		{
			return null;
		}

		[Token(Token = "0x600240B")]
		[Address(RVA = "0xC0B61C", Offset = "0xC0B61C", VA = "0xC0B61C")]
		public static HTTPRequest SendRequest(string url, HTTPMethods methodType, bool isKeepAlive, bool disableCache, OnRequestFinishedDelegate callback)
		{
			return null;
		}

		[Token(Token = "0x600240C")]
		[Address(RVA = "0xC0B310", Offset = "0xC0B310", VA = "0xC0B310")]
		public static HTTPRequest SendRequest(HTTPRequest request)
		{
			return null;
		}

		[Token(Token = "0x600240D")]
		[Address(RVA = "0xC0B904", Offset = "0xC0B904", VA = "0xC0B904")]
		public static GeneralStatistics GetGeneralStatistics(StatisticsQueryFlags queryFlags)
		{
			return default(GeneralStatistics);
		}

		[Token(Token = "0x600240E")]
		[Address(RVA = "0xC0B6F0", Offset = "0xC0B6F0", VA = "0xC0B6F0")]
		private static void SendRequestImpl(HTTPRequest request)
		{
		}

		[Token(Token = "0x600240F")]
		[Address(RVA = "0xC0C008", Offset = "0xC0C008", VA = "0xC0C008")]
		private static string GetKeyForRequest(HTTPRequest request)
		{
			return null;
		}

		[Token(Token = "0x6002410")]
		[Address(RVA = "0xC0C210", Offset = "0xC0C210", VA = "0xC0C210")]
		private static ConnectionBase CreateConnection(HTTPRequest request, string serverUrl)
		{
			return null;
		}

		[Token(Token = "0x6002411")]
		[Address(RVA = "0xC0BBF8", Offset = "0xC0BBF8", VA = "0xC0BBF8")]
		private static ConnectionBase FindOrCreateFreeConnection(HTTPRequest request)
		{
			return null;
		}

		[Token(Token = "0x6002412")]
		[Address(RVA = "0xC0C2B0", Offset = "0xC0C2B0", VA = "0xC0C2B0")]
		private static bool CanProcessFromQueue()
		{
			return default(bool);
		}

		[Token(Token = "0x6002413")]
		[Address(RVA = "0xC0C394", Offset = "0xC0C394", VA = "0xC0C394")]
		private static void RecycleConnection(ConnectionBase conn)
		{
		}

		[Token(Token = "0x6002414")]
		[Address(RVA = "0xC0C410", Offset = "0xC0C410", VA = "0xC0C410")]
		private static void OnConnectionRecylced(ConnectionBase conn)
		{
		}

		[Token(Token = "0x6002415")]
		[Address(RVA = "0xC0C524", Offset = "0xC0C524", VA = "0xC0C524")]
		internal static ConnectionBase GetConnectionWith(HTTPRequest request)
		{
			return null;
		}

		[Token(Token = "0x6002416")]
		[Address(RVA = "0xC0C6C0", Offset = "0xC0C6C0", VA = "0xC0C6C0")]
		internal static bool RemoveFromQueue(HTTPRequest request)
		{
			return default(bool);
		}

		[Token(Token = "0x6002417")]
		[Address(RVA = "0xC0C744", Offset = "0xC0C744", VA = "0xC0C744")]
		internal static string GetRootCacheFolder()
		{
			return null;
		}

		[Token(Token = "0x6002418")]
		[Address(RVA = "0xC0C9B0", Offset = "0xC0C9B0", VA = "0xC0C9B0")]
		public static void OnUpdate()
		{
		}

		[Token(Token = "0x6002419")]
		[Address(RVA = "0xC0DA60", Offset = "0xC0DA60", VA = "0xC0DA60")]
		public static void OnQuit()
		{
		}
	}
	[Token(Token = "0x200040C")]
	public enum HTTPMethods : byte
	{
		[Token(Token = "0x400145F")]
		Get,
		[Token(Token = "0x4001460")]
		Head,
		[Token(Token = "0x4001461")]
		Post,
		[Token(Token = "0x4001462")]
		Put,
		[Token(Token = "0x4001463")]
		Delete,
		[Token(Token = "0x4001464")]
		Patch
	}
	[Token(Token = "0x200040D")]
	public enum SupportedProtocols
	{
		[Token(Token = "0x4001466")]
		Unknown,
		[Token(Token = "0x4001467")]
		HTTP,
		[Token(Token = "0x4001468")]
		WebSocket,
		[Token(Token = "0x4001469")]
		ServerSentEvents
	}
	[Token(Token = "0x200040E")]
	internal static class HTTPProtocolFactory
	{
		[Token(Token = "0x600241A")]
		[Address(RVA = "0xBBF864", Offset = "0xBBF864", VA = "0xBBF864")]
		public static HTTPResponse Get(SupportedProtocols protocol, HTTPRequest request, Stream stream, bool isStreamed, bool isFromCache)
		{
			return null;
		}

		[Token(Token = "0x600241B")]
		[Address(RVA = "0xBBFAE0", Offset = "0xBBFAE0", VA = "0xBBFAE0")]
		public static SupportedProtocols GetProtocolFromUri(Uri uri)
		{
			return default(SupportedProtocols);
		}

		[Token(Token = "0x600241C")]
		[Address(RVA = "0xBBFC08", Offset = "0xBBFC08", VA = "0xBBFC08")]
		public static bool IsSecureProtocol(Uri uri)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200040F")]
	public sealed class HTTPProxy
	{
		[Token(Token = "0x400146A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823664", Offset = "0x823664")]
		private Uri <Address>k__BackingField;

		[Token(Token = "0x400146B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823674", Offset = "0x823674")]
		private Credentials <Credentials>k__BackingField;

		[Token(Token = "0x400146C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823684", Offset = "0x823684")]
		private bool <IsTransparent>k__BackingField;

		[Token(Token = "0x400146D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823694", Offset = "0x823694")]
		private bool <SendWholeUri>k__BackingField;

		[Token(Token = "0x400146E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8236A4", Offset = "0x8236A4")]
		private bool <NonTransparentForHTTPS>k__BackingField;

		[Token(Token = "0x1700048C")]
		public Uri Address
		{
			[Token(Token = "0x600241D")]
			[Address(RVA = "0xBBFD28", Offset = "0xBBFD28", VA = "0xBBFD28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830E68", Offset = "0x830E68")]
			get
			{
				return null;
			}
			[Token(Token = "0x600241E")]
			[Address(RVA = "0xBBFD30", Offset = "0xBBFD30", VA = "0xBBFD30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830E78", Offset = "0x830E78")]
			set
			{
			}
		}

		[Token(Token = "0x1700048D")]
		public Credentials Credentials
		{
			[Token(Token = "0x600241F")]
			[Address(RVA = "0xBBFD38", Offset = "0xBBFD38", VA = "0xBBFD38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830E88", Offset = "0x830E88")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002420")]
			[Address(RVA = "0xBBFD40", Offset = "0xBBFD40", VA = "0xBBFD40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830E98", Offset = "0x830E98")]
			set
			{
			}
		}

		[Token(Token = "0x1700048E")]
		public bool IsTransparent
		{
			[Token(Token = "0x6002421")]
			[Address(RVA = "0xBBFD48", Offset = "0xBBFD48", VA = "0xBBFD48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830EA8", Offset = "0x830EA8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002422")]
			[Address(RVA = "0xBBFD50", Offset = "0xBBFD50", VA = "0xBBFD50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830EB8", Offset = "0x830EB8")]
			set
			{
			}
		}

		[Token(Token = "0x1700048F")]
		public bool SendWholeUri
		{
			[Token(Token = "0x6002423")]
			[Address(RVA = "0xBBFD5C", Offset = "0xBBFD5C", VA = "0xBBFD5C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830EC8", Offset = "0x830EC8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002424")]
			[Address(RVA = "0xBBFD64", Offset = "0xBBFD64", VA = "0xBBFD64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830ED8", Offset = "0x830ED8")]
			set
			{
			}
		}

		[Token(Token = "0x17000490")]
		public bool NonTransparentForHTTPS
		{
			[Token(Token = "0x6002425")]
			[Address(RVA = "0xBBFD70", Offset = "0xBBFD70", VA = "0xBBFD70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830EE8", Offset = "0x830EE8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002426")]
			[Address(RVA = "0xBBFD78", Offset = "0xBBFD78", VA = "0xBBFD78")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830EF8", Offset = "0x830EF8")]
			set
			{
			}
		}

		[Token(Token = "0x6002427")]
		[Address(RVA = "0xBBFD84", Offset = "0xBBFD84", VA = "0xBBFD84")]
		public HTTPProxy(Uri address)
		{
		}

		[Token(Token = "0x6002428")]
		[Address(RVA = "0xBBFE0C", Offset = "0xBBFE0C", VA = "0xBBFE0C")]
		public HTTPProxy(Uri address, Credentials credentials)
		{
		}

		[Token(Token = "0x6002429")]
		[Address(RVA = "0xBBFDC0", Offset = "0xBBFDC0", VA = "0xBBFDC0")]
		public HTTPProxy(Uri address, Credentials credentials, bool isTransparent)
		{
		}

		[Token(Token = "0x600242A")]
		[Address(RVA = "0xBBFE54", Offset = "0xBBFE54", VA = "0xBBFE54")]
		public HTTPProxy(Uri address, Credentials credentials, bool isTransparent, bool sendWholeUri)
		{
		}

		[Token(Token = "0x600242B")]
		[Address(RVA = "0xBBFEA0", Offset = "0xBBFEA0", VA = "0xBBFEA0")]
		public HTTPProxy(Uri address, Credentials credentials, bool isTransparent, bool sendWholeUri, bool nonTransparentForHTTPS)
		{
		}
	}
	[Token(Token = "0x2000410")]
	public sealed class HTTPRange
	{
		[Token(Token = "0x400146F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8236B4", Offset = "0x8236B4")]
		private int <FirstBytePos>k__BackingField;

		[Token(Token = "0x4001470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8236C4", Offset = "0x8236C4")]
		private int <LastBytePos>k__BackingField;

		[Token(Token = "0x4001471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8236D4", Offset = "0x8236D4")]
		private int <ContentLength>k__BackingField;

		[Token(Token = "0x4001472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8236E4", Offset = "0x8236E4")]
		private bool <IsValid>k__BackingField;

		[Token(Token = "0x17000491")]
		public int FirstBytePos
		{
			[Token(Token = "0x600242C")]
			[Address(RVA = "0xBBFF04", Offset = "0xBBFF04", VA = "0xBBFF04")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830F08", Offset = "0x830F08")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600242D")]
			[Address(RVA = "0xBBFF0C", Offset = "0xBBFF0C", VA = "0xBBFF0C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830F18", Offset = "0x830F18")]
			private set
			{
			}
		}

		[Token(Token = "0x17000492")]
		public int LastBytePos
		{
			[Token(Token = "0x600242E")]
			[Address(RVA = "0xBBFF14", Offset = "0xBBFF14", VA = "0xBBFF14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830F28", Offset = "0x830F28")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600242F")]
			[Address(RVA = "0xBBFF1C", Offset = "0xBBFF1C", VA = "0xBBFF1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830F38", Offset = "0x830F38")]
			private set
			{
			}
		}

		[Token(Token = "0x17000493")]
		public int ContentLength
		{
			[Token(Token = "0x6002430")]
			[Address(RVA = "0xBBFF24", Offset = "0xBBFF24", VA = "0xBBFF24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830F48", Offset = "0x830F48")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002431")]
			[Address(RVA = "0xBBFF2C", Offset = "0xBBFF2C", VA = "0xBBFF2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830F58", Offset = "0x830F58")]
			private set
			{
			}
		}

		[Token(Token = "0x17000494")]
		public bool IsValid
		{
			[Token(Token = "0x6002432")]
			[Address(RVA = "0xBBFF34", Offset = "0xBBFF34", VA = "0xBBFF34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830F68", Offset = "0x830F68")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002433")]
			[Address(RVA = "0xBBFF3C", Offset = "0xBBFF3C", VA = "0xBBFF3C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830F78", Offset = "0x830F78")]
			private set
			{
			}
		}

		[Token(Token = "0x6002434")]
		[Address(RVA = "0xBBFF48", Offset = "0xBBFF48", VA = "0xBBFF48")]
		internal HTTPRange()
		{
		}

		[Token(Token = "0x6002435")]
		[Address(RVA = "0xBBFF78", Offset = "0xBBFF78", VA = "0xBBFF78")]
		internal HTTPRange(int contentLength)
		{
		}

		[Token(Token = "0x6002436")]
		[Address(RVA = "0xBBFFA8", Offset = "0xBBFFA8", VA = "0xBBFFA8")]
		internal HTTPRange(int fbp, int lbp, int contentLength)
		{
		}

		[Token(Token = "0x6002437")]
		[Address(RVA = "0xBC0008", Offset = "0xBC0008", VA = "0xBC0008", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000411")]
	public enum HTTPRequestStates
	{
		[Token(Token = "0x4001474")]
		Initial,
		[Token(Token = "0x4001475")]
		Queued,
		[Token(Token = "0x4001476")]
		Processing,
		[Token(Token = "0x4001477")]
		Finished,
		[Token(Token = "0x4001478")]
		Error,
		[Token(Token = "0x4001479")]
		Aborted,
		[Token(Token = "0x400147A")]
		ConnectionTimedOut,
		[Token(Token = "0x400147B")]
		TimedOut
	}
	[Token(Token = "0x2000412")]
	public delegate void OnRequestFinishedDelegate(HTTPRequest originalRequest, HTTPResponse response);
	[Token(Token = "0x2000413")]
	public delegate void OnDownloadProgressDelegate(HTTPRequest originalRequest, int downloaded, int downloadLength);
	[Token(Token = "0x2000414")]
	public delegate void OnUploadProgressDelegate(HTTPRequest originalRequest, long uploaded, long uploadLength);
	[Token(Token = "0x2000415")]
	public delegate bool OnBeforeRedirectionDelegate(HTTPRequest originalRequest, HTTPResponse response, Uri redirectUri);
	[Token(Token = "0x2000416")]
	public delegate void OnHeaderEnumerationDelegate(string header, List<string> values);
	[Token(Token = "0x2000417")]
	public sealed class HTTPRequest : IEnumerator, IEnumerator<HTTPRequest>, IDisposable
	{
		[Token(Token = "0x20006DC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820E30", Offset = "0x820E30")]
		private sealed class <>c__DisplayClass211_0
		{
			[Token(Token = "0x4002664")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public BestHTTP.Cookies.Cookie customCookie;

			[Token(Token = "0x600362B")]
			[Address(RVA = "0xBC27D0", Offset = "0xBC27D0", VA = "0xBC27D0")]
			public <>c__DisplayClass211_0()
			{
			}

			[Token(Token = "0x600362C")]
			[Address(RVA = "0xBC4BAC", Offset = "0xBC4BAC", VA = "0xBC4BAC")]
			internal bool <EnumerateHeaders>b__0(BestHTTP.Cookies.Cookie c)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20006DD")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820E40", Offset = "0x820E40")]
		private sealed class <>c__DisplayClass212_0
		{
			[Token(Token = "0x4002665")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public BinaryWriter stream;

			[Token(Token = "0x600362D")]
			[Address(RVA = "0xBC2C64", Offset = "0xBC2C64", VA = "0xBC2C64")]
			public <>c__DisplayClass212_0()
			{
			}

			[Token(Token = "0x600362E")]
			[Address(RVA = "0xBC4BDC", Offset = "0xBC4BDC", VA = "0xBC4BDC")]
			internal void <SendHeaders>b__0(string header, List<string> values)
			{
			}
		}

		[Token(Token = "0x400147C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly byte[] EOL;

		[Token(Token = "0x400147D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly string[] MethodNames;

		[Token(Token = "0x400147E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static int UploadChunkSize;

		[Token(Token = "0x400147F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8236F4", Offset = "0x8236F4")]
		private Uri <Uri>k__BackingField;

		[Token(Token = "0x4001480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823704", Offset = "0x823704")]
		private HTTPMethods <MethodType>k__BackingField;

		[Token(Token = "0x4001481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823714", Offset = "0x823714")]
		private byte[] <RawData>k__BackingField;

		[Token(Token = "0x4001482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823724", Offset = "0x823724")]
		private Stream <UploadStream>k__BackingField;

		[Token(Token = "0x4001483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823734", Offset = "0x823734")]
		private bool <DisposeUploadStream>k__BackingField;

		[Token(Token = "0x4001484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823744", Offset = "0x823744")]
		private bool <UseUploadStreamLength>k__BackingField;

		[Token(Token = "0x4001485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public OnUploadProgressDelegate OnUploadProgress;

		[Token(Token = "0x4001486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823754", Offset = "0x823754")]
		private OnRequestFinishedDelegate <Callback>k__BackingField;

		[Token(Token = "0x4001487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public OnDownloadProgressDelegate OnProgress;

		[Token(Token = "0x4001488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public OnRequestFinishedDelegate OnUpgraded;

		[Token(Token = "0x4001489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823764", Offset = "0x823764")]
		private bool <DisableRetry>k__BackingField;

		[Token(Token = "0x400148A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823774", Offset = "0x823774")]
		private bool <IsRedirected>k__BackingField;

		[Token(Token = "0x400148B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823784", Offset = "0x823784")]
		private Uri <RedirectUri>k__BackingField;

		[Token(Token = "0x400148C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823794", Offset = "0x823794")]
		private HTTPResponse <Response>k__BackingField;

		[Token(Token = "0x400148D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8237A4", Offset = "0x8237A4")]
		private HTTPResponse <ProxyResponse>k__BackingField;

		[Token(Token = "0x400148E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8237B4", Offset = "0x8237B4")]
		private Exception <Exception>k__BackingField;

		[Token(Token = "0x400148F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8237C4", Offset = "0x8237C4")]
		private object <Tag>k__BackingField;

		[Token(Token = "0x4001490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8237D4", Offset = "0x8237D4")]
		private Credentials <Credentials>k__BackingField;

		[Token(Token = "0x4001491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8237E4", Offset = "0x8237E4")]
		private HTTPProxy <Proxy>k__BackingField;

		[Token(Token = "0x4001492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8237F4", Offset = "0x8237F4")]
		private int <MaxRedirects>k__BackingField;

		[Token(Token = "0x4001493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823804", Offset = "0x823804")]
		private bool <UseAlternateSSL>k__BackingField;

		[Token(Token = "0x4001494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823814", Offset = "0x823814")]
		private bool <IsCookiesEnabled>k__BackingField;

		[Token(Token = "0x4001495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<BestHTTP.Cookies.Cookie> customCookies;

		[Token(Token = "0x4001496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823824", Offset = "0x823824")]
		private HTTPFormUsage <FormUsage>k__BackingField;

		[Token(Token = "0x4001497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823834", Offset = "0x823834")]
		private HTTPRequestStates <State>k__BackingField;

		[Token(Token = "0x4001498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823844", Offset = "0x823844")]
		private int <RedirectCount>k__BackingField;

		[Token(Token = "0x400149A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823864", Offset = "0x823864")]
		private TimeSpan <ConnectTimeout>k__BackingField;

		[Token(Token = "0x400149B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823874", Offset = "0x823874")]
		private TimeSpan <Timeout>k__BackingField;

		[Token(Token = "0x400149C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823884", Offset = "0x823884")]
		private bool <EnableTimoutForStreaming>k__BackingField;

		[Token(Token = "0x400149D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823894", Offset = "0x823894")]
		private int <Priority>k__BackingField;

		[Token(Token = "0x400149E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8238A4", Offset = "0x8238A4")]
		private ICertificateVerifyer <CustomCertificateVerifyer>k__BackingField;

		[Token(Token = "0x400149F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8238B4", Offset = "0x8238B4")]
		private IClientCredentialsProvider <CustomClientCredentialsProvider>k__BackingField;

		[Token(Token = "0x40014A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8238C4", Offset = "0x8238C4")]
		private SupportedProtocols <ProtocolHandler>k__BackingField;

		[Token(Token = "0x40014A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private OnBeforeRedirectionDelegate onBeforeRedirection;

		[Token(Token = "0x40014A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8238D4", Offset = "0x8238D4")]
		private int <Downloaded>k__BackingField;

		[Token(Token = "0x40014A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8238E4", Offset = "0x8238E4")]
		private int <DownloadLength>k__BackingField;

		[Token(Token = "0x40014A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8238F4", Offset = "0x8238F4")]
		private bool <DownloadProgressChanged>k__BackingField;

		[Token(Token = "0x40014A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823904", Offset = "0x823904")]
		private long <Uploaded>k__BackingField;

		[Token(Token = "0x40014A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823914", Offset = "0x823914")]
		private long <UploadLength>k__BackingField;

		[Token(Token = "0x40014A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823924", Offset = "0x823924")]
		private bool <UploadProgressChanged>k__BackingField;

		[Token(Token = "0x40014A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x119")]
		private bool isKeepAlive;

		[Token(Token = "0x40014A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11A")]
		private bool disableCache;

		[Token(Token = "0x40014AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private int streamFragmentSize;

		[Token(Token = "0x40014AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private bool useStreaming;

		[Token(Token = "0x40014AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823934", Offset = "0x823934")]
		private Dictionary<string, List<string>> <Headers>k__BackingField;

		[Token(Token = "0x40014AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private HTTPFormBase FieldCollector;

		[Token(Token = "0x40014AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private HTTPFormBase FormImpl;

		[Token(Token = "0x17000495")]
		public Uri Uri
		{
			[Token(Token = "0x600244C")]
			[Address(RVA = "0xBC01B4", Offset = "0xBC01B4", VA = "0xBC01B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830F88", Offset = "0x830F88")]
			get
			{
				return null;
			}
			[Token(Token = "0x600244D")]
			[Address(RVA = "0xBC01BC", Offset = "0xBC01BC", VA = "0xBC01BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830F98", Offset = "0x830F98")]
			private set
			{
			}
		}

		[Token(Token = "0x17000496")]
		public HTTPMethods MethodType
		{
			[Token(Token = "0x600244E")]
			[Address(RVA = "0xBC01C4", Offset = "0xBC01C4", VA = "0xBC01C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830FA8", Offset = "0x830FA8")]
			get
			{
				return default(HTTPMethods);
			}
			[Token(Token = "0x600244F")]
			[Address(RVA = "0xBC01CC", Offset = "0xBC01CC", VA = "0xBC01CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830FB8", Offset = "0x830FB8")]
			set
			{
			}
		}

		[Token(Token = "0x17000497")]
		public byte[] RawData
		{
			[Token(Token = "0x6002450")]
			[Address(RVA = "0xBC01D4", Offset = "0xBC01D4", VA = "0xBC01D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830FC8", Offset = "0x830FC8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002451")]
			[Address(RVA = "0xBC01DC", Offset = "0xBC01DC", VA = "0xBC01DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830FD8", Offset = "0x830FD8")]
			set
			{
			}
		}

		[Token(Token = "0x17000498")]
		public Stream UploadStream
		{
			[Token(Token = "0x6002452")]
			[Address(RVA = "0xBC01E4", Offset = "0xBC01E4", VA = "0xBC01E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830FE8", Offset = "0x830FE8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002453")]
			[Address(RVA = "0xBC01EC", Offset = "0xBC01EC", VA = "0xBC01EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x830FF8", Offset = "0x830FF8")]
			set
			{
			}
		}

		[Token(Token = "0x17000499")]
		public bool DisposeUploadStream
		{
			[Token(Token = "0x6002454")]
			[Address(RVA = "0xBC01F4", Offset = "0xBC01F4", VA = "0xBC01F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831008", Offset = "0x831008")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002455")]
			[Address(RVA = "0xBC01FC", Offset = "0xBC01FC", VA = "0xBC01FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831018", Offset = "0x831018")]
			set
			{
			}
		}

		[Token(Token = "0x1700049A")]
		public bool UseUploadStreamLength
		{
			[Token(Token = "0x6002456")]
			[Address(RVA = "0xBC0208", Offset = "0xBC0208", VA = "0xBC0208")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831028", Offset = "0x831028")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002457")]
			[Address(RVA = "0xBC0210", Offset = "0xBC0210", VA = "0xBC0210")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831038", Offset = "0x831038")]
			set
			{
			}
		}

		[Token(Token = "0x1700049B")]
		public bool IsKeepAlive
		{
			[Token(Token = "0x6002458")]
			[Address(RVA = "0xBC021C", Offset = "0xBC021C", VA = "0xBC021C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002459")]
			[Address(RVA = "0xBC0224", Offset = "0xBC0224", VA = "0xBC0224")]
			set
			{
			}
		}

		[Token(Token = "0x1700049C")]
		public bool DisableCache
		{
			[Token(Token = "0x600245A")]
			[Address(RVA = "0xBC02C0", Offset = "0xBC02C0", VA = "0xBC02C0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600245B")]
			[Address(RVA = "0xBC02C8", Offset = "0xBC02C8", VA = "0xBC02C8")]
			set
			{
			}
		}

		[Token(Token = "0x1700049D")]
		public bool UseStreaming
		{
			[Token(Token = "0x600245C")]
			[Address(RVA = "0xBC0364", Offset = "0xBC0364", VA = "0xBC0364")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600245D")]
			[Address(RVA = "0xBC036C", Offset = "0xBC036C", VA = "0xBC036C")]
			set
			{
			}
		}

		[Token(Token = "0x1700049E")]
		public int StreamFragmentSize
		{
			[Token(Token = "0x600245E")]
			[Address(RVA = "0xBC0408", Offset = "0xBC0408", VA = "0xBC0408")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600245F")]
			[Address(RVA = "0xBC0410", Offset = "0xBC0410", VA = "0xBC0410")]
			set
			{
			}
		}

		[Token(Token = "0x1700049F")]
		public OnRequestFinishedDelegate Callback
		{
			[Token(Token = "0x6002460")]
			[Address(RVA = "0xBC04DC", Offset = "0xBC04DC", VA = "0xBC04DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831048", Offset = "0x831048")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002461")]
			[Address(RVA = "0xBC04E4", Offset = "0xBC04E4", VA = "0xBC04E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831058", Offset = "0x831058")]
			set
			{
			}
		}

		[Token(Token = "0x170004A0")]
		public bool DisableRetry
		{
			[Token(Token = "0x6002462")]
			[Address(RVA = "0xBC04EC", Offset = "0xBC04EC", VA = "0xBC04EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831068", Offset = "0x831068")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002463")]
			[Address(RVA = "0xBC04F4", Offset = "0xBC04F4", VA = "0xBC04F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831078", Offset = "0x831078")]
			set
			{
			}
		}

		[Token(Token = "0x170004A1")]
		public bool IsRedirected
		{
			[Token(Token = "0x6002464")]
			[Address(RVA = "0xBC0500", Offset = "0xBC0500", VA = "0xBC0500")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831088", Offset = "0x831088")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002465")]
			[Address(RVA = "0xBC0508", Offset = "0xBC0508", VA = "0xBC0508")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831098", Offset = "0x831098")]
			internal set
			{
			}
		}

		[Token(Token = "0x170004A2")]
		public Uri RedirectUri
		{
			[Token(Token = "0x6002466")]
			[Address(RVA = "0xBC0514", Offset = "0xBC0514", VA = "0xBC0514")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8310A8", Offset = "0x8310A8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002467")]
			[Address(RVA = "0xBC051C", Offset = "0xBC051C", VA = "0xBC051C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8310B8", Offset = "0x8310B8")]
			internal set
			{
			}
		}

		[Token(Token = "0x170004A3")]
		public Uri CurrentUri
		{
			[Token(Token = "0x6002468")]
			[Address(RVA = "0xBC0524", Offset = "0xBC0524", VA = "0xBC0524")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004A4")]
		public HTTPResponse Response
		{
			[Token(Token = "0x6002469")]
			[Address(RVA = "0xBC0540", Offset = "0xBC0540", VA = "0xBC0540")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8310C8", Offset = "0x8310C8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600246A")]
			[Address(RVA = "0xBC0548", Offset = "0xBC0548", VA = "0xBC0548")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8310D8", Offset = "0x8310D8")]
			internal set
			{
			}
		}

		[Token(Token = "0x170004A5")]
		public HTTPResponse ProxyResponse
		{
			[Token(Token = "0x600246B")]
			[Address(RVA = "0xBC0550", Offset = "0xBC0550", VA = "0xBC0550")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8310E8", Offset = "0x8310E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600246C")]
			[Address(RVA = "0xBC0558", Offset = "0xBC0558", VA = "0xBC0558")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8310F8", Offset = "0x8310F8")]
			internal set
			{
			}
		}

		[Token(Token = "0x170004A6")]
		public Exception Exception
		{
			[Token(Token = "0x600246D")]
			[Address(RVA = "0xBC0560", Offset = "0xBC0560", VA = "0xBC0560")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831108", Offset = "0x831108")]
			get
			{
				return null;
			}
			[Token(Token = "0x600246E")]
			[Address(RVA = "0xBC0568", Offset = "0xBC0568", VA = "0xBC0568")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831118", Offset = "0x831118")]
			internal set
			{
			}
		}

		[Token(Token = "0x170004A7")]
		public object Tag
		{
			[Token(Token = "0x600246F")]
			[Address(RVA = "0xBC0570", Offset = "0xBC0570", VA = "0xBC0570")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831128", Offset = "0x831128")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002470")]
			[Address(RVA = "0xBC0578", Offset = "0xBC0578", VA = "0xBC0578")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831138", Offset = "0x831138")]
			set
			{
			}
		}

		[Token(Token = "0x170004A8")]
		public Credentials Credentials
		{
			[Token(Token = "0x6002471")]
			[Address(RVA = "0xBC0580", Offset = "0xBC0580", VA = "0xBC0580")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831148", Offset = "0x831148")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002472")]
			[Address(RVA = "0xBC0588", Offset = "0xBC0588", VA = "0xBC0588")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831158", Offset = "0x831158")]
			set
			{
			}
		}

		[Token(Token = "0x170004A9")]
		public bool HasProxy
		{
			[Token(Token = "0x6002473")]
			[Address(RVA = "0xBC0590", Offset = "0xBC0590", VA = "0xBC0590")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170004AA")]
		public HTTPProxy Proxy
		{
			[Token(Token = "0x6002474")]
			[Address(RVA = "0xBC05A0", Offset = "0xBC05A0", VA = "0xBC05A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831168", Offset = "0x831168")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002475")]
			[Address(RVA = "0xBC05A8", Offset = "0xBC05A8", VA = "0xBC05A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831178", Offset = "0x831178")]
			set
			{
			}
		}

		[Token(Token = "0x170004AB")]
		public int MaxRedirects
		{
			[Token(Token = "0x6002476")]
			[Address(RVA = "0xBC05B0", Offset = "0xBC05B0", VA = "0xBC05B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831188", Offset = "0x831188")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002477")]
			[Address(RVA = "0xBC05B8", Offset = "0xBC05B8", VA = "0xBC05B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831198", Offset = "0x831198")]
			set
			{
			}
		}

		[Token(Token = "0x170004AC")]
		public bool UseAlternateSSL
		{
			[Token(Token = "0x6002478")]
			[Address(RVA = "0xBC05C0", Offset = "0xBC05C0", VA = "0xBC05C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8311A8", Offset = "0x8311A8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002479")]
			[Address(RVA = "0xBC05C8", Offset = "0xBC05C8", VA = "0xBC05C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8311B8", Offset = "0x8311B8")]
			set
			{
			}
		}

		[Token(Token = "0x170004AD")]
		public bool IsCookiesEnabled
		{
			[Token(Token = "0x600247A")]
			[Address(RVA = "0xBC05D4", Offset = "0xBC05D4", VA = "0xBC05D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8311C8", Offset = "0x8311C8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600247B")]
			[Address(RVA = "0xBC05DC", Offset = "0xBC05DC", VA = "0xBC05DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8311D8", Offset = "0x8311D8")]
			set
			{
			}
		}

		[Token(Token = "0x170004AE")]
		public List<BestHTTP.Cookies.Cookie> Cookies
		{
			[Token(Token = "0x600247C")]
			[Address(RVA = "0xBC05E8", Offset = "0xBC05E8", VA = "0xBC05E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600247D")]
			[Address(RVA = "0xBC065C", Offset = "0xBC065C", VA = "0xBC065C")]
			set
			{
			}
		}

		[Token(Token = "0x170004AF")]
		public HTTPFormUsage FormUsage
		{
			[Token(Token = "0x600247E")]
			[Address(RVA = "0xBC0664", Offset = "0xBC0664", VA = "0xBC0664")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8311E8", Offset = "0x8311E8")]
			get
			{
				return default(HTTPFormUsage);
			}
			[Token(Token = "0x600247F")]
			[Address(RVA = "0xBC066C", Offset = "0xBC066C", VA = "0xBC066C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8311F8", Offset = "0x8311F8")]
			set
			{
			}
		}

		[Token(Token = "0x170004B0")]
		public HTTPRequestStates State
		{
			[Token(Token = "0x6002480")]
			[Address(RVA = "0xBC0674", Offset = "0xBC0674", VA = "0xBC0674")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831208", Offset = "0x831208")]
			get
			{
				return default(HTTPRequestStates);
			}
			[Token(Token = "0x6002481")]
			[Address(RVA = "0xBC067C", Offset = "0xBC067C", VA = "0xBC067C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831218", Offset = "0x831218")]
			internal set
			{
			}
		}

		[Token(Token = "0x170004B1")]
		public int RedirectCount
		{
			[Token(Token = "0x6002482")]
			[Address(RVA = "0xBC0684", Offset = "0xBC0684", VA = "0xBC0684")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831228", Offset = "0x831228")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002483")]
			[Address(RVA = "0xBC068C", Offset = "0xBC068C", VA = "0xBC068C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831238", Offset = "0x831238")]
			internal set
			{
			}
		}

		[Token(Token = "0x170004B2")]
		public TimeSpan ConnectTimeout
		{
			[Token(Token = "0x6002486")]
			[Address(RVA = "0xBC07DC", Offset = "0xBC07DC", VA = "0xBC07DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831268", Offset = "0x831268")]
			get
			{
				return default(TimeSpan);
			}
			[Token(Token = "0x6002487")]
			[Address(RVA = "0xBC07E4", Offset = "0xBC07E4", VA = "0xBC07E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831278", Offset = "0x831278")]
			set
			{
			}
		}

		[Token(Token = "0x170004B3")]
		public TimeSpan Timeout
		{
			[Token(Token = "0x6002488")]
			[Address(RVA = "0xBC07EC", Offset = "0xBC07EC", VA = "0xBC07EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831288", Offset = "0x831288")]
			get
			{
				return default(TimeSpan);
			}
			[Token(Token = "0x6002489")]
			[Address(RVA = "0xBC07F4", Offset = "0xBC07F4", VA = "0xBC07F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831298", Offset = "0x831298")]
			set
			{
			}
		}

		[Token(Token = "0x170004B4")]
		public bool EnableTimoutForStreaming
		{
			[Token(Token = "0x600248A")]
			[Address(RVA = "0xBC07FC", Offset = "0xBC07FC", VA = "0xBC07FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8312A8", Offset = "0x8312A8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600248B")]
			[Address(RVA = "0xBC0804", Offset = "0xBC0804", VA = "0xBC0804")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8312B8", Offset = "0x8312B8")]
			set
			{
			}
		}

		[Token(Token = "0x170004B5")]
		public int Priority
		{
			[Token(Token = "0x600248C")]
			[Address(RVA = "0xBC0810", Offset = "0xBC0810", VA = "0xBC0810")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8312C8", Offset = "0x8312C8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600248D")]
			[Address(RVA = "0xBC0818", Offset = "0xBC0818", VA = "0xBC0818")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8312D8", Offset = "0x8312D8")]
			set
			{
			}
		}

		[Token(Token = "0x170004B6")]
		public ICertificateVerifyer CustomCertificateVerifyer
		{
			[Token(Token = "0x600248E")]
			[Address(RVA = "0xBC0820", Offset = "0xBC0820", VA = "0xBC0820")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8312E8", Offset = "0x8312E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600248F")]
			[Address(RVA = "0xBC0828", Offset = "0xBC0828", VA = "0xBC0828")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8312F8", Offset = "0x8312F8")]
			set
			{
			}
		}

		[Token(Token = "0x170004B7")]
		public IClientCredentialsProvider CustomClientCredentialsProvider
		{
			[Token(Token = "0x6002490")]
			[Address(RVA = "0xBC0830", Offset = "0xBC0830", VA = "0xBC0830")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831308", Offset = "0x831308")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002491")]
			[Address(RVA = "0xBC0838", Offset = "0xBC0838", VA = "0xBC0838")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831318", Offset = "0x831318")]
			set
			{
			}
		}

		[Token(Token = "0x170004B8")]
		public SupportedProtocols ProtocolHandler
		{
			[Token(Token = "0x6002492")]
			[Address(RVA = "0xBC0840", Offset = "0xBC0840", VA = "0xBC0840")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831328", Offset = "0x831328")]
			get
			{
				return default(SupportedProtocols);
			}
			[Token(Token = "0x6002493")]
			[Address(RVA = "0xBC0848", Offset = "0xBC0848", VA = "0xBC0848")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831338", Offset = "0x831338")]
			set
			{
			}
		}

		[Token(Token = "0x170004B9")]
		internal int Downloaded
		{
			[Token(Token = "0x6002496")]
			[Address(RVA = "0xBC0950", Offset = "0xBC0950", VA = "0xBC0950")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831348", Offset = "0x831348")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002497")]
			[Address(RVA = "0xBC0958", Offset = "0xBC0958", VA = "0xBC0958")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831358", Offset = "0x831358")]
			set
			{
			}
		}

		[Token(Token = "0x170004BA")]
		internal int DownloadLength
		{
			[Token(Token = "0x6002498")]
			[Address(RVA = "0xBC0960", Offset = "0xBC0960", VA = "0xBC0960")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831368", Offset = "0x831368")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002499")]
			[Address(RVA = "0xBC0968", Offset = "0xBC0968", VA = "0xBC0968")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831378", Offset = "0x831378")]
			set
			{
			}
		}

		[Token(Token = "0x170004BB")]
		internal bool DownloadProgressChanged
		{
			[Token(Token = "0x600249A")]
			[Address(RVA = "0xBC0970", Offset = "0xBC0970", VA = "0xBC0970")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831388", Offset = "0x831388")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600249B")]
			[Address(RVA = "0xBC0978", Offset = "0xBC0978", VA = "0xBC0978")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831398", Offset = "0x831398")]
			set
			{
			}
		}

		[Token(Token = "0x170004BC")]
		internal long UploadStreamLength
		{
			[Token(Token = "0x600249C")]
			[Address(RVA = "0xBC0984", Offset = "0xBC0984", VA = "0xBC0984")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x170004BD")]
		internal long Uploaded
		{
			[Token(Token = "0x600249D")]
			[Address(RVA = "0xBC0A54", Offset = "0xBC0A54", VA = "0xBC0A54")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8313A8", Offset = "0x8313A8")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x600249E")]
			[Address(RVA = "0xBC0A5C", Offset = "0xBC0A5C", VA = "0xBC0A5C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8313B8", Offset = "0x8313B8")]
			set
			{
			}
		}

		[Token(Token = "0x170004BE")]
		internal long UploadLength
		{
			[Token(Token = "0x600249F")]
			[Address(RVA = "0xBC0A64", Offset = "0xBC0A64", VA = "0xBC0A64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8313C8", Offset = "0x8313C8")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x60024A0")]
			[Address(RVA = "0xBC0A6C", Offset = "0xBC0A6C", VA = "0xBC0A6C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8313D8", Offset = "0x8313D8")]
			set
			{
			}
		}

		[Token(Token = "0x170004BF")]
		internal bool UploadProgressChanged
		{
			[Token(Token = "0x60024A1")]
			[Address(RVA = "0xBC0A74", Offset = "0xBC0A74", VA = "0xBC0A74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8313E8", Offset = "0x8313E8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60024A2")]
			[Address(RVA = "0xBC0A7C", Offset = "0xBC0A7C", VA = "0xBC0A7C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8313F8", Offset = "0x8313F8")]
			set
			{
			}
		}

		[Token(Token = "0x170004C0")]
		private Dictionary<string, List<string>> Headers
		{
			[Token(Token = "0x60024A3")]
			[Address(RVA = "0xBC0A88", Offset = "0xBC0A88", VA = "0xBC0A88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831408", Offset = "0x831408")]
			get
			{
				return null;
			}
			[Token(Token = "0x60024A4")]
			[Address(RVA = "0xBC0A90", Offset = "0xBC0A90", VA = "0xBC0A90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831418", Offset = "0x831418")]
			set
			{
			}
		}

		[Token(Token = "0x170004C1")]
		public object Current
		{
			[Token(Token = "0x60024CD")]
			[Address(RVA = "0xBC4770", Offset = "0xBC4770", VA = "0xBC4770", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004C2")]
		private HTTPRequest System.Collections.Generic.IEnumerator<BestHTTP.HTTPRequest>.Current
		{
			[Token(Token = "0x60024D0")]
			[Address(RVA = "0xBC47E8", Offset = "0xBC47E8", VA = "0xBC47E8", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000016")]
		public event Func<HTTPRequest, X509Certificate, X509Chain, bool> CustomCertificationValidator
		{
			[Token(Token = "0x6002484")]
			[Address(RVA = "0xBC0694", Offset = "0xBC0694", VA = "0xBC0694")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831248", Offset = "0x831248")]
			add
			{
			}
			[Token(Token = "0x6002485")]
			[Address(RVA = "0xBC0738", Offset = "0xBC0738", VA = "0xBC0738")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831258", Offset = "0x831258")]
			remove
			{
			}
		}

		[Token(Token = "0x14000017")]
		public event OnBeforeRedirectionDelegate OnBeforeRedirection
		{
			[Token(Token = "0x6002494")]
			[Address(RVA = "0xBC0850", Offset = "0xBC0850", VA = "0xBC0850")]
			add
			{
			}
			[Token(Token = "0x6002495")]
			[Address(RVA = "0xBC08D0", Offset = "0xBC08D0", VA = "0xBC08D0")]
			remove
			{
			}
		}

		[Token(Token = "0x60024A5")]
		[Address(RVA = "0xBC0A98", Offset = "0xBC0A98", VA = "0xBC0A98")]
		public HTTPRequest(Uri uri)
		{
		}

		[Token(Token = "0x60024A6")]
		[Address(RVA = "0xBC0EC4", Offset = "0xBC0EC4", VA = "0xBC0EC4")]
		public HTTPRequest(Uri uri, OnRequestFinishedDelegate callback)
		{
		}

		[Token(Token = "0x60024A7")]
		[Address(RVA = "0xBC0FE4", Offset = "0xBC0FE4", VA = "0xBC0FE4")]
		public HTTPRequest(Uri uri, bool isKeepAlive, OnRequestFinishedDelegate callback)
		{
		}

		[Token(Token = "0x60024A8")]
		[Address(RVA = "0xBC10BC", Offset = "0xBC10BC", VA = "0xBC10BC")]
		public HTTPRequest(Uri uri, bool isKeepAlive, bool disableCache, OnRequestFinishedDelegate callback)
		{
		}

		[Token(Token = "0x60024A9")]
		[Address(RVA = "0xBC10D4", Offset = "0xBC10D4", VA = "0xBC10D4")]
		public HTTPRequest(Uri uri, HTTPMethods methodType)
		{
		}

		[Token(Token = "0x60024AA")]
		[Address(RVA = "0xBC1208", Offset = "0xBC1208", VA = "0xBC1208")]
		public HTTPRequest(Uri uri, HTTPMethods methodType, OnRequestFinishedDelegate callback)
		{
		}

		[Token(Token = "0x60024AB")]
		[Address(RVA = "0xBC1348", Offset = "0xBC1348", VA = "0xBC1348")]
		public HTTPRequest(Uri uri, HTTPMethods methodType, bool isKeepAlive, OnRequestFinishedDelegate callback)
		{
		}

		[Token(Token = "0x60024AC")]
		[Address(RVA = "0xBC0BB4", Offset = "0xBC0BB4", VA = "0xBC0BB4")]
		public HTTPRequest(Uri uri, HTTPMethods methodType, bool isKeepAlive, bool disableCache, OnRequestFinishedDelegate callback)
		{
		}

		[Token(Token = "0x60024AD")]
		[Address(RVA = "0xBC1440", Offset = "0xBC1440", VA = "0xBC1440")]
		public void AddField(string fieldName, string value)
		{
		}

		[Token(Token = "0x60024AE")]
		[Address(RVA = "0xBC1484", Offset = "0xBC1484", VA = "0xBC1484")]
		public void AddField(string fieldName, string value, Encoding e)
		{
		}

		[Token(Token = "0x60024AF")]
		[Address(RVA = "0xBC1524", Offset = "0xBC1524", VA = "0xBC1524")]
		public void AddBinaryData(string fieldName, byte[] content)
		{
		}

		[Token(Token = "0x60024B0")]
		[Address(RVA = "0xBC15D8", Offset = "0xBC15D8", VA = "0xBC15D8")]
		public void AddBinaryData(string fieldName, byte[] content, string fileName)
		{
		}

		[Token(Token = "0x60024B1")]
		[Address(RVA = "0xBC1530", Offset = "0xBC1530", VA = "0xBC1530")]
		public void AddBinaryData(string fieldName, byte[] content, string fileName, string mimeType)
		{
		}

		[Token(Token = "0x60024B2")]
		[Address(RVA = "0xBC15E0", Offset = "0xBC15E0", VA = "0xBC15E0")]
		public void SetFields(WWWForm wwwForm)
		{
		}

		[Token(Token = "0x60024B3")]
		[Address(RVA = "0xBC1658", Offset = "0xBC1658", VA = "0xBC1658")]
		public void SetForm(HTTPFormBase form)
		{
		}

		[Token(Token = "0x60024B4")]
		[Address(RVA = "0xBC1660", Offset = "0xBC1660", VA = "0xBC1660")]
		public void ClearForm()
		{
		}

		[Token(Token = "0x60024B5")]
		[Address(RVA = "0xBC1668", Offset = "0xBC1668", VA = "0xBC1668")]
		private HTTPFormBase SelectFormImplementation()
		{
			return null;
		}

		[Token(Token = "0x60024B6")]
		[Address(RVA = "0xBC1770", Offset = "0xBC1770", VA = "0xBC1770")]
		public void AddHeader(string name, string value)
		{
		}

		[Token(Token = "0x60024B7")]
		[Address(RVA = "0xBC1890", Offset = "0xBC1890", VA = "0xBC1890")]
		public void SetHeader(string name, string value)
		{
		}

		[Token(Token = "0x60024B8")]
		[Address(RVA = "0xBC19C8", Offset = "0xBC19C8", VA = "0xBC19C8")]
		public bool RemoveHeader(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60024B9")]
		[Address(RVA = "0xBC1A3C", Offset = "0xBC1A3C", VA = "0xBC1A3C")]
		public bool HasHeader(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60024BA")]
		[Address(RVA = "0xBC1AB0", Offset = "0xBC1AB0", VA = "0xBC1AB0")]
		public string GetFirstHeaderValue(string name)
		{
			return null;
		}

		[Token(Token = "0x60024BB")]
		[Address(RVA = "0xBC1B58", Offset = "0xBC1B58", VA = "0xBC1B58")]
		public List<string> GetHeaderValues(string name)
		{
			return null;
		}

		[Token(Token = "0x60024BC")]
		[Address(RVA = "0xBC1BF0", Offset = "0xBC1BF0", VA = "0xBC1BF0")]
		public void RemoveHeaders()
		{
		}

		[Token(Token = "0x60024BD")]
		[Address(RVA = "0xBC1C50", Offset = "0xBC1C50", VA = "0xBC1C50")]
		public void SetRangeHeader(int firstBytePos)
		{
		}

		[Token(Token = "0x60024BE")]
		[Address(RVA = "0xBC1CE8", Offset = "0xBC1CE8", VA = "0xBC1CE8")]
		public void SetRangeHeader(int firstBytePos, int lastBytePos)
		{
		}

		[Token(Token = "0x60024BF")]
		[Address(RVA = "0xBC1DA4", Offset = "0xBC1DA4", VA = "0xBC1DA4")]
		public void EnumerateHeaders(OnHeaderEnumerationDelegate callback)
		{
		}

		[Token(Token = "0x60024C0")]
		[Address(RVA = "0xBC2BC0", Offset = "0xBC2BC0", VA = "0xBC2BC0")]
		private void SendHeaders(BinaryWriter stream)
		{
		}

		[Token(Token = "0x60024C1")]
		[Address(RVA = "0xBC2C7C", Offset = "0xBC2C7C", VA = "0xBC2C7C")]
		public string DumpHeaders()
		{
			return null;
		}

		[Token(Token = "0x60024C2")]
		[Address(RVA = "0xBC2760", Offset = "0xBC2760", VA = "0xBC2760")]
		internal byte[] GetEntityBody()
		{
			return null;
		}

		[Token(Token = "0x60024C3")]
		[Address(RVA = "0xBC2E94", Offset = "0xBC2E94", VA = "0xBC2E94")]
		internal void SendOutTo(Stream stream)
		{
		}

		[Token(Token = "0x60024C4")]
		[Address(RVA = "0xBC36E4", Offset = "0xBC36E4", VA = "0xBC36E4")]
		internal void UpgradeCallback()
		{
		}

		[Token(Token = "0x60024C5")]
		[Address(RVA = "0xBC3C70", Offset = "0xBC3C70", VA = "0xBC3C70")]
		internal void CallCallback()
		{
		}

		[Token(Token = "0x60024C6")]
		[Address(RVA = "0xBC3E08", Offset = "0xBC3E08", VA = "0xBC3E08")]
		internal bool CallOnBeforeRedirection(Uri redirectUri)
		{
			return default(bool);
		}

		[Token(Token = "0x60024C7")]
		[Address(RVA = "0xBC4248", Offset = "0xBC4248", VA = "0xBC4248")]
		internal void FinishStreaming()
		{
		}

		[Token(Token = "0x60024C8")]
		[Address(RVA = "0xBC42C4", Offset = "0xBC42C4", VA = "0xBC42C4")]
		internal void Prepare()
		{
		}

		[Token(Token = "0x60024C9")]
		[Address(RVA = "0xBC42D8", Offset = "0xBC42D8", VA = "0xBC42D8")]
		internal bool CallCustomCertificationValidator(X509Certificate cert, X509Chain chain)
		{
			return default(bool);
		}

		[Token(Token = "0x60024CA")]
		[Address(RVA = "0xBC435C", Offset = "0xBC435C", VA = "0xBC435C")]
		public HTTPRequest Send()
		{
			return null;
		}

		[Token(Token = "0x60024CB")]
		[Address(RVA = "0xBC43C4", Offset = "0xBC43C4", VA = "0xBC43C4")]
		public void Abort()
		{
		}

		[Token(Token = "0x60024CC")]
		[Address(RVA = "0xBC4768", Offset = "0xBC4768", VA = "0xBC4768")]
		public void Clear()
		{
		}

		[Token(Token = "0x60024CE")]
		[Address(RVA = "0xBC4778", Offset = "0xBC4778", VA = "0xBC4778", Slot = "4")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60024CF")]
		[Address(RVA = "0xBC4788", Offset = "0xBC4788", VA = "0xBC4788", Slot = "6")]
		public void Reset()
		{
		}

		[Token(Token = "0x60024D1")]
		[Address(RVA = "0xBC47EC", Offset = "0xBC47EC", VA = "0xBC47EC", Slot = "8")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x2000418")]
	public interface IProtocol
	{
		[Token(Token = "0x170004C3")]
		bool IsClosed
		{
			[Token(Token = "0x60024D3")]
			get;
		}

		[Token(Token = "0x60024D4")]
		void HandleEvents();
	}
	[Token(Token = "0x2000419")]
	public class HTTPResponse : IDisposable
	{
		[Token(Token = "0x40014AF")]
		internal const byte CR = 13;

		[Token(Token = "0x40014B0")]
		internal const byte LF = 10;

		[Token(Token = "0x40014B1")]
		public const int MinBufferSize = 4096;

		[Token(Token = "0x40014B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823944", Offset = "0x823944")]
		private int <VersionMajor>k__BackingField;

		[Token(Token = "0x40014B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823954", Offset = "0x823954")]
		private int <VersionMinor>k__BackingField;

		[Token(Token = "0x40014B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823964", Offset = "0x823964")]
		private int <StatusCode>k__BackingField;

		[Token(Token = "0x40014B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823974", Offset = "0x823974")]
		private string <Message>k__BackingField;

		[Token(Token = "0x40014B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823984", Offset = "0x823984")]
		private bool <IsStreamed>k__BackingField;

		[Token(Token = "0x40014B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823994", Offset = "0x823994")]
		private bool <IsStreamingFinished>k__BackingField;

		[Token(Token = "0x40014B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8239A4", Offset = "0x8239A4")]
		private bool <IsFromCache>k__BackingField;

		[Token(Token = "0x40014B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8239B4", Offset = "0x8239B4")]
		private Dictionary<string, List<string>> <Headers>k__BackingField;

		[Token(Token = "0x40014BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8239C4", Offset = "0x8239C4")]
		private byte[] <Data>k__BackingField;

		[Token(Token = "0x40014BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8239D4", Offset = "0x8239D4")]
		private bool <IsUpgraded>k__BackingField;

		[Token(Token = "0x40014BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8239E4", Offset = "0x8239E4")]
		private List<BestHTTP.Cookies.Cookie> <Cookies>k__BackingField;

		[Token(Token = "0x40014BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected string dataAsText;

		[Token(Token = "0x40014BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Texture2D texture;

		[Token(Token = "0x40014BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8239F4", Offset = "0x8239F4")]
		private bool <IsClosedManually>k__BackingField;

		[Token(Token = "0x40014C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal HTTPRequest baseRequest;

		[Token(Token = "0x40014C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Stream Stream;

		[Token(Token = "0x40014C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected List<byte[]> streamedFragments;

		[Token(Token = "0x40014C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected object SyncRoot;

		[Token(Token = "0x40014C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected byte[] fragmentBuffer;

		[Token(Token = "0x40014C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected int fragmentBufferDataLength;

		[Token(Token = "0x40014C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected Stream cacheStream;

		[Token(Token = "0x40014C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected int allFragmentSize;

		[Token(Token = "0x170004C4")]
		public int VersionMajor
		{
			[Token(Token = "0x60024D5")]
			[Address(RVA = "0xBC4E3C", Offset = "0xBC4E3C", VA = "0xBC4E3C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831428", Offset = "0x831428")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60024D6")]
			[Address(RVA = "0xBC4E44", Offset = "0xBC4E44", VA = "0xBC4E44")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831438", Offset = "0x831438")]
			protected set
			{
			}
		}

		[Token(Token = "0x170004C5")]
		public int VersionMinor
		{
			[Token(Token = "0x60024D7")]
			[Address(RVA = "0xBC4E4C", Offset = "0xBC4E4C", VA = "0xBC4E4C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831448", Offset = "0x831448")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60024D8")]
			[Address(RVA = "0xBC4E54", Offset = "0xBC4E54", VA = "0xBC4E54")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831458", Offset = "0x831458")]
			protected set
			{
			}
		}

		[Token(Token = "0x170004C6")]
		public int StatusCode
		{
			[Token(Token = "0x60024D9")]
			[Address(RVA = "0xBC4E5C", Offset = "0xBC4E5C", VA = "0xBC4E5C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831468", Offset = "0x831468")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60024DA")]
			[Address(RVA = "0xBC4E64", Offset = "0xBC4E64", VA = "0xBC4E64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831478", Offset = "0x831478")]
			protected set
			{
			}
		}

		[Token(Token = "0x170004C7")]
		public bool IsSuccess
		{
			[Token(Token = "0x60024DB")]
			[Address(RVA = "0xBC4E6C", Offset = "0xBC4E6C", VA = "0xBC4E6C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170004C8")]
		public string Message
		{
			[Token(Token = "0x60024DC")]
			[Address(RVA = "0xBC4E8C", Offset = "0xBC4E8C", VA = "0xBC4E8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831488", Offset = "0x831488")]
			get
			{
				return null;
			}
			[Token(Token = "0x60024DD")]
			[Address(RVA = "0xBC4E94", Offset = "0xBC4E94", VA = "0xBC4E94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831498", Offset = "0x831498")]
			protected set
			{
			}
		}

		[Token(Token = "0x170004C9")]
		public bool IsStreamed
		{
			[Token(Token = "0x60024DE")]
			[Address(RVA = "0xBC4E9C", Offset = "0xBC4E9C", VA = "0xBC4E9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8314A8", Offset = "0x8314A8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60024DF")]
			[Address(RVA = "0xBC4EA4", Offset = "0xBC4EA4", VA = "0xBC4EA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8314B8", Offset = "0x8314B8")]
			protected set
			{
			}
		}

		[Token(Token = "0x170004CA")]
		public bool IsStreamingFinished
		{
			[Token(Token = "0x60024E0")]
			[Address(RVA = "0xBC4EB0", Offset = "0xBC4EB0", VA = "0xBC4EB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8314C8", Offset = "0x8314C8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60024E1")]
			[Address(RVA = "0xBC4EB8", Offset = "0xBC4EB8", VA = "0xBC4EB8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8314D8", Offset = "0x8314D8")]
			internal set
			{
			}
		}

		[Token(Token = "0x170004CB")]
		public bool IsFromCache
		{
			[Token(Token = "0x60024E2")]
			[Address(RVA = "0xBC4EC4", Offset = "0xBC4EC4", VA = "0xBC4EC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8314E8", Offset = "0x8314E8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60024E3")]
			[Address(RVA = "0xBC4ECC", Offset = "0xBC4ECC", VA = "0xBC4ECC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8314F8", Offset = "0x8314F8")]
			internal set
			{
			}
		}

		[Token(Token = "0x170004CC")]
		public Dictionary<string, List<string>> Headers
		{
			[Token(Token = "0x60024E4")]
			[Address(RVA = "0xBC4ED8", Offset = "0xBC4ED8", VA = "0xBC4ED8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831508", Offset = "0x831508")]
			get
			{
				return null;
			}
			[Token(Token = "0x60024E5")]
			[Address(RVA = "0xBC4EE0", Offset = "0xBC4EE0", VA = "0xBC4EE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831518", Offset = "0x831518")]
			protected set
			{
			}
		}

		[Token(Token = "0x170004CD")]
		public byte[] Data
		{
			[Token(Token = "0x60024E6")]
			[Address(RVA = "0xBC4EE8", Offset = "0xBC4EE8", VA = "0xBC4EE8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831528", Offset = "0x831528")]
			get
			{
				return null;
			}
			[Token(Token = "0x60024E7")]
			[Address(RVA = "0xBC4EF0", Offset = "0xBC4EF0", VA = "0xBC4EF0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831538", Offset = "0x831538")]
			internal set
			{
			}
		}

		[Token(Token = "0x170004CE")]
		public bool IsUpgraded
		{
			[Token(Token = "0x60024E8")]
			[Address(RVA = "0xBC4EF8", Offset = "0xBC4EF8", VA = "0xBC4EF8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831548", Offset = "0x831548")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60024E9")]
			[Address(RVA = "0xBC4F00", Offset = "0xBC4F00", VA = "0xBC4F00")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831558", Offset = "0x831558")]
			protected set
			{
			}
		}

		[Token(Token = "0x170004CF")]
		public List<BestHTTP.Cookies.Cookie> Cookies
		{
			[Token(Token = "0x60024EA")]
			[Address(RVA = "0xBC4F0C", Offset = "0xBC4F0C", VA = "0xBC4F0C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831568", Offset = "0x831568")]
			get
			{
				return null;
			}
			[Token(Token = "0x60024EB")]
			[Address(RVA = "0xBC4F14", Offset = "0xBC4F14", VA = "0xBC4F14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831578", Offset = "0x831578")]
			internal set
			{
			}
		}

		[Token(Token = "0x170004D0")]
		public string DataAsText
		{
			[Token(Token = "0x60024EC")]
			[Address(RVA = "0xBC4F1C", Offset = "0xBC4F1C", VA = "0xBC4F1C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004D1")]
		public Texture2D DataAsTexture2D
		{
			[Token(Token = "0x60024ED")]
			[Address(RVA = "0xBC4FC8", Offset = "0xBC4FC8", VA = "0xBC4FC8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004D2")]
		public bool IsClosedManually
		{
			[Token(Token = "0x60024EE")]
			[Address(RVA = "0xBC5094", Offset = "0xBC5094", VA = "0xBC5094")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831588", Offset = "0x831588")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60024EF")]
			[Address(RVA = "0xBC509C", Offset = "0xBC509C", VA = "0xBC509C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831598", Offset = "0x831598")]
			protected set
			{
			}
		}

		[Token(Token = "0x60024F0")]
		[Address(RVA = "0xBBFA3C", Offset = "0xBBFA3C", VA = "0xBBFA3C")]
		internal HTTPResponse(HTTPRequest request, Stream stream, bool isStreamed, bool isFromCache)
		{
		}

		[Token(Token = "0x60024F1")]
		[Address(RVA = "0xBC50A8", Offset = "0xBC50A8", VA = "0xBC50A8", Slot = "5")]
		internal virtual bool Receive(int forceReadRawContentLength = -1, bool readPayloadData = true)
		{
			return default(bool);
		}

		[Token(Token = "0x60024F2")]
		[Address(RVA = "0xBC58EC", Offset = "0xBC58EC", VA = "0xBC58EC")]
		protected bool ReadPayload(int forceReadRawContentLength)
		{
			return default(bool);
		}

		[Token(Token = "0x60024F3")]
		[Address(RVA = "0xBC5750", Offset = "0xBC5750", VA = "0xBC5750")]
		protected void ReadHeaders(Stream stream)
		{
		}

		[Token(Token = "0x60024F4")]
		[Address(RVA = "0xBC6AA0", Offset = "0xBC6AA0", VA = "0xBC6AA0")]
		protected void AddHeader(string name, string value)
		{
		}

		[Token(Token = "0x60024F5")]
		[Address(RVA = "0xBC6214", Offset = "0xBC6214", VA = "0xBC6214")]
		public List<string> GetHeaderValues(string name)
		{
			return null;
		}

		[Token(Token = "0x60024F6")]
		[Address(RVA = "0xBC6BD4", Offset = "0xBC6BD4", VA = "0xBC6BD4")]
		public string GetFirstHeaderValue(string name)
		{
			return null;
		}

		[Token(Token = "0x60024F7")]
		[Address(RVA = "0xBC5810", Offset = "0xBC5810", VA = "0xBC5810")]
		public bool HasHeaderWithValue(string headerName, string value)
		{
			return default(bool);
		}

		[Token(Token = "0x60024F8")]
		[Address(RVA = "0xBC58D0", Offset = "0xBC58D0", VA = "0xBC58D0")]
		public bool HasHeader(string headerName)
		{
			return default(bool);
		}

		[Token(Token = "0x60024F9")]
		[Address(RVA = "0xBC62C4", Offset = "0xBC62C4", VA = "0xBC62C4")]
		public HTTPRange GetRange()
		{
			return null;
		}

		[Token(Token = "0x60024FA")]
		[Address(RVA = "0xBC53AC", Offset = "0xBC53AC", VA = "0xBC53AC")]
		public static string ReadTo(Stream stream, byte blocker)
		{
			return null;
		}

		[Token(Token = "0x60024FB")]
		[Address(RVA = "0xBC68BC", Offset = "0xBC68BC", VA = "0xBC68BC")]
		public static string ReadTo(Stream stream, byte blocker1, byte blocker2)
		{
			return null;
		}

		[Token(Token = "0x60024FC")]
		[Address(RVA = "0xBC5580", Offset = "0xBC5580", VA = "0xBC5580")]
		public static string NoTrimReadTo(Stream stream, byte blocker1, byte blocker2)
		{
			return null;
		}

		[Token(Token = "0x60024FD")]
		[Address(RVA = "0xBC6C88", Offset = "0xBC6C88", VA = "0xBC6C88")]
		protected int ReadChunkLength(Stream stream)
		{
			return default(int);
		}

		[Token(Token = "0x60024FE")]
		[Address(RVA = "0xBC5E38", Offset = "0xBC5E38", VA = "0xBC5E38")]
		protected void ReadChunked(Stream stream)
		{
		}

		[Token(Token = "0x60024FF")]
		[Address(RVA = "0xBC5A74", Offset = "0xBC5A74", VA = "0xBC5A74")]
		internal void ReadRaw(Stream stream, int contentLength)
		{
		}

		[Token(Token = "0x6002500")]
		[Address(RVA = "0xBC64AC", Offset = "0xBC64AC", VA = "0xBC64AC")]
		protected void ReadUnknownSize(Stream stream)
		{
		}

		[Token(Token = "0x6002501")]
		[Address(RVA = "0xBC70EC", Offset = "0xBC70EC", VA = "0xBC70EC")]
		protected byte[] DecodeStream(Stream streamToDecode)
		{
			return null;
		}

		[Token(Token = "0x6002502")]
		[Address(RVA = "0xBC6DB8", Offset = "0xBC6DB8", VA = "0xBC6DB8")]
		protected void BeginReceiveStreamFragments()
		{
		}

		[Token(Token = "0x6002503")]
		[Address(RVA = "0xBC6ED0", Offset = "0xBC6ED0", VA = "0xBC6ED0")]
		protected void FeedStreamFragment(byte[] buffer, int pos, int length)
		{
		}

		[Token(Token = "0x6002504")]
		[Address(RVA = "0xBC7004", Offset = "0xBC7004", VA = "0xBC7004")]
		protected void FlushRemainingFragmentBuffer()
		{
		}

		[Token(Token = "0x6002505")]
		[Address(RVA = "0xBC73BC", Offset = "0xBC73BC", VA = "0xBC73BC")]
		protected void AddStreamedFragment(byte[] buffer)
		{
		}

		[Token(Token = "0x6002506")]
		[Address(RVA = "0xBC6ECC", Offset = "0xBC6ECC", VA = "0xBC6ECC")]
		protected void WaitWhileHasFragments()
		{
		}

		[Token(Token = "0x6002507")]
		[Address(RVA = "0xBC750C", Offset = "0xBC750C", VA = "0xBC750C")]
		public List<byte[]> GetStreamedFragments()
		{
			return null;
		}

		[Token(Token = "0x6002508")]
		[Address(RVA = "0xBC7624", Offset = "0xBC7624", VA = "0xBC7624")]
		internal bool HasStreamedFragments()
		{
			return default(bool);
		}

		[Token(Token = "0x6002509")]
		[Address(RVA = "0xBC428C", Offset = "0xBC428C", VA = "0xBC428C")]
		internal void FinishStreaming()
		{
		}

		[Token(Token = "0x600250A")]
		[Address(RVA = "0xBC4738", Offset = "0xBC4738", VA = "0xBC4738", Slot = "4")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x200041A")]
	[ExecuteInEditMode]
	public sealed class HTTPUpdateDelegator : MonoBehaviour
	{
		[Token(Token = "0x40014C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823A04", Offset = "0x823A04")]
		private static HTTPUpdateDelegator <Instance>k__BackingField;

		[Token(Token = "0x40014C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823A14", Offset = "0x823A14")]
		private static bool <IsCreated>k__BackingField;

		[Token(Token = "0x40014CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823A24", Offset = "0x823A24")]
		private static bool <IsThreaded>k__BackingField;

		[Token(Token = "0x40014CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823A34", Offset = "0x823A34")]
		private static bool <IsThreadRunning>k__BackingField;

		[Token(Token = "0x40014CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823A44", Offset = "0x823A44")]
		private static int <ThreadFrequencyInMS>k__BackingField;

		[Token(Token = "0x40014CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static bool IsSetupCalled;

		[Token(Token = "0x170004D3")]
		public static HTTPUpdateDelegator Instance
		{
			[Token(Token = "0x600250B")]
			[Address(RVA = "0xBC76EC", Offset = "0xBC76EC", VA = "0xBC76EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8315A8", Offset = "0x8315A8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600250C")]
			[Address(RVA = "0xBC7754", Offset = "0xBC7754", VA = "0xBC7754")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8315B8", Offset = "0x8315B8")]
			private set
			{
			}
		}

		[Token(Token = "0x170004D4")]
		public static bool IsCreated
		{
			[Token(Token = "0x600250D")]
			[Address(RVA = "0xBC77C0", Offset = "0xBC77C0", VA = "0xBC77C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8315C8", Offset = "0x8315C8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600250E")]
			[Address(RVA = "0xBC7828", Offset = "0xBC7828", VA = "0xBC7828")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8315D8", Offset = "0x8315D8")]
			private set
			{
			}
		}

		[Token(Token = "0x170004D5")]
		public static bool IsThreaded
		{
			[Token(Token = "0x600250F")]
			[Address(RVA = "0xBC7898", Offset = "0xBC7898", VA = "0xBC7898")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8315E8", Offset = "0x8315E8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002510")]
			[Address(RVA = "0xBC7900", Offset = "0xBC7900", VA = "0xBC7900")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8315F8", Offset = "0x8315F8")]
			set
			{
			}
		}

		[Token(Token = "0x170004D6")]
		public static bool IsThreadRunning
		{
			[Token(Token = "0x6002511")]
			[Address(RVA = "0xBC7970", Offset = "0xBC7970", VA = "0xBC7970")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831608", Offset = "0x831608")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002512")]
			[Address(RVA = "0xBC79D8", Offset = "0xBC79D8", VA = "0xBC79D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831618", Offset = "0x831618")]
			private set
			{
			}
		}

		[Token(Token = "0x170004D7")]
		public static int ThreadFrequencyInMS
		{
			[Token(Token = "0x6002513")]
			[Address(RVA = "0xBC7A48", Offset = "0xBC7A48", VA = "0xBC7A48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831628", Offset = "0x831628")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002514")]
			[Address(RVA = "0xBC7AB0", Offset = "0xBC7AB0", VA = "0xBC7AB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831638", Offset = "0x831638")]
			set
			{
			}
		}

		[Token(Token = "0x6002515")]
		[Address(RVA = "0xBC7B1C", Offset = "0xBC7B1C", VA = "0xBC7B1C")]
		static HTTPUpdateDelegator()
		{
		}

		[Token(Token = "0x6002516")]
		[Address(RVA = "0xBC7B88", Offset = "0xBC7B88", VA = "0xBC7B88")]
		public static void CheckInstance()
		{
		}

		[Token(Token = "0x6002517")]
		[Address(RVA = "0xBC8040", Offset = "0xBC8040", VA = "0xBC8040")]
		private void Setup()
		{
		}

		[Token(Token = "0x6002518")]
		[Address(RVA = "0xBC81D4", Offset = "0xBC81D4", VA = "0xBC81D4")]
		private void ThreadFunc(object obj)
		{
		}

		[Token(Token = "0x6002519")]
		[Address(RVA = "0xBC852C", Offset = "0xBC852C", VA = "0xBC852C")]
		private void Update()
		{
		}

		[Token(Token = "0x600251A")]
		[Address(RVA = "0xBC8660", Offset = "0xBC8660", VA = "0xBC8660")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600251B")]
		[Address(RVA = "0xBC8664", Offset = "0xBC8664", VA = "0xBC8664")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x600251C")]
		[Address(RVA = "0xBC87E0", Offset = "0xBC87E0", VA = "0xBC87E0")]
		public HTTPUpdateDelegator()
		{
		}
	}
}
namespace BestHTTP.WebSocket
{
	[Token(Token = "0x200041B")]
	public delegate void OnWebSocketOpenDelegate(WebSocket webSocket);
	[Token(Token = "0x200041C")]
	public delegate void OnWebSocketMessageDelegate(WebSocket webSocket, string message);
	[Token(Token = "0x200041D")]
	public delegate void OnWebSocketBinaryDelegate(WebSocket webSocket, byte[] data);
	[Token(Token = "0x200041E")]
	public delegate void OnWebSocketClosedDelegate(WebSocket webSocket, ushort code, string message);
	[Token(Token = "0x200041F")]
	public delegate void OnWebSocketErrorDelegate(WebSocket webSocket, Exception ex);
	[Token(Token = "0x2000420")]
	public delegate void OnWebSocketErrorDescriptionDelegate(WebSocket webSocket, string reason);
	[Token(Token = "0x2000421")]
	public delegate void OnWebSocketIncompleteFrameDelegate(WebSocket webSocket, WebSocketFrameReader frame);
	[Token(Token = "0x2000422")]
	public sealed class WebSocket
	{
		[Token(Token = "0x40014CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823A54", Offset = "0x823A54")]
		private bool <StartPingThread>k__BackingField;

		[Token(Token = "0x40014CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823A64", Offset = "0x823A64")]
		private int <PingFrequency>k__BackingField;

		[Token(Token = "0x40014D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823A74", Offset = "0x823A74")]
		private HTTPRequest <InternalRequest>k__BackingField;

		[Token(Token = "0x40014D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823A84", Offset = "0x823A84")]
		private IExtension[] <Extensions>k__BackingField;

		[Token(Token = "0x40014D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public OnWebSocketOpenDelegate OnOpen;

		[Token(Token = "0x40014D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public OnWebSocketMessageDelegate OnMessage;

		[Token(Token = "0x40014D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public OnWebSocketBinaryDelegate OnBinary;

		[Token(Token = "0x40014D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public OnWebSocketClosedDelegate OnClosed;

		[Token(Token = "0x40014D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public OnWebSocketErrorDelegate OnError;

		[Token(Token = "0x40014D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public OnWebSocketErrorDescriptionDelegate OnErrorDesc;

		[Token(Token = "0x40014D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public OnWebSocketIncompleteFrameDelegate OnIncompleteFrame;

		[Token(Token = "0x40014D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool requestSent;

		[Token(Token = "0x40014DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private WebSocketResponse webSocket;

		[Token(Token = "0x170004D8")]
		public bool IsOpen
		{
			[Token(Token = "0x6002539")]
			[Address(RVA = "0xA494B0", Offset = "0xA494B0", VA = "0xA494B0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170004D9")]
		public bool StartPingThread
		{
			[Token(Token = "0x600253A")]
			[Address(RVA = "0xA494D0", Offset = "0xA494D0", VA = "0xA494D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831648", Offset = "0x831648")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600253B")]
			[Address(RVA = "0xA494D8", Offset = "0xA494D8", VA = "0xA494D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831658", Offset = "0x831658")]
			set
			{
			}
		}

		[Token(Token = "0x170004DA")]
		public int PingFrequency
		{
			[Token(Token = "0x600253C")]
			[Address(RVA = "0xA494E4", Offset = "0xA494E4", VA = "0xA494E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831668", Offset = "0x831668")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600253D")]
			[Address(RVA = "0xA494EC", Offset = "0xA494EC", VA = "0xA494EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831678", Offset = "0x831678")]
			set
			{
			}
		}

		[Token(Token = "0x170004DB")]
		public HTTPRequest InternalRequest
		{
			[Token(Token = "0x600253E")]
			[Address(RVA = "0xA494F4", Offset = "0xA494F4", VA = "0xA494F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831688", Offset = "0x831688")]
			get
			{
				return null;
			}
			[Token(Token = "0x600253F")]
			[Address(RVA = "0xA494FC", Offset = "0xA494FC", VA = "0xA494FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831698", Offset = "0x831698")]
			private set
			{
			}
		}

		[Token(Token = "0x170004DC")]
		public IExtension[] Extensions
		{
			[Token(Token = "0x6002540")]
			[Address(RVA = "0xA49504", Offset = "0xA49504", VA = "0xA49504")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8316A8", Offset = "0x8316A8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002541")]
			[Address(RVA = "0xA4950C", Offset = "0xA4950C", VA = "0xA4950C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8316B8", Offset = "0x8316B8")]
			private set
			{
			}
		}

		[Token(Token = "0x6002542")]
		[Address(RVA = "0xA49514", Offset = "0xA49514", VA = "0xA49514")]
		public WebSocket(Uri uri)
		{
		}

		[Token(Token = "0x6002543")]
		[Address(RVA = "0xA496B4", Offset = "0xA496B4", VA = "0xA496B4")]
		public WebSocket(Uri uri, string origin, string protocol, params IExtension[] extensions)
		{
		}

		[Token(Token = "0x6002544")]
		[Address(RVA = "0xA49F9C", Offset = "0xA49F9C", VA = "0xA49F9C")]
		private void OnInternalRequestCallback(HTTPRequest req, HTTPResponse resp)
		{
		}

		[Token(Token = "0x6002545")]
		[Address(RVA = "0xA4A318", Offset = "0xA4A318", VA = "0xA4A318")]
		private void OnInternalRequestUpgraded(HTTPRequest req, HTTPResponse resp)
		{
		}

		[Token(Token = "0x6002546")]
		[Address(RVA = "0xA4AB08", Offset = "0xA4AB08", VA = "0xA4AB08")]
		public void Open()
		{
		}

		[Token(Token = "0x6002547")]
		[Address(RVA = "0xA4AD70", Offset = "0xA4AD70", VA = "0xA4AD70")]
		public void Send(string message)
		{
		}

		[Token(Token = "0x6002548")]
		[Address(RVA = "0xA4AE74", Offset = "0xA4AE74", VA = "0xA4AE74")]
		public void Send(byte[] buffer)
		{
		}

		[Token(Token = "0x6002549")]
		[Address(RVA = "0xA4B06C", Offset = "0xA4B06C", VA = "0xA4B06C")]
		public void Send(byte[] buffer, ulong offset, ulong count)
		{
		}

		[Token(Token = "0x600254A")]
		[Address(RVA = "0xA4B2B8", Offset = "0xA4B2B8", VA = "0xA4B2B8")]
		public void Send(WebSocketFrame frame)
		{
		}

		[Token(Token = "0x600254B")]
		[Address(RVA = "0xA4B44C", Offset = "0xA4B44C", VA = "0xA4B44C")]
		public void Close()
		{
		}

		[Token(Token = "0x600254C")]
		[Address(RVA = "0xA4B4B8", Offset = "0xA4B4B8", VA = "0xA4B4B8")]
		public void Close(ushort code, string message)
		{
		}

		[Token(Token = "0x600254D")]
		[Address(RVA = "0xA4B580", Offset = "0xA4B580", VA = "0xA4B580")]
		public static byte[] EncodeCloseData(ushort code, string message)
		{
			return null;
		}

		[Token(Token = "0x600254E")]
		[Address(RVA = "0xA49E04", Offset = "0xA49E04", VA = "0xA49E04")]
		private string GetSecKey(object[] from)
		{
			return null;
		}

		[Token(Token = "0x600254F")]
		[Address(RVA = "0xA4B7CC", Offset = "0xA4B7CC", VA = "0xA4B7CC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8316C8", Offset = "0x8316C8")]
		private void <OnInternalRequestUpgraded>b__30_0(WebSocketResponse ws, string msg)
		{
		}

		[Token(Token = "0x6002550")]
		[Address(RVA = "0xA4B7E0", Offset = "0xA4B7E0", VA = "0xA4B7E0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8316D8", Offset = "0x8316D8")]
		private void <OnInternalRequestUpgraded>b__30_1(WebSocketResponse ws, byte[] bin)
		{
		}

		[Token(Token = "0x6002551")]
		[Address(RVA = "0xA4B7F4", Offset = "0xA4B7F4", VA = "0xA4B7F4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8316E8", Offset = "0x8316E8")]
		private void <OnInternalRequestUpgraded>b__30_2(WebSocketResponse ws, ushort code, string msg)
		{
		}

		[Token(Token = "0x6002552")]
		[Address(RVA = "0xA4B808", Offset = "0xA4B808", VA = "0xA4B808")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8316F8", Offset = "0x8316F8")]
		private void <OnInternalRequestUpgraded>b__30_3(WebSocketResponse ws, WebSocketFrameReader frame)
		{
		}
	}
	[Token(Token = "0x2000423")]
	public sealed class WebSocketResponse : HTTPResponse, IHeartbeat, IProtocol
	{
		[Token(Token = "0x40014DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823A94", Offset = "0x823A94")]
		private WebSocket <WebSocket>k__BackingField;

		[Token(Token = "0x40014DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Action<WebSocketResponse, string> OnText;

		[Token(Token = "0x40014DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Action<WebSocketResponse, byte[]> OnBinary;

		[Token(Token = "0x40014DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Action<WebSocketResponse, WebSocketFrameReader> OnIncompleteFrame;

		[Token(Token = "0x40014DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Action<WebSocketResponse, ushort, string> OnClosed;

		[Token(Token = "0x40014E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823AA4", Offset = "0x823AA4")]
		private TimeSpan <PingFrequnecy>k__BackingField;

		[Token(Token = "0x40014E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823AB4", Offset = "0x823AB4")]
		private ushort <MaxFragmentSize>k__BackingField;

		[Token(Token = "0x40014E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private List<WebSocketFrameReader> IncompleteFrames;

		[Token(Token = "0x40014E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private List<WebSocketFrameReader> CompletedFrames;

		[Token(Token = "0x40014E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private WebSocketFrameReader CloseFrame;

		[Token(Token = "0x40014E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private object FrameLock;

		[Token(Token = "0x40014E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private object SendLock;

		[Token(Token = "0x40014E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private bool closeSent;

		[Token(Token = "0x40014E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x109")]
		private bool closed;

		[Token(Token = "0x40014E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private DateTime lastPing;

		[Token(Token = "0x170004DD")]
		public WebSocket WebSocket
		{
			[Token(Token = "0x6002553")]
			[Address(RVA = "0xA4B81C", Offset = "0xA4B81C", VA = "0xA4B81C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831708", Offset = "0x831708")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002554")]
			[Address(RVA = "0xA4B824", Offset = "0xA4B824", VA = "0xA4B824")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831718", Offset = "0x831718")]
			internal set
			{
			}
		}

		[Token(Token = "0x170004DE")]
		public bool IsClosed
		{
			[Token(Token = "0x6002555")]
			[Address(RVA = "0xA4B82C", Offset = "0xA4B82C", VA = "0xA4B82C", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170004DF")]
		public TimeSpan PingFrequnecy
		{
			[Token(Token = "0x6002556")]
			[Address(RVA = "0xA4B834", Offset = "0xA4B834", VA = "0xA4B834")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831728", Offset = "0x831728")]
			get
			{
				return default(TimeSpan);
			}
			[Token(Token = "0x6002557")]
			[Address(RVA = "0xA4B83C", Offset = "0xA4B83C", VA = "0xA4B83C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831738", Offset = "0x831738")]
			private set
			{
			}
		}

		[Token(Token = "0x170004E0")]
		public ushort MaxFragmentSize
		{
			[Token(Token = "0x6002558")]
			[Address(RVA = "0xA4B844", Offset = "0xA4B844", VA = "0xA4B844")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831748", Offset = "0x831748")]
			get
			{
				return default(ushort);
			}
			[Token(Token = "0x6002559")]
			[Address(RVA = "0xA4B84C", Offset = "0xA4B84C", VA = "0xA4B84C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831758", Offset = "0x831758")]
			private set
			{
			}
		}

		[Token(Token = "0x600255A")]
		[Address(RVA = "0xA4B854", Offset = "0xA4B854", VA = "0xA4B854")]
		internal WebSocketResponse(HTTPRequest request, Stream stream, bool isStreamed, bool isFromCache)
		{
		}

		[Token(Token = "0x600255B")]
		[Address(RVA = "0xA4AA58", Offset = "0xA4AA58", VA = "0xA4AA58")]
		internal void StartReceive()
		{
		}

		[Token(Token = "0x600255C")]
		[Address(RVA = "0xA4AD88", Offset = "0xA4AD88", VA = "0xA4AD88")]
		public void Send(string message)
		{
		}

		[Token(Token = "0x600255D")]
		[Address(RVA = "0xA4AE8C", Offset = "0xA4AE8C", VA = "0xA4AE8C")]
		public void Send(byte[] data)
		{
		}

		[Token(Token = "0x600255E")]
		[Address(RVA = "0xA4B084", Offset = "0xA4B084", VA = "0xA4B084")]
		public void Send(byte[] data, ulong offset, ulong count)
		{
		}

		[Token(Token = "0x600255F")]
		[Address(RVA = "0xA4B2D0", Offset = "0xA4B2D0", VA = "0xA4B2D0")]
		public void Send(WebSocketFrame frame)
		{
		}

		[Token(Token = "0x6002560")]
		[Address(RVA = "0xA4B464", Offset = "0xA4B464", VA = "0xA4B464")]
		public void Close()
		{
		}

		[Token(Token = "0x6002561")]
		[Address(RVA = "0xA4B4D0", Offset = "0xA4B4D0", VA = "0xA4B4D0")]
		public void Close(ushort code, string msg)
		{
		}

		[Token(Token = "0x6002562")]
		[Address(RVA = "0xA4A960", Offset = "0xA4A960", VA = "0xA4A960")]
		public void StartPinging(int frequency)
		{
		}

		[Token(Token = "0x6002563")]
		[Address(RVA = "0xA4B994", Offset = "0xA4B994", VA = "0xA4B994")]
		private void ReceiveThreadFunc(object param)
		{
		}

		[Token(Token = "0x6002564")]
		[Address(RVA = "0xA4C0C0", Offset = "0xA4C0C0", VA = "0xA4C0C0", Slot = "8")]
		private void BestHTTP.IProtocol.HandleEvents()
		{
		}

		[Token(Token = "0x6002565")]
		[Address(RVA = "0xA4C71C", Offset = "0xA4C71C", VA = "0xA4C71C", Slot = "6")]
		private void BestHTTP.Extensions.IHeartbeat.OnHeartbeatUpdate(TimeSpan dif)
		{
		}
	}
	[Token(Token = "0x2000424")]
	public enum WebSocketStausCodes : uint
	{
		[Token(Token = "0x40014EB")]
		NormalClosure = 1000u,
		[Token(Token = "0x40014EC")]
		GoingAway = 1001u,
		[Token(Token = "0x40014ED")]
		ProtocolError = 1002u,
		[Token(Token = "0x40014EE")]
		WrongDataType = 1003u,
		[Token(Token = "0x40014EF")]
		Reserved = 1004u,
		[Token(Token = "0x40014F0")]
		NoStatusCode = 1005u,
		[Token(Token = "0x40014F1")]
		ClosedAbnormally = 1006u,
		[Token(Token = "0x40014F2")]
		DataError = 1007u,
		[Token(Token = "0x40014F3")]
		PolicyError = 1008u,
		[Token(Token = "0x40014F4")]
		TooBigMessage = 1009u,
		[Token(Token = "0x40014F5")]
		ExtensionExpected = 1010u,
		[Token(Token = "0x40014F6")]
		WrongRequest = 1011u,
		[Token(Token = "0x40014F7")]
		TLSHandshakeError = 1015u
	}
}
namespace BestHTTP.WebSocket.Frames
{
	[Token(Token = "0x2000425")]
	public sealed class WebSocketFrame
	{
		[Token(Token = "0x40014F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly byte[] NoData;

		[Token(Token = "0x40014F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823AC4", Offset = "0x823AC4")]
		private WebSocketFrameTypes <Type>k__BackingField;

		[Token(Token = "0x40014FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823AD4", Offset = "0x823AD4")]
		private bool <IsFinal>k__BackingField;

		[Token(Token = "0x40014FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823AE4", Offset = "0x823AE4")]
		private byte <Header>k__BackingField;

		[Token(Token = "0x40014FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823AF4", Offset = "0x823AF4")]
		private byte[] <Data>k__BackingField;

		[Token(Token = "0x40014FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823B04", Offset = "0x823B04")]
		private bool <UseExtensions>k__BackingField;

		[Token(Token = "0x170004E1")]
		public WebSocketFrameTypes Type
		{
			[Token(Token = "0x6002566")]
			[Address(RVA = "0x108731C", Offset = "0x108731C", VA = "0x108731C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831768", Offset = "0x831768")]
			get
			{
				return default(WebSocketFrameTypes);
			}
			[Token(Token = "0x6002567")]
			[Address(RVA = "0x1087324", Offset = "0x1087324", VA = "0x1087324")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831778", Offset = "0x831778")]
			private set
			{
			}
		}

		[Token(Token = "0x170004E2")]
		public bool IsFinal
		{
			[Token(Token = "0x6002568")]
			[Address(RVA = "0x108732C", Offset = "0x108732C", VA = "0x108732C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831788", Offset = "0x831788")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002569")]
			[Address(RVA = "0x1087334", Offset = "0x1087334", VA = "0x1087334")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831798", Offset = "0x831798")]
			private set
			{
			}
		}

		[Token(Token = "0x170004E3")]
		public byte Header
		{
			[Token(Token = "0x600256A")]
			[Address(RVA = "0x1087340", Offset = "0x1087340", VA = "0x1087340")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8317A8", Offset = "0x8317A8")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x600256B")]
			[Address(RVA = "0x1087348", Offset = "0x1087348", VA = "0x1087348")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8317B8", Offset = "0x8317B8")]
			private set
			{
			}
		}

		[Token(Token = "0x170004E4")]
		public byte[] Data
		{
			[Token(Token = "0x600256C")]
			[Address(RVA = "0x1087350", Offset = "0x1087350", VA = "0x1087350")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8317C8", Offset = "0x8317C8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600256D")]
			[Address(RVA = "0x1087358", Offset = "0x1087358", VA = "0x1087358")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8317D8", Offset = "0x8317D8")]
			private set
			{
			}
		}

		[Token(Token = "0x170004E5")]
		public bool UseExtensions
		{
			[Token(Token = "0x600256E")]
			[Address(RVA = "0x1087360", Offset = "0x1087360", VA = "0x1087360")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8317E8", Offset = "0x8317E8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600256F")]
			[Address(RVA = "0x1087368", Offset = "0x1087368", VA = "0x1087368")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8317F8", Offset = "0x8317F8")]
			private set
			{
			}
		}

		[Token(Token = "0x6002570")]
		[Address(RVA = "0x1087374", Offset = "0x1087374", VA = "0x1087374")]
		public WebSocketFrame(WebSocket webSocket, WebSocketFrameTypes type, byte[] data)
		{
		}

		[Token(Token = "0x6002571")]
		[Address(RVA = "0x108737C", Offset = "0x108737C", VA = "0x108737C")]
		public WebSocketFrame(WebSocket webSocket, WebSocketFrameTypes type, byte[] data, bool useExtensions)
		{
		}

		[Token(Token = "0x6002572")]
		[Address(RVA = "0x1087628", Offset = "0x1087628", VA = "0x1087628")]
		public WebSocketFrame(WebSocket webSocket, WebSocketFrameTypes type, byte[] data, bool isFinal, bool useExtensions)
		{
		}

		[Token(Token = "0x6002573")]
		[Address(RVA = "0x10873BC", Offset = "0x10873BC", VA = "0x10873BC")]
		public WebSocketFrame(WebSocket webSocket, WebSocketFrameTypes type, byte[] data, ulong pos, ulong length, bool isFinal, bool useExtensions)
		{
		}

		[Token(Token = "0x6002574")]
		[Address(RVA = "0x108766C", Offset = "0x108766C", VA = "0x108766C")]
		public byte[] Get()
		{
			return null;
		}

		[Token(Token = "0x6002575")]
		[Address(RVA = "0x1087AC0", Offset = "0x1087AC0", VA = "0x1087AC0")]
		public WebSocketFrame[] Fragment(ushort maxFragmentSize)
		{
			return null;
		}
	}
	[Token(Token = "0x2000426")]
	public sealed class WebSocketFrameReader
	{
		[Token(Token = "0x40014FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823B14", Offset = "0x823B14")]
		private byte <Header>k__BackingField;

		[Token(Token = "0x40014FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823B24", Offset = "0x823B24")]
		private bool <IsFinal>k__BackingField;

		[Token(Token = "0x4001500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823B34", Offset = "0x823B34")]
		private WebSocketFrameTypes <Type>k__BackingField;

		[Token(Token = "0x4001501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823B44", Offset = "0x823B44")]
		private bool <HasMask>k__BackingField;

		[Token(Token = "0x4001502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823B54", Offset = "0x823B54")]
		private ulong <Length>k__BackingField;

		[Token(Token = "0x4001503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823B64", Offset = "0x823B64")]
		private byte[] <Mask>k__BackingField;

		[Token(Token = "0x4001504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823B74", Offset = "0x823B74")]
		private byte[] <Data>k__BackingField;

		[Token(Token = "0x170004E6")]
		public byte Header
		{
			[Token(Token = "0x6002577")]
			[Address(RVA = "0xA46F98", Offset = "0xA46F98", VA = "0xA46F98")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831808", Offset = "0x831808")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x6002578")]
			[Address(RVA = "0xA46FA0", Offset = "0xA46FA0", VA = "0xA46FA0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831818", Offset = "0x831818")]
			private set
			{
			}
		}

		[Token(Token = "0x170004E7")]
		public bool IsFinal
		{
			[Token(Token = "0x6002579")]
			[Address(RVA = "0xA46FA8", Offset = "0xA46FA8", VA = "0xA46FA8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831828", Offset = "0x831828")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600257A")]
			[Address(RVA = "0xA46FB0", Offset = "0xA46FB0", VA = "0xA46FB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831838", Offset = "0x831838")]
			private set
			{
			}
		}

		[Token(Token = "0x170004E8")]
		public WebSocketFrameTypes Type
		{
			[Token(Token = "0x600257B")]
			[Address(RVA = "0xA46FBC", Offset = "0xA46FBC", VA = "0xA46FBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831848", Offset = "0x831848")]
			get
			{
				return default(WebSocketFrameTypes);
			}
			[Token(Token = "0x600257C")]
			[Address(RVA = "0xA46FC4", Offset = "0xA46FC4", VA = "0xA46FC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831858", Offset = "0x831858")]
			private set
			{
			}
		}

		[Token(Token = "0x170004E9")]
		public bool HasMask
		{
			[Token(Token = "0x600257D")]
			[Address(RVA = "0xA46FCC", Offset = "0xA46FCC", VA = "0xA46FCC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831868", Offset = "0x831868")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600257E")]
			[Address(RVA = "0xA46FD4", Offset = "0xA46FD4", VA = "0xA46FD4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831878", Offset = "0x831878")]
			private set
			{
			}
		}

		[Token(Token = "0x170004EA")]
		public ulong Length
		{
			[Token(Token = "0x600257F")]
			[Address(RVA = "0xA46FE0", Offset = "0xA46FE0", VA = "0xA46FE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831888", Offset = "0x831888")]
			get
			{
				return default(ulong);
			}
			[Token(Token = "0x6002580")]
			[Address(RVA = "0xA46FE8", Offset = "0xA46FE8", VA = "0xA46FE8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831898", Offset = "0x831898")]
			private set
			{
			}
		}

		[Token(Token = "0x170004EB")]
		public byte[] Mask
		{
			[Token(Token = "0x6002581")]
			[Address(RVA = "0xA46FF0", Offset = "0xA46FF0", VA = "0xA46FF0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8318A8", Offset = "0x8318A8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002582")]
			[Address(RVA = "0xA46FF8", Offset = "0xA46FF8", VA = "0xA46FF8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8318B8", Offset = "0x8318B8")]
			private set
			{
			}
		}

		[Token(Token = "0x170004EC")]
		public byte[] Data
		{
			[Token(Token = "0x6002583")]
			[Address(RVA = "0xA47000", Offset = "0xA47000", VA = "0xA47000")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8318C8", Offset = "0x8318C8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002584")]
			[Address(RVA = "0xA47008", Offset = "0xA47008", VA = "0xA47008")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8318D8", Offset = "0x8318D8")]
			private set
			{
			}
		}

		[Token(Token = "0x6002585")]
		[Address(RVA = "0xA47010", Offset = "0xA47010", VA = "0xA47010")]
		internal void Read(Stream stream)
		{
		}

		[Token(Token = "0x6002586")]
		[Address(RVA = "0xA47348", Offset = "0xA47348", VA = "0xA47348")]
		private byte ReadByte(Stream stream)
		{
			return default(byte);
		}

		[Token(Token = "0x6002587")]
		[Address(RVA = "0xA473C0", Offset = "0xA473C0", VA = "0xA473C0")]
		public void Assemble(List<WebSocketFrameReader> fragments)
		{
		}

		[Token(Token = "0x6002588")]
		[Address(RVA = "0xA475B8", Offset = "0xA475B8", VA = "0xA475B8")]
		public void DecodeWithExtensions(WebSocket webSocket)
		{
		}

		[Token(Token = "0x6002589")]
		[Address(RVA = "0xA476E0", Offset = "0xA476E0", VA = "0xA476E0")]
		public WebSocketFrameReader()
		{
		}
	}
	[Token(Token = "0x2000427")]
	public enum WebSocketFrameTypes : byte
	{
		[Token(Token = "0x4001506")]
		Continuation = 0,
		[Token(Token = "0x4001507")]
		Text = 1,
		[Token(Token = "0x4001508")]
		Binary = 2,
		[Token(Token = "0x4001509")]
		ConnectionClose = 8,
		[Token(Token = "0x400150A")]
		Ping = 9,
		[Token(Token = "0x400150B")]
		Pong = 10
	}
}
namespace BestHTTP.WebSocket.Extensions
{
	[Token(Token = "0x2000428")]
	public interface IExtension
	{
		[Token(Token = "0x600258A")]
		void AddNegotiation(HTTPRequest request);

		[Token(Token = "0x600258B")]
		bool ParseNegotiation(WebSocketResponse resp);

		[Token(Token = "0x600258C")]
		byte GetFrameHeader(WebSocketFrame writer, byte inFlag);

		[Token(Token = "0x600258D")]
		byte[] Encode(WebSocketFrame writer);

		[Token(Token = "0x600258E")]
		byte[] Decode(byte header, byte[] data);
	}
	[Token(Token = "0x2000429")]
	public sealed class PerMessageCompression : IExtension
	{
		[Token(Token = "0x400150C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly byte[] Trailer;

		[Token(Token = "0x400150D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823B84", Offset = "0x823B84")]
		private bool <ClientNoContextTakeover>k__BackingField;

		[Token(Token = "0x400150E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823B94", Offset = "0x823B94")]
		private bool <ServerNoContextTakeover>k__BackingField;

		[Token(Token = "0x400150F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823BA4", Offset = "0x823BA4")]
		private int <ClientMaxWindowBits>k__BackingField;

		[Token(Token = "0x4001510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823BB4", Offset = "0x823BB4")]
		private int <ServerMaxWindowBits>k__BackingField;

		[Token(Token = "0x4001511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823BC4", Offset = "0x823BC4")]
		private CompressionLevel <Level>k__BackingField;

		[Token(Token = "0x4001512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823BD4", Offset = "0x823BD4")]
		private int <MinimumDataLegthToCompress>k__BackingField;

		[Token(Token = "0x4001513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private MemoryStream compressorOutputStream;

		[Token(Token = "0x4001514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private DeflateStream compressorDeflateStream;

		[Token(Token = "0x4001515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private MemoryStream decompressorInputStream;

		[Token(Token = "0x4001516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private MemoryStream decompressorOutputStream;

		[Token(Token = "0x4001517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private DeflateStream decompressorDeflateStream;

		[Token(Token = "0x4001518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private byte[] copyBuffer;

		[Token(Token = "0x170004ED")]
		public bool ClientNoContextTakeover
		{
			[Token(Token = "0x600258F")]
			[Address(RVA = "0x10866F8", Offset = "0x10866F8", VA = "0x10866F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8318E8", Offset = "0x8318E8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002590")]
			[Address(RVA = "0x1086700", Offset = "0x1086700", VA = "0x1086700")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8318F8", Offset = "0x8318F8")]
			private set
			{
			}
		}

		[Token(Token = "0x170004EE")]
		public bool ServerNoContextTakeover
		{
			[Token(Token = "0x6002591")]
			[Address(RVA = "0x108670C", Offset = "0x108670C", VA = "0x108670C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831908", Offset = "0x831908")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002592")]
			[Address(RVA = "0x1086714", Offset = "0x1086714", VA = "0x1086714")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831918", Offset = "0x831918")]
			private set
			{
			}
		}

		[Token(Token = "0x170004EF")]
		public int ClientMaxWindowBits
		{
			[Token(Token = "0x6002593")]
			[Address(RVA = "0x1086720", Offset = "0x1086720", VA = "0x1086720")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831928", Offset = "0x831928")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002594")]
			[Address(RVA = "0x1086728", Offset = "0x1086728", VA = "0x1086728")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831938", Offset = "0x831938")]
			private set
			{
			}
		}

		[Token(Token = "0x170004F0")]
		public int ServerMaxWindowBits
		{
			[Token(Token = "0x6002595")]
			[Address(RVA = "0x1086730", Offset = "0x1086730", VA = "0x1086730")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831948", Offset = "0x831948")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002596")]
			[Address(RVA = "0x1086738", Offset = "0x1086738", VA = "0x1086738")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831958", Offset = "0x831958")]
			private set
			{
			}
		}

		[Token(Token = "0x170004F1")]
		public CompressionLevel Level
		{
			[Token(Token = "0x6002597")]
			[Address(RVA = "0x1086740", Offset = "0x1086740", VA = "0x1086740")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831968", Offset = "0x831968")]
			get
			{
				return default(CompressionLevel);
			}
			[Token(Token = "0x6002598")]
			[Address(RVA = "0x1086748", Offset = "0x1086748", VA = "0x1086748")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831978", Offset = "0x831978")]
			private set
			{
			}
		}

		[Token(Token = "0x170004F2")]
		public int MinimumDataLegthToCompress
		{
			[Token(Token = "0x6002599")]
			[Address(RVA = "0x1086750", Offset = "0x1086750", VA = "0x1086750")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831988", Offset = "0x831988")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600259A")]
			[Address(RVA = "0x1086758", Offset = "0x1086758", VA = "0x1086758")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831998", Offset = "0x831998")]
			set
			{
			}
		}

		[Token(Token = "0x600259B")]
		[Address(RVA = "0x1086760", Offset = "0x1086760", VA = "0x1086760")]
		public PerMessageCompression()
		{
		}

		[Token(Token = "0x600259C")]
		[Address(RVA = "0x108677C", Offset = "0x108677C", VA = "0x108677C")]
		public PerMessageCompression(CompressionLevel level, bool clientNoContextTakeover, bool serverNoContextTakeover, int desiredClientMaxWindowBits, int desiredServerMaxWindowBits, int minDatalengthToCompress)
		{
		}

		[Token(Token = "0x600259D")]
		[Address(RVA = "0x108681C", Offset = "0x108681C", VA = "0x108681C", Slot = "4")]
		public void AddNegotiation(HTTPRequest request)
		{
		}

		[Token(Token = "0x600259E")]
		[Address(RVA = "0x108698C", Offset = "0x108698C", VA = "0x108698C", Slot = "5")]
		public bool ParseNegotiation(WebSocketResponse resp)
		{
			return default(bool);
		}

		[Token(Token = "0x600259F")]
		[Address(RVA = "0x1086CEC", Offset = "0x1086CEC", VA = "0x1086CEC", Slot = "6")]
		public byte GetFrameHeader(WebSocketFrame writer, byte inFlag)
		{
			return default(byte);
		}

		[Token(Token = "0x60025A0")]
		[Address(RVA = "0x1086D34", Offset = "0x1086D34", VA = "0x1086D34", Slot = "7")]
		public byte[] Encode(WebSocketFrame writer)
		{
			return null;
		}

		[Token(Token = "0x60025A1")]
		[Address(RVA = "0x1087004", Offset = "0x1087004", VA = "0x1087004", Slot = "8")]
		public byte[] Decode(byte header, byte[] data)
		{
			return null;
		}

		[Token(Token = "0x60025A2")]
		[Address(RVA = "0x1086DDC", Offset = "0x1086DDC", VA = "0x1086DDC")]
		private byte[] Compress(byte[] data)
		{
			return null;
		}

		[Token(Token = "0x60025A3")]
		[Address(RVA = "0x1087018", Offset = "0x1087018", VA = "0x1087018")]
		private byte[] Decompress(byte[] data)
		{
			return null;
		}
	}
}
namespace BestHTTP.Statistics
{
	[Token(Token = "0x200042A")]
	[Flags]
	public enum StatisticsQueryFlags : byte
	{
		[Token(Token = "0x400151A")]
		Connections = 1,
		[Token(Token = "0x400151B")]
		Cache = 2,
		[Token(Token = "0x400151C")]
		Cookies = 4,
		[Token(Token = "0x400151D")]
		All = byte.MaxValue
	}
	[Token(Token = "0x200042B")]
	public struct GeneralStatistics
	{
		[Token(Token = "0x400151E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public StatisticsQueryFlags QueryFlags;

		[Token(Token = "0x400151F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int Connections;

		[Token(Token = "0x4001520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int ActiveConnections;

		[Token(Token = "0x4001521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int FreeConnections;

		[Token(Token = "0x4001522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int RecycledConnections;

		[Token(Token = "0x4001523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int RequestsInQueue;

		[Token(Token = "0x4001524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int CacheEntityCount;

		[Token(Token = "0x4001525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ulong CacheSize;

		[Token(Token = "0x4001526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int CookieCount;

		[Token(Token = "0x4001527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public uint CookieJarSize;
	}
}
namespace BestHTTP.SocketIO
{
	[Token(Token = "0x200042C")]
	public enum TransportEventTypes
	{
		[Token(Token = "0x4001529")]
		Unknown = -1,
		[Token(Token = "0x400152A")]
		Open,
		[Token(Token = "0x400152B")]
		Close,
		[Token(Token = "0x400152C")]
		Ping,
		[Token(Token = "0x400152D")]
		Pong,
		[Token(Token = "0x400152E")]
		Message,
		[Token(Token = "0x400152F")]
		Upgrade,
		[Token(Token = "0x4001530")]
		Noop
	}
	[Token(Token = "0x200042D")]
	public enum SocketIOEventTypes
	{
		[Token(Token = "0x4001532")]
		Unknown = -1,
		[Token(Token = "0x4001533")]
		Connect,
		[Token(Token = "0x4001534")]
		Disconnect,
		[Token(Token = "0x4001535")]
		Event,
		[Token(Token = "0x4001536")]
		Ack,
		[Token(Token = "0x4001537")]
		Error,
		[Token(Token = "0x4001538")]
		BinaryEvent,
		[Token(Token = "0x4001539")]
		BinaryAck
	}
	[Token(Token = "0x200042E")]
	public enum SocketIOErrors
	{
		[Token(Token = "0x400153B")]
		UnknownTransport,
		[Token(Token = "0x400153C")]
		UnknownSid,
		[Token(Token = "0x400153D")]
		BadHandshakeMethod,
		[Token(Token = "0x400153E")]
		BadRequest,
		[Token(Token = "0x400153F")]
		Internal,
		[Token(Token = "0x4001540")]
		User,
		[Token(Token = "0x4001541")]
		Custom
	}
	[Token(Token = "0x200042F")]
	public sealed class Error
	{
		[Token(Token = "0x4001542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823BE4", Offset = "0x823BE4")]
		private SocketIOErrors <Code>k__BackingField;

		[Token(Token = "0x4001543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823BF4", Offset = "0x823BF4")]
		private string <Message>k__BackingField;

		[Token(Token = "0x170004F3")]
		public SocketIOErrors Code
		{
			[Token(Token = "0x60025A5")]
			[Address(RVA = "0x10784C0", Offset = "0x10784C0", VA = "0x10784C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8319A8", Offset = "0x8319A8")]
			get
			{
				return default(SocketIOErrors);
			}
			[Token(Token = "0x60025A6")]
			[Address(RVA = "0x10784C8", Offset = "0x10784C8", VA = "0x10784C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8319B8", Offset = "0x8319B8")]
			private set
			{
			}
		}

		[Token(Token = "0x170004F4")]
		public string Message
		{
			[Token(Token = "0x60025A7")]
			[Address(RVA = "0x10784D0", Offset = "0x10784D0", VA = "0x10784D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8319C8", Offset = "0x8319C8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60025A8")]
			[Address(RVA = "0x10784D8", Offset = "0x10784D8", VA = "0x10784D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8319D8", Offset = "0x8319D8")]
			private set
			{
			}
		}

		[Token(Token = "0x60025A9")]
		[Address(RVA = "0x10784E0", Offset = "0x10784E0", VA = "0x10784E0")]
		public Error(SocketIOErrors code, string msg)
		{
		}

		[Token(Token = "0x60025AA")]
		[Address(RVA = "0x107851C", Offset = "0x107851C", VA = "0x107851C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000430")]
	public sealed class HandshakeData
	{
		[Token(Token = "0x4001544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823C04", Offset = "0x823C04")]
		private string <Sid>k__BackingField;

		[Token(Token = "0x4001545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823C14", Offset = "0x823C14")]
		private List<string> <Upgrades>k__BackingField;

		[Token(Token = "0x4001546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823C24", Offset = "0x823C24")]
		private TimeSpan <PingInterval>k__BackingField;

		[Token(Token = "0x4001547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823C34", Offset = "0x823C34")]
		private TimeSpan <PingTimeout>k__BackingField;

		[Token(Token = "0x4001548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823C44", Offset = "0x823C44")]
		private SocketManager <Manager>k__BackingField;

		[Token(Token = "0x4001549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Action<HandshakeData> OnReceived;

		[Token(Token = "0x400154A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Action<HandshakeData, string> OnError;

		[Token(Token = "0x400154B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private HTTPRequest HandshakeRequest;

		[Token(Token = "0x170004F5")]
		public string Sid
		{
			[Token(Token = "0x60025AB")]
			[Address(RVA = "0x107A82C", Offset = "0x107A82C", VA = "0x107A82C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8319E8", Offset = "0x8319E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60025AC")]
			[Address(RVA = "0x107A834", Offset = "0x107A834", VA = "0x107A834")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8319F8", Offset = "0x8319F8")]
			private set
			{
			}
		}

		[Token(Token = "0x170004F6")]
		public List<string> Upgrades
		{
			[Token(Token = "0x60025AD")]
			[Address(RVA = "0x107A83C", Offset = "0x107A83C", VA = "0x107A83C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831A08", Offset = "0x831A08")]
			get
			{
				return null;
			}
			[Token(Token = "0x60025AE")]
			[Address(RVA = "0x107A844", Offset = "0x107A844", VA = "0x107A844")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831A18", Offset = "0x831A18")]
			private set
			{
			}
		}

		[Token(Token = "0x170004F7")]
		public TimeSpan PingInterval
		{
			[Token(Token = "0x60025AF")]
			[Address(RVA = "0x107A84C", Offset = "0x107A84C", VA = "0x107A84C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831A28", Offset = "0x831A28")]
			get
			{
				return default(TimeSpan);
			}
			[Token(Token = "0x60025B0")]
			[Address(RVA = "0x107A854", Offset = "0x107A854", VA = "0x107A854")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831A38", Offset = "0x831A38")]
			private set
			{
			}
		}

		[Token(Token = "0x170004F8")]
		public TimeSpan PingTimeout
		{
			[Token(Token = "0x60025B1")]
			[Address(RVA = "0x107A85C", Offset = "0x107A85C", VA = "0x107A85C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831A48", Offset = "0x831A48")]
			get
			{
				return default(TimeSpan);
			}
			[Token(Token = "0x60025B2")]
			[Address(RVA = "0x107A864", Offset = "0x107A864", VA = "0x107A864")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831A58", Offset = "0x831A58")]
			private set
			{
			}
		}

		[Token(Token = "0x170004F9")]
		public SocketManager Manager
		{
			[Token(Token = "0x60025B3")]
			[Address(RVA = "0x107A86C", Offset = "0x107A86C", VA = "0x107A86C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831A68", Offset = "0x831A68")]
			get
			{
				return null;
			}
			[Token(Token = "0x60025B4")]
			[Address(RVA = "0x107A874", Offset = "0x107A874", VA = "0x107A874")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831A78", Offset = "0x831A78")]
			private set
			{
			}
		}

		[Token(Token = "0x60025B5")]
		[Address(RVA = "0x107A87C", Offset = "0x107A87C", VA = "0x107A87C")]
		public HandshakeData(SocketManager manager)
		{
		}

		[Token(Token = "0x60025B6")]
		[Address(RVA = "0x107A8A8", Offset = "0x107A8A8", VA = "0x107A8A8")]
		internal void Start()
		{
		}

		[Token(Token = "0x60025B7")]
		[Address(RVA = "0x107B014", Offset = "0x107B014", VA = "0x107B014")]
		internal void Abort()
		{
		}

		[Token(Token = "0x60025B8")]
		[Address(RVA = "0x107B048", Offset = "0x107B048", VA = "0x107B048")]
		private void OnHandshakeCallback(HTTPRequest req, HTTPResponse resp)
		{
		}

		[Token(Token = "0x60025B9")]
		[Address(RVA = "0x107B464", Offset = "0x107B464", VA = "0x107B464")]
		private void RaiseOnError(string err)
		{
		}

		[Token(Token = "0x60025BA")]
		[Address(RVA = "0x107B5B0", Offset = "0x107B5B0", VA = "0x107B5B0")]
		private HandshakeData Parse(string str)
		{
			return null;
		}

		[Token(Token = "0x60025BB")]
		[Address(RVA = "0x107B9C4", Offset = "0x107B9C4", VA = "0x107B9C4")]
		private static object Get(Dictionary<string, object> from, string key)
		{
			return null;
		}

		[Token(Token = "0x60025BC")]
		[Address(RVA = "0x107B780", Offset = "0x107B780", VA = "0x107B780")]
		private static string GetString(Dictionary<string, object> from, string key)
		{
			return null;
		}

		[Token(Token = "0x60025BD")]
		[Address(RVA = "0x107B7F4", Offset = "0x107B7F4", VA = "0x107B7F4")]
		private static List<string> GetStringList(Dictionary<string, object> from, string key)
		{
			return null;
		}

		[Token(Token = "0x60025BE")]
		[Address(RVA = "0x107B934", Offset = "0x107B934", VA = "0x107B934")]
		private static int GetInt(Dictionary<string, object> from, string key)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000431")]
	internal interface IManager
	{
		[Token(Token = "0x60025BF")]
		void Remove(Socket socket);

		[Token(Token = "0x60025C0")]
		void Close(bool removeSockets = true);

		[Token(Token = "0x60025C1")]
		void TryToReconnect();

		[Token(Token = "0x60025C2")]
		bool OnTransportConnected(ITransport transport);

		[Token(Token = "0x60025C3")]
		void OnTransportError(ITransport trans, string err);

		[Token(Token = "0x60025C4")]
		void SendPacket(Packet packet);

		[Token(Token = "0x60025C5")]
		void OnPacket(Packet packet);

		[Token(Token = "0x60025C6")]
		void EmitEvent(string eventName, params object[] args);

		[Token(Token = "0x60025C7")]
		void EmitEvent(SocketIOEventTypes type, params object[] args);

		[Token(Token = "0x60025C8")]
		void EmitError(SocketIOErrors errCode, string msg);

		[Token(Token = "0x60025C9")]
		void EmitAll(string eventName, params object[] args);
	}
	[Token(Token = "0x2000432")]
	internal interface ISocket
	{
		[Token(Token = "0x60025CA")]
		void Open();

		[Token(Token = "0x60025CB")]
		void Disconnect(bool remove);

		[Token(Token = "0x60025CC")]
		void OnPacket(Packet packet);

		[Token(Token = "0x60025CD")]
		void EmitEvent(SocketIOEventTypes type, params object[] args);

		[Token(Token = "0x60025CE")]
		void EmitEvent(string eventName, params object[] args);

		[Token(Token = "0x60025CF")]
		void EmitError(SocketIOErrors errCode, string msg);
	}
	[Token(Token = "0x2000433")]
	public sealed class Packet
	{
		[Token(Token = "0x20006DE")]
		private enum PayloadTypes : byte
		{
			[Token(Token = "0x4002667")]
			Textual,
			[Token(Token = "0x4002668")]
			Binary
		}

		[Token(Token = "0x400154C")]
		public const string Placeholder = "_placeholder";

		[Token(Token = "0x400154D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823C54", Offset = "0x823C54")]
		private TransportEventTypes <TransportEvent>k__BackingField;

		[Token(Token = "0x400154E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823C64", Offset = "0x823C64")]
		private SocketIOEventTypes <SocketIOEvent>k__BackingField;

		[Token(Token = "0x400154F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823C74", Offset = "0x823C74")]
		private int <AttachmentCount>k__BackingField;

		[Token(Token = "0x4001550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823C84", Offset = "0x823C84")]
		private int <Id>k__BackingField;

		[Token(Token = "0x4001551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823C94", Offset = "0x823C94")]
		private string <Namespace>k__BackingField;

		[Token(Token = "0x4001552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823CA4", Offset = "0x823CA4")]
		private string <Payload>k__BackingField;

		[Token(Token = "0x4001553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823CB4", Offset = "0x823CB4")]
		private string <EventName>k__BackingField;

		[Token(Token = "0x4001554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<byte[]> attachments;

		[Token(Token = "0x4001555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823CC4", Offset = "0x823CC4")]
		private bool <IsDecoded>k__BackingField;

		[Token(Token = "0x4001556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823CD4", Offset = "0x823CD4")]
		private object[] <DecodedArgs>k__BackingField;

		[Token(Token = "0x170004FA")]
		public TransportEventTypes TransportEvent
		{
			[Token(Token = "0x60025D0")]
			[Address(RVA = "0x107BB34", Offset = "0x107BB34", VA = "0x107BB34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831A88", Offset = "0x831A88")]
			get
			{
				return default(TransportEventTypes);
			}
			[Token(Token = "0x60025D1")]
			[Address(RVA = "0x107BB3C", Offset = "0x107BB3C", VA = "0x107BB3C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831A98", Offset = "0x831A98")]
			private set
			{
			}
		}

		[Token(Token = "0x170004FB")]
		public SocketIOEventTypes SocketIOEvent
		{
			[Token(Token = "0x60025D2")]
			[Address(RVA = "0x107BB44", Offset = "0x107BB44", VA = "0x107BB44")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831AA8", Offset = "0x831AA8")]
			get
			{
				return default(SocketIOEventTypes);
			}
			[Token(Token = "0x60025D3")]
			[Address(RVA = "0x107BB4C", Offset = "0x107BB4C", VA = "0x107BB4C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831AB8", Offset = "0x831AB8")]
			private set
			{
			}
		}

		[Token(Token = "0x170004FC")]
		public int AttachmentCount
		{
			[Token(Token = "0x60025D4")]
			[Address(RVA = "0x107BB54", Offset = "0x107BB54", VA = "0x107BB54")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831AC8", Offset = "0x831AC8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60025D5")]
			[Address(RVA = "0x107BB5C", Offset = "0x107BB5C", VA = "0x107BB5C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831AD8", Offset = "0x831AD8")]
			private set
			{
			}
		}

		[Token(Token = "0x170004FD")]
		public int Id
		{
			[Token(Token = "0x60025D6")]
			[Address(RVA = "0x107BB64", Offset = "0x107BB64", VA = "0x107BB64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831AE8", Offset = "0x831AE8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60025D7")]
			[Address(RVA = "0x107BB6C", Offset = "0x107BB6C", VA = "0x107BB6C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831AF8", Offset = "0x831AF8")]
			private set
			{
			}
		}

		[Token(Token = "0x170004FE")]
		public string Namespace
		{
			[Token(Token = "0x60025D8")]
			[Address(RVA = "0x107BB74", Offset = "0x107BB74", VA = "0x107BB74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831B08", Offset = "0x831B08")]
			get
			{
				return null;
			}
			[Token(Token = "0x60025D9")]
			[Address(RVA = "0x107BB7C", Offset = "0x107BB7C", VA = "0x107BB7C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831B18", Offset = "0x831B18")]
			private set
			{
			}
		}

		[Token(Token = "0x170004FF")]
		public string Payload
		{
			[Token(Token = "0x60025DA")]
			[Address(RVA = "0x107BB84", Offset = "0x107BB84", VA = "0x107BB84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831B28", Offset = "0x831B28")]
			get
			{
				return null;
			}
			[Token(Token = "0x60025DB")]
			[Address(RVA = "0x107BB8C", Offset = "0x107BB8C", VA = "0x107BB8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831B38", Offset = "0x831B38")]
			private set
			{
			}
		}

		[Token(Token = "0x17000500")]
		public string EventName
		{
			[Token(Token = "0x60025DC")]
			[Address(RVA = "0x107BB94", Offset = "0x107BB94", VA = "0x107BB94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831B48", Offset = "0x831B48")]
			get
			{
				return null;
			}
			[Token(Token = "0x60025DD")]
			[Address(RVA = "0x107BB9C", Offset = "0x107BB9C", VA = "0x107BB9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831B58", Offset = "0x831B58")]
			private set
			{
			}
		}

		[Token(Token = "0x17000501")]
		public List<byte[]> Attachments
		{
			[Token(Token = "0x60025DE")]
			[Address(RVA = "0x107BBA4", Offset = "0x107BBA4", VA = "0x107BBA4")]
			get
			{
				return null;
			}
			[Token(Token = "0x60025DF")]
			[Address(RVA = "0x107BBAC", Offset = "0x107BBAC", VA = "0x107BBAC")]
			set
			{
			}
		}

		[Token(Token = "0x17000502")]
		public bool HasAllAttachment
		{
			[Token(Token = "0x60025E0")]
			[Address(RVA = "0x107BC10", Offset = "0x107BC10", VA = "0x107BC10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000503")]
		public bool IsDecoded
		{
			[Token(Token = "0x60025E1")]
			[Address(RVA = "0x107BC70", Offset = "0x107BC70", VA = "0x107BC70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831B68", Offset = "0x831B68")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60025E2")]
			[Address(RVA = "0x107BC78", Offset = "0x107BC78", VA = "0x107BC78")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831B78", Offset = "0x831B78")]
			private set
			{
			}
		}

		[Token(Token = "0x17000504")]
		public object[] DecodedArgs
		{
			[Token(Token = "0x60025E3")]
			[Address(RVA = "0x107BC84", Offset = "0x107BC84", VA = "0x107BC84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831B88", Offset = "0x831B88")]
			get
			{
				return null;
			}
			[Token(Token = "0x60025E4")]
			[Address(RVA = "0x107BC8C", Offset = "0x107BC8C", VA = "0x107BC8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831B98", Offset = "0x831B98")]
			private set
			{
			}
		}

		[Token(Token = "0x60025E5")]
		[Address(RVA = "0x107BC94", Offset = "0x107BC94", VA = "0x107BC94")]
		internal Packet()
		{
		}

		[Token(Token = "0x60025E6")]
		[Address(RVA = "0x107BD00", Offset = "0x107BD00", VA = "0x107BD00")]
		internal Packet(string from)
		{
		}

		[Token(Token = "0x60025E7")]
		[Address(RVA = "0x107C04C", Offset = "0x107C04C", VA = "0x107C04C")]
		internal Packet(TransportEventTypes transportEvent, SocketIOEventTypes packetType, string nsp, string payload, int attachment = 0, int id = 0)
		{
		}

		[Token(Token = "0x60025E8")]
		[Address(RVA = "0x107A198", Offset = "0x107A198", VA = "0x107A198")]
		public object[] Decode(BestHTTP.SocketIO.JsonEncoders.IJsonEncoder encoder)
		{
			return null;
		}

		[Token(Token = "0x60025E9")]
		[Address(RVA = "0x1079E78", Offset = "0x1079E78", VA = "0x1079E78")]
		public string DecodeEventName()
		{
			return null;
		}

		[Token(Token = "0x60025EA")]
		[Address(RVA = "0x107C0AC", Offset = "0x107C0AC", VA = "0x107C0AC")]
		public string RemoveEventName(bool removeArrayMarks)
		{
			return null;
		}

		[Token(Token = "0x60025EB")]
		[Address(RVA = "0x107C268", Offset = "0x107C268", VA = "0x107C268")]
		public bool ReconstructAttachmentAsIndex()
		{
			return default(bool);
		}

		[Token(Token = "0x60025EC")]
		[Address(RVA = "0x107C558", Offset = "0x107C558", VA = "0x107C558")]
		public bool ReconstructAttachmentAsBase64()
		{
			return default(bool);
		}

		[Token(Token = "0x60025ED")]
		[Address(RVA = "0x107BD30", Offset = "0x107BD30", VA = "0x107BD30")]
		internal void Parse(string from)
		{
		}

		[Token(Token = "0x60025EE")]
		[Address(RVA = "0x107C620", Offset = "0x107C620", VA = "0x107C620")]
		internal string Encode()
		{
			return null;
		}

		[Token(Token = "0x60025EF")]
		[Address(RVA = "0x107C864", Offset = "0x107C864", VA = "0x107C864")]
		internal byte[] EncodeBinary()
		{
			return null;
		}

		[Token(Token = "0x60025F0")]
		[Address(RVA = "0x107CD74", Offset = "0x107CD74", VA = "0x107CD74")]
		internal void AddAttachmentFromServer(byte[] data, bool copyFull)
		{
		}

		[Token(Token = "0x60025F1")]
		[Address(RVA = "0x107CB24", Offset = "0x107CB24", VA = "0x107CB24")]
		private byte[] EncodeData(byte[] data, PayloadTypes type, byte[] afterHeaderData)
		{
			return null;
		}

		[Token(Token = "0x60025F2")]
		[Address(RVA = "0x107C2E4", Offset = "0x107C2E4", VA = "0x107C2E4")]
		private bool PlaceholderReplacer(Action<string, Dictionary<string, object>> onFound)
		{
			return default(bool);
		}

		[Token(Token = "0x60025F3")]
		[Address(RVA = "0x107CE9C", Offset = "0x107CE9C", VA = "0x107CE9C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60025F4")]
		[Address(RVA = "0x107CEA4", Offset = "0x107CEA4", VA = "0x107CEA4")]
		internal Packet Clone()
		{
			return null;
		}

		[Token(Token = "0x60025F5")]
		[Address(RVA = "0x107CF4C", Offset = "0x107CF4C", VA = "0x107CF4C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831BA8", Offset = "0x831BA8")]
		private void <ReconstructAttachmentAsIndex>b__50_0(string json, Dictionary<string, object> obj)
		{
		}

		[Token(Token = "0x60025F6")]
		[Address(RVA = "0x107D038", Offset = "0x107D038", VA = "0x107D038")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831BB8", Offset = "0x831BB8")]
		private void <ReconstructAttachmentAsBase64>b__51_0(string json, Dictionary<string, object> obj)
		{
		}
	}
	[Token(Token = "0x2000434")]
	public sealed class Socket : ISocket
	{
		[Token(Token = "0x4001557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823CE4", Offset = "0x823CE4")]
		private SocketManager <Manager>k__BackingField;

		[Token(Token = "0x4001558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823CF4", Offset = "0x823CF4")]
		private string <Namespace>k__BackingField;

		[Token(Token = "0x4001559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823D04", Offset = "0x823D04")]
		private bool <IsOpen>k__BackingField;

		[Token(Token = "0x400155A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823D14", Offset = "0x823D14")]
		private bool <AutoDecodePayload>k__BackingField;

		[Token(Token = "0x400155B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Dictionary<int, SocketIOAckCallback> AckCallbacks;

		[Token(Token = "0x400155C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private EventTable EventCallbacks;

		[Token(Token = "0x400155D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<object> arguments;

		[Token(Token = "0x17000505")]
		public SocketManager Manager
		{
			[Token(Token = "0x60025F7")]
			[Address(RVA = "0x107D160", Offset = "0x107D160", VA = "0x107D160")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831BC8", Offset = "0x831BC8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60025F8")]
			[Address(RVA = "0x107D168", Offset = "0x107D168", VA = "0x107D168")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831BD8", Offset = "0x831BD8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000506")]
		public string Namespace
		{
			[Token(Token = "0x60025F9")]
			[Address(RVA = "0x107D170", Offset = "0x107D170", VA = "0x107D170")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831BE8", Offset = "0x831BE8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60025FA")]
			[Address(RVA = "0x107D178", Offset = "0x107D178", VA = "0x107D178")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831BF8", Offset = "0x831BF8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000507")]
		public bool IsOpen
		{
			[Token(Token = "0x60025FB")]
			[Address(RVA = "0x107D180", Offset = "0x107D180", VA = "0x107D180")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831C08", Offset = "0x831C08")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60025FC")]
			[Address(RVA = "0x107D188", Offset = "0x107D188", VA = "0x107D188")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831C18", Offset = "0x831C18")]
			private set
			{
			}
		}

		[Token(Token = "0x17000508")]
		public bool AutoDecodePayload
		{
			[Token(Token = "0x60025FD")]
			[Address(RVA = "0x107D194", Offset = "0x107D194", VA = "0x107D194")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831C28", Offset = "0x831C28")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60025FE")]
			[Address(RVA = "0x107D19C", Offset = "0x107D19C", VA = "0x107D19C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831C38", Offset = "0x831C38")]
			set
			{
			}
		}

		[Token(Token = "0x60025FF")]
		[Address(RVA = "0x107D1A8", Offset = "0x107D1A8", VA = "0x107D1A8")]
		internal Socket(string nsp, SocketManager manager)
		{
		}

		[Token(Token = "0x6002600")]
		[Address(RVA = "0x107D258", Offset = "0x107D258", VA = "0x107D258", Slot = "4")]
		private void BestHTTP.SocketIO.ISocket.Open()
		{
		}

		[Token(Token = "0x6002601")]
		[Address(RVA = "0x107D8F0", Offset = "0x107D8F0", VA = "0x107D8F0")]
		public void Disconnect()
		{
		}

		[Token(Token = "0x6002602")]
		[Address(RVA = "0x107D99C", Offset = "0x107D99C", VA = "0x107D99C", Slot = "5")]
		private void BestHTTP.SocketIO.ISocket.Disconnect(bool remove)
		{
		}

		[Token(Token = "0x6002603")]
		[Address(RVA = "0x107DBD8", Offset = "0x107DBD8", VA = "0x107DBD8")]
		public Socket Emit(string eventName, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x6002604")]
		[Address(RVA = "0x107DBE4", Offset = "0x107DBE4", VA = "0x107DBE4")]
		public Socket Emit(string eventName, SocketIOAckCallback callback, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x6002605")]
		[Address(RVA = "0x107E244", Offset = "0x107E244", VA = "0x107E244")]
		public Socket EmitAck(Packet originalPacket, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x6002606")]
		[Address(RVA = "0x107D568", Offset = "0x107D568", VA = "0x107D568")]
		public void On(string eventName, SocketIOCallback callback)
		{
		}

		[Token(Token = "0x6002607")]
		[Address(RVA = "0x107E618", Offset = "0x107E618", VA = "0x107E618")]
		public void On(SocketIOEventTypes type, SocketIOCallback callback)
		{
		}

		[Token(Token = "0x6002608")]
		[Address(RVA = "0x107E6B0", Offset = "0x107E6B0", VA = "0x107E6B0")]
		public void On(string eventName, SocketIOCallback callback, bool autoDecodePayload)
		{
		}

		[Token(Token = "0x6002609")]
		[Address(RVA = "0x107E6D0", Offset = "0x107E6D0", VA = "0x107E6D0")]
		public void On(SocketIOEventTypes type, SocketIOCallback callback, bool autoDecodePayload)
		{
		}

		[Token(Token = "0x600260A")]
		[Address(RVA = "0x107E774", Offset = "0x107E774", VA = "0x107E774")]
		public void Once(string eventName, SocketIOCallback callback)
		{
		}

		[Token(Token = "0x600260B")]
		[Address(RVA = "0x107E798", Offset = "0x107E798", VA = "0x107E798")]
		public void Once(SocketIOEventTypes type, SocketIOCallback callback)
		{
		}

		[Token(Token = "0x600260C")]
		[Address(RVA = "0x107E830", Offset = "0x107E830", VA = "0x107E830")]
		public void Once(string eventName, SocketIOCallback callback, bool autoDecodePayload)
		{
		}

		[Token(Token = "0x600260D")]
		[Address(RVA = "0x107E850", Offset = "0x107E850", VA = "0x107E850")]
		public void Once(SocketIOEventTypes type, SocketIOCallback callback, bool autoDecodePayload)
		{
		}

		[Token(Token = "0x600260E")]
		[Address(RVA = "0x107E8F4", Offset = "0x107E8F4", VA = "0x107E8F4")]
		public void Off()
		{
		}

		[Token(Token = "0x600260F")]
		[Address(RVA = "0x107E90C", Offset = "0x107E90C", VA = "0x107E90C")]
		public void Off(string eventName)
		{
		}

		[Token(Token = "0x6002610")]
		[Address(RVA = "0x107E924", Offset = "0x107E924", VA = "0x107E924")]
		public void Off(SocketIOEventTypes type)
		{
		}

		[Token(Token = "0x6002611")]
		[Address(RVA = "0x107D550", Offset = "0x107D550", VA = "0x107D550")]
		public void Off(string eventName, SocketIOCallback callback)
		{
		}

		[Token(Token = "0x6002612")]
		[Address(RVA = "0x107E9AC", Offset = "0x107E9AC", VA = "0x107E9AC")]
		public void Off(SocketIOEventTypes type, SocketIOCallback callback)
		{
		}

		[Token(Token = "0x6002613")]
		[Address(RVA = "0x107EA3C", Offset = "0x107EA3C", VA = "0x107EA3C", Slot = "6")]
		private void BestHTTP.SocketIO.ISocket.OnPacket(Packet packet)
		{
		}

		[Token(Token = "0x6002614")]
		[Address(RVA = "0x107EF90", Offset = "0x107EF90", VA = "0x107EF90", Slot = "7")]
		private void BestHTTP.SocketIO.ISocket.EmitEvent(SocketIOEventTypes type, params object[] args)
		{
		}

		[Token(Token = "0x6002615")]
		[Address(RVA = "0x107F07C", Offset = "0x107F07C", VA = "0x107F07C", Slot = "8")]
		private void BestHTTP.SocketIO.ISocket.EmitEvent(string eventName, params object[] args)
		{
		}

		[Token(Token = "0x6002616")]
		[Address(RVA = "0x107F0E0", Offset = "0x107F0E0", VA = "0x107F0E0", Slot = "9")]
		private void BestHTTP.SocketIO.ISocket.EmitError(SocketIOErrors errCode, string msg)
		{
		}

		[Token(Token = "0x6002617")]
		[Address(RVA = "0x107D420", Offset = "0x107D420", VA = "0x107D420")]
		private void OnTransportOpen(Socket socket, Packet packet, params object[] args)
		{
		}
	}
	[Token(Token = "0x2000435")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x81F454", Offset = "0x81F454")]
	public sealed class SocketManager : IHeartbeat, IManager
	{
		[Token(Token = "0x20006DF")]
		public enum States
		{
			[Token(Token = "0x400266A")]
			Initial,
			[Token(Token = "0x400266B")]
			Closed,
			[Token(Token = "0x400266C")]
			Opening,
			[Token(Token = "0x400266D")]
			Open,
			[Token(Token = "0x400266E")]
			Reconnecting
		}

		[Token(Token = "0x400155E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static BestHTTP.SocketIO.JsonEncoders.IJsonEncoder DefaultEncoder;

		[Token(Token = "0x400155F")]
		public const int MinProtocolVersion = 4;

		[Token(Token = "0x4001560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private States state;

		[Token(Token = "0x4001561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823D24", Offset = "0x823D24")]
		private SocketOptions <Options>k__BackingField;

		[Token(Token = "0x4001562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823D34", Offset = "0x823D34")]
		private Uri <Uri>k__BackingField;

		[Token(Token = "0x4001563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823D44", Offset = "0x823D44")]
		private HandshakeData <Handshake>k__BackingField;

		[Token(Token = "0x4001564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823D54", Offset = "0x823D54")]
		private ITransport <Transport>k__BackingField;

		[Token(Token = "0x4001565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823D64", Offset = "0x823D64")]
		private ulong <RequestCounter>k__BackingField;

		[Token(Token = "0x4001566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823D74", Offset = "0x823D74")]
		private int <ReconnectAttempts>k__BackingField;

		[Token(Token = "0x4001567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823D84", Offset = "0x823D84")]
		private BestHTTP.SocketIO.JsonEncoders.IJsonEncoder <Encoder>k__BackingField;

		[Token(Token = "0x4001568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int nextAckId;

		[Token(Token = "0x4001569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823D94", Offset = "0x823D94")]
		private States <PreviousState>k__BackingField;

		[Token(Token = "0x400156A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<string, Socket> Namespaces;

		[Token(Token = "0x400156B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<Socket> Sockets;

		[Token(Token = "0x400156C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<Packet> OfflinePackets;

		[Token(Token = "0x400156D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private DateTime LastHeartbeat;

		[Token(Token = "0x400156E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private DateTime LastPongReceived;

		[Token(Token = "0x400156F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private DateTime ReconnectAt;

		[Token(Token = "0x4001570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private DateTime ConnectionStarted;

		[Token(Token = "0x4001571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool closing;

		[Token(Token = "0x17000509")]
		public States State
		{
			[Token(Token = "0x6002618")]
			[Address(RVA = "0x107F22C", Offset = "0x107F22C", VA = "0x107F22C")]
			get
			{
				return default(States);
			}
			[Token(Token = "0x6002619")]
			[Address(RVA = "0x107F234", Offset = "0x107F234", VA = "0x107F234")]
			private set
			{
			}
		}

		[Token(Token = "0x1700050A")]
		public SocketOptions Options
		{
			[Token(Token = "0x600261A")]
			[Address(RVA = "0x107F244", Offset = "0x107F244", VA = "0x107F244")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831C48", Offset = "0x831C48")]
			get
			{
				return null;
			}
			[Token(Token = "0x600261B")]
			[Address(RVA = "0x107F24C", Offset = "0x107F24C", VA = "0x107F24C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831C58", Offset = "0x831C58")]
			private set
			{
			}
		}

		[Token(Token = "0x1700050B")]
		public Uri Uri
		{
			[Token(Token = "0x600261C")]
			[Address(RVA = "0x107F254", Offset = "0x107F254", VA = "0x107F254")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831C68", Offset = "0x831C68")]
			get
			{
				return null;
			}
			[Token(Token = "0x600261D")]
			[Address(RVA = "0x107F25C", Offset = "0x107F25C", VA = "0x107F25C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831C78", Offset = "0x831C78")]
			private set
			{
			}
		}

		[Token(Token = "0x1700050C")]
		public HandshakeData Handshake
		{
			[Token(Token = "0x600261E")]
			[Address(RVA = "0x107F264", Offset = "0x107F264", VA = "0x107F264")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831C88", Offset = "0x831C88")]
			get
			{
				return null;
			}
			[Token(Token = "0x600261F")]
			[Address(RVA = "0x107F26C", Offset = "0x107F26C", VA = "0x107F26C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831C98", Offset = "0x831C98")]
			private set
			{
			}
		}

		[Token(Token = "0x1700050D")]
		public ITransport Transport
		{
			[Token(Token = "0x6002620")]
			[Address(RVA = "0x107F274", Offset = "0x107F274", VA = "0x107F274")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831CA8", Offset = "0x831CA8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002621")]
			[Address(RVA = "0x107F27C", Offset = "0x107F27C", VA = "0x107F27C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831CB8", Offset = "0x831CB8")]
			private set
			{
			}
		}

		[Token(Token = "0x1700050E")]
		public ulong RequestCounter
		{
			[Token(Token = "0x6002622")]
			[Address(RVA = "0x107F284", Offset = "0x107F284", VA = "0x107F284")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831CC8", Offset = "0x831CC8")]
			get
			{
				return default(ulong);
			}
			[Token(Token = "0x6002623")]
			[Address(RVA = "0x107F28C", Offset = "0x107F28C", VA = "0x107F28C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831CD8", Offset = "0x831CD8")]
			internal set
			{
			}
		}

		[Token(Token = "0x1700050F")]
		public Socket Socket
		{
			[Token(Token = "0x6002624")]
			[Address(RVA = "0x107D41C", Offset = "0x107D41C", VA = "0x107D41C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000510")]
		public Socket Item
		{
			[Token(Token = "0x6002625")]
			[Address(RVA = "0x107F2E4", Offset = "0x107F2E4", VA = "0x107F2E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000511")]
		public int ReconnectAttempts
		{
			[Token(Token = "0x6002626")]
			[Address(RVA = "0x107F484", Offset = "0x107F484", VA = "0x107F484")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831CE8", Offset = "0x831CE8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002627")]
			[Address(RVA = "0x107F48C", Offset = "0x107F48C", VA = "0x107F48C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831CF8", Offset = "0x831CF8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000512")]
		public BestHTTP.SocketIO.JsonEncoders.IJsonEncoder Encoder
		{
			[Token(Token = "0x6002628")]
			[Address(RVA = "0x107F494", Offset = "0x107F494", VA = "0x107F494")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831D08", Offset = "0x831D08")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002629")]
			[Address(RVA = "0x107F49C", Offset = "0x107F49C", VA = "0x107F49C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831D18", Offset = "0x831D18")]
			set
			{
			}
		}

		[Token(Token = "0x17000513")]
		internal uint Timestamp
		{
			[Token(Token = "0x600262A")]
			[Address(RVA = "0x107AC24", Offset = "0x107AC24", VA = "0x107AC24")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x17000514")]
		internal int NextAckId
		{
			[Token(Token = "0x600262B")]
			[Address(RVA = "0x107E238", Offset = "0x107E238", VA = "0x107E238")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000515")]
		internal States PreviousState
		{
			[Token(Token = "0x600262C")]
			[Address(RVA = "0x107F4A4", Offset = "0x107F4A4", VA = "0x107F4A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831D28", Offset = "0x831D28")]
			get
			{
				return default(States);
			}
			[Token(Token = "0x600262D")]
			[Address(RVA = "0x107F4AC", Offset = "0x107F4AC", VA = "0x107F4AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831D38", Offset = "0x831D38")]
			private set
			{
			}
		}

		[Token(Token = "0x600262E")]
		[Address(RVA = "0x107F4B4", Offset = "0x107F4B4", VA = "0x107F4B4")]
		public SocketManager(Uri uri)
		{
		}

		[Token(Token = "0x600262F")]
		[Address(RVA = "0x107F5F0", Offset = "0x107F5F0", VA = "0x107F5F0")]
		public SocketManager(Uri uri, SocketOptions options)
		{
		}

		[Token(Token = "0x6002630")]
		[Address(RVA = "0x107F294", Offset = "0x107F294", VA = "0x107F294")]
		public Socket GetSocket()
		{
			return null;
		}

		[Token(Token = "0x6002631")]
		[Address(RVA = "0x107F2E8", Offset = "0x107F2E8", VA = "0x107F2E8")]
		public Socket GetSocket(string nsp)
		{
			return null;
		}

		[Token(Token = "0x6002632")]
		[Address(RVA = "0x107F714", Offset = "0x107F714", VA = "0x107F714", Slot = "5")]
		private void BestHTTP.SocketIO.IManager.Remove(Socket socket)
		{
		}

		[Token(Token = "0x6002633")]
		[Address(RVA = "0x107D58C", Offset = "0x107D58C", VA = "0x107D58C")]
		public void Open()
		{
		}

		[Token(Token = "0x6002634")]
		[Address(RVA = "0x107F7C4", Offset = "0x107F7C4", VA = "0x107F7C4")]
		public void Close()
		{
		}

		[Token(Token = "0x6002635")]
		[Address(RVA = "0x107F870", Offset = "0x107F870", VA = "0x107F870", Slot = "6")]
		private void BestHTTP.SocketIO.IManager.Close(bool removeSockets)
		{
		}

		[Token(Token = "0x6002636")]
		[Address(RVA = "0x107FC24", Offset = "0x107FC24", VA = "0x107FC24", Slot = "7")]
		private void BestHTTP.SocketIO.IManager.TryToReconnect()
		{
		}

		[Token(Token = "0x6002637")]
		[Address(RVA = "0x108011C", Offset = "0x108011C", VA = "0x108011C")]
		private void CreateTransports()
		{
		}

		[Token(Token = "0x6002638")]
		[Address(RVA = "0x10802A8", Offset = "0x10802A8", VA = "0x10802A8", Slot = "8")]
		private bool BestHTTP.SocketIO.IManager.OnTransportConnected(ITransport trans)
		{
			return default(bool);
		}

		[Token(Token = "0x6002639")]
		[Address(RVA = "0x1080634", Offset = "0x1080634", VA = "0x1080634", Slot = "9")]
		private void BestHTTP.SocketIO.IManager.OnTransportError(ITransport trans, string err)
		{
		}

		[Token(Token = "0x600263A")]
		[Address(RVA = "0x10809D8", Offset = "0x10809D8", VA = "0x10809D8")]
		private ITransport SelectTransport()
		{
			return null;
		}

		[Token(Token = "0x600263B")]
		[Address(RVA = "0x1080530", Offset = "0x1080530", VA = "0x1080530")]
		private void SendOfflinePackets()
		{
		}

		[Token(Token = "0x600263C")]
		[Address(RVA = "0x1080AAC", Offset = "0x1080AAC", VA = "0x1080AAC", Slot = "10")]
		private void BestHTTP.SocketIO.IManager.SendPacket(Packet packet)
		{
		}

		[Token(Token = "0x600263D")]
		[Address(RVA = "0x1080D14", Offset = "0x1080D14", VA = "0x1080D14", Slot = "11")]
		private void BestHTTP.SocketIO.IManager.OnPacket(Packet packet)
		{
		}

		[Token(Token = "0x600263E")]
		[Address(RVA = "0x1081000", Offset = "0x1081000", VA = "0x1081000")]
		public void EmitAll(string eventName, params object[] args)
		{
		}

		[Token(Token = "0x600263F")]
		[Address(RVA = "0x10810B0", Offset = "0x10810B0", VA = "0x10810B0", Slot = "12")]
		private void BestHTTP.SocketIO.IManager.EmitEvent(string eventName, params object[] args)
		{
		}

		[Token(Token = "0x6002640")]
		[Address(RVA = "0x10811B8", Offset = "0x10811B8", VA = "0x10811B8", Slot = "13")]
		private void BestHTTP.SocketIO.IManager.EmitEvent(SocketIOEventTypes type, params object[] args)
		{
		}

		[Token(Token = "0x6002641")]
		[Address(RVA = "0x10812A4", Offset = "0x10812A4", VA = "0x10812A4", Slot = "14")]
		private void BestHTTP.SocketIO.IManager.EmitError(SocketIOErrors errCode, string msg)
		{
		}

		[Token(Token = "0x6002642")]
		[Address(RVA = "0x10813F0", Offset = "0x10813F0", VA = "0x10813F0", Slot = "15")]
		private void BestHTTP.SocketIO.IManager.EmitAll(string eventName, params object[] args)
		{
		}

		[Token(Token = "0x6002643")]
		[Address(RVA = "0x1081504", Offset = "0x1081504", VA = "0x1081504", Slot = "4")]
		private void BestHTTP.Extensions.IHeartbeat.OnHeartbeatUpdate(TimeSpan dif)
		{
		}

		[Token(Token = "0x6002645")]
		[Address(RVA = "0x1081F94", Offset = "0x1081F94", VA = "0x1081F94")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831D48", Offset = "0x831D48")]
		private void <Open>b__61_0(HandshakeData hsd)
		{
		}

		[Token(Token = "0x6002646")]
		[Address(RVA = "0x1081F98", Offset = "0x1081F98", VA = "0x1081F98")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831D58", Offset = "0x831D58")]
		private void <Open>b__61_1(HandshakeData hsd, string err)
		{
		}
	}
	[Token(Token = "0x2000436")]
	public sealed class SocketOptions
	{
		[Token(Token = "0x4001572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823DA4", Offset = "0x823DA4")]
		private bool <Reconnection>k__BackingField;

		[Token(Token = "0x4001573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823DB4", Offset = "0x823DB4")]
		private int <ReconnectionAttempts>k__BackingField;

		[Token(Token = "0x4001574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823DC4", Offset = "0x823DC4")]
		private TimeSpan <ReconnectionDelay>k__BackingField;

		[Token(Token = "0x4001575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823DD4", Offset = "0x823DD4")]
		private TimeSpan <ReconnectionDelayMax>k__BackingField;

		[Token(Token = "0x4001576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float randomizationFactor;

		[Token(Token = "0x4001577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823DE4", Offset = "0x823DE4")]
		private TimeSpan <Timeout>k__BackingField;

		[Token(Token = "0x4001578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823DF4", Offset = "0x823DF4")]
		private bool <AutoConnect>k__BackingField;

		[Token(Token = "0x4001579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ObservableDictionary<string, string> additionalQueryParams;

		[Token(Token = "0x400157A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823E04", Offset = "0x823E04")]
		private bool <QueryParamsOnlyForHandshake>k__BackingField;

		[Token(Token = "0x400157B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string BuiltQueryParams;

		[Token(Token = "0x17000516")]
		public bool Reconnection
		{
			[Token(Token = "0x6002647")]
			[Address(RVA = "0x10820B8", Offset = "0x10820B8", VA = "0x10820B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831D68", Offset = "0x831D68")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002648")]
			[Address(RVA = "0x10820C0", Offset = "0x10820C0", VA = "0x10820C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831D78", Offset = "0x831D78")]
			set
			{
			}
		}

		[Token(Token = "0x17000517")]
		public int ReconnectionAttempts
		{
			[Token(Token = "0x6002649")]
			[Address(RVA = "0x10820CC", Offset = "0x10820CC", VA = "0x10820CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831D88", Offset = "0x831D88")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600264A")]
			[Address(RVA = "0x10820D4", Offset = "0x10820D4", VA = "0x10820D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831D98", Offset = "0x831D98")]
			set
			{
			}
		}

		[Token(Token = "0x17000518")]
		public TimeSpan ReconnectionDelay
		{
			[Token(Token = "0x600264B")]
			[Address(RVA = "0x10820DC", Offset = "0x10820DC", VA = "0x10820DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831DA8", Offset = "0x831DA8")]
			get
			{
				return default(TimeSpan);
			}
			[Token(Token = "0x600264C")]
			[Address(RVA = "0x10820E4", Offset = "0x10820E4", VA = "0x10820E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831DB8", Offset = "0x831DB8")]
			set
			{
			}
		}

		[Token(Token = "0x17000519")]
		public TimeSpan ReconnectionDelayMax
		{
			[Token(Token = "0x600264D")]
			[Address(RVA = "0x10820EC", Offset = "0x10820EC", VA = "0x10820EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831DC8", Offset = "0x831DC8")]
			get
			{
				return default(TimeSpan);
			}
			[Token(Token = "0x600264E")]
			[Address(RVA = "0x10820F4", Offset = "0x10820F4", VA = "0x10820F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831DD8", Offset = "0x831DD8")]
			set
			{
			}
		}

		[Token(Token = "0x1700051A")]
		public float RandomizationFactor
		{
			[Token(Token = "0x600264F")]
			[Address(RVA = "0x10820FC", Offset = "0x10820FC", VA = "0x10820FC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002650")]
			[Address(RVA = "0x1082104", Offset = "0x1082104", VA = "0x1082104")]
			set
			{
			}
		}

		[Token(Token = "0x1700051B")]
		public TimeSpan Timeout
		{
			[Token(Token = "0x6002651")]
			[Address(RVA = "0x1082194", Offset = "0x1082194", VA = "0x1082194")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831DE8", Offset = "0x831DE8")]
			get
			{
				return default(TimeSpan);
			}
			[Token(Token = "0x6002652")]
			[Address(RVA = "0x108219C", Offset = "0x108219C", VA = "0x108219C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831DF8", Offset = "0x831DF8")]
			set
			{
			}
		}

		[Token(Token = "0x1700051C")]
		public bool AutoConnect
		{
			[Token(Token = "0x6002653")]
			[Address(RVA = "0x10821A4", Offset = "0x10821A4", VA = "0x10821A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831E08", Offset = "0x831E08")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002654")]
			[Address(RVA = "0x10821AC", Offset = "0x10821AC", VA = "0x10821AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831E18", Offset = "0x831E18")]
			set
			{
			}
		}

		[Token(Token = "0x1700051D")]
		public ObservableDictionary<string, string> AdditionalQueryParams
		{
			[Token(Token = "0x6002655")]
			[Address(RVA = "0x10821B8", Offset = "0x10821B8", VA = "0x10821B8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002656")]
			[Address(RVA = "0x10821C0", Offset = "0x10821C0", VA = "0x10821C0")]
			set
			{
			}
		}

		[Token(Token = "0x1700051E")]
		public bool QueryParamsOnlyForHandshake
		{
			[Token(Token = "0x6002657")]
			[Address(RVA = "0x10822B4", Offset = "0x10822B4", VA = "0x10822B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831E28", Offset = "0x831E28")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002658")]
			[Address(RVA = "0x10822BC", Offset = "0x10822BC", VA = "0x10822BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831E38", Offset = "0x831E38")]
			set
			{
			}
		}

		[Token(Token = "0x6002659")]
		[Address(RVA = "0x107F524", Offset = "0x107F524", VA = "0x107F524")]
		public SocketOptions()
		{
		}

		[Token(Token = "0x600265A")]
		[Address(RVA = "0x107ACE8", Offset = "0x107ACE8", VA = "0x107ACE8")]
		internal string BuildQueryParams()
		{
			return null;
		}

		[Token(Token = "0x600265B")]
		[Address(RVA = "0x10822C8", Offset = "0x10822C8", VA = "0x10822C8")]
		private void AdditionalQueryParams_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
		{
		}
	}
}
namespace BestHTTP.SocketIO.Transports
{
	[Token(Token = "0x2000437")]
	public enum TransportStates
	{
		[Token(Token = "0x400157D")]
		Connecting,
		[Token(Token = "0x400157E")]
		Opening,
		[Token(Token = "0x400157F")]
		Open,
		[Token(Token = "0x4001580")]
		Closed,
		[Token(Token = "0x4001581")]
		Paused
	}
	[Token(Token = "0x2000438")]
	public interface ITransport
	{
		[Token(Token = "0x1700051F")]
		TransportStates State
		{
			[Token(Token = "0x600265C")]
			get;
		}

		[Token(Token = "0x17000520")]
		SocketManager Manager
		{
			[Token(Token = "0x600265D")]
			get;
		}

		[Token(Token = "0x17000521")]
		bool IsRequestInProgress
		{
			[Token(Token = "0x600265E")]
			get;
		}

		[Token(Token = "0x600265F")]
		void Open();

		[Token(Token = "0x6002660")]
		void Poll();

		[Token(Token = "0x6002661")]
		void Send(Packet packet);

		[Token(Token = "0x6002662")]
		void Send(List<Packet> packets);

		[Token(Token = "0x6002663")]
		void Close();
	}
	[Token(Token = "0x2000439")]
	internal sealed class PollingTransport : ITransport
	{
		[Token(Token = "0x4001582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823E14", Offset = "0x823E14")]
		private TransportStates <State>k__BackingField;

		[Token(Token = "0x4001583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823E24", Offset = "0x823E24")]
		private SocketManager <Manager>k__BackingField;

		[Token(Token = "0x4001584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HTTPRequest LastRequest;

		[Token(Token = "0x4001585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HTTPRequest PollRequest;

		[Token(Token = "0x4001586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Packet PacketWithAttachment;

		[Token(Token = "0x17000522")]
		public TransportStates State
		{
			[Token(Token = "0x6002664")]
			[Address(RVA = "0x10822D0", Offset = "0x10822D0", VA = "0x10822D0", Slot = "4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831E48", Offset = "0x831E48")]
			get
			{
				return default(TransportStates);
			}
			[Token(Token = "0x6002665")]
			[Address(RVA = "0x10822D8", Offset = "0x10822D8", VA = "0x10822D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831E58", Offset = "0x831E58")]
			private set
			{
			}
		}

		[Token(Token = "0x17000523")]
		public SocketManager Manager
		{
			[Token(Token = "0x6002666")]
			[Address(RVA = "0x10822E0", Offset = "0x10822E0", VA = "0x10822E0", Slot = "5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831E68", Offset = "0x831E68")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002667")]
			[Address(RVA = "0x10822E8", Offset = "0x10822E8", VA = "0x10822E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831E78", Offset = "0x831E78")]
			private set
			{
			}
		}

		[Token(Token = "0x17000524")]
		public bool IsRequestInProgress
		{
			[Token(Token = "0x6002668")]
			[Address(RVA = "0x10822F0", Offset = "0x10822F0", VA = "0x10822F0", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6002669")]
		[Address(RVA = "0x108027C", Offset = "0x108027C", VA = "0x108027C")]
		public PollingTransport(SocketManager manager)
		{
		}

		[Token(Token = "0x600266A")]
		[Address(RVA = "0x1082300", Offset = "0x1082300", VA = "0x1082300", Slot = "7")]
		public void Open()
		{
		}

		[Token(Token = "0x600266B")]
		[Address(RVA = "0x1082614", Offset = "0x1082614", VA = "0x1082614", Slot = "11")]
		public void Close()
		{
		}

		[Token(Token = "0x600266C")]
		[Address(RVA = "0x108262C", Offset = "0x108262C", VA = "0x108262C", Slot = "9")]
		public void Send(Packet packet)
		{
		}

		[Token(Token = "0x600266D")]
		[Address(RVA = "0x10826C4", Offset = "0x10826C4", VA = "0x10826C4", Slot = "10")]
		public void Send(List<Packet> packets)
		{
		}

		[Token(Token = "0x600266E")]
		[Address(RVA = "0x1082CE0", Offset = "0x1082CE0", VA = "0x1082CE0")]
		private void OnRequestFinished(HTTPRequest req, HTTPResponse resp)
		{
		}

		[Token(Token = "0x600266F")]
		[Address(RVA = "0x1083B68", Offset = "0x1083B68", VA = "0x1083B68", Slot = "8")]
		public void Poll()
		{
		}

		[Token(Token = "0x6002670")]
		[Address(RVA = "0x1083EA0", Offset = "0x1083EA0", VA = "0x1083EA0")]
		private void OnPollRequestFinished(HTTPRequest req, HTTPResponse resp)
		{
		}

		[Token(Token = "0x6002671")]
		[Address(RVA = "0x108434C", Offset = "0x108434C", VA = "0x108434C")]
		private void OnPacket(Packet packet)
		{
		}

		[Token(Token = "0x6002672")]
		[Address(RVA = "0x108318C", Offset = "0x108318C", VA = "0x108318C")]
		private void ParseResponse(HTTPResponse resp)
		{
		}
	}
	[Token(Token = "0x200043A")]
	internal sealed class WebSocketTransport : ITransport
	{
		[Token(Token = "0x4001587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823E34", Offset = "0x823E34")]
		private TransportStates <State>k__BackingField;

		[Token(Token = "0x4001588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823E44", Offset = "0x823E44")]
		private SocketManager <Manager>k__BackingField;

		[Token(Token = "0x4001589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823E54", Offset = "0x823E54")]
		private bool <IsRequestInProgress>k__BackingField;

		[Token(Token = "0x400158A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823E64", Offset = "0x823E64")]
		private BestHTTP.WebSocket.WebSocket <Implementation>k__BackingField;

		[Token(Token = "0x400158B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Packet PacketWithAttachment;

		[Token(Token = "0x400158C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private byte[] Buffer;

		[Token(Token = "0x17000525")]
		public TransportStates State
		{
			[Token(Token = "0x6002673")]
			[Address(RVA = "0x1084510", Offset = "0x1084510", VA = "0x1084510", Slot = "4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831E88", Offset = "0x831E88")]
			get
			{
				return default(TransportStates);
			}
			[Token(Token = "0x6002674")]
			[Address(RVA = "0x1084518", Offset = "0x1084518", VA = "0x1084518")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831E98", Offset = "0x831E98")]
			private set
			{
			}
		}

		[Token(Token = "0x17000526")]
		public SocketManager Manager
		{
			[Token(Token = "0x6002675")]
			[Address(RVA = "0x1084520", Offset = "0x1084520", VA = "0x1084520", Slot = "5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831EA8", Offset = "0x831EA8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002676")]
			[Address(RVA = "0x1084528", Offset = "0x1084528", VA = "0x1084528")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831EB8", Offset = "0x831EB8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000527")]
		public bool IsRequestInProgress
		{
			[Token(Token = "0x6002677")]
			[Address(RVA = "0x1084530", Offset = "0x1084530", VA = "0x1084530", Slot = "6")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831EC8", Offset = "0x831EC8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002678")]
			[Address(RVA = "0x1084538", Offset = "0x1084538", VA = "0x1084538")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831ED8", Offset = "0x831ED8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000528")]
		public BestHTTP.WebSocket.WebSocket Implementation
		{
			[Token(Token = "0x6002679")]
			[Address(RVA = "0x1084544", Offset = "0x1084544", VA = "0x1084544")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831EE8", Offset = "0x831EE8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600267A")]
			[Address(RVA = "0x108454C", Offset = "0x108454C", VA = "0x108454C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831EF8", Offset = "0x831EF8")]
			private set
			{
			}
		}

		[Token(Token = "0x600267B")]
		[Address(RVA = "0x1080248", Offset = "0x1080248", VA = "0x1080248")]
		public WebSocketTransport(SocketManager manager)
		{
		}

		[Token(Token = "0x600267C")]
		[Address(RVA = "0x1084554", Offset = "0x1084554", VA = "0x1084554", Slot = "7")]
		public void Open()
		{
		}

		[Token(Token = "0x600267D")]
		[Address(RVA = "0x108486C", Offset = "0x108486C", VA = "0x108486C", Slot = "11")]
		public void Close()
		{
		}

		[Token(Token = "0x600267E")]
		[Address(RVA = "0x10849A0", Offset = "0x10849A0", VA = "0x10849A0", Slot = "8")]
		public void Poll()
		{
		}

		[Token(Token = "0x600267F")]
		[Address(RVA = "0x10849A4", Offset = "0x10849A4", VA = "0x10849A4")]
		private void OnOpen(BestHTTP.WebSocket.WebSocket ws)
		{
		}

		[Token(Token = "0x6002680")]
		[Address(RVA = "0x1084F9C", Offset = "0x1084F9C", VA = "0x1084F9C")]
		private void OnMessage(BestHTTP.WebSocket.WebSocket ws, string message)
		{
		}

		[Token(Token = "0x6002681")]
		[Address(RVA = "0x10855B0", Offset = "0x10855B0", VA = "0x10855B0")]
		private void OnBinary(BestHTTP.WebSocket.WebSocket ws, byte[] data)
		{
		}

		[Token(Token = "0x6002682")]
		[Address(RVA = "0x1085948", Offset = "0x1085948", VA = "0x1085948")]
		private void OnError(BestHTTP.WebSocket.WebSocket ws, Exception ex)
		{
		}

		[Token(Token = "0x6002683")]
		[Address(RVA = "0x1085CEC", Offset = "0x1085CEC", VA = "0x1085CEC")]
		private void OnClosed(BestHTTP.WebSocket.WebSocket ws, ushort code, string message)
		{
		}

		[Token(Token = "0x6002684")]
		[Address(RVA = "0x1084B20", Offset = "0x1084B20", VA = "0x1084B20", Slot = "9")]
		public void Send(Packet packet)
		{
		}

		[Token(Token = "0x6002685")]
		[Address(RVA = "0x1085E8C", Offset = "0x1085E8C", VA = "0x1085E8C", Slot = "10")]
		public void Send(List<Packet> packets)
		{
		}

		[Token(Token = "0x6002686")]
		[Address(RVA = "0x10852F0", Offset = "0x10852F0", VA = "0x10852F0")]
		private void OnPacket(Packet packet)
		{
		}
	}
}
namespace BestHTTP.SocketIO.JsonEncoders
{
	[Token(Token = "0x200043B")]
	public sealed class DefaultJSonEncoder : IJsonEncoder
	{
		[Token(Token = "0x6002687")]
		[Address(RVA = "0x107BA94", Offset = "0x107BA94", VA = "0x107BA94", Slot = "4")]
		public List<object> Decode(string json)
		{
			return null;
		}

		[Token(Token = "0x6002688")]
		[Address(RVA = "0x107BB20", Offset = "0x107BB20", VA = "0x107BB20", Slot = "5")]
		public string Encode(List<object> obj)
		{
			return null;
		}

		[Token(Token = "0x6002689")]
		[Address(RVA = "0x107BB2C", Offset = "0x107BB2C", VA = "0x107BB2C")]
		public DefaultJSonEncoder()
		{
		}
	}
	[Token(Token = "0x200043C")]
	public interface IJsonEncoder
	{
		[Token(Token = "0x600268A")]
		List<object> Decode(string json);

		[Token(Token = "0x600268B")]
		string Encode(List<object> obj);
	}
}
namespace BestHTTP.SocketIO.Events
{
	[Token(Token = "0x200043D")]
	public delegate void SocketIOCallback(Socket socket, Packet packet, params object[] args);
	[Token(Token = "0x200043E")]
	public delegate void SocketIOAckCallback(Socket socket, Packet packet, params object[] args);
	[Token(Token = "0x200043F")]
	internal sealed class EventDescriptor
	{
		[Token(Token = "0x400158D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823E74", Offset = "0x823E74")]
		private List<SocketIOCallback> <Callbacks>k__BackingField;

		[Token(Token = "0x400158E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823E84", Offset = "0x823E84")]
		private bool <OnlyOnce>k__BackingField;

		[Token(Token = "0x400158F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823E94", Offset = "0x823E94")]
		private bool <AutoDecodePayload>k__BackingField;

		[Token(Token = "0x4001590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private SocketIOCallback[] CallbackArray;

		[Token(Token = "0x17000529")]
		public List<SocketIOCallback> Callbacks
		{
			[Token(Token = "0x6002694")]
			[Address(RVA = "0x10785C8", Offset = "0x10785C8", VA = "0x10785C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831F08", Offset = "0x831F08")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002695")]
			[Address(RVA = "0x10785D0", Offset = "0x10785D0", VA = "0x10785D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831F18", Offset = "0x831F18")]
			private set
			{
			}
		}

		[Token(Token = "0x1700052A")]
		public bool OnlyOnce
		{
			[Token(Token = "0x6002696")]
			[Address(RVA = "0x10785D8", Offset = "0x10785D8", VA = "0x10785D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831F28", Offset = "0x831F28")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002697")]
			[Address(RVA = "0x10785E0", Offset = "0x10785E0", VA = "0x10785E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831F38", Offset = "0x831F38")]
			private set
			{
			}
		}

		[Token(Token = "0x1700052B")]
		public bool AutoDecodePayload
		{
			[Token(Token = "0x6002698")]
			[Address(RVA = "0x10785EC", Offset = "0x10785EC", VA = "0x10785EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831F48", Offset = "0x831F48")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002699")]
			[Address(RVA = "0x10785F4", Offset = "0x10785F4", VA = "0x10785F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831F58", Offset = "0x831F58")]
			private set
			{
			}
		}

		[Token(Token = "0x600269A")]
		[Address(RVA = "0x1078600", Offset = "0x1078600", VA = "0x1078600")]
		public EventDescriptor(bool onlyOnce, bool autoDecodePayload, SocketIOCallback callback)
		{
		}

		[Token(Token = "0x600269B")]
		[Address(RVA = "0x10786D8", Offset = "0x10786D8", VA = "0x10786D8")]
		public void Call(Socket socket, Packet packet, params object[] args)
		{
		}
	}
	[Token(Token = "0x2000440")]
	public static class EventNames
	{
		[Token(Token = "0x4001591")]
		public const string Connect = "connect";

		[Token(Token = "0x4001592")]
		public const string Disconnect = "disconnect";

		[Token(Token = "0x4001593")]
		public const string Event = "event";

		[Token(Token = "0x4001594")]
		public const string Ack = "ack";

		[Token(Token = "0x4001595")]
		public const string Error = "error";

		[Token(Token = "0x4001596")]
		public const string BinaryEvent = "binaryevent";

		[Token(Token = "0x4001597")]
		public const string BinaryAck = "binaryack";

		[Token(Token = "0x4001598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string[] SocketIONames;

		[Token(Token = "0x4001599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static string[] TransportNames;

		[Token(Token = "0x400159A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static string[] BlacklistedEvents;

		[Token(Token = "0x600269C")]
		[Address(RVA = "0x1078E8C", Offset = "0x1078E8C", VA = "0x1078E8C")]
		public static string GetNameFor(SocketIOEventTypes type)
		{
			return null;
		}

		[Token(Token = "0x600269D")]
		[Address(RVA = "0x1078F24", Offset = "0x1078F24", VA = "0x1078F24")]
		public static string GetNameFor(TransportEventTypes transEvent)
		{
			return null;
		}

		[Token(Token = "0x600269E")]
		[Address(RVA = "0x1078FBC", Offset = "0x1078FBC", VA = "0x1078FBC")]
		public static bool IsBlacklisted(string eventName)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000441")]
	internal sealed class EventTable
	{
		[Token(Token = "0x20006E0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820E50", Offset = "0x820E50")]
		private sealed class <>c__DisplayClass6_0
		{
			[Token(Token = "0x400266F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool onlyOnce;

			[Token(Token = "0x4002670")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			public bool autoDecodePayload;

			[Token(Token = "0x600362F")]
			[Address(RVA = "0x1079910", Offset = "0x1079910", VA = "0x1079910")]
			public <>c__DisplayClass6_0()
			{
			}

			[Token(Token = "0x6003630")]
			[Address(RVA = "0x107A32C", Offset = "0x107A32C", VA = "0x107A32C")]
			internal bool <Register>b__0(EventDescriptor d)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x400159B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823EA4", Offset = "0x823EA4")]
		private Socket <Socket>k__BackingField;

		[Token(Token = "0x400159C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<string, List<EventDescriptor>> Table;

		[Token(Token = "0x1700052C")]
		private Socket Socket
		{
			[Token(Token = "0x60026A0")]
			[Address(RVA = "0x10796AC", Offset = "0x10796AC", VA = "0x10796AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831F68", Offset = "0x831F68")]
			get
			{
				return null;
			}
			[Token(Token = "0x60026A1")]
			[Address(RVA = "0x10796B4", Offset = "0x10796B4", VA = "0x10796B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831F78", Offset = "0x831F78")]
			set
			{
			}
		}

		[Token(Token = "0x60026A2")]
		[Address(RVA = "0x10796BC", Offset = "0x10796BC", VA = "0x10796BC")]
		public EventTable(Socket socket)
		{
		}

		[Token(Token = "0x60026A3")]
		[Address(RVA = "0x1079740", Offset = "0x1079740", VA = "0x1079740")]
		public void Register(string eventName, SocketIOCallback callback, bool onlyOnce, bool autoDecodePayload)
		{
		}

		[Token(Token = "0x60026A4")]
		[Address(RVA = "0x1079918", Offset = "0x1079918", VA = "0x1079918")]
		public void Unregister(string eventName)
		{
		}

		[Token(Token = "0x60026A5")]
		[Address(RVA = "0x1079980", Offset = "0x1079980", VA = "0x1079980")]
		public void Unregister(string eventName, SocketIOCallback callback)
		{
		}

		[Token(Token = "0x60026A6")]
		[Address(RVA = "0x1079A64", Offset = "0x1079A64", VA = "0x1079A64")]
		public void Call(string eventName, Packet packet, params object[] args)
		{
		}

		[Token(Token = "0x60026A7")]
		[Address(RVA = "0x1079CA8", Offset = "0x1079CA8", VA = "0x1079CA8")]
		public void Call(Packet packet)
		{
		}

		[Token(Token = "0x60026A8")]
		[Address(RVA = "0x107A2D4", Offset = "0x107A2D4", VA = "0x107A2D4")]
		public void Clear()
		{
		}

		[Token(Token = "0x60026A9")]
		[Address(RVA = "0x107A08C", Offset = "0x107A08C", VA = "0x107A08C")]
		private bool ShouldDecodePayload(string eventName)
		{
			return default(bool);
		}

		[Token(Token = "0x60026AA")]
		[Address(RVA = "0x107A024", Offset = "0x107A024", VA = "0x107A024")]
		private bool HasSubsciber(string eventName)
		{
			return default(bool);
		}
	}
}
namespace BestHTTP.SignalR
{
	[Token(Token = "0x2000442")]
	public delegate void OnNonHubMessageDelegate(Connection connection, object data);
	[Token(Token = "0x2000443")]
	public delegate void OnConnectedDelegate(Connection connection);
	[Token(Token = "0x2000444")]
	public delegate void OnClosedDelegate(Connection connection);
	[Token(Token = "0x2000445")]
	public delegate void OnErrorDelegate(Connection connection, string error);
	[Token(Token = "0x2000446")]
	public delegate void OnStateChanged(Connection connection, ConnectionStates oldState, ConnectionStates newState);
	[Token(Token = "0x2000447")]
	public delegate void OnPrepareRequestDelegate(Connection connection, HTTPRequest req, RequestTypes type);
	[Token(Token = "0x2000448")]
	public interface IConnection
	{
		[Token(Token = "0x1700052D")]
		ProtocolVersions Protocol
		{
			[Token(Token = "0x60026C3")]
			get;
		}

		[Token(Token = "0x1700052E")]
		NegotiationData NegotiationResult
		{
			[Token(Token = "0x60026C4")]
			get;
		}

		[Token(Token = "0x1700052F")]
		BestHTTP.SignalR.JsonEncoders.IJsonEncoder JsonEncoder
		{
			[Token(Token = "0x60026C5")]
			get;
			[Token(Token = "0x60026C6")]
			set;
		}

		[Token(Token = "0x60026C7")]
		void OnMessage(IServerMessage msg);

		[Token(Token = "0x60026C8")]
		void TransportStarted();

		[Token(Token = "0x60026C9")]
		void TransportReconnected();

		[Token(Token = "0x60026CA")]
		void TransportAborted();

		[Token(Token = "0x60026CB")]
		void Error(string reason);

		[Token(Token = "0x60026CC")]
		Uri BuildUri(RequestTypes type);

		[Token(Token = "0x60026CD")]
		Uri BuildUri(RequestTypes type, TransportBase transport);

		[Token(Token = "0x60026CE")]
		HTTPRequest PrepareRequest(HTTPRequest req, RequestTypes type);

		[Token(Token = "0x60026CF")]
		string ParseResponse(string responseStr);
	}
	[Token(Token = "0x2000449")]
	public enum ProtocolVersions : byte
	{
		[Token(Token = "0x400159E")]
		Protocol_2_0,
		[Token(Token = "0x400159F")]
		Protocol_2_1,
		[Token(Token = "0x40015A0")]
		Protocol_2_2
	}
	[Token(Token = "0x200044A")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x81F48C", Offset = "0x81F48C")]
	public sealed class Connection : IHeartbeat, IConnection
	{
		[Token(Token = "0x40015A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static BestHTTP.SignalR.JsonEncoders.IJsonEncoder DefaultEncoder;

		[Token(Token = "0x40015A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823EB4", Offset = "0x823EB4")]
		private Uri <Uri>k__BackingField;

		[Token(Token = "0x40015A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ConnectionStates _state;

		[Token(Token = "0x40015A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823EC4", Offset = "0x823EC4")]
		private NegotiationData <NegotiationResult>k__BackingField;

		[Token(Token = "0x40015A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823ED4", Offset = "0x823ED4")]
		private Hub[] <Hubs>k__BackingField;

		[Token(Token = "0x40015A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823EE4", Offset = "0x823EE4")]
		private TransportBase <Transport>k__BackingField;

		[Token(Token = "0x40015A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ObservableDictionary<string, string> additionalQueryParams;

		[Token(Token = "0x40015A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823EF4", Offset = "0x823EF4")]
		private bool <QueryParamsOnlyForHandshake>k__BackingField;

		[Token(Token = "0x40015A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823F04", Offset = "0x823F04")]
		private BestHTTP.SignalR.JsonEncoders.IJsonEncoder <JsonEncoder>k__BackingField;

		[Token(Token = "0x40015AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823F14", Offset = "0x823F14")]
		private IAuthenticationProvider <AuthenticationProvider>k__BackingField;

		[Token(Token = "0x40015B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823F94", Offset = "0x823F94")]
		private OnPrepareRequestDelegate <RequestPreparator>k__BackingField;

		[Token(Token = "0x40015B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823FA4", Offset = "0x823FA4")]
		private ProtocolVersions <Protocol>k__BackingField;

		[Token(Token = "0x40015B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal object SyncRoot;

		[Token(Token = "0x40015B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823FB4", Offset = "0x823FB4")]
		private ulong <ClientMessageCounter>k__BackingField;

		[Token(Token = "0x40015B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private readonly string[] ClientProtocols;

		[Token(Token = "0x40015B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private ulong RequestCounter;

		[Token(Token = "0x40015B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private MultiMessage LastReceivedMessage;

		[Token(Token = "0x40015B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private string GroupsToken;

		[Token(Token = "0x40015BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private List<IServerMessage> BufferedMessages;

		[Token(Token = "0x40015BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private DateTime LastMessageReceivedAt;

		[Token(Token = "0x40015BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private DateTime ReconnectStartedAt;

		[Token(Token = "0x40015BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private bool ReconnectStarted;

		[Token(Token = "0x40015BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private DateTime LastPingSentAt;

		[Token(Token = "0x40015BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private TimeSpan PingInterval;

		[Token(Token = "0x40015C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private HTTPRequest PingRequest;

		[Token(Token = "0x40015C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private DateTime? TransportConnectionStartedAt;

		[Token(Token = "0x40015C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private StringBuilder queryBuilder;

		[Token(Token = "0x40015C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private string BuiltConnectionData;

		[Token(Token = "0x40015C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private string BuiltQueryParams;

		[Token(Token = "0x40015C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private SupportedProtocols NextProtocolToTry;

		[Token(Token = "0x17000530")]
		public Uri Uri
		{
			[Token(Token = "0x60026D0")]
			[Address(RVA = "0xBD18E8", Offset = "0xBD18E8", VA = "0xBD18E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831F88", Offset = "0x831F88")]
			get
			{
				return null;
			}
			[Token(Token = "0x60026D1")]
			[Address(RVA = "0xBD18F0", Offset = "0xBD18F0", VA = "0xBD18F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831F98", Offset = "0x831F98")]
			private set
			{
			}
		}

		[Token(Token = "0x17000531")]
		public ConnectionStates State
		{
			[Token(Token = "0x60026D2")]
			[Address(RVA = "0xBD18F8", Offset = "0xBD18F8", VA = "0xBD18F8")]
			get
			{
				return default(ConnectionStates);
			}
			[Token(Token = "0x60026D3")]
			[Address(RVA = "0xBD1900", Offset = "0xBD1900", VA = "0xBD1900")]
			private set
			{
			}
		}

		[Token(Token = "0x17000532")]
		public NegotiationData NegotiationResult
		{
			[Token(Token = "0x60026D4")]
			[Address(RVA = "0xBD1928", Offset = "0xBD1928", VA = "0xBD1928", Slot = "6")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831FA8", Offset = "0x831FA8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60026D5")]
			[Address(RVA = "0xBD1930", Offset = "0xBD1930", VA = "0xBD1930")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831FB8", Offset = "0x831FB8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000533")]
		public Hub[] Hubs
		{
			[Token(Token = "0x60026D6")]
			[Address(RVA = "0xBD1938", Offset = "0xBD1938", VA = "0xBD1938")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831FC8", Offset = "0x831FC8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60026D7")]
			[Address(RVA = "0xBD1940", Offset = "0xBD1940", VA = "0xBD1940")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831FD8", Offset = "0x831FD8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000534")]
		public TransportBase Transport
		{
			[Token(Token = "0x60026D8")]
			[Address(RVA = "0xBD1948", Offset = "0xBD1948", VA = "0xBD1948")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831FE8", Offset = "0x831FE8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60026D9")]
			[Address(RVA = "0xBD1950", Offset = "0xBD1950", VA = "0xBD1950")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x831FF8", Offset = "0x831FF8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000535")]
		public ObservableDictionary<string, string> AdditionalQueryParams
		{
			[Token(Token = "0x60026DA")]
			[Address(RVA = "0xBD1958", Offset = "0xBD1958", VA = "0xBD1958")]
			get
			{
				return null;
			}
			[Token(Token = "0x60026DB")]
			[Address(RVA = "0xBD1960", Offset = "0xBD1960", VA = "0xBD1960")]
			set
			{
			}
		}

		[Token(Token = "0x17000536")]
		public bool QueryParamsOnlyForHandshake
		{
			[Token(Token = "0x60026DC")]
			[Address(RVA = "0xBD1A54", Offset = "0xBD1A54", VA = "0xBD1A54")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832008", Offset = "0x832008")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60026DD")]
			[Address(RVA = "0xBD1A5C", Offset = "0xBD1A5C", VA = "0xBD1A5C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832018", Offset = "0x832018")]
			set
			{
			}
		}

		[Token(Token = "0x17000537")]
		public BestHTTP.SignalR.JsonEncoders.IJsonEncoder JsonEncoder
		{
			[Token(Token = "0x60026DE")]
			[Address(RVA = "0xBD1A68", Offset = "0xBD1A68", VA = "0xBD1A68", Slot = "7")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832028", Offset = "0x832028")]
			get
			{
				return null;
			}
			[Token(Token = "0x60026DF")]
			[Address(RVA = "0xBD1A70", Offset = "0xBD1A70", VA = "0xBD1A70", Slot = "8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832038", Offset = "0x832038")]
			set
			{
			}
		}

		[Token(Token = "0x17000538")]
		public IAuthenticationProvider AuthenticationProvider
		{
			[Token(Token = "0x60026E0")]
			[Address(RVA = "0xBD1A78", Offset = "0xBD1A78", VA = "0xBD1A78")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832048", Offset = "0x832048")]
			get
			{
				return null;
			}
			[Token(Token = "0x60026E1")]
			[Address(RVA = "0xBD1A80", Offset = "0xBD1A80", VA = "0xBD1A80")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832058", Offset = "0x832058")]
			set
			{
			}
		}

		[Token(Token = "0x17000539")]
		public OnPrepareRequestDelegate RequestPreparator
		{
			[Token(Token = "0x60026F0")]
			[Address(RVA = "0xBD2380", Offset = "0xBD2380", VA = "0xBD2380")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832148", Offset = "0x832148")]
			get
			{
				return null;
			}
			[Token(Token = "0x60026F1")]
			[Address(RVA = "0xBD2388", Offset = "0xBD2388", VA = "0xBD2388")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832158", Offset = "0x832158")]
			set
			{
			}
		}

		[Token(Token = "0x1700053A")]
		public Hub Item
		{
			[Token(Token = "0x60026F2")]
			[Address(RVA = "0xBD2390", Offset = "0xBD2390", VA = "0xBD2390")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700053B")]
		public Hub Item
		{
			[Token(Token = "0x60026F3")]
			[Address(RVA = "0xBD23CC", Offset = "0xBD23CC", VA = "0xBD23CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700053C")]
		public ProtocolVersions Protocol
		{
			[Token(Token = "0x60026F4")]
			[Address(RVA = "0xBD2460", Offset = "0xBD2460", VA = "0xBD2460", Slot = "5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832168", Offset = "0x832168")]
			get
			{
				return default(ProtocolVersions);
			}
			[Token(Token = "0x60026F5")]
			[Address(RVA = "0xBD2468", Offset = "0xBD2468", VA = "0xBD2468")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832178", Offset = "0x832178")]
			private set
			{
			}
		}

		[Token(Token = "0x1700053D")]
		internal ulong ClientMessageCounter
		{
			[Token(Token = "0x60026F6")]
			[Address(RVA = "0xBD2470", Offset = "0xBD2470", VA = "0xBD2470")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832188", Offset = "0x832188")]
			get
			{
				return default(ulong);
			}
			[Token(Token = "0x60026F7")]
			[Address(RVA = "0xBD2478", Offset = "0xBD2478", VA = "0xBD2478")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832198", Offset = "0x832198")]
			set
			{
			}
		}

		[Token(Token = "0x1700053E")]
		private uint Timestamp
		{
			[Token(Token = "0x60026F8")]
			[Address(RVA = "0xBD2480", Offset = "0xBD2480", VA = "0xBD2480")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x1700053F")]
		private string ConnectionData
		{
			[Token(Token = "0x60026F9")]
			[Address(RVA = "0xBD2520", Offset = "0xBD2520", VA = "0xBD2520")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000540")]
		private string QueryParams
		{
			[Token(Token = "0x60026FA")]
			[Address(RVA = "0xBD26EC", Offset = "0xBD26EC", VA = "0xBD26EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000018")]
		public event OnConnectedDelegate OnConnected
		{
			[Token(Token = "0x60026E2")]
			[Address(RVA = "0xBD1A88", Offset = "0xBD1A88", VA = "0xBD1A88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832068", Offset = "0x832068")]
			add
			{
			}
			[Token(Token = "0x60026E3")]
			[Address(RVA = "0xBD1B2C", Offset = "0xBD1B2C", VA = "0xBD1B2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832078", Offset = "0x832078")]
			remove
			{
			}
		}

		[Token(Token = "0x14000019")]
		public event OnClosedDelegate OnClosed
		{
			[Token(Token = "0x60026E4")]
			[Address(RVA = "0xBD1BD0", Offset = "0xBD1BD0", VA = "0xBD1BD0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832088", Offset = "0x832088")]
			add
			{
			}
			[Token(Token = "0x60026E5")]
			[Address(RVA = "0xBD1C74", Offset = "0xBD1C74", VA = "0xBD1C74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832098", Offset = "0x832098")]
			remove
			{
			}
		}

		[Token(Token = "0x1400001A")]
		public event OnErrorDelegate OnError
		{
			[Token(Token = "0x60026E6")]
			[Address(RVA = "0xBD1D18", Offset = "0xBD1D18", VA = "0xBD1D18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8320A8", Offset = "0x8320A8")]
			add
			{
			}
			[Token(Token = "0x60026E7")]
			[Address(RVA = "0xBD1DBC", Offset = "0xBD1DBC", VA = "0xBD1DBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8320B8", Offset = "0x8320B8")]
			remove
			{
			}
		}

		[Token(Token = "0x1400001B")]
		public event OnConnectedDelegate OnReconnecting
		{
			[Token(Token = "0x60026E8")]
			[Address(RVA = "0xBD1E60", Offset = "0xBD1E60", VA = "0xBD1E60")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8320C8", Offset = "0x8320C8")]
			add
			{
			}
			[Token(Token = "0x60026E9")]
			[Address(RVA = "0xBD1F04", Offset = "0xBD1F04", VA = "0xBD1F04")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8320D8", Offset = "0x8320D8")]
			remove
			{
			}
		}

		[Token(Token = "0x1400001C")]
		public event OnConnectedDelegate OnReconnected
		{
			[Token(Token = "0x60026EA")]
			[Address(RVA = "0xBD1FA8", Offset = "0xBD1FA8", VA = "0xBD1FA8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8320E8", Offset = "0x8320E8")]
			add
			{
			}
			[Token(Token = "0x60026EB")]
			[Address(RVA = "0xBD204C", Offset = "0xBD204C", VA = "0xBD204C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8320F8", Offset = "0x8320F8")]
			remove
			{
			}
		}

		[Token(Token = "0x1400001D")]
		public event OnStateChanged OnStateChanged
		{
			[Token(Token = "0x60026EC")]
			[Address(RVA = "0xBD20F0", Offset = "0xBD20F0", VA = "0xBD20F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832108", Offset = "0x832108")]
			add
			{
			}
			[Token(Token = "0x60026ED")]
			[Address(RVA = "0xBD2194", Offset = "0xBD2194", VA = "0xBD2194")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832118", Offset = "0x832118")]
			remove
			{
			}
		}

		[Token(Token = "0x1400001E")]
		public event OnNonHubMessageDelegate OnNonHubMessage
		{
			[Token(Token = "0x60026EE")]
			[Address(RVA = "0xBD2238", Offset = "0xBD2238", VA = "0xBD2238")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832128", Offset = "0x832128")]
			add
			{
			}
			[Token(Token = "0x60026EF")]
			[Address(RVA = "0xBD22DC", Offset = "0xBD22DC", VA = "0xBD22DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832138", Offset = "0x832138")]
			remove
			{
			}
		}

		[Token(Token = "0x60026FB")]
		[Address(RVA = "0xBD2A48", Offset = "0xBD2A48", VA = "0xBD2A48")]
		public Connection(Uri uri, params string[] hubNames)
		{
		}

		[Token(Token = "0x60026FC")]
		[Address(RVA = "0xBD2EB4", Offset = "0xBD2EB4", VA = "0xBD2EB4")]
		public Connection(Uri uri, params Hub[] hubs)
		{
		}

		[Token(Token = "0x60026FD")]
		[Address(RVA = "0xBD2B80", Offset = "0xBD2B80", VA = "0xBD2B80")]
		public Connection(Uri uri)
		{
		}

		[Token(Token = "0x60026FE")]
		[Address(RVA = "0xBD2FD4", Offset = "0xBD2FD4", VA = "0xBD2FD4")]
		public void Open()
		{
		}

		[Token(Token = "0x60026FF")]
		[Address(RVA = "0xBD33A8", Offset = "0xBD33A8", VA = "0xBD33A8")]
		private void OnAuthenticationSucceded(IAuthenticationProvider provider)
		{
		}

		[Token(Token = "0x6002700")]
		[Address(RVA = "0xBD349C", Offset = "0xBD349C", VA = "0xBD349C")]
		private void OnAuthenticationFailed(IAuthenticationProvider provider, string reason)
		{
		}

		[Token(Token = "0x6002701")]
		[Address(RVA = "0xBD328C", Offset = "0xBD328C", VA = "0xBD328C")]
		private void StartImpl()
		{
		}

		[Token(Token = "0x6002702")]
		[Address(RVA = "0xBD35FC", Offset = "0xBD35FC", VA = "0xBD35FC")]
		private void OnNegotiationDataReceived(NegotiationData data)
		{
		}

		[Token(Token = "0x6002703")]
		[Address(RVA = "0xBD388C", Offset = "0xBD388C", VA = "0xBD388C")]
		private void OnNegotiationError(NegotiationData data, string error)
		{
		}

		[Token(Token = "0x6002704")]
		[Address(RVA = "0xBD3944", Offset = "0xBD3944", VA = "0xBD3944")]
		public void Close()
		{
		}

		[Token(Token = "0x6002705")]
		[Address(RVA = "0xBD3C34", Offset = "0xBD3C34", VA = "0xBD3C34")]
		public void Reconnect()
		{
		}

		[Token(Token = "0x6002706")]
		[Address(RVA = "0xBD3F14", Offset = "0xBD3F14", VA = "0xBD3F14")]
		public bool Send(object arg)
		{
			return default(bool);
		}

		[Token(Token = "0x6002707")]
		[Address(RVA = "0xBD41D0", Offset = "0xBD41D0", VA = "0xBD41D0")]
		public bool SendJson(string json)
		{
			return default(bool);
		}

		[Token(Token = "0x6002708")]
		[Address(RVA = "0xBD4328", Offset = "0xBD4328", VA = "0xBD4328", Slot = "9")]
		private void BestHTTP.SignalR.IConnection.OnMessage(IServerMessage msg)
		{
		}

		[Token(Token = "0x6002709")]
		[Address(RVA = "0xBD4CF4", Offset = "0xBD4CF4", VA = "0xBD4CF4", Slot = "10")]
		private void BestHTTP.SignalR.IConnection.TransportStarted()
		{
		}

		[Token(Token = "0x600270A")]
		[Address(RVA = "0xBD5048", Offset = "0xBD5048", VA = "0xBD5048", Slot = "11")]
		private void BestHTTP.SignalR.IConnection.TransportReconnected()
		{
		}

		[Token(Token = "0x600270B")]
		[Address(RVA = "0xBD52B0", Offset = "0xBD52B0", VA = "0xBD52B0", Slot = "12")]
		private void BestHTTP.SignalR.IConnection.TransportAborted()
		{
		}

		[Token(Token = "0x600270C")]
		[Address(RVA = "0xBD52B4", Offset = "0xBD52B4", VA = "0xBD52B4", Slot = "13")]
		private void BestHTTP.SignalR.IConnection.Error(string reason)
		{
		}

		[Token(Token = "0x600270D")]
		[Address(RVA = "0xBD5598", Offset = "0xBD5598", VA = "0xBD5598", Slot = "14")]
		private Uri BestHTTP.SignalR.IConnection.BuildUri(RequestTypes type)
		{
			return null;
		}

		[Token(Token = "0x600270E")]
		[Address(RVA = "0xBD5654", Offset = "0xBD5654", VA = "0xBD5654", Slot = "15")]
		private Uri BestHTTP.SignalR.IConnection.BuildUri(RequestTypes type, TransportBase transport)
		{
			return null;
		}

		[Token(Token = "0x600270F")]
		[Address(RVA = "0xBD5F48", Offset = "0xBD5F48", VA = "0xBD5F48", Slot = "16")]
		private HTTPRequest BestHTTP.SignalR.IConnection.PrepareRequest(HTTPRequest req, RequestTypes type)
		{
			return null;
		}

		[Token(Token = "0x6002710")]
		[Address(RVA = "0xBD6038", Offset = "0xBD6038", VA = "0xBD6038", Slot = "17")]
		private string BestHTTP.SignalR.IConnection.ParseResponse(string responseStr)
		{
			return null;
		}

		[Token(Token = "0x6002711")]
		[Address(RVA = "0xBD621C", Offset = "0xBD621C", VA = "0xBD621C", Slot = "4")]
		private void BestHTTP.Extensions.IHeartbeat.OnHeartbeatUpdate(TimeSpan dif)
		{
		}

		[Token(Token = "0x6002712")]
		[Address(RVA = "0xBD4F6C", Offset = "0xBD4F6C", VA = "0xBD4F6C")]
		private void InitOnStart()
		{
		}

		[Token(Token = "0x6002713")]
		[Address(RVA = "0xBD4BBC", Offset = "0xBD4BBC", VA = "0xBD4BBC")]
		private Hub FindHub(ulong msgId)
		{
			return null;
		}

		[Token(Token = "0x6002714")]
		[Address(RVA = "0xBD5428", Offset = "0xBD5428", VA = "0xBD5428")]
		private bool TryFallbackTransport()
		{
			return default(bool);
		}

		[Token(Token = "0x6002715")]
		[Address(RVA = "0xBD692C", Offset = "0xBD692C", VA = "0xBD692C")]
		private void AdditionalQueryParams_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
		{
		}

		[Token(Token = "0x6002716")]
		[Address(RVA = "0xBD6718", Offset = "0xBD6718", VA = "0xBD6718")]
		private void Ping()
		{
		}

		[Token(Token = "0x6002717")]
		[Address(RVA = "0xBD6934", Offset = "0xBD6934", VA = "0xBD6934")]
		private void OnPingRequestFinished(HTTPRequest req, HTTPResponse resp)
		{
		}
	}
	[Token(Token = "0x200044B")]
	public enum TransportTypes
	{
		[Token(Token = "0x40015C7")]
		WebSocket,
		[Token(Token = "0x40015C8")]
		ServerSentEvents,
		[Token(Token = "0x40015C9")]
		LongPoll
	}
	[Token(Token = "0x200044C")]
	public enum MessageTypes
	{
		[Token(Token = "0x40015CB")]
		KeepAlive,
		[Token(Token = "0x40015CC")]
		Data,
		[Token(Token = "0x40015CD")]
		Multiple,
		[Token(Token = "0x40015CE")]
		Result,
		[Token(Token = "0x40015CF")]
		Failure,
		[Token(Token = "0x40015D0")]
		MethodCall,
		[Token(Token = "0x40015D1")]
		Progress
	}
	[Token(Token = "0x200044D")]
	public enum ConnectionStates
	{
		[Token(Token = "0x40015D3")]
		Initial,
		[Token(Token = "0x40015D4")]
		Authenticating,
		[Token(Token = "0x40015D5")]
		Negotiating,
		[Token(Token = "0x40015D6")]
		Connecting,
		[Token(Token = "0x40015D7")]
		Connected,
		[Token(Token = "0x40015D8")]
		Reconnecting,
		[Token(Token = "0x40015D9")]
		Closed
	}
	[Token(Token = "0x200044E")]
	public enum RequestTypes
	{
		[Token(Token = "0x40015DB")]
		Negotiate,
		[Token(Token = "0x40015DC")]
		Connect,
		[Token(Token = "0x40015DD")]
		Start,
		[Token(Token = "0x40015DE")]
		Poll,
		[Token(Token = "0x40015DF")]
		Send,
		[Token(Token = "0x40015E0")]
		Reconnect,
		[Token(Token = "0x40015E1")]
		Abort,
		[Token(Token = "0x40015E2")]
		Ping
	}
	[Token(Token = "0x200044F")]
	public enum TransportStates
	{
		[Token(Token = "0x40015E4")]
		Initial,
		[Token(Token = "0x40015E5")]
		Connecting,
		[Token(Token = "0x40015E6")]
		Reconnecting,
		[Token(Token = "0x40015E7")]
		Starting,
		[Token(Token = "0x40015E8")]
		Started,
		[Token(Token = "0x40015E9")]
		Closing,
		[Token(Token = "0x40015EA")]
		Closed
	}
	[Token(Token = "0x2000450")]
	public sealed class NegotiationData
	{
		[Token(Token = "0x40015EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823FC4", Offset = "0x823FC4")]
		private string <Url>k__BackingField;

		[Token(Token = "0x40015EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823FD4", Offset = "0x823FD4")]
		private string <WebSocketServerUrl>k__BackingField;

		[Token(Token = "0x40015ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823FE4", Offset = "0x823FE4")]
		private string <ConnectionToken>k__BackingField;

		[Token(Token = "0x40015EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x823FF4", Offset = "0x823FF4")]
		private string <ConnectionId>k__BackingField;

		[Token(Token = "0x40015EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824004", Offset = "0x824004")]
		private TimeSpan? <KeepAliveTimeout>k__BackingField;

		[Token(Token = "0x40015F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824014", Offset = "0x824014")]
		private TimeSpan <DisconnectTimeout>k__BackingField;

		[Token(Token = "0x40015F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824024", Offset = "0x824024")]
		private TimeSpan <ConnectionTimeout>k__BackingField;

		[Token(Token = "0x40015F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824034", Offset = "0x824034")]
		private bool <TryWebSockets>k__BackingField;

		[Token(Token = "0x40015F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824044", Offset = "0x824044")]
		private string <ProtocolVersion>k__BackingField;

		[Token(Token = "0x40015F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824054", Offset = "0x824054")]
		private TimeSpan <TransportConnectTimeout>k__BackingField;

		[Token(Token = "0x40015F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824064", Offset = "0x824064")]
		private TimeSpan <LongPollDelay>k__BackingField;

		[Token(Token = "0x40015F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Action<NegotiationData> OnReceived;

		[Token(Token = "0x40015F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Action<NegotiationData, string> OnError;

		[Token(Token = "0x40015F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private HTTPRequest NegotiationRequest;

		[Token(Token = "0x40015F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private IConnection Connection;

		[Token(Token = "0x17000541")]
		public string Url
		{
			[Token(Token = "0x6002719")]
			[Address(RVA = "0x1070128", Offset = "0x1070128", VA = "0x1070128")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8321A8", Offset = "0x8321A8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600271A")]
			[Address(RVA = "0x1070130", Offset = "0x1070130", VA = "0x1070130")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8321B8", Offset = "0x8321B8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000542")]
		public string WebSocketServerUrl
		{
			[Token(Token = "0x600271B")]
			[Address(RVA = "0x1070138", Offset = "0x1070138", VA = "0x1070138")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8321C8", Offset = "0x8321C8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600271C")]
			[Address(RVA = "0x1070140", Offset = "0x1070140", VA = "0x1070140")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8321D8", Offset = "0x8321D8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000543")]
		public string ConnectionToken
		{
			[Token(Token = "0x600271D")]
			[Address(RVA = "0x1070148", Offset = "0x1070148", VA = "0x1070148")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8321E8", Offset = "0x8321E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600271E")]
			[Address(RVA = "0x1070150", Offset = "0x1070150", VA = "0x1070150")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8321F8", Offset = "0x8321F8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000544")]
		public string ConnectionId
		{
			[Token(Token = "0x600271F")]
			[Address(RVA = "0x1070158", Offset = "0x1070158", VA = "0x1070158")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832208", Offset = "0x832208")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002720")]
			[Address(RVA = "0x1070160", Offset = "0x1070160", VA = "0x1070160")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832218", Offset = "0x832218")]
			private set
			{
			}
		}

		[Token(Token = "0x17000545")]
		public TimeSpan? KeepAliveTimeout
		{
			[Token(Token = "0x6002721")]
			[Address(RVA = "0x1070168", Offset = "0x1070168", VA = "0x1070168")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832228", Offset = "0x832228")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002722")]
			[Address(RVA = "0x1070174", Offset = "0x1070174", VA = "0x1070174")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832238", Offset = "0x832238")]
			private set
			{
			}
		}

		[Token(Token = "0x17000546")]
		public TimeSpan DisconnectTimeout
		{
			[Token(Token = "0x6002723")]
			[Address(RVA = "0x107017C", Offset = "0x107017C", VA = "0x107017C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832248", Offset = "0x832248")]
			get
			{
				return default(TimeSpan);
			}
			[Token(Token = "0x6002724")]
			[Address(RVA = "0x1070184", Offset = "0x1070184", VA = "0x1070184")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832258", Offset = "0x832258")]
			private set
			{
			}
		}

		[Token(Token = "0x17000547")]
		public TimeSpan ConnectionTimeout
		{
			[Token(Token = "0x6002725")]
			[Address(RVA = "0x107018C", Offset = "0x107018C", VA = "0x107018C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832268", Offset = "0x832268")]
			get
			{
				return default(TimeSpan);
			}
			[Token(Token = "0x6002726")]
			[Address(RVA = "0x1070194", Offset = "0x1070194", VA = "0x1070194")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832278", Offset = "0x832278")]
			private set
			{
			}
		}

		[Token(Token = "0x17000548")]
		public bool TryWebSockets
		{
			[Token(Token = "0x6002727")]
			[Address(RVA = "0x107019C", Offset = "0x107019C", VA = "0x107019C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832288", Offset = "0x832288")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002728")]
			[Address(RVA = "0x10701A4", Offset = "0x10701A4", VA = "0x10701A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832298", Offset = "0x832298")]
			private set
			{
			}
		}

		[Token(Token = "0x17000549")]
		public string ProtocolVersion
		{
			[Token(Token = "0x6002729")]
			[Address(RVA = "0x10701B0", Offset = "0x10701B0", VA = "0x10701B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8322A8", Offset = "0x8322A8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600272A")]
			[Address(RVA = "0x10701B8", Offset = "0x10701B8", VA = "0x10701B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8322B8", Offset = "0x8322B8")]
			private set
			{
			}
		}

		[Token(Token = "0x1700054A")]
		public TimeSpan TransportConnectTimeout
		{
			[Token(Token = "0x600272B")]
			[Address(RVA = "0x10701C0", Offset = "0x10701C0", VA = "0x10701C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8322C8", Offset = "0x8322C8")]
			get
			{
				return default(TimeSpan);
			}
			[Token(Token = "0x600272C")]
			[Address(RVA = "0x10701C8", Offset = "0x10701C8", VA = "0x10701C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8322D8", Offset = "0x8322D8")]
			private set
			{
			}
		}

		[Token(Token = "0x1700054B")]
		public TimeSpan LongPollDelay
		{
			[Token(Token = "0x600272D")]
			[Address(RVA = "0x10701D0", Offset = "0x10701D0", VA = "0x10701D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8322E8", Offset = "0x8322E8")]
			get
			{
				return default(TimeSpan);
			}
			[Token(Token = "0x600272E")]
			[Address(RVA = "0x10701D8", Offset = "0x10701D8", VA = "0x10701D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8322F8", Offset = "0x8322F8")]
			private set
			{
			}
		}

		[Token(Token = "0x600272F")]
		[Address(RVA = "0x10701E0", Offset = "0x10701E0", VA = "0x10701E0")]
		public NegotiationData(Connection connection)
		{
		}

		[Token(Token = "0x6002730")]
		[Address(RVA = "0x107020C", Offset = "0x107020C", VA = "0x107020C")]
		public void Start()
		{
		}

		[Token(Token = "0x6002731")]
		[Address(RVA = "0x107047C", Offset = "0x107047C", VA = "0x107047C")]
		public void Abort()
		{
		}

		[Token(Token = "0x6002732")]
		[Address(RVA = "0x1070498", Offset = "0x1070498", VA = "0x1070498")]
		private void OnNegotiationRequestFinished(HTTPRequest req, HTTPResponse resp)
		{
		}

		[Token(Token = "0x6002733")]
		[Address(RVA = "0x10708B4", Offset = "0x10708B4", VA = "0x10708B4")]
		private void RaiseOnError(string err)
		{
		}

		[Token(Token = "0x6002734")]
		[Address(RVA = "0x1070A00", Offset = "0x1070A00", VA = "0x1070A00")]
		private NegotiationData Parse(string str)
		{
			return null;
		}

		[Token(Token = "0x6002735")]
		[Address(RVA = "0x107104C", Offset = "0x107104C", VA = "0x107104C")]
		private static object Get(Dictionary<string, object> from, string key)
		{
			return null;
		}

		[Token(Token = "0x6002736")]
		[Address(RVA = "0x1070F4C", Offset = "0x1070F4C", VA = "0x1070F4C")]
		private static string GetString(Dictionary<string, object> from, string key)
		{
			return null;
		}

		[Token(Token = "0x6002737")]
		[Address(RVA = "0x107111C", Offset = "0x107111C", VA = "0x107111C")]
		private static List<string> GetStringList(Dictionary<string, object> from, string key)
		{
			return null;
		}

		[Token(Token = "0x6002738")]
		[Address(RVA = "0x107125C", Offset = "0x107125C", VA = "0x107125C")]
		private static int GetInt(Dictionary<string, object> from, string key)
		{
			return default(int);
		}

		[Token(Token = "0x6002739")]
		[Address(RVA = "0x1070FC0", Offset = "0x1070FC0", VA = "0x1070FC0")]
		private static double GetDouble(Dictionary<string, object> from, string key)
		{
			return default(double);
		}
	}
}
namespace BestHTTP.SignalR.Transports
{
	[Token(Token = "0x2000451")]
	public sealed class PollingTransport : PostSendTransportBase, IHeartbeat
	{
		[Token(Token = "0x40015FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private DateTime LastPoll;

		[Token(Token = "0x40015FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private TimeSpan PollDelay;

		[Token(Token = "0x40015FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private TimeSpan PollTimeout;

		[Token(Token = "0x40015FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private HTTPRequest pollRequest;

		[Token(Token = "0x1700054C")]
		public override bool SupportsKeepAlive
		{
			[Token(Token = "0x600273A")]
			[Address(RVA = "0x10731D0", Offset = "0x10731D0", VA = "0x10731D0", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700054D")]
		public override TransportTypes Type
		{
			[Token(Token = "0x600273B")]
			[Address(RVA = "0x10731D8", Offset = "0x10731D8", VA = "0x10731D8", Slot = "5")]
			get
			{
				return default(TransportTypes);
			}
		}

		[Token(Token = "0x600273C")]
		[Address(RVA = "0x10731E0", Offset = "0x10731E0", VA = "0x10731E0")]
		public PollingTransport(Connection connection)
		{
		}

		[Token(Token = "0x600273D")]
		[Address(RVA = "0x107334C", Offset = "0x107334C", VA = "0x107334C", Slot = "6")]
		public override void Connect()
		{
		}

		[Token(Token = "0x600273E")]
		[Address(RVA = "0x1073634", Offset = "0x1073634", VA = "0x1073634", Slot = "7")]
		public override void Stop()
		{
		}

		[Token(Token = "0x600273F")]
		[Address(RVA = "0x10736C4", Offset = "0x10736C4", VA = "0x10736C4", Slot = "9")]
		protected override void Started()
		{
		}

		[Token(Token = "0x6002740")]
		[Address(RVA = "0x1073768", Offset = "0x1073768", VA = "0x1073768", Slot = "10")]
		protected override void Aborted()
		{
		}

		[Token(Token = "0x6002741")]
		[Address(RVA = "0x10737E0", Offset = "0x10737E0", VA = "0x10737E0")]
		private void OnConnectRequestFinished(HTTPRequest req, HTTPResponse resp)
		{
		}

		[Token(Token = "0x6002742")]
		[Address(RVA = "0x1074314", Offset = "0x1074314", VA = "0x1074314")]
		private void OnPollRequestFinished(HTTPRequest req, HTTPResponse resp)
		{
		}

		[Token(Token = "0x6002743")]
		[Address(RVA = "0x1074894", Offset = "0x1074894", VA = "0x1074894")]
		private void Poll()
		{
		}

		[Token(Token = "0x6002744")]
		[Address(RVA = "0x1074A5C", Offset = "0x1074A5C", VA = "0x1074A5C", Slot = "12")]
		private void BestHTTP.Extensions.IHeartbeat.OnHeartbeatUpdate(TimeSpan dif)
		{
		}
	}
	[Token(Token = "0x2000452")]
	public abstract class PostSendTransportBase : TransportBase
	{
		[Token(Token = "0x40015FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected List<HTTPRequest> sendRequestQueue;

		[Token(Token = "0x6002745")]
		[Address(RVA = "0x10732C8", Offset = "0x10732C8", VA = "0x10732C8")]
		public PostSendTransportBase(string name, Connection con)
		{
		}

		[Token(Token = "0x6002746")]
		[Address(RVA = "0x1074C0C", Offset = "0x1074C0C", VA = "0x1074C0C", Slot = "8")]
		protected override void SendImpl(string json)
		{
		}

		[Token(Token = "0x6002747")]
		[Address(RVA = "0x1074E14", Offset = "0x1074E14", VA = "0x1074E14")]
		private void OnSendRequestFinished(HTTPRequest req, HTTPResponse resp)
		{
		}
	}
	[Token(Token = "0x2000453")]
	public sealed class ServerSentEventsTransport : PostSendTransportBase
	{
		[Serializable]
		[Token(Token = "0x20006E1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820E60", Offset = "0x820E60")]
		private sealed class <>c
		{
			[Token(Token = "0x4002671")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4002672")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static OnRetryDelegate <>9__6_0;

			[Token(Token = "0x6003632")]
			[Address(RVA = "0x10760D4", Offset = "0x10760D4", VA = "0x10760D4")]
			public <>c()
			{
			}

			[Token(Token = "0x6003633")]
			[Address(RVA = "0x10760DC", Offset = "0x10760DC", VA = "0x10760DC")]
			internal bool <Connect>b__6_0(EventSource es)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40015FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private EventSource EventSource;

		[Token(Token = "0x1700054E")]
		public override bool SupportsKeepAlive
		{
			[Token(Token = "0x6002748")]
			[Address(RVA = "0x107527C", Offset = "0x107527C", VA = "0x107527C", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700054F")]
		public override TransportTypes Type
		{
			[Token(Token = "0x6002749")]
			[Address(RVA = "0x1075284", Offset = "0x1075284", VA = "0x1075284", Slot = "5")]
			get
			{
				return default(TransportTypes);
			}
		}

		[Token(Token = "0x600274A")]
		[Address(RVA = "0x107528C", Offset = "0x107528C", VA = "0x107528C")]
		public ServerSentEventsTransport(Connection con)
		{
		}

		[Token(Token = "0x600274B")]
		[Address(RVA = "0x10752EC", Offset = "0x10752EC", VA = "0x10752EC", Slot = "6")]
		public override void Connect()
		{
		}

		[Token(Token = "0x600274C")]
		[Address(RVA = "0x10756AC", Offset = "0x10756AC", VA = "0x10756AC", Slot = "7")]
		public override void Stop()
		{
		}

		[Token(Token = "0x600274D")]
		[Address(RVA = "0x1075814", Offset = "0x1075814", VA = "0x1075814", Slot = "9")]
		protected override void Started()
		{
		}

		[Token(Token = "0x600274E")]
		[Address(RVA = "0x1075818", Offset = "0x1075818", VA = "0x1075818", Slot = "11")]
		public override void Abort()
		{
		}

		[Token(Token = "0x600274F")]
		[Address(RVA = "0x1075A58", Offset = "0x1075A58", VA = "0x1075A58", Slot = "10")]
		protected override void Aborted()
		{
		}

		[Token(Token = "0x6002750")]
		[Address(RVA = "0x1075A88", Offset = "0x1075A88", VA = "0x1075A88")]
		private void OnEventSourceOpen(EventSource eventSource)
		{
		}

		[Token(Token = "0x6002751")]
		[Address(RVA = "0x1075BA0", Offset = "0x1075BA0", VA = "0x1075BA0")]
		private void OnEventSourceMessage(EventSource eventSource, BestHTTP.ServerSentEvents.Message message)
		{
		}

		[Token(Token = "0x6002752")]
		[Address(RVA = "0x1075D28", Offset = "0x1075D28", VA = "0x1075D28")]
		private void OnEventSourceError(EventSource eventSource, string error)
		{
		}

		[Token(Token = "0x6002753")]
		[Address(RVA = "0x1075F44", Offset = "0x1075F44", VA = "0x1075F44")]
		private void OnEventSourceClosed(EventSource eventSource)
		{
		}
	}
	[Token(Token = "0x2000454")]
	public delegate void OnTransportStateChangedDelegate(TransportBase transport, TransportStates oldState, TransportStates newState);
	[Token(Token = "0x2000455")]
	public abstract class TransportBase
	{
		[Token(Token = "0x4001600")]
		private const int MaxRetryCount = 5;

		[Token(Token = "0x4001601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824074", Offset = "0x824074")]
		private string <Name>k__BackingField;

		[Token(Token = "0x4001602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824084", Offset = "0x824084")]
		private IConnection <Connection>k__BackingField;

		[Token(Token = "0x4001603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TransportStates _state;

		[Token(Token = "0x17000550")]
		public string Name
		{
			[Token(Token = "0x6002758")]
			[Address(RVA = "0x10760E4", Offset = "0x10760E4", VA = "0x10760E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832308", Offset = "0x832308")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002759")]
			[Address(RVA = "0x10760EC", Offset = "0x10760EC", VA = "0x10760EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832318", Offset = "0x832318")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000551")]
		public abstract bool SupportsKeepAlive
		{
			[Token(Token = "0x600275A")]
			get;
		}

		[Token(Token = "0x17000552")]
		public abstract TransportTypes Type
		{
			[Token(Token = "0x600275B")]
			get;
		}

		[Token(Token = "0x17000553")]
		public IConnection Connection
		{
			[Token(Token = "0x600275C")]
			[Address(RVA = "0x10760F4", Offset = "0x10760F4", VA = "0x10760F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832328", Offset = "0x832328")]
			get
			{
				return null;
			}
			[Token(Token = "0x600275D")]
			[Address(RVA = "0x10760FC", Offset = "0x10760FC", VA = "0x10760FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832338", Offset = "0x832338")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000554")]
		public TransportStates State
		{
			[Token(Token = "0x600275E")]
			[Address(RVA = "0x1076104", Offset = "0x1076104", VA = "0x1076104")]
			get
			{
				return default(TransportStates);
			}
			[Token(Token = "0x600275F")]
			[Address(RVA = "0x1073610", Offset = "0x1073610", VA = "0x1073610")]
			protected set
			{
			}
		}

		[Token(Token = "0x1400001F")]
		public event OnTransportStateChangedDelegate OnStateChanged
		{
			[Token(Token = "0x6002760")]
			[Address(RVA = "0x107610C", Offset = "0x107610C", VA = "0x107610C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832348", Offset = "0x832348")]
			add
			{
			}
			[Token(Token = "0x6002761")]
			[Address(RVA = "0x10761B0", Offset = "0x10761B0", VA = "0x10761B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832358", Offset = "0x832358")]
			remove
			{
			}
		}

		[Token(Token = "0x6002762")]
		[Address(RVA = "0x1074BAC", Offset = "0x1074BAC", VA = "0x1074BAC")]
		public TransportBase(string name, Connection connection)
		{
		}

		[Token(Token = "0x6002763")]
		public abstract void Connect();

		[Token(Token = "0x6002764")]
		public abstract void Stop();

		[Token(Token = "0x6002765")]
		protected abstract void SendImpl(string json);

		[Token(Token = "0x6002766")]
		protected abstract void Started();

		[Token(Token = "0x6002767")]
		protected abstract void Aborted();

		[Token(Token = "0x6002768")]
		[Address(RVA = "0x1073C64", Offset = "0x1073C64", VA = "0x1073C64")]
		protected void OnConnected()
		{
		}

		[Token(Token = "0x6002769")]
		[Address(RVA = "0x1076254", Offset = "0x1076254", VA = "0x1076254")]
		protected void Start()
		{
		}

		[Token(Token = "0x600276A")]
		[Address(RVA = "0x1076700", Offset = "0x1076700", VA = "0x1076700")]
		private void OnStartRequestFinished(HTTPRequest req, HTTPResponse resp)
		{
		}

		[Token(Token = "0x600276B")]
		[Address(RVA = "0x1075848", Offset = "0x1075848", VA = "0x1075848", Slot = "11")]
		public virtual void Abort()
		{
		}

		[Token(Token = "0x600276C")]
		[Address(RVA = "0x1076E28", Offset = "0x1076E28", VA = "0x1076E28")]
		protected void AbortFinished()
		{
		}

		[Token(Token = "0x600276D")]
		[Address(RVA = "0x1076F0C", Offset = "0x1076F0C", VA = "0x1076F0C")]
		private void OnAbortRequestFinished(HTTPRequest req, HTTPResponse resp)
		{
		}

		[Token(Token = "0x600276E")]
		[Address(RVA = "0x10774A8", Offset = "0x10774A8", VA = "0x10774A8")]
		public void Send(string jsonStr)
		{
		}

		[Token(Token = "0x600276F")]
		[Address(RVA = "0x107774C", Offset = "0x107774C", VA = "0x107774C")]
		public void Reconnect()
		{
		}

		[Token(Token = "0x6002770")]
		[Address(RVA = "0x1073D70", Offset = "0x1073D70", VA = "0x1073D70")]
		public static IServerMessage Parse(BestHTTP.SignalR.JsonEncoders.IJsonEncoder encoder, string json)
		{
			return null;
		}
	}
	[Token(Token = "0x2000456")]
	public sealed class WebSocketTransport : TransportBase
	{
		[Token(Token = "0x4001605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private BestHTTP.WebSocket.WebSocket wSocket;

		[Token(Token = "0x17000555")]
		public override bool SupportsKeepAlive
		{
			[Token(Token = "0x6002771")]
			[Address(RVA = "0x10778A4", Offset = "0x10778A4", VA = "0x10778A4", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000556")]
		public override TransportTypes Type
		{
			[Token(Token = "0x6002772")]
			[Address(RVA = "0x10778AC", Offset = "0x10778AC", VA = "0x10778AC", Slot = "5")]
			get
			{
				return default(TransportTypes);
			}
		}

		[Token(Token = "0x6002773")]
		[Address(RVA = "0x10778B4", Offset = "0x10778B4", VA = "0x10778B4")]
		public WebSocketTransport(Connection connection)
		{
		}

		[Token(Token = "0x6002774")]
		[Address(RVA = "0x1077914", Offset = "0x1077914", VA = "0x1077914", Slot = "6")]
		public override void Connect()
		{
		}

		[Token(Token = "0x6002775")]
		[Address(RVA = "0x1077D38", Offset = "0x1077D38", VA = "0x1077D38", Slot = "8")]
		protected override void SendImpl(string json)
		{
		}

		[Token(Token = "0x6002776")]
		[Address(RVA = "0x1077D8C", Offset = "0x1077D8C", VA = "0x1077D8C", Slot = "7")]
		public override void Stop()
		{
		}

		[Token(Token = "0x6002777")]
		[Address(RVA = "0x1077DF0", Offset = "0x1077DF0", VA = "0x1077DF0", Slot = "9")]
		protected override void Started()
		{
		}

		[Token(Token = "0x6002778")]
		[Address(RVA = "0x1077DF4", Offset = "0x1077DF4", VA = "0x1077DF4", Slot = "10")]
		protected override void Aborted()
		{
		}

		[Token(Token = "0x6002779")]
		[Address(RVA = "0x1077E3C", Offset = "0x1077E3C", VA = "0x1077E3C")]
		private void WSocket_OnOpen(BestHTTP.WebSocket.WebSocket webSocket)
		{
		}

		[Token(Token = "0x600277A")]
		[Address(RVA = "0x1077F68", Offset = "0x1077F68", VA = "0x1077F68")]
		private void WSocket_OnMessage(BestHTTP.WebSocket.WebSocket webSocket, string message)
		{
		}

		[Token(Token = "0x600277B")]
		[Address(RVA = "0x10780C8", Offset = "0x10780C8", VA = "0x10780C8")]
		private void WSocket_OnClosed(BestHTTP.WebSocket.WebSocket webSocket, ushort code, string message)
		{
		}

		[Token(Token = "0x600277C")]
		[Address(RVA = "0x10782D8", Offset = "0x10782D8", VA = "0x10782D8")]
		private void WSocket_OnError(BestHTTP.WebSocket.WebSocket webSocket, string reason)
		{
		}
	}
}
namespace BestHTTP.SignalR.Messages
{
	[Token(Token = "0x2000457")]
	public struct ClientMessage
	{
		[Token(Token = "0x4001606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly Hub Hub;

		[Token(Token = "0x4001607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string Method;

		[Token(Token = "0x4001608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly object[] Args;

		[Token(Token = "0x4001609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ulong CallIdx;

		[Token(Token = "0x400160A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly OnMethodResultDelegate ResultCallback;

		[Token(Token = "0x400160B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly OnMethodFailedDelegate ResultErrorCallback;

		[Token(Token = "0x400160C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly OnMethodProgressDelegate ProgressCallback;

		[Token(Token = "0x600277D")]
		[Address(RVA = "0x8DCFF8", Offset = "0x8DCFF8", VA = "0x8DCFF8")]
		public ClientMessage(Hub hub, string method, object[] args, ulong callIdx, OnMethodResultDelegate resultCallback, OnMethodFailedDelegate resultErrorCallback, OnMethodProgressDelegate progressCallback)
		{
		}
	}
	[Token(Token = "0x2000458")]
	public interface IServerMessage
	{
		[Token(Token = "0x17000557")]
		MessageTypes Type
		{
			[Token(Token = "0x600277E")]
			get;
		}

		[Token(Token = "0x600277F")]
		void Parse(object data);
	}
	[Token(Token = "0x2000459")]
	public interface IHubMessage
	{
		[Token(Token = "0x17000558")]
		ulong InvocationId
		{
			[Token(Token = "0x6002780")]
			get;
		}
	}
	[Token(Token = "0x200045A")]
	public sealed class KeepAliveMessage : IServerMessage
	{
		[Token(Token = "0x17000559")]
		private MessageTypes BestHTTP.SignalR.Messages.IServerMessage.Type
		{
			[Token(Token = "0x6002781")]
			[Address(RVA = "0x106ED60", Offset = "0x106ED60", VA = "0x106ED60", Slot = "4")]
			get
			{
				return default(MessageTypes);
			}
		}

		[Token(Token = "0x6002782")]
		[Address(RVA = "0x106ED68", Offset = "0x106ED68", VA = "0x106ED68", Slot = "5")]
		private void BestHTTP.SignalR.Messages.IServerMessage.Parse(object data)
		{
		}

		[Token(Token = "0x6002783")]
		[Address(RVA = "0x106ED6C", Offset = "0x106ED6C", VA = "0x106ED6C")]
		public KeepAliveMessage()
		{
		}
	}
	[Token(Token = "0x200045B")]
	public sealed class MultiMessage : IServerMessage
	{
		[Token(Token = "0x400160D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8240A4", Offset = "0x8240A4")]
		private string <MessageId>k__BackingField;

		[Token(Token = "0x400160E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8240B4", Offset = "0x8240B4")]
		private bool <IsInitialization>k__BackingField;

		[Token(Token = "0x400160F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8240C4", Offset = "0x8240C4")]
		private string <GroupsToken>k__BackingField;

		[Token(Token = "0x4001610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8240D4", Offset = "0x8240D4")]
		private bool <ShouldReconnect>k__BackingField;

		[Token(Token = "0x4001611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8240E4", Offset = "0x8240E4")]
		private TimeSpan? <PollDelay>k__BackingField;

		[Token(Token = "0x4001612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8240F4", Offset = "0x8240F4")]
		private List<IServerMessage> <Data>k__BackingField;

		[Token(Token = "0x1700055A")]
		private MessageTypes BestHTTP.SignalR.Messages.IServerMessage.Type
		{
			[Token(Token = "0x6002784")]
			[Address(RVA = "0x106F2D0", Offset = "0x106F2D0", VA = "0x106F2D0", Slot = "4")]
			get
			{
				return default(MessageTypes);
			}
		}

		[Token(Token = "0x1700055B")]
		public string MessageId
		{
			[Token(Token = "0x6002785")]
			[Address(RVA = "0x106F2D8", Offset = "0x106F2D8", VA = "0x106F2D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832368", Offset = "0x832368")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002786")]
			[Address(RVA = "0x106F2E0", Offset = "0x106F2E0", VA = "0x106F2E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832378", Offset = "0x832378")]
			private set
			{
			}
		}

		[Token(Token = "0x1700055C")]
		public bool IsInitialization
		{
			[Token(Token = "0x6002787")]
			[Address(RVA = "0x106F2E8", Offset = "0x106F2E8", VA = "0x106F2E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832388", Offset = "0x832388")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002788")]
			[Address(RVA = "0x106F2F0", Offset = "0x106F2F0", VA = "0x106F2F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832398", Offset = "0x832398")]
			private set
			{
			}
		}

		[Token(Token = "0x1700055D")]
		public string GroupsToken
		{
			[Token(Token = "0x6002789")]
			[Address(RVA = "0x106F2FC", Offset = "0x106F2FC", VA = "0x106F2FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8323A8", Offset = "0x8323A8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600278A")]
			[Address(RVA = "0x106F304", Offset = "0x106F304", VA = "0x106F304")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8323B8", Offset = "0x8323B8")]
			private set
			{
			}
		}

		[Token(Token = "0x1700055E")]
		public bool ShouldReconnect
		{
			[Token(Token = "0x600278B")]
			[Address(RVA = "0x106F30C", Offset = "0x106F30C", VA = "0x106F30C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8323C8", Offset = "0x8323C8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600278C")]
			[Address(RVA = "0x106F314", Offset = "0x106F314", VA = "0x106F314")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8323D8", Offset = "0x8323D8")]
			private set
			{
			}
		}

		[Token(Token = "0x1700055F")]
		public TimeSpan? PollDelay
		{
			[Token(Token = "0x600278D")]
			[Address(RVA = "0x106F320", Offset = "0x106F320", VA = "0x106F320")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8323E8", Offset = "0x8323E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600278E")]
			[Address(RVA = "0x106F32C", Offset = "0x106F32C", VA = "0x106F32C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8323F8", Offset = "0x8323F8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000560")]
		public List<IServerMessage> Data
		{
			[Token(Token = "0x600278F")]
			[Address(RVA = "0x106F334", Offset = "0x106F334", VA = "0x106F334")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832408", Offset = "0x832408")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002790")]
			[Address(RVA = "0x106F33C", Offset = "0x106F33C", VA = "0x106F33C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832418", Offset = "0x832418")]
			private set
			{
			}
		}

		[Token(Token = "0x6002791")]
		[Address(RVA = "0x106F344", Offset = "0x106F344", VA = "0x106F344", Slot = "5")]
		private void BestHTTP.SignalR.Messages.IServerMessage.Parse(object data)
		{
		}

		[Token(Token = "0x6002792")]
		[Address(RVA = "0x106FC5C", Offset = "0x106FC5C", VA = "0x106FC5C")]
		public MultiMessage()
		{
		}
	}
	[Token(Token = "0x200045C")]
	public sealed class DataMessage : IServerMessage
	{
		[Token(Token = "0x4001613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824104", Offset = "0x824104")]
		private object <Data>k__BackingField;

		[Token(Token = "0x17000561")]
		private MessageTypes BestHTTP.SignalR.Messages.IServerMessage.Type
		{
			[Token(Token = "0x6002793")]
			[Address(RVA = "0x106E8D8", Offset = "0x106E8D8", VA = "0x106E8D8", Slot = "4")]
			get
			{
				return default(MessageTypes);
			}
		}

		[Token(Token = "0x17000562")]
		public object Data
		{
			[Token(Token = "0x6002794")]
			[Address(RVA = "0x106E8E0", Offset = "0x106E8E0", VA = "0x106E8E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832428", Offset = "0x832428")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002795")]
			[Address(RVA = "0x106E8E8", Offset = "0x106E8E8", VA = "0x106E8E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832438", Offset = "0x832438")]
			private set
			{
			}
		}

		[Token(Token = "0x6002796")]
		[Address(RVA = "0x106E8F0", Offset = "0x106E8F0", VA = "0x106E8F0", Slot = "5")]
		private void BestHTTP.SignalR.Messages.IServerMessage.Parse(object data)
		{
		}

		[Token(Token = "0x6002797")]
		[Address(RVA = "0x106E8F8", Offset = "0x106E8F8", VA = "0x106E8F8")]
		public DataMessage()
		{
		}
	}
	[Token(Token = "0x200045D")]
	public sealed class MethodCallMessage : IServerMessage
	{
		[Token(Token = "0x4001614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824114", Offset = "0x824114")]
		private string <Hub>k__BackingField;

		[Token(Token = "0x4001615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824124", Offset = "0x824124")]
		private string <Method>k__BackingField;

		[Token(Token = "0x4001616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824134", Offset = "0x824134")]
		private object[] <Arguments>k__BackingField;

		[Token(Token = "0x4001617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824144", Offset = "0x824144")]
		private IDictionary<string, object> <State>k__BackingField;

		[Token(Token = "0x17000563")]
		private MessageTypes BestHTTP.SignalR.Messages.IServerMessage.Type
		{
			[Token(Token = "0x6002798")]
			[Address(RVA = "0x106ED74", Offset = "0x106ED74", VA = "0x106ED74", Slot = "4")]
			get
			{
				return default(MessageTypes);
			}
		}

		[Token(Token = "0x17000564")]
		public string Hub
		{
			[Token(Token = "0x6002799")]
			[Address(RVA = "0x106ED7C", Offset = "0x106ED7C", VA = "0x106ED7C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832448", Offset = "0x832448")]
			get
			{
				return null;
			}
			[Token(Token = "0x600279A")]
			[Address(RVA = "0x106ED84", Offset = "0x106ED84", VA = "0x106ED84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832458", Offset = "0x832458")]
			private set
			{
			}
		}

		[Token(Token = "0x17000565")]
		public string Method
		{
			[Token(Token = "0x600279B")]
			[Address(RVA = "0x106ED8C", Offset = "0x106ED8C", VA = "0x106ED8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832468", Offset = "0x832468")]
			get
			{
				return null;
			}
			[Token(Token = "0x600279C")]
			[Address(RVA = "0x106ED94", Offset = "0x106ED94", VA = "0x106ED94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832478", Offset = "0x832478")]
			private set
			{
			}
		}

		[Token(Token = "0x17000566")]
		public object[] Arguments
		{
			[Token(Token = "0x600279D")]
			[Address(RVA = "0x106ED9C", Offset = "0x106ED9C", VA = "0x106ED9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832488", Offset = "0x832488")]
			get
			{
				return null;
			}
			[Token(Token = "0x600279E")]
			[Address(RVA = "0x106EDA4", Offset = "0x106EDA4", VA = "0x106EDA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832498", Offset = "0x832498")]
			private set
			{
			}
		}

		[Token(Token = "0x17000567")]
		public IDictionary<string, object> State
		{
			[Token(Token = "0x600279F")]
			[Address(RVA = "0x106EDAC", Offset = "0x106EDAC", VA = "0x106EDAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8324A8", Offset = "0x8324A8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60027A0")]
			[Address(RVA = "0x106EDB4", Offset = "0x106EDB4", VA = "0x106EDB4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8324B8", Offset = "0x8324B8")]
			private set
			{
			}
		}

		[Token(Token = "0x60027A1")]
		[Address(RVA = "0x106EDBC", Offset = "0x106EDBC", VA = "0x106EDBC", Slot = "5")]
		private void BestHTTP.SignalR.Messages.IServerMessage.Parse(object data)
		{
		}

		[Token(Token = "0x60027A2")]
		[Address(RVA = "0x106F2C8", Offset = "0x106F2C8", VA = "0x106F2C8")]
		public MethodCallMessage()
		{
		}
	}
	[Token(Token = "0x200045E")]
	public sealed class ResultMessage : IServerMessage, IHubMessage
	{
		[Token(Token = "0x4001618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824154", Offset = "0x824154")]
		private ulong <InvocationId>k__BackingField;

		[Token(Token = "0x4001619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824164", Offset = "0x824164")]
		private object <ReturnValue>k__BackingField;

		[Token(Token = "0x400161A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824174", Offset = "0x824174")]
		private IDictionary<string, object> <State>k__BackingField;

		[Token(Token = "0x17000568")]
		private MessageTypes BestHTTP.SignalR.Messages.IServerMessage.Type
		{
			[Token(Token = "0x60027A3")]
			[Address(RVA = "0x106FED4", Offset = "0x106FED4", VA = "0x106FED4", Slot = "4")]
			get
			{
				return default(MessageTypes);
			}
		}

		[Token(Token = "0x17000569")]
		public ulong InvocationId
		{
			[Token(Token = "0x60027A4")]
			[Address(RVA = "0x106FEDC", Offset = "0x106FEDC", VA = "0x106FEDC", Slot = "6")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8324C8", Offset = "0x8324C8")]
			get
			{
				return default(ulong);
			}
			[Token(Token = "0x60027A5")]
			[Address(RVA = "0x106FEE4", Offset = "0x106FEE4", VA = "0x106FEE4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8324D8", Offset = "0x8324D8")]
			private set
			{
			}
		}

		[Token(Token = "0x1700056A")]
		public object ReturnValue
		{
			[Token(Token = "0x60027A6")]
			[Address(RVA = "0x106FEEC", Offset = "0x106FEEC", VA = "0x106FEEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8324E8", Offset = "0x8324E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60027A7")]
			[Address(RVA = "0x106FEF4", Offset = "0x106FEF4", VA = "0x106FEF4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8324F8", Offset = "0x8324F8")]
			private set
			{
			}
		}

		[Token(Token = "0x1700056B")]
		public IDictionary<string, object> State
		{
			[Token(Token = "0x60027A8")]
			[Address(RVA = "0x106FEFC", Offset = "0x106FEFC", VA = "0x106FEFC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832508", Offset = "0x832508")]
			get
			{
				return null;
			}
			[Token(Token = "0x60027A9")]
			[Address(RVA = "0x106FF04", Offset = "0x106FF04", VA = "0x106FF04")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832518", Offset = "0x832518")]
			private set
			{
			}
		}

		[Token(Token = "0x60027AA")]
		[Address(RVA = "0x106FF0C", Offset = "0x106FF0C", VA = "0x106FF0C", Slot = "5")]
		private void BestHTTP.SignalR.Messages.IServerMessage.Parse(object data)
		{
		}

		[Token(Token = "0x60027AB")]
		[Address(RVA = "0x1070120", Offset = "0x1070120", VA = "0x1070120")]
		public ResultMessage()
		{
		}
	}
	[Token(Token = "0x200045F")]
	public sealed class FailureMessage : IServerMessage, IHubMessage
	{
		[Token(Token = "0x400161B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824184", Offset = "0x824184")]
		private ulong <InvocationId>k__BackingField;

		[Token(Token = "0x400161C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824194", Offset = "0x824194")]
		private bool <IsHubError>k__BackingField;

		[Token(Token = "0x400161D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8241A4", Offset = "0x8241A4")]
		private string <ErrorMessage>k__BackingField;

		[Token(Token = "0x400161E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8241B4", Offset = "0x8241B4")]
		private IDictionary<string, object> <AdditionalData>k__BackingField;

		[Token(Token = "0x400161F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8241C4", Offset = "0x8241C4")]
		private string <StackTrace>k__BackingField;

		[Token(Token = "0x4001620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8241D4", Offset = "0x8241D4")]
		private IDictionary<string, object> <State>k__BackingField;

		[Token(Token = "0x1700056C")]
		private MessageTypes BestHTTP.SignalR.Messages.IServerMessage.Type
		{
			[Token(Token = "0x60027AC")]
			[Address(RVA = "0x106E900", Offset = "0x106E900", VA = "0x106E900", Slot = "4")]
			get
			{
				return default(MessageTypes);
			}
		}

		[Token(Token = "0x1700056D")]
		public ulong InvocationId
		{
			[Token(Token = "0x60027AD")]
			[Address(RVA = "0x106E908", Offset = "0x106E908", VA = "0x106E908", Slot = "6")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832528", Offset = "0x832528")]
			get
			{
				return default(ulong);
			}
			[Token(Token = "0x60027AE")]
			[Address(RVA = "0x106E910", Offset = "0x106E910", VA = "0x106E910")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832538", Offset = "0x832538")]
			private set
			{
			}
		}

		[Token(Token = "0x1700056E")]
		public bool IsHubError
		{
			[Token(Token = "0x60027AF")]
			[Address(RVA = "0x106E918", Offset = "0x106E918", VA = "0x106E918")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832548", Offset = "0x832548")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60027B0")]
			[Address(RVA = "0x106E920", Offset = "0x106E920", VA = "0x106E920")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832558", Offset = "0x832558")]
			private set
			{
			}
		}

		[Token(Token = "0x1700056F")]
		public string ErrorMessage
		{
			[Token(Token = "0x60027B1")]
			[Address(RVA = "0x106E92C", Offset = "0x106E92C", VA = "0x106E92C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832568", Offset = "0x832568")]
			get
			{
				return null;
			}
			[Token(Token = "0x60027B2")]
			[Address(RVA = "0x106E934", Offset = "0x106E934", VA = "0x106E934")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832578", Offset = "0x832578")]
			private set
			{
			}
		}

		[Token(Token = "0x17000570")]
		public IDictionary<string, object> AdditionalData
		{
			[Token(Token = "0x60027B3")]
			[Address(RVA = "0x106E93C", Offset = "0x106E93C", VA = "0x106E93C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832588", Offset = "0x832588")]
			get
			{
				return null;
			}
			[Token(Token = "0x60027B4")]
			[Address(RVA = "0x106E944", Offset = "0x106E944", VA = "0x106E944")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832598", Offset = "0x832598")]
			private set
			{
			}
		}

		[Token(Token = "0x17000571")]
		public string StackTrace
		{
			[Token(Token = "0x60027B5")]
			[Address(RVA = "0x106E94C", Offset = "0x106E94C", VA = "0x106E94C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8325A8", Offset = "0x8325A8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60027B6")]
			[Address(RVA = "0x106E954", Offset = "0x106E954", VA = "0x106E954")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8325B8", Offset = "0x8325B8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000572")]
		public IDictionary<string, object> State
		{
			[Token(Token = "0x60027B7")]
			[Address(RVA = "0x106E95C", Offset = "0x106E95C", VA = "0x106E95C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8325C8", Offset = "0x8325C8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60027B8")]
			[Address(RVA = "0x106E964", Offset = "0x106E964", VA = "0x106E964")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8325D8", Offset = "0x8325D8")]
			private set
			{
			}
		}

		[Token(Token = "0x60027B9")]
		[Address(RVA = "0x106E96C", Offset = "0x106E96C", VA = "0x106E96C", Slot = "5")]
		private void BestHTTP.SignalR.Messages.IServerMessage.Parse(object data)
		{
		}

		[Token(Token = "0x60027BA")]
		[Address(RVA = "0x106ED58", Offset = "0x106ED58", VA = "0x106ED58")]
		public FailureMessage()
		{
		}
	}
	[Token(Token = "0x2000460")]
	public sealed class ProgressMessage : IServerMessage, IHubMessage
	{
		[Token(Token = "0x4001621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8241E4", Offset = "0x8241E4")]
		private ulong <InvocationId>k__BackingField;

		[Token(Token = "0x4001622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8241F4", Offset = "0x8241F4")]
		private double <Progress>k__BackingField;

		[Token(Token = "0x17000573")]
		private MessageTypes BestHTTP.SignalR.Messages.IServerMessage.Type
		{
			[Token(Token = "0x60027BB")]
			[Address(RVA = "0x106FC64", Offset = "0x106FC64", VA = "0x106FC64", Slot = "4")]
			get
			{
				return default(MessageTypes);
			}
		}

		[Token(Token = "0x17000574")]
		public ulong InvocationId
		{
			[Token(Token = "0x60027BC")]
			[Address(RVA = "0x106FC6C", Offset = "0x106FC6C", VA = "0x106FC6C", Slot = "6")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8325E8", Offset = "0x8325E8")]
			get
			{
				return default(ulong);
			}
			[Token(Token = "0x60027BD")]
			[Address(RVA = "0x106FC74", Offset = "0x106FC74", VA = "0x106FC74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8325F8", Offset = "0x8325F8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000575")]
		public double Progress
		{
			[Token(Token = "0x60027BE")]
			[Address(RVA = "0x106FC7C", Offset = "0x106FC7C", VA = "0x106FC7C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832608", Offset = "0x832608")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60027BF")]
			[Address(RVA = "0x106FC84", Offset = "0x106FC84", VA = "0x106FC84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832618", Offset = "0x832618")]
			private set
			{
			}
		}

		[Token(Token = "0x60027C0")]
		[Address(RVA = "0x106FC8C", Offset = "0x106FC8C", VA = "0x106FC8C", Slot = "5")]
		private void BestHTTP.SignalR.Messages.IServerMessage.Parse(object data)
		{
		}

		[Token(Token = "0x60027C1")]
		[Address(RVA = "0x106FC54", Offset = "0x106FC54", VA = "0x106FC54")]
		public ProgressMessage()
		{
		}
	}
}
namespace BestHTTP.SignalR.JsonEncoders
{
	[Token(Token = "0x2000461")]
	public sealed class DefaultJsonEncoder : IJsonEncoder
	{
		[Token(Token = "0x60027C2")]
		[Address(RVA = "0x106E838", Offset = "0x106E838", VA = "0x106E838", Slot = "4")]
		public string Encode(object obj)
		{
			return null;
		}

		[Token(Token = "0x60027C3")]
		[Address(RVA = "0x106E844", Offset = "0x106E844", VA = "0x106E844", Slot = "5")]
		public IDictionary<string, object> DecodeMessage(string json)
		{
			return null;
		}

		[Token(Token = "0x60027C4")]
		[Address(RVA = "0x106E8BC", Offset = "0x106E8BC", VA = "0x106E8BC")]
		public DefaultJsonEncoder()
		{
		}
	}
	[Token(Token = "0x2000462")]
	public interface IJsonEncoder
	{
		[Token(Token = "0x60027C5")]
		string Encode(object obj);

		[Token(Token = "0x60027C6")]
		IDictionary<string, object> DecodeMessage(string json);
	}
}
namespace BestHTTP.SignalR.Hubs
{
	[Token(Token = "0x2000463")]
	public delegate void OnMethodCallDelegate(Hub hub, string method, params object[] args);
	[Token(Token = "0x2000464")]
	public delegate void OnMethodCallCallbackDelegate(Hub hub, MethodCallMessage methodCall);
	[Token(Token = "0x2000465")]
	public delegate void OnMethodResultDelegate(Hub hub, ClientMessage originalMessage, ResultMessage result);
	[Token(Token = "0x2000466")]
	public delegate void OnMethodFailedDelegate(Hub hub, ClientMessage originalMessage, FailureMessage error);
	[Token(Token = "0x2000467")]
	public delegate void OnMethodProgressDelegate(Hub hub, ClientMessage originialMessage, ProgressMessage progress);
	[Token(Token = "0x2000468")]
	public class Hub : IHub
	{
		[Token(Token = "0x4001623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824204", Offset = "0x824204")]
		private string <Name>k__BackingField;

		[Token(Token = "0x4001624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<string, object> state;

		[Token(Token = "0x4001626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Dictionary<ulong, ClientMessage> SentMessages;

		[Token(Token = "0x4001627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<string, OnMethodCallCallbackDelegate> MethodTable;

		[Token(Token = "0x4001628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private StringBuilder builder;

		[Token(Token = "0x4001629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824224", Offset = "0x824224")]
		private Connection <BestHTTP.SignalR.Hubs.IHub.Connection>k__BackingField;

		[Token(Token = "0x17000576")]
		public string Name
		{
			[Token(Token = "0x60027DB")]
			[Address(RVA = "0xBD6D2C", Offset = "0xBD6D2C", VA = "0xBD6D2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832628", Offset = "0x832628")]
			get
			{
				return null;
			}
			[Token(Token = "0x60027DC")]
			[Address(RVA = "0xBD6D34", Offset = "0xBD6D34", VA = "0xBD6D34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832638", Offset = "0x832638")]
			private set
			{
			}
		}

		[Token(Token = "0x17000577")]
		public Dictionary<string, object> State
		{
			[Token(Token = "0x60027DD")]
			[Address(RVA = "0xBD6D3C", Offset = "0xBD6D3C", VA = "0xBD6D3C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000578")]
		private Connection BestHTTP.SignalR.Hubs.IHub.Connection
		{
			[Token(Token = "0x60027E0")]
			[Address(RVA = "0xBD6EF8", Offset = "0xBD6EF8", VA = "0xBD6EF8", Slot = "4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832668", Offset = "0x832668")]
			get
			{
				return null;
			}
			[Token(Token = "0x60027E1")]
			[Address(RVA = "0xBD6F00", Offset = "0xBD6F00", VA = "0xBD6F00", Slot = "5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832678", Offset = "0x832678")]
			set
			{
			}
		}

		[Token(Token = "0x14000020")]
		public event OnMethodCallDelegate OnMethodCall
		{
			[Token(Token = "0x60027DE")]
			[Address(RVA = "0xBD6DB0", Offset = "0xBD6DB0", VA = "0xBD6DB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832648", Offset = "0x832648")]
			add
			{
			}
			[Token(Token = "0x60027DF")]
			[Address(RVA = "0xBD6E54", Offset = "0xBD6E54", VA = "0xBD6E54")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832658", Offset = "0x832658")]
			remove
			{
			}
		}

		[Token(Token = "0x60027E2")]
		[Address(RVA = "0xBD6F08", Offset = "0xBD6F08", VA = "0xBD6F08")]
		public Hub(string name)
		{
		}

		[Token(Token = "0x60027E3")]
		[Address(RVA = "0xBD2D78", Offset = "0xBD2D78", VA = "0xBD2D78")]
		public Hub(string name, Connection manager)
		{
		}

		[Token(Token = "0x60027E4")]
		[Address(RVA = "0xBD6F10", Offset = "0xBD6F10", VA = "0xBD6F10")]
		public void On(string method, OnMethodCallCallbackDelegate callback)
		{
		}

		[Token(Token = "0x60027E5")]
		[Address(RVA = "0xBD6F80", Offset = "0xBD6F80", VA = "0xBD6F80")]
		public void Off(string method)
		{
		}

		[Token(Token = "0x60027E6")]
		[Address(RVA = "0xBD6FEC", Offset = "0xBD6FEC", VA = "0xBD6FEC")]
		public bool Call(string method, params object[] args)
		{
			return default(bool);
		}

		[Token(Token = "0x60027E7")]
		[Address(RVA = "0xBD7338", Offset = "0xBD7338", VA = "0xBD7338")]
		public bool Call(string method, OnMethodResultDelegate onResult, params object[] args)
		{
			return default(bool);
		}

		[Token(Token = "0x60027E8")]
		[Address(RVA = "0xBD7348", Offset = "0xBD7348", VA = "0xBD7348")]
		public bool Call(string method, OnMethodResultDelegate onResult, OnMethodFailedDelegate onResultError, params object[] args)
		{
			return default(bool);
		}

		[Token(Token = "0x60027E9")]
		[Address(RVA = "0xBD7354", Offset = "0xBD7354", VA = "0xBD7354")]
		public bool Call(string method, OnMethodResultDelegate onResult, OnMethodProgressDelegate onProgress, params object[] args)
		{
			return default(bool);
		}

		[Token(Token = "0x60027EA")]
		[Address(RVA = "0xBD7000", Offset = "0xBD7000", VA = "0xBD7000")]
		public bool Call(string method, OnMethodResultDelegate onResult, OnMethodFailedDelegate onResultError, OnMethodProgressDelegate onProgress, params object[] args)
		{
			return default(bool);
		}

		[Token(Token = "0x60027EB")]
		[Address(RVA = "0xBD7364", Offset = "0xBD7364", VA = "0xBD7364", Slot = "6")]
		private bool BestHTTP.SignalR.Hubs.IHub.Call(ClientMessage msg)
		{
			return default(bool);
		}

		[Token(Token = "0x60027EC")]
		[Address(RVA = "0xBD7BFC", Offset = "0xBD7BFC", VA = "0xBD7BFC", Slot = "7")]
		private bool BestHTTP.SignalR.Hubs.IHub.HasSentMessageId(ulong id)
		{
			return default(bool);
		}

		[Token(Token = "0x60027ED")]
		[Address(RVA = "0xBD7C64", Offset = "0xBD7C64", VA = "0xBD7C64", Slot = "8")]
		private void BestHTTP.SignalR.Hubs.IHub.Close()
		{
		}

		[Token(Token = "0x60027EE")]
		[Address(RVA = "0xBD7CBC", Offset = "0xBD7CBC", VA = "0xBD7CBC", Slot = "9")]
		private void BestHTTP.SignalR.Hubs.IHub.OnMethod(MethodCallMessage msg)
		{
		}

		[Token(Token = "0x60027EF")]
		[Address(RVA = "0xBD8440", Offset = "0xBD8440", VA = "0xBD8440", Slot = "10")]
		private void BestHTTP.SignalR.Hubs.IHub.OnMessage(IServerMessage msg)
		{
		}

		[Token(Token = "0x60027F0")]
		[Address(RVA = "0xBD8140", Offset = "0xBD8140", VA = "0xBD8140")]
		private void MergeState(IDictionary<string, object> state)
		{
		}

		[Token(Token = "0x60027F1")]
		[Address(RVA = "0xBD75D4", Offset = "0xBD75D4", VA = "0xBD75D4")]
		private string BuildMessage(ClientMessage msg)
		{
			return null;
		}
	}
	[Token(Token = "0x2000469")]
	public interface IHub
	{
		[Token(Token = "0x17000579")]
		Connection Connection
		{
			[Token(Token = "0x60027F2")]
			get;
			[Token(Token = "0x60027F3")]
			set;
		}

		[Token(Token = "0x60027F4")]
		bool Call(ClientMessage msg);

		[Token(Token = "0x60027F5")]
		bool HasSentMessageId(ulong id);

		[Token(Token = "0x60027F6")]
		void Close();

		[Token(Token = "0x60027F7")]
		void OnMethod(MethodCallMessage msg);

		[Token(Token = "0x60027F8")]
		void OnMessage(IServerMessage msg);
	}
}
namespace BestHTTP.SignalR.Authentication
{
	[Token(Token = "0x200046A")]
	public delegate void OnAuthenticationSuccededDelegate(IAuthenticationProvider provider);
	[Token(Token = "0x200046B")]
	public delegate void OnAuthenticationFailedDelegate(IAuthenticationProvider provider, string reason);
	[Token(Token = "0x200046C")]
	public interface IAuthenticationProvider
	{
		[Token(Token = "0x1700057A")]
		bool IsPreAuthRequired
		{
			[Token(Token = "0x6002801")]
			get;
		}

		[Token(Token = "0x14000021")]
		event OnAuthenticationSuccededDelegate OnAuthenticationSucceded;

		[Token(Token = "0x14000022")]
		event OnAuthenticationFailedDelegate OnAuthenticationFailed;

		[Token(Token = "0x6002806")]
		void StartAuthentication();

		[Token(Token = "0x6002807")]
		void PrepareRequest(HTTPRequest request, RequestTypes type);
	}
}
namespace BestHTTP.ServerSentEvents
{
	[Token(Token = "0x200046D")]
	public enum States
	{
		[Token(Token = "0x400162B")]
		Initial,
		[Token(Token = "0x400162C")]
		Connecting,
		[Token(Token = "0x400162D")]
		Open,
		[Token(Token = "0x400162E")]
		Retrying,
		[Token(Token = "0x400162F")]
		Closing,
		[Token(Token = "0x4001630")]
		Closed
	}
	[Token(Token = "0x200046E")]
	public delegate void OnGeneralEventDelegate(EventSource eventSource);
	[Token(Token = "0x200046F")]
	public delegate void OnMessageDelegate(EventSource eventSource, Message message);
	[Token(Token = "0x2000470")]
	public delegate void OnErrorDelegate(EventSource eventSource, string error);
	[Token(Token = "0x2000471")]
	public delegate bool OnRetryDelegate(EventSource eventSource);
	[Token(Token = "0x2000472")]
	public delegate void OnEventDelegate(EventSource eventSource, Message message);
	[Token(Token = "0x2000473")]
	public delegate void OnStateChangedDelegate(EventSource eventSource, States oldState, States newState);
	[Token(Token = "0x2000474")]
	public class EventSource : IHeartbeat
	{
		[Token(Token = "0x4001631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824234", Offset = "0x824234")]
		private Uri <Uri>k__BackingField;

		[Token(Token = "0x4001632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private States _state;

		[Token(Token = "0x4001633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824244", Offset = "0x824244")]
		private TimeSpan <ReconnectionTime>k__BackingField;

		[Token(Token = "0x4001634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824254", Offset = "0x824254")]
		private string <LastEventId>k__BackingField;

		[Token(Token = "0x4001635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824264", Offset = "0x824264")]
		private HTTPRequest <InternalRequest>k__BackingField;

		[Token(Token = "0x400163C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Dictionary<string, OnEventDelegate> EventTable;

		[Token(Token = "0x400163D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private byte RetryCount;

		[Token(Token = "0x400163E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private DateTime RetryCalled;

		[Token(Token = "0x1700057B")]
		public Uri Uri
		{
			[Token(Token = "0x6002820")]
			[Address(RVA = "0xBCC9E0", Offset = "0xBCC9E0", VA = "0xBCC9E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8326C8", Offset = "0x8326C8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002821")]
			[Address(RVA = "0xBCC9E8", Offset = "0xBCC9E8", VA = "0xBCC9E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8326D8", Offset = "0x8326D8")]
			private set
			{
			}
		}

		[Token(Token = "0x1700057C")]
		public States State
		{
			[Token(Token = "0x6002822")]
			[Address(RVA = "0xBCC9F0", Offset = "0xBCC9F0", VA = "0xBCC9F0")]
			get
			{
				return default(States);
			}
			[Token(Token = "0x6002823")]
			[Address(RVA = "0xBCC9F8", Offset = "0xBCC9F8", VA = "0xBCC9F8")]
			private set
			{
			}
		}

		[Token(Token = "0x1700057D")]
		public TimeSpan ReconnectionTime
		{
			[Token(Token = "0x6002824")]
			[Address(RVA = "0xBCCFD0", Offset = "0xBCCFD0", VA = "0xBCCFD0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8326E8", Offset = "0x8326E8")]
			get
			{
				return default(TimeSpan);
			}
			[Token(Token = "0x6002825")]
			[Address(RVA = "0xBCCFD8", Offset = "0xBCCFD8", VA = "0xBCCFD8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8326F8", Offset = "0x8326F8")]
			set
			{
			}
		}

		[Token(Token = "0x1700057E")]
		public string LastEventId
		{
			[Token(Token = "0x6002826")]
			[Address(RVA = "0xBCCFE0", Offset = "0xBCCFE0", VA = "0xBCCFE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832708", Offset = "0x832708")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002827")]
			[Address(RVA = "0xBCCFE8", Offset = "0xBCCFE8", VA = "0xBCCFE8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832718", Offset = "0x832718")]
			private set
			{
			}
		}

		[Token(Token = "0x1700057F")]
		public HTTPRequest InternalRequest
		{
			[Token(Token = "0x6002828")]
			[Address(RVA = "0xBCCFF0", Offset = "0xBCCFF0", VA = "0xBCCFF0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832728", Offset = "0x832728")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002829")]
			[Address(RVA = "0xBCCFF8", Offset = "0xBCCFF8", VA = "0xBCCFF8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832738", Offset = "0x832738")]
			private set
			{
			}
		}

		[Token(Token = "0x14000023")]
		public event OnGeneralEventDelegate OnOpen
		{
			[Token(Token = "0x600282A")]
			[Address(RVA = "0xBCD000", Offset = "0xBCD000", VA = "0xBCD000")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832748", Offset = "0x832748")]
			add
			{
			}
			[Token(Token = "0x600282B")]
			[Address(RVA = "0xBCD0A4", Offset = "0xBCD0A4", VA = "0xBCD0A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832758", Offset = "0x832758")]
			remove
			{
			}
		}

		[Token(Token = "0x14000024")]
		public event OnMessageDelegate OnMessage
		{
			[Token(Token = "0x600282C")]
			[Address(RVA = "0xBCD148", Offset = "0xBCD148", VA = "0xBCD148")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832768", Offset = "0x832768")]
			add
			{
			}
			[Token(Token = "0x600282D")]
			[Address(RVA = "0xBCD1EC", Offset = "0xBCD1EC", VA = "0xBCD1EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832778", Offset = "0x832778")]
			remove
			{
			}
		}

		[Token(Token = "0x14000025")]
		public event OnErrorDelegate OnError
		{
			[Token(Token = "0x600282E")]
			[Address(RVA = "0xBCD290", Offset = "0xBCD290", VA = "0xBCD290")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832788", Offset = "0x832788")]
			add
			{
			}
			[Token(Token = "0x600282F")]
			[Address(RVA = "0xBCD334", Offset = "0xBCD334", VA = "0xBCD334")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832798", Offset = "0x832798")]
			remove
			{
			}
		}

		[Token(Token = "0x14000026")]
		public event OnRetryDelegate OnRetry
		{
			[Token(Token = "0x6002830")]
			[Address(RVA = "0xBCD3D8", Offset = "0xBCD3D8", VA = "0xBCD3D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8327A8", Offset = "0x8327A8")]
			add
			{
			}
			[Token(Token = "0x6002831")]
			[Address(RVA = "0xBCD47C", Offset = "0xBCD47C", VA = "0xBCD47C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8327B8", Offset = "0x8327B8")]
			remove
			{
			}
		}

		[Token(Token = "0x14000027")]
		public event OnGeneralEventDelegate OnClosed
		{
			[Token(Token = "0x6002832")]
			[Address(RVA = "0xBCD520", Offset = "0xBCD520", VA = "0xBCD520")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8327C8", Offset = "0x8327C8")]
			add
			{
			}
			[Token(Token = "0x6002833")]
			[Address(RVA = "0xBCD5C4", Offset = "0xBCD5C4", VA = "0xBCD5C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8327D8", Offset = "0x8327D8")]
			remove
			{
			}
		}

		[Token(Token = "0x14000028")]
		public event OnStateChangedDelegate OnStateChanged
		{
			[Token(Token = "0x6002834")]
			[Address(RVA = "0xBCD668", Offset = "0xBCD668", VA = "0xBCD668")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8327E8", Offset = "0x8327E8")]
			add
			{
			}
			[Token(Token = "0x6002835")]
			[Address(RVA = "0xBCD70C", Offset = "0xBCD70C", VA = "0xBCD70C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8327F8", Offset = "0x8327F8")]
			remove
			{
			}
		}

		[Token(Token = "0x6002836")]
		[Address(RVA = "0xBCD7B0", Offset = "0xBCD7B0", VA = "0xBCD7B0")]
		public EventSource(Uri uri)
		{
		}

		[Token(Token = "0x6002837")]
		[Address(RVA = "0xBCD964", Offset = "0xBCD964", VA = "0xBCD964")]
		public void Open()
		{
		}

		[Token(Token = "0x6002838")]
		[Address(RVA = "0xBCDA14", Offset = "0xBCDA14", VA = "0xBCDA14")]
		public void Close()
		{
		}

		[Token(Token = "0x6002839")]
		[Address(RVA = "0xBCDA70", Offset = "0xBCDA70", VA = "0xBCDA70")]
		public void On(string eventName, OnEventDelegate action)
		{
		}

		[Token(Token = "0x600283A")]
		[Address(RVA = "0xBCDB10", Offset = "0xBCDB10", VA = "0xBCDB10")]
		public void Off(string eventName)
		{
		}

		[Token(Token = "0x600283B")]
		[Address(RVA = "0xBCDB8C", Offset = "0xBCDB8C", VA = "0xBCDB8C")]
		private void CallOnError(string error, string msg)
		{
		}

		[Token(Token = "0x600283C")]
		[Address(RVA = "0xBCE124", Offset = "0xBCE124", VA = "0xBCE124")]
		private bool CallOnRetry()
		{
			return default(bool);
		}

		[Token(Token = "0x600283D")]
		[Address(RVA = "0xBCE658", Offset = "0xBCE658", VA = "0xBCE658")]
		private void SetClosed(string msg)
		{
		}

		[Token(Token = "0x600283E")]
		[Address(RVA = "0xBCEBA0", Offset = "0xBCEBA0", VA = "0xBCEBA0")]
		private void Retry()
		{
		}

		[Token(Token = "0x600283F")]
		[Address(RVA = "0xBCEC8C", Offset = "0xBCEC8C", VA = "0xBCEC8C")]
		private void OnUpgraded(HTTPRequest originalRequest, HTTPResponse response)
		{
		}

		[Token(Token = "0x6002840")]
		[Address(RVA = "0xBCEF98", Offset = "0xBCEF98", VA = "0xBCEF98")]
		private void OnRequestFinished(HTTPRequest req, HTTPResponse resp)
		{
		}

		[Token(Token = "0x6002841")]
		[Address(RVA = "0xBCF244", Offset = "0xBCF244", VA = "0xBCF244")]
		private void OnMessageReceived(EventSourceResponse resp, Message message)
		{
		}

		[Token(Token = "0x6002842")]
		[Address(RVA = "0xBCFD80", Offset = "0xBCFD80", VA = "0xBCFD80", Slot = "4")]
		private void BestHTTP.Extensions.IHeartbeat.OnHeartbeatUpdate(TimeSpan dif)
		{
		}
	}
	[Token(Token = "0x2000475")]
	internal sealed class EventSourceResponse : HTTPResponse, IProtocol
	{
		[Token(Token = "0x400163F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8242D4", Offset = "0x8242D4")]
		private bool <IsClosed>k__BackingField;

		[Token(Token = "0x4001640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Action<EventSourceResponse, Message> OnMessage;

		[Token(Token = "0x4001641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Action<EventSourceResponse> OnClosed;

		[Token(Token = "0x4001642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private object FrameLock;

		[Token(Token = "0x4001643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private byte[] LineBuffer;

		[Token(Token = "0x4001644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private int LineBufferPos;

		[Token(Token = "0x4001645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Message CurrentMessage;

		[Token(Token = "0x4001646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private List<Message> CompletedMessages;

		[Token(Token = "0x17000580")]
		public bool IsClosed
		{
			[Token(Token = "0x6002843")]
			[Address(RVA = "0xBCFEB8", Offset = "0xBCFEB8", VA = "0xBCFEB8", Slot = "6")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832808", Offset = "0x832808")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002844")]
			[Address(RVA = "0xBCFEC0", Offset = "0xBCFEC0", VA = "0xBCFEC0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832818", Offset = "0x832818")]
			private set
			{
			}
		}

		[Token(Token = "0x6002845")]
		[Address(RVA = "0xBBF95C", Offset = "0xBBF95C", VA = "0xBBF95C")]
		internal EventSourceResponse(HTTPRequest request, Stream stream, bool isStreamed, bool isFromCache)
		{
		}

		[Token(Token = "0x6002846")]
		[Address(RVA = "0xBCFECC", Offset = "0xBCFECC", VA = "0xBCFECC", Slot = "5")]
		internal override bool Receive(int forceReadRawContentLength = -1, bool readPayloadData = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6002847")]
		[Address(RVA = "0xBCEEE8", Offset = "0xBCEEE8", VA = "0xBCEEE8")]
		internal void StartReceive()
		{
		}

		[Token(Token = "0x6002848")]
		[Address(RVA = "0xBCFF88", Offset = "0xBCFF88", VA = "0xBCFF88")]
		private void ReceiveThreadFunc(object param)
		{
		}

		[Token(Token = "0x6002849")]
		[Address(RVA = "0xBD01CC", Offset = "0xBD01CC", VA = "0xBD01CC")]
		private new void ReadChunked(Stream stream)
		{
		}

		[Token(Token = "0x600284A")]
		[Address(RVA = "0xBD032C", Offset = "0xBD032C", VA = "0xBD032C")]
		private new void ReadRaw(Stream stream, int contentLength)
		{
		}

		[Token(Token = "0x600284B")]
		[Address(RVA = "0xBD03D8", Offset = "0xBD03D8", VA = "0xBD03D8")]
		public void FeedData(byte[] buffer, int count)
		{
		}

		[Token(Token = "0x600284C")]
		[Address(RVA = "0xBD05A4", Offset = "0xBD05A4", VA = "0xBD05A4")]
		private void ParseLine(byte[] buffer, int count)
		{
		}

		[Token(Token = "0x600284D")]
		[Address(RVA = "0xBD0924", Offset = "0xBD0924", VA = "0xBD0924", Slot = "7")]
		private void BestHTTP.IProtocol.HandleEvents()
		{
		}
	}
	[Token(Token = "0x2000476")]
	public sealed class Message
	{
		[Token(Token = "0x4001647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8242E4", Offset = "0x8242E4")]
		private string <Id>k__BackingField;

		[Token(Token = "0x4001648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8242F4", Offset = "0x8242F4")]
		private string <Event>k__BackingField;

		[Token(Token = "0x4001649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824304", Offset = "0x824304")]
		private string <Data>k__BackingField;

		[Token(Token = "0x400164A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824314", Offset = "0x824314")]
		private TimeSpan <Retry>k__BackingField;

		[Token(Token = "0x17000581")]
		public string Id
		{
			[Token(Token = "0x600284E")]
			[Address(RVA = "0xBD0DF8", Offset = "0xBD0DF8", VA = "0xBD0DF8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832828", Offset = "0x832828")]
			get
			{
				return null;
			}
			[Token(Token = "0x600284F")]
			[Address(RVA = "0xBD0E00", Offset = "0xBD0E00", VA = "0xBD0E00")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832838", Offset = "0x832838")]
			internal set
			{
			}
		}

		[Token(Token = "0x17000582")]
		public string Event
		{
			[Token(Token = "0x6002850")]
			[Address(RVA = "0xBD0E08", Offset = "0xBD0E08", VA = "0xBD0E08")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832848", Offset = "0x832848")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002851")]
			[Address(RVA = "0xBD0E10", Offset = "0xBD0E10", VA = "0xBD0E10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832858", Offset = "0x832858")]
			internal set
			{
			}
		}

		[Token(Token = "0x17000583")]
		public string Data
		{
			[Token(Token = "0x6002852")]
			[Address(RVA = "0xBD0E18", Offset = "0xBD0E18", VA = "0xBD0E18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832868", Offset = "0x832868")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002853")]
			[Address(RVA = "0xBD0E20", Offset = "0xBD0E20", VA = "0xBD0E20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832878", Offset = "0x832878")]
			internal set
			{
			}
		}

		[Token(Token = "0x17000584")]
		public TimeSpan Retry
		{
			[Token(Token = "0x6002854")]
			[Address(RVA = "0xBD0E28", Offset = "0xBD0E28", VA = "0xBD0E28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832888", Offset = "0x832888")]
			get
			{
				return default(TimeSpan);
			}
			[Token(Token = "0x6002855")]
			[Address(RVA = "0xBD0E30", Offset = "0xBD0E30", VA = "0xBD0E30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832898", Offset = "0x832898")]
			internal set
			{
			}
		}

		[Token(Token = "0x6002856")]
		[Address(RVA = "0xBD0E38", Offset = "0xBD0E38", VA = "0xBD0E38", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6002857")]
		[Address(RVA = "0xBD091C", Offset = "0xBD091C", VA = "0xBD091C")]
		public Message()
		{
		}
	}
}
namespace BestHTTP.PlatformSupport.TcpClient.General
{
	[Token(Token = "0x2000477")]
	public class TcpClient : IDisposable
	{
		[Token(Token = "0x20006E2")]
		private enum Properties : uint
		{
			[Token(Token = "0x4002674")]
			LingerState = 1u,
			[Token(Token = "0x4002675")]
			NoDelay = 2u,
			[Token(Token = "0x4002676")]
			ReceiveBufferSize = 4u,
			[Token(Token = "0x4002677")]
			ReceiveTimeout = 8u,
			[Token(Token = "0x4002678")]
			SendBufferSize = 0x10u,
			[Token(Token = "0x4002679")]
			SendTimeout = 0x20u
		}

		[Token(Token = "0x20006E3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820E70", Offset = "0x820E70")]
		private sealed class <>c__DisplayClass55_0
		{
			[Token(Token = "0x400267A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ManualResetEvent mre;

			[Token(Token = "0x6003634")]
			[Address(RVA = "0xBCC130", Offset = "0xBCC130", VA = "0xBCC130")]
			public <>c__DisplayClass55_0()
			{
			}

			[Token(Token = "0x6003635")]
			[Address(RVA = "0xBCC9C4", Offset = "0xBCC9C4", VA = "0xBCC9C4")]
			internal void <Connect>b__0(IAsyncResult res)
			{
			}
		}

		[Token(Token = "0x400164B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private NetworkStream stream;

		[Token(Token = "0x400164C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool active;

		[Token(Token = "0x400164D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Socket client;

		[Token(Token = "0x400164E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool disposed;

		[Token(Token = "0x400164F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Properties values;

		[Token(Token = "0x4001650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int recv_timeout;

		[Token(Token = "0x4001651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int send_timeout;

		[Token(Token = "0x4001652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int recv_buffer_size;

		[Token(Token = "0x4001653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int send_buffer_size;

		[Token(Token = "0x4001654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private LingerOption linger_state;

		[Token(Token = "0x4001655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool no_delay;

		[Token(Token = "0x4001656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824324", Offset = "0x824324")]
		private TimeSpan <ConnectTimeout>k__BackingField;

		[Token(Token = "0x17000585")]
		protected bool Active
		{
			[Token(Token = "0x600285D")]
			[Address(RVA = "0xBCB708", Offset = "0xBCB708", VA = "0xBCB708")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600285E")]
			[Address(RVA = "0xBCB710", Offset = "0xBCB710", VA = "0xBCB710")]
			set
			{
			}
		}

		[Token(Token = "0x17000586")]
		public Socket Client
		{
			[Token(Token = "0x600285F")]
			[Address(RVA = "0xBCB71C", Offset = "0xBCB71C", VA = "0xBCB71C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002860")]
			[Address(RVA = "0xBCB724", Offset = "0xBCB724", VA = "0xBCB724")]
			set
			{
			}
		}

		[Token(Token = "0x17000587")]
		public int Available
		{
			[Token(Token = "0x6002861")]
			[Address(RVA = "0xBCB730", Offset = "0xBCB730", VA = "0xBCB730")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000588")]
		public bool Connected
		{
			[Token(Token = "0x6002862")]
			[Address(RVA = "0xBCB74C", Offset = "0xBCB74C", VA = "0xBCB74C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000589")]
		public bool ExclusiveAddressUse
		{
			[Token(Token = "0x6002864")]
			[Address(RVA = "0xBCB86C", Offset = "0xBCB86C", VA = "0xBCB86C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002865")]
			[Address(RVA = "0xBCB888", Offset = "0xBCB888", VA = "0xBCB888")]
			set
			{
			}
		}

		[Token(Token = "0x1700058A")]
		public LingerOption LingerState
		{
			[Token(Token = "0x6002867")]
			[Address(RVA = "0xBCB8B4", Offset = "0xBCB8B4", VA = "0xBCB8B4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002868")]
			[Address(RVA = "0xBCB958", Offset = "0xBCB958", VA = "0xBCB958")]
			set
			{
			}
		}

		[Token(Token = "0x1700058B")]
		public bool NoDelay
		{
			[Token(Token = "0x6002869")]
			[Address(RVA = "0xBCB9A0", Offset = "0xBCB9A0", VA = "0xBCB9A0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600286A")]
			[Address(RVA = "0xBCBA3C", Offset = "0xBCBA3C", VA = "0xBCBA3C")]
			set
			{
			}
		}

		[Token(Token = "0x1700058C")]
		public int ReceiveBufferSize
		{
			[Token(Token = "0x600286B")]
			[Address(RVA = "0xBCBA88", Offset = "0xBCBA88", VA = "0xBCBA88")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600286C")]
			[Address(RVA = "0xBCBB24", Offset = "0xBCBB24", VA = "0xBCBB24")]
			set
			{
			}
		}

		[Token(Token = "0x1700058D")]
		public int ReceiveTimeout
		{
			[Token(Token = "0x600286D")]
			[Address(RVA = "0xBCBB6C", Offset = "0xBCBB6C", VA = "0xBCBB6C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600286E")]
			[Address(RVA = "0xBCBC08", Offset = "0xBCBC08", VA = "0xBCBC08")]
			set
			{
			}
		}

		[Token(Token = "0x1700058E")]
		public int SendBufferSize
		{
			[Token(Token = "0x600286F")]
			[Address(RVA = "0xBCBC4C", Offset = "0xBCBC4C", VA = "0xBCBC4C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002870")]
			[Address(RVA = "0xBCBCE8", Offset = "0xBCBCE8", VA = "0xBCBCE8")]
			set
			{
			}
		}

		[Token(Token = "0x1700058F")]
		public int SendTimeout
		{
			[Token(Token = "0x6002871")]
			[Address(RVA = "0xBCBD30", Offset = "0xBCBD30", VA = "0xBCBD30")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002872")]
			[Address(RVA = "0xBCBDCC", Offset = "0xBCBDCC", VA = "0xBCBDCC")]
			set
			{
			}
		}

		[Token(Token = "0x17000590")]
		public TimeSpan ConnectTimeout
		{
			[Token(Token = "0x6002873")]
			[Address(RVA = "0xBCBE14", Offset = "0xBCBE14", VA = "0xBCBE14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8328A8", Offset = "0x8328A8")]
			get
			{
				return default(TimeSpan);
			}
			[Token(Token = "0x6002874")]
			[Address(RVA = "0xBCBE1C", Offset = "0xBCBE1C", VA = "0xBCBE1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8328B8", Offset = "0x8328B8")]
			set
			{
			}
		}

		[Token(Token = "0x6002858")]
		[Address(RVA = "0xBCB260", Offset = "0xBCB260", VA = "0xBCB260")]
		private void Init(AddressFamily family)
		{
		}

		[Token(Token = "0x6002859")]
		[Address(RVA = "0xBCB2F0", Offset = "0xBCB2F0", VA = "0xBCB2F0")]
		public TcpClient()
		{
		}

		[Token(Token = "0x600285A")]
		[Address(RVA = "0xBCB3EC", Offset = "0xBCB3EC", VA = "0xBCB3EC")]
		public TcpClient(AddressFamily family)
		{
		}

		[Token(Token = "0x600285B")]
		[Address(RVA = "0xBCB56C", Offset = "0xBCB56C", VA = "0xBCB56C")]
		public TcpClient(IPEndPoint localEP)
		{
		}

		[Token(Token = "0x600285C")]
		[Address(RVA = "0xBCB62C", Offset = "0xBCB62C", VA = "0xBCB62C")]
		public TcpClient(string hostname, int port)
		{
		}

		[Token(Token = "0x6002863")]
		[Address(RVA = "0xBCB768", Offset = "0xBCB768", VA = "0xBCB768")]
		public bool IsConnected()
		{
			return default(bool);
		}

		[Token(Token = "0x6002866")]
		[Address(RVA = "0xBCB8A8", Offset = "0xBCB8A8", VA = "0xBCB8A8")]
		internal void SetTcpClient(Socket s)
		{
		}

		[Token(Token = "0x6002875")]
		[Address(RVA = "0xBCBE24", Offset = "0xBCBE24", VA = "0xBCBE24")]
		public void Close()
		{
		}

		[Token(Token = "0x6002876")]
		[Address(RVA = "0xBCBEC8", Offset = "0xBCBEC8", VA = "0xBCBEC8")]
		public void Connect(IPEndPoint remoteEP)
		{
		}

		[Token(Token = "0x6002877")]
		[Address(RVA = "0xBCC1E4", Offset = "0xBCC1E4", VA = "0xBCC1E4")]
		public void Connect(IPAddress address, int port)
		{
		}

		[Token(Token = "0x6002878")]
		[Address(RVA = "0xBCC260", Offset = "0xBCC260", VA = "0xBCC260")]
		private void SetOptions()
		{
		}

		[Token(Token = "0x6002879")]
		[Address(RVA = "0xBCB6D0", Offset = "0xBCB6D0", VA = "0xBCB6D0")]
		public void Connect(string hostname, int port)
		{
		}

		[Token(Token = "0x600287A")]
		[Address(RVA = "0xBCC300", Offset = "0xBCC300", VA = "0xBCC300")]
		public void Connect(IPAddress[] ipAddresses, int port)
		{
		}

		[Token(Token = "0x600287B")]
		[Address(RVA = "0xBCC744", Offset = "0xBCC744", VA = "0xBCC744")]
		public void EndConnect(IAsyncResult asyncResult)
		{
		}

		[Token(Token = "0x600287C")]
		[Address(RVA = "0xBCC760", Offset = "0xBCC760", VA = "0xBCC760")]
		public IAsyncResult BeginConnect(IPAddress address, int port, AsyncCallback requestCallback, object state)
		{
			return null;
		}

		[Token(Token = "0x600287D")]
		[Address(RVA = "0xBCC77C", Offset = "0xBCC77C", VA = "0xBCC77C")]
		public IAsyncResult BeginConnect(IPAddress[] addresses, int port, AsyncCallback requestCallback, object state)
		{
			return null;
		}

		[Token(Token = "0x600287E")]
		[Address(RVA = "0xBCC798", Offset = "0xBCC798", VA = "0xBCC798")]
		public IAsyncResult BeginConnect(string host, int port, AsyncCallback requestCallback, object state)
		{
			return null;
		}

		[Token(Token = "0x600287F")]
		[Address(RVA = "0xBCC7B4", Offset = "0xBCC7B4", VA = "0xBCC7B4", Slot = "4")]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002880")]
		[Address(RVA = "0xBCC830", Offset = "0xBCC830", VA = "0xBCC830", Slot = "5")]
		protected virtual void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6002881")]
		[Address(RVA = "0xBCC898", Offset = "0xBCC898", VA = "0xBCC898", Slot = "1")]
		~TcpClient()
		{
		}

		[Token(Token = "0x6002882")]
		[Address(RVA = "0xBCC90C", Offset = "0xBCC90C", VA = "0xBCC90C")]
		public Stream GetStream()
		{
			return null;
		}

		[Token(Token = "0x6002883")]
		[Address(RVA = "0xBCC138", Offset = "0xBCC138", VA = "0xBCC138")]
		private void CheckDisposed()
		{
		}
	}
}
namespace BestHTTP.Logger
{
	[Token(Token = "0x2000478")]
	public class DefaultLogger : ILogger
	{
		[Token(Token = "0x4001657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824334", Offset = "0x824334")]
		private Loglevels <Level>k__BackingField;

		[Token(Token = "0x4001658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824344", Offset = "0x824344")]
		private string <FormatVerbose>k__BackingField;

		[Token(Token = "0x4001659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824354", Offset = "0x824354")]
		private string <FormatInfo>k__BackingField;

		[Token(Token = "0x400165A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824364", Offset = "0x824364")]
		private string <FormatWarn>k__BackingField;

		[Token(Token = "0x400165B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824374", Offset = "0x824374")]
		private string <FormatErr>k__BackingField;

		[Token(Token = "0x400165C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824384", Offset = "0x824384")]
		private string <FormatEx>k__BackingField;

		[Token(Token = "0x17000591")]
		public Loglevels Level
		{
			[Token(Token = "0x6002884")]
			[Address(RVA = "0xBC9E68", Offset = "0xBC9E68", VA = "0xBC9E68", Slot = "4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8328C8", Offset = "0x8328C8")]
			get
			{
				return default(Loglevels);
			}
			[Token(Token = "0x6002885")]
			[Address(RVA = "0xBC9E70", Offset = "0xBC9E70", VA = "0xBC9E70", Slot = "5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8328D8", Offset = "0x8328D8")]
			set
			{
			}
		}

		[Token(Token = "0x17000592")]
		public string FormatVerbose
		{
			[Token(Token = "0x6002886")]
			[Address(RVA = "0xBC9E78", Offset = "0xBC9E78", VA = "0xBC9E78", Slot = "6")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8328E8", Offset = "0x8328E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002887")]
			[Address(RVA = "0xBC9E80", Offset = "0xBC9E80", VA = "0xBC9E80", Slot = "7")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8328F8", Offset = "0x8328F8")]
			set
			{
			}
		}

		[Token(Token = "0x17000593")]
		public string FormatInfo
		{
			[Token(Token = "0x6002888")]
			[Address(RVA = "0xBC9E88", Offset = "0xBC9E88", VA = "0xBC9E88", Slot = "8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832908", Offset = "0x832908")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002889")]
			[Address(RVA = "0xBC9E90", Offset = "0xBC9E90", VA = "0xBC9E90", Slot = "9")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832918", Offset = "0x832918")]
			set
			{
			}
		}

		[Token(Token = "0x17000594")]
		public string FormatWarn
		{
			[Token(Token = "0x600288A")]
			[Address(RVA = "0xBC9E98", Offset = "0xBC9E98", VA = "0xBC9E98", Slot = "10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832928", Offset = "0x832928")]
			get
			{
				return null;
			}
			[Token(Token = "0x600288B")]
			[Address(RVA = "0xBC9EA0", Offset = "0xBC9EA0", VA = "0xBC9EA0", Slot = "11")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832938", Offset = "0x832938")]
			set
			{
			}
		}

		[Token(Token = "0x17000595")]
		public string FormatErr
		{
			[Token(Token = "0x600288C")]
			[Address(RVA = "0xBC9EA8", Offset = "0xBC9EA8", VA = "0xBC9EA8", Slot = "12")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832948", Offset = "0x832948")]
			get
			{
				return null;
			}
			[Token(Token = "0x600288D")]
			[Address(RVA = "0xBC9EB0", Offset = "0xBC9EB0", VA = "0xBC9EB0", Slot = "13")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832958", Offset = "0x832958")]
			set
			{
			}
		}

		[Token(Token = "0x17000596")]
		public string FormatEx
		{
			[Token(Token = "0x600288E")]
			[Address(RVA = "0xBC9EB8", Offset = "0xBC9EB8", VA = "0xBC9EB8", Slot = "14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832968", Offset = "0x832968")]
			get
			{
				return null;
			}
			[Token(Token = "0x600288F")]
			[Address(RVA = "0xBC9EC0", Offset = "0xBC9EC0", VA = "0xBC9EC0", Slot = "15")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832978", Offset = "0x832978")]
			set
			{
			}
		}

		[Token(Token = "0x6002890")]
		[Address(RVA = "0xBC9EC8", Offset = "0xBC9EC8", VA = "0xBC9EC8")]
		public DefaultLogger()
		{
		}

		[Token(Token = "0x6002891")]
		[Address(RVA = "0xBC9F8C", Offset = "0xBC9F8C", VA = "0xBC9F8C", Slot = "16")]
		public void Verbose(string division, string verb)
		{
		}

		[Token(Token = "0x6002892")]
		[Address(RVA = "0xBCA0A4", Offset = "0xBCA0A4", VA = "0xBCA0A4", Slot = "17")]
		public void Information(string division, string info)
		{
		}

		[Token(Token = "0x6002893")]
		[Address(RVA = "0xBCA1BC", Offset = "0xBCA1BC", VA = "0xBCA1BC", Slot = "18")]
		public void Warning(string division, string warn)
		{
		}

		[Token(Token = "0x6002894")]
		[Address(RVA = "0xBCA2D4", Offset = "0xBCA2D4", VA = "0xBCA2D4", Slot = "19")]
		public void Error(string division, string err)
		{
		}

		[Token(Token = "0x6002895")]
		[Address(RVA = "0xBCA3EC", Offset = "0xBCA3EC", VA = "0xBCA3EC", Slot = "20")]
		public void Exception(string division, string msg, Exception ex)
		{
		}
	}
	[Token(Token = "0x2000479")]
	public enum Loglevels
	{
		[Token(Token = "0x400165E")]
		All,
		[Token(Token = "0x400165F")]
		Information,
		[Token(Token = "0x4001660")]
		Warning,
		[Token(Token = "0x4001661")]
		Error,
		[Token(Token = "0x4001662")]
		Exception,
		[Token(Token = "0x4001663")]
		None
	}
	[Token(Token = "0x200047A")]
	public interface ILogger
	{
		[Token(Token = "0x17000597")]
		Loglevels Level
		{
			[Token(Token = "0x6002896")]
			get;
			[Token(Token = "0x6002897")]
			set;
		}

		[Token(Token = "0x17000598")]
		string FormatVerbose
		{
			[Token(Token = "0x6002898")]
			get;
			[Token(Token = "0x6002899")]
			set;
		}

		[Token(Token = "0x17000599")]
		string FormatInfo
		{
			[Token(Token = "0x600289A")]
			get;
			[Token(Token = "0x600289B")]
			set;
		}

		[Token(Token = "0x1700059A")]
		string FormatWarn
		{
			[Token(Token = "0x600289C")]
			get;
			[Token(Token = "0x600289D")]
			set;
		}

		[Token(Token = "0x1700059B")]
		string FormatErr
		{
			[Token(Token = "0x600289E")]
			get;
			[Token(Token = "0x600289F")]
			set;
		}

		[Token(Token = "0x1700059C")]
		string FormatEx
		{
			[Token(Token = "0x60028A0")]
			get;
			[Token(Token = "0x60028A1")]
			set;
		}

		[Token(Token = "0x60028A2")]
		void Verbose(string division, string verb);

		[Token(Token = "0x60028A3")]
		void Information(string division, string info);

		[Token(Token = "0x60028A4")]
		void Warning(string division, string warn);

		[Token(Token = "0x60028A5")]
		void Error(string division, string err);

		[Token(Token = "0x60028A6")]
		void Exception(string division, string msg, Exception ex);
	}
}
namespace BestHTTP.JSON
{
	[Token(Token = "0x200047B")]
	public class Json
	{
		[Token(Token = "0x4001664")]
		private const int TOKEN_NONE = 0;

		[Token(Token = "0x4001665")]
		private const int TOKEN_CURLY_OPEN = 1;

		[Token(Token = "0x4001666")]
		private const int TOKEN_CURLY_CLOSE = 2;

		[Token(Token = "0x4001667")]
		private const int TOKEN_SQUARED_OPEN = 3;

		[Token(Token = "0x4001668")]
		private const int TOKEN_SQUARED_CLOSE = 4;

		[Token(Token = "0x4001669")]
		private const int TOKEN_COLON = 5;

		[Token(Token = "0x400166A")]
		private const int TOKEN_COMMA = 6;

		[Token(Token = "0x400166B")]
		private const int TOKEN_STRING = 7;

		[Token(Token = "0x400166C")]
		private const int TOKEN_NUMBER = 8;

		[Token(Token = "0x400166D")]
		private const int TOKEN_TRUE = 9;

		[Token(Token = "0x400166E")]
		private const int TOKEN_FALSE = 10;

		[Token(Token = "0x400166F")]
		private const int TOKEN_NULL = 11;

		[Token(Token = "0x4001670")]
		private const int BUILDER_CAPACITY = 2000;

		[Token(Token = "0x60028A7")]
		[Address(RVA = "0xBC87E8", Offset = "0xBC87E8", VA = "0xBC87E8")]
		public static object Decode(string json)
		{
			return null;
		}

		[Token(Token = "0x60028A8")]
		[Address(RVA = "0xBC8810", Offset = "0xBC8810", VA = "0xBC8810")]
		public static object Decode(string json, ref bool success)
		{
			return null;
		}

		[Token(Token = "0x60028A9")]
		[Address(RVA = "0xBC89AC", Offset = "0xBC89AC", VA = "0xBC89AC")]
		public static string Encode(object json)
		{
			return null;
		}

		[Token(Token = "0x60028AA")]
		[Address(RVA = "0xBC8C4C", Offset = "0xBC8C4C", VA = "0xBC8C4C")]
		protected static Dictionary<string, object> ParseObject(char[] json, ref int index, ref bool success)
		{
			return null;
		}

		[Token(Token = "0x60028AB")]
		[Address(RVA = "0xBC9320", Offset = "0xBC9320", VA = "0xBC9320")]
		protected static List<object> ParseArray(char[] json, ref int index, ref bool success)
		{
			return null;
		}

		[Token(Token = "0x60028AC")]
		[Address(RVA = "0xBC8854", Offset = "0xBC8854", VA = "0xBC8854")]
		protected static object ParseValue(char[] json, ref int index, ref bool success)
		{
			return null;
		}

		[Token(Token = "0x60028AD")]
		[Address(RVA = "0xBC9038", Offset = "0xBC9038", VA = "0xBC9038")]
		protected static string ParseString(char[] json, ref int index, ref bool success)
		{
			return null;
		}

		[Token(Token = "0x60028AE")]
		[Address(RVA = "0xBC9440", Offset = "0xBC9440", VA = "0xBC9440")]
		protected static double ParseNumber(char[] json, ref int index, ref bool success)
		{
			return default(double);
		}

		[Token(Token = "0x60028AF")]
		[Address(RVA = "0xBC9608", Offset = "0xBC9608", VA = "0xBC9608")]
		protected static int GetLastIndexOfNumber(char[] json, int index)
		{
			return default(int);
		}

		[Token(Token = "0x60028B0")]
		[Address(RVA = "0xBC9550", Offset = "0xBC9550", VA = "0xBC9550")]
		protected static void EatWhitespace(char[] json, ref int index)
		{
		}

		[Token(Token = "0x60028B1")]
		[Address(RVA = "0xBC9014", Offset = "0xBC9014", VA = "0xBC9014")]
		protected static int LookAhead(char[] json, int index)
		{
			return default(int);
		}

		[Token(Token = "0x60028B2")]
		[Address(RVA = "0xBC8DA0", Offset = "0xBC8DA0", VA = "0xBC8DA0")]
		protected static int NextToken(char[] json, ref int index)
		{
			return default(int);
		}

		[Token(Token = "0x60028B3")]
		[Address(RVA = "0xBC8A40", Offset = "0xBC8A40", VA = "0xBC8A40")]
		protected static bool SerializeValue(object value, StringBuilder builder)
		{
			return default(bool);
		}

		[Token(Token = "0x60028B4")]
		[Address(RVA = "0xBC9904", Offset = "0xBC9904", VA = "0xBC9904")]
		protected static bool SerializeObject(IDictionary anObject, StringBuilder builder)
		{
			return default(bool);
		}

		[Token(Token = "0x60028B5")]
		[Address(RVA = "0xBC9BD0", Offset = "0xBC9BD0", VA = "0xBC9BD0")]
		protected static bool SerializeArray(IList anArray, StringBuilder builder)
		{
			return default(bool);
		}

		[Token(Token = "0x60028B6")]
		[Address(RVA = "0xBC96C0", Offset = "0xBC96C0", VA = "0xBC96C0")]
		protected static bool SerializeString(string aString, StringBuilder builder)
		{
			return default(bool);
		}

		[Token(Token = "0x60028B7")]
		[Address(RVA = "0xBC9D98", Offset = "0xBC9D98", VA = "0xBC9D98")]
		protected static bool SerializeNumber(double number, StringBuilder builder)
		{
			return default(bool);
		}

		[Token(Token = "0x60028B8")]
		[Address(RVA = "0xBC9E60", Offset = "0xBC9E60", VA = "0xBC9E60")]
		public Json()
		{
		}
	}
}
namespace BestHTTP.Forms
{
	[Token(Token = "0x200047C")]
	public class HTTPFieldData
	{
		[Token(Token = "0x4001671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824394", Offset = "0x824394")]
		private string <Name>k__BackingField;

		[Token(Token = "0x4001672")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8243A4", Offset = "0x8243A4")]
		private string <FileName>k__BackingField;

		[Token(Token = "0x4001673")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8243B4", Offset = "0x8243B4")]
		private string <MimeType>k__BackingField;

		[Token(Token = "0x4001674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8243C4", Offset = "0x8243C4")]
		private Encoding <Encoding>k__BackingField;

		[Token(Token = "0x4001675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8243D4", Offset = "0x8243D4")]
		private string <Text>k__BackingField;

		[Token(Token = "0x4001676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8243E4", Offset = "0x8243E4")]
		private byte[] <Binary>k__BackingField;

		[Token(Token = "0x1700059D")]
		public string Name
		{
			[Token(Token = "0x60028B9")]
			[Address(RVA = "0xC06244", Offset = "0xC06244", VA = "0xC06244")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832988", Offset = "0x832988")]
			get
			{
				return null;
			}
			[Token(Token = "0x60028BA")]
			[Address(RVA = "0xC0624C", Offset = "0xC0624C", VA = "0xC0624C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832998", Offset = "0x832998")]
			set
			{
			}
		}

		[Token(Token = "0x1700059E")]
		public string FileName
		{
			[Token(Token = "0x60028BB")]
			[Address(RVA = "0xC06254", Offset = "0xC06254", VA = "0xC06254")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8329A8", Offset = "0x8329A8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60028BC")]
			[Address(RVA = "0xC0625C", Offset = "0xC0625C", VA = "0xC0625C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8329B8", Offset = "0x8329B8")]
			set
			{
			}
		}

		[Token(Token = "0x1700059F")]
		public string MimeType
		{
			[Token(Token = "0x60028BD")]
			[Address(RVA = "0xC06264", Offset = "0xC06264", VA = "0xC06264")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8329C8", Offset = "0x8329C8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60028BE")]
			[Address(RVA = "0xC0626C", Offset = "0xC0626C", VA = "0xC0626C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8329D8", Offset = "0x8329D8")]
			set
			{
			}
		}

		[Token(Token = "0x170005A0")]
		public Encoding Encoding
		{
			[Token(Token = "0x60028BF")]
			[Address(RVA = "0xC06274", Offset = "0xC06274", VA = "0xC06274")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8329E8", Offset = "0x8329E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60028C0")]
			[Address(RVA = "0xC0627C", Offset = "0xC0627C", VA = "0xC0627C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8329F8", Offset = "0x8329F8")]
			set
			{
			}
		}

		[Token(Token = "0x170005A1")]
		public string Text
		{
			[Token(Token = "0x60028C1")]
			[Address(RVA = "0xC06284", Offset = "0xC06284", VA = "0xC06284")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832A08", Offset = "0x832A08")]
			get
			{
				return null;
			}
			[Token(Token = "0x60028C2")]
			[Address(RVA = "0xC0628C", Offset = "0xC0628C", VA = "0xC0628C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832A18", Offset = "0x832A18")]
			set
			{
			}
		}

		[Token(Token = "0x170005A2")]
		public byte[] Binary
		{
			[Token(Token = "0x60028C3")]
			[Address(RVA = "0xC06294", Offset = "0xC06294", VA = "0xC06294")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832A28", Offset = "0x832A28")]
			get
			{
				return null;
			}
			[Token(Token = "0x60028C4")]
			[Address(RVA = "0xC0629C", Offset = "0xC0629C", VA = "0xC0629C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832A38", Offset = "0x832A38")]
			set
			{
			}
		}

		[Token(Token = "0x170005A3")]
		public byte[] Payload
		{
			[Token(Token = "0x60028C5")]
			[Address(RVA = "0xC062A4", Offset = "0xC062A4", VA = "0xC062A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60028C6")]
		[Address(RVA = "0xC062F8", Offset = "0xC062F8", VA = "0xC062F8")]
		public HTTPFieldData()
		{
		}
	}
	[Token(Token = "0x200047D")]
	public class HTTPFormBase
	{
		[Token(Token = "0x4001677")]
		private const int LongLength = 256;

		[Token(Token = "0x4001678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8243F4", Offset = "0x8243F4")]
		private List<HTTPFieldData> <Fields>k__BackingField;

		[Token(Token = "0x4001679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824404", Offset = "0x824404")]
		private bool <IsChanged>k__BackingField;

		[Token(Token = "0x400167A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824414", Offset = "0x824414")]
		private bool <HasBinary>k__BackingField;

		[Token(Token = "0x400167B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824424", Offset = "0x824424")]
		private bool <HasLongValue>k__BackingField;

		[Token(Token = "0x170005A4")]
		public List<HTTPFieldData> Fields
		{
			[Token(Token = "0x60028C7")]
			[Address(RVA = "0xC06300", Offset = "0xC06300", VA = "0xC06300")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832A48", Offset = "0x832A48")]
			get
			{
				return null;
			}
			[Token(Token = "0x60028C8")]
			[Address(RVA = "0xC06308", Offset = "0xC06308", VA = "0xC06308")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832A58", Offset = "0x832A58")]
			set
			{
			}
		}

		[Token(Token = "0x170005A5")]
		public bool IsEmpty
		{
			[Token(Token = "0x60028C9")]
			[Address(RVA = "0xC06310", Offset = "0xC06310", VA = "0xC06310")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005A6")]
		public bool IsChanged
		{
			[Token(Token = "0x60028CA")]
			[Address(RVA = "0xC0636C", Offset = "0xC0636C", VA = "0xC0636C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832A68", Offset = "0x832A68")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60028CB")]
			[Address(RVA = "0xC06374", Offset = "0xC06374", VA = "0xC06374")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832A78", Offset = "0x832A78")]
			protected set
			{
			}
		}

		[Token(Token = "0x170005A7")]
		public bool HasBinary
		{
			[Token(Token = "0x60028CC")]
			[Address(RVA = "0xC06380", Offset = "0xC06380", VA = "0xC06380")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832A88", Offset = "0x832A88")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60028CD")]
			[Address(RVA = "0xC06388", Offset = "0xC06388", VA = "0xC06388")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832A98", Offset = "0x832A98")]
			protected set
			{
			}
		}

		[Token(Token = "0x170005A8")]
		public bool HasLongValue
		{
			[Token(Token = "0x60028CE")]
			[Address(RVA = "0xC06394", Offset = "0xC06394", VA = "0xC06394")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832AA8", Offset = "0x832AA8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60028CF")]
			[Address(RVA = "0xC0639C", Offset = "0xC0639C", VA = "0xC0639C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832AB8", Offset = "0x832AB8")]
			protected set
			{
			}
		}

		[Token(Token = "0x60028D0")]
		[Address(RVA = "0xC063A8", Offset = "0xC063A8", VA = "0xC063A8")]
		public void AddBinaryData(string fieldName, byte[] content)
		{
		}

		[Token(Token = "0x60028D1")]
		[Address(RVA = "0xC064D4", Offset = "0xC064D4", VA = "0xC064D4")]
		public void AddBinaryData(string fieldName, byte[] content, string fileName)
		{
		}

		[Token(Token = "0x60028D2")]
		[Address(RVA = "0xC063B4", Offset = "0xC063B4", VA = "0xC063B4")]
		public void AddBinaryData(string fieldName, byte[] content, string fileName, string mimeType)
		{
		}

		[Token(Token = "0x60028D3")]
		[Address(RVA = "0xC064DC", Offset = "0xC064DC", VA = "0xC064DC")]
		public void AddField(string fieldName, string value)
		{
		}

		[Token(Token = "0x60028D4")]
		[Address(RVA = "0xC06520", Offset = "0xC06520", VA = "0xC06520")]
		public void AddField(string fieldName, string value, Encoding e)
		{
		}

		[Token(Token = "0x60028D5")]
		[Address(RVA = "0xC06658", Offset = "0xC06658", VA = "0xC06658", Slot = "4")]
		public virtual void CopyFrom(HTTPFormBase fields)
		{
		}

		[Token(Token = "0x60028D6")]
		[Address(RVA = "0xC066F4", Offset = "0xC066F4", VA = "0xC066F4", Slot = "5")]
		public virtual void PrepareRequest(HTTPRequest request)
		{
		}

		[Token(Token = "0x60028D7")]
		[Address(RVA = "0xC06754", Offset = "0xC06754", VA = "0xC06754", Slot = "6")]
		public virtual byte[] GetData()
		{
			return null;
		}

		[Token(Token = "0x60028D8")]
		[Address(RVA = "0xC067B4", Offset = "0xC067B4", VA = "0xC067B4")]
		public HTTPFormBase()
		{
		}
	}
	[Token(Token = "0x200047E")]
	public enum HTTPFormUsage
	{
		[Token(Token = "0x400167D")]
		Automatic,
		[Token(Token = "0x400167E")]
		UrlEncoded,
		[Token(Token = "0x400167F")]
		Multipart,
		[Token(Token = "0x4001680")]
		Unity
	}
	[Token(Token = "0x200047F")]
	public sealed class HTTPMultiPartForm : HTTPFormBase
	{
		[Token(Token = "0x4001681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string Boundary;

		[Token(Token = "0x4001682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private byte[] CachedData;

		[Token(Token = "0x60028D9")]
		[Address(RVA = "0xC067BC", Offset = "0xC067BC", VA = "0xC067BC")]
		public HTTPMultiPartForm()
		{
		}

		[Token(Token = "0x60028DA")]
		[Address(RVA = "0xC06840", Offset = "0xC06840", VA = "0xC06840", Slot = "5")]
		public override void PrepareRequest(HTTPRequest request)
		{
		}

		[Token(Token = "0x60028DB")]
		[Address(RVA = "0xC068D0", Offset = "0xC068D0", VA = "0xC068D0", Slot = "6")]
		public override byte[] GetData()
		{
			return null;
		}
	}
	[Token(Token = "0x2000480")]
	public sealed class HTTPUrlEncodedForm : HTTPFormBase
	{
		[Token(Token = "0x4001683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private byte[] CachedData;

		[Token(Token = "0x60028DC")]
		[Address(RVA = "0xC06CD4", Offset = "0xC06CD4", VA = "0xC06CD4", Slot = "5")]
		public override void PrepareRequest(HTTPRequest request)
		{
		}

		[Token(Token = "0x60028DD")]
		[Address(RVA = "0xC06D3C", Offset = "0xC06D3C", VA = "0xC06D3C", Slot = "6")]
		public override byte[] GetData()
		{
			return null;
		}

		[Token(Token = "0x60028DE")]
		[Address(RVA = "0xC06F68", Offset = "0xC06F68", VA = "0xC06F68")]
		public HTTPUrlEncodedForm()
		{
		}
	}
	[Token(Token = "0x2000481")]
	public sealed class UnityForm : HTTPFormBase
	{
		[Token(Token = "0x4001684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824434", Offset = "0x824434")]
		private WWWForm <Form>k__BackingField;

		[Token(Token = "0x170005A9")]
		public WWWForm Form
		{
			[Token(Token = "0x60028DF")]
			[Address(RVA = "0xC06F70", Offset = "0xC06F70", VA = "0xC06F70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832AC8", Offset = "0x832AC8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60028E0")]
			[Address(RVA = "0xC06F78", Offset = "0xC06F78", VA = "0xC06F78")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832AD8", Offset = "0x832AD8")]
			set
			{
			}
		}

		[Token(Token = "0x60028E1")]
		[Address(RVA = "0xC06F80", Offset = "0xC06F80", VA = "0xC06F80")]
		public UnityForm()
		{
		}

		[Token(Token = "0x60028E2")]
		[Address(RVA = "0xC06F88", Offset = "0xC06F88", VA = "0xC06F88")]
		public UnityForm(WWWForm form)
		{
		}

		[Token(Token = "0x60028E3")]
		[Address(RVA = "0xC06FB4", Offset = "0xC06FB4", VA = "0xC06FB4", Slot = "4")]
		public override void CopyFrom(HTTPFormBase fields)
		{
		}

		[Token(Token = "0x60028E4")]
		[Address(RVA = "0xC070D0", Offset = "0xC070D0", VA = "0xC070D0", Slot = "5")]
		public override void PrepareRequest(HTTPRequest request)
		{
		}

		[Token(Token = "0x60028E5")]
		[Address(RVA = "0xC071A8", Offset = "0xC071A8", VA = "0xC071A8", Slot = "6")]
		public override byte[] GetData()
		{
			return null;
		}
	}
}
namespace BestHTTP.Extensions
{
	[Token(Token = "0x2000482")]
	public static class Extensions
	{
		[Token(Token = "0x20006E4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820E80", Offset = "0x820E80")]
		private sealed class <>c__DisplayClass13_0
		{
			[Token(Token = "0x400267B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public char block;

			[Token(Token = "0x6003636")]
			[Address(RVA = "0xC03B1C", Offset = "0xC03B1C", VA = "0xC03B1C")]
			public <>c__DisplayClass13_0()
			{
			}

			[Token(Token = "0x6003637")]
			[Address(RVA = "0xC04720", Offset = "0xC04720", VA = "0xC04720")]
			internal bool <Read>b__0(char ch)
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x20006E5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820E90", Offset = "0x820E90")]
		private sealed class <>c
		{
			[Token(Token = "0x400267C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400267D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<char, bool> <>9__15_0;

			[Token(Token = "0x400267E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<char, bool> <>9__19_0;

			[Token(Token = "0x400267F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<char, bool> <>9__20_0;

			[Token(Token = "0x6003639")]
			[Address(RVA = "0xC046C4", Offset = "0xC046C4", VA = "0xC046C4")]
			public <>c()
			{
			}

			[Token(Token = "0x600363A")]
			[Address(RVA = "0xC046CC", Offset = "0xC046CC", VA = "0xC046CC")]
			internal bool <ReadPossibleQuotedText>b__15_0(char ch)
			{
				return default(bool);
			}

			[Token(Token = "0x600363B")]
			[Address(RVA = "0xC046E8", Offset = "0xC046E8", VA = "0xC046E8")]
			internal bool <ParseOptionalHeader>b__19_0(char ch)
			{
				return default(bool);
			}

			[Token(Token = "0x600363C")]
			[Address(RVA = "0xC04704", Offset = "0xC04704", VA = "0xC04704")]
			internal bool <ParseQualityParams>b__20_0(char ch)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60028E6")]
		[Address(RVA = "0xC03110", Offset = "0xC03110", VA = "0xC03110")]
		public static string AsciiToString(this byte[] bytes)
		{
			return null;
		}

		[Token(Token = "0x60028E7")]
		[Address(RVA = "0xC031FC", Offset = "0xC031FC", VA = "0xC031FC")]
		public static byte[] GetASCIIBytes(this string str)
		{
			return null;
		}

		[Token(Token = "0x60028E8")]
		[Address(RVA = "0xC032D4", Offset = "0xC032D4", VA = "0xC032D4")]
		public static void SendAsASCII(this BinaryWriter stream, string str)
		{
		}

		[Token(Token = "0x60028E9")]
		[Address(RVA = "0xC03358", Offset = "0xC03358", VA = "0xC03358")]
		public static void WriteLine(this FileStream fs)
		{
		}

		[Token(Token = "0x60028EA")]
		[Address(RVA = "0xC033E4", Offset = "0xC033E4", VA = "0xC033E4")]
		public static void WriteLine(this FileStream fs, string line)
		{
		}

		[Token(Token = "0x60028EB")]
		[Address(RVA = "0xC03438", Offset = "0xC03438", VA = "0xC03438")]
		public static void WriteLine(this FileStream fs, string format, params object[] values)
		{
		}

		[Token(Token = "0x60028EC")]
		[Address(RVA = "0xC03498", Offset = "0xC03498", VA = "0xC03498")]
		public static string[] FindOption(this string str, string option)
		{
			return null;
		}

		[Token(Token = "0x60028ED")]
		[Address(RVA = "0xC03610", Offset = "0xC03610", VA = "0xC03610")]
		public static int ToInt32(this string str, int defaultValue = 0)
		{
			return default(int);
		}

		[Token(Token = "0x60028EE")]
		[Address(RVA = "0xC036E4", Offset = "0xC036E4", VA = "0xC036E4")]
		public static long ToInt64(this string str, long defaultValue = 0L)
		{
			return default(long);
		}

		[Token(Token = "0x60028EF")]
		[Address(RVA = "0xC037B8", Offset = "0xC037B8", VA = "0xC037B8")]
		public static DateTime ToDateTime(this string str, [Optional] DateTime defaultValue)
		{
			return default(DateTime);
		}

		[Token(Token = "0x60028F0")]
		[Address(RVA = "0xC038C8", Offset = "0xC038C8", VA = "0xC038C8")]
		public static string ToStrOrEmpty(this string str)
		{
			return null;
		}

		[Token(Token = "0x60028F1")]
		[Address(RVA = "0xC03924", Offset = "0xC03924", VA = "0xC03924")]
		public static string CalculateMD5Hash(this string input)
		{
			return null;
		}

		[Token(Token = "0x60028F2")]
		[Address(RVA = "0xC03938", Offset = "0xC03938", VA = "0xC03938")]
		public static string CalculateMD5Hash(this byte[] input)
		{
			return null;
		}

		[Token(Token = "0x60028F3")]
		[Address(RVA = "0xC03A54", Offset = "0xC03A54", VA = "0xC03A54")]
		internal static string Read(this string str, ref int pos, char block, bool needResult = true)
		{
			return null;
		}

		[Token(Token = "0x60028F4")]
		[Address(RVA = "0xC03B24", Offset = "0xC03B24", VA = "0xC03B24")]
		internal static string Read(this string str, ref int pos, Func<char, bool> block, bool needResult = true)
		{
			return null;
		}

		[Token(Token = "0x60028F5")]
		[Address(RVA = "0xC03D04", Offset = "0xC03D04", VA = "0xC03D04")]
		internal static string ReadPossibleQuotedText(this string str, ref int pos)
		{
			return null;
		}

		[Token(Token = "0x60028F6")]
		[Address(RVA = "0xC03C44", Offset = "0xC03C44", VA = "0xC03C44")]
		internal static void SkipWhiteSpace(this string str, ref int pos)
		{
		}

		[Token(Token = "0x60028F7")]
		[Address(RVA = "0xC03E88", Offset = "0xC03E88", VA = "0xC03E88")]
		internal static string TrimAndLower(this string str)
		{
			return null;
		}

		[Token(Token = "0x60028F8")]
		[Address(RVA = "0xC04004", Offset = "0xC04004", VA = "0xC04004")]
		internal static char? Peek(this string str, int pos)
		{
			return null;
		}

		[Token(Token = "0x60028F9")]
		[Address(RVA = "0xC040A4", Offset = "0xC040A4", VA = "0xC040A4")]
		internal static List<HeaderValue> ParseOptionalHeader(this string str)
		{
			return null;
		}

		[Token(Token = "0x60028FA")]
		[Address(RVA = "0xC042AC", Offset = "0xC042AC", VA = "0xC042AC")]
		internal static List<HeaderValue> ParseQualityParams(this string str)
		{
			return null;
		}

		[Token(Token = "0x60028FB")]
		[Address(RVA = "0xC044A4", Offset = "0xC044A4", VA = "0xC044A4")]
		public static void ReadBuffer(this Stream stream, byte[] buffer)
		{
		}

		[Token(Token = "0x60028FC")]
		[Address(RVA = "0xC04550", Offset = "0xC04550", VA = "0xC04550")]
		public static void WriteAll(this MemoryStream ms, byte[] buffer)
		{
		}

		[Token(Token = "0x60028FD")]
		[Address(RVA = "0xC04580", Offset = "0xC04580", VA = "0xC04580")]
		public static void WriteString(this MemoryStream ms, string str)
		{
		}

		[Token(Token = "0x60028FE")]
		[Address(RVA = "0xC045CC", Offset = "0xC045CC", VA = "0xC045CC")]
		public static void WriteLine(this MemoryStream ms)
		{
		}

		[Token(Token = "0x60028FF")]
		[Address(RVA = "0xC0463C", Offset = "0xC0463C", VA = "0xC0463C")]
		public static void WriteLine(this MemoryStream ms, string str)
		{
		}
	}
	[Token(Token = "0x2000483")]
	public static class ExceptionHelper
	{
		[Token(Token = "0x6002900")]
		[Address(RVA = "0xC030A8", Offset = "0xC030A8", VA = "0xC030A8")]
		public static Exception ServerClosedTCPStream()
		{
			return null;
		}
	}
	[Token(Token = "0x2000484")]
	public sealed class HeaderParser : KeyValuePairList
	{
		[Token(Token = "0x6002901")]
		[Address(RVA = "0xC04730", Offset = "0xC04730", VA = "0xC04730")]
		public HeaderParser(string headerStr)
		{
		}

		[Token(Token = "0x6002902")]
		[Address(RVA = "0xC0476C", Offset = "0xC0476C", VA = "0xC0476C")]
		private List<HeaderValue> Parse(string headerStr)
		{
			return null;
		}
	}
	[Token(Token = "0x2000485")]
	public sealed class HeaderValue
	{
		[Serializable]
		[Token(Token = "0x20006E6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820EA0", Offset = "0x820EA0")]
		private sealed class <>c
		{
			[Token(Token = "0x4002680")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4002681")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<char, bool> <>9__18_0;

			[Token(Token = "0x600363E")]
			[Address(RVA = "0xC05074", Offset = "0xC05074", VA = "0xC05074")]
			public <>c()
			{
			}

			[Token(Token = "0x600363F")]
			[Address(RVA = "0xC0507C", Offset = "0xC0507C", VA = "0xC0507C")]
			internal bool <ParseImplementation>b__18_0(char ch)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4001685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824444", Offset = "0x824444")]
		private string <Key>k__BackingField;

		[Token(Token = "0x4001686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824454", Offset = "0x824454")]
		private string <Value>k__BackingField;

		[Token(Token = "0x4001687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824464", Offset = "0x824464")]
		private List<HeaderValue> <Options>k__BackingField;

		[Token(Token = "0x170005AA")]
		public string Key
		{
			[Token(Token = "0x6002903")]
			[Address(RVA = "0xC04AFC", Offset = "0xC04AFC", VA = "0xC04AFC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832C88", Offset = "0x832C88")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002904")]
			[Address(RVA = "0xC04B04", Offset = "0xC04B04", VA = "0xC04B04")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832C98", Offset = "0x832C98")]
			set
			{
			}
		}

		[Token(Token = "0x170005AB")]
		public string Value
		{
			[Token(Token = "0x6002905")]
			[Address(RVA = "0xC04B0C", Offset = "0xC04B0C", VA = "0xC04B0C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832CA8", Offset = "0x832CA8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002906")]
			[Address(RVA = "0xC04B14", Offset = "0xC04B14", VA = "0xC04B14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832CB8", Offset = "0x832CB8")]
			set
			{
			}
		}

		[Token(Token = "0x170005AC")]
		public List<HeaderValue> Options
		{
			[Token(Token = "0x6002907")]
			[Address(RVA = "0xC04B1C", Offset = "0xC04B1C", VA = "0xC04B1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832CC8", Offset = "0x832CC8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002908")]
			[Address(RVA = "0xC04B24", Offset = "0xC04B24", VA = "0xC04B24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832CD8", Offset = "0x832CD8")]
			set
			{
			}
		}

		[Token(Token = "0x170005AD")]
		public bool HasValue
		{
			[Token(Token = "0x6002909")]
			[Address(RVA = "0xC04B2C", Offset = "0xC04B2C", VA = "0xC04B2C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600290A")]
		[Address(RVA = "0xC0499C", Offset = "0xC0499C", VA = "0xC0499C")]
		public HeaderValue()
		{
		}

		[Token(Token = "0x600290B")]
		[Address(RVA = "0xC04280", Offset = "0xC04280", VA = "0xC04280")]
		public HeaderValue(string key)
		{
		}

		[Token(Token = "0x600290C")]
		[Address(RVA = "0xC049A4", Offset = "0xC049A4", VA = "0xC049A4")]
		public void Parse(string headerStr, ref int pos)
		{
		}

		[Token(Token = "0x600290D")]
		[Address(RVA = "0xC04E7C", Offset = "0xC04E7C", VA = "0xC04E7C")]
		public bool TryGetOption(string key, out HeaderValue option)
		{
			return default(bool);
		}

		[Token(Token = "0x600290E")]
		[Address(RVA = "0xC04B50", Offset = "0xC04B50", VA = "0xC04B50")]
		private void ParseImplementation(string headerStr, ref int pos, bool isOptionIsAnOption)
		{
		}

		[Token(Token = "0x600290F")]
		[Address(RVA = "0xC04F7C", Offset = "0xC04F7C", VA = "0xC04F7C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000486")]
	public interface IHeartbeat
	{
		[Token(Token = "0x6002910")]
		void OnHeartbeatUpdate(TimeSpan dif);
	}
	[Token(Token = "0x2000487")]
	public sealed class HeartbeatManager
	{
		[Token(Token = "0x4001688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<IHeartbeat> Heartbeats;

		[Token(Token = "0x4001689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IHeartbeat[] UpdateArray;

		[Token(Token = "0x400168A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private DateTime LastUpdate;

		[Token(Token = "0x6002911")]
		[Address(RVA = "0xC050A8", Offset = "0xC050A8", VA = "0xC050A8")]
		public void Subscribe(IHeartbeat heartbeat)
		{
		}

		[Token(Token = "0x6002912")]
		[Address(RVA = "0xC051A0", Offset = "0xC051A0", VA = "0xC051A0")]
		public void Unsubscribe(IHeartbeat heartbeat)
		{
		}

		[Token(Token = "0x6002913")]
		[Address(RVA = "0xC0526C", Offset = "0xC0526C", VA = "0xC0526C")]
		public void Update()
		{
		}

		[Token(Token = "0x6002914")]
		[Address(RVA = "0xC055C4", Offset = "0xC055C4", VA = "0xC055C4")]
		public HeartbeatManager()
		{
		}
	}
	[Token(Token = "0x2000488")]
	public class KeyValuePairList
	{
		[Token(Token = "0x400168B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824474", Offset = "0x824474")]
		private List<HeaderValue> <Values>k__BackingField;

		[Token(Token = "0x170005AE")]
		public List<HeaderValue> Values
		{
			[Token(Token = "0x6002915")]
			[Address(RVA = "0xC05664", Offset = "0xC05664", VA = "0xC05664")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832CE8", Offset = "0x832CE8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002916")]
			[Address(RVA = "0xC0566C", Offset = "0xC0566C", VA = "0xC0566C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832CF8", Offset = "0x832CF8")]
			protected set
			{
			}
		}

		[Token(Token = "0x6002917")]
		[Address(RVA = "0xC05674", Offset = "0xC05674", VA = "0xC05674")]
		public bool TryGet(string value, out HeaderValue param)
		{
			return default(bool);
		}

		[Token(Token = "0x6002918")]
		[Address(RVA = "0xC04764", Offset = "0xC04764", VA = "0xC04764")]
		public KeyValuePairList()
		{
		}
	}
	[Token(Token = "0x2000489")]
	public sealed class WWWAuthenticateHeaderParser : KeyValuePairList
	{
		[Serializable]
		[Token(Token = "0x20006E7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820EB0", Offset = "0x820EB0")]
		private sealed class <>c
		{
			[Token(Token = "0x4002682")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4002683")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<char, bool> <>9__1_0;

			[Token(Token = "0x6003641")]
			[Address(RVA = "0xC059E4", Offset = "0xC059E4", VA = "0xC059E4")]
			public <>c()
			{
			}

			[Token(Token = "0x6003642")]
			[Address(RVA = "0xC059EC", Offset = "0xC059EC", VA = "0xC059EC")]
			internal bool <ParseQuotedHeader>b__1_0(char ch)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6002919")]
		[Address(RVA = "0xC05764", Offset = "0xC05764", VA = "0xC05764")]
		public WWWAuthenticateHeaderParser(string headerValue)
		{
		}

		[Token(Token = "0x600291A")]
		[Address(RVA = "0xC05798", Offset = "0xC05798", VA = "0xC05798")]
		private List<HeaderValue> ParseQuotedHeader(string str)
		{
			return null;
		}
	}
}
namespace BestHTTP.Decompression.Zlib
{
	[Token(Token = "0x200048A")]
	internal enum BlockState
	{
		[Token(Token = "0x400168D")]
		NeedMore,
		[Token(Token = "0x400168E")]
		BlockDone,
		[Token(Token = "0x400168F")]
		FinishStarted,
		[Token(Token = "0x4001690")]
		FinishDone
	}
	[Token(Token = "0x200048B")]
	internal enum DeflateFlavor
	{
		[Token(Token = "0x4001692")]
		Store,
		[Token(Token = "0x4001693")]
		Fast,
		[Token(Token = "0x4001694")]
		Slow
	}
	[Token(Token = "0x200048C")]
	internal sealed class DeflateManager
	{
		[Token(Token = "0x20006E8")]
		internal delegate BlockState CompressFunc(FlushType flush);

		[Token(Token = "0x20006E9")]
		internal class Config
		{
			[Token(Token = "0x4002684")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal int GoodLength;

			[Token(Token = "0x4002685")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal int MaxLazy;

			[Token(Token = "0x4002686")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal int NiceLength;

			[Token(Token = "0x4002687")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal int MaxChainLength;

			[Token(Token = "0x4002688")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal DeflateFlavor Flavor;

			[Token(Token = "0x4002689")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static readonly Config[] Table;

			[Token(Token = "0x6003647")]
			[Address(RVA = "0xBF815C", Offset = "0xBF815C", VA = "0xBF815C")]
			private Config(int goodLength, int maxLazy, int niceLength, int maxChainLength, DeflateFlavor flavor)
			{
			}

			[Token(Token = "0x6003648")]
			[Address(RVA = "0xBF81B0", Offset = "0xBF81B0", VA = "0xBF81B0")]
			public static Config Lookup(CompressionLevel level)
			{
				return null;
			}

			[Token(Token = "0x6003649")]
			[Address(RVA = "0xBF8244", Offset = "0xBF8244", VA = "0xBF8244")]
			static Config()
			{
			}
		}

		[Token(Token = "0x4001695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int MEM_LEVEL_MAX;

		[Token(Token = "0x4001696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly int MEM_LEVEL_DEFAULT;

		[Token(Token = "0x4001697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private CompressFunc DeflateFunction;

		[Token(Token = "0x4001698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly string[] _ErrorMessage;

		[Token(Token = "0x4001699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly int PRESET_DICT;

		[Token(Token = "0x400169A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static readonly int INIT_STATE;

		[Token(Token = "0x400169B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly int BUSY_STATE;

		[Token(Token = "0x400169C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private static readonly int FINISH_STATE;

		[Token(Token = "0x400169D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly int Z_DEFLATED;

		[Token(Token = "0x400169E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private static readonly int STORED_BLOCK;

		[Token(Token = "0x400169F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static readonly int STATIC_TREES;

		[Token(Token = "0x40016A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private static readonly int DYN_TREES;

		[Token(Token = "0x40016A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static readonly int Z_BINARY;

		[Token(Token = "0x40016A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private static readonly int Z_ASCII;

		[Token(Token = "0x40016A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static readonly int Z_UNKNOWN;

		[Token(Token = "0x40016A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private static readonly int Buf_size;

		[Token(Token = "0x40016A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static readonly int MIN_MATCH;

		[Token(Token = "0x40016A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private static readonly int MAX_MATCH;

		[Token(Token = "0x40016A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static readonly int MIN_LOOKAHEAD;

		[Token(Token = "0x40016A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private static readonly int HEAP_SIZE;

		[Token(Token = "0x40016A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static readonly int END_BLOCK;

		[Token(Token = "0x40016AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal ZlibCodec _codec;

		[Token(Token = "0x40016AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal int status;

		[Token(Token = "0x40016AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal byte[] pending;

		[Token(Token = "0x40016AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal int nextPending;

		[Token(Token = "0x40016AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal int pendingCount;

		[Token(Token = "0x40016AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal sbyte data_type;

		[Token(Token = "0x40016B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal int last_flush;

		[Token(Token = "0x40016B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal int w_size;

		[Token(Token = "0x40016B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		internal int w_bits;

		[Token(Token = "0x40016B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal int w_mask;

		[Token(Token = "0x40016B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal byte[] window;

		[Token(Token = "0x40016B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal int window_size;

		[Token(Token = "0x40016B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal short[] prev;

		[Token(Token = "0x40016B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal short[] head;

		[Token(Token = "0x40016B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal int ins_h;

		[Token(Token = "0x40016B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		internal int hash_size;

		[Token(Token = "0x40016BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal int hash_bits;

		[Token(Token = "0x40016BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		internal int hash_mask;

		[Token(Token = "0x40016BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal int hash_shift;

		[Token(Token = "0x40016BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		internal int block_start;

		[Token(Token = "0x40016BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Config config;

		[Token(Token = "0x40016BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal int match_length;

		[Token(Token = "0x40016C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		internal int prev_match;

		[Token(Token = "0x40016C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal int match_available;

		[Token(Token = "0x40016C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		internal int strstart;

		[Token(Token = "0x40016C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal int match_start;

		[Token(Token = "0x40016C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		internal int lookahead;

		[Token(Token = "0x40016C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		internal int prev_length;

		[Token(Token = "0x40016C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		internal CompressionLevel compressionLevel;

		[Token(Token = "0x40016C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		internal CompressionStrategy compressionStrategy;

		[Token(Token = "0x40016C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		internal short[] dyn_ltree;

		[Token(Token = "0x40016C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		internal short[] dyn_dtree;

		[Token(Token = "0x40016CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		internal short[] bl_tree;

		[Token(Token = "0x40016CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		internal ZTree treeLiterals;

		[Token(Token = "0x40016CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		internal ZTree treeDistances;

		[Token(Token = "0x40016CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		internal ZTree treeBitLengths;

		[Token(Token = "0x40016CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		internal short[] bl_count;

		[Token(Token = "0x40016CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		internal int[] heap;

		[Token(Token = "0x40016D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		internal int heap_len;

		[Token(Token = "0x40016D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		internal int heap_max;

		[Token(Token = "0x40016D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		internal sbyte[] depth;

		[Token(Token = "0x40016D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		internal int _lengthOffset;

		[Token(Token = "0x40016D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		internal int lit_bufsize;

		[Token(Token = "0x40016D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		internal int last_lit;

		[Token(Token = "0x40016D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		internal int _distanceOffset;

		[Token(Token = "0x40016D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		internal int opt_len;

		[Token(Token = "0x40016D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		internal int static_len;

		[Token(Token = "0x40016D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		internal int matches;

		[Token(Token = "0x40016DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		internal int last_eob_len;

		[Token(Token = "0x40016DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		internal short bi_buf;

		[Token(Token = "0x40016DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		internal int bi_valid;

		[Token(Token = "0x40016DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private bool Rfc1950BytesEmitted;

		[Token(Token = "0x40016DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x131")]
		private bool _WantRfc1950HeaderBytes;

		[Token(Token = "0x170005AF")]
		internal bool WantRfc1950HeaderBytes
		{
			[Token(Token = "0x6002937")]
			[Address(RVA = "0xBBD1AC", Offset = "0xBBD1AC", VA = "0xBBD1AC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002938")]
			[Address(RVA = "0xBBD1B4", Offset = "0xBBD1B4", VA = "0xBBD1B4")]
			set
			{
			}
		}

		[Token(Token = "0x600291B")]
		[Address(RVA = "0xBB9B40", Offset = "0xBB9B40", VA = "0xBB9B40")]
		internal DeflateManager()
		{
		}

		[Token(Token = "0x600291C")]
		[Address(RVA = "0xBB9D00", Offset = "0xBB9D00", VA = "0xBB9D00")]
		private void _InitializeLazyMatch()
		{
		}

		[Token(Token = "0x600291D")]
		[Address(RVA = "0xBB9EB4", Offset = "0xBB9EB4", VA = "0xBB9EB4")]
		private void _InitializeTreeData()
		{
		}

		[Token(Token = "0x600291E")]
		[Address(RVA = "0xBB9FA4", Offset = "0xBB9FA4", VA = "0xBB9FA4")]
		internal void _InitializeBlocks()
		{
		}

		[Token(Token = "0x600291F")]
		[Address(RVA = "0xBBA1A0", Offset = "0xBBA1A0", VA = "0xBBA1A0")]
		internal void pqdownheap(short[] tree, int k)
		{
		}

		[Token(Token = "0x6002920")]
		[Address(RVA = "0xBBA380", Offset = "0xBBA380", VA = "0xBBA380")]
		internal static bool _IsSmaller(short[] tree, int n, int m, sbyte[] depth)
		{
			return default(bool);
		}

		[Token(Token = "0x6002921")]
		[Address(RVA = "0xBBA418", Offset = "0xBBA418", VA = "0xBBA418")]
		internal void scan_tree(short[] tree, int max_code)
		{
		}

		[Token(Token = "0x6002922")]
		[Address(RVA = "0xBBA678", Offset = "0xBBA678", VA = "0xBBA678")]
		internal int build_bl_tree()
		{
			return default(int);
		}

		[Token(Token = "0x6002923")]
		[Address(RVA = "0xBBA7E8", Offset = "0xBBA7E8", VA = "0xBBA7E8")]
		internal void send_all_trees(int lcodes, int dcodes, int blcodes)
		{
		}

		[Token(Token = "0x6002924")]
		[Address(RVA = "0xBBAAA0", Offset = "0xBBAAA0", VA = "0xBBAAA0")]
		internal void send_tree(short[] tree, int max_code)
		{
		}

		[Token(Token = "0x6002925")]
		[Address(RVA = "0xBBAD48", Offset = "0xBBAD48", VA = "0xBBAD48")]
		private void put_bytes(byte[] p, int start, int len)
		{
		}

		[Token(Token = "0x6002926")]
		[Address(RVA = "0xBBACF8", Offset = "0xBBACF8", VA = "0xBBACF8")]
		internal void send_code(int c, short[] tree)
		{
		}

		[Token(Token = "0x6002927")]
		[Address(RVA = "0xBBA93C", Offset = "0xBBA93C", VA = "0xBBA93C")]
		internal void send_bits(int value, int length)
		{
		}

		[Token(Token = "0x6002928")]
		[Address(RVA = "0xBBAD94", Offset = "0xBBAD94", VA = "0xBBAD94")]
		internal void _tr_align()
		{
		}

		[Token(Token = "0x6002929")]
		[Address(RVA = "0xBBAFD8", Offset = "0xBBAFD8", VA = "0xBBAFD8")]
		internal bool _tr_tally(int dist, int lc)
		{
			return default(bool);
		}

		[Token(Token = "0x600292A")]
		[Address(RVA = "0xBBB308", Offset = "0xBBB308", VA = "0xBBB308")]
		internal void send_compressed_block(short[] ltree, short[] dtree)
		{
		}

		[Token(Token = "0x600292B")]
		[Address(RVA = "0xBBB634", Offset = "0xBBB634", VA = "0xBBB634")]
		internal void set_data_type()
		{
		}

		[Token(Token = "0x600292C")]
		[Address(RVA = "0xBBAEFC", Offset = "0xBBAEFC", VA = "0xBBAEFC")]
		internal void bi_flush()
		{
		}

		[Token(Token = "0x600292D")]
		[Address(RVA = "0xBBB7DC", Offset = "0xBBB7DC", VA = "0xBBB7DC")]
		internal void bi_windup()
		{
		}

		[Token(Token = "0x600292E")]
		[Address(RVA = "0xBBB898", Offset = "0xBBB898", VA = "0xBBB898")]
		internal void copy_block(int buf, int len, bool header)
		{
		}

		[Token(Token = "0x600292F")]
		[Address(RVA = "0xBBB9BC", Offset = "0xBBB9BC", VA = "0xBBB9BC")]
		internal void flush_block_only(bool eof)
		{
		}

		[Token(Token = "0x6002930")]
		[Address(RVA = "0xBBBC54", Offset = "0xBBBC54", VA = "0xBBBC54")]
		internal BlockState DeflateNone(FlushType flush)
		{
			return default(BlockState);
		}

		[Token(Token = "0x6002931")]
		[Address(RVA = "0xBBC084", Offset = "0xBBC084", VA = "0xBBC084")]
		internal void _tr_stored_block(int buf, int stored_len, bool eof)
		{
		}

		[Token(Token = "0x6002932")]
		[Address(RVA = "0xBBBA14", Offset = "0xBBBA14", VA = "0xBBBA14")]
		internal void _tr_flush_block(int buf, int stored_len, bool eof)
		{
		}

		[Token(Token = "0x6002933")]
		[Address(RVA = "0xBBBDE8", Offset = "0xBBBDE8", VA = "0xBBBDE8")]
		private void _fillWindow()
		{
		}

		[Token(Token = "0x6002934")]
		[Address(RVA = "0xBBC138", Offset = "0xBBC138", VA = "0xBBC138")]
		internal BlockState DeflateFast(FlushType flush)
		{
			return default(BlockState);
		}

		[Token(Token = "0x6002935")]
		[Address(RVA = "0xBBCB70", Offset = "0xBBCB70", VA = "0xBBCB70")]
		internal BlockState DeflateSlow(FlushType flush)
		{
			return default(BlockState);
		}

		[Token(Token = "0x6002936")]
		[Address(RVA = "0xBBC65C", Offset = "0xBBC65C", VA = "0xBBC65C")]
		internal int longest_match(int cur_match)
		{
			return default(int);
		}

		[Token(Token = "0x6002939")]
		[Address(RVA = "0xBBD1C0", Offset = "0xBBD1C0", VA = "0xBBD1C0")]
		internal int Initialize(ZlibCodec codec, CompressionLevel level)
		{
			return default(int);
		}

		[Token(Token = "0x600293A")]
		[Address(RVA = "0xBBD1DC", Offset = "0xBBD1DC", VA = "0xBBD1DC")]
		internal int Initialize(ZlibCodec codec, CompressionLevel level, int bits)
		{
			return default(int);
		}

		[Token(Token = "0x600293B")]
		[Address(RVA = "0xBBD4F8", Offset = "0xBBD4F8", VA = "0xBBD4F8")]
		internal int Initialize(ZlibCodec codec, CompressionLevel level, int bits, CompressionStrategy compressionStrategy)
		{
			return default(int);
		}

		[Token(Token = "0x600293C")]
		[Address(RVA = "0xBBD280", Offset = "0xBBD280", VA = "0xBBD280")]
		internal int Initialize(ZlibCodec codec, CompressionLevel level, int windowBits, int memLevel, CompressionStrategy strategy)
		{
			return default(int);
		}

		[Token(Token = "0x600293D")]
		[Address(RVA = "0xBBD5A0", Offset = "0xBBD5A0", VA = "0xBBD5A0")]
		internal void Reset()
		{
		}

		[Token(Token = "0x600293E")]
		[Address(RVA = "0xBBD6D0", Offset = "0xBBD6D0", VA = "0xBBD6D0")]
		internal int End()
		{
			return default(int);
		}

		[Token(Token = "0x600293F")]
		[Address(RVA = "0xBB9DE8", Offset = "0xBB9DE8", VA = "0xBB9DE8")]
		private void SetDeflater()
		{
		}

		[Token(Token = "0x6002940")]
		[Address(RVA = "0xBBD7EC", Offset = "0xBBD7EC", VA = "0xBBD7EC")]
		internal int SetParams(CompressionLevel level, CompressionStrategy strategy)
		{
			return default(int);
		}

		[Token(Token = "0x6002941")]
		[Address(RVA = "0xBBD8E8", Offset = "0xBBD8E8", VA = "0xBBD8E8")]
		internal int SetDictionary(byte[] dictionary)
		{
			return default(int);
		}

		[Token(Token = "0x6002942")]
		[Address(RVA = "0xBBDC04", Offset = "0xBBDC04", VA = "0xBBDC04")]
		internal int Deflate(FlushType flush)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200048D")]
	internal class DeflateStream : Stream
	{
		[Token(Token = "0x40016DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal ZlibBaseStream _baseStream;

		[Token(Token = "0x40016E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal Stream _innerStream;

		[Token(Token = "0x40016E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool _disposed;

		[Token(Token = "0x170005B0")]
		public virtual FlushType FlushMode
		{
			[Token(Token = "0x6002949")]
			[Address(RVA = "0xBF88AC", Offset = "0xBF88AC", VA = "0xBF88AC", Slot = "31")]
			get
			{
				return default(FlushType);
			}
			[Token(Token = "0x600294A")]
			[Address(RVA = "0xBF88C8", Offset = "0xBF88C8", VA = "0xBF88C8", Slot = "32")]
			set
			{
			}
		}

		[Token(Token = "0x170005B1")]
		public int BufferSize
		{
			[Token(Token = "0x600294B")]
			[Address(RVA = "0xBF8968", Offset = "0xBF8968", VA = "0xBF8968")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600294C")]
			[Address(RVA = "0xBF8984", Offset = "0xBF8984", VA = "0xBF8984")]
			set
			{
			}
		}

		[Token(Token = "0x170005B2")]
		public CompressionStrategy Strategy
		{
			[Token(Token = "0x600294D")]
			[Address(RVA = "0xBF8B5C", Offset = "0xBF8B5C", VA = "0xBF8B5C")]
			get
			{
				return default(CompressionStrategy);
			}
			[Token(Token = "0x600294E")]
			[Address(RVA = "0xBF8B78", Offset = "0xBF8B78", VA = "0xBF8B78")]
			set
			{
			}
		}

		[Token(Token = "0x170005B3")]
		public virtual long TotalIn
		{
			[Token(Token = "0x600294F")]
			[Address(RVA = "0xBF8C18", Offset = "0xBF8C18", VA = "0xBF8C18", Slot = "33")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x170005B4")]
		public virtual long TotalOut
		{
			[Token(Token = "0x6002950")]
			[Address(RVA = "0xBF8C40", Offset = "0xBF8C40", VA = "0xBF8C40", Slot = "34")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x170005B5")]
		public override bool CanRead
		{
			[Token(Token = "0x6002952")]
			[Address(RVA = "0xBF8D04", Offset = "0xBF8D04", VA = "0xBF8D04", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005B6")]
		public override bool CanSeek
		{
			[Token(Token = "0x6002953")]
			[Address(RVA = "0xBF8DA4", Offset = "0xBF8DA4", VA = "0xBF8DA4", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005B7")]
		public override bool CanWrite
		{
			[Token(Token = "0x6002954")]
			[Address(RVA = "0xBF8DAC", Offset = "0xBF8DAC", VA = "0xBF8DAC", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005B8")]
		public override long Length
		{
			[Token(Token = "0x6002956")]
			[Address(RVA = "0xBF8EE8", Offset = "0xBF8EE8", VA = "0xBF8EE8", Slot = "10")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x170005B9")]
		public override long Position
		{
			[Token(Token = "0x6002957")]
			[Address(RVA = "0xBF8F48", Offset = "0xBF8F48", VA = "0xBF8F48", Slot = "11")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x6002958")]
			[Address(RVA = "0xBF8F9C", Offset = "0xBF8F9C", VA = "0xBF8F9C", Slot = "12")]
			set
			{
			}
		}

		[Token(Token = "0x6002944")]
		[Address(RVA = "0xBF85E8", Offset = "0xBF85E8", VA = "0xBF85E8")]
		public DeflateStream(Stream stream, CompressionMode mode)
		{
		}

		[Token(Token = "0x6002945")]
		[Address(RVA = "0xBF86B8", Offset = "0xBF86B8", VA = "0xBF86B8")]
		public DeflateStream(Stream stream, CompressionMode mode, CompressionLevel level)
		{
		}

		[Token(Token = "0x6002946")]
		[Address(RVA = "0xBF86C0", Offset = "0xBF86C0", VA = "0xBF86C0")]
		public DeflateStream(Stream stream, CompressionMode mode, bool leaveOpen)
		{
		}

		[Token(Token = "0x6002947")]
		[Address(RVA = "0xBF85F4", Offset = "0xBF85F4", VA = "0xBF85F4")]
		public DeflateStream(Stream stream, CompressionMode mode, CompressionLevel level, bool leaveOpen)
		{
		}

		[Token(Token = "0x6002948")]
		[Address(RVA = "0xBF86D8", Offset = "0xBF86D8", VA = "0xBF86D8")]
		public DeflateStream(Stream stream, CompressionMode mode, CompressionLevel level, bool leaveOpen, int windowBits)
		{
		}

		[Token(Token = "0x6002951")]
		[Address(RVA = "0xBF8C68", Offset = "0xBF8C68", VA = "0xBF8C68", Slot = "16")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6002955")]
		[Address(RVA = "0xBF8E4C", Offset = "0xBF8E4C", VA = "0xBF8E4C", Slot = "17")]
		public override void Flush()
		{
		}

		[Token(Token = "0x6002959")]
		[Address(RVA = "0xBF8FFC", Offset = "0xBF8FFC", VA = "0xBF8FFC", Slot = "27")]
		public override int Read(byte[] buffer, int offset, int count)
		{
			return default(int);
		}

		[Token(Token = "0x600295A")]
		[Address(RVA = "0xBF90C0", Offset = "0xBF90C0", VA = "0xBF90C0", Slot = "25")]
		public override long Seek(long offset, SeekOrigin origin)
		{
			return default(long);
		}

		[Token(Token = "0x600295B")]
		[Address(RVA = "0xBF9120", Offset = "0xBF9120", VA = "0xBF9120", Slot = "26")]
		public override void SetLength(long value)
		{
		}

		[Token(Token = "0x600295C")]
		[Address(RVA = "0xBF9144", Offset = "0xBF9144", VA = "0xBF9144", Slot = "29")]
		public override void Write(byte[] buffer, int offset, int count)
		{
		}

		[Token(Token = "0x600295D")]
		[Address(RVA = "0xBF9208", Offset = "0xBF9208", VA = "0xBF9208")]
		public static byte[] CompressString(string s)
		{
			return null;
		}

		[Token(Token = "0x600295E")]
		[Address(RVA = "0xBF94AC", Offset = "0xBF94AC", VA = "0xBF94AC")]
		public static byte[] CompressBuffer(byte[] b)
		{
			return null;
		}

		[Token(Token = "0x600295F")]
		[Address(RVA = "0xBF972C", Offset = "0xBF972C", VA = "0xBF972C")]
		public static string UncompressString(byte[] compressed)
		{
			return null;
		}

		[Token(Token = "0x6002960")]
		[Address(RVA = "0xBF9B80", Offset = "0xBF9B80", VA = "0xBF9B80")]
		public static byte[] UncompressBuffer(byte[] compressed)
		{
			return null;
		}
	}
	[Token(Token = "0x200048E")]
	internal class GZipStream : Stream
	{
		[Token(Token = "0x40016E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public DateTime? LastModified;

		[Token(Token = "0x40016E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int _headerByteCount;

		[Token(Token = "0x40016E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal ZlibBaseStream _baseStream;

		[Token(Token = "0x40016E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool _disposed;

		[Token(Token = "0x40016E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool _firstReadDone;

		[Token(Token = "0x40016E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string _FileName;

		[Token(Token = "0x40016E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private string _Comment;

		[Token(Token = "0x40016E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int _Crc32;

		[Token(Token = "0x40016EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly DateTime _unixEpoch;

		[Token(Token = "0x40016EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly Encoding iso8859dash1;

		[Token(Token = "0x170005BA")]
		public string Comment
		{
			[Token(Token = "0x6002961")]
			[Address(RVA = "0xBF9F80", Offset = "0xBF9F80", VA = "0xBF9F80")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002962")]
			[Address(RVA = "0xBF9F88", Offset = "0xBF9F88", VA = "0xBF9F88")]
			set
			{
			}
		}

		[Token(Token = "0x170005BB")]
		public string FileName
		{
			[Token(Token = "0x6002963")]
			[Address(RVA = "0xBFA01C", Offset = "0xBFA01C", VA = "0xBFA01C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002964")]
			[Address(RVA = "0xBFA024", Offset = "0xBFA024", VA = "0xBFA024")]
			set
			{
			}
		}

		[Token(Token = "0x170005BC")]
		public int Crc32
		{
			[Token(Token = "0x6002965")]
			[Address(RVA = "0xBFA1A8", Offset = "0xBFA1A8", VA = "0xBFA1A8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170005BD")]
		public virtual FlushType FlushMode
		{
			[Token(Token = "0x600296A")]
			[Address(RVA = "0xBFA290", Offset = "0xBFA290", VA = "0xBFA290", Slot = "31")]
			get
			{
				return default(FlushType);
			}
			[Token(Token = "0x600296B")]
			[Address(RVA = "0xBFA2AC", Offset = "0xBFA2AC", VA = "0xBFA2AC", Slot = "32")]
			set
			{
			}
		}

		[Token(Token = "0x170005BE")]
		public int BufferSize
		{
			[Token(Token = "0x600296C")]
			[Address(RVA = "0xBFA34C", Offset = "0xBFA34C", VA = "0xBFA34C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600296D")]
			[Address(RVA = "0xBFA368", Offset = "0xBFA368", VA = "0xBFA368")]
			set
			{
			}
		}

		[Token(Token = "0x170005BF")]
		public virtual long TotalIn
		{
			[Token(Token = "0x600296E")]
			[Address(RVA = "0xBFA4C8", Offset = "0xBFA4C8", VA = "0xBFA4C8", Slot = "33")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x170005C0")]
		public virtual long TotalOut
		{
			[Token(Token = "0x600296F")]
			[Address(RVA = "0xBFA4F0", Offset = "0xBFA4F0", VA = "0xBFA4F0", Slot = "34")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x170005C1")]
		public override bool CanRead
		{
			[Token(Token = "0x6002971")]
			[Address(RVA = "0xBFA5F0", Offset = "0xBFA5F0", VA = "0xBFA5F0", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005C2")]
		public override bool CanSeek
		{
			[Token(Token = "0x6002972")]
			[Address(RVA = "0xBFA690", Offset = "0xBFA690", VA = "0xBFA690", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005C3")]
		public override bool CanWrite
		{
			[Token(Token = "0x6002973")]
			[Address(RVA = "0xBFA698", Offset = "0xBFA698", VA = "0xBFA698", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005C4")]
		public override long Length
		{
			[Token(Token = "0x6002975")]
			[Address(RVA = "0xBFA7D4", Offset = "0xBFA7D4", VA = "0xBFA7D4", Slot = "10")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x170005C5")]
		public override long Position
		{
			[Token(Token = "0x6002976")]
			[Address(RVA = "0xBFA834", Offset = "0xBFA834", VA = "0xBFA834", Slot = "11")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x6002977")]
			[Address(RVA = "0xBFA898", Offset = "0xBFA898", VA = "0xBFA898", Slot = "12")]
			set
			{
			}
		}

		[Token(Token = "0x6002966")]
		[Address(RVA = "0xBFA1B0", Offset = "0xBFA1B0", VA = "0xBFA1B0")]
		public GZipStream(Stream stream, CompressionMode mode)
		{
		}

		[Token(Token = "0x6002967")]
		[Address(RVA = "0xBFA27C", Offset = "0xBFA27C", VA = "0xBFA27C")]
		public GZipStream(Stream stream, CompressionMode mode, CompressionLevel level)
		{
		}

		[Token(Token = "0x6002968")]
		[Address(RVA = "0xBFA284", Offset = "0xBFA284", VA = "0xBFA284")]
		public GZipStream(Stream stream, CompressionMode mode, bool leaveOpen)
		{
		}

		[Token(Token = "0x6002969")]
		[Address(RVA = "0xBFA1BC", Offset = "0xBFA1BC", VA = "0xBFA1BC")]
		public GZipStream(Stream stream, CompressionMode mode, CompressionLevel level, bool leaveOpen)
		{
		}

		[Token(Token = "0x6002970")]
		[Address(RVA = "0xBFA518", Offset = "0xBFA518", VA = "0xBFA518", Slot = "16")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6002974")]
		[Address(RVA = "0xBFA738", Offset = "0xBFA738", VA = "0xBFA738", Slot = "17")]
		public override void Flush()
		{
		}

		[Token(Token = "0x6002978")]
		[Address(RVA = "0xBFA8F8", Offset = "0xBFA8F8", VA = "0xBFA8F8", Slot = "27")]
		public override int Read(byte[] buffer, int offset, int count)
		{
			return default(int);
		}

		[Token(Token = "0x6002979")]
		[Address(RVA = "0xBFAA00", Offset = "0xBFAA00", VA = "0xBFAA00", Slot = "25")]
		public override long Seek(long offset, SeekOrigin origin)
		{
			return default(long);
		}

		[Token(Token = "0x600297A")]
		[Address(RVA = "0xBFAA60", Offset = "0xBFAA60", VA = "0xBFAA60", Slot = "26")]
		public override void SetLength(long value)
		{
		}

		[Token(Token = "0x600297B")]
		[Address(RVA = "0xBFAAC0", Offset = "0xBFAAC0", VA = "0xBFAAC0", Slot = "29")]
		public override void Write(byte[] buffer, int offset, int count)
		{
		}

		[Token(Token = "0x600297C")]
		[Address(RVA = "0xBFABE0", Offset = "0xBFABE0", VA = "0xBFABE0")]
		private int EmitHeader()
		{
			return default(int);
		}

		[Token(Token = "0x600297D")]
		[Address(RVA = "0xBFAFB4", Offset = "0xBFAFB4", VA = "0xBFAFB4")]
		public static byte[] CompressString(string s)
		{
			return null;
		}

		[Token(Token = "0x600297E")]
		[Address(RVA = "0xBFB11C", Offset = "0xBFB11C", VA = "0xBFB11C")]
		public static byte[] CompressBuffer(byte[] b)
		{
			return null;
		}

		[Token(Token = "0x600297F")]
		[Address(RVA = "0xBFB284", Offset = "0xBFB284", VA = "0xBFB284")]
		public static string UncompressString(byte[] compressed)
		{
			return null;
		}

		[Token(Token = "0x6002980")]
		[Address(RVA = "0xBFB3CC", Offset = "0xBFB3CC", VA = "0xBFB3CC")]
		public static byte[] UncompressBuffer(byte[] compressed)
		{
			return null;
		}
	}
	[Token(Token = "0x200048F")]
	internal sealed class InfTree
	{
		[Token(Token = "0x40016EC")]
		private const int MANY = 1440;

		[Token(Token = "0x40016ED")]
		private const int Z_OK = 0;

		[Token(Token = "0x40016EE")]
		private const int Z_STREAM_END = 1;

		[Token(Token = "0x40016EF")]
		private const int Z_NEED_DICT = 2;

		[Token(Token = "0x40016F0")]
		private const int Z_ERRNO = -1;

		[Token(Token = "0x40016F1")]
		private const int Z_STREAM_ERROR = -2;

		[Token(Token = "0x40016F2")]
		private const int Z_DATA_ERROR = -3;

		[Token(Token = "0x40016F3")]
		private const int Z_MEM_ERROR = -4;

		[Token(Token = "0x40016F4")]
		private const int Z_BUF_ERROR = -5;

		[Token(Token = "0x40016F5")]
		private const int Z_VERSION_ERROR = -6;

		[Token(Token = "0x40016F6")]
		internal const int fixed_bl = 9;

		[Token(Token = "0x40016F7")]
		internal const int fixed_bd = 5;

		[Token(Token = "0x40016F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly int[] fixed_tl;

		[Token(Token = "0x40016F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly int[] fixed_td;

		[Token(Token = "0x40016FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal static readonly int[] cplens;

		[Token(Token = "0x40016FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal static readonly int[] cplext;

		[Token(Token = "0x40016FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal static readonly int[] cpdist;

		[Token(Token = "0x40016FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal static readonly int[] cpdext;

		[Token(Token = "0x40016FE")]
		internal const int BMAX = 15;

		[Token(Token = "0x40016FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int[] hn;

		[Token(Token = "0x4001700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int[] v;

		[Token(Token = "0x4001701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal int[] c;

		[Token(Token = "0x4001702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal int[] r;

		[Token(Token = "0x4001703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal int[] u;

		[Token(Token = "0x4001704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal int[] x;

		[Token(Token = "0x6002982")]
		[Address(RVA = "0xBFB5BC", Offset = "0xBFB5BC", VA = "0xBFB5BC")]
		private int huft_build(int[] b, int bindex, int n, int s, int[] d, int[] e, int[] t, int[] m, int[] hp, int[] hn, int[] v)
		{
			return default(int);
		}

		[Token(Token = "0x6002983")]
		[Address(RVA = "0xBFBE10", Offset = "0xBFBE10", VA = "0xBFBE10")]
		internal int inflate_trees_bits(int[] c, int[] bb, int[] tb, int[] hp, ZlibCodec z)
		{
			return default(int);
		}

		[Token(Token = "0x6002984")]
		[Address(RVA = "0xBFC0C4", Offset = "0xBFC0C4", VA = "0xBFC0C4")]
		internal int inflate_trees_dynamic(int nl, int nd, int[] c, int[] bl, int[] bd, int[] tl, int[] td, int[] hp, ZlibCodec z)
		{
			return default(int);
		}

		[Token(Token = "0x6002985")]
		[Address(RVA = "0xBFC2EC", Offset = "0xBFC2EC", VA = "0xBFC2EC")]
		internal static int inflate_trees_fixed(int[] bl, int[] bd, int[][] tl, int[][] td, ZlibCodec z)
		{
			return default(int);
		}

		[Token(Token = "0x6002986")]
		[Address(RVA = "0xBFBF30", Offset = "0xBFBF30", VA = "0xBFBF30")]
		private void initWorkArea(int vsize)
		{
		}

		[Token(Token = "0x6002987")]
		[Address(RVA = "0xBFC418", Offset = "0xBFC418", VA = "0xBFC418")]
		public InfTree()
		{
		}
	}
	[Token(Token = "0x2000490")]
	internal sealed class InflateBlocks
	{
		[Token(Token = "0x20006EA")]
		private enum InflateBlockMode
		{
			[Token(Token = "0x400268B")]
			TYPE,
			[Token(Token = "0x400268C")]
			LENS,
			[Token(Token = "0x400268D")]
			STORED,
			[Token(Token = "0x400268E")]
			TABLE,
			[Token(Token = "0x400268F")]
			BTREE,
			[Token(Token = "0x4002690")]
			DTREE,
			[Token(Token = "0x4002691")]
			CODES,
			[Token(Token = "0x4002692")]
			DRY,
			[Token(Token = "0x4002693")]
			DONE,
			[Token(Token = "0x4002694")]
			BAD
		}

		[Token(Token = "0x4001705")]
		private const int MANY = 1440;

		[Token(Token = "0x4001706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly int[] border;

		[Token(Token = "0x4001707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private InflateBlockMode mode;

		[Token(Token = "0x4001708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal int left;

		[Token(Token = "0x4001709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int table;

		[Token(Token = "0x400170A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int index;

		[Token(Token = "0x400170B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal int[] blens;

		[Token(Token = "0x400170C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal int[] bb;

		[Token(Token = "0x400170D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal int[] tb;

		[Token(Token = "0x400170E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal InflateCodes codes;

		[Token(Token = "0x400170F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal int last;

		[Token(Token = "0x4001710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal ZlibCodec _codec;

		[Token(Token = "0x4001711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal int bitk;

		[Token(Token = "0x4001712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		internal int bitb;

		[Token(Token = "0x4001713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal int[] hufts;

		[Token(Token = "0x4001714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal byte[] window;

		[Token(Token = "0x4001715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal int end;

		[Token(Token = "0x4001716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		internal int readAt;

		[Token(Token = "0x4001717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal int writeAt;

		[Token(Token = "0x4001718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal object checkfn;

		[Token(Token = "0x4001719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal uint check;

		[Token(Token = "0x400171A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal InfTree inftree;

		[Token(Token = "0x6002989")]
		[Address(RVA = "0xBFC594", Offset = "0xBFC594", VA = "0xBFC594")]
		internal InflateBlocks(ZlibCodec codec, object checkfn, int w)
		{
		}

		[Token(Token = "0x600298A")]
		[Address(RVA = "0xBFC6A8", Offset = "0xBFC6A8", VA = "0xBFC6A8")]
		internal uint Reset()
		{
			return default(uint);
		}

		[Token(Token = "0x600298B")]
		[Address(RVA = "0xBFC75C", Offset = "0xBFC75C", VA = "0xBFC75C")]
		internal int Process(int r)
		{
			return default(int);
		}

		[Token(Token = "0x600298C")]
		[Address(RVA = "0xBFE4A8", Offset = "0xBFE4A8", VA = "0xBFE4A8")]
		internal void Free()
		{
		}

		[Token(Token = "0x600298D")]
		[Address(RVA = "0xBFE4CC", Offset = "0xBFE4CC", VA = "0xBFE4CC")]
		internal void SetDictionary(byte[] d, int start, int n)
		{
		}

		[Token(Token = "0x600298E")]
		[Address(RVA = "0xBFE510", Offset = "0xBFE510", VA = "0xBFE510")]
		internal int SyncPoint()
		{
			return default(int);
		}

		[Token(Token = "0x600298F")]
		[Address(RVA = "0xBFD974", Offset = "0xBFD974", VA = "0xBFD974")]
		internal int Flush(int r)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000491")]
	internal static class InternalInflateConstants
	{
		[Token(Token = "0x400171B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly int[] InflateMask;
	}
	[Token(Token = "0x2000492")]
	internal sealed class InflateCodes
	{
		[Token(Token = "0x400171C")]
		private const int START = 0;

		[Token(Token = "0x400171D")]
		private const int LEN = 1;

		[Token(Token = "0x400171E")]
		private const int LENEXT = 2;

		[Token(Token = "0x400171F")]
		private const int DIST = 3;

		[Token(Token = "0x4001720")]
		private const int DISTEXT = 4;

		[Token(Token = "0x4001721")]
		private const int COPY = 5;

		[Token(Token = "0x4001722")]
		private const int LIT = 6;

		[Token(Token = "0x4001723")]
		private const int WASH = 7;

		[Token(Token = "0x4001724")]
		private const int END = 8;

		[Token(Token = "0x4001725")]
		private const int BADCODE = 9;

		[Token(Token = "0x4001726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int mode;

		[Token(Token = "0x4001727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal int len;

		[Token(Token = "0x4001728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int[] tree;

		[Token(Token = "0x4001729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal int tree_index;

		[Token(Token = "0x400172A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal int need;

		[Token(Token = "0x400172B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal int lit;

		[Token(Token = "0x400172C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal int bitsToGet;

		[Token(Token = "0x400172D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal int dist;

		[Token(Token = "0x400172E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal byte lbits;

		[Token(Token = "0x400172F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		internal byte dbits;

		[Token(Token = "0x4001730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal int[] ltree;

		[Token(Token = "0x4001731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal int ltree_index;

		[Token(Token = "0x4001732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal int[] dtree;

		[Token(Token = "0x4001733")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal int dtree_index;

		[Token(Token = "0x6002992")]
		[Address(RVA = "0xBFC6A0", Offset = "0xBFC6A0", VA = "0xBFC6A0")]
		internal InflateCodes()
		{
		}

		[Token(Token = "0x6002993")]
		[Address(RVA = "0xBFDB34", Offset = "0xBFDB34", VA = "0xBFDB34")]
		internal void Init(int bl, int bd, int[] tl, int tl_index, int[] td, int td_index)
		{
		}

		[Token(Token = "0x6002994")]
		[Address(RVA = "0xBFDB58", Offset = "0xBFDB58", VA = "0xBFDB58")]
		internal int Process(InflateBlocks blocks, int r)
		{
			return default(int);
		}

		[Token(Token = "0x6002995")]
		[Address(RVA = "0xBFE59C", Offset = "0xBFE59C", VA = "0xBFE59C")]
		internal int InflateFast(int bl, int bd, int[] tl, int tl_index, int[] td, int td_index, InflateBlocks s, ZlibCodec z)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000493")]
	internal sealed class InflateManager
	{
		[Token(Token = "0x20006EB")]
		private enum InflateManagerMode
		{
			[Token(Token = "0x4002696")]
			METHOD,
			[Token(Token = "0x4002697")]
			FLAG,
			[Token(Token = "0x4002698")]
			DICT4,
			[Token(Token = "0x4002699")]
			DICT3,
			[Token(Token = "0x400269A")]
			DICT2,
			[Token(Token = "0x400269B")]
			DICT1,
			[Token(Token = "0x400269C")]
			DICT0,
			[Token(Token = "0x400269D")]
			BLOCKS,
			[Token(Token = "0x400269E")]
			CHECK4,
			[Token(Token = "0x400269F")]
			CHECK3,
			[Token(Token = "0x40026A0")]
			CHECK2,
			[Token(Token = "0x40026A1")]
			CHECK1,
			[Token(Token = "0x40026A2")]
			DONE,
			[Token(Token = "0x40026A3")]
			BAD
		}

		[Token(Token = "0x4001734")]
		private const int PRESET_DICT = 32;

		[Token(Token = "0x4001735")]
		private const int Z_DEFLATED = 8;

		[Token(Token = "0x4001736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private InflateManagerMode mode;

		[Token(Token = "0x4001737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal ZlibCodec _codec;

		[Token(Token = "0x4001738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal int method;

		[Token(Token = "0x4001739")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal uint computedCheck;

		[Token(Token = "0x400173A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal uint expectedCheck;

		[Token(Token = "0x400173B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal int marker;

		[Token(Token = "0x400173C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool _handleRfc1950HeaderBytes;

		[Token(Token = "0x400173D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal int wbits;

		[Token(Token = "0x400173E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal InflateBlocks blocks;

		[Token(Token = "0x400173F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly byte[] mark;

		[Token(Token = "0x170005C6")]
		internal bool HandleRfc1950HeaderBytes
		{
			[Token(Token = "0x6002996")]
			[Address(RVA = "0xBFEECC", Offset = "0xBFEECC", VA = "0xBFEECC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002997")]
			[Address(RVA = "0xBFEED4", Offset = "0xBFEED4", VA = "0xBFEED4")]
			set
			{
			}
		}

		[Token(Token = "0x6002998")]
		[Address(RVA = "0xBFEEE0", Offset = "0xBFEEE0", VA = "0xBFEEE0")]
		public InflateManager()
		{
		}

		[Token(Token = "0x6002999")]
		[Address(RVA = "0xBFEEF0", Offset = "0xBFEEF0", VA = "0xBFEEF0")]
		public InflateManager(bool expectRfc1950HeaderBytes)
		{
		}

		[Token(Token = "0x600299A")]
		[Address(RVA = "0xBFEF28", Offset = "0xBFEF28", VA = "0xBFEF28")]
		internal int Reset()
		{
			return default(int);
		}

		[Token(Token = "0x600299B")]
		[Address(RVA = "0xBFEF80", Offset = "0xBFEF80", VA = "0xBFEF80")]
		internal int End()
		{
			return default(int);
		}

		[Token(Token = "0x600299C")]
		[Address(RVA = "0xBFEFB8", Offset = "0xBFEFB8", VA = "0xBFEFB8")]
		internal int Initialize(ZlibCodec codec, int w)
		{
			return default(int);
		}

		[Token(Token = "0x600299D")]
		[Address(RVA = "0xBFF0B8", Offset = "0xBFF0B8", VA = "0xBFF0B8")]
		internal int Inflate(FlushType flush)
		{
			return default(int);
		}

		[Token(Token = "0x600299E")]
		[Address(RVA = "0xBFF960", Offset = "0xBFF960", VA = "0xBFF960")]
		internal int SetDictionary(byte[] dictionary)
		{
			return default(int);
		}

		[Token(Token = "0x600299F")]
		[Address(RVA = "0xBFFAE8", Offset = "0xBFFAE8", VA = "0xBFFAE8")]
		internal int Sync()
		{
			return default(int);
		}

		[Token(Token = "0x60029A0")]
		[Address(RVA = "0xBFFCF0", Offset = "0xBFFCF0", VA = "0xBFFCF0")]
		internal int SyncPoint(ZlibCodec z)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000494")]
	internal sealed class ZTree
	{
		[Token(Token = "0x4001740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int HEAP_SIZE;

		[Token(Token = "0x4001741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly int[] ExtraLengthBits;

		[Token(Token = "0x4001742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal static readonly int[] ExtraDistanceBits;

		[Token(Token = "0x4001743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal static readonly int[] extra_blbits;

		[Token(Token = "0x4001744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal static readonly sbyte[] bl_order;

		[Token(Token = "0x4001745")]
		internal const int Buf_size = 16;

		[Token(Token = "0x4001746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static readonly sbyte[] _dist_code;

		[Token(Token = "0x4001747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal static readonly sbyte[] LengthCode;

		[Token(Token = "0x4001748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal static readonly int[] LengthBase;

		[Token(Token = "0x4001749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal static readonly int[] DistanceBase;

		[Token(Token = "0x400174A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal short[] dyn_tree;

		[Token(Token = "0x400174B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int max_code;

		[Token(Token = "0x400174C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal StaticTree staticTree;

		[Token(Token = "0x60029A2")]
		[Address(RVA = "0xC002D0", Offset = "0xC002D0", VA = "0xC002D0")]
		internal static int DistanceCode(int dist)
		{
			return default(int);
		}

		[Token(Token = "0x60029A3")]
		[Address(RVA = "0xC003AC", Offset = "0xC003AC", VA = "0xC003AC")]
		internal void gen_bitlen(DeflateManager s)
		{
		}

		[Token(Token = "0x60029A4")]
		[Address(RVA = "0xC0078C", Offset = "0xC0078C", VA = "0xC0078C")]
		internal void build_tree(DeflateManager s)
		{
		}

		[Token(Token = "0x60029A5")]
		[Address(RVA = "0xC00C6C", Offset = "0xC00C6C", VA = "0xC00C6C")]
		internal static void gen_codes(short[] tree, int max_code, short[] bl_count)
		{
		}

		[Token(Token = "0x60029A6")]
		[Address(RVA = "0xC00E54", Offset = "0xC00E54", VA = "0xC00E54")]
		internal static int bi_reverse(int code, int len)
		{
			return default(int);
		}

		[Token(Token = "0x60029A7")]
		[Address(RVA = "0xC00E7C", Offset = "0xC00E7C", VA = "0xC00E7C")]
		public ZTree()
		{
		}
	}
	[Token(Token = "0x2000495")]
	public enum FlushType
	{
		[Token(Token = "0x400174E")]
		None,
		[Token(Token = "0x400174F")]
		Partial,
		[Token(Token = "0x4001750")]
		Sync,
		[Token(Token = "0x4001751")]
		Full,
		[Token(Token = "0x4001752")]
		Finish
	}
	[Token(Token = "0x2000496")]
	public enum CompressionLevel
	{
		[Token(Token = "0x4001754")]
		None = 0,
		[Token(Token = "0x4001755")]
		Level0 = 0,
		[Token(Token = "0x4001756")]
		BestSpeed = 1,
		[Token(Token = "0x4001757")]
		Level1 = 1,
		[Token(Token = "0x4001758")]
		Level2 = 2,
		[Token(Token = "0x4001759")]
		Level3 = 3,
		[Token(Token = "0x400175A")]
		Level4 = 4,
		[Token(Token = "0x400175B")]
		Level5 = 5,
		[Token(Token = "0x400175C")]
		Default = 6,
		[Token(Token = "0x400175D")]
		Level6 = 6,
		[Token(Token = "0x400175E")]
		Level7 = 7,
		[Token(Token = "0x400175F")]
		Level8 = 8,
		[Token(Token = "0x4001760")]
		BestCompression = 9,
		[Token(Token = "0x4001761")]
		Level9 = 9
	}
	[Token(Token = "0x2000497")]
	public enum CompressionStrategy
	{
		[Token(Token = "0x4001763")]
		Default,
		[Token(Token = "0x4001764")]
		Filtered,
		[Token(Token = "0x4001765")]
		HuffmanOnly
	}
	[Token(Token = "0x2000498")]
	public enum CompressionMode
	{
		[Token(Token = "0x4001767")]
		Compress,
		[Token(Token = "0x4001768")]
		Decompress
	}
	[Token(Token = "0x2000499")]
	[AttributeAttribute(Name = "GuidAttribute", RVA = "0x81F4D4", Offset = "0x81F4D4")]
	internal class ZlibException : Exception
	{
		[Token(Token = "0x60029A9")]
		[Address(RVA = "0xC03040", Offset = "0xC03040", VA = "0xC03040")]
		public ZlibException()
		{
		}

		[Token(Token = "0x60029AA")]
		[Address(RVA = "0xBF8AE4", Offset = "0xBF8AE4", VA = "0xBF8AE4")]
		public ZlibException(string s)
		{
		}
	}
	[Token(Token = "0x200049A")]
	internal class SharedUtils
	{
		[Token(Token = "0x60029AB")]
		[Address(RVA = "0xBFBE08", Offset = "0xBFBE08", VA = "0xBFBE08")]
		public static int URShift(int number, int bits)
		{
			return default(int);
		}

		[Token(Token = "0x60029AC")]
		[Address(RVA = "0xBFFEF8", Offset = "0xBFFEF8", VA = "0xBFFEF8")]
		public static int ReadInput(TextReader sourceTextReader, byte[] target, int start, int count)
		{
			return default(int);
		}

		[Token(Token = "0x60029AD")]
		[Address(RVA = "0xC00004", Offset = "0xC00004", VA = "0xC00004")]
		internal static byte[] ToByteArray(string sourceString)
		{
			return null;
		}

		[Token(Token = "0x60029AE")]
		[Address(RVA = "0xC00040", Offset = "0xC00040", VA = "0xC00040")]
		internal static char[] ToCharArray(byte[] byteArray)
		{
			return null;
		}

		[Token(Token = "0x60029AF")]
		[Address(RVA = "0xC0007C", Offset = "0xC0007C", VA = "0xC0007C")]
		public SharedUtils()
		{
		}
	}
	[Token(Token = "0x200049B")]
	internal static class InternalConstants
	{
		[Token(Token = "0x4001769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly int MAX_BITS;

		[Token(Token = "0x400176A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		internal static readonly int BL_CODES;

		[Token(Token = "0x400176B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly int D_CODES;

		[Token(Token = "0x400176C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal static readonly int LITERALS;

		[Token(Token = "0x400176D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal static readonly int LENGTH_CODES;

		[Token(Token = "0x400176E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal static readonly int L_CODES;

		[Token(Token = "0x400176F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal static readonly int MAX_BL_BITS;

		[Token(Token = "0x4001770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal static readonly int REP_3_6;

		[Token(Token = "0x4001771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal static readonly int REPZ_3_10;

		[Token(Token = "0x4001772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal static readonly int REPZ_11_138;
	}
	[Token(Token = "0x200049C")]
	internal sealed class StaticTree
	{
		[Token(Token = "0x4001773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly short[] lengthAndLiteralsTreeCodes;

		[Token(Token = "0x4001774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly short[] distTreeCodes;

		[Token(Token = "0x4001775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal static readonly StaticTree Literals;

		[Token(Token = "0x4001776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal static readonly StaticTree Distances;

		[Token(Token = "0x4001777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal static readonly StaticTree BitLengths;

		[Token(Token = "0x4001778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal short[] treeCodes;

		[Token(Token = "0x4001779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int[] extraBits;

		[Token(Token = "0x400177A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal int extraBase;

		[Token(Token = "0x400177B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal int elems;

		[Token(Token = "0x400177C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal int maxLength;

		[Token(Token = "0x60029B1")]
		[Address(RVA = "0xC00084", Offset = "0xC00084", VA = "0xC00084")]
		private StaticTree(short[] treeCodes, int[] extraBits, int extraBase, int elems, int maxLength)
		{
		}

		[Token(Token = "0x60029B2")]
		[Address(RVA = "0xC000D8", Offset = "0xC000D8", VA = "0xC000D8")]
		static StaticTree()
		{
		}
	}
	[Token(Token = "0x200049D")]
	public sealed class Adler
	{
		[Token(Token = "0x400177D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly uint BASE;

		[Token(Token = "0x400177E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly int NMAX;

		[Token(Token = "0x60029B3")]
		[Address(RVA = "0xBB9728", Offset = "0xBB9728", VA = "0xBB9728")]
		public static uint Adler32(uint adler, byte[] buf, int index, int len)
		{
			return default(uint);
		}

		[Token(Token = "0x60029B4")]
		[Address(RVA = "0xBB9AD4", Offset = "0xBB9AD4", VA = "0xBB9AD4")]
		public Adler()
		{
		}
	}
	[Token(Token = "0x200049E")]
	internal enum ZlibStreamFlavor
	{
		[Token(Token = "0x4001780")]
		ZLIB = 1950,
		[Token(Token = "0x4001781")]
		DEFLATE,
		[Token(Token = "0x4001782")]
		GZIP
	}
	[Token(Token = "0x200049F")]
	internal class ZlibBaseStream : Stream
	{
		[Token(Token = "0x20006EC")]
		internal enum StreamMode
		{
			[Token(Token = "0x40026A5")]
			Writer,
			[Token(Token = "0x40026A6")]
			Reader,
			[Token(Token = "0x40026A7")]
			Undefined
		}

		[Token(Token = "0x4001783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected internal ZlibCodec _z;

		[Token(Token = "0x4001784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected internal StreamMode _streamMode;

		[Token(Token = "0x4001785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		protected internal FlushType _flushMode;

		[Token(Token = "0x4001786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected internal ZlibStreamFlavor _flavor;

		[Token(Token = "0x4001787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected internal CompressionMode _compressionMode;

		[Token(Token = "0x4001788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected internal CompressionLevel _level;

		[Token(Token = "0x4001789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected internal bool _leaveOpen;

		[Token(Token = "0x400178A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected internal byte[] _workingBuffer;

		[Token(Token = "0x400178B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected internal int _bufferSize;

		[Token(Token = "0x400178C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		protected internal int windowBitsMax;

		[Token(Token = "0x400178D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected internal byte[] _buf1;

		[Token(Token = "0x400178E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected internal Stream _stream;

		[Token(Token = "0x400178F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected internal CompressionStrategy Strategy;

		[Token(Token = "0x4001790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private CRC32 crc;

		[Token(Token = "0x4001791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected internal string _GzipFileName;

		[Token(Token = "0x4001792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected internal string _GzipComment;

		[Token(Token = "0x4001793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected internal DateTime _GzipMtime;

		[Token(Token = "0x4001794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected internal int _gzipHeaderByteCount;

		[Token(Token = "0x4001795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool nomoreinput;

		[Token(Token = "0x170005C7")]
		internal int Crc32
		{
			[Token(Token = "0x60029B6")]
			[Address(RVA = "0xBFA5DC", Offset = "0xBFA5DC", VA = "0xBFA5DC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170005C8")]
		protected internal bool _wantCompress
		{
			[Token(Token = "0x60029B9")]
			[Address(RVA = "0xBFABD0", Offset = "0xBFABD0", VA = "0xBFABD0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005C9")]
		private ZlibCodec z
		{
			[Token(Token = "0x60029BA")]
			[Address(RVA = "0xC010A0", Offset = "0xC010A0", VA = "0xC010A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170005CA")]
		private byte[] workingBuffer
		{
			[Token(Token = "0x60029BB")]
			[Address(RVA = "0xC01280", Offset = "0xC01280", VA = "0xC01280")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170005CB")]
		public override bool CanRead
		{
			[Token(Token = "0x60029C6")]
			[Address(RVA = "0xC0276C", Offset = "0xC0276C", VA = "0xC0276C", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005CC")]
		public override bool CanSeek
		{
			[Token(Token = "0x60029C7")]
			[Address(RVA = "0xC0278C", Offset = "0xC0278C", VA = "0xC0278C", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005CD")]
		public override bool CanWrite
		{
			[Token(Token = "0x60029C8")]
			[Address(RVA = "0xC027AC", Offset = "0xC027AC", VA = "0xC027AC", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005CE")]
		public override long Length
		{
			[Token(Token = "0x60029C9")]
			[Address(RVA = "0xC027CC", Offset = "0xC027CC", VA = "0xC027CC", Slot = "10")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x170005CF")]
		public override long Position
		{
			[Token(Token = "0x60029CA")]
			[Address(RVA = "0xC027EC", Offset = "0xC027EC", VA = "0xC027EC", Slot = "11")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x60029CB")]
			[Address(RVA = "0xC0284C", Offset = "0xC0284C", VA = "0xC0284C", Slot = "12")]
			set
			{
			}
		}

		[Token(Token = "0x60029B7")]
		[Address(RVA = "0xBF86CC", Offset = "0xBF86CC", VA = "0xBF86CC")]
		public ZlibBaseStream(Stream stream, CompressionMode compressionMode, CompressionLevel level, ZlibStreamFlavor flavor, bool leaveOpen)
		{
		}

		[Token(Token = "0x60029B8")]
		[Address(RVA = "0xBF87A8", Offset = "0xBF87A8", VA = "0xBF87A8")]
		public ZlibBaseStream(Stream stream, CompressionMode compressionMode, CompressionLevel level, ZlibStreamFlavor flavor, bool leaveOpen, int windowBits)
		{
		}

		[Token(Token = "0x60029BC")]
		[Address(RVA = "0xC012E0", Offset = "0xC012E0", VA = "0xC012E0", Slot = "29")]
		public override void Write(byte[] buffer, int offset, int count)
		{
		}

		[Token(Token = "0x60029BD")]
		[Address(RVA = "0xC0166C", Offset = "0xC0166C", VA = "0xC0166C")]
		private void finish()
		{
		}

		[Token(Token = "0x60029BE")]
		[Address(RVA = "0xC01BE8", Offset = "0xC01BE8", VA = "0xC01BE8")]
		private void end()
		{
		}

		[Token(Token = "0x60029BF")]
		[Address(RVA = "0xC01D60", Offset = "0xC01D60", VA = "0xC01D60", Slot = "15")]
		public override void Close()
		{
		}

		[Token(Token = "0x60029C0")]
		[Address(RVA = "0xC01DE0", Offset = "0xC01DE0", VA = "0xC01DE0", Slot = "17")]
		public override void Flush()
		{
		}

		[Token(Token = "0x60029C1")]
		[Address(RVA = "0xC01E04", Offset = "0xC01E04", VA = "0xC01E04", Slot = "25")]
		public override long Seek(long offset, SeekOrigin origin)
		{
			return default(long);
		}

		[Token(Token = "0x60029C2")]
		[Address(RVA = "0xC01E64", Offset = "0xC01E64", VA = "0xC01E64", Slot = "26")]
		public override void SetLength(long value)
		{
		}

		[Token(Token = "0x60029C3")]
		[Address(RVA = "0xC01EA0", Offset = "0xC01EA0", VA = "0xC01EA0")]
		private string ReadZeroTerminatedString()
		{
			return null;
		}

		[Token(Token = "0x60029C4")]
		[Address(RVA = "0xC02024", Offset = "0xC02024", VA = "0xC02024")]
		private int _ReadAndValidateGzipHeader()
		{
			return default(int);
		}

		[Token(Token = "0x60029C5")]
		[Address(RVA = "0xC02320", Offset = "0xC02320", VA = "0xC02320", Slot = "27")]
		public override int Read(byte[] buffer, int offset, int count)
		{
			return default(int);
		}

		[Token(Token = "0x60029CC")]
		[Address(RVA = "0xBF9370", Offset = "0xBF9370", VA = "0xBF9370")]
		public static void CompressString(string s, Stream compressor)
		{
		}

		[Token(Token = "0x60029CD")]
		[Address(RVA = "0xBF9614", Offset = "0xBF9614", VA = "0xBF9614")]
		public static void CompressBuffer(byte[] b, Stream compressor)
		{
		}

		[Token(Token = "0x60029CE")]
		[Address(RVA = "0xBF9874", Offset = "0xBF9874", VA = "0xBF9874")]
		public static string UncompressString(byte[] compressed, Stream decompressor)
		{
			return null;
		}

		[Token(Token = "0x60029CF")]
		[Address(RVA = "0xBF9CC8", Offset = "0xBF9CC8", VA = "0xBF9CC8")]
		public static byte[] UncompressBuffer(byte[] compressed, Stream decompressor)
		{
			return null;
		}
	}
	[Token(Token = "0x20004A0")]
	internal sealed class ZlibCodec
	{
		[Token(Token = "0x4001796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte[] InputBuffer;

		[Token(Token = "0x4001797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int NextIn;

		[Token(Token = "0x4001798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int AvailableBytesIn;

		[Token(Token = "0x4001799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public long TotalBytesIn;

		[Token(Token = "0x400179A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public byte[] OutputBuffer;

		[Token(Token = "0x400179B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int NextOut;

		[Token(Token = "0x400179C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int AvailableBytesOut;

		[Token(Token = "0x400179D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public long TotalBytesOut;

		[Token(Token = "0x400179E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string Message;

		[Token(Token = "0x400179F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal DeflateManager dstate;

		[Token(Token = "0x40017A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal InflateManager istate;

		[Token(Token = "0x40017A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal uint _Adler32;

		[Token(Token = "0x40017A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public CompressionLevel CompressLevel;

		[Token(Token = "0x40017A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int WindowBits;

		[Token(Token = "0x40017A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public CompressionStrategy Strategy;

		[Token(Token = "0x170005D0")]
		public int Adler32
		{
			[Token(Token = "0x60029D0")]
			[Address(RVA = "0xC028AC", Offset = "0xC028AC", VA = "0xC028AC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60029D1")]
		[Address(RVA = "0xC0117C", Offset = "0xC0117C", VA = "0xC0117C")]
		public ZlibCodec()
		{
		}

		[Token(Token = "0x60029D2")]
		[Address(RVA = "0xC028B4", Offset = "0xC028B4", VA = "0xC028B4")]
		public ZlibCodec(CompressionMode mode)
		{
		}

		[Token(Token = "0x60029D3")]
		[Address(RVA = "0xC029AC", Offset = "0xC029AC", VA = "0xC029AC")]
		public int InitializeInflate()
		{
			return default(int);
		}

		[Token(Token = "0x60029D4")]
		[Address(RVA = "0xC029EC", Offset = "0xC029EC", VA = "0xC029EC")]
		public int InitializeInflate(bool expectRfc1950Header)
		{
			return default(int);
		}

		[Token(Token = "0x60029D5")]
		[Address(RVA = "0xC029CC", Offset = "0xC029CC", VA = "0xC029CC")]
		public int InitializeInflate(int windowBits)
		{
			return default(int);
		}

		[Token(Token = "0x60029D6")]
		[Address(RVA = "0xC01190", Offset = "0xC01190", VA = "0xC01190")]
		public int InitializeInflate(int windowBits, bool expectRfc1950Header)
		{
			return default(int);
		}

		[Token(Token = "0x60029D7")]
		[Address(RVA = "0xC01558", Offset = "0xC01558", VA = "0xC01558")]
		public int Inflate(FlushType flush)
		{
			return default(int);
		}

		[Token(Token = "0x60029D8")]
		[Address(RVA = "0xC01CB8", Offset = "0xC01CB8", VA = "0xC01CB8")]
		public int EndInflate()
		{
			return default(int);
		}

		[Token(Token = "0x60029D9")]
		[Address(RVA = "0xC02A10", Offset = "0xC02A10", VA = "0xC02A10")]
		public int SyncInflate()
		{
			return default(int);
		}

		[Token(Token = "0x60029DA")]
		[Address(RVA = "0xC029A4", Offset = "0xC029A4", VA = "0xC029A4")]
		public int InitializeDeflate()
		{
			return default(int);
		}

		[Token(Token = "0x60029DB")]
		[Address(RVA = "0xC02B64", Offset = "0xC02B64", VA = "0xC02B64")]
		public int InitializeDeflate(CompressionLevel level)
		{
			return default(int);
		}

		[Token(Token = "0x60029DC")]
		[Address(RVA = "0xC02B74", Offset = "0xC02B74", VA = "0xC02B74")]
		public int InitializeDeflate(CompressionLevel level, bool wantRfc1950Header)
		{
			return default(int);
		}

		[Token(Token = "0x60029DD")]
		[Address(RVA = "0xC02B84", Offset = "0xC02B84", VA = "0xC02B84")]
		public int InitializeDeflate(CompressionLevel level, int bits)
		{
			return default(int);
		}

		[Token(Token = "0x60029DE")]
		[Address(RVA = "0xC01270", Offset = "0xC01270", VA = "0xC01270")]
		public int InitializeDeflate(CompressionLevel level, int bits, bool wantRfc1950Header)
		{
			return default(int);
		}

		[Token(Token = "0x60029DF")]
		[Address(RVA = "0xC02A90", Offset = "0xC02A90", VA = "0xC02A90")]
		private int _InternalInitializeDeflate(bool wantRfc1950Header)
		{
			return default(int);
		}

		[Token(Token = "0x60029E0")]
		[Address(RVA = "0xC015D8", Offset = "0xC015D8", VA = "0xC015D8")]
		public int Deflate(FlushType flush)
		{
			return default(int);
		}

		[Token(Token = "0x60029E1")]
		[Address(RVA = "0xC01C30", Offset = "0xC01C30", VA = "0xC01C30")]
		public int EndDeflate()
		{
			return default(int);
		}

		[Token(Token = "0x60029E2")]
		[Address(RVA = "0xC02B94", Offset = "0xC02B94", VA = "0xC02B94")]
		public void ResetDeflate()
		{
		}

		[Token(Token = "0x60029E3")]
		[Address(RVA = "0xC02C18", Offset = "0xC02C18", VA = "0xC02C18")]
		public int SetDeflateParams(CompressionLevel level, CompressionStrategy strategy)
		{
			return default(int);
		}

		[Token(Token = "0x60029E4")]
		[Address(RVA = "0xC02CB4", Offset = "0xC02CB4", VA = "0xC02CB4")]
		public int SetDictionary(byte[] dictionary)
		{
			return default(int);
		}

		[Token(Token = "0x60029E5")]
		[Address(RVA = "0xC02D64", Offset = "0xC02D64", VA = "0xC02D64")]
		internal void flush_pending()
		{
		}

		[Token(Token = "0x60029E6")]
		[Address(RVA = "0xC02F30", Offset = "0xC02F30", VA = "0xC02F30")]
		internal int read_buf(byte[] buf, int start, int size)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20004A1")]
	public static class ZlibConstants
	{
		[Token(Token = "0x40017A5")]
		public const int WindowBitsMax = 15;

		[Token(Token = "0x40017A6")]
		public const int WindowBitsDefault = 15;

		[Token(Token = "0x40017A7")]
		public const int Z_OK = 0;

		[Token(Token = "0x40017A8")]
		public const int Z_STREAM_END = 1;

		[Token(Token = "0x40017A9")]
		public const int Z_NEED_DICT = 2;

		[Token(Token = "0x40017AA")]
		public const int Z_STREAM_ERROR = -2;

		[Token(Token = "0x40017AB")]
		public const int Z_DATA_ERROR = -3;

		[Token(Token = "0x40017AC")]
		public const int Z_BUF_ERROR = -5;

		[Token(Token = "0x40017AD")]
		public const int WorkingBufferSizeDefault = 16384;

		[Token(Token = "0x40017AE")]
		public const int WorkingBufferSizeMin = 1024;
	}
}
namespace BestHTTP.Decompression.Crc
{
	[Token(Token = "0x20004A2")]
	internal class CRC32
	{
		[Token(Token = "0x40017AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private uint dwPolynomial;

		[Token(Token = "0x40017B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private long _TotalBytesRead;

		[Token(Token = "0x40017B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool reverseBits;

		[Token(Token = "0x40017B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private uint[] crc32Table;

		[Token(Token = "0x40017B3")]
		private const int BUFFER_SIZE = 8192;

		[Token(Token = "0x40017B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private uint _register;

		[Token(Token = "0x170005D1")]
		public long TotalBytesRead
		{
			[Token(Token = "0x60029E7")]
			[Address(RVA = "0xBB8E14", Offset = "0xBB8E14", VA = "0xBB8E14")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x170005D2")]
		public int Crc32Result
		{
			[Token(Token = "0x60029E8")]
			[Address(RVA = "0xBB8E1C", Offset = "0xBB8E1C", VA = "0xBB8E1C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60029E9")]
		[Address(RVA = "0xBB8E28", Offset = "0xBB8E28", VA = "0xBB8E28")]
		public int GetCrc32(Stream input)
		{
			return default(int);
		}

		[Token(Token = "0x60029EA")]
		[Address(RVA = "0xBB8E30", Offset = "0xBB8E30", VA = "0xBB8E30")]
		public int GetCrc32AndCopy(Stream input, Stream output)
		{
			return default(int);
		}

		[Token(Token = "0x60029EB")]
		[Address(RVA = "0xBB911C", Offset = "0xBB911C", VA = "0xBB911C")]
		public int ComputeCrc32(int W, byte B)
		{
			return default(int);
		}

		[Token(Token = "0x60029EC")]
		[Address(RVA = "0xBB9120", Offset = "0xBB9120", VA = "0xBB9120")]
		internal int _InternalComputeCrc32(uint W, byte B)
		{
			return default(int);
		}

		[Token(Token = "0x60029ED")]
		[Address(RVA = "0xBB8FB8", Offset = "0xBB8FB8", VA = "0xBB8FB8")]
		public void SlurpBlock(byte[] block, int offset, int count)
		{
		}

		[Token(Token = "0x60029EE")]
		[Address(RVA = "0xBB9168", Offset = "0xBB9168", VA = "0xBB9168")]
		public void UpdateCRC(byte b)
		{
		}

		[Token(Token = "0x60029EF")]
		[Address(RVA = "0xBB91EC", Offset = "0xBB91EC", VA = "0xBB91EC")]
		public void UpdateCRC(byte b, int n)
		{
		}

		[Token(Token = "0x60029F0")]
		[Address(RVA = "0xBB9284", Offset = "0xBB9284", VA = "0xBB9284")]
		private static uint ReverseBits(uint data)
		{
			return default(uint);
		}

		[Token(Token = "0x60029F1")]
		[Address(RVA = "0xBB928C", Offset = "0xBB928C", VA = "0xBB928C")]
		private static byte ReverseBits(byte data)
		{
			return default(byte);
		}

		[Token(Token = "0x60029F2")]
		[Address(RVA = "0xBB92D8", Offset = "0xBB92D8", VA = "0xBB92D8")]
		private void GenerateLookupTable()
		{
		}

		[Token(Token = "0x60029F3")]
		[Address(RVA = "0xBB9418", Offset = "0xBB9418", VA = "0xBB9418")]
		private uint gf2_matrix_times(uint[] matrix, uint vec)
		{
			return default(uint);
		}

		[Token(Token = "0x60029F4")]
		[Address(RVA = "0xBB9478", Offset = "0xBB9478", VA = "0xBB9478")]
		private void gf2_matrix_square(uint[] square, uint[] mat)
		{
		}

		[Token(Token = "0x60029F5")]
		[Address(RVA = "0xBB94F4", Offset = "0xBB94F4", VA = "0xBB94F4")]
		public void Combine(int crc, int length)
		{
		}

		[Token(Token = "0x60029F6")]
		[Address(RVA = "0xBB9648", Offset = "0xBB9648", VA = "0xBB9648")]
		public CRC32()
		{
		}

		[Token(Token = "0x60029F7")]
		[Address(RVA = "0xBB9688", Offset = "0xBB9688", VA = "0xBB9688")]
		public CRC32(bool reverseBits)
		{
		}

		[Token(Token = "0x60029F8")]
		[Address(RVA = "0xBB96D0", Offset = "0xBB96D0", VA = "0xBB96D0")]
		public CRC32(int polynomial, bool reverseBits)
		{
		}

		[Token(Token = "0x60029F9")]
		[Address(RVA = "0xBB971C", Offset = "0xBB971C", VA = "0xBB971C")]
		public void Reset()
		{
		}
	}
}
namespace BestHTTP.Cookies
{
	[Token(Token = "0x20004A3")]
	public sealed class Cookie : IComparable<Cookie>, IEquatable<Cookie>
	{
		[Serializable]
		[Token(Token = "0x20006ED")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820EC0", Offset = "0x820EC0")]
		private sealed class <>c
		{
			[Token(Token = "0x40026A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40026A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<char, bool> <>9__61_0;

			[Token(Token = "0x600364B")]
			[Address(RVA = "0xBB5BC4", Offset = "0xBB5BC4", VA = "0xBB5BC4")]
			public <>c()
			{
			}

			[Token(Token = "0x600364C")]
			[Address(RVA = "0xBB5BCC", Offset = "0xBB5BCC", VA = "0xBB5BCC")]
			internal bool <ParseCookieHeader>b__61_0(char ch)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40017B5")]
		private const int Version = 1;

		[Token(Token = "0x40017B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824484", Offset = "0x824484")]
		private string <Name>k__BackingField;

		[Token(Token = "0x40017B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824494", Offset = "0x824494")]
		private string <Value>k__BackingField;

		[Token(Token = "0x40017B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8244A4", Offset = "0x8244A4")]
		private DateTime <Date>k__BackingField;

		[Token(Token = "0x40017B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8244B4", Offset = "0x8244B4")]
		private DateTime <LastAccess>k__BackingField;

		[Token(Token = "0x40017BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8244C4", Offset = "0x8244C4")]
		private DateTime <Expires>k__BackingField;

		[Token(Token = "0x40017BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8244D4", Offset = "0x8244D4")]
		private long <MaxAge>k__BackingField;

		[Token(Token = "0x40017BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8244E4", Offset = "0x8244E4")]
		private bool <IsSession>k__BackingField;

		[Token(Token = "0x40017BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8244F4", Offset = "0x8244F4")]
		private string <Domain>k__BackingField;

		[Token(Token = "0x40017BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824504", Offset = "0x824504")]
		private string <Path>k__BackingField;

		[Token(Token = "0x40017BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824514", Offset = "0x824514")]
		private bool <IsSecure>k__BackingField;

		[Token(Token = "0x40017C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824524", Offset = "0x824524")]
		private bool <IsHttpOnly>k__BackingField;

		[Token(Token = "0x170005D3")]
		public string Name
		{
			[Token(Token = "0x60029FA")]
			[Address(RVA = "0xBB47AC", Offset = "0xBB47AC", VA = "0xBB47AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832D08", Offset = "0x832D08")]
			get
			{
				return null;
			}
			[Token(Token = "0x60029FB")]
			[Address(RVA = "0xBB47B4", Offset = "0xBB47B4", VA = "0xBB47B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832D18", Offset = "0x832D18")]
			private set
			{
			}
		}

		[Token(Token = "0x170005D4")]
		public string Value
		{
			[Token(Token = "0x60029FC")]
			[Address(RVA = "0xBB47BC", Offset = "0xBB47BC", VA = "0xBB47BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832D28", Offset = "0x832D28")]
			get
			{
				return null;
			}
			[Token(Token = "0x60029FD")]
			[Address(RVA = "0xBB47C4", Offset = "0xBB47C4", VA = "0xBB47C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832D38", Offset = "0x832D38")]
			private set
			{
			}
		}

		[Token(Token = "0x170005D5")]
		public DateTime Date
		{
			[Token(Token = "0x60029FE")]
			[Address(RVA = "0xBB47CC", Offset = "0xBB47CC", VA = "0xBB47CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832D48", Offset = "0x832D48")]
			get
			{
				return default(DateTime);
			}
			[Token(Token = "0x60029FF")]
			[Address(RVA = "0xBB47D4", Offset = "0xBB47D4", VA = "0xBB47D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832D58", Offset = "0x832D58")]
			internal set
			{
			}
		}

		[Token(Token = "0x170005D6")]
		public DateTime LastAccess
		{
			[Token(Token = "0x6002A00")]
			[Address(RVA = "0xBB47DC", Offset = "0xBB47DC", VA = "0xBB47DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832D68", Offset = "0x832D68")]
			get
			{
				return default(DateTime);
			}
			[Token(Token = "0x6002A01")]
			[Address(RVA = "0xBB47E4", Offset = "0xBB47E4", VA = "0xBB47E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832D78", Offset = "0x832D78")]
			set
			{
			}
		}

		[Token(Token = "0x170005D7")]
		public DateTime Expires
		{
			[Token(Token = "0x6002A02")]
			[Address(RVA = "0xBB47EC", Offset = "0xBB47EC", VA = "0xBB47EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832D88", Offset = "0x832D88")]
			get
			{
				return default(DateTime);
			}
			[Token(Token = "0x6002A03")]
			[Address(RVA = "0xBB47F4", Offset = "0xBB47F4", VA = "0xBB47F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832D98", Offset = "0x832D98")]
			private set
			{
			}
		}

		[Token(Token = "0x170005D8")]
		public long MaxAge
		{
			[Token(Token = "0x6002A04")]
			[Address(RVA = "0xBB47FC", Offset = "0xBB47FC", VA = "0xBB47FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832DA8", Offset = "0x832DA8")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x6002A05")]
			[Address(RVA = "0xBB4804", Offset = "0xBB4804", VA = "0xBB4804")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832DB8", Offset = "0x832DB8")]
			private set
			{
			}
		}

		[Token(Token = "0x170005D9")]
		public bool IsSession
		{
			[Token(Token = "0x6002A06")]
			[Address(RVA = "0xBB480C", Offset = "0xBB480C", VA = "0xBB480C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832DC8", Offset = "0x832DC8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002A07")]
			[Address(RVA = "0xBB4814", Offset = "0xBB4814", VA = "0xBB4814")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832DD8", Offset = "0x832DD8")]
			private set
			{
			}
		}

		[Token(Token = "0x170005DA")]
		public string Domain
		{
			[Token(Token = "0x6002A08")]
			[Address(RVA = "0xBB4820", Offset = "0xBB4820", VA = "0xBB4820")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832DE8", Offset = "0x832DE8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002A09")]
			[Address(RVA = "0xBB4828", Offset = "0xBB4828", VA = "0xBB4828")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832DF8", Offset = "0x832DF8")]
			private set
			{
			}
		}

		[Token(Token = "0x170005DB")]
		public string Path
		{
			[Token(Token = "0x6002A0A")]
			[Address(RVA = "0xBB4830", Offset = "0xBB4830", VA = "0xBB4830")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832E08", Offset = "0x832E08")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002A0B")]
			[Address(RVA = "0xBB4838", Offset = "0xBB4838", VA = "0xBB4838")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832E18", Offset = "0x832E18")]
			private set
			{
			}
		}

		[Token(Token = "0x170005DC")]
		public bool IsSecure
		{
			[Token(Token = "0x6002A0C")]
			[Address(RVA = "0xBB4840", Offset = "0xBB4840", VA = "0xBB4840")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832E28", Offset = "0x832E28")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002A0D")]
			[Address(RVA = "0xBB4848", Offset = "0xBB4848", VA = "0xBB4848")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832E38", Offset = "0x832E38")]
			private set
			{
			}
		}

		[Token(Token = "0x170005DD")]
		public bool IsHttpOnly
		{
			[Token(Token = "0x6002A0E")]
			[Address(RVA = "0xBB4854", Offset = "0xBB4854", VA = "0xBB4854")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832E48", Offset = "0x832E48")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002A0F")]
			[Address(RVA = "0xBB485C", Offset = "0xBB485C", VA = "0xBB485C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832E58", Offset = "0x832E58")]
			private set
			{
			}
		}

		[Token(Token = "0x6002A10")]
		[Address(RVA = "0xBB4868", Offset = "0xBB4868", VA = "0xBB4868")]
		public Cookie(string name, string value)
		{
		}

		[Token(Token = "0x6002A11")]
		[Address(RVA = "0xBB4938", Offset = "0xBB4938", VA = "0xBB4938")]
		public Cookie(string name, string value, string path)
		{
		}

		[Token(Token = "0x6002A12")]
		[Address(RVA = "0xBB48F0", Offset = "0xBB48F0", VA = "0xBB48F0")]
		public Cookie(string name, string value, string path, string domain)
		{
		}

		[Token(Token = "0x6002A13")]
		[Address(RVA = "0xBB4A40", Offset = "0xBB4A40", VA = "0xBB4A40")]
		public Cookie(Uri uri, string name, string value, DateTime expires, bool isSession = true)
		{
		}

		[Token(Token = "0x6002A14")]
		[Address(RVA = "0xBB4B1C", Offset = "0xBB4B1C", VA = "0xBB4B1C")]
		public Cookie(Uri uri, string name, string value, long maxAge = -1L, bool isSession = true)
		{
		}

		[Token(Token = "0x6002A15")]
		[Address(RVA = "0xBB49B8", Offset = "0xBB49B8", VA = "0xBB49B8")]
		internal Cookie()
		{
		}

		[Token(Token = "0x6002A16")]
		[Address(RVA = "0xBB4BF8", Offset = "0xBB4BF8", VA = "0xBB4BF8")]
		public bool WillExpireInTheFuture()
		{
			return default(bool);
		}

		[Token(Token = "0x6002A17")]
		[Address(RVA = "0xBB4D28", Offset = "0xBB4D28", VA = "0xBB4D28")]
		public uint GuessSize()
		{
			return default(uint);
		}

		[Token(Token = "0x6002A18")]
		[Address(RVA = "0xBB4D84", Offset = "0xBB4D84", VA = "0xBB4D84")]
		public static Cookie Parse(string header, Uri defaultDomain)
		{
			return null;
		}

		[Token(Token = "0x6002A19")]
		[Address(RVA = "0xBB5548", Offset = "0xBB5548", VA = "0xBB5548")]
		internal void SaveTo(BinaryWriter stream)
		{
		}

		[Token(Token = "0x6002A1A")]
		[Address(RVA = "0xBB5750", Offset = "0xBB5750", VA = "0xBB5750")]
		internal void LoadFrom(BinaryReader stream)
		{
		}

		[Token(Token = "0x6002A1B")]
		[Address(RVA = "0xBB5904", Offset = "0xBB5904", VA = "0xBB5904", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6002A1C")]
		[Address(RVA = "0xBB5958", Offset = "0xBB5958", VA = "0xBB5958", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6002A1D")]
		[Address(RVA = "0xBB59D8", Offset = "0xBB59D8", VA = "0xBB59D8", Slot = "5")]
		public bool Equals(Cookie cookie)
		{
			return default(bool);
		}

		[Token(Token = "0x6002A1E")]
		[Address(RVA = "0xBB5A74", Offset = "0xBB5A74", VA = "0xBB5A74", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6002A1F")]
		[Address(RVA = "0xBB5AA0", Offset = "0xBB5AA0", VA = "0xBB5AA0")]
		private static string ReadValue(string str, ref int pos)
		{
			return null;
		}

		[Token(Token = "0x6002A20")]
		[Address(RVA = "0xBB5354", Offset = "0xBB5354", VA = "0xBB5354")]
		private static List<HeaderValue> ParseCookieHeader(string str)
		{
			return null;
		}

		[Token(Token = "0x6002A21")]
		[Address(RVA = "0xBB5B28", Offset = "0xBB5B28", VA = "0xBB5B28", Slot = "4")]
		public int CompareTo(Cookie other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20004A4")]
	public static class CookieJar
	{
		[Token(Token = "0x40017C1")]
		private const int Version = 1;

		[Token(Token = "0x40017C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<Cookie> Cookies;

		[Token(Token = "0x40017C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824534", Offset = "0x824534")]
		private static string <CookieFolder>k__BackingField;

		[Token(Token = "0x40017C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824544", Offset = "0x824544")]
		private static string <LibraryPath>k__BackingField;

		[Token(Token = "0x40017C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static object Locker;

		[Token(Token = "0x40017C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static bool _isSavingSupported;

		[Token(Token = "0x40017C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private static bool IsSupportCheckDone;

		[Token(Token = "0x40017C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		private static bool Loaded;

		[Token(Token = "0x170005DE")]
		public static bool IsSavingSupported
		{
			[Token(Token = "0x6002A22")]
			[Address(RVA = "0xBB5BE8", Offset = "0xBB5BE8", VA = "0xBB5BE8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005DF")]
		private static string CookieFolder
		{
			[Token(Token = "0x6002A23")]
			[Address(RVA = "0xBB5EB4", Offset = "0xBB5EB4", VA = "0xBB5EB4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832E68", Offset = "0x832E68")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002A24")]
			[Address(RVA = "0xBB5F1C", Offset = "0xBB5F1C", VA = "0xBB5F1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832E78", Offset = "0x832E78")]
			set
			{
			}
		}

		[Token(Token = "0x170005E0")]
		private static string LibraryPath
		{
			[Token(Token = "0x6002A25")]
			[Address(RVA = "0xBB5F88", Offset = "0xBB5F88", VA = "0xBB5F88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832E88", Offset = "0x832E88")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002A26")]
			[Address(RVA = "0xBB5FF0", Offset = "0xBB5FF0", VA = "0xBB5FF0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832E98", Offset = "0x832E98")]
			set
			{
			}
		}

		[Token(Token = "0x6002A27")]
		[Address(RVA = "0xBB605C", Offset = "0xBB605C", VA = "0xBB605C")]
		internal static void SetupFolder()
		{
		}

		[Token(Token = "0x6002A28")]
		[Address(RVA = "0xBB63A4", Offset = "0xBB63A4", VA = "0xBB63A4")]
		internal static void Set(HTTPResponse response)
		{
		}

		[Token(Token = "0x6002A29")]
		[Address(RVA = "0xBB6924", Offset = "0xBB6924", VA = "0xBB6924")]
		internal static void Maintain()
		{
		}

		[Token(Token = "0x6002A2A")]
		[Address(RVA = "0xBB6F68", Offset = "0xBB6F68", VA = "0xBB6F68")]
		internal static void Persist()
		{
		}

		[Token(Token = "0x6002A2B")]
		[Address(RVA = "0xBB77D0", Offset = "0xBB77D0", VA = "0xBB77D0")]
		internal static void Load()
		{
		}

		[Token(Token = "0x6002A2C")]
		[Address(RVA = "0xBB7FDC", Offset = "0xBB7FDC", VA = "0xBB7FDC")]
		public static List<Cookie> Get(Uri uri)
		{
			return null;
		}

		[Token(Token = "0x6002A2D")]
		[Address(RVA = "0xBB826C", Offset = "0xBB826C", VA = "0xBB826C")]
		public static void Set(Uri uri, Cookie cookie)
		{
		}

		[Token(Token = "0x6002A2E")]
		[Address(RVA = "0xBB82D0", Offset = "0xBB82D0", VA = "0xBB82D0")]
		public static void Set(Cookie cookie)
		{
		}

		[Token(Token = "0x6002A2F")]
		[Address(RVA = "0xBB846C", Offset = "0xBB846C", VA = "0xBB846C")]
		public static List<Cookie> GetAll()
		{
			return null;
		}

		[Token(Token = "0x6002A30")]
		[Address(RVA = "0xBB8568", Offset = "0xBB8568", VA = "0xBB8568")]
		public static void Clear()
		{
		}

		[Token(Token = "0x6002A31")]
		[Address(RVA = "0xBB8678", Offset = "0xBB8678", VA = "0xBB8678")]
		public static void Clear(TimeSpan olderThan)
		{
		}

		[Token(Token = "0x6002A32")]
		[Address(RVA = "0xBB88E4", Offset = "0xBB88E4", VA = "0xBB88E4")]
		public static void Clear(string domain)
		{
		}

		[Token(Token = "0x6002A33")]
		[Address(RVA = "0xBB8B14", Offset = "0xBB8B14", VA = "0xBB8B14")]
		public static void Remove(Uri uri, string name)
		{
		}

		[Token(Token = "0x6002A34")]
		[Address(RVA = "0xBB6E60", Offset = "0xBB6E60", VA = "0xBB6E60")]
		private static Cookie Find(Cookie cookie, out int idx)
		{
			return null;
		}
	}
}
namespace BestHTTP.Caching
{
	[Token(Token = "0x20004A5")]
	internal class HTTPCacheFileInfo : IComparable<HTTPCacheFileInfo>
	{
		[Token(Token = "0x40017C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824554", Offset = "0x824554")]
		private Uri <Uri>k__BackingField;

		[Token(Token = "0x40017CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824564", Offset = "0x824564")]
		private DateTime <LastAccess>k__BackingField;

		[Token(Token = "0x40017CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824574", Offset = "0x824574")]
		private int <BodyLength>k__BackingField;

		[Token(Token = "0x40017CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824584", Offset = "0x824584")]
		private string <ETag>k__BackingField;

		[Token(Token = "0x40017CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824594", Offset = "0x824594")]
		private string <LastModified>k__BackingField;

		[Token(Token = "0x40017CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8245A4", Offset = "0x8245A4")]
		private DateTime <Expires>k__BackingField;

		[Token(Token = "0x40017CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8245B4", Offset = "0x8245B4")]
		private long <Age>k__BackingField;

		[Token(Token = "0x40017D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8245C4", Offset = "0x8245C4")]
		private long <MaxAge>k__BackingField;

		[Token(Token = "0x40017D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8245D4", Offset = "0x8245D4")]
		private DateTime <Date>k__BackingField;

		[Token(Token = "0x40017D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8245E4", Offset = "0x8245E4")]
		private bool <MustRevalidate>k__BackingField;

		[Token(Token = "0x40017D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8245F4", Offset = "0x8245F4")]
		private DateTime <Received>k__BackingField;

		[Token(Token = "0x40017D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824604", Offset = "0x824604")]
		private string <ConstructedPath>k__BackingField;

		[Token(Token = "0x40017D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824614", Offset = "0x824614")]
		private ulong <MappedNameIDX>k__BackingField;

		[Token(Token = "0x170005E1")]
		internal Uri Uri
		{
			[Token(Token = "0x6002A36")]
			[Address(RVA = "0xBAD730", Offset = "0xBAD730", VA = "0xBAD730")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832EA8", Offset = "0x832EA8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002A37")]
			[Address(RVA = "0xBAD738", Offset = "0xBAD738", VA = "0xBAD738")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832EB8", Offset = "0x832EB8")]
			set
			{
			}
		}

		[Token(Token = "0x170005E2")]
		internal DateTime LastAccess
		{
			[Token(Token = "0x6002A38")]
			[Address(RVA = "0xBAD740", Offset = "0xBAD740", VA = "0xBAD740")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832EC8", Offset = "0x832EC8")]
			get
			{
				return default(DateTime);
			}
			[Token(Token = "0x6002A39")]
			[Address(RVA = "0xBAD748", Offset = "0xBAD748", VA = "0xBAD748")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832ED8", Offset = "0x832ED8")]
			set
			{
			}
		}

		[Token(Token = "0x170005E3")]
		internal int BodyLength
		{
			[Token(Token = "0x6002A3A")]
			[Address(RVA = "0xBAD750", Offset = "0xBAD750", VA = "0xBAD750")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832EE8", Offset = "0x832EE8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002A3B")]
			[Address(RVA = "0xBAD758", Offset = "0xBAD758", VA = "0xBAD758")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832EF8", Offset = "0x832EF8")]
			set
			{
			}
		}

		[Token(Token = "0x170005E4")]
		private string ETag
		{
			[Token(Token = "0x6002A3C")]
			[Address(RVA = "0xBAD760", Offset = "0xBAD760", VA = "0xBAD760")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832F08", Offset = "0x832F08")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002A3D")]
			[Address(RVA = "0xBAD768", Offset = "0xBAD768", VA = "0xBAD768")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832F18", Offset = "0x832F18")]
			set
			{
			}
		}

		[Token(Token = "0x170005E5")]
		private string LastModified
		{
			[Token(Token = "0x6002A3E")]
			[Address(RVA = "0xBAD770", Offset = "0xBAD770", VA = "0xBAD770")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832F28", Offset = "0x832F28")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002A3F")]
			[Address(RVA = "0xBAD778", Offset = "0xBAD778", VA = "0xBAD778")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832F38", Offset = "0x832F38")]
			set
			{
			}
		}

		[Token(Token = "0x170005E6")]
		private DateTime Expires
		{
			[Token(Token = "0x6002A40")]
			[Address(RVA = "0xBAD780", Offset = "0xBAD780", VA = "0xBAD780")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832F48", Offset = "0x832F48")]
			get
			{
				return default(DateTime);
			}
			[Token(Token = "0x6002A41")]
			[Address(RVA = "0xBAD788", Offset = "0xBAD788", VA = "0xBAD788")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832F58", Offset = "0x832F58")]
			set
			{
			}
		}

		[Token(Token = "0x170005E7")]
		private long Age
		{
			[Token(Token = "0x6002A42")]
			[Address(RVA = "0xBAD790", Offset = "0xBAD790", VA = "0xBAD790")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832F68", Offset = "0x832F68")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x6002A43")]
			[Address(RVA = "0xBAD798", Offset = "0xBAD798", VA = "0xBAD798")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832F78", Offset = "0x832F78")]
			set
			{
			}
		}

		[Token(Token = "0x170005E8")]
		private long MaxAge
		{
			[Token(Token = "0x6002A44")]
			[Address(RVA = "0xBAD7A0", Offset = "0xBAD7A0", VA = "0xBAD7A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832F88", Offset = "0x832F88")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x6002A45")]
			[Address(RVA = "0xBAD7A8", Offset = "0xBAD7A8", VA = "0xBAD7A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832F98", Offset = "0x832F98")]
			set
			{
			}
		}

		[Token(Token = "0x170005E9")]
		private DateTime Date
		{
			[Token(Token = "0x6002A46")]
			[Address(RVA = "0xBAD7B0", Offset = "0xBAD7B0", VA = "0xBAD7B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832FA8", Offset = "0x832FA8")]
			get
			{
				return default(DateTime);
			}
			[Token(Token = "0x6002A47")]
			[Address(RVA = "0xBAD7B8", Offset = "0xBAD7B8", VA = "0xBAD7B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832FB8", Offset = "0x832FB8")]
			set
			{
			}
		}

		[Token(Token = "0x170005EA")]
		private bool MustRevalidate
		{
			[Token(Token = "0x6002A48")]
			[Address(RVA = "0xBAD7C0", Offset = "0xBAD7C0", VA = "0xBAD7C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832FC8", Offset = "0x832FC8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002A49")]
			[Address(RVA = "0xBAD7C8", Offset = "0xBAD7C8", VA = "0xBAD7C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832FD8", Offset = "0x832FD8")]
			set
			{
			}
		}

		[Token(Token = "0x170005EB")]
		private DateTime Received
		{
			[Token(Token = "0x6002A4A")]
			[Address(RVA = "0xBAD7D4", Offset = "0xBAD7D4", VA = "0xBAD7D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832FE8", Offset = "0x832FE8")]
			get
			{
				return default(DateTime);
			}
			[Token(Token = "0x6002A4B")]
			[Address(RVA = "0xBAD7DC", Offset = "0xBAD7DC", VA = "0xBAD7DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x832FF8", Offset = "0x832FF8")]
			set
			{
			}
		}

		[Token(Token = "0x170005EC")]
		private string ConstructedPath
		{
			[Token(Token = "0x6002A4C")]
			[Address(RVA = "0xBAD7E4", Offset = "0xBAD7E4", VA = "0xBAD7E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833008", Offset = "0x833008")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002A4D")]
			[Address(RVA = "0xBAD7EC", Offset = "0xBAD7EC", VA = "0xBAD7EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833018", Offset = "0x833018")]
			set
			{
			}
		}

		[Token(Token = "0x170005ED")]
		internal ulong MappedNameIDX
		{
			[Token(Token = "0x6002A4E")]
			[Address(RVA = "0xBAD7F4", Offset = "0xBAD7F4", VA = "0xBAD7F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833028", Offset = "0x833028")]
			get
			{
				return default(ulong);
			}
			[Token(Token = "0x6002A4F")]
			[Address(RVA = "0xBAD7FC", Offset = "0xBAD7FC", VA = "0xBAD7FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833038", Offset = "0x833038")]
			set
			{
			}
		}

		[Token(Token = "0x6002A50")]
		[Address(RVA = "0xBAD804", Offset = "0xBAD804", VA = "0xBAD804")]
		internal HTTPCacheFileInfo(Uri uri)
		{
		}

		[Token(Token = "0x6002A51")]
		[Address(RVA = "0xBAD888", Offset = "0xBAD888", VA = "0xBAD888")]
		internal HTTPCacheFileInfo(Uri uri, DateTime lastAcces, int bodyLength)
		{
		}

		[Token(Token = "0x6002A52")]
		[Address(RVA = "0xBADA98", Offset = "0xBADA98", VA = "0xBADA98")]
		internal HTTPCacheFileInfo(Uri uri, BinaryReader reader, int version)
		{
		}

		[Token(Token = "0x6002A53")]
		[Address(RVA = "0xBADC94", Offset = "0xBADC94", VA = "0xBADC94")]
		internal void SaveTo(BinaryWriter writer)
		{
		}

		[Token(Token = "0x6002A54")]
		[Address(RVA = "0xBADE18", Offset = "0xBADE18", VA = "0xBADE18")]
		private string GetPath()
		{
			return null;
		}

		[Token(Token = "0x6002A55")]
		[Address(RVA = "0xBADF30", Offset = "0xBADF30", VA = "0xBADF30")]
		internal bool IsExists()
		{
			return default(bool);
		}

		[Token(Token = "0x6002A56")]
		[Address(RVA = "0xBAE284", Offset = "0xBAE284", VA = "0xBAE284")]
		internal void Delete()
		{
		}

		[Token(Token = "0x6002A57")]
		[Address(RVA = "0xBAE3CC", Offset = "0xBAE3CC", VA = "0xBAE3CC")]
		private void Reset()
		{
		}

		[Token(Token = "0x6002A58")]
		[Address(RVA = "0xBAE4A0", Offset = "0xBAE4A0", VA = "0xBAE4A0")]
		private void SetUpCachingValues(HTTPResponse response)
		{
		}

		[Token(Token = "0x6002A59")]
		[Address(RVA = "0xBAE708", Offset = "0xBAE708", VA = "0xBAE708")]
		internal bool WillExpireInTheFuture()
		{
			return default(bool);
		}

		[Token(Token = "0x6002A5A")]
		[Address(RVA = "0xBAE894", Offset = "0xBAE894", VA = "0xBAE894")]
		internal void SetUpRevalidationHeaders(HTTPRequest request)
		{
		}

		[Token(Token = "0x6002A5B")]
		[Address(RVA = "0xBAE95C", Offset = "0xBAE95C", VA = "0xBAE95C")]
		internal Stream GetBodyStream(out int length)
		{
			return null;
		}

		[Token(Token = "0x6002A5C")]
		[Address(RVA = "0xBAEA58", Offset = "0xBAEA58", VA = "0xBAEA58")]
		internal HTTPResponse ReadResponseTo(HTTPRequest request)
		{
			return null;
		}

		[Token(Token = "0x6002A5D")]
		[Address(RVA = "0xBAEC2C", Offset = "0xBAEC2C", VA = "0xBAEC2C")]
		internal void Store(HTTPResponse response)
		{
		}

		[Token(Token = "0x6002A5E")]
		[Address(RVA = "0xBAF1B0", Offset = "0xBAF1B0", VA = "0xBAF1B0")]
		internal Stream GetSaveStream(HTTPResponse response)
		{
			return null;
		}

		[Token(Token = "0x6002A5F")]
		[Address(RVA = "0xBAF7EC", Offset = "0xBAF7EC", VA = "0xBAF7EC", Slot = "4")]
		public int CompareTo(HTTPCacheFileInfo other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20004A6")]
	internal sealed class HTTPCacheFileLock
	{
		[Token(Token = "0x40017D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<Uri, object> FileLocks;

		[Token(Token = "0x40017D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static object SyncRoot;

		[Token(Token = "0x6002A60")]
		[Address(RVA = "0xBAF824", Offset = "0xBAF824", VA = "0xBAF824")]
		internal static object Acquire(Uri uri)
		{
			return null;
		}

		[Token(Token = "0x6002A61")]
		[Address(RVA = "0xBAF9D0", Offset = "0xBAF9D0", VA = "0xBAF9D0")]
		internal static void Remove(Uri uri)
		{
		}

		[Token(Token = "0x6002A62")]
		[Address(RVA = "0xBAFB34", Offset = "0xBAFB34", VA = "0xBAFB34")]
		internal static void Clear()
		{
		}

		[Token(Token = "0x6002A63")]
		[Address(RVA = "0xBAFC40", Offset = "0xBAFC40", VA = "0xBAFC40")]
		public HTTPCacheFileLock()
		{
		}
	}
	[Token(Token = "0x20004A7")]
	public sealed class HTTPCacheMaintananceParams
	{
		[Token(Token = "0x40017D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824624", Offset = "0x824624")]
		private TimeSpan <DeleteOlder>k__BackingField;

		[Token(Token = "0x40017D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824634", Offset = "0x824634")]
		private ulong <MaxCacheSize>k__BackingField;

		[Token(Token = "0x170005EE")]
		public TimeSpan DeleteOlder
		{
			[Token(Token = "0x6002A65")]
			[Address(RVA = "0xBAFCE4", Offset = "0xBAFCE4", VA = "0xBAFCE4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833048", Offset = "0x833048")]
			get
			{
				return default(TimeSpan);
			}
			[Token(Token = "0x6002A66")]
			[Address(RVA = "0xBAFCEC", Offset = "0xBAFCEC", VA = "0xBAFCEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833058", Offset = "0x833058")]
			private set
			{
			}
		}

		[Token(Token = "0x170005EF")]
		public ulong MaxCacheSize
		{
			[Token(Token = "0x6002A67")]
			[Address(RVA = "0xBAFCF4", Offset = "0xBAFCF4", VA = "0xBAFCF4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833068", Offset = "0x833068")]
			get
			{
				return default(ulong);
			}
			[Token(Token = "0x6002A68")]
			[Address(RVA = "0xBAFCFC", Offset = "0xBAFCFC", VA = "0xBAFCFC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833078", Offset = "0x833078")]
			private set
			{
			}
		}

		[Token(Token = "0x6002A69")]
		[Address(RVA = "0xBAFD04", Offset = "0xBAFD04", VA = "0xBAFD04")]
		public HTTPCacheMaintananceParams(TimeSpan deleteOlder, ulong maxCacheSize)
		{
		}
	}
	[Token(Token = "0x20004A8")]
	public static class HTTPCacheService
	{
		[Serializable]
		[Token(Token = "0x20006EE")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820ED0", Offset = "0x820ED0")]
		private sealed class <>c
		{
			[Token(Token = "0x40026AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40026AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Predicate<string> <>9__30_0;

			[Token(Token = "0x40026AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Predicate<string> <>9__30_1;

			[Token(Token = "0x600364E")]
			[Address(RVA = "0xBB3408", Offset = "0xBB3408", VA = "0xBB3408")]
			public <>c()
			{
			}

			[Token(Token = "0x600364F")]
			[Address(RVA = "0xBB3410", Offset = "0xBB3410", VA = "0xBB3410")]
			internal bool <IsCacheble>b__30_0(string headerValue)
			{
				return default(bool);
			}

			[Token(Token = "0x6003650")]
			[Address(RVA = "0xBB34A8", Offset = "0xBB34A8", VA = "0xBB34A8")]
			internal bool <IsCacheble>b__30_1(string headerValue)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20006EF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820EE0", Offset = "0x820EE0")]
		private sealed class <>c__DisplayClass35_0
		{
			[Token(Token = "0x40026AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public HTTPCacheMaintananceParams maintananceParam;

			[Token(Token = "0x6003651")]
			[Address(RVA = "0xBB2A84", Offset = "0xBB2A84", VA = "0xBB2A84")]
			public <>c__DisplayClass35_0()
			{
			}

			[Token(Token = "0x6003652")]
			[Address(RVA = "0xBB3540", Offset = "0xBB3540", VA = "0xBB3540")]
			internal void <BeginMaintainence>b__0(object param)
			{
			}
		}

		[Token(Token = "0x40017DA")]
		private const int LibraryVersion = 2;

		[Token(Token = "0x40017DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool isSupported;

		[Token(Token = "0x40017DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		private static bool IsSupportCheckDone;

		[Token(Token = "0x40017DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Dictionary<Uri, HTTPCacheFileInfo> library;

		[Token(Token = "0x40017DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Dictionary<ulong, HTTPCacheFileInfo> UsedIndexes;

		[Token(Token = "0x40017DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824644", Offset = "0x824644")]
		private static string <CacheFolder>k__BackingField;

		[Token(Token = "0x40017E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824654", Offset = "0x824654")]
		private static string <LibraryPath>k__BackingField;

		[Token(Token = "0x40017E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static bool InClearThread;

		[Token(Token = "0x40017E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private static bool InMaintainenceThread;

		[Token(Token = "0x40017E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static ulong NextNameIDX;

		[Token(Token = "0x170005F0")]
		public static bool IsSupported
		{
			[Token(Token = "0x6002A6A")]
			[Address(RVA = "0xBADFB4", Offset = "0xBADFB4", VA = "0xBADFB4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005F1")]
		private static Dictionary<Uri, HTTPCacheFileInfo> Library
		{
			[Token(Token = "0x6002A6B")]
			[Address(RVA = "0xBAFD3C", Offset = "0xBAFD3C", VA = "0xBAFD3C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170005F2")]
		internal static string CacheFolder
		{
			[Token(Token = "0x6002A6C")]
			[Address(RVA = "0xBB0504", Offset = "0xBB0504", VA = "0xBB0504")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833088", Offset = "0x833088")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002A6D")]
			[Address(RVA = "0xBB056C", Offset = "0xBB056C", VA = "0xBB056C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833098", Offset = "0x833098")]
			private set
			{
			}
		}

		[Token(Token = "0x170005F3")]
		private static string LibraryPath
		{
			[Token(Token = "0x6002A6E")]
			[Address(RVA = "0xBB05D8", Offset = "0xBB05D8", VA = "0xBB05D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8330A8", Offset = "0x8330A8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002A6F")]
			[Address(RVA = "0xBB0640", Offset = "0xBB0640", VA = "0xBB0640")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8330B8", Offset = "0x8330B8")]
			set
			{
			}
		}

		[Token(Token = "0x6002A70")]
		[Address(RVA = "0xBB06AC", Offset = "0xBB06AC", VA = "0xBB06AC")]
		static HTTPCacheService()
		{
		}

		[Token(Token = "0x6002A71")]
		[Address(RVA = "0xBB072C", Offset = "0xBB072C", VA = "0xBB072C")]
		internal static void CheckSetup()
		{
		}

		[Token(Token = "0x6002A72")]
		[Address(RVA = "0xBB0824", Offset = "0xBB0824", VA = "0xBB0824")]
		internal static void SetupCacheFolder()
		{
		}

		[Token(Token = "0x6002A73")]
		[Address(RVA = "0xBAD928", Offset = "0xBAD928", VA = "0xBAD928")]
		internal static ulong GetNameIdx()
		{
			return default(ulong);
		}

		[Token(Token = "0x6002A74")]
		[Address(RVA = "0xBB0C4C", Offset = "0xBB0C4C", VA = "0xBB0C4C")]
		internal static bool HasEntity(Uri uri)
		{
			return default(bool);
		}

		[Token(Token = "0x6002A75")]
		[Address(RVA = "0xBB0D88", Offset = "0xBB0D88", VA = "0xBB0D88")]
		internal static bool DeleteEntity(Uri uri, bool removeFromLibrary = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6002A76")]
		[Address(RVA = "0xBB101C", Offset = "0xBB101C", VA = "0xBB101C")]
		internal static bool IsCachedEntityExpiresInTheFuture(HTTPRequest request)
		{
			return default(bool);
		}

		[Token(Token = "0x6002A77")]
		[Address(RVA = "0xBB11F0", Offset = "0xBB11F0", VA = "0xBB11F0")]
		internal static void SetHeaders(HTTPRequest request)
		{
		}

		[Token(Token = "0x6002A78")]
		[Address(RVA = "0xBB1368", Offset = "0xBB1368", VA = "0xBB1368")]
		internal static Stream GetBody(Uri uri, out int length)
		{
			return null;
		}

		[Token(Token = "0x6002A79")]
		[Address(RVA = "0xBB1524", Offset = "0xBB1524", VA = "0xBB1524")]
		internal static HTTPResponse GetFullResponse(HTTPRequest request)
		{
			return null;
		}

		[Token(Token = "0x6002A7A")]
		[Address(RVA = "0xBB16F8", Offset = "0xBB16F8", VA = "0xBB16F8")]
		internal static bool IsCacheble(Uri uri, HTTPMethods method, HTTPResponse response)
		{
			return default(bool);
		}

		[Token(Token = "0x6002A7B")]
		[Address(RVA = "0xBB1958", Offset = "0xBB1958", VA = "0xBB1958")]
		internal static HTTPCacheFileInfo Store(Uri uri, HTTPMethods method, HTTPResponse response)
		{
			return null;
		}

		[Token(Token = "0x6002A7C")]
		[Address(RVA = "0xBB1C48", Offset = "0xBB1C48", VA = "0xBB1C48")]
		internal static Stream PrepareStreamed(Uri uri, HTTPResponse response)
		{
			return null;
		}

		[Token(Token = "0x6002A7D")]
		[Address(RVA = "0xBB1F28", Offset = "0xBB1F28", VA = "0xBB1F28")]
		public static void BeginClear()
		{
		}

		[Token(Token = "0x6002A7E")]
		[Address(RVA = "0xBB2048", Offset = "0xBB2048", VA = "0xBB2048")]
		private static void ClearImpl(object param)
		{
		}

		[Token(Token = "0x6002A7F")]
		[Address(RVA = "0xBB28FC", Offset = "0xBB28FC", VA = "0xBB28FC")]
		public static void BeginMaintainence(HTTPCacheMaintananceParams maintananceParam)
		{
		}

		[Token(Token = "0x6002A80")]
		[Address(RVA = "0xBB2A8C", Offset = "0xBB2A8C", VA = "0xBB2A8C")]
		public static int GetCacheEntityCount()
		{
			return default(int);
		}

		[Token(Token = "0x6002A81")]
		[Address(RVA = "0xBB2BC0", Offset = "0xBB2BC0", VA = "0xBB2BC0")]
		public static ulong GetCacheSize()
		{
			return default(ulong);
		}

		[Token(Token = "0x6002A82")]
		[Address(RVA = "0xBAFDA8", Offset = "0xBAFDA8", VA = "0xBAFDA8")]
		private static void LoadLibrary()
		{
		}

		[Token(Token = "0x6002A83")]
		[Address(RVA = "0xBB22E0", Offset = "0xBB22E0", VA = "0xBB22E0")]
		internal static void SaveLibrary()
		{
		}

		[Token(Token = "0x6002A84")]
		[Address(RVA = "0xBB3148", Offset = "0xBB3148", VA = "0xBB3148")]
		internal static void SetBodyLength(Uri uri, int bodyLength)
		{
		}

		[Token(Token = "0x6002A85")]
		[Address(RVA = "0xBB2DA4", Offset = "0xBB2DA4", VA = "0xBB2DA4")]
		private static void DeleteUnusedFiles()
		{
		}
	}
}
namespace BestHTTP.Authentication
{
	[Token(Token = "0x20004A9")]
	public enum AuthenticationTypes
	{
		[Token(Token = "0x40017E5")]
		Unknown,
		[Token(Token = "0x40017E6")]
		Basic,
		[Token(Token = "0x40017E7")]
		Digest
	}
	[Token(Token = "0x20004AA")]
	public sealed class Credentials
	{
		[Token(Token = "0x40017E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824664", Offset = "0x824664")]
		private AuthenticationTypes <Type>k__BackingField;

		[Token(Token = "0x40017E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824674", Offset = "0x824674")]
		private string <UserName>k__BackingField;

		[Token(Token = "0x40017EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824684", Offset = "0x824684")]
		private string <Password>k__BackingField;

		[Token(Token = "0x170005F4")]
		public AuthenticationTypes Type
		{
			[Token(Token = "0x6002A86")]
			[Address(RVA = "0xBAB6F4", Offset = "0xBAB6F4", VA = "0xBAB6F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8330C8", Offset = "0x8330C8")]
			get
			{
				return default(AuthenticationTypes);
			}
			[Token(Token = "0x6002A87")]
			[Address(RVA = "0xBAB6FC", Offset = "0xBAB6FC", VA = "0xBAB6FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8330D8", Offset = "0x8330D8")]
			private set
			{
			}
		}

		[Token(Token = "0x170005F5")]
		public string UserName
		{
			[Token(Token = "0x6002A88")]
			[Address(RVA = "0xBAB704", Offset = "0xBAB704", VA = "0xBAB704")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8330E8", Offset = "0x8330E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002A89")]
			[Address(RVA = "0xBAB70C", Offset = "0xBAB70C", VA = "0xBAB70C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8330F8", Offset = "0x8330F8")]
			private set
			{
			}
		}

		[Token(Token = "0x170005F6")]
		public string Password
		{
			[Token(Token = "0x6002A8A")]
			[Address(RVA = "0xBAB714", Offset = "0xBAB714", VA = "0xBAB714")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833108", Offset = "0x833108")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002A8B")]
			[Address(RVA = "0xBAB71C", Offset = "0xBAB71C", VA = "0xBAB71C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833118", Offset = "0x833118")]
			private set
			{
			}
		}

		[Token(Token = "0x6002A8C")]
		[Address(RVA = "0xBAB724", Offset = "0xBAB724", VA = "0xBAB724")]
		public Credentials(string userName, string password)
		{
		}

		[Token(Token = "0x6002A8D")]
		[Address(RVA = "0xBAB760", Offset = "0xBAB760", VA = "0xBAB760")]
		public Credentials(AuthenticationTypes type, string userName, string password)
		{
		}
	}
	[Token(Token = "0x20004AB")]
	internal sealed class Digest
	{
		[Token(Token = "0x40017EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824694", Offset = "0x824694")]
		private Uri <Uri>k__BackingField;

		[Token(Token = "0x40017EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8246A4", Offset = "0x8246A4")]
		private AuthenticationTypes <Type>k__BackingField;

		[Token(Token = "0x40017ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8246B4", Offset = "0x8246B4")]
		private string <Realm>k__BackingField;

		[Token(Token = "0x40017EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8246C4", Offset = "0x8246C4")]
		private bool <Stale>k__BackingField;

		[Token(Token = "0x40017EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8246D4", Offset = "0x8246D4")]
		private string <Nonce>k__BackingField;

		[Token(Token = "0x40017F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8246E4", Offset = "0x8246E4")]
		private string <Opaque>k__BackingField;

		[Token(Token = "0x40017F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8246F4", Offset = "0x8246F4")]
		private string <Algorithm>k__BackingField;

		[Token(Token = "0x40017F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824704", Offset = "0x824704")]
		private List<string> <ProtectedUris>k__BackingField;

		[Token(Token = "0x40017F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824714", Offset = "0x824714")]
		private string <QualityOfProtections>k__BackingField;

		[Token(Token = "0x40017F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824724", Offset = "0x824724")]
		private int <NonceCount>k__BackingField;

		[Token(Token = "0x40017F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824734", Offset = "0x824734")]
		private string <HA1Sess>k__BackingField;

		[Token(Token = "0x170005F7")]
		public Uri Uri
		{
			[Token(Token = "0x6002A8E")]
			[Address(RVA = "0xBAB7A0", Offset = "0xBAB7A0", VA = "0xBAB7A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833128", Offset = "0x833128")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002A8F")]
			[Address(RVA = "0xBAB7A8", Offset = "0xBAB7A8", VA = "0xBAB7A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833138", Offset = "0x833138")]
			private set
			{
			}
		}

		[Token(Token = "0x170005F8")]
		public AuthenticationTypes Type
		{
			[Token(Token = "0x6002A90")]
			[Address(RVA = "0xBAB7B0", Offset = "0xBAB7B0", VA = "0xBAB7B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833148", Offset = "0x833148")]
			get
			{
				return default(AuthenticationTypes);
			}
			[Token(Token = "0x6002A91")]
			[Address(RVA = "0xBAB7B8", Offset = "0xBAB7B8", VA = "0xBAB7B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833158", Offset = "0x833158")]
			private set
			{
			}
		}

		[Token(Token = "0x170005F9")]
		public string Realm
		{
			[Token(Token = "0x6002A92")]
			[Address(RVA = "0xBAB7C0", Offset = "0xBAB7C0", VA = "0xBAB7C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833168", Offset = "0x833168")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002A93")]
			[Address(RVA = "0xBAB7C8", Offset = "0xBAB7C8", VA = "0xBAB7C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833178", Offset = "0x833178")]
			private set
			{
			}
		}

		[Token(Token = "0x170005FA")]
		public bool Stale
		{
			[Token(Token = "0x6002A94")]
			[Address(RVA = "0xBAB7D0", Offset = "0xBAB7D0", VA = "0xBAB7D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833188", Offset = "0x833188")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002A95")]
			[Address(RVA = "0xBAB7D8", Offset = "0xBAB7D8", VA = "0xBAB7D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833198", Offset = "0x833198")]
			private set
			{
			}
		}

		[Token(Token = "0x170005FB")]
		private string Nonce
		{
			[Token(Token = "0x6002A96")]
			[Address(RVA = "0xBAB7E4", Offset = "0xBAB7E4", VA = "0xBAB7E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8331A8", Offset = "0x8331A8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002A97")]
			[Address(RVA = "0xBAB7EC", Offset = "0xBAB7EC", VA = "0xBAB7EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8331B8", Offset = "0x8331B8")]
			set
			{
			}
		}

		[Token(Token = "0x170005FC")]
		private string Opaque
		{
			[Token(Token = "0x6002A98")]
			[Address(RVA = "0xBAB7F4", Offset = "0xBAB7F4", VA = "0xBAB7F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8331C8", Offset = "0x8331C8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002A99")]
			[Address(RVA = "0xBAB7FC", Offset = "0xBAB7FC", VA = "0xBAB7FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8331D8", Offset = "0x8331D8")]
			set
			{
			}
		}

		[Token(Token = "0x170005FD")]
		private string Algorithm
		{
			[Token(Token = "0x6002A9A")]
			[Address(RVA = "0xBAB804", Offset = "0xBAB804", VA = "0xBAB804")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8331E8", Offset = "0x8331E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002A9B")]
			[Address(RVA = "0xBAB80C", Offset = "0xBAB80C", VA = "0xBAB80C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8331F8", Offset = "0x8331F8")]
			set
			{
			}
		}

		[Token(Token = "0x170005FE")]
		public List<string> ProtectedUris
		{
			[Token(Token = "0x6002A9C")]
			[Address(RVA = "0xBAB814", Offset = "0xBAB814", VA = "0xBAB814")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833208", Offset = "0x833208")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002A9D")]
			[Address(RVA = "0xBAB81C", Offset = "0xBAB81C", VA = "0xBAB81C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833218", Offset = "0x833218")]
			private set
			{
			}
		}

		[Token(Token = "0x170005FF")]
		private string QualityOfProtections
		{
			[Token(Token = "0x6002A9E")]
			[Address(RVA = "0xBAB824", Offset = "0xBAB824", VA = "0xBAB824")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833228", Offset = "0x833228")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002A9F")]
			[Address(RVA = "0xBAB82C", Offset = "0xBAB82C", VA = "0xBAB82C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833238", Offset = "0x833238")]
			set
			{
			}
		}

		[Token(Token = "0x17000600")]
		private int NonceCount
		{
			[Token(Token = "0x6002AA0")]
			[Address(RVA = "0xBAB834", Offset = "0xBAB834", VA = "0xBAB834")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833248", Offset = "0x833248")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002AA1")]
			[Address(RVA = "0xBAB83C", Offset = "0xBAB83C", VA = "0xBAB83C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833258", Offset = "0x833258")]
			set
			{
			}
		}

		[Token(Token = "0x17000601")]
		private string HA1Sess
		{
			[Token(Token = "0x6002AA2")]
			[Address(RVA = "0xBAB844", Offset = "0xBAB844", VA = "0xBAB844")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833268", Offset = "0x833268")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002AA3")]
			[Address(RVA = "0xBAB84C", Offset = "0xBAB84C", VA = "0xBAB84C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833278", Offset = "0x833278")]
			set
			{
			}
		}

		[Token(Token = "0x6002AA4")]
		[Address(RVA = "0xBAB854", Offset = "0xBAB854", VA = "0xBAB854")]
		internal Digest(Uri uri)
		{
		}

		[Token(Token = "0x6002AA5")]
		[Address(RVA = "0xBAB8C0", Offset = "0xBAB8C0", VA = "0xBAB8C0")]
		public void ParseChallange(string header)
		{
		}

		[Token(Token = "0x6002AA6")]
		[Address(RVA = "0xBABDA0", Offset = "0xBABDA0", VA = "0xBABDA0")]
		public string GenerateResponseHeader(HTTPRequest request, Credentials credentials)
		{
			return null;
		}

		[Token(Token = "0x6002AA7")]
		[Address(RVA = "0xBACD88", Offset = "0xBACD88", VA = "0xBACD88")]
		public bool IsUriProtected(Uri uri)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20004AC")]
	internal static class DigestStore
	{
		[Token(Token = "0x20006F0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820EF0", Offset = "0x820EF0")]
		private sealed class <>c__DisplayClass6_0
		{
			[Token(Token = "0x40026AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int i;

			[Token(Token = "0x6003653")]
			[Address(RVA = "0xBAD52C", Offset = "0xBAD52C", VA = "0xBAD52C")]
			public <>c__DisplayClass6_0()
			{
			}

			[Token(Token = "0x6003654")]
			[Address(RVA = "0xBAD680", Offset = "0xBAD680", VA = "0xBAD680")]
			internal bool <FindBest>b__0(string header)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40017F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<string, Digest> Digests;

		[Token(Token = "0x40017F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static object Locker;

		[Token(Token = "0x40017F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static string[] SupportedAlgorithms;

		[Token(Token = "0x6002AA8")]
		[Address(RVA = "0xBACE94", Offset = "0xBACE94", VA = "0xBACE94")]
		public static Digest Get(Uri uri)
		{
			return null;
		}

		[Token(Token = "0x6002AA9")]
		[Address(RVA = "0xBAD014", Offset = "0xBAD014", VA = "0xBAD014")]
		public static Digest GetOrCreate(Uri uri)
		{
			return null;
		}

		[Token(Token = "0x6002AAA")]
		[Address(RVA = "0xBAD1FC", Offset = "0xBAD1FC", VA = "0xBAD1FC")]
		public static void Remove(Uri uri)
		{
		}

		[Token(Token = "0x6002AAB")]
		[Address(RVA = "0xBAD32C", Offset = "0xBAD32C", VA = "0xBAD32C")]
		public static string FindBest(List<string> authHeaders)
		{
			return null;
		}
	}
}
namespace OculusSampleFramework
{
	[Token(Token = "0x20004AD")]
	public class ColorGrabbable : OVRGrabbable
	{
		[Token(Token = "0x40017F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Color COLOR_GRAB;

		[Token(Token = "0x40017FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly Color COLOR_HIGHLIGHT;

		[Token(Token = "0x40017FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Color m_color;

		[Token(Token = "0x40017FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private MeshRenderer[] m_meshRenderers;

		[Token(Token = "0x40017FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool m_highlight;

		[Token(Token = "0x17000602")]
		public bool Highlight
		{
			[Token(Token = "0x6002AAD")]
			[Address(RVA = "0xB98DA0", Offset = "0xB98DA0", VA = "0xB98DA0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002AAE")]
			[Address(RVA = "0xB98DA8", Offset = "0xB98DA8", VA = "0xB98DA8")]
			set
			{
			}
		}

		[Token(Token = "0x6002AAF")]
		[Address(RVA = "0xB98DB4", Offset = "0xB98DB4", VA = "0xB98DB4")]
		protected void UpdateColor()
		{
		}

		[Token(Token = "0x6002AB0")]
		[Address(RVA = "0xB98F80", Offset = "0xB98F80", VA = "0xB98F80", Slot = "4")]
		public override void GrabBegin(OVRGrabber hand, Collider grabPoint)
		{
		}

		[Token(Token = "0x6002AB1")]
		[Address(RVA = "0xB98FA8", Offset = "0xB98FA8", VA = "0xB98FA8", Slot = "5")]
		public override void GrabEnd(Vector3 linearVelocity, Vector3 angularVelocity)
		{
		}

		[Token(Token = "0x6002AB2")]
		[Address(RVA = "0xB98FD0", Offset = "0xB98FD0", VA = "0xB98FD0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002AB3")]
		[Address(RVA = "0xB98E80", Offset = "0xB98E80", VA = "0xB98E80")]
		private void SetColor(Color color)
		{
		}

		[Token(Token = "0x6002AB4")]
		[Address(RVA = "0xB99224", Offset = "0xB99224", VA = "0xB99224")]
		public ColorGrabbable()
		{
		}
	}
	[Token(Token = "0x20004AE")]
	public class DistanceGrabbable : OVRGrabbable
	{
		[Token(Token = "0x40017FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string m_materialColorField;

		[Token(Token = "0x40017FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GrabbableCrosshair m_crosshair;

		[Token(Token = "0x4001800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GrabManager m_crosshairManager;

		[Token(Token = "0x4001801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Renderer m_renderer;

		[Token(Token = "0x4001802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private MaterialPropertyBlock m_mpb;

		[Token(Token = "0x4001803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool m_inRange;

		[Token(Token = "0x4001804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool m_targeted;

		[Token(Token = "0x17000603")]
		public bool InRange
		{
			[Token(Token = "0x6002AB6")]
			[Address(RVA = "0xB99684", Offset = "0xB99684", VA = "0xB99684")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002AB7")]
			[Address(RVA = "0xB9968C", Offset = "0xB9968C", VA = "0xB9968C")]
			set
			{
			}
		}

		[Token(Token = "0x17000604")]
		public bool Targeted
		{
			[Token(Token = "0x6002AB8")]
			[Address(RVA = "0xB99808", Offset = "0xB99808", VA = "0xB99808")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002AB9")]
			[Address(RVA = "0xB99810", Offset = "0xB99810", VA = "0xB99810")]
			set
			{
			}
		}

		[Token(Token = "0x6002ABA")]
		[Address(RVA = "0xB9981C", Offset = "0xB9981C", VA = "0xB9981C", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6002ABB")]
		[Address(RVA = "0xB99698", Offset = "0xB99698", VA = "0xB99698")]
		private void RefreshCrosshair()
		{
		}

		[Token(Token = "0x6002ABC")]
		[Address(RVA = "0xB999BC", Offset = "0xB999BC", VA = "0xB999BC")]
		public DistanceGrabbable()
		{
		}
	}
	[Token(Token = "0x20004AF")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x81F50C", Offset = "0x81F50C")]
	public class DistanceGrabber : OVRGrabber
	{
		[Token(Token = "0x4001805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[SerializeField]
		private float m_spherecastRadius;

		[Token(Token = "0x4001806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private float m_noSnapThreshhold;

		[Token(Token = "0x4001807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		private bool m_useSpherecast;

		[Token(Token = "0x4001808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
		[SerializeField]
		public bool m_preventGrabThroughWalls;

		[Token(Token = "0x4001809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private float m_objectPullVelocity;

		[Token(Token = "0x400180A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float m_objectPullMaxRotationRate;

		[Token(Token = "0x400180B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool m_movingObjectToHand;

		[Token(Token = "0x400180C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[SerializeField]
		private float m_maxGrabDistance;

		[Token(Token = "0x400180D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private int m_grabObjectsInLayer;

		[Token(Token = "0x400180E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[SerializeField]
		private int m_obstructionLayer;

		[Token(Token = "0x400180F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private DistanceGrabber m_otherHand;

		[Token(Token = "0x4001810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected DistanceGrabbable m_target;

		[Token(Token = "0x4001811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected Collider m_targetCollider;

		[Token(Token = "0x17000605")]
		public bool UseSpherecast
		{
			[Token(Token = "0x6002ABD")]
			[Address(RVA = "0xB999C4", Offset = "0xB999C4", VA = "0xB999C4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002ABE")]
			[Address(RVA = "0xB999CC", Offset = "0xB999CC", VA = "0xB999CC")]
			set
			{
			}
		}

		[Token(Token = "0x6002ABF")]
		[Address(RVA = "0xB999E8", Offset = "0xB999E8", VA = "0xB999E8", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6002AC0")]
		[Address(RVA = "0xB99BF0", Offset = "0xB99BF0", VA = "0xB99BF0", Slot = "6")]
		public override void Update()
		{
		}

		[Token(Token = "0x6002AC1")]
		[Address(RVA = "0xB9A50C", Offset = "0xB9A50C", VA = "0xB9A50C", Slot = "7")]
		protected override void GrabBegin()
		{
		}

		[Token(Token = "0x6002AC2")]
		[Address(RVA = "0xB9AAC8", Offset = "0xB9AAC8", VA = "0xB9AAC8", Slot = "8")]
		protected override void MoveGrabbedObject(Vector3 pos, Quaternion rot, bool forceTeleport = false)
		{
		}

		[Token(Token = "0x6002AC3")]
		[Address(RVA = "0xB9AEA8", Offset = "0xB9AEA8", VA = "0xB9AEA8")]
		private static DistanceGrabbable HitInfoToGrabbable(RaycastHit hitInfo)
		{
			return null;
		}

		[Token(Token = "0x6002AC4")]
		[Address(RVA = "0xB99E3C", Offset = "0xB99E3C", VA = "0xB99E3C")]
		protected bool FindTarget(out DistanceGrabbable dgOut, out Collider collOut)
		{
			return default(bool);
		}

		[Token(Token = "0x6002AC5")]
		[Address(RVA = "0xB9AF84", Offset = "0xB9AF84", VA = "0xB9AF84")]
		protected bool FindTargetWithSpherecast(out DistanceGrabbable dgOut, out Collider collOut)
		{
			return default(bool);
		}

		[Token(Token = "0x6002AC6")]
		[Address(RVA = "0xB9B3C0", Offset = "0xB9B3C0", VA = "0xB9B3C0", Slot = "9")]
		protected override void GrabVolumeEnable(bool enabled)
		{
		}

		[Token(Token = "0x6002AC7")]
		[Address(RVA = "0xB9B3D8", Offset = "0xB9B3D8", VA = "0xB9B3D8", Slot = "10")]
		protected override void OffhandGrabbed(OVRGrabbable grabbable)
		{
		}

		[Token(Token = "0x6002AC8")]
		[Address(RVA = "0xB9B3E0", Offset = "0xB9B3E0", VA = "0xB9B3E0")]
		public DistanceGrabber()
		{
		}
	}
	[Token(Token = "0x20004B0")]
	public class GrabManager : MonoBehaviour
	{
		[Token(Token = "0x4001812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Collider m_grabVolume;

		[Token(Token = "0x4001813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color OutlineColorInRange;

		[Token(Token = "0x4001814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color OutlineColorHighlighted;

		[Token(Token = "0x4001815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Color OutlineColorOutOfRange;

		[Token(Token = "0x6002AC9")]
		[Address(RVA = "0xB9CF30", Offset = "0xB9CF30", VA = "0xB9CF30")]
		private void OnTriggerEnter(Collider otherCollider)
		{
		}

		[Token(Token = "0x6002ACA")]
		[Address(RVA = "0xB9CFE0", Offset = "0xB9CFE0", VA = "0xB9CFE0")]
		private void OnTriggerExit(Collider otherCollider)
		{
		}

		[Token(Token = "0x6002ACB")]
		[Address(RVA = "0xB9D08C", Offset = "0xB9D08C", VA = "0xB9D08C")]
		public GrabManager()
		{
		}
	}
	[Token(Token = "0x20004B1")]
	public class GrabbableCrosshair : MonoBehaviour
	{
		[Token(Token = "0x20006F1")]
		public enum CrosshairState
		{
			[Token(Token = "0x40026B0")]
			Disabled,
			[Token(Token = "0x40026B1")]
			Enabled,
			[Token(Token = "0x40026B2")]
			Targeted
		}

		[Token(Token = "0x4001816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CrosshairState m_state;

		[Token(Token = "0x4001817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform m_centerEyeAnchor;

		[Token(Token = "0x4001818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject m_targetedCrosshair;

		[Token(Token = "0x4001819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject m_enabledCrosshair;

		[Token(Token = "0x6002ACC")]
		[Address(RVA = "0xB9D094", Offset = "0xB9D094", VA = "0xB9D094")]
		private void Start()
		{
		}

		[Token(Token = "0x6002ACD")]
		[Address(RVA = "0xB99920", Offset = "0xB99920", VA = "0xB99920")]
		public void SetState(CrosshairState cs)
		{
		}

		[Token(Token = "0x6002ACE")]
		[Address(RVA = "0xB9D0FC", Offset = "0xB9D0FC", VA = "0xB9D0FC")]
		private void Update()
		{
		}

		[Token(Token = "0x6002ACF")]
		[Address(RVA = "0xB9D144", Offset = "0xB9D144", VA = "0xB9D144")]
		public GrabbableCrosshair()
		{
		}
	}
	[Token(Token = "0x20004B2")]
	public class PauseOnInputLoss : MonoBehaviour
	{
		[Token(Token = "0x6002AD0")]
		[Address(RVA = "0xBA1F20", Offset = "0xBA1F20", VA = "0xBA1F20")]
		private void Start()
		{
		}

		[Token(Token = "0x6002AD1")]
		[Address(RVA = "0xBA1FEC", Offset = "0xBA1FEC", VA = "0xBA1FEC")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x6002AD2")]
		[Address(RVA = "0xBA1FF8", Offset = "0xBA1FF8", VA = "0xBA1FF8")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x6002AD3")]
		[Address(RVA = "0xBA2004", Offset = "0xBA2004", VA = "0xBA2004")]
		public PauseOnInputLoss()
		{
		}
	}
	[Token(Token = "0x20004B3")]
	public class BoneCapsuleTriggerLogic : MonoBehaviour
	{
		[Token(Token = "0x400181A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractableToolTags ToolTags;

		[Token(Token = "0x400181B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HashSet<ColliderZone> CollidersTouchingUs;

		[Token(Token = "0x400181C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<ColliderZone> _elementsToCleanUp;

		[Token(Token = "0x6002AD4")]
		[Address(RVA = "0xB97A2C", Offset = "0xB97A2C", VA = "0xB97A2C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002AD5")]
		[Address(RVA = "0xB97A84", Offset = "0xB97A84", VA = "0xB97A84")]
		private void Update()
		{
		}

		[Token(Token = "0x6002AD6")]
		[Address(RVA = "0xB97D28", Offset = "0xB97D28", VA = "0xB97D28")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6002AD7")]
		[Address(RVA = "0xB97E18", Offset = "0xB97E18", VA = "0xB97E18")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6002AD8")]
		[Address(RVA = "0xB97A88", Offset = "0xB97A88", VA = "0xB97A88")]
		private void CleanUpDeadColliders()
		{
		}

		[Token(Token = "0x6002AD9")]
		[Address(RVA = "0xB97F08", Offset = "0xB97F08", VA = "0xB97F08")]
		public BoneCapsuleTriggerLogic()
		{
		}
	}
	[Token(Token = "0x20004B4")]
	public class ButtonController : Interactable
	{
		[Token(Token = "0x20006F2")]
		public enum ContactTest
		{
			[Token(Token = "0x40026B4")]
			PerpenTest,
			[Token(Token = "0x40026B5")]
			BackwardsPress
		}

		[Token(Token = "0x400181D")]
		private const float ENTRY_DOT_THRESHOLD = 0.8f;

		[Token(Token = "0x400181E")]
		private const float PERP_DOT_THRESHOLD = 0.5f;

		[Token(Token = "0x400181F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private GameObject _proximityZone;

		[Token(Token = "0x4001820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject _contactZone;

		[Token(Token = "0x4001821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private GameObject _actionZone;

		[Token(Token = "0x4001822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private ContactTest[] _contactTests;

		[Token(Token = "0x4001823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Transform _buttonPlaneCenter;

		[Token(Token = "0x4001824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private bool _makeSureToolIsOnPositiveSide;

		[Token(Token = "0x4001825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[SerializeField]
		private Vector3 _localButtonDirection;

		[Token(Token = "0x4001826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private InteractableToolTags[] _allValidToolsTags;

		[Token(Token = "0x4001827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int _toolTagsMask;

		[Token(Token = "0x4001828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private InteractableState _currentButtonState;

		[Token(Token = "0x4001829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Dictionary<InteractableTool, InteractableState> _toolToState;

		[Token(Token = "0x17000606")]
		public override int ValidToolTagsMask
		{
			[Token(Token = "0x6002ADA")]
			[Address(RVA = "0xB97FA0", Offset = "0xB97FA0", VA = "0xB97FA0", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000607")]
		public Vector3 LocalButtonDirection
		{
			[Token(Token = "0x6002ADB")]
			[Address(RVA = "0xB97FA8", Offset = "0xB97FA8", VA = "0xB97FA8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6002ADC")]
		[Address(RVA = "0xB97FB4", Offset = "0xB97FB4", VA = "0xB97FB4", Slot = "9")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6002ADD")]
		[Address(RVA = "0xB98104", Offset = "0xB98104", VA = "0xB98104")]
		private void FireInteractionEventsOnDepth(InteractableCollisionDepth oldDepth, InteractableTool collidingTool, InteractionType interactionType)
		{
		}

		[Token(Token = "0x6002ADE")]
		[Address(RVA = "0xB9830C", Offset = "0xB9830C", VA = "0xB9830C", Slot = "8")]
		public override void UpdateCollisionDepth(InteractableTool interactableTool, InteractableCollisionDepth oldCollisionDepth, InteractableCollisionDepth newCollisionDepth)
		{
		}

		[Token(Token = "0x6002ADF")]
		[Address(RVA = "0xB98850", Offset = "0xB98850", VA = "0xB98850")]
		private InteractableState GetUpcomingStateNearField(InteractableState oldState, InteractableCollisionDepth newCollisionDepth, bool toolIsInActionZone, bool toolIsInContactZone, bool toolIsInProximity, bool validContact, bool onPositiveSideOfInteractable)
		{
			return default(InteractableState);
		}

		[Token(Token = "0x6002AE0")]
		[Address(RVA = "0xB98768", Offset = "0xB98768", VA = "0xB98768")]
		private bool IsValidContact(InteractableTool collidingTool, Vector3 buttonDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x6002AE1")]
		[Address(RVA = "0xB989A0", Offset = "0xB989A0", VA = "0xB989A0")]
		private bool PassEntryTest(InteractableTool collidingTool, Vector3 buttonDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x6002AE2")]
		[Address(RVA = "0xB98A94", Offset = "0xB98A94", VA = "0xB98A94")]
		private bool PassPerpTest(InteractableTool collidingTool, Vector3 buttonDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x6002AE3")]
		[Address(RVA = "0xB98BC0", Offset = "0xB98BC0", VA = "0xB98BC0")]
		public ButtonController()
		{
		}
	}
	[Token(Token = "0x20004B5")]
	public class ButtonTriggerZone : MonoBehaviour, ColliderZone
	{
		[Token(Token = "0x400182A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _parentInteractableObj;

		[Token(Token = "0x400182B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824874", Offset = "0x824874")]
		private Collider <Collider>k__BackingField;

		[Token(Token = "0x400182C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824884", Offset = "0x824884")]
		private Interactable <ParentInteractable>k__BackingField;

		[Token(Token = "0x17000608")]
		public Collider Collider
		{
			[Token(Token = "0x6002AE4")]
			[Address(RVA = "0xB98CAC", Offset = "0xB98CAC", VA = "0xB98CAC", Slot = "4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833288", Offset = "0x833288")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002AE5")]
			[Address(RVA = "0xB98CB4", Offset = "0xB98CB4", VA = "0xB98CB4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833298", Offset = "0x833298")]
			private set
			{
			}
		}

		[Token(Token = "0x17000609")]
		public Interactable ParentInteractable
		{
			[Token(Token = "0x6002AE6")]
			[Address(RVA = "0xB98CBC", Offset = "0xB98CBC", VA = "0xB98CBC", Slot = "5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8332A8", Offset = "0x8332A8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002AE7")]
			[Address(RVA = "0xB98CC4", Offset = "0xB98CC4", VA = "0xB98CC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8332B8", Offset = "0x8332B8")]
			private set
			{
			}
		}

		[Token(Token = "0x1700060A")]
		public InteractableCollisionDepth CollisionDepth
		{
			[Token(Token = "0x6002AE8")]
			[Address(RVA = "0xB98CCC", Offset = "0xB98CCC", VA = "0xB98CCC", Slot = "6")]
			get
			{
				return default(InteractableCollisionDepth);
			}
		}

		[Token(Token = "0x6002AE9")]
		[Address(RVA = "0xB98D1C", Offset = "0xB98D1C", VA = "0xB98D1C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002AEA")]
		[Address(RVA = "0xB98D98", Offset = "0xB98D98", VA = "0xB98D98")]
		public ButtonTriggerZone()
		{
		}
	}
	[Token(Token = "0x20004B6")]
	public interface ColliderZone
	{
		[Token(Token = "0x1700060B")]
		Collider Collider
		{
			[Token(Token = "0x6002AEB")]
			get;
		}

		[Token(Token = "0x1700060C")]
		Interactable ParentInteractable
		{
			[Token(Token = "0x6002AEC")]
			get;
		}

		[Token(Token = "0x1700060D")]
		InteractableCollisionDepth CollisionDepth
		{
			[Token(Token = "0x6002AED")]
			get;
		}
	}
	[Token(Token = "0x20004B7")]
	public class ColliderZoneArgs : EventArgs
	{
		[Token(Token = "0x400182D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ColliderZone Collider;

		[Token(Token = "0x400182E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly float FrameTime;

		[Token(Token = "0x400182F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly InteractableTool CollidingTool;

		[Token(Token = "0x4001830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly InteractionType InteractionT;

		[Token(Token = "0x6002AEE")]
		[Address(RVA = "0xB98268", Offset = "0xB98268", VA = "0xB98268")]
		public ColliderZoneArgs(ColliderZone collider, float frameTime, InteractableTool collidingTool, InteractionType interactionType)
		{
		}
	}
	[Token(Token = "0x20004B8")]
	public enum InteractionType
	{
		[Token(Token = "0x4001832")]
		Enter,
		[Token(Token = "0x4001833")]
		Stay,
		[Token(Token = "0x4001834")]
		Exit
	}
	[Token(Token = "0x20004B9")]
	public class HandsManager : MonoBehaviour
	{
		[Token(Token = "0x20006F3")]
		public enum HandsVisualMode
		{
			[Token(Token = "0x40026B7")]
			Mesh,
			[Token(Token = "0x40026B8")]
			Skeleton,
			[Token(Token = "0x40026B9")]
			Both
		}

		[Token(Token = "0x20006F4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820F00", Offset = "0x820F00")]
		private sealed class <FindSkeletonVisualGameObjects>d__52 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40026BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40026BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40026BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandsManager <>4__this;

			[Token(Token = "0x17000706")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003658")]
				[Address(RVA = "0xB9E038", Offset = "0xB9E038", VA = "0xB9E038", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000707")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600365A")]
				[Address(RVA = "0xB9E0A0", Offset = "0xB9E0A0", VA = "0xB9E0A0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003655")]
			[Address(RVA = "0xB9DB2C", Offset = "0xB9DB2C", VA = "0xB9DB2C")]
			[DebuggerHidden]
			public <FindSkeletonVisualGameObjects>d__52(int <>1__state)
			{
			}

			[Token(Token = "0x6003656")]
			[Address(RVA = "0xB9DE18", Offset = "0xB9DE18", VA = "0xB9DE18", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003657")]
			[Address(RVA = "0xB9DE1C", Offset = "0xB9DE1C", VA = "0xB9DE1C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003659")]
			[Address(RVA = "0xB9E040", Offset = "0xB9E040", VA = "0xB9E040", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001835")]
		private const string SKELETON_VISUALIZER_NAME = "SkeletonRenderer";

		[Token(Token = "0x4001836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _leftHand;

		[Token(Token = "0x4001837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject _rightHand;

		[Token(Token = "0x4001838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HandsVisualMode VisualMode;

		[Token(Token = "0x4001839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private OVRHand[] _hand;

		[Token(Token = "0x400183A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private OVRSkeleton[] _handSkeleton;

		[Token(Token = "0x400183B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private OVRSkeletonRenderer[] _handSkeletonRenderer;

		[Token(Token = "0x400183C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private OVRMesh[] _handMesh;

		[Token(Token = "0x400183D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private OVRMeshRenderer[] _handMeshRenderer;

		[Token(Token = "0x400183E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private SkinnedMeshRenderer _leftMeshRenderer;

		[Token(Token = "0x400183F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private SkinnedMeshRenderer _rightMeshRenderer;

		[Token(Token = "0x4001840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject _leftSkeletonVisual;

		[Token(Token = "0x4001841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject _rightSkeletonVisual;

		[Token(Token = "0x4001842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float _currentHandAlpha;

		[Token(Token = "0x4001843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int HandAlphaId;

		[Token(Token = "0x4001844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8248B4", Offset = "0x8248B4")]
		private static HandsManager <Instance>k__BackingField;

		[Token(Token = "0x1700060E")]
		public OVRHand RightHand
		{
			[Token(Token = "0x6002AEF")]
			[Address(RVA = "0xB9C034", Offset = "0xB9C034", VA = "0xB9C034")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002AF0")]
			[Address(RVA = "0xB9D14C", Offset = "0xB9D14C", VA = "0xB9D14C")]
			private set
			{
			}
		}

		[Token(Token = "0x1700060F")]
		public OVRSkeleton RightHandSkeleton
		{
			[Token(Token = "0x6002AF1")]
			[Address(RVA = "0xB9CBB4", Offset = "0xB9CBB4", VA = "0xB9CBB4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002AF2")]
			[Address(RVA = "0xB9D1B4", Offset = "0xB9D1B4", VA = "0xB9D1B4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000610")]
		public OVRSkeletonRenderer RightHandSkeletonRenderer
		{
			[Token(Token = "0x6002AF3")]
			[Address(RVA = "0xB9D21C", Offset = "0xB9D21C", VA = "0xB9D21C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002AF4")]
			[Address(RVA = "0xB9D254", Offset = "0xB9D254", VA = "0xB9D254")]
			private set
			{
			}
		}

		[Token(Token = "0x17000611")]
		public OVRMesh RightHandMesh
		{
			[Token(Token = "0x6002AF5")]
			[Address(RVA = "0xB9D2BC", Offset = "0xB9D2BC", VA = "0xB9D2BC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002AF6")]
			[Address(RVA = "0xB9D2F4", Offset = "0xB9D2F4", VA = "0xB9D2F4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000612")]
		public OVRMeshRenderer RightHandMeshRenderer
		{
			[Token(Token = "0x6002AF7")]
			[Address(RVA = "0xB9D35C", Offset = "0xB9D35C", VA = "0xB9D35C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002AF8")]
			[Address(RVA = "0xB9D394", Offset = "0xB9D394", VA = "0xB9D394")]
			private set
			{
			}
		}

		[Token(Token = "0x17000613")]
		public OVRHand LeftHand
		{
			[Token(Token = "0x6002AF9")]
			[Address(RVA = "0xB9C000", Offset = "0xB9C000", VA = "0xB9C000")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002AFA")]
			[Address(RVA = "0xB9D3FC", Offset = "0xB9D3FC", VA = "0xB9D3FC")]
			private set
			{
			}
		}

		[Token(Token = "0x17000614")]
		public OVRSkeleton LeftHandSkeleton
		{
			[Token(Token = "0x6002AFB")]
			[Address(RVA = "0xB9CB80", Offset = "0xB9CB80", VA = "0xB9CB80")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002AFC")]
			[Address(RVA = "0xB9D460", Offset = "0xB9D460", VA = "0xB9D460")]
			private set
			{
			}
		}

		[Token(Token = "0x17000615")]
		public OVRSkeletonRenderer LeftHandSkeletonRenderer
		{
			[Token(Token = "0x6002AFD")]
			[Address(RVA = "0xB9D4C4", Offset = "0xB9D4C4", VA = "0xB9D4C4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002AFE")]
			[Address(RVA = "0xB9D4F8", Offset = "0xB9D4F8", VA = "0xB9D4F8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000616")]
		public OVRMesh LeftHandMesh
		{
			[Token(Token = "0x6002AFF")]
			[Address(RVA = "0xB9D55C", Offset = "0xB9D55C", VA = "0xB9D55C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002B00")]
			[Address(RVA = "0xB9D590", Offset = "0xB9D590", VA = "0xB9D590")]
			private set
			{
			}
		}

		[Token(Token = "0x17000617")]
		public OVRMeshRenderer LeftHandMeshRenderer
		{
			[Token(Token = "0x6002B01")]
			[Address(RVA = "0xB9D5F4", Offset = "0xB9D5F4", VA = "0xB9D5F4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002B02")]
			[Address(RVA = "0xB9D628", Offset = "0xB9D628", VA = "0xB9D628")]
			private set
			{
			}
		}

		[Token(Token = "0x17000618")]
		public static HandsManager Instance
		{
			[Token(Token = "0x6002B03")]
			[Address(RVA = "0xB9D68C", Offset = "0xB9D68C", VA = "0xB9D68C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8332C8", Offset = "0x8332C8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002B04")]
			[Address(RVA = "0xB9D6DC", Offset = "0xB9D6DC", VA = "0xB9D6DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8332D8", Offset = "0x8332D8")]
			private set
			{
			}
		}

		[Token(Token = "0x6002B05")]
		[Address(RVA = "0xB9D730", Offset = "0xB9D730", VA = "0xB9D730")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002B06")]
		[Address(RVA = "0xB9DAA4", Offset = "0xB9DAA4", VA = "0xB9DAA4")]
		private void Update()
		{
		}

		[Token(Token = "0x6002B07")]
		[Address(RVA = "0xB9DA34", Offset = "0xB9DA34", VA = "0xB9DA34")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8332E8", Offset = "0x8332E8")]
		private IEnumerator FindSkeletonVisualGameObjects()
		{
			return null;
		}

		[Token(Token = "0x6002B08")]
		[Address(RVA = "0xB994D8", Offset = "0xB994D8", VA = "0xB994D8")]
		public void SwitchVisualization()
		{
		}

		[Token(Token = "0x6002B09")]
		[Address(RVA = "0xB9DB58", Offset = "0xB9DB58", VA = "0xB9DB58")]
		private void SetToCurrentVisualMode()
		{
		}

		[Token(Token = "0x6002B0A")]
		[Address(RVA = "0xB9CBEC", Offset = "0xB9CBEC", VA = "0xB9CBEC")]
		public static List<OVRBoneCapsule> GetCapsulesPerBone(OVRSkeleton skeleton, OVRSkeleton.BoneId boneId)
		{
			return null;
		}

		[Token(Token = "0x6002B0B")]
		[Address(RVA = "0xB9BE70", Offset = "0xB9BE70", VA = "0xB9BE70")]
		public bool IsInitialized()
		{
			return default(bool);
		}

		[Token(Token = "0x6002B0C")]
		[Address(RVA = "0xB9DD38", Offset = "0xB9DD38", VA = "0xB9DD38")]
		public HandsManager()
		{
		}
	}
	[Token(Token = "0x20004BA")]
	public abstract class Interactable : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20006F5")]
		public class InteractableStateArgsEvent : UnityEvent<InteractableStateArgs>
		{
			[Token(Token = "0x600365B")]
			[Address(RVA = "0xB9E7F0", Offset = "0xB9E7F0", VA = "0xB9E7F0")]
			public InteractableStateArgsEvent()
			{
			}
		}

		[Token(Token = "0x4001845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected ColliderZone _proximityZoneCollider;

		[Token(Token = "0x4001846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected ColliderZone _contactZoneCollider;

		[Token(Token = "0x4001847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected ColliderZone _actionZoneCollider;

		[Token(Token = "0x400184B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public InteractableStateArgsEvent InteractableStateChanged;

		[Token(Token = "0x17000619")]
		public ColliderZone ProximityCollider
		{
			[Token(Token = "0x6002B0D")]
			[Address(RVA = "0xB9E0A8", Offset = "0xB9E0A8", VA = "0xB9E0A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700061A")]
		public ColliderZone ContactCollider
		{
			[Token(Token = "0x6002B0E")]
			[Address(RVA = "0xB9E0B0", Offset = "0xB9E0B0", VA = "0xB9E0B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700061B")]
		public ColliderZone ActionCollider
		{
			[Token(Token = "0x6002B0F")]
			[Address(RVA = "0xB9E0B8", Offset = "0xB9E0B8", VA = "0xB9E0B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700061C")]
		public virtual int ValidToolTagsMask
		{
			[Token(Token = "0x6002B10")]
			[Address(RVA = "0xB9E0C0", Offset = "0xB9E0C0", VA = "0xB9E0C0", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x14000029")]
		public event Action<ColliderZoneArgs> ProximityZoneEvent
		{
			[Token(Token = "0x6002B11")]
			[Address(RVA = "0xB9E0C8", Offset = "0xB9E0C8", VA = "0xB9E0C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x83334C", Offset = "0x83334C")]
			add
			{
			}
			[Token(Token = "0x6002B12")]
			[Address(RVA = "0xB9E16C", Offset = "0xB9E16C", VA = "0xB9E16C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x83335C", Offset = "0x83335C")]
			remove
			{
			}
		}

		[Token(Token = "0x1400002A")]
		public event Action<ColliderZoneArgs> ContactZoneEvent
		{
			[Token(Token = "0x6002B14")]
			[Address(RVA = "0xB9E284", Offset = "0xB9E284", VA = "0xB9E284")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x83336C", Offset = "0x83336C")]
			add
			{
			}
			[Token(Token = "0x6002B15")]
			[Address(RVA = "0xB9E328", Offset = "0xB9E328", VA = "0xB9E328")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x83337C", Offset = "0x83337C")]
			remove
			{
			}
		}

		[Token(Token = "0x1400002B")]
		public event Action<ColliderZoneArgs> ActionZoneEvent
		{
			[Token(Token = "0x6002B17")]
			[Address(RVA = "0xB9E440", Offset = "0xB9E440", VA = "0xB9E440")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x83338C", Offset = "0x83338C")]
			add
			{
			}
			[Token(Token = "0x6002B18")]
			[Address(RVA = "0xB9E4E4", Offset = "0xB9E4E4", VA = "0xB9E4E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x83339C", Offset = "0x83339C")]
			remove
			{
			}
		}

		[Token(Token = "0x6002B13")]
		[Address(RVA = "0xB9E210", Offset = "0xB9E210", VA = "0xB9E210", Slot = "5")]
		protected virtual void OnProximityZoneEvent(ColliderZoneArgs args)
		{
		}

		[Token(Token = "0x6002B16")]
		[Address(RVA = "0xB9E3CC", Offset = "0xB9E3CC", VA = "0xB9E3CC", Slot = "6")]
		protected virtual void OnContactZoneEvent(ColliderZoneArgs args)
		{
		}

		[Token(Token = "0x6002B19")]
		[Address(RVA = "0xB9E588", Offset = "0xB9E588", VA = "0xB9E588", Slot = "7")]
		protected virtual void OnActionZoneEvent(ColliderZoneArgs args)
		{
		}

		[Token(Token = "0x6002B1A")]
		public abstract void UpdateCollisionDepth(InteractableTool interactableTool, InteractableCollisionDepth oldCollisionDepth, InteractableCollisionDepth newCollisionDepth);

		[Token(Token = "0x6002B1B")]
		[Address(RVA = "0xB980A0", Offset = "0xB980A0", VA = "0xB980A0", Slot = "9")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6002B1C")]
		[Address(RVA = "0xB9E6C4", Offset = "0xB9E6C4", VA = "0xB9E6C4", Slot = "10")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6002B1D")]
		[Address(RVA = "0xB98CA4", Offset = "0xB98CA4", VA = "0xB98CA4")]
		protected Interactable()
		{
		}
	}
	[Token(Token = "0x20004BB")]
	public enum InteractableCollisionDepth
	{
		[Token(Token = "0x400184D")]
		None,
		[Token(Token = "0x400184E")]
		Proximity,
		[Token(Token = "0x400184F")]
		Contact,
		[Token(Token = "0x4001850")]
		Action
	}
	[Token(Token = "0x20004BC")]
	public enum InteractableState
	{
		[Token(Token = "0x4001852")]
		Default,
		[Token(Token = "0x4001853")]
		ProximityState,
		[Token(Token = "0x4001854")]
		ContactState,
		[Token(Token = "0x4001855")]
		ActionState
	}
	[Token(Token = "0x20004BD")]
	public class InteractableStateArgs : EventArgs
	{
		[Token(Token = "0x4001856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Interactable Interactable;

		[Token(Token = "0x4001857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly InteractableTool Tool;

		[Token(Token = "0x4001858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly InteractableState OldInteractableState;

		[Token(Token = "0x4001859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public readonly InteractableState NewInteractableState;

		[Token(Token = "0x400185A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly ColliderZoneArgs ColliderArgs;

		[Token(Token = "0x6002B1E")]
		[Address(RVA = "0xB988FC", Offset = "0xB988FC", VA = "0xB988FC")]
		public InteractableStateArgs(Interactable interactable, InteractableTool tool, InteractableState newInteractableState, InteractableState oldState, ColliderZoneArgs colliderArgs)
		{
		}
	}
	[Token(Token = "0x20004BE")]
	public class InteractableRegistry : MonoBehaviour
	{
		[Token(Token = "0x400185B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static HashSet<Interactable> _interactables;

		[Token(Token = "0x1700061D")]
		public static HashSet<Interactable> Interactables
		{
			[Token(Token = "0x6002B1F")]
			[Address(RVA = "0xB9E840", Offset = "0xB9E840", VA = "0xB9E840")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002B20")]
		[Address(RVA = "0xB9E5FC", Offset = "0xB9E5FC", VA = "0xB9E5FC")]
		public static void RegisterInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6002B21")]
		[Address(RVA = "0xB9E728", Offset = "0xB9E728", VA = "0xB9E728")]
		public static void UnregisterInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6002B22")]
		[Address(RVA = "0xB9E8A8", Offset = "0xB9E8A8", VA = "0xB9E8A8")]
		public InteractableRegistry()
		{
		}
	}
	[Token(Token = "0x20004BF")]
	public class InteractableToolsCreator : MonoBehaviour
	{
		[Token(Token = "0x20006F6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820F10", Offset = "0x820F10")]
		private sealed class <AttachToolsToHands>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40026BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40026BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40026BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform[] toolObjects;

			[Token(Token = "0x40026C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool isRightHand;

			[Token(Token = "0x40026C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public InteractableToolsCreator <>4__this;

			[Token(Token = "0x40026C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private HandsManager <handsManagerObj>5__2;

			[Token(Token = "0x40026C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private HashSet<Transform>.Enumerator <>7__wrap2;

			[Token(Token = "0x40026C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Transform <toolObject>5__4;

			[Token(Token = "0x40026C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private OVRSkeleton <handSkeletonToAttachTo>5__5;

			[Token(Token = "0x17000708")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003660")]
				[Address(RVA = "0xB9F8E8", Offset = "0xB9F8E8", VA = "0xB9F8E8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000709")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003662")]
				[Address(RVA = "0xB9F950", Offset = "0xB9F950", VA = "0xB9F950", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600365C")]
			[Address(RVA = "0xB9F3AC", Offset = "0xB9F3AC", VA = "0xB9F3AC")]
			[DebuggerHidden]
			public <AttachToolsToHands>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x600365D")]
			[Address(RVA = "0xB9F4D8", Offset = "0xB9F4D8", VA = "0xB9F4D8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600365E")]
			[Address(RVA = "0xB9F54C", Offset = "0xB9F54C", VA = "0xB9F54C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600365F")]
			[Address(RVA = "0xB9F4F4", Offset = "0xB9F4F4", VA = "0xB9F4F4")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6003661")]
			[Address(RVA = "0xB9F8F0", Offset = "0xB9F8F0", VA = "0xB9F8F0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400185C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform[] LeftHandTools;

		[Token(Token = "0x400185D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform[] RightHandTools;

		[Token(Token = "0x6002B24")]
		[Address(RVA = "0xB9F2A4", Offset = "0xB9F2A4", VA = "0xB9F2A4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002B25")]
		[Address(RVA = "0xB9F320", Offset = "0xB9F320", VA = "0xB9F320")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8333AC", Offset = "0x8333AC")]
		private IEnumerator AttachToolsToHands(Transform[] toolObjects, bool isRightHand)
		{
			return null;
		}

		[Token(Token = "0x6002B26")]
		[Address(RVA = "0xB9F3D8", Offset = "0xB9F3D8", VA = "0xB9F3D8")]
		private void AttachToolToHandTransform(Transform tool, bool isRightHanded)
		{
		}

		[Token(Token = "0x6002B27")]
		[Address(RVA = "0xB9F4D0", Offset = "0xB9F4D0", VA = "0xB9F4D0")]
		public InteractableToolsCreator()
		{
		}
	}
	[Token(Token = "0x20004C0")]
	public class InteractableToolsInputRouter : MonoBehaviour
	{
		[Token(Token = "0x400185E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static InteractableToolsInputRouter _instance;

		[Token(Token = "0x400185F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool _leftPinch;

		[Token(Token = "0x4001860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool _rightPinch;

		[Token(Token = "0x4001861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HashSet<InteractableTool> _leftHandNearTools;

		[Token(Token = "0x4001862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HashSet<InteractableTool> _leftHandFarTools;

		[Token(Token = "0x4001863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private HashSet<InteractableTool> _rightHandNearTools;

		[Token(Token = "0x4001864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private HashSet<InteractableTool> _rightHandFarTools;

		[Token(Token = "0x1700061E")]
		public static InteractableToolsInputRouter Instance
		{
			[Token(Token = "0x6002B28")]
			[Address(RVA = "0xB9B8AC", Offset = "0xB9B8AC", VA = "0xB9B8AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002B29")]
		[Address(RVA = "0xB9BA14", Offset = "0xB9BA14", VA = "0xB9BA14")]
		public void RegisterInteractableTool(InteractableTool interactableTool)
		{
		}

		[Token(Token = "0x6002B2A")]
		[Address(RVA = "0xB9F958", Offset = "0xB9F958", VA = "0xB9F958")]
		public void UnregisterInteractableTool(InteractableTool interactableTool)
		{
		}

		[Token(Token = "0x6002B2B")]
		[Address(RVA = "0xB9FA04", Offset = "0xB9FA04", VA = "0xB9FA04")]
		private void Update()
		{
		}

		[Token(Token = "0x6002B2C")]
		[Address(RVA = "0xB9FCCC", Offset = "0xB9FCCC", VA = "0xB9FCCC")]
		private bool UpdateToolsAndEnableState(HashSet<InteractableTool> tools, bool toolsAreEnabledThisFrame)
		{
			return default(bool);
		}

		[Token(Token = "0x6002B2D")]
		[Address(RVA = "0xB9FD14", Offset = "0xB9FD14", VA = "0xB9FD14")]
		private bool UpdateTools(HashSet<InteractableTool> tools, bool resetCollisionData = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6002B2E")]
		[Address(RVA = "0xB9FF64", Offset = "0xB9FF64", VA = "0xB9FF64")]
		private void ToggleToolsEnableState(HashSet<InteractableTool> tools, bool enableState)
		{
		}

		[Token(Token = "0x6002B2F")]
		[Address(RVA = "0xBA0090", Offset = "0xBA0090", VA = "0xBA0090")]
		public InteractableToolsInputRouter()
		{
		}
	}
	[Token(Token = "0x20004C1")]
	public class FingerTipPokeTool : InteractableTool
	{
		[Token(Token = "0x20006F7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820F20", Offset = "0x820F20")]
		private sealed class <AttachTriggerLogic>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40026C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40026C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40026C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FingerTipPokeTool <>4__this;

			[Token(Token = "0x1700070A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003666")]
				[Address(RVA = "0xB9CDFC", Offset = "0xB9CDFC", VA = "0xB9CDFC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700070B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003668")]
				[Address(RVA = "0xB9CE64", Offset = "0xB9CE64", VA = "0xB9CE64", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003663")]
			[Address(RVA = "0xB9BB30", Offset = "0xB9BB30", VA = "0xB9BB30")]
			[DebuggerHidden]
			public <AttachTriggerLogic>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x6003664")]
			[Address(RVA = "0xB9C818", Offset = "0xB9C818", VA = "0xB9C818", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003665")]
			[Address(RVA = "0xB9C81C", Offset = "0xB9C81C", VA = "0xB9C81C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003667")]
			[Address(RVA = "0xB9CE04", Offset = "0xB9CE04", VA = "0xB9CE04", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001865")]
		private const int NUM_VELOCITY_FRAMES = 10;

		[Token(Token = "0x4001866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private FingerTipPokeToolView _fingerTipPokeToolView;

		[Token(Token = "0x4001867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private OVRPlugin.HandFinger _fingerToFollow;

		[Token(Token = "0x4001868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3[] _velocityFrames;

		[Token(Token = "0x4001869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int _currVelocityFrame;

		[Token(Token = "0x400186A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private bool _sampledMaxFramesAlready;

		[Token(Token = "0x400186B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 _position;

		[Token(Token = "0x400186C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private BoneCapsuleTriggerLogic[] _boneCapsuleTriggerLogic;

		[Token(Token = "0x400186D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float _lastScale;

		[Token(Token = "0x400186E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool _isInitialized;

		[Token(Token = "0x400186F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private OVRBoneCapsule _capsuleToTrack;

		[Token(Token = "0x1700061F")]
		public override InteractableToolTags ToolTags
		{
			[Token(Token = "0x6002B30")]
			[Address(RVA = "0xB9B790", Offset = "0xB9B790", VA = "0xB9B790", Slot = "4")]
			get
			{
				return default(InteractableToolTags);
			}
		}

		[Token(Token = "0x17000620")]
		public override ToolInputState ToolInputState
		{
			[Token(Token = "0x6002B31")]
			[Address(RVA = "0xB9B798", Offset = "0xB9B798", VA = "0xB9B798", Slot = "5")]
			get
			{
				return default(ToolInputState);
			}
		}

		[Token(Token = "0x17000621")]
		public override bool IsFarFieldTool
		{
			[Token(Token = "0x6002B32")]
			[Address(RVA = "0xB9B7A0", Offset = "0xB9B7A0", VA = "0xB9B7A0", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000622")]
		public override bool EnableState
		{
			[Token(Token = "0x6002B33")]
			[Address(RVA = "0xB9B7A8", Offset = "0xB9B7A8", VA = "0xB9B7A8", Slot = "10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002B34")]
			[Address(RVA = "0xB9B7D4", Offset = "0xB9B7D4", VA = "0xB9B7D4", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x6002B35")]
		[Address(RVA = "0xB9B810", Offset = "0xB9B810", VA = "0xB9B810", Slot = "12")]
		public override void Initialize()
		{
		}

		[Token(Token = "0x6002B36")]
		[Address(RVA = "0xB9BAC0", Offset = "0xB9BAC0", VA = "0xB9BAC0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x833410", Offset = "0x833410")]
		private IEnumerator AttachTriggerLogic()
		{
			return null;
		}

		[Token(Token = "0x6002B37")]
		[Address(RVA = "0xB9BB5C", Offset = "0xB9BB5C", VA = "0xB9BB5C")]
		private void Update()
		{
		}

		[Token(Token = "0x6002B38")]
		[Address(RVA = "0xB9C06C", Offset = "0xB9C06C", VA = "0xB9C06C")]
		private void UpdateAverageVelocity()
		{
		}

		[Token(Token = "0x6002B39")]
		[Address(RVA = "0xB9C2E4", Offset = "0xB9C2E4", VA = "0xB9C2E4")]
		private void CheckAndUpdateScale()
		{
		}

		[Token(Token = "0x6002B3A")]
		[Address(RVA = "0xB9C424", Offset = "0xB9C424", VA = "0xB9C424", Slot = "7")]
		public override List<InteractableCollisionInfo> GetNextIntersectingObjects()
		{
			return null;
		}

		[Token(Token = "0x6002B3B")]
		[Address(RVA = "0xB9C6EC", Offset = "0xB9C6EC", VA = "0xB9C6EC", Slot = "8")]
		public override void FocusOnInteractable(Interactable focusedInteractable, ColliderZone colliderZone)
		{
		}

		[Token(Token = "0x6002B3C")]
		[Address(RVA = "0xB9C6F0", Offset = "0xB9C6F0", VA = "0xB9C6F0", Slot = "9")]
		public override void DeFocus()
		{
		}

		[Token(Token = "0x6002B3D")]
		[Address(RVA = "0xB9C6F4", Offset = "0xB9C6F4", VA = "0xB9C6F4")]
		public FingerTipPokeTool()
		{
		}
	}
	[Token(Token = "0x20004C2")]
	public class FingerTipPokeToolView : MonoBehaviour, InteractableToolView
	{
		[Token(Token = "0x4001870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer _sphereMeshRenderer;

		[Token(Token = "0x4001871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824944", Offset = "0x824944")]
		private InteractableTool <InteractableTool>k__BackingField;

		[Token(Token = "0x4001872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824954", Offset = "0x824954")]
		private bool <ToolActivateState>k__BackingField;

		[Token(Token = "0x4001873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824964", Offset = "0x824964")]
		private float <SphereRadius>k__BackingField;

		[Token(Token = "0x17000623")]
		public InteractableTool InteractableTool
		{
			[Token(Token = "0x6002B3E")]
			[Address(RVA = "0xB9CE6C", Offset = "0xB9CE6C", VA = "0xB9CE6C", Slot = "4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833474", Offset = "0x833474")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002B3F")]
			[Address(RVA = "0xB9CE74", Offset = "0xB9CE74", VA = "0xB9CE74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833484", Offset = "0x833484")]
			set
			{
			}
		}

		[Token(Token = "0x17000624")]
		public bool EnableState
		{
			[Token(Token = "0x6002B40")]
			[Address(RVA = "0xB9CE7C", Offset = "0xB9CE7C", VA = "0xB9CE7C", Slot = "6")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002B41")]
			[Address(RVA = "0xB9CE98", Offset = "0xB9CE98", VA = "0xB9CE98", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x17000625")]
		public bool ToolActivateState
		{
			[Token(Token = "0x6002B42")]
			[Address(RVA = "0xB9CEB8", Offset = "0xB9CEB8", VA = "0xB9CEB8", Slot = "8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833494", Offset = "0x833494")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002B43")]
			[Address(RVA = "0xB9CEC0", Offset = "0xB9CEC0", VA = "0xB9CEC0", Slot = "9")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8334A4", Offset = "0x8334A4")]
			set
			{
			}
		}

		[Token(Token = "0x17000626")]
		public float SphereRadius
		{
			[Token(Token = "0x6002B44")]
			[Address(RVA = "0xB9CECC", Offset = "0xB9CECC", VA = "0xB9CECC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8334B4", Offset = "0x8334B4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002B45")]
			[Address(RVA = "0xB9CED4", Offset = "0xB9CED4", VA = "0xB9CED4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8334C4", Offset = "0x8334C4")]
			private set
			{
			}
		}

		[Token(Token = "0x6002B46")]
		[Address(RVA = "0xB9CEDC", Offset = "0xB9CEDC", VA = "0xB9CEDC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002B47")]
		[Address(RVA = "0xB9CF24", Offset = "0xB9CF24", VA = "0xB9CF24", Slot = "5")]
		public void SetFocusedInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6002B48")]
		[Address(RVA = "0xB9CF28", Offset = "0xB9CF28", VA = "0xB9CF28")]
		public FingerTipPokeToolView()
		{
		}
	}
	[Token(Token = "0x20004C3")]
	[Flags]
	public enum InteractableToolTags
	{
		[Token(Token = "0x4001875")]
		None = 0,
		[Token(Token = "0x4001876")]
		Ray = 1,
		[Token(Token = "0x4001877")]
		Poke = 4,
		[Token(Token = "0x4001878")]
		All = -1
	}
	[Token(Token = "0x20004C4")]
	public enum ToolInputState
	{
		[Token(Token = "0x400187A")]
		Inactive,
		[Token(Token = "0x400187B")]
		PrimaryInputDown,
		[Token(Token = "0x400187C")]
		PrimaryInputDownStay,
		[Token(Token = "0x400187D")]
		PrimaryInputUp
	}
	[Token(Token = "0x20004C5")]
	public class InteractableCollisionInfo
	{
		[Token(Token = "0x400187E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ColliderZone InteractableCollider;

		[Token(Token = "0x400187F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractableCollisionDepth CollisionDepth;

		[Token(Token = "0x4001880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractableTool CollidingTool;

		[Token(Token = "0x6002B49")]
		[Address(RVA = "0xB9C6A8", Offset = "0xB9C6A8", VA = "0xB9C6A8")]
		public InteractableCollisionInfo(ColliderZone collider, InteractableCollisionDepth collisionDepth, InteractableTool collidingTool)
		{
		}
	}
	[Token(Token = "0x20004C6")]
	public abstract class InteractableTool : MonoBehaviour
	{
		[Token(Token = "0x4001881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824974", Offset = "0x824974")]
		private bool <IsRightHandedTool>k__BackingField;

		[Token(Token = "0x4001882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824984", Offset = "0x824984")]
		private Vector3 <Velocity>k__BackingField;

		[Token(Token = "0x4001883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824994", Offset = "0x824994")]
		private Vector3 <InteractionPosition>k__BackingField;

		[Token(Token = "0x4001884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected List<InteractableCollisionInfo> _currentIntersectingObjects;

		[Token(Token = "0x4001885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Interactable> _addedInteractables;

		[Token(Token = "0x4001886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Interactable> _removedInteractables;

		[Token(Token = "0x4001887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<Interactable> _remainingInteractables;

		[Token(Token = "0x4001888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<Interactable, InteractableCollisionInfo> _currInteractableToCollisionInfos;

		[Token(Token = "0x4001889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<Interactable, InteractableCollisionInfo> _prevInteractableToCollisionInfos;

		[Token(Token = "0x17000627")]
		public Transform ToolTransform
		{
			[Token(Token = "0x6002B4A")]
			[Address(RVA = "0xB98BB8", Offset = "0xB98BB8", VA = "0xB98BB8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000628")]
		public bool IsRightHandedTool
		{
			[Token(Token = "0x6002B4B")]
			[Address(RVA = "0xB9E924", Offset = "0xB9E924", VA = "0xB9E924")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8334D4", Offset = "0x8334D4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002B4C")]
			[Address(RVA = "0xB9E92C", Offset = "0xB9E92C", VA = "0xB9E92C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8334E4", Offset = "0x8334E4")]
			set
			{
			}
		}

		[Token(Token = "0x17000629")]
		public abstract InteractableToolTags ToolTags
		{
			[Token(Token = "0x6002B4D")]
			get;
		}

		[Token(Token = "0x1700062A")]
		public abstract ToolInputState ToolInputState
		{
			[Token(Token = "0x6002B4E")]
			get;
		}

		[Token(Token = "0x1700062B")]
		public abstract bool IsFarFieldTool
		{
			[Token(Token = "0x6002B4F")]
			get;
		}

		[Token(Token = "0x1700062C")]
		public Vector3 Velocity
		{
			[Token(Token = "0x6002B50")]
			[Address(RVA = "0xB9E938", Offset = "0xB9E938", VA = "0xB9E938")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8334F4", Offset = "0x8334F4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6002B51")]
			[Address(RVA = "0xB9E944", Offset = "0xB9E944", VA = "0xB9E944")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833504", Offset = "0x833504")]
			protected set
			{
			}
		}

		[Token(Token = "0x1700062D")]
		public Vector3 InteractionPosition
		{
			[Token(Token = "0x6002B52")]
			[Address(RVA = "0xB9E950", Offset = "0xB9E950", VA = "0xB9E950")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833514", Offset = "0x833514")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6002B53")]
			[Address(RVA = "0xB9E95C", Offset = "0xB9E95C", VA = "0xB9E95C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833524", Offset = "0x833524")]
			protected set
			{
			}
		}

		[Token(Token = "0x1700062E")]
		public abstract bool EnableState
		{
			[Token(Token = "0x6002B58")]
			get;
			[Token(Token = "0x6002B59")]
			set;
		}

		[Token(Token = "0x6002B54")]
		[Address(RVA = "0xB9E968", Offset = "0xB9E968", VA = "0xB9E968")]
		public List<InteractableCollisionInfo> GetCurrentIntersectingObjects()
		{
			return null;
		}

		[Token(Token = "0x6002B55")]
		public abstract List<InteractableCollisionInfo> GetNextIntersectingObjects();

		[Token(Token = "0x6002B56")]
		public abstract void FocusOnInteractable(Interactable focusedInteractable, ColliderZone colliderZone);

		[Token(Token = "0x6002B57")]
		public abstract void DeFocus();

		[Token(Token = "0x6002B5A")]
		public abstract void Initialize();

		[Token(Token = "0x6002B5B")]
		[Address(RVA = "0xB9E970", Offset = "0xB9E970", VA = "0xB9E970")]
		public KeyValuePair<Interactable, InteractableCollisionInfo> GetFirstCurrentCollisionInfo()
		{
			return default(KeyValuePair<Interactable, InteractableCollisionInfo>);
		}

		[Token(Token = "0x6002B5C")]
		[Address(RVA = "0xB9E9C0", Offset = "0xB9E9C0", VA = "0xB9E9C0")]
		public void ClearAllCurrentCollisionInfos()
		{
		}

		[Token(Token = "0x6002B5D")]
		[Address(RVA = "0xB9EA18", Offset = "0xB9EA18", VA = "0xB9EA18", Slot = "13")]
		public virtual void UpdateCurrentCollisionsBasedOnDepth()
		{
		}

		[Token(Token = "0x6002B5E")]
		[Address(RVA = "0xB9EC5C", Offset = "0xB9EC5C", VA = "0xB9EC5C", Slot = "14")]
		public virtual void UpdateLatestCollisionData()
		{
		}

		[Token(Token = "0x6002B5F")]
		[Address(RVA = "0xB9C708", Offset = "0xB9C708", VA = "0xB9C708")]
		protected InteractableTool()
		{
		}
	}
	[Token(Token = "0x20004C7")]
	public interface InteractableToolView
	{
		[Token(Token = "0x1700062F")]
		InteractableTool InteractableTool
		{
			[Token(Token = "0x6002B60")]
			get;
		}

		[Token(Token = "0x17000630")]
		bool EnableState
		{
			[Token(Token = "0x6002B62")]
			get;
			[Token(Token = "0x6002B63")]
			set;
		}

		[Token(Token = "0x17000631")]
		bool ToolActivateState
		{
			[Token(Token = "0x6002B64")]
			get;
			[Token(Token = "0x6002B65")]
			set;
		}

		[Token(Token = "0x6002B61")]
		void SetFocusedInteractable(Interactable interactable);
	}
	[Token(Token = "0x20004C8")]
	public class PinchStateModule
	{
		[Token(Token = "0x20006F8")]
		private enum PinchState
		{
			[Token(Token = "0x40026CA")]
			None,
			[Token(Token = "0x40026CB")]
			PinchDown,
			[Token(Token = "0x40026CC")]
			PinchStay,
			[Token(Token = "0x40026CD")]
			PinchUp
		}

		[Token(Token = "0x400188A")]
		private const float PINCH_STRENGTH_THRESHOLD = 1f;

		[Token(Token = "0x400188B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PinchState _currPinchState;

		[Token(Token = "0x400188C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Interactable _firstFocusedInteractable;

		[Token(Token = "0x17000632")]
		public bool PinchUpAndDownOnFocusedObject
		{
			[Token(Token = "0x6002B66")]
			[Address(RVA = "0xBA200C", Offset = "0xBA200C", VA = "0xBA200C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000633")]
		public bool PinchSteadyOnFocusedObject
		{
			[Token(Token = "0x6002B67")]
			[Address(RVA = "0xBA2098", Offset = "0xBA2098", VA = "0xBA2098")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000634")]
		public bool PinchDownOnFocusedObject
		{
			[Token(Token = "0x6002B68")]
			[Address(RVA = "0xBA2124", Offset = "0xBA2124", VA = "0xBA2124")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6002B69")]
		[Address(RVA = "0xBA21B0", Offset = "0xBA21B0", VA = "0xBA21B0")]
		public PinchStateModule()
		{
		}

		[Token(Token = "0x6002B6A")]
		[Address(RVA = "0xBA21DC", Offset = "0xBA21DC", VA = "0xBA21DC")]
		public void UpdateState(OVRHand hand, Interactable currFocusedInteractable)
		{
		}
	}
	[Token(Token = "0x20004C9")]
	public class RayTool : InteractableTool
	{
		[Token(Token = "0x400188D")]
		private const float MINIMUM_RAY_CAST_DISTANCE = 0.8f;

		[Token(Token = "0x400188E")]
		private const float COLLIDER_RADIUS = 0.01f;

		[Token(Token = "0x400188F")]
		private const int NUM_MAX_PRIMARY_HITS = 10;

		[Token(Token = "0x4001890")]
		private const int NUM_MAX_SECONDARY_HITS = 25;

		[Token(Token = "0x4001891")]
		private const int NUM_COLLIDERS_TO_TEST = 20;

		[Token(Token = "0x4001892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private RayToolView _rayToolView;

		[Token(Token = "0x4001893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x8249B4", Offset = "0x8249B4")]
		[SerializeField]
		private float _coneAngleDegrees;

		[Token(Token = "0x4001894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[SerializeField]
		private float _farFieldMaxDistance;

		[Token(Token = "0x4001895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PinchStateModule _pinchStateModule;

		[Token(Token = "0x4001896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Interactable _focusedInteractable;

		[Token(Token = "0x4001897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Collider[] _collidersOverlapped;

		[Token(Token = "0x4001898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Interactable _currInteractableCastedAgainst;

		[Token(Token = "0x4001899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float _coneAngleReleaseDegrees;

		[Token(Token = "0x400189A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private RaycastHit[] _primaryHits;

		[Token(Token = "0x400189B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Collider[] _secondaryOverlapResults;

		[Token(Token = "0x400189C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool _initialized;

		[Token(Token = "0x17000635")]
		public override InteractableToolTags ToolTags
		{
			[Token(Token = "0x6002B6B")]
			[Address(RVA = "0xBA247C", Offset = "0xBA247C", VA = "0xBA247C", Slot = "4")]
			get
			{
				return default(InteractableToolTags);
			}
		}

		[Token(Token = "0x17000636")]
		public override ToolInputState ToolInputState
		{
			[Token(Token = "0x6002B6C")]
			[Address(RVA = "0xBA2484", Offset = "0xBA2484", VA = "0xBA2484", Slot = "5")]
			get
			{
				return default(ToolInputState);
			}
		}

		[Token(Token = "0x17000637")]
		public override bool IsFarFieldTool
		{
			[Token(Token = "0x6002B6D")]
			[Address(RVA = "0xBA24EC", Offset = "0xBA24EC", VA = "0xBA24EC", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000638")]
		public override bool EnableState
		{
			[Token(Token = "0x6002B6E")]
			[Address(RVA = "0xBA24F4", Offset = "0xBA24F4", VA = "0xBA24F4", Slot = "10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002B6F")]
			[Address(RVA = "0xBA2538", Offset = "0xBA2538", VA = "0xBA2538", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x6002B70")]
		[Address(RVA = "0xBA25AC", Offset = "0xBA25AC", VA = "0xBA25AC", Slot = "12")]
		public override void Initialize()
		{
		}

		[Token(Token = "0x6002B71")]
		[Address(RVA = "0xBA2604", Offset = "0xBA2604", VA = "0xBA2604")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002B72")]
		[Address(RVA = "0xBA26A0", Offset = "0xBA26A0", VA = "0xBA26A0")]
		private void Update()
		{
		}

		[Token(Token = "0x6002B73")]
		[Address(RVA = "0xBA29A0", Offset = "0xBA29A0", VA = "0xBA29A0")]
		private Vector3 GetRayCastOrigin()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002B74")]
		[Address(RVA = "0xBA2A9C", Offset = "0xBA2A9C", VA = "0xBA2A9C", Slot = "7")]
		public override List<InteractableCollisionInfo> GetNextIntersectingObjects()
		{
			return null;
		}

		[Token(Token = "0x6002B75")]
		[Address(RVA = "0xBA2E00", Offset = "0xBA2E00", VA = "0xBA2E00")]
		private bool HasRayReleasedInteractable(Interactable focusedInteractable)
		{
			return default(bool);
		}

		[Token(Token = "0x6002B76")]
		[Address(RVA = "0xBA2FA4", Offset = "0xBA2FA4", VA = "0xBA2FA4")]
		private Interactable FindTargetInteractable()
		{
			return null;
		}

		[Token(Token = "0x6002B77")]
		[Address(RVA = "0xBA30CC", Offset = "0xBA30CC", VA = "0xBA30CC")]
		private Interactable FindPrimaryRaycastHit(Vector3 rayOrigin, Vector3 rayDirection)
		{
			return null;
		}

		[Token(Token = "0x6002B78")]
		[Address(RVA = "0xBA3404", Offset = "0xBA3404", VA = "0xBA3404")]
		private Interactable FindInteractableViaConeTest(Vector3 rayOrigin, Vector3 rayDirection)
		{
			return null;
		}

		[Token(Token = "0x6002B79")]
		[Address(RVA = "0xBA3814", Offset = "0xBA3814", VA = "0xBA3814", Slot = "8")]
		public override void FocusOnInteractable(Interactable focusedInteractable, ColliderZone colliderZone)
		{
		}

		[Token(Token = "0x6002B7A")]
		[Address(RVA = "0xBA38E8", Offset = "0xBA38E8", VA = "0xBA38E8", Slot = "9")]
		public override void DeFocus()
		{
		}

		[Token(Token = "0x6002B7B")]
		[Address(RVA = "0xBA391C", Offset = "0xBA391C", VA = "0xBA391C")]
		public RayTool()
		{
		}
	}
	[Token(Token = "0x20004CA")]
	public class RayToolView : MonoBehaviour, InteractableToolView
	{
		[Token(Token = "0x400189D")]
		private const int NUM_RAY_LINE_POSITIONS = 25;

		[Token(Token = "0x400189E")]
		private const float DEFAULT_RAY_CAST_DISTANCE = 3f;

		[Token(Token = "0x400189F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform _targetTransform;

		[Token(Token = "0x40018A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private LineRenderer _lineRenderer;

		[Token(Token = "0x40018A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _toolActivateState;

		[Token(Token = "0x40018A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform _focusedTransform;

		[Token(Token = "0x40018A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3[] linePositions;

		[Token(Token = "0x40018A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Gradient _oldColorGradient;

		[Token(Token = "0x40018A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Gradient _highLightColorGradient;

		[Token(Token = "0x40018A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824A28", Offset = "0x824A28")]
		private InteractableTool <InteractableTool>k__BackingField;

		[Token(Token = "0x17000639")]
		public bool EnableState
		{
			[Token(Token = "0x6002B7C")]
			[Address(RVA = "0xBA251C", Offset = "0xBA251C", VA = "0xBA251C", Slot = "6")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002B7D")]
			[Address(RVA = "0xBA2554", Offset = "0xBA2554", VA = "0xBA2554", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x1700063A")]
		public bool ToolActivateState
		{
			[Token(Token = "0x6002B7E")]
			[Address(RVA = "0xBA39D4", Offset = "0xBA39D4", VA = "0xBA39D4", Slot = "8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002B7F")]
			[Address(RVA = "0xBA2964", Offset = "0xBA2964", VA = "0xBA2964", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x1700063B")]
		public InteractableTool InteractableTool
		{
			[Token(Token = "0x6002B81")]
			[Address(RVA = "0xBA3C04", Offset = "0xBA3C04", VA = "0xBA3C04", Slot = "4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833534", Offset = "0x833534")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002B82")]
			[Address(RVA = "0xBA3C0C", Offset = "0xBA3C0C", VA = "0xBA3C0C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833544", Offset = "0x833544")]
			set
			{
			}
		}

		[Token(Token = "0x6002B80")]
		[Address(RVA = "0xBA39DC", Offset = "0xBA39DC", VA = "0xBA39DC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002B83")]
		[Address(RVA = "0xBA3848", Offset = "0xBA3848", VA = "0xBA3848", Slot = "5")]
		public void SetFocusedInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6002B84")]
		[Address(RVA = "0xBA3C14", Offset = "0xBA3C14", VA = "0xBA3C14")]
		private void Update()
		{
		}

		[Token(Token = "0x6002B85")]
		[Address(RVA = "0xBA3F40", Offset = "0xBA3F40", VA = "0xBA3F40")]
		public static Vector3 GetPointOnBezierCurve(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002B86")]
		[Address(RVA = "0xBA4130", Offset = "0xBA4130", VA = "0xBA4130")]
		public RayToolView()
		{
		}
	}
	[Token(Token = "0x20004CB")]
	public class DistanceGrabberSample : MonoBehaviour
	{
		[Token(Token = "0x40018A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool useSpherecast;

		[Token(Token = "0x40018A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool allowGrabThroughWalls;

		[Token(Token = "0x40018A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private DistanceGrabber[] m_grabbers;

		[Token(Token = "0x1700063C")]
		public bool UseSpherecast
		{
			[Token(Token = "0x6002B87")]
			[Address(RVA = "0xB9B400", Offset = "0xB9B400", VA = "0xB9B400")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002B88")]
			[Address(RVA = "0xB9B408", Offset = "0xB9B408", VA = "0xB9B408")]
			set
			{
			}
		}

		[Token(Token = "0x1700063D")]
		public bool AllowGrabThroughWalls
		{
			[Token(Token = "0x6002B89")]
			[Address(RVA = "0xB9B490", Offset = "0xB9B490", VA = "0xB9B490")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002B8A")]
			[Address(RVA = "0xB9B498", Offset = "0xB9B498", VA = "0xB9B498")]
			set
			{
			}
		}

		[Token(Token = "0x6002B8B")]
		[Address(RVA = "0xB9B504", Offset = "0xB9B504", VA = "0xB9B504")]
		private void Start()
		{
		}

		[Token(Token = "0x6002B8C")]
		[Address(RVA = "0xB9B768", Offset = "0xB9B768", VA = "0xB9B768")]
		public void ToggleSphereCasting(Toggle t)
		{
		}

		[Token(Token = "0x6002B8D")]
		[Address(RVA = "0xB9B778", Offset = "0xB9B778", VA = "0xB9B778")]
		public void ToggleGrabThroughWalls(Toggle t)
		{
		}

		[Token(Token = "0x6002B8E")]
		[Address(RVA = "0xB9B788", Offset = "0xB9B788", VA = "0xB9B788")]
		public DistanceGrabberSample()
		{
		}
	}
	[Token(Token = "0x20004CC")]
	public class ControllerBoxController : MonoBehaviour
	{
		[Token(Token = "0x40018AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TrainLocomotive _locomotive;

		[Token(Token = "0x40018AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private CowController _cowController;

		[Token(Token = "0x6002B8F")]
		[Address(RVA = "0xB99310", Offset = "0xB99310", VA = "0xB99310")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002B90")]
		[Address(RVA = "0xB99314", Offset = "0xB99314", VA = "0xB99314")]
		public void StartStopStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6002B91")]
		[Address(RVA = "0xB9934C", Offset = "0xB9934C", VA = "0xB9934C")]
		public void DecreaseSpeedStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6002B92")]
		[Address(RVA = "0xB99384", Offset = "0xB99384", VA = "0xB99384")]
		public void IncreaseSpeedStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6002B93")]
		[Address(RVA = "0xB993BC", Offset = "0xB993BC", VA = "0xB993BC")]
		public void SmokeButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6002B94")]
		[Address(RVA = "0xB993F4", Offset = "0xB993F4", VA = "0xB993F4")]
		public void WhistleButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6002B95")]
		[Address(RVA = "0xB9942C", Offset = "0xB9942C", VA = "0xB9942C")]
		public void ReverseButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6002B96")]
		[Address(RVA = "0xB99464", Offset = "0xB99464", VA = "0xB99464")]
		public void SwitchVisualization(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6002B97")]
		[Address(RVA = "0xB995C0", Offset = "0xB995C0", VA = "0xB995C0")]
		public void GoMoo(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6002B98")]
		[Address(RVA = "0xB99630", Offset = "0xB99630", VA = "0xB99630")]
		public ControllerBoxController()
		{
		}
	}
	[Token(Token = "0x20004CD")]
	public class CowController : MonoBehaviour
	{
		[Token(Token = "0x40018AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Animation _cowAnimation;

		[Token(Token = "0x40018AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioSource _mooCowAudioSource;

		[Token(Token = "0x6002B99")]
		[Address(RVA = "0xB99638", Offset = "0xB99638", VA = "0xB99638")]
		private void Start()
		{
		}

		[Token(Token = "0x6002B9A")]
		[Address(RVA = "0xB9963C", Offset = "0xB9963C", VA = "0xB9963C")]
		public void PlayMooSound()
		{
		}

		[Token(Token = "0x6002B9B")]
		[Address(RVA = "0xB995F4", Offset = "0xB995F4", VA = "0xB995F4")]
		public void GoMooCowGo()
		{
		}

		[Token(Token = "0x6002B9C")]
		[Address(RVA = "0xB9967C", Offset = "0xB9967C", VA = "0xB9967C")]
		public CowController()
		{
		}
	}
	[Token(Token = "0x20004CE")]
	public class PanelHMDFollower : MonoBehaviour
	{
		[Token(Token = "0x20006F9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820F30", Offset = "0x820F30")]
		private sealed class <LerpToHMD>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40026CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40026CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40026D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PanelHMDFollower <>4__this;

			[Token(Token = "0x40026D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 <newPanelPosition>5__2;

			[Token(Token = "0x40026D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <startTime>5__3;

			[Token(Token = "0x40026D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <endTime>5__4;

			[Token(Token = "0x1700070C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600366C")]
				[Address(RVA = "0xBA1EB0", Offset = "0xBA1EB0", VA = "0xBA1EB0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700070D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600366E")]
				[Address(RVA = "0xBA1F18", Offset = "0xBA1F18", VA = "0xBA1F18", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003669")]
			[Address(RVA = "0xBA1BE4", Offset = "0xBA1BE4", VA = "0xBA1BE4")]
			[DebuggerHidden]
			public <LerpToHMD>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x600366A")]
			[Address(RVA = "0xBA1CC0", Offset = "0xBA1CC0", VA = "0xBA1CC0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600366B")]
			[Address(RVA = "0xBA1CC4", Offset = "0xBA1CC4", VA = "0xBA1CC4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600366D")]
			[Address(RVA = "0xBA1EB8", Offset = "0xBA1EB8", VA = "0xBA1EB8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40018AE")]
		private const float TOTAL_DURATION = 3f;

		[Token(Token = "0x40018AF")]
		private const float HMD_MOVEMENT_THRESHOLD = 0.3f;

		[Token(Token = "0x40018B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _maxDistance;

		[Token(Token = "0x40018B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float _minDistance;

		[Token(Token = "0x40018B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _minZDistance;

		[Token(Token = "0x40018B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private OVRCameraRig _cameraRig;

		[Token(Token = "0x40018B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 _panelInitialPosition;

		[Token(Token = "0x40018B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Coroutine _coroutine;

		[Token(Token = "0x40018B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 _prevPos;

		[Token(Token = "0x40018B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 _lastMovedToPos;

		[Token(Token = "0x6002B9D")]
		[Address(RVA = "0xBA17FC", Offset = "0xBA17FC", VA = "0xBA17FC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002B9E")]
		[Address(RVA = "0xBA1894", Offset = "0xBA1894", VA = "0xBA1894")]
		private void Update()
		{
		}

		[Token(Token = "0x6002B9F")]
		[Address(RVA = "0xBA1B20", Offset = "0xBA1B20", VA = "0xBA1B20")]
		private Vector3 CalculateIdealAnchorPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002BA0")]
		[Address(RVA = "0xBA1AB0", Offset = "0xBA1AB0", VA = "0xBA1AB0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x833554", Offset = "0x833554")]
		private IEnumerator LerpToHMD()
		{
			return null;
		}

		[Token(Token = "0x6002BA1")]
		[Address(RVA = "0xBA1C10", Offset = "0xBA1C10", VA = "0xBA1C10")]
		public PanelHMDFollower()
		{
		}
	}
	[Token(Token = "0x20004CF")]
	public class SelectionCylinder : MonoBehaviour
	{
		[Token(Token = "0x20006FA")]
		public enum SelectionState
		{
			[Token(Token = "0x40026D5")]
			Off,
			[Token(Token = "0x40026D6")]
			Selected,
			[Token(Token = "0x40026D7")]
			Highlighted
		}

		[Token(Token = "0x40018B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer _selectionMeshRenderer;

		[Token(Token = "0x40018B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int _colorId;

		[Token(Token = "0x40018BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material[] _selectionMaterials;

		[Token(Token = "0x40018BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Color[] _defaultSelectionColors;

		[Token(Token = "0x40018BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Color[] _highlightColors;

		[Token(Token = "0x40018BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SelectionState _currSelectionState;

		[Token(Token = "0x1700063E")]
		public SelectionState CurrSelectionState
		{
			[Token(Token = "0x6002BA2")]
			[Address(RVA = "0xBA4190", Offset = "0xBA4190", VA = "0xBA4190")]
			get
			{
				return default(SelectionState);
			}
			[Token(Token = "0x6002BA3")]
			[Address(RVA = "0xBA4198", Offset = "0xBA4198", VA = "0xBA4198")]
			set
			{
			}
		}

		[Token(Token = "0x6002BA4")]
		[Address(RVA = "0xBA4320", Offset = "0xBA4320", VA = "0xBA4320")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002BA5")]
		[Address(RVA = "0xBA44E0", Offset = "0xBA44E0", VA = "0xBA44E0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002BA6")]
		[Address(RVA = "0xBA4220", Offset = "0xBA4220", VA = "0xBA4220")]
		private void AffectSelectionColor(Color[] newColors)
		{
		}

		[Token(Token = "0x6002BA7")]
		[Address(RVA = "0xBA45D0", Offset = "0xBA45D0", VA = "0xBA45D0")]
		public SelectionCylinder()
		{
		}
	}
	[Token(Token = "0x20004D0")]
	public class TrackSegment : MonoBehaviour
	{
		[Token(Token = "0x20006FB")]
		public enum SegmentType
		{
			[Token(Token = "0x40026D9")]
			Straight,
			[Token(Token = "0x40026DA")]
			LeftTurn,
			[Token(Token = "0x40026DB")]
			RightTurn,
			[Token(Token = "0x40026DC")]
			Switch
		}

		[Token(Token = "0x40018BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private SegmentType _segmentType;

		[Token(Token = "0x40018BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private MeshFilter _straight;

		[Token(Token = "0x40018C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MeshFilter _leftTurn;

		[Token(Token = "0x40018C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private MeshFilter _rightTurn;

		[Token(Token = "0x40018C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _gridSize;

		[Token(Token = "0x40018C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int _subDivCount;

		[Token(Token = "0x40018C4")]
		private const float _originalGridSize = 0.8f;

		[Token(Token = "0x40018C5")]
		private const float _trackWidth = 0.15f;

		[Token(Token = "0x40018C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject _mesh;

		[Token(Token = "0x40018C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824B08", Offset = "0x824B08")]
		private float <StartDistance>k__BackingField;

		[Token(Token = "0x40018C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Pose _p1;

		[Token(Token = "0x40018C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Pose _p2;

		[Token(Token = "0x40018CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Pose _endPose;

		[Token(Token = "0x1700063F")]
		public float StartDistance
		{
			[Token(Token = "0x6002BA9")]
			[Address(RVA = "0xBA463C", Offset = "0xBA463C", VA = "0xBA463C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8335B8", Offset = "0x8335B8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002BAA")]
			[Address(RVA = "0xBA4644", Offset = "0xBA4644", VA = "0xBA4644")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8335C8", Offset = "0x8335C8")]
			set
			{
			}
		}

		[Token(Token = "0x17000640")]
		public float GridSize
		{
			[Token(Token = "0x6002BAB")]
			[Address(RVA = "0xBA464C", Offset = "0xBA464C", VA = "0xBA464C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002BAC")]
			[Address(RVA = "0xBA4654", Offset = "0xBA4654", VA = "0xBA4654")]
			private set
			{
			}
		}

		[Token(Token = "0x17000641")]
		public int SubDivCount
		{
			[Token(Token = "0x6002BAD")]
			[Address(RVA = "0xBA465C", Offset = "0xBA465C", VA = "0xBA465C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002BAE")]
			[Address(RVA = "0xBA4664", Offset = "0xBA4664", VA = "0xBA4664")]
			set
			{
			}
		}

		[Token(Token = "0x17000642")]
		public SegmentType Type
		{
			[Token(Token = "0x6002BAF")]
			[Address(RVA = "0xBA466C", Offset = "0xBA466C", VA = "0xBA466C")]
			get
			{
				return default(SegmentType);
			}
		}

		[Token(Token = "0x17000643")]
		public Pose EndPose
		{
			[Token(Token = "0x6002BB0")]
			[Address(RVA = "0xBA4674", Offset = "0xBA4674", VA = "0xBA4674")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000644")]
		public float Radius
		{
			[Token(Token = "0x6002BB1")]
			[Address(RVA = "0xBA4B08", Offset = "0xBA4B08", VA = "0xBA4B08")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000645")]
		public float SegmentLength
		{
			[Token(Token = "0x6002BB3")]
			[Address(RVA = "0xBA46DC", Offset = "0xBA46DC", VA = "0xBA46DC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6002BB2")]
		[Address(RVA = "0xBA4B18", Offset = "0xBA4B18", VA = "0xBA4B18")]
		public float setGridSize(float size)
		{
			return default(float);
		}

		[Token(Token = "0x6002BB4")]
		[Address(RVA = "0xBA4B30", Offset = "0xBA4B30", VA = "0xBA4B30")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002BB5")]
		[Address(RVA = "0xBA471C", Offset = "0xBA471C", VA = "0xBA471C")]
		public void UpdatePose(float distanceIntoSegment, Pose pose)
		{
		}

		[Token(Token = "0x6002BB6")]
		[Address(RVA = "0xBA4B34", Offset = "0xBA4B34", VA = "0xBA4B34")]
		private void Update()
		{
		}

		[Token(Token = "0x6002BB7")]
		[Address(RVA = "0xBA4B38", Offset = "0xBA4B38", VA = "0xBA4B38")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002BB8")]
		[Address(RVA = "0xBA4BA4", Offset = "0xBA4BA4", VA = "0xBA4BA4")]
		private void DrawDebugLines()
		{
		}

		[Token(Token = "0x6002BB9")]
		[Address(RVA = "0xBA572C", Offset = "0xBA572C", VA = "0xBA572C")]
		public void RegenerateTrackAndMesh()
		{
		}

		[Token(Token = "0x6002BBA")]
		[Address(RVA = "0xBA5A38", Offset = "0xBA5A38", VA = "0xBA5A38")]
		public TrackSegment()
		{
		}
	}
	[Token(Token = "0x20004D1")]
	public class TrainButtonVisualController : MonoBehaviour
	{
		[Token(Token = "0x20006FC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820F40", Offset = "0x820F40")]
		private sealed class <ResetPosition>d__26 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40026DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40026DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40026DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TrainButtonVisualController <>4__this;

			[Token(Token = "0x40026E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <startTime>5__2;

			[Token(Token = "0x40026E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <endTime>5__3;

			[Token(Token = "0x1700070E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003672")]
				[Address(RVA = "0xE83214", Offset = "0xE83214", VA = "0xE83214", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700070F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003674")]
				[Address(RVA = "0xE8327C", Offset = "0xE8327C", VA = "0xE8327C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600366F")]
			[Address(RVA = "0xE82F8C", Offset = "0xE82F8C", VA = "0xE82F8C")]
			[DebuggerHidden]
			public <ResetPosition>d__26(int <>1__state)
			{
			}

			[Token(Token = "0x6003670")]
			[Address(RVA = "0xE83068", Offset = "0xE83068", VA = "0xE83068", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003671")]
			[Address(RVA = "0xE8306C", Offset = "0xE8306C", VA = "0xE8306C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003673")]
			[Address(RVA = "0xE8321C", Offset = "0xE8321C", VA = "0xE8321C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40018CB")]
		private const float LERP_TO_OLD_POS_DURATION = 1f;

		[Token(Token = "0x40018CC")]
		private const float LOCAL_SIZE_HALVED = 0.5f;

		[Token(Token = "0x40018CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer _meshRenderer;

		[Token(Token = "0x40018CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private MeshRenderer _glowRenderer;

		[Token(Token = "0x40018CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private ButtonController _buttonController;

		[Token(Token = "0x40018D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Color _buttonContactColor;

		[Token(Token = "0x40018D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Color _buttonActionColor;

		[Token(Token = "0x40018D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x40018D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private AudioClip _actionSoundEffect;

		[Token(Token = "0x40018D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Transform _buttonContactTransform;

		[Token(Token = "0x40018D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float _contactMaxDisplacementDistance;

		[Token(Token = "0x40018D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material _buttonMaterial;

		[Token(Token = "0x40018D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Color _buttonDefaultColor;

		[Token(Token = "0x40018D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _materialColorId;

		[Token(Token = "0x40018D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private bool _buttonInContactOrActionStates;

		[Token(Token = "0x40018DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Coroutine _lerpToOldPositionCr;

		[Token(Token = "0x40018DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 _oldPosition;

		[Token(Token = "0x6002BBB")]
		[Address(RVA = "0xE826A0", Offset = "0xE826A0", VA = "0xE826A0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002BBC")]
		[Address(RVA = "0xE8274C", Offset = "0xE8274C", VA = "0xE8274C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002BBD")]
		[Address(RVA = "0xE82800", Offset = "0xE82800", VA = "0xE82800")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002BBE")]
		[Address(RVA = "0xE82934", Offset = "0xE82934", VA = "0xE82934")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002BBF")]
		[Address(RVA = "0xE82AAC", Offset = "0xE82AAC", VA = "0xE82AAC")]
		private void ActionOrInContactZoneStayEvent(ColliderZoneArgs collisionArgs)
		{
		}

		[Token(Token = "0x6002BC0")]
		[Address(RVA = "0xE82C48", Offset = "0xE82C48", VA = "0xE82C48")]
		private void InteractableStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6002BC1")]
		[Address(RVA = "0xE82EC4", Offset = "0xE82EC4", VA = "0xE82EC4")]
		private void PlaySound(AudioClip clip)
		{
		}

		[Token(Token = "0x6002BC2")]
		[Address(RVA = "0xE82D5C", Offset = "0xE82D5C", VA = "0xE82D5C")]
		private void StopResetLerping()
		{
		}

		[Token(Token = "0x6002BC3")]
		[Address(RVA = "0xE82D70", Offset = "0xE82D70", VA = "0xE82D70")]
		private void LerpToOldPosition()
		{
		}

		[Token(Token = "0x6002BC4")]
		[Address(RVA = "0xE82F1C", Offset = "0xE82F1C", VA = "0xE82F1C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8335D8", Offset = "0x8335D8")]
		private IEnumerator ResetPosition()
		{
			return null;
		}

		[Token(Token = "0x6002BC5")]
		[Address(RVA = "0xE82FB8", Offset = "0xE82FB8", VA = "0xE82FB8")]
		public TrainButtonVisualController()
		{
		}
	}
	[Token(Token = "0x20004D2")]
	public class TrainCar : TrainCarBase
	{
		[Token(Token = "0x40018DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private TrainCarBase _parentLocomotive;

		[Token(Token = "0x40018DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		protected float _distanceBehindParent;

		[Token(Token = "0x17000646")]
		public float DistanceBehindParentScaled
		{
			[Token(Token = "0x6002BC6")]
			[Address(RVA = "0xE83284", Offset = "0xE83284", VA = "0xE83284")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6002BC7")]
		[Address(RVA = "0xE83294", Offset = "0xE83294", VA = "0xE83294", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6002BC8")]
		[Address(RVA = "0xE8329C", Offset = "0xE8329C", VA = "0xE8329C", Slot = "5")]
		public override void UpdatePosition()
		{
		}

		[Token(Token = "0x6002BC9")]
		[Address(RVA = "0xE83708", Offset = "0xE83708", VA = "0xE83708")]
		public TrainCar()
		{
		}
	}
	[Token(Token = "0x20004D3")]
	public abstract class TrainCarBase : MonoBehaviour
	{
		[Token(Token = "0x40018DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector3 OFFSET;

		[Token(Token = "0x40018DF")]
		private const float WHEEL_RADIUS = 0.027f;

		[Token(Token = "0x40018E0")]
		private const float TWO_PI = (float)Math.PI * 2f;

		[Token(Token = "0x40018E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected Transform _frontWheels;

		[Token(Token = "0x40018E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected Transform _rearWheels;

		[Token(Token = "0x40018E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		protected TrainTrack _trainTrack;

		[Token(Token = "0x40018E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected Transform[] _individualWheels;

		[Token(Token = "0x40018E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824C08", Offset = "0x824C08")]
		private float <Distance>k__BackingField;

		[Token(Token = "0x40018E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected float scale;

		[Token(Token = "0x40018E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Pose _frontPose;

		[Token(Token = "0x40018E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Pose _rearPose;

		[Token(Token = "0x17000647")]
		public float Distance
		{
			[Token(Token = "0x6002BCA")]
			[Address(RVA = "0xE83808", Offset = "0xE83808", VA = "0xE83808")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x83363C", Offset = "0x83363C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002BCB")]
			[Address(RVA = "0xE83810", Offset = "0xE83810", VA = "0xE83810")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x83364C", Offset = "0x83364C")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000648")]
		public float Scale
		{
			[Token(Token = "0x6002BCC")]
			[Address(RVA = "0xE83818", Offset = "0xE83818", VA = "0xE83818")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002BCD")]
			[Address(RVA = "0xE83820", Offset = "0xE83820", VA = "0xE83820")]
			set
			{
			}
		}

		[Token(Token = "0x6002BCE")]
		[Address(RVA = "0xE83298", Offset = "0xE83298", VA = "0xE83298", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6002BCF")]
		[Address(RVA = "0xE83828", Offset = "0xE83828", VA = "0xE83828")]
		public void UpdatePose(float distance, TrainCarBase train, Pose pose)
		{
		}

		[Token(Token = "0x6002BD0")]
		[Address(RVA = "0xE832E4", Offset = "0xE832E4", VA = "0xE832E4")]
		protected void UpdateCarPosition()
		{
		}

		[Token(Token = "0x6002BD1")]
		[Address(RVA = "0xE835BC", Offset = "0xE835BC", VA = "0xE835BC")]
		protected void RotateCarWheels()
		{
		}

		[Token(Token = "0x6002BD2")]
		public abstract void UpdatePosition();

		[Token(Token = "0x6002BD3")]
		[Address(RVA = "0xE83778", Offset = "0xE83778", VA = "0xE83778")]
		protected TrainCarBase()
		{
		}
	}
	[Token(Token = "0x20004D4")]
	public class TrainCrossingController : MonoBehaviour
	{
		[Token(Token = "0x20006FD")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820F50", Offset = "0x820F50")]
		private sealed class <AnimateCrossing>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40026E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40026E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40026E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TrainCrossingController <>4__this;

			[Token(Token = "0x40026E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float animationLength;

			[Token(Token = "0x40026E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <animationEndTime>5__2;

			[Token(Token = "0x40026E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <lightBlinkDuration>5__3;

			[Token(Token = "0x40026E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <lightBlinkStartTime>5__4;

			[Token(Token = "0x40026E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <lightBlinkEndTime>5__5;

			[Token(Token = "0x40026EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Material <lightToBlinkOn>5__6;

			[Token(Token = "0x40026EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Material <lightToBlinkOff>5__7;

			[Token(Token = "0x40026EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private Color <onColor>5__8;

			[Token(Token = "0x40026ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Color <offColor>5__9;

			[Token(Token = "0x17000710")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003678")]
				[Address(RVA = "0xE841B8", Offset = "0xE841B8", VA = "0xE841B8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000711")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600367A")]
				[Address(RVA = "0xE84220", Offset = "0xE84220", VA = "0xE84220", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003675")]
			[Address(RVA = "0xE83DFC", Offset = "0xE83DFC", VA = "0xE83DFC")]
			[DebuggerHidden]
			public <AnimateCrossing>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6003676")]
			[Address(RVA = "0xE83F94", Offset = "0xE83F94", VA = "0xE83F94", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003677")]
			[Address(RVA = "0xE83F98", Offset = "0xE83F98", VA = "0xE83F98", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003679")]
			[Address(RVA = "0xE841C0", Offset = "0xE841C0", VA = "0xE841C0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40018E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x40018EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioClip[] _crossingSounds;

		[Token(Token = "0x40018EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MeshRenderer _lightSide1Renderer;

		[Token(Token = "0x40018EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private MeshRenderer _lightSide2Renderer;

		[Token(Token = "0x40018ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private SelectionCylinder _selectionCylinder;

		[Token(Token = "0x40018EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material _lightsSide1Mat;

		[Token(Token = "0x40018EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material _lightsSide2Mat;

		[Token(Token = "0x40018F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int _colorId;

		[Token(Token = "0x40018F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Coroutine _xingAnimationCr;

		[Token(Token = "0x40018F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private InteractableTool _toolInteractingWithMe;

		[Token(Token = "0x6002BD5")]
		[Address(RVA = "0xE839FC", Offset = "0xE839FC", VA = "0xE839FC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002BD6")]
		[Address(RVA = "0xE83A48", Offset = "0xE83A48", VA = "0xE83A48")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002BD7")]
		[Address(RVA = "0xE83B54", Offset = "0xE83B54", VA = "0xE83B54")]
		public void CrossingButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6002BD8")]
		[Address(RVA = "0xE83C9C", Offset = "0xE83C9C", VA = "0xE83C9C")]
		private void Update()
		{
		}

		[Token(Token = "0x6002BD9")]
		[Address(RVA = "0xE83BB0", Offset = "0xE83BB0", VA = "0xE83BB0")]
		private void ActivateTrainCrossing()
		{
		}

		[Token(Token = "0x6002BDA")]
		[Address(RVA = "0xE83D7C", Offset = "0xE83D7C", VA = "0xE83D7C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x83365C", Offset = "0x83365C")]
		private IEnumerator AnimateCrossing(float animationLength)
		{
			return null;
		}

		[Token(Token = "0x6002BDB")]
		[Address(RVA = "0xE83E28", Offset = "0xE83E28", VA = "0xE83E28")]
		private void AffectMaterials(Material[] materials, Color newColor)
		{
		}

		[Token(Token = "0x6002BDC")]
		[Address(RVA = "0xE83ED4", Offset = "0xE83ED4", VA = "0xE83ED4")]
		private void ToggleLightObjects(bool enableState)
		{
		}

		[Token(Token = "0x6002BDD")]
		[Address(RVA = "0xE83F34", Offset = "0xE83F34", VA = "0xE83F34")]
		public TrainCrossingController()
		{
		}
	}
	[Token(Token = "0x20004D5")]
	public class TrainLocomotive : TrainCarBase
	{
		[Token(Token = "0x20006FE")]
		private enum EngineSoundState
		{
			[Token(Token = "0x40026EF")]
			Start,
			[Token(Token = "0x40026F0")]
			AccelerateOrSetProperSpeed,
			[Token(Token = "0x40026F1")]
			Stop
		}

		[Token(Token = "0x20006FF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820F60", Offset = "0x820F60")]
		private sealed class <StartStopTrain>d__34 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40026F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40026F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40026F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool startTrain;

			[Token(Token = "0x40026F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public TrainLocomotive <>4__this;

			[Token(Token = "0x40026F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <endSpeed>5__2;

			[Token(Token = "0x40026F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <timePeriodForSpeedChange>5__3;

			[Token(Token = "0x40026F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <startTime>5__4;

			[Token(Token = "0x40026F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <endTime>5__5;

			[Token(Token = "0x40026FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <startSpeed>5__6;

			[Token(Token = "0x17000712")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600367E")]
				[Address(RVA = "0xE84E60", Offset = "0xE84E60", VA = "0xE84E60", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000713")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003680")]
				[Address(RVA = "0xE84EC8", Offset = "0xE84EC8", VA = "0xE84EC8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600367B")]
			[Address(RVA = "0xE8452C", Offset = "0xE8452C", VA = "0xE8452C")]
			[DebuggerHidden]
			public <StartStopTrain>d__34(int <>1__state)
			{
			}

			[Token(Token = "0x600367C")]
			[Address(RVA = "0xE84C40", Offset = "0xE84C40", VA = "0xE84C40", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600367D")]
			[Address(RVA = "0xE84C44", Offset = "0xE84C44", VA = "0xE84C44", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600367F")]
			[Address(RVA = "0xE84E68", Offset = "0xE84E68", VA = "0xE84E68", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40018F3")]
		private const float MIN_SPEED = 0.2f;

		[Token(Token = "0x40018F4")]
		private const float MAX_SPEED = 2.7f;

		[Token(Token = "0x40018F5")]
		private const float SMOKE_SPEED_MULTIPLIER = 8f;

		[Token(Token = "0x40018F6")]
		private const int MAX_PARTICLES_MULTIPLIER = 3;

		[Token(Token = "0x40018F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x824C68", Offset = "0x824C68")]
		protected float _initialSpeed;

		[Token(Token = "0x40018F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject _startStopButton;

		[Token(Token = "0x40018F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private GameObject _decreaseSpeedButton;

		[Token(Token = "0x40018FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private GameObject _increaseSpeedButton;

		[Token(Token = "0x40018FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private GameObject _smokeButton;

		[Token(Token = "0x40018FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private GameObject _whistleButton;

		[Token(Token = "0x40018FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private GameObject _reverseButton;

		[Token(Token = "0x40018FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private AudioSource _whistleAudioSource;

		[Token(Token = "0x40018FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private AudioClip _whistleSound;

		[Token(Token = "0x4001900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private AudioSource _engineAudioSource;

		[Token(Token = "0x4001901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private AudioClip[] _accelerationSounds;

		[Token(Token = "0x4001902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private AudioClip[] _decelerationSounds;

		[Token(Token = "0x4001903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private AudioClip _startUpSound;

		[Token(Token = "0x4001904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private AudioSource _smokeStackAudioSource;

		[Token(Token = "0x4001905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private AudioClip _smokeSound;

		[Token(Token = "0x4001906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private ParticleSystem _smoke1;

		[Token(Token = "0x4001907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private ParticleSystem _smoke2;

		[Token(Token = "0x4001908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private TrainCarBase[] _childCars;

		[Token(Token = "0x4001909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool _isMoving;

		[Token(Token = "0x400190A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
		private bool _reverse;

		[Token(Token = "0x400190B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float _currentSpeed;

		[Token(Token = "0x400190C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float _speedDiv;

		[Token(Token = "0x400190D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float _standardRateOverTimeMultiplier;

		[Token(Token = "0x400190E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private int _standardMaxParticles;

		[Token(Token = "0x400190F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Coroutine _startStopTrainCr;

		[Token(Token = "0x6002BDE")]
		[Address(RVA = "0xE84228", Offset = "0xE84228", VA = "0xE84228")]
		private void Start()
		{
		}

		[Token(Token = "0x6002BDF")]
		[Address(RVA = "0xE84380", Offset = "0xE84380", VA = "0xE84380")]
		private void Update()
		{
		}

		[Token(Token = "0x6002BE0")]
		[Address(RVA = "0xE8438C", Offset = "0xE8438C", VA = "0xE8438C", Slot = "5")]
		public override void UpdatePosition()
		{
		}

		[Token(Token = "0x6002BE1")]
		[Address(RVA = "0xE844E0", Offset = "0xE844E0", VA = "0xE844E0")]
		public void StartStopStateChanged()
		{
		}

		[Token(Token = "0x6002BE2")]
		[Address(RVA = "0xE842FC", Offset = "0xE842FC", VA = "0xE842FC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8336C0", Offset = "0x8336C0")]
		private IEnumerator StartStopTrain(bool startTrain)
		{
			return null;
		}

		[Token(Token = "0x6002BE3")]
		[Address(RVA = "0xE84558", Offset = "0xE84558", VA = "0xE84558")]
		private float PlayEngineSound(EngineSoundState engineSoundState)
		{
			return default(float);
		}

		[Token(Token = "0x6002BE4")]
		[Address(RVA = "0xE8447C", Offset = "0xE8447C", VA = "0xE8447C")]
		private void UpdateDistance()
		{
		}

		[Token(Token = "0x6002BE5")]
		[Address(RVA = "0xE8478C", Offset = "0xE8478C", VA = "0xE8478C")]
		public void DecreaseSpeedStateChanged()
		{
		}

		[Token(Token = "0x6002BE6")]
		[Address(RVA = "0xE84938", Offset = "0xE84938", VA = "0xE84938")]
		public void IncreaseSpeedStateChanged()
		{
		}

		[Token(Token = "0x6002BE7")]
		[Address(RVA = "0xE84848", Offset = "0xE84848", VA = "0xE84848")]
		private void UpdateSmokeEmissionBasedOnSpeed()
		{
		}

		[Token(Token = "0x6002BE8")]
		[Address(RVA = "0xE849F4", Offset = "0xE849F4", VA = "0xE849F4")]
		private float GetCurrentSmokeEmission()
		{
			return default(float);
		}

		[Token(Token = "0x6002BE9")]
		[Address(RVA = "0xE84A7C", Offset = "0xE84A7C", VA = "0xE84A7C")]
		public void SmokeButtonStateChanged()
		{
		}

		[Token(Token = "0x6002BEA")]
		[Address(RVA = "0xE84B08", Offset = "0xE84B08", VA = "0xE84B08")]
		public void WhistleButtonStateChanged()
		{
		}

		[Token(Token = "0x6002BEB")]
		[Address(RVA = "0xE84BC4", Offset = "0xE84BC4", VA = "0xE84BC4")]
		public void ReverseButtonStateChanged()
		{
		}

		[Token(Token = "0x6002BEC")]
		[Address(RVA = "0xE84BD4", Offset = "0xE84BD4", VA = "0xE84BD4")]
		public TrainLocomotive()
		{
		}
	}
	[Token(Token = "0x20004D6")]
	public class TrainTrack : MonoBehaviour
	{
		[Token(Token = "0x4001910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _gridSize;

		[Token(Token = "0x4001911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private int _subDivCount;

		[Token(Token = "0x4001912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform _segmentParent;

		[Token(Token = "0x4001913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform _trainParent;

		[Token(Token = "0x4001914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private bool _regnerateTrackMeshOnAwake;

		[Token(Token = "0x4001915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float _trainLength;

		[Token(Token = "0x4001916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TrackSegment[] _trackSegments;

		[Token(Token = "0x17000649")]
		public float TrackLength
		{
			[Token(Token = "0x6002BED")]
			[Address(RVA = "0xE84ED0", Offset = "0xE84ED0", VA = "0xE84ED0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002BEE")]
			[Address(RVA = "0xE84ED8", Offset = "0xE84ED8", VA = "0xE84ED8")]
			private set
			{
			}
		}

		[Token(Token = "0x6002BEF")]
		[Address(RVA = "0xE84EE0", Offset = "0xE84EE0", VA = "0xE84EE0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002BF0")]
		[Address(RVA = "0xE838AC", Offset = "0xE838AC", VA = "0xE838AC")]
		public TrackSegment GetSegment(float distance)
		{
			return null;
		}

		[Token(Token = "0x6002BF1")]
		[Address(RVA = "0xE84EE4", Offset = "0xE84EE4", VA = "0xE84EE4")]
		public void Regenerate()
		{
		}

		[Token(Token = "0x6002BF2")]
		[Address(RVA = "0xE850B0", Offset = "0xE850B0", VA = "0xE850B0")]
		private void SetScale(float ratio)
		{
		}

		[Token(Token = "0x6002BF3")]
		[Address(RVA = "0xE851CC", Offset = "0xE851CC", VA = "0xE851CC")]
		public TrainTrack()
		{
		}
	}
	[Token(Token = "0x20004D7")]
	public class Pose
	{
		[Token(Token = "0x4001917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 Position;

		[Token(Token = "0x4001918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion Rotation;

		[Token(Token = "0x6002BF4")]
		[Address(RVA = "0xBA2360", Offset = "0xBA2360", VA = "0xBA2360")]
		public Pose()
		{
		}

		[Token(Token = "0x6002BF5")]
		[Address(RVA = "0xBA240C", Offset = "0xBA240C", VA = "0xBA240C")]
		public Pose(Vector3 position, Quaternion rotation)
		{
		}
	}
	[Token(Token = "0x20004D8")]
	public class WindmillBladesController : MonoBehaviour
	{
		[Token(Token = "0x2000700")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820F70", Offset = "0x820F70")]
		private sealed class <LerpToSpeed>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40026FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40026FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40026FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WindmillBladesController <>4__this;

			[Token(Token = "0x40026FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float goalSpeed;

			[Token(Token = "0x40026FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <totalTime>5__2;

			[Token(Token = "0x4002700")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <startSpeed>5__3;

			[Token(Token = "0x17000714")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003684")]
				[Address(RVA = "0xE857B0", Offset = "0xE857B0", VA = "0xE857B0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000715")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003686")]
				[Address(RVA = "0xE85818", Offset = "0xE85818", VA = "0xE85818", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003681")]
			[Address(RVA = "0xE85474", Offset = "0xE85474", VA = "0xE85474")]
			[DebuggerHidden]
			public <LerpToSpeed>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x6003682")]
			[Address(RVA = "0xE855D4", Offset = "0xE855D4", VA = "0xE855D4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003683")]
			[Address(RVA = "0xE855D8", Offset = "0xE855D8", VA = "0xE855D8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003685")]
			[Address(RVA = "0xE857B8", Offset = "0xE857B8", VA = "0xE857B8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000701")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820F80", Offset = "0x820F80")]
		private sealed class <PlaySoundDelayed>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002701")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002702")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002703")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WindmillBladesController <>4__this;

			[Token(Token = "0x4002704")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AudioClip initial;

			[Token(Token = "0x4002705")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float timeDelayAfterInitial;

			[Token(Token = "0x4002706")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public AudioClip clip;

			[Token(Token = "0x17000716")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600368A")]
				[Address(RVA = "0xE858EC", Offset = "0xE858EC", VA = "0xE858EC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000717")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600368C")]
				[Address(RVA = "0xE85954", Offset = "0xE85954", VA = "0xE85954", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003687")]
			[Address(RVA = "0xE85534", Offset = "0xE85534", VA = "0xE85534")]
			[DebuggerHidden]
			public <PlaySoundDelayed>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x6003688")]
			[Address(RVA = "0xE85820", Offset = "0xE85820", VA = "0xE85820", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003689")]
			[Address(RVA = "0xE85824", Offset = "0xE85824", VA = "0xE85824", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600368B")]
			[Address(RVA = "0xE858F4", Offset = "0xE858F4", VA = "0xE858F4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001919")]
		private const float MAX_TIME = 1f;

		[Token(Token = "0x400191A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x400191B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioClip _windMillRotationSound;

		[Token(Token = "0x400191C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private AudioClip _windMillStartSound;

		[Token(Token = "0x400191D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private AudioClip _windMillStopSound;

		[Token(Token = "0x400191E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x824E50", Offset = "0x824E50")]
		private bool <IsMoving>k__BackingField;

		[Token(Token = "0x400191F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float _currentSpeed;

		[Token(Token = "0x4001920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Coroutine _lerpSpeedCoroutine;

		[Token(Token = "0x4001921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Coroutine _audioChangeCr;

		[Token(Token = "0x4001922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion _originalRotation;

		[Token(Token = "0x4001923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float _rotAngle;

		[Token(Token = "0x1700064A")]
		public bool IsMoving
		{
			[Token(Token = "0x6002BF6")]
			[Address(RVA = "0xE851E8", Offset = "0xE851E8", VA = "0xE851E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833724", Offset = "0x833724")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002BF7")]
			[Address(RVA = "0xE851F0", Offset = "0xE851F0", VA = "0xE851F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833734", Offset = "0x833734")]
			private set
			{
			}
		}

		[Token(Token = "0x6002BF8")]
		[Address(RVA = "0xE851FC", Offset = "0xE851FC", VA = "0xE851FC")]
		private void Start()
		{
		}

		[Token(Token = "0x6002BF9")]
		[Address(RVA = "0xE85238", Offset = "0xE85238", VA = "0xE85238")]
		private void Update()
		{
		}

		[Token(Token = "0x6002BFA")]
		[Address(RVA = "0xE8538C", Offset = "0xE8538C", VA = "0xE8538C")]
		public void SetMoveState(bool newMoveState, float goalSpeed)
		{
		}

		[Token(Token = "0x6002BFB")]
		[Address(RVA = "0xE853F4", Offset = "0xE853F4", VA = "0xE853F4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x833744", Offset = "0x833744")]
		private IEnumerator LerpToSpeed(float goalSpeed)
		{
			return null;
		}

		[Token(Token = "0x6002BFC")]
		[Address(RVA = "0xE854A0", Offset = "0xE854A0", VA = "0xE854A0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8337A8", Offset = "0x8337A8")]
		private IEnumerator PlaySoundDelayed(AudioClip initial, AudioClip clip, float timeDelayAfterInitial)
		{
			return null;
		}

		[Token(Token = "0x6002BFD")]
		[Address(RVA = "0xE85560", Offset = "0xE85560", VA = "0xE85560")]
		private void PlaySound(AudioClip clip, bool loop = false)
		{
		}

		[Token(Token = "0x6002BFE")]
		[Address(RVA = "0xE855CC", Offset = "0xE855CC", VA = "0xE855CC")]
		public WindmillBladesController()
		{
		}
	}
	[Token(Token = "0x20004D9")]
	public class WindmillController : MonoBehaviour
	{
		[Token(Token = "0x4001924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _startStopButton;

		[Token(Token = "0x4001925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _maxSpeed;

		[Token(Token = "0x4001926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private SelectionCylinder _selectionCylinder;

		[Token(Token = "0x4001927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private WindmillBladesController _bladesRotation;

		[Token(Token = "0x4001928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private InteractableTool _toolInteractingWithMe;

		[Token(Token = "0x6002BFF")]
		[Address(RVA = "0xE8595C", Offset = "0xE8595C", VA = "0xE8595C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002C00")]
		[Address(RVA = "0xE859C4", Offset = "0xE859C4", VA = "0xE859C4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002C01")]
		[Address(RVA = "0xE85A7C", Offset = "0xE85A7C", VA = "0xE85A7C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002C02")]
		[Address(RVA = "0xE85B7C", Offset = "0xE85B7C", VA = "0xE85B7C")]
		private void StartStopStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6002C03")]
		[Address(RVA = "0xE85BF8", Offset = "0xE85BF8", VA = "0xE85BF8")]
		private void Update()
		{
		}

		[Token(Token = "0x6002C04")]
		[Address(RVA = "0xE85CD8", Offset = "0xE85CD8", VA = "0xE85CD8")]
		public WindmillController()
		{
		}
	}
	[Token(Token = "0x20004DA")]
	public enum EUiDisplayType
	{
		[Token(Token = "0x400192A")]
		EUDT_WorldGeoQuad,
		[Token(Token = "0x400192B")]
		EUDT_OverlayQuad,
		[Token(Token = "0x400192C")]
		EUDT_None,
		[Token(Token = "0x400192D")]
		EUDT_MaxDislayTypes
	}
	[Token(Token = "0x20004DB")]
	public class OVROverlaySample : MonoBehaviour
	{
		[Token(Token = "0x2000702")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820F90", Offset = "0x820F90")]
		private sealed class <WaitforOVROverlay>d__30 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002707")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002708")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002709")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OVROverlaySample <>4__this;

			[Token(Token = "0x17000718")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003690")]
				[Address(RVA = "0xBA178C", Offset = "0xBA178C", VA = "0xBA178C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000719")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003692")]
				[Address(RVA = "0xBA17F4", Offset = "0xBA17F4", VA = "0xBA17F4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600368D")]
			[Address(RVA = "0xBA0E08", Offset = "0xBA0E08", VA = "0xBA0E08")]
			[DebuggerHidden]
			public <WaitforOVROverlay>d__30(int <>1__state)
			{
			}

			[Token(Token = "0x600368E")]
			[Address(RVA = "0xBA1540", Offset = "0xBA1540", VA = "0xBA1540", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600368F")]
			[Address(RVA = "0xBA1544", Offset = "0xBA1544", VA = "0xBA1544", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003691")]
			[Address(RVA = "0xBA1794", Offset = "0xBA1794", VA = "0xBA1794", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400192E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool inMenu;

		[Token(Token = "0x400192F")]
		private const string ovrOverlayID = "OVROverlayID";

		[Token(Token = "0x4001930")]
		private const string applicationID = "ApplicationID";

		[Token(Token = "0x4001931")]
		private const string noneID = "NoneID";

		[Token(Token = "0x4001932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Toggle applicationRadioButton;

		[Token(Token = "0x4001933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Toggle noneRadioButton;

		[Token(Token = "0x4001934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x824E90", Offset = "0x824E90")]
		public GameObject mainCamera;

		[Token(Token = "0x4001935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject uiCamera;

		[Token(Token = "0x4001936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject uiGeoParent;

		[Token(Token = "0x4001937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject worldspaceGeoParent;

		[Token(Token = "0x4001938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public OVROverlay cameraRenderOverlay;

		[Token(Token = "0x4001939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public OVROverlay renderingLabelOverlay;

		[Token(Token = "0x400193A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Texture applicationLabelTexture;

		[Token(Token = "0x400193B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Texture compositorLabelTexture;

		[Token(Token = "0x400193C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x824EC8", Offset = "0x824EC8")]
		public GameObject prefabForLevelLoadSim;

		[Token(Token = "0x400193D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public OVROverlay cubemapOverlay;

		[Token(Token = "0x400193E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public OVROverlay loadingTextQuadOverlay;

		[Token(Token = "0x400193F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float distanceFromCamToLoadText;

		[Token(Token = "0x4001940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float cubeSpawnRadius;

		[Token(Token = "0x4001941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float heightBetweenItems;

		[Token(Token = "0x4001942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public int numObjectsPerLevel;

		[Token(Token = "0x4001943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public int numLevels;

		[Token(Token = "0x4001944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public int numLoopsTrigger;

		[Token(Token = "0x4001945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<GameObject> spawnedCubes;

		[Token(Token = "0x6002C05")]
		[Address(RVA = "0xBA0150", Offset = "0xBA0150", VA = "0xBA0150")]
		private void Start()
		{
		}

		[Token(Token = "0x6002C06")]
		[Address(RVA = "0xBA0930", Offset = "0xBA0930", VA = "0xBA0930")]
		private void Update()
		{
		}

		[Token(Token = "0x6002C07")]
		[Address(RVA = "0xBA0A70", Offset = "0xBA0A70", VA = "0xBA0A70")]
		private void ActivateWorldGeo()
		{
		}

		[Token(Token = "0x6002C08")]
		[Address(RVA = "0xBA0B98", Offset = "0xBA0B98", VA = "0xBA0B98")]
		private void ActivateOVROverlay()
		{
		}

		[Token(Token = "0x6002C09")]
		[Address(RVA = "0xBA0CC0", Offset = "0xBA0CC0", VA = "0xBA0CC0")]
		private void ActivateNone()
		{
		}

		[Token(Token = "0x6002C0A")]
		[Address(RVA = "0xBA0A44", Offset = "0xBA0A44", VA = "0xBA0A44")]
		private void TriggerLoad()
		{
		}

		[Token(Token = "0x6002C0B")]
		[Address(RVA = "0xBA0D98", Offset = "0xBA0D98", VA = "0xBA0D98")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x83380C", Offset = "0x83380C")]
		private IEnumerator WaitforOVROverlay()
		{
			return null;
		}

		[Token(Token = "0x6002C0C")]
		[Address(RVA = "0xBA0E34", Offset = "0xBA0E34", VA = "0xBA0E34")]
		private void TriggerUnload()
		{
		}

		[Token(Token = "0x6002C0D")]
		[Address(RVA = "0xBA04BC", Offset = "0xBA04BC", VA = "0xBA04BC")]
		private void CameraAndRenderTargetSetup()
		{
		}

		[Token(Token = "0x6002C0E")]
		[Address(RVA = "0xBA0F5C", Offset = "0xBA0F5C", VA = "0xBA0F5C")]
		private void SimulateLevelLoad()
		{
		}

		[Token(Token = "0x6002C0F")]
		[Address(RVA = "0xBA0E68", Offset = "0xBA0E68", VA = "0xBA0E68")]
		private void ClearObjects()
		{
		}

		[Token(Token = "0x6002C10")]
		[Address(RVA = "0xBA12F8", Offset = "0xBA12F8", VA = "0xBA12F8")]
		public void RadioPressed(string radioLabel, string group, Toggle t)
		{
		}

		[Token(Token = "0x6002C11")]
		[Address(RVA = "0xBA13D4", Offset = "0xBA13D4", VA = "0xBA13D4")]
		public OVROverlaySample()
		{
		}

		[Token(Token = "0x6002C12")]
		[Address(RVA = "0xBA1450", Offset = "0xBA1450", VA = "0xBA1450")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833870", Offset = "0x833870")]
		private void <Start>b__24_0(Toggle t)
		{
		}

		[Token(Token = "0x6002C13")]
		[Address(RVA = "0xBA14A0", Offset = "0xBA14A0", VA = "0xBA14A0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833880", Offset = "0x833880")]
		private void <Start>b__24_1(Toggle t)
		{
		}

		[Token(Token = "0x6002C14")]
		[Address(RVA = "0xBA14F0", Offset = "0xBA14F0", VA = "0xBA14F0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833890", Offset = "0x833890")]
		private void <Start>b__24_2(Toggle t)
		{
		}
	}
}
namespace OVRTouchSample
{
	[Token(Token = "0x20004DC")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x81F580", Offset = "0x81F580")]
	public class Hand : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000703")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820FA0", Offset = "0x820FA0")]
		private sealed class <>c
		{
			[Token(Token = "0x400270A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400270B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<Collider, bool> <>9__28_0;

			[Token(Token = "0x6003694")]
			[Address(RVA = "0xB8E670", Offset = "0xB8E670", VA = "0xB8E670")]
			public <>c()
			{
			}

			[Token(Token = "0x6003695")]
			[Address(RVA = "0xB8E678", Offset = "0xB8E678", VA = "0xB8E678")]
			internal bool <Start>b__28_0(Collider childCollider)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4001946")]
		public const string ANIM_LAYER_NAME_POINT = "Point Layer";

		[Token(Token = "0x4001947")]
		public const string ANIM_LAYER_NAME_THUMB = "Thumb Layer";

		[Token(Token = "0x4001948")]
		public const string ANIM_PARAM_NAME_FLEX = "Flex";

		[Token(Token = "0x4001949")]
		public const string ANIM_PARAM_NAME_POSE = "Pose";

		[Token(Token = "0x400194A")]
		public const float THRESH_COLLISION_FLEX = 0.9f;

		[Token(Token = "0x400194B")]
		public const float INPUT_RATE_CHANGE = 20f;

		[Token(Token = "0x400194C")]
		public const float COLLIDER_SCALE_MIN = 0.01f;

		[Token(Token = "0x400194D")]
		public const float COLLIDER_SCALE_MAX = 1f;

		[Token(Token = "0x400194E")]
		public const float COLLIDER_SCALE_PER_SECOND = 1f;

		[Token(Token = "0x400194F")]
		public const float TRIGGER_DEBOUNCE_TIME = 0.05f;

		[Token(Token = "0x4001950")]
		public const float THUMB_DEBOUNCE_TIME = 0.15f;

		[Token(Token = "0x4001951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private OVRInput.Controller m_controller;

		[Token(Token = "0x4001952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Animator m_animator;

		[Token(Token = "0x4001953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private HandPose m_defaultGrabPose;

		[Token(Token = "0x4001954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Collider[] m_colliders;

		[Token(Token = "0x4001955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool m_collisionEnabled;

		[Token(Token = "0x4001956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private OVRGrabber m_grabber;

		[Token(Token = "0x4001957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Renderer> m_showAfterInputFocusAcquired;

		[Token(Token = "0x4001958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int m_animLayerIndexThumb;

		[Token(Token = "0x4001959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int m_animLayerIndexPoint;

		[Token(Token = "0x400195A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int m_animParamIndexFlex;

		[Token(Token = "0x400195B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int m_animParamIndexPose;

		[Token(Token = "0x400195C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool m_isPointing;

		[Token(Token = "0x400195D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool m_isGivingThumbsUp;

		[Token(Token = "0x400195E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float m_pointBlend;

		[Token(Token = "0x400195F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float m_thumbsUpBlend;

		[Token(Token = "0x4001960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool m_restoreOnInputAcquired;

		[Token(Token = "0x4001961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float m_collisionScaleCurrent;

		[Token(Token = "0x6002C15")]
		[Address(RVA = "0xB8D8B4", Offset = "0xB8D8B4", VA = "0xB8D8B4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002C16")]
		[Address(RVA = "0xB8D90C", Offset = "0xB8D90C", VA = "0xB8D90C")]
		private void Start()
		{
		}

		[Token(Token = "0x6002C17")]
		[Address(RVA = "0xB8DD14", Offset = "0xB8DD14", VA = "0xB8DD14")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002C18")]
		[Address(RVA = "0xB8DDE0", Offset = "0xB8DDE0", VA = "0xB8DDE0")]
		private void Update()
		{
		}

		[Token(Token = "0x6002C19")]
		[Address(RVA = "0xB8DEEC", Offset = "0xB8DEEC", VA = "0xB8DEEC")]
		private void UpdateCapTouchStates()
		{
		}

		[Token(Token = "0x6002C1A")]
		[Address(RVA = "0xB8E224", Offset = "0xB8E224", VA = "0xB8E224")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6002C1B")]
		[Address(RVA = "0xB8E38C", Offset = "0xB8E38C", VA = "0xB8E38C")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x6002C1C")]
		[Address(RVA = "0xB8E4D8", Offset = "0xB8E4D8", VA = "0xB8E4D8")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x6002C1D")]
		[Address(RVA = "0xB8DF88", Offset = "0xB8DF88", VA = "0xB8DF88")]
		private float InputValueRateChange(bool isDown, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6002C1E")]
		[Address(RVA = "0xB8E028", Offset = "0xB8E028", VA = "0xB8E028")]
		private void UpdateAnimStates()
		{
		}

		[Token(Token = "0x6002C1F")]
		[Address(RVA = "0xB8DB68", Offset = "0xB8DB68", VA = "0xB8DB68")]
		private void CollisionEnable(bool enabled)
		{
		}

		[Token(Token = "0x6002C20")]
		[Address(RVA = "0xB8E5F4", Offset = "0xB8E5F4", VA = "0xB8E5F4")]
		public Hand()
		{
		}
	}
	[Token(Token = "0x20004DD")]
	public enum HandPoseId
	{
		[Token(Token = "0x4001963")]
		Default,
		[Token(Token = "0x4001964")]
		Generic,
		[Token(Token = "0x4001965")]
		PingPongBall,
		[Token(Token = "0x4001966")]
		Controller
	}
	[Token(Token = "0x20004DE")]
	public class HandPose : MonoBehaviour
	{
		[Token(Token = "0x4001967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool m_allowPointing;

		[Token(Token = "0x4001968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[SerializeField]
		private bool m_allowThumbsUp;

		[Token(Token = "0x4001969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private HandPoseId m_poseId;

		[Token(Token = "0x1700064B")]
		public bool AllowPointing
		{
			[Token(Token = "0x6002C21")]
			[Address(RVA = "0xB8E6A4", Offset = "0xB8E6A4", VA = "0xB8E6A4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700064C")]
		public bool AllowThumbsUp
		{
			[Token(Token = "0x6002C22")]
			[Address(RVA = "0xB8E6AC", Offset = "0xB8E6AC", VA = "0xB8E6AC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700064D")]
		public HandPoseId PoseId
		{
			[Token(Token = "0x6002C23")]
			[Address(RVA = "0xB8E6B4", Offset = "0xB8E6B4", VA = "0xB8E6B4")]
			get
			{
				return default(HandPoseId);
			}
		}

		[Token(Token = "0x6002C24")]
		[Address(RVA = "0xB8E6BC", Offset = "0xB8E6BC", VA = "0xB8E6BC")]
		public HandPose()
		{
		}
	}
	[Token(Token = "0x20004DF")]
	public class TouchController : MonoBehaviour
	{
		[Token(Token = "0x400196A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private OVRInput.Controller m_controller;

		[Token(Token = "0x400196B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Animator m_animator;

		[Token(Token = "0x400196C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool m_restoreOnInputAcquired;

		[Token(Token = "0x6002C25")]
		[Address(RVA = "0xB8E6C4", Offset = "0xB8E6C4", VA = "0xB8E6C4")]
		private void Update()
		{
		}

		[Token(Token = "0x6002C26")]
		[Address(RVA = "0xB8E938", Offset = "0xB8E938", VA = "0xB8E938")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x6002C27")]
		[Address(RVA = "0xB8E994", Offset = "0xB8E994", VA = "0xB8E994")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x6002C28")]
		[Address(RVA = "0xB8E9D8", Offset = "0xB8E9D8", VA = "0xB8E9D8")]
		public TouchController()
		{
		}
	}
}
namespace Oculus.Spatializer.Propagation
{
	[Token(Token = "0x20004E0")]
	public enum FaceType : uint
	{
		[Token(Token = "0x400196E")]
		TRIANGLES,
		[Token(Token = "0x400196F")]
		QUADS
	}
	[Token(Token = "0x20004E1")]
	public enum MaterialProperty : uint
	{
		[Token(Token = "0x4001971")]
		ABSORPTION,
		[Token(Token = "0x4001972")]
		TRANSMISSION,
		[Token(Token = "0x4001973")]
		SCATTERING
	}
	[Token(Token = "0x20004E2")]
	public struct MeshGroup
	{
		[Token(Token = "0x4001974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public UIntPtr indexOffset;

		[Token(Token = "0x4001975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public UIntPtr faceCount;

		[Token(Token = "0x4001976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FaceType faceType;

		[Token(Token = "0x4001977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public IntPtr material;
	}
}
namespace Oculus.Avatar
{
	[Token(Token = "0x20004E3")]
	public static class AvatarLogger
	{
		[Token(Token = "0x4001978")]
		public const string LogAvatar = "[Avatars] - ";

		[Token(Token = "0x4001979")]
		public const string Tab = "    ";

		[Token(Token = "0x6002C29")]
		[Address(RVA = "0xB8FA50", Offset = "0xB8FA50", VA = "0xB8FA50")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x8338A0", Offset = "0x8338A0")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x8338A0", Offset = "0x8338A0")]
		public static void Log(string logMsg)
		{
		}

		[Token(Token = "0x6002C2A")]
		[Address(RVA = "0xB8FAD8", Offset = "0xB8FAD8", VA = "0xB8FAD8")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x833900", Offset = "0x833900")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x833900", Offset = "0x833900")]
		public static void Log(string logMsg, UnityEngine.Object context)
		{
		}

		[Token(Token = "0x6002C2B")]
		[Address(RVA = "0xB8FB70", Offset = "0xB8FB70", VA = "0xB8FB70")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x833960", Offset = "0x833960")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x833960", Offset = "0x833960")]
		public static void LogWarning(string logMsg)
		{
		}

		[Token(Token = "0x6002C2C")]
		[Address(RVA = "0xB8FBF8", Offset = "0xB8FBF8", VA = "0xB8FBF8")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x8339C0", Offset = "0x8339C0")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x8339C0", Offset = "0x8339C0")]
		public static void LogError(string logMsg)
		{
		}

		[Token(Token = "0x6002C2D")]
		[Address(RVA = "0xB8FC80", Offset = "0xB8FC80", VA = "0xB8FC80")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x833A20", Offset = "0x833A20")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x833A20", Offset = "0x833A20")]
		public static void LogError(string logMsg, UnityEngine.Object context)
		{
		}
	}
	[Token(Token = "0x20004E4")]
	public class CAPI
	{
		[Token(Token = "0x2000704")]
		public delegate void LoggingDelegate(IntPtr str);

		[Token(Token = "0x2000705")]
		public enum Result
		{
			[Token(Token = "0x400270D")]
			Success = 0,
			[Token(Token = "0x400270E")]
			Failure = -1000,
			[Token(Token = "0x400270F")]
			Failure_InvalidParameter = -1001,
			[Token(Token = "0x4002710")]
			Failure_NotInitialized = -1002,
			[Token(Token = "0x4002711")]
			Failure_InvalidOperation = -1003,
			[Token(Token = "0x4002712")]
			Failure_Unsupported = -1004,
			[Token(Token = "0x4002713")]
			Failure_NotYetImplemented = -1005,
			[Token(Token = "0x4002714")]
			Failure_OperationFailed = -1006,
			[Token(Token = "0x4002715")]
			Failure_InsufficientSize = -1007
		}

		[Token(Token = "0x2000706")]
		private static class OVRP_1_30_0
		{
			[Token(Token = "0x4002716")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly Version version;

			[PreserveSig]
			[Token(Token = "0x600369A")]
			[Address(RVA = "0xB974B8", Offset = "0xB974B8", VA = "0xB974B8")]
			public static extern Result ovrp_SendEvent2(string name, string param, string source);
		}

		[Token(Token = "0x400197A")]
		private const string LibFile = "ovravatarloader";

		[Token(Token = "0x400197B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static IntPtr nativeVisemeData;

		[Token(Token = "0x400197C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static IntPtr nativeGazeTargetsData;

		[Token(Token = "0x400197D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static IntPtr nativeAvatarLightsData;

		[Token(Token = "0x400197E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static IntPtr DebugLineCountData;

		[Token(Token = "0x400197F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static float[] scratchBufferFloat;

		[Token(Token = "0x4001980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static GameObject debugLineGo;

		[Token(Token = "0x4001981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static string SDKRuntimePrefix;

		[Token(Token = "0x4001982")]
		private const string ovrPluginDLL = "OVRPlugin";

		[Token(Token = "0x4001983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static Version ovrPluginVersion;

		[PreserveSig]
		[Token(Token = "0x6002C2E")]
		[Address(RVA = "0xB8FD80", Offset = "0xB8FD80", VA = "0xB8FD80")]
		public static extern void ovrAvatar_InitializeAndroidUnity(string appID);

		[Token(Token = "0x6002C2F")]
		[Address(RVA = "0xB8FE10", Offset = "0xB8FE10", VA = "0xB8FE10")]
		public static void Initialize()
		{
		}

		[Token(Token = "0x6002C30")]
		[Address(RVA = "0xB8FFCC", Offset = "0xB8FFCC", VA = "0xB8FFCC")]
		public static void Shutdown()
		{
		}

		[PreserveSig]
		[Token(Token = "0x6002C31")]
		[Address(RVA = "0xB900AC", Offset = "0xB900AC", VA = "0xB900AC")]
		public static extern void ovrAvatar_Shutdown();

		[PreserveSig]
		[Token(Token = "0x6002C32")]
		[Address(RVA = "0xB9011C", Offset = "0xB9011C", VA = "0xB9011C")]
		public static extern IntPtr ovrAvatarMessage_Pop();

		[PreserveSig]
		[Token(Token = "0x6002C33")]
		[Address(RVA = "0xB90190", Offset = "0xB90190", VA = "0xB90190")]
		public static extern ovrAvatarMessageType ovrAvatarMessage_GetType(IntPtr msg);

		[Token(Token = "0x6002C34")]
		[Address(RVA = "0xB90210", Offset = "0xB90210", VA = "0xB90210")]
		public static ovrAvatarMessage_AvatarSpecification ovrAvatarMessage_GetAvatarSpecification(IntPtr msg)
		{
			return default(ovrAvatarMessage_AvatarSpecification);
		}

		[PreserveSig]
		[Token(Token = "0x6002C35")]
		[Address(RVA = "0xB90328", Offset = "0xB90328", VA = "0xB90328")]
		private static extern IntPtr ovrAvatarMessage_GetAvatarSpecification_Native(IntPtr msg);

		[Token(Token = "0x6002C36")]
		[Address(RVA = "0xB903A8", Offset = "0xB903A8", VA = "0xB903A8")]
		public static ovrAvatarMessage_AssetLoaded ovrAvatarMessage_GetAssetLoaded(IntPtr msg)
		{
			return default(ovrAvatarMessage_AssetLoaded);
		}

		[PreserveSig]
		[Token(Token = "0x6002C37")]
		[Address(RVA = "0xB904C0", Offset = "0xB904C0", VA = "0xB904C0")]
		private static extern IntPtr ovrAvatarMessage_GetAssetLoaded_Native(IntPtr msg);

		[PreserveSig]
		[Token(Token = "0x6002C38")]
		[Address(RVA = "0xB90540", Offset = "0xB90540", VA = "0xB90540")]
		public static extern void ovrAvatarMessage_Free(IntPtr msg);

		[PreserveSig]
		[Token(Token = "0x6002C39")]
		[Address(RVA = "0xB905C0", Offset = "0xB905C0", VA = "0xB905C0")]
		public static extern IntPtr ovrAvatarSpecificationRequest_Create(ulong userID);

		[PreserveSig]
		[Token(Token = "0x6002C3A")]
		[Address(RVA = "0xB90640", Offset = "0xB90640", VA = "0xB90640")]
		public static extern void ovrAvatarSpecificationRequest_Destroy(IntPtr specificationRequest);

		[PreserveSig]
		[Token(Token = "0x6002C3B")]
		[Address(RVA = "0xB906C0", Offset = "0xB906C0", VA = "0xB906C0")]
		public static extern void ovrAvatarSpecificationRequest_SetCombineMeshes(IntPtr specificationRequest, bool useCombinedMesh);

		[PreserveSig]
		[Token(Token = "0x6002C3C")]
		[Address(RVA = "0xB90750", Offset = "0xB90750", VA = "0xB90750")]
		public static extern void ovrAvatarSpecificationRequest_SetLookAndFeelVersion(IntPtr specificationRequest, ovrAvatarLookAndFeelVersion version);

		[PreserveSig]
		[Token(Token = "0x6002C3D")]
		[Address(RVA = "0xB907E0", Offset = "0xB907E0", VA = "0xB907E0")]
		public static extern void ovrAvatarSpecificationRequest_SetLevelOfDetail(IntPtr specificationRequest, ovrAvatarAssetLevelOfDetail lod);

		[PreserveSig]
		[Token(Token = "0x6002C3E")]
		[Address(RVA = "0xB90870", Offset = "0xB90870", VA = "0xB90870")]
		public static extern void ovrAvatar_RequestAvatarSpecification(ulong userID);

		[PreserveSig]
		[Token(Token = "0x6002C3F")]
		[Address(RVA = "0xB908F0", Offset = "0xB908F0", VA = "0xB908F0")]
		public static extern void ovrAvatar_RequestAvatarSpecificationFromSpecRequest(IntPtr specificationRequest);

		[PreserveSig]
		[Token(Token = "0x6002C40")]
		[Address(RVA = "0xB90970", Offset = "0xB90970", VA = "0xB90970")]
		public static extern void ovrAvatarSpecificationRequest_SetFallbackLookAndFeelVersion(IntPtr specificationRequest, ovrAvatarLookAndFeelVersion version);

		[PreserveSig]
		[Token(Token = "0x6002C41")]
		[Address(RVA = "0xB90A00", Offset = "0xB90A00", VA = "0xB90A00")]
		public static extern void ovrAvatarSpecificationRequest_SetExpressiveFlag(IntPtr specificationRequest, bool enable);

		[PreserveSig]
		[Token(Token = "0x6002C42")]
		[Address(RVA = "0xB90A90", Offset = "0xB90A90", VA = "0xB90A90")]
		public static extern IntPtr ovrAvatar_Create(IntPtr avatarSpecification, ovrAvatarCapabilities capabilities);

		[PreserveSig]
		[Token(Token = "0x6002C43")]
		[Address(RVA = "0xB90B20", Offset = "0xB90B20", VA = "0xB90B20")]
		public static extern void ovrAvatar_Destroy(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x6002C44")]
		[Address(RVA = "0xB90BA0", Offset = "0xB90BA0", VA = "0xB90BA0")]
		public static extern void ovrAvatarPose_UpdateBody(IntPtr avatar, ovrAvatarTransform headPose);

		[Token(Token = "0x6002C45")]
		[Address(RVA = "0xB90C40", Offset = "0xB90C40", VA = "0xB90C40")]
		public static void ovrAvatarPose_UpdateVoiceVisualization(IntPtr avatar, float[] pcmData)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6002C46")]
		[Address(RVA = "0xB90CC0", Offset = "0xB90CC0", VA = "0xB90CC0")]
		private static extern void ovrAvatarPose_UpdateVoiceVisualization_Native(IntPtr avatar, uint pcmDataSize, [In] float[] pcmData);

		[PreserveSig]
		[Token(Token = "0x6002C47")]
		[Address(RVA = "0xB90D60", Offset = "0xB90D60", VA = "0xB90D60")]
		public static extern void ovrAvatarPose_UpdateHands(IntPtr avatar, ovrAvatarHandInputState inputStateLeft, ovrAvatarHandInputState inputStateRight);

		[PreserveSig]
		[Token(Token = "0x6002C48")]
		[Address(RVA = "0xB90E20", Offset = "0xB90E20", VA = "0xB90E20")]
		public static extern void ovrAvatarPose_UpdateHandsWithType(IntPtr avatar, ovrAvatarHandInputState inputStateLeft, ovrAvatarHandInputState inputStateRight, ovrAvatarControllerType type);

		[PreserveSig]
		[Token(Token = "0x6002C49")]
		[Address(RVA = "0xB90EF0", Offset = "0xB90EF0", VA = "0xB90EF0")]
		public static extern void ovrAvatarPose_Finalize(IntPtr avatar, float elapsedSeconds);

		[PreserveSig]
		[Token(Token = "0x6002C4A")]
		[Address(RVA = "0xB90F80", Offset = "0xB90F80", VA = "0xB90F80")]
		public static extern void ovrAvatar_SetLeftControllerVisibility(IntPtr avatar, bool show);

		[PreserveSig]
		[Token(Token = "0x6002C4B")]
		[Address(RVA = "0xB91010", Offset = "0xB91010", VA = "0xB91010")]
		public static extern void ovrAvatar_SetRightControllerVisibility(IntPtr avatar, bool show);

		[PreserveSig]
		[Token(Token = "0x6002C4C")]
		[Address(RVA = "0xB910A0", Offset = "0xB910A0", VA = "0xB910A0")]
		public static extern void ovrAvatar_SetLeftHandVisibility(IntPtr avatar, bool show);

		[PreserveSig]
		[Token(Token = "0x6002C4D")]
		[Address(RVA = "0xB91130", Offset = "0xB91130", VA = "0xB91130")]
		public static extern void ovrAvatar_SetRightHandVisibility(IntPtr avatar, bool show);

		[PreserveSig]
		[Token(Token = "0x6002C4E")]
		[Address(RVA = "0xB911C0", Offset = "0xB911C0", VA = "0xB911C0")]
		public static extern uint ovrAvatarComponent_Count(IntPtr avatar);

		[Token(Token = "0x6002C4F")]
		[Address(RVA = "0xB91240", Offset = "0xB91240", VA = "0xB91240")]
		public static void ovrAvatarComponent_Get(IntPtr avatar, uint index, bool includeName, ref ovrAvatarComponent component)
		{
		}

		[Token(Token = "0x6002C50")]
		[Address(RVA = "0xB91360", Offset = "0xB91360", VA = "0xB91360")]
		public static void ovrAvatarComponent_Get(IntPtr componentPtr, bool includeName, ref ovrAvatarComponent component)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6002C51")]
		[Address(RVA = "0xB912D0", Offset = "0xB912D0", VA = "0xB912D0")]
		public static extern IntPtr ovrAvatarComponent_Get_Native(IntPtr avatar, uint index);

		[Token(Token = "0x6002C52")]
		[Address(RVA = "0xB91554", Offset = "0xB91554", VA = "0xB91554")]
		public static bool ovrAvatarPose_GetBaseComponent(IntPtr avatar, ref ovrAvatarBaseComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6002C53")]
		[Address(RVA = "0xB9168C", Offset = "0xB9168C", VA = "0xB9168C")]
		private static extern IntPtr ovrAvatarPose_GetBaseComponent_Native(IntPtr avatar);

		[Token(Token = "0x6002C54")]
		public static IntPtr MarshalRenderComponent<T>(IntPtr ptr) where T : struct
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6002C55")]
		[Address(RVA = "0xB9170C", Offset = "0xB9170C", VA = "0xB9170C")]
		public static bool ovrAvatarPose_GetBodyComponent(IntPtr avatar, ref ovrAvatarBodyComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6002C56")]
		[Address(RVA = "0xB9197C", Offset = "0xB9197C", VA = "0xB9197C")]
		private static extern IntPtr ovrAvatarPose_GetBodyComponent_Native(IntPtr avatar);

		[Token(Token = "0x6002C57")]
		[Address(RVA = "0xB919FC", Offset = "0xB919FC", VA = "0xB919FC")]
		public static bool ovrAvatarPose_GetLeftControllerComponent(IntPtr avatar, ref ovrAvatarControllerComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6002C58")]
		[Address(RVA = "0xB91B34", Offset = "0xB91B34", VA = "0xB91B34")]
		private static extern IntPtr ovrAvatarPose_GetLeftControllerComponent_Native(IntPtr avatar);

		[Token(Token = "0x6002C59")]
		[Address(RVA = "0xB91BB4", Offset = "0xB91BB4", VA = "0xB91BB4")]
		public static bool ovrAvatarPose_GetRightControllerComponent(IntPtr avatar, ref ovrAvatarControllerComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6002C5A")]
		[Address(RVA = "0xB91CEC", Offset = "0xB91CEC", VA = "0xB91CEC")]
		private static extern IntPtr ovrAvatarPose_GetRightControllerComponent_Native(IntPtr avatar);

		[Token(Token = "0x6002C5B")]
		[Address(RVA = "0xB91D6C", Offset = "0xB91D6C", VA = "0xB91D6C")]
		public static bool ovrAvatarPose_GetLeftHandComponent(IntPtr avatar, ref ovrAvatarHandComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6002C5C")]
		[Address(RVA = "0xB91EA4", Offset = "0xB91EA4", VA = "0xB91EA4")]
		private static extern IntPtr ovrAvatarPose_GetLeftHandComponent_Native(IntPtr avatar);

		[Token(Token = "0x6002C5D")]
		[Address(RVA = "0xB91F24", Offset = "0xB91F24", VA = "0xB91F24")]
		public static bool ovrAvatarPose_GetRightHandComponent(IntPtr avatar, ref ovrAvatarHandComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6002C5E")]
		[Address(RVA = "0xB9205C", Offset = "0xB9205C", VA = "0xB9205C")]
		private static extern IntPtr ovrAvatarPose_GetRightHandComponent_Native(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x6002C5F")]
		[Address(RVA = "0xB920DC", Offset = "0xB920DC", VA = "0xB920DC")]
		public static extern void ovrAvatarAsset_BeginLoading(ulong assetID);

		[PreserveSig]
		[Token(Token = "0x6002C60")]
		[Address(RVA = "0xB9215C", Offset = "0xB9215C", VA = "0xB9215C")]
		public static extern bool ovrAvatarAsset_BeginLoadingLOD(ulong assetId, ovrAvatarAssetLevelOfDetail lod);

		[PreserveSig]
		[Token(Token = "0x6002C61")]
		[Address(RVA = "0xB921F4", Offset = "0xB921F4", VA = "0xB921F4")]
		public static extern ovrAvatarAssetType ovrAvatarAsset_GetType(IntPtr assetHandle);

		[Token(Token = "0x6002C62")]
		[Address(RVA = "0xB92274", Offset = "0xB92274", VA = "0xB92274")]
		public static ovrAvatarMeshAssetData ovrAvatarAsset_GetMeshData(IntPtr assetPtr)
		{
			return default(ovrAvatarMeshAssetData);
		}

		[Token(Token = "0x6002C63")]
		[Address(RVA = "0xB92420", Offset = "0xB92420", VA = "0xB92420")]
		public static ovrAvatarMeshAssetDataV2 ovrAvatarAsset_GetCombinedMeshData(IntPtr assetPtr)
		{
			return default(ovrAvatarMeshAssetDataV2);
		}

		[PreserveSig]
		[Token(Token = "0x6002C64")]
		[Address(RVA = "0xB9254C", Offset = "0xB9254C", VA = "0xB9254C")]
		private static extern IntPtr ovrAvatarAsset_GetCombinedMeshData_Native(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x6002C65")]
		[Address(RVA = "0xB923A0", Offset = "0xB923A0", VA = "0xB923A0")]
		private static extern IntPtr ovrAvatarAsset_GetMeshData_Native(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x6002C66")]
		[Address(RVA = "0xB925CC", Offset = "0xB925CC", VA = "0xB925CC")]
		public static extern uint ovrAvatarAsset_GetMeshBlendShapeCount(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x6002C67")]
		[Address(RVA = "0xB9264C", Offset = "0xB9264C", VA = "0xB9264C")]
		public static extern IntPtr ovrAvatarAsset_GetMeshBlendShapeName(IntPtr assetPtr, uint index);

		[PreserveSig]
		[Token(Token = "0x6002C68")]
		[Address(RVA = "0xB926DC", Offset = "0xB926DC", VA = "0xB926DC")]
		public static extern uint ovrAvatarAsset_GetSubmeshCount(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x6002C69")]
		[Address(RVA = "0xB9275C", Offset = "0xB9275C", VA = "0xB9275C")]
		public static extern uint ovrAvatarAsset_GetSubmeshLastIndex(IntPtr assetPtr, uint index);

		[PreserveSig]
		[Token(Token = "0x6002C6A")]
		[Address(RVA = "0xB927EC", Offset = "0xB927EC", VA = "0xB927EC")]
		public static extern IntPtr ovrAvatarAsset_GetMeshBlendShapeVertices(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x6002C6B")]
		[Address(RVA = "0xB9286C", Offset = "0xB9286C", VA = "0xB9286C")]
		public static extern IntPtr ovrAvatarAsset_GetAvatar(IntPtr assetHandle);

		[Token(Token = "0x6002C6C")]
		[Address(RVA = "0xB928EC", Offset = "0xB928EC", VA = "0xB928EC")]
		public static ulong[] ovrAvatarAsset_GetCombinedMeshIDs(IntPtr assetHandle)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6002C6D")]
		[Address(RVA = "0xB92B28", Offset = "0xB92B28", VA = "0xB92B28")]
		public static extern IntPtr ovrAvatarAsset_GetCombinedMeshIDs_Native(IntPtr assetHandle, IntPtr count);

		[Token(Token = "0x6002C6E")]
		[Address(RVA = "0xB92BB8", Offset = "0xB92BB8", VA = "0xB92BB8")]
		public static void ovrAvatar_GetCombinedMeshAlphaData(IntPtr avatar, ref ulong textureID, ref Vector4 offset)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6002C6F")]
		[Address(RVA = "0xB92DA4", Offset = "0xB92DA4", VA = "0xB92DA4")]
		public static extern IntPtr ovrAvatar_GetCombinedMeshAlphaData_Native(IntPtr avatar, IntPtr textureIDPtr, IntPtr offsetPtr);

		[Token(Token = "0x6002C70")]
		[Address(RVA = "0xB92E3C", Offset = "0xB92E3C", VA = "0xB92E3C")]
		public static ovrAvatarTextureAssetData ovrAvatarAsset_GetTextureData(IntPtr assetPtr)
		{
			return default(ovrAvatarTextureAssetData);
		}

		[PreserveSig]
		[Token(Token = "0x6002C71")]
		[Address(RVA = "0xB92F60", Offset = "0xB92F60", VA = "0xB92F60")]
		private static extern IntPtr ovrAvatarAsset_GetTextureData_Native(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x6002C72")]
		[Address(RVA = "0xB92FE0", Offset = "0xB92FE0", VA = "0xB92FE0")]
		private static extern IntPtr ovrAvatarAsset_GetMaterialData_Native(IntPtr assetPtr);

		[Token(Token = "0x6002C73")]
		[Address(RVA = "0xB93060", Offset = "0xB93060", VA = "0xB93060")]
		public static ovrAvatarMaterialState ovrAvatarAsset_GetMaterialState(IntPtr assetPtr)
		{
			return default(ovrAvatarMaterialState);
		}

		[PreserveSig]
		[Token(Token = "0x6002C74")]
		[Address(RVA = "0xB93188", Offset = "0xB93188", VA = "0xB93188")]
		public static extern ovrAvatarRenderPartType ovrAvatarRenderPart_GetType(IntPtr renderPart);

		[Token(Token = "0x6002C75")]
		[Address(RVA = "0xB93208", Offset = "0xB93208", VA = "0xB93208")]
		public static ovrAvatarRenderPart_SkinnedMeshRender ovrAvatarRenderPart_GetSkinnedMeshRender(IntPtr renderPart)
		{
			return default(ovrAvatarRenderPart_SkinnedMeshRender);
		}

		[PreserveSig]
		[Token(Token = "0x6002C76")]
		[Address(RVA = "0xB93330", Offset = "0xB93330", VA = "0xB93330")]
		private static extern IntPtr ovrAvatarRenderPart_GetSkinnedMeshRender_Native(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6002C77")]
		[Address(RVA = "0xB933B0", Offset = "0xB933B0", VA = "0xB933B0")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRender_GetTransform(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6002C78")]
		[Address(RVA = "0xB93440", Offset = "0xB93440", VA = "0xB93440")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRenderPBS_GetTransform(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6002C79")]
		[Address(RVA = "0xB934D0", Offset = "0xB934D0", VA = "0xB934D0")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRenderPBSV2_GetTransform(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6002C7A")]
		[Address(RVA = "0xB93560", Offset = "0xB93560", VA = "0xB93560")]
		public static extern ovrAvatarVisibilityFlags ovrAvatarSkinnedMeshRender_GetVisibilityMask(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6002C7B")]
		[Address(RVA = "0xB935E0", Offset = "0xB935E0", VA = "0xB935E0")]
		public static extern bool ovrAvatarSkinnedMeshRender_MaterialStateChanged(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6002C7C")]
		[Address(RVA = "0xB93668", Offset = "0xB93668", VA = "0xB93668")]
		public static extern bool ovrAvatarSkinnedMeshRenderPBSV2_MaterialStateChanged(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6002C7D")]
		[Address(RVA = "0xB936F0", Offset = "0xB936F0", VA = "0xB936F0")]
		public static extern ovrAvatarVisibilityFlags ovrAvatarSkinnedMeshRenderPBS_GetVisibilityMask(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6002C7E")]
		[Address(RVA = "0xB93770", Offset = "0xB93770", VA = "0xB93770")]
		public static extern ovrAvatarVisibilityFlags ovrAvatarSkinnedMeshRenderPBSV2_GetVisibilityMask(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6002C7F")]
		[Address(RVA = "0xB937F0", Offset = "0xB937F0", VA = "0xB937F0")]
		public static extern ovrAvatarMaterialState ovrAvatarSkinnedMeshRender_GetMaterialState(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6002C80")]
		[Address(RVA = "0xB938A4", Offset = "0xB938A4", VA = "0xB938A4")]
		public static extern ovrAvatarPBSMaterialState ovrAvatarSkinnedMeshRenderPBSV2_GetPBSMaterialState(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6002C81")]
		[Address(RVA = "0xB93934", Offset = "0xB93934", VA = "0xB93934")]
		public static extern ovrAvatarExpressiveParameters ovrAvatar_GetExpressiveParameters(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x6002C82")]
		[Address(RVA = "0xB939C4", Offset = "0xB939C4", VA = "0xB939C4")]
		public static extern ulong ovrAvatarSkinnedMeshRender_GetDirtyJoints(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6002C83")]
		[Address(RVA = "0xB93A44", Offset = "0xB93A44", VA = "0xB93A44")]
		public static extern ulong ovrAvatarSkinnedMeshRenderPBS_GetDirtyJoints(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6002C84")]
		[Address(RVA = "0xB93AC4", Offset = "0xB93AC4", VA = "0xB93AC4")]
		public static extern ulong ovrAvatarSkinnedMeshRenderPBSV2_GetDirtyJoints(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6002C85")]
		[Address(RVA = "0xB93B44", Offset = "0xB93B44", VA = "0xB93B44")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRender_GetJointTransform(IntPtr renderPart, uint jointIndex);

		[PreserveSig]
		[Token(Token = "0x6002C86")]
		[Address(RVA = "0xB93BDC", Offset = "0xB93BDC", VA = "0xB93BDC")]
		public static extern void ovrAvatar_SetActionUnitOnsetSpeed(IntPtr avatar, float onsetSpeed);

		[PreserveSig]
		[Token(Token = "0x6002C87")]
		[Address(RVA = "0xB93C6C", Offset = "0xB93C6C", VA = "0xB93C6C")]
		public static extern void ovrAvatar_SetActionUnitFalloffSpeed(IntPtr avatar, float falloffSpeed);

		[PreserveSig]
		[Token(Token = "0x6002C88")]
		[Address(RVA = "0xB93CFC", Offset = "0xB93CFC", VA = "0xB93CFC")]
		public static extern void ovrAvatar_SetVisemeMultiplier(IntPtr avatar, float visemeMultiplier);

		[PreserveSig]
		[Token(Token = "0x6002C89")]
		[Address(RVA = "0xB93D8C", Offset = "0xB93D8C", VA = "0xB93D8C")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRenderPBS_GetJointTransform(IntPtr renderPart, uint jointIndex);

		[PreserveSig]
		[Token(Token = "0x6002C8A")]
		[Address(RVA = "0xB93E24", Offset = "0xB93E24", VA = "0xB93E24")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRenderPBSV2_GetJointTransform(IntPtr renderPart, uint jointIndex);

		[PreserveSig]
		[Token(Token = "0x6002C8B")]
		[Address(RVA = "0xB93EBC", Offset = "0xB93EBC", VA = "0xB93EBC")]
		public static extern ulong ovrAvatarSkinnedMeshRenderPBS_GetAlbedoTextureAssetID(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6002C8C")]
		[Address(RVA = "0xB93F3C", Offset = "0xB93F3C", VA = "0xB93F3C")]
		public static extern ulong ovrAvatarSkinnedMeshRenderPBS_GetSurfaceTextureAssetID(IntPtr renderPart);

		[Token(Token = "0x6002C8D")]
		[Address(RVA = "0xB93FBC", Offset = "0xB93FBC", VA = "0xB93FBC")]
		public static ovrAvatarRenderPart_SkinnedMeshRenderPBS ovrAvatarRenderPart_GetSkinnedMeshRenderPBS(IntPtr renderPart)
		{
			return default(ovrAvatarRenderPart_SkinnedMeshRenderPBS);
		}

		[PreserveSig]
		[Token(Token = "0x6002C8E")]
		[Address(RVA = "0xB940E4", Offset = "0xB940E4", VA = "0xB940E4")]
		private static extern IntPtr ovrAvatarRenderPart_GetSkinnedMeshRenderPBS_Native(IntPtr renderPart);

		[Token(Token = "0x6002C8F")]
		[Address(RVA = "0xB94164", Offset = "0xB94164", VA = "0xB94164")]
		public static ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2 ovrAvatarRenderPart_GetSkinnedMeshRenderPBSV2(IntPtr renderPart)
		{
			return default(ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2);
		}

		[PreserveSig]
		[Token(Token = "0x6002C90")]
		[Address(RVA = "0xB9428C", Offset = "0xB9428C", VA = "0xB9428C")]
		private static extern IntPtr ovrAvatarRenderPart_GetSkinnedMeshRenderPBSV2_Native(IntPtr renderPart);

		[Token(Token = "0x6002C91")]
		[Address(RVA = "0xB9430C", Offset = "0xB9430C", VA = "0xB9430C")]
		public static void ovrAvatarSkinnedMeshRender_GetBlendShapeParams(IntPtr renderPart, ref ovrAvatarBlendShapeParams blendParams)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6002C92")]
		[Address(RVA = "0xB94434", Offset = "0xB94434", VA = "0xB94434")]
		private static extern IntPtr ovrAvatarSkinnedMeshRender_GetBlendShapeParams_Native(IntPtr renderPart);

		[Token(Token = "0x6002C93")]
		[Address(RVA = "0xB944B4", Offset = "0xB944B4", VA = "0xB944B4")]
		public static ovrAvatarRenderPart_ProjectorRender ovrAvatarRenderPart_GetProjectorRender(IntPtr renderPart)
		{
			return default(ovrAvatarRenderPart_ProjectorRender);
		}

		[Token(Token = "0x6002C94")]
		[Address(RVA = "0xB9465C", Offset = "0xB9465C", VA = "0xB9465C")]
		public static ovrAvatarPBSMaterialState[] ovrAvatar_GetBodyPBSMaterialStates(IntPtr renderPart)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6002C95")]
		[Address(RVA = "0xB948F8", Offset = "0xB948F8", VA = "0xB948F8")]
		private static extern IntPtr ovrAvatar_GetBodyPBSMaterialStates_Native(IntPtr avatar, IntPtr count);

		[PreserveSig]
		[Token(Token = "0x6002C96")]
		[Address(RVA = "0xB945DC", Offset = "0xB945DC", VA = "0xB945DC")]
		private static extern IntPtr ovrAvatarRenderPart_GetProjectorRender_Native(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6002C97")]
		[Address(RVA = "0xB94988", Offset = "0xB94988", VA = "0xB94988")]
		public static extern uint ovrAvatar_GetReferencedAssetCount(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x6002C98")]
		[Address(RVA = "0xB94A08", Offset = "0xB94A08", VA = "0xB94A08")]
		public static extern ulong ovrAvatar_GetReferencedAsset(IntPtr avatar, uint index);

		[PreserveSig]
		[Token(Token = "0x6002C99")]
		[Address(RVA = "0xB94A98", Offset = "0xB94A98", VA = "0xB94A98")]
		public static extern void ovrAvatar_SetLeftHandGesture(IntPtr avatar, ovrAvatarHandGesture gesture);

		[PreserveSig]
		[Token(Token = "0x6002C9A")]
		[Address(RVA = "0xB94B28", Offset = "0xB94B28", VA = "0xB94B28")]
		public static extern void ovrAvatar_SetRightHandGesture(IntPtr avatar, ovrAvatarHandGesture gesture);

		[PreserveSig]
		[Token(Token = "0x6002C9B")]
		[Address(RVA = "0xB94BB8", Offset = "0xB94BB8", VA = "0xB94BB8")]
		public static extern void ovrAvatar_SetLeftHandCustomGesture(IntPtr avatar, uint jointCount, [In] ovrAvatarTransform[] customJointTransforms);

		[PreserveSig]
		[Token(Token = "0x6002C9C")]
		[Address(RVA = "0xB94C58", Offset = "0xB94C58", VA = "0xB94C58")]
		public static extern void ovrAvatar_SetRightHandCustomGesture(IntPtr avatar, uint jointCount, [In] ovrAvatarTransform[] customJointTransforms);

		[PreserveSig]
		[Token(Token = "0x6002C9D")]
		[Address(RVA = "0xB94CF8", Offset = "0xB94CF8", VA = "0xB94CF8")]
		public static extern void ovrAvatar_UpdatePoseFromPacket(IntPtr avatar, IntPtr packet, float secondsFromStart);

		[PreserveSig]
		[Token(Token = "0x6002C9E")]
		[Address(RVA = "0xB94D98", Offset = "0xB94D98", VA = "0xB94D98")]
		public static extern void ovrAvatarPacket_BeginRecording(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x6002C9F")]
		[Address(RVA = "0xB94E18", Offset = "0xB94E18", VA = "0xB94E18")]
		public static extern IntPtr ovrAvatarPacket_EndRecording(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x6002CA0")]
		[Address(RVA = "0xB94E98", Offset = "0xB94E98", VA = "0xB94E98")]
		public static extern uint ovrAvatarPacket_GetSize(IntPtr packet);

		[PreserveSig]
		[Token(Token = "0x6002CA1")]
		[Address(RVA = "0xB94F18", Offset = "0xB94F18", VA = "0xB94F18")]
		public static extern float ovrAvatarPacket_GetDurationSeconds(IntPtr packet);

		[PreserveSig]
		[Token(Token = "0x6002CA2")]
		[Address(RVA = "0xB94F98", Offset = "0xB94F98", VA = "0xB94F98")]
		public static extern void ovrAvatarPacket_Free(IntPtr packet);

		[PreserveSig]
		[Token(Token = "0x6002CA3")]
		[Address(RVA = "0xB95018", Offset = "0xB95018", VA = "0xB95018")]
		public static extern bool ovrAvatarPacket_Write(IntPtr packet, uint bufferSize, [Out] byte[] buffer);

		[PreserveSig]
		[Token(Token = "0x6002CA4")]
		[Address(RVA = "0xB95140", Offset = "0xB95140", VA = "0xB95140")]
		public static extern IntPtr ovrAvatarPacket_Read(uint bufferSize, [In] byte[] buffer);

		[PreserveSig]
		[Token(Token = "0x6002CA5")]
		[Address(RVA = "0xB951D8", Offset = "0xB951D8", VA = "0xB951D8")]
		private static extern void ovrAvatar_SetInternalForceASTCTextures(bool value);

		[Token(Token = "0x6002CA6")]
		[Address(RVA = "0xB95258", Offset = "0xB95258", VA = "0xB95258")]
		public static void ovrAvatar_SetForceASTCTextures(bool value)
		{
		}

		[Token(Token = "0x6002CA7")]
		[Address(RVA = "0xB952BC", Offset = "0xB952BC", VA = "0xB952BC")]
		public static void ovrAvatar_OverrideExpressiveLogic(IntPtr avatar, ovrAvatarBlendShapeParams blendParams)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6002CA8")]
		[Address(RVA = "0xB953D8", Offset = "0xB953D8", VA = "0xB953D8")]
		private static extern void ovrAvatar_OverrideExpressiveLogic_Native(IntPtr avatar, IntPtr state);

		[Token(Token = "0x6002CA9")]
		[Address(RVA = "0xB95468", Offset = "0xB95468", VA = "0xB95468")]
		public static void ovrAvatar_SetVisemes(IntPtr avatar, ovrAvatarVisemes visemes)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6002CAA")]
		[Address(RVA = "0xB955AC", Offset = "0xB955AC", VA = "0xB955AC")]
		private static extern void ovrAvatar_SetVisemes_Native(IntPtr avatar, IntPtr visemes);

		[PreserveSig]
		[Token(Token = "0x6002CAB")]
		[Address(RVA = "0xB9563C", Offset = "0xB9563C", VA = "0xB9563C")]
		public static extern void ovrAvatar_UpdateWorldTransform(IntPtr avatar, ovrAvatarTransform transform);

		[Token(Token = "0x6002CAC")]
		[Address(RVA = "0xB956DC", Offset = "0xB956DC", VA = "0xB956DC")]
		public static void ovrAvatar_UpdateGazeTargets(ovrAvatarGazeTargets targets)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6002CAD")]
		[Address(RVA = "0xB95A74", Offset = "0xB95A74", VA = "0xB95A74")]
		private static extern void ovrAvatar_UpdateGazeTargets_Native(IntPtr targets);

		[PreserveSig]
		[Token(Token = "0x6002CAE")]
		[Address(RVA = "0xB95AF4", Offset = "0xB95AF4", VA = "0xB95AF4")]
		public static extern void ovrAvatar_RemoveGazeTargets(uint targetCount, uint[] ids);

		[Token(Token = "0x6002CAF")]
		[Address(RVA = "0xB95B8C", Offset = "0xB95B8C", VA = "0xB95B8C")]
		public static void ovrAvatar_UpdateLights(ovrAvatarLights lights)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6002CB0")]
		[Address(RVA = "0xB96354", Offset = "0xB96354", VA = "0xB96354")]
		private static extern void ovrAvatar_UpdateLights_Native(IntPtr lights);

		[PreserveSig]
		[Token(Token = "0x6002CB1")]
		[Address(RVA = "0xB963D4", Offset = "0xB963D4", VA = "0xB963D4")]
		public static extern void ovrAvatar_RemoveLights(uint lightCount, uint[] ids);

		[Token(Token = "0x6002CB2")]
		[Address(RVA = "0xB8FD18", Offset = "0xB8FD18", VA = "0xB8FD18")]
		[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x833A80", Offset = "0x833A80")]
		public static void LoggingCallback(IntPtr str)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6002CB3")]
		[Address(RVA = "0xB9646C", Offset = "0xB9646C", VA = "0xB9646C")]
		public static extern void ovrAvatar_RegisterLoggingCallback(LoggingDelegate callback);

		[PreserveSig]
		[Token(Token = "0x6002CB4")]
		[Address(RVA = "0xB964F0", Offset = "0xB964F0", VA = "0xB964F0")]
		public static extern void ovrAvatar_SetLoggingLevel(ovrAvatarLogLevel level);

		[PreserveSig]
		[Token(Token = "0x6002CB5")]
		[Address(RVA = "0xB96570", Offset = "0xB96570", VA = "0xB96570")]
		public static extern IntPtr ovrAvatar_GetDebugTransforms_Native(IntPtr count);

		[PreserveSig]
		[Token(Token = "0x6002CB6")]
		[Address(RVA = "0xB965F0", Offset = "0xB965F0", VA = "0xB965F0")]
		public static extern IntPtr ovrAvatar_GetDebugLines_Native(IntPtr count);

		[Token(Token = "0x6002CB7")]
		[Address(RVA = "0xB96670", Offset = "0xB96670", VA = "0xB96670")]
		public static void ovrAvatar_DrawDebugLines()
		{
		}

		[PreserveSig]
		[Token(Token = "0x6002CB8")]
		[Address(RVA = "0xB97050", Offset = "0xB97050", VA = "0xB97050")]
		public static extern void ovrAvatar_SetDebugDrawContext(uint context);

		[Token(Token = "0x6002CB9")]
		[Address(RVA = "0xB970D0", Offset = "0xB970D0", VA = "0xB970D0")]
		public static bool SendEvent(string name, string param = "", string source = "")
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6002CBA")]
		[Address(RVA = "0xB97594", Offset = "0xB97594", VA = "0xB97594")]
		private static extern IntPtr _ovrp_GetVersion();

		[Token(Token = "0x6002CBB")]
		[Address(RVA = "0xB97428", Offset = "0xB97428", VA = "0xB97428")]
		public static string ovrp_GetVersion()
		{
			return null;
		}

		[Token(Token = "0x6002CBC")]
		[Address(RVA = "0xB97608", Offset = "0xB97608", VA = "0xB97608")]
		public CAPI()
		{
		}
	}
}
namespace OVR
{
	[Token(Token = "0x20004E5")]
	public class TestScript : MonoBehaviour
	{
		[Token(Token = "0x4001984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "InspectorNoteAttribute", RVA = "0x824F80", Offset = "0x824F80")]
		public SoundFXRef testSound1;

		[Token(Token = "0x4001985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SoundFXRef testSound2;

		[Token(Token = "0x6002CBE")]
		[Address(RVA = "0xF979B8", Offset = "0xF979B8", VA = "0xF979B8")]
		private void Start()
		{
		}

		[Token(Token = "0x6002CBF")]
		[Address(RVA = "0xF979BC", Offset = "0xF979BC", VA = "0xF979BC")]
		private void Update()
		{
		}

		[Token(Token = "0x6002CC0")]
		[Address(RVA = "0xF97A7C", Offset = "0xF97A7C", VA = "0xF97A7C")]
		public TestScript()
		{
		}
	}
	[Token(Token = "0x20004E6")]
	public class AmbienceEmitter : MonoBehaviour
	{
		[Token(Token = "0x4001986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SoundFXRef[] ambientSounds;

		[Token(Token = "0x4001987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool autoActivate;

		[Token(Token = "0x4001988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x824FCC", Offset = "0x824FCC")]
		public bool autoRetrigger;

		[Token(Token = "0x4001989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "MinMaxAttribute", RVA = "0x825004", Offset = "0x825004")]
		public Vector2 randomRetriggerDelaySecs;

		[Token(Token = "0x400198A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x825028", Offset = "0x825028")]
		public Transform[] playPositions;

		[Token(Token = "0x400198B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool activated;

		[Token(Token = "0x400198C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int playingIdx;

		[Token(Token = "0x400198D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float nextPlayTime;

		[Token(Token = "0x400198E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float fadeTime;

		[Token(Token = "0x400198F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int lastPosIdx;

		[Token(Token = "0x6002CC1")]
		[Address(RVA = "0xF8EC0C", Offset = "0xF8EC0C", VA = "0xF8EC0C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002CC2")]
		[Address(RVA = "0xF8ED90", Offset = "0xF8ED90", VA = "0xF8ED90")]
		private void Update()
		{
		}

		[Token(Token = "0x6002CC3")]
		[Address(RVA = "0xF8EF6C", Offset = "0xF8EF6C", VA = "0xF8EF6C")]
		public void OnTriggerEnter(Collider col)
		{
		}

		[Token(Token = "0x6002CC4")]
		[Address(RVA = "0xF8EDF0", Offset = "0xF8EDF0", VA = "0xF8EDF0")]
		public void Play()
		{
		}

		[Token(Token = "0x6002CC5")]
		[Address(RVA = "0xF8F0AC", Offset = "0xF8F0AC", VA = "0xF8F0AC")]
		public void EnableEmitter(bool enable)
		{
		}

		[Token(Token = "0x6002CC6")]
		[Address(RVA = "0xF8F220", Offset = "0xF8F220", VA = "0xF8F220")]
		public AmbienceEmitter()
		{
		}
	}
	[Token(Token = "0x20004E7")]
	public enum PreloadSounds
	{
		[Token(Token = "0x4001991")]
		Default,
		[Token(Token = "0x4001992")]
		Preload,
		[Token(Token = "0x4001993")]
		ManualPreload
	}
	[Token(Token = "0x20004E8")]
	public enum Fade
	{
		[Token(Token = "0x4001995")]
		In,
		[Token(Token = "0x4001996")]
		Out
	}
	[Serializable]
	[Token(Token = "0x20004E9")]
	public class SoundGroup
	{
		[Token(Token = "0x4001997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x4001998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SoundFX[] soundList;

		[Token(Token = "0x4001999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioMixerGroup mixerGroup;

		[Token(Token = "0x400199A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x825060", Offset = "0x825060")]
		public int maxPlayingSounds;

		[Token(Token = "0x400199B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public PreloadSounds preloadAudio;

		[Token(Token = "0x400199C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float volumeOverride;

		[Token(Token = "0x400199D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[HideInInspector]
		public int playingSoundCount;

		[Token(Token = "0x6002CC7")]
		[Address(RVA = "0xF97898", Offset = "0xF97898", VA = "0xF97898")]
		public SoundGroup(string name)
		{
		}

		[Token(Token = "0x6002CC8")]
		[Address(RVA = "0xF9792C", Offset = "0xF9792C", VA = "0xF9792C")]
		public SoundGroup()
		{
		}

		[Token(Token = "0x6002CC9")]
		[Address(RVA = "0xF96304", Offset = "0xF96304", VA = "0xF96304")]
		public void IncrementPlayCount()
		{
		}

		[Token(Token = "0x6002CCA")]
		[Address(RVA = "0xF96444", Offset = "0xF96444", VA = "0xF96444")]
		public void DecrementPlayCount()
		{
		}

		[Token(Token = "0x6002CCB")]
		[Address(RVA = "0xF96EFC", Offset = "0xF96EFC", VA = "0xF96EFC")]
		public bool CanPlaySound()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20004EA")]
	public class AudioManager : MonoBehaviour
	{
		[Token(Token = "0x2000707")]
		public enum Fade
		{
			[Token(Token = "0x4002718")]
			In,
			[Token(Token = "0x4002719")]
			Out
		}

		[Token(Token = "0x2000708")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820FB0", Offset = "0x820FB0")]
		private sealed class <>c__DisplayClass77_0
		{
			[Token(Token = "0x400271A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SoundPriority priority;

			[Token(Token = "0x600369C")]
			[Address(RVA = "0xF93444", Offset = "0xF93444", VA = "0xF93444")]
			public <>c__DisplayClass77_0()
			{
			}

			[Token(Token = "0x600369D")]
			[Address(RVA = "0xF95DC0", Offset = "0xF95DC0", VA = "0xF95DC0")]
			internal bool <FindFreeEmitter>b__0(SoundEmitter item)
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x2000709")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820FC0", Offset = "0x820FC0")]
		private sealed class <>c
		{
			[Token(Token = "0x400271B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400271C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Predicate<SoundEmitter> <>9__77_1;

			[Token(Token = "0x600369F")]
			[Address(RVA = "0xF95D28", Offset = "0xF95D28", VA = "0xF95D28")]
			public <>c()
			{
			}

			[Token(Token = "0x60036A0")]
			[Address(RVA = "0xF95D30", Offset = "0xF95D30", VA = "0xF95D30")]
			internal bool <FindFreeEmitter>b__77_1(SoundEmitter item)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x400199E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82508C", Offset = "0x82508C")]
		public bool makePersistent;

		[Token(Token = "0x400199F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8250C4", Offset = "0x8250C4")]
		public bool enableSpatializedAudio;

		[Token(Token = "0x40019A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8250FC", Offset = "0x8250FC")]
		public bool enableSpatializedFastOverride;

		[Token(Token = "0x40019A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x825134", Offset = "0x825134")]
		public AudioMixer audioMixer;

		[Token(Token = "0x40019A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82516C", Offset = "0x82516C")]
		public AudioMixerGroup defaultMixerGroup;

		[Token(Token = "0x40019A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8251A4", Offset = "0x8251A4")]
		public AudioMixerGroup reservedMixerGroup;

		[Token(Token = "0x40019A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8251DC", Offset = "0x8251DC")]
		public AudioMixerGroup voiceChatMixerGroup;

		[Token(Token = "0x40019A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x825214", Offset = "0x825214")]
		public bool verboseLogging;

		[Token(Token = "0x40019A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82524C", Offset = "0x82524C")]
		public int maxSoundEmitters;

		[Token(Token = "0x40019A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x825284", Offset = "0x825284")]
		public float volumeSoundFX;

		[Token(Token = "0x40019A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8252BC", Offset = "0x8252BC")]
		public float soundFxFadeSecs;

		[Token(Token = "0x40019A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float audioMinFallOffDistance;

		[Token(Token = "0x40019AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float audioMaxFallOffDistance;

		[Token(Token = "0x40019AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public SoundGroup[] soundGroupings;

		[Token(Token = "0x40019AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<string, SoundFX> soundFXCache;

		[Token(Token = "0x40019AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static AudioManager theAudioManager;

		[Token(Token = "0x40019AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static FastList<string> names;

		[Token(Token = "0x40019AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static string[] defaultSound;

		[Token(Token = "0x40019B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static SoundFX nullSound;

		[Token(Token = "0x40019B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static bool hideWarnings;

		[Token(Token = "0x40019B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float audioMaxFallOffDistanceSqr;

		[Token(Token = "0x40019B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private SoundEmitter[] soundEmitters;

		[Token(Token = "0x40019B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private FastList<SoundEmitter> playingEmitters;

		[Token(Token = "0x40019B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private FastList<SoundEmitter> nextFreeEmitters;

		[Token(Token = "0x40019B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private MixerSnapshot currentSnapshot;

		[Token(Token = "0x40019B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static GameObject soundEmitterParent;

		[Token(Token = "0x40019B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static Transform staticListenerPosition;

		[Token(Token = "0x40019B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static bool showPlayingEmitterCount;

		[Token(Token = "0x40019BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private static bool forceShowEmitterCount;

		[Token(Token = "0x40019BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		private static bool soundEnabled;

		[Token(Token = "0x40019BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static readonly AnimationCurve defaultReverbZoneMix;

		[Token(Token = "0x1700064E")]
		public static bool enableSpatialization
		{
			[Token(Token = "0x6002CCC")]
			[Address(RVA = "0xF8F2E0", Offset = "0xF8F2E0", VA = "0xF8F2E0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700064F")]
		public static AudioManager Instance
		{
			[Token(Token = "0x6002CCD")]
			[Address(RVA = "0xF8F3C0", Offset = "0xF8F3C0", VA = "0xF8F3C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000650")]
		public static float NearFallOff
		{
			[Token(Token = "0x6002CCE")]
			[Address(RVA = "0xF8F428", Offset = "0xF8F428", VA = "0xF8F428")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000651")]
		public static float FarFallOff
		{
			[Token(Token = "0x6002CCF")]
			[Address(RVA = "0xF8F49C", Offset = "0xF8F49C", VA = "0xF8F49C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000652")]
		public static AudioMixerGroup EmitterGroup
		{
			[Token(Token = "0x6002CD0")]
			[Address(RVA = "0xF8F510", Offset = "0xF8F510", VA = "0xF8F510")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000653")]
		public static AudioMixerGroup ReservedGroup
		{
			[Token(Token = "0x6002CD1")]
			[Address(RVA = "0xF8F584", Offset = "0xF8F584", VA = "0xF8F584")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000654")]
		public static AudioMixerGroup VoipGroup
		{
			[Token(Token = "0x6002CD2")]
			[Address(RVA = "0xF8F5F8", Offset = "0xF8F5F8", VA = "0xF8F5F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000655")]
		public static bool SoundEnabled
		{
			[Token(Token = "0x6002CDD")]
			[Address(RVA = "0xF91368", Offset = "0xF91368", VA = "0xF91368")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6002CD3")]
		[Address(RVA = "0xF8F66C", Offset = "0xF8F66C", VA = "0xF8F66C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002CD4")]
		[Address(RVA = "0xF8F894", Offset = "0xF8F894", VA = "0xF8F894")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002CD5")]
		[Address(RVA = "0xF8F670", Offset = "0xF8F670", VA = "0xF8F670")]
		private void Init()
		{
		}

		[Token(Token = "0x6002CD6")]
		[Address(RVA = "0xF904E0", Offset = "0xF904E0", VA = "0xF904E0")]
		private void Update()
		{
		}

		[Token(Token = "0x6002CD7")]
		[Address(RVA = "0xF8F9EC", Offset = "0xF8F9EC", VA = "0xF8F9EC")]
		private void RebuildSoundFXCache()
		{
		}

		[Token(Token = "0x6002CD8")]
		[Address(RVA = "0xF90B04", Offset = "0xF90B04", VA = "0xF90B04")]
		public static SoundFX FindSoundFX(string name, bool rebuildCache = false)
		{
			return null;
		}

		[Token(Token = "0x6002CD9")]
		[Address(RVA = "0xF90C84", Offset = "0xF90C84", VA = "0xF90C84")]
		private static bool FindAudioManager()
		{
			return default(bool);
		}

		[Token(Token = "0x6002CDA")]
		[Address(RVA = "0xF90E20", Offset = "0xF90E20", VA = "0xF90E20")]
		public static GameObject GetGameObject()
		{
			return null;
		}

		[Token(Token = "0x6002CDB")]
		[Address(RVA = "0xF90F20", Offset = "0xF90F20", VA = "0xF90F20")]
		public static string NameMinusGroup(string name)
		{
			return null;
		}

		[Token(Token = "0x6002CDC")]
		[Address(RVA = "0xF90FB0", Offset = "0xF90FB0", VA = "0xF90FB0")]
		public static string[] GetSoundFXNames(string currentValue, out int currentIdx)
		{
			return null;
		}

		[Token(Token = "0x6002CDE")]
		[Address(RVA = "0xF913D0", Offset = "0xF913D0", VA = "0xF913D0")]
		private static int CalculateMaxEmittersSize()
		{
			return default(int);
		}

		[Token(Token = "0x6002CDF")]
		[Address(RVA = "0xF91448", Offset = "0xF91448", VA = "0xF91448")]
		private static bool ValidateEmitterIndex(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6002CE0")]
		[Address(RVA = "0xF8FE38", Offset = "0xF8FE38", VA = "0xF8FE38")]
		private void InitializeSoundSystem()
		{
		}

		[Token(Token = "0x6002CE1")]
		[Address(RVA = "0xF904E4", Offset = "0xF904E4", VA = "0xF904E4")]
		private void UpdateFreeEmitters()
		{
		}

		[Token(Token = "0x6002CE2")]
		[Address(RVA = "0xF916D8", Offset = "0xF916D8", VA = "0xF916D8")]
		private string Fmt(int count)
		{
			return null;
		}

		[Token(Token = "0x6002CE3")]
		[Address(RVA = "0xF917DC", Offset = "0xF917DC", VA = "0xF917DC")]
		private string FmtFree(int count)
		{
			return null;
		}

		[Token(Token = "0x6002CE4")]
		[Address(RVA = "0xF918E4", Offset = "0xF918E4", VA = "0xF918E4")]
		private void OnPreSceneLoad()
		{
		}

		[Token(Token = "0x6002CE5")]
		[Address(RVA = "0xF915A0", Offset = "0xF915A0", VA = "0xF915A0")]
		private void ResetFreeEmitters()
		{
		}

		[Token(Token = "0x6002CE6")]
		[Address(RVA = "0xF91A50", Offset = "0xF91A50", VA = "0xF91A50")]
		public static void FadeOutSoundChannel(int channel, float delaySecs, float fadeTime)
		{
		}

		[Token(Token = "0x6002CE7")]
		[Address(RVA = "0xF91BA4", Offset = "0xF91BA4", VA = "0xF91BA4")]
		public static bool StopSound(int idx, bool fadeOut = true, bool stopReserved = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6002CE8")]
		[Address(RVA = "0xF91D54", Offset = "0xF91D54", VA = "0xF91D54")]
		public static void FadeInSound(int idx, float fadeTime, float volume)
		{
		}

		[Token(Token = "0x6002CE9")]
		[Address(RVA = "0xF8EFFC", Offset = "0xF8EFFC", VA = "0xF8EFFC")]
		public static void FadeInSound(int idx, float fadeTime)
		{
		}

		[Token(Token = "0x6002CEA")]
		[Address(RVA = "0xF8F170", Offset = "0xF8F170", VA = "0xF8F170")]
		public static void FadeOutSound(int idx, float fadeTime)
		{
		}

		[Token(Token = "0x6002CEB")]
		[Address(RVA = "0xF91F00", Offset = "0xF91F00", VA = "0xF91F00")]
		public static void StopAllSounds(bool fadeOut, bool stopReserved = false)
		{
		}

		[Token(Token = "0x6002CEC")]
		[Address(RVA = "0xF91FCC", Offset = "0xF91FCC", VA = "0xF91FCC")]
		public void MuteAllSounds(bool mute, bool muteReserved = false)
		{
		}

		[Token(Token = "0x6002CED")]
		[Address(RVA = "0xF92060", Offset = "0xF92060", VA = "0xF92060")]
		public void UnMuteAllSounds(bool unmute, bool unmuteReserved = false)
		{
		}

		[Token(Token = "0x6002CEE")]
		[Address(RVA = "0xF92124", Offset = "0xF92124", VA = "0xF92124")]
		public static float GetEmitterEndTime(int idx)
		{
			return default(float);
		}

		[Token(Token = "0x6002CEF")]
		[Address(RVA = "0xF921C8", Offset = "0xF921C8", VA = "0xF921C8")]
		public static float SetEmitterTime(int idx, float time)
		{
			return default(float);
		}

		[Token(Token = "0x6002CF0")]
		[Address(RVA = "0xF922A8", Offset = "0xF922A8", VA = "0xF922A8")]
		public static int PlaySound(AudioClip clip, float volume, EmitterChannel src = EmitterChannel.Any, float delay = 0f, float pitchVariance = 1f, bool loop = false)
		{
			return default(int);
		}

		[Token(Token = "0x6002CF1")]
		[Address(RVA = "0xF92D8C", Offset = "0xF92D8C", VA = "0xF92D8C")]
		private static int FindFreeEmitter(EmitterChannel src, SoundPriority priority)
		{
			return default(int);
		}

		[Token(Token = "0x6002CF2")]
		[Address(RVA = "0xF9344C", Offset = "0xF9344C", VA = "0xF9344C")]
		public static int PlaySound(SoundFX soundFX, EmitterChannel src = EmitterChannel.Any, float delay = 0f)
		{
			return default(int);
		}

		[Token(Token = "0x6002CF3")]
		[Address(RVA = "0xF9362C", Offset = "0xF9362C", VA = "0xF9362C")]
		public static int PlaySoundAt(Vector3 position, SoundFX soundFX, EmitterChannel src = EmitterChannel.Any, float delay = 0f, float volumeOverride = 1f, float pitchMultiplier = 1f)
		{
			return default(int);
		}

		[Token(Token = "0x6002CF4")]
		[Address(RVA = "0xF94370", Offset = "0xF94370", VA = "0xF94370")]
		public static int PlayRandomSoundAt(Vector3 position, AudioClip[] clips, float volume, EmitterChannel src = EmitterChannel.Any, float delay = 0f, float pitch = 1f, bool loop = false)
		{
			return default(int);
		}

		[Token(Token = "0x6002CF5")]
		[Address(RVA = "0xF924B0", Offset = "0xF924B0", VA = "0xF924B0")]
		public static int PlaySoundAt(Vector3 position, AudioClip clip, float volume = 1f, EmitterChannel src = EmitterChannel.Any, float delay = 0f, float pitch = 1f, bool loop = false)
		{
			return default(int);
		}

		[Token(Token = "0x6002CF6")]
		[Address(RVA = "0xF94490", Offset = "0xF94490", VA = "0xF94490")]
		public static void SetOnFinished(int emitterIdx, Action onFinished)
		{
		}

		[Token(Token = "0x6002CF7")]
		[Address(RVA = "0xF94564", Offset = "0xF94564", VA = "0xF94564")]
		public static void SetOnFinished(int emitterIdx, Action<object> onFinished, object obj)
		{
		}

		[Token(Token = "0x6002CF8")]
		[Address(RVA = "0xF94644", Offset = "0xF94644", VA = "0xF94644")]
		public static void AttachSoundToParent(int idx, Transform parent)
		{
		}

		[Token(Token = "0x6002CF9")]
		[Address(RVA = "0xF949FC", Offset = "0xF949FC", VA = "0xF949FC")]
		public static void DetachSoundFromParent(int idx)
		{
		}

		[Token(Token = "0x6002CFA")]
		[Address(RVA = "0xF94BF8", Offset = "0xF94BF8", VA = "0xF94BF8")]
		public static void DetachSoundsFromParent(SoundEmitter[] emitters, bool stopSounds = true)
		{
		}

		[Token(Token = "0x6002CFB")]
		[Address(RVA = "0xF94D14", Offset = "0xF94D14", VA = "0xF94D14")]
		public static void SetEmitterMixerGroup(int idx, AudioMixerGroup mixerGroup)
		{
		}

		[Token(Token = "0x6002CFC")]
		[Address(RVA = "0xF94EDC", Offset = "0xF94EDC", VA = "0xF94EDC")]
		public static MixerSnapshot GetActiveSnapshot()
		{
			return null;
		}

		[Token(Token = "0x6002CFD")]
		[Address(RVA = "0xF94FB4", Offset = "0xF94FB4", VA = "0xF94FB4")]
		public static void SetCurrentSnapshot(MixerSnapshot mixerSnapshot)
		{
		}

		[Token(Token = "0x6002CFE")]
		[Address(RVA = "0xF950E8", Offset = "0xF950E8", VA = "0xF950E8")]
		public static void BlendWithCurrentSnapshot(MixerSnapshot blendSnapshot, float weight, float blendTime = 0f)
		{
		}

		[Token(Token = "0x6002CFF")]
		[Address(RVA = "0xF954D4", Offset = "0xF954D4", VA = "0xF954D4")]
		public AudioManager()
		{
		}
	}
	[Token(Token = "0x20004EB")]
	public enum EmitterChannel
	{
		[Token(Token = "0x40019BE")]
		None = -1,
		[Token(Token = "0x40019BF")]
		Reserved,
		[Token(Token = "0x40019C0")]
		Any
	}
	[Serializable]
	[Token(Token = "0x20004EC")]
	public class MixerSnapshot
	{
		[Token(Token = "0x40019C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AudioMixerSnapshot snapshot;

		[Token(Token = "0x40019C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float transitionTime;

		[Token(Token = "0x6002D01")]
		[Address(RVA = "0xF95EBC", Offset = "0xF95EBC", VA = "0xF95EBC")]
		public MixerSnapshot()
		{
		}
	}
	[Token(Token = "0x20004ED")]
	public class MinMaxAttribute : PropertyAttribute
	{
		[Token(Token = "0x40019C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float minDefaultVal;

		[Token(Token = "0x40019C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float maxDefaultVal;

		[Token(Token = "0x40019C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float min;

		[Token(Token = "0x40019C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float max;

		[Token(Token = "0x6002D02")]
		[Address(RVA = "0xF95E60", Offset = "0xF95E60", VA = "0xF95E60")]
		public MinMaxAttribute(float minDefaultVal, float maxDefaultVal, float min, float max)
		{
		}
	}
	[Token(Token = "0x20004EE")]
	public class SoundEmitter : MonoBehaviour
	{
		[Token(Token = "0x200070A")]
		public enum FadeState
		{
			[Token(Token = "0x400271E")]
			Null,
			[Token(Token = "0x400271F")]
			FadingIn,
			[Token(Token = "0x4002720")]
			FadingOut,
			[Token(Token = "0x4002721")]
			Ducking
		}

		[Token(Token = "0x200070B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820FD0", Offset = "0x820FD0")]
		private sealed class <DelayedSyncTo>d__57 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002722")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002723")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002724")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SoundEmitter <>4__this;

			[Token(Token = "0x4002725")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public SoundEmitter other;

			[Token(Token = "0x4002726")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float fadeTime;

			[Token(Token = "0x4002727")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float toVolume;

			[Token(Token = "0x1700071A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60036A4")]
				[Address(RVA = "0xF96908", Offset = "0xF96908", VA = "0xF96908", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700071B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60036A6")]
				[Address(RVA = "0xF96970", Offset = "0xF96970", VA = "0xF96970", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60036A1")]
			[Address(RVA = "0xF965E8", Offset = "0xF965E8", VA = "0xF965E8")]
			[DebuggerHidden]
			public <DelayedSyncTo>d__57(int <>1__state)
			{
			}

			[Token(Token = "0x60036A2")]
			[Address(RVA = "0xF96818", Offset = "0xF96818", VA = "0xF96818", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60036A3")]
			[Address(RVA = "0xF9681C", Offset = "0xF9681C", VA = "0xF9681C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60036A5")]
			[Address(RVA = "0xF96910", Offset = "0xF96910", VA = "0xF96910", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200070C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820FE0", Offset = "0x820FE0")]
		private sealed class <FadeSoundChannelTo>d__63 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002728")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002729")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400272A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SoundEmitter <>4__this;

			[Token(Token = "0x400272B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float toVolume;

			[Token(Token = "0x400272C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float fadeTime;

			[Token(Token = "0x400272D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <start>5__2;

			[Token(Token = "0x400272E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <end>5__3;

			[Token(Token = "0x400272F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <startTime>5__4;

			[Token(Token = "0x4002730")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <elapsedTime>5__5;

			[Token(Token = "0x1700071C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60036AA")]
				[Address(RVA = "0xF96DBC", Offset = "0xF96DBC", VA = "0xF96DBC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700071D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60036AC")]
				[Address(RVA = "0xF96E24", Offset = "0xF96E24", VA = "0xF96E24", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60036A7")]
			[Address(RVA = "0xF967A8", Offset = "0xF967A8", VA = "0xF967A8")]
			[DebuggerHidden]
			public <FadeSoundChannelTo>d__63(int <>1__state)
			{
			}

			[Token(Token = "0x60036A8")]
			[Address(RVA = "0xF96C50", Offset = "0xF96C50", VA = "0xF96C50", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60036A9")]
			[Address(RVA = "0xF96C54", Offset = "0xF96C54", VA = "0xF96C54", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60036AB")]
			[Address(RVA = "0xF96DC4", Offset = "0xF96DC4", VA = "0xF96DC4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200070D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x820FF0", Offset = "0x820FF0")]
		private sealed class <FadeSoundChannel>d__64 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002731")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002732")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002733")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delaySecs;

			[Token(Token = "0x4002734")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Fade fadeType;

			[Token(Token = "0x4002735")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float defaultVolume;

			[Token(Token = "0x4002736")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public SoundEmitter <>4__this;

			[Token(Token = "0x4002737")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float fadeTime;

			[Token(Token = "0x4002738")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <start>5__2;

			[Token(Token = "0x4002739")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <end>5__3;

			[Token(Token = "0x400273A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private bool <restartPlay>5__4;

			[Token(Token = "0x400273B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float <startTime>5__5;

			[Token(Token = "0x400273C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float <elapsedTime>5__6;

			[Token(Token = "0x1700071E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60036B0")]
				[Address(RVA = "0xF96BE0", Offset = "0xF96BE0", VA = "0xF96BE0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700071F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60036B2")]
				[Address(RVA = "0xF96C48", Offset = "0xF96C48", VA = "0xF96C48", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60036AD")]
			[Address(RVA = "0xF967D4", Offset = "0xF967D4", VA = "0xF967D4")]
			[DebuggerHidden]
			public <FadeSoundChannel>d__64(int <>1__state)
			{
			}

			[Token(Token = "0x60036AE")]
			[Address(RVA = "0xF96978", Offset = "0xF96978", VA = "0xF96978", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60036AF")]
			[Address(RVA = "0xF9697C", Offset = "0xF9697C", VA = "0xF9697C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60036B1")]
			[Address(RVA = "0xF96BE8", Offset = "0xF96BE8", VA = "0xF96BE8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40019C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EmitterChannel channel;

		[Token(Token = "0x40019C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool disableSpatialization;

		[Token(Token = "0x40019C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FadeState state;

		[NonSerialized]
		[Token(Token = "0x40019CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public AudioSource audioSource;

		[NonSerialized]
		[Token(Token = "0x40019CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public SoundPriority priority;

		[NonSerialized]
		[Token(Token = "0x40019CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public ONSPAudioSource osp;

		[NonSerialized]
		[Token(Token = "0x40019CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public float endPlayTime;

		[Token(Token = "0x40019CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform lastParentTransform;

		[NonSerialized]
		[Token(Token = "0x40019CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		public float defaultVolume;

		[NonSerialized]
		[Token(Token = "0x40019D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public Transform defaultParent;

		[NonSerialized]
		[Token(Token = "0x40019D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public int originalIdx;

		[NonSerialized]
		[Token(Token = "0x40019D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public Action onFinished;

		[NonSerialized]
		[Token(Token = "0x40019D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		public Action<object> onFinishedObject;

		[NonSerialized]
		[Token(Token = "0x40019D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public object onFinishedParam;

		[NonSerialized]
		[Token(Token = "0x40019D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideInInspector]
		public SoundGroup playingSoundGroup;

		[Token(Token = "0x17000656")]
		public float volume
		{
			[Token(Token = "0x6002D03")]
			[Address(RVA = "0xF94354", Offset = "0xF94354", VA = "0xF94354")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002D04")]
			[Address(RVA = "0xF95F5C", Offset = "0xF95F5C", VA = "0xF95F5C")]
			set
			{
			}
		}

		[Token(Token = "0x17000657")]
		public float pitch
		{
			[Token(Token = "0x6002D05")]
			[Address(RVA = "0xF95F78", Offset = "0xF95F78", VA = "0xF95F78")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002D06")]
			[Address(RVA = "0xF95F94", Offset = "0xF95F94", VA = "0xF95F94")]
			set
			{
			}
		}

		[Token(Token = "0x17000658")]
		public AudioClip clip
		{
			[Token(Token = "0x6002D07")]
			[Address(RVA = "0xF95FB0", Offset = "0xF95FB0", VA = "0xF95FB0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002D08")]
			[Address(RVA = "0xF95FCC", Offset = "0xF95FCC", VA = "0xF95FCC")]
			set
			{
			}
		}

		[Token(Token = "0x17000659")]
		public float time
		{
			[Token(Token = "0x6002D09")]
			[Address(RVA = "0xF95FE8", Offset = "0xF95FE8", VA = "0xF95FE8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002D0A")]
			[Address(RVA = "0xF9228C", Offset = "0xF9228C", VA = "0xF9228C")]
			set
			{
			}
		}

		[Token(Token = "0x1700065A")]
		public float length
		{
			[Token(Token = "0x6002D0B")]
			[Address(RVA = "0xF96004", Offset = "0xF96004", VA = "0xF96004")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700065B")]
		public bool loop
		{
			[Token(Token = "0x6002D0C")]
			[Address(RVA = "0xF960BC", Offset = "0xF960BC", VA = "0xF960BC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002D0D")]
			[Address(RVA = "0xF960D8", Offset = "0xF960D8", VA = "0xF960D8")]
			set
			{
			}
		}

		[Token(Token = "0x1700065C")]
		public bool mute
		{
			[Token(Token = "0x6002D0E")]
			[Address(RVA = "0xF960F8", Offset = "0xF960F8", VA = "0xF960F8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002D0F")]
			[Address(RVA = "0xF96114", Offset = "0xF96114", VA = "0xF96114")]
			set
			{
			}
		}

		[Token(Token = "0x1700065D")]
		public AudioVelocityUpdateMode velocityUpdateMode
		{
			[Token(Token = "0x6002D10")]
			[Address(RVA = "0xF96134", Offset = "0xF96134", VA = "0xF96134")]
			get
			{
				return default(AudioVelocityUpdateMode);
			}
			[Token(Token = "0x6002D11")]
			[Address(RVA = "0xF96150", Offset = "0xF96150", VA = "0xF96150")]
			set
			{
			}
		}

		[Token(Token = "0x1700065E")]
		public bool isPlaying
		{
			[Token(Token = "0x6002D12")]
			[Address(RVA = "0xF9616C", Offset = "0xF9616C", VA = "0xF9616C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6002D13")]
		[Address(RVA = "0xF96188", Offset = "0xF96188", VA = "0xF96188")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002D14")]
		[Address(RVA = "0xF94340", Offset = "0xF94340", VA = "0xF94340")]
		public void SetPlayingSoundGroup(SoundGroup soundGroup)
		{
		}

		[Token(Token = "0x6002D15")]
		[Address(RVA = "0xF96394", Offset = "0xF96394", VA = "0xF96394")]
		public void SetOnFinished(Action onFinished)
		{
		}

		[Token(Token = "0x6002D16")]
		[Address(RVA = "0xF9463C", Offset = "0xF9463C", VA = "0xF9463C")]
		public void SetOnFinished(Action<object> onFinished, object obj)
		{
		}

		[Token(Token = "0x6002D17")]
		[Address(RVA = "0xF9639C", Offset = "0xF9639C", VA = "0xF9639C")]
		public void SetChannel(int _channel)
		{
		}

		[Token(Token = "0x6002D18")]
		[Address(RVA = "0xF963A4", Offset = "0xF963A4", VA = "0xF963A4")]
		public void SetDefaultParent(Transform parent)
		{
		}

		[Token(Token = "0x6002D19")]
		[Address(RVA = "0xF94E34", Offset = "0xF94E34", VA = "0xF94E34")]
		public void SetAudioMixer(AudioMixerGroup _mixer)
		{
		}

		[Token(Token = "0x6002D1A")]
		[Address(RVA = "0xF9166C", Offset = "0xF9166C", VA = "0xF9166C")]
		public bool IsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x6002D1B")]
		[Address(RVA = "0xF963AC", Offset = "0xF963AC", VA = "0xF963AC")]
		public void Play()
		{
		}

		[Token(Token = "0x6002D1C")]
		[Address(RVA = "0xF9640C", Offset = "0xF9640C", VA = "0xF9640C")]
		public void Pause()
		{
		}

		[Token(Token = "0x6002D1D")]
		[Address(RVA = "0xF914C0", Offset = "0xF914C0", VA = "0xF914C0")]
		public void Stop()
		{
		}

		[Token(Token = "0x6002D1E")]
		[Address(RVA = "0xF964D4", Offset = "0xF964D4", VA = "0xF964D4")]
		private int GetSampleTime()
		{
			return default(int);
		}

		[Token(Token = "0x6002D1F")]
		[Address(RVA = "0xF94900", Offset = "0xF94900", VA = "0xF94900")]
		public void ParentTo(Transform parent)
		{
		}

		[Token(Token = "0x6002D20")]
		[Address(RVA = "0xF94B40", Offset = "0xF94B40", VA = "0xF94B40")]
		public void DetachFromParent()
		{
		}

		[Token(Token = "0x6002D21")]
		[Address(RVA = "0xF91A10", Offset = "0xF91A10", VA = "0xF91A10")]
		public void ResetParent(Transform parent)
		{
		}

		[Token(Token = "0x6002D22")]
		[Address(RVA = "0xF9652C", Offset = "0xF9652C", VA = "0xF9652C")]
		public void SyncTo(SoundEmitter other, float fadeTime, float toVolume)
		{
		}

		[Token(Token = "0x6002D23")]
		[Address(RVA = "0xF96558", Offset = "0xF96558", VA = "0xF96558")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x833AE4", Offset = "0x833AE4")]
		private IEnumerator DelayedSyncTo(SoundEmitter other, float fadeTime, float toVolume)
		{
			return null;
		}

		[Token(Token = "0x6002D24")]
		[Address(RVA = "0xF96614", Offset = "0xF96614", VA = "0xF96614")]
		public void FadeTo(float fadeTime, float toVolume)
		{
		}

		[Token(Token = "0x6002D25")]
		[Address(RVA = "0xF91E0C", Offset = "0xF91E0C", VA = "0xF91E0C")]
		public void FadeIn(float fadeTime, float defaultVolume)
		{
		}

		[Token(Token = "0x6002D26")]
		[Address(RVA = "0xF91E88", Offset = "0xF91E88", VA = "0xF91E88")]
		public void FadeIn(float fadeTime)
		{
		}

		[Token(Token = "0x6002D27")]
		[Address(RVA = "0xF91CBC", Offset = "0xF91CBC", VA = "0xF91CBC")]
		public void FadeOut(float fadeTime)
		{
		}

		[Token(Token = "0x6002D28")]
		[Address(RVA = "0xF91B08", Offset = "0xF91B08", VA = "0xF91B08")]
		public void FadeOutDelayed(float delayedSecs, float fadeTime)
		{
		}

		[Token(Token = "0x6002D29")]
		[Address(RVA = "0xF9667C", Offset = "0xF9667C", VA = "0xF9667C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x833B48", Offset = "0x833B48")]
		private IEnumerator FadeSoundChannelTo(float fadeTime, float toVolume)
		{
			return null;
		}

		[Token(Token = "0x6002D2A")]
		[Address(RVA = "0xF96700", Offset = "0xF96700", VA = "0xF96700")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x833BAC", Offset = "0x833BAC")]
		private IEnumerator FadeSoundChannel(float delaySecs, float fadeTime, Fade fadeType, float defaultVolume)
		{
			return null;
		}

		[Token(Token = "0x6002D2B")]
		[Address(RVA = "0xF96800", Offset = "0xF96800", VA = "0xF96800")]
		public SoundEmitter()
		{
		}
	}
	[Token(Token = "0x20004EF")]
	public enum SoundFXNext
	{
		[Token(Token = "0x40019D7")]
		Random,
		[Token(Token = "0x40019D8")]
		Sequential
	}
	[Token(Token = "0x20004F0")]
	public enum FreqHint
	{
		[Token(Token = "0x40019DA")]
		None,
		[Token(Token = "0x40019DB")]
		Wide,
		[Token(Token = "0x40019DC")]
		Narrow
	}
	[Token(Token = "0x20004F1")]
	public enum SoundPriority
	{
		[Token(Token = "0x40019DE")]
		VeryLow = -2,
		[Token(Token = "0x40019DF")]
		Low,
		[Token(Token = "0x40019E0")]
		Default,
		[Token(Token = "0x40019E1")]
		High,
		[Token(Token = "0x40019E2")]
		VeryHigh
	}
	[Serializable]
	[Token(Token = "0x20004F2")]
	public class OSPProps
	{
		[Token(Token = "0x40019E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8253A4", Offset = "0x8253A4")]
		public bool enableSpatialization;

		[Token(Token = "0x40019E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8253DC", Offset = "0x8253DC")]
		public bool useFastOverride;

		[Token(Token = "0x40019E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x825414", Offset = "0x825414")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x825414", Offset = "0x825414")]
		public float gain;

		[Token(Token = "0x40019E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x825468", Offset = "0x825468")]
		public bool enableInvSquare;

		[Token(Token = "0x40019E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8254A0", Offset = "0x8254A0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x8254A0", Offset = "0x8254A0")]
		public float volumetric;

		[Token(Token = "0x40019E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8254F8", Offset = "0x8254F8")]
		[AttributeAttribute(Name = "MinMaxAttribute", RVA = "0x8254F8", Offset = "0x8254F8")]
		public Vector2 invSquareFalloff;

		[Token(Token = "0x6002D2C")]
		[Address(RVA = "0xF95ECC", Offset = "0xF95ECC", VA = "0xF95ECC")]
		public OSPProps()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20004F3")]
	public class SoundFX
	{
		[Token(Token = "0x40019E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x825558", Offset = "0x825558")]
		public string name;

		[Token(Token = "0x40019EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x825590", Offset = "0x825590")]
		public SoundFXNext playback;

		[Token(Token = "0x40019EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8255C8", Offset = "0x8255C8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x8255C8", Offset = "0x8255C8")]
		public float volume;

		[Token(Token = "0x40019EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82561C", Offset = "0x82561C")]
		[AttributeAttribute(Name = "MinMaxAttribute", RVA = "0x82561C", Offset = "0x82561C")]
		public Vector2 pitchVariance;

		[Token(Token = "0x40019ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x825678", Offset = "0x825678")]
		[AttributeAttribute(Name = "MinMaxAttribute", RVA = "0x825678", Offset = "0x825678")]
		public Vector2 falloffDistance;

		[Token(Token = "0x40019EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8256D8", Offset = "0x8256D8")]
		public AudioRolloffMode falloffCurve;

		[Token(Token = "0x40019EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x825710", Offset = "0x825710")]
		public AnimationCurve volumeFalloffCurve;

		[Token(Token = "0x40019F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x825748", Offset = "0x825748")]
		public AnimationCurve reverbZoneMix;

		[Token(Token = "0x40019F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x825780", Offset = "0x825780")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x825780", Offset = "0x825780")]
		public float spread;

		[Token(Token = "0x40019F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8257D8", Offset = "0x8257D8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x8257D8", Offset = "0x8257D8")]
		public float pctChanceToPlay;

		[Token(Token = "0x40019F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82582C", Offset = "0x82582C")]
		public SoundPriority priority;

		[Token(Token = "0x40019F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x825864", Offset = "0x825864")]
		[AttributeAttribute(Name = "MinMaxAttribute", RVA = "0x825864", Offset = "0x825864")]
		public Vector2 delay;

		[Token(Token = "0x40019F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8258C0", Offset = "0x8258C0")]
		public bool looping;

		[Token(Token = "0x40019F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public OSPProps ospProps;

		[Token(Token = "0x40019F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8258F8", Offset = "0x8258F8")]
		public AudioClip[] soundClips;

		[Token(Token = "0x40019F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool visibilityToggle;

		[NonSerialized]
		[Token(Token = "0x40019F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private SoundGroup soundGroup;

		[Token(Token = "0x40019FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int lastIdx;

		[Token(Token = "0x40019FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private int playingIdx;

		[Token(Token = "0x1700065F")]
		public int Length
		{
			[Token(Token = "0x6002D2E")]
			[Address(RVA = "0xF96E2C", Offset = "0xF96E2C", VA = "0xF96E2C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000660")]
		public bool IsValid
		{
			[Token(Token = "0x6002D2F")]
			[Address(RVA = "0xF96E48", Offset = "0xF96E48", VA = "0xF96E48")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000661")]
		public SoundGroup Group
		{
			[Token(Token = "0x6002D30")]
			[Address(RVA = "0xF96EEC", Offset = "0xF96EEC", VA = "0xF96EEC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002D31")]
			[Address(RVA = "0xF96EF4", Offset = "0xF96EF4", VA = "0xF96EF4")]
			set
			{
			}
		}

		[Token(Token = "0x17000662")]
		public float MaxFalloffDistSquared
		{
			[Token(Token = "0x6002D32")]
			[Address(RVA = "0xF94248", Offset = "0xF94248", VA = "0xF94248")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000663")]
		public float GroupVolumeOverride
		{
			[Token(Token = "0x6002D33")]
			[Address(RVA = "0xF9427C", Offset = "0xF9427C", VA = "0xF9427C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6002D2D")]
		[Address(RVA = "0xF957DC", Offset = "0xF957DC", VA = "0xF957DC")]
		public SoundFX()
		{
		}

		[Token(Token = "0x6002D34")]
		[Address(RVA = "0xF94178", Offset = "0xF94178", VA = "0xF94178")]
		public AudioClip GetClip()
		{
			return null;
		}

		[Token(Token = "0x6002D35")]
		[Address(RVA = "0xF942A0", Offset = "0xF942A0", VA = "0xF942A0")]
		public AudioMixerGroup GetMixerGroup(AudioMixerGroup defaultMixerGroup)
		{
			return null;
		}

		[Token(Token = "0x6002D36")]
		[Address(RVA = "0xF94254", Offset = "0xF94254", VA = "0xF94254")]
		public bool ReachedGroupPlayLimit()
		{
			return default(bool);
		}

		[Token(Token = "0x6002D37")]
		[Address(RVA = "0xF96F1C", Offset = "0xF96F1C", VA = "0xF96F1C")]
		public float GetClipLength(int idx)
		{
			return default(float);
		}

		[Token(Token = "0x6002D38")]
		[Address(RVA = "0xF94294", Offset = "0xF94294", VA = "0xF94294")]
		public float GetPitch()
		{
			return default(float);
		}

		[Token(Token = "0x6002D39")]
		[Address(RVA = "0xF97018", Offset = "0xF97018", VA = "0xF97018")]
		public int PlaySound(float delaySecs = 0f)
		{
			return default(int);
		}

		[Token(Token = "0x6002D3A")]
		[Address(RVA = "0xF970F4", Offset = "0xF970F4", VA = "0xF970F4")]
		public int PlaySoundAt(Vector3 pos, float delaySecs = 0f, float volumeOverride = 1f, float pitchMultiplier = 1f)
		{
			return default(int);
		}

		[Token(Token = "0x6002D3B")]
		[Address(RVA = "0xF97208", Offset = "0xF97208", VA = "0xF97208")]
		public void SetOnFinished(Action onFinished)
		{
		}

		[Token(Token = "0x6002D3C")]
		[Address(RVA = "0xF97294", Offset = "0xF97294", VA = "0xF97294")]
		public void SetOnFinished(Action<object> onFinished, object obj)
		{
		}

		[Token(Token = "0x6002D3D")]
		[Address(RVA = "0xF97328", Offset = "0xF97328", VA = "0xF97328")]
		public bool StopSound()
		{
			return default(bool);
		}

		[Token(Token = "0x6002D3E")]
		[Address(RVA = "0xF973B4", Offset = "0xF973B4", VA = "0xF973B4")]
		public void AttachToParent(Transform parent)
		{
		}

		[Token(Token = "0x6002D3F")]
		[Address(RVA = "0xF97440", Offset = "0xF97440", VA = "0xF97440")]
		public void DetachFromParent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20004F4")]
	public class SoundFXRef
	{
		[Token(Token = "0x40019FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string soundFXName;

		[Token(Token = "0x40019FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool initialized;

		[Token(Token = "0x40019FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private SoundFX soundFXCached;

		[Token(Token = "0x17000664")]
		public SoundFX soundFX
		{
			[Token(Token = "0x6002D40")]
			[Address(RVA = "0xF974B8", Offset = "0xF974B8", VA = "0xF974B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000665")]
		public string name
		{
			[Token(Token = "0x6002D41")]
			[Address(RVA = "0xF975AC", Offset = "0xF975AC", VA = "0xF975AC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002D42")]
			[Address(RVA = "0xF975B4", Offset = "0xF975B4", VA = "0xF975B4")]
			set
			{
			}
		}

		[Token(Token = "0x17000666")]
		public int Length
		{
			[Token(Token = "0x6002D44")]
			[Address(RVA = "0xF975BC", Offset = "0xF975BC", VA = "0xF975BC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000667")]
		public bool IsValid
		{
			[Token(Token = "0x6002D45")]
			[Address(RVA = "0xF97600", Offset = "0xF97600", VA = "0xF97600")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6002D43")]
		[Address(RVA = "0xF974E8", Offset = "0xF974E8", VA = "0xF974E8")]
		private void Init()
		{
		}

		[Token(Token = "0x6002D46")]
		[Address(RVA = "0xF97638", Offset = "0xF97638", VA = "0xF97638")]
		public AudioClip GetClip()
		{
			return null;
		}

		[Token(Token = "0x6002D47")]
		[Address(RVA = "0xF97670", Offset = "0xF97670", VA = "0xF97670")]
		public float GetClipLength(int idx)
		{
			return default(float);
		}

		[Token(Token = "0x6002D48")]
		[Address(RVA = "0xF976B0", Offset = "0xF976B0", VA = "0xF976B0")]
		public int PlaySound(float delaySecs = 0f)
		{
			return default(int);
		}

		[Token(Token = "0x6002D49")]
		[Address(RVA = "0xF8EF7C", Offset = "0xF8EF7C", VA = "0xF8EF7C")]
		public int PlaySoundAt(Vector3 pos, float delaySecs = 0f, float volume = 1f, float pitchMultiplier = 1f)
		{
			return default(int);
		}

		[Token(Token = "0x6002D4A")]
		[Address(RVA = "0xF976F8", Offset = "0xF976F8", VA = "0xF976F8")]
		public void SetOnFinished(Action onFinished)
		{
		}

		[Token(Token = "0x6002D4B")]
		[Address(RVA = "0xF97738", Offset = "0xF97738", VA = "0xF97738")]
		public void SetOnFinished(Action<object> onFinished, object obj)
		{
		}

		[Token(Token = "0x6002D4C")]
		[Address(RVA = "0xF97788", Offset = "0xF97788", VA = "0xF97788")]
		public bool StopSound()
		{
			return default(bool);
		}

		[Token(Token = "0x6002D4D")]
		[Address(RVA = "0xF977C0", Offset = "0xF977C0", VA = "0xF977C0")]
		public void AttachToParent(Transform parent)
		{
		}

		[Token(Token = "0x6002D4E")]
		[Address(RVA = "0xF97800", Offset = "0xF97800", VA = "0xF97800")]
		public void DetachFromParent()
		{
		}

		[Token(Token = "0x6002D4F")]
		[Address(RVA = "0xF97838", Offset = "0xF97838", VA = "0xF97838")]
		public SoundFXRef()
		{
		}
	}
}
namespace UnityStandardAssets.ImageEffects
{
	[Token(Token = "0x20004F5")]
	public enum AAMode
	{
		[Token(Token = "0x4001A00")]
		FXAA2,
		[Token(Token = "0x4001A01")]
		FXAA3Console,
		[Token(Token = "0x4001A02")]
		FXAA1PresetA,
		[Token(Token = "0x4001A03")]
		FXAA1PresetB,
		[Token(Token = "0x4001A04")]
		NFAA,
		[Token(Token = "0x4001A05")]
		SSAA,
		[Token(Token = "0x4001A06")]
		DLAA
	}
	[Token(Token = "0x20004F6")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x81F5E4", Offset = "0x81F5E4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x81F5E4", Offset = "0x81F5E4")]
	public class Antialiasing : PostEffectsBase
	{
		[Token(Token = "0x4001A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AAMode mode;

		[Token(Token = "0x4001A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool showGeneratedNormals;

		[Token(Token = "0x4001A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float offsetScale;

		[Token(Token = "0x4001A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float blurRadius;

		[Token(Token = "0x4001A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float edgeThresholdMin;

		[Token(Token = "0x4001A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float edgeThreshold;

		[Token(Token = "0x4001A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float edgeSharpness;

		[Token(Token = "0x4001A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool dlaaSharp;

		[Token(Token = "0x4001A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader ssaaShader;

		[Token(Token = "0x4001A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material ssaa;

		[Token(Token = "0x4001A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader dlaaShader;

		[Token(Token = "0x4001A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material dlaa;

		[Token(Token = "0x4001A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Shader nfaaShader;

		[Token(Token = "0x4001A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material nfaa;

		[Token(Token = "0x4001A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Shader shaderFXAAPreset2;

		[Token(Token = "0x4001A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material materialFXAAPreset2;

		[Token(Token = "0x4001A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Shader shaderFXAAPreset3;

		[Token(Token = "0x4001A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Material materialFXAAPreset3;

		[Token(Token = "0x4001A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Shader shaderFXAAII;

		[Token(Token = "0x4001A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Material materialFXAAII;

		[Token(Token = "0x4001A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Shader shaderFXAAIII;

		[Token(Token = "0x4001A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Material materialFXAAIII;

		[Token(Token = "0x6002D50")]
		[Address(RVA = "0xAE3FCC", Offset = "0xAE3FCC", VA = "0xAE3FCC")]
		public Material CurrentAAMaterial()
		{
			return null;
		}

		[Token(Token = "0x6002D51")]
		[Address(RVA = "0xAE4030", Offset = "0xAE4030", VA = "0xAE4030", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002D52")]
		[Address(RVA = "0xAE411C", Offset = "0xAE411C", VA = "0xAE411C")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002D53")]
		[Address(RVA = "0xAE4664", Offset = "0xAE4664", VA = "0xAE4664")]
		public Antialiasing()
		{
		}
	}
	[Token(Token = "0x20004F7")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x81F67C", Offset = "0x81F67C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x81F67C", Offset = "0x81F67C")]
	public class Bloom : PostEffectsBase
	{
		[Token(Token = "0x200070E")]
		public enum LensFlareStyle
		{
			[Token(Token = "0x400273E")]
			Ghosting,
			[Token(Token = "0x400273F")]
			Anamorphic,
			[Token(Token = "0x4002740")]
			Combined
		}

		[Token(Token = "0x200070F")]
		public enum TweakMode
		{
			[Token(Token = "0x4002742")]
			Basic,
			[Token(Token = "0x4002743")]
			Complex
		}

		[Token(Token = "0x2000710")]
		public enum HDRBloomMode
		{
			[Token(Token = "0x4002745")]
			Auto,
			[Token(Token = "0x4002746")]
			On,
			[Token(Token = "0x4002747")]
			Off
		}

		[Token(Token = "0x2000711")]
		public enum BloomScreenBlendMode
		{
			[Token(Token = "0x4002749")]
			Screen,
			[Token(Token = "0x400274A")]
			Add
		}

		[Token(Token = "0x2000712")]
		public enum BloomQuality
		{
			[Token(Token = "0x400274C")]
			Cheap,
			[Token(Token = "0x400274D")]
			High
		}

		[Token(Token = "0x4001A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TweakMode tweakMode;

		[Token(Token = "0x4001A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BloomScreenBlendMode screenBlendMode;

		[Token(Token = "0x4001A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public HDRBloomMode hdr;

		[Token(Token = "0x4001A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool doHdr;

		[Token(Token = "0x4001A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float sepBlurSpread;

		[Token(Token = "0x4001A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BloomQuality quality;

		[Token(Token = "0x4001A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float bloomIntensity;

		[Token(Token = "0x4001A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float bloomThreshold;

		[Token(Token = "0x4001A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Color bloomThresholdColor;

		[Token(Token = "0x4001A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int bloomBlurIterations;

		[Token(Token = "0x4001A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int hollywoodFlareBlurIterations;

		[Token(Token = "0x4001A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float flareRotation;

		[Token(Token = "0x4001A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public LensFlareStyle lensflareMode;

		[Token(Token = "0x4001A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float hollyStretchWidth;

		[Token(Token = "0x4001A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float lensflareIntensity;

		[Token(Token = "0x4001A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float lensflareThreshold;

		[Token(Token = "0x4001A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float lensFlareSaturation;

		[Token(Token = "0x4001A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Color flareColorA;

		[Token(Token = "0x4001A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public Color flareColorB;

		[Token(Token = "0x4001A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public Color flareColorC;

		[Token(Token = "0x4001A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public Color flareColorD;

		[Token(Token = "0x4001A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Texture2D lensFlareVignetteMask;

		[Token(Token = "0x4001A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Shader lensFlareShader;

		[Token(Token = "0x4001A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Material lensFlareMaterial;

		[Token(Token = "0x4001A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Shader screenBlendShader;

		[Token(Token = "0x4001A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Material screenBlend;

		[Token(Token = "0x4001A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Shader blurAndFlaresShader;

		[Token(Token = "0x4001A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Material blurAndFlaresMaterial;

		[Token(Token = "0x4001A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Shader brightPassFilterShader;

		[Token(Token = "0x4001A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Material brightPassFilterMaterial;

		[Token(Token = "0x6002D54")]
		[Address(RVA = "0xAE4688", Offset = "0xAE4688", VA = "0xAE4688", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002D55")]
		[Address(RVA = "0xAE4728", Offset = "0xAE4728", VA = "0xAE4728")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002D56")]
		[Address(RVA = "0xAE5AE4", Offset = "0xAE5AE4", VA = "0xAE5AE4")]
		private void AddTo(float intensity_, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6002D57")]
		[Address(RVA = "0xAE58E4", Offset = "0xAE58E4", VA = "0xAE58E4")]
		private void BlendFlares(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6002D58")]
		[Address(RVA = "0xAE55EC", Offset = "0xAE55EC", VA = "0xAE55EC")]
		private void BrightFilter(float thresh, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6002D59")]
		[Address(RVA = "0xAE5508", Offset = "0xAE5508", VA = "0xAE5508")]
		private void BrightFilter(Color threshColor, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6002D5A")]
		[Address(RVA = "0xAE56D8", Offset = "0xAE56D8", VA = "0xAE56D8")]
		private void Vignette(float amount, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6002D5B")]
		[Address(RVA = "0xAE5BAC", Offset = "0xAE5BAC", VA = "0xAE5BAC")]
		public Bloom()
		{
		}
	}
	[Token(Token = "0x20004F8")]
	public enum LensflareStyle34
	{
		[Token(Token = "0x4001A3C")]
		Ghosting,
		[Token(Token = "0x4001A3D")]
		Anamorphic,
		[Token(Token = "0x4001A3E")]
		Combined
	}
	[Token(Token = "0x20004F9")]
	public enum TweakMode34
	{
		[Token(Token = "0x4001A40")]
		Basic,
		[Token(Token = "0x4001A41")]
		Complex
	}
	[Token(Token = "0x20004FA")]
	public enum HDRBloomMode
	{
		[Token(Token = "0x4001A43")]
		Auto,
		[Token(Token = "0x4001A44")]
		On,
		[Token(Token = "0x4001A45")]
		Off
	}
	[Token(Token = "0x20004FB")]
	public enum BloomScreenBlendMode
	{
		[Token(Token = "0x4001A47")]
		Screen,
		[Token(Token = "0x4001A48")]
		Add
	}
	[Token(Token = "0x20004FC")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x81F714", Offset = "0x81F714")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x81F714", Offset = "0x81F714")]
	public class BloomAndFlares : PostEffectsBase
	{
		[Token(Token = "0x4001A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TweakMode34 tweakMode;

		[Token(Token = "0x4001A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BloomScreenBlendMode screenBlendMode;

		[Token(Token = "0x4001A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public HDRBloomMode hdr;

		[Token(Token = "0x4001A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool doHdr;

		[Token(Token = "0x4001A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float sepBlurSpread;

		[Token(Token = "0x4001A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float useSrcAlphaAsMask;

		[Token(Token = "0x4001A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float bloomIntensity;

		[Token(Token = "0x4001A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float bloomThreshold;

		[Token(Token = "0x4001A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int bloomBlurIterations;

		[Token(Token = "0x4001A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool lensflares;

		[Token(Token = "0x4001A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int hollywoodFlareBlurIterations;

		[Token(Token = "0x4001A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public LensflareStyle34 lensflareMode;

		[Token(Token = "0x4001A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float hollyStretchWidth;

		[Token(Token = "0x4001A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float lensflareIntensity;

		[Token(Token = "0x4001A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float lensflareThreshold;

		[Token(Token = "0x4001A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Color flareColorA;

		[Token(Token = "0x4001A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Color flareColorB;

		[Token(Token = "0x4001A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Color flareColorC;

		[Token(Token = "0x4001A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Color flareColorD;

		[Token(Token = "0x4001A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Texture2D lensFlareVignetteMask;

		[Token(Token = "0x4001A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Shader lensFlareShader;

		[Token(Token = "0x4001A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Material lensFlareMaterial;

		[Token(Token = "0x4001A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Shader vignetteShader;

		[Token(Token = "0x4001A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Material vignetteMaterial;

		[Token(Token = "0x4001A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Shader separableBlurShader;

		[Token(Token = "0x4001A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Material separableBlurMaterial;

		[Token(Token = "0x4001A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Shader addBrightStuffOneOneShader;

		[Token(Token = "0x4001A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Material addBrightStuffBlendOneOneMaterial;

		[Token(Token = "0x4001A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Shader screenBlendShader;

		[Token(Token = "0x4001A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Material screenBlend;

		[Token(Token = "0x4001A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Shader hollywoodFlaresShader;

		[Token(Token = "0x4001A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Material hollywoodFlaresMaterial;

		[Token(Token = "0x4001A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Shader brightPassFilterShader;

		[Token(Token = "0x4001A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Material brightPassFilterMaterial;

		[Token(Token = "0x6002D5C")]
		[Address(RVA = "0xAE5CEC", Offset = "0xAE5CEC", VA = "0xAE5CEC", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002D5D")]
		[Address(RVA = "0xAE5DC8", Offset = "0xAE5DC8", VA = "0xAE5DC8")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002D5E")]
		[Address(RVA = "0xAE6D14", Offset = "0xAE6D14", VA = "0xAE6D14")]
		private void AddTo(float intensity_, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6002D5F")]
		[Address(RVA = "0xAE6B24", Offset = "0xAE6B24", VA = "0xAE6B24")]
		private void BlendFlares(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6002D60")]
		[Address(RVA = "0xAE68A8", Offset = "0xAE68A8", VA = "0xAE68A8")]
		private void BrightFilter(float thresh, float useAlphaAsMask, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6002D61")]
		[Address(RVA = "0xAE69D0", Offset = "0xAE69D0", VA = "0xAE69D0")]
		private void Vignette(float amount, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6002D62")]
		[Address(RVA = "0xAE6DC8", Offset = "0xAE6DC8", VA = "0xAE6DC8")]
		public BloomAndFlares()
		{
		}
	}
	[Token(Token = "0x20004FD")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x81F7AC", Offset = "0x81F7AC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x81F7AC", Offset = "0x81F7AC")]
	public class BloomOptimized : PostEffectsBase
	{
		[Token(Token = "0x2000713")]
		public enum Resolution
		{
			[Token(Token = "0x400274F")]
			Low,
			[Token(Token = "0x4002750")]
			High
		}

		[Token(Token = "0x2000714")]
		public enum BlurType
		{
			[Token(Token = "0x4002752")]
			Standard,
			[Token(Token = "0x4002753")]
			Sgx
		}

		[Token(Token = "0x4001A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x825930", Offset = "0x825930")]
		public float threshold;

		[Token(Token = "0x4001A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x825948", Offset = "0x825948")]
		public float intensity;

		[Token(Token = "0x4001A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x825960", Offset = "0x825960")]
		public float blurSize;

		[Token(Token = "0x4001A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Resolution resolution;

		[Token(Token = "0x4001A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x825978", Offset = "0x825978")]
		public int blurIterations;

		[Token(Token = "0x4001A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BlurType blurType;

		[Token(Token = "0x4001A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader fastBloomShader;

		[Token(Token = "0x4001A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material fastBloomMaterial;

		[Token(Token = "0x6002D63")]
		[Address(RVA = "0xAE6EFC", Offset = "0xAE6EFC", VA = "0xAE6EFC", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002D64")]
		[Address(RVA = "0xAE6F60", Offset = "0xAE6F60", VA = "0xAE6F60")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002D65")]
		[Address(RVA = "0xAE7010", Offset = "0xAE7010", VA = "0xAE7010")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002D66")]
		[Address(RVA = "0xAE73DC", Offset = "0xAE73DC", VA = "0xAE73DC")]
		public BloomOptimized()
		{
		}
	}
	[Token(Token = "0x20004FE")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x81F844", Offset = "0x81F844")]
	public class Blur : MonoBehaviour
	{
		[Token(Token = "0x4001A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int iterations;

		[Token(Token = "0x4001A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float blurSpread;

		[Token(Token = "0x4001A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Shader blurShader;

		[Token(Token = "0x4001A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Material m_Material;

		[Token(Token = "0x17000668")]
		protected Material material
		{
			[Token(Token = "0x6002D67")]
			[Address(RVA = "0xAE7400", Offset = "0xAE7400", VA = "0xAE7400")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002D68")]
		[Address(RVA = "0xAE7538", Offset = "0xAE7538", VA = "0xAE7538")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x6002D69")]
		[Address(RVA = "0xAE7634", Offset = "0xAE7634", VA = "0xAE7634")]
		protected void Start()
		{
		}

		[Token(Token = "0x6002D6A")]
		[Address(RVA = "0xAE76F4", Offset = "0xAE76F4", VA = "0xAE76F4")]
		public void FourTapCone(RenderTexture source, RenderTexture dest, int iteration)
		{
		}

		[Token(Token = "0x6002D6B")]
		[Address(RVA = "0xAE7898", Offset = "0xAE7898", VA = "0xAE7898")]
		private void DownSample4x(RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x6002D6C")]
		[Address(RVA = "0xAE7A10", Offset = "0xAE7A10", VA = "0xAE7A10")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002D6D")]
		[Address(RVA = "0xAE7B7C", Offset = "0xAE7B7C", VA = "0xAE7B7C")]
		public Blur()
		{
		}
	}
	[Token(Token = "0x20004FF")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x81F890", Offset = "0x81F890")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x81F890", Offset = "0x81F890")]
	public class BlurOptimized : PostEffectsBase
	{
		[Token(Token = "0x2000715")]
		public enum BlurType
		{
			[Token(Token = "0x4002755")]
			StandardGauss,
			[Token(Token = "0x4002756")]
			SgxGauss
		}

		[Token(Token = "0x4001A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x825990", Offset = "0x825990")]
		public int downsample;

		[Token(Token = "0x4001A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x8259A8", Offset = "0x8259A8")]
		public float blurSize;

		[Token(Token = "0x4001A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x8259C0", Offset = "0x8259C0")]
		public int blurIterations;

		[Token(Token = "0x4001A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BlurType blurType;

		[Token(Token = "0x4001A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader blurShader;

		[Token(Token = "0x4001A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material blurMaterial;

		[Token(Token = "0x6002D6F")]
		[Address(RVA = "0xAE7B98", Offset = "0xAE7B98", VA = "0xAE7B98", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002D70")]
		[Address(RVA = "0xAE7BFC", Offset = "0xAE7BFC", VA = "0xAE7BFC")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6002D71")]
		[Address(RVA = "0xAE7CAC", Offset = "0xAE7CAC", VA = "0xAE7CAC")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002D72")]
		[Address(RVA = "0xAE8050", Offset = "0xAE8050", VA = "0xAE8050")]
		public BlurOptimized()
		{
		}
	}
	[Token(Token = "0x2000500")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x81F928", Offset = "0x81F928")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x81F928", Offset = "0x81F928")]
	public class CameraMotionBlur : PostEffectsBase
	{
		[Token(Token = "0x2000716")]
		public enum MotionBlurFilter
		{
			[Token(Token = "0x4002758")]
			CameraMotion,
			[Token(Token = "0x4002759")]
			LocalBlur,
			[Token(Token = "0x400275A")]
			Reconstruction,
			[Token(Token = "0x400275B")]
			ReconstructionDX11,
			[Token(Token = "0x400275C")]
			ReconstructionDisc
		}

		[Token(Token = "0x4001A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float MAX_RADIUS;

		[Token(Token = "0x4001A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public MotionBlurFilter filterType;

		[Token(Token = "0x4001A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool preview;

		[Token(Token = "0x4001A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 previewScale;

		[Token(Token = "0x4001A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float movementScale;

		[Token(Token = "0x4001A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float rotationScale;

		[Token(Token = "0x4001A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float maxVelocity;

		[Token(Token = "0x4001A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float minVelocity;

		[Token(Token = "0x4001A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float velocityScale;

		[Token(Token = "0x4001A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float softZDistance;

		[Token(Token = "0x4001A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int velocityDownsample;

		[Token(Token = "0x4001A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public LayerMask excludeLayers;

		[Token(Token = "0x4001A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GameObject tmpCam;

		[Token(Token = "0x4001A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader shader;

		[Token(Token = "0x4001A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Shader dx11MotionBlurShader;

		[Token(Token = "0x4001A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader replacementClear;

		[Token(Token = "0x4001A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material motionBlurMaterial;

		[Token(Token = "0x4001A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material dx11MotionBlurMaterial;

		[Token(Token = "0x4001A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Texture2D noiseTexture;

		[Token(Token = "0x4001A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float jitter;

		[Token(Token = "0x4001A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public bool showVelocity;

		[Token(Token = "0x4001A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float showVelocityScale;

		[Token(Token = "0x4001A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Matrix4x4 currentViewProjMat;

		[Token(Token = "0x4001A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Matrix4x4 prevViewProjMat;

		[Token(Token = "0x4001A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private int prevFrameCount;

		[Token(Token = "0x4001A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private bool wasActive;

		[Token(Token = "0x4001A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private Vector3 prevFrameForward;

		[Token(Token = "0x4001A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Vector3 prevFrameUp;

		[Token(Token = "0x4001A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private Vector3 prevFramePos;

		[Token(Token = "0x4001A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Camera _camera;

		[Token(Token = "0x6002D73")]
		[Address(RVA = "0xAE806C", Offset = "0xAE806C", VA = "0xAE806C")]
		private void CalculateViewProjection()
		{
		}

		[Token(Token = "0x6002D74")]
		[Address(RVA = "0xAE81B8", Offset = "0xAE81B8", VA = "0xAE81B8")]
		private new void Start()
		{
		}

		[Token(Token = "0x6002D75")]
		[Address(RVA = "0xAE833C", Offset = "0xAE833C", VA = "0xAE833C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002D76")]
		[Address(RVA = "0xAE83FC", Offset = "0xAE83FC", VA = "0xAE83FC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002D77")]
		[Address(RVA = "0xAE8560", Offset = "0xAE8560", VA = "0xAE8560", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002D78")]
		[Address(RVA = "0xAE85F8", Offset = "0xAE85F8", VA = "0xAE85F8")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002D79")]
		[Address(RVA = "0xAE8290", Offset = "0xAE8290", VA = "0xAE8290")]
		private void Remember()
		{
		}

		[Token(Token = "0x6002D7A")]
		[Address(RVA = "0xAE9C20", Offset = "0xAE9C20", VA = "0xAE9C20")]
		private Camera GetTmpCam()
		{
			return null;
		}

		[Token(Token = "0x6002D7B")]
		[Address(RVA = "0xAE9B34", Offset = "0xAE9B34", VA = "0xAE9B34")]
		private void StartFrame()
		{
		}

		[Token(Token = "0x6002D7C")]
		[Address(RVA = "0xAE9C10", Offset = "0xAE9C10", VA = "0xAE9C10")]
		private static int divRoundUp(int x, int d)
		{
			return default(int);
		}

		[Token(Token = "0x6002D7D")]
		[Address(RVA = "0xAE9F5C", Offset = "0xAE9F5C", VA = "0xAE9F5C")]
		public CameraMotionBlur()
		{
		}
	}
	[Token(Token = "0x2000501")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x81F9C0", Offset = "0x81F9C0")]
	public class ColorCorrectionCurves : PostEffectsBase
	{
		[Token(Token = "0x2000717")]
		public enum ColorCorrectionMode
		{
			[Token(Token = "0x400275E")]
			Simple,
			[Token(Token = "0x400275F")]
			Advanced
		}

		[Token(Token = "0x4001A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve redChannel;

		[Token(Token = "0x4001A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve greenChannel;

		[Token(Token = "0x4001A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve blueChannel;

		[Token(Token = "0x4001A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool useDepthCorrection;

		[Token(Token = "0x4001A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationCurve zCurve;

		[Token(Token = "0x4001AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AnimationCurve depthRedChannel;

		[Token(Token = "0x4001AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve depthGreenChannel;

		[Token(Token = "0x4001AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AnimationCurve depthBlueChannel;

		[Token(Token = "0x4001AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material ccMaterial;

		[Token(Token = "0x4001AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material ccDepthMaterial;

		[Token(Token = "0x4001AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material selectiveCcMaterial;

		[Token(Token = "0x4001AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Texture2D rgbChannelTex;

		[Token(Token = "0x4001AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Texture2D rgbDepthChannelTex;

		[Token(Token = "0x4001AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Texture2D zCurveTex;

		[Token(Token = "0x4001AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float saturation;

		[Token(Token = "0x4001AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public bool selectiveCc;

		[Token(Token = "0x4001AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Color selectiveFromColor;

		[Token(Token = "0x4001AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Color selectiveToColor;

		[Token(Token = "0x4001AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public ColorCorrectionMode mode;

		[Token(Token = "0x4001AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public bool updateTextures;

		[Token(Token = "0x4001AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Shader colorCorrectionCurvesShader;

		[Token(Token = "0x4001AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Shader simpleColorCorrectionCurvesShader;

		[Token(Token = "0x4001AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Shader colorCorrectionSelectiveShader;

		[Token(Token = "0x4001AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool updateTexturesOnStartup;

		[Token(Token = "0x6002D7F")]
		[Address(RVA = "0xAEA0AC", Offset = "0xAEA0AC", VA = "0xAEA0AC")]
		private new void Start()
		{
		}

		[Token(Token = "0x6002D80")]
		[Address(RVA = "0xAEA0D8", Offset = "0xAEA0D8", VA = "0xAEA0D8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002D81")]
		[Address(RVA = "0xAEA0DC", Offset = "0xAEA0DC", VA = "0xAEA0DC", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002D82")]
		[Address(RVA = "0xAEA350", Offset = "0xAEA350", VA = "0xAEA350")]
		public void UpdateParameters()
		{
		}

		[Token(Token = "0x6002D83")]
		[Address(RVA = "0xAEA744", Offset = "0xAEA744", VA = "0xAEA744")]
		private void UpdateTextures()
		{
		}

		[Token(Token = "0x6002D84")]
		[Address(RVA = "0xAEA748", Offset = "0xAEA748", VA = "0xAEA748")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002D85")]
		[Address(RVA = "0xAEAA44", Offset = "0xAEAA44", VA = "0xAEAA44")]
		public ColorCorrectionCurves()
		{
		}
	}
	[Token(Token = "0x2000502")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x81FA0C", Offset = "0x81FA0C")]
	public class ColorCorrectionLookup : PostEffectsBase
	{
		[Token(Token = "0x4001AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Shader shader;

		[Token(Token = "0x4001AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material material;

		[Token(Token = "0x4001AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Texture3D converted3DLut;

		[Token(Token = "0x4001AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string basedOnTempTex;

		[Token(Token = "0x6002D86")]
		[Address(RVA = "0xAEB078", Offset = "0xAEB078", VA = "0xAEB078", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002D87")]
		[Address(RVA = "0xAEB0D8", Offset = "0xAEB0D8", VA = "0xAEB0D8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002D88")]
		[Address(RVA = "0xAEB180", Offset = "0xAEB180", VA = "0xAEB180")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002D89")]
		[Address(RVA = "0xAEB228", Offset = "0xAEB228", VA = "0xAEB228")]
		public void SetIdentityLut()
		{
		}

		[Token(Token = "0x6002D8A")]
		[Address(RVA = "0xAEB424", Offset = "0xAEB424", VA = "0xAEB424")]
		public bool ValidDimensions(Texture2D tex2d)
		{
			return default(bool);
		}

		[Token(Token = "0x6002D8B")]
		[Address(RVA = "0xAEB518", Offset = "0xAEB518", VA = "0xAEB518")]
		public void Convert(Texture2D temp2DTex, string path)
		{
		}

		[Token(Token = "0x6002D8C")]
		[Address(RVA = "0xAEB824", Offset = "0xAEB824", VA = "0xAEB824")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002D8D")]
		[Address(RVA = "0xAEBA10", Offset = "0xAEBA10", VA = "0xAEBA10")]
		public ColorCorrectionLookup()
		{
		}
	}
	[Token(Token = "0x2000503")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x81FA58", Offset = "0x81FA58")]
	public class ColorCorrectionRamp : ImageEffectBase
	{
		[Token(Token = "0x4001AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Texture textureRamp;

		[Token(Token = "0x6002D8E")]
		[Address(RVA = "0xAEBA68", Offset = "0xAEBA68", VA = "0xAEBA68")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002D8F")]
		[Address(RVA = "0xAEBB28", Offset = "0xAEBB28", VA = "0xAEBB28")]
		public ColorCorrectionRamp()
		{
		}
	}
	[Token(Token = "0x2000504")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x81FAA4", Offset = "0x81FAA4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x81FAA4", Offset = "0x81FAA4")]
	internal class ContrastEnhance : PostEffectsBase
	{
		[Token(Token = "0x4001AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float intensity;

		[Token(Token = "0x4001AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float threshold;

		[Token(Token = "0x4001ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material separableBlurMaterial;

		[Token(Token = "0x4001ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material contrastCompositeMaterial;

		[Token(Token = "0x4001ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float blurSpread;

		[Token(Token = "0x4001ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader separableBlurShader;

		[Token(Token = "0x4001ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader contrastCompositeShader;

		[Token(Token = "0x6002D90")]
		[Address(RVA = "0xAEBB30", Offset = "0xAEBB30", VA = "0xAEBB30", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002D91")]
		[Address(RVA = "0xAEBBB0", Offset = "0xAEBBB0", VA = "0xAEBBB0")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002D92")]
		[Address(RVA = "0xAEBF18", Offset = "0xAEBF18", VA = "0xAEBF18")]
		public ContrastEnhance()
		{
		}
	}
	[Token(Token = "0x2000505")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x81FB3C", Offset = "0x81FB3C")]
	public class ContrastStretch : MonoBehaviour
	{
		[Token(Token = "0x4001ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float adaptationSpeed;

		[Token(Token = "0x4001AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float limitMinimum;

		[Token(Token = "0x4001AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float limitMaximum;

		[Token(Token = "0x4001AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RenderTexture[] adaptRenderTex;

		[Token(Token = "0x4001AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int curAdaptIndex;

		[Token(Token = "0x4001AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader shaderLum;

		[Token(Token = "0x4001AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material m_materialLum;

		[Token(Token = "0x4001AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader shaderReduce;

		[Token(Token = "0x4001AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material m_materialReduce;

		[Token(Token = "0x4001AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader shaderAdapt;

		[Token(Token = "0x4001AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material m_materialAdapt;

		[Token(Token = "0x4001ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader shaderApply;

		[Token(Token = "0x4001ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material m_materialApply;

		[Token(Token = "0x17000669")]
		protected Material materialLum
		{
			[Token(Token = "0x6002D93")]
			[Address(RVA = "0xAEBF30", Offset = "0xAEBF30", VA = "0xAEBF30")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700066A")]
		protected Material materialReduce
		{
			[Token(Token = "0x6002D94")]
			[Address(RVA = "0xAEBFF4", Offset = "0xAEBFF4", VA = "0xAEBFF4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700066B")]
		protected Material materialAdapt
		{
			[Token(Token = "0x6002D95")]
			[Address(RVA = "0xAEC0B8", Offset = "0xAEC0B8", VA = "0xAEC0B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700066C")]
		protected Material materialApply
		{
			[Token(Token = "0x6002D96")]
			[Address(RVA = "0xAEC17C", Offset = "0xAEC17C", VA = "0xAEC17C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002D97")]
		[Address(RVA = "0xAEC240", Offset = "0xAEC240", VA = "0xAEC240")]
		private void Start()
		{
		}

		[Token(Token = "0x6002D98")]
		[Address(RVA = "0xAEC2D4", Offset = "0xAEC2D4", VA = "0xAEC2D4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002D99")]
		[Address(RVA = "0xAEC424", Offset = "0xAEC424", VA = "0xAEC424")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002D9A")]
		[Address(RVA = "0xAEC64C", Offset = "0xAEC64C", VA = "0xAEC64C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002D9B")]
		[Address(RVA = "0xAEC8A8", Offset = "0xAEC8A8", VA = "0xAEC8A8")]
		private void CalculateAdaptation(Texture curTexture)
		{
		}

		[Token(Token = "0x6002D9C")]
		[Address(RVA = "0xAECAB8", Offset = "0xAECAB8", VA = "0xAECAB8")]
		public ContrastStretch()
		{
		}
	}
	[Token(Token = "0x2000506")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x81FB88", Offset = "0x81FB88")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x81FB88", Offset = "0x81FB88")]
	internal class CreaseShading : PostEffectsBase
	{
		[Token(Token = "0x4001ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float intensity;

		[Token(Token = "0x4001ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int softness;

		[Token(Token = "0x4001ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float spread;

		[Token(Token = "0x4001ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader blurShader;

		[Token(Token = "0x4001AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material blurMaterial;

		[Token(Token = "0x4001AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader depthFetchShader;

		[Token(Token = "0x4001AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material depthFetchMaterial;

		[Token(Token = "0x4001AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader creaseApplyShader;

		[Token(Token = "0x4001AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material creaseApplyMaterial;

		[Token(Token = "0x6002D9D")]
		[Address(RVA = "0x16D6F8C", Offset = "0x16D6F8C", VA = "0x16D6F8C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002D9E")]
		[Address(RVA = "0x16D7554", Offset = "0x16D7554", VA = "0x16D7554")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002D9F")]
		[Address(RVA = "0x16D78FC", Offset = "0x16D78FC", VA = "0x16D78FC")]
		public CreaseShading()
		{
		}
	}
	[Token(Token = "0x2000507")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x81FC20", Offset = "0x81FC20")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x81FC20", Offset = "0x81FC20")]
	public class DepthOfField : PostEffectsBase
	{
		[Token(Token = "0x2000718")]
		public enum BlurType
		{
			[Token(Token = "0x4002761")]
			DiscBlur,
			[Token(Token = "0x4002762")]
			DX11
		}

		[Token(Token = "0x2000719")]
		public enum BlurSampleCount
		{
			[Token(Token = "0x4002764")]
			Low,
			[Token(Token = "0x4002765")]
			Medium,
			[Token(Token = "0x4002766")]
			High
		}

		[Token(Token = "0x4001AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool visualizeFocus;

		[Token(Token = "0x4001AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float focalLength;

		[Token(Token = "0x4001AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float focalSize;

		[Token(Token = "0x4001AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float aperture;

		[Token(Token = "0x4001AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform focalTransform;

		[Token(Token = "0x4001ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float maxBlurSize;

		[Token(Token = "0x4001ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool highResolution;

		[Token(Token = "0x4001ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BlurType blurType;

		[Token(Token = "0x4001ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public BlurSampleCount blurSampleCount;

		[Token(Token = "0x4001ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool nearBlur;

		[Token(Token = "0x4001ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float foregroundOverlap;

		[Token(Token = "0x4001AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader dofHdrShader;

		[Token(Token = "0x4001AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material dofHdrMaterial;

		[Token(Token = "0x4001AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader dx11BokehShader;

		[Token(Token = "0x4001AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material dx11bokehMaterial;

		[Token(Token = "0x4001AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float dx11BokehThreshold;

		[Token(Token = "0x4001AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float dx11SpawnHeuristic;

		[Token(Token = "0x4001AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Texture2D dx11BokehTexture;

		[Token(Token = "0x4001AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float dx11BokehScale;

		[Token(Token = "0x4001AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float dx11BokehIntensity;

		[Token(Token = "0x4001AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float focalDistance01;

		[Token(Token = "0x4001AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private ComputeBuffer cbDrawArgs;

		[Token(Token = "0x4001AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private ComputeBuffer cbPoints;

		[Token(Token = "0x4001AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float internalBlurWidth;

		[Token(Token = "0x6002DA0")]
		[Address(RVA = "0x16D7938", Offset = "0x16D7938", VA = "0x16D7938", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002DA1")]
		[Address(RVA = "0x16D7AD8", Offset = "0x16D7AD8", VA = "0x16D7AD8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002DA2")]
		[Address(RVA = "0x16D7B4C", Offset = "0x16D7B4C", VA = "0x16D7B4C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002DA3")]
		[Address(RVA = "0x16D7C54", Offset = "0x16D7C54", VA = "0x16D7C54")]
		private void ReleaseComputeResources()
		{
		}

		[Token(Token = "0x6002DA4")]
		[Address(RVA = "0x16D79BC", Offset = "0x16D79BC", VA = "0x16D79BC")]
		private void CreateComputeResources()
		{
		}

		[Token(Token = "0x6002DA5")]
		[Address(RVA = "0x16D7C98", Offset = "0x16D7C98", VA = "0x16D7C98")]
		private float FocalDistance01(float worldDist)
		{
			return default(float);
		}

		[Token(Token = "0x6002DA6")]
		[Address(RVA = "0x16D7E3C", Offset = "0x16D7E3C", VA = "0x16D7E3C")]
		private void WriteCoc(RenderTexture fromTo, bool fgDilate)
		{
		}

		[Token(Token = "0x6002DA7")]
		[Address(RVA = "0x16D815C", Offset = "0x16D815C", VA = "0x16D815C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002DA8")]
		[Address(RVA = "0x16D97CC", Offset = "0x16D97CC", VA = "0x16D97CC")]
		public DepthOfField()
		{
		}
	}
	[Token(Token = "0x2000508")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x81FCB8", Offset = "0x81FCB8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x81FCB8", Offset = "0x81FCB8")]
	public class DepthOfFieldDeprecated : PostEffectsBase
	{
		[Token(Token = "0x200071A")]
		public enum Dof34QualitySetting
		{
			[Token(Token = "0x4002768")]
			OnlyBackground = 1,
			[Token(Token = "0x4002769")]
			BackgroundAndForeground
		}

		[Token(Token = "0x200071B")]
		public enum DofResolution
		{
			[Token(Token = "0x400276B")]
			High = 2,
			[Token(Token = "0x400276C")]
			Medium,
			[Token(Token = "0x400276D")]
			Low
		}

		[Token(Token = "0x200071C")]
		public enum DofBlurriness
		{
			[Token(Token = "0x400276F")]
			Low = 1,
			[Token(Token = "0x4002770")]
			High = 2,
			[Token(Token = "0x4002771")]
			VeryHigh = 4
		}

		[Token(Token = "0x200071D")]
		public enum BokehDestination
		{
			[Token(Token = "0x4002773")]
			Background = 1,
			[Token(Token = "0x4002774")]
			Foreground,
			[Token(Token = "0x4002775")]
			BackgroundAndForeground
		}

		[Token(Token = "0x4001AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int SMOOTH_DOWNSAMPLE_PASS;

		[Token(Token = "0x4001AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static float BOKEH_EXTRA_BLUR;

		[Token(Token = "0x4001AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Dof34QualitySetting quality;

		[Token(Token = "0x4001AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DofResolution resolution;

		[Token(Token = "0x4001AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool simpleTweakMode;

		[Token(Token = "0x4001AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float focalPoint;

		[Token(Token = "0x4001AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float smoothness;

		[Token(Token = "0x4001AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float focalZDistance;

		[Token(Token = "0x4001AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float focalZStartCurve;

		[Token(Token = "0x4001AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float focalZEndCurve;

		[Token(Token = "0x4001AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float focalStartCurve;

		[Token(Token = "0x4001AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float focalEndCurve;

		[Token(Token = "0x4001AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float focalDistance01;

		[Token(Token = "0x4001AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform objectFocus;

		[Token(Token = "0x4001AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float focalSize;

		[Token(Token = "0x4001AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public DofBlurriness bluriness;

		[Token(Token = "0x4001AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float maxBlurSpread;

		[Token(Token = "0x4001AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float foregroundBlurExtrude;

		[Token(Token = "0x4001AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Shader dofBlurShader;

		[Token(Token = "0x4001B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material dofBlurMaterial;

		[Token(Token = "0x4001B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Shader dofShader;

		[Token(Token = "0x4001B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material dofMaterial;

		[Token(Token = "0x4001B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool visualize;

		[Token(Token = "0x4001B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public BokehDestination bokehDestination;

		[Token(Token = "0x4001B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float widthOverHeight;

		[Token(Token = "0x4001B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float oneOverBaseSize;

		[Token(Token = "0x4001B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool bokeh;

		[Token(Token = "0x4001B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		public bool bokehSupport;

		[Token(Token = "0x4001B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Shader bokehShader;

		[Token(Token = "0x4001B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Texture2D bokehTexture;

		[Token(Token = "0x4001B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float bokehScale;

		[Token(Token = "0x4001B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float bokehIntensity;

		[Token(Token = "0x4001B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float bokehThresholdContrast;

		[Token(Token = "0x4001B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float bokehThresholdLuminance;

		[Token(Token = "0x4001B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public int bokehDownsample;

		[Token(Token = "0x4001B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Material bokehMaterial;

		[Token(Token = "0x4001B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Camera _camera;

		[Token(Token = "0x4001B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private RenderTexture foregroundTexture;

		[Token(Token = "0x4001B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private RenderTexture mediumRezWorkTexture;

		[Token(Token = "0x4001B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private RenderTexture finalDefocus;

		[Token(Token = "0x4001B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private RenderTexture lowRezWorkTexture;

		[Token(Token = "0x4001B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private RenderTexture bokehSource;

		[Token(Token = "0x4001B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private RenderTexture bokehSource2;

		[Token(Token = "0x6002DA9")]
		[Address(RVA = "0x16D9830", Offset = "0x16D9830", VA = "0x16D9830")]
		private void CreateMaterials()
		{
		}

		[Token(Token = "0x6002DAA")]
		[Address(RVA = "0x16D9904", Offset = "0x16D9904", VA = "0x16D9904", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002DAB")]
		[Address(RVA = "0x16D9A08", Offset = "0x16D9A08", VA = "0x16D9A08")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002DAC")]
		[Address(RVA = "0x16D9C34", Offset = "0x16D9C34", VA = "0x16D9C34")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002DAD")]
		[Address(RVA = "0x16D9CAC", Offset = "0x16D9CAC", VA = "0x16D9CAC")]
		private float FocalDistance01(float worldDist)
		{
			return default(float);
		}

		[Token(Token = "0x6002DAE")]
		[Address(RVA = "0x16D9E08", Offset = "0x16D9E08", VA = "0x16D9E08")]
		private int GetDividerBasedOnQuality()
		{
			return default(int);
		}

		[Token(Token = "0x6002DAF")]
		[Address(RVA = "0x16D9E2C", Offset = "0x16D9E2C", VA = "0x16D9E2C")]
		private int GetLowResolutionDividerBasedOnQuality(int baseDivider)
		{
			return default(int);
		}

		[Token(Token = "0x6002DB0")]
		[Address(RVA = "0x16D9E50", Offset = "0x16D9E50", VA = "0x16D9E50")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002DB1")]
		[Address(RVA = "0x16DAC34", Offset = "0x16DAC34", VA = "0x16DAC34")]
		private void Blur(RenderTexture from, RenderTexture to, DofBlurriness iterations, int blurPass, float spread)
		{
		}

		[Token(Token = "0x6002DB2")]
		[Address(RVA = "0x16DB2E8", Offset = "0x16DB2E8", VA = "0x16DB2E8")]
		private void BlurFg(RenderTexture from, RenderTexture to, DofBlurriness iterations, int blurPass, float spread)
		{
		}

		[Token(Token = "0x6002DB3")]
		[Address(RVA = "0x16DB750", Offset = "0x16DB750", VA = "0x16DB750")]
		private void BlurHex(RenderTexture from, RenderTexture to, int blurPass, float spread, RenderTexture tmp)
		{
		}

		[Token(Token = "0x6002DB4")]
		[Address(RVA = "0x16DAAE8", Offset = "0x16DAAE8", VA = "0x16DAAE8")]
		private void Downsample(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6002DB5")]
		[Address(RVA = "0x16DAED0", Offset = "0x16DAED0", VA = "0x16DAED0")]
		private void AddBokeh(RenderTexture bokehInfo, RenderTexture tempTex, RenderTexture finalTarget)
		{
		}

		[Token(Token = "0x6002DB6")]
		[Address(RVA = "0x16DB5A4", Offset = "0x16DB5A4", VA = "0x16DB5A4")]
		private void ReleaseTextures()
		{
		}

		[Token(Token = "0x6002DB7")]
		[Address(RVA = "0x16DA7B4", Offset = "0x16DA7B4", VA = "0x16DA7B4")]
		private void AllocateTextures(bool blurForeground, RenderTexture source, int divider, int lowTexDivider)
		{
		}

		[Token(Token = "0x6002DB8")]
		[Address(RVA = "0x16DBC38", Offset = "0x16DBC38", VA = "0x16DBC38")]
		public DepthOfFieldDeprecated()
		{
		}
	}
	[Token(Token = "0x2000509")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x81FD50", Offset = "0x81FD50")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x81FD50", Offset = "0x81FD50")]
	public class EdgeDetection : PostEffectsBase
	{
		[Token(Token = "0x200071E")]
		public enum EdgeDetectMode
		{
			[Token(Token = "0x4002777")]
			TriangleDepthNormals,
			[Token(Token = "0x4002778")]
			RobertsCrossDepthNormals,
			[Token(Token = "0x4002779")]
			SobelDepth,
			[Token(Token = "0x400277A")]
			SobelDepthThin,
			[Token(Token = "0x400277B")]
			TriangleLuminance
		}

		[Token(Token = "0x4001B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public EdgeDetectMode mode;

		[Token(Token = "0x4001B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float sensitivityDepth;

		[Token(Token = "0x4001B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float sensitivityNormals;

		[Token(Token = "0x4001B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float lumThreshold;

		[Token(Token = "0x4001B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float edgeExp;

		[Token(Token = "0x4001B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float sampleDist;

		[Token(Token = "0x4001B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float edgesOnly;

		[Token(Token = "0x4001B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color edgesOnlyBgColor;

		[Token(Token = "0x4001B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader edgeDetectShader;

		[Token(Token = "0x4001B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material edgeDetectMaterial;

		[Token(Token = "0x4001B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private EdgeDetectMode oldMode;

		[Token(Token = "0x6002DBA")]
		[Address(RVA = "0x16DBD1C", Offset = "0x16DBD1C", VA = "0x16DBD1C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002DBB")]
		[Address(RVA = "0x16DBE54", Offset = "0x16DBE54", VA = "0x16DBE54")]
		private new void Start()
		{
		}

		[Token(Token = "0x6002DBC")]
		[Address(RVA = "0x16DBD94", Offset = "0x16DBD94", VA = "0x16DBD94")]
		private void SetCameraFlag()
		{
		}

		[Token(Token = "0x6002DBD")]
		[Address(RVA = "0x16DBE60", Offset = "0x16DBE60", VA = "0x16DBE60")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002DBE")]
		[Address(RVA = "0x16DBE64", Offset = "0x16DBE64", VA = "0x16DBE64")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002DBF")]
		[Address(RVA = "0x16DC050", Offset = "0x16DC050", VA = "0x16DC050")]
		public EdgeDetection()
		{
		}
	}
	[Token(Token = "0x200050A")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x81FDE8", Offset = "0x81FDE8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x81FDE8", Offset = "0x81FDE8")]
	public class Fisheye : PostEffectsBase
	{
		[Token(Token = "0x4001B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float strengthX;

		[Token(Token = "0x4001B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float strengthY;

		[Token(Token = "0x4001B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader fishEyeShader;

		[Token(Token = "0x4001B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material fisheyeMaterial;

		[Token(Token = "0x6002DC0")]
		[Address(RVA = "0x16DC0B0", Offset = "0x16DC0B0", VA = "0x16DC0B0", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002DC1")]
		[Address(RVA = "0x16DC108", Offset = "0x16DC108", VA = "0x16DC108")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002DC2")]
		[Address(RVA = "0x16DC278", Offset = "0x16DC278", VA = "0x16DC278")]
		public Fisheye()
		{
		}
	}
	[Token(Token = "0x200050B")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x81FE80", Offset = "0x81FE80")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x81FE80", Offset = "0x81FE80")]
	internal class GlobalFog : PostEffectsBase
	{
		[Token(Token = "0x4001B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8259D8", Offset = "0x8259D8")]
		public bool distanceFog;

		[Token(Token = "0x4001B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x825A10", Offset = "0x825A10")]
		public bool useRadialDistance;

		[Token(Token = "0x4001B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x825A48", Offset = "0x825A48")]
		public bool heightFog;

		[Token(Token = "0x4001B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x825A80", Offset = "0x825A80")]
		public float height;

		[Token(Token = "0x4001B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x825AB8", Offset = "0x825AB8")]
		public float heightDensity;

		[Token(Token = "0x4001B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x825AD4", Offset = "0x825AD4")]
		public float startDistance;

		[Token(Token = "0x4001B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader fogShader;

		[Token(Token = "0x4001B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material fogMaterial;

		[Token(Token = "0x6002DC3")]
		[Address(RVA = "0x16DC29C", Offset = "0x16DC29C", VA = "0x16DC29C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002DC4")]
		[Address(RVA = "0x16DC2F4", Offset = "0x16DC2F4", VA = "0x16DC2F4")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002DC5")]
		[Address(RVA = "0x16DCB10", Offset = "0x16DCB10", VA = "0x16DCB10")]
		private static void CustomGraphicsBlit(RenderTexture source, RenderTexture dest, Material fxMaterial, int passNr)
		{
		}

		[Token(Token = "0x6002DC6")]
		[Address(RVA = "0x16DCC80", Offset = "0x16DCC80", VA = "0x16DCC80")]
		public GlobalFog()
		{
		}
	}
	[Token(Token = "0x200050C")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x81FF18", Offset = "0x81FF18")]
	public class Grayscale : ImageEffectBase
	{
		[Token(Token = "0x4001B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Texture textureRamp;

		[Token(Token = "0x4001B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float rampOffset;

		[Token(Token = "0x6002DC7")]
		[Address(RVA = "0x16DCCA8", Offset = "0x16DCCA8", VA = "0x16DCCA8")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002DC8")]
		[Address(RVA = "0x16DCE48", Offset = "0x16DCE48", VA = "0x16DCE48")]
		public Grayscale()
		{
		}
	}
	[Token(Token = "0x200050D")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x81FF64", Offset = "0x81FF64")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x81FF64", Offset = "0x81FF64")]
	public class ImageEffectBase : MonoBehaviour
	{
		[Token(Token = "0x4001B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Shader shader;

		[Token(Token = "0x4001B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material m_Material;

		[Token(Token = "0x1700066D")]
		protected Material material
		{
			[Token(Token = "0x6002DCA")]
			[Address(RVA = "0x16DCD84", Offset = "0x16DCD84", VA = "0x16DCD84")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002DC9")]
		[Address(RVA = "0x16DCE58", Offset = "0x16DCE58", VA = "0x16DCE58", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6002DCB")]
		[Address(RVA = "0x16DCF08", Offset = "0x16DCF08", VA = "0x16DCF08", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6002DCC")]
		[Address(RVA = "0x16DCE50", Offset = "0x16DCE50", VA = "0x16DCE50")]
		public ImageEffectBase()
		{
		}
	}
	[Token(Token = "0x200050E")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x81FFEC", Offset = "0x81FFEC")]
	public class ImageEffects
	{
		[Token(Token = "0x6002DCD")]
		[Address(RVA = "0x16DCFB8", Offset = "0x16DCFB8", VA = "0x16DCFB8")]
		public static void RenderDistortion(Material material, RenderTexture source, RenderTexture destination, float angle, Vector2 center, Vector2 radius)
		{
		}

		[Token(Token = "0x6002DCE")]
		[Address(RVA = "0x16DD234", Offset = "0x16DD234", VA = "0x16DD234")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x833C30", Offset = "0x833C30")]
		public static void Blit(RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x6002DCF")]
		[Address(RVA = "0x16DD2AC", Offset = "0x16DD2AC", VA = "0x16DD2AC")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x833C68", Offset = "0x833C68")]
		public static void BlitWithMaterial(Material material, RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x6002DD0")]
		[Address(RVA = "0x16DD32C", Offset = "0x16DD32C", VA = "0x16DD32C")]
		public ImageEffects()
		{
		}
	}
	[Token(Token = "0x200050F")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x820024", Offset = "0x820024")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x820024", Offset = "0x820024")]
	public class MotionBlur : ImageEffectBase
	{
		[Token(Token = "0x4001B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float blurAmount;

		[Token(Token = "0x4001B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool extraBlur;

		[Token(Token = "0x4001B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RenderTexture accumTexture;

		[Token(Token = "0x6002DD1")]
		[Address(RVA = "0x16DD334", Offset = "0x16DD334", VA = "0x16DD334", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6002DD2")]
		[Address(RVA = "0x16DD378", Offset = "0x16DD378", VA = "0x16DD378", Slot = "5")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6002DD3")]
		[Address(RVA = "0x16DD3EC", Offset = "0x16DD3EC", VA = "0x16DD3EC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002DD4")]
		[Address(RVA = "0x16DD770", Offset = "0x16DD770", VA = "0x16DD770")]
		public MotionBlur()
		{
		}
	}
	[Token(Token = "0x2000510")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x8200BC", Offset = "0x8200BC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x8200BC", Offset = "0x8200BC")]
	public class NoiseAndGrain : PostEffectsBase
	{
		[Token(Token = "0x4001B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float intensityMultiplier;

		[Token(Token = "0x4001B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float generalIntensity;

		[Token(Token = "0x4001B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float blackIntensity;

		[Token(Token = "0x4001B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float whiteIntensity;

		[Token(Token = "0x4001B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float midGrey;

		[Token(Token = "0x4001B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool dx11Grain;

		[Token(Token = "0x4001B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float softness;

		[Token(Token = "0x4001B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool monochrome;

		[Token(Token = "0x4001B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 intensities;

		[Token(Token = "0x4001B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 tiling;

		[Token(Token = "0x4001B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float monochromeTiling;

		[Token(Token = "0x4001B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FilterMode filterMode;

		[Token(Token = "0x4001B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Texture2D noiseTexture;

		[Token(Token = "0x4001B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader noiseShader;

		[Token(Token = "0x4001B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material noiseMaterial;

		[Token(Token = "0x4001B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Shader dx11NoiseShader;

		[Token(Token = "0x4001B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Material dx11NoiseMaterial;

		[Token(Token = "0x4001B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float TILE_AMOUNT;

		[Token(Token = "0x6002DD5")]
		[Address(RVA = "0x16DD784", Offset = "0x16DD784", VA = "0x16DD784", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002DD6")]
		[Address(RVA = "0x16DD7FC", Offset = "0x16DD7FC", VA = "0x16DD7FC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002DD7")]
		[Address(RVA = "0x16DE11C", Offset = "0x16DE11C", VA = "0x16DE11C")]
		private static void DrawNoiseQuadGrid(RenderTexture source, RenderTexture dest, Material fxMaterial, Texture2D noise, int passNr)
		{
		}

		[Token(Token = "0x6002DD8")]
		[Address(RVA = "0x16DE498", Offset = "0x16DE498", VA = "0x16DE498")]
		public NoiseAndGrain()
		{
		}
	}
	[Token(Token = "0x2000511")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x820154", Offset = "0x820154")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x820154", Offset = "0x820154")]
	public class NoiseAndScratches : MonoBehaviour
	{
		[Token(Token = "0x4001B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool monochrome;

		[Token(Token = "0x4001B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool rgbFallback;

		[Token(Token = "0x4001B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float grainIntensityMin;

		[Token(Token = "0x4001B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float grainIntensityMax;

		[Token(Token = "0x4001B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float grainSize;

		[Token(Token = "0x4001B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float scratchIntensityMin;

		[Token(Token = "0x4001B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float scratchIntensityMax;

		[Token(Token = "0x4001B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float scratchFPS;

		[Token(Token = "0x4001B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float scratchJitter;

		[Token(Token = "0x4001B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Texture grainTexture;

		[Token(Token = "0x4001B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Texture scratchTexture;

		[Token(Token = "0x4001B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader shaderRGB;

		[Token(Token = "0x4001B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader shaderYUV;

		[Token(Token = "0x4001B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material m_MaterialRGB;

		[Token(Token = "0x4001B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material m_MaterialYUV;

		[Token(Token = "0x4001B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float scratchTimeLeft;

		[Token(Token = "0x4001B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float scratchX;

		[Token(Token = "0x4001B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float scratchY;

		[Token(Token = "0x1700066E")]
		protected Material material
		{
			[Token(Token = "0x6002DDB")]
			[Address(RVA = "0x16DE6F0", Offset = "0x16DE6F0", VA = "0x16DE6F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002DDA")]
		[Address(RVA = "0x16DE5B0", Offset = "0x16DE5B0", VA = "0x16DE5B0")]
		protected void Start()
		{
		}

		[Token(Token = "0x6002DDC")]
		[Address(RVA = "0x16DE84C", Offset = "0x16DE84C", VA = "0x16DE84C")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x6002DDD")]
		[Address(RVA = "0x16DE950", Offset = "0x16DE950", VA = "0x16DE950")]
		private void SanitizeParameters()
		{
		}

		[Token(Token = "0x6002DDE")]
		[Address(RVA = "0x16DEA8C", Offset = "0x16DEA8C", VA = "0x16DEA8C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002DDF")]
		[Address(RVA = "0x16DEDD4", Offset = "0x16DEDD4", VA = "0x16DEDD4")]
		public NoiseAndScratches()
		{
		}
	}
	[Token(Token = "0x2000512")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x8201EC", Offset = "0x8201EC")]
	public class PostEffectsBase : MonoBehaviour
	{
		[Token(Token = "0x4001B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool supportHDRTextures;

		[Token(Token = "0x4001B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		protected bool supportDX11;

		[Token(Token = "0x4001B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		protected bool isSupported;

		[Token(Token = "0x6002DE0")]
		[Address(RVA = "0x16D7118", Offset = "0x16D7118", VA = "0x16D7118")]
		protected Material CheckShaderAndCreateMaterial(Shader s, Material m2Create)
		{
			return null;
		}

		[Token(Token = "0x6002DE1")]
		[Address(RVA = "0x16DEE34", Offset = "0x16DEE34", VA = "0x16DEE34")]
		protected Material CreateMaterial(Shader s, Material m2Create)
		{
			return null;
		}

		[Token(Token = "0x6002DE2")]
		[Address(RVA = "0x16DF024", Offset = "0x16DF024", VA = "0x16DF024")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002DE3")]
		[Address(RVA = "0x16DF030", Offset = "0x16DF030", VA = "0x16DF030")]
		protected bool CheckSupport()
		{
			return default(bool);
		}

		[Token(Token = "0x6002DE4")]
		[Address(RVA = "0x16DF038", Offset = "0x16DF038", VA = "0x16DF038", Slot = "4")]
		public virtual bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002DE5")]
		[Address(RVA = "0x16DF0E8", Offset = "0x16DF0E8", VA = "0x16DF0E8")]
		protected void Start()
		{
		}

		[Token(Token = "0x6002DE6")]
		[Address(RVA = "0x16D7004", Offset = "0x16D7004", VA = "0x16D7004")]
		protected bool CheckSupport(bool needDepth)
		{
			return default(bool);
		}

		[Token(Token = "0x6002DE7")]
		[Address(RVA = "0x16DF0F4", Offset = "0x16DF0F4", VA = "0x16DF0F4")]
		protected bool CheckSupport(bool needDepth, bool needHdr)
		{
			return default(bool);
		}

		[Token(Token = "0x6002DE8")]
		[Address(RVA = "0x16DF150", Offset = "0x16DF150", VA = "0x16DF150")]
		public bool Dx11Support()
		{
			return default(bool);
		}

		[Token(Token = "0x6002DE9")]
		[Address(RVA = "0x16D74AC", Offset = "0x16D74AC", VA = "0x16D74AC")]
		protected void ReportAutoDisable()
		{
		}

		[Token(Token = "0x6002DEA")]
		[Address(RVA = "0x16DF158", Offset = "0x16DF158", VA = "0x16DF158")]
		private bool CheckShader(Shader s)
		{
			return default(bool);
		}

		[Token(Token = "0x6002DEB")]
		[Address(RVA = "0x16DEE08", Offset = "0x16DEE08", VA = "0x16DEE08")]
		protected void NotSupported()
		{
		}

		[Token(Token = "0x6002DEC")]
		[Address(RVA = "0x16DF358", Offset = "0x16DF358", VA = "0x16DF358")]
		protected void DrawBorder(RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x6002DED")]
		[Address(RVA = "0x16D7924", Offset = "0x16D7924", VA = "0x16D7924")]
		public PostEffectsBase()
		{
		}
	}
	[Token(Token = "0x2000513")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x820260", Offset = "0x820260")]
	internal class PostEffectsHelper : MonoBehaviour
	{
		[Token(Token = "0x6002DEE")]
		[Address(RVA = "0x16DF6D4", Offset = "0x16DF6D4", VA = "0x16DF6D4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002DEF")]
		[Address(RVA = "0x16DF740", Offset = "0x16DF740", VA = "0x16DF740")]
		private static void DrawLowLevelPlaneAlignedWithCamera(float dist, RenderTexture source, RenderTexture dest, Material material, Camera cameraForProjectionMatrix)
		{
		}

		[Token(Token = "0x6002DF0")]
		[Address(RVA = "0x16DF9BC", Offset = "0x16DF9BC", VA = "0x16DF9BC")]
		private static void DrawBorder(RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x6002DF1")]
		[Address(RVA = "0x16DFD34", Offset = "0x16DFD34", VA = "0x16DFD34")]
		private static void DrawLowLevelQuad(float x1, float x2, float y1, float y2, RenderTexture source, RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x6002DF2")]
		[Address(RVA = "0x16DFEE0", Offset = "0x16DFEE0", VA = "0x16DFEE0")]
		public PostEffectsHelper()
		{
		}
	}
	[Token(Token = "0x2000514")]
	internal class Quads
	{
		[Token(Token = "0x4001B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Mesh[] meshes;

		[Token(Token = "0x4001B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int currentQuads;

		[Token(Token = "0x6002DF3")]
		[Address(RVA = "0x16DFEE8", Offset = "0x16DFEE8", VA = "0x16DFEE8")]
		private static bool HasMeshes()
		{
			return default(bool);
		}

		[Token(Token = "0x6002DF4")]
		[Address(RVA = "0x16D9A64", Offset = "0x16D9A64", VA = "0x16D9A64")]
		public static void Cleanup()
		{
		}

		[Token(Token = "0x6002DF5")]
		[Address(RVA = "0x16DB978", Offset = "0x16DB978", VA = "0x16DB978")]
		public static Mesh[] GetMeshes(int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x6002DF6")]
		[Address(RVA = "0x16E000C", Offset = "0x16E000C", VA = "0x16E000C")]
		private static Mesh GetMesh(int triCount, int triOffset, int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x6002DF7")]
		[Address(RVA = "0x16E0540", Offset = "0x16E0540", VA = "0x16E0540")]
		public Quads()
		{
		}
	}
	[Token(Token = "0x2000515")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x8202D4", Offset = "0x8202D4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x8202D4", Offset = "0x8202D4")]
	public class ScreenOverlay : PostEffectsBase
	{
		[Token(Token = "0x200071F")]
		public enum OverlayBlendMode
		{
			[Token(Token = "0x400277D")]
			Additive,
			[Token(Token = "0x400277E")]
			ScreenBlend,
			[Token(Token = "0x400277F")]
			Multiply,
			[Token(Token = "0x4002780")]
			Overlay,
			[Token(Token = "0x4002781")]
			AlphaBlend
		}

		[Token(Token = "0x4001B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public OverlayBlendMode blendMode;

		[Token(Token = "0x4001B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float intensity;

		[Token(Token = "0x4001B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Texture2D texture;

		[Token(Token = "0x4001B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader overlayShader;

		[Token(Token = "0x4001B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material overlayMaterial;

		[Token(Token = "0x6002DF9")]
		[Address(RVA = "0x16E054C", Offset = "0x16E054C", VA = "0x16E054C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002DFA")]
		[Address(RVA = "0x16E05A4", Offset = "0x16E05A4", VA = "0x16E05A4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002DFB")]
		[Address(RVA = "0x16E070C", Offset = "0x16E070C", VA = "0x16E070C")]
		public ScreenOverlay()
		{
		}
	}
	[Token(Token = "0x2000516")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x82036C", Offset = "0x82036C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x82036C", Offset = "0x82036C")]
	internal class ScreenSpaceAmbientObscurance : PostEffectsBase
	{
		[Token(Token = "0x4001B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x825B0C", Offset = "0x825B0C")]
		public float intensity;

		[Token(Token = "0x4001B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x825B24", Offset = "0x825B24")]
		public float radius;

		[Token(Token = "0x4001B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x825B40", Offset = "0x825B40")]
		public int blurIterations;

		[Token(Token = "0x4001B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x825B58", Offset = "0x825B58")]
		public float blurFilterDistance;

		[Token(Token = "0x4001B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x825B70", Offset = "0x825B70")]
		public int downsample;

		[Token(Token = "0x4001B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Texture2D rand;

		[Token(Token = "0x4001B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader aoShader;

		[Token(Token = "0x4001B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material aoMaterial;

		[Token(Token = "0x6002DFC")]
		[Address(RVA = "0x16E072C", Offset = "0x16E072C", VA = "0x16E072C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002DFD")]
		[Address(RVA = "0x16E0784", Offset = "0x16E0784", VA = "0x16E0784")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002DFE")]
		[Address(RVA = "0x16E082C", Offset = "0x16E082C", VA = "0x16E082C")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002DFF")]
		[Address(RVA = "0x16E0E00", Offset = "0x16E0E00", VA = "0x16E0E00")]
		public ScreenSpaceAmbientObscurance()
		{
		}
	}
	[Token(Token = "0x2000517")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x820404", Offset = "0x820404")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x820404", Offset = "0x820404")]
	public class ScreenSpaceAmbientOcclusion : MonoBehaviour
	{
		[Token(Token = "0x2000720")]
		public enum SSAOSamples
		{
			[Token(Token = "0x4002783")]
			Low,
			[Token(Token = "0x4002784")]
			Medium,
			[Token(Token = "0x4002785")]
			High
		}

		[Token(Token = "0x4001B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float m_Radius;

		[Token(Token = "0x4001B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public SSAOSamples m_SampleCount;

		[Token(Token = "0x4001B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float m_OcclusionIntensity;

		[Token(Token = "0x4001B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int m_Blur;

		[Token(Token = "0x4001B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int m_Downsampling;

		[Token(Token = "0x4001B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float m_OcclusionAttenuation;

		[Token(Token = "0x4001B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float m_MinZ;

		[Token(Token = "0x4001B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader m_SSAOShader;

		[Token(Token = "0x4001B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material m_SSAOMaterial;

		[Token(Token = "0x4001B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Texture2D m_RandomTexture;

		[Token(Token = "0x4001B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool m_Supported;

		[Token(Token = "0x6002E00")]
		[Address(RVA = "0x16E0E2C", Offset = "0x16E0E2C", VA = "0x16E0E2C")]
		private static Material CreateMaterial(Shader shader)
		{
			return null;
		}

		[Token(Token = "0x6002E01")]
		[Address(RVA = "0x16E0EDC", Offset = "0x16E0EDC", VA = "0x16E0EDC")]
		private static void DestroyMaterial(Material mat)
		{
		}

		[Token(Token = "0x6002E02")]
		[Address(RVA = "0x16E0F78", Offset = "0x16E0F78", VA = "0x16E0F78")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002E03")]
		[Address(RVA = "0x16E0F80", Offset = "0x16E0F80", VA = "0x16E0F80")]
		private void Start()
		{
		}

		[Token(Token = "0x6002E04")]
		[Address(RVA = "0x16E1114", Offset = "0x16E1114", VA = "0x16E1114")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002E05")]
		[Address(RVA = "0x16E1058", Offset = "0x16E1058", VA = "0x16E1058")]
		private void CreateMaterials()
		{
		}

		[Token(Token = "0x6002E06")]
		[Address(RVA = "0x16E1188", Offset = "0x16E1188", VA = "0x16E1188")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002E07")]
		[Address(RVA = "0x16E1844", Offset = "0x16E1844", VA = "0x16E1844")]
		public ScreenSpaceAmbientOcclusion()
		{
		}
	}
	[Token(Token = "0x2000518")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x82049C", Offset = "0x82049C")]
	public class SepiaTone : ImageEffectBase
	{
		[Token(Token = "0x6002E08")]
		[Address(RVA = "0x16E1878", Offset = "0x16E1878", VA = "0x16E1878")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002E09")]
		[Address(RVA = "0x16E1908", Offset = "0x16E1908", VA = "0x16E1908")]
		public SepiaTone()
		{
		}
	}
	[Token(Token = "0x2000519")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x8204E8", Offset = "0x8204E8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x8204E8", Offset = "0x8204E8")]
	public class SunShafts : PostEffectsBase
	{
		[Token(Token = "0x2000721")]
		public enum SunShaftsResolution
		{
			[Token(Token = "0x4002787")]
			Low,
			[Token(Token = "0x4002788")]
			Normal,
			[Token(Token = "0x4002789")]
			High
		}

		[Token(Token = "0x2000722")]
		public enum ShaftsScreenBlendMode
		{
			[Token(Token = "0x400278B")]
			Screen,
			[Token(Token = "0x400278C")]
			Add
		}

		[Token(Token = "0x4001B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public SunShaftsResolution resolution;

		[Token(Token = "0x4001B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ShaftsScreenBlendMode screenBlendMode;

		[Token(Token = "0x4001B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform sunTransform;

		[Token(Token = "0x4001B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int radialBlurIterations;

		[Token(Token = "0x4001B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Color sunColor;

		[Token(Token = "0x4001B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Color sunThreshold;

		[Token(Token = "0x4001B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float sunShaftBlurRadius;

		[Token(Token = "0x4001B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float sunShaftIntensity;

		[Token(Token = "0x4001B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float maxRadius;

		[Token(Token = "0x4001B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool useDepthTexture;

		[Token(Token = "0x4001B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader sunShaftsShader;

		[Token(Token = "0x4001B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material sunShaftsMaterial;

		[Token(Token = "0x4001B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Shader simpleClearShader;

		[Token(Token = "0x4001B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Material simpleClearMaterial;

		[Token(Token = "0x6002E0A")]
		[Address(RVA = "0x16E1910", Offset = "0x16E1910", VA = "0x16E1910", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E0B")]
		[Address(RVA = "0x16E1978", Offset = "0x16E1978", VA = "0x16E1978")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002E0C")]
		[Address(RVA = "0x16E2164", Offset = "0x16E2164", VA = "0x16E2164")]
		public SunShafts()
		{
		}
	}
	[Token(Token = "0x200051A")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x820580", Offset = "0x820580")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x820580", Offset = "0x820580")]
	internal class TiltShift : PostEffectsBase
	{
		[Token(Token = "0x2000723")]
		public enum TiltShiftMode
		{
			[Token(Token = "0x400278E")]
			TiltShiftMode,
			[Token(Token = "0x400278F")]
			IrisMode
		}

		[Token(Token = "0x2000724")]
		public enum TiltShiftQuality
		{
			[Token(Token = "0x4002791")]
			Preview,
			[Token(Token = "0x4002792")]
			Normal,
			[Token(Token = "0x4002793")]
			High
		}

		[Token(Token = "0x4001B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TiltShiftMode mode;

		[Token(Token = "0x4001B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TiltShiftQuality quality;

		[Token(Token = "0x4001B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x825B88", Offset = "0x825B88")]
		public float blurArea;

		[Token(Token = "0x4001B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x825BA0", Offset = "0x825BA0")]
		public float maxBlurSize;

		[Token(Token = "0x4001B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x825BB8", Offset = "0x825BB8")]
		public int downsample;

		[Token(Token = "0x4001B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader tiltShiftShader;

		[Token(Token = "0x4001B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material tiltShiftMaterial;

		[Token(Token = "0x6002E0D")]
		[Address(RVA = "0x16E2204", Offset = "0x16E2204", VA = "0x16E2204", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E0E")]
		[Address(RVA = "0x16E225C", Offset = "0x16E225C", VA = "0x16E225C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002E0F")]
		[Address(RVA = "0x16E24EC", Offset = "0x16E24EC", VA = "0x16E24EC")]
		public TiltShift()
		{
		}
	}
	[Token(Token = "0x200051B")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x820608", Offset = "0x820608")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x820608", Offset = "0x820608")]
	public class Tonemapping : PostEffectsBase
	{
		[Token(Token = "0x2000725")]
		public enum TonemapperType
		{
			[Token(Token = "0x4002795")]
			SimpleReinhard,
			[Token(Token = "0x4002796")]
			UserCurve,
			[Token(Token = "0x4002797")]
			Hable,
			[Token(Token = "0x4002798")]
			Photographic,
			[Token(Token = "0x4002799")]
			OptimizedHejiDawson,
			[Token(Token = "0x400279A")]
			AdaptiveReinhard,
			[Token(Token = "0x400279B")]
			AdaptiveReinhardAutoWhite
		}

		[Token(Token = "0x2000726")]
		public enum AdaptiveTexSize
		{
			[Token(Token = "0x400279D")]
			Square16 = 0x10,
			[Token(Token = "0x400279E")]
			Square32 = 0x20,
			[Token(Token = "0x400279F")]
			Square64 = 0x40,
			[Token(Token = "0x40027A0")]
			Square128 = 0x80,
			[Token(Token = "0x40027A1")]
			Square256 = 0x100,
			[Token(Token = "0x40027A2")]
			Square512 = 0x200,
			[Token(Token = "0x40027A3")]
			Square1024 = 0x400
		}

		[Token(Token = "0x4001B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TonemapperType type;

		[Token(Token = "0x4001B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AdaptiveTexSize adaptiveTextureSize;

		[Token(Token = "0x4001B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve remapCurve;

		[Token(Token = "0x4001B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Texture2D curveTex;

		[Token(Token = "0x4001B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float exposureAdjustment;

		[Token(Token = "0x4001B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float middleGrey;

		[Token(Token = "0x4001B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float white;

		[Token(Token = "0x4001B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float adaptionSpeed;

		[Token(Token = "0x4001B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader tonemapper;

		[Token(Token = "0x4001B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool validRenderTextureFormat;

		[Token(Token = "0x4001B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material tonemapMaterial;

		[Token(Token = "0x4001B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private RenderTexture rt;

		[Token(Token = "0x4001B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private RenderTextureFormat rtFormat;

		[Token(Token = "0x6002E10")]
		[Address(RVA = "0x16E2510", Offset = "0x16E2510", VA = "0x16E2510", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E11")]
		[Address(RVA = "0x16E264C", Offset = "0x16E264C", VA = "0x16E264C")]
		public float UpdateCurve()
		{
			return default(float);
		}

		[Token(Token = "0x6002E12")]
		[Address(RVA = "0x16E28F4", Offset = "0x16E28F4", VA = "0x16E28F4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002E13")]
		[Address(RVA = "0x16E2A4C", Offset = "0x16E2A4C", VA = "0x16E2A4C")]
		private bool CreateInternalRenderTexture()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E14")]
		[Address(RVA = "0x16E2B3C", Offset = "0x16E2B3C", VA = "0x16E2B3C")]
		[ImageEffectTransformsToLDR]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002E15")]
		[Address(RVA = "0x16E3348", Offset = "0x16E3348", VA = "0x16E3348")]
		public Tonemapping()
		{
		}
	}
	[Token(Token = "0x200051C")]
	internal class Triangles
	{
		[Token(Token = "0x4001B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Mesh[] meshes;

		[Token(Token = "0x4001B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int currentTris;

		[Token(Token = "0x6002E16")]
		[Address(RVA = "0x16E3380", Offset = "0x16E3380", VA = "0x16E3380")]
		private static bool HasMeshes()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E17")]
		[Address(RVA = "0x16E34BC", Offset = "0x16E34BC", VA = "0x16E34BC")]
		private static void Cleanup()
		{
		}

		[Token(Token = "0x6002E18")]
		[Address(RVA = "0x16E368C", Offset = "0x16E368C", VA = "0x16E368C")]
		private static Mesh[] GetMeshes(int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x6002E19")]
		[Address(RVA = "0x16E394C", Offset = "0x16E394C", VA = "0x16E394C")]
		private static Mesh GetMesh(int triCount, int triOffset, int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x6002E1A")]
		[Address(RVA = "0x16E3D7C", Offset = "0x16E3D7C", VA = "0x16E3D7C")]
		public Triangles()
		{
		}
	}
	[Token(Token = "0x200051D")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x8206A0", Offset = "0x8206A0")]
	public class Twirl : ImageEffectBase
	{
		[Token(Token = "0x4001B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 radius;

		[Token(Token = "0x4001B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float angle;

		[Token(Token = "0x4001B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector2 center;

		[Token(Token = "0x6002E1C")]
		[Address(RVA = "0x16E3D88", Offset = "0x16E3D88", VA = "0x16E3D88")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002E1D")]
		[Address(RVA = "0x16E3DCC", Offset = "0x16E3DCC", VA = "0x16E3DCC")]
		public Twirl()
		{
		}
	}
	[Token(Token = "0x200051E")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x8206EC", Offset = "0x8206EC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x8206EC", Offset = "0x8206EC")]
	public class VignetteAndChromaticAberration : PostEffectsBase
	{
		[Token(Token = "0x2000727")]
		public enum AberrationMode
		{
			[Token(Token = "0x40027A5")]
			Simple,
			[Token(Token = "0x40027A6")]
			Advanced
		}

		[Token(Token = "0x4001B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AberrationMode mode;

		[Token(Token = "0x4001B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float intensity;

		[Token(Token = "0x4001BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float chromaticAberration;

		[Token(Token = "0x4001BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float axialAberration;

		[Token(Token = "0x4001BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float blur;

		[Token(Token = "0x4001BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float blurSpread;

		[Token(Token = "0x4001BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float luminanceDependency;

		[Token(Token = "0x4001BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float blurDistance;

		[Token(Token = "0x4001BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader vignetteShader;

		[Token(Token = "0x4001BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader separableBlurShader;

		[Token(Token = "0x4001BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader chromAberrationShader;

		[Token(Token = "0x4001BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material m_VignetteMaterial;

		[Token(Token = "0x4001BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material m_SeparableBlurMaterial;

		[Token(Token = "0x4001BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material m_ChromAberrationMaterial;

		[Token(Token = "0x6002E1E")]
		[Address(RVA = "0x16E3E48", Offset = "0x16E3E48", VA = "0x16E3E48", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E1F")]
		[Address(RVA = "0x16E3ECC", Offset = "0x16E3ECC", VA = "0x16E3ECC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002E20")]
		[Address(RVA = "0x16E44D8", Offset = "0x16E44D8", VA = "0x16E44D8")]
		public VignetteAndChromaticAberration()
		{
		}
	}
	[Token(Token = "0x200051F")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x820784", Offset = "0x820784")]
	public class Vortex : ImageEffectBase
	{
		[Token(Token = "0x4001BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 radius;

		[Token(Token = "0x4001BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float angle;

		[Token(Token = "0x4001BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector2 center;

		[Token(Token = "0x6002E21")]
		[Address(RVA = "0x16E4514", Offset = "0x16E4514", VA = "0x16E4514")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002E22")]
		[Address(RVA = "0x16E4558", Offset = "0x16E4558", VA = "0x16E4558")]
		public Vortex()
		{
		}
	}
}
namespace Port
{
	[Token(Token = "0x2000520")]
	public interface IScript
	{
		[Token(Token = "0x6002E23")]
		void GlobalSubscription();

		[Token(Token = "0x6002E24")]
		void Initialize();

		[Token(Token = "0x6002E25")]
		void GameBegin();

		[Token(Token = "0x6002E26")]
		void GamePause();

		[Token(Token = "0x6002E27")]
		void GameOver();
	}
}
namespace BNG
{
	[Token(Token = "0x2000521")]
	public enum HandPoseId
	{
		[Token(Token = "0x4001BB0")]
		Default = 0,
		[Token(Token = "0x4001BB1")]
		Generic = 1,
		[Token(Token = "0x4001BB2")]
		PingPongBall = 2,
		[Token(Token = "0x4001BB3")]
		Controller = 3,
		[Token(Token = "0x4001BB4")]
		Rock = 4,
		[Token(Token = "0x4001BB5")]
		PistolGrip = 50
	}
	[Token(Token = "0x2000522")]
	public class HandPoseDefinitions : MonoBehaviour
	{
		[Token(Token = "0x6002E28")]
		[Address(RVA = "0xD95604", Offset = "0xD95604", VA = "0xD95604")]
		public HandPoseDefinitions()
		{
		}
	}
	[Token(Token = "0x2000523")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x8207D0", Offset = "0x8207D0")]
	[ExecuteInEditMode]
	public class AutoPoser : MonoBehaviour
	{
		[Token(Token = "0x2000728")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x821000", Offset = "0x821000")]
		private sealed class <updateAutoPoseRoutine>d__33 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40027A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40027A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40027A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AutoPoser <>4__this;

			[Token(Token = "0x17000720")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60036B6")]
				[Address(RVA = "0xA7AFC0", Offset = "0xA7AFC0", VA = "0xA7AFC0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000721")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60036B8")]
				[Address(RVA = "0xA7B028", Offset = "0xA7B028", VA = "0xA7B028", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60036B3")]
			[Address(RVA = "0xA7A094", Offset = "0xA7A094", VA = "0xA7A094")]
			[DebuggerHidden]
			public <updateAutoPoseRoutine>d__33(int <>1__state)
			{
			}

			[Token(Token = "0x60036B4")]
			[Address(RVA = "0xA7AEFC", Offset = "0xA7AEFC", VA = "0xA7AEFC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60036B5")]
			[Address(RVA = "0xA7AF00", Offset = "0xA7AF00", VA = "0xA7AF00", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60036B7")]
			[Address(RVA = "0xA7AFC8", Offset = "0xA7AFC8", VA = "0xA7AFC8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x825BD0", Offset = "0x825BD0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x825BD0", Offset = "0x825BD0")]
		public HandPose OpenHandPose;

		[Token(Token = "0x4001BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x825C30", Offset = "0x825C30")]
		public HandPose ClosedHandPose;

		[Token(Token = "0x4001BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x825C68", Offset = "0x825C68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x825C68", Offset = "0x825C68")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x825C68", Offset = "0x825C68")]
		public float FingerTipRadius;

		[Token(Token = "0x4001BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x825CE4", Offset = "0x825CE4")]
		public FingerTipCollider ThumbCollider;

		[Token(Token = "0x4001BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x825D1C", Offset = "0x825D1C")]
		public FingerTipCollider IndexFingerCollider;

		[Token(Token = "0x4001BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x825D54", Offset = "0x825D54")]
		public FingerTipCollider MiddleFingerCollider;

		[Token(Token = "0x4001BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x825D8C", Offset = "0x825D8C")]
		public FingerTipCollider RingFingerCollider;

		[Token(Token = "0x4001BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x825DC4", Offset = "0x825DC4")]
		public FingerTipCollider PinkyFingerCollider;

		[Token(Token = "0x4001BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x825DFC", Offset = "0x825DFC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x825DFC", Offset = "0x825DFC")]
		public bool UpdateContinuously;

		[Token(Token = "0x4001BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x825E5C", Offset = "0x825E5C")]
		public HandPose IdleHandPose;

		[Token(Token = "0x4001BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public LayerMask CollisionLayerMask;

		[Token(Token = "0x4001BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x825E94", Offset = "0x825E94")]
		public bool ShowGizmos;

		[Token(Token = "0x4001BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GizmoDisplayType GizmoType;

		[Token(Token = "0x4001BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Color GizmoColor;

		[Token(Token = "0x4001BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public HandPoser InspectedPose;

		[Token(Token = "0x4001BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private HandPoseDefinition currentPose;

		[Token(Token = "0x4001BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private HandPoseDefinition tempPose;

		[Token(Token = "0x4001BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private HandPoseDefinition collisionPose;

		[Token(Token = "0x4001BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int _count;

		[Token(Token = "0x4001BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private bool _thumbHit;

		[Token(Token = "0x4001BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
		private bool _indexHit;

		[Token(Token = "0x4001BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAE")]
		private bool _middleHit;

		[Token(Token = "0x4001BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAF")]
		private bool _ringHit;

		[Token(Token = "0x4001BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool _pinkyHit;

		[Token(Token = "0x1700066F")]
		public HandPoseDefinition CollisionPose
		{
			[Token(Token = "0x6002E29")]
			[Address(RVA = "0xA79980", Offset = "0xA79980", VA = "0xA79980")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000670")]
		public bool CollisionDetected
		{
			[Token(Token = "0x6002E2A")]
			[Address(RVA = "0xA79988", Offset = "0xA79988", VA = "0xA79988")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6002E2B")]
		[Address(RVA = "0xA799C0", Offset = "0xA799C0", VA = "0xA799C0")]
		private void Start()
		{
		}

		[Token(Token = "0x6002E2C")]
		[Address(RVA = "0xA79A50", Offset = "0xA79A50", VA = "0xA79A50")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002E2D")]
		[Address(RVA = "0xA79BFC", Offset = "0xA79BFC", VA = "0xA79BFC")]
		private void Update()
		{
		}

		[Token(Token = "0x6002E2E")]
		[Address(RVA = "0xA79FA4", Offset = "0xA79FA4", VA = "0xA79FA4", Slot = "4")]
		public virtual void UpdateAutoPose(bool lerp)
		{
		}

		[Token(Token = "0x6002E2F")]
		[Address(RVA = "0xA79FF8", Offset = "0xA79FF8", VA = "0xA79FF8", Slot = "5")]
		public virtual void UpdateAutoPoseOnce()
		{
		}

		[Token(Token = "0x6002E30")]
		[Address(RVA = "0xA7A024", Offset = "0xA7A024", VA = "0xA7A024")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x833CD0", Offset = "0x833CD0")]
		private IEnumerator updateAutoPoseRoutine()
		{
			return null;
		}

		[Token(Token = "0x6002E31")]
		[Address(RVA = "0xA79D3C", Offset = "0xA79D3C", VA = "0xA79D3C")]
		public HandPoseDefinition GetAutoPose()
		{
			return null;
		}

		[Token(Token = "0x6002E32")]
		[Address(RVA = "0xA7A0C0", Offset = "0xA7A0C0", VA = "0xA7A0C0")]
		public HandPoseDefinition CopyHandDefinition(HandPoseDefinition ToCopy)
		{
			return null;
		}

		[Token(Token = "0x6002E33")]
		[Address(RVA = "0xA7A778", Offset = "0xA7A778", VA = "0xA7A778")]
		public FingerJoint GetJointCopy(FingerJoint ToClone)
		{
			return null;
		}

		[Token(Token = "0x6002E34")]
		[Address(RVA = "0xA7A6A4", Offset = "0xA7A6A4", VA = "0xA7A6A4")]
		public List<FingerJoint> GetJointsCopy(List<FingerJoint> ToClone)
		{
			return null;
		}

		[Token(Token = "0x6002E35")]
		[Address(RVA = "0xA7A1A4", Offset = "0xA7A1A4", VA = "0xA7A1A4")]
		public bool GetThumbHit(HandPoser poser)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E36")]
		[Address(RVA = "0xA7A2A4", Offset = "0xA7A2A4", VA = "0xA7A2A4")]
		public bool GetIndexHit(HandPoser poser)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E37")]
		[Address(RVA = "0xA7A3A4", Offset = "0xA7A3A4", VA = "0xA7A3A4")]
		public bool GetMiddleHit(HandPoser poser)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E38")]
		[Address(RVA = "0xA7A4A4", Offset = "0xA7A4A4", VA = "0xA7A4A4")]
		public bool GetRingHit(HandPoser poser)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E39")]
		[Address(RVA = "0xA7A5A4", Offset = "0xA7A5A4", VA = "0xA7A5A4")]
		public bool GetPinkyHit(HandPoser poser)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E3A")]
		[Address(RVA = "0xA7A814", Offset = "0xA7A814", VA = "0xA7A814", Slot = "6")]
		public virtual bool LoopThroughJoints(List<Transform> fromJoints, List<FingerJoint> toJoints, Vector3 tipPosition, float tipRadius)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E3B")]
		[Address(RVA = "0xA7AAE0", Offset = "0xA7AAE0", VA = "0xA7AAE0", Slot = "7")]
		public virtual bool IsValidCollision(Collider col)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E3C")]
		[Address(RVA = "0xA7AB78", Offset = "0xA7AB78", VA = "0xA7AB78")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6002E3D")]
		[Address(RVA = "0xA7AD68", Offset = "0xA7AD68", VA = "0xA7AD68")]
		public void DrawJointGizmo(FingerTipCollider tipCollider, Vector3 defaultPosition, float radius, GizmoDisplayType gizmoType)
		{
		}

		[Token(Token = "0x6002E3E")]
		[Address(RVA = "0xA7AEA4", Offset = "0xA7AEA4", VA = "0xA7AEA4")]
		public AutoPoser()
		{
		}
	}
	[Token(Token = "0x2000524")]
	public enum GizmoDisplayType
	{
		[Token(Token = "0x4001BCF")]
		Wire,
		[Token(Token = "0x4001BD0")]
		Solid,
		[Token(Token = "0x4001BD1")]
		None
	}
	[Token(Token = "0x2000525")]
	public class BoneMapping : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000729")]
		public enum Mode
		{
			[Token(Token = "0x40027AB")]
			FromToRotation,
			[Token(Token = "0x40027AC")]
			MatchRotation
		}

		[Token(Token = "0x4001BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x825ECC", Offset = "0x825ECC")]
		public float weight;

		[Token(Token = "0x4001BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BoneObject[] Fingers;

		[Token(Token = "0x4001BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x825EE4", Offset = "0x825EE4")]
		public bool ShowGizmos;

		[Token(Token = "0x6002E3F")]
		[Address(RVA = "0xA7C15C", Offset = "0xA7C15C", VA = "0xA7C15C")]
		private void Update()
		{
		}

		[Token(Token = "0x6002E40")]
		[Address(RVA = "0xA7C4D4", Offset = "0xA7C4D4", VA = "0xA7C4D4")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6002E41")]
		[Address(RVA = "0xA7C94C", Offset = "0xA7C94C", VA = "0xA7C94C")]
		public BoneMapping()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000526")]
	public class BoneObject
	{
		[Token(Token = "0x4001BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform[] targetBones;

		[Token(Token = "0x4001BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform[] destinationBones;

		[Token(Token = "0x4001BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 avatarForwardAxis;

		[Token(Token = "0x4001BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 avatarUpAxis;

		[Token(Token = "0x4001BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 targetForwardAxis;

		[Token(Token = "0x4001BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 targetUpAxis;

		[Token(Token = "0x6002E42")]
		[Address(RVA = "0xA7C964", Offset = "0xA7C964", VA = "0xA7C964")]
		public BoneObject()
		{
		}
	}
	[Token(Token = "0x2000527")]
	public class EditorHandle : MonoBehaviour
	{
		[Token(Token = "0x4001BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool ShowTransformName;

		[Token(Token = "0x4001BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float Radius;

		[Token(Token = "0x4001BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color BaseColor;

		[Token(Token = "0x6002E43")]
		[Address(RVA = "0xA87D10", Offset = "0xA87D10", VA = "0xA87D10")]
		public EditorHandle()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000528")]
	public class FingerJoint
	{
		[Token(Token = "0x4001BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public string TransformName;

		[Token(Token = "0x4001BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Vector3 LocalPosition;

		[Token(Token = "0x4001BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		public Quaternion LocalRotation;

		[Token(Token = "0x6002E44")]
		[Address(RVA = "0xA7A80C", Offset = "0xA7A80C", VA = "0xA7A80C")]
		public FingerJoint()
		{
		}
	}
	[Token(Token = "0x2000529")]
	public class FingerTipCollider : MonoBehaviour
	{
		[Token(Token = "0x4001BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x825F4C", Offset = "0x825F4C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x825F4C", Offset = "0x825F4C")]
		public float Radius;

		[Token(Token = "0x6002E45")]
		[Address(RVA = "0xA887A8", Offset = "0xA887A8", VA = "0xA887A8")]
		public FingerTipCollider()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200052A")]
	public class HandPose : ScriptableObject
	{
		[Token(Token = "0x4001BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x825FA4", Offset = "0x825FA4")]
		public string PoseName;

		[Token(Token = "0x4001BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x825FDC", Offset = "0x825FDC")]
		public HandPoseDefinition Joints;

		[Token(Token = "0x6002E46")]
		[Address(RVA = "0xD955F4", Offset = "0xD955F4", VA = "0xD955F4")]
		public HandPose()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200052B")]
	public class HandPoseDefinition
	{
		[Token(Token = "0x4001BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x826028", Offset = "0x826028")]
		public FingerJoint WristJoint;

		[Token(Token = "0x4001BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x826074", Offset = "0x826074")]
		public List<FingerJoint> ThumbJoints;

		[Token(Token = "0x4001BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8260C0", Offset = "0x8260C0")]
		public List<FingerJoint> IndexJoints;

		[Token(Token = "0x4001BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82610C", Offset = "0x82610C")]
		public List<FingerJoint> MiddleJoints;

		[Token(Token = "0x4001BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x826158", Offset = "0x826158")]
		public List<FingerJoint> RingJoints;

		[Token(Token = "0x4001BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8261A4", Offset = "0x8261A4")]
		public List<FingerJoint> PinkyJoints;

		[Token(Token = "0x4001BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8261F0", Offset = "0x8261F0")]
		public List<FingerJoint> OtherJoints;

		[Token(Token = "0x6002E47")]
		[Address(RVA = "0xD955FC", Offset = "0xD955FC", VA = "0xD955FC")]
		public HandPoseDefinition()
		{
		}
	}
	[Token(Token = "0x200052C")]
	[ExecuteInEditMode]
	public class HandPoser : MonoBehaviour
	{
		[Token(Token = "0x4001BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool ShowGizmos;

		[Token(Token = "0x4001BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82623C", Offset = "0x82623C")]
		public string ResourcePath;

		[Token(Token = "0x4001BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string PoseName;

		[Token(Token = "0x4001BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HandPose CurrentPose;

		[Token(Token = "0x4001BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float AnimationSpeed;

		[Token(Token = "0x4001BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform WristJoint;

		[Token(Token = "0x4001BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<Transform> ThumbJoints;

		[Token(Token = "0x4001BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<Transform> IndexJoints;

		[Token(Token = "0x4001BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<Transform> MiddleJoints;

		[Token(Token = "0x4001BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<Transform> RingJoints;

		[Token(Token = "0x4001BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<Transform> PinkyJoints;

		[Token(Token = "0x4001BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<Transform> OtherJoints;

		[Token(Token = "0x4001BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private HandPose previousPose;

		[Token(Token = "0x4001BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool doSingleAnimation;

		[Token(Token = "0x4001BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		public bool ContinuousUpdate;

		[Token(Token = "0x4001BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float editorAnimationTime;

		[Token(Token = "0x4001BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float maxEditorAnimationTime;

		[Token(Token = "0x17000671")]
		public HandPoseDefinition HandPoseJoints
		{
			[Token(Token = "0x6002E48")]
			[Address(RVA = "0xD9560C", Offset = "0xD9560C", VA = "0xD9560C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002E49")]
		[Address(RVA = "0xD95618", Offset = "0xD95618", VA = "0xD95618")]
		private void Start()
		{
		}

		[Token(Token = "0x6002E4A")]
		[Address(RVA = "0xD95628", Offset = "0xD95628", VA = "0xD95628")]
		private void Update()
		{
		}

		[Token(Token = "0x6002E4B")]
		[Address(RVA = "0xD95674", Offset = "0xD95674", VA = "0xD95674")]
		public void CheckForPoseChange()
		{
		}

		[Token(Token = "0x6002E4C")]
		[Address(RVA = "0xD927F0", Offset = "0xD927F0", VA = "0xD927F0")]
		public void OnPoseChanged()
		{
		}

		[Token(Token = "0x6002E4D")]
		[Address(RVA = "0xD957DC", Offset = "0xD957DC", VA = "0xD957DC")]
		public FingerJoint GetWristJoint()
		{
			return null;
		}

		[Token(Token = "0x6002E4E")]
		[Address(RVA = "0xD957EC", Offset = "0xD957EC", VA = "0xD957EC")]
		public List<FingerJoint> GetThumbJoints()
		{
			return null;
		}

		[Token(Token = "0x6002E4F")]
		[Address(RVA = "0xD957FC", Offset = "0xD957FC", VA = "0xD957FC")]
		public List<FingerJoint> GetIndexJoints()
		{
			return null;
		}

		[Token(Token = "0x6002E50")]
		[Address(RVA = "0xD9580C", Offset = "0xD9580C", VA = "0xD9580C")]
		public List<FingerJoint> GetMiddleJoints()
		{
			return null;
		}

		[Token(Token = "0x6002E51")]
		[Address(RVA = "0xD9581C", Offset = "0xD9581C", VA = "0xD9581C")]
		public List<FingerJoint> GetRingJoints()
		{
			return null;
		}

		[Token(Token = "0x6002E52")]
		[Address(RVA = "0xD9582C", Offset = "0xD9582C", VA = "0xD9582C")]
		public List<FingerJoint> GetPinkyJoints()
		{
			return null;
		}

		[Token(Token = "0x6002E53")]
		[Address(RVA = "0xD9583C", Offset = "0xD9583C", VA = "0xD9583C")]
		public List<FingerJoint> GetOtherJoints()
		{
			return null;
		}

		[Token(Token = "0x6002E54")]
		[Address(RVA = "0xD9584C", Offset = "0xD9584C", VA = "0xD9584C")]
		public Transform GetTip(List<Transform> transforms)
		{
			return null;
		}

		[Token(Token = "0x6002E55")]
		[Address(RVA = "0xD958B8", Offset = "0xD958B8", VA = "0xD958B8")]
		public Transform GetThumbTip()
		{
			return null;
		}

		[Token(Token = "0x6002E56")]
		[Address(RVA = "0xD958C0", Offset = "0xD958C0", VA = "0xD958C0")]
		public Transform GetIndexTip()
		{
			return null;
		}

		[Token(Token = "0x6002E57")]
		[Address(RVA = "0xD958C8", Offset = "0xD958C8", VA = "0xD958C8")]
		public Transform GetMiddleTip()
		{
			return null;
		}

		[Token(Token = "0x6002E58")]
		[Address(RVA = "0xD958D0", Offset = "0xD958D0", VA = "0xD958D0")]
		public Transform GetRingTip()
		{
			return null;
		}

		[Token(Token = "0x6002E59")]
		[Address(RVA = "0xD958D8", Offset = "0xD958D8", VA = "0xD958D8")]
		public Transform GetPinkyTip()
		{
			return null;
		}

		[Token(Token = "0x6002E5A")]
		[Address(RVA = "0xD958E0", Offset = "0xD958E0", VA = "0xD958E0")]
		public static Vector3 GetFingerTipPositionWithOffset(List<Transform> jointTransforms, float tipRadius)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002E5B")]
		[Address(RVA = "0xD95AE4", Offset = "0xD95AE4", VA = "0xD95AE4", Slot = "4")]
		public virtual List<FingerJoint> GetJointsFromTransforms(List<Transform> jointTransforms)
		{
			return null;
		}

		[Token(Token = "0x6002E5C")]
		[Address(RVA = "0xD95C2C", Offset = "0xD95C2C", VA = "0xD95C2C", Slot = "5")]
		public virtual FingerJoint GetJointFromTransform(Transform jointTransform)
		{
			return null;
		}

		[Token(Token = "0x6002E5D")]
		[Address(RVA = "0xD95D08", Offset = "0xD95D08", VA = "0xD95D08", Slot = "6")]
		public virtual void UpdateHandPose(HandPoseDefinition pose, bool lerp)
		{
		}

		[Token(Token = "0x6002E5E")]
		[Address(RVA = "0xD95DFC", Offset = "0xD95DFC", VA = "0xD95DFC", Slot = "7")]
		public virtual void UpdateJoint(FingerJoint fromJoint, Transform toTransform, bool doLerp)
		{
		}

		[Token(Token = "0x6002E5F")]
		[Address(RVA = "0xD96014", Offset = "0xD96014", VA = "0xD96014", Slot = "8")]
		public virtual void UpdateJoints(List<FingerJoint> joints, List<Transform> toTransforms, bool doLerp)
		{
		}

		[Token(Token = "0x6002E60")]
		[Address(RVA = "0xD96200", Offset = "0xD96200", VA = "0xD96200", Slot = "9")]
		public virtual HandPoseDefinition GetHandPoseDefinition()
		{
			return null;
		}

		[Token(Token = "0x6002E61")]
		[Address(RVA = "0xD96310", Offset = "0xD96310", VA = "0xD96310", Slot = "10")]
		public virtual void SavePoseAsScriptablObject(string poseName)
		{
		}

		[Token(Token = "0x6002E62")]
		[Address(RVA = "0xD9637C", Offset = "0xD9637C", VA = "0xD9637C", Slot = "11")]
		public virtual void CreateUniquePose(string poseName)
		{
		}

		[Token(Token = "0x6002E63")]
		[Address(RVA = "0xD964A0", Offset = "0xD964A0", VA = "0xD964A0", Slot = "12")]
		public virtual HandPose GetHandPoseScriptableObject()
		{
			return null;
		}

		[Token(Token = "0x6002E64")]
		[Address(RVA = "0xD964A8", Offset = "0xD964A8", VA = "0xD964A8", Slot = "13")]
		public virtual void DoPoseUpdate()
		{
		}

		[Token(Token = "0x6002E65")]
		[Address(RVA = "0xD9657C", Offset = "0xD9657C", VA = "0xD9657C", Slot = "14")]
		public virtual void ResetEditorHandles()
		{
		}

		[Token(Token = "0x6002E66")]
		[Address(RVA = "0xD966E4", Offset = "0xD966E4", VA = "0xD966E4")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6002E67")]
		[Address(RVA = "0xD966E8", Offset = "0xD966E8", VA = "0xD966E8")]
		public HandPoser()
		{
		}
	}
	[Token(Token = "0x200052D")]
	[ExecuteInEditMode]
	public class SkeletonVisualizer : MonoBehaviour
	{
		[Token(Token = "0x4001BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool ShowGizmos;

		[Token(Token = "0x4001BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x826274", Offset = "0x826274")]
		public float JointRadius;

		[Token(Token = "0x4001BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x82628C", Offset = "0x82628C")]
		public float BoneThickness;

		[Token(Token = "0x4001BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Color GizmoColor;

		[Token(Token = "0x4001C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool ShowTransformNames;

		[Token(Token = "0x4001C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool isQuiting;

		[Token(Token = "0x6002E68")]
		[Address(RVA = "0xB653E4", Offset = "0xB653E4", VA = "0xB653E4")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6002E69")]
		[Address(RVA = "0xB653F0", Offset = "0xB653F0", VA = "0xB653F0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002E6A")]
		[Address(RVA = "0xB653F4", Offset = "0xB653F4", VA = "0xB653F4", Slot = "4")]
		public virtual bool IsTipOfBone(Transform fingerJoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E6B")]
		[Address(RVA = "0xB654FC", Offset = "0xB654FC", VA = "0xB654FC")]
		public void ResetEditorHandles()
		{
		}

		[Token(Token = "0x6002E6C")]
		[Address(RVA = "0xB65664", Offset = "0xB65664", VA = "0xB65664")]
		public SkeletonVisualizer()
		{
		}
	}
	[Token(Token = "0x200052E")]
	public class DemoCube : MonoBehaviour
	{
		[Token(Token = "0x4001C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material HighlightMaterial;

		[Token(Token = "0x4001C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material ActiveMaterial;

		[Token(Token = "0x4001C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool active;

		[Token(Token = "0x4001C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool hovering;

		[Token(Token = "0x4001C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material initialMaterial;

		[Token(Token = "0x4001C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private MeshRenderer render;

		[Token(Token = "0x6002E6D")]
		[Address(RVA = "0xA85CF4", Offset = "0xA85CF4", VA = "0xA85CF4")]
		private void Start()
		{
		}

		[Token(Token = "0x6002E6E")]
		[Address(RVA = "0xA85D60", Offset = "0xA85D60", VA = "0xA85D60")]
		public void SetActive(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6002E6F")]
		[Address(RVA = "0xA85DC0", Offset = "0xA85DC0", VA = "0xA85DC0")]
		public void SetInactive(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6002E70")]
		[Address(RVA = "0xA85DC8", Offset = "0xA85DC8", VA = "0xA85DC8")]
		public void SetHovering(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6002E71")]
		[Address(RVA = "0xA85DD4", Offset = "0xA85DD4", VA = "0xA85DD4")]
		public void ResetHovering(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6002E72")]
		[Address(RVA = "0xA85D6C", Offset = "0xA85D6C", VA = "0xA85D6C")]
		public void UpdateMaterial()
		{
		}

		[Token(Token = "0x6002E73")]
		[Address(RVA = "0xA85DDC", Offset = "0xA85DDC", VA = "0xA85DDC")]
		public DemoCube()
		{
		}
	}
	[Token(Token = "0x200052F")]
	public class DemoScript : MonoBehaviour
	{
		[Token(Token = "0x4001C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text LabelToUpdate;

		[Token(Token = "0x4001C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ProjectileLauncher DemoLauncher;

		[Token(Token = "0x4001C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int MaxLaunchedObjects;

		[Token(Token = "0x4001C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<GameObject> launchedObjects;

		[Token(Token = "0x4001C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Text JoystickText;

		[Token(Token = "0x4001C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject AmmoObject;

		[Token(Token = "0x4001C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform ItemsHolder;

		[Token(Token = "0x4001C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Dictionary<Grabbable, PosRot> _initalGrabbables;

		[Token(Token = "0x4001C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody cubeRigid;

		[Token(Token = "0x4001C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody cubeRigid1;

		[Token(Token = "0x4001C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Rigidbody cubeRigid2;

		[Token(Token = "0x4001C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody cubeRigid3;

		[Token(Token = "0x4001C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<Grabbable> demoClips;

		[Token(Token = "0x4001C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 rotateX;

		[Token(Token = "0x4001C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 rotateY;

		[Token(Token = "0x4001C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 rotateZ;

		[Token(Token = "0x4001C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 rotateXYX;

		[Token(Token = "0x6002E74")]
		[Address(RVA = "0xA85DE4", Offset = "0xA85DE4", VA = "0xA85DE4")]
		private void Start()
		{
		}

		[Token(Token = "0x6002E75")]
		[Address(RVA = "0xA861E0", Offset = "0xA861E0", VA = "0xA861E0")]
		private void Update()
		{
		}

		[Token(Token = "0x6002E76")]
		[Address(RVA = "0xA86354", Offset = "0xA86354", VA = "0xA86354")]
		public void UpdateSliderText(float sliderValue)
		{
		}

		[Token(Token = "0x6002E77")]
		[Address(RVA = "0xA8649C", Offset = "0xA8649C", VA = "0xA8649C")]
		public void UpdateJoystickText(float leverX, float leverY)
		{
		}

		[Token(Token = "0x6002E78")]
		[Address(RVA = "0xA86684", Offset = "0xA86684", VA = "0xA86684")]
		public void ResetGrabbables()
		{
		}

		[Token(Token = "0x6002E79")]
		[Address(RVA = "0xA86968", Offset = "0xA86968", VA = "0xA86968")]
		public void GrabAmmo(Grabber grabber)
		{
		}

		[Token(Token = "0x6002E7A")]
		[Address(RVA = "0xA86DD4", Offset = "0xA86DD4", VA = "0xA86DD4")]
		public void ShootLauncher()
		{
		}

		[Token(Token = "0x6002E7B")]
		[Address(RVA = "0xA85FEC", Offset = "0xA85FEC", VA = "0xA85FEC")]
		private void initGravityCubes()
		{
		}

		[Token(Token = "0x6002E7C")]
		[Address(RVA = "0xA861E4", Offset = "0xA861E4", VA = "0xA861E4")]
		private void rotateGravityCubes()
		{
		}

		[Token(Token = "0x6002E7D")]
		[Address(RVA = "0xA86F00", Offset = "0xA86F00", VA = "0xA86F00")]
		public DemoScript()
		{
		}
	}
	[Token(Token = "0x2000530")]
	public class PosRot
	{
		[Token(Token = "0x4001C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 Position;

		[Token(Token = "0x4001C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion Rotation;

		[Token(Token = "0x6002E7E")]
		[Address(RVA = "0xB5D438", Offset = "0xB5D438", VA = "0xB5D438")]
		public PosRot()
		{
		}
	}
	[Token(Token = "0x2000531")]
	public class CharacterConstraint : MonoBehaviour
	{
		[Token(Token = "0x4001C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BNGPlayerController bngController;

		[Token(Token = "0x4001C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CharacterController character;

		[Token(Token = "0x6002E7F")]
		[Address(RVA = "0xA81E54", Offset = "0xA81E54", VA = "0xA81E54")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002E80")]
		[Address(RVA = "0xA81ED4", Offset = "0xA81ED4", VA = "0xA81ED4")]
		private void Update()
		{
		}

		[Token(Token = "0x6002E81")]
		[Address(RVA = "0xA81EE0", Offset = "0xA81EE0", VA = "0xA81EE0", Slot = "4")]
		public virtual void CheckCharacterCollisionMove()
		{
		}

		[Token(Token = "0x6002E82")]
		[Address(RVA = "0xA82074", Offset = "0xA82074", VA = "0xA82074")]
		public CharacterConstraint()
		{
		}
	}
	[Token(Token = "0x2000532")]
	public class CharacterIK : MonoBehaviour
	{
		[Token(Token = "0x4001C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform FollowLeftController;

		[Token(Token = "0x4001C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform FollowRightController;

		[Token(Token = "0x4001C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform FollowLeftFoot;

		[Token(Token = "0x4001C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform FollowRightFoot;

		[Token(Token = "0x4001C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform FollowHead;

		[Token(Token = "0x4001C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float FootYPosition;

		[Token(Token = "0x4001C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool IKActive;

		[Token(Token = "0x4001C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		public bool IKFeetActive;

		[Token(Token = "0x4001C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		public bool HideHead;

		[Token(Token = "0x4001C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
		public bool HideLeftArm;

		[Token(Token = "0x4001C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool HideRightArm;

		[Token(Token = "0x4001C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool HideLeftHand;

		[Token(Token = "0x4001C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		public bool HideRightHand;

		[Token(Token = "0x4001C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
		public bool HideLegs;

		[Token(Token = "0x4001C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform HipsJoint;

		[Token(Token = "0x4001C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public CharacterController FollowPlayer;

		[Token(Token = "0x4001C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform headBone;

		[Token(Token = "0x4001C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform leftShoulderJoint;

		[Token(Token = "0x4001C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform rightShoulderJoint;

		[Token(Token = "0x4001C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform leftHandJoint;

		[Token(Token = "0x4001C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform rightHandJoint;

		[Token(Token = "0x4001C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Animator animator;

		[Token(Token = "0x4001C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float HipOffset;

		[Token(Token = "0x4001C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public Vector3 hideBoneScale;

		[Token(Token = "0x6002E83")]
		[Address(RVA = "0xA8207C", Offset = "0xA8207C", VA = "0xA8207C")]
		private void Start()
		{
		}

		[Token(Token = "0x6002E84")]
		[Address(RVA = "0xA8215C", Offset = "0xA8215C", VA = "0xA8215C")]
		private void Update()
		{
		}

		[Token(Token = "0x6002E85")]
		[Address(RVA = "0xA82514", Offset = "0xA82514", VA = "0xA82514")]
		private void OnAnimatorIK()
		{
		}

		[Token(Token = "0x6002E86")]
		[Address(RVA = "0xA829F8", Offset = "0xA829F8", VA = "0xA829F8")]
		public CharacterIK()
		{
		}
	}
	[Token(Token = "0x2000533")]
	public class CharacterYOffset : MonoBehaviour
	{
		[Token(Token = "0x6002E87")]
		[Address(RVA = "0xA82A6C", Offset = "0xA82A6C", VA = "0xA82A6C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6002E88")]
		[Address(RVA = "0xA82B3C", Offset = "0xA82B3C", VA = "0xA82B3C")]
		public CharacterYOffset()
		{
		}
	}
	[Token(Token = "0x2000534")]
	public class Climbable : Grabbable
	{
		[Token(Token = "0x4001C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		private PlayerClimbing playerClimbing;

		[Token(Token = "0x6002E89")]
		[Address(RVA = "0xA82B44", Offset = "0xA82B44", VA = "0xA82B44")]
		private void Start()
		{
		}

		[Token(Token = "0x6002E8A")]
		[Address(RVA = "0xA82C48", Offset = "0xA82C48", VA = "0xA82C48", Slot = "20")]
		public override void GrabItem(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x6002E8B")]
		[Address(RVA = "0xA83618", Offset = "0xA83618", VA = "0xA83618", Slot = "28")]
		public override void DropItem(Grabber droppedBy)
		{
		}

		[Token(Token = "0x6002E8C")]
		[Address(RVA = "0xA83718", Offset = "0xA83718", VA = "0xA83718")]
		public Climbable()
		{
		}
	}
	[Token(Token = "0x2000535")]
	public class CollisionSound : MonoBehaviour
	{
		[Token(Token = "0x4001C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip CollisionAudio;

		[Token(Token = "0x4001C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AudioSource audioSource;

		[Token(Token = "0x4001C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float startTime;

		[Token(Token = "0x4001C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Collider col;

		[Token(Token = "0x4001C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Grabbable grab;

		[Token(Token = "0x4001C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float MinimumVolume;

		[Token(Token = "0x4001C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float MaximumVolume;

		[Token(Token = "0x4001C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool RecentlyPlayedSound;

		[Token(Token = "0x4001C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float lastPlayedSound;

		[Token(Token = "0x4001C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float LastRelativeVelocity;

		[Token(Token = "0x6002E8D")]
		[Address(RVA = "0xA837C0", Offset = "0xA837C0", VA = "0xA837C0")]
		private void Start()
		{
		}

		[Token(Token = "0x6002E8E")]
		[Address(RVA = "0xA838C4", Offset = "0xA838C4", VA = "0xA838C4")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6002E8F")]
		[Address(RVA = "0xA83C4C", Offset = "0xA83C4C", VA = "0xA83C4C")]
		private void resetLastPlayedSound()
		{
		}

		[Token(Token = "0x6002E90")]
		[Address(RVA = "0xA83C54", Offset = "0xA83C54", VA = "0xA83C54")]
		public CollisionSound()
		{
		}
	}
	[Token(Token = "0x2000536")]
	public class ConstrainLocalPosition : MonoBehaviour
	{
		[Token(Token = "0x4001C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool ConstrainLocalX;

		[Token(Token = "0x4001C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float LocalXMin;

		[Token(Token = "0x4001C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float LocalXMax;

		[Token(Token = "0x4001C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool ConstrainLocalY;

		[Token(Token = "0x4001C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float LocalYMin;

		[Token(Token = "0x4001C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float LocalYMax;

		[Token(Token = "0x4001C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool ConstrainLocalZ;

		[Token(Token = "0x4001C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float LocalZMin;

		[Token(Token = "0x4001C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float LocalZMax;

		[Token(Token = "0x6002E91")]
		[Address(RVA = "0xA83C68", Offset = "0xA83C68", VA = "0xA83C68")]
		private void Update()
		{
		}

		[Token(Token = "0x6002E92")]
		[Address(RVA = "0xA83C6C", Offset = "0xA83C6C", VA = "0xA83C6C")]
		private void doConstrain()
		{
		}

		[Token(Token = "0x6002E93")]
		[Address(RVA = "0xA83E20", Offset = "0xA83E20", VA = "0xA83E20")]
		public ConstrainLocalPosition()
		{
		}
	}
	[Token(Token = "0x2000537")]
	public class DamageCollider : MonoBehaviour
	{
		[Token(Token = "0x4001C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Damage;

		[Token(Token = "0x4001C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Rigidbody ColliderRigidbody;

		[Token(Token = "0x4001C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float MinForce;

		[Token(Token = "0x4001C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float LastRelativeVelocity;

		[Token(Token = "0x4001C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float LastDamageForce;

		[Token(Token = "0x4001C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool TakeCollisionDamage;

		[Token(Token = "0x4001C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float CollisionDamage;

		[Token(Token = "0x4001C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Damageable thisDamageable;

		[Token(Token = "0x6002E94")]
		[Address(RVA = "0xA84D6C", Offset = "0xA84D6C", VA = "0xA84D6C")]
		private void Start()
		{
		}

		[Token(Token = "0x6002E95")]
		[Address(RVA = "0xA84E14", Offset = "0xA84E14", VA = "0xA84E14")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6002E96")]
		[Address(RVA = "0xA84E5C", Offset = "0xA84E5C", VA = "0xA84E5C", Slot = "4")]
		public virtual void OnCollisionEvent(Collision collision)
		{
		}

		[Token(Token = "0x6002E97")]
		[Address(RVA = "0xA850A4", Offset = "0xA850A4", VA = "0xA850A4")]
		public DamageCollider()
		{
		}
	}
	[Token(Token = "0x2000538")]
	public class Damageable : MonoBehaviour
	{
		[Token(Token = "0x200072A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x821010", Offset = "0x821010")]
		private sealed class <RespawnRoutine>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40027AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40027AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40027AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float seconds;

			[Token(Token = "0x40027B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Damageable <>4__this;

			[Token(Token = "0x17000722")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60036BC")]
				[Address(RVA = "0xA85C84", Offset = "0xA85C84", VA = "0xA85C84", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000723")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60036BE")]
				[Address(RVA = "0xA85CEC", Offset = "0xA85CEC", VA = "0xA85CEC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60036B9")]
			[Address(RVA = "0xA8590C", Offset = "0xA8590C", VA = "0xA8590C")]
			[DebuggerHidden]
			public <RespawnRoutine>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x60036BA")]
			[Address(RVA = "0xA85960", Offset = "0xA85960", VA = "0xA85960", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60036BB")]
			[Address(RVA = "0xA85964", Offset = "0xA85964", VA = "0xA85964", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60036BD")]
			[Address(RVA = "0xA85C8C", Offset = "0xA85C8C", VA = "0xA85C8C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Health;

		[Token(Token = "0x4001C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float _startingHealth;

		[Token(Token = "0x4001C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8262A4", Offset = "0x8262A4")]
		public GameObject SpawnOnDeath;

		[Token(Token = "0x4001C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8262DC", Offset = "0x8262DC")]
		public List<GameObject> ActivateGameObjectsOnDeath;

		[Token(Token = "0x4001C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x826314", Offset = "0x826314")]
		public List<GameObject> DeactivateGameObjectsOnDeath;

		[Token(Token = "0x4001C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82634C", Offset = "0x82634C")]
		public List<Collider> DeactivateCollidersOnDeath;

		[Token(Token = "0x4001C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x826384", Offset = "0x826384")]
		public bool DestroyOnDeath;

		[Token(Token = "0x4001C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8263BC", Offset = "0x8263BC")]
		public bool DropOnDeath;

		[Token(Token = "0x4001C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8263F4", Offset = "0x8263F4")]
		public float DestroyDelay;

		[Token(Token = "0x4001C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82642C", Offset = "0x82642C")]
		public bool Respawn;

		[Token(Token = "0x4001C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x826464", Offset = "0x826464")]
		public float RespawnTime;

		[Token(Token = "0x4001C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82649C", Offset = "0x82649C")]
		public bool RemoveBulletHolesOnDeath;

		[Token(Token = "0x4001C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8264D4", Offset = "0x8264D4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8264D4", Offset = "0x8264D4")]
		public FloatEvent onDamaged;

		[Token(Token = "0x4001C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x826534", Offset = "0x826534")]
		public UnityEvent onDestroyed;

		[Token(Token = "0x4001C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82656C", Offset = "0x82656C")]
		public UnityEvent onRespawn;

		[Token(Token = "0x4001C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool destroyed;

		[Token(Token = "0x4001C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody rigid;

		[Token(Token = "0x4001C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool initialWasKinematic;

		[Token(Token = "0x6002E98")]
		[Address(RVA = "0xA850C8", Offset = "0xA850C8", VA = "0xA850C8")]
		private void Start()
		{
		}

		[Token(Token = "0x6002E99")]
		[Address(RVA = "0xA85178", Offset = "0xA85178", VA = "0xA85178", Slot = "4")]
		public virtual void DealDamage(float damageAmount)
		{
		}

		[Token(Token = "0x6002E9A")]
		[Address(RVA = "0xA85230", Offset = "0xA85230", VA = "0xA85230", Slot = "5")]
		public virtual void DealDamage(float damageAmount, [Optional] Vector3? hitPosition, [Optional] Vector3? hitNormal, bool reactToHit = true, [Optional] GameObject sender, [Optional] GameObject receiver)
		{
		}

		[Token(Token = "0x6002E9B")]
		[Address(RVA = "0xA852D4", Offset = "0xA852D4", VA = "0xA852D4", Slot = "6")]
		public virtual void DestroyThis()
		{
		}

		[Token(Token = "0x6002E9C")]
		[Address(RVA = "0xA8588C", Offset = "0xA8588C", VA = "0xA8588C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x833D34", Offset = "0x833D34")]
		private IEnumerator RespawnRoutine(float seconds)
		{
			return null;
		}

		[Token(Token = "0x6002E9D")]
		[Address(RVA = "0xA85938", Offset = "0xA85938", VA = "0xA85938")]
		public Damageable()
		{
		}
	}
	[Token(Token = "0x2000539")]
	public class DestroyObjectWithDelay : MonoBehaviour
	{
		[Token(Token = "0x4001C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float DestroySeconds;

		[Token(Token = "0x6002E9E")]
		[Address(RVA = "0xA870C0", Offset = "0xA870C0", VA = "0xA870C0")]
		private void Start()
		{
		}

		[Token(Token = "0x6002E9F")]
		[Address(RVA = "0xA8714C", Offset = "0xA8714C", VA = "0xA8714C")]
		public DestroyObjectWithDelay()
		{
		}
	}
	[Token(Token = "0x200053A")]
	public class FollowRigidbody : MonoBehaviour
	{
		[Token(Token = "0x4001C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform FollowTransform;

		[Token(Token = "0x4001C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Rigidbody rigid;

		[Token(Token = "0x6002EA0")]
		[Address(RVA = "0xA8899C", Offset = "0xA8899C", VA = "0xA8899C")]
		private void Start()
		{
		}

		[Token(Token = "0x6002EA1")]
		[Address(RVA = "0xA889F4", Offset = "0xA889F4", VA = "0xA889F4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6002EA2")]
		[Address(RVA = "0xA88A40", Offset = "0xA88A40", VA = "0xA88A40")]
		public FollowRigidbody()
		{
		}
	}
	[Token(Token = "0x200053B")]
	public class FollowTransform : MonoBehaviour
	{
		[Token(Token = "0x4001C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform FollowTarget;

		[Token(Token = "0x4001C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool MatchRotation;

		[Token(Token = "0x6002EA3")]
		[Address(RVA = "0xA88A48", Offset = "0xA88A48", VA = "0xA88A48")]
		private void Update()
		{
		}

		[Token(Token = "0x6002EA4")]
		[Address(RVA = "0xA88B38", Offset = "0xA88B38", VA = "0xA88B38")]
		public FollowTransform()
		{
		}
	}
	[Token(Token = "0x200053C")]
	public class GrabAction : GrabbableEvents
	{
		[Token(Token = "0x4001C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GrabberEvent OnGrabEvent;

		[Token(Token = "0x4001C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Grabbable g;

		[Token(Token = "0x4001C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float lastGrabTime;

		[Token(Token = "0x4001C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float minTimeBetweenGrabs;

		[Token(Token = "0x6002EA5")]
		[Address(RVA = "0xA88B48", Offset = "0xA88B48", VA = "0xA88B48", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6002EA6")]
		[Address(RVA = "0xA88C80", Offset = "0xA88C80", VA = "0xA88C80")]
		public GrabAction()
		{
		}
	}
	[Token(Token = "0x200053D")]
	public class GrabPointTrigger : MonoBehaviour
	{
		[Token(Token = "0x200072B")]
		public enum HandMovement
		{
			[Token(Token = "0x40027B2")]
			Instant,
			[Token(Token = "0x40027B3")]
			Lerp,
			[Token(Token = "0x40027B4")]
			None
		}

		[Token(Token = "0x4001C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8265A4", Offset = "0x8265A4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8265A4", Offset = "0x8265A4")]
		public HandMovement MoveInStyle;

		[Token(Token = "0x4001C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x826604", Offset = "0x826604")]
		public HandMovement MoveOutStyle;

		[Token(Token = "0x4001C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82663C", Offset = "0x82663C")]
		public float HandSpeed;

		[Token(Token = "0x4001C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x826674", Offset = "0x826674")]
		public bool LiveUpdateNearestGrabPoint;

		[Token(Token = "0x4001C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8266AC", Offset = "0x8266AC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8266AC", Offset = "0x8266AC")]
		public Grabbable GrabObject;

		[Token(Token = "0x4001C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82670C", Offset = "0x82670C")]
		public Grabbable OtherGrabbableMustBeHeld;

		[Token(Token = "0x4001C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x826744", Offset = "0x826744")]
		public List<GrabPoint> GrabPoints;

		[Token(Token = "0x4001C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Grabber currentGrabber;

		[Token(Token = "0x4001C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Grabbable dummyGrabbable;

		[Token(Token = "0x4001C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GrabPoint closestPoint;

		[Token(Token = "0x4001C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Grabber grabberInTrigger;

		[Token(Token = "0x6002EA7")]
		[Address(RVA = "0xA89740", Offset = "0xA89740", VA = "0xA89740")]
		private void Start()
		{
		}

		[Token(Token = "0x6002EA8")]
		[Address(RVA = "0xA89A00", Offset = "0xA89A00", VA = "0xA89A00")]
		private void Update()
		{
		}

		[Token(Token = "0x6002EA9")]
		[Address(RVA = "0xA89EEC", Offset = "0xA89EEC", VA = "0xA89EEC", Slot = "4")]
		public virtual void UpdateGrabPoint(GrabPoint newPoint)
		{
		}

		[Token(Token = "0x6002EAA")]
		[Address(RVA = "0xA8A078", Offset = "0xA8A078", VA = "0xA8A078")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6002EAB")]
		[Address(RVA = "0xA8A2F8", Offset = "0xA8A2F8", VA = "0xA8A2F8")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6002EAC")]
		[Address(RVA = "0xA89E9C", Offset = "0xA89E9C", VA = "0xA89E9C")]
		private void setGrabber(Grabber theGrabber)
		{
		}

		[Token(Token = "0x6002EAD")]
		[Address(RVA = "0xA8A448", Offset = "0xA8A448", VA = "0xA8A448", Slot = "5")]
		public virtual void ReleaseGrabber()
		{
		}

		[Token(Token = "0x6002EAE")]
		[Address(RVA = "0xA8A514", Offset = "0xA8A514", VA = "0xA8A514")]
		public GrabPointTrigger()
		{
		}
	}
	[Token(Token = "0x200053E")]
	public class GrabbableBezierLine : GrabbableEvents
	{
		[Token(Token = "0x4001C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool HighlightOnGrabbable;

		[Token(Token = "0x4001C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool HighlightOnRemoteGrabbable;

		[Token(Token = "0x4001C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public LineRenderer LineToDraw;

		[Token(Token = "0x4001C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int SegmentCount;

		[Token(Token = "0x4001C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float LerpAmount;

		[Token(Token = "0x4001C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float HeightAdjustment;

		[Token(Token = "0x4001C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Grabber lineToGrabber;

		[Token(Token = "0x4001C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Grabber lineRemoteGrabbing;

		[Token(Token = "0x6002EAF")]
		[Address(RVA = "0xD8AEA4", Offset = "0xD8AEA4", VA = "0xD8AEA4")]
		private void Start()
		{
		}

		[Token(Token = "0x6002EB0")]
		[Address(RVA = "0xD8AFD8", Offset = "0xD8AFD8", VA = "0xD8AFD8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6002EB1")]
		[Address(RVA = "0xD8B510", Offset = "0xD8B510", VA = "0xD8B510", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6002EB2")]
		[Address(RVA = "0xD8B538", Offset = "0xD8B538", VA = "0xD8B538", Slot = "8")]
		public override void OnBecomesClosestGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6002EB3")]
		[Address(RVA = "0xD8B600", Offset = "0xD8B600", VA = "0xD8B600", Slot = "10")]
		public override void OnNoLongerClosestGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6002EB4")]
		[Address(RVA = "0xD8B614", Offset = "0xD8B614", VA = "0xD8B614", Slot = "12")]
		public override void OnBecomesClosestRemoteGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6002EB5")]
		[Address(RVA = "0xD8B628", Offset = "0xD8B628", VA = "0xD8B628", Slot = "14")]
		public override void OnNoLongerClosestRemoteGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6002EB6")]
		[Address(RVA = "0xD8B548", Offset = "0xD8B548", VA = "0xD8B548")]
		public void HighlightItem(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6002EB7")]
		[Address(RVA = "0xD8AF48", Offset = "0xD8AF48", VA = "0xD8AF48")]
		public void UnhighlightItem()
		{
		}

		[Token(Token = "0x6002EB8")]
		[Address(RVA = "0xD8B324", Offset = "0xD8B324", VA = "0xD8B324")]
		public void DrawBezierCurve(Vector3 point0, Vector3 point1, Vector3 point2, LineRenderer lineRenderer)
		{
		}

		[Token(Token = "0x6002EB9")]
		[Address(RVA = "0xD8B63C", Offset = "0xD8B63C", VA = "0xD8B63C")]
		public GrabbableBezierLine()
		{
		}
	}
	[Token(Token = "0x200053F")]
	public class GrabbableHaptics : GrabbableEvents
	{
		[Token(Token = "0x4001C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool HapticsOnValidPickup;

		[Token(Token = "0x4001C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool HapticsOnValidRemotePickup;

		[Token(Token = "0x4001C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool HapticsOnCollision;

		[Token(Token = "0x4001C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		public bool HapticsOnGrab;

		[Token(Token = "0x4001C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float VibrateFrequency;

		[Token(Token = "0x4001C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float VibrateAmplitude;

		[Token(Token = "0x4001C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float VibrateDuration;

		[Token(Token = "0x4001C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Grabber currentGrabber;

		[Token(Token = "0x6002EBA")]
		[Address(RVA = "0xD8B934", Offset = "0xD8B934", VA = "0xD8B934", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6002EBB")]
		[Address(RVA = "0xD8BA04", Offset = "0xD8BA04", VA = "0xD8BA04", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x6002EBC")]
		[Address(RVA = "0xD8BA0C", Offset = "0xD8BA0C", VA = "0xD8BA0C", Slot = "7")]
		public override void OnBecomesClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6002EBD")]
		[Address(RVA = "0xD8BA1C", Offset = "0xD8BA1C", VA = "0xD8BA1C", Slot = "11")]
		public override void OnBecomesClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6002EBE")]
		[Address(RVA = "0xD8B95C", Offset = "0xD8B95C", VA = "0xD8B95C")]
		private void doHaptics(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6002EBF")]
		[Address(RVA = "0xD8BC44", Offset = "0xD8BC44", VA = "0xD8BC44")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6002EC0")]
		[Address(RVA = "0xD8BD74", Offset = "0xD8BD74", VA = "0xD8BD74")]
		public GrabbableHaptics()
		{
		}
	}
	[Token(Token = "0x2000540")]
	public class GrabbableHighlight : GrabbableEvents
	{
		[Token(Token = "0x4001C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool HighlightOnGrabbable;

		[Token(Token = "0x4001C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool HighlightOnRemoteGrabbable;

		[Token(Token = "0x6002EC1")]
		[Address(RVA = "0xD8BD9C", Offset = "0xD8BD9C", VA = "0xD8BD9C", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6002EC2")]
		[Address(RVA = "0xD8BDA4", Offset = "0xD8BDA4", VA = "0xD8BDA4", Slot = "7")]
		public override void OnBecomesClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6002EC3")]
		[Address(RVA = "0xD8BDAC", Offset = "0xD8BDAC", VA = "0xD8BDAC", Slot = "9")]
		public override void OnNoLongerClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6002EC4")]
		[Address(RVA = "0xD8BDB0", Offset = "0xD8BDB0", VA = "0xD8BDB0", Slot = "11")]
		public override void OnBecomesClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6002EC5")]
		[Address(RVA = "0xD8BDB4", Offset = "0xD8BDB4", VA = "0xD8BDB4", Slot = "13")]
		public override void OnNoLongerClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6002EC6")]
		[Address(RVA = "0xD8BDA8", Offset = "0xD8BDA8", VA = "0xD8BDA8")]
		public void HighlightItem()
		{
		}

		[Token(Token = "0x6002EC7")]
		[Address(RVA = "0xD8BDA0", Offset = "0xD8BDA0", VA = "0xD8BDA0")]
		public void UnhighlightItem()
		{
		}

		[Token(Token = "0x6002EC8")]
		[Address(RVA = "0xD8BDB8", Offset = "0xD8BDB8", VA = "0xD8BDB8")]
		public GrabbableHighlight()
		{
		}
	}
	[Token(Token = "0x2000541")]
	public class GrabbableHighlightMaterial : GrabbableEvents
	{
		[Token(Token = "0x4001C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool HighlightOnGrabbable;

		[Token(Token = "0x4001C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool HighlightOnRemoteGrabbable;

		[Token(Token = "0x4001C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82677C", Offset = "0x82677C")]
		public List<Material> StandardMaterials;

		[Token(Token = "0x4001C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8267B4", Offset = "0x8267B4")]
		public List<Material> HighlightMaterials;

		[Token(Token = "0x4001C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Renderer Renderer;

		[Token(Token = "0x6002EC9")]
		[Address(RVA = "0xD8BDC8", Offset = "0xD8BDC8", VA = "0xD8BDC8")]
		private void Start()
		{
		}

		[Token(Token = "0x6002ECA")]
		[Address(RVA = "0xD8BF44", Offset = "0xD8BF44", VA = "0xD8BF44", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6002ECB")]
		[Address(RVA = "0xD8BFFC", Offset = "0xD8BFFC", VA = "0xD8BFFC", Slot = "7")]
		public override void OnBecomesClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6002ECC")]
		[Address(RVA = "0xD8C0C0", Offset = "0xD8C0C0", VA = "0xD8C0C0", Slot = "9")]
		public override void OnNoLongerClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6002ECD")]
		[Address(RVA = "0xD8C0D0", Offset = "0xD8C0D0", VA = "0xD8C0D0", Slot = "11")]
		public override void OnBecomesClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6002ECE")]
		[Address(RVA = "0xD8C0E0", Offset = "0xD8C0E0", VA = "0xD8C0E0", Slot = "13")]
		public override void OnNoLongerClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6002ECF")]
		[Address(RVA = "0xD8C00C", Offset = "0xD8C00C", VA = "0xD8C00C")]
		public void HighlightItem()
		{
		}

		[Token(Token = "0x6002ED0")]
		[Address(RVA = "0xD8BF48", Offset = "0xD8BF48", VA = "0xD8BF48")]
		public void UnhighlightItem()
		{
		}

		[Token(Token = "0x6002ED1")]
		[Address(RVA = "0xD8C0F0", Offset = "0xD8C0F0", VA = "0xD8C0F0")]
		public GrabbableHighlightMaterial()
		{
		}
	}
	[Token(Token = "0x2000542")]
	public class GrabbableRingHelper : GrabbableEvents
	{
		[Token(Token = "0x4001C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool RingOnValidPickup;

		[Token(Token = "0x4001C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool RingOnValidRemotePickup;

		[Token(Token = "0x4001C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float RingHelperScale;

		[Token(Token = "0x6002ED2")]
		[Address(RVA = "0xD8C100", Offset = "0xD8C100", VA = "0xD8C100")]
		private void Start()
		{
		}

		[Token(Token = "0x6002ED3")]
		[Address(RVA = "0xD8C38C", Offset = "0xD8C38C", VA = "0xD8C38C")]
		public GrabbableRingHelper()
		{
		}
	}
	[Token(Token = "0x2000543")]
	public class LineToTransform : MonoBehaviour
	{
		[Token(Token = "0x4001C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform ConnectTo;

		[Token(Token = "0x4001C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LineRenderer line;

		[Token(Token = "0x6002ED4")]
		[Address(RVA = "0xD9FCE4", Offset = "0xD9FCE4", VA = "0xD9FCE4")]
		private void Start()
		{
		}

		[Token(Token = "0x6002ED5")]
		[Address(RVA = "0xD9FCE8", Offset = "0xD9FCE8", VA = "0xD9FCE8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6002ED6")]
		[Address(RVA = "0xD9FCEC", Offset = "0xD9FCEC", VA = "0xD9FCEC")]
		public void UpdateLine()
		{
		}

		[Token(Token = "0x6002ED7")]
		[Address(RVA = "0xD9FE94", Offset = "0xD9FE94", VA = "0xD9FE94")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6002ED8")]
		[Address(RVA = "0xD9FE98", Offset = "0xD9FE98", VA = "0xD9FE98")]
		public LineToTransform()
		{
		}
	}
	[Token(Token = "0x2000544")]
	public class LookAtTransform : MonoBehaviour
	{
		[Token(Token = "0x4001C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform LookAt;

		[Token(Token = "0x4001C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool UseLerp;

		[Token(Token = "0x4001C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float Speed;

		[Token(Token = "0x4001C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool UseUpdate;

		[Token(Token = "0x4001C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool UseLateUpdate;

		[Token(Token = "0x6002ED9")]
		[Address(RVA = "0xB54F04", Offset = "0xB54F04", VA = "0xB54F04")]
		private void Update()
		{
		}

		[Token(Token = "0x6002EDA")]
		[Address(RVA = "0xB5519C", Offset = "0xB5519C", VA = "0xB5519C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6002EDB")]
		[Address(RVA = "0xB54F14", Offset = "0xB54F14", VA = "0xB54F14")]
		private void lookAt()
		{
		}

		[Token(Token = "0x6002EDC")]
		[Address(RVA = "0xB551AC", Offset = "0xB551AC", VA = "0xB551AC")]
		public LookAtTransform()
		{
		}
	}
	[Token(Token = "0x2000545")]
	public class PlaySoundOnGrab : GrabbableEvents
	{
		[Token(Token = "0x4001C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioClip SoundToPlay;

		[Token(Token = "0x6002EDD")]
		[Address(RVA = "0xB579D4", Offset = "0xB579D4", VA = "0xB579D4", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6002EDE")]
		[Address(RVA = "0xB57AA4", Offset = "0xB57AA4", VA = "0xB57AA4")]
		public PlaySoundOnGrab()
		{
		}
	}
	[Token(Token = "0x2000546")]
	public class PunctureCollider : MonoBehaviour
	{
		[Token(Token = "0x4001C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8267EC", Offset = "0x8267EC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8267EC", Offset = "0x8267EC")]
		public float FRequiredPenetrationForce;

		[Token(Token = "0x4001C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82684C", Offset = "0x82684C")]
		public float MinPenetration;

		[Token(Token = "0x4001C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x826884", Offset = "0x826884")]
		public float MaxPenetration;

		[Token(Token = "0x4001C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8268BC", Offset = "0x8268BC")]
		public float BreakDistance;

		[Token(Token = "0x4001C9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8268F4", Offset = "0x8268F4")]
		public List<Collider> PunctureColliders;

		[Token(Token = "0x4001C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82692C", Offset = "0x82692C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82692C", Offset = "0x82692C")]
		public bool HasPunctured;

		[Token(Token = "0x4001C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82698C", Offset = "0x82698C")]
		public GameObject PuncturedObject;

		[Token(Token = "0x4001CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8269C4", Offset = "0x8269C4")]
		public float PunctureValue;

		[Token(Token = "0x4001CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float previousPunctureValue;

		[Token(Token = "0x4001CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Collider col;

		[Token(Token = "0x4001CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Collider hitCollilder;

		[Token(Token = "0x4001CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Collider[] ignoreColliders;

		[Token(Token = "0x4001CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody rigid;

		[Token(Token = "0x4001CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject jointHelper;

		[Token(Token = "0x4001CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody jointHelperRigid;

		[Token(Token = "0x4001CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private ConfigurableJoint jointHelperJoint;

		[Token(Token = "0x4001CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Grabbable thisGrabbable;

		[Token(Token = "0x4001CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private FixedJoint fj;

		[Token(Token = "0x4001CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float yPuncture;

		[Token(Token = "0x4001CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float yPunctureMin;

		[Token(Token = "0x4001CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float yPunctureMax;

		[Token(Token = "0x4001CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float TargetDistance;

		[Token(Token = "0x6002EDF")]
		[Address(RVA = "0xB5E1BC", Offset = "0xB5E1BC", VA = "0xB5E1BC")]
		private void Start()
		{
		}

		[Token(Token = "0x6002EE0")]
		[Address(RVA = "0xB5E258", Offset = "0xB5E258", VA = "0xB5E258")]
		public void FixedUpdate()
		{
		}

		[Token(Token = "0x6002EE1")]
		[Address(RVA = "0xB5E3C0", Offset = "0xB5E3C0", VA = "0xB5E3C0", Slot = "4")]
		public virtual void UpdatePunctureValue()
		{
		}

		[Token(Token = "0x6002EE2")]
		[Address(RVA = "0xB5E5D4", Offset = "0xB5E5D4", VA = "0xB5E5D4", Slot = "5")]
		public virtual void MovePunctureUp()
		{
		}

		[Token(Token = "0x6002EE3")]
		[Address(RVA = "0xB5E6B0", Offset = "0xB5E6B0", VA = "0xB5E6B0", Slot = "6")]
		public virtual void MovePunctureDown()
		{
		}

		[Token(Token = "0x6002EE4")]
		[Address(RVA = "0xB5E78C", Offset = "0xB5E78C", VA = "0xB5E78C", Slot = "7")]
		public virtual void CheckBreakDistance()
		{
		}

		[Token(Token = "0x6002EE5")]
		[Address(RVA = "0xB5EA74", Offset = "0xB5EA74", VA = "0xB5EA74", Slot = "8")]
		public virtual void CheckPunctureRelease()
		{
		}

		[Token(Token = "0x6002EE6")]
		[Address(RVA = "0xB5EB40", Offset = "0xB5EB40", VA = "0xB5EB40", Slot = "9")]
		public virtual void AdjustJointMass()
		{
		}

		[Token(Token = "0x6002EE7")]
		[Address(RVA = "0xB5EC68", Offset = "0xB5EC68", VA = "0xB5EC68", Slot = "10")]
		public virtual void ApplyResistanceForce()
		{
		}

		[Token(Token = "0x6002EE8")]
		[Address(RVA = "0xB5EDD4", Offset = "0xB5EDD4", VA = "0xB5EDD4", Slot = "11")]
		public virtual void DoPuncture(Collider colliderHit, Vector3 connectPosition)
		{
		}

		[Token(Token = "0x6002EE9")]
		[Address(RVA = "0xB5F140", Offset = "0xB5F140", VA = "0xB5F140")]
		public void SetPenetration(float penetrationAmount)
		{
		}

		[Token(Token = "0x6002EEA")]
		[Address(RVA = "0xB5E874", Offset = "0xB5E874", VA = "0xB5E874")]
		public void ReleasePuncture()
		{
		}

		[Token(Token = "0x6002EEB")]
		[Address(RVA = "0xB5F29C", Offset = "0xB5F29C", VA = "0xB5F29C", Slot = "12")]
		public virtual bool CanPunctureObject(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x6002EEC")]
		[Address(RVA = "0xB5F364", Offset = "0xB5F364", VA = "0xB5F364")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6002EED")]
		[Address(RVA = "0xB5F56C", Offset = "0xB5F56C", VA = "0xB5F56C")]
		public PunctureCollider()
		{
		}
	}
	[Token(Token = "0x2000547")]
	public class ReturnToSnapZone : MonoBehaviour
	{
		[Token(Token = "0x4001CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8269FC", Offset = "0x8269FC")]
		public SnapZone ReturnTo;

		[Token(Token = "0x4001CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x826A34", Offset = "0x826A34")]
		public float LerpSpeed;

		[Token(Token = "0x4001CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x826A6C", Offset = "0x826A6C")]
		public float ReturnDelay;

		[Token(Token = "0x4001CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float currentDelay;

		[Token(Token = "0x4001CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Grabbable grab;

		[Token(Token = "0x4001CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody rigid;

		[Token(Token = "0x4001CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool useGravityInitial;

		[Token(Token = "0x4001CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x826AA4", Offset = "0x826AA4")]
		public float SnapDistance;

		[Token(Token = "0x6002EEE")]
		[Address(RVA = "0xB62518", Offset = "0xB62518", VA = "0xB62518")]
		private void Start()
		{
		}

		[Token(Token = "0x6002EEF")]
		[Address(RVA = "0xB625A0", Offset = "0xB625A0", VA = "0xB625A0")]
		private void Update()
		{
		}

		[Token(Token = "0x6002EF0")]
		[Address(RVA = "0xB626F0", Offset = "0xB626F0", VA = "0xB626F0")]
		private void moveToSnapZone()
		{
		}

		[Token(Token = "0x6002EF1")]
		[Address(RVA = "0xB62E00", Offset = "0xB62E00", VA = "0xB62E00")]
		public ReturnToSnapZone()
		{
		}
	}
	[Token(Token = "0x2000548")]
	public class RotateTowards : MonoBehaviour
	{
		[Token(Token = "0x4001CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform TargetTransform;

		[Token(Token = "0x6002EF2")]
		[Address(RVA = "0xB638A4", Offset = "0xB638A4", VA = "0xB638A4")]
		private void Update()
		{
		}

		[Token(Token = "0x6002EF3")]
		[Address(RVA = "0xB63A4C", Offset = "0xB63A4C", VA = "0xB63A4C")]
		public RotateTowards()
		{
		}
	}
	[Token(Token = "0x2000549")]
	public class RotateWithHMD : MonoBehaviour
	{
		[Token(Token = "0x4001CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x826ADC", Offset = "0x826ADC")]
		public CharacterController Character;

		[Token(Token = "0x4001CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 Offset;

		[Token(Token = "0x4001CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float RotateSpeed;

		[Token(Token = "0x4001CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float MovementSmoothing;

		[Token(Token = "0x4001CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 velocity;

		[Token(Token = "0x4001CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x826B14", Offset = "0x826B14")]
		public bool ParentToCharacter;

		[Token(Token = "0x4001CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform originalParent;

		[Token(Token = "0x4001CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform followTransform;

		[Token(Token = "0x4001CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform camTransform;

		[Token(Token = "0x6002EF4")]
		[Address(RVA = "0xB63A54", Offset = "0xB63A54", VA = "0xB63A54")]
		private void Start()
		{
		}

		[Token(Token = "0x6002EF5")]
		[Address(RVA = "0xB63C0C", Offset = "0xB63C0C", VA = "0xB63C0C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6002EF6")]
		[Address(RVA = "0xB63C10", Offset = "0xB63C10", VA = "0xB63C10")]
		private void UpdatePosition()
		{
		}

		[Token(Token = "0x6002EF7")]
		[Address(RVA = "0xB6402C", Offset = "0xB6402C", VA = "0xB6402C")]
		public RotateWithHMD()
		{
		}
	}
	[Token(Token = "0x200054A")]
	public class ScaleBetweenPoints : MonoBehaviour
	{
		[Token(Token = "0x4001CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform Begin;

		[Token(Token = "0x4001CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform End;

		[Token(Token = "0x4001CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool DoUpdate;

		[Token(Token = "0x4001CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool DoLateUpdate;

		[Token(Token = "0x4001CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool LookAtTarget;

		[Token(Token = "0x6002EF8")]
		[Address(RVA = "0xB640E4", Offset = "0xB640E4", VA = "0xB640E4")]
		private void Update()
		{
		}

		[Token(Token = "0x6002EF9")]
		[Address(RVA = "0xB64338", Offset = "0xB64338", VA = "0xB64338")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6002EFA")]
		[Address(RVA = "0xB640F4", Offset = "0xB640F4", VA = "0xB640F4")]
		private void doScale()
		{
		}

		[Token(Token = "0x6002EFB")]
		[Address(RVA = "0xB64348", Offset = "0xB64348", VA = "0xB64348")]
		public ScaleBetweenPoints()
		{
		}
	}
	[Token(Token = "0x200054B")]
	public class ScreenFader : MonoBehaviour
	{
		[Token(Token = "0x200072C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x821020", Offset = "0x821020")]
		private sealed class <fadeOutWithDelay>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40027B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40027B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40027B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delaySeconds;

			[Token(Token = "0x40027B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ScreenFader <>4__this;

			[Token(Token = "0x17000724")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60036C2")]
				[Address(RVA = "0xB65374", Offset = "0xB65374", VA = "0xB65374", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000725")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60036C4")]
				[Address(RVA = "0xB653DC", Offset = "0xB653DC", VA = "0xB653DC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60036BF")]
			[Address(RVA = "0xB64C0C", Offset = "0xB64C0C", VA = "0xB64C0C")]
			[DebuggerHidden]
			public <fadeOutWithDelay>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x60036C0")]
			[Address(RVA = "0xB652B8", Offset = "0xB652B8", VA = "0xB652B8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60036C1")]
			[Address(RVA = "0xB652BC", Offset = "0xB652BC", VA = "0xB652BC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60036C3")]
			[Address(RVA = "0xB6537C", Offset = "0xB6537C", VA = "0xB6537C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200072D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x821030", Offset = "0x821030")]
		private sealed class <doFade>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40027B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40027BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40027BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float alphaFrom;

			[Token(Token = "0x40027BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ScreenFader <>4__this;

			[Token(Token = "0x40027BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float alphaTo;

			[Token(Token = "0x40027BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <alpha>5__2;

			[Token(Token = "0x17000726")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60036C8")]
				[Address(RVA = "0xB65248", Offset = "0xB65248", VA = "0xB65248", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000727")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60036CA")]
				[Address(RVA = "0xB652B0", Offset = "0xB652B0", VA = "0xB652B0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60036C5")]
			[Address(RVA = "0xB64EC0", Offset = "0xB64EC0", VA = "0xB64EC0")]
			[DebuggerHidden]
			public <doFade>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x60036C6")]
			[Address(RVA = "0xB6509C", Offset = "0xB6509C", VA = "0xB6509C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60036C7")]
			[Address(RVA = "0xB650A0", Offset = "0xB650A0", VA = "0xB650A0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60036C9")]
			[Address(RVA = "0xB65250", Offset = "0xB65250", VA = "0xB65250", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x826B4C", Offset = "0x826B4C")]
		public bool FadeOnSceneLoaded;

		[Token(Token = "0x4001CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x826B84", Offset = "0x826B84")]
		public Color FadeColor;

		[Token(Token = "0x4001CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x826BBC", Offset = "0x826BBC")]
		public float FadeInSpeed;

		[Token(Token = "0x4001CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float FadeOutSpeed;

		[Token(Token = "0x4001CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x826BF4", Offset = "0x826BF4")]
		public float SceneFadeInDelay;

		[Token(Token = "0x4001CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject fadeObject;

		[Token(Token = "0x4001CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RectTransform fadeObjectRect;

		[Token(Token = "0x4001CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Canvas fadeCanvas;

		[Token(Token = "0x4001CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CanvasGroup canvasGroup;

		[Token(Token = "0x4001CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Image fadeImage;

		[Token(Token = "0x4001CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private IEnumerator fadeRoutine;

		[Token(Token = "0x4001CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private string faderName;

		[Token(Token = "0x6002EFC")]
		[Address(RVA = "0xB64548", Offset = "0xB64548", VA = "0xB64548")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002EFD")]
		[Address(RVA = "0xB64554", Offset = "0xB64554", VA = "0xB64554", Slot = "4")]
		protected virtual void initialize()
		{
		}

		[Token(Token = "0x6002EFE")]
		[Address(RVA = "0xB6499C", Offset = "0xB6499C", VA = "0xB6499C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002EFF")]
		[Address(RVA = "0xB64A38", Offset = "0xB64A38", VA = "0xB64A38")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002F00")]
		[Address(RVA = "0xB64AD4", Offset = "0xB64AD4", VA = "0xB64AD4")]
		private void OnSceneLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x6002F01")]
		[Address(RVA = "0xB64B8C", Offset = "0xB64B8C", VA = "0xB64B8C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x833D98", Offset = "0x833D98")]
		private IEnumerator fadeOutWithDelay(float delaySeconds)
		{
			return null;
		}

		[Token(Token = "0x6002F02")]
		[Address(RVA = "0xB64C38", Offset = "0xB64C38", VA = "0xB64C38", Slot = "5")]
		public virtual void DoFadeIn()
		{
		}

		[Token(Token = "0x6002F03")]
		[Address(RVA = "0xB64D88", Offset = "0xB64D88", VA = "0xB64D88", Slot = "6")]
		public virtual void DoFadeOut()
		{
		}

		[Token(Token = "0x6002F04")]
		[Address(RVA = "0xB64DE8", Offset = "0xB64DE8", VA = "0xB64DE8", Slot = "7")]
		public virtual void SetFadeLevel(float fadeLevel)
		{
		}

		[Token(Token = "0x6002F05")]
		[Address(RVA = "0xB64D00", Offset = "0xB64D00", VA = "0xB64D00")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x833DFC", Offset = "0x833DFC")]
		private IEnumerator doFade(float alphaFrom, float alphaTo)
		{
			return null;
		}

		[Token(Token = "0x6002F06")]
		[Address(RVA = "0xB64EEC", Offset = "0xB64EEC", VA = "0xB64EEC", Slot = "8")]
		protected virtual void updateImageAlpha(float alphaValue)
		{
		}

		[Token(Token = "0x6002F07")]
		[Address(RVA = "0xB6501C", Offset = "0xB6501C", VA = "0xB6501C")]
		public ScreenFader()
		{
		}
	}
	[Token(Token = "0x200054C")]
	public class SnapZoneRingHelper : MonoBehaviour
	{
		[Token(Token = "0x4001CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SnapZone Snap;

		[Token(Token = "0x4001CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color RestingColor;

		[Token(Token = "0x4001CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color ValidSnapColor;

		[Token(Token = "0x4001CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float RestingScale;

		[Token(Token = "0x4001CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float ValidSnapScale;

		[Token(Token = "0x4001CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CanvasScaler ringCanvas;

		[Token(Token = "0x4001CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Text ringText;

		[Token(Token = "0x4001CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GrabbablesInTrigger nearbyGrabbables;

		[Token(Token = "0x4001CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool validSnap;

		[Token(Token = "0x4001CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float ScaleSpeed;

		[Token(Token = "0x6002F08")]
		[Address(RVA = "0xB68258", Offset = "0xB68258", VA = "0xB68258")]
		private void Start()
		{
		}

		[Token(Token = "0x6002F09")]
		[Address(RVA = "0xB682EC", Offset = "0xB682EC", VA = "0xB682EC")]
		private void Update()
		{
		}

		[Token(Token = "0x6002F0A")]
		[Address(RVA = "0xB68408", Offset = "0xB68408", VA = "0xB68408")]
		private bool checkIsValidSnap()
		{
			return default(bool);
		}

		[Token(Token = "0x6002F0B")]
		[Address(RVA = "0xB68508", Offset = "0xB68508", VA = "0xB68508")]
		public SnapZoneRingHelper()
		{
		}
	}
	[Token(Token = "0x200054D")]
	public class Tooltip : MonoBehaviour
	{
		[Token(Token = "0x4001CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 TipOffset;

		[Token(Token = "0x4001CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool UseWorldYAxis;

		[Token(Token = "0x4001CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float MaxViewDistance;

		[Token(Token = "0x4001CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform childTransform;

		[Token(Token = "0x4001CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform DrawLineTo;

		[Token(Token = "0x4001CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private LineToTransform lineTo;

		[Token(Token = "0x4001CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform lookAt;

		[Token(Token = "0x6002F0C")]
		[Address(RVA = "0xB6A14C", Offset = "0xB6A14C", VA = "0xB6A14C")]
		private void Start()
		{
		}

		[Token(Token = "0x6002F0D")]
		[Address(RVA = "0xB6A258", Offset = "0xB6A258", VA = "0xB6A258")]
		private void Update()
		{
		}

		[Token(Token = "0x6002F0E")]
		[Address(RVA = "0xB6A5FC", Offset = "0xB6A5FC", VA = "0xB6A5FC")]
		public Tooltip()
		{
		}
	}
	[Token(Token = "0x200054E")]
	public class VelocityTracker : MonoBehaviour
	{
		[Token(Token = "0x200072E")]
		public enum VelocityTrackingType
		{
			[Token(Token = "0x40027C0")]
			Device,
			[Token(Token = "0x40027C1")]
			PerFrame
		}

		[Token(Token = "0x4001CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x826C2C", Offset = "0x826C2C")]
		public VelocityTrackingType trackingType;

		[Token(Token = "0x4001CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x826C64", Offset = "0x826C64")]
		public ControllerHand controllerHand;

		[Token(Token = "0x4001CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x826C9C", Offset = "0x826C9C")]
		public float AverageVelocityCount;

		[Token(Token = "0x4001CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 _velocity;

		[Token(Token = "0x4001CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 _angularVelocity;

		[Token(Token = "0x4001CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 _lastPosition;

		[Token(Token = "0x4001CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Quaternion _lastRotation;

		[Token(Token = "0x4001CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<Vector3> previousVelocities;

		[Token(Token = "0x4001CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<Vector3> previousAngularVelocities;

		[Token(Token = "0x4001CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float angle;

		[Token(Token = "0x4001CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 axis;

		[Token(Token = "0x4001CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject playSpace;

		[Token(Token = "0x6002F0F")]
		[Address(RVA = "0xBA99DC", Offset = "0xBA99DC", VA = "0xBA99DC")]
		private void Start()
		{
		}

		[Token(Token = "0x6002F10")]
		[Address(RVA = "0xBA9A34", Offset = "0xBA9A34", VA = "0xBA9A34")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6002F11")]
		[Address(RVA = "0xBA9AA0", Offset = "0xBA9AA0", VA = "0xBA9AA0", Slot = "4")]
		public virtual void UpdateVelocities()
		{
		}

		[Token(Token = "0x6002F12")]
		[Address(RVA = "0xBA9AD4", Offset = "0xBA9AD4", VA = "0xBA9AD4", Slot = "5")]
		public virtual void UpdateVelocity()
		{
		}

		[Token(Token = "0x6002F13")]
		[Address(RVA = "0xBA9C40", Offset = "0xBA9C40", VA = "0xBA9C40", Slot = "6")]
		public virtual void UpdateAngularVelocity()
		{
		}

		[Token(Token = "0x6002F14")]
		[Address(RVA = "0xBA9E40", Offset = "0xBA9E40", VA = "0xBA9E40", Slot = "7")]
		public virtual Vector3 GetVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002F15")]
		[Address(RVA = "0xBAA00C", Offset = "0xBAA00C", VA = "0xBAA00C", Slot = "8")]
		public virtual Vector3 GetAveragedVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002F16")]
		[Address(RVA = "0xBAA01C", Offset = "0xBAA01C", VA = "0xBAA01C", Slot = "9")]
		public virtual Vector3 GetAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002F17")]
		[Address(RVA = "0xBAA028", Offset = "0xBAA028", VA = "0xBAA028", Slot = "10")]
		public virtual Vector3 GetAveragedAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002F18")]
		[Address(RVA = "0xBAA038", Offset = "0xBAA038", VA = "0xBAA038", Slot = "11")]
		public virtual Vector3 GetAveragedVector(List<Vector3> vectors)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002F19")]
		[Address(RVA = "0xBAA180", Offset = "0xBAA180", VA = "0xBAA180")]
		public VelocityTracker()
		{
		}
	}
	[Token(Token = "0x200054F")]
	public enum LocomotionType
	{
		[Token(Token = "0x4001CF0")]
		Teleport,
		[Token(Token = "0x4001CF1")]
		SmoothLocomotion,
		[Token(Token = "0x4001CF2")]
		None
	}
	[Token(Token = "0x2000550")]
	public class BNGPlayerController : MonoBehaviour
	{
		[Token(Token = "0x4001CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x826CD4", Offset = "0x826CD4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x826CD4", Offset = "0x826CD4")]
		public bool MoveCharacterWithCamera;

		[Token(Token = "0x4001CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x826D34", Offset = "0x826D34")]
		public bool RotateCharacterWithCamera;

		[Token(Token = "0x4001CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x826D6C", Offset = "0x826D6C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x826D6C", Offset = "0x826D6C")]
		public Transform TrackingSpace;

		[Token(Token = "0x4001CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x826DCC", Offset = "0x826DCC")]
		public Transform CameraRig;

		[Token(Token = "0x4001CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x826E04", Offset = "0x826E04")]
		public Transform CenterEyeAnchor;

		[Token(Token = "0x4001CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x826E3C", Offset = "0x826E3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x826E3C", Offset = "0x826E3C")]
		public LayerMask GroundedLayers;

		[Token(Token = "0x4001CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x826E9C", Offset = "0x826E9C")]
		public float DistanceFromGround;

		[Token(Token = "0x4001CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x826ED4", Offset = "0x826ED4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x826ED4", Offset = "0x826ED4")]
		public float MinimumCapsuleHeight;

		[Token(Token = "0x4001CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x826F34", Offset = "0x826F34")]
		public float MaximumCapsuleHeight;

		[Token(Token = "0x4001CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public float LastTeleportTime;

		[Token(Token = "0x4001CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x826F7C", Offset = "0x826F7C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x826F7C", Offset = "0x826F7C")]
		public float CharacterControllerYOffset;

		[Token(Token = "0x4001CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		public float CameraHeight;

		[Token(Token = "0x4001CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x826FEC", Offset = "0x826FEC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x826FEC", Offset = "0x826FEC")]
		public bool ElevateCameraIfNoHMDPresent;

		[Token(Token = "0x4001D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82704C", Offset = "0x82704C")]
		public float ElevateCameraHeight;

		[Token(Token = "0x4001D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x827084", Offset = "0x827084")]
		public float MinElevation;

		[Token(Token = "0x4001D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float MaxElevation;

		[Token(Token = "0x4001D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[HideInInspector]
		public float LastPlayerMoveTime;

		[Token(Token = "0x4001D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private CharacterController characterController;

		[Token(Token = "0x4001D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x4001D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PlayerClimbing playerClimbing;

		[Token(Token = "0x4001D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public RaycastHit groundHit;

		[Token(Token = "0x4001D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Transform mainCamera;

		[Token(Token = "0x4001D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 _initialPosition;

		[Token(Token = "0x6002F1A")]
		[Address(RVA = "0xA7B030", Offset = "0xA7B030", VA = "0xA7B030")]
		private void Start()
		{
		}

		[Token(Token = "0x6002F1B")]
		[Address(RVA = "0xA7B140", Offset = "0xA7B140", VA = "0xA7B140")]
		private void Update()
		{
		}

		[Token(Token = "0x6002F1C")]
		[Address(RVA = "0xA7B2A8", Offset = "0xA7B2A8", VA = "0xA7B2A8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6002F1D")]
		[Address(RVA = "0xA7B2DC", Offset = "0xA7B2DC", VA = "0xA7B2DC", Slot = "4")]
		public virtual void CheckPlayerElevationRespawn()
		{
		}

		[Token(Token = "0x6002F1E")]
		[Address(RVA = "0xA7B420", Offset = "0xA7B420", VA = "0xA7B420", Slot = "5")]
		public virtual void UpdateDistanceFromGround()
		{
		}

		[Token(Token = "0x6002F1F")]
		[Address(RVA = "0xA7B824", Offset = "0xA7B824", VA = "0xA7B824", Slot = "6")]
		public virtual void RotateTrackingSpaceToCamera()
		{
		}

		[Token(Token = "0x6002F20")]
		[Address(RVA = "0xA7B990", Offset = "0xA7B990", VA = "0xA7B990", Slot = "7")]
		public virtual void UpdateCameraRigPosition()
		{
		}

		[Token(Token = "0x6002F21")]
		[Address(RVA = "0xA7BB80", Offset = "0xA7BB80", VA = "0xA7BB80", Slot = "8")]
		public virtual void UpdateCharacterHeight()
		{
		}

		[Token(Token = "0x6002F22")]
		[Address(RVA = "0xA7BD84", Offset = "0xA7BD84", VA = "0xA7BD84", Slot = "9")]
		public virtual void UpdateCameraHeight()
		{
		}

		[Token(Token = "0x6002F23")]
		[Address(RVA = "0xA7BE10", Offset = "0xA7BE10", VA = "0xA7BE10", Slot = "10")]
		public virtual void CheckCharacterCollisionMove()
		{
		}

		[Token(Token = "0x6002F24")]
		[Address(RVA = "0xA7C068", Offset = "0xA7C068", VA = "0xA7C068")]
		public bool IsGrounded()
		{
			return default(bool);
		}

		[Token(Token = "0x6002F25")]
		[Address(RVA = "0xA7C114", Offset = "0xA7C114", VA = "0xA7C114")]
		public BNGPlayerController()
		{
		}
	}
	[Token(Token = "0x2000551")]
	public class Button : MonoBehaviour
	{
		[Token(Token = "0x4001D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8270CC", Offset = "0x8270CC")]
		public float MinLocalY;

		[Token(Token = "0x4001D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x827104", Offset = "0x827104")]
		public float MaxLocalY;

		[Token(Token = "0x4001D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82713C", Offset = "0x82713C")]
		public float ClickTolerance;

		[Token(Token = "0x4001D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x827174", Offset = "0x827174")]
		public bool AllowPhysicsForces;

		[Token(Token = "0x4001D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Grabber> grabbers;

		[Token(Token = "0x4001D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<UITrigger> uiTriggers;

		[Token(Token = "0x4001D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SpringJoint joint;

		[Token(Token = "0x4001D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool clickingDown;

		[Token(Token = "0x4001D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AudioClip ButtonClick;

		[Token(Token = "0x4001D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AudioClip ButtonClickUp;

		[Token(Token = "0x4001D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent onButtonDown;

		[Token(Token = "0x4001D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityEvent onButtonUp;

		[Token(Token = "0x4001D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private AudioSource audioSource;

		[Token(Token = "0x4001D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody rigid;

		[Token(Token = "0x4001D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float ButtonSpeed;

		[Token(Token = "0x4001D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float SpringForce;

		[Token(Token = "0x4001D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 buttonDownPosition;

		[Token(Token = "0x4001D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 buttonUpPosition;

		[Token(Token = "0x6002F26")]
		[Address(RVA = "0xA80FBC", Offset = "0xA80FBC", VA = "0xA80FBC")]
		private void Start()
		{
		}

		[Token(Token = "0x6002F27")]
		[Address(RVA = "0xA810EC", Offset = "0xA810EC", VA = "0xA810EC")]
		private void Update()
		{
		}

		[Token(Token = "0x6002F28")]
		[Address(RVA = "0xA814A4", Offset = "0xA814A4", VA = "0xA814A4", Slot = "4")]
		public virtual Vector3 GetButtonUpPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002F29")]
		[Address(RVA = "0xA8152C", Offset = "0xA8152C", VA = "0xA8152C", Slot = "5")]
		public virtual Vector3 GetButtonDownPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002F2A")]
		[Address(RVA = "0xA815B4", Offset = "0xA815B4", VA = "0xA815B4", Slot = "6")]
		public virtual void OnButtonDown()
		{
		}

		[Token(Token = "0x6002F2B")]
		[Address(RVA = "0xA816A0", Offset = "0xA816A0", VA = "0xA816A0", Slot = "7")]
		public virtual void OnButtonUp()
		{
		}

		[Token(Token = "0x6002F2C")]
		[Address(RVA = "0xA8178C", Offset = "0xA8178C", VA = "0xA8178C")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6002F2D")]
		[Address(RVA = "0xA81968", Offset = "0xA81968", VA = "0xA81968")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6002F2E")]
		[Address(RVA = "0xA81AD8", Offset = "0xA81AD8", VA = "0xA81AD8")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6002F2F")]
		[Address(RVA = "0xA81CD4", Offset = "0xA81CD4", VA = "0xA81CD4")]
		public Button()
		{
		}
	}
	[Token(Token = "0x2000552")]
	public class ControllerModelSelector : MonoBehaviour
	{
		[Token(Token = "0x4001D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int disableIndex;

		[Token(Token = "0x4001D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool isQuitting;

		[Token(Token = "0x6002F30")]
		[Address(RVA = "0xA83E3C", Offset = "0xA83E3C", VA = "0xA83E3C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002F31")]
		[Address(RVA = "0xA83ED0", Offset = "0xA83ED0", VA = "0xA83ED0")]
		public void UpdateControllerModel()
		{
		}

		[Token(Token = "0x6002F32")]
		[Address(RVA = "0xA83FDC", Offset = "0xA83FDC", VA = "0xA83FDC")]
		public void EnableChildController(int childIndex)
		{
		}

		[Token(Token = "0x6002F33")]
		[Address(RVA = "0xA84070", Offset = "0xA84070", VA = "0xA84070")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002F34")]
		[Address(RVA = "0xA84118", Offset = "0xA84118", VA = "0xA84118")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6002F35")]
		[Address(RVA = "0xA84124", Offset = "0xA84124", VA = "0xA84124")]
		public ControllerModelSelector()
		{
		}
	}
	[Token(Token = "0x2000553")]
	public class GrabPoint : MonoBehaviour
	{
		[Token(Token = "0x4001D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8271AC", Offset = "0x8271AC")]
		public HandPoseType handPoseType;

		[Token(Token = "0x4001D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8271E4", Offset = "0x8271E4")]
		public HandPose SelectedHandPose;

		[Token(Token = "0x4001D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82721C", Offset = "0x82721C")]
		public HandPoseId HandPose;

		[Token(Token = "0x4001D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x827254", Offset = "0x827254")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x827254", Offset = "0x827254")]
		public bool LeftHandIsValid;

		[Token(Token = "0x4001D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8272B4", Offset = "0x8272B4")]
		public bool RightHandIsValid;

		[Token(Token = "0x4001D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8272EC", Offset = "0x8272EC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8272EC", Offset = "0x8272EC")]
		public Transform HandPosition;

		[Token(Token = "0x4001D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82734C", Offset = "0x82734C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82734C", Offset = "0x82734C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x82734C", Offset = "0x82734C")]
		public float MaxDegreeDifferenceAllowed;

		[Token(Token = "0x4001D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8273C8", Offset = "0x8273C8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8273C8", Offset = "0x8273C8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x8273C8", Offset = "0x8273C8")]
		public float IndexBlendMin;

		[Token(Token = "0x4001D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x827440", Offset = "0x827440")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x827440", Offset = "0x827440")]
		public float IndexBlendMax;

		[Token(Token = "0x4001D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x827494", Offset = "0x827494")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x827494", Offset = "0x827494")]
		public float ThumbBlendMin;

		[Token(Token = "0x4001D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8274E8", Offset = "0x8274E8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x8274E8", Offset = "0x8274E8")]
		public float ThumbBlendMax;

		[Token(Token = "0x4001D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 previewModelOffsetLeft;

		[Token(Token = "0x4001D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 previewModelOffsetRight;

		[Token(Token = "0x4001D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82753C", Offset = "0x82753C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82753C", Offset = "0x82753C")]
		public bool ShowAngleGizmo;

		[Token(Token = "0x4001D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		private bool offsetFound;

		[Token(Token = "0x6002F36")]
		[Address(RVA = "0xA88C94", Offset = "0xA88C94", VA = "0xA88C94")]
		public void UpdatePreviewTransforms()
		{
		}

		[Token(Token = "0x6002F37")]
		[Address(RVA = "0xA89030", Offset = "0xA89030", VA = "0xA89030")]
		public void UpdateHandPosePreview()
		{
		}

		[Token(Token = "0x6002F38")]
		[Address(RVA = "0xA891E4", Offset = "0xA891E4", VA = "0xA891E4")]
		public void UpdateAutoPoserPreview()
		{
		}

		[Token(Token = "0x6002F39")]
		[Address(RVA = "0xA894E8", Offset = "0xA894E8", VA = "0xA894E8")]
		public void UpdateChildAnimators()
		{
		}

		[Token(Token = "0x6002F3A")]
		[Address(RVA = "0xA8967C", Offset = "0xA8967C", VA = "0xA8967C")]
		public GrabPoint()
		{
		}
	}
	[Token(Token = "0x2000554")]
	public class Grabbable : MonoBehaviour
	{
		[Token(Token = "0x4001D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool BeingHeld;

		[Token(Token = "0x4001D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Grabber> validGrabbers;

		[Token(Token = "0x4001D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected List<Grabber> heldByGrabbers;

		[Token(Token = "0x4001D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected bool wasKinematic;

		[Token(Token = "0x4001D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		protected bool usedGravity;

		[Token(Token = "0x4001D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		protected CollisionDetectionMode initialCollisionMode;

		[Token(Token = "0x4001D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected RigidbodyInterpolation initialInterpolationMode;

		[Token(Token = "0x4001D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected bool remoteGrabbing;

		[Token(Token = "0x4001D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82759C", Offset = "0x82759C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82759C", Offset = "0x82759C")]
		public GrabButton GrabButton;

		[Token(Token = "0x4001D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8275FC", Offset = "0x8275FC")]
		public HoldType Grabtype;

		[Token(Token = "0x4001D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x827634", Offset = "0x827634")]
		public GrabPhysics GrabPhysics;

		[Token(Token = "0x4001D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82766C", Offset = "0x82766C")]
		public GrabType GrabMechanic;

		[Token(Token = "0x4001D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8276A4", Offset = "0x8276A4")]
		public float GrabSpeed;

		[Token(Token = "0x4001D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8276DC", Offset = "0x8276DC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8276DC", Offset = "0x8276DC")]
		public bool RemoteGrabbable;

		[Token(Token = "0x4001D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public RemoteGrabMovement RemoteGrabMechanic;

		[Token(Token = "0x4001D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82773C", Offset = "0x82773C")]
		public float RemoteGrabDistance;

		[Token(Token = "0x4001D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x827774", Offset = "0x827774")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x827774", Offset = "0x827774")]
		public float ThrowForceMultiplier;

		[Token(Token = "0x4001D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8277D4", Offset = "0x8277D4")]
		public float ThrowForceMultiplierAngular;

		[Token(Token = "0x4001D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82780C", Offset = "0x82780C")]
		public float BreakDistance;

		[Token(Token = "0x4001D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x827844", Offset = "0x827844")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x827844", Offset = "0x827844")]
		public bool HideHandGraphics;

		[Token(Token = "0x4001D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8278A4", Offset = "0x8278A4")]
		public bool ParentToHands;

		[Token(Token = "0x4001D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6E")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8278DC", Offset = "0x8278DC")]
		public bool ParentHandModel;

		[Token(Token = "0x4001D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6F")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x827914", Offset = "0x827914")]
		public bool SnapHandModel;

		[Token(Token = "0x4001D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82794C", Offset = "0x82794C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82794C", Offset = "0x82794C")]
		public bool CanBeDropped;

		[Token(Token = "0x4001D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8279AC", Offset = "0x8279AC")]
		public bool CanBeSnappedToSnapZone;

		[Token(Token = "0x4001D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8279E4", Offset = "0x8279E4")]
		public bool ForceDisableKinematicOnDrop;

		[Token(Token = "0x4001D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x73")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x827A1C", Offset = "0x827A1C")]
		public bool InstantMovement;

		[Token(Token = "0x4001D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x827A54", Offset = "0x827A54")]
		public bool MakeChildCollidersGrabbable;

		[Token(Token = "0x4001D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x827A8C", Offset = "0x827A8C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x827A8C", Offset = "0x827A8C")]
		public HandPoseType handPoseType;

		[Token(Token = "0x4001D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		protected HandPoseType initialHandPoseType;

		[Token(Token = "0x4001D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x827AEC", Offset = "0x827AEC")]
		public HandPose SelectedHandPose;

		[Token(Token = "0x4001D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected HandPose initialHandPose;

		[Token(Token = "0x4001D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x827B24", Offset = "0x827B24")]
		public HandPoseId CustomHandPose;

		[Token(Token = "0x4001D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected HandPoseId initialHandPoseId;

		[Token(Token = "0x4001D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x827B5C", Offset = "0x827B5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x827B5C", Offset = "0x827B5C")]
		public OtherGrabBehavior SecondaryGrabBehavior;

		[Token(Token = "0x4001D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x827BBC", Offset = "0x827BBC")]
		public TwoHandedPositionType TwoHandedPosition;

		[Token(Token = "0x4001D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x827BF4", Offset = "0x827BF4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x827BF4", Offset = "0x827BF4")]
		public float TwoHandedPostionLerpAmount;

		[Token(Token = "0x4001D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x827C48", Offset = "0x827C48")]
		public TwoHandedRotationType TwoHandedRotation;

		[Token(Token = "0x4001D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x827C80", Offset = "0x827C80")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x827C80", Offset = "0x827C80")]
		public float TwoHandedRotationLerpAmount;

		[Token(Token = "0x4001D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x827CD4", Offset = "0x827CD4")]
		public TwoHandedDropMechanic TwoHandedDropBehavior;

		[Token(Token = "0x4001D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x827D0C", Offset = "0x827D0C")]
		public TwoHandedLookDirection TwoHandedLookVector;

		[Token(Token = "0x4001D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x827D44", Offset = "0x827D44")]
		public float SecondHandLookSpeed;

		[Token(Token = "0x4001D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x827D7C", Offset = "0x827D7C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x827D7C", Offset = "0x827D7C")]
		public Grabbable SecondaryGrabbable;

		[Token(Token = "0x4001D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x827DDC", Offset = "0x827DDC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x827DDC", Offset = "0x827DDC")]
		public Grabbable OtherGrabbableMustBeGrabbed;

		[Token(Token = "0x4001D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x827E3C", Offset = "0x827E3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x827E3C", Offset = "0x827E3C")]
		public float CollisionSpring;

		[Token(Token = "0x4001D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x827E9C", Offset = "0x827E9C")]
		public float CollisionSlerp;

		[Token(Token = "0x4001D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x827ED4", Offset = "0x827ED4")]
		public ConfigurableJointMotion CollisionLinearMotionX;

		[Token(Token = "0x4001D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x827F0C", Offset = "0x827F0C")]
		public ConfigurableJointMotion CollisionLinearMotionY;

		[Token(Token = "0x4001D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x827F44", Offset = "0x827F44")]
		public ConfigurableJointMotion CollisionLinearMotionZ;

		[Token(Token = "0x4001D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x827F7C", Offset = "0x827F7C")]
		public ConfigurableJointMotion CollisionAngularMotionX;

		[Token(Token = "0x4001D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x827FB4", Offset = "0x827FB4")]
		public ConfigurableJointMotion CollisionAngularMotionY;

		[Token(Token = "0x4001D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x827FEC", Offset = "0x827FEC")]
		public ConfigurableJointMotion CollisionAngularMotionZ;

		[Token(Token = "0x4001D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x828024", Offset = "0x828024")]
		public bool ApplyCorrectiveForce;

		[Token(Token = "0x4001D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82805C", Offset = "0x82805C")]
		public float MoveVelocityForce;

		[Token(Token = "0x4001D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public float MoveAngularVelocityForce;

		[Token(Token = "0x4001D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[HideInInspector]
		public float LastGrabTime;

		[Token(Token = "0x4001D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[HideInInspector]
		public float LastDropTime;

		[Token(Token = "0x4001D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[HideInInspector]
		public bool AddControllerVelocityOnDrop;

		[Token(Token = "0x4001D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private float journeyLength;

		[Token(Token = "0x4001D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8280C4", Offset = "0x8280C4")]
		private float <OriginalScale>k__BackingField;

		[Token(Token = "0x4001D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8280D4", Offset = "0x8280D4")]
		[SerializeField]
		public List<Collider> collisions;

		[Token(Token = "0x4001D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x828120", Offset = "0x828120")]
		private float <lastCollisionSeconds>k__BackingField;

		[Token(Token = "0x4001D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x828130", Offset = "0x828130")]
		private float <lastNoCollisionSeconds>k__BackingField;

		[Token(Token = "0x4001D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x828140", Offset = "0x828140")]
		private float <requestSpringTime>k__BackingField;

		[Token(Token = "0x4001D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		protected Transform primaryGrabOffset;

		[Token(Token = "0x4001D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		protected Transform secondaryGrabOffset;

		[Token(Token = "0x4001D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[HideInInspector]
		public GrabPoint ActiveGrabPoint;

		[Token(Token = "0x4001D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[HideInInspector]
		public Vector3 SecondaryLookOffset;

		[Token(Token = "0x4001D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[HideInInspector]
		public Transform SecondaryLookAtTransform;

		[Token(Token = "0x4001D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[HideInInspector]
		public Transform LocalOffsetTransform;

		[Token(Token = "0x4001D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private Transform _grabTransform;

		[Token(Token = "0x4001D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private Transform _grabTransformSecondary;

		[Token(Token = "0x4001D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x828190", Offset = "0x828190")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x828190", Offset = "0x828190")]
		public List<Transform> GrabPoints;

		[Token(Token = "0x4001D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private bool _canBeMoved;

		[Token(Token = "0x4001D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		protected Transform originalParent;

		[Token(Token = "0x4001D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		protected InputBridge input;

		[Token(Token = "0x4001D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		protected ConfigurableJoint connectedJoint;

		[Token(Token = "0x4001D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		protected Vector3 previousPosition;

		[Token(Token = "0x4001D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		protected float lastItemTeleportTime;

		[Token(Token = "0x4001D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		protected bool recentlyTeleported;

		[Token(Token = "0x4001D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A1")]
		[HideInInspector]
		public bool UseCustomInspector;

		[Token(Token = "0x4001D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private BNGPlayerController _player;

		[Token(Token = "0x4001D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		protected Collider col;

		[Token(Token = "0x4001D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		protected Rigidbody rigid;

		[Token(Token = "0x4001D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		protected Grabber flyingTo;

		[Token(Token = "0x4001D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		protected List<GrabbableEvents> events;

		[Token(Token = "0x4001D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		protected bool didParentHands;

		[Token(Token = "0x4001D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D1")]
		private bool initiatedFlick;

		[Token(Token = "0x4001D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		private float flickStartVelocity;

		[Token(Token = "0x4001D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private float FlickSpeed;

		[Token(Token = "0x4001D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		public float lastFlickTime;

		[Token(Token = "0x4001D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public float FlickForce;

		[Token(Token = "0x4001D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		private float angle;

		[Token(Token = "0x4001D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private Vector3 axis;

		[Token(Token = "0x4001D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
		private Vector3 angularTarget;

		[Token(Token = "0x4001D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private Vector3 angularMovement;

		[Token(Token = "0x4001D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
		private bool subscribedToEvents;

		[Token(Token = "0x4001D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20D")]
		private bool grabbableIsLocked;

		[Token(Token = "0x4001D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private Transform _priorParent;

		[Token(Token = "0x4001D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private Vector3 _priorLocalOffsetPosition;

		[Token(Token = "0x4001D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
		private Quaternion _priorLocalOffsetRotation;

		[Token(Token = "0x4001D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		private Grabber _priorPrimaryGrabber;

		[Token(Token = "0x4001D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private bool lockPos;

		[Token(Token = "0x4001D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x241")]
		private bool lockRot;

		[Token(Token = "0x4001D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x244")]
		private int lockRequests;

		[Token(Token = "0x4001D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private bool quitting;

		[Token(Token = "0x17000672")]
		public bool BeingHeldWithTwoHands
		{
			[Token(Token = "0x6002F3B")]
			[Address(RVA = "0xA8A52C", Offset = "0xA8A52C", VA = "0xA8A52C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000673")]
		public List<Grabber> HeldByGrabbers
		{
			[Token(Token = "0x6002F3C")]
			[Address(RVA = "0xA8A5EC", Offset = "0xA8A5EC", VA = "0xA8A5EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000674")]
		public bool RemoteGrabbing
		{
			[Token(Token = "0x6002F3D")]
			[Address(RVA = "0xA8A5F4", Offset = "0xA8A5F4", VA = "0xA8A5F4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000675")]
		public float OriginalScale
		{
			[Token(Token = "0x6002F3E")]
			[Address(RVA = "0xA8A5FC", Offset = "0xA8A5FC", VA = "0xA8A5FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833E60", Offset = "0x833E60")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002F3F")]
			[Address(RVA = "0xA8A604", Offset = "0xA8A604", VA = "0xA8A604")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833E70", Offset = "0x833E70")]
			private set
			{
			}
		}

		[Token(Token = "0x17000676")]
		public float lastCollisionSeconds
		{
			[Token(Token = "0x6002F40")]
			[Address(RVA = "0xA8A60C", Offset = "0xA8A60C", VA = "0xA8A60C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833E80", Offset = "0x833E80")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002F41")]
			[Address(RVA = "0xA8A614", Offset = "0xA8A614", VA = "0xA8A614")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833E90", Offset = "0x833E90")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000677")]
		public float lastNoCollisionSeconds
		{
			[Token(Token = "0x6002F42")]
			[Address(RVA = "0xA8A61C", Offset = "0xA8A61C", VA = "0xA8A61C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833EA0", Offset = "0x833EA0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002F43")]
			[Address(RVA = "0xA8A624", Offset = "0xA8A624", VA = "0xA8A624")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833EB0", Offset = "0x833EB0")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000678")]
		public bool RecentlyCollided
		{
			[Token(Token = "0x6002F44")]
			[Address(RVA = "0xA8A62C", Offset = "0xA8A62C", VA = "0xA8A62C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000679")]
		public float requestSpringTime
		{
			[Token(Token = "0x6002F45")]
			[Address(RVA = "0xA8A6AC", Offset = "0xA8A6AC", VA = "0xA8A6AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833EC0", Offset = "0x833EC0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002F46")]
			[Address(RVA = "0xA8A6B4", Offset = "0xA8A6B4", VA = "0xA8A6B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833ED0", Offset = "0x833ED0")]
			protected set
			{
			}
		}

		[Token(Token = "0x1700067A")]
		private Vector3 grabPosition
		{
			[Token(Token = "0x6002F47")]
			[Address(RVA = "0xA8A6BC", Offset = "0xA8A6BC", VA = "0xA8A6BC")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700067B")]
		[HideInInspector]
		public Vector3 GrabPositionOffset
		{
			[Token(Token = "0x6002F48")]
			[Address(RVA = "0xA77F80", Offset = "0xA77F80", VA = "0xA77F80")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700067C")]
		[HideInInspector]
		public Vector3 GrabRotationOffset
		{
			[Token(Token = "0x6002F49")]
			[Address(RVA = "0xA8A754", Offset = "0xA8A754", VA = "0xA8A754")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700067D")]
		public Transform grabTransform
		{
			[Token(Token = "0x6002F4A")]
			[Address(RVA = "0xA8A814", Offset = "0xA8A814", VA = "0xA8A814")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700067E")]
		public Transform grabTransformSecondary
		{
			[Token(Token = "0x6002F4B")]
			[Address(RVA = "0xA8A940", Offset = "0xA8A940", VA = "0xA8A940")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700067F")]
		public bool CanBeMoved
		{
			[Token(Token = "0x6002F4C")]
			[Address(RVA = "0xA8AA80", Offset = "0xA8AA80", VA = "0xA8AA80")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000680")]
		protected BNGPlayerController player
		{
			[Token(Token = "0x6002F4D")]
			[Address(RVA = "0xA82C38", Offset = "0xA82C38", VA = "0xA82C38")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000681")]
		public Grabber FlyingToGrabber
		{
			[Token(Token = "0x6002F4E")]
			[Address(RVA = "0xA8AA88", Offset = "0xA8AA88", VA = "0xA8AA88")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000682")]
		public bool DidParentHands
		{
			[Token(Token = "0x6002F4F")]
			[Address(RVA = "0xA8AA90", Offset = "0xA8AA90", VA = "0xA8AA90")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6002F50")]
		[Address(RVA = "0xA8AA98", Offset = "0xA8AA98", VA = "0xA8AA98")]
		protected void Awake()
		{
		}

		[Token(Token = "0x6002F51")]
		[Address(RVA = "0xA8B02C", Offset = "0xA8B02C", VA = "0xA8B02C", Slot = "4")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x6002F52")]
		[Address(RVA = "0xA8C434", Offset = "0xA8C434", VA = "0xA8C434", Slot = "5")]
		public virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6002F53")]
		[Address(RVA = "0xA8C53C", Offset = "0xA8C53C", VA = "0xA8C53C", Slot = "6")]
		public virtual Vector3 GetGrabberWithGrabPointOffset(Grabber grabber, Transform grabPoint)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002F54")]
		[Address(RVA = "0xA8C724", Offset = "0xA8C724", VA = "0xA8C724", Slot = "7")]
		public virtual Quaternion GetGrabberWithOffsetWorldRotation(Grabber grabber)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6002F55")]
		[Address(RVA = "0xA8BD48", Offset = "0xA8BD48", VA = "0xA8BD48")]
		protected void positionHandGraphics(Grabber g)
		{
		}

		[Token(Token = "0x6002F56")]
		[Address(RVA = "0xA8C7E4", Offset = "0xA8C7E4", VA = "0xA8C7E4", Slot = "8")]
		public virtual bool IsGrabbable()
		{
			return default(bool);
		}

		[Token(Token = "0x6002F57")]
		[Address(RVA = "0xA8C8DC", Offset = "0xA8C8DC", VA = "0xA8C8DC", Slot = "9")]
		public virtual void UpdateRemoteGrab()
		{
		}

		[Token(Token = "0x6002F58")]
		[Address(RVA = "0xA8C920", Offset = "0xA8C920", VA = "0xA8C920", Slot = "10")]
		public virtual void CheckRemoteGrabLinear()
		{
		}

		[Token(Token = "0x6002F59")]
		[Address(RVA = "0xA8D1C0", Offset = "0xA8D1C0", VA = "0xA8D1C0", Slot = "11")]
		public virtual void CheckRemoteGrabVelocity()
		{
		}

		[Token(Token = "0x6002F5A")]
		[Address(RVA = "0xA8DCE4", Offset = "0xA8DCE4", VA = "0xA8DCE4", Slot = "12")]
		public virtual void InitiateFlick()
		{
		}

		[Token(Token = "0x6002F5B")]
		[Address(RVA = "0xA8DED8", Offset = "0xA8DED8", VA = "0xA8DED8")]
		public Vector3 GetVelocityToHitTargetByTime(Vector3 startPosition, Vector3 targetPosition, Vector3 gravityBase, float timeToTarget)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002F5C")]
		[Address(RVA = "0xA8E198", Offset = "0xA8E198", VA = "0xA8E198", Slot = "13")]
		public virtual void CheckRemoteGrabFlick()
		{
		}

		[Token(Token = "0x6002F5D")]
		[Address(RVA = "0xA8E294", Offset = "0xA8E294", VA = "0xA8E294", Slot = "14")]
		public virtual void UpdateFixedJoints()
		{
		}

		[Token(Token = "0x6002F5E")]
		[Address(RVA = "0xA8E5D8", Offset = "0xA8E5D8", VA = "0xA8E5D8", Slot = "15")]
		public virtual void UpdatePhysicsJoints()
		{
		}

		[Token(Token = "0x6002F5F")]
		[Address(RVA = "0xA8EA34", Offset = "0xA8EA34", VA = "0xA8EA34")]
		private void setPositionSpring(float spring, float damper)
		{
		}

		[Token(Token = "0x6002F60")]
		[Address(RVA = "0xA8EBD0", Offset = "0xA8EBD0", VA = "0xA8EBD0")]
		private void setSlerpDrive(float slerp, float damper)
		{
		}

		[Token(Token = "0x6002F61")]
		[Address(RVA = "0xA8ECB8", Offset = "0xA8ECB8", VA = "0xA8ECB8", Slot = "16")]
		public virtual Vector3 GetGrabberVector3(Grabber grabber, bool isSecondary)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002F62")]
		[Address(RVA = "0xA8ED10", Offset = "0xA8ED10", VA = "0xA8ED10", Slot = "17")]
		public virtual Quaternion GetGrabberQuaternion(Grabber grabber, bool isSecondary)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6002F63")]
		[Address(RVA = "0xA8E360", Offset = "0xA8E360", VA = "0xA8E360")]
		private void moveWithVelocity()
		{
		}

		[Token(Token = "0x6002F64")]
		[Address(RVA = "0xA8EF24", Offset = "0xA8EF24", VA = "0xA8EF24")]
		private void rotateWithVelocity()
		{
		}

		[Token(Token = "0x6002F65")]
		[Address(RVA = "0xA8ED54", Offset = "0xA8ED54", VA = "0xA8ED54")]
		public Vector3 GetGrabbersAveragedPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002F66")]
		[Address(RVA = "0xA8D60C", Offset = "0xA8D60C", VA = "0xA8D60C")]
		public Quaternion GetGrabbersAveragedRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6002F67")]
		[Address(RVA = "0xA8F314", Offset = "0xA8F314", VA = "0xA8F314", Slot = "18")]
		public virtual void UpdateKinematicPhysics()
		{
		}

		[Token(Token = "0x6002F68")]
		[Address(RVA = "0xA8FA54", Offset = "0xA8FA54", VA = "0xA8FA54", Slot = "19")]
		public virtual void UpdateVelocityPhysics()
		{
		}

		[Token(Token = "0x6002F69")]
		[Address(RVA = "0xA8BA90", Offset = "0xA8BA90", VA = "0xA8BA90")]
		private void checkParentHands(Grabber g)
		{
		}

		[Token(Token = "0x6002F6A")]
		[Address(RVA = "0xA8AF40", Offset = "0xA8AF40", VA = "0xA8AF40")]
		private bool canBeMoved()
		{
			return default(bool);
		}

		[Token(Token = "0x6002F6B")]
		[Address(RVA = "0xA8BE48", Offset = "0xA8BE48", VA = "0xA8BE48")]
		private void checkSecondaryLook()
		{
		}

		[Token(Token = "0x6002F6C")]
		[Address(RVA = "0xA8F834", Offset = "0xA8F834", VA = "0xA8F834")]
		private void rotateGrabber(bool lerp = false)
		{
		}

		[Token(Token = "0x6002F6D")]
		[Address(RVA = "0xA8FDB4", Offset = "0xA8FDB4", VA = "0xA8FDB4")]
		public Transform GetGrabPoint()
		{
			return null;
		}

		[Token(Token = "0x6002F6E")]
		[Address(RVA = "0xA82CF0", Offset = "0xA82CF0", VA = "0xA82CF0", Slot = "20")]
		public virtual void GrabItem(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x6002F6F")]
		[Address(RVA = "0xA8FE84", Offset = "0xA8FE84", VA = "0xA8FE84", Slot = "21")]
		protected virtual void setupConfigJointGrab(Grabber grabbedBy, GrabType grabType)
		{
		}

		[Token(Token = "0x6002F70")]
		[Address(RVA = "0xA90088", Offset = "0xA90088", VA = "0xA90088", Slot = "22")]
		protected virtual void setupFixedJointGrab(Grabber grabbedBy, GrabType grabType)
		{
		}

		[Token(Token = "0x6002F71")]
		[Address(RVA = "0xA901A0", Offset = "0xA901A0", VA = "0xA901A0", Slot = "23")]
		protected virtual void setupKinematicGrab(Grabber grabbedBy, GrabType grabType)
		{
		}

		[Token(Token = "0x6002F72")]
		[Address(RVA = "0xA902C8", Offset = "0xA902C8", VA = "0xA902C8", Slot = "24")]
		protected virtual void setupVelocityGrab(Grabber grabbedBy, GrabType grabType)
		{
		}

		[Token(Token = "0x6002F73")]
		[Address(RVA = "0xA9031C", Offset = "0xA9031C", VA = "0xA9031C", Slot = "25")]
		public virtual void GrabRemoteItem(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x6002F74")]
		[Address(RVA = "0xA90440", Offset = "0xA90440", VA = "0xA90440", Slot = "26")]
		public virtual void ResetGrabbing()
		{
		}

		[Token(Token = "0x6002F75")]
		[Address(RVA = "0xA904FC", Offset = "0xA904FC", VA = "0xA904FC", Slot = "27")]
		public virtual void DropItem(Grabber droppedBy, bool resetVelocity, bool resetParent)
		{
		}

		[Token(Token = "0x6002F76")]
		[Address(RVA = "0xA8FCBC", Offset = "0xA8FCBC", VA = "0xA8FCBC")]
		private void clearLookAtTransform()
		{
		}

		[Token(Token = "0x6002F77")]
		[Address(RVA = "0xA8B5E0", Offset = "0xA8B5E0", VA = "0xA8B5E0")]
		private void callEvents(Grabber g)
		{
		}

		[Token(Token = "0x6002F78")]
		[Address(RVA = "0xA83700", Offset = "0xA83700", VA = "0xA83700", Slot = "28")]
		public virtual void DropItem(Grabber droppedBy)
		{
		}

		[Token(Token = "0x6002F79")]
		[Address(RVA = "0xA91018", Offset = "0xA91018", VA = "0xA91018", Slot = "29")]
		public virtual void DropItem(bool resetVelocity, bool resetParent)
		{
		}

		[Token(Token = "0x6002F7A")]
		[Address(RVA = "0xA91074", Offset = "0xA91074", VA = "0xA91074")]
		public void ResetScale()
		{
		}

		[Token(Token = "0x6002F7B")]
		[Address(RVA = "0xA90D40", Offset = "0xA90D40", VA = "0xA90D40")]
		public void ResetParent()
		{
		}

		[Token(Token = "0x6002F7C")]
		[Address(RVA = "0xA910E0", Offset = "0xA910E0", VA = "0xA910E0")]
		public void UpdateOriginalParent(Transform newOriginalParent)
		{
		}

		[Token(Token = "0x6002F7D")]
		[Address(RVA = "0xA87418", Offset = "0xA87418", VA = "0xA87418")]
		public void UpdateOriginalParent()
		{
		}

		[Token(Token = "0x6002F7E")]
		[Address(RVA = "0xA7DC18", Offset = "0xA7DC18", VA = "0xA7DC18")]
		public ControllerHand GetControllerHand(Grabber g)
		{
			return default(ControllerHand);
		}

		[Token(Token = "0x6002F7F")]
		[Address(RVA = "0xA910E8", Offset = "0xA910E8", VA = "0xA910E8", Slot = "30")]
		public virtual Grabber GetPrimaryGrabber()
		{
			return null;
		}

		[Token(Token = "0x6002F80")]
		[Address(RVA = "0xA91240", Offset = "0xA91240", VA = "0xA91240", Slot = "31")]
		public virtual Grabber GetClosestGrabber()
		{
			return null;
		}

		[Token(Token = "0x6002F81")]
		[Address(RVA = "0xA913C8", Offset = "0xA913C8", VA = "0xA913C8", Slot = "32")]
		public virtual Transform GetClosestGrabPoint(Grabber grabber)
		{
			return null;
		}

		[Token(Token = "0x6002F82")]
		[Address(RVA = "0xA916D8", Offset = "0xA916D8", VA = "0xA916D8", Slot = "33")]
		public virtual void Release(Vector3 velocity, Vector3 angularVelocity)
		{
		}

		[Token(Token = "0x6002F83")]
		[Address(RVA = "0xA91808", Offset = "0xA91808", VA = "0xA91808", Slot = "34")]
		public virtual bool IsValidCollision(Collision collision)
		{
			return default(bool);
		}

		[Token(Token = "0x6002F84")]
		[Address(RVA = "0xA9184C", Offset = "0xA9184C", VA = "0xA9184C", Slot = "35")]
		public virtual bool IsValidCollision(Collider col)
		{
			return default(bool);
		}

		[Token(Token = "0x6002F85")]
		[Address(RVA = "0xA919C8", Offset = "0xA919C8", VA = "0xA919C8", Slot = "36")]
		public virtual void parentHandGraphics(Grabber g)
		{
		}

		[Token(Token = "0x6002F86")]
		[Address(RVA = "0xA8FFA4", Offset = "0xA8FFA4", VA = "0xA8FFA4")]
		private void setupConfigJoint(Grabber g)
		{
		}

		[Token(Token = "0x6002F87")]
		[Address(RVA = "0xA90D74", Offset = "0xA90D74", VA = "0xA90D74")]
		private void removeConfigJoint()
		{
		}

		[Token(Token = "0x6002F88")]
		[Address(RVA = "0xA8FDBC", Offset = "0xA8FDBC", VA = "0xA8FDBC")]
		private void addGrabber(Grabber g)
		{
		}

		[Token(Token = "0x6002F89")]
		[Address(RVA = "0xA90E48", Offset = "0xA90E48", VA = "0xA90E48")]
		private void removeGrabber(Grabber g)
		{
		}

		[Token(Token = "0x6002F8A")]
		[Address(RVA = "0xA8CFF4", Offset = "0xA8CFF4", VA = "0xA8CFF4")]
		private void movePosition(Vector3 worldPosition)
		{
		}

		[Token(Token = "0x6002F8B")]
		[Address(RVA = "0xA8D0D4", Offset = "0xA8D0D4", VA = "0xA8D0D4")]
		private void moveRotation(Quaternion worldRotation)
		{
		}

		[Token(Token = "0x6002F8C")]
		[Address(RVA = "0xA8F7F0", Offset = "0xA8F7F0", VA = "0xA8F7F0")]
		protected Vector3 getRemotePosition(Grabber toGrabber)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002F8D")]
		[Address(RVA = "0xA8CDB8", Offset = "0xA8CDB8", VA = "0xA8CDB8")]
		protected Quaternion getRemoteRotation(Grabber grabber)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6002F8E")]
		[Address(RVA = "0xA8B458", Offset = "0xA8B458", VA = "0xA8B458")]
		private void filterCollisions()
		{
		}

		[Token(Token = "0x6002F8F")]
		[Address(RVA = "0xA91AD4", Offset = "0xA91AD4", VA = "0xA91AD4", Slot = "37")]
		public virtual BNGPlayerController GetBNGPlayerController()
		{
			return null;
		}

		[Token(Token = "0x6002F90")]
		[Address(RVA = "0xA91BF4", Offset = "0xA91BF4", VA = "0xA91BF4", Slot = "38")]
		public virtual void RequestSpringTime(float seconds)
		{
		}

		[Token(Token = "0x6002F91")]
		[Address(RVA = "0xA91C38", Offset = "0xA91C38", VA = "0xA91C38", Slot = "39")]
		public virtual void AddValidGrabber(Grabber grabber)
		{
		}

		[Token(Token = "0x6002F92")]
		[Address(RVA = "0xA91D00", Offset = "0xA91D00", VA = "0xA91D00", Slot = "40")]
		public virtual void RemoveValidGrabber(Grabber grabber)
		{
		}

		[Token(Token = "0x6002F93")]
		[Address(RVA = "0xA91D98", Offset = "0xA91D98", VA = "0xA91D98", Slot = "41")]
		public virtual void SubscribeToMoveEvents()
		{
		}

		[Token(Token = "0x6002F94")]
		[Address(RVA = "0xA91FD4", Offset = "0xA91FD4", VA = "0xA91FD4", Slot = "42")]
		public virtual void UnsubscribeFromMoveEvents()
		{
		}

		[Token(Token = "0x6002F95")]
		[Address(RVA = "0xA921FC", Offset = "0xA921FC", VA = "0xA921FC", Slot = "43")]
		public virtual void LockGrabbable()
		{
		}

		[Token(Token = "0x6002F96")]
		[Address(RVA = "0xA92218", Offset = "0xA92218", VA = "0xA92218", Slot = "44")]
		public virtual void LockGrabbableWithRotation()
		{
		}

		[Token(Token = "0x6002F97")]
		[Address(RVA = "0xA92234", Offset = "0xA92234", VA = "0xA92234", Slot = "45")]
		public virtual void RequestLockGrabbable()
		{
		}

		[Token(Token = "0x6002F98")]
		[Address(RVA = "0xA92400", Offset = "0xA92400", VA = "0xA92400", Slot = "46")]
		public virtual void RequestUnlockGrabbable()
		{
		}

		[Token(Token = "0x6002F99")]
		[Address(RVA = "0xA92440", Offset = "0xA92440", VA = "0xA92440", Slot = "47")]
		public virtual void ResetLockResets()
		{
		}

		[Token(Token = "0x6002F9A")]
		[Address(RVA = "0xA92510", Offset = "0xA92510", VA = "0xA92510", Slot = "48")]
		public virtual void LockGrabbable(bool lockPosition, bool lockRotation, bool overridePriorLock)
		{
		}

		[Token(Token = "0x6002F9B")]
		[Address(RVA = "0xA92784", Offset = "0xA92784", VA = "0xA92784", Slot = "49")]
		public virtual void UnlockGrabbable()
		{
		}

		[Token(Token = "0x6002F9C")]
		[Address(RVA = "0xA92AF8", Offset = "0xA92AF8", VA = "0xA92AF8")]
		private void OnCollisionStay(Collision collision)
		{
		}

		[Token(Token = "0x6002F9D")]
		[Address(RVA = "0xA92C80", Offset = "0xA92C80", VA = "0xA92C80")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6002F9E")]
		[Address(RVA = "0xA92D60", Offset = "0xA92D60", VA = "0xA92D60")]
		private void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x6002F9F")]
		[Address(RVA = "0xA92E24", Offset = "0xA92E24", VA = "0xA92E24")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6002FA0")]
		[Address(RVA = "0xA92E30", Offset = "0xA92E30", VA = "0xA92E30")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002FA1")]
		[Address(RVA = "0xA92E5C", Offset = "0xA92E5C", VA = "0xA92E5C")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6002FA2")]
		[Address(RVA = "0xA8371C", Offset = "0xA8371C", VA = "0xA8371C")]
		public Grabbable()
		{
		}
	}
	[Token(Token = "0x2000555")]
	public enum GrabType
	{
		[Token(Token = "0x4001D98")]
		Snap,
		[Token(Token = "0x4001D99")]
		Precise
	}
	[Token(Token = "0x2000556")]
	public enum RemoteGrabMovement
	{
		[Token(Token = "0x4001D9B")]
		Linear,
		[Token(Token = "0x4001D9C")]
		Velocity,
		[Token(Token = "0x4001D9D")]
		Flick
	}
	[Token(Token = "0x2000557")]
	public enum GrabPhysics
	{
		[Token(Token = "0x4001D9F")]
		None = 2,
		[Token(Token = "0x4001DA0")]
		PhysicsJoint = 0,
		[Token(Token = "0x4001DA1")]
		FixedJoint = 3,
		[Token(Token = "0x4001DA2")]
		Velocity = 4,
		[Token(Token = "0x4001DA3")]
		Kinematic = 1
	}
	[Token(Token = "0x2000558")]
	public enum OtherGrabBehavior
	{
		[Token(Token = "0x4001DA5")]
		None,
		[Token(Token = "0x4001DA6")]
		SwapHands,
		[Token(Token = "0x4001DA7")]
		DualGrab
	}
	[Token(Token = "0x2000559")]
	public enum TwoHandedPositionType
	{
		[Token(Token = "0x4001DA9")]
		Lerp,
		[Token(Token = "0x4001DAA")]
		None
	}
	[Token(Token = "0x200055A")]
	public enum TwoHandedRotationType
	{
		[Token(Token = "0x4001DAC")]
		Lerp,
		[Token(Token = "0x4001DAD")]
		Slerp,
		[Token(Token = "0x4001DAE")]
		LookAtSecondary,
		[Token(Token = "0x4001DAF")]
		None
	}
	[Token(Token = "0x200055B")]
	public enum TwoHandedDropMechanic
	{
		[Token(Token = "0x4001DB1")]
		Drop,
		[Token(Token = "0x4001DB2")]
		Transfer,
		[Token(Token = "0x4001DB3")]
		None
	}
	[Token(Token = "0x200055C")]
	public enum TwoHandedLookDirection
	{
		[Token(Token = "0x4001DB5")]
		Horizontal,
		[Token(Token = "0x4001DB6")]
		Vertical
	}
	[Token(Token = "0x200055D")]
	public enum HandPoseType
	{
		[Token(Token = "0x4001DB8")]
		AnimatorID,
		[Token(Token = "0x4001DB9")]
		HandPose,
		[Token(Token = "0x4001DBA")]
		AutoPoseOnce,
		[Token(Token = "0x4001DBB")]
		AutoPoseContinuous,
		[Token(Token = "0x4001DBC")]
		None
	}
	[Token(Token = "0x200055E")]
	public class GrabbableChild : MonoBehaviour
	{
		[Token(Token = "0x4001DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x828200", Offset = "0x828200")]
		public Grabbable ParentGrabbable;

		[Token(Token = "0x6002FA3")]
		[Address(RVA = "0xD8B664", Offset = "0xD8B664", VA = "0xD8B664")]
		public GrabbableChild()
		{
		}
	}
	[Token(Token = "0x200055F")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x820864", Offset = "0x820864")]
	public abstract class GrabbableEvents : MonoBehaviour
	{
		[Token(Token = "0x4001DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Grabbable grab;

		[Token(Token = "0x4001DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Grabber thisGrabber;

		[Token(Token = "0x4001DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected InputBridge input;

		[Token(Token = "0x6002FA4")]
		[Address(RVA = "0xD8B6BC", Offset = "0xD8B6BC", VA = "0xD8B6BC", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6002FA5")]
		[Address(RVA = "0xD8B8E8", Offset = "0xD8B8E8", VA = "0xD8B8E8", Slot = "5")]
		public virtual void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6002FA6")]
		[Address(RVA = "0xD8B8F0", Offset = "0xD8B8F0", VA = "0xD8B8F0", Slot = "6")]
		public virtual void OnRelease()
		{
		}

		[Token(Token = "0x6002FA7")]
		[Address(RVA = "0xD8B8F4", Offset = "0xD8B8F4", VA = "0xD8B8F4", Slot = "7")]
		public virtual void OnBecomesClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6002FA8")]
		[Address(RVA = "0xD8B5FC", Offset = "0xD8B5FC", VA = "0xD8B5FC", Slot = "8")]
		public virtual void OnBecomesClosestGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6002FA9")]
		[Address(RVA = "0xD8B8F8", Offset = "0xD8B8F8", VA = "0xD8B8F8", Slot = "9")]
		public virtual void OnNoLongerClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6002FAA")]
		[Address(RVA = "0xD8B610", Offset = "0xD8B610", VA = "0xD8B610", Slot = "10")]
		public virtual void OnNoLongerClosestGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6002FAB")]
		[Address(RVA = "0xD8B8FC", Offset = "0xD8B8FC", VA = "0xD8B8FC", Slot = "11")]
		public virtual void OnBecomesClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6002FAC")]
		[Address(RVA = "0xD8B624", Offset = "0xD8B624", VA = "0xD8B624", Slot = "12")]
		public virtual void OnBecomesClosestRemoteGrabbable(Grabber theGrabber)
		{
		}

		[Token(Token = "0x6002FAD")]
		[Address(RVA = "0xD8B900", Offset = "0xD8B900", VA = "0xD8B900", Slot = "13")]
		public virtual void OnNoLongerClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6002FAE")]
		[Address(RVA = "0xD8B638", Offset = "0xD8B638", VA = "0xD8B638", Slot = "14")]
		public virtual void OnNoLongerClosestRemoteGrabbable(Grabber theGrabber)
		{
		}

		[Token(Token = "0x6002FAF")]
		[Address(RVA = "0xD8B904", Offset = "0xD8B904", VA = "0xD8B904", Slot = "15")]
		public virtual void OnGrip(float gripValue)
		{
		}

		[Token(Token = "0x6002FB0")]
		[Address(RVA = "0xD8B908", Offset = "0xD8B908", VA = "0xD8B908", Slot = "16")]
		public virtual void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6002FB1")]
		[Address(RVA = "0xD8B90C", Offset = "0xD8B90C", VA = "0xD8B90C", Slot = "17")]
		public virtual void OnTriggerDown()
		{
		}

		[Token(Token = "0x6002FB2")]
		[Address(RVA = "0xD8B910", Offset = "0xD8B910", VA = "0xD8B910", Slot = "18")]
		public virtual void OnTriggerUp()
		{
		}

		[Token(Token = "0x6002FB3")]
		[Address(RVA = "0xD8B914", Offset = "0xD8B914", VA = "0xD8B914", Slot = "19")]
		public virtual void OnButton1()
		{
		}

		[Token(Token = "0x6002FB4")]
		[Address(RVA = "0xD8B918", Offset = "0xD8B918", VA = "0xD8B918", Slot = "20")]
		public virtual void OnButton1Down()
		{
		}

		[Token(Token = "0x6002FB5")]
		[Address(RVA = "0xD8B91C", Offset = "0xD8B91C", VA = "0xD8B91C", Slot = "21")]
		public virtual void OnButton1Up()
		{
		}

		[Token(Token = "0x6002FB6")]
		[Address(RVA = "0xD8B920", Offset = "0xD8B920", VA = "0xD8B920", Slot = "22")]
		public virtual void OnButton2()
		{
		}

		[Token(Token = "0x6002FB7")]
		[Address(RVA = "0xD8B924", Offset = "0xD8B924", VA = "0xD8B924", Slot = "23")]
		public virtual void OnButton2Down()
		{
		}

		[Token(Token = "0x6002FB8")]
		[Address(RVA = "0xD8B928", Offset = "0xD8B928", VA = "0xD8B928", Slot = "24")]
		public virtual void OnButton2Up()
		{
		}

		[Token(Token = "0x6002FB9")]
		[Address(RVA = "0xD8B92C", Offset = "0xD8B92C", VA = "0xD8B92C", Slot = "25")]
		public virtual void OnSnapZoneEnter()
		{
		}

		[Token(Token = "0x6002FBA")]
		[Address(RVA = "0xD8B930", Offset = "0xD8B930", VA = "0xD8B930", Slot = "26")]
		public virtual void OnSnapZoneExit()
		{
		}

		[Token(Token = "0x6002FBB")]
		[Address(RVA = "0xD8B65C", Offset = "0xD8B65C", VA = "0xD8B65C")]
		protected GrabbableEvents()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000560")]
	public class FloatEvent : UnityEvent<float>
	{
		[Token(Token = "0x6002FBC")]
		[Address(RVA = "0xA888FC", Offset = "0xA888FC", VA = "0xA888FC")]
		public FloatEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000561")]
	public class FloatFloatEvent : UnityEvent<float, float>
	{
		[Token(Token = "0x6002FBD")]
		[Address(RVA = "0xA8894C", Offset = "0xA8894C", VA = "0xA8894C")]
		public FloatFloatEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000562")]
	public class GrabberEvent : UnityEvent<Grabber>
	{
		[Token(Token = "0x6002FBE")]
		[Address(RVA = "0xD8F81C", Offset = "0xD8F81C", VA = "0xD8F81C")]
		public GrabberEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000563")]
	public class GrabbableEvent : UnityEvent<Grabbable>
	{
		[Token(Token = "0x6002FBF")]
		[Address(RVA = "0xD8B66C", Offset = "0xD8B66C", VA = "0xD8B66C")]
		public GrabbableEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000564")]
	public class RaycastHitEvent : UnityEvent<RaycastHit>
	{
		[Token(Token = "0x6002FC0")]
		[Address(RVA = "0xB5F6DC", Offset = "0xB5F6DC", VA = "0xB5F6DC")]
		public RaycastHitEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000565")]
	public class Vector2Event : UnityEvent<Vector2>
	{
		[Token(Token = "0x6002FC1")]
		[Address(RVA = "0xBA8CD8", Offset = "0xBA8CD8", VA = "0xBA8CD8")]
		public Vector2Event()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000566")]
	public class Vector3Event : UnityEvent<Vector3>
	{
		[Token(Token = "0x6002FC2")]
		[Address(RVA = "0xBA8D28", Offset = "0xBA8D28", VA = "0xBA8D28")]
		public Vector3Event()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000567")]
	public class PointerEventDataEvent : UnityEvent<PointerEventData>
	{
		[Token(Token = "0x6002FC3")]
		[Address(RVA = "0xB5D118", Offset = "0xB5D118", VA = "0xB5D118")]
		public PointerEventDataEvent()
		{
		}
	}
	[Token(Token = "0x2000568")]
	public class GrabbableUnityEvents : GrabbableEvents
	{
		[Token(Token = "0x4001DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GrabberEvent onGrab;

		[Token(Token = "0x4001DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEvent onRelease;

		[Token(Token = "0x4001DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEvent onBecomesClosestGrabbable;

		[Token(Token = "0x4001DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEvent onNoLongerClosestGrabbable;

		[Token(Token = "0x4001DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEvent onBecomesClosestRemoteGrabbable;

		[Token(Token = "0x4001DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent onNoLongerClosestRemoteGrabbable;

		[Token(Token = "0x4001DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FloatEvent onGrip;

		[Token(Token = "0x4001DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public FloatEvent onTrigger;

		[Token(Token = "0x4001DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UnityEvent onTriggerDown;

		[Token(Token = "0x4001DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public UnityEvent onTriggerUp;

		[Token(Token = "0x4001DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public UnityEvent onButton1;

		[Token(Token = "0x4001DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public UnityEvent onButton1Down;

		[Token(Token = "0x4001DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public UnityEvent onButton1Up;

		[Token(Token = "0x4001DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public UnityEvent onButton2;

		[Token(Token = "0x4001DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public UnityEvent onButton2Down;

		[Token(Token = "0x4001DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public UnityEvent onButton2Up;

		[Token(Token = "0x4001DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public UnityEvent onSnapZoneEnter;

		[Token(Token = "0x4001DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public UnityEvent onSnapZoneExit;

		[Token(Token = "0x6002FC4")]
		[Address(RVA = "0xD8C3A8", Offset = "0xD8C3A8", VA = "0xD8C3A8", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6002FC5")]
		[Address(RVA = "0xD8C420", Offset = "0xD8C420", VA = "0xD8C420", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x6002FC6")]
		[Address(RVA = "0xD8C434", Offset = "0xD8C434", VA = "0xD8C434", Slot = "7")]
		public override void OnBecomesClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6002FC7")]
		[Address(RVA = "0xD8C448", Offset = "0xD8C448", VA = "0xD8C448", Slot = "9")]
		public override void OnNoLongerClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6002FC8")]
		[Address(RVA = "0xD8C45C", Offset = "0xD8C45C", VA = "0xD8C45C", Slot = "11")]
		public override void OnBecomesClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6002FC9")]
		[Address(RVA = "0xD8C470", Offset = "0xD8C470", VA = "0xD8C470", Slot = "13")]
		public override void OnNoLongerClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6002FCA")]
		[Address(RVA = "0xD8C484", Offset = "0xD8C484", VA = "0xD8C484", Slot = "15")]
		public override void OnGrip(float gripValue)
		{
		}

		[Token(Token = "0x6002FCB")]
		[Address(RVA = "0xD8C4F8", Offset = "0xD8C4F8", VA = "0xD8C4F8", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6002FCC")]
		[Address(RVA = "0xD8C56C", Offset = "0xD8C56C", VA = "0xD8C56C", Slot = "17")]
		public override void OnTriggerDown()
		{
		}

		[Token(Token = "0x6002FCD")]
		[Address(RVA = "0xD8C580", Offset = "0xD8C580", VA = "0xD8C580", Slot = "18")]
		public override void OnTriggerUp()
		{
		}

		[Token(Token = "0x6002FCE")]
		[Address(RVA = "0xD8C594", Offset = "0xD8C594", VA = "0xD8C594", Slot = "19")]
		public override void OnButton1()
		{
		}

		[Token(Token = "0x6002FCF")]
		[Address(RVA = "0xD8C5A8", Offset = "0xD8C5A8", VA = "0xD8C5A8", Slot = "20")]
		public override void OnButton1Down()
		{
		}

		[Token(Token = "0x6002FD0")]
		[Address(RVA = "0xD8C5BC", Offset = "0xD8C5BC", VA = "0xD8C5BC", Slot = "21")]
		public override void OnButton1Up()
		{
		}

		[Token(Token = "0x6002FD1")]
		[Address(RVA = "0xD8C5D0", Offset = "0xD8C5D0", VA = "0xD8C5D0", Slot = "22")]
		public override void OnButton2()
		{
		}

		[Token(Token = "0x6002FD2")]
		[Address(RVA = "0xD8C5E4", Offset = "0xD8C5E4", VA = "0xD8C5E4", Slot = "23")]
		public override void OnButton2Down()
		{
		}

		[Token(Token = "0x6002FD3")]
		[Address(RVA = "0xD8C5F8", Offset = "0xD8C5F8", VA = "0xD8C5F8", Slot = "24")]
		public override void OnButton2Up()
		{
		}

		[Token(Token = "0x6002FD4")]
		[Address(RVA = "0xD8C60C", Offset = "0xD8C60C", VA = "0xD8C60C", Slot = "25")]
		public override void OnSnapZoneEnter()
		{
		}

		[Token(Token = "0x6002FD5")]
		[Address(RVA = "0xD8C620", Offset = "0xD8C620", VA = "0xD8C620", Slot = "26")]
		public override void OnSnapZoneExit()
		{
		}

		[Token(Token = "0x6002FD6")]
		[Address(RVA = "0xD8C634", Offset = "0xD8C634", VA = "0xD8C634")]
		public GrabbableUnityEvents()
		{
		}
	}
	[Token(Token = "0x2000569")]
	public class GrabbablesInTrigger : MonoBehaviour
	{
		[Token(Token = "0x4001DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dictionary<Collider, Grabbable> NearbyGrabbables;

		[Token(Token = "0x4001DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Dictionary<Collider, Grabbable> ValidGrabbables;

		[Token(Token = "0x4001DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Grabbable ClosestGrabbable;

		[Token(Token = "0x4001DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Dictionary<Collider, Grabbable> ValidRemoteGrabbables;

		[Token(Token = "0x4001DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Grabbable ClosestRemoteGrabbable;

		[Token(Token = "0x4001DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool FireGrabbableEvents;

		[Token(Token = "0x4001DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Grabbable _closest;

		[Token(Token = "0x4001DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float _lastDistance;

		[Token(Token = "0x4001DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float _thisDistance;

		[Token(Token = "0x4001DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<Collider, Grabbable> _valids;

		[Token(Token = "0x4001DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<Collider, Grabbable> _filtered;

		[Token(Token = "0x6002FD7")]
		[Address(RVA = "0xD8C63C", Offset = "0xD8C63C", VA = "0xD8C63C")]
		private void Start()
		{
		}

		[Token(Token = "0x6002FD8")]
		[Address(RVA = "0xD8C6DC", Offset = "0xD8C6DC", VA = "0xD8C6DC")]
		private void Update()
		{
		}

		[Token(Token = "0x6002FD9")]
		[Address(RVA = "0xD8C700", Offset = "0xD8C700", VA = "0xD8C700")]
		private void updateClosestGrabbable()
		{
		}

		[Token(Token = "0x6002FDA")]
		[Address(RVA = "0xD8C75C", Offset = "0xD8C75C", VA = "0xD8C75C")]
		private void updateClosestRemoteGrabbables()
		{
		}

		[Token(Token = "0x6002FDB")]
		[Address(RVA = "0xD8C994", Offset = "0xD8C994", VA = "0xD8C994", Slot = "4")]
		public virtual Grabbable GetClosestGrabbable(Dictionary<Collider, Grabbable> grabbables, bool remoteOnly = false)
		{
			return null;
		}

		[Token(Token = "0x6002FDC")]
		[Address(RVA = "0xD8C7F4", Offset = "0xD8C7F4", VA = "0xD8C7F4")]
		public Dictionary<Collider, Grabbable> GetValidGrabbables(Dictionary<Collider, Grabbable> grabs)
		{
			return null;
		}

		[Token(Token = "0x6002FDD")]
		[Address(RVA = "0xD8CC34", Offset = "0xD8CC34", VA = "0xD8CC34", Slot = "5")]
		protected virtual bool isValidGrabbale(Collider col, Grabbable grab)
		{
			return default(bool);
		}

		[Token(Token = "0x6002FDE")]
		[Address(RVA = "0xD8CEAC", Offset = "0xD8CEAC", VA = "0xD8CEAC", Slot = "6")]
		public virtual Dictionary<Collider, Grabbable> SanitizeGrabbables(Dictionary<Collider, Grabbable> grabs)
		{
			return null;
		}

		[Token(Token = "0x6002FDF")]
		[Address(RVA = "0xD8D170", Offset = "0xD8D170", VA = "0xD8D170", Slot = "7")]
		public virtual void AddNearbyGrabbable(Collider col, Grabbable grabObject)
		{
		}

		[Token(Token = "0x6002FE0")]
		[Address(RVA = "0xD8D274", Offset = "0xD8D274", VA = "0xD8D274", Slot = "8")]
		public virtual void RemoveNearbyGrabbable(Collider col, Grabbable grabObject)
		{
		}

		[Token(Token = "0x6002FE1")]
		[Address(RVA = "0xD8D344", Offset = "0xD8D344", VA = "0xD8D344", Slot = "9")]
		public virtual void RemoveNearbyGrabbable(Grabbable grabObject)
		{
		}

		[Token(Token = "0x6002FE2")]
		[Address(RVA = "0xD8D4C8", Offset = "0xD8D4C8", VA = "0xD8D4C8", Slot = "10")]
		public virtual void AddValidRemoteGrabbable(Collider col, Grabbable grabObject)
		{
		}

		[Token(Token = "0x6002FE3")]
		[Address(RVA = "0xD8D790", Offset = "0xD8D790", VA = "0xD8D790", Slot = "11")]
		public virtual void RemoveValidRemoteGrabbable(Collider col, Grabbable grabObject)
		{
		}

		[Token(Token = "0x6002FE4")]
		[Address(RVA = "0xD8D860", Offset = "0xD8D860", VA = "0xD8D860")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6002FE5")]
		[Address(RVA = "0xD8D9B8", Offset = "0xD8D9B8", VA = "0xD8D9B8")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6002FE6")]
		[Address(RVA = "0xD8DAE0", Offset = "0xD8DAE0", VA = "0xD8DAE0")]
		public GrabbablesInTrigger()
		{
		}
	}
	[Token(Token = "0x200056A")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x8208C8", Offset = "0x8208C8")]
	public class Grabber : MonoBehaviour
	{
		[Token(Token = "0x4001DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x828238", Offset = "0x828238")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x828238", Offset = "0x828238")]
		public ControllerHand HandSide;

		[Token(Token = "0x4001DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x828298", Offset = "0x828298")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x828298", Offset = "0x828298")]
		public HoldType DefaultHoldType;

		[Token(Token = "0x4001DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8282F8", Offset = "0x8282F8")]
		public GrabButton DefaultGrabButton;

		[Token(Token = "0x4001DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x828330", Offset = "0x828330")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x828330", Offset = "0x828330")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x828330", Offset = "0x828330")]
		public float GripAmount;

		[Token(Token = "0x4001DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8283A8", Offset = "0x8283A8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x8283A8", Offset = "0x8283A8")]
		public float ReleaseGripAmount;

		[Token(Token = "0x4001DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8283FC", Offset = "0x8283FC")]
		public float GrabCheckSeconds;

		[Token(Token = "0x4001DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float currentGrabTime;

		[Token(Token = "0x4001DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x828434", Offset = "0x828434")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x828434", Offset = "0x828434")]
		public Grabbable EquipGrabbableOnStart;

		[Token(Token = "0x4001DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x828494", Offset = "0x828494")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x828494", Offset = "0x828494")]
		public Transform HandsGraphics;

		[Token(Token = "0x4001DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform handsGraphicsParent;

		[Token(Token = "0x4001DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 handsGraphicsPosition;

		[Token(Token = "0x4001DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Quaternion handsGraphicsRotation;

		[Token(Token = "0x4001DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8284F4", Offset = "0x8284F4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8284F4", Offset = "0x8284F4")]
		public Grabbable HeldGrabbable;

		[Token(Token = "0x4001DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x828554", Offset = "0x828554")]
		public bool ForceGrab;

		[Token(Token = "0x4001DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82858C", Offset = "0x82858C")]
		public bool ForceRelease;

		[Token(Token = "0x4001DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8285C4", Offset = "0x8285C4")]
		public float LastDropTime;

		[Token(Token = "0x4001DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Grabbable previousClosest;

		[Token(Token = "0x4001DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Grabbable previousClosestRemote;

		[Token(Token = "0x4001DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private GrabbablesInTrigger grabsInTrigger;

		[Token(Token = "0x4001DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Grabbable flyingGrabbable;

		[Token(Token = "0x4001DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float flyingTime;

		[Token(Token = "0x4001DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8285FC", Offset = "0x8285FC")]
		private Vector3 <handsGraphicsGrabberOffset>k__BackingField;

		[Token(Token = "0x4001DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82860C", Offset = "0x82860C")]
		private Vector3 <handsGraphicsGrabberOffsetRotation>k__BackingField;

		[Token(Token = "0x4001DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[HideInInspector]
		public Vector3 PreviousPosition;

		[Token(Token = "0x4001DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[HideInInspector]
		public Transform DummyTransform;

		[Token(Token = "0x4001DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Rigidbody rb;

		[Token(Token = "0x4001DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private InputBridge input;

		[Token(Token = "0x4001DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private ConfigurableJoint joint;

		[Token(Token = "0x4001DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[HideInInspector]
		public bool FreshGrip;

		[Token(Token = "0x4001DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82864C", Offset = "0x82864C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82864C", Offset = "0x82864C")]
		public GrabbableEvent onGrabEvent;

		[Token(Token = "0x4001DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8286AC", Offset = "0x8286AC")]
		public GrabbableEvent onAfterGrabEvent;

		[Token(Token = "0x4001DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8286E4", Offset = "0x8286E4")]
		public GrabbableEvent onReleaseEvent;

		[Token(Token = "0x4001DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[HideInInspector]
		public VelocityTracker velocityTracker;

		[Token(Token = "0x17000683")]
		public bool HoldingItem
		{
			[Token(Token = "0x6002FE7")]
			[Address(RVA = "0xD8DAF0", Offset = "0xD8DAF0", VA = "0xD8DAF0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000684")]
		public bool RemoteGrabbingItem
		{
			[Token(Token = "0x6002FE8")]
			[Address(RVA = "0xD8DB60", Offset = "0xD8DB60", VA = "0xD8DB60")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000685")]
		public GrabbablesInTrigger GrabsInTrigger
		{
			[Token(Token = "0x6002FE9")]
			[Address(RVA = "0xD8DBD0", Offset = "0xD8DBD0", VA = "0xD8DBD0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000686")]
		public Grabbable RemoteGrabbingGrabbable
		{
			[Token(Token = "0x6002FEA")]
			[Address(RVA = "0xD8DBD8", Offset = "0xD8DBD8", VA = "0xD8DBD8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000687")]
		public Vector3 handsGraphicsGrabberOffset
		{
			[Token(Token = "0x6002FEB")]
			[Address(RVA = "0xD8DBE0", Offset = "0xD8DBE0", VA = "0xD8DBE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833EE0", Offset = "0x833EE0")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6002FEC")]
			[Address(RVA = "0xD8DBEC", Offset = "0xD8DBEC", VA = "0xD8DBEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833EF0", Offset = "0x833EF0")]
			private set
			{
			}
		}

		[Token(Token = "0x17000688")]
		public Vector3 handsGraphicsGrabberOffsetRotation
		{
			[Token(Token = "0x6002FED")]
			[Address(RVA = "0xD8DBF8", Offset = "0xD8DBF8", VA = "0xD8DBF8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833F00", Offset = "0x833F00")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6002FEE")]
			[Address(RVA = "0xD8DC04", Offset = "0xD8DC04", VA = "0xD8DC04")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833F10", Offset = "0x833F10")]
			private set
			{
			}
		}

		[Token(Token = "0x6002FEF")]
		[Address(RVA = "0xD8DC10", Offset = "0xD8DC10", VA = "0xD8DC10")]
		private void Start()
		{
		}

		[Token(Token = "0x6002FF0")]
		[Address(RVA = "0xD8E050", Offset = "0xD8E050", VA = "0xD8E050")]
		private void Update()
		{
		}

		[Token(Token = "0x6002FF1")]
		[Address(RVA = "0xD8E220", Offset = "0xD8E220", VA = "0xD8E220")]
		private void updateFreshGrabStatus()
		{
		}

		[Token(Token = "0x6002FF2")]
		[Address(RVA = "0xD8E2A0", Offset = "0xD8E2A0", VA = "0xD8E2A0")]
		private void checkGrabbableEvents()
		{
		}

		[Token(Token = "0x6002FF3")]
		[Address(RVA = "0xD8E9BC", Offset = "0xD8E9BC", VA = "0xD8E9BC", Slot = "4")]
		public virtual bool InputCheckGrab()
		{
			return default(bool);
		}

		[Token(Token = "0x6002FF4")]
		[Address(RVA = "0xD8EAD0", Offset = "0xD8EAD0", VA = "0xD8EAD0", Slot = "5")]
		public virtual bool GetInputDownForGrabbable(Grabbable grabObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6002FF5")]
		[Address(RVA = "0xD8EBC4", Offset = "0xD8EBC4", VA = "0xD8EBC4")]
		private HoldType getHoldType(Grabbable grab)
		{
			return default(HoldType);
		}

		[Token(Token = "0x6002FF6")]
		[Address(RVA = "0xD8ED64", Offset = "0xD8ED64", VA = "0xD8ED64", Slot = "6")]
		public virtual GrabButton GetGrabButton(Grabbable grab)
		{
			return default(GrabButton);
		}

		[Token(Token = "0x6002FF7")]
		[Address(RVA = "0xD8E9EC", Offset = "0xD8E9EC", VA = "0xD8E9EC")]
		private Grabbable getClosestOrRemote()
		{
			return null;
		}

		[Token(Token = "0x6002FF8")]
		[Address(RVA = "0xD8E7D0", Offset = "0xD8E7D0", VA = "0xD8E7D0")]
		private bool inputCheckRelease()
		{
			return default(bool);
		}

		[Token(Token = "0x6002FF9")]
		[Address(RVA = "0xD8E8CC", Offset = "0xD8E8CC", VA = "0xD8E8CC")]
		private float getGrabInput(GrabButton btn)
		{
			return default(float);
		}

		[Token(Token = "0x6002FFA")]
		[Address(RVA = "0xD8EC68", Offset = "0xD8EC68", VA = "0xD8EC68")]
		private bool getToggleInput(GrabButton btn)
		{
			return default(bool);
		}

		[Token(Token = "0x6002FFB")]
		[Address(RVA = "0xD8EE08", Offset = "0xD8EE08", VA = "0xD8EE08", Slot = "7")]
		public virtual bool TryGrab()
		{
			return default(bool);
		}

		[Token(Token = "0x6002FFC")]
		[Address(RVA = "0xD8EF78", Offset = "0xD8EF78", VA = "0xD8EF78", Slot = "8")]
		public virtual void GrabGrabbable(Grabbable item)
		{
		}

		[Token(Token = "0x6002FFD")]
		[Address(RVA = "0xD8F10C", Offset = "0xD8F10C", VA = "0xD8F10C", Slot = "9")]
		public virtual void DidDrop()
		{
		}

		[Token(Token = "0x6002FFE")]
		[Address(RVA = "0xD8F21C", Offset = "0xD8F21C", VA = "0xD8F21C", Slot = "10")]
		public virtual void HideHandGraphics()
		{
		}

		[Token(Token = "0x6002FFF")]
		[Address(RVA = "0xD8F2C0", Offset = "0xD8F2C0", VA = "0xD8F2C0", Slot = "11")]
		public virtual void ResetHandGraphics()
		{
		}

		[Token(Token = "0x6003000")]
		[Address(RVA = "0xD8F3CC", Offset = "0xD8F3CC", VA = "0xD8F3CC", Slot = "12")]
		public virtual void TryRelease()
		{
		}

		[Token(Token = "0x6003001")]
		[Address(RVA = "0xD8E184", Offset = "0xD8E184", VA = "0xD8E184")]
		private void resetFlyingGrabbable()
		{
		}

		[Token(Token = "0x6003002")]
		[Address(RVA = "0xD8F470", Offset = "0xD8F470", VA = "0xD8F470", Slot = "13")]
		public virtual Vector3 GetGrabberAveragedVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6003003")]
		[Address(RVA = "0xD8F490", Offset = "0xD8F490", VA = "0xD8F490", Slot = "14")]
		public virtual Vector3 GetGrabberAveragedAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6003004")]
		[Address(RVA = "0xD8F4B0", Offset = "0xD8F4B0", VA = "0xD8F4B0")]
		public Grabber()
		{
		}
	}
	[Token(Token = "0x200056B")]
	public class HandModelSelector : MonoBehaviour
	{
		[Token(Token = "0x4001DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82872C", Offset = "0x82872C")]
		public int DefaultHandsModel;

		[Token(Token = "0x4001E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x828764", Offset = "0x828764")]
		public bool LoadHandSelectionFromPrefs;

		[Token(Token = "0x4001E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82879C", Offset = "0x82879C")]
		public ControllerBinding ToggleHandsInput;

		[Token(Token = "0x4001E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8287D4", Offset = "0x8287D4")]
		public Transform LeftHandGFXHolder;

		[Token(Token = "0x4001E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82880C", Offset = "0x82880C")]
		public Transform RightHandGFXHolder;

		[Token(Token = "0x4001E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int _selectedHandGFX;

		[Token(Token = "0x4001E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x828844", Offset = "0x828844")]
		public CharacterIK IKBody;

		[Token(Token = "0x4001E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UIPointer uiPoint;

		[Token(Token = "0x4001E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<Transform> leftHandModels;

		[Token(Token = "0x4001E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform activatedLeftModel;

		[Token(Token = "0x4001E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<Transform> rightHandModels;

		[Token(Token = "0x4001E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform activatedRightModel;

		[Token(Token = "0x6003005")]
		[Address(RVA = "0xD92E4C", Offset = "0xD92E4C", VA = "0xD92E4C")]
		private void Start()
		{
		}

		[Token(Token = "0x6003006")]
		[Address(RVA = "0xD93588", Offset = "0xD93588", VA = "0xD93588")]
		private void Update()
		{
		}

		[Token(Token = "0x6003007")]
		[Address(RVA = "0xD92ED8", Offset = "0xD92ED8", VA = "0xD92ED8")]
		public void CacheHandModels()
		{
		}

		[Token(Token = "0x6003008")]
		[Address(RVA = "0xD93020", Offset = "0xD93020", VA = "0xD93020")]
		public void ChangeHandsModel(int childIndex, bool save = false)
		{
		}

		[Token(Token = "0x6003009")]
		[Address(RVA = "0xD935D0", Offset = "0xD935D0", VA = "0xD935D0")]
		public HandModelSelector()
		{
		}
	}
	[Token(Token = "0x200056C")]
	public class HeadCollisionFade : MonoBehaviour
	{
		[Token(Token = "0x4001E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ScreenFader fader;

		[Token(Token = "0x4001E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float FadeDistance;

		[Token(Token = "0x4001E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float FadeOutDistance;

		[Token(Token = "0x4001E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float MinFade;

		[Token(Token = "0x4001E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float MaxFade;

		[Token(Token = "0x4001E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float FadeSpeed;

		[Token(Token = "0x4001E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82887C", Offset = "0x82887C")]
		public bool CheckOnlyIfHMDActive;

		[Token(Token = "0x4001E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool IgnoreHeldGrabbables;

		[Token(Token = "0x4001E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform DistanceTransform;

		[Token(Token = "0x4001E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int cols;

		[Token(Token = "0x4001E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float currentFade;

		[Token(Token = "0x4001E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float lastFade;

		[Token(Token = "0x4001E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<Collider> collisions;

		[Token(Token = "0x600300A")]
		[Address(RVA = "0xD97334", Offset = "0xD97334", VA = "0xD97334")]
		private void Start()
		{
		}

		[Token(Token = "0x600300B")]
		[Address(RVA = "0xD973E4", Offset = "0xD973E4", VA = "0xD973E4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600300C")]
		[Address(RVA = "0xD9769C", Offset = "0xD9769C", VA = "0xD9769C")]
		private void OnCollisionEnter(Collision col)
		{
		}

		[Token(Token = "0x600300D")]
		[Address(RVA = "0xD97924", Offset = "0xD97924", VA = "0xD97924")]
		private void OnCollisionExit(Collision col)
		{
		}

		[Token(Token = "0x600300E")]
		[Address(RVA = "0xD97A0C", Offset = "0xD97A0C", VA = "0xD97A0C")]
		public HeadCollisionFade()
		{
		}
	}
	[Token(Token = "0x200056D")]
	public class HingeHelper : GrabbableEvents
	{
		[Token(Token = "0x4001E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8288B4", Offset = "0x8288B4")]
		public bool SnapToDegrees;

		[Token(Token = "0x4001E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8288EC", Offset = "0x8288EC")]
		public float SnapDegrees;

		[Token(Token = "0x4001E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x828924", Offset = "0x828924")]
		public Transform SnapGraphics;

		[Token(Token = "0x4001E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82895C", Offset = "0x82895C")]
		public AudioClip SnapSound;

		[Token(Token = "0x4001E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x828994", Offset = "0x828994")]
		public float RandomizePitch;

		[Token(Token = "0x4001E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8289CC", Offset = "0x8289CC")]
		public float SnapHaptics;

		[Token(Token = "0x4001E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Text LabelToUpdate;

		[Token(Token = "0x4001E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FloatEvent onHingeChange;

		[Token(Token = "0x4001E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FloatEvent onHingeSnapChange;

		[Token(Token = "0x4001E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Rigidbody rigid;

		[Token(Token = "0x4001E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float _lastDegrees;

		[Token(Token = "0x4001E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float _lastSnapDegrees;

		[Token(Token = "0x600300F")]
		[Address(RVA = "0xD97A30", Offset = "0xD97A30", VA = "0xD97A30")]
		private void Start()
		{
		}

		[Token(Token = "0x6003010")]
		[Address(RVA = "0xD97A88", Offset = "0xD97A88", VA = "0xD97A88")]
		private void Update()
		{
		}

		[Token(Token = "0x6003011")]
		[Address(RVA = "0xD97D48", Offset = "0xD97D48", VA = "0xD97D48")]
		public void OnSnapChange(float yAngle)
		{
		}

		[Token(Token = "0x6003012")]
		[Address(RVA = "0xD97F28", Offset = "0xD97F28", VA = "0xD97F28", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x6003013")]
		[Address(RVA = "0xD97CD4", Offset = "0xD97CD4", VA = "0xD97CD4")]
		public void OnHingeChange(float hingeAmount)
		{
		}

		[Token(Token = "0x6003014")]
		[Address(RVA = "0xD97CB0", Offset = "0xD97CB0", VA = "0xD97CB0")]
		private float getSmoothedValue(float val)
		{
			return default(float);
		}

		[Token(Token = "0x6003015")]
		[Address(RVA = "0xD97FC0", Offset = "0xD97FC0", VA = "0xD97FC0")]
		public HingeHelper()
		{
		}
	}
	[Token(Token = "0x200056E")]
	public enum ControllerHand
	{
		[Token(Token = "0x4001E25")]
		Left,
		[Token(Token = "0x4001E26")]
		Right,
		[Token(Token = "0x4001E27")]
		None
	}
	[Token(Token = "0x200056F")]
	public enum ControllerBinding
	{
		[Token(Token = "0x4001E29")]
		None,
		[Token(Token = "0x4001E2A")]
		AButton,
		[Token(Token = "0x4001E2B")]
		AButtonDown,
		[Token(Token = "0x4001E2C")]
		BButton,
		[Token(Token = "0x4001E2D")]
		BButtonDown,
		[Token(Token = "0x4001E2E")]
		XButton,
		[Token(Token = "0x4001E2F")]
		XButtonDown,
		[Token(Token = "0x4001E30")]
		YButton,
		[Token(Token = "0x4001E31")]
		YButtonDown,
		[Token(Token = "0x4001E32")]
		LeftTrigger,
		[Token(Token = "0x4001E33")]
		LeftTriggerDown,
		[Token(Token = "0x4001E34")]
		LeftGrip,
		[Token(Token = "0x4001E35")]
		LeftGripDown,
		[Token(Token = "0x4001E36")]
		LeftThumbstick,
		[Token(Token = "0x4001E37")]
		LeftThumbstickDown,
		[Token(Token = "0x4001E38")]
		RightTrigger,
		[Token(Token = "0x4001E39")]
		RightTriggerDown,
		[Token(Token = "0x4001E3A")]
		RightGrip,
		[Token(Token = "0x4001E3B")]
		RightGripDown,
		[Token(Token = "0x4001E3C")]
		RightThumbstick,
		[Token(Token = "0x4001E3D")]
		RightThumbstickDown,
		[Token(Token = "0x4001E3E")]
		StartButton,
		[Token(Token = "0x4001E3F")]
		StartButtonDown,
		[Token(Token = "0x4001E40")]
		BackButton,
		[Token(Token = "0x4001E41")]
		BackButtonDown
	}
	[Token(Token = "0x2000570")]
	public enum GrabbedControllerBinding
	{
		[Token(Token = "0x4001E43")]
		None,
		[Token(Token = "0x4001E44")]
		Button1,
		[Token(Token = "0x4001E45")]
		Button1Down,
		[Token(Token = "0x4001E46")]
		Button2,
		[Token(Token = "0x4001E47")]
		Button2Down,
		[Token(Token = "0x4001E48")]
		Trigger,
		[Token(Token = "0x4001E49")]
		TriggerDown,
		[Token(Token = "0x4001E4A")]
		Grip,
		[Token(Token = "0x4001E4B")]
		GripDown
	}
	[Token(Token = "0x2000571")]
	public enum InputAxis
	{
		[Token(Token = "0x4001E4D")]
		None,
		[Token(Token = "0x4001E4E")]
		LeftThumbStickAxis,
		[Token(Token = "0x4001E4F")]
		LeftTouchPadAxis,
		[Token(Token = "0x4001E50")]
		RightThumbStickAxis,
		[Token(Token = "0x4001E51")]
		RightTouchPadAxis
	}
	[Token(Token = "0x2000572")]
	public enum ControllerType
	{
		[Token(Token = "0x4001E53")]
		None,
		[Token(Token = "0x4001E54")]
		Unknown,
		[Token(Token = "0x4001E55")]
		OculusTouch,
		[Token(Token = "0x4001E56")]
		Wand,
		[Token(Token = "0x4001E57")]
		Knuckles
	}
	[Token(Token = "0x2000573")]
	public enum HandControl
	{
		[Token(Token = "0x4001E59")]
		LeftGrip,
		[Token(Token = "0x4001E5A")]
		RightGrip,
		[Token(Token = "0x4001E5B")]
		LeftTrigger,
		[Token(Token = "0x4001E5C")]
		RightTrigger,
		[Token(Token = "0x4001E5D")]
		None
	}
	[Token(Token = "0x2000574")]
	public enum GrabButton
	{
		[Token(Token = "0x4001E5F")]
		Grip,
		[Token(Token = "0x4001E60")]
		Trigger,
		[Token(Token = "0x4001E61")]
		Inherit
	}
	[Token(Token = "0x2000575")]
	public enum HoldType
	{
		[Token(Token = "0x4001E63")]
		HoldDown,
		[Token(Token = "0x4001E64")]
		Toggle,
		[Token(Token = "0x4001E65")]
		Inherit
	}
	[Token(Token = "0x2000576")]
	public enum XRInputSource
	{
		[Token(Token = "0x4001E67")]
		XRInput,
		[Token(Token = "0x4001E68")]
		OVRInput,
		[Token(Token = "0x4001E69")]
		SteamVR,
		[Token(Token = "0x4001E6A")]
		Pico,
		[Token(Token = "0x4001E6B")]
		UnityInput
	}
	[Token(Token = "0x2000577")]
	public enum SDKProvider
	{
		[Token(Token = "0x4001E6D")]
		Unknown,
		[Token(Token = "0x4001E6E")]
		OculusSDK,
		[Token(Token = "0x4001E6F")]
		OpenVR
	}
	[Token(Token = "0x2000578")]
	public class InputBridge : MonoBehaviour
	{
		[Token(Token = "0x200072F")]
		public delegate void InputsUpdatedAction();

		[Token(Token = "0x2000730")]
		public delegate void ControllerFoundAction();

		[Token(Token = "0x2000731")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x821040", Offset = "0x821040")]
		private sealed class <changeOriginModeRoutine>d__167 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40027C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40027C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40027C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InputBridge <>4__this;

			[Token(Token = "0x40027C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public TrackingOriginModeFlags trackingOrigin;

			[Token(Token = "0x17000728")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60036D6")]
				[Address(RVA = "0xD9CF8C", Offset = "0xD9CF8C", VA = "0xD9CF8C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000729")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60036D8")]
				[Address(RVA = "0xD9CFF4", Offset = "0xD9CFF4", VA = "0xD9CFF4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60036D3")]
			[Address(RVA = "0xD9CB2C", Offset = "0xD9CB2C", VA = "0xD9CB2C")]
			[DebuggerHidden]
			public <changeOriginModeRoutine>d__167(int <>1__state)
			{
			}

			[Token(Token = "0x60036D4")]
			[Address(RVA = "0xD9CDB0", Offset = "0xD9CDB0", VA = "0xD9CDB0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60036D5")]
			[Address(RVA = "0xD9CDB4", Offset = "0xD9CDB4", VA = "0xD9CDB4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60036D7")]
			[Address(RVA = "0xD9CF94", Offset = "0xD9CF94", VA = "0xD9CF94", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000732")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x821050", Offset = "0x821050")]
		private sealed class <Vibrate>d__169 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40027C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40027C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40027C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float duration;

			[Token(Token = "0x1700072A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60036DC")]
				[Address(RVA = "0xD9CD40", Offset = "0xD9CD40", VA = "0xD9CD40", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700072B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60036DE")]
				[Address(RVA = "0xD9CDA8", Offset = "0xD9CDA8", VA = "0xD9CDA8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60036D9")]
			[Address(RVA = "0xD9CBD0", Offset = "0xD9CBD0", VA = "0xD9CBD0")]
			[DebuggerHidden]
			public <Vibrate>d__169(int <>1__state)
			{
			}

			[Token(Token = "0x60036DA")]
			[Address(RVA = "0xD9CC9C", Offset = "0xD9CC9C", VA = "0xD9CC9C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60036DB")]
			[Address(RVA = "0xD9CCA0", Offset = "0xD9CCA0", VA = "0xD9CCA0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60036DD")]
			[Address(RVA = "0xD9CD48", Offset = "0xD9CD48", VA = "0xD9CD48", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static InputBridge _instance;

		[Token(Token = "0x4001E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x828A04", Offset = "0x828A04")]
		[SerializeField]
		public XRInputSource InputSource;

		[Token(Token = "0x4001E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x828A50", Offset = "0x828A50")]
		public InputActionAsset actionSet;

		[Token(Token = "0x4001E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x828A9C", Offset = "0x828A9C")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x828A9C", Offset = "0x828A9C")]
		public TrackingOriginModeFlags TrackingOrigin;

		[Token(Token = "0x4001E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x828B0C", Offset = "0x828B0C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x828B0C", Offset = "0x828B0C")]
		public float ThumbstickDeadzoneX;

		[Token(Token = "0x4001E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x828B6C", Offset = "0x828B6C")]
		public float ThumbstickDeadzoneY;

		[Token(Token = "0x4001E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x828BA4", Offset = "0x828BA4")]
		public float LeftGrip;

		[Token(Token = "0x4001E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool LeftGripDown;

		[Token(Token = "0x4001E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float RightGrip;

		[Token(Token = "0x4001E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool RightGripDown;

		[Token(Token = "0x4001E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x828BDC", Offset = "0x828BDC")]
		public float LeftTrigger;

		[Token(Token = "0x4001E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool LeftTriggerNear;

		[Token(Token = "0x4001E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool LeftTriggerUp;

		[Token(Token = "0x4001E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		public bool LeftTriggerDown;

		[Token(Token = "0x4001E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float RightTrigger;

		[Token(Token = "0x4001E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool RightTriggerUp;

		[Token(Token = "0x4001E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool RightTriggerDown;

		[Token(Token = "0x4001E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		public bool RightTriggerNear;

		[Token(Token = "0x4001E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		public bool LeftThumbNear;

		[Token(Token = "0x4001E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool RightThumbNear;

		[Token(Token = "0x4001E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x828C14", Offset = "0x828C14")]
		public bool LeftThumbstickDown;

		[Token(Token = "0x4001E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
		public bool LeftThumbstickUp;

		[Token(Token = "0x4001E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x57")]
		public bool RightThumbstickDown;

		[Token(Token = "0x4001E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool RightThumbstickUp;

		[Token(Token = "0x4001E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		public bool LeftThumbstick;

		[Token(Token = "0x4001E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		public bool RightThumbstick;

		[Token(Token = "0x4001E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5B")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x828C4C", Offset = "0x828C4C")]
		public bool AButton;

		[Token(Token = "0x4001E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x828C84", Offset = "0x828C84")]
		public bool AButtonDown;

		[Token(Token = "0x4001E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
		public bool AButtonUp;

		[Token(Token = "0x4001E8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
		public bool BButton;

		[Token(Token = "0x4001E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5F")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x828CBC", Offset = "0x828CBC")]
		public bool BButtonDown;

		[Token(Token = "0x4001E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool BButtonUp;

		[Token(Token = "0x4001E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		public bool XButton;

		[Token(Token = "0x4001E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x828CF4", Offset = "0x828CF4")]
		public bool XButtonDown;

		[Token(Token = "0x4001E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		public bool XButtonUp;

		[Token(Token = "0x4001E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public bool YButton;

		[Token(Token = "0x4001E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		public bool YButtonDown;

		[Token(Token = "0x4001E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
		public bool YButtonUp;

		[Token(Token = "0x4001E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x67")]
		public bool StartButton;

		[Token(Token = "0x4001E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool StartButtonDown;

		[Token(Token = "0x4001E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool BackButton;

		[Token(Token = "0x4001E99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		public bool BackButtonDown;

		[Token(Token = "0x4001E9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x828D2C", Offset = "0x828D2C")]
		public Vector2 LeftThumbstickAxis;

		[Token(Token = "0x4001E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Vector2 RightThumbstickAxis;

		[Token(Token = "0x4001E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public Vector2 LeftTouchPadAxis;

		[Token(Token = "0x4001E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Vector2 RightTouchPadAxis;

		[Token(Token = "0x4001E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float _downThreshold;

		[Token(Token = "0x4001E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool SteamVRSupport;

		[Token(Token = "0x4001EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x828D64", Offset = "0x828D64")]
		public ControllerType ConnectedControllerType;

		[Token(Token = "0x4001EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x828D9C", Offset = "0x828D9C")]
		public bool HMDActive;

		[Token(Token = "0x4001EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x828DD4", Offset = "0x828DD4")]
		private SDKProvider <LoadedSDK>k__BackingField;

		[Token(Token = "0x4001EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x828DE4", Offset = "0x828DE4")]
		private bool <IsOculusDevice>k__BackingField;

		[Token(Token = "0x4001EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x828DF4", Offset = "0x828DF4")]
		private bool <IsOculusQuest>k__BackingField;

		[Token(Token = "0x4001EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA2")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x828E04", Offset = "0x828E04")]
		private bool <IsHTCDevice>k__BackingField;

		[Token(Token = "0x4001EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x828E14", Offset = "0x828E14")]
		private bool <IsPicoDevice>k__BackingField;

		[Token(Token = "0x4001EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x828E24", Offset = "0x828E24")]
		private bool <IsValveIndexController>k__BackingField;

		[Token(Token = "0x4001EA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA5")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x828E34", Offset = "0x828E34")]
		public bool SupportsBothTouchPadAndJoystick;

		[Token(Token = "0x4001EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA6")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x828E6C", Offset = "0x828E6C")]
		public bool SupportsIndexTouch;

		[Token(Token = "0x4001EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA7")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x828EA4", Offset = "0x828EA4")]
		public bool SupportsThumbTouch;

		[Token(Token = "0x4001EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static List<UnityEngine.XR.InputDevice> devices;

		[Token(Token = "0x4001EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private InputAction leftGrip;

		[Token(Token = "0x4001EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private InputAction leftTrigger;

		[Token(Token = "0x4001EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private InputAction leftTriggerNear;

		[Token(Token = "0x4001EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private InputAction rightGrip;

		[Token(Token = "0x4001EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private InputAction rightTrigger;

		[Token(Token = "0x4001EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private InputAction rightTriggerNear;

		[Token(Token = "0x4001EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private InputAction leftThumbstick;

		[Token(Token = "0x4001EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private InputAction leftThumbstickDown;

		[Token(Token = "0x4001EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private InputAction leftThumbNear;

		[Token(Token = "0x4001EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private InputAction leftTouchpad;

		[Token(Token = "0x4001EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private InputAction leftTouchpadDown;

		[Token(Token = "0x4001EB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private InputAction rightThumbstick;

		[Token(Token = "0x4001EBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private InputAction rightThumbstickDown;

		[Token(Token = "0x4001EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private InputAction rightThumbNear;

		[Token(Token = "0x4001EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private InputAction rightTouchpad;

		[Token(Token = "0x4001EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private InputAction rightTouchpadDown;

		[Token(Token = "0x4001EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private InputAction aButton;

		[Token(Token = "0x4001EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private InputAction bButton;

		[Token(Token = "0x4001EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private InputAction xButton;

		[Token(Token = "0x4001EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private InputAction yButton;

		[Token(Token = "0x4001EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private InputAction startButton;

		[Token(Token = "0x4001EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private InputAction backButton;

		[Token(Token = "0x4001EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[HideInInspector]
		public bool ShowInputDebugger;

		[Token(Token = "0x4001EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private UnityEngine.XR.InputDevice primaryLeftController;

		[Token(Token = "0x4001EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private UnityEngine.XR.InputDevice primaryRightController;

		[Token(Token = "0x4001EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private InputFeatureUsage<Vector2> thumbstickAxis;

		[Token(Token = "0x4001EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private InputFeatureUsage<Vector2> thumbstickAxisSecondary;

		[Token(Token = "0x4001EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private InputFeatureUsage<bool> thumbstickAxisClick;

		[Token(Token = "0x4001ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private bool setTrackingOrigin;

		[Token(Token = "0x17000689")]
		public static InputBridge Instance
		{
			[Token(Token = "0x6003016")]
			[Address(RVA = "0xD8B73C", Offset = "0xD8B73C", VA = "0xD8B73C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700068A")]
		public float DownThreshold
		{
			[Token(Token = "0x6003017")]
			[Address(RVA = "0xD98B14", Offset = "0xD98B14", VA = "0xD98B14")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700068B")]
		public SDKProvider LoadedSDK
		{
			[Token(Token = "0x6003018")]
			[Address(RVA = "0xD98B1C", Offset = "0xD98B1C", VA = "0xD98B1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833F20", Offset = "0x833F20")]
			get
			{
				return default(SDKProvider);
			}
			[Token(Token = "0x6003019")]
			[Address(RVA = "0xD98B24", Offset = "0xD98B24", VA = "0xD98B24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833F30", Offset = "0x833F30")]
			private set
			{
			}
		}

		[Token(Token = "0x1700068C")]
		public bool IsOculusDevice
		{
			[Token(Token = "0x600301A")]
			[Address(RVA = "0xD98B2C", Offset = "0xD98B2C", VA = "0xD98B2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833F40", Offset = "0x833F40")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600301B")]
			[Address(RVA = "0xD98B34", Offset = "0xD98B34", VA = "0xD98B34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833F50", Offset = "0x833F50")]
			private set
			{
			}
		}

		[Token(Token = "0x1700068D")]
		public bool IsOculusQuest
		{
			[Token(Token = "0x600301C")]
			[Address(RVA = "0xD98B40", Offset = "0xD98B40", VA = "0xD98B40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833F60", Offset = "0x833F60")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600301D")]
			[Address(RVA = "0xD98B48", Offset = "0xD98B48", VA = "0xD98B48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833F70", Offset = "0x833F70")]
			private set
			{
			}
		}

		[Token(Token = "0x1700068E")]
		public bool IsHTCDevice
		{
			[Token(Token = "0x600301E")]
			[Address(RVA = "0xD98B54", Offset = "0xD98B54", VA = "0xD98B54")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833F80", Offset = "0x833F80")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600301F")]
			[Address(RVA = "0xD98B5C", Offset = "0xD98B5C", VA = "0xD98B5C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833F90", Offset = "0x833F90")]
			private set
			{
			}
		}

		[Token(Token = "0x1700068F")]
		public bool IsPicoDevice
		{
			[Token(Token = "0x6003020")]
			[Address(RVA = "0xD98B68", Offset = "0xD98B68", VA = "0xD98B68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833FA0", Offset = "0x833FA0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6003021")]
			[Address(RVA = "0xD98B70", Offset = "0xD98B70", VA = "0xD98B70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833FB0", Offset = "0x833FB0")]
			private set
			{
			}
		}

		[Token(Token = "0x17000690")]
		public bool IsValveIndexController
		{
			[Token(Token = "0x6003022")]
			[Address(RVA = "0xD98B7C", Offset = "0xD98B7C", VA = "0xD98B7C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833FC0", Offset = "0x833FC0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6003023")]
			[Address(RVA = "0xD98B84", Offset = "0xD98B84", VA = "0xD98B84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833FD0", Offset = "0x833FD0")]
			private set
			{
			}
		}

		[Token(Token = "0x1400002C")]
		public static event InputsUpdatedAction OnInputsUpdated
		{
			[Token(Token = "0x6003024")]
			[Address(RVA = "0xD98B90", Offset = "0xD98B90", VA = "0xD98B90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833FE0", Offset = "0x833FE0")]
			add
			{
			}
			[Token(Token = "0x6003025")]
			[Address(RVA = "0xD98C80", Offset = "0xD98C80", VA = "0xD98C80")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x833FF0", Offset = "0x833FF0")]
			remove
			{
			}
		}

		[Token(Token = "0x1400002D")]
		public static event ControllerFoundAction OnControllerFound
		{
			[Token(Token = "0x6003026")]
			[Address(RVA = "0xD98D70", Offset = "0xD98D70", VA = "0xD98D70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x834000", Offset = "0x834000")]
			add
			{
			}
			[Token(Token = "0x6003027")]
			[Address(RVA = "0xD98E60", Offset = "0xD98E60", VA = "0xD98E60")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x834010", Offset = "0x834010")]
			remove
			{
			}
		}

		[Token(Token = "0x6003028")]
		[Address(RVA = "0xD98F50", Offset = "0xD98F50", VA = "0xD98F50")]
		private void Awake()
		{
		}

		[Token(Token = "0x6003029")]
		[Address(RVA = "0xD99290", Offset = "0xD99290", VA = "0xD99290")]
		private void Start()
		{
		}

		[Token(Token = "0x600302A")]
		[Address(RVA = "0xD992A4", Offset = "0xD992A4", VA = "0xD992A4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600302B")]
		[Address(RVA = "0xD993A0", Offset = "0xD993A0", VA = "0xD993A0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600302C")]
		[Address(RVA = "0xD9948C", Offset = "0xD9948C", VA = "0xD9948C")]
		private void Update()
		{
		}

		[Token(Token = "0x600302D")]
		[Address(RVA = "0xD994C4", Offset = "0xD994C4", VA = "0xD994C4", Slot = "4")]
		public virtual void UpdateInputs()
		{
		}

		[Token(Token = "0x600302E")]
		[Address(RVA = "0xD997B4", Offset = "0xD997B4", VA = "0xD997B4", Slot = "5")]
		public virtual void UpdateSteamInput()
		{
		}

		[Token(Token = "0x600302F")]
		[Address(RVA = "0xD997B8", Offset = "0xD997B8", VA = "0xD997B8", Slot = "6")]
		public virtual void UpdateXRInput()
		{
		}

		[Token(Token = "0x6003030")]
		[Address(RVA = "0xD9A658", Offset = "0xD9A658", VA = "0xD9A658", Slot = "7")]
		public virtual void UpdateUnityInput()
		{
		}

		[Token(Token = "0x6003031")]
		[Address(RVA = "0xD9AA9C", Offset = "0xD9AA9C", VA = "0xD9AA9C", Slot = "8")]
		public virtual void CreateUnityInputActions()
		{
		}

		[Token(Token = "0x6003032")]
		[Address(RVA = "0xD9AE98", Offset = "0xD9AE98", VA = "0xD9AE98", Slot = "9")]
		public virtual void EnableActions()
		{
		}

		[Token(Token = "0x6003033")]
		[Address(RVA = "0xD9B320", Offset = "0xD9B320", VA = "0xD9B320", Slot = "10")]
		public virtual void DisableActions()
		{
		}

		[Token(Token = "0x6003034")]
		[Address(RVA = "0xD9ADF4", Offset = "0xD9ADF4", VA = "0xD9ADF4")]
		public InputAction CreateInputAction(string actionName, string binding, bool valueType)
		{
			return null;
		}

		[Token(Token = "0x6003035")]
		[Address(RVA = "0xD9B7A8", Offset = "0xD9B7A8", VA = "0xD9B7A8", Slot = "11")]
		public virtual void UpdateOVRInput()
		{
		}

		[Token(Token = "0x6003036")]
		[Address(RVA = "0xD9B820", Offset = "0xD9B820", VA = "0xD9B820", Slot = "12")]
		public virtual void UpdatePicoInput()
		{
		}

		[Token(Token = "0x6003037")]
		[Address(RVA = "0xD9B824", Offset = "0xD9B824", VA = "0xD9B824", Slot = "13")]
		public virtual void UpdateDeviceActive()
		{
		}

		[Token(Token = "0x6003038")]
		[Address(RVA = "0xD9A560", Offset = "0xD9A560", VA = "0xD9A560")]
		private float correctValue(float inputValue)
		{
			return default(float);
		}

		[Token(Token = "0x6003039")]
		[Address(RVA = "0xD9B99C", Offset = "0xD9B99C", VA = "0xD9B99C")]
		public bool GetControllerBindingValue(ControllerBinding val)
		{
			return default(bool);
		}

		[Token(Token = "0x600303A")]
		[Address(RVA = "0xD9BAE0", Offset = "0xD9BAE0", VA = "0xD9BAE0")]
		public bool GetGrabbedControllerBinding(GrabbedControllerBinding val, ControllerHand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x600303B")]
		[Address(RVA = "0xD9BBF0", Offset = "0xD9BBF0", VA = "0xD9BBF0")]
		public Vector2 GetInputAxisValue(InputAxis val)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600303C")]
		[Address(RVA = "0xD9A3EC", Offset = "0xD9A3EC", VA = "0xD9A3EC")]
		private Vector2 ApplyDeadZones(Vector2 pos, float deadZoneX, float deadZoneY)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600303D")]
		[Address(RVA = "0xD9BCF4", Offset = "0xD9BCF4", VA = "0xD9BCF4")]
		private void onDeviceChanged(UnityEngine.XR.InputDevice inputDevice)
		{
		}

		[Token(Token = "0x600303E")]
		[Address(RVA = "0xD990D8", Offset = "0xD990D8", VA = "0xD990D8")]
		private void setDeviceProperties()
		{
		}

		[Token(Token = "0x600303F")]
		[Address(RVA = "0xD9BF34", Offset = "0xD9BF34", VA = "0xD9BF34", Slot = "14")]
		public virtual bool GetSupportsIndexTouch()
		{
			return default(bool);
		}

		[Token(Token = "0x6003040")]
		[Address(RVA = "0xD9BF3C", Offset = "0xD9BF3C", VA = "0xD9BF3C", Slot = "15")]
		public virtual SDKProvider GetLoadedSDK()
		{
			return default(SDKProvider);
		}

		[Token(Token = "0x6003041")]
		[Address(RVA = "0xD9BFE8", Offset = "0xD9BFE8", VA = "0xD9BFE8", Slot = "16")]
		public virtual bool GetSupportsThumbTouch()
		{
			return default(bool);
		}

		[Token(Token = "0x6003042")]
		[Address(RVA = "0xD9C008", Offset = "0xD9C008", VA = "0xD9C008", Slot = "17")]
		public virtual bool GetIsOculusDevice()
		{
			return default(bool);
		}

		[Token(Token = "0x6003043")]
		[Address(RVA = "0xD9C0C0", Offset = "0xD9C0C0", VA = "0xD9C0C0", Slot = "18")]
		public virtual bool GetIsOculusQuest()
		{
			return default(bool);
		}

		[Token(Token = "0x6003044")]
		[Address(RVA = "0xD9C1E4", Offset = "0xD9C1E4", VA = "0xD9C1E4", Slot = "19")]
		public virtual bool GetIsHTCDevice()
		{
			return default(bool);
		}

		[Token(Token = "0x6003045")]
		[Address(RVA = "0xD9C27C", Offset = "0xD9C27C", VA = "0xD9C27C", Slot = "20")]
		public virtual bool GetIsPicoDevice()
		{
			return default(bool);
		}

		[Token(Token = "0x6003046")]
		[Address(RVA = "0xD9B8E8", Offset = "0xD9B8E8", VA = "0xD9B8E8")]
		public UnityEngine.XR.InputDevice GetHMD()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x6003047")]
		[Address(RVA = "0xD9C2F8", Offset = "0xD9C2F8", VA = "0xD9C2F8")]
		public string GetHMDName()
		{
			return null;
		}

		[Token(Token = "0x6003048")]
		[Address(RVA = "0xD9C324", Offset = "0xD9C324", VA = "0xD9C324")]
		public Vector3 GetHMDLocalPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6003049")]
		[Address(RVA = "0xD9C3C0", Offset = "0xD9C3C0", VA = "0xD9C3C0")]
		public Quaternion GetHMDLocalRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600304A")]
		[Address(RVA = "0xD9A214", Offset = "0xD9A214", VA = "0xD9A214")]
		public UnityEngine.XR.InputDevice GetLeftController()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x600304B")]
		[Address(RVA = "0xD9A2C8", Offset = "0xD9A2C8", VA = "0xD9A2C8")]
		public UnityEngine.XR.InputDevice GetRightController()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x600304C")]
		[Address(RVA = "0xD9C458", Offset = "0xD9C458", VA = "0xD9C458")]
		public Vector3 GetControllerLocalPosition(ControllerHand handSide)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600304D")]
		[Address(RVA = "0xD9C540", Offset = "0xD9C540", VA = "0xD9C540")]
		public Quaternion GetControllerLocalRotation(ControllerHand handSide)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600304E")]
		[Address(RVA = "0xD9C628", Offset = "0xD9C628", VA = "0xD9C628", Slot = "21")]
		public virtual ControllerType GetControllerType()
		{
			return default(ControllerType);
		}

		[Token(Token = "0x600304F")]
		[Address(RVA = "0xD9C65C", Offset = "0xD9C65C", VA = "0xD9C65C")]
		public Vector3 GetControllerVelocity(ControllerHand hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6003050")]
		[Address(RVA = "0xD9C754", Offset = "0xD9C754", VA = "0xD9C754")]
		public Vector3 GetControllerAngularVelocity(ControllerHand hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6003051")]
		[Address(RVA = "0xD9C80C", Offset = "0xD9C80C", VA = "0xD9C80C", Slot = "22")]
		public virtual string GetControllerName()
		{
			return null;
		}

		[Token(Token = "0x6003052")]
		[Address(RVA = "0xD9C938", Offset = "0xD9C938", VA = "0xD9C938", Slot = "23")]
		public virtual bool GetIsValveIndexController()
		{
			return default(bool);
		}

		[Token(Token = "0x6003053")]
		[Address(RVA = "0xD9A4C4", Offset = "0xD9A4C4", VA = "0xD9A4C4")]
		private float getFeatureUsage(UnityEngine.XR.InputDevice device, InputFeatureUsage<float> usage, bool clamp = true)
		{
			return default(float);
		}

		[Token(Token = "0x6003054")]
		[Address(RVA = "0xD9A37C", Offset = "0xD9A37C", VA = "0xD9A37C")]
		private bool getFeatureUsage(UnityEngine.XR.InputDevice device, InputFeatureUsage<bool> usage)
		{
			return default(bool);
		}

		[Token(Token = "0x6003055")]
		[Address(RVA = "0xD9A3B4", Offset = "0xD9A3B4", VA = "0xD9A3B4")]
		private Vector2 getFeatureUsage(UnityEngine.XR.InputDevice device, InputFeatureUsage<Vector2> usage)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6003056")]
		[Address(RVA = "0xD9C714", Offset = "0xD9C714", VA = "0xD9C714")]
		private Vector3 getFeatureUsage(UnityEngine.XR.InputDevice device, InputFeatureUsage<Vector3> usage)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6003057")]
		[Address(RVA = "0xD9CA14", Offset = "0xD9CA14", VA = "0xD9CA14", Slot = "24")]
		public virtual void SetTrackingOriginMode(TrackingOriginModeFlags trackingOrigin)
		{
		}

		[Token(Token = "0x6003058")]
		[Address(RVA = "0xD9CAAC", Offset = "0xD9CAAC", VA = "0xD9CAAC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x834020", Offset = "0x834020")]
		private IEnumerator changeOriginModeRoutine(TrackingOriginModeFlags trackingOrigin)
		{
			return null;
		}

		[Token(Token = "0x6003059")]
		[Address(RVA = "0xD8BA2C", Offset = "0xD8BA2C", VA = "0xD8BA2C")]
		public void VibrateController(float frequency, float amplitude, float duration, ControllerHand hand)
		{
		}

		[Token(Token = "0x600305A")]
		[Address(RVA = "0xD9CB58", Offset = "0xD9CB58", VA = "0xD9CB58")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x834084", Offset = "0x834084")]
		private IEnumerator Vibrate(float frequency, float amplitude, float duration, ControllerHand hand)
		{
			return null;
		}

		[Token(Token = "0x600305B")]
		[Address(RVA = "0xD9CBFC", Offset = "0xD9CBFC", VA = "0xD9CBFC")]
		public InputBridge()
		{
		}
	}
	[Token(Token = "0x2000579")]
	public class JoystickControl : MonoBehaviour
	{
		[Token(Token = "0x4001ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x828F0C", Offset = "0x828F0C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x828F0C", Offset = "0x828F0C")]
		public float DeadZone;

		[Token(Token = "0x4001ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float MinDegrees;

		[Token(Token = "0x4001ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float MaxDegrees;

		[Token(Token = "0x4001ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float LeverPercentageX;

		[Token(Token = "0x4001ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float LeverPercentageY;

		[Token(Token = "0x4001ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector2 LeverVector;

		[Token(Token = "0x4001ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool UseSmoothLook;

		[Token(Token = "0x4001ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float SmoothLookSpeed;

		[Token(Token = "0x4001ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool KinematicWhileInactive;

		[Token(Token = "0x4001ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public FloatFloatEvent onJoystickChange;

		[Token(Token = "0x4001ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector2Event onJoystickVectorChange;

		[Token(Token = "0x4001ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Grabbable grab;

		[Token(Token = "0x4001ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody rb;

		[Token(Token = "0x4001ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 currentRotation;

		[Token(Token = "0x4001ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float angleX;

		[Token(Token = "0x4001EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float angleY;

		[Token(Token = "0x600305D")]
		[Address(RVA = "0xD9D6B0", Offset = "0xD9D6B0", VA = "0xD9D6B0")]
		private void Start()
		{
		}

		[Token(Token = "0x600305E")]
		[Address(RVA = "0xD9D720", Offset = "0xD9D720", VA = "0xD9D720")]
		private void Update()
		{
		}

		[Token(Token = "0x600305F")]
		[Address(RVA = "0xD9DBC4", Offset = "0xD9DBC4", VA = "0xD9DBC4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6003060")]
		[Address(RVA = "0xD9DBC8", Offset = "0xD9DBC8", VA = "0xD9DBC8")]
		private void doJoystickLook()
		{
		}

		[Token(Token = "0x6003061")]
		[Address(RVA = "0xD9DFD8", Offset = "0xD9DFD8", VA = "0xD9DFD8", Slot = "4")]
		public virtual void OnJoystickChange(float leverX, float leverY)
		{
		}

		[Token(Token = "0x6003062")]
		[Address(RVA = "0xD9E054", Offset = "0xD9E054", VA = "0xD9E054", Slot = "5")]
		public virtual void OnJoystickChange(Vector2 joystickVector)
		{
		}

		[Token(Token = "0x6003063")]
		[Address(RVA = "0xD9E0D0", Offset = "0xD9E0D0", VA = "0xD9E0D0")]
		public JoystickControl()
		{
		}
	}
	[Token(Token = "0x200057A")]
	public class Lever : MonoBehaviour
	{
		[Token(Token = "0x4001EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x828F6C", Offset = "0x828F6C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x828F6C", Offset = "0x828F6C")]
		public float MinimumXRotation;

		[Token(Token = "0x4001EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x828FCC", Offset = "0x828FCC")]
		public float MaximumXRotation;

		[Token(Token = "0x4001EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x829004", Offset = "0x829004")]
		public float InitialXRotation;

		[Token(Token = "0x4001EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82903C", Offset = "0x82903C")]
		public AudioClip SwitchOnSound;

		[Token(Token = "0x4001EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioClip SwitchOffSound;

		[Token(Token = "0x4001EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x829074", Offset = "0x829074")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x829074", Offset = "0x829074")]
		public float SwitchTolerance;

		[Token(Token = "0x4001EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8290D4", Offset = "0x8290D4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8290D4", Offset = "0x8290D4")]
		public bool UseSmoothLook;

		[Token(Token = "0x4001EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x829134", Offset = "0x829134")]
		public float SmoothLookSpeed;

		[Token(Token = "0x4001EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82916C", Offset = "0x82916C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82916C", Offset = "0x82916C")]
		public bool AllowPhysicsForces;

		[Token(Token = "0x4001EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8291CC", Offset = "0x8291CC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8291CC", Offset = "0x8291CC")]
		public bool ReturnToCenter;

		[Token(Token = "0x4001EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82922C", Offset = "0x82922C")]
		public float ReturnLookSpeed;

		[Token(Token = "0x4001EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x829264", Offset = "0x829264")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x829264", Offset = "0x829264")]
		public bool SnapToGrabber;

		[Token(Token = "0x4001EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8292C4", Offset = "0x8292C4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8292C4", Offset = "0x8292C4")]
		public bool DropLeverOnActivation;

		[Token(Token = "0x4001EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x829324", Offset = "0x829324")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x829324", Offset = "0x829324")]
		public float LeverPercentage;

		[Token(Token = "0x4001EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x829384", Offset = "0x829384")]
		public bool ShowEditorGizmos;

		[Token(Token = "0x4001EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8293BC", Offset = "0x8293BC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8293BC", Offset = "0x8293BC")]
		public UnityEvent onLeverDown;

		[Token(Token = "0x4001EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82941C", Offset = "0x82941C")]
		public UnityEvent onLeverUp;

		[Token(Token = "0x4001EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x829454", Offset = "0x829454")]
		public FloatEvent onLeverChange;

		[Token(Token = "0x4001EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Grabbable grab;

		[Token(Token = "0x4001EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody rb;

		[Token(Token = "0x4001EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private AudioSource audioSource;

		[Token(Token = "0x4001EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool switchedOn;

		[Token(Token = "0x4001EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private ConfigurableJoint configJoint;

		[Token(Token = "0x4001EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private HingeJoint hingedJoint;

		[Token(Token = "0x4001EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 _lastLocalAngle;

		[Token(Token = "0x4001EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Quaternion initialOffset;

		[Token(Token = "0x6003064")]
		[Address(RVA = "0xD9ED7C", Offset = "0xD9ED7C", VA = "0xD9ED7C")]
		private void Start()
		{
		}

		[Token(Token = "0x6003065")]
		[Address(RVA = "0xD9EEFC", Offset = "0xD9EEFC", VA = "0xD9EEFC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6003066")]
		[Address(RVA = "0xD9EF68", Offset = "0xD9EF68", VA = "0xD9EF68")]
		private void Update()
		{
		}

		[Token(Token = "0x6003067")]
		[Address(RVA = "0xD9F15C", Offset = "0xD9F15C", VA = "0xD9F15C", Slot = "4")]
		public virtual float GetAnglePercentage(float currentAngle)
		{
			return default(float);
		}

		[Token(Token = "0x6003068")]
		[Address(RVA = "0xD9F320", Offset = "0xD9F320", VA = "0xD9F320")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6003069")]
		[Address(RVA = "0xD9F324", Offset = "0xD9F324", VA = "0xD9F324")]
		private void doLeverLook()
		{
		}

		[Token(Token = "0x600306A")]
		[Address(RVA = "0xD9F89C", Offset = "0xD9F89C", VA = "0xD9F89C", Slot = "5")]
		public virtual void SetLeverAngle(float angle)
		{
		}

		[Token(Token = "0x600306B")]
		[Address(RVA = "0xD9F97C", Offset = "0xD9F97C", VA = "0xD9F97C", Slot = "6")]
		public virtual void OnLeverChange(float percentage)
		{
		}

		[Token(Token = "0x600306C")]
		[Address(RVA = "0xD9F9F0", Offset = "0xD9F9F0", VA = "0xD9F9F0", Slot = "7")]
		public virtual void OnLeverDown()
		{
		}

		[Token(Token = "0x600306D")]
		[Address(RVA = "0xD9FB10", Offset = "0xD9FB10", VA = "0xD9FB10", Slot = "8")]
		public virtual void OnLeverUp()
		{
		}

		[Token(Token = "0x600306E")]
		[Address(RVA = "0xD9FC34", Offset = "0xD9FC34", VA = "0xD9FC34")]
		public Lever()
		{
		}
	}
	[Token(Token = "0x200057B")]
	public class LocomotionManager : MonoBehaviour
	{
		[Token(Token = "0x4001EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82948C", Offset = "0x82948C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82948C", Offset = "0x82948C")]
		public LocomotionType DefaultLocomotion;

		[Token(Token = "0x4001EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private LocomotionType selectedLocomotion;

		[Token(Token = "0x4001EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8294EC", Offset = "0x8294EC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8294EC", Offset = "0x8294EC")]
		public bool LoadLocomotionFromPrefs;

		[Token(Token = "0x4001EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82954C", Offset = "0x82954C")]
		public List<ControllerBinding> locomotionToggleInput;

		[Token(Token = "0x4001EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x829584", Offset = "0x829584")]
		public InputActionReference LocomotionToggleAction;

		[Token(Token = "0x4001EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private BNGPlayerController player;

		[Token(Token = "0x4001EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private PlayerTeleport teleport;

		[Token(Token = "0x4001EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x4001EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool actionToggle;

		[Token(Token = "0x17000691")]
		public LocomotionType SelectedLocomotion
		{
			[Token(Token = "0x600306F")]
			[Address(RVA = "0xB54768", Offset = "0xB54768", VA = "0xB54768")]
			get
			{
				return default(LocomotionType);
			}
		}

		[Token(Token = "0x6003070")]
		[Address(RVA = "0xB54770", Offset = "0xB54770", VA = "0xB54770")]
		private void Start()
		{
		}

		[Token(Token = "0x6003071")]
		[Address(RVA = "0xB54898", Offset = "0xB54898", VA = "0xB54898")]
		private void Update()
		{
		}

		[Token(Token = "0x6003072")]
		[Address(RVA = "0xB548D0", Offset = "0xB548D0", VA = "0xB548D0", Slot = "4")]
		public virtual void CheckControllerToggleInput()
		{
		}

		[Token(Token = "0x6003073")]
		[Address(RVA = "0xB54A18", Offset = "0xB54A18", VA = "0xB54A18")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6003074")]
		[Address(RVA = "0xB54B20", Offset = "0xB54B20", VA = "0xB54B20")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6003075")]
		[Address(RVA = "0xB54C28", Offset = "0xB54C28", VA = "0xB54C28")]
		public void OnLocomotionToggle(InputAction.CallbackContext context)
		{
		}

		[Token(Token = "0x6003076")]
		[Address(RVA = "0xB549F4", Offset = "0xB549F4", VA = "0xB549F4")]
		public void LocomotionToggle()
		{
		}

		[Token(Token = "0x6003077")]
		[Address(RVA = "0xB54C34", Offset = "0xB54C34", VA = "0xB54C34")]
		public void UpdateTeleportStatus()
		{
		}

		[Token(Token = "0x6003078")]
		[Address(RVA = "0xB54818", Offset = "0xB54818", VA = "0xB54818")]
		public void ChangeLocomotion(LocomotionType locomotionType, bool save)
		{
		}

		[Token(Token = "0x6003079")]
		[Address(RVA = "0xB54C60", Offset = "0xB54C60", VA = "0xB54C60")]
		public void ChangeLocomotionType(LocomotionType loc)
		{
		}

		[Token(Token = "0x600307A")]
		[Address(RVA = "0xB54D6C", Offset = "0xB54D6C", VA = "0xB54D6C")]
		private void toggleTeleport(bool enabled)
		{
		}

		[Token(Token = "0x600307B")]
		[Address(RVA = "0xB54D9C", Offset = "0xB54D9C", VA = "0xB54D9C")]
		private void toggleSmoothLocomotion(bool enabled)
		{
		}

		[Token(Token = "0x600307C")]
		[Address(RVA = "0xB54E58", Offset = "0xB54E58", VA = "0xB54E58")]
		public void ToggleLocomotionType()
		{
		}

		[Token(Token = "0x600307D")]
		[Address(RVA = "0xB54E74", Offset = "0xB54E74", VA = "0xB54E74")]
		public LocomotionManager()
		{
		}
	}
	[Token(Token = "0x200057C")]
	public class PlayerClimbing : MonoBehaviour
	{
		[Token(Token = "0x4001EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8295BC", Offset = "0x8295BC")]
		public Transform LeftControllerTransform;

		[Token(Token = "0x4001EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform RightControllerTransform;

		[Token(Token = "0x4001F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8295F4", Offset = "0x8295F4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8295F4", Offset = "0x8295F4")]
		public float ClimbingCapsuleHeight;

		[Token(Token = "0x4001F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x829654", Offset = "0x829654")]
		public float ClimbingCapsuleCenter;

		[Token(Token = "0x4001F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82968C", Offset = "0x82968C")]
		public bool ApplyHapticsOnGrab;

		[Token(Token = "0x4001F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8296C4", Offset = "0x8296C4")]
		public float VibrateFrequency;

		[Token(Token = "0x4001F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8296FC", Offset = "0x8296FC")]
		public float VibrateAmplitude;

		[Token(Token = "0x4001F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x829734", Offset = "0x829734")]
		public float VibrateDuration;

		[Token(Token = "0x4001F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Grabber> climbers;

		[Token(Token = "0x4001F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool wasGrippingClimbable;

		[Token(Token = "0x4001F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CharacterController characterController;

		[Token(Token = "0x4001F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x4001F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private PlayerGravity playerGravity;

		[Token(Token = "0x4001F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82976C", Offset = "0x82976C")]
		public bool GrippingClimbable;

		[Token(Token = "0x4001F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 moveDirection;

		[Token(Token = "0x4001F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 previousLeftControllerPosition;

		[Token(Token = "0x4001F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 previousRightControllerPosition;

		[Token(Token = "0x4001F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 controllerMoveAmount;

		[Token(Token = "0x600307E")]
		[Address(RVA = "0xB57AAC", Offset = "0xB57AAC", VA = "0xB57AAC")]
		public void Start()
		{
		}

		[Token(Token = "0x600307F")]
		[Address(RVA = "0xB57B5C", Offset = "0xB57B5C", VA = "0xB57B5C")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x6003080")]
		[Address(RVA = "0xB57C50", Offset = "0xB57C50", VA = "0xB57C50", Slot = "4")]
		public virtual void AddClimber(Climbable climbable, Grabber grab)
		{
		}

		[Token(Token = "0x6003081")]
		[Address(RVA = "0xB57F00", Offset = "0xB57F00", VA = "0xB57F00", Slot = "5")]
		public virtual void RemoveClimber(Grabber grab)
		{
		}

		[Token(Token = "0x6003082")]
		[Address(RVA = "0xB57FFC", Offset = "0xB57FFC", VA = "0xB57FFC", Slot = "6")]
		public virtual bool GrippingAtLeastOneClimbable()
		{
			return default(bool);
		}

		[Token(Token = "0x6003083")]
		[Address(RVA = "0xB58144", Offset = "0xB58144", VA = "0xB58144", Slot = "7")]
		protected virtual void checkClimbing()
		{
		}

		[Token(Token = "0x6003084")]
		[Address(RVA = "0xB585BC", Offset = "0xB585BC", VA = "0xB585BC")]
		private void onGrabbedClimbable()
		{
		}

		[Token(Token = "0x6003085")]
		[Address(RVA = "0xB5869C", Offset = "0xB5869C", VA = "0xB5869C")]
		private void onReleasedClimbable()
		{
		}

		[Token(Token = "0x6003086")]
		[Address(RVA = "0xB5883C", Offset = "0xB5883C", VA = "0xB5883C")]
		public PlayerClimbing()
		{
		}
	}
	[Token(Token = "0x200057D")]
	public class PlayerGravity : MonoBehaviour
	{
		[Token(Token = "0x4001F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8297A4", Offset = "0x8297A4")]
		public bool GravityEnabled;

		[Token(Token = "0x4001F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8297DC", Offset = "0x8297DC")]
		public Vector3 Gravity;

		[Token(Token = "0x4001F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CharacterController characterController;

		[Token(Token = "0x4001F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x4001F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody playerRigidbody;

		[Token(Token = "0x4001F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float _movementY;

		[Token(Token = "0x4001F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 _initialGravityModifier;

		[Token(Token = "0x4001F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool _validRigidBody;

		[Token(Token = "0x6003087")]
		[Address(RVA = "0xB588E0", Offset = "0xB588E0", VA = "0xB588E0")]
		private void Start()
		{
		}

		[Token(Token = "0x6003088")]
		[Address(RVA = "0xB589B4", Offset = "0xB589B4", VA = "0xB589B4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6003089")]
		[Address(RVA = "0xB58BE0", Offset = "0xB58BE0", VA = "0xB58BE0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600308A")]
		[Address(RVA = "0xB587A0", Offset = "0xB587A0", VA = "0xB587A0")]
		public void ToggleGravity(bool gravityOn)
		{
		}

		[Token(Token = "0x600308B")]
		[Address(RVA = "0xB58CD8", Offset = "0xB58CD8", VA = "0xB58CD8")]
		public PlayerGravity()
		{
		}
	}
	[Token(Token = "0x200057E")]
	public class PlayerMovingPlatformSupport : MonoBehaviour
	{
		[Token(Token = "0x4001F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x829814", Offset = "0x829814")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x829814", Offset = "0x829814")]
		public LayerMask GroundedLayers;

		[Token(Token = "0x4001F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		protected RaycastHit groundHit;

		[Token(Token = "0x4001F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x4001F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CharacterController characterController;

		[Token(Token = "0x4001F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform _initialCharacterParent;

		[Token(Token = "0x4001F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected float DistanceFromGround;

		[Token(Token = "0x4001F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private MovingPlatform currentPlatform;

		[Token(Token = "0x4001F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool wasOnPlatform;

		[Token(Token = "0x4001F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool requiresReparent;

		[Token(Token = "0x600308C")]
		[Address(RVA = "0xB58D14", Offset = "0xB58D14", VA = "0xB58D14")]
		private void Start()
		{
		}

		[Token(Token = "0x600308D")]
		[Address(RVA = "0xB58DA4", Offset = "0xB58DA4", VA = "0xB58DA4")]
		private void Update()
		{
		}

		[Token(Token = "0x600308E")]
		[Address(RVA = "0xB58DB0", Offset = "0xB58DB0", VA = "0xB58DB0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600308F")]
		[Address(RVA = "0xB58DBC", Offset = "0xB58DBC", VA = "0xB58DBC", Slot = "4")]
		public virtual void CheckMovingPlatform()
		{
		}

		[Token(Token = "0x6003090")]
		[Address(RVA = "0xB590DC", Offset = "0xB590DC", VA = "0xB590DC", Slot = "5")]
		public virtual void UpdateDistanceFromGround()
		{
		}

		[Token(Token = "0x6003091")]
		[Address(RVA = "0xB594E0", Offset = "0xB594E0", VA = "0xB594E0")]
		public PlayerMovingPlatformSupport()
		{
		}
	}
	[Token(Token = "0x200057F")]
	public enum RotationMechanic
	{
		[Token(Token = "0x4001F22")]
		Snap,
		[Token(Token = "0x4001F23")]
		Smooth
	}
	[Token(Token = "0x2000580")]
	public class PlayerRotation : MonoBehaviour
	{
		[Token(Token = "0x2000733")]
		public delegate void OnBeforeRotateAction();

		[Token(Token = "0x2000734")]
		public delegate void OnAfterRotateAction();

		[Token(Token = "0x4001F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x829874", Offset = "0x829874")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x829874", Offset = "0x829874")]
		public bool AllowInput;

		[Token(Token = "0x4001F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8298D4", Offset = "0x8298D4")]
		public List<InputAxis> inputAxis;

		[Token(Token = "0x4001F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82990C", Offset = "0x82990C")]
		public InputActionReference RotateAction;

		[Token(Token = "0x4001F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x829944", Offset = "0x829944")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x829944", Offset = "0x829944")]
		public RotationMechanic RotationType;

		[Token(Token = "0x4001F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8299A4", Offset = "0x8299A4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8299A4", Offset = "0x8299A4")]
		public float SnapRotationAmount;

		[Token(Token = "0x4001F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x829A04", Offset = "0x829A04")]
		public float SnapInputAmount;

		[Token(Token = "0x4001F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x829A3C", Offset = "0x829A3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x829A3C", Offset = "0x829A3C")]
		public float SmoothTurnSpeed;

		[Token(Token = "0x4001F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x829A9C", Offset = "0x829A9C")]
		public float SmoothTurnMinInput;

		[Token(Token = "0x4001F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float recentSnapTurnTime;

		[Token(Token = "0x4001F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float rotationAmount;

		[Token(Token = "0x4001F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float xAxis;

		[Token(Token = "0x4001F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float previousXInput;

		[Token(Token = "0x1400002E")]
		public static event OnBeforeRotateAction OnBeforeRotate
		{
			[Token(Token = "0x6003092")]
			[Address(RVA = "0xB594E8", Offset = "0xB594E8", VA = "0xB594E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8340E8", Offset = "0x8340E8")]
			add
			{
			}
			[Token(Token = "0x6003093")]
			[Address(RVA = "0xB5959C", Offset = "0xB5959C", VA = "0xB5959C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8340F8", Offset = "0x8340F8")]
			remove
			{
			}
		}

		[Token(Token = "0x1400002F")]
		public static event OnAfterRotateAction OnAfterRotate
		{
			[Token(Token = "0x6003094")]
			[Address(RVA = "0xB59650", Offset = "0xB59650", VA = "0xB59650")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x834108", Offset = "0x834108")]
			add
			{
			}
			[Token(Token = "0x6003095")]
			[Address(RVA = "0xB59708", Offset = "0xB59708", VA = "0xB59708")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x834118", Offset = "0x834118")]
			remove
			{
			}
		}

		[Token(Token = "0x6003096")]
		[Address(RVA = "0xB597C0", Offset = "0xB597C0", VA = "0xB597C0")]
		private void Update()
		{
		}

		[Token(Token = "0x6003097")]
		[Address(RVA = "0xB59828", Offset = "0xB59828", VA = "0xB59828", Slot = "4")]
		public virtual float GetAxisInput()
		{
			return default(float);
		}

		[Token(Token = "0x6003098")]
		[Address(RVA = "0xB599B4", Offset = "0xB599B4", VA = "0xB599B4", Slot = "5")]
		public virtual void DoSnapRotation(float xInput)
		{
		}

		[Token(Token = "0x6003099")]
		[Address(RVA = "0xB59FC0", Offset = "0xB59FC0", VA = "0xB59FC0", Slot = "6")]
		public virtual bool RecentlySnapTurned()
		{
			return default(bool);
		}

		[Token(Token = "0x600309A")]
		[Address(RVA = "0xB59FFC", Offset = "0xB59FFC", VA = "0xB59FFC", Slot = "7")]
		public virtual void DoSmoothRotation(float xInput)
		{
		}

		[Token(Token = "0x600309B")]
		[Address(RVA = "0xB5A158", Offset = "0xB5A158", VA = "0xB5A158")]
		public PlayerRotation()
		{
		}
	}
	[Token(Token = "0x2000581")]
	public enum TeleportControls
	{
		[Token(Token = "0x4001F33")]
		ThumbstickRotate,
		[Token(Token = "0x4001F34")]
		ThumbstickDown,
		[Token(Token = "0x4001F35")]
		BButton
	}
	[Token(Token = "0x2000582")]
	public class PlayerTeleport : MonoBehaviour
	{
		[Token(Token = "0x2000735")]
		public delegate void OnBeforeTeleportFadeAction();

		[Token(Token = "0x2000736")]
		public delegate void OnBeforeTeleportAction();

		[Token(Token = "0x2000737")]
		public delegate void OnAfterTeleportAction();

		[Token(Token = "0x2000738")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x821060", Offset = "0x821060")]
		private sealed class <doTeleport>d__71 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40027C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40027CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40027CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlayerTeleport <>4__this;

			[Token(Token = "0x40027CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 playerDestination;

			[Token(Token = "0x40027CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public bool rotatePlayer;

			[Token(Token = "0x40027CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Quaternion playerRotation;

			[Token(Token = "0x1700072C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60036F6")]
				[Address(RVA = "0xB5CFD0", Offset = "0xB5CFD0", VA = "0xB5CFD0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700072D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60036F8")]
				[Address(RVA = "0xB5D038", Offset = "0xB5D038", VA = "0xB5D038", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60036F3")]
			[Address(RVA = "0xB5C740", Offset = "0xB5C740", VA = "0xB5C740")]
			[DebuggerHidden]
			public <doTeleport>d__71(int <>1__state)
			{
			}

			[Token(Token = "0x60036F4")]
			[Address(RVA = "0xB5CCD4", Offset = "0xB5CCD4", VA = "0xB5CCD4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60036F5")]
			[Address(RVA = "0xB5CCD8", Offset = "0xB5CCD8", VA = "0xB5CCD8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60036F7")]
			[Address(RVA = "0xB5CFD8", Offset = "0xB5CFD8", VA = "0xB5CFD8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x829AF4", Offset = "0x829AF4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x829AF4", Offset = "0x829AF4")]
		public LineRenderer TeleportLine;

		[Token(Token = "0x4001F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x829B54", Offset = "0x829B54")]
		public Color ValidTeleport;

		[Token(Token = "0x4001F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x829B8C", Offset = "0x829B8C")]
		public Color InvalidTeleport;

		[Token(Token = "0x4001F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x829BC4", Offset = "0x829BC4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x829BC4", Offset = "0x829BC4")]
		public ControllerHand HandSide;

		[Token(Token = "0x4001F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x829C24", Offset = "0x829C24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x829C24", Offset = "0x829C24")]
		public Transform TeleportBeginTransform;

		[Token(Token = "0x4001F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x829C84", Offset = "0x829C84")]
		public Transform TeleportBeginTransformAlt;

		[Token(Token = "0x4001F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x829CBC", Offset = "0x829CBC")]
		public Transform TeleportDestination;

		[Token(Token = "0x4001F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x829CF4", Offset = "0x829CF4")]
		public TeleportDestination DestinationObject;

		[Token(Token = "0x4001F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x829D40", Offset = "0x829D40")]
		public GameObject TeleportMarker;

		[Token(Token = "0x4001F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x829D78", Offset = "0x829D78")]
		public Transform DirectionIndicator;

		[Token(Token = "0x4001F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x829DB0", Offset = "0x829DB0")]
		public float MaxRange;

		[Token(Token = "0x4001F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x829DE8", Offset = "0x829DE8")]
		public int SegmentCount;

		[Token(Token = "0x4001F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x829E20", Offset = "0x829E20")]
		public float SimulationVelocity;

		[Token(Token = "0x4001F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x829E58", Offset = "0x829E58")]
		public float SegmentScale;

		[Token(Token = "0x4001F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x829E90", Offset = "0x829E90")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x829E90", Offset = "0x829E90")]
		public LayerMask CollisionLayers;

		[Token(Token = "0x4001F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x829EF0", Offset = "0x829EF0")]
		public LayerMask ValidLayers;

		[Token(Token = "0x4001F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x829F28", Offset = "0x829F28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x829F28", Offset = "0x829F28")]
		public TeleportControls ControlType;

		[Token(Token = "0x4001F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x829F88", Offset = "0x829F88")]
		public bool AllowTeleportRotation;

		[Token(Token = "0x4001F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
		private bool _reachThumbThreshold;

		[Token(Token = "0x4001F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x829FC0", Offset = "0x829FC0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x829FC0", Offset = "0x829FC0")]
		public float MaxSlope;

		[Token(Token = "0x4001F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82A020", Offset = "0x82A020")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82A020", Offset = "0x82A020")]
		public bool FadeScreenOnTeleport;

		[Token(Token = "0x4001F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82A080", Offset = "0x82A080")]
		public float TeleportFadeSpeed;

		[Token(Token = "0x4001F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82A0B8", Offset = "0x82A0B8")]
		public float TeleportDelay;

		[Token(Token = "0x4001F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private CharacterController controller;

		[Token(Token = "0x4001F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private BNGPlayerController playerController;

		[Token(Token = "0x4001F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private InputBridge input;

		[Token(Token = "0x4001F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Transform cameraRig;

		[Token(Token = "0x4001F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private ScreenFader fader;

		[Token(Token = "0x4001F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private bool aimingTeleport;

		[Token(Token = "0x4001F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
		private bool validTeleport;

		[Token(Token = "0x4001F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD2")]
		private bool teleportationEnabled;

		[Token(Token = "0x4001F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private int _invalidFrames;

		[Token(Token = "0x4001F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private float _initialLineWidth;

		[Token(Token = "0x4001F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private bool setVariables;

		[Token(Token = "0x4001F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Collider _hitObject;

		[Token(Token = "0x4001F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Vector3 _hitVector;

		[Token(Token = "0x4001F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private float _hitAngle;

		[Token(Token = "0x4001F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private RaycastHit hit;

		[Token(Token = "0x17000692")]
		private Transform teleportTransform
		{
			[Token(Token = "0x600309C")]
			[Address(RVA = "0xB5A4E4", Offset = "0xB5A4E4", VA = "0xB5A4E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000693")]
		private Vector2 handedThumbstickAxis
		{
			[Token(Token = "0x600309D")]
			[Address(RVA = "0xB5A500", Offset = "0xB5A500", VA = "0xB5A500")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x14000030")]
		public static event OnBeforeTeleportFadeAction OnBeforeTeleportFade
		{
			[Token(Token = "0x600309E")]
			[Address(RVA = "0xB5A540", Offset = "0xB5A540", VA = "0xB5A540")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x834128", Offset = "0x834128")]
			add
			{
			}
			[Token(Token = "0x600309F")]
			[Address(RVA = "0xB5A5F4", Offset = "0xB5A5F4", VA = "0xB5A5F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x834138", Offset = "0x834138")]
			remove
			{
			}
		}

		[Token(Token = "0x14000031")]
		public static event OnBeforeTeleportAction OnBeforeTeleport
		{
			[Token(Token = "0x60030A0")]
			[Address(RVA = "0xB5A6A8", Offset = "0xB5A6A8", VA = "0xB5A6A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x834148", Offset = "0x834148")]
			add
			{
			}
			[Token(Token = "0x60030A1")]
			[Address(RVA = "0xB5A760", Offset = "0xB5A760", VA = "0xB5A760")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x834158", Offset = "0x834158")]
			remove
			{
			}
		}

		[Token(Token = "0x14000032")]
		public static event OnAfterTeleportAction OnAfterTeleport
		{
			[Token(Token = "0x60030A2")]
			[Address(RVA = "0xB5A818", Offset = "0xB5A818", VA = "0xB5A818")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x834168", Offset = "0x834168")]
			add
			{
			}
			[Token(Token = "0x60030A3")]
			[Address(RVA = "0xB5A8D0", Offset = "0xB5A8D0", VA = "0xB5A8D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x834178", Offset = "0x834178")]
			remove
			{
			}
		}

		[Token(Token = "0x60030A4")]
		[Address(RVA = "0xB5A988", Offset = "0xB5A988", VA = "0xB5A988")]
		private void Start()
		{
		}

		[Token(Token = "0x60030A5")]
		[Address(RVA = "0xB5A98C", Offset = "0xB5A98C", VA = "0xB5A98C")]
		private void setupVariables()
		{
		}

		[Token(Token = "0x60030A6")]
		[Address(RVA = "0xB5AC10", Offset = "0xB5AC10", VA = "0xB5AC10")]
		private void Update()
		{
		}

		[Token(Token = "0x60030A7")]
		[Address(RVA = "0xB5AD74", Offset = "0xB5AD74", VA = "0xB5AD74")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60030A8")]
		[Address(RVA = "0xB5AC78", Offset = "0xB5AC78", VA = "0xB5AC78")]
		public void DoCheckTeleport()
		{
		}

		[Token(Token = "0x60030A9")]
		[Address(RVA = "0xB5AD64", Offset = "0xB5AD64", VA = "0xB5AD64")]
		public void TryOrHideTeleport()
		{
		}

		[Token(Token = "0x60030AA")]
		[Address(RVA = "0xB54E40", Offset = "0xB54E40", VA = "0xB54E40")]
		public void EnableTeleportation()
		{
		}

		[Token(Token = "0x60030AB")]
		[Address(RVA = "0xB54E4C", Offset = "0xB54E4C", VA = "0xB54E4C")]
		public void DisableTeleportation()
		{
		}

		[Token(Token = "0x60030AC")]
		[Address(RVA = "0xB5AD84", Offset = "0xB5AD84", VA = "0xB5AD84")]
		private void calculateParabola()
		{
		}

		[Token(Token = "0x60030AD")]
		[Address(RVA = "0xB5B8F4", Offset = "0xB5B8F4", VA = "0xB5B8F4")]
		private bool teleportClear()
		{
			return default(bool);
		}

		[Token(Token = "0x60030AE")]
		[Address(RVA = "0xB5B890", Offset = "0xB5B890", VA = "0xB5B890")]
		private void hideTeleport()
		{
		}

		[Token(Token = "0x60030AF")]
		[Address(RVA = "0xB5B690", Offset = "0xB5B690", VA = "0xB5B690")]
		private void updateTeleport()
		{
		}

		[Token(Token = "0x60030B0")]
		[Address(RVA = "0xB5BB28", Offset = "0xB5BB28", VA = "0xB5BB28")]
		private void rotateMarker()
		{
		}

		[Token(Token = "0x60030B1")]
		[Address(RVA = "0xB5B6E4", Offset = "0xB5B6E4", VA = "0xB5B6E4")]
		private void tryTeleport()
		{
		}

		[Token(Token = "0x60030B2")]
		[Address(RVA = "0xB5BE88", Offset = "0xB5BE88", VA = "0xB5BE88", Slot = "4")]
		public virtual void BeforeTeleportFade()
		{
		}

		[Token(Token = "0x60030B3")]
		[Address(RVA = "0xB5C15C", Offset = "0xB5C15C", VA = "0xB5C15C", Slot = "5")]
		public virtual void BeforeTeleport()
		{
		}

		[Token(Token = "0x60030B4")]
		[Address(RVA = "0xB5C430", Offset = "0xB5C430", VA = "0xB5C430", Slot = "6")]
		public virtual void AfterTeleport()
		{
		}

		[Token(Token = "0x60030B5")]
		[Address(RVA = "0xB5BDB8", Offset = "0xB5BDB8", VA = "0xB5BDB8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x834188", Offset = "0x834188")]
		private IEnumerator doTeleport(Vector3 playerDestination, Quaternion playerRotation, bool rotatePlayer)
		{
			return null;
		}

		[Token(Token = "0x60030B6")]
		[Address(RVA = "0xB5C76C", Offset = "0xB5C76C", VA = "0xB5C76C")]
		public void TeleportPlayer(Vector3 destination, Quaternion rotation)
		{
		}

		[Token(Token = "0x60030B7")]
		[Address(RVA = "0xB5C79C", Offset = "0xB5C79C", VA = "0xB5C79C")]
		public void TeleportPlayerToTransform(Transform destination)
		{
		}

		[Token(Token = "0x60030B8")]
		[Address(RVA = "0xB5C83C", Offset = "0xB5C83C", VA = "0xB5C83C", Slot = "7")]
		public virtual bool KeyDownForTeleport()
		{
			return default(bool);
		}

		[Token(Token = "0x60030B9")]
		[Address(RVA = "0xB5CA30", Offset = "0xB5CA30", VA = "0xB5CA30", Slot = "8")]
		public virtual bool KeyUpFromTeleport()
		{
			return default(bool);
		}

		[Token(Token = "0x60030BA")]
		[Address(RVA = "0xB5CB38", Offset = "0xB5CB38", VA = "0xB5CB38")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60030BB")]
		[Address(RVA = "0xB5CC50", Offset = "0xB5CC50", VA = "0xB5CC50")]
		public PlayerTeleport()
		{
		}
	}
	[Token(Token = "0x2000583")]
	public class PointerEvents : MonoBehaviour, IPointerClickHandler, IEventSystemHandler, IPointerEnterHandler, IPointerExitHandler, IPointerDownHandler, IPointerUpHandler
	{
		[Token(Token = "0x4001F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82A120", Offset = "0x82A120")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82A120", Offset = "0x82A120")]
		public float MaxDistance;

		[Token(Token = "0x4001F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82A180", Offset = "0x82A180")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82A180", Offset = "0x82A180")]
		public bool Enabled;

		[Token(Token = "0x4001F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82A1E0", Offset = "0x82A1E0")]
		public PointerEventDataEvent OnPointerClickEvent;

		[Token(Token = "0x4001F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PointerEventDataEvent OnPointerEnterEvent;

		[Token(Token = "0x4001F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PointerEventDataEvent OnPointerExitEvent;

		[Token(Token = "0x4001F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public PointerEventDataEvent OnPointerDownEvent;

		[Token(Token = "0x4001F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public PointerEventDataEvent OnPointerUpEvent;

		[Token(Token = "0x60030BC")]
		[Address(RVA = "0xB5D168", Offset = "0xB5D168", VA = "0xB5D168", Slot = "9")]
		public virtual void OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60030BD")]
		[Address(RVA = "0xB5D1F8", Offset = "0xB5D1F8", VA = "0xB5D1F8", Slot = "10")]
		public virtual void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60030BE")]
		[Address(RVA = "0xB5D288", Offset = "0xB5D288", VA = "0xB5D288", Slot = "11")]
		public virtual void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60030BF")]
		[Address(RVA = "0xB5D2FC", Offset = "0xB5D2FC", VA = "0xB5D2FC", Slot = "12")]
		public virtual void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60030C0")]
		[Address(RVA = "0xB5D38C", Offset = "0xB5D38C", VA = "0xB5D38C", Slot = "13")]
		public virtual void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60030C1")]
		[Address(RVA = "0xB5D400", Offset = "0xB5D400", VA = "0xB5D400", Slot = "14")]
		public virtual bool DistanceExceeded(PointerEventData eventData)
		{
			return default(bool);
		}

		[Token(Token = "0x60030C2")]
		[Address(RVA = "0xB5D420", Offset = "0xB5D420", VA = "0xB5D420")]
		public PointerEvents()
		{
		}
	}
	[Token(Token = "0x2000584")]
	public enum RemoteGrabType
	{
		[Token(Token = "0x4001F67")]
		Trigger,
		[Token(Token = "0x4001F68")]
		Raycast,
		[Token(Token = "0x4001F69")]
		Spherecast
	}
	[Token(Token = "0x2000585")]
	public class RemoteGrabber : MonoBehaviour
	{
		[Token(Token = "0x4001F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RemoteGrabType PhysicsCheckType;

		[Token(Token = "0x4001F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float RaycastLength;

		[Token(Token = "0x4001F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float SphereCastLength;

		[Token(Token = "0x4001F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float SphereCastRadius;

		[Token(Token = "0x4001F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LayerMask RemoteGrabLayers;

		[Token(Token = "0x4001F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GrabbablesInTrigger ParentGrabber;

		[Token(Token = "0x4001F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Collider _lastColliderHit;

		[Token(Token = "0x4001F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool ShowGizmos;

		[Token(Token = "0x60030C3")]
		[Address(RVA = "0xB61B80", Offset = "0xB61B80", VA = "0xB61B80")]
		private void Start()
		{
		}

		[Token(Token = "0x60030C4")]
		[Address(RVA = "0xB61C54", Offset = "0xB61C54", VA = "0xB61C54", Slot = "4")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x60030C5")]
		[Address(RVA = "0xB61E80", Offset = "0xB61E80", VA = "0xB61E80")]
		private void ObjectHit(Collider colliderHit)
		{
		}

		[Token(Token = "0x60030C6")]
		[Address(RVA = "0xB61FEC", Offset = "0xB61FEC", VA = "0xB61FEC")]
		public void RemovePreviousHitObject()
		{
		}

		[Token(Token = "0x60030C7")]
		[Address(RVA = "0xB62100", Offset = "0xB62100", VA = "0xB62100")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60030C8")]
		[Address(RVA = "0xB622F4", Offset = "0xB622F4", VA = "0xB622F4")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60030C9")]
		[Address(RVA = "0xB624C8", Offset = "0xB624C8", VA = "0xB624C8")]
		public RemoteGrabber()
		{
		}
	}
	[Token(Token = "0x2000586")]
	public class Slider : MonoBehaviour
	{
		[Token(Token = "0x4001F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float _slidePercentage;

		[Token(Token = "0x4001F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FloatEvent onSliderChange;

		[Token(Token = "0x4001F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float lastSliderPercentage;

		[Token(Token = "0x4001F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float slideRangeLow;

		[Token(Token = "0x4001F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float slideRangeHigh;

		[Token(Token = "0x4001F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float slideRange;

		[Token(Token = "0x17000694")]
		public float SlidePercentage
		{
			[Token(Token = "0x60030CA")]
			[Address(RVA = "0xB656D4", Offset = "0xB656D4", VA = "0xB656D4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60030CB")]
		[Address(RVA = "0xB656DC", Offset = "0xB656DC", VA = "0xB656DC")]
		private void Start()
		{
		}

		[Token(Token = "0x60030CC")]
		[Address(RVA = "0xB657E0", Offset = "0xB657E0", VA = "0xB657E0")]
		private void Update()
		{
		}

		[Token(Token = "0x60030CD")]
		[Address(RVA = "0xB658C0", Offset = "0xB658C0", VA = "0xB658C0", Slot = "4")]
		public virtual void OnSliderChange(float percentage)
		{
		}

		[Token(Token = "0x60030CE")]
		[Address(RVA = "0xB65934", Offset = "0xB65934", VA = "0xB65934")]
		public Slider()
		{
		}
	}
	[Token(Token = "0x2000587")]
	public enum MovementVector
	{
		[Token(Token = "0x4001F79")]
		HMD,
		[Token(Token = "0x4001F7A")]
		Controller
	}
	[Token(Token = "0x2000588")]
	public class SmoothLocomotion : MonoBehaviour
	{
		[Token(Token = "0x2000739")]
		public delegate void OnBeforeMoveAction();

		[Token(Token = "0x200073A")]
		public delegate void OnAfterMoveAction();

		[Token(Token = "0x4001F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82A218", Offset = "0x82A218")]
		public float MovementSpeed;

		[Token(Token = "0x4001F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82A250", Offset = "0x82A250")]
		public Transform ForwardDirection;

		[Token(Token = "0x4001F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82A288", Offset = "0x82A288")]
		public List<InputAxis> inputAxis;

		[Token(Token = "0x4001F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82A2C0", Offset = "0x82A2C0")]
		public InputActionReference MoveAction;

		[Token(Token = "0x4001F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82A2F8", Offset = "0x82A2F8")]
		public bool RequireAppFocus;

		[Token(Token = "0x4001F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82A330", Offset = "0x82A330")]
		public float SprintSpeed;

		[Token(Token = "0x4001F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82A368", Offset = "0x82A368")]
		public List<ControllerBinding> SprintInput;

		[Token(Token = "0x4001F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82A3A0", Offset = "0x82A3A0")]
		public InputActionReference SprintAction;

		[Token(Token = "0x4001F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82A3D8", Offset = "0x82A3D8")]
		public float StrafeSpeed;

		[Token(Token = "0x4001F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float StrafeSprintSpeed;

		[Token(Token = "0x4001F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82A410", Offset = "0x82A410")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82A410", Offset = "0x82A410")]
		public float JumpForce;

		[Token(Token = "0x4001F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82A470", Offset = "0x82A470")]
		public List<ControllerBinding> JumpInput;

		[Token(Token = "0x4001F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82A4A8", Offset = "0x82A4A8")]
		public InputActionReference JumpAction;

		[Token(Token = "0x4001F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82A4E0", Offset = "0x82A4E0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82A4E0", Offset = "0x82A4E0")]
		public bool AirControl;

		[Token(Token = "0x4001F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82A540", Offset = "0x82A540")]
		public float AirControlSpeed;

		[Token(Token = "0x4001F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private BNGPlayerController playerController;

		[Token(Token = "0x4001F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private CharacterController characterController;

		[Token(Token = "0x4001F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float movementX;

		[Token(Token = "0x4001F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float movementY;

		[Token(Token = "0x4001F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float movementZ;

		[Token(Token = "0x4001F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool movementDisabled;

		[Token(Token = "0x4001F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float _verticalSpeed;

		[Token(Token = "0x4001F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float Magnitude;

		[Token(Token = "0x14000033")]
		public static event OnBeforeMoveAction OnBeforeMove
		{
			[Token(Token = "0x60030CF")]
			[Address(RVA = "0xB65948", Offset = "0xB65948", VA = "0xB65948")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8341EC", Offset = "0x8341EC")]
			add
			{
			}
			[Token(Token = "0x60030D0")]
			[Address(RVA = "0xB659FC", Offset = "0xB659FC", VA = "0xB659FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8341FC", Offset = "0x8341FC")]
			remove
			{
			}
		}

		[Token(Token = "0x14000034")]
		public static event OnAfterMoveAction OnAfterMove
		{
			[Token(Token = "0x60030D1")]
			[Address(RVA = "0xB65AB0", Offset = "0xB65AB0", VA = "0xB65AB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x83420C", Offset = "0x83420C")]
			add
			{
			}
			[Token(Token = "0x60030D2")]
			[Address(RVA = "0xB65B68", Offset = "0xB65B68", VA = "0xB65B68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x83421C", Offset = "0x83421C")]
			remove
			{
			}
		}

		[Token(Token = "0x60030D3")]
		[Address(RVA = "0xB65C20", Offset = "0xB65C20", VA = "0xB65C20", Slot = "4")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x60030D4")]
		[Address(RVA = "0xB65C64", Offset = "0xB65C64", VA = "0xB65C64", Slot = "5")]
		public virtual void CheckControllerReferences()
		{
		}

		[Token(Token = "0x60030D5")]
		[Address(RVA = "0xB65D44", Offset = "0xB65D44", VA = "0xB65D44", Slot = "6")]
		public virtual void UpdateInputs()
		{
		}

		[Token(Token = "0x60030D6")]
		[Address(RVA = "0xB65E84", Offset = "0xB65E84", VA = "0xB65E84", Slot = "7")]
		public virtual Vector2 GetMovementAxis()
		{
			return default(Vector2);
		}

		[Token(Token = "0x60030D7")]
		[Address(RVA = "0xB662A4", Offset = "0xB662A4", VA = "0xB662A4", Slot = "8")]
		public virtual void MoveCharacter()
		{
		}

		[Token(Token = "0x60030D8")]
		[Address(RVA = "0xB66524", Offset = "0xB66524", VA = "0xB66524", Slot = "9")]
		public virtual void MoveCharacter(Vector3 motion)
		{
		}

		[Token(Token = "0x60030D9")]
		[Address(RVA = "0xB66B74", Offset = "0xB66B74", VA = "0xB66B74", Slot = "10")]
		public virtual bool CheckJump()
		{
			return default(bool);
		}

		[Token(Token = "0x60030DA")]
		[Address(RVA = "0xB66D0C", Offset = "0xB66D0C", VA = "0xB66D0C", Slot = "11")]
		public virtual bool CheckSprint()
		{
			return default(bool);
		}

		[Token(Token = "0x60030DB")]
		[Address(RVA = "0xB66E68", Offset = "0xB66E68", VA = "0xB66E68", Slot = "12")]
		public virtual void EnableMovement()
		{
		}

		[Token(Token = "0x60030DC")]
		[Address(RVA = "0xB66E70", Offset = "0xB66E70", VA = "0xB66E70", Slot = "13")]
		public virtual void DisableMovement()
		{
		}

		[Token(Token = "0x60030DD")]
		[Address(RVA = "0xB66E7C", Offset = "0xB66E7C", VA = "0xB66E7C")]
		public SmoothLocomotion()
		{
		}
	}
	[Token(Token = "0x2000589")]
	public class SnapZone : MonoBehaviour
	{
		[Token(Token = "0x4001F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82A598", Offset = "0x82A598")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82A598", Offset = "0x82A598")]
		public Grabbable HeldItem;

		[Token(Token = "0x4001F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82A5F8", Offset = "0x82A5F8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82A5F8", Offset = "0x82A5F8")]
		public bool CanDropItem;

		[Token(Token = "0x4001F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82A658", Offset = "0x82A658")]
		public bool CanSwapItem;

		[Token(Token = "0x4001F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82A690", Offset = "0x82A690")]
		public bool CanRemoveItem;

		[Token(Token = "0x4001F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82A6C8", Offset = "0x82A6C8")]
		public float ScaleItem;

		[Token(Token = "0x4001F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float _scaleTo;

		[Token(Token = "0x4001F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool DisableColliders;

		[Token(Token = "0x4001F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<Collider> disabledColliders;

		[Token(Token = "0x4001F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82A700", Offset = "0x82A700")]
		public bool DuplicateItemOnGrab;

		[Token(Token = "0x4001F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82A738", Offset = "0x82A738")]
		public float MaxDropTime;

		[Token(Token = "0x4001F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public float LastSnapTime;

		[Token(Token = "0x4001F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82A780", Offset = "0x82A780")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82A780", Offset = "0x82A780")]
		public List<string> OnlyAllowNames;

		[Token(Token = "0x4001FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82A7E0", Offset = "0x82A7E0")]
		public List<string> ExcludeTransformNames;

		[Token(Token = "0x4001FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82A818", Offset = "0x82A818")]
		public AudioClip SoundOnSnap;

		[Token(Token = "0x4001FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AudioClip SoundOnUnsnap;

		[Token(Token = "0x4001FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82A850", Offset = "0x82A850")]
		public GrabbableEvent OnSnapEvent;

		[Token(Token = "0x4001FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GrabbableEvent OnDetachEvent;

		[Token(Token = "0x4001FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GrabbablesInTrigger gZone;

		[Token(Token = "0x4001FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Rigidbody heldItemRigid;

		[Token(Token = "0x4001FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool heldItemWasKinematic;

		[Token(Token = "0x4001FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Grabbable trackedItem;

		[Token(Token = "0x4001FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public Grabbable ClosestGrabbable;

		[Token(Token = "0x4001FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private SnapZoneOffset offset;

		[Token(Token = "0x60030DE")]
		[Address(RVA = "0xB67058", Offset = "0xB67058", VA = "0xB67058")]
		private void Start()
		{
		}

		[Token(Token = "0x60030DF")]
		[Address(RVA = "0xB67104", Offset = "0xB67104", VA = "0xB67104")]
		private void Update()
		{
		}

		[Token(Token = "0x60030E0")]
		[Address(RVA = "0xB67494", Offset = "0xB67494", VA = "0xB67494")]
		private Grabbable getClosestGrabbable()
		{
			return null;
		}

		[Token(Token = "0x60030E1")]
		[Address(RVA = "0xB628D0", Offset = "0xB628D0", VA = "0xB628D0")]
		public void GrabGrabbable(Grabbable grab)
		{
		}

		[Token(Token = "0x60030E2")]
		[Address(RVA = "0xB67D08", Offset = "0xB67D08", VA = "0xB67D08")]
		private void disableGrabbable(Grabbable grab)
		{
		}

		[Token(Token = "0x60030E3")]
		[Address(RVA = "0xB67DF4", Offset = "0xB67DF4", VA = "0xB67DF4")]
		public void GrabEquipped(Grabber grabber)
		{
		}

		[Token(Token = "0x60030E4")]
		[Address(RVA = "0xB68150", Offset = "0xB68150", VA = "0xB68150", Slot = "4")]
		public virtual bool CanBeRemoved()
		{
			return default(bool);
		}

		[Token(Token = "0x60030E5")]
		[Address(RVA = "0xB6797C", Offset = "0xB6797C", VA = "0xB6797C")]
		public void ReleaseAll()
		{
		}

		[Token(Token = "0x60030E6")]
		[Address(RVA = "0xB681B8", Offset = "0xB681B8", VA = "0xB681B8")]
		public SnapZone()
		{
		}
	}
	[Token(Token = "0x200058A")]
	public class SnapZoneOffset : MonoBehaviour
	{
		[Token(Token = "0x4001FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 LocalPositionOffset;

		[Token(Token = "0x4001FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 LocalRotationOffset;

		[Token(Token = "0x60030E7")]
		[Address(RVA = "0xB68250", Offset = "0xB68250", VA = "0xB68250")]
		public SnapZoneOffset()
		{
		}
	}
	[Token(Token = "0x200058B")]
	public class SnapZoneScale : MonoBehaviour
	{
		[Token(Token = "0x4001FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82A898", Offset = "0x82A898")]
		public float Scale;

		[Token(Token = "0x60030E8")]
		[Address(RVA = "0xB68560", Offset = "0xB68560", VA = "0xB68560")]
		public SnapZoneScale()
		{
		}
	}
	[Token(Token = "0x200058C")]
	public class SteeringWheel : GrabbableEvents
	{
		[Token(Token = "0x4001FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82A8D0", Offset = "0x82A8D0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82A8D0", Offset = "0x82A8D0")]
		public float MinAngle;

		[Token(Token = "0x4001FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82A930", Offset = "0x82A930")]
		public float MaxAngle;

		[Token(Token = "0x4001FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82A968", Offset = "0x82A968")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82A968", Offset = "0x82A968")]
		public Transform RotatorObject;

		[Token(Token = "0x4001FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82A9C8", Offset = "0x82A9C8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82A9C8", Offset = "0x82A9C8")]
		public float RotationSpeed;

		[Token(Token = "0x4001FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82AA28", Offset = "0x82AA28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82AA28", Offset = "0x82AA28")]
		public bool AllowTwoHanded;

		[Token(Token = "0x4001FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82AA88", Offset = "0x82AA88")]
		public bool ReturnToCenter;

		[Token(Token = "0x4001FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float ReturnToCenterSpeed;

		[Token(Token = "0x4001FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82AAC0", Offset = "0x82AAC0")]
		public Text DebugText;

		[Token(Token = "0x4001FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82AAF8", Offset = "0x82AAF8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82AAF8", Offset = "0x82AAF8")]
		public FloatEvent onAngleChange;

		[Token(Token = "0x4001FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82AB58", Offset = "0x82AB58")]
		public FloatEvent onValueChange;

		[Token(Token = "0x4001FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82AB90", Offset = "0x82AB90")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82AB90", Offset = "0x82AB90")]
		public bool ShowEditorGizmos;

		[Token(Token = "0x4001FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		protected Vector3 rotatePosition;

		[Token(Token = "0x4001FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Vector3 previousPrimaryPosition;

		[Token(Token = "0x4001FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected Vector3 previousSecondaryPosition;

		[Token(Token = "0x4001FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected float targetAngle;

		[Token(Token = "0x4001FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected float previousTargetAngle;

		[Token(Token = "0x4001FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected float smoothedAngle;

		[Token(Token = "0x17000695")]
		public float Angle
		{
			[Token(Token = "0x60030E9")]
			[Address(RVA = "0xB68B48", Offset = "0xB68B48", VA = "0xB68B48")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000696")]
		public float RawAngle
		{
			[Token(Token = "0x60030EA")]
			[Address(RVA = "0xB68BD0", Offset = "0xB68BD0", VA = "0xB68BD0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000697")]
		public float ScaleValue
		{
			[Token(Token = "0x60030EB")]
			[Address(RVA = "0xB68BD8", Offset = "0xB68BD8", VA = "0xB68BD8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000698")]
		public float ScaleValueInverted
		{
			[Token(Token = "0x60030EC")]
			[Address(RVA = "0xB68C0C", Offset = "0xB68C0C", VA = "0xB68C0C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000699")]
		public float AngleInverted
		{
			[Token(Token = "0x60030ED")]
			[Address(RVA = "0xB68C48", Offset = "0xB68C48", VA = "0xB68C48")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700069A")]
		public Grabber PrimaryGrabber
		{
			[Token(Token = "0x60030EE")]
			[Address(RVA = "0xB68C60", Offset = "0xB68C60", VA = "0xB68C60")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700069B")]
		public Grabber SecondaryGrabber
		{
			[Token(Token = "0x60030EF")]
			[Address(RVA = "0xB68D14", Offset = "0xB68D14", VA = "0xB68D14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60030F0")]
		[Address(RVA = "0xB68DC4", Offset = "0xB68DC4", VA = "0xB68DC4")]
		private void Update()
		{
		}

		[Token(Token = "0x60030F1")]
		[Address(RVA = "0xB68E78", Offset = "0xB68E78", VA = "0xB68E78", Slot = "27")]
		public virtual void UpdateAngleCalculations()
		{
		}

		[Token(Token = "0x60030F2")]
		[Address(RVA = "0xB691E0", Offset = "0xB691E0", VA = "0xB691E0")]
		public float GetRelativeAngle(Vector3 position1, Vector3 position2)
		{
			return default(float);
		}

		[Token(Token = "0x60030F3")]
		[Address(RVA = "0xB69314", Offset = "0xB69314", VA = "0xB69314", Slot = "28")]
		public virtual void ApplyAngleToSteeringWheel(float angle)
		{
		}

		[Token(Token = "0x60030F4")]
		[Address(RVA = "0xB69374", Offset = "0xB69374", VA = "0xB69374", Slot = "29")]
		public virtual void UpdatePreviewText()
		{
		}

		[Token(Token = "0x60030F5")]
		[Address(RVA = "0xB694A4", Offset = "0xB694A4", VA = "0xB694A4", Slot = "30")]
		public virtual void CallEvents()
		{
		}

		[Token(Token = "0x60030F6")]
		[Address(RVA = "0xB69544", Offset = "0xB69544", VA = "0xB69544", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x60030F7")]
		[Address(RVA = "0xB696B4", Offset = "0xB696B4", VA = "0xB696B4", Slot = "31")]
		public virtual void ReturnToCenterAngle()
		{
		}

		[Token(Token = "0x60030F8")]
		[Address(RVA = "0xB68C64", Offset = "0xB68C64", VA = "0xB68C64")]
		public Grabber GetPrimaryGrabber()
		{
			return null;
		}

		[Token(Token = "0x60030F9")]
		[Address(RVA = "0xB68D18", Offset = "0xB68D18", VA = "0xB68D18")]
		public Grabber GetSecondaryGrabber()
		{
			return null;
		}

		[Token(Token = "0x60030FA")]
		[Address(RVA = "0xB69778", Offset = "0xB69778", VA = "0xB69778", Slot = "32")]
		public virtual void UpdatePreviousAngle(float angle)
		{
		}

		[Token(Token = "0x60030FB")]
		[Address(RVA = "0xB69780", Offset = "0xB69780", VA = "0xB69780", Slot = "33")]
		public virtual float GetScaledValue(float value, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x60030FC")]
		[Address(RVA = "0xB697A0", Offset = "0xB697A0", VA = "0xB697A0")]
		public SteeringWheel()
		{
		}
	}
	[Token(Token = "0x200058D")]
	public class TrackedDevice : MonoBehaviour
	{
		[Token(Token = "0x4001FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TrackableDevice Device;

		[Token(Token = "0x4001FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected UnityEngine.XR.InputDevice deviceToTrack;

		[Token(Token = "0x4001FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Vector3 initialLocalPosition;

		[Token(Token = "0x4001FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected Quaternion initialLocalRotation;

		[Token(Token = "0x4001FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		protected Vector3 currentLocalPosition;

		[Token(Token = "0x4001FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Quaternion currentLocalRotation;

		[Token(Token = "0x60030FD")]
		[Address(RVA = "0xB6A670", Offset = "0xB6A670", VA = "0xB6A670", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60030FE")]
		[Address(RVA = "0xB6A6CC", Offset = "0xB6A6CC", VA = "0xB6A6CC", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x60030FF")]
		[Address(RVA = "0xB6A744", Offset = "0xB6A744", VA = "0xB6A744", Slot = "6")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6003100")]
		[Address(RVA = "0xB6A7BC", Offset = "0xB6A7BC", VA = "0xB6A7BC", Slot = "7")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6003101")]
		[Address(RVA = "0xB6A7F0", Offset = "0xB6A7F0", VA = "0xB6A7F0", Slot = "8")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6003102")]
		[Address(RVA = "0xB6A7FC", Offset = "0xB6A7FC", VA = "0xB6A7FC", Slot = "9")]
		public virtual void RefreshDeviceStatus()
		{
		}

		[Token(Token = "0x6003103")]
		[Address(RVA = "0xB6A910", Offset = "0xB6A910", VA = "0xB6A910", Slot = "10")]
		public virtual void UpdateDevice()
		{
		}

		[Token(Token = "0x6003104")]
		[Address(RVA = "0xB6AB38", Offset = "0xB6AB38", VA = "0xB6AB38", Slot = "11")]
		protected virtual void OnBeforeRender()
		{
		}

		[Token(Token = "0x6003105")]
		[Address(RVA = "0xB6AB44", Offset = "0xB6AB44", VA = "0xB6AB44")]
		public TrackedDevice()
		{
		}
	}
	[Token(Token = "0x200058E")]
	public enum TrackableDevice
	{
		[Token(Token = "0x4001FC6")]
		HMD,
		[Token(Token = "0x4001FC7")]
		LeftController,
		[Token(Token = "0x4001FC8")]
		RightController
	}
	[Token(Token = "0x200058F")]
	public class Arrow : MonoBehaviour
	{
		[Token(Token = "0x200073B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x821070", Offset = "0x821070")]
		private sealed class <QueueDestroy>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40027CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40027D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40027D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Arrow <>4__this;

			[Token(Token = "0x1700072E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003704")]
				[Address(RVA = "0xA792E8", Offset = "0xA792E8", VA = "0xA792E8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700072F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003706")]
				[Address(RVA = "0xA79350", Offset = "0xA79350", VA = "0xA79350", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003701")]
			[Address(RVA = "0xA786CC", Offset = "0xA786CC", VA = "0xA786CC")]
			[DebuggerHidden]
			public <QueueDestroy>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6003702")]
			[Address(RVA = "0xA79160", Offset = "0xA79160", VA = "0xA79160", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003703")]
			[Address(RVA = "0xA79164", Offset = "0xA79164", VA = "0xA79164", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003705")]
			[Address(RVA = "0xA792F0", Offset = "0xA792F0", VA = "0xA792F0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200073C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x821080", Offset = "0x821080")]
		private sealed class <ReEnableCollider>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40027D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40027D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40027D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Arrow <>4__this;

			[Token(Token = "0x40027D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <waitFrames>5__2;

			[Token(Token = "0x40027D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int <x>5__3;

			[Token(Token = "0x17000730")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600370A")]
				[Address(RVA = "0xA79430", Offset = "0xA79430", VA = "0xA79430", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000731")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600370C")]
				[Address(RVA = "0xA79498", Offset = "0xA79498", VA = "0xA79498", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003707")]
			[Address(RVA = "0xA786F8", Offset = "0xA786F8", VA = "0xA786F8")]
			[DebuggerHidden]
			public <ReEnableCollider>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6003708")]
			[Address(RVA = "0xA79358", Offset = "0xA79358", VA = "0xA79358", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003709")]
			[Address(RVA = "0xA7935C", Offset = "0xA7935C", VA = "0xA7935C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600370B")]
			[Address(RVA = "0xA79438", Offset = "0xA79438", VA = "0xA79438", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Rigidbody rb;

		[Token(Token = "0x4001FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Grabbable grab;

		[Token(Token = "0x4001FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool Flying;

		[Token(Token = "0x4001FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float ZVel;

		[Token(Token = "0x4001FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Collider ShaftCollider;

		[Token(Token = "0x4001FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AudioSource impactSound;

		[Token(Token = "0x4001FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float flightTime;

		[Token(Token = "0x4001FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float destroyTime;

		[Token(Token = "0x4001FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Coroutine queueDestroy;

		[Token(Token = "0x4001FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Projectile ProjectileObject;

		[Token(Token = "0x4001FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float arrowDamage;

		[Token(Token = "0x6003106")]
		[Address(RVA = "0xA7812C", Offset = "0xA7812C", VA = "0xA7812C")]
		private void Start()
		{
		}

		[Token(Token = "0x6003107")]
		[Address(RVA = "0xA7826C", Offset = "0xA7826C", VA = "0xA7826C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6003108")]
		[Address(RVA = "0xA784E8", Offset = "0xA784E8", VA = "0xA784E8")]
		public void ShootArrow(Vector3 shotForce)
		{
		}

		[Token(Token = "0x6003109")]
		[Address(RVA = "0xA7865C", Offset = "0xA7865C", VA = "0xA7865C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x83422C", Offset = "0x83422C")]
		private IEnumerator QueueDestroy()
		{
			return null;
		}

		[Token(Token = "0x600310A")]
		[Address(RVA = "0xA785EC", Offset = "0xA785EC", VA = "0xA785EC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x834290", Offset = "0x834290")]
		private IEnumerator ReEnableCollider()
		{
			return null;
		}

		[Token(Token = "0x600310B")]
		[Address(RVA = "0xA78724", Offset = "0xA78724", VA = "0xA78724")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x600310C")]
		[Address(RVA = "0xA78C3C", Offset = "0xA78C3C", VA = "0xA78C3C")]
		private void tryStickArrow(Collision collision)
		{
		}

		[Token(Token = "0x600310D")]
		[Address(RVA = "0xA79030", Offset = "0xA79030", VA = "0xA79030")]
		private void playSoundInterval(float fromSeconds, float toSeconds)
		{
		}

		[Token(Token = "0x600310E")]
		[Address(RVA = "0xA79150", Offset = "0xA79150", VA = "0xA79150")]
		public Arrow()
		{
		}
	}
	[Token(Token = "0x2000590")]
	public class ArrowGrabArea : MonoBehaviour
	{
		[Token(Token = "0x4001FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Bow theBow;

		[Token(Token = "0x600310F")]
		[Address(RVA = "0xA794A0", Offset = "0xA794A0", VA = "0xA794A0")]
		private void Start()
		{
		}

		[Token(Token = "0x6003110")]
		[Address(RVA = "0xA79514", Offset = "0xA79514", VA = "0xA79514")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6003111")]
		[Address(RVA = "0xA79850", Offset = "0xA79850", VA = "0xA79850")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6003112")]
		[Address(RVA = "0xA79978", Offset = "0xA79978", VA = "0xA79978")]
		public ArrowGrabArea()
		{
		}
	}
	[Token(Token = "0x2000591")]
	public class Bow : GrabbableEvents
	{
		[Token(Token = "0x4001FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82ABF0", Offset = "0x82ABF0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82ABF0", Offset = "0x82ABF0")]
		public float BowForce;

		[Token(Token = "0x4001FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82AC50", Offset = "0x82AC50")]
		public bool AlignBowToArrow;

		[Token(Token = "0x4001FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82AC88", Offset = "0x82AC88")]
		public Transform BowModel;

		[Token(Token = "0x4001FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82ACC0", Offset = "0x82ACC0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82ACC0", Offset = "0x82ACC0")]
		public Transform ArrowRest;

		[Token(Token = "0x4001FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool CanGrabArrowFromKnock;

		[Token(Token = "0x4001FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82AD20", Offset = "0x82AD20")]
		public string ArrowPrefabName;

		[Token(Token = "0x4001FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82AD58", Offset = "0x82AD58")]
		public Transform ArrowRestLeftHanded;

		[Token(Token = "0x4001FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform ArrowKnock;

		[Token(Token = "0x4001FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82AD90", Offset = "0x82AD90")]
		public bool IgnoreXPosition;

		[Token(Token = "0x4001FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool IgnoreYPosition;

		[Token(Token = "0x4001FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		public bool AllowNegativeZ;

		[Token(Token = "0x4001FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82ADC8", Offset = "0x82ADC8")]
		public bool CanGrabArrow;

		[Token(Token = "0x4001FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		public Grabber ClosestGrabber;

		[Token(Token = "0x4001FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public Arrow GrabbedArrow;

		[Token(Token = "0x4001FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Grabbable arrowGrabbable;

		[Token(Token = "0x4001FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HideInInspector]
		public Grabber arrowGrabber;

		[Token(Token = "0x4001FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HideInInspector]
		public Vector3 LastValidPosition;

		[Token(Token = "0x4001FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82AE40", Offset = "0x82AE40")]
		public float MaxStringDistance;

		[Token(Token = "0x4001FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float StringDistance;

		[Token(Token = "0x4001FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82AE78", Offset = "0x82AE78")]
		private float <DrawPercent>k__BackingField;

		[Token(Token = "0x4001FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float _lastDrawPercent;

		[Token(Token = "0x4001FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float _lastDrawHaptic;

		[Token(Token = "0x4001FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float _lastDrawHapticTime;

		[Token(Token = "0x4001FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private bool playedDrawSound;

		[Token(Token = "0x4001FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 initialKnockPosition;

		[Token(Token = "0x4001FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private bool holdingArrow;

		[Token(Token = "0x4001FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Grabbable bowGrabbable;

		[Token(Token = "0x4001FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82AE88", Offset = "0x82AE88")]
		public Text PercentageUI;

		[Token(Token = "0x4001FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private List<DrawDefinition> drawDefs;

		[Token(Token = "0x4001FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private AudioSource audioSource;

		[Token(Token = "0x4001FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Vector3 BowUp;

		[Token(Token = "0x4001FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public float AlignBowSpeed;

		[Token(Token = "0x1700069C")]
		public float DrawPercent
		{
			[Token(Token = "0x6003113")]
			[Address(RVA = "0xA7CA34", Offset = "0xA7CA34", VA = "0xA7CA34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8342F4", Offset = "0x8342F4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6003114")]
			[Address(RVA = "0xA7CA3C", Offset = "0xA7CA3C", VA = "0xA7CA3C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x834304", Offset = "0x834304")]
			private set
			{
			}
		}

		[Token(Token = "0x6003115")]
		[Address(RVA = "0xA7CA44", Offset = "0xA7CA44", VA = "0xA7CA44")]
		private void Start()
		{
		}

		[Token(Token = "0x6003116")]
		[Address(RVA = "0xA7CD10", Offset = "0xA7CD10", VA = "0xA7CD10")]
		private void Update()
		{
		}

		[Token(Token = "0x6003117")]
		[Address(RVA = "0xA7D694", Offset = "0xA7D694", VA = "0xA7D694")]
		private Transform getArrowRest()
		{
			return null;
		}

		[Token(Token = "0x6003118")]
		[Address(RVA = "0xA7D614", Offset = "0xA7D614", VA = "0xA7D614")]
		private bool canGrabArrowFromKnock()
		{
			return default(bool);
		}

		[Token(Token = "0x6003119")]
		[Address(RVA = "0xA7DAFC", Offset = "0xA7DAFC", VA = "0xA7DAFC")]
		private float getGrabArrowInput()
		{
			return default(float);
		}

		[Token(Token = "0x600311A")]
		[Address(RVA = "0xA7DCE4", Offset = "0xA7DCE4", VA = "0xA7DCE4")]
		private float getGripInput(ControllerHand handSide)
		{
			return default(float);
		}

		[Token(Token = "0x600311B")]
		[Address(RVA = "0xA7DCA0", Offset = "0xA7DCA0", VA = "0xA7DCA0")]
		private float getTriggerInput(ControllerHand handSide)
		{
			return default(float);
		}

		[Token(Token = "0x600311C")]
		[Address(RVA = "0xA7D798", Offset = "0xA7D798", VA = "0xA7D798")]
		private void setKnockPosition()
		{
		}

		[Token(Token = "0x600311D")]
		[Address(RVA = "0xA7DA9C", Offset = "0xA7DA9C", VA = "0xA7DA9C")]
		private void checkDrawSound()
		{
		}

		[Token(Token = "0x600311E")]
		[Address(RVA = "0xA7D0B4", Offset = "0xA7D0B4", VA = "0xA7D0B4")]
		private void updateDrawDistance()
		{
		}

		[Token(Token = "0x600311F")]
		[Address(RVA = "0xA7D250", Offset = "0xA7D250", VA = "0xA7D250")]
		private void checkBowHaptics()
		{
		}

		[Token(Token = "0x6003120")]
		[Address(RVA = "0xA7D528", Offset = "0xA7D528", VA = "0xA7D528")]
		private void resetStringPosition()
		{
		}

		[Token(Token = "0x6003121")]
		[Address(RVA = "0xA7DD40", Offset = "0xA7DD40", VA = "0xA7DD40", Slot = "27")]
		protected virtual void alignArrow()
		{
		}

		[Token(Token = "0x6003122")]
		[Address(RVA = "0xA7DE70", Offset = "0xA7DE70", VA = "0xA7DE70", Slot = "28")]
		protected virtual void alignBow()
		{
		}

		[Token(Token = "0x6003123")]
		[Address(RVA = "0xA7E228", Offset = "0xA7E228", VA = "0xA7E228", Slot = "29")]
		public virtual void ResetBowAlignment()
		{
		}

		[Token(Token = "0x6003124")]
		[Address(RVA = "0xA796C8", Offset = "0xA796C8", VA = "0xA796C8")]
		public void GrabArrow(Arrow arrow)
		{
		}

		[Token(Token = "0x6003125")]
		[Address(RVA = "0xA7D39C", Offset = "0xA7D39C", VA = "0xA7D39C")]
		public void ReleaseArrow()
		{
		}

		[Token(Token = "0x6003126")]
		[Address(RVA = "0xA7E318", Offset = "0xA7E318", VA = "0xA7E318", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x6003127")]
		[Address(RVA = "0xA7E304", Offset = "0xA7E304", VA = "0xA7E304")]
		private void resetArrowValues()
		{
		}

		[Token(Token = "0x6003128")]
		[Address(RVA = "0xA7E348", Offset = "0xA7E348", VA = "0xA7E348")]
		private void playSoundInterval(float fromSeconds, float toSeconds, float volume)
		{
		}

		[Token(Token = "0x6003129")]
		[Address(RVA = "0xA7DD28", Offset = "0xA7DD28", VA = "0xA7DD28")]
		private void playBowDraw()
		{
		}

		[Token(Token = "0x600312A")]
		[Address(RVA = "0xA7E2E8", Offset = "0xA7E2E8", VA = "0xA7E2E8")]
		private void playBowRelease()
		{
		}

		[Token(Token = "0x600312B")]
		[Address(RVA = "0xA7E48C", Offset = "0xA7E48C", VA = "0xA7E48C")]
		public Bow()
		{
		}

		[Token(Token = "0x600312C")]
		[Address(RVA = "0xA7E540", Offset = "0xA7E540", VA = "0xA7E540")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x834314", Offset = "0x834314")]
		private bool <checkBowHaptics>b__43_0(DrawDefinition x)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000592")]
	public class DrawDefinition
	{
		[Token(Token = "0x4001FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82AEC0", Offset = "0x82AEC0")]
		private float <DrawPercentage>k__BackingField;

		[Token(Token = "0x4001FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82AED0", Offset = "0x82AED0")]
		private float <HapticAmplitude>k__BackingField;

		[Token(Token = "0x4001FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82AEE0", Offset = "0x82AEE0")]
		private float <HapticFrequency>k__BackingField;

		[Token(Token = "0x1700069D")]
		public float DrawPercentage
		{
			[Token(Token = "0x600312D")]
			[Address(RVA = "0xA87B18", Offset = "0xA87B18", VA = "0xA87B18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x834324", Offset = "0x834324")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600312E")]
			[Address(RVA = "0xA87B20", Offset = "0xA87B20", VA = "0xA87B20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x834334", Offset = "0x834334")]
			set
			{
			}
		}

		[Token(Token = "0x1700069E")]
		public float HapticAmplitude
		{
			[Token(Token = "0x600312F")]
			[Address(RVA = "0xA87B28", Offset = "0xA87B28", VA = "0xA87B28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x834344", Offset = "0x834344")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6003130")]
			[Address(RVA = "0xA87B30", Offset = "0xA87B30", VA = "0xA87B30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x834354", Offset = "0x834354")]
			set
			{
			}
		}

		[Token(Token = "0x1700069F")]
		public float HapticFrequency
		{
			[Token(Token = "0x6003131")]
			[Address(RVA = "0xA87B38", Offset = "0xA87B38", VA = "0xA87B38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x834364", Offset = "0x834364")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6003132")]
			[Address(RVA = "0xA87B40", Offset = "0xA87B40", VA = "0xA87B40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x834374", Offset = "0x834374")]
			set
			{
			}
		}

		[Token(Token = "0x6003133")]
		[Address(RVA = "0xA7CD08", Offset = "0xA7CD08", VA = "0xA7CD08")]
		public DrawDefinition()
		{
		}
	}
	[Token(Token = "0x2000593")]
	public class BowArm : MonoBehaviour
	{
		[Token(Token = "0x4001FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Bow BowItem;

		[Token(Token = "0x4001FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float BowPercentStart;

		[Token(Token = "0x4001FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float RotateDegrees;

		[Token(Token = "0x4001FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float Speed;

		[Token(Token = "0x4001FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion _startRotation;

		[Token(Token = "0x4001FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion _endRotation;

		[Token(Token = "0x4001FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool RotateX;

		[Token(Token = "0x4001FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		public bool RotateZ;

		[Token(Token = "0x6003134")]
		[Address(RVA = "0xA7E578", Offset = "0xA7E578", VA = "0xA7E578")]
		private void Start()
		{
		}

		[Token(Token = "0x6003135")]
		[Address(RVA = "0xA7E770", Offset = "0xA7E770", VA = "0xA7E770")]
		private void Update()
		{
		}

		[Token(Token = "0x6003136")]
		[Address(RVA = "0xA7E948", Offset = "0xA7E948", VA = "0xA7E948")]
		public BowArm()
		{
		}
	}
	[Token(Token = "0x2000594")]
	public class BulletHole : MonoBehaviour
	{
		[Token(Token = "0x4002000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform BulletHoleDecal;

		[Token(Token = "0x4002001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float MaxScale;

		[Token(Token = "0x4002002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float MinScale;

		[Token(Token = "0x4002003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool RandomYRotation;

		[Token(Token = "0x4002004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float DestroyTime;

		[Token(Token = "0x6003137")]
		[Address(RVA = "0xA7E974", Offset = "0xA7E974", VA = "0xA7E974")]
		private void Start()
		{
		}

		[Token(Token = "0x6003138")]
		[Address(RVA = "0xA7EB60", Offset = "0xA7EB60", VA = "0xA7EB60")]
		public void TryAttachTo(Collider col)
		{
		}

		[Token(Token = "0x6003139")]
		[Address(RVA = "0xA7ECCC", Offset = "0xA7ECCC", VA = "0xA7ECCC")]
		private bool transformIsEqualScale(Transform theTransform)
		{
			return default(bool);
		}

		[Token(Token = "0x600313A")]
		[Address(RVA = "0xA7ED48", Offset = "0xA7ED48", VA = "0xA7ED48")]
		private void DestroySelf()
		{
		}

		[Token(Token = "0x600313B")]
		[Address(RVA = "0xA7EDE4", Offset = "0xA7EDE4", VA = "0xA7EDE4")]
		public BulletHole()
		{
		}
	}
	[Token(Token = "0x2000595")]
	public class CustomCenterOfMass : MonoBehaviour
	{
		[Token(Token = "0x4002005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82AEF0", Offset = "0x82AEF0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82AEF0", Offset = "0x82AEF0")]
		public Vector3 CenterOfMass;

		[Token(Token = "0x4002006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82AF50", Offset = "0x82AF50")]
		public Transform CenterOfMassTransform;

		[Token(Token = "0x4002007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82AF88", Offset = "0x82AF88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82AF88", Offset = "0x82AF88")]
		public bool ShowGizmo;

		[Token(Token = "0x4002008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody rigid;

		[Token(Token = "0x600313C")]
		[Address(RVA = "0xA849A0", Offset = "0xA849A0", VA = "0xA849A0")]
		private void Start()
		{
		}

		[Token(Token = "0x600313D")]
		[Address(RVA = "0xA84A14", Offset = "0xA84A14", VA = "0xA84A14", Slot = "4")]
		public virtual void SetCenterOfMass(Vector3 center)
		{
		}

		[Token(Token = "0x600313E")]
		[Address(RVA = "0xA84AD4", Offset = "0xA84AD4", VA = "0xA84AD4", Slot = "5")]
		protected virtual Vector3 getThisCenterOfMass()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600313F")]
		[Address(RVA = "0xA84B6C", Offset = "0xA84B6C", VA = "0xA84B6C")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6003140")]
		[Address(RVA = "0xA84CEC", Offset = "0xA84CEC", VA = "0xA84CEC")]
		public CustomCenterOfMass()
		{
		}
	}
	[Token(Token = "0x2000596")]
	public class DrawerSound : MonoBehaviour
	{
		[Token(Token = "0x4002009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip DrawerOpenSound;

		[Token(Token = "0x400200A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float DrawerOpenValue;

		[Token(Token = "0x400200B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip DrawerCloseSound;

		[Token(Token = "0x400200C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float DrawerCloseValue;

		[Token(Token = "0x400200D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool playedOpenSound;

		[Token(Token = "0x400200E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool playedCloseSound;

		[Token(Token = "0x6003141")]
		[Address(RVA = "0xA87B48", Offset = "0xA87B48", VA = "0xA87B48")]
		public void OnDrawerUpdate(float drawerValue)
		{
		}

		[Token(Token = "0x6003142")]
		[Address(RVA = "0xA87CF8", Offset = "0xA87CF8", VA = "0xA87CF8")]
		public DrawerSound()
		{
		}
	}
	[Token(Token = "0x2000597")]
	public class Explosive : MonoBehaviour
	{
		[Token(Token = "0x200073D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x821090", Offset = "0x821090")]
		private sealed class <explosionRoutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40027D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40027D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40027D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Explosive <>4__this;

			[Token(Token = "0x17000732")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003710")]
				[Address(RVA = "0xA884A4", Offset = "0xA884A4", VA = "0xA884A4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000733")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003712")]
				[Address(RVA = "0xA8850C", Offset = "0xA8850C", VA = "0xA8850C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600370D")]
			[Address(RVA = "0xA87E18", Offset = "0xA87E18", VA = "0xA87E18")]
			[DebuggerHidden]
			public <explosionRoutine>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x600370E")]
			[Address(RVA = "0xA880B4", Offset = "0xA880B4", VA = "0xA880B4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600370F")]
			[Address(RVA = "0xA880B8", Offset = "0xA880B8", VA = "0xA880B8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003711")]
			[Address(RVA = "0xA884AC", Offset = "0xA884AC", VA = "0xA884AC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200073E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8210A0", Offset = "0x8210A0")]
		private sealed class <dealDelayedDamaged>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40027DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40027DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40027DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delayTime;

			[Token(Token = "0x40027DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Damageable damageable;

			[Token(Token = "0x40027DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Explosive <>4__this;

			[Token(Token = "0x17000734")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003716")]
				[Address(RVA = "0xA88044", Offset = "0xA88044", VA = "0xA88044", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000735")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003718")]
				[Address(RVA = "0xA880AC", Offset = "0xA880AC", VA = "0xA880AC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003713")]
			[Address(RVA = "0xA87ED0", Offset = "0xA87ED0", VA = "0xA87ED0")]
			[DebuggerHidden]
			public <dealDelayedDamaged>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6003714")]
			[Address(RVA = "0xA87F7C", Offset = "0xA87F7C", VA = "0xA87F7C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003715")]
			[Address(RVA = "0xA87F80", Offset = "0xA87F80", VA = "0xA87F80", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003717")]
			[Address(RVA = "0xA8804C", Offset = "0xA8804C", VA = "0xA8804C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400200F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82AFE8", Offset = "0x82AFE8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82AFE8", Offset = "0x82AFE8")]
		public float ExplosionRadius;

		[Token(Token = "0x4002010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82B048", Offset = "0x82B048")]
		public float ExplosionDamage;

		[Token(Token = "0x4002011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82B080", Offset = "0x82B080")]
		public float ExplosionForce;

		[Token(Token = "0x4002012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82B0B8", Offset = "0x82B0B8")]
		public float ExplosiveUpwardsModifier;

		[Token(Token = "0x4002013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82B0F0", Offset = "0x82B0F0")]
		public bool ShowExplosionRadius;

		[Token(Token = "0x6003143")]
		[Address(RVA = "0xA87D7C", Offset = "0xA87D7C", VA = "0xA87D7C", Slot = "4")]
		public virtual void DoExplosion()
		{
		}

		[Token(Token = "0x6003144")]
		[Address(RVA = "0xA87DA8", Offset = "0xA87DA8", VA = "0xA87DA8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x834384", Offset = "0x834384")]
		private IEnumerator explosionRoutine()
		{
			return null;
		}

		[Token(Token = "0x6003145")]
		[Address(RVA = "0xA87E44", Offset = "0xA87E44", VA = "0xA87E44")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8343E8", Offset = "0x8343E8")]
		private IEnumerator dealDelayedDamaged(Damageable damageable, float delayTime)
		{
			return null;
		}

		[Token(Token = "0x6003146")]
		[Address(RVA = "0xA87EFC", Offset = "0xA87EFC", VA = "0xA87EFC")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6003147")]
		[Address(RVA = "0xA87F60", Offset = "0xA87F60", VA = "0xA87F60")]
		public Explosive()
		{
		}
	}
	[Token(Token = "0x2000598")]
	public static class ExtensionMethods
	{
		[Token(Token = "0x6003148")]
		[Address(RVA = "0xA88514", Offset = "0xA88514", VA = "0xA88514")]
		public static bool GetDown(this ControllerBinding binding)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000599")]
	public class FPSText : MonoBehaviour
	{
		[Token(Token = "0x4002014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Text text;

		[Token(Token = "0x4002015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float deltaTime;

		[Token(Token = "0x6003149")]
		[Address(RVA = "0xA8858C", Offset = "0xA8858C", VA = "0xA8858C")]
		private void Start()
		{
		}

		[Token(Token = "0x600314A")]
		[Address(RVA = "0xA885E4", Offset = "0xA885E4", VA = "0xA885E4")]
		private void Update()
		{
		}

		[Token(Token = "0x600314B")]
		[Address(RVA = "0xA886D4", Offset = "0xA886D4", VA = "0xA886D4")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600314C")]
		[Address(RVA = "0xA887A0", Offset = "0xA887A0", VA = "0xA887A0")]
		public FPSText()
		{
		}
	}
	[Token(Token = "0x200059A")]
	public class Flashlight : GrabbableEvents
	{
		[Token(Token = "0x4002016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Light SpotLight;

		[Token(Token = "0x4002017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform LightSwitch;

		[Token(Token = "0x4002018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 originalSwitchPosition;

		[Token(Token = "0x600314D")]
		[Address(RVA = "0xA887BC", Offset = "0xA887BC", VA = "0xA887BC")]
		private void Start()
		{
		}

		[Token(Token = "0x600314E")]
		[Address(RVA = "0xA88800", Offset = "0xA88800", VA = "0xA88800", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x600314F")]
		[Address(RVA = "0xA888A0", Offset = "0xA888A0", VA = "0xA888A0", Slot = "18")]
		public override void OnTriggerUp()
		{
		}

		[Token(Token = "0x6003150")]
		[Address(RVA = "0xA888F4", Offset = "0xA888F4", VA = "0xA888F4")]
		public Flashlight()
		{
		}
	}
	[Token(Token = "0x200059B")]
	public class GrappleShot : GrabbableEvents
	{
		[Token(Token = "0x4002019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float MaxRange;

		[Token(Token = "0x400201A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float GrappleReelForce;

		[Token(Token = "0x400201B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float MinReelDistance;

		[Token(Token = "0x400201C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public LayerMask GrappleLayers;

		[Token(Token = "0x400201D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform MuzzleTransform;

		[Token(Token = "0x400201E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform HitTargetPrefab;

		[Token(Token = "0x400201F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public LineRenderer GrappleLine;

		[Token(Token = "0x4002020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public LineRenderer HelperLine;

		[Token(Token = "0x4002021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AudioClip GrappleShotSound;

		[Token(Token = "0x4002022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool grappling;

		[Token(Token = "0x4002023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool wasGrappling;

		[Token(Token = "0x4002024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private CharacterController characterController;

		[Token(Token = "0x4002025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x4002026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private PlayerGravity playerGravity;

		[Token(Token = "0x4002027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayerClimbing playerClimbing;

		[Token(Token = "0x4002028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private AudioSource audioSource;

		[Token(Token = "0x4002029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float currentGrappleDistance;

		[Token(Token = "0x400202A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private bool validTargetFound;

		[Token(Token = "0x400202B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
		private bool isDynamic;

		[Token(Token = "0x400202C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Rigidbody grappleTargetRigid;

		[Token(Token = "0x400202D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Collider grappleTargetCollider;

		[Token(Token = "0x400202E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Transform grappleTargetParent;

		[Token(Token = "0x400202F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool requireRelease;

		[Token(Token = "0x4002030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
		private bool climbing;

		[Token(Token = "0x4002031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Climbable ClimbHelper;

		[Token(Token = "0x6003151")]
		[Address(RVA = "0xD8F86C", Offset = "0xD8F86C", VA = "0xD8F86C")]
		private void Start()
		{
		}

		[Token(Token = "0x6003152")]
		[Address(RVA = "0xD8F9B0", Offset = "0xD8F9B0", VA = "0xD8F9B0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6003153")]
		[Address(RVA = "0xD9010C", Offset = "0xD9010C", VA = "0xD9010C", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6003154")]
		[Address(RVA = "0xD90194", Offset = "0xD90194", VA = "0xD90194")]
		private void updateGrappleDistance()
		{
		}

		[Token(Token = "0x6003155")]
		[Address(RVA = "0xD90A34", Offset = "0xD90A34", VA = "0xD90A34", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6003156")]
		[Address(RVA = "0xD90A3C", Offset = "0xD90A3C", VA = "0xD90A3C", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x6003157")]
		[Address(RVA = "0xD90880", Offset = "0xD90880", VA = "0xD90880")]
		private void onReleaseGrapple()
		{
		}

		[Token(Token = "0x6003158")]
		[Address(RVA = "0xD8FA38", Offset = "0xD8FA38", VA = "0xD8FA38")]
		private void drawGrappleHelper()
		{
		}

		[Token(Token = "0x6003159")]
		[Address(RVA = "0xD8FFC0", Offset = "0xD8FFC0", VA = "0xD8FFC0")]
		private void drawGrappleLine()
		{
		}

		[Token(Token = "0x600315A")]
		[Address(RVA = "0xD9004C", Offset = "0xD9004C", VA = "0xD9004C")]
		private void hideGrappleLine()
		{
		}

		[Token(Token = "0x600315B")]
		[Address(RVA = "0xD90AE4", Offset = "0xD90AE4", VA = "0xD90AE4")]
		private void showGrappleHelper(Vector3 pos, Quaternion rot)
		{
		}

		[Token(Token = "0x600315C")]
		[Address(RVA = "0xD8FE88", Offset = "0xD8FE88", VA = "0xD8FE88")]
		private void hideGrappleHelper()
		{
		}

		[Token(Token = "0x600315D")]
		[Address(RVA = "0xD9027C", Offset = "0xD9027C", VA = "0xD9027C")]
		private void reelInGrapple(float triggerValue)
		{
		}

		[Token(Token = "0x600315E")]
		[Address(RVA = "0xD9077C", Offset = "0xD9077C", VA = "0xD9077C")]
		private void shootGrapple()
		{
		}

		[Token(Token = "0x600315F")]
		[Address(RVA = "0xD90CB0", Offset = "0xD90CB0", VA = "0xD90CB0")]
		private void dropGrapple()
		{
		}

		[Token(Token = "0x6003160")]
		[Address(RVA = "0xD90A40", Offset = "0xD90A40", VA = "0xD90A40")]
		private void changeGravity(bool gravityOn)
		{
		}

		[Token(Token = "0x6003161")]
		[Address(RVA = "0xD90CBC", Offset = "0xD90CBC", VA = "0xD90CBC")]
		public GrappleShot()
		{
		}
	}
	[Token(Token = "0x200059C")]
	public class HandJet : GrabbableEvents
	{
		[Token(Token = "0x4002032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float JetForce;

		[Token(Token = "0x4002033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ParticleSystem JetFX;

		[Token(Token = "0x4002034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CharacterController characterController;

		[Token(Token = "0x4002035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x4002036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private PlayerGravity playerGravity;

		[Token(Token = "0x4002037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private AudioSource audioSource;

		[Token(Token = "0x6003162")]
		[Address(RVA = "0xD92824", Offset = "0xD92824", VA = "0xD92824")]
		private void Start()
		{
		}

		[Token(Token = "0x6003163")]
		[Address(RVA = "0xD92950", Offset = "0xD92950", VA = "0xD92950", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6003164")]
		[Address(RVA = "0xD92D64", Offset = "0xD92D64", VA = "0xD92D64", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6003165")]
		[Address(RVA = "0xD92D6C", Offset = "0xD92D6C", VA = "0xD92D6C")]
		public void ChangeGravity(bool gravityOn)
		{
		}

		[Token(Token = "0x6003166")]
		[Address(RVA = "0xD92E10", Offset = "0xD92E10", VA = "0xD92E10", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x6003167")]
		[Address(RVA = "0xD92964", Offset = "0xD92964", VA = "0xD92964")]
		private void doJet(float triggerValue)
		{
		}

		[Token(Token = "0x6003168")]
		[Address(RVA = "0xD92C98", Offset = "0xD92C98", VA = "0xD92C98")]
		private void stopJet()
		{
		}

		[Token(Token = "0x6003169")]
		[Address(RVA = "0xD92E38", Offset = "0xD92E38", VA = "0xD92E38", Slot = "18")]
		public override void OnTriggerUp()
		{
		}

		[Token(Token = "0x600316A")]
		[Address(RVA = "0xD92E3C", Offset = "0xD92E3C", VA = "0xD92E3C")]
		public HandJet()
		{
		}
	}
	[Token(Token = "0x200059D")]
	public class IKDummy : MonoBehaviour
	{
		[Token(Token = "0x4002038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform ThisEyeBone;

		[Token(Token = "0x4002039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform PlayerTransform;

		[Token(Token = "0x400203A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform HeadFollow;

		[Token(Token = "0x400203B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform RightHandFollow;

		[Token(Token = "0x400203C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform LeftHandFollow;

		[Token(Token = "0x400203D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 HandRotationOffset;

		[Token(Token = "0x400203E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Animator animator;

		[Token(Token = "0x400203F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform headBone;

		[Token(Token = "0x4002040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform leftHandDummy;

		[Token(Token = "0x4002041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform rightHandDummy;

		[Token(Token = "0x4002042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform leftHandOnPlayer;

		[Token(Token = "0x4002043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform rightHandOnPlayer;

		[Token(Token = "0x4002044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform lookatDummy;

		[Token(Token = "0x4002045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 localPos;

		[Token(Token = "0x4002046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Quaternion localRot;

		[Token(Token = "0x4002047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Transform cam;

		[Token(Token = "0x4002048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 leftHandLocalPos;

		[Token(Token = "0x4002049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Vector3 rightHandLocalPos;

		[Token(Token = "0x400204A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Quaternion leftHandLocalRot;

		[Token(Token = "0x400204B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Quaternion rightHandLocalRot;

		[Token(Token = "0x400204C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Vector3 LeftHandsOffset;

		[Token(Token = "0x400204D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public Vector3 RightHandsOffset;

		[Token(Token = "0x600316B")]
		[Address(RVA = "0xD97FDC", Offset = "0xD97FDC", VA = "0xD97FDC")]
		private void Start()
		{
		}

		[Token(Token = "0x600316C")]
		[Address(RVA = "0xD981C8", Offset = "0xD981C8", VA = "0xD981C8")]
		public Transform SetParentAndLocalPosRot(string transformName, Transform parentToSet)
		{
			return null;
		}

		[Token(Token = "0x600316D")]
		[Address(RVA = "0xD982C8", Offset = "0xD982C8", VA = "0xD982C8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600316E")]
		[Address(RVA = "0xD985CC", Offset = "0xD985CC", VA = "0xD985CC")]
		private void OnAnimatorIK()
		{
		}

		[Token(Token = "0x600316F")]
		[Address(RVA = "0xD98904", Offset = "0xD98904", VA = "0xD98904")]
		public IKDummy()
		{
		}
	}
	[Token(Token = "0x200059E")]
	public class LaserPointer : MonoBehaviour
	{
		[Token(Token = "0x400204E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float MaxRange;

		[Token(Token = "0x400204F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public LayerMask ValidLayers;

		[Token(Token = "0x4002050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform LaserEnd;

		[Token(Token = "0x4002051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool Active;

		[Token(Token = "0x4002052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private LineRenderer line;

		[Token(Token = "0x6003170")]
		[Address(RVA = "0xD9E0FC", Offset = "0xD9E0FC", VA = "0xD9E0FC")]
		private void Start()
		{
		}

		[Token(Token = "0x6003171")]
		[Address(RVA = "0xD9E154", Offset = "0xD9E154", VA = "0xD9E154")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6003172")]
		[Address(RVA = "0xD9E4D4", Offset = "0xD9E4D4", VA = "0xD9E4D4")]
		public LaserPointer()
		{
		}
	}
	[Token(Token = "0x200059F")]
	public class LaserSword : GrabbableEvents
	{
		[Token(Token = "0x4002053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Grabbable grabbable;

		[Token(Token = "0x4002054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform BladeTransform;

		[Token(Token = "0x4002055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform RaycastTransform;

		[Token(Token = "0x4002056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public LayerMask LaserCollision;

		[Token(Token = "0x4002057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ParticleSystem CollisionParticle;

		[Token(Token = "0x4002058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool BladeEnabled;

		[Token(Token = "0x4002059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool SaberSwitchOn;

		[Token(Token = "0x400205A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float LaserLength;

		[Token(Token = "0x400205B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float LaserActivateSpeed;

		[Token(Token = "0x400205C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AudioSource CollisionAudio;

		[Token(Token = "0x400205D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool Colliding;

		[Token(Token = "0x6003173")]
		[Address(RVA = "0xD9E4EC", Offset = "0xD9E4EC", VA = "0xD9E4EC")]
		private void Start()
		{
		}

		[Token(Token = "0x6003174")]
		[Address(RVA = "0xD9E598", Offset = "0xD9E598", VA = "0xD9E598")]
		private void Update()
		{
		}

		[Token(Token = "0x6003175")]
		[Address(RVA = "0xD9EBB8", Offset = "0xD9EBB8", VA = "0xD9EBB8", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6003176")]
		[Address(RVA = "0xD9E7DC", Offset = "0xD9E7DC", VA = "0xD9E7DC")]
		private void checkCollision()
		{
		}

		[Token(Token = "0x6003177")]
		[Address(RVA = "0xD9EBD0", Offset = "0xD9EBD0", VA = "0xD9EBD0")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6003178")]
		[Address(RVA = "0xD9ED68", Offset = "0xD9ED68", VA = "0xD9ED68")]
		public LaserSword()
		{
		}
	}
	[Token(Token = "0x20005A0")]
	public class LiquidWobble : MonoBehaviour
	{
		[Token(Token = "0x400205E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Renderer rend;

		[Token(Token = "0x400205F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 lastPos;

		[Token(Token = "0x4002060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 velocity;

		[Token(Token = "0x4002061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 lastRot;

		[Token(Token = "0x4002062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 angularVelocity;

		[Token(Token = "0x4002063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float MaxWobble;

		[Token(Token = "0x4002064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float WobbleSpeed;

		[Token(Token = "0x4002065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float Recovery;

		[Token(Token = "0x4002066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float wobbleAmountX;

		[Token(Token = "0x4002067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float wobbleAmountZ;

		[Token(Token = "0x4002068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float wobbleAmountToAddX;

		[Token(Token = "0x4002069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float wobbleAmountToAddZ;

		[Token(Token = "0x400206A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float pulse;

		[Token(Token = "0x400206B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float time;

		[Token(Token = "0x6003179")]
		[Address(RVA = "0xD9FEA0", Offset = "0xD9FEA0", VA = "0xD9FEA0")]
		private void Start()
		{
		}

		[Token(Token = "0x600317A")]
		[Address(RVA = "0xD9FEF8", Offset = "0xD9FEF8", VA = "0xD9FEF8")]
		private void Update()
		{
		}

		[Token(Token = "0x600317B")]
		[Address(RVA = "0xDA0220", Offset = "0xDA0220", VA = "0xDA0220")]
		public LiquidWobble()
		{
		}
	}
	[Token(Token = "0x20005A1")]
	public class Marker : GrabbableEvents
	{
		[Token(Token = "0x200073F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8210B0", Offset = "0x8210B0")]
		private sealed class <WriteRoutine>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40027DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40027E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40027E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Marker <>4__this;

			[Token(Token = "0x17000736")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600371C")]
				[Address(RVA = "0xB5729C", Offset = "0xB5729C", VA = "0xB5729C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000737")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600371E")]
				[Address(RVA = "0xB57304", Offset = "0xB57304", VA = "0xB57304", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003719")]
			[Address(RVA = "0xB5673C", Offset = "0xB5673C", VA = "0xB5673C")]
			[DebuggerHidden]
			public <WriteRoutine>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x600371A")]
			[Address(RVA = "0xB56F80", Offset = "0xB56F80", VA = "0xB56F80", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600371B")]
			[Address(RVA = "0xB56F84", Offset = "0xB56F84", VA = "0xB56F84", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600371D")]
			[Address(RVA = "0xB572A4", Offset = "0xB572A4", VA = "0xB572A4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400206C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Material DrawMaterial;

		[Token(Token = "0x400206D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color DrawColor;

		[Token(Token = "0x400206E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float LineWidth;

		[Token(Token = "0x400206F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform RaycastStart;

		[Token(Token = "0x4002070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public LayerMask DrawingLayers;

		[Token(Token = "0x4002071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float RaycastLength;

		[Token(Token = "0x4002072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float MinDrawDistance;

		[Token(Token = "0x4002073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float ReuseTolerance;

		[Token(Token = "0x4002074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool IsNewDraw;

		[Token(Token = "0x4002075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 lastDrawPoint;

		[Token(Token = "0x4002076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private LineRenderer LineRenderer;

		[Token(Token = "0x4002077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform root;

		[Token(Token = "0x4002078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Transform lastTransform;

		[Token(Token = "0x4002079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Coroutine drawRoutine;

		[Token(Token = "0x400207A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float lastLineWidth;

		[Token(Token = "0x400207B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private int renderLifeTime;

		[Token(Token = "0x600317C")]
		[Address(RVA = "0xB56648", Offset = "0xB56648", VA = "0xB56648", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x600317D")]
		[Address(RVA = "0xB56700", Offset = "0xB56700", VA = "0xB56700", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x600317E")]
		[Address(RVA = "0xB56690", Offset = "0xB56690", VA = "0xB56690")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x83445C", Offset = "0x83445C")]
		private IEnumerator WriteRoutine()
		{
			return null;
		}

		[Token(Token = "0x600317F")]
		[Address(RVA = "0xB56768", Offset = "0xB56768", VA = "0xB56768")]
		private void InitDraw(Vector3 position, Quaternion rotation, float lineWidth, Color lineColor)
		{
		}

		[Token(Token = "0x6003180")]
		[Address(RVA = "0xB568EC", Offset = "0xB568EC", VA = "0xB568EC")]
		private Vector3 DrawPoint(Vector3 lastDrawPoint, Vector3 endPosition, float lineWidth, Color lineColor, Quaternion rotation)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6003181")]
		[Address(RVA = "0xB56DE8", Offset = "0xB56DE8", VA = "0xB56DE8")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6003182")]
		[Address(RVA = "0xB56F28", Offset = "0xB56F28", VA = "0xB56F28")]
		public Marker()
		{
		}
	}
	[Token(Token = "0x20005A2")]
	public class MoveToWaypoint : MonoBehaviour
	{
		[Token(Token = "0x400207C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool IsActive;

		[Token(Token = "0x400207D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Waypoint Destination;

		[Token(Token = "0x400207E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float MovementSpeed;

		[Token(Token = "0x400207F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool ReachedDestination;

		[Token(Token = "0x4002080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82B128", Offset = "0x82B128")]
		public float StartDelay;

		[Token(Token = "0x4002081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool reachedDelay;

		[Token(Token = "0x4002082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float delayedTime;

		[Token(Token = "0x4002083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 previousPosition;

		[Token(Token = "0x4002084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 PositionDifference;

		[Token(Token = "0x4002085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool MoveInUpdate;

		[Token(Token = "0x4002086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		public bool MoveInFixedUpdate;

		[Token(Token = "0x4002087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody rigid;

		[Token(Token = "0x6003183")]
		[Address(RVA = "0xB5730C", Offset = "0xB5730C", VA = "0xB5730C")]
		private void Start()
		{
		}

		[Token(Token = "0x6003184")]
		[Address(RVA = "0xB57374", Offset = "0xB57374", VA = "0xB57374")]
		private void Update()
		{
		}

		[Token(Token = "0x6003185")]
		[Address(RVA = "0xB577BC", Offset = "0xB577BC", VA = "0xB577BC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6003186")]
		[Address(RVA = "0xB574AC", Offset = "0xB574AC", VA = "0xB574AC")]
		private void movePlatform(float timeDelta)
		{
		}

		[Token(Token = "0x6003187")]
		[Address(RVA = "0xB577F0", Offset = "0xB577F0", VA = "0xB577F0")]
		private void resetDelayStatus()
		{
		}

		[Token(Token = "0x6003188")]
		[Address(RVA = "0xB577FC", Offset = "0xB577FC", VA = "0xB577FC")]
		public MoveToWaypoint()
		{
		}
	}
	[Token(Token = "0x20005A3")]
	public class MovingPlatform : MonoBehaviour
	{
		[Token(Token = "0x4002088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82B160", Offset = "0x82B160")]
		public MovingPlatformMethod MovementMethod;

		[Token(Token = "0x4002089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[HideInInspector]
		public Vector3 PositionDelta;

		[Token(Token = "0x400208A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public Quaternion RotationDelta;

		[Token(Token = "0x400208B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Vector3 previousPosition;

		[Token(Token = "0x400208C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected Quaternion previousRotation;

		[Token(Token = "0x6003189")]
		[Address(RVA = "0xB5781C", Offset = "0xB5781C", VA = "0xB5781C")]
		protected void Update()
		{
		}

		[Token(Token = "0x600318A")]
		[Address(RVA = "0xB579CC", Offset = "0xB579CC", VA = "0xB579CC")]
		public MovingPlatform()
		{
		}
	}
	[Token(Token = "0x20005A4")]
	public enum MovingPlatformMethod
	{
		[Token(Token = "0x400208E")]
		ParentToPlatform,
		[Token(Token = "0x400208F")]
		PositionDifference
	}
	[Token(Token = "0x20005A5")]
	public class PlayerScaler : MonoBehaviour
	{
		[Token(Token = "0x4002090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Transform> ScaleObjects;

		[Token(Token = "0x4002091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float Scale;

		[Token(Token = "0x4002092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float scaleSpeed;

		[Token(Token = "0x600318B")]
		[Address(RVA = "0xB5A28C", Offset = "0xB5A28C", VA = "0xB5A28C")]
		private void Update()
		{
		}

		[Token(Token = "0x600318C")]
		[Address(RVA = "0xB5A4D0", Offset = "0xB5A4D0", VA = "0xB5A4D0")]
		public PlayerScaler()
		{
		}
	}
	[Token(Token = "0x20005A6")]
	public class ProjectileLauncher : MonoBehaviour
	{
		[Token(Token = "0x4002093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject ProjectileObject;

		[Token(Token = "0x4002094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float ProjectileForce;

		[Token(Token = "0x4002095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip LaunchSound;

		[Token(Token = "0x4002096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ParticleSystem LaunchParticles;

		[Token(Token = "0x4002097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform MuzzleTransform;

		[Token(Token = "0x4002098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float _initialProjectileForce;

		[Token(Token = "0x600318D")]
		[Address(RVA = "0xB5DE9C", Offset = "0xB5DE9C", VA = "0xB5DE9C")]
		private void Start()
		{
		}

		[Token(Token = "0x600318E")]
		[Address(RVA = "0xB5DEA8", Offset = "0xB5DEA8", VA = "0xB5DEA8")]
		public GameObject ShootProjectile(float projectileForce)
		{
			return null;
		}

		[Token(Token = "0x600318F")]
		[Address(RVA = "0xB5E194", Offset = "0xB5E194", VA = "0xB5E194")]
		public void ShootProjectile()
		{
		}

		[Token(Token = "0x6003190")]
		[Address(RVA = "0xB5E19C", Offset = "0xB5E19C", VA = "0xB5E19C")]
		public void SetForce(float force)
		{
		}

		[Token(Token = "0x6003191")]
		[Address(RVA = "0xB5E1A4", Offset = "0xB5E1A4", VA = "0xB5E1A4")]
		public float GetInitialProjectileForce()
		{
			return default(float);
		}

		[Token(Token = "0x6003192")]
		[Address(RVA = "0xB5E1AC", Offset = "0xB5E1AC", VA = "0xB5E1AC")]
		public ProjectileLauncher()
		{
		}
	}
	[Token(Token = "0x20005A7")]
	public class TimeController : MonoBehaviour
	{
		[Token(Token = "0x2000740")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8210C0", Offset = "0x8210C0")]
		private sealed class <resumeTimeRoutine>d__19 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40027E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40027E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40027E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TimeController <>4__this;

			[Token(Token = "0x17000738")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003722")]
				[Address(RVA = "0xB69EDC", Offset = "0xB69EDC", VA = "0xB69EDC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000739")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003724")]
				[Address(RVA = "0xB69F44", Offset = "0xB69F44", VA = "0xB69F44", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600371F")]
			[Address(RVA = "0xB69D34", Offset = "0xB69D34", VA = "0xB69D34")]
			[DebuggerHidden]
			public <resumeTimeRoutine>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x6003720")]
			[Address(RVA = "0xB69D78", Offset = "0xB69D78", VA = "0xB69D78", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003721")]
			[Address(RVA = "0xB69D7C", Offset = "0xB69D7C", VA = "0xB69D7C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003723")]
			[Address(RVA = "0xB69EE4", Offset = "0xB69EE4", VA = "0xB69EE4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82B1B8", Offset = "0x82B1B8")]
		public float SlowTimeScale;

		[Token(Token = "0x400209A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82B1F0", Offset = "0x82B1F0")]
		public bool YKeySlowsTime;

		[Token(Token = "0x400209B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82B228", Offset = "0x82B228")]
		public InputActionReference SlowTimeAction;

		[Token(Token = "0x400209C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82B260", Offset = "0x82B260")]
		public AudioClip SlowTimeClip;

		[Token(Token = "0x400209D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82B298", Offset = "0x82B298")]
		public AudioClip SpeedupTimeClip;

		[Token(Token = "0x400209E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82B2D0", Offset = "0x82B2D0")]
		public bool SetFixedDelta;

		[Token(Token = "0x400209F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool _slowingTime;

		[Token(Token = "0x40020A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		private bool routineRunning;

		[Token(Token = "0x40020A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float originalFixedDelta;

		[Token(Token = "0x40020A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AudioSource audioSource;

		[Token(Token = "0x40020A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool ForceTimeScale;

		[Token(Token = "0x40020A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IEnumerator resumeRoutine;

		[Token(Token = "0x170006A0")]
		public bool TimeSlowing
		{
			[Token(Token = "0x6003193")]
			[Address(RVA = "0xB69910", Offset = "0xB69910", VA = "0xB69910")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6003194")]
		[Address(RVA = "0xB69918", Offset = "0xB69918", VA = "0xB69918")]
		private void Start()
		{
		}

		[Token(Token = "0x6003195")]
		[Address(RVA = "0xB699CC", Offset = "0xB699CC", VA = "0xB699CC")]
		private void Update()
		{
		}

		[Token(Token = "0x6003196")]
		[Address(RVA = "0xB69BD0", Offset = "0xB69BD0", VA = "0xB69BD0", Slot = "4")]
		public virtual bool SlowTimeInputDown()
		{
			return default(bool);
		}

		[Token(Token = "0x6003197")]
		[Address(RVA = "0xB69A14", Offset = "0xB69A14", VA = "0xB69A14")]
		public void SlowTime()
		{
		}

		[Token(Token = "0x6003198")]
		[Address(RVA = "0xB69B68", Offset = "0xB69B68", VA = "0xB69B68")]
		public void ResumeTime()
		{
		}

		[Token(Token = "0x6003199")]
		[Address(RVA = "0xB69CC4", Offset = "0xB69CC4", VA = "0xB69CC4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8344C0", Offset = "0x8344C0")]
		private IEnumerator resumeTimeRoutine()
		{
			return null;
		}

		[Token(Token = "0x600319A")]
		[Address(RVA = "0xB69D60", Offset = "0xB69D60", VA = "0xB69D60")]
		public TimeController()
		{
		}
	}
	[Token(Token = "0x20005A8")]
	public class ToggleActiveOnInputAction : MonoBehaviour
	{
		[Token(Token = "0x40020A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InputActionReference InputAction;

		[Token(Token = "0x40020A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject ToggleObject;

		[Token(Token = "0x600319B")]
		[Address(RVA = "0xB69F4C", Offset = "0xB69F4C", VA = "0xB69F4C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600319C")]
		[Address(RVA = "0xB69FF4", Offset = "0xB69FF4", VA = "0xB69FF4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600319D")]
		[Address(RVA = "0xB6A09C", Offset = "0xB6A09C", VA = "0xB6A09C")]
		public void ToggleActive(InputAction.CallbackContext context)
		{
		}

		[Token(Token = "0x600319E")]
		[Address(RVA = "0xB6A144", Offset = "0xB6A144", VA = "0xB6A144")]
		public ToggleActiveOnInputAction()
		{
		}
	}
	[Token(Token = "0x20005A9")]
	public class VREmulator : MonoBehaviour
	{
		[Token(Token = "0x40020A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82B308", Offset = "0x82B308")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82B308", Offset = "0x82B308")]
		public bool EmulatorEnabled;

		[Token(Token = "0x40020A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82B368", Offset = "0x82B368")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82B368", Offset = "0x82B368")]
		public InputActionAsset EmulatorActionSet;

		[Token(Token = "0x40020A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82B3D8", Offset = "0x82B3D8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82B3D8", Offset = "0x82B3D8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82B3D8", Offset = "0x82B3D8")]
		public InputActionReference PlayerUpAction;

		[Token(Token = "0x40020AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82B45C", Offset = "0x82B45C")]
		public InputActionReference PlayerDownAction;

		[Token(Token = "0x40020AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82B494", Offset = "0x82B494")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82B494", Offset = "0x82B494")]
		public InputActionReference LockCameraAction;

		[Token(Token = "0x40020AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82B4F4", Offset = "0x82B4F4")]
		public InputActionReference CameraLookAction;

		[Token(Token = "0x40020AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82B52C", Offset = "0x82B52C")]
		public float CameraLookSensitivityX;

		[Token(Token = "0x40020AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82B564", Offset = "0x82B564")]
		public float CameraLookSensitivityY;

		[Token(Token = "0x40020AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82B59C", Offset = "0x82B59C")]
		public float MinimumCameraY;

		[Token(Token = "0x40020B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82B5D4", Offset = "0x82B5D4")]
		public float MaximumCameraY;

		[Token(Token = "0x40020B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82B60C", Offset = "0x82B60C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82B60C", Offset = "0x82B60C")]
		public InputActionReference LeftGripAction;

		[Token(Token = "0x40020B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82B66C", Offset = "0x82B66C")]
		public InputActionReference LeftTriggerAction;

		[Token(Token = "0x40020B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82B6A4", Offset = "0x82B6A4")]
		public InputActionReference LeftThumbNearAction;

		[Token(Token = "0x40020B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82B6DC", Offset = "0x82B6DC")]
		public InputActionReference RightGripAction;

		[Token(Token = "0x40020B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82B714", Offset = "0x82B714")]
		public InputActionReference RightTriggerAction;

		[Token(Token = "0x40020B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82B74C", Offset = "0x82B74C")]
		public InputActionReference RightThumbNearAction;

		[Token(Token = "0x40020B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float mouseRotationX;

		[Token(Token = "0x40020B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float mouseRotationY;

		[Token(Token = "0x40020B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Transform mainCameraTransform;

		[Token(Token = "0x40020BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Transform leftControllerTranform;

		[Token(Token = "0x40020BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Transform rightControllerTranform;

		[Token(Token = "0x40020BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Transform leftHandAnchor;

		[Token(Token = "0x40020BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Transform rightHandAnchor;

		[Token(Token = "0x40020BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private BNGPlayerController player;

		[Token(Token = "0x40020BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x40020C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool didFirstActivate;

		[Token(Token = "0x40020C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Grabber grabberLeft;

		[Token(Token = "0x40020C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Grabber grabberRight;

		[Token(Token = "0x40020C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float _originalPlayerYOffset;

		[Token(Token = "0x40020C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82B784", Offset = "0x82B784")]
		public bool HMDIsActive;

		[Token(Token = "0x40020C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Vector3 LeftControllerPosition;

		[Token(Token = "0x40020C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public Vector3 RightControllerPosition;

		[Token(Token = "0x40020C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private float prevVal;

		[Token(Token = "0x40020C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private bool isQuitting;

		[Token(Token = "0x600319F")]
		[Address(RVA = "0xB6B520", Offset = "0xB6B520", VA = "0xB6B520")]
		private void Start()
		{
		}

		[Token(Token = "0x60031A0")]
		[Address(RVA = "0xB6B7E8", Offset = "0xB6B7E8", VA = "0xB6B7E8")]
		public void OnBeforeRender()
		{
		}

		[Token(Token = "0x60031A1")]
		[Address(RVA = "0xB6B884", Offset = "0xB6B884", VA = "0xB6B884")]
		private void onFirstActivate()
		{
		}

		[Token(Token = "0x60031A2")]
		[Address(RVA = "0xB6B8B4", Offset = "0xB6B8B4", VA = "0xB6B8B4")]
		private void Update()
		{
		}

		[Token(Token = "0x60031A3")]
		[Address(RVA = "0xB6B9A8", Offset = "0xB6B9A8", VA = "0xB6B9A8")]
		public void CheckHeadControls()
		{
		}

		[Token(Token = "0x60031A4")]
		[Address(RVA = "0xB6BED0", Offset = "0xB6BED0", VA = "0xB6BED0")]
		public void UpdateInputs()
		{
		}

		[Token(Token = "0x60031A5")]
		[Address(RVA = "0xB6BC90", Offset = "0xB6BC90", VA = "0xB6BC90")]
		public void CheckPlayerControls()
		{
		}

		[Token(Token = "0x60031A6")]
		[Address(RVA = "0xB6C87C", Offset = "0xB6C87C", VA = "0xB6C87C", Slot = "4")]
		public virtual void UpdateControllerPositions()
		{
		}

		[Token(Token = "0x60031A7")]
		[Address(RVA = "0xB6C5E8", Offset = "0xB6C5E8", VA = "0xB6C5E8")]
		private void checkGrabbers()
		{
		}

		[Token(Token = "0x60031A8")]
		[Address(RVA = "0xB6C980", Offset = "0xB6C980", VA = "0xB6C980", Slot = "5")]
		public virtual void ResetHands()
		{
		}

		[Token(Token = "0x60031A9")]
		[Address(RVA = "0xB6CA94", Offset = "0xB6CA94", VA = "0xB6CA94", Slot = "6")]
		public virtual void ResetAll()
		{
		}

		[Token(Token = "0x60031AA")]
		[Address(RVA = "0xB6CB6C", Offset = "0xB6CB6C", VA = "0xB6CB6C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60031AB")]
		[Address(RVA = "0xB6D088", Offset = "0xB6D088", VA = "0xB6D088")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60031AC")]
		[Address(RVA = "0xB6D5BC", Offset = "0xB6D5BC", VA = "0xB6D5BC")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x60031AD")]
		[Address(RVA = "0xB6D5C8", Offset = "0xB6D5C8", VA = "0xB6D5C8")]
		public VREmulator()
		{
		}
	}
	[Token(Token = "0x20005AA")]
	public class VehicleController : MonoBehaviour
	{
		[Token(Token = "0x2000741")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8210D0", Offset = "0x8210D0")]
		private sealed class <crankEngine>d__24 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40027E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40027E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40027E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VehicleController <>4__this;

			[Token(Token = "0x1700073A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003728")]
				[Address(RVA = "0xBA996C", Offset = "0xBA996C", VA = "0xBA996C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700073B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600372A")]
				[Address(RVA = "0xBA99D4", Offset = "0xBA99D4", VA = "0xBA99D4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003725")]
			[Address(RVA = "0xBA9058", Offset = "0xBA9058", VA = "0xBA9058")]
			[DebuggerHidden]
			public <crankEngine>d__24(int <>1__state)
			{
			}

			[Token(Token = "0x6003726")]
			[Address(RVA = "0xBA9770", Offset = "0xBA9770", VA = "0xBA9770", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003727")]
			[Address(RVA = "0xBA9774", Offset = "0xBA9774", VA = "0xBA9774", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003729")]
			[Address(RVA = "0xBA9974", Offset = "0xBA9974", VA = "0xBA9974", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40020C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82B7BC", Offset = "0x82B7BC")]
		public float MotorTorque;

		[Token(Token = "0x40020CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float MaxSpeed;

		[Token(Token = "0x40020CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float MaxSteeringAngle;

		[Token(Token = "0x40020CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82B7F4", Offset = "0x82B7F4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82B7F4", Offset = "0x82B7F4")]
		public bool CheckTriggerInput;

		[Token(Token = "0x40020CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Grabbable SteeringGrabbable;

		[Token(Token = "0x40020CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82B854", Offset = "0x82B854")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82B854", Offset = "0x82B854")]
		public bool EngineOn;

		[Token(Token = "0x40020CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82B8B4", Offset = "0x82B8B4")]
		public float CrankTime;

		[Token(Token = "0x40020D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82B8EC", Offset = "0x82B8EC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82B8EC", Offset = "0x82B8EC")]
		public Text SpeedLabel;

		[Token(Token = "0x40020D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82B94C", Offset = "0x82B94C")]
		public AudioSource EngineAudio;

		[Token(Token = "0x40020D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82B984", Offset = "0x82B984")]
		public AudioClip IdleSound;

		[Token(Token = "0x40020D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82B9BC", Offset = "0x82B9BC")]
		public AudioClip CrankSound;

		[Token(Token = "0x40020D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AudioClip CollisionSound;

		[Token(Token = "0x40020D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public float SteeringAngle;

		[Token(Token = "0x40020D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[HideInInspector]
		public float MotorInput;

		[Token(Token = "0x40020D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public float CurrentSpeed;

		[Token(Token = "0x40020D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82BA24", Offset = "0x82BA24")]
		public List<WheelObject> Wheels;

		[Token(Token = "0x40020D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 initialPosition;

		[Token(Token = "0x40020DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Rigidbody rb;

		[Token(Token = "0x40020DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool wasHoldingSteering;

		[Token(Token = "0x40020DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		private bool isHoldingSteering;

		[Token(Token = "0x40020DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
		protected bool crankingEngine;

		[Token(Token = "0x60031AE")]
		[Address(RVA = "0xBA8D78", Offset = "0xBA8D78", VA = "0xBA8D78")]
		private void Start()
		{
		}

		[Token(Token = "0x60031AF")]
		[Address(RVA = "0xBA8DF4", Offset = "0xBA8DF4", VA = "0xBA8DF4")]
		private void Update()
		{
		}

		[Token(Token = "0x60031B0")]
		[Address(RVA = "0xBA8F9C", Offset = "0xBA8F9C", VA = "0xBA8F9C", Slot = "4")]
		public virtual void CrankEngine()
		{
		}

		[Token(Token = "0x60031B1")]
		[Address(RVA = "0xBA8FE8", Offset = "0xBA8FE8", VA = "0xBA8FE8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x834524", Offset = "0x834524")]
		private IEnumerator crankEngine()
		{
			return null;
		}

		[Token(Token = "0x60031B2")]
		[Address(RVA = "0xBA9084", Offset = "0xBA9084", VA = "0xBA9084", Slot = "5")]
		public virtual void CheckOutOfBounds()
		{
		}

		[Token(Token = "0x60031B3")]
		[Address(RVA = "0xBA90F0", Offset = "0xBA90F0", VA = "0xBA90F0", Slot = "6")]
		public virtual void GetTorqueInputFromTriggers()
		{
		}

		[Token(Token = "0x60031B4")]
		[Address(RVA = "0xBA91BC", Offset = "0xBA91BC", VA = "0xBA91BC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60031B5")]
		[Address(RVA = "0xBA932C", Offset = "0xBA932C", VA = "0xBA932C", Slot = "7")]
		public virtual void UpdateWheelTorque()
		{
		}

		[Token(Token = "0x60031B6")]
		[Address(RVA = "0xBA9434", Offset = "0xBA9434", VA = "0xBA9434", Slot = "8")]
		public virtual void SetSteeringAngle(float steeringAngle)
		{
		}

		[Token(Token = "0x60031B7")]
		[Address(RVA = "0xBA943C", Offset = "0xBA943C", VA = "0xBA943C", Slot = "9")]
		public virtual void SetSteeringAngleInverted(float steeringAngle)
		{
		}

		[Token(Token = "0x60031B8")]
		[Address(RVA = "0xBA9448", Offset = "0xBA9448", VA = "0xBA9448", Slot = "10")]
		public virtual void SetSteeringAngle(Vector2 steeringAngle)
		{
		}

		[Token(Token = "0x60031B9")]
		[Address(RVA = "0xBA9450", Offset = "0xBA9450", VA = "0xBA9450", Slot = "11")]
		public virtual void SetSteeringAngleInverted(Vector2 steeringAngle)
		{
		}

		[Token(Token = "0x60031BA")]
		[Address(RVA = "0xBA945C", Offset = "0xBA945C", VA = "0xBA945C", Slot = "12")]
		public virtual void SetMotorTorqueInput(float input)
		{
		}

		[Token(Token = "0x60031BB")]
		[Address(RVA = "0xBA9464", Offset = "0xBA9464", VA = "0xBA9464", Slot = "13")]
		public virtual void SetMotorTorqueInputInverted(float input)
		{
		}

		[Token(Token = "0x60031BC")]
		[Address(RVA = "0xBA9470", Offset = "0xBA9470", VA = "0xBA9470", Slot = "14")]
		public virtual void SetMotorTorqueInput(Vector2 input)
		{
		}

		[Token(Token = "0x60031BD")]
		[Address(RVA = "0xBA9478", Offset = "0xBA9478", VA = "0xBA9478", Slot = "15")]
		public virtual void SetMotorTorqueInputInverted(Vector2 input)
		{
		}

		[Token(Token = "0x60031BE")]
		[Address(RVA = "0xBA9484", Offset = "0xBA9484", VA = "0xBA9484", Slot = "16")]
		public virtual void UpdateWheelVisuals(WheelObject wheel)
		{
		}

		[Token(Token = "0x60031BF")]
		[Address(RVA = "0xBA9578", Offset = "0xBA9578", VA = "0xBA9578", Slot = "17")]
		public virtual void UpdateEngineAudio()
		{
		}

		[Token(Token = "0x60031C0")]
		[Address(RVA = "0xBA9668", Offset = "0xBA9668", VA = "0xBA9668")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60031C1")]
		[Address(RVA = "0xBA9234", Offset = "0xBA9234", VA = "0xBA9234")]
		private float correctValue(float inputValue)
		{
			return default(float);
		}

		[Token(Token = "0x60031C2")]
		[Address(RVA = "0xBA9740", Offset = "0xBA9740", VA = "0xBA9740")]
		public VehicleController()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20005AB")]
	public class WheelObject
	{
		[Token(Token = "0x40020DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public WheelCollider Wheel;

		[Token(Token = "0x40020DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform WheelVisual;

		[Token(Token = "0x40020E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool ApplyTorque;

		[Token(Token = "0x40020E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool ApplySteering;

		[Token(Token = "0x60031C3")]
		[Address(RVA = "0xBAB034", Offset = "0xBAB034", VA = "0xBAB034")]
		public WheelObject()
		{
		}
	}
	[Token(Token = "0x20005AC")]
	public class Waypoint : MonoBehaviour
	{
		[Token(Token = "0x40020E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Waypoint Destination;

		[Token(Token = "0x60031C4")]
		[Address(RVA = "0xBAA21C", Offset = "0xBAA21C", VA = "0xBAA21C")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60031C5")]
		[Address(RVA = "0xBAA37C", Offset = "0xBAA37C", VA = "0xBAA37C")]
		public Waypoint()
		{
		}
	}
	[Token(Token = "0x20005AD")]
	public class Zipline : GrabbableEvents
	{
		[Token(Token = "0x40020E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform ZiplineStart;

		[Token(Token = "0x40020E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform ZiplineEnd;

		[Token(Token = "0x40020E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float ZiplineSpeed;

		[Token(Token = "0x40020E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool UseLinearMovement;

		[Token(Token = "0x40020E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float lastMoveTime;

		[Token(Token = "0x40020E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool movingForward;

		[Token(Token = "0x40020E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private AudioSource audioSource;

		[Token(Token = "0x60031C6")]
		[Address(RVA = "0xBAB03C", Offset = "0xBAB03C", VA = "0xBAB03C")]
		private void Start()
		{
		}

		[Token(Token = "0x60031C7")]
		[Address(RVA = "0xBAB104", Offset = "0xBAB104", VA = "0xBAB104")]
		private void Update()
		{
		}

		[Token(Token = "0x60031C8")]
		[Address(RVA = "0xBAB1DC", Offset = "0xBAB1DC", VA = "0xBAB1DC")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60031C9")]
		[Address(RVA = "0xBAB310", Offset = "0xBAB310", VA = "0xBAB310", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x60031CA")]
		[Address(RVA = "0xBAB648", Offset = "0xBAB648", VA = "0xBAB648", Slot = "19")]
		public override void OnButton1()
		{
		}

		[Token(Token = "0x60031CB")]
		[Address(RVA = "0xBAB68C", Offset = "0xBAB68C", VA = "0xBAB68C", Slot = "22")]
		public override void OnButton2()
		{
		}

		[Token(Token = "0x60031CC")]
		[Address(RVA = "0xBAB370", Offset = "0xBAB370", VA = "0xBAB370")]
		private void moveTowards(Vector3 pos, bool forwardDirection)
		{
		}

		[Token(Token = "0x60031CD")]
		[Address(RVA = "0xBAB6D0", Offset = "0xBAB6D0", VA = "0xBAB6D0")]
		public Zipline()
		{
		}
	}
	[Token(Token = "0x20005AE")]
	public class ControllerOffsetHelper : MonoBehaviour
	{
		[Token(Token = "0x2000742")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8210E0", Offset = "0x8210E0")]
		private sealed class <checkForController>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40027E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40027E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40027EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ControllerOffsetHelper <>4__this;

			[Token(Token = "0x1700073C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600372E")]
				[Address(RVA = "0xA84930", Offset = "0xA84930", VA = "0xA84930", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700073D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003730")]
				[Address(RVA = "0xA84998", Offset = "0xA84998", VA = "0xA84998", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600372B")]
			[Address(RVA = "0xA84298", Offset = "0xA84298", VA = "0xA84298")]
			[DebuggerHidden]
			public <checkForController>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x600372C")]
			[Address(RVA = "0xA8483C", Offset = "0xA8483C", VA = "0xA8483C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600372D")]
			[Address(RVA = "0xA84840", Offset = "0xA84840", VA = "0xA84840", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600372F")]
			[Address(RVA = "0xA84938", Offset = "0xA84938", VA = "0xA84938", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40020EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ControllerHand ControllerHand;

		[Token(Token = "0x40020EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82BA5C", Offset = "0x82BA5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82BA5C", Offset = "0x82BA5C")]
		[SerializeField]
		private string thisControllerModel;

		[Token(Token = "0x40020EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private ControllerOffset thisOffset;

		[Token(Token = "0x40020ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82BADC", Offset = "0x82BADC")]
		public Vector3 OffsetPosition;

		[Token(Token = "0x40020EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82BB14", Offset = "0x82BB14")]
		public Vector3 OffsetRotation;

		[Token(Token = "0x40020EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<ControllerOffset> ControllerOffsets;

		[Token(Token = "0x60031CE")]
		[Address(RVA = "0xA841A4", Offset = "0xA841A4", VA = "0xA841A4")]
		private void Start()
		{
		}

		[Token(Token = "0x60031CF")]
		[Address(RVA = "0xA84228", Offset = "0xA84228", VA = "0xA84228")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x834588", Offset = "0x834588")]
		private IEnumerator checkForController()
		{
			return null;
		}

		[Token(Token = "0x60031D0")]
		[Address(RVA = "0xA842C4", Offset = "0xA842C4", VA = "0xA842C4", Slot = "4")]
		public virtual void OnControllerFound()
		{
		}

		[Token(Token = "0x60031D1")]
		[Address(RVA = "0xA84460", Offset = "0xA84460", VA = "0xA84460", Slot = "5")]
		public virtual ControllerOffset GetControllerOffset(string controllerName)
		{
			return null;
		}

		[Token(Token = "0x60031D2")]
		[Address(RVA = "0xA844F4", Offset = "0xA844F4", VA = "0xA844F4", Slot = "6")]
		public virtual void DefineControllerOffsets()
		{
		}

		[Token(Token = "0x60031D3")]
		[Address(RVA = "0xA84804", Offset = "0xA84804", VA = "0xA84804")]
		public ControllerOffsetHelper()
		{
		}

		[Token(Token = "0x60031D4")]
		[Address(RVA = "0xA84814", Offset = "0xA84814", VA = "0xA84814")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8345EC", Offset = "0x8345EC")]
		private bool <GetControllerOffset>b__9_0(ControllerOffset x)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20005AF")]
	public class ControllerOffset
	{
		[Token(Token = "0x40020F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82BB4C", Offset = "0x82BB4C")]
		private string <ControllerName>k__BackingField;

		[Token(Token = "0x40020F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82BB5C", Offset = "0x82BB5C")]
		private Vector3 <LeftControllerPositionOffset>k__BackingField;

		[Token(Token = "0x40020F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82BB6C", Offset = "0x82BB6C")]
		private Vector3 <RightControllerPositionOffset>k__BackingField;

		[Token(Token = "0x40020F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82BB7C", Offset = "0x82BB7C")]
		private Vector3 <LeftControllerRotationOffset>k__BackingField;

		[Token(Token = "0x40020F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82BB8C", Offset = "0x82BB8C")]
		private Vector3 <RightControlleRotationOffset>k__BackingField;

		[Token(Token = "0x170006A1")]
		public string ControllerName
		{
			[Token(Token = "0x60031D5")]
			[Address(RVA = "0xA8412C", Offset = "0xA8412C", VA = "0xA8412C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8345FC", Offset = "0x8345FC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60031D6")]
			[Address(RVA = "0xA84134", Offset = "0xA84134", VA = "0xA84134")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x83460C", Offset = "0x83460C")]
			set
			{
			}
		}

		[Token(Token = "0x170006A2")]
		public Vector3 LeftControllerPositionOffset
		{
			[Token(Token = "0x60031D7")]
			[Address(RVA = "0xA8413C", Offset = "0xA8413C", VA = "0xA8413C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x83461C", Offset = "0x83461C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60031D8")]
			[Address(RVA = "0xA84148", Offset = "0xA84148", VA = "0xA84148")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x83462C", Offset = "0x83462C")]
			set
			{
			}
		}

		[Token(Token = "0x170006A3")]
		public Vector3 RightControllerPositionOffset
		{
			[Token(Token = "0x60031D9")]
			[Address(RVA = "0xA84154", Offset = "0xA84154", VA = "0xA84154")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x83463C", Offset = "0x83463C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60031DA")]
			[Address(RVA = "0xA84160", Offset = "0xA84160", VA = "0xA84160")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x83464C", Offset = "0x83464C")]
			set
			{
			}
		}

		[Token(Token = "0x170006A4")]
		public Vector3 LeftControllerRotationOffset
		{
			[Token(Token = "0x60031DB")]
			[Address(RVA = "0xA8416C", Offset = "0xA8416C", VA = "0xA8416C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x83465C", Offset = "0x83465C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60031DC")]
			[Address(RVA = "0xA84178", Offset = "0xA84178", VA = "0xA84178")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x83466C", Offset = "0x83466C")]
			set
			{
			}
		}

		[Token(Token = "0x170006A5")]
		public Vector3 RightControlleRotationOffset
		{
			[Token(Token = "0x60031DD")]
			[Address(RVA = "0xA84184", Offset = "0xA84184", VA = "0xA84184")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x83467C", Offset = "0x83467C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60031DE")]
			[Address(RVA = "0xA84190", Offset = "0xA84190", VA = "0xA84190")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x83468C", Offset = "0x83468C")]
			set
			{
			}
		}

		[Token(Token = "0x60031DF")]
		[Address(RVA = "0xA8419C", Offset = "0xA8419C", VA = "0xA8419C")]
		public ControllerOffset()
		{
		}
	}
	[Token(Token = "0x20005B0")]
	public class DetachableLimb : MonoBehaviour
	{
		[Token(Token = "0x40020F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform ShrinkBone;

		[Token(Token = "0x40020F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject ReplaceGrabbableWith;

		[Token(Token = "0x40020F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject EnableOnDetach;

		[Token(Token = "0x60031E0")]
		[Address(RVA = "0xA87154", Offset = "0xA87154", VA = "0xA87154")]
		public void DoDismemberment(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x60031E1")]
		[Address(RVA = "0xA87450", Offset = "0xA87450", VA = "0xA87450")]
		public void ReverseDismemberment()
		{
		}

		[Token(Token = "0x60031E2")]
		[Address(RVA = "0xA87578", Offset = "0xA87578", VA = "0xA87578")]
		public DetachableLimb()
		{
		}
	}
	[Token(Token = "0x20005B1")]
	public class DoorHelper : MonoBehaviour
	{
		[Token(Token = "0x40020F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip DoorOpenSound;

		[Token(Token = "0x40020F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioClip DoorCloseSound;

		[Token(Token = "0x40020FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82BB9C", Offset = "0x82BB9C")]
		public bool RequireHandleTurnToOpen;

		[Token(Token = "0x40020FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform HandleFollower;

		[Token(Token = "0x40020FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float DegreesTurned;

		[Token(Token = "0x40020FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float DegreesTurnToOpen;

		[Token(Token = "0x40020FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform DoorLockTransform;

		[Token(Token = "0x40020FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float initialLockPosition;

		[Token(Token = "0x4002100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private HingeJoint hinge;

		[Token(Token = "0x4002101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody rigid;

		[Token(Token = "0x4002102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool playedOpenSound;

		[Token(Token = "0x4002103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool readyToPlayCloseSound;

		[Token(Token = "0x4002104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float AngularVelocitySnapDoor;

		[Token(Token = "0x4002105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float angle;

		[Token(Token = "0x4002106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float AngularVelocity;

		[Token(Token = "0x4002107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool doorLocked;

		[Token(Token = "0x4002108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float lockPos;

		[Token(Token = "0x4002109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 currentRotation;

		[Token(Token = "0x400210A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float moveLockAmount;

		[Token(Token = "0x400210B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float rotateAngles;

		[Token(Token = "0x400210C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float ratio;

		[Token(Token = "0x60031E3")]
		[Address(RVA = "0xA87580", Offset = "0xA87580", VA = "0xA87580")]
		private void Start()
		{
		}

		[Token(Token = "0x60031E4")]
		[Address(RVA = "0xA87648", Offset = "0xA87648", VA = "0xA87648")]
		private void Update()
		{
		}

		[Token(Token = "0x60031E5")]
		[Address(RVA = "0xA87AF8", Offset = "0xA87AF8", VA = "0xA87AF8")]
		public DoorHelper()
		{
		}
	}
	[Token(Token = "0x20005B2")]
	public class GrabberArea : MonoBehaviour
	{
		[Token(Token = "0x400210D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Grabber InArea;

		[Token(Token = "0x400210E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<Grabber> grabbersInArea;

		[Token(Token = "0x60031E6")]
		[Address(RVA = "0xD8F4D4", Offset = "0xD8F4D4", VA = "0xD8F4D4")]
		private void Update()
		{
		}

		[Token(Token = "0x60031E7")]
		[Address(RVA = "0xD8F4F8", Offset = "0xD8F4F8", VA = "0xD8F4F8")]
		public Grabber GetOpenGrabber()
		{
			return null;
		}

		[Token(Token = "0x60031E8")]
		[Address(RVA = "0xD8F60C", Offset = "0xD8F60C", VA = "0xD8F60C")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60031E9")]
		[Address(RVA = "0xD8F728", Offset = "0xD8F728", VA = "0xD8F728")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60031EA")]
		[Address(RVA = "0xD8F814", Offset = "0xD8F814", VA = "0xD8F814")]
		public GrabberArea()
		{
		}
	}
	[Token(Token = "0x20005B3")]
	public class HandCollision : MonoBehaviour
	{
		[Token(Token = "0x400210F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HandController HandControl;

		[Token(Token = "0x4002110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabber HandGrabber;

		[Token(Token = "0x4002111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool EnableHandCollision;

		[Token(Token = "0x4002112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool EnableCollisionOnPoint;

		[Token(Token = "0x4002113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool EnableCollisionOnFist;

		[Token(Token = "0x4002114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		public bool EnableCollisionOnAllPoses;

		[Token(Token = "0x4002115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool EnableCollisionDuringGrab;

		[Token(Token = "0x4002116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float PointAmount;

		[Token(Token = "0x4002117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float GripAmount;

		[Token(Token = "0x4002118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool MakingFist;

		[Token(Token = "0x4002119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Collider> handColliders;

		[Token(Token = "0x60031EB")]
		[Address(RVA = "0xD90CD8", Offset = "0xD90CD8", VA = "0xD90CD8")]
		private void Start()
		{
		}

		[Token(Token = "0x60031EC")]
		[Address(RVA = "0xD90DE0", Offset = "0xD90DE0", VA = "0xD90DE0")]
		private void Update()
		{
		}

		[Token(Token = "0x60031ED")]
		[Address(RVA = "0xD910A8", Offset = "0xD910A8", VA = "0xD910A8")]
		public HandCollision()
		{
		}
	}
	[Token(Token = "0x20005B4")]
	public class HandController : MonoBehaviour
	{
		[Token(Token = "0x400211A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82BBD4", Offset = "0x82BBD4")]
		public Transform HandAnchor;

		[Token(Token = "0x400211B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82BC0C", Offset = "0x82BC0C")]
		public bool ResetHandAnchorPosition;

		[Token(Token = "0x400211C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Animator HandAnimator;

		[Token(Token = "0x400211D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82BC44", Offset = "0x82BC44")]
		public HandPoser handPoser;

		[Token(Token = "0x400211E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82BC7C", Offset = "0x82BC7C")]
		public AutoPoser autoPoser;

		[Token(Token = "0x400211F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82BCB4", Offset = "0x82BCB4")]
		public bool AutoPoseWhenNoGrabbable;

		[Token(Token = "0x4002120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82BCEC", Offset = "0x82BCEC")]
		public float HandAnimationSpeed;

		[Token(Token = "0x4002121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82BD24", Offset = "0x82BD24")]
		public Grabber grabber;

		[Token(Token = "0x4002122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82BD5C", Offset = "0x82BD5C")]
		public float GripAmount;

		[Token(Token = "0x4002123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float _prevGrip;

		[Token(Token = "0x4002124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float PointAmount;

		[Token(Token = "0x4002125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float _prevPoint;

		[Token(Token = "0x4002126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float ThumbAmount;

		[Token(Token = "0x4002127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float _prevThumb;

		[Token(Token = "0x4002128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int PoseId;

		[Token(Token = "0x4002129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private ControllerOffsetHelper offset;

		[Token(Token = "0x400212A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private InputBridge input;

		[Token(Token = "0x400212B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Rigidbody rigid;

		[Token(Token = "0x400212C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Transform offsetTransform;

		[Token(Token = "0x400212D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public GameObject PreviousHeldObject;

		[Token(Token = "0x400212E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool DoUpdateAnimationStates;

		[Token(Token = "0x400212F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		public bool DoUpdateHandPoser;

		[Token(Token = "0x170006A6")]
		private Vector3 offsetPosition
		{
			[Token(Token = "0x60031EE")]
			[Address(RVA = "0xD910C0", Offset = "0xD910C0", VA = "0xD910C0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170006A7")]
		private Vector3 offsetRotation
		{
			[Token(Token = "0x60031EF")]
			[Address(RVA = "0xD91174", Offset = "0xD91174", VA = "0xD91174")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x60031F0")]
		[Address(RVA = "0xD91228", Offset = "0xD91228", VA = "0xD91228")]
		private void Start()
		{
		}

		[Token(Token = "0x60031F1")]
		[Address(RVA = "0xD91508", Offset = "0xD91508", VA = "0xD91508")]
		public void Update()
		{
		}

		[Token(Token = "0x60031F2")]
		[Address(RVA = "0xD9156C", Offset = "0xD9156C", VA = "0xD9156C", Slot = "4")]
		public virtual void CheckForGrabChange()
		{
		}

		[Token(Token = "0x60031F3")]
		[Address(RVA = "0xD91720", Offset = "0xD91720", VA = "0xD91720", Slot = "5")]
		public virtual void OnGrabChange(GameObject newlyHeldObject)
		{
		}

		[Token(Token = "0x60031F4")]
		[Address(RVA = "0xD91894", Offset = "0xD91894", VA = "0xD91894", Slot = "6")]
		public virtual void OnGrabDrop()
		{
		}

		[Token(Token = "0x60031F5")]
		[Address(RVA = "0xD918FC", Offset = "0xD918FC", VA = "0xD918FC", Slot = "7")]
		public virtual void SetHandAnimator()
		{
		}

		[Token(Token = "0x60031F6")]
		[Address(RVA = "0xD919B0", Offset = "0xD919B0", VA = "0xD919B0", Slot = "8")]
		public virtual void UpdateFromInputs()
		{
		}

		[Token(Token = "0x60031F7")]
		[Address(RVA = "0xD91BDC", Offset = "0xD91BDC", VA = "0xD91BDC", Slot = "9")]
		public virtual void UpdateAnimimationStates()
		{
		}

		[Token(Token = "0x60031F8")]
		[Address(RVA = "0xD9205C", Offset = "0xD9205C", VA = "0xD9205C")]
		private void setAnimatorBlend(float min, float max, float input, int animationLayer)
		{
		}

		[Token(Token = "0x60031F9")]
		[Address(RVA = "0xD92084", Offset = "0xD92084", VA = "0xD92084", Slot = "10")]
		public virtual bool IsAnimatorGrabbable()
		{
			return default(bool);
		}

		[Token(Token = "0x60031FA")]
		[Address(RVA = "0xD92194", Offset = "0xD92194", VA = "0xD92194", Slot = "11")]
		public virtual void UpdateHandPoser()
		{
		}

		[Token(Token = "0x60031FB")]
		[Address(RVA = "0xD922FC", Offset = "0xD922FC", VA = "0xD922FC", Slot = "12")]
		public virtual void EnableHandPoser()
		{
		}

		[Token(Token = "0x60031FC")]
		[Address(RVA = "0xD92390", Offset = "0xD92390", VA = "0xD92390", Slot = "13")]
		public virtual void EnableAutoPoser(bool continuous)
		{
		}

		[Token(Token = "0x60031FD")]
		[Address(RVA = "0xD92520", Offset = "0xD92520", VA = "0xD92520", Slot = "14")]
		public virtual void DisableAutoPoser()
		{
		}

		[Token(Token = "0x60031FE")]
		[Address(RVA = "0xD925A8", Offset = "0xD925A8", VA = "0xD925A8", Slot = "15")]
		public virtual void EnableHandAnimator()
		{
		}

		[Token(Token = "0x60031FF")]
		[Address(RVA = "0xD92654", Offset = "0xD92654", VA = "0xD92654", Slot = "16")]
		public virtual void DisableHandAnimator()
		{
		}

		[Token(Token = "0x6003200")]
		[Address(RVA = "0xD92700", Offset = "0xD92700", VA = "0xD92700", Slot = "17")]
		public virtual void OnGrabberGrabbed(Grabbable grabbed)
		{
		}

		[Token(Token = "0x6003201")]
		[Address(RVA = "0xD92800", Offset = "0xD92800", VA = "0xD92800", Slot = "18")]
		public virtual void OnGrabberReleased(Grabbable released)
		{
		}

		[Token(Token = "0x6003202")]
		[Address(RVA = "0xD92804", Offset = "0xD92804", VA = "0xD92804")]
		public HandController()
		{
		}
	}
	[Token(Token = "0x20005B5")]
	public class HandPhysics : MonoBehaviour
	{
		[Token(Token = "0x2000743")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8210F0", Offset = "0x8210F0")]
		private sealed class <UnignoreAllCollisions>d__31 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40027EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40027EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40027ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandPhysics <>4__this;

			[Token(Token = "0x40027EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Grabbable <thisGrabbable>5__2;

			[Token(Token = "0x1700073E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003734")]
				[Address(RVA = "0xD95584", Offset = "0xD95584", VA = "0xD95584", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700073F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003736")]
				[Address(RVA = "0xD955EC", Offset = "0xD955EC", VA = "0xD955EC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003731")]
			[Address(RVA = "0xD948F8", Offset = "0xD948F8", VA = "0xD948F8")]
			[DebuggerHidden]
			public <UnignoreAllCollisions>d__31(int <>1__state)
			{
			}

			[Token(Token = "0x6003732")]
			[Address(RVA = "0xD954C0", Offset = "0xD954C0", VA = "0xD954C0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003733")]
			[Address(RVA = "0xD954C4", Offset = "0xD954C4", VA = "0xD954C4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003735")]
			[Address(RVA = "0xD9558C", Offset = "0xD9558C", VA = "0xD9558C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82BD94", Offset = "0x82BD94")]
		public Transform AttachTo;

		[Token(Token = "0x4002131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82BDCC", Offset = "0x82BDCC")]
		public float HandVelocity;

		[Token(Token = "0x4002132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82BE04", Offset = "0x82BE04")]
		public bool DisableHandCollidersOnGrab;

		[Token(Token = "0x4002133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82BE3C", Offset = "0x82BE3C")]
		public float SnapBackDistance;

		[Token(Token = "0x4002134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82BE74", Offset = "0x82BE74")]
		public Grabber ThisGrabber;

		[Token(Token = "0x4002135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82BEAC", Offset = "0x82BEAC")]
		public Grabber DisableGrabber;

		[Token(Token = "0x4002136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82BEE4", Offset = "0x82BEE4")]
		public RemoteGrabber ThisRemoteGrabber;

		[Token(Token = "0x4002137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82BF1C", Offset = "0x82BF1C")]
		public RemoteGrabber DisableRemoteGrabber;

		[Token(Token = "0x4002138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82BF54", Offset = "0x82BF54")]
		public PhysicMaterial ColliderMaterial;

		[Token(Token = "0x4002139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform HandModel;

		[Token(Token = "0x400213A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform HandModelOffset;

		[Token(Token = "0x400213B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<Collider> handColliders;

		[Token(Token = "0x400213C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody rigid;

		[Token(Token = "0x400213D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private ConfigurableJoint configJoint;

		[Token(Token = "0x400213E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Grabbable heldGrabbable;

		[Token(Token = "0x400213F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<Collider> collisions;

		[Token(Token = "0x4002140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private LineRenderer line;

		[Token(Token = "0x4002141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 localHandOffset;

		[Token(Token = "0x4002142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 localHandOffsetRotation;

		[Token(Token = "0x4002143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool wasHoldingObject;

		[Token(Token = "0x4002144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Grabbable remoteIgnoredGrabbable;

		[Token(Token = "0x4002145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Transform _priorParent;

		[Token(Token = "0x4002146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Vector3 _priorLocalOffsetPosition;

		[Token(Token = "0x170006A8")]
		public bool HoldingObject
		{
			[Token(Token = "0x6003203")]
			[Address(RVA = "0xD935E8", Offset = "0xD935E8", VA = "0xD935E8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6003204")]
		[Address(RVA = "0xD936B0", Offset = "0xD936B0", VA = "0xD936B0")]
		private void Start()
		{
		}

		[Token(Token = "0x6003205")]
		[Address(RVA = "0xD93B6C", Offset = "0xD93B6C", VA = "0xD93B6C")]
		private void Update()
		{
		}

		[Token(Token = "0x6003206")]
		[Address(RVA = "0xD94384", Offset = "0xD94384", VA = "0xD94384")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6003207")]
		[Address(RVA = "0xD93968", Offset = "0xD93968", VA = "0xD93968")]
		private void initHandColliders()
		{
		}

		[Token(Token = "0x6003208")]
		[Address(RVA = "0xD9409C", Offset = "0xD9409C", VA = "0xD9409C")]
		private void checkRemoteCollision()
		{
		}

		[Token(Token = "0x6003209")]
		[Address(RVA = "0xD93EDC", Offset = "0xD93EDC", VA = "0xD93EDC")]
		private void drawDistanceLine()
		{
		}

		[Token(Token = "0x600320A")]
		[Address(RVA = "0xD94248", Offset = "0xD94248", VA = "0xD94248")]
		private void checkBreakDistance()
		{
		}

		[Token(Token = "0x600320B")]
		[Address(RVA = "0xD93D08", Offset = "0xD93D08", VA = "0xD93D08")]
		private void updateHandGraphics()
		{
		}

		[Token(Token = "0x600320C")]
		[Address(RVA = "0xD94888", Offset = "0xD94888", VA = "0xD94888")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x83469C", Offset = "0x83469C")]
		private IEnumerator UnignoreAllCollisions()
		{
			return null;
		}

		[Token(Token = "0x600320D")]
		[Address(RVA = "0xD94768", Offset = "0xD94768", VA = "0xD94768")]
		public void IgnoreGrabbableCollisions(Grabbable grab, bool ignorePhysics)
		{
		}

		[Token(Token = "0x600320E")]
		[Address(RVA = "0xD94924", Offset = "0xD94924", VA = "0xD94924")]
		public void DisableHandColliders()
		{
		}

		[Token(Token = "0x600320F")]
		[Address(RVA = "0xD94A58", Offset = "0xD94A58", VA = "0xD94A58")]
		public void EnableHandColliders()
		{
		}

		[Token(Token = "0x6003210")]
		[Address(RVA = "0xD94B8C", Offset = "0xD94B8C", VA = "0xD94B8C", Slot = "4")]
		public virtual void OnGrabbedObject(Grabbable grabbedObject)
		{
		}

		[Token(Token = "0x6003211")]
		[Address(RVA = "0xD94BA4", Offset = "0xD94BA4", VA = "0xD94BA4", Slot = "5")]
		public virtual void LockLocalPosition()
		{
		}

		[Token(Token = "0x6003212")]
		[Address(RVA = "0xD94BF4", Offset = "0xD94BF4", VA = "0xD94BF4", Slot = "6")]
		public virtual void UnlockLocalPosition()
		{
		}

		[Token(Token = "0x6003213")]
		[Address(RVA = "0xD94C28", Offset = "0xD94C28", VA = "0xD94C28", Slot = "7")]
		public virtual void OnReleasedObject(Grabbable grabbedObject)
		{
		}

		[Token(Token = "0x6003214")]
		[Address(RVA = "0xD94CD0", Offset = "0xD94CD0", VA = "0xD94CD0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6003215")]
		[Address(RVA = "0xD94ECC", Offset = "0xD94ECC", VA = "0xD94ECC", Slot = "8")]
		public virtual void LockOffset()
		{
		}

		[Token(Token = "0x6003216")]
		[Address(RVA = "0xD94F1C", Offset = "0xD94F1C", VA = "0xD94F1C", Slot = "9")]
		public virtual void UnlockOffset()
		{
		}

		[Token(Token = "0x6003217")]
		[Address(RVA = "0xD95048", Offset = "0xD95048", VA = "0xD95048")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6003218")]
		[Address(RVA = "0xD952D0", Offset = "0xD952D0", VA = "0xD952D0")]
		private void OnCollisionStay(Collision collision)
		{
		}

		[Token(Token = "0x6003219")]
		[Address(RVA = "0xD9542C", Offset = "0xD9542C", VA = "0xD9542C")]
		public bool IsValidCollision(Collider col)
		{
			return default(bool);
		}

		[Token(Token = "0x600321A")]
		[Address(RVA = "0xD95434", Offset = "0xD95434", VA = "0xD95434")]
		public HandPhysics()
		{
		}
	}
	[Token(Token = "0x20005B6")]
	public class HandRepresentationHelper : MonoBehaviour
	{
		[Token(Token = "0x4002147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82BF8C", Offset = "0x82BF8C")]
		public Transform HandToToggle;

		[Token(Token = "0x4002148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82BFC4", Offset = "0x82BFC4")]
		public Transform OtherHandTransform;

		[Token(Token = "0x4002149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82BFFC", Offset = "0x82BFFC")]
		public float DistanceToShow;

		[Token(Token = "0x600321B")]
		[Address(RVA = "0xD96768", Offset = "0xD96768", VA = "0xD96768")]
		private void Update()
		{
		}

		[Token(Token = "0x600321C")]
		[Address(RVA = "0xD96870", Offset = "0xD96870", VA = "0xD96870")]
		public HandRepresentationHelper()
		{
		}
	}
	[Token(Token = "0x20005B7")]
	public class HandleGFXHelper : MonoBehaviour
	{
		[Token(Token = "0x400214A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform LookAt;

		[Token(Token = "0x400214B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabbable HandleGrabbable;

		[Token(Token = "0x400214C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float Speed;

		[Token(Token = "0x400214D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float LocalYMin;

		[Token(Token = "0x400214E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float LocalYMax;

		[Token(Token = "0x400214F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 initialRot;

		[Token(Token = "0x600321D")]
		[Address(RVA = "0xD96884", Offset = "0xD96884", VA = "0xD96884")]
		private void Start()
		{
		}

		[Token(Token = "0x600321E")]
		[Address(RVA = "0xD968C0", Offset = "0xD968C0", VA = "0xD968C0")]
		private void Update()
		{
		}

		[Token(Token = "0x600321F")]
		[Address(RVA = "0xD96C98", Offset = "0xD96C98", VA = "0xD96C98")]
		public HandleGFXHelper()
		{
		}
	}
	[Token(Token = "0x20005B8")]
	public class HandleHelper : MonoBehaviour
	{
		[Token(Token = "0x2000744")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x821100", Offset = "0x821100")]
		private sealed class <doRelease>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40027EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40027F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40027F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandleHelper <>4__this;

			[Token(Token = "0x17000740")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600373A")]
				[Address(RVA = "0xD972C4", Offset = "0xD972C4", VA = "0xD972C4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000741")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600373C")]
				[Address(RVA = "0xD9732C", Offset = "0xD9732C", VA = "0xD9732C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003737")]
			[Address(RVA = "0xD971D8", Offset = "0xD971D8", VA = "0xD971D8")]
			[DebuggerHidden]
			public <doRelease>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6003738")]
			[Address(RVA = "0xD9720C", Offset = "0xD9720C", VA = "0xD9720C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003739")]
			[Address(RVA = "0xD97210", Offset = "0xD97210", VA = "0xD97210", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600373B")]
			[Address(RVA = "0xD972CC", Offset = "0xD972CC", VA = "0xD972CC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody ParentRigid;

		[Token(Token = "0x4002151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform HandleTransform;

		[Token(Token = "0x4002152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Grabbable thisGrab;

		[Token(Token = "0x4002153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody rb;

		[Token(Token = "0x4002154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool didRelease;

		[Token(Token = "0x4002155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Collider col;

		[Token(Token = "0x4002156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 lastAngularVelocity;

		[Token(Token = "0x6003220")]
		[Address(RVA = "0xD96CB4", Offset = "0xD96CB4", VA = "0xD96CB4")]
		private void Start()
		{
		}

		[Token(Token = "0x6003221")]
		[Address(RVA = "0xD96E28", Offset = "0xD96E28", VA = "0xD96E28")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6003222")]
		[Address(RVA = "0xD97198", Offset = "0xD97198", VA = "0xD97198")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6003223")]
		[Address(RVA = "0xD97128", Offset = "0xD97128", VA = "0xD97128")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x834700", Offset = "0x834700")]
		private IEnumerator doRelease()
		{
			return null;
		}

		[Token(Token = "0x6003224")]
		[Address(RVA = "0xD97204", Offset = "0xD97204", VA = "0xD97204")]
		public HandleHelper()
		{
		}
	}
	[Token(Token = "0x20005B9")]
	public class IgnoreColliders : MonoBehaviour
	{
		[Token(Token = "0x4002157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Collider> CollidersToIgnore;

		[Token(Token = "0x6003225")]
		[Address(RVA = "0xD9899C", Offset = "0xD9899C", VA = "0xD9899C")]
		private void Start()
		{
		}

		[Token(Token = "0x6003226")]
		[Address(RVA = "0xD98B0C", Offset = "0xD98B0C", VA = "0xD98B0C")]
		public IgnoreColliders()
		{
		}
	}
	[Token(Token = "0x20005BA")]
	public class InvalidTeleportArea : MonoBehaviour
	{
		[Token(Token = "0x6003227")]
		[Address(RVA = "0xD9D08C", Offset = "0xD9D08C", VA = "0xD9D08C")]
		public InvalidTeleportArea()
		{
		}
	}
	[Token(Token = "0x20005BB")]
	public class JointBreaker : MonoBehaviour
	{
		[Token(Token = "0x4002158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float BreakDistance;

		[Token(Token = "0x4002159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float JointDistance;

		[Token(Token = "0x400215A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool DestroyJointOnBreak;

		[Token(Token = "0x400215B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GrabberEvent OnBreakEvent;

		[Token(Token = "0x400215C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Joint theJoint;

		[Token(Token = "0x400215D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 startPos;

		[Token(Token = "0x400215E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool brokeJoint;

		[Token(Token = "0x6003228")]
		[Address(RVA = "0xD9D094", Offset = "0xD9D094", VA = "0xD9D094")]
		private void Start()
		{
		}

		[Token(Token = "0x6003229")]
		[Address(RVA = "0xD9D110", Offset = "0xD9D110", VA = "0xD9D110")]
		private void Update()
		{
		}

		[Token(Token = "0x600322A")]
		[Address(RVA = "0xD9D20C", Offset = "0xD9D20C", VA = "0xD9D20C")]
		public void BreakJoint()
		{
		}

		[Token(Token = "0x600322B")]
		[Address(RVA = "0xD9D3A0", Offset = "0xD9D3A0", VA = "0xD9D3A0")]
		public JointBreaker()
		{
		}
	}
	[Token(Token = "0x20005BC")]
	public class JointHelper : MonoBehaviour
	{
		[Token(Token = "0x400215F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool LockXPosition;

		[Token(Token = "0x4002160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool LockYPosition;

		[Token(Token = "0x4002161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool LockZPosition;

		[Token(Token = "0x4002162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool LockXScale;

		[Token(Token = "0x4002163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool LockYScale;

		[Token(Token = "0x4002164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool LockZScale;

		[Token(Token = "0x4002165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public bool LockXRotation;

		[Token(Token = "0x4002166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
		public bool LockYRotation;

		[Token(Token = "0x4002167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool LockZRotation;

		[Token(Token = "0x4002168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 initialPosition;

		[Token(Token = "0x4002169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 initialRotation;

		[Token(Token = "0x400216A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 initialScale;

		[Token(Token = "0x400216B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 currentPosition;

		[Token(Token = "0x400216C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 currentScale;

		[Token(Token = "0x400216D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 currentRotation;

		[Token(Token = "0x600322C")]
		[Address(RVA = "0xD9D3B8", Offset = "0xD9D3B8", VA = "0xD9D3B8")]
		private void Start()
		{
		}

		[Token(Token = "0x600322D")]
		[Address(RVA = "0xD9D434", Offset = "0xD9D434", VA = "0xD9D434")]
		private void lockPosition()
		{
		}

		[Token(Token = "0x600322E")]
		[Address(RVA = "0xD9D690", Offset = "0xD9D690", VA = "0xD9D690")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600322F")]
		[Address(RVA = "0xD9D694", Offset = "0xD9D694", VA = "0xD9D694")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6003230")]
		[Address(RVA = "0xD9D698", Offset = "0xD9D698", VA = "0xD9D698")]
		public JointHelper()
		{
		}
	}
	[Token(Token = "0x20005BD")]
	public class RagdollHelper : MonoBehaviour
	{
		[Token(Token = "0x400216E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform player;

		[Token(Token = "0x400216F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Collider> colliders;

		[Token(Token = "0x4002170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Collider playerCol;

		[Token(Token = "0x6003231")]
		[Address(RVA = "0xB5F580", Offset = "0xB5F580", VA = "0xB5F580")]
		private void Start()
		{
		}

		[Token(Token = "0x6003232")]
		[Address(RVA = "0xB5F6D4", Offset = "0xB5F6D4", VA = "0xB5F6D4")]
		public RagdollHelper()
		{
		}
	}
	[Token(Token = "0x20005BE")]
	public class RingHelper : MonoBehaviour
	{
		[Token(Token = "0x4002171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82C034", Offset = "0x82C034")]
		public Grabbable grabbable;

		[Token(Token = "0x4002172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82C06C", Offset = "0x82C06C")]
		public GrabPoint Grabpoint;

		[Token(Token = "0x4002173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82C0A4", Offset = "0x82C0A4")]
		public Color RingColor;

		[Token(Token = "0x4002174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82C0DC", Offset = "0x82C0DC")]
		public Color RingSelectedColor;

		[Token(Token = "0x4002175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82C114", Offset = "0x82C114")]
		public Color RingSecondarySelectedColor;

		[Token(Token = "0x4002176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float ringSizeInRange;

		[Token(Token = "0x4002177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float ringSizeGrabbable;

		[Token(Token = "0x4002178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82C14C", Offset = "0x82C14C")]
		public bool HideIfHandsAreFull;

		[Token(Token = "0x4002179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82C184", Offset = "0x82C184")]
		public float RingFadeSpeed;

		[Token(Token = "0x400217A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Canvas canvas;

		[Token(Token = "0x400217B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Text text;

		[Token(Token = "0x400217C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private CanvasScaler scaler;

		[Token(Token = "0x400217D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Grabber leftGrabber;

		[Token(Token = "0x400217E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Grabber rightGrabber;

		[Token(Token = "0x400217F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Grabber closestGrabber;

		[Token(Token = "0x4002180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool handsFull;

		[Token(Token = "0x4002181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float _initalOpacity;

		[Token(Token = "0x4002182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float _currentOpacity;

		[Token(Token = "0x4002183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Transform mainCam;

		[Token(Token = "0x6003233")]
		[Address(RVA = "0xB62E20", Offset = "0xB62E20", VA = "0xB62E20")]
		private void Start()
		{
		}

		[Token(Token = "0x6003234")]
		[Address(RVA = "0xB62FC4", Offset = "0xB62FC4", VA = "0xB62FC4")]
		private void Update()
		{
		}

		[Token(Token = "0x6003235")]
		[Address(RVA = "0xB63604", Offset = "0xB63604", VA = "0xB63604", Slot = "4")]
		public virtual void AssignCamera()
		{
		}

		[Token(Token = "0x6003236")]
		[Address(RVA = "0xB636EC", Offset = "0xB636EC", VA = "0xB636EC", Slot = "5")]
		public virtual void AssignGrabbers()
		{
		}

		[Token(Token = "0x6003237")]
		[Address(RVA = "0xB634F0", Offset = "0xB634F0", VA = "0xB634F0")]
		private Color getSelectedColor()
		{
			return default(Color);
		}

		[Token(Token = "0x6003238")]
		[Address(RVA = "0xB63834", Offset = "0xB63834", VA = "0xB63834")]
		public RingHelper()
		{
		}
	}
	[Token(Token = "0x20005BF")]
	public class ScaleMaterialHelper : MonoBehaviour
	{
		[Token(Token = "0x4002184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Renderer ren;

		[Token(Token = "0x4002185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2 Tiling;

		[Token(Token = "0x4002186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 Offset;

		[Token(Token = "0x6003239")]
		[Address(RVA = "0xB64358", Offset = "0xB64358", VA = "0xB64358")]
		private void Start()
		{
		}

		[Token(Token = "0x600323A")]
		[Address(RVA = "0xB643B4", Offset = "0xB643B4", VA = "0xB643B4")]
		private void updateTexture()
		{
		}

		[Token(Token = "0x600323B")]
		[Address(RVA = "0xB644C8", Offset = "0xB644C8", VA = "0xB644C8")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600323C")]
		[Address(RVA = "0xB64500", Offset = "0xB64500", VA = "0xB64500")]
		public ScaleMaterialHelper()
		{
		}
	}
	[Token(Token = "0x20005C0")]
	public class StaticBatch : MonoBehaviour
	{
		[Token(Token = "0x4002187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material CombineMaterial;

		[Token(Token = "0x600323D")]
		[Address(RVA = "0xB68570", Offset = "0xB68570", VA = "0xB68570")]
		private void Start()
		{
		}

		[Token(Token = "0x600323E")]
		[Address(RVA = "0xB68B40", Offset = "0xB68B40", VA = "0xB68B40")]
		public StaticBatch()
		{
		}
	}
	[Token(Token = "0x20005C1")]
	public class TeleportDestination : MonoBehaviour
	{
		[Token(Token = "0x4002188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82C1BC", Offset = "0x82C1BC")]
		public Transform DestinationTransform;

		[Token(Token = "0x4002189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82C1F4", Offset = "0x82C1F4")]
		public bool ForcePlayerRotation;

		[Token(Token = "0x400218A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82C22C", Offset = "0x82C22C")]
		public UnityEvent OnPlayerTeleported;

		[Token(Token = "0x600323F")]
		[Address(RVA = "0xB697C8", Offset = "0xB697C8", VA = "0xB697C8")]
		public TeleportDestination()
		{
		}
	}
	[Token(Token = "0x20005C2")]
	public class TeleportPlayerOnEnter : MonoBehaviour
	{
		[Token(Token = "0x400218B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform TeleportDestination;

		[Token(Token = "0x6003240")]
		[Address(RVA = "0xB697D0", Offset = "0xB697D0", VA = "0xB697D0")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6003241")]
		[Address(RVA = "0xB69908", Offset = "0xB69908", VA = "0xB69908")]
		public TeleportPlayerOnEnter()
		{
		}
	}
	[Token(Token = "0x20005C3")]
	public class UITrigger : MonoBehaviour
	{
		[Token(Token = "0x6003242")]
		[Address(RVA = "0xB6B494", Offset = "0xB6B494", VA = "0xB6B494")]
		public UITrigger()
		{
		}
	}
	[Token(Token = "0x20005C4")]
	public class VRIFGrabpointUpdater : MonoBehaviour
	{
		[Token(Token = "0x400218C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82C264", Offset = "0x82C264")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82C264", Offset = "0x82C264")]
		public Vector3 PriorModelOffsetRightPosition;

		[Token(Token = "0x400218D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82C2C4", Offset = "0x82C2C4")]
		public Vector3 NewModelOffsetRightPosition;

		[Token(Token = "0x400218E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82C2FC", Offset = "0x82C2FC")]
		public Vector3 PriorModelOffsetRightRotation;

		[Token(Token = "0x400218F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82C334", Offset = "0x82C334")]
		public Vector3 NewModelOffsetRightRotation;

		[Token(Token = "0x4002190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82C36C", Offset = "0x82C36C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82C36C", Offset = "0x82C36C")]
		public Vector3 PriorModelOffsetLeftPosition;

		[Token(Token = "0x4002191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82C3CC", Offset = "0x82C3CC")]
		public Vector3 NewModelOffsetLeftPosition;

		[Token(Token = "0x4002192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82C404", Offset = "0x82C404")]
		public Vector3 PriorModelOffsetLeftRotation;

		[Token(Token = "0x4002193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82C43C", Offset = "0x82C43C")]
		public Vector3 NewModelOffsetLeftRotation;

		[Token(Token = "0x6003243")]
		[Address(RVA = "0xBA6ADC", Offset = "0xBA6ADC", VA = "0xBA6ADC")]
		private void Start()
		{
		}

		[Token(Token = "0x6003244")]
		[Address(RVA = "0xBA6AE0", Offset = "0xBA6AE0", VA = "0xBA6AE0")]
		public void ApplyGrabPointUpdate()
		{
		}

		[Token(Token = "0x6003245")]
		[Address(RVA = "0xBA6E8C", Offset = "0xBA6E8C", VA = "0xBA6E8C")]
		public VRIFGrabpointUpdater()
		{
		}
	}
	[Token(Token = "0x20005C5")]
	public class UIPointer : MonoBehaviour
	{
		[Token(Token = "0x4002194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82C474", Offset = "0x82C474")]
		public ControllerHand ControllerSide;

		[Token(Token = "0x4002195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82C4AC", Offset = "0x82C4AC")]
		public bool AutoUpdateUITransforms;

		[Token(Token = "0x4002196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject cursor;

		[Token(Token = "0x4002197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject _cursor;

		[Token(Token = "0x4002198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82C4E4", Offset = "0x82C4E4")]
		public bool HidePointerIfNoObjectsFound;

		[Token(Token = "0x4002199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82C51C", Offset = "0x82C51C")]
		public float FixedPointerLength;

		[Token(Token = "0x400219A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82C554", Offset = "0x82C554")]
		public bool CursorScaling;

		[Token(Token = "0x400219B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82C58C", Offset = "0x82C58C")]
		public float CursorMinScale;

		[Token(Token = "0x400219C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float CursorMaxScale;

		[Token(Token = "0x400219D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 _cursorInitialLocalScale;

		[Token(Token = "0x400219E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82C5C4", Offset = "0x82C5C4")]
		public float LineDistanceModifier;

		[Token(Token = "0x400219F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private VRUISystem uiSystem;

		[Token(Token = "0x40021A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private PointerEvents selectedPointerEvents;

		[Token(Token = "0x40021A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private PointerEventData data;

		[Token(Token = "0x40021A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82C5FC", Offset = "0x82C5FC")]
		public LineRenderer lineRenderer;

		[Token(Token = "0x6003246")]
		[Address(RVA = "0xB6AB4C", Offset = "0xB6AB4C", VA = "0xB6AB4C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6003247")]
		[Address(RVA = "0xB6ACA4", Offset = "0xB6ACA4", VA = "0xB6ACA4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6003248")]
		[Address(RVA = "0xB6AD28", Offset = "0xB6AD28", VA = "0xB6AD28")]
		public void Update()
		{
		}

		[Token(Token = "0x6003249")]
		[Address(RVA = "0xB6B2A0", Offset = "0xB6B2A0", VA = "0xB6B2A0", Slot = "4")]
		public virtual void HidePointer()
		{
		}

		[Token(Token = "0x600324A")]
		[Address(RVA = "0xB6B458", Offset = "0xB6B458", VA = "0xB6B458")]
		public UIPointer()
		{
		}
	}
	[Token(Token = "0x20005C6")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x82093C", Offset = "0x82093C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x82093C", Offset = "0x82093C")]
	public class VRCanvas : MonoBehaviour
	{
		[Token(Token = "0x600324B")]
		[Address(RVA = "0xB6B49C", Offset = "0xB6B49C", VA = "0xB6B49C")]
		private void Start()
		{
		}

		[Token(Token = "0x600324C")]
		[Address(RVA = "0xB6B518", Offset = "0xB6B518", VA = "0xB6B518")]
		public VRCanvas()
		{
		}
	}
	[Token(Token = "0x20005C7")]
	public class VRUISystem : BaseInputModule
	{
		[Token(Token = "0x40021A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82C634", Offset = "0x82C634")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82C634", Offset = "0x82C634")]
		public ControllerHand SelectedHand;

		[Token(Token = "0x40021A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82C694", Offset = "0x82C694")]
		public Transform LeftPointerTransform;

		[Token(Token = "0x40021A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82C6CC", Offset = "0x82C6CC")]
		public Transform RightPointerTransform;

		[Token(Token = "0x40021A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82C704", Offset = "0x82C704")]
		public List<ControllerBinding> ControllerInput;

		[Token(Token = "0x40021A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82C73C", Offset = "0x82C73C")]
		public InputActionReference UIInputAction;

		[Token(Token = "0x40021A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82C774", Offset = "0x82C774")]
		public bool AddPhysicsRaycaster;

		[Token(Token = "0x40021A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public LayerMask PhysicsRaycasterEventMask;

		[Token(Token = "0x40021AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82C7AC", Offset = "0x82C7AC")]
		public bool RightThumbstickScroll;

		[Token(Token = "0x40021AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82C7E4", Offset = "0x82C7E4")]
		public GameObject PressingObject;

		[Token(Token = "0x40021AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public GameObject DraggingObject;

		[Token(Token = "0x40021AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public GameObject ReleasingObject;

		[Token(Token = "0x40021AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x82C81C", Offset = "0x82C81C")]
		private PointerEventData <EventData>k__BackingField;

		[Token(Token = "0x40021AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Camera cameraCaster;

		[Token(Token = "0x40021B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private GameObject _initialPressObject;

		[Token(Token = "0x40021B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool _lastInputDown;

		[Token(Token = "0x40021B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		private bool inputDown;

		[Token(Token = "0x40021B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static VRUISystem _instance;

		[Token(Token = "0x170006A9")]
		public PointerEventData EventData
		{
			[Token(Token = "0x600324D")]
			[Address(RVA = "0xBA70A0", Offset = "0xBA70A0", VA = "0xBA70A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x834764", Offset = "0x834764")]
			get
			{
				return null;
			}
			[Token(Token = "0x600324E")]
			[Address(RVA = "0xBA70A8", Offset = "0xBA70A8", VA = "0xBA70A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x834774", Offset = "0x834774")]
			private set
			{
			}
		}

		[Token(Token = "0x170006AA")]
		public static VRUISystem Instance
		{
			[Token(Token = "0x600324F")]
			[Address(RVA = "0xBA70B0", Offset = "0xBA70B0", VA = "0xBA70B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003250")]
		[Address(RVA = "0xBA726C", Offset = "0xBA726C", VA = "0xBA726C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6003251")]
		[Address(RVA = "0xBA7374", Offset = "0xBA7374", VA = "0xBA7374")]
		private void init()
		{
		}

		[Token(Token = "0x6003252")]
		[Address(RVA = "0xBA74C0", Offset = "0xBA74C0", VA = "0xBA74C0", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x6003253")]
		[Address(RVA = "0xBA7844", Offset = "0xBA7844", VA = "0xBA7844", Slot = "26")]
		public virtual bool InputReady()
		{
			return default(bool);
		}

		[Token(Token = "0x6003254")]
		[Address(RVA = "0xBA79B4", Offset = "0xBA79B4", VA = "0xBA79B4", Slot = "27")]
		public virtual bool CameraCasterReady()
		{
			return default(bool);
		}

		[Token(Token = "0x6003255")]
		[Address(RVA = "0xBA7A5C", Offset = "0xBA7A5C", VA = "0xBA7A5C", Slot = "28")]
		public virtual void PressDown()
		{
		}

		[Token(Token = "0x6003256")]
		[Address(RVA = "0xBA7C68", Offset = "0xBA7C68", VA = "0xBA7C68", Slot = "29")]
		public virtual void Press()
		{
		}

		[Token(Token = "0x6003257")]
		[Address(RVA = "0xBA7E34", Offset = "0xBA7E34", VA = "0xBA7E34", Slot = "30")]
		public virtual void Release()
		{
		}

		[Token(Token = "0x6003258")]
		[Address(RVA = "0xBA80A8", Offset = "0xBA80A8", VA = "0xBA80A8", Slot = "31")]
		public virtual void ClearAll()
		{
		}

		[Token(Token = "0x6003259")]
		[Address(RVA = "0xBA8134", Offset = "0xBA8134", VA = "0xBA8134", Slot = "32")]
		public virtual void SetPressingObject(GameObject pressing)
		{
		}

		[Token(Token = "0x600325A")]
		[Address(RVA = "0xBA816C", Offset = "0xBA816C", VA = "0xBA816C", Slot = "33")]
		public virtual void SetDraggingObject(GameObject dragging)
		{
		}

		[Token(Token = "0x600325B")]
		[Address(RVA = "0xBA818C", Offset = "0xBA818C", VA = "0xBA818C", Slot = "34")]
		public virtual void SetReleasingObject(GameObject releasing)
		{
		}

		[Token(Token = "0x600325C")]
		[Address(RVA = "0xBA8194", Offset = "0xBA8194", VA = "0xBA8194", Slot = "35")]
		public virtual void AssignCameraToAllCanvases(Camera cam)
		{
		}

		[Token(Token = "0x600325D")]
		[Address(RVA = "0xBA827C", Offset = "0xBA827C", VA = "0xBA827C", Slot = "36")]
		public virtual void AddCanvas(Canvas canvas)
		{
		}

		[Token(Token = "0x600325E")]
		[Address(RVA = "0xBA8290", Offset = "0xBA8290", VA = "0xBA8290", Slot = "37")]
		public virtual void AddCanvasToCamera(Canvas canvas, Camera cam)
		{
		}

		[Token(Token = "0x600325F")]
		[Address(RVA = "0xBA82B0", Offset = "0xBA82B0", VA = "0xBA82B0", Slot = "38")]
		public virtual void UpdateControllerHand(ControllerHand hand)
		{
		}

		[Token(Token = "0x6003260")]
		[Address(RVA = "0xBA8448", Offset = "0xBA8448", VA = "0xBA8448")]
		public VRUISystem()
		{
		}
	}
	[Token(Token = "0x20005C8")]
	public class DestroyIfPlayMode : MonoBehaviour
	{
		[Token(Token = "0x6003261")]
		[Address(RVA = "0xA87008", Offset = "0xA87008", VA = "0xA87008")]
		private void Start()
		{
		}

		[Token(Token = "0x6003262")]
		[Address(RVA = "0xA870B8", Offset = "0xA870B8", VA = "0xA870B8")]
		public DestroyIfPlayMode()
		{
		}
	}
	[Token(Token = "0x20005C9")]
	public class VRUtils : MonoBehaviour
	{
		[Token(Token = "0x40021B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static VRUtils _instance;

		[Token(Token = "0x40021B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color DebugTextColor;

		[Token(Token = "0x40021B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform DebugTextHolder;

		[Token(Token = "0x40021B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float MaxTextEntries;

		[Token(Token = "0x170006AB")]
		public static VRUtils Instance
		{
			[Token(Token = "0x6003263")]
			[Address(RVA = "0xBA84EC", Offset = "0xBA84EC", VA = "0xBA84EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003264")]
		[Address(RVA = "0xBA8624", Offset = "0xBA8624", VA = "0xBA8624")]
		private void Awake()
		{
		}

		[Token(Token = "0x6003265")]
		[Address(RVA = "0xBA8728", Offset = "0xBA8728", VA = "0xBA8728")]
		public void Log(string msg)
		{
		}

		[Token(Token = "0x6003266")]
		[Address(RVA = "0xBA8AA8", Offset = "0xBA8AA8", VA = "0xBA8AA8")]
		public AudioSource PlaySpatialClipAt(AudioClip clip, Vector3 pos, float volume, float spatialBlend = 1f, float randomizePitch = 0f)
		{
			return null;
		}

		[Token(Token = "0x6003267")]
		[Address(RVA = "0xBA8C54", Offset = "0xBA8C54", VA = "0xBA8C54")]
		private float getRandomizedPitch(float randomAmount)
		{
			return default(float);
		}

		[Token(Token = "0x6003268")]
		[Address(RVA = "0xBA8C9C", Offset = "0xBA8C9C", VA = "0xBA8C9C")]
		public VRUtils()
		{
		}
	}
	[Token(Token = "0x20005CA")]
	public class AmmoDispenser : MonoBehaviour
	{
		[Token(Token = "0x40021B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Grabber LeftGrabber;

		[Token(Token = "0x40021B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabber RightGrabber;

		[Token(Token = "0x40021BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject AmmoDispenserObject;

		[Token(Token = "0x40021BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject PistolClip;

		[Token(Token = "0x40021BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject ShotgunShell;

		[Token(Token = "0x40021BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject RifleClip;

		[Token(Token = "0x6003269")]
		[Address(RVA = "0xA77900", Offset = "0xA77900", VA = "0xA77900")]
		private void Update()
		{
		}

		[Token(Token = "0x600326A")]
		[Address(RVA = "0xA77978", Offset = "0xA77978", VA = "0xA77978")]
		private bool grabberHasWeapon(Grabber g)
		{
			return default(bool);
		}

		[Token(Token = "0x600326B")]
		[Address(RVA = "0xA77AA8", Offset = "0xA77AA8", VA = "0xA77AA8")]
		private GameObject getAmmo()
		{
			return null;
		}

		[Token(Token = "0x600326C")]
		[Address(RVA = "0xA77D08", Offset = "0xA77D08", VA = "0xA77D08")]
		public void GrabAmmo(Grabber grabber)
		{
		}

		[Token(Token = "0x600326D")]
		[Address(RVA = "0xA78040", Offset = "0xA78040", VA = "0xA78040")]
		public AmmoDispenser()
		{
		}
	}
	[Token(Token = "0x20005CB")]
	public class AmmoDisplay : MonoBehaviour
	{
		[Token(Token = "0x40021BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RaycastWeapon Weapon;

		[Token(Token = "0x40021BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text AmmoLabel;

		[Token(Token = "0x600326E")]
		[Address(RVA = "0xA78048", Offset = "0xA78048", VA = "0xA78048")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600326F")]
		[Address(RVA = "0xA78124", Offset = "0xA78124", VA = "0xA78124")]
		public AmmoDisplay()
		{
		}
	}
	[Token(Token = "0x20005CC")]
	public class Bullet : MonoBehaviour
	{
		[Token(Token = "0x6003270")]
		[Address(RVA = "0xA7E96C", Offset = "0xA7E96C", VA = "0xA7E96C")]
		public Bullet()
		{
		}
	}
	[Token(Token = "0x20005CD")]
	public class BulletInsert : MonoBehaviour
	{
		[Token(Token = "0x40021C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RaycastWeapon Weapon;

		[Token(Token = "0x40021C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string AcceptBulletName;

		[Token(Token = "0x40021C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip InsertSound;

		[Token(Token = "0x6003271")]
		[Address(RVA = "0xA7EE08", Offset = "0xA7EE08", VA = "0xA7EE08")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6003272")]
		[Address(RVA = "0xA7F04C", Offset = "0xA7F04C", VA = "0xA7F04C")]
		public BulletInsert()
		{
		}
	}
	[Token(Token = "0x20005CE")]
	public class BulletWeapon : GrabbableEvents
	{
		[Token(Token = "0x2000745")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x821110", Offset = "0x821110")]
		private sealed class <doMuzzleFlash>d__65 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40027F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40027F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40027F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BulletWeapon <>4__this;

			[Token(Token = "0x17000742")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003740")]
				[Address(RVA = "0xA80F4C", Offset = "0xA80F4C", VA = "0xA80F4C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000743")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003742")]
				[Address(RVA = "0xA80FB4", Offset = "0xA80FB4", VA = "0xA80FB4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600373D")]
			[Address(RVA = "0xA80664", Offset = "0xA80664", VA = "0xA80664")]
			[DebuggerHidden]
			public <doMuzzleFlash>d__65(int <>1__state)
			{
			}

			[Token(Token = "0x600373E")]
			[Address(RVA = "0xA80E1C", Offset = "0xA80E1C", VA = "0xA80E1C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600373F")]
			[Address(RVA = "0xA80E20", Offset = "0xA80E20", VA = "0xA80E20", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003741")]
			[Address(RVA = "0xA80F54", Offset = "0xA80F54", VA = "0xA80F54", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000746")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x821120", Offset = "0x821120")]
		private sealed class <animateSlideAndEject>d__66 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40027F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40027F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40027F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BulletWeapon <>4__this;

			[Token(Token = "0x40027F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <frames>5__2;

			[Token(Token = "0x40027F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private bool <slideEndReached>5__3;

			[Token(Token = "0x40027FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 <slideDestination>5__4;

			[Token(Token = "0x40027FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private bool <slideBeginningReached>5__5;

			[Token(Token = "0x17000744")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003746")]
				[Address(RVA = "0xA80DAC", Offset = "0xA80DAC", VA = "0xA80DAC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000745")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003748")]
				[Address(RVA = "0xA80E14", Offset = "0xA80E14", VA = "0xA80E14", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003743")]
			[Address(RVA = "0xA80690", Offset = "0xA80690", VA = "0xA80690")]
			[DebuggerHidden]
			public <animateSlideAndEject>d__66(int <>1__state)
			{
			}

			[Token(Token = "0x6003744")]
			[Address(RVA = "0xA8083C", Offset = "0xA8083C", VA = "0xA8083C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003745")]
			[Address(RVA = "0xA80840", Offset = "0xA80840", VA = "0xA80840", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003747")]
			[Address(RVA = "0xA80DB4", Offset = "0xA80DB4", VA = "0xA80DB4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40021C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82C82C", Offset = "0x82C82C")]
		public FiringType FiringMethod;

		[Token(Token = "0x40021C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82C864", Offset = "0x82C864")]
		public ReloadType ReloadMethod;

		[Token(Token = "0x40021C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82C89C", Offset = "0x82C89C")]
		public float FiringRate;

		[Token(Token = "0x40021C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float lastShotTime;

		[Token(Token = "0x40021C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82C8D4", Offset = "0x82C8D4")]
		public float InternalAmmo;

		[Token(Token = "0x40021C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82C90C", Offset = "0x82C90C")]
		public float MaxInternalAmmo;

		[Token(Token = "0x40021C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82C944", Offset = "0x82C944")]
		public float BulletCasingForce;

		[Token(Token = "0x40021CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82C97C", Offset = "0x82C97C")]
		public bool AutoChamberRounds;

		[Token(Token = "0x40021CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82C9B4", Offset = "0x82C9B4")]
		public bool MustChamberRounds;

		[Token(Token = "0x40021CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82C9EC", Offset = "0x82C9EC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82C9EC", Offset = "0x82C9EC")]
		public float SlowMoRateOfFire;

		[Token(Token = "0x40021CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82CA4C", Offset = "0x82CA4C")]
		public Vector3 RecoilForce;

		[Token(Token = "0x40021CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82CA84", Offset = "0x82CA84")]
		public float RecoilDuration;

		[Token(Token = "0x40021CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Rigidbody weaponRigid;

		[Token(Token = "0x40021D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82CABC", Offset = "0x82CABC")]
		public Transform TriggerTransform;

		[Token(Token = "0x40021D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82CAF4", Offset = "0x82CAF4")]
		public Transform SlideTransform;

		[Token(Token = "0x40021D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82CB2C", Offset = "0x82CB2C")]
		public Transform MuzzlePointTransform;

		[Token(Token = "0x40021D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82CB64", Offset = "0x82CB64")]
		public Transform EjectPointTransform;

		[Token(Token = "0x40021D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82CB9C", Offset = "0x82CB9C")]
		public Transform ChamberedBullet;

		[Token(Token = "0x40021D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82CBD4", Offset = "0x82CBD4")]
		public GameObject MuzzleFlashObject;

		[Token(Token = "0x40021D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82CC0C", Offset = "0x82CC0C")]
		public GameObject BulletCasingPrefab;

		[Token(Token = "0x40021D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82CC44", Offset = "0x82CC44")]
		public GameObject ProjectilePrefab;

		[Token(Token = "0x40021D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82CC7C", Offset = "0x82CC7C")]
		public GameObject HitFXPrefab;

		[Token(Token = "0x40021D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82CCB4", Offset = "0x82CCB4")]
		public AudioClip GunShotSound;

		[Token(Token = "0x40021DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82CCEC", Offset = "0x82CCEC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x82CCEC", Offset = "0x82CCEC")]
		public float GunShotVolume;

		[Token(Token = "0x40021DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82CD40", Offset = "0x82CD40")]
		public AudioClip EmptySound;

		[Token(Token = "0x40021DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82CD78", Offset = "0x82CD78")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x82CD78", Offset = "0x82CD78")]
		public float EmptySoundVolume;

		[Token(Token = "0x40021DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82CDCC", Offset = "0x82CDCC")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82CDCC", Offset = "0x82CDCC")]
		public float SlideDistance;

		[Token(Token = "0x40021DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82CE2C", Offset = "0x82CE2C")]
		public bool ForceSlideBackOnLastShot;

		[Token(Token = "0x40021DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82CE64", Offset = "0x82CE64")]
		public float slideSpeed;

		[Token(Token = "0x40021E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float minSlideDistance;

		[Token(Token = "0x40021E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82CE9C", Offset = "0x82CE9C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82CE9C", Offset = "0x82CE9C")]
		public List<GrabbedControllerBinding> EjectInput;

		[Token(Token = "0x40021E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82CEFC", Offset = "0x82CEFC")]
		public List<GrabbedControllerBinding> ReleaseSlideInput;

		[Token(Token = "0x40021E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82CF34", Offset = "0x82CF34")]
		public List<GrabbedControllerBinding> ReloadInput;

		[Token(Token = "0x40021E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82CF6C", Offset = "0x82CF6C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82CF6C", Offset = "0x82CF6C")]
		public bool BulletInChamber;

		[Token(Token = "0x40021E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x101")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82CFCC", Offset = "0x82CFCC")]
		public bool EmptyBulletInChamber;

		[Token(Token = "0x40021E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82D004", Offset = "0x82D004")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D004", Offset = "0x82D004")]
		public UnityEvent onShootEvent;

		[Token(Token = "0x40021E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D064", Offset = "0x82D064")]
		public UnityEvent onAttachedAmmoEvent;

		[Token(Token = "0x40021E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D09C", Offset = "0x82D09C")]
		public UnityEvent onDetachedAmmoEvent;

		[Token(Token = "0x40021E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D0D4", Offset = "0x82D0D4")]
		public UnityEvent onWeaponChargedEvent;

		[Token(Token = "0x40021EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D10C", Offset = "0x82D10C")]
		public RaycastHitEvent onRaycastHitEvent;

		[Token(Token = "0x40021EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private bool slideForcedBack;

		[Token(Token = "0x40021EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private WeaponSlide ws;

		[Token(Token = "0x40021ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private bool readyToShoot;

		[Token(Token = "0x40021EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x141")]
		private bool playedEmptySound;

		[Token(Token = "0x40021EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private IEnumerator shotRoutine;

		[Token(Token = "0x6003273")]
		[Address(RVA = "0xA7F0A4", Offset = "0xA7F0A4", VA = "0xA7F0A4")]
		private void Start()
		{
		}

		[Token(Token = "0x6003274")]
		[Address(RVA = "0xA7F220", Offset = "0xA7F220", VA = "0xA7F220", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6003275")]
		[Address(RVA = "0xA7F3B4", Offset = "0xA7F3B4", VA = "0xA7F3B4")]
		private void checkSlideInput()
		{
		}

		[Token(Token = "0x6003276")]
		[Address(RVA = "0xA7F4C4", Offset = "0xA7F4C4", VA = "0xA7F4C4")]
		private void checkEjectInput()
		{
		}

		[Token(Token = "0x6003277")]
		[Address(RVA = "0xA7F5D4", Offset = "0xA7F5D4", VA = "0xA7F5D4", Slot = "27")]
		public virtual void CheckReloadInput()
		{
		}

		[Token(Token = "0x6003278")]
		[Address(RVA = "0xA7F6F0", Offset = "0xA7F6F0", VA = "0xA7F6F0", Slot = "28")]
		public virtual void UnlockSlide()
		{
		}

		[Token(Token = "0x6003279")]
		[Address(RVA = "0xA7F788", Offset = "0xA7F788", VA = "0xA7F788", Slot = "29")]
		public virtual void EjectMagazine()
		{
		}

		[Token(Token = "0x600327A")]
		[Address(RVA = "0xA7F834", Offset = "0xA7F834", VA = "0xA7F834", Slot = "30")]
		public virtual void Shoot()
		{
		}

		[Token(Token = "0x600327B")]
		[Address(RVA = "0xA7FDE0", Offset = "0xA7FDE0", VA = "0xA7FDE0", Slot = "31")]
		public virtual void ApplyRecoil()
		{
		}

		[Token(Token = "0x600327C")]
		[Address(RVA = "0xA7FF58", Offset = "0xA7FF58", VA = "0xA7FF58", Slot = "32")]
		public virtual void ApplyParticleFX(Vector3 position, Quaternion rotation, Collider attachTo)
		{
		}

		[Token(Token = "0x600327D")]
		[Address(RVA = "0xA800B4", Offset = "0xA800B4", VA = "0xA800B4", Slot = "33")]
		public virtual void OnAttachedAmmo()
		{
		}

		[Token(Token = "0x600327E")]
		[Address(RVA = "0xA800EC", Offset = "0xA800EC", VA = "0xA800EC", Slot = "34")]
		public virtual void OnDetachedAmmo()
		{
		}

		[Token(Token = "0x600327F")]
		[Address(RVA = "0xA80124", Offset = "0xA80124", VA = "0xA80124", Slot = "35")]
		public virtual int GetBulletCount()
		{
			return default(int);
		}

		[Token(Token = "0x6003280")]
		[Address(RVA = "0xA801AC", Offset = "0xA801AC", VA = "0xA801AC", Slot = "36")]
		public virtual void RemoveBullet()
		{
		}

		[Token(Token = "0x6003281")]
		[Address(RVA = "0xA802C8", Offset = "0xA802C8", VA = "0xA802C8", Slot = "37")]
		public virtual void Reload()
		{
		}

		[Token(Token = "0x6003282")]
		[Address(RVA = "0xA7F164", Offset = "0xA7F164", VA = "0xA7F164")]
		private void updateChamberedBullet()
		{
		}

		[Token(Token = "0x6003283")]
		[Address(RVA = "0xA7FCA8", Offset = "0xA7FCA8", VA = "0xA7FCA8")]
		private void chamberRound()
		{
		}

		[Token(Token = "0x6003284")]
		[Address(RVA = "0xA802D4", Offset = "0xA802D4", VA = "0xA802D4")]
		private void randomizeMuzzleFlashScaleRotation()
		{
		}

		[Token(Token = "0x6003285")]
		[Address(RVA = "0xA80414", Offset = "0xA80414", VA = "0xA80414", Slot = "38")]
		public virtual void OnWeaponCharged(bool allowCasingEject)
		{
		}

		[Token(Token = "0x6003286")]
		[Address(RVA = "0xA804D4", Offset = "0xA804D4", VA = "0xA804D4", Slot = "39")]
		protected virtual void ejectCasing()
		{
		}

		[Token(Token = "0x6003287")]
		[Address(RVA = "0xA7FD70", Offset = "0xA7FD70", VA = "0xA7FD70")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x834784", Offset = "0x834784")]
		private IEnumerator doMuzzleFlash()
		{
			return null;
		}

		[Token(Token = "0x6003288")]
		[Address(RVA = "0xA7FD00", Offset = "0xA7FD00", VA = "0xA7FD00")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8347E8", Offset = "0x8347E8")]
		private IEnumerator animateSlideAndEject()
		{
			return null;
		}

		[Token(Token = "0x6003289")]
		[Address(RVA = "0xA806BC", Offset = "0xA806BC", VA = "0xA806BC")]
		public BulletWeapon()
		{
		}
	}
	[Token(Token = "0x20005CF")]
	public class MagazineSlide : MonoBehaviour
	{
		[Token(Token = "0x2000747")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x821130", Offset = "0x821130")]
		private sealed class <EjectMagRoutine>d__23 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40027FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40027FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40027FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Grabbable ejectedMag;

			[Token(Token = "0x40027FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MagazineSlide <>4__this;

			[Token(Token = "0x17000746")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600374C")]
				[Address(RVA = "0xB565D8", Offset = "0xB565D8", VA = "0xB565D8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000747")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600374E")]
				[Address(RVA = "0xB56640", Offset = "0xB56640", VA = "0xB56640", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003749")]
			[Address(RVA = "0xB56040", Offset = "0xB56040", VA = "0xB56040")]
			[DebuggerHidden]
			public <EjectMagRoutine>d__23(int <>1__state)
			{
			}

			[Token(Token = "0x600374A")]
			[Address(RVA = "0xB562F0", Offset = "0xB562F0", VA = "0xB562F0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600374B")]
			[Address(RVA = "0xB562F4", Offset = "0xB562F4", VA = "0xB562F4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600374D")]
			[Address(RVA = "0xB565E0", Offset = "0xB565E0", VA = "0xB565E0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40021F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string AcceptableMagazineName;

		[Token(Token = "0x40021F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabbable AttachedWeapon;

		[Token(Token = "0x40021F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float ClipSnapDistance;

		[Token(Token = "0x40021F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float ClipUnsnapDistance;

		[Token(Token = "0x40021F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float EjectForce;

		[Token(Token = "0x40021F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Grabbable HeldMagazine;

		[Token(Token = "0x40021F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Collider HeldCollider;

		[Token(Token = "0x40021F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float MagazineDistance;

		[Token(Token = "0x40021F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool magazineInPlace;

		[Token(Token = "0x40021F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		private bool lockedInPlace;

		[Token(Token = "0x40021FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AudioClip ClipAttachSound;

		[Token(Token = "0x40021FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AudioClip ClipDetachSound;

		[Token(Token = "0x40021FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private RaycastWeapon parentWeapon;

		[Token(Token = "0x40021FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GrabberArea grabClipArea;

		[Token(Token = "0x40021FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float lastEjectTime;

		[Token(Token = "0x600328A")]
		[Address(RVA = "0xB551C8", Offset = "0xB551C8", VA = "0xB551C8")]
		private void Awake()
		{
		}

		[Token(Token = "0x600328B")]
		[Address(RVA = "0xB55320", Offset = "0xB55320", VA = "0xB55320")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600328C")]
		[Address(RVA = "0xB558E8", Offset = "0xB558E8", VA = "0xB558E8")]
		private bool recentlyEjected()
		{
			return default(bool);
		}

		[Token(Token = "0x600328D")]
		[Address(RVA = "0xB55894", Offset = "0xB55894", VA = "0xB55894")]
		private void moveMagazine(Vector3 localPosition)
		{
		}

		[Token(Token = "0x600328E")]
		[Address(RVA = "0xB55690", Offset = "0xB55690", VA = "0xB55690")]
		public void CheckGrabClipInput()
		{
		}

		[Token(Token = "0x600328F")]
		[Address(RVA = "0xB55924", Offset = "0xB55924", VA = "0xB55924")]
		private void attachMagazine()
		{
		}

		[Token(Token = "0x6003290")]
		[Address(RVA = "0xB55BBC", Offset = "0xB55BBC", VA = "0xB55BBC")]
		private Grabbable detachMagazine()
		{
			return null;
		}

		[Token(Token = "0x6003291")]
		[Address(RVA = "0xB55F7C", Offset = "0xB55F7C", VA = "0xB55F7C")]
		public void EjectMagazine()
		{
		}

		[Token(Token = "0x6003292")]
		[Address(RVA = "0xB55FC4", Offset = "0xB55FC4", VA = "0xB55FC4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x83484C", Offset = "0x83484C")]
		private IEnumerator EjectMagRoutine(Grabbable ejectedMag)
		{
			return null;
		}

		[Token(Token = "0x6003293")]
		[Address(RVA = "0xB55EA0", Offset = "0xB55EA0", VA = "0xB55EA0")]
		public void OnGrabClipArea(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x6003294")]
		[Address(RVA = "0xB5606C", Offset = "0xB5606C", VA = "0xB5606C", Slot = "4")]
		public virtual void AttachGrabbableMagazine(Grabbable mag, Collider magCollider)
		{
		}

		[Token(Token = "0x6003295")]
		[Address(RVA = "0xB56150", Offset = "0xB56150", VA = "0xB56150")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6003296")]
		[Address(RVA = "0xB56284", Offset = "0xB56284", VA = "0xB56284")]
		public MagazineSlide()
		{
		}
	}
	[Token(Token = "0x20005D0")]
	public class Projectile : MonoBehaviour
	{
		[Token(Token = "0x2000748")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x821140", Offset = "0x821140")]
		private sealed class <CheckForRaycast>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002800")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002801")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002802")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Projectile <>4__this;

			[Token(Token = "0x17000748")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003752")]
				[Address(RVA = "0xB5DE2C", Offset = "0xB5DE2C", VA = "0xB5DE2C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000749")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003754")]
				[Address(RVA = "0xB5DE94", Offset = "0xB5DE94", VA = "0xB5DE94", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600374F")]
			[Address(RVA = "0xB5DD04", Offset = "0xB5DD04", VA = "0xB5DD04")]
			[DebuggerHidden]
			public <CheckForRaycast>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6003750")]
			[Address(RVA = "0xB5DD50", Offset = "0xB5DD50", VA = "0xB5DD50", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003751")]
			[Address(RVA = "0xB5DD54", Offset = "0xB5DD54", VA = "0xB5DD54", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003753")]
			[Address(RVA = "0xB5DE34", Offset = "0xB5DE34", VA = "0xB5DE34", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40021FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject HitFXPrefab;

		[Token(Token = "0x4002200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool _checkRaycast;

		[Token(Token = "0x4002201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float Damage;

		[Token(Token = "0x4002202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float AddRigidForce;

		[Token(Token = "0x4002203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask ValidLayers;

		[Token(Token = "0x4002204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool StickToObject;

		[Token(Token = "0x4002205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float MinForceHit;

		[Token(Token = "0x4002206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D144", Offset = "0x82D144")]
		public UnityEvent onDealtDamageEvent;

		[Token(Token = "0x6003297")]
		[Address(RVA = "0xB5D440", Offset = "0xB5D440", VA = "0xB5D440")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6003298")]
		[Address(RVA = "0xB5D44C", Offset = "0xB5D44C", VA = "0xB5D44C", Slot = "4")]
		public virtual void OnCollisionEvent(Collision collision)
		{
		}

		[Token(Token = "0x6003299")]
		[Address(RVA = "0xB5D804", Offset = "0xB5D804", VA = "0xB5D804", Slot = "5")]
		public virtual void DoHitFX(Vector3 pos, Quaternion rot, Collider col)
		{
		}

		[Token(Token = "0x600329A")]
		[Address(RVA = "0xB5DA28", Offset = "0xB5DA28", VA = "0xB5DA28", Slot = "6")]
		public virtual void MarkAsRaycastBullet()
		{
		}

		[Token(Token = "0x600329B")]
		[Address(RVA = "0xB5DACC", Offset = "0xB5DACC", VA = "0xB5DACC", Slot = "7")]
		public virtual void DoRayCastProjectile()
		{
		}

		[Token(Token = "0x600329C")]
		[Address(RVA = "0xB5DA5C", Offset = "0xB5DA5C", VA = "0xB5DA5C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8348B0", Offset = "0x8348B0")]
		private IEnumerator CheckForRaycast()
		{
			return null;
		}

		[Token(Token = "0x600329D")]
		[Address(RVA = "0xB5DD30", Offset = "0xB5DD30", VA = "0xB5DD30")]
		public Projectile()
		{
		}
	}
	[Token(Token = "0x20005D1")]
	public class RaycastWeapon : GrabbableEvents
	{
		[Token(Token = "0x2000749")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x821150", Offset = "0x821150")]
		private sealed class <doMuzzleFlash>d__74 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002803")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002804")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002805")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RaycastWeapon <>4__this;

			[Token(Token = "0x1700074A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003758")]
				[Address(RVA = "0xB61B10", Offset = "0xB61B10", VA = "0xB61B10", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700074B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600375A")]
				[Address(RVA = "0xB61B78", Offset = "0xB61B78", VA = "0xB61B78", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003755")]
			[Address(RVA = "0xB61204", Offset = "0xB61204", VA = "0xB61204")]
			[DebuggerHidden]
			public <doMuzzleFlash>d__74(int <>1__state)
			{
			}

			[Token(Token = "0x6003756")]
			[Address(RVA = "0xB619E0", Offset = "0xB619E0", VA = "0xB619E0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003757")]
			[Address(RVA = "0xB619E4", Offset = "0xB619E4", VA = "0xB619E4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003759")]
			[Address(RVA = "0xB61B18", Offset = "0xB61B18", VA = "0xB61B18", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200074A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x821160", Offset = "0x821160")]
		private sealed class <animateSlideAndEject>d__75 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002806")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002807")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002808")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RaycastWeapon <>4__this;

			[Token(Token = "0x4002809")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <frames>5__2;

			[Token(Token = "0x400280A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private bool <slideEndReached>5__3;

			[Token(Token = "0x400280B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 <slideDestination>5__4;

			[Token(Token = "0x400280C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private bool <slideBeginningReached>5__5;

			[Token(Token = "0x1700074C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600375E")]
				[Address(RVA = "0xB61970", Offset = "0xB61970", VA = "0xB61970", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700074D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003760")]
				[Address(RVA = "0xB619D8", Offset = "0xB619D8", VA = "0xB619D8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600375B")]
			[Address(RVA = "0xB61230", Offset = "0xB61230", VA = "0xB61230")]
			[DebuggerHidden]
			public <animateSlideAndEject>d__75(int <>1__state)
			{
			}

			[Token(Token = "0x600375C")]
			[Address(RVA = "0xB61400", Offset = "0xB61400", VA = "0xB61400", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600375D")]
			[Address(RVA = "0xB61404", Offset = "0xB61404", VA = "0xB61404", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600375F")]
			[Address(RVA = "0xB61978", Offset = "0xB61978", VA = "0xB61978", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82D17C", Offset = "0x82D17C")]
		public float MaxRange;

		[Token(Token = "0x4002208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float Damage;

		[Token(Token = "0x4002209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D1B4", Offset = "0x82D1B4")]
		public FiringType FiringMethod;

		[Token(Token = "0x400220A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public ReloadType ReloadMethod;

		[Token(Token = "0x400220B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D1EC", Offset = "0x82D1EC")]
		public float FiringRate;

		[Token(Token = "0x400220C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float lastShotTime;

		[Token(Token = "0x400220D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D224", Offset = "0x82D224")]
		public float BulletImpactForce;

		[Token(Token = "0x400220E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D25C", Offset = "0x82D25C")]
		public float InternalAmmo;

		[Token(Token = "0x400220F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D294", Offset = "0x82D294")]
		public float MaxInternalAmmo;

		[Token(Token = "0x4002210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D2CC", Offset = "0x82D2CC")]
		public bool AutoChamberRounds;

		[Token(Token = "0x4002211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D304", Offset = "0x82D304")]
		public bool MustChamberRounds;

		[Token(Token = "0x4002212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82D33C", Offset = "0x82D33C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D33C", Offset = "0x82D33C")]
		public bool AlwaysFireProjectile;

		[Token(Token = "0x4002213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x57")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D39C", Offset = "0x82D39C")]
		public bool FireProjectileInSlowMo;

		[Token(Token = "0x4002214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D3D4", Offset = "0x82D3D4")]
		public float SlowMoRateOfFire;

		[Token(Token = "0x4002215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D40C", Offset = "0x82D40C")]
		public float ShotForce;

		[Token(Token = "0x4002216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D444", Offset = "0x82D444")]
		public float BulletCasingForce;

		[Token(Token = "0x4002217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82D47C", Offset = "0x82D47C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D47C", Offset = "0x82D47C")]
		public Vector3 RecoilForce;

		[Token(Token = "0x4002218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D4DC", Offset = "0x82D4DC")]
		public float RecoilDuration;

		[Token(Token = "0x4002219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody weaponRigid;

		[Token(Token = "0x400221A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82D514", Offset = "0x82D514")]
		public LayerMask ValidLayers;

		[Token(Token = "0x400221B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82D54C", Offset = "0x82D54C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D54C", Offset = "0x82D54C")]
		public Transform TriggerTransform;

		[Token(Token = "0x400221C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D5AC", Offset = "0x82D5AC")]
		public Transform SlideTransform;

		[Token(Token = "0x400221D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D5E4", Offset = "0x82D5E4")]
		public Transform MuzzlePointTransform;

		[Token(Token = "0x400221E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D61C", Offset = "0x82D61C")]
		public Transform EjectPointTransform;

		[Token(Token = "0x400221F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D654", Offset = "0x82D654")]
		public Transform ChamberedBullet;

		[Token(Token = "0x4002220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D68C", Offset = "0x82D68C")]
		public GameObject MuzzleFlashObject;

		[Token(Token = "0x4002221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D6C4", Offset = "0x82D6C4")]
		public GameObject BulletCasingPrefab;

		[Token(Token = "0x4002222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D6FC", Offset = "0x82D6FC")]
		public GameObject ProjectilePrefab;

		[Token(Token = "0x4002223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D734", Offset = "0x82D734")]
		public GameObject HitFXPrefab;

		[Token(Token = "0x4002224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D76C", Offset = "0x82D76C")]
		public AudioClip GunShotSound;

		[Token(Token = "0x4002225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D7A4", Offset = "0x82D7A4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x82D7A4", Offset = "0x82D7A4")]
		public float GunShotVolume;

		[Token(Token = "0x4002226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D7F8", Offset = "0x82D7F8")]
		public AudioClip EmptySound;

		[Token(Token = "0x4002227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D830", Offset = "0x82D830")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x82D830", Offset = "0x82D830")]
		public float EmptySoundVolume;

		[Token(Token = "0x4002228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82D884", Offset = "0x82D884")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D884", Offset = "0x82D884")]
		public float SlideDistance;

		[Token(Token = "0x4002229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D8E4", Offset = "0x82D8E4")]
		public bool ForceSlideBackOnLastShot;

		[Token(Token = "0x400222A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D91C", Offset = "0x82D91C")]
		public float slideSpeed;

		[Token(Token = "0x400222B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private float minSlideDistance;

		[Token(Token = "0x400222C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82D954", Offset = "0x82D954")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D954", Offset = "0x82D954")]
		public List<GrabbedControllerBinding> EjectInput;

		[Token(Token = "0x400222D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D9B4", Offset = "0x82D9B4")]
		public List<GrabbedControllerBinding> ReleaseSlideInput;

		[Token(Token = "0x400222E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82D9EC", Offset = "0x82D9EC")]
		public List<GrabbedControllerBinding> ReloadInput;

		[Token(Token = "0x400222F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82DA24", Offset = "0x82DA24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82DA24", Offset = "0x82DA24")]
		public bool BulletInChamber;

		[Token(Token = "0x4002230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x119")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82DA84", Offset = "0x82DA84")]
		public bool EmptyBulletInChamber;

		[Token(Token = "0x4002231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x82DABC", Offset = "0x82DABC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82DABC", Offset = "0x82DABC")]
		public UnityEvent onShootEvent;

		[Token(Token = "0x4002232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82DB1C", Offset = "0x82DB1C")]
		public UnityEvent onAttachedAmmoEvent;

		[Token(Token = "0x4002233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82DB54", Offset = "0x82DB54")]
		public UnityEvent onDetachedAmmoEvent;

		[Token(Token = "0x4002234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82DB8C", Offset = "0x82DB8C")]
		public UnityEvent onWeaponChargedEvent;

		[Token(Token = "0x4002235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82DBC4", Offset = "0x82DBC4")]
		public FloatEvent onDealtDamageEvent;

		[Token(Token = "0x4002236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x82DBFC", Offset = "0x82DBFC")]
		public RaycastHitEvent onRaycastHitEvent;

		[Token(Token = "0x4002237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private bool slideForcedBack;

		[Token(Token = "0x4002238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private WeaponSlide ws;

		[Token(Token = "0x4002239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private bool readyToShoot;

		[Token(Token = "0x400223A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x161")]
		private bool playedEmptySound;

		[Token(Token = "0x400223B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private IEnumerator shotRoutine;

		[Token(Token = "0x600329E")]
		[Address(RVA = "0xB5F72C", Offset = "0xB5F72C", VA = "0xB5F72C")]
		private void Start()
		{
		}

		[Token(Token = "0x600329F")]
		[Address(RVA = "0xB5F8A8", Offset = "0xB5F8A8", VA = "0xB5F8A8", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x60032A0")]
		[Address(RVA = "0xB5FA3C", Offset = "0xB5FA3C", VA = "0xB5FA3C")]
		private void checkSlideInput()
		{
		}

		[Token(Token = "0x60032A1")]
		[Address(RVA = "0xB5FB4C", Offset = "0xB5FB4C", VA = "0xB5FB4C")]
		private void checkEjectInput()
		{
		}

		[Token(Token = "0x60032A2")]
		[Address(RVA = "0xB5FC5C", Offset = "0xB5FC5C", VA = "0xB5FC5C", Slot = "27")]
		public virtual void CheckReloadInput()
		{
		}

		[Token(Token = "0x60032A3")]
		[Address(RVA = "0xB5FD78", Offset = "0xB5FD78", VA = "0xB5FD78", Slot = "28")]
		public virtual void UnlockSlide()
		{
		}

		[Token(Token = "0x60032A4")]
		[Address(RVA = "0xB5FE10", Offset = "0xB5FE10", VA = "0xB5FE10", Slot = "29")]
		public virtual void EjectMagazine()
		{
		}

		[Token(Token = "0x60032A5")]
		[Address(RVA = "0xB5FEB8", Offset = "0xB5FEB8", VA = "0xB5FEB8", Slot = "30")]
		public virtual void Shoot()
		{
		}

		[Token(Token = "0x60032A6")]
		[Address(RVA = "0xB605E0", Offset = "0xB605E0", VA = "0xB605E0", Slot = "31")]
		public virtual void ApplyRecoil()
		{
		}

		[Token(Token = "0x60032A7")]
		[Address(RVA = "0xB60758", Offset = "0xB60758", VA = "0xB60758", Slot = "32")]
		public virtual void OnRaycastHit(RaycastHit hit)
		{
		}

		[Token(Token = "0x60032A8")]
		[Address(RVA = "0xB60AF4", Offset = "0xB60AF4", VA = "0xB60AF4", Slot = "33")]
		public virtual void ApplyParticleFX(Vector3 position, Quaternion rotation, Collider attachTo)
		{
		}

		[Token(Token = "0x60032A9")]
		[Address(RVA = "0xB60C54", Offset = "0xB60C54", VA = "0xB60C54", Slot = "34")]
		public virtual void OnAttachedAmmo()
		{
		}

		[Token(Token = "0x60032AA")]
		[Address(RVA = "0xB60C8C", Offset = "0xB60C8C", VA = "0xB60C8C", Slot = "35")]
		public virtual void OnDetachedAmmo()
		{
		}

		[Token(Token = "0x60032AB")]
		[Address(RVA = "0xB60CC4", Offset = "0xB60CC4", VA = "0xB60CC4", Slot = "36")]
		public virtual int GetBulletCount()
		{
			return default(int);
		}

		[Token(Token = "0x60032AC")]
		[Address(RVA = "0xB60D4C", Offset = "0xB60D4C", VA = "0xB60D4C", Slot = "37")]
		public virtual void RemoveBullet()
		{
		}

		[Token(Token = "0x60032AD")]
		[Address(RVA = "0xB60E68", Offset = "0xB60E68", VA = "0xB60E68", Slot = "38")]
		public virtual void Reload()
		{
		}

		[Token(Token = "0x60032AE")]
		[Address(RVA = "0xB5F7EC", Offset = "0xB5F7EC", VA = "0xB5F7EC")]
		private void updateChamberedBullet()
		{
		}

		[Token(Token = "0x60032AF")]
		[Address(RVA = "0xB604A8", Offset = "0xB604A8", VA = "0xB604A8")]
		private void chamberRound()
		{
		}

		[Token(Token = "0x60032B0")]
		[Address(RVA = "0xB60E74", Offset = "0xB60E74", VA = "0xB60E74")]
		private void randomizeMuzzleFlashScaleRotation()
		{
		}

		[Token(Token = "0x60032B1")]
		[Address(RVA = "0xB60FB4", Offset = "0xB60FB4", VA = "0xB60FB4", Slot = "39")]
		public virtual void OnWeaponCharged(bool allowCasingEject)
		{
		}

		[Token(Token = "0x60032B2")]
		[Address(RVA = "0xB61074", Offset = "0xB61074", VA = "0xB61074", Slot = "40")]
		protected virtual void ejectCasing()
		{
		}

		[Token(Token = "0x60032B3")]
		[Address(RVA = "0xB60570", Offset = "0xB60570", VA = "0xB60570")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x834914", Offset = "0x834914")]
		private IEnumerator doMuzzleFlash()
		{
			return null;
		}

		[Token(Token = "0x60032B4")]
		[Address(RVA = "0xB60500", Offset = "0xB60500", VA = "0xB60500")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x834978", Offset = "0x834978")]
		private IEnumerator animateSlideAndEject()
		{
			return null;
		}

		[Token(Token = "0x60032B5")]
		[Address(RVA = "0xB6125C", Offset = "0xB6125C", VA = "0xB6125C")]
		public RaycastWeapon()
		{
		}
	}
	[Token(Token = "0x20005D2")]
	public enum FiringType
	{
		[Token(Token = "0x400223D")]
		Semi,
		[Token(Token = "0x400223E")]
		Automatic
	}
	[Token(Token = "0x20005D3")]
	public enum ReloadType
	{
		[Token(Token = "0x4002240")]
		InfiniteAmmo,
		[Token(Token = "0x4002241")]
		ManualClip,
		[Token(Token = "0x4002242")]
		InternalAmmo
	}
	[Token(Token = "0x20005D4")]
	public class WeaponSlide : MonoBehaviour
	{
		[Token(Token = "0x200074B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x821170", Offset = "0x821170")]
		private sealed class <UnlockSlideRoutine>d__27 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400280D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400280E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400280F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WeaponSlide <>4__this;

			[Token(Token = "0x1700074E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003764")]
				[Address(RVA = "0xBAAFC4", Offset = "0xBAAFC4", VA = "0xBAAFC4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700074F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003766")]
				[Address(RVA = "0xBAB02C", Offset = "0xBAB02C", VA = "0xBAB02C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003761")]
			[Address(RVA = "0xBAAEC4", Offset = "0xBAAEC4", VA = "0xBAAEC4")]
			[DebuggerHidden]
			public <UnlockSlideRoutine>d__27(int <>1__state)
			{
			}

			[Token(Token = "0x6003762")]
			[Address(RVA = "0xBAAF10", Offset = "0xBAAF10", VA = "0xBAAF10", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003763")]
			[Address(RVA = "0xBAAF14", Offset = "0xBAAF14", VA = "0xBAAF14", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003765")]
			[Address(RVA = "0xBAAFCC", Offset = "0xBAAFCC", VA = "0xBAAFCC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float MinLocalZ;

		[Token(Token = "0x4002244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float MaxLocalZ;

		[Token(Token = "0x4002245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool slidingBack;

		[Token(Token = "0x4002246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool LockedBack;

		[Token(Token = "0x4002247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip SlideReleaseSound;

		[Token(Token = "0x4002248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioClip LockedBackSound;

		[Token(Token = "0x4002249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool ZeroMassWhenNotHeld;

		[Token(Token = "0x400224A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RaycastWeapon parentWeapon;

		[Token(Token = "0x400224B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Grabbable parentGrabbable;

		[Token(Token = "0x400224C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 initialLocalPos;

		[Token(Token = "0x400224D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Grabbable thisGrabbable;

		[Token(Token = "0x400224E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private AudioSource audioSource;

		[Token(Token = "0x400224F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody rigid;

		[Token(Token = "0x4002250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float initialMass;

		[Token(Token = "0x4002251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector3 _lockPosition;

		[Token(Token = "0x4002252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool lockSlidePosition;

		[Token(Token = "0x60032B6")]
		[Address(RVA = "0xBAA384", Offset = "0xBAA384", VA = "0xBAA384")]
		private void Start()
		{
		}

		[Token(Token = "0x60032B7")]
		[Address(RVA = "0xBAA514", Offset = "0xBAA514", VA = "0xBAA514", Slot = "4")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x60032B8")]
		[Address(RVA = "0xBAA5C0", Offset = "0xBAA5C0", VA = "0xBAA5C0", Slot = "5")]
		public virtual void OnDisable()
		{
		}

		[Token(Token = "0x60032B9")]
		[Address(RVA = "0xBAA66C", Offset = "0xBAA66C", VA = "0xBAA66C")]
		private void Update()
		{
		}

		[Token(Token = "0x60032BA")]
		[Address(RVA = "0xBAA9B4", Offset = "0xBAA9B4", VA = "0xBAA9B4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60032BB")]
		[Address(RVA = "0xBAAAB0", Offset = "0xBAAAB0", VA = "0xBAAAB0", Slot = "6")]
		public virtual void LockBack()
		{
		}

		[Token(Token = "0x60032BC")]
		[Address(RVA = "0xBAAB4C", Offset = "0xBAAB4C", VA = "0xBAAB4C", Slot = "7")]
		public virtual void UnlockBack()
		{
		}

		[Token(Token = "0x60032BD")]
		[Address(RVA = "0xBAA878", Offset = "0xBAA878", VA = "0xBAA878")]
		private void onSlideBack()
		{
		}

		[Token(Token = "0x60032BE")]
		[Address(RVA = "0xBAA950", Offset = "0xBAA950", VA = "0xBAA950")]
		private void onSlideForward()
		{
		}

		[Token(Token = "0x60032BF")]
		[Address(RVA = "0xBAADAC", Offset = "0xBAADAC", VA = "0xBAADAC", Slot = "8")]
		public virtual void LockSlidePosition()
		{
		}

		[Token(Token = "0x60032C0")]
		[Address(RVA = "0xBAAE1C", Offset = "0xBAAE1C", VA = "0xBAAE1C", Slot = "9")]
		public virtual void UnlockSlidePosition()
		{
		}

		[Token(Token = "0x60032C1")]
		[Address(RVA = "0xBAAE54", Offset = "0xBAAE54", VA = "0xBAAE54")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8349DC", Offset = "0x8349DC")]
		public IEnumerator UnlockSlideRoutine()
		{
			return null;
		}

		[Token(Token = "0x60032C2")]
		[Address(RVA = "0xBAAC68", Offset = "0xBAAC68", VA = "0xBAAC68")]
		private void playSoundInterval(float fromSeconds, float toSeconds, float volume)
		{
		}

		[Token(Token = "0x60032C3")]
		[Address(RVA = "0xBAAEF0", Offset = "0xBAAEF0", VA = "0xBAAEF0")]
		public WeaponSlide()
		{
		}
	}
	[Token(Token = "0x20005D5")]
	public class ButtonVibrate : GrabbableEvents
	{
		[Token(Token = "0x4002253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float VibrateFrequency;

		[Token(Token = "0x4002254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float VibrateAmplitude;

		[Token(Token = "0x4002255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float VibrateDuration;

		[Token(Token = "0x4002256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public ControllerHand touchingHand;

		[Token(Token = "0x60032C4")]
		[Address(RVA = "0xA81D98", Offset = "0xA81D98", VA = "0xA81D98")]
		public void DoVibrate()
		{
		}

		[Token(Token = "0x60032C5")]
		[Address(RVA = "0xA81E34", Offset = "0xA81E34", VA = "0xA81E34")]
		public ButtonVibrate()
		{
		}
	}
}
