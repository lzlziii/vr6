using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;
using AI.Enemies;
using Audio;
using Autohand;
using Autohand.Demo;
using Combat;
using Il2CppDummyDll;
using JetBrains.Annotations;
using Kandooz.KVR;
using Missions.Basic_Tasks;
using NaughtyAttributes;
using Newtonsoft.Json;
using Oculus.Platform;
using Oculus.Platform.Models;
using Player;
using Player.Abilities;
using Player.Movement_Modes;
using Player.Utility;
using ProceduralToolkit.ClipperLib;
using TMPro;
using UI;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Audio;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.Localization;
using UnityEngine.Localization.PropertyVariants.TrackedProperties;
using UnityEngine.Rendering;
using UnityEngine.Rendering.Universal;
using UnityEngine.SceneManagement;
using UnityEngine.Serialization;
using UnityEngine.UI;
using UnityEngine.VFX;
using UnityEngine.Video;
using UnityEngine.XR;
using Utility;
using Utility.Api;
using Utility.Graphics;
using Utility.IK;
using Utility.Math;
using Utility.Settings;
using Utility.Surfaces;
using Utility.VRArmIK;
using World;
using World.Generation;
using World.Generation.WorldObjects;
using World.Grammar;
using World.Interface;
using World.Meshes;
using World.Shapes;
using World.Small_Objects;
using g3;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000004")]
public static class Achievements
{
	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Dictionary<string, List<string>> achievementIDs;

	[Token(Token = "0x600000D")]
	[Address(RVA = "0xE53490", Offset = "0xE53490", VA = "0xE53490")]
	public static void SetAchievement(string achievement)
	{
	}

	[Token(Token = "0x600000E")]
	[Address(RVA = "0xE53498", Offset = "0xE53498", VA = "0xE53498")]
	public static void AddStat(string statName, int value)
	{
	}

	[Token(Token = "0x600000F")]
	[Address(RVA = "0xE5362C", Offset = "0xE5362C", VA = "0xE5362C")]
	public static void AddStat(string statName, float value)
	{
	}

	[Token(Token = "0x6000010")]
	[Address(RVA = "0xE537CC", Offset = "0xE537CC", VA = "0xE537CC")]
	public static void UnlockAboveThreshold(string achievementName, int threshold, string statName)
	{
	}

	[Token(Token = "0x6000011")]
	[Address(RVA = "0xE537D0", Offset = "0xE537D0", VA = "0xE537D0")]
	public static void UnlockAboveThreshold(string achievementName, float threshold, string statName)
	{
	}

	[Token(Token = "0x6000012")]
	[Address(RVA = "0xE537D4", Offset = "0xE537D4", VA = "0xE537D4")]
	public static void StoreStats()
	{
	}
}
[Token(Token = "0x2000005")]
public class LaserBeamRange : MonoBehaviour
{
	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float beamMaxRange;

	[Token(Token = "0x6000014")]
	[Address(RVA = "0xE55240", Offset = "0xE55240", VA = "0xE55240")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000015")]
	[Address(RVA = "0xE55480", Offset = "0xE55480", VA = "0xE55480")]
	public LaserBeamRange()
	{
	}
}
[Token(Token = "0x2000006")]
public class HatPicker : MonoBehaviour
{
	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<GameObject> hats;

	[Token(Token = "0x6000016")]
	[Address(RVA = "0xE55490", Offset = "0xE55490", VA = "0xE55490")]
	private void Start()
	{
	}

	[Token(Token = "0x6000017")]
	[Address(RVA = "0xE55670", Offset = "0xE55670", VA = "0xE55670")]
	public HatPicker()
	{
	}
}
[Token(Token = "0x2000007")]
public class CameraShake : MonoBehaviour
{
	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static HashSet<CameraShake> ALL;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float shakeDecay;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	public float shakeMul;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float currentShake;

	[Token(Token = "0x6000018")]
	[Address(RVA = "0xE55678", Offset = "0xE55678", VA = "0xE55678")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000019")]
	[Address(RVA = "0xE55770", Offset = "0xE55770", VA = "0xE55770")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600001A")]
	[Address(RVA = "0xE55868", Offset = "0xE55868", VA = "0xE55868")]
	private void OnBeginCameraRendering(ScriptableRenderContext context, Camera camera)
	{
	}

	[Token(Token = "0x600001B")]
	[Address(RVA = "0xE55A0C", Offset = "0xE55A0C", VA = "0xE55A0C")]
	public static void Shake(float amount)
	{
	}

	[Token(Token = "0x600001C")]
	[Address(RVA = "0xE55B8C", Offset = "0xE55B8C", VA = "0xE55B8C")]
	private void Update()
	{
	}

	[Token(Token = "0x600001D")]
	[Address(RVA = "0xE55BC4", Offset = "0xE55BC4", VA = "0xE55BC4")]
	public CameraShake()
	{
	}
}
[Token(Token = "0x2000008")]
public class ClearRenderPassFeature : ScriptableRendererFeature
{
	[Token(Token = "0x2000009")]
	private class ClearRenderPass : ScriptableRenderPass
	{
		[Token(Token = "0x6000022")]
		[Address(RVA = "0xE55D28", Offset = "0xE55D28", VA = "0xE55D28", Slot = "5")]
		public override void OnCameraSetup(CommandBuffer cmd, ref RenderingData renderingData)
		{
		}

		[Token(Token = "0x6000023")]
		[Address(RVA = "0xE55D2C", Offset = "0xE55D2C", VA = "0xE55D2C", Slot = "9")]
		public override void Execute(ScriptableRenderContext context, ref RenderingData renderingData)
		{
		}

		[Token(Token = "0x6000024")]
		[Address(RVA = "0xE55DEC", Offset = "0xE55DEC", VA = "0xE55DEC", Slot = "7")]
		public override void OnCameraCleanup(CommandBuffer cmd)
		{
		}

		[Token(Token = "0x6000025")]
		[Address(RVA = "0xE55CEC", Offset = "0xE55CEC", VA = "0xE55CEC")]
		public ClearRenderPass()
		{
		}
	}

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ClearRenderPass m_ScriptablePass;

	[Token(Token = "0x600001F")]
	[Address(RVA = "0xE55C70", Offset = "0xE55C70", VA = "0xE55C70", Slot = "5")]
	public override void Create()
	{
	}

	[Token(Token = "0x6000020")]
	[Address(RVA = "0xE55CF4", Offset = "0xE55CF4", VA = "0xE55CF4", Slot = "7")]
	public override void AddRenderPasses(ScriptableRenderer renderer, ref RenderingData renderingData)
	{
	}

	[Token(Token = "0x6000021")]
	[Address(RVA = "0xE55D20", Offset = "0xE55D20", VA = "0xE55D20")]
	public ClearRenderPassFeature()
	{
	}
}
[Token(Token = "0x200000A")]
public class CullingHemisphere : MonoBehaviour
{
	[Token(Token = "0x6000026")]
	[Address(RVA = "0xE55DF0", Offset = "0xE55DF0", VA = "0xE55DF0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000027")]
	[Address(RVA = "0xE55F08", Offset = "0xE55F08", VA = "0xE55F08")]
	public CullingHemisphere()
	{
	}
}
[Token(Token = "0x200000B")]
[CreateAssetMenu(menuName = "Custom VR Input Manager")]
public class CustomVRInputManager : AbstractVRInputManager
{
	[Token(Token = "0x400000D")]
	private const float MaxFingerValue = 0.9f;

	[Token(Token = "0x6000028")]
	[Address(RVA = "0xE55F10", Offset = "0xE55F10", VA = "0xE55F10")]
	private static ControllerInputHistory Hand(HandType hand)
	{
		return null;
	}

	[Token(Token = "0x6000029")]
	[Address(RVA = "0xE56000", Offset = "0xE56000", VA = "0xE56000", Slot = "4")]
	public override float GetFingerValue(HandType hand, FingerName finger)
	{
		return default(float);
	}

	[Token(Token = "0x600002A")]
	[Address(RVA = "0xE56120", Offset = "0xE56120", VA = "0xE56120", Slot = "5")]
	public override bool GetFingerDown(HandType handType, FingerName finger)
	{
		return default(bool);
	}

	[Token(Token = "0x600002B")]
	[Address(RVA = "0xE56160", Offset = "0xE56160", VA = "0xE56160", Slot = "6")]
	public override bool GetFinger(HandType handType, FingerName finger)
	{
		return default(bool);
	}

	[Token(Token = "0x600002C")]
	[Address(RVA = "0xE561A0", Offset = "0xE561A0", VA = "0xE561A0", Slot = "7")]
	public override bool GetFIngerUp(HandType handType, FingerName finger)
	{
		return default(bool);
	}

	[Token(Token = "0x600002D")]
	[Address(RVA = "0xE561E0", Offset = "0xE561E0", VA = "0xE561E0")]
	public CustomVRInputManager()
	{
	}
}
[Token(Token = "0x200000C")]
public class DisableRoofFence : MonoBehaviour
{
	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject roofFenceModel;

	[Token(Token = "0x600002E")]
	[Address(RVA = "0xE561E8", Offset = "0xE561E8", VA = "0xE561E8")]
	private void Update()
	{
	}

	[Token(Token = "0x600002F")]
	[Address(RVA = "0xE56218", Offset = "0xE56218", VA = "0xE56218")]
	public DisableRoofFence()
	{
	}
}
[Token(Token = "0x200000D")]
public class ExtraParticles : MonoBehaviour
{
	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject particles;

	[Token(Token = "0x6000030")]
	[Address(RVA = "0xE56220", Offset = "0xE56220", VA = "0xE56220")]
	private void Update()
	{
	}

	[Token(Token = "0x6000031")]
	[Address(RVA = "0xE56250", Offset = "0xE56250", VA = "0xE56250")]
	public ExtraParticles()
	{
	}
}
[Token(Token = "0x200000E")]
public class FixTransform : MonoBehaviour
{
	[Token(Token = "0x6000032")]
	[Address(RVA = "0xE56258", Offset = "0xE56258", VA = "0xE56258")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000033")]
	[Address(RVA = "0xE56300", Offset = "0xE56300", VA = "0xE56300")]
	public FixTransform()
	{
	}
}
[Token(Token = "0x200000F")]
public class FpsTestManager : MonoBehaviour
{
	[Token(Token = "0x6000034")]
	[Address(RVA = "0xE56308", Offset = "0xE56308", VA = "0xE56308")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0xE5633C", Offset = "0xE5633C", VA = "0xE5633C")]
	public FpsTestManager()
	{
	}
}
[Token(Token = "0x2000010")]
public class HandColliderManager : MonoBehaviour
{
	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float spring;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float dampingRatio;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float maxSpringForce;

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float grabbingMass;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float punchingMass;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Vector3 grabOffset;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float grabRadius;

	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float resetThreshold;

	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform toFollow;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public HandInput hand;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool punching;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 prevLocalHandVel;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3 prevPlayerVel;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Collider[] grabbed;

	[Token(Token = "0x17000005")]
	public bool IsGrabbing
	{
		[Token(Token = "0x6000039")]
		[Address(RVA = "0xE56574", Offset = "0xE56574", VA = "0xE56574")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000036")]
	[Address(RVA = "0xE56344", Offset = "0xE56344", VA = "0xE56344")]
	private void Start()
	{
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0xE5634C", Offset = "0xE5634C", VA = "0xE5634C")]
	public void SetPunching(bool punching)
	{
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0xE5649C", Offset = "0xE5649C", VA = "0xE5649C")]
	public void Release()
	{
	}

	[Token(Token = "0x600003A")]
	[Address(RVA = "0xE56584", Offset = "0xE56584", VA = "0xE56584")]
	public Collider[] GetGrabbable()
	{
		return null;
	}

	[Token(Token = "0x600003B")]
	[Address(RVA = "0xE5682C", Offset = "0xE5682C", VA = "0xE5682C")]
	public bool TryGrab()
	{
		return default(bool);
	}

	[Token(Token = "0x600003C")]
	[Address(RVA = "0xE56A24", Offset = "0xE56A24", VA = "0xE56A24")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600003D")]
	[Address(RVA = "0xE57158", Offset = "0xE57158", VA = "0xE57158")]
	public HandColliderManager()
	{
	}
}
[Token(Token = "0x2000012")]
public class HandInstantMovement : MonoBehaviour
{
	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Autohand.Hand myHand;

	[Token(Token = "0x6000042")]
	[Address(RVA = "0xE57318", Offset = "0xE57318", VA = "0xE57318")]
	private void Start()
	{
	}

	[Token(Token = "0x6000043")]
	[Address(RVA = "0xE57370", Offset = "0xE57370", VA = "0xE57370")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0xE5738C", Offset = "0xE5738C", VA = "0xE5738C")]
	public HandInstantMovement()
	{
	}
}
[Token(Token = "0x2000013")]
public class HeadFollower : MonoBehaviour
{
	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform trackers;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform neck;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Rigidbody playerRigidbody;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform headCollider;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 prevHeadLocalPos;

	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 trackerOffset;

	[Token(Token = "0x17000006")]
	private Vector3 ModifiedTrackerOffset
	{
		[Token(Token = "0x6000045")]
		[Address(RVA = "0xE57394", Offset = "0xE57394", VA = "0xE57394")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0xE574B0", Offset = "0xE574B0", VA = "0xE574B0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0xE57560", Offset = "0xE57560", VA = "0xE57560")]
	private void UpsideDownUpdate()
	{
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0xE57744", Offset = "0xE57744", VA = "0xE57744")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000049")]
	[Address(RVA = "0xE57A38", Offset = "0xE57A38", VA = "0xE57A38")]
	public HeadFollower()
	{
	}
}
[Token(Token = "0x2000014")]
public class LineRendererScaleWidth : MonoBehaviour
{
	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private LineRenderer myLineRenderer;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float initialWidth;

	[Token(Token = "0x600004A")]
	[Address(RVA = "0xE57A40", Offset = "0xE57A40", VA = "0xE57A40")]
	private void Start()
	{
	}

	[Token(Token = "0x600004B")]
	[Address(RVA = "0xE57AB8", Offset = "0xE57AB8", VA = "0xE57AB8")]
	private void Update()
	{
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0xE57B2C", Offset = "0xE57B2C", VA = "0xE57B2C")]
	public LineRendererScaleWidth()
	{
	}
}
[Token(Token = "0x2000015")]
public class ObjectivesManager : MonoBehaviour
{
	[Token(Token = "0x2000016")]
	[CompilerGenerated]
	private sealed class <UpdateStageCoroutine>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ObjectivesManager <>4__this;

		[Token(Token = "0x17000008")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000057")]
			[Address(RVA = "0xE58F48", Offset = "0xE58F48", VA = "0xE58F48", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000009")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000059")]
			[Address(RVA = "0xE58F90", Offset = "0xE58F90", VA = "0xE58F90", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000054")]
		[Address(RVA = "0xE57CF8", Offset = "0xE57CF8", VA = "0xE57CF8")]
		[DebuggerHidden]
		public <UpdateStageCoroutine>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x6000055")]
		[Address(RVA = "0xE58E6C", Offset = "0xE58E6C", VA = "0xE58E6C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000056")]
		[Address(RVA = "0xE58E70", Offset = "0xE58E70", VA = "0xE58E70", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000058")]
		[Address(RVA = "0xE58F50", Offset = "0xE58F50", VA = "0xE58F50", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ObjectivesManager Instance;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float secondsDelay;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform missionPrompts;

	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private StoryStage? nextStage;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Coroutine updateStageCoroutine;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public LocalizedString completeTutorialMode;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public LocalizedString winTutorialMode;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public LocalizedString unlockIceMode;

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public LocalizedString unlockWingMode;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public LocalizedString unlockClawMode;

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public LocalizedString unlockLightningMode;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public LocalizedString unlockBlackHoleMode;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public LocalizedString unlockedSpeedMode;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public LocalizedString unlockedBlinkMode;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public LocalizedString unlockedTelekinesisMode;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public LocalizedString unlockedPortalsMode;

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public LocalizedString unlockedGiantMode;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public LocalizedString unlockedSidegrade;

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public LocalizedString defeatWormBoss;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public LocalizedString defeatSpiderBoss;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public LocalizedString defeatTurretBoss;

	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public LocalizedString freePlay;

	[Token(Token = "0x17000007")]
	public string CurrentObjectiveText
	{
		[Token(Token = "0x6000052")]
		[Address(RVA = "0xE581D0", Offset = "0xE581D0", VA = "0xE581D0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600004D")]
	[Address(RVA = "0xE57B34", Offset = "0xE57B34", VA = "0xE57B34")]
	private void Awake()
	{
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0xE57BA8", Offset = "0xE57BA8", VA = "0xE57BA8")]
	public void TriggerStage(StoryStage stage)
	{
	}

	[Token(Token = "0x600004F")]
	[Address(RVA = "0xE57C84", Offset = "0xE57C84", VA = "0xE57C84")]
	[IteratorStateMachine(typeof(<UpdateStageCoroutine>d__24))]
	private IEnumerator UpdateStageCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0xE57D20", Offset = "0xE57D20", VA = "0xE57D20")]
	private void SetMissionActive(string missionName, bool isActive)
	{
	}

	[Token(Token = "0x6000051")]
	[Address(RVA = "0xE57DDC", Offset = "0xE57DDC", VA = "0xE57DDC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0xE583A8", Offset = "0xE583A8", VA = "0xE583A8")]
	public ObjectivesManager()
	{
	}
}
[Token(Token = "0x2000017")]
public class BatSwarmBehaviour : MonoBehaviour
{
	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Rigidbody myRigidbody;

	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ParticleSystem swarm;

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float scatterDuration;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float scatterSpeed;

	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool scatter;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float startScatterTime;

	[Token(Token = "0x600005A")]
	[Address(RVA = "0xE58F98", Offset = "0xE58F98", VA = "0xE58F98")]
	private void Update()
	{
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0xE59030", Offset = "0xE59030", VA = "0xE59030")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600005C")]
	[Address(RVA = "0xE59034", Offset = "0xE59034", VA = "0xE59034")]
	public void Scatter()
	{
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0xE59178", Offset = "0xE59178", VA = "0xE59178")]
	public BatSwarmBehaviour()
	{
	}
}
[Token(Token = "0x2000018")]
public class BlinkProjectile : MonoBehaviour
{
	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static HashSet<GameObject> activeProjectiles;

	[Token(Token = "0x600005E")]
	[Address(RVA = "0xE5918C", Offset = "0xE5918C", VA = "0xE5918C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0xE5921C", Offset = "0xE5921C", VA = "0xE5921C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000060")]
	[Address(RVA = "0xE592AC", Offset = "0xE592AC", VA = "0xE592AC")]
	public BlinkProjectile()
	{
	}
}
[Token(Token = "0x2000019")]
public class RotationFreeze : MonoBehaviour
{
	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Quaternion initialRotation;

	[Token(Token = "0x6000062")]
	[Address(RVA = "0xE5934C", Offset = "0xE5934C", VA = "0xE5934C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0xE5937C", Offset = "0xE5937C", VA = "0xE5937C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000064")]
	[Address(RVA = "0xE593A8", Offset = "0xE593A8", VA = "0xE593A8")]
	public RotationFreeze()
	{
	}
}
[Token(Token = "0x200001A")]
public class GiantSize : MovementMode
{
	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float minSize;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float maxSize;

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float sizeChangeRate;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float hapticStrength;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject giantArrows;

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Image upperArrow;

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Image lowerArrow;

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float activeColorSpeedThreshold;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public Color activeColor;

	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public Color inactiveColor;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Sound growSound;

	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float growSoundPitchPower;

	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float growSoundVolumePower;

	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float growSoundMaxSpeed;

	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Sound grabSound;

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Header("Gorilla Sidegrade")]
	public bool gorillaEnabled;

	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
	[Header("Shrink Sidegrade")]
	public bool shrinkEnabled;

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public float shrinkMinSize;

	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float growSoundBasePitch;

	[Token(Token = "0x1700000A")]
	private HandColliderManager collider
	{
		[Token(Token = "0x6000065")]
		[Address(RVA = "0xE593B0", Offset = "0xE593B0", VA = "0xE593B0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000B")]
	private float MinSize
	{
		[Token(Token = "0x6000066")]
		[Address(RVA = "0xE5941C", Offset = "0xE5941C", VA = "0xE5941C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0xE59438", Offset = "0xE59438", VA = "0xE59438")]
	private void Start()
	{
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0xE5949C", Offset = "0xE5949C", VA = "0xE5949C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0xE5997C", Offset = "0xE5997C", VA = "0xE5997C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600006A")]
	[Address(RVA = "0xE599D0", Offset = "0xE599D0", VA = "0xE599D0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600006B")]
	[Address(RVA = "0xE59A00", Offset = "0xE59A00", VA = "0xE59A00")]
	public GiantSize()
	{
	}
}
[Token(Token = "0x200001B")]
public class Portals : MovementMode
{
	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static PortalAI waitingPortal;

	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static float portalColor;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static HandInput lastPlacedPortal;

	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public PortalAI portalPrefab;

	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject heldPortalModel;

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float hapticStrength;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float hapticFreq;

	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform portalReticle;

	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform aimLaser;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject portalDestructionEffect1;

	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject portalDestructionEffect2;

	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Sound detonateTargetSound;

	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public int numPortalColors;

	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float armDirMul;

	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float armDirPower;

	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float armLengthOffset;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Vector3 handOffset;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public Vector3 shoulder;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[Header("Reposition Sidegrade")]
	public bool repositionEnabled;

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public float grabSpring;

	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public float grabDampingRatio;

	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public float maxAccel;

	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public float handSpeedForceMul;

	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Sound repositionSound;

	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Rigidbody heldObject;

	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float originalDrag;

	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	[Header("Warp Sidegrade")]
	public bool warpEnabled;

	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public WarpAI warpPrefab;

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public GameObject heldWarpModel;

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Transform warpReticle;

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static WarpAI waitingWarp;

	[Token(Token = "0x1700000C")]
	private Vector3 ShoulderPos
	{
		[Token(Token = "0x600006C")]
		[Address(RVA = "0xE59AA0", Offset = "0xE59AA0", VA = "0xE59AA0")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x1700000D")]
	private MonoBehaviour waitingObject
	{
		[Token(Token = "0x600006F")]
		[Address(RVA = "0xE59F0C", Offset = "0xE59F0C", VA = "0xE59F0C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000E")]
	private GameObject heldObjectModel
	{
		[Token(Token = "0x6000070")]
		[Address(RVA = "0xE59F78", Offset = "0xE59F78", VA = "0xE59F78")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000F")]
	private Transform reticle
	{
		[Token(Token = "0x6000071")]
		[Address(RVA = "0xE59F94", Offset = "0xE59F94", VA = "0xE59F94")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0xE59B08", Offset = "0xE59B08", VA = "0xE59B08")]
	private Vector3 GetPortalTargetPosPreRaycast()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0xE59D04", Offset = "0xE59D04", VA = "0xE59D04")]
	private Vector3 GetPortalTargetPos()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000072")]
	[Address(RVA = "0xE59FB0", Offset = "0xE59FB0", VA = "0xE59FB0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000073")]
	[Address(RVA = "0xE59FE8", Offset = "0xE59FE8", VA = "0xE59FE8")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0xE5A2EC", Offset = "0xE5A2EC", VA = "0xE5A2EC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000075")]
	[Address(RVA = "0xE5AFA0", Offset = "0xE5AFA0", VA = "0xE5AFA0")]
	private PortalAI GetTargetPortal()
	{
		return null;
	}

	[Token(Token = "0x6000076")]
	[Address(RVA = "0xE5B0C8", Offset = "0xE5B0C8", VA = "0xE5B0C8")]
	private WarpAI GetTargetWarp()
	{
		return null;
	}

	[Token(Token = "0x6000077")]
	[Address(RVA = "0xE5B570", Offset = "0xE5B570", VA = "0xE5B570")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000078")]
	[Address(RVA = "0xE5B628", Offset = "0xE5B628", VA = "0xE5B628")]
	public Portals()
	{
	}
}
[Token(Token = "0x200001C")]
public class PlayerHealth : MonoBehaviour
{
	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Regeneration")]
	public float regen;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float regenTimer;

	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Vignette")]
	public Color vignetteColor;

	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float recentDamageDecay;

	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float vignetteRecentDamageMul;

	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float vignetteTotalDamageMul;

	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float streamerCameraMul;

	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float minActiveStrength;

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Header("Death")]
	public float deathDuration;

	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Color deathVignetteColor;

	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AnimationCurve deathColorCurve;

	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AnimationCurve deathSlowdownCurve;

	[Token(Token = "0x4000089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public AnimationCurve deathVolumeCurve;

	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public SceneLoader sceneLoader;

	[Token(Token = "0x400008B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Header("Low Health Sound")]
	public Sound lowHealthSound;

	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float startPercentage;

	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public AnimationCurve soundVolumeCurve;

	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float lastDamageTime;

	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float recentDamage;

	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Vector3 recentDamageDir;

	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private float? deathTime;

	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int OuterColor;

	[Token(Token = "0x4000093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int InnerColor;

	[Token(Token = "0x4000094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly int Direction;

	[Token(Token = "0x17000010")]
	private static MeshRenderer Vignette
	{
		[Token(Token = "0x600007C")]
		[Address(RVA = "0xE5B710", Offset = "0xE5B710", VA = "0xE5B710")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000011")]
	private static Health Health
	{
		[Token(Token = "0x600007D")]
		[Address(RVA = "0xE5B764", Offset = "0xE5B764", VA = "0xE5B764")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000012")]
	public bool IsDead
	{
		[Token(Token = "0x600007E")]
		[Address(RVA = "0xE5B7B8", Offset = "0xE5B7B8", VA = "0xE5B7B8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000013")]
	public bool IsInTutorial
	{
		[Token(Token = "0x600007F")]
		[Address(RVA = "0xE5B7F4", Offset = "0xE5B7F4", VA = "0xE5B7F4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000014")]
	private float DeathProgress
	{
		[Token(Token = "0x6000080")]
		[Address(RVA = "0xE5B814", Offset = "0xE5B814", VA = "0xE5B814")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000015")]
	public float DeathSoundMul
	{
		[Token(Token = "0x6000081")]
		[Address(RVA = "0xE5B8C4", Offset = "0xE5B8C4", VA = "0xE5B8C4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6000082")]
	[Address(RVA = "0xE5B930", Offset = "0xE5B930", VA = "0xE5B930")]
	private void Start()
	{
	}

	[Token(Token = "0x6000083")]
	[Address(RVA = "0xE5B9FC", Offset = "0xE5B9FC", VA = "0xE5B9FC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0xE5BAA0", Offset = "0xE5BAA0", VA = "0xE5BAA0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0xE5BB44", Offset = "0xE5BB44", VA = "0xE5BB44")]
	private void OnTakeDamage(Damage damage)
	{
	}

	[Token(Token = "0x6000086")]
	[Address(RVA = "0xE5BC28", Offset = "0xE5BC28", VA = "0xE5BC28")]
	private void Update()
	{
	}

	[Token(Token = "0x6000087")]
	[Address(RVA = "0xE5C058", Offset = "0xE5C058", VA = "0xE5C058")]
	private void OnBeginCameraRendering(ScriptableRenderContext context, Camera camera)
	{
	}

	[Token(Token = "0x6000088")]
	[Address(RVA = "0xE5C50C", Offset = "0xE5C50C", VA = "0xE5C50C")]
	private static Color Overlay(Color baseColor, Color overlayColor)
	{
		return default(Color);
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0xE5C590", Offset = "0xE5C590", VA = "0xE5C590")]
	public PlayerHealth()
	{
	}
}
[Token(Token = "0x200001D")]
public class PlayerHealthBar : MonoBehaviour
{
	[Token(Token = "0x4000095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Gradient colorGradient;

	[Token(Token = "0x4000096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private RectTransform myRectTransform;

	[Token(Token = "0x4000097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Image myImage;

	[Token(Token = "0x4000098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float maxWidth;

	[Token(Token = "0x600008B")]
	[Address(RVA = "0xE5C6A4", Offset = "0xE5C6A4", VA = "0xE5C6A4")]
	private void Start()
	{
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0xE5C754", Offset = "0xE5C754", VA = "0xE5C754")]
	private void Update()
	{
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0xE5C818", Offset = "0xE5C818", VA = "0xE5C818")]
	public PlayerHealthBar()
	{
	}
}
[Token(Token = "0x200001E")]
public class Quest1Culling : MonoBehaviour
{
	[Token(Token = "0x4000099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float renderDistMul;

	[Token(Token = "0x400009A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LightingController questSummerLighting;

	[Token(Token = "0x600008E")]
	[Address(RVA = "0xE5C820", Offset = "0xE5C820", VA = "0xE5C820")]
	private void Start()
	{
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0xE5C8C4", Offset = "0xE5C8C4", VA = "0xE5C8C4")]
	public Quest1Culling()
	{
	}
}
[Token(Token = "0x200001F")]
public class QuestSetActive : MonoBehaviour
{
	[Token(Token = "0x400009B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<GameObject> pcOnly;

	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<GameObject> questOnly;

	[Token(Token = "0x6000090")]
	[Address(RVA = "0xE5C8D4", Offset = "0xE5C8D4", VA = "0xE5C8D4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0xE5CAF0", Offset = "0xE5CAF0", VA = "0xE5CAF0")]
	public QuestSetActive()
	{
	}
}
[Token(Token = "0x2000020")]
public class QuestTargetFps : MonoBehaviour
{
	[Token(Token = "0x2000021")]
	[CompilerGenerated]
	private sealed class <Start>d__0 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400009D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400009E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x17000016")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000097")]
			[Address(RVA = "0xE5CE3C", Offset = "0xE5CE3C", VA = "0xE5CE3C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000017")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000099")]
			[Address(RVA = "0xE5CE84", Offset = "0xE5CE84", VA = "0xE5CE84", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000094")]
		[Address(RVA = "0xE5CB58", Offset = "0xE5CB58", VA = "0xE5CB58")]
		[DebuggerHidden]
		public <Start>d__0(int <>1__state)
		{
		}

		[Token(Token = "0x6000095")]
		[Address(RVA = "0xE5CB88", Offset = "0xE5CB88", VA = "0xE5CB88", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000096")]
		[Address(RVA = "0xE5CB8C", Offset = "0xE5CB8C", VA = "0xE5CB8C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000098")]
		[Address(RVA = "0xE5CE44", Offset = "0xE5CE44", VA = "0xE5CE44", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x6000092")]
	[Address(RVA = "0xE5CAF8", Offset = "0xE5CAF8", VA = "0xE5CAF8")]
	[IteratorStateMachine(typeof(<Start>d__0))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000093")]
	[Address(RVA = "0xE5CB80", Offset = "0xE5CB80", VA = "0xE5CB80")]
	public QuestTargetFps()
	{
	}
}
[Token(Token = "0x2000022")]
public class SceneLoader : MonoBehaviour
{
	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string sceneName;

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject mainScreen;

	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject difficultyScreen;

	[Token(Token = "0x600009A")]
	[Address(RVA = "0xE5BF28", Offset = "0xE5BF28", VA = "0xE5BF28")]
	public void LoadScene()
	{
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0xE5CE8C", Offset = "0xE5CE8C", VA = "0xE5CE8C")]
	public void LoadSceneTutorial()
	{
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0xE5CED4", Offset = "0xE5CED4", VA = "0xE5CED4")]
	private void EnableDifficultyScreen()
	{
	}

	[Token(Token = "0x600009D")]
	[Address(RVA = "0xE5CF0C", Offset = "0xE5CF0C", VA = "0xE5CF0C")]
	public void LoadSceneFreePlay()
	{
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0xE5CF58", Offset = "0xE5CF58", VA = "0xE5CF58")]
	public void BackFromDifficultyScreen()
	{
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0xE5CF90", Offset = "0xE5CF90", VA = "0xE5CF90")]
	public SceneLoader()
	{
	}
}
[Token(Token = "0x2000023")]
public class SceneLoaderAsync : MonoBehaviour
{
	[Token(Token = "0x2000024")]
	[CompilerGenerated]
	private sealed class <Start>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SceneLoaderAsync <>4__this;

		[Token(Token = "0x40000A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AsyncOperation <loading>5__2;

		[Token(Token = "0x17000018")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000A6")]
			[Address(RVA = "0xE5D3EC", Offset = "0xE5D3EC", VA = "0xE5D3EC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000019")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000A8")]
			[Address(RVA = "0xE5D434", Offset = "0xE5D434", VA = "0xE5D434", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000A3")]
		[Address(RVA = "0xE5D00C", Offset = "0xE5D00C", VA = "0xE5D00C")]
		[DebuggerHidden]
		public <Start>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x60000A4")]
		[Address(RVA = "0xE5D0A8", Offset = "0xE5D0A8", VA = "0xE5D0A8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000A5")]
		[Address(RVA = "0xE5D0AC", Offset = "0xE5D0AC", VA = "0xE5D0AC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000A7")]
		[Address(RVA = "0xE5D3F4", Offset = "0xE5D3F4", VA = "0xE5D3F4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string sceneName;

	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI loadingText;

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0xE5CF98", Offset = "0xE5CF98", VA = "0xE5CF98")]
	[IteratorStateMachine(typeof(<Start>d__2))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0xE5D034", Offset = "0xE5D034", VA = "0xE5D034")]
	public SceneLoaderAsync()
	{
	}
}
[Token(Token = "0x2000025")]
public class SeasonReflectionProbe : MonoBehaviour
{
	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static SeasonReflectionProbe Instance;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool shouldRefresh;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ReflectionProbe reflectionProbe;

	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int _frameCounter;

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0xE5D43C", Offset = "0xE5D43C", VA = "0xE5D43C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0xE5D494", Offset = "0xE5D494", VA = "0xE5D494")]
	private void Update()
	{
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0xE5D4E0", Offset = "0xE5D4E0", VA = "0xE5D4E0")]
	public SeasonReflectionProbe()
	{
	}
}
[Token(Token = "0x2000026")]
public class SeasonReflectionRenderer : MonoBehaviour
{
	[Token(Token = "0x60000AC")]
	[Address(RVA = "0xE5D4E8", Offset = "0xE5D4E8", VA = "0xE5D4E8")]
	private void Start()
	{
	}

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0xE5D5BC", Offset = "0xE5D5BC", VA = "0xE5D5BC")]
	public SeasonReflectionRenderer()
	{
	}
}
[Token(Token = "0x2000027")]
public enum Sidegrade
{
	[Token(Token = "0x40000AD")]
	ThrustersFireball = 0,
	[Token(Token = "0x40000AE")]
	ThrustersExplosion = 1,
	[Token(Token = "0x40000AF")]
	WebslingerGrappleHook = 10,
	[Token(Token = "0x40000B0")]
	WebslingerElectricWeb = 11,
	[Token(Token = "0x40000B1")]
	IcetrailWallsilde = 20,
	[Token(Token = "0x40000B2")]
	IcetrailRockslide = 21,
	[Token(Token = "0x40000B3")]
	WingsInsect = 30,
	[Token(Token = "0x40000B4")]
	WingsBooster = 31,
	[Token(Token = "0x40000B5")]
	ClawSwords = 40,
	[Token(Token = "0x40000B6")]
	ClawOctopus = 41,
	[Token(Token = "0x40000B7")]
	LightningRailgun = 50,
	[Token(Token = "0x40000B8")]
	LightningSuper = 51,
	[Token(Token = "0x40000B9")]
	BlackholeWhitehole = 60,
	[Token(Token = "0x40000BA")]
	BlackholeSwarm = 61,
	[Token(Token = "0x40000BB")]
	SpeedBouncy = 70,
	[Token(Token = "0x40000BC")]
	SpeedTimeDilation = 71,
	[Token(Token = "0x40000BD")]
	BlinkDash = 80,
	[Token(Token = "0x40000BE")]
	BlinkVampire = 81,
	[Token(Token = "0x40000BF")]
	TelekinesisEnergyBlast = 90,
	[Token(Token = "0x40000C0")]
	TelekinesisFreeFlight = 91,
	[Token(Token = "0x40000C1")]
	PortalsReposition = 100,
	[Token(Token = "0x40000C2")]
	PortalsWarp = 101,
	[Token(Token = "0x40000C3")]
	GiantGorilla = 110,
	[Token(Token = "0x40000C4")]
	GiantShrink = 111
}
[Token(Token = "0x2000028")]
public class SunController : MonoBehaviour
{
	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject sun;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int numContainingPlayer;

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0xE5D5C4", Offset = "0xE5D5C4", VA = "0xE5D5C4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0xE5D630", Offset = "0xE5D630", VA = "0xE5D630")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0xE5D69C", Offset = "0xE5D69C", VA = "0xE5D69C")]
	private void Update()
	{
	}

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0xE5D74C", Offset = "0xE5D74C", VA = "0xE5D74C")]
	public SunController()
	{
	}
}
[Token(Token = "0x2000029")]
public class RemindLocalizer : MonoBehaviour
{
	[Token(Token = "0x200002A")]
	[CompilerGenerated]
	private sealed class <LocalizeOnEnable>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RemindLocalizer <>4__this;

		[Token(Token = "0x1700001A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000B9")]
			[Address(RVA = "0xE5D9A8", Offset = "0xE5D9A8", VA = "0xE5D9A8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000BB")]
			[Address(RVA = "0xE5D9F0", Offset = "0xE5D9F0", VA = "0xE5D9F0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000B6")]
		[Address(RVA = "0xE5D7E8", Offset = "0xE5D7E8", VA = "0xE5D7E8")]
		[DebuggerHidden]
		public <LocalizeOnEnable>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x60000B7")]
		[Address(RVA = "0xE5D83C", Offset = "0xE5D83C", VA = "0xE5D83C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000B8")]
		[Address(RVA = "0xE5D840", Offset = "0xE5D840", VA = "0xE5D840", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000BA")]
		[Address(RVA = "0xE5D9B0", Offset = "0xE5D9B0", VA = "0xE5D9B0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Locale lastLocale;

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0xE5D754", Offset = "0xE5D754", VA = "0xE5D754")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0xE5D774", Offset = "0xE5D774", VA = "0xE5D774")]
	[IteratorStateMachine(typeof(<LocalizeOnEnable>d__2))]
	private IEnumerator LocalizeOnEnable()
	{
		return null;
	}

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0xE5D810", Offset = "0xE5D810", VA = "0xE5D810")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0xE5D834", Offset = "0xE5D834", VA = "0xE5D834")]
	public RemindLocalizer()
	{
	}
}
[Serializable]
[Token(Token = "0x200002B")]
internal struct DeviceData
{
	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public string[] deviceNames;

	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public Vector3 position;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Vector3 rotation;

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0xE5D9F8", Offset = "0xE5D9F8", VA = "0xE5D9F8")]
	public DeviceData(string name, Vector3 pos, Vector3 rot)
	{
	}

	[Token(Token = "0x60000BD")]
	[Address(RVA = "0xE5DAE8", Offset = "0xE5DAE8", VA = "0xE5DAE8")]
	public DeviceData(string[] names, Vector3 pos, Vector3 rot)
	{
	}
}
[Token(Token = "0x200002C")]
public class XRHandOffset : MonoBehaviour
{
	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("This is the device that you are using to setup the innital proper orientation of the hand, all offsets are relative to this device")]
	public string defaultDevice;

	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform[] rightOffsets;

	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform[] leftOffsets;

	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private DeviceData[] devices;

	[Token(Token = "0x60000BE")]
	[Address(RVA = "0xE5DB3C", Offset = "0xE5DB3C", VA = "0xE5DB3C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000BF")]
	[Address(RVA = "0xE5DF84", Offset = "0xE5DF84", VA = "0xE5DF84")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000C0")]
	[Address(RVA = "0xE5DD18", Offset = "0xE5DD18", VA = "0xE5DD18")]
	private void DeviceConnected(InputDevice inputDevice)
	{
	}

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0xE5E004", Offset = "0xE5E004", VA = "0xE5E004")]
	private Vector3 GetPositionOffset(string from, string to)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0xE5E1CC", Offset = "0xE5E1CC", VA = "0xE5E1CC")]
	private Vector3 GetRotationOffset(string from, string to)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0xE5E394", Offset = "0xE5E394", VA = "0xE5E394")]
	public XRHandOffset()
	{
	}
}
[Token(Token = "0x200002D")]
public class BowlingManager : MonoBehaviour
{
	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Bowling Ball Settings")]
	public GameObject bowlingBall;

	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Bowling Pin Settings")]
	public Vector3 pinCenter;

	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float pinSpaceX;

	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float pinSpaceZ;

	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<GameObject> pins;

	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector3 ballPosition;

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0xE5E764", Offset = "0xE5E764", VA = "0xE5E764")]
	private void Start()
	{
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0xE5E99C", Offset = "0xE5E99C", VA = "0xE5E99C")]
	public void ResetBall()
	{
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0xE5E7A0", Offset = "0xE5E7A0", VA = "0xE5E7A0")]
	public void ResetPins()
	{
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0xE5EA40", Offset = "0xE5EA40", VA = "0xE5EA40")]
	public BowlingManager()
	{
	}
}
[Token(Token = "0x200002E")]
public class DemoExitCondition : MonoBehaviour
{
	[Token(Token = "0x60000C8")]
	[Address(RVA = "0xE5EAC8", Offset = "0xE5EAC8", VA = "0xE5EAC8")]
	private void Update()
	{
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0xE5EB60", Offset = "0xE5EB60", VA = "0xE5EB60")]
	public DemoExitCondition()
	{
	}
}
[Token(Token = "0x200002F")]
public class PlatformMover : MonoBehaviour
{
	[Token(Token = "0x2000030")]
	[CompilerGenerated]
	private sealed class <Move>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlatformMover <>4__this;

		[Token(Token = "0x40000DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <timePassed>5__2;

		[Token(Token = "0x1700001C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000D0")]
			[Address(RVA = "0xE5EEC4", Offset = "0xE5EEC4", VA = "0xE5EEC4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000D2")]
			[Address(RVA = "0xE5EF0C", Offset = "0xE5EF0C", VA = "0xE5EF0C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000CD")]
		[Address(RVA = "0xE5EC20", Offset = "0xE5EC20", VA = "0xE5EC20")]
		[DebuggerHidden]
		public <Move>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x60000CE")]
		[Address(RVA = "0xE5EC58", Offset = "0xE5EC58", VA = "0xE5EC58", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000CF")]
		[Address(RVA = "0xE5EC5C", Offset = "0xE5EC5C", VA = "0xE5EC5C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000D1")]
		[Address(RVA = "0xE5EECC", Offset = "0xE5EECC", VA = "0xE5EECC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 toRange;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float time;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 startPos;

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0xE5EB68", Offset = "0xE5EB68", VA = "0xE5EB68")]
	private void Start()
	{
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0xE5EBAC", Offset = "0xE5EBAC", VA = "0xE5EBAC")]
	[IteratorStateMachine(typeof(<Move>d__4))]
	private IEnumerator Move()
	{
		return null;
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0xE5EC48", Offset = "0xE5EC48", VA = "0xE5EC48")]
	public PlatformMover()
	{
	}
}
[Token(Token = "0x2000031")]
public class TextFieldInspector : MonoBehaviour
{
	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[TextArea]
	public string text;

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0xE5EF14", Offset = "0xE5EF14", VA = "0xE5EF14")]
	public TextFieldInspector()
	{
	}
}
[Token(Token = "0x2000032")]
public class TextInformation : MonoBehaviour
{
	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject activateImage;

	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject deactivateImage;

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject[] texts;

	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool active;

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0xE5EF1C", Offset = "0xE5EF1C", VA = "0xE5EF1C")]
	public void ActivateText()
	{
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0xE5EFB0", Offset = "0xE5EFB0", VA = "0xE5EFB0")]
	public void DeactivateText()
	{
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0xE5F040", Offset = "0xE5F040", VA = "0xE5F040")]
	public void ToggleText()
	{
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0xE5F050", Offset = "0xE5F050", VA = "0xE5F050")]
	public TextInformation()
	{
	}
}
[Token(Token = "0x2000033")]
public class TMPSizeProtector : MonoBehaviour
{
	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float size;

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0xE5F058", Offset = "0xE5F058", VA = "0xE5F058")]
	private void Start()
	{
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0xE5F118", Offset = "0xE5F118", VA = "0xE5F118")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0xE5F1D8", Offset = "0xE5F1D8", VA = "0xE5F1D8")]
	public TMPSizeProtector()
	{
	}
}
[Token(Token = "0x2000034")]
public static class JointExtensions
{
	[Token(Token = "0x60000DB")]
	[Address(RVA = "0xE5F1E0", Offset = "0xE5F1E0", VA = "0xE5F1E0")]
	public static Vector3 Angles(this ConfigurableJoint joint)
	{
		return default(Vector3);
	}
}
[Token(Token = "0x2000035")]
[RequireComponent(typeof(PlacePoint))]
public class PlacePointEventDebugger : MonoBehaviour
{
	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private PlacePoint placePoint;

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0xE5F5FC", Offset = "0xE5F5FC", VA = "0xE5F5FC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0xE5F9F4", Offset = "0xE5F9F4", VA = "0xE5F9F4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0xE5FDEC", Offset = "0xE5FDEC", VA = "0xE5FDEC")]
	public PlacePointEventDebugger()
	{
	}
}
[Token(Token = "0x2000037")]
[DefaultExecutionOrder(-100000)]
public class IgnoreHandLayer : MonoBehaviour
{
	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool includeChildren;

	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int startLayer;

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0xE601AC", Offset = "0xE601AC", VA = "0xE601AC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0xE60220", Offset = "0xE60220", VA = "0xE60220")]
	private void LateStart()
	{
	}

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0xE60280", Offset = "0xE60280", VA = "0xE60280")]
	internal void SetLayerRecursive(Transform obj, int newLayer)
	{
	}

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0xE6031C", Offset = "0xE6031C", VA = "0xE6031C")]
	public IgnoreHandLayer()
	{
	}
}
[Token(Token = "0x2000038")]
public class HeadCameraSmoothing : MonoBehaviour
{
	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 lastPos;

	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Quaternion lastRot;

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0xE6032C", Offset = "0xE6032C", VA = "0xE6032C")]
	public void LateUpdate()
	{
	}

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0xE6037C", Offset = "0xE6037C", VA = "0xE6037C")]
	public HeadCameraSmoothing()
	{
	}
}
[Token(Token = "0x2000039")]
public class Pushable : MonoBehaviour
{
	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("BETA")]
	public Vector3 strengthScale;

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0xE60384", Offset = "0xE60384", VA = "0xE60384")]
	public Pushable()
	{
	}
}
[Token(Token = "0x200003A")]
public class AutoHandSettings : ScriptableObject
{
	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Whether the popup should be ignored on launch or not")]
	public bool ignoreSetup;

	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Tooltip("-1 is custom, 0 is low, 1 is medium, 2 is high")]
	public float quality;

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0xE603E4", Offset = "0xE603E4", VA = "0xE603E4")]
	public static void ClearSettings()
	{
	}

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0xE60454", Offset = "0xE60454", VA = "0xE60454")]
	public AutoHandSettings()
	{
	}
}
[Token(Token = "0x200003B")]
[RequireComponent(typeof(Rigidbody))]
public class CollisionSound : MonoBehaviour
{
	[Token(Token = "0x200003C")]
	[CompilerGenerated]
	private sealed class <SoundPlayBuffer>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CollisionSound <>4__this;

		[Token(Token = "0x1700001E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000FC")]
			[Address(RVA = "0xE60A20", Offset = "0xE60A20", VA = "0xE60A20", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000FE")]
			[Address(RVA = "0xE60A68", Offset = "0xE60A68", VA = "0xE60A68", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000F9")]
		[Address(RVA = "0xE6088C", Offset = "0xE6088C", VA = "0xE6088C")]
		[DebuggerHidden]
		public <SoundPlayBuffer>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x60000FA")]
		[Address(RVA = "0xE6094C", Offset = "0xE6094C", VA = "0xE6094C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000FB")]
		[Address(RVA = "0xE60950", Offset = "0xE60950", VA = "0xE60950", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000FD")]
		[Address(RVA = "0xE60A28", Offset = "0xE60A28", VA = "0xE60A28", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200003D")]
	[CompilerGenerated]
	private sealed class <SoundPlayBuffer>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CollisionSound <>4__this;

		[Token(Token = "0x4000106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float time;

		[Token(Token = "0x17000020")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000102")]
			[Address(RVA = "0xE60B44", Offset = "0xE60B44", VA = "0xE60B44", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000021")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000104")]
			[Address(RVA = "0xE60B8C", Offset = "0xE60B8C", VA = "0xE60B8C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000FF")]
		[Address(RVA = "0xE608B4", Offset = "0xE608B4", VA = "0xE608B4")]
		[DebuggerHidden]
		public <SoundPlayBuffer>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x6000100")]
		[Address(RVA = "0xE60A70", Offset = "0xE60A70", VA = "0xE60A70", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000101")]
		[Address(RVA = "0xE60A74", Offset = "0xE60A74", VA = "0xE60A74", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000103")]
		[Address(RVA = "0xE60B4C", Offset = "0xE60B4C", VA = "0xE60B4C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The layers that cause the sound to play")]
	public LayerMask collisionTriggers;

	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("Source to play sound from")]
	public AudioSource source;

	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("Source to play sound from")]
	public AudioClip clip;

	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Space]
	[Tooltip("Source to play sound from")]
	public AnimationCurve velocityVolumeCurve;

	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float volumeAmp;

	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float velocityAmp;

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float soundRepeatDelay;

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Rigidbody body;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool canPlaySound;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Coroutine playSoundRoutine;

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0xE60464", Offset = "0xE60464", VA = "0xE60464")]
	private void Start()
	{
	}

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0xE6055C", Offset = "0xE6055C", VA = "0xE6055C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0xE60570", Offset = "0xE60570", VA = "0xE60570")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0xE60818", Offset = "0xE60818", VA = "0xE60818")]
	[IteratorStateMachine(typeof(<SoundPlayBuffer>d__13))]
	private IEnumerator SoundPlayBuffer()
	{
		return null;
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0xE604D8", Offset = "0xE604D8", VA = "0xE604D8")]
	[IteratorStateMachine(typeof(<SoundPlayBuffer>d__14))]
	private IEnumerator SoundPlayBuffer(float time)
	{
		return null;
	}

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0xE608DC", Offset = "0xE608DC", VA = "0xE608DC")]
	public CollisionSound()
	{
	}
}
[Token(Token = "0x200003E")]
[AddComponentMenu("Camera-Control/Smooth Mouse Orbit - Unluck Software")]
public class SmoothCameraOrbit : MonoBehaviour
{
	[Token(Token = "0x4000107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x4000108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 targetOffset;

	[Token(Token = "0x4000109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float distance;

	[Token(Token = "0x400010A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float maxDistance;

	[Token(Token = "0x400010B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float minDistance;

	[Token(Token = "0x400010C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float xSpeed;

	[Token(Token = "0x400010D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float ySpeed;

	[Token(Token = "0x400010E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int yMinLimit;

	[Token(Token = "0x400010F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public int yMaxLimit;

	[Token(Token = "0x4000110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int zoomRate;

	[Token(Token = "0x4000111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float panSpeed;

	[Token(Token = "0x4000112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float zoomDampening;

	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float autoRotate;

	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float xDeg;

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float yDeg;

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float currentDistance;

	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float desiredDistance;

	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Quaternion currentRotation;

	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Quaternion desiredRotation;

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Quaternion rotation;

	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Vector3 position;

	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private float idleTimer;

	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float idleSmooth;

	[Token(Token = "0x6000105")]
	[Address(RVA = "0xE60B94", Offset = "0xE60B94", VA = "0xE60B94")]
	private void Start()
	{
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0xE61090", Offset = "0xE61090", VA = "0xE61090")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0xE60B98", Offset = "0xE60B98", VA = "0xE60B98")]
	public void Init()
	{
	}

	[Token(Token = "0x6000108")]
	[Address(RVA = "0xE61094", Offset = "0xE61094", VA = "0xE61094")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000109")]
	[Address(RVA = "0xE61604", Offset = "0xE61604", VA = "0xE61604")]
	private static float ClampAngle(float angle, float min, float max)
	{
		return default(float);
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0xE61640", Offset = "0xE61640", VA = "0xE61640")]
	public SmoothCameraOrbit()
	{
	}
}
[Token(Token = "0x200003F")]
public class Twist : MonoBehaviour
{
	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float twist;

	[Token(Token = "0x600010B")]
	[Address(RVA = "0xE61684", Offset = "0xE61684", VA = "0xE61684")]
	public void Update()
	{
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0xE61728", Offset = "0xE61728", VA = "0xE61728")]
	public Twist()
	{
	}
}
[Token(Token = "0x2000040")]
[RequireComponent(typeof(ParticleSystem))]
public class EmitParticlesOnBallBounce : MonoBehaviour
{
	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem pSystem;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool emitOnCollision;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool emitOnKick;

	[Token(Token = "0x600010D")]
	[Address(RVA = "0xE61738", Offset = "0xE61738", VA = "0xE61738")]
	public EmitParticlesOnBallBounce()
	{
	}
}
[Token(Token = "0x2000041")]
public class EmitParticlesOnKartBounce : MonoBehaviour
{
	[Token(Token = "0x600010E")]
	[Address(RVA = "0xE61748", Offset = "0xE61748", VA = "0xE61748")]
	public EmitParticlesOnKartBounce()
	{
	}
}
[Token(Token = "0x2000042")]
[RequireComponent(typeof(ParticleSystem))]
public class EmitParticlesOnLand : MonoBehaviour
{
	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool emitOnLand;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool emitOnEnemyDeath;

	[Token(Token = "0x600010F")]
	[Address(RVA = "0xE61750", Offset = "0xE61750", VA = "0xE61750")]
	public EmitParticlesOnLand()
	{
	}
}
[Token(Token = "0x2000043")]
public class DemoToonVFX : MonoBehaviour
{
	[Token(Token = "0x2000044")]
	public struct SVA
	{
		[Token(Token = "0x400013C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float S;

		[Token(Token = "0x400013D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float V;

		[Token(Token = "0x400013E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float A;
	}

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform Holder;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 cameraPos;

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float currDistance;

	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float xRotate;

	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float yRotate;

	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float yMinLimit;

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float yMaxLimit;

	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float prevDistance;

	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float x;

	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float y;

	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[Header("GUI")]
	private float windowDpi;

	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject[] Prefabs;

	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int Prefab;

	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private GameObject Instance;

	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float StartColor;

	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float HueColor;

	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Texture HueTexture;

	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float[] activationTime;

	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool enableGUI;

	[Token(Token = "0x4000137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Animator animObject;

	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private ParticleSystem[] particleSystems;

	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private List<SVA> svList;

	[Token(Token = "0x400013A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float H;

	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public bool useAnimation;

	[Token(Token = "0x6000110")]
	[Address(RVA = "0xE61760", Offset = "0xE61760", VA = "0xE61760")]
	private void Start()
	{
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0xE61C20", Offset = "0xE61C20", VA = "0xE61C20")]
	private void Update()
	{
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0xE61C4C", Offset = "0xE61C4C", VA = "0xE61C4C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000113")]
	[Address(RVA = "0xE6182C", Offset = "0xE6182C", VA = "0xE6182C")]
	private void Counter(int count)
	{
	}

	[Token(Token = "0x6000114")]
	[Address(RVA = "0xE6203C", Offset = "0xE6203C", VA = "0xE6203C")]
	private void Activate()
	{
	}

	[Token(Token = "0x6000115")]
	[Address(RVA = "0xE6205C", Offset = "0xE6205C", VA = "0xE6205C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000116")]
	[Address(RVA = "0xE624D0", Offset = "0xE624D0", VA = "0xE624D0")]
	private static float ClampAngle(float angle, float min, float max)
	{
		return default(float);
	}

	[Token(Token = "0x6000117")]
	[Address(RVA = "0xE6250C", Offset = "0xE6250C", VA = "0xE6250C")]
	public DemoToonVFX()
	{
	}
}
[Token(Token = "0x2000045")]
public class FrontMover : MonoBehaviour
{
	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform pivot;

	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ParticleSystem effect;

	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float speed;

	[Token(Token = "0x4000142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float drug;

	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float repeatingTime;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float startSpeed;

	[Token(Token = "0x6000118")]
	[Address(RVA = "0xE625E8", Offset = "0xE625E8", VA = "0xE625E8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0xE6265C", Offset = "0xE6265C", VA = "0xE6265C")]
	private void StartAgain()
	{
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0xE626A4", Offset = "0xE626A4", VA = "0xE626A4")]
	private void Update()
	{
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0xE62768", Offset = "0xE62768", VA = "0xE62768")]
	public FrontMover()
	{
	}
}
[Token(Token = "0x2000046")]
public class EGA_EffectSound : MonoBehaviour
{
	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool Repeating;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float RepeatTime;

	[Token(Token = "0x4000147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float StartTime;

	[Token(Token = "0x4000148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool RandomVolume;

	[Token(Token = "0x4000149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float minVolume;

	[Token(Token = "0x400014A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float maxVolume;

	[Token(Token = "0x400014B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AudioClip clip;

	[Token(Token = "0x400014C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private AudioSource soundComponent;

	[Token(Token = "0x600011C")]
	[Address(RVA = "0xE62784", Offset = "0xE62784", VA = "0xE62784")]
	private void Start()
	{
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0xE62874", Offset = "0xE62874", VA = "0xE62874")]
	private void RepeatSound()
	{
	}

	[Token(Token = "0x600011E")]
	[Address(RVA = "0xE62898", Offset = "0xE62898", VA = "0xE62898")]
	public EGA_EffectSound()
	{
	}
}
[Token(Token = "0x2000047")]
public class ParticleCollisionInstance : MonoBehaviour
{
	[Token(Token = "0x400014D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] EffectsOnCollision;

	[Token(Token = "0x400014E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float DestroyTimeDelay;

	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool UseWorldSpacePosition;

	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float Offset;

	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Vector3 rotationOffset;

	[Token(Token = "0x4000152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool useOnlyRotationOffset;

	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool UseFirePointRotation;

	[Token(Token = "0x4000154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	public bool DestoyMainEffect;

	[Token(Token = "0x4000155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private ParticleSystem part;

	[Token(Token = "0x4000156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<ParticleCollisionEvent> collisionEvents;

	[Token(Token = "0x4000157")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private ParticleSystem ps;

	[Token(Token = "0x600011F")]
	[Address(RVA = "0xE628BC", Offset = "0xE628BC", VA = "0xE628BC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000120")]
	[Address(RVA = "0xE62914", Offset = "0xE62914", VA = "0xE62914")]
	private void OnParticleCollision(GameObject other)
	{
	}

	[Token(Token = "0x6000121")]
	[Address(RVA = "0xE62E28", Offset = "0xE62E28", VA = "0xE62E28")]
	public ParticleCollisionInstance()
	{
	}
}
[Token(Token = "0x2000048")]
public class AutoDestroyPS : MonoBehaviour
{
	[Token(Token = "0x4000158")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float timeLeft;

	[Token(Token = "0x6000122")]
	[Address(RVA = "0xE62EC8", Offset = "0xE62EC8", VA = "0xE62EC8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0xE62FA4", Offset = "0xE62FA4", VA = "0xE62FA4")]
	public AutoDestroyPS()
	{
	}
}
[Token(Token = "0x2000049")]
public class ProjectileMover : MonoBehaviour
{
	[Token(Token = "0x4000159")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speed;

	[Token(Token = "0x400015A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float hitOffset;

	[Token(Token = "0x400015B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool UseFirePointRotation;

	[Token(Token = "0x400015C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 rotationOffset;

	[Token(Token = "0x400015D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject hit;

	[Token(Token = "0x400015E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject flash;

	[Token(Token = "0x400015F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Rigidbody rb;

	[Token(Token = "0x4000160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject[] Detached;

	[Token(Token = "0x6000124")]
	[Address(RVA = "0xE62FAC", Offset = "0xE62FAC", VA = "0xE62FAC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000125")]
	[Address(RVA = "0xE6325C", Offset = "0xE6325C", VA = "0xE6325C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000126")]
	[Address(RVA = "0xE632C4", Offset = "0xE632C4", VA = "0xE632C4")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000127")]
	[Address(RVA = "0xE63824", Offset = "0xE63824", VA = "0xE63824")]
	public ProjectileMover()
	{
	}
}
[Token(Token = "0x200004A")]
public class DemoShooting : MonoBehaviour
{
	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject FirePoint;

	[Token(Token = "0x4000162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Camera Cam;

	[Token(Token = "0x4000163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float MaxLength;

	[Token(Token = "0x4000164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject[] Prefabs;

	[Token(Token = "0x4000165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Ray RayMouse;

	[Token(Token = "0x4000166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 direction;

	[Token(Token = "0x4000167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Quaternion rotation;

	[Token(Token = "0x4000168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[Header("GUI")]
	private float windowDpi;

	[Token(Token = "0x4000169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int Prefab;

	[Token(Token = "0x400016A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private GameObject Instance;

	[Token(Token = "0x400016B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float hSliderValue;

	[Token(Token = "0x400016C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float fireCountdown;

	[Token(Token = "0x400016D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float buttonSaver;

	[Token(Token = "0x400016E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Animation camAnim;

	[Token(Token = "0x6000128")]
	[Address(RVA = "0xE6383C", Offset = "0xE6383C", VA = "0xE6383C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0xE638EC", Offset = "0xE638EC", VA = "0xE638EC")]
	private void Update()
	{
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0xE63E10", Offset = "0xE63E10", VA = "0xE63E10")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0xE638A8", Offset = "0xE638A8", VA = "0xE638A8")]
	private void Counter(int count)
	{
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0xE63D40", Offset = "0xE63D40", VA = "0xE63D40")]
	private void RotateToMouseDirection(GameObject obj, Vector3 destination)
	{
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0xE64044", Offset = "0xE64044", VA = "0xE64044")]
	public DemoShooting()
	{
	}
}
[Token(Token = "0x200004B")]
public class DebugUIBuilder : MonoBehaviour
{
	[Token(Token = "0x200004C")]
	public delegate void OnClick();

	[Token(Token = "0x200004D")]
	public delegate void OnToggleValueChange(Toggle t);

	[Token(Token = "0x200004E")]
	public delegate void OnSlider(float f);

	[Token(Token = "0x200004F")]
	public delegate bool ActiveUpdate();

	[Token(Token = "0x400016F")]
	public const int DEBUG_PANE_CENTER = 0;

	[Token(Token = "0x4000170")]
	public const int DEBUG_PANE_RIGHT = 1;

	[Token(Token = "0x4000171")]
	public const int DEBUG_PANE_LEFT = 2;

	[Token(Token = "0x4000172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private RectTransform buttonPrefab;

	[Token(Token = "0x4000173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private RectTransform[] additionalButtonPrefab;

	[Token(Token = "0x4000174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private RectTransform labelPrefab;

	[Token(Token = "0x4000175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private RectTransform sliderPrefab;

	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private RectTransform dividerPrefab;

	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private RectTransform togglePrefab;

	[Token(Token = "0x4000178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private RectTransform radioPrefab;

	[Token(Token = "0x4000179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private RectTransform textPrefab;

	[Token(Token = "0x400017A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private GameObject uiHelpersToInstantiate;

	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Transform[] targetContentPanels;

	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool[] reEnable;

	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private List<GameObject> toEnable;

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private List<GameObject> toDisable;

	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static DebugUIBuilder instance;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float elementSpacing;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float marginH;

	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float marginV;

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Vector2[] insertPositions;

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private List<RectTransform>[] insertedElements;

	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Vector3 menuOffset;

	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private OVRCameraRig rig;

	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Dictionary<string, ToggleGroup> radioGroups;

	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private LaserPointer lp;

	[Token(Token = "0x4000189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private LineRenderer lr;

	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public LaserPointer.LaserBeamBehavior laserBeamBehavior;

	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public bool isHorizontal;

	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD5")]
	public bool usePanelCentricRelayout;

	[Token(Token = "0x600012E")]
	[Address(RVA = "0xE64058", Offset = "0xE64058", VA = "0xE64058")]
	public void Awake()
	{
	}

	[Token(Token = "0x600012F")]
	[Address(RVA = "0xE645C4", Offset = "0xE645C4", VA = "0xE645C4")]
	public void Show()
	{
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0xE64940", Offset = "0xE64940", VA = "0xE64940")]
	public void Hide()
	{
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0xE64ABC", Offset = "0xE64ABC", VA = "0xE64ABC")]
	private void StackedRelayout()
	{
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0xE64CD4", Offset = "0xE64CD4", VA = "0xE64CD4")]
	private void PanelCentricRelayout()
	{
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0xE64930", Offset = "0xE64930", VA = "0xE64930")]
	private void Relayout()
	{
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0xE64FC8", Offset = "0xE64FC8", VA = "0xE64FC8")]
	private void AddRect(RectTransform r, int targetCanvas)
	{
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0xE65344", Offset = "0xE65344", VA = "0xE65344")]
	public RectTransform AddButton(string label, [Optional] OnClick handler, int buttonIndex = -1, int targetCanvas = 0, bool highResolutionText = false)
	{
		return null;
	}

	[Token(Token = "0x6000136")]
	[Address(RVA = "0xE656F4", Offset = "0xE656F4", VA = "0xE656F4")]
	public RectTransform AddLabel(string label, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0xE657EC", Offset = "0xE657EC", VA = "0xE657EC")]
	public RectTransform AddSlider(string label, float min, float max, OnSlider onValueChanged, bool wholeNumbersOnly = false, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0xE659BC", Offset = "0xE659BC", VA = "0xE659BC")]
	public RectTransform AddDivider(int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x6000139")]
	[Address(RVA = "0xE65A54", Offset = "0xE65A54", VA = "0xE65A54")]
	public RectTransform AddToggle(string label, OnToggleValueChange onValueChanged, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x600013A")]
	[Address(RVA = "0xE65C30", Offset = "0xE65C30", VA = "0xE65C30")]
	public RectTransform AddToggle(string label, OnToggleValueChange onValueChanged, bool defaultValue, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0xE65E2C", Offset = "0xE65E2C", VA = "0xE65E2C")]
	public RectTransform AddRadio(string label, string group, OnToggleValueChange handler, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x600013C")]
	[Address(RVA = "0xE66124", Offset = "0xE66124", VA = "0xE66124")]
	public RectTransform AddTextField(string label, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x600013D")]
	[Address(RVA = "0xE66214", Offset = "0xE66214", VA = "0xE66214")]
	public void ToggleLaserPointer(bool isOn)
	{
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0xE662A8", Offset = "0xE662A8", VA = "0xE662A8")]
	public DebugUIBuilder()
	{
	}
}
[Token(Token = "0x2000055")]
public class HandedInputSelector : MonoBehaviour
{
	[Token(Token = "0x4000195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRCameraRig m_CameraRig;

	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private OVRInputModule m_InputModule;

	[Token(Token = "0x6000159")]
	[Address(RVA = "0xE66928", Offset = "0xE66928", VA = "0xE66928")]
	private void Start()
	{
	}

	[Token(Token = "0x600015A")]
	[Address(RVA = "0xE669CC", Offset = "0xE669CC", VA = "0xE669CC")]
	private void Update()
	{
	}

	[Token(Token = "0x600015B")]
	[Address(RVA = "0xE66A68", Offset = "0xE66A68", VA = "0xE66A68")]
	private void SetActiveController(OVRInput.Controller c)
	{
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0xE66AA0", Offset = "0xE66AA0", VA = "0xE66AA0")]
	public HandedInputSelector()
	{
	}
}
[Token(Token = "0x2000056")]
public class LaserPointer : OVRCursor
{
	[Token(Token = "0x2000057")]
	public enum LaserBeamBehavior
	{
		[Token(Token = "0x40001A1")]
		On,
		[Token(Token = "0x40001A2")]
		Off,
		[Token(Token = "0x40001A3")]
		OnWhenHitTarget
	}

	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject cursorVisual;

	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float maxLength;

	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private LaserBeamBehavior _laserBeamBehavior;

	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_restoreOnInputAcquired;

	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 _startPoint;

	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 _forward;

	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 _endPoint;

	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool _hitTarget;

	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private LineRenderer lineRenderer;

	[Token(Token = "0x17000022")]
	public LaserBeamBehavior laserBeamBehavior
	{
		[Token(Token = "0x600015E")]
		[Address(RVA = "0xE66AA8", Offset = "0xE66AA8", VA = "0xE66AA8")]
		get
		{
			return default(LaserBeamBehavior);
		}
		[Token(Token = "0x600015D")]
		[Address(RVA = "0xE64584", Offset = "0xE64584", VA = "0xE64584")]
		set
		{
		}
	}

	[Token(Token = "0x600015F")]
	[Address(RVA = "0xE66AB0", Offset = "0xE66AB0", VA = "0xE66AB0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0xE66B08", Offset = "0xE66B08", VA = "0xE66B08")]
	private void Start()
	{
	}

	[Token(Token = "0x6000161")]
	[Address(RVA = "0xE66C40", Offset = "0xE66C40", VA = "0xE66C40", Slot = "5")]
	public override void SetCursorStartDest(Vector3 start, Vector3 dest, Vector3 normal)
	{
	}

	[Token(Token = "0x6000162")]
	[Address(RVA = "0xE66C5C", Offset = "0xE66C5C", VA = "0xE66C5C", Slot = "4")]
	public override void SetCursorRay(Transform t)
	{
	}

	[Token(Token = "0x6000163")]
	[Address(RVA = "0xE66CAC", Offset = "0xE66CAC", VA = "0xE66CAC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0xE66E4C", Offset = "0xE66E4C", VA = "0xE66E4C")]
	private void UpdateLaserBeam(Vector3 start, Vector3 end)
	{
	}

	[Token(Token = "0x6000165")]
	[Address(RVA = "0xE66F5C", Offset = "0xE66F5C", VA = "0xE66F5C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0xE66FE0", Offset = "0xE66FE0", VA = "0xE66FE0")]
	public void OnInputFocusLost()
	{
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0xE670A0", Offset = "0xE670A0", VA = "0xE670A0")]
	public void OnInputFocusAcquired()
	{
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0xE67148", Offset = "0xE67148", VA = "0xE67148")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000169")]
	[Address(RVA = "0xE67234", Offset = "0xE67234", VA = "0xE67234")]
	public LaserPointer()
	{
	}
}
[Token(Token = "0x2000058")]
public class CharacterCameraConstraint : MonoBehaviour
{
	[Token(Token = "0x40001A4")]
	private const float FADE_RAY_LENGTH = 0.25f;

	[Token(Token = "0x40001A5")]
	private const float FADE_OVERLAP_MAXIMUM = 0.1f;

	[Token(Token = "0x40001A6")]
	private const float FADE_AMOUNT_MAXIMUM = 1f;

	[Token(Token = "0x40001A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("This should be a reference to the OVRCameraRig that is usually a child of the PlayerController.")]
	public OVRCameraRig CameraRig;

	[Token(Token = "0x40001A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("Collision layers to be used for the purposes of fading out the screen when the HMD is inside world geometry and adjusting the capsule height.")]
	public LayerMask CollideLayers;

	[Token(Token = "0x40001A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("Offset is added to camera's real world height, effectively treating it as though the player was taller/standing higher.")]
	public float HeightOffset;

	[Token(Token = "0x40001AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("Minimum height that the character capsule can shrink to.  To disable, set to capsule's height.")]
	public float MinimumHeight;

	[Token(Token = "0x40001AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("Maximum height that the character capsule can grow to.  To disable, set to capsule's height.")]
	public float MaximumHeight;

	[Token(Token = "0x40001AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CapsuleCollider _character;

	[Token(Token = "0x40001AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SimpleCapsuleWithStickMovement _simplePlayerController;

	[Token(Token = "0x600016A")]
	[Address(RVA = "0xE67244", Offset = "0xE67244", VA = "0xE67244")]
	private CharacterCameraConstraint()
	{
	}

	[Token(Token = "0x600016B")]
	[Address(RVA = "0xE6724C", Offset = "0xE6724C", VA = "0xE6724C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600016C")]
	[Address(RVA = "0xE672DC", Offset = "0xE672DC", VA = "0xE672DC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600016D")]
	[Address(RVA = "0xE67400", Offset = "0xE67400", VA = "0xE67400")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600016E")]
	[Address(RVA = "0xE67524", Offset = "0xE67524", VA = "0xE67524")]
	private void CameraUpdate()
	{
	}

	[Token(Token = "0x600016F")]
	[Address(RVA = "0xE67844", Offset = "0xE67844", VA = "0xE67844")]
	private bool CheckCameraOverlapped()
	{
		return default(bool);
	}

	[Token(Token = "0x6000170")]
	[Address(RVA = "0xE67AA4", Offset = "0xE67AA4", VA = "0xE67AA4")]
	private bool CheckCameraNearClipping(out float result)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000059")]
public class LocomotionController : MonoBehaviour
{
	[Token(Token = "0x40001AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRCameraRig CameraRig;

	[Token(Token = "0x40001AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CapsuleCollider CharacterController;

	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SimpleCapsuleWithStickMovement PlayerController;

	[Token(Token = "0x6000171")]
	[Address(RVA = "0xE681FC", Offset = "0xE681FC", VA = "0xE681FC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000172")]
	[Address(RVA = "0xE682A8", Offset = "0xE682A8", VA = "0xE682A8")]
	public LocomotionController()
	{
	}
}
[Token(Token = "0x200005A")]
public class LocomotionTeleport : MonoBehaviour
{
	[Token(Token = "0x200005B")]
	public enum States
	{
		[Token(Token = "0x40001D4")]
		Ready,
		[Token(Token = "0x40001D5")]
		Aim,
		[Token(Token = "0x40001D6")]
		CancelAim,
		[Token(Token = "0x40001D7")]
		PreTeleport,
		[Token(Token = "0x40001D8")]
		CancelTeleport,
		[Token(Token = "0x40001D9")]
		Teleporting,
		[Token(Token = "0x40001DA")]
		PostTeleport
	}

	[Token(Token = "0x200005C")]
	public enum TeleportIntentions
	{
		[Token(Token = "0x40001DC")]
		None,
		[Token(Token = "0x40001DD")]
		Aim,
		[Token(Token = "0x40001DE")]
		PreTeleport,
		[Token(Token = "0x40001DF")]
		Teleport
	}

	[Token(Token = "0x200005D")]
	public enum AimCollisionTypes
	{
		[Token(Token = "0x40001E1")]
		Point,
		[Token(Token = "0x40001E2")]
		Sphere,
		[Token(Token = "0x40001E3")]
		Capsule
	}

	[Token(Token = "0x200005E")]
	public class AimData
	{
		[Token(Token = "0x40001E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public RaycastHit TargetHitInfo;

		[Token(Token = "0x40001E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool TargetValid;

		[Token(Token = "0x40001E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3? Destination;

		[Token(Token = "0x40001E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float Radius;

		[Token(Token = "0x17000026")]
		public List<Vector3> Points
		{
			[Token(Token = "0x60001A8")]
			[Address(RVA = "0xE69FE8", Offset = "0xE69FE8", VA = "0xE69FE8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60001A9")]
			[Address(RVA = "0xE69FF0", Offset = "0xE69FF0", VA = "0xE69FF0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60001A7")]
		[Address(RVA = "0xE69F60", Offset = "0xE69F60", VA = "0xE69F60")]
		public AimData()
		{
		}

		[Token(Token = "0x60001AA")]
		[Address(RVA = "0xE69FF8", Offset = "0xE69FF8", VA = "0xE69FF8")]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x200005F")]
	[CompilerGenerated]
	private sealed class <ReadyStateCoroutine>d__52 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000027")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001AE")]
			[Address(RVA = "0xE6A160", Offset = "0xE6A160", VA = "0xE6A160", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000028")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001B0")]
			[Address(RVA = "0xE6A1A8", Offset = "0xE6A1A8", VA = "0xE6A1A8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001AB")]
		[Address(RVA = "0xE68CB4", Offset = "0xE68CB4", VA = "0xE68CB4")]
		[DebuggerHidden]
		public <ReadyStateCoroutine>d__52(int <>1__state)
		{
		}

		[Token(Token = "0x60001AC")]
		[Address(RVA = "0xE6A050", Offset = "0xE6A050", VA = "0xE6A050", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001AD")]
		[Address(RVA = "0xE6A054", Offset = "0xE6A054", VA = "0xE6A054", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001AF")]
		[Address(RVA = "0xE6A168", Offset = "0xE6A168", VA = "0xE6A168", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000060")]
	[CompilerGenerated]
	private sealed class <AimStateCoroutine>d__64 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000029")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001B4")]
			[Address(RVA = "0xE6A30C", Offset = "0xE6A30C", VA = "0xE6A30C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001B6")]
			[Address(RVA = "0xE6A354", Offset = "0xE6A354", VA = "0xE6A354", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001B1")]
		[Address(RVA = "0xE6913C", Offset = "0xE6913C", VA = "0xE6913C")]
		[DebuggerHidden]
		public <AimStateCoroutine>d__64(int <>1__state)
		{
		}

		[Token(Token = "0x60001B2")]
		[Address(RVA = "0xE6A1B0", Offset = "0xE6A1B0", VA = "0xE6A1B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001B3")]
		[Address(RVA = "0xE6A1B4", Offset = "0xE6A1B4", VA = "0xE6A1B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001B5")]
		[Address(RVA = "0xE6A314", Offset = "0xE6A314", VA = "0xE6A314", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000061")]
	[CompilerGenerated]
	private sealed class <CancelAimStateCoroutine>d__68 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x1700002B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001BA")]
			[Address(RVA = "0xE6A40C", Offset = "0xE6A40C", VA = "0xE6A40C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001BC")]
			[Address(RVA = "0xE6A454", Offset = "0xE6A454", VA = "0xE6A454", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001B7")]
		[Address(RVA = "0xE69310", Offset = "0xE69310", VA = "0xE69310")]
		[DebuggerHidden]
		public <CancelAimStateCoroutine>d__68(int <>1__state)
		{
		}

		[Token(Token = "0x60001B8")]
		[Address(RVA = "0xE6A35C", Offset = "0xE6A35C", VA = "0xE6A35C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001B9")]
		[Address(RVA = "0xE6A360", Offset = "0xE6A360", VA = "0xE6A360", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001BB")]
		[Address(RVA = "0xE6A414", Offset = "0xE6A414", VA = "0xE6A414", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000062")]
	[CompilerGenerated]
	private sealed class <PreTeleportStateCoroutine>d__72 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x1700002D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001C0")]
			[Address(RVA = "0xE6A544", Offset = "0xE6A544", VA = "0xE6A544", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001C2")]
			[Address(RVA = "0xE6A58C", Offset = "0xE6A58C", VA = "0xE6A58C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001BD")]
		[Address(RVA = "0xE694E4", Offset = "0xE694E4", VA = "0xE694E4")]
		[DebuggerHidden]
		public <PreTeleportStateCoroutine>d__72(int <>1__state)
		{
		}

		[Token(Token = "0x60001BE")]
		[Address(RVA = "0xE6A45C", Offset = "0xE6A45C", VA = "0xE6A45C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001BF")]
		[Address(RVA = "0xE6A460", Offset = "0xE6A460", VA = "0xE6A460", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001C1")]
		[Address(RVA = "0xE6A54C", Offset = "0xE6A54C", VA = "0xE6A54C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000063")]
	[CompilerGenerated]
	private sealed class <CancelTeleportStateCoroutine>d__76 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x1700002F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001C6")]
			[Address(RVA = "0xE6A644", Offset = "0xE6A644", VA = "0xE6A644", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000030")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001C8")]
			[Address(RVA = "0xE6A68C", Offset = "0xE6A68C", VA = "0xE6A68C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001C3")]
		[Address(RVA = "0xE696B8", Offset = "0xE696B8", VA = "0xE696B8")]
		[DebuggerHidden]
		public <CancelTeleportStateCoroutine>d__76(int <>1__state)
		{
		}

		[Token(Token = "0x60001C4")]
		[Address(RVA = "0xE6A594", Offset = "0xE6A594", VA = "0xE6A594", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001C5")]
		[Address(RVA = "0xE6A598", Offset = "0xE6A598", VA = "0xE6A598", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001C7")]
		[Address(RVA = "0xE6A64C", Offset = "0xE6A64C", VA = "0xE6A64C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000064")]
	[CompilerGenerated]
	private sealed class <TeleportingStateCoroutine>d__80 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000031")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001CC")]
			[Address(RVA = "0xE6A778", Offset = "0xE6A778", VA = "0xE6A778", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000032")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001CE")]
			[Address(RVA = "0xE6A7C0", Offset = "0xE6A7C0", VA = "0xE6A7C0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001C9")]
		[Address(RVA = "0xE6988C", Offset = "0xE6988C", VA = "0xE6988C")]
		[DebuggerHidden]
		public <TeleportingStateCoroutine>d__80(int <>1__state)
		{
		}

		[Token(Token = "0x60001CA")]
		[Address(RVA = "0xE6A694", Offset = "0xE6A694", VA = "0xE6A694", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001CB")]
		[Address(RVA = "0xE6A698", Offset = "0xE6A698", VA = "0xE6A698", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001CD")]
		[Address(RVA = "0xE6A780", Offset = "0xE6A780", VA = "0xE6A780", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000065")]
	[CompilerGenerated]
	private sealed class <PostTeleportStateCoroutine>d__84 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000033")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001D2")]
			[Address(RVA = "0xE6A8C8", Offset = "0xE6A8C8", VA = "0xE6A8C8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000034")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001D4")]
			[Address(RVA = "0xE6A910", Offset = "0xE6A910", VA = "0xE6A910", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001CF")]
		[Address(RVA = "0xE69A60", Offset = "0xE69A60", VA = "0xE69A60")]
		[DebuggerHidden]
		public <PostTeleportStateCoroutine>d__84(int <>1__state)
		{
		}

		[Token(Token = "0x60001D0")]
		[Address(RVA = "0xE6A7C8", Offset = "0xE6A7C8", VA = "0xE6A7C8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001D1")]
		[Address(RVA = "0xE6A7CC", Offset = "0xE6A7CC", VA = "0xE6A7CC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001D3")]
		[Address(RVA = "0xE6A8D0", Offset = "0xE6A8D0", VA = "0xE6A8D0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Allow linear movement prior to the teleport system being activated.")]
	public bool EnableMovementDuringReady;

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[Tooltip("Allow linear movement while the teleport system is in the process of aiming for a teleport target.")]
	public bool EnableMovementDuringAim;

	[Token(Token = "0x40001B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	[Tooltip("Allow linear movement while the teleport system is in the process of configuring the landing orientation.")]
	public bool EnableMovementDuringPreTeleport;

	[Token(Token = "0x40001B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	[Tooltip("Allow linear movement after the teleport has occurred but before the system has returned to the ready state.")]
	public bool EnableMovementDuringPostTeleport;

	[Token(Token = "0x40001B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Tooltip("Allow rotation prior to the teleport system being activated.")]
	public bool EnableRotationDuringReady;

	[Token(Token = "0x40001B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	[Tooltip("Allow rotation while the teleport system is in the process of aiming for a teleport target.")]
	public bool EnableRotationDuringAim;

	[Token(Token = "0x40001B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	[Tooltip("Allow rotation while the teleport system is in the process of configuring the landing orientation.")]
	public bool EnableRotationDuringPreTeleport;

	[Token(Token = "0x40001B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
	[Tooltip("Allow rotation after the teleport has occurred but before the system has returned to the ready state.")]
	public bool EnableRotationDuringPostTeleport;

	[NonSerialized]
	[Token(Token = "0x40001BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TeleportAimHandler AimHandler;

	[Token(Token = "0x40001BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("This prefab will be instantiated as needed and updated to match the current aim target.")]
	public TeleportDestination TeleportDestinationPrefab;

	[Token(Token = "0x40001BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("TeleportDestinationPrefab will be instantiated into this layer.")]
	public int TeleportDestinationLayer;

	[NonSerialized]
	[Token(Token = "0x40001BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TeleportInputHandler InputHandler;

	[NonSerialized]
	[Token(Token = "0x40001BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TeleportIntentions CurrentIntention;

	[NonSerialized]
	[Token(Token = "0x40001C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool IsPreTeleportRequested;

	[NonSerialized]
	[Token(Token = "0x40001C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	public bool IsTransitioning;

	[NonSerialized]
	[Token(Token = "0x40001C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
	public bool IsPostTeleportRequested;

	[Token(Token = "0x40001C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private TeleportDestination _teleportDestination;

	[Token(Token = "0x40001C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Tooltip("When aiming at possible destinations, the aim collision type determines which shape to use for collision tests.")]
	public AimCollisionTypes AimCollisionType;

	[Token(Token = "0x40001C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[Tooltip("Use the character collision radius/height/skinwidth for sphere/capsule collision tests.")]
	public bool UseCharacterCollisionData;

	[Token(Token = "0x40001C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Tooltip("Radius of the sphere or capsule used for collision testing when aiming to possible teleport destinations. Ignored if UseCharacterCollisionData is true.")]
	public float AimCollisionRadius;

	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[Tooltip("Height of the capsule used for collision testing when aiming to possible teleport destinations. Ignored if UseCharacterCollisionData is true.")]
	public float AimCollisionHeight;

	[Token(Token = "0x17000023")]
	public States CurrentState
	{
		[Token(Token = "0x6000175")]
		[Address(RVA = "0xE682F8", Offset = "0xE682F8", VA = "0xE682F8")]
		[CompilerGenerated]
		get
		{
			return default(States);
		}
		[Token(Token = "0x6000176")]
		[Address(RVA = "0xE68300", Offset = "0xE68300", VA = "0xE68300")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000024")]
	public Quaternion DestinationRotation
	{
		[Token(Token = "0x600017A")]
		[Address(RVA = "0xE684D0", Offset = "0xE684D0", VA = "0xE684D0")]
		get
		{
			return default(Quaternion);
		}
	}

	[Token(Token = "0x17000025")]
	public LocomotionController LocomotionController
	{
		[Token(Token = "0x600017B")]
		[Address(RVA = "0xE684F4", Offset = "0xE684F4", VA = "0xE684F4")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600017C")]
		[Address(RVA = "0xE684FC", Offset = "0xE684FC", VA = "0xE684FC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x14000001")]
	public event Action<bool, Vector3?, Quaternion?, Quaternion?> UpdateTeleportDestination
	{
		[Token(Token = "0x6000177")]
		[Address(RVA = "0xE68308", Offset = "0xE68308", VA = "0xE68308")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000178")]
		[Address(RVA = "0xE683B8", Offset = "0xE683B8", VA = "0xE683B8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000002")]
	public event Action EnterStateReady
	{
		[Token(Token = "0x6000186")]
		[Address(RVA = "0xE68B7C", Offset = "0xE68B7C", VA = "0xE68B7C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000187")]
		[Address(RVA = "0xE68C18", Offset = "0xE68C18", VA = "0xE68C18")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000003")]
	public event Action EnterStateAim
	{
		[Token(Token = "0x6000189")]
		[Address(RVA = "0xE68CDC", Offset = "0xE68CDC", VA = "0xE68CDC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600018A")]
		[Address(RVA = "0xE68D78", Offset = "0xE68D78", VA = "0xE68D78")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000004")]
	public event Action<AimData> UpdateAimData
	{
		[Token(Token = "0x600018B")]
		[Address(RVA = "0xE68E14", Offset = "0xE68E14", VA = "0xE68E14")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600018C")]
		[Address(RVA = "0xE68EC4", Offset = "0xE68EC4", VA = "0xE68EC4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000005")]
	public event Action ExitStateAim
	{
		[Token(Token = "0x600018E")]
		[Address(RVA = "0xE68F90", Offset = "0xE68F90", VA = "0xE68F90")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600018F")]
		[Address(RVA = "0xE6902C", Offset = "0xE6902C", VA = "0xE6902C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000006")]
	public event Action EnterStateCancelAim
	{
		[Token(Token = "0x6000191")]
		[Address(RVA = "0xE69164", Offset = "0xE69164", VA = "0xE69164")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000192")]
		[Address(RVA = "0xE69200", Offset = "0xE69200", VA = "0xE69200")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000007")]
	public event Action EnterStatePreTeleport
	{
		[Token(Token = "0x6000194")]
		[Address(RVA = "0xE69338", Offset = "0xE69338", VA = "0xE69338")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000195")]
		[Address(RVA = "0xE693D4", Offset = "0xE693D4", VA = "0xE693D4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000008")]
	public event Action EnterStateCancelTeleport
	{
		[Token(Token = "0x6000197")]
		[Address(RVA = "0xE6950C", Offset = "0xE6950C", VA = "0xE6950C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000198")]
		[Address(RVA = "0xE695A8", Offset = "0xE695A8", VA = "0xE695A8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000009")]
	public event Action EnterStateTeleporting
	{
		[Token(Token = "0x600019A")]
		[Address(RVA = "0xE696E0", Offset = "0xE696E0", VA = "0xE696E0")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600019B")]
		[Address(RVA = "0xE6977C", Offset = "0xE6977C", VA = "0xE6977C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000A")]
	public event Action EnterStatePostTeleport
	{
		[Token(Token = "0x600019D")]
		[Address(RVA = "0xE698B4", Offset = "0xE698B4", VA = "0xE698B4")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600019E")]
		[Address(RVA = "0xE69950", Offset = "0xE69950", VA = "0xE69950")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000B")]
	public event Action<Transform, Vector3, Quaternion> Teleported
	{
		[Token(Token = "0x60001A0")]
		[Address(RVA = "0xE69A88", Offset = "0xE69A88", VA = "0xE69A88")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001A1")]
		[Address(RVA = "0xE69B38", Offset = "0xE69B38", VA = "0xE69B38")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0xE682B0", Offset = "0xE682B0", VA = "0xE682B0")]
	public void EnableMovement(bool ready, bool aim, bool pre, bool post)
	{
	}

	[Token(Token = "0x6000174")]
	[Address(RVA = "0xE682D4", Offset = "0xE682D4", VA = "0xE682D4")]
	public void EnableRotation(bool ready, bool aim, bool pre, bool post)
	{
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0xE68468", Offset = "0xE68468", VA = "0xE68468")]
	public void OnUpdateTeleportDestination(bool isValidDestination, Vector3? position, Quaternion? rotation, Quaternion? landingRotation)
	{
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0xE68504", Offset = "0xE68504", VA = "0xE68504")]
	public bool AimCollisionTest(Vector3 start, Vector3 end, LayerMask aimCollisionLayerMask, out RaycastHit hitInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x600017E")]
	[Address(RVA = "0xE687CC", Offset = "0xE687CC", VA = "0xE687CC")]
	[Conditional("DEBUG_TELEPORT_STATES")]
	protected void LogState(string msg)
	{
	}

	[Token(Token = "0x600017F")]
	[Address(RVA = "0xE68874", Offset = "0xE68874", VA = "0xE68874")]
	protected void CreateNewTeleportDestination()
	{
	}

	[Token(Token = "0x6000180")]
	[Address(RVA = "0xE68960", Offset = "0xE68960", VA = "0xE68960")]
	private void DeactivateDestination()
	{
	}

	[Token(Token = "0x6000181")]
	[Address(RVA = "0xE6899C", Offset = "0xE6899C", VA = "0xE6899C")]
	public void RecycleTeleportDestination(TeleportDestination oldDestination)
	{
	}

	[Token(Token = "0x6000182")]
	[Address(RVA = "0xE68A4C", Offset = "0xE68A4C", VA = "0xE68A4C")]
	private void EnableMotion(bool enableLinear, bool enableRotation)
	{
	}

	[Token(Token = "0x6000183")]
	[Address(RVA = "0xE68A7C", Offset = "0xE68A7C", VA = "0xE68A7C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000184")]
	[Address(RVA = "0xE68ADC", Offset = "0xE68ADC", VA = "0xE68ADC", Slot = "4")]
	public virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000185")]
	[Address(RVA = "0xE68B74", Offset = "0xE68B74", VA = "0xE68B74", Slot = "5")]
	public virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000188")]
	[Address(RVA = "0xE68B00", Offset = "0xE68B00", VA = "0xE68B00")]
	[IteratorStateMachine(typeof(<ReadyStateCoroutine>d__52))]
	protected IEnumerator ReadyStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600018D")]
	[Address(RVA = "0xE68F74", Offset = "0xE68F74", VA = "0xE68F74")]
	public void OnUpdateAimData(AimData aimData)
	{
	}

	[Token(Token = "0x6000190")]
	[Address(RVA = "0xE690C8", Offset = "0xE690C8", VA = "0xE690C8")]
	[IteratorStateMachine(typeof(<AimStateCoroutine>d__64))]
	protected IEnumerator AimStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0xE6929C", Offset = "0xE6929C", VA = "0xE6929C")]
	[IteratorStateMachine(typeof(<CancelAimStateCoroutine>d__68))]
	protected IEnumerator CancelAimStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000196")]
	[Address(RVA = "0xE69470", Offset = "0xE69470", VA = "0xE69470")]
	[IteratorStateMachine(typeof(<PreTeleportStateCoroutine>d__72))]
	protected IEnumerator PreTeleportStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000199")]
	[Address(RVA = "0xE69644", Offset = "0xE69644", VA = "0xE69644")]
	[IteratorStateMachine(typeof(<CancelTeleportStateCoroutine>d__76))]
	protected IEnumerator CancelTeleportStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600019C")]
	[Address(RVA = "0xE69818", Offset = "0xE69818", VA = "0xE69818")]
	[IteratorStateMachine(typeof(<TeleportingStateCoroutine>d__80))]
	protected IEnumerator TeleportingStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600019F")]
	[Address(RVA = "0xE699EC", Offset = "0xE699EC", VA = "0xE699EC")]
	[IteratorStateMachine(typeof(<PostTeleportStateCoroutine>d__84))]
	protected IEnumerator PostTeleportStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60001A2")]
	[Address(RVA = "0xE69BE8", Offset = "0xE69BE8", VA = "0xE69BE8")]
	public void DoTeleport()
	{
	}

	[Token(Token = "0x60001A3")]
	[Address(RVA = "0xE69CFC", Offset = "0xE69CFC", VA = "0xE69CFC")]
	public Vector3 GetCharacterPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60001A4")]
	[Address(RVA = "0xE69D2C", Offset = "0xE69D2C", VA = "0xE69D2C")]
	public Quaternion GetHeadRotationY()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60001A5")]
	[Address(RVA = "0xE69E68", Offset = "0xE69E68", VA = "0xE69E68")]
	public void DoWarp(Vector3 startPos, float positionPercent)
	{
	}

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0xE69F50", Offset = "0xE69F50", VA = "0xE69F50")]
	public LocomotionTeleport()
	{
	}
}
[Token(Token = "0x2000066")]
public class SimpleCapsuleWithStickMovement : MonoBehaviour
{
	[Token(Token = "0x40001FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool EnableLinearMovement;

	[Token(Token = "0x40001FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool EnableRotation;

	[Token(Token = "0x4000200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool HMDRotatesPlayer;

	[Token(Token = "0x4000201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool RotationEitherThumbstick;

	[Token(Token = "0x4000202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float RotationAngle;

	[Token(Token = "0x4000203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Speed;

	[Token(Token = "0x4000204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRCameraRig CameraRig;

	[Token(Token = "0x4000205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool ReadyToSnapTurn;

	[Token(Token = "0x4000206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Rigidbody _rigidbody;

	[Token(Token = "0x1400000C")]
	public event Action CameraUpdated
	{
		[Token(Token = "0x60001D5")]
		[Address(RVA = "0xE67364", Offset = "0xE67364", VA = "0xE67364")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001D6")]
		[Address(RVA = "0xE67488", Offset = "0xE67488", VA = "0xE67488")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000D")]
	public event Action PreCharacterMove
	{
		[Token(Token = "0x60001D7")]
		[Address(RVA = "0xE6A918", Offset = "0xE6A918", VA = "0xE6A918")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001D8")]
		[Address(RVA = "0xE6A9B4", Offset = "0xE6A9B4", VA = "0xE6A9B4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0xE6AA50", Offset = "0xE6AA50", VA = "0xE6AA50")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001DA")]
	[Address(RVA = "0xE6AB30", Offset = "0xE6AB30", VA = "0xE6AB30")]
	private void Start()
	{
	}

	[Token(Token = "0x60001DB")]
	[Address(RVA = "0xE6AB34", Offset = "0xE6AB34", VA = "0xE6AB34")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60001DC")]
	[Address(RVA = "0xE6ABA8", Offset = "0xE6ABA8", VA = "0xE6ABA8")]
	private void RotatePlayerToHMD()
	{
	}

	[Token(Token = "0x60001DD")]
	[Address(RVA = "0xE6ACCC", Offset = "0xE6ACCC", VA = "0xE6ACCC")]
	private void StickMovement()
	{
	}

	[Token(Token = "0x60001DE")]
	[Address(RVA = "0xE6AF44", Offset = "0xE6AF44", VA = "0xE6AF44")]
	private void SnapTurn()
	{
	}

	[Token(Token = "0x60001DF")]
	[Address(RVA = "0xE6B164", Offset = "0xE6B164", VA = "0xE6B164")]
	public SimpleCapsuleWithStickMovement()
	{
	}
}
[Token(Token = "0x2000067")]
public abstract class TeleportAimHandler : TeleportSupport
{
	[Token(Token = "0x60001E0")]
	[Address(RVA = "0xE6B184", Offset = "0xE6B184", VA = "0xE6B184", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x60001E1")]
	[Address(RVA = "0xE6B214", Offset = "0xE6B214", VA = "0xE6B214", Slot = "5")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x60001E2")]
	public abstract void GetPoints(List<Vector3> points);

	[Token(Token = "0x60001E3")]
	[Address(RVA = "0xE6B2E4", Offset = "0xE6B2E4", VA = "0xE6B2E4")]
	protected TeleportAimHandler()
	{
	}
}
[Token(Token = "0x2000068")]
public class TeleportAimHandlerLaser : TeleportAimHandler
{
	[Token(Token = "0x4000209")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("Maximum range for aiming.")]
	public float Range;

	[Token(Token = "0x60001E4")]
	[Address(RVA = "0xE6B2F4", Offset = "0xE6B2F4", VA = "0xE6B2F4", Slot = "8")]
	public override void GetPoints(List<Vector3> points)
	{
	}

	[Token(Token = "0x60001E5")]
	[Address(RVA = "0xE6B484", Offset = "0xE6B484", VA = "0xE6B484")]
	public TeleportAimHandlerLaser()
	{
	}
}
[Token(Token = "0x2000069")]
public class TeleportAimHandlerParabolic : TeleportAimHandler
{
	[Token(Token = "0x400020A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("Maximum range for aiming.")]
	public float Range;

	[Token(Token = "0x400020B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The MinimumElevation is relative to the AimPosition.")]
	public float MinimumElevation;

	[Token(Token = "0x400020C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("The Gravity is used in conjunction with AimVelocity and the aim direction to simulate a projectile.")]
	public float Gravity;

	[Token(Token = "0x400020D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("The AimVelocity is the initial speed of the faked projectile.")]
	[Range(0.001f, 50f)]
	public float AimVelocity;

	[Token(Token = "0x400020E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Range(0.001f, 1f)]
	[Tooltip("The AimStep is the how much to subdivide the iteration.")]
	public float AimStep;

	[Token(Token = "0x60001E6")]
	[Address(RVA = "0xE6B494", Offset = "0xE6B494", VA = "0xE6B494", Slot = "8")]
	public override void GetPoints(List<Vector3> points)
	{
	}

	[Token(Token = "0x60001E7")]
	[Address(RVA = "0xE6B668", Offset = "0xE6B668", VA = "0xE6B668")]
	public TeleportAimHandlerParabolic()
	{
	}
}
[Token(Token = "0x200006A")]
public class TeleportAimVisualLaser : TeleportSupport
{
	[Token(Token = "0x400020F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("This prefab will be instantiated when the aim visual is awakened, and will be set active when the user is aiming, and deactivated when they are done aiming.")]
	public LineRenderer LaserPrefab;

	[Token(Token = "0x4000210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _enterAimStateAction;

	[Token(Token = "0x4000211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly Action _exitAimStateAction;

	[Token(Token = "0x4000212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private readonly Action<LocomotionTeleport.AimData> _updateAimDataAction;

	[Token(Token = "0x4000213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private LineRenderer _lineRenderer;

	[Token(Token = "0x4000214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3[] _linePoints;

	[Token(Token = "0x60001E8")]
	[Address(RVA = "0xE6B67C", Offset = "0xE6B67C", VA = "0xE6B67C")]
	public TeleportAimVisualLaser()
	{
	}

	[Token(Token = "0x60001E9")]
	[Address(RVA = "0xE6B7A8", Offset = "0xE6B7A8", VA = "0xE6B7A8")]
	private void EnterAimState()
	{
	}

	[Token(Token = "0x60001EA")]
	[Address(RVA = "0xE6B7D4", Offset = "0xE6B7D4", VA = "0xE6B7D4")]
	private void ExitAimState()
	{
	}

	[Token(Token = "0x60001EB")]
	[Address(RVA = "0xE6B800", Offset = "0xE6B800", VA = "0xE6B800")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001EC")]
	[Address(RVA = "0xE6B8A4", Offset = "0xE6B8A4", VA = "0xE6B8A4", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x60001ED")]
	[Address(RVA = "0xE6B8F8", Offset = "0xE6B8F8", VA = "0xE6B8F8", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x60001EE")]
	[Address(RVA = "0xE6B948", Offset = "0xE6B948", VA = "0xE6B948")]
	private void UpdateAimData(LocomotionTeleport.AimData obj)
	{
	}
}
[Token(Token = "0x200006B")]
public class TeleportDestination : MonoBehaviour
{
	[Token(Token = "0x4000216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("If the target handler provides a target position, this transform will be moved to that position and it's game object enabled. A target position being provided does not mean the position is valid, only that the aim handler found something to test as a destination.")]
	public Transform PositionIndicator;

	[Token(Token = "0x4000217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("This transform will be rotated to match the rotation of the aiming target. Simple teleport destinations should assign this to the object containing this component. More complex teleport destinations might assign this to a sub-object that is used to indicate the landing orientation independently from the rest of the destination indicator, such as when world space effects are required. This will typically be a child of the PositionIndicator.")]
	public Transform OrientationIndicator;

	[Token(Token = "0x4000218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("After the player teleports, the character controller will have it's rotation set to this value. It is different from the OrientationIndicator transform.rotation in order to support both head-relative and forward-facing teleport modes (See TeleportOrientationHandlerThumbstick.cs).")]
	public Quaternion LandingRotation;

	[NonSerialized]
	[Token(Token = "0x4000219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public LocomotionTeleport LocomotionTeleport;

	[NonSerialized]
	[Token(Token = "0x400021A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public LocomotionTeleport.States TeleportState;

	[Token(Token = "0x400021B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private readonly Action<bool, Vector3?, Quaternion?, Quaternion?> _updateTeleportDestinationAction;

	[Token(Token = "0x400021C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool _eventsActive;

	[Token(Token = "0x17000035")]
	public bool IsValidDestination
	{
		[Token(Token = "0x60001EF")]
		[Address(RVA = "0xE6BA44", Offset = "0xE6BA44", VA = "0xE6BA44")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001F0")]
		[Address(RVA = "0xE6BA4C", Offset = "0xE6BA4C", VA = "0xE6BA4C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1400000E")]
	public event Action<TeleportDestination> Deactivated
	{
		[Token(Token = "0x60001F5")]
		[Address(RVA = "0xE6BBD4", Offset = "0xE6BBD4", VA = "0xE6BBD4")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001F6")]
		[Address(RVA = "0xE6BC84", Offset = "0xE6BC84", VA = "0xE6BC84")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60001F1")]
	[Address(RVA = "0xE6BA58", Offset = "0xE6BA58", VA = "0xE6BA58")]
	private TeleportDestination()
	{
	}

	[Token(Token = "0x60001F2")]
	[Address(RVA = "0xE6BADC", Offset = "0xE6BADC", VA = "0xE6BADC")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x60001F3")]
	[Address(RVA = "0xE6BBA0", Offset = "0xE6BBA0", VA = "0xE6BBA0")]
	private void TryDisableEventHandlers()
	{
	}

	[Token(Token = "0x60001F4")]
	[Address(RVA = "0xE6BBD0", Offset = "0xE6BBD0", VA = "0xE6BBD0")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x60001F7")]
	[Address(RVA = "0xE68978", Offset = "0xE68978", VA = "0xE68978")]
	public void OnDeactivated()
	{
	}

	[Token(Token = "0x60001F8")]
	[Address(RVA = "0xE6BD34", Offset = "0xE6BD34", VA = "0xE6BD34")]
	public void Recycle()
	{
	}

	[Token(Token = "0x60001F9")]
	[Address(RVA = "0xE6BD50", Offset = "0xE6BD50", VA = "0xE6BD50", Slot = "4")]
	public virtual void UpdateTeleportDestination(bool isValidDestination, Vector3? position, Quaternion? rotation, Quaternion? landingRotation)
	{
	}
}
[Token(Token = "0x200006C")]
public abstract class TeleportInputHandler : TeleportSupport
{
	[Token(Token = "0x200006D")]
	[CompilerGenerated]
	private sealed class <TeleportReadyCoroutine>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportInputHandler <>4__this;

		[Token(Token = "0x17000036")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000206")]
			[Address(RVA = "0xE6C318", Offset = "0xE6C318", VA = "0xE6C318", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000037")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000208")]
			[Address(RVA = "0xE6C360", Offset = "0xE6C360", VA = "0xE6C360", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000203")]
		[Address(RVA = "0xE6C184", Offset = "0xE6C184", VA = "0xE6C184")]
		[DebuggerHidden]
		public <TeleportReadyCoroutine>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x6000204")]
		[Address(RVA = "0xE6C288", Offset = "0xE6C288", VA = "0xE6C288", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000205")]
		[Address(RVA = "0xE6C28C", Offset = "0xE6C28C", VA = "0xE6C28C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000207")]
		[Address(RVA = "0xE6C320", Offset = "0xE6C320", VA = "0xE6C320", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200006E")]
	[CompilerGenerated]
	private sealed class <TeleportAimCoroutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportInputHandler <>4__this;

		[Token(Token = "0x17000038")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600020C")]
			[Address(RVA = "0xE6C404", Offset = "0xE6C404", VA = "0xE6C404", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000039")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600020E")]
			[Address(RVA = "0xE6C44C", Offset = "0xE6C44C", VA = "0xE6C44C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000209")]
		[Address(RVA = "0xE6C220", Offset = "0xE6C220", VA = "0xE6C220")]
		[DebuggerHidden]
		public <TeleportAimCoroutine>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x600020A")]
		[Address(RVA = "0xE6C368", Offset = "0xE6C368", VA = "0xE6C368", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600020B")]
		[Address(RVA = "0xE6C36C", Offset = "0xE6C36C", VA = "0xE6C36C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600020D")]
		[Address(RVA = "0xE6C40C", Offset = "0xE6C40C", VA = "0xE6C40C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400021E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly Action _startReadyAction;

	[Token(Token = "0x400021F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _startAimAction;

	[Token(Token = "0x60001FA")]
	[Address(RVA = "0xE6BF44", Offset = "0xE6BF44", VA = "0xE6BF44")]
	protected TeleportInputHandler()
	{
	}

	[Token(Token = "0x60001FB")]
	[Address(RVA = "0xE6C018", Offset = "0xE6C018", VA = "0xE6C018", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x60001FC")]
	[Address(RVA = "0xE6C064", Offset = "0xE6C064", VA = "0xE6C064", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x60001FD")]
	[Address(RVA = "0xE6C110", Offset = "0xE6C110", VA = "0xE6C110")]
	[IteratorStateMachine(typeof(<TeleportReadyCoroutine>d__5))]
	private IEnumerator TeleportReadyCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60001FE")]
	[Address(RVA = "0xE6C1AC", Offset = "0xE6C1AC", VA = "0xE6C1AC")]
	[IteratorStateMachine(typeof(<TeleportAimCoroutine>d__6))]
	private IEnumerator TeleportAimCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60001FF")]
	public abstract LocomotionTeleport.TeleportIntentions GetIntention();

	[Token(Token = "0x6000200")]
	public abstract void GetAimData(out Ray aimRay);
}
[Token(Token = "0x200006F")]
public class TeleportInputHandlerHMD : TeleportInputHandler
{
	[Token(Token = "0x4000227")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The button used to begin aiming for a teleport.")]
	public OVRInput.RawButton AimButton;

	[Token(Token = "0x4000228")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("The button used to trigger the teleport after aiming. It can be the same button as the AimButton, however you cannot abort a teleport if it is.")]
	public OVRInput.RawButton TeleportButton;

	[Token(Token = "0x4000229")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("When true, the system will not use the PreTeleport intention which will allow a teleport to occur on a button downpress. When false, the button downpress will trigger the PreTeleport intention and the Teleport intention when the button is released.")]
	public bool FastTeleport;

	[Token(Token = "0x1700003A")]
	public Transform Pointer
	{
		[Token(Token = "0x600020F")]
		[Address(RVA = "0xE6C454", Offset = "0xE6C454", VA = "0xE6C454")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000210")]
		[Address(RVA = "0xE6C45C", Offset = "0xE6C45C", VA = "0xE6C45C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000211")]
	[Address(RVA = "0xE6C464", Offset = "0xE6C464", VA = "0xE6C464", Slot = "8")]
	public override LocomotionTeleport.TeleportIntentions GetIntention()
	{
		return default(LocomotionTeleport.TeleportIntentions);
	}

	[Token(Token = "0x6000212")]
	[Address(RVA = "0xE6C590", Offset = "0xE6C590", VA = "0xE6C590", Slot = "9")]
	public override void GetAimData(out Ray aimRay)
	{
	}

	[Token(Token = "0x6000213")]
	[Address(RVA = "0xE6C644", Offset = "0xE6C644", VA = "0xE6C644")]
	public TeleportInputHandlerHMD()
	{
	}
}
[Token(Token = "0x2000070")]
public class TeleportInputHandlerTouch : TeleportInputHandlerHMD
{
	[Token(Token = "0x2000071")]
	public enum InputModes
	{
		[Token(Token = "0x4000234")]
		CapacitiveButtonForAimAndTeleport,
		[Token(Token = "0x4000235")]
		SeparateButtonsForAimAndTeleport,
		[Token(Token = "0x4000236")]
		ThumbstickTeleport,
		[Token(Token = "0x4000237")]
		ThumbstickTeleportForwardBackOnly
	}

	[Token(Token = "0x2000072")]
	public enum AimCapTouchButtons
	{
		[Token(Token = "0x4000239")]
		A,
		[Token(Token = "0x400023A")]
		B,
		[Token(Token = "0x400023B")]
		LeftTrigger,
		[Token(Token = "0x400023C")]
		LeftThumbstick,
		[Token(Token = "0x400023D")]
		RightTrigger,
		[Token(Token = "0x400023E")]
		RightThumbstick,
		[Token(Token = "0x400023F")]
		X,
		[Token(Token = "0x4000240")]
		Y
	}

	[Token(Token = "0x400022A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform LeftHand;

	[Token(Token = "0x400022B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform RightHand;

	[Token(Token = "0x400022C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Tooltip("CapacitiveButtonForAimAndTeleport=Activate aiming via cap touch detection, press the same button to teleport.\nSeparateButtonsForAimAndTeleport=Use one button to begin aiming, and another to trigger the teleport.\nThumbstickTeleport=Push a thumbstick to begin aiming, release to teleport.")]
	public InputModes InputMode;

	[Token(Token = "0x400022D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private readonly OVRInput.RawButton[] _rawButtons;

	[Token(Token = "0x400022E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private readonly OVRInput.RawTouch[] _rawTouch;

	[Token(Token = "0x400022F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Tooltip("Select the controller to be used for aiming. Supports LTouch, RTouch, or Touch for either.")]
	public OVRInput.Controller AimingController;

	[Token(Token = "0x4000230")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private OVRInput.Controller InitiatingController;

	[Token(Token = "0x4000231")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Tooltip("Select the button to use for triggering aim and teleport when InputMode==CapacitiveButtonForAimAndTeleport")]
	public AimCapTouchButtons CapacitiveAimAndTeleportButton;

	[Token(Token = "0x4000232")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[Tooltip("The thumbstick magnitude required to trigger aiming and teleports when InputMode==InputModes.ThumbstickTeleport")]
	public float ThumbstickTeleportThreshold;

	[Token(Token = "0x6000214")]
	[Address(RVA = "0xE6C648", Offset = "0xE6C648", VA = "0xE6C648")]
	private void Start()
	{
	}

	[Token(Token = "0x6000215")]
	[Address(RVA = "0xE6C64C", Offset = "0xE6C64C", VA = "0xE6C64C", Slot = "8")]
	public override LocomotionTeleport.TeleportIntentions GetIntention()
	{
		return default(LocomotionTeleport.TeleportIntentions);
	}

	[Token(Token = "0x6000216")]
	[Address(RVA = "0xE6CA80", Offset = "0xE6CA80", VA = "0xE6CA80", Slot = "9")]
	public override void GetAimData(out Ray aimRay)
	{
	}

	[Token(Token = "0x6000217")]
	[Address(RVA = "0xE6CB3C", Offset = "0xE6CB3C", VA = "0xE6CB3C")]
	public TeleportInputHandlerTouch()
	{
	}
}
[Token(Token = "0x2000073")]
public abstract class TeleportOrientationHandler : TeleportSupport
{
	[Token(Token = "0x2000074")]
	public enum OrientationModes
	{
		[Token(Token = "0x4000245")]
		HeadRelative,
		[Token(Token = "0x4000246")]
		ForwardFacing
	}

	[Token(Token = "0x2000075")]
	[CompilerGenerated]
	private sealed class <UpdateOrientationCoroutine>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportOrientationHandler <>4__this;

		[Token(Token = "0x1700003B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000224")]
			[Address(RVA = "0xE6CFEC", Offset = "0xE6CFEC", VA = "0xE6CFEC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000226")]
			[Address(RVA = "0xE6D034", Offset = "0xE6D034", VA = "0xE6D034", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000221")]
		[Address(RVA = "0xE6CDFC", Offset = "0xE6CDFC", VA = "0xE6CDFC")]
		[DebuggerHidden]
		public <UpdateOrientationCoroutine>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6000222")]
		[Address(RVA = "0xE6CF3C", Offset = "0xE6CF3C", VA = "0xE6CF3C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000223")]
		[Address(RVA = "0xE6CF40", Offset = "0xE6CF40", VA = "0xE6CF40", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000225")]
		[Address(RVA = "0xE6CFF4", Offset = "0xE6CFF4", VA = "0xE6CFF4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly Action _updateOrientationAction;

	[Token(Token = "0x4000242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action<LocomotionTeleport.AimData> _updateAimDataAction;

	[Token(Token = "0x4000243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected LocomotionTeleport.AimData AimData;

	[Token(Token = "0x6000218")]
	[Address(RVA = "0xE6CC2C", Offset = "0xE6CC2C", VA = "0xE6CC2C")]
	protected TeleportOrientationHandler()
	{
	}

	[Token(Token = "0x6000219")]
	[Address(RVA = "0xE6CD14", Offset = "0xE6CD14", VA = "0xE6CD14")]
	private void UpdateAimData(LocomotionTeleport.AimData aimData)
	{
	}

	[Token(Token = "0x600021A")]
	[Address(RVA = "0xE6CD1C", Offset = "0xE6CD1C", VA = "0xE6CD1C", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x600021B")]
	[Address(RVA = "0xE6CD54", Offset = "0xE6CD54", VA = "0xE6CD54", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x600021C")]
	[Address(RVA = "0xE6CD88", Offset = "0xE6CD88", VA = "0xE6CD88")]
	[IteratorStateMachine(typeof(<UpdateOrientationCoroutine>d__7))]
	private IEnumerator UpdateOrientationCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600021D")]
	protected abstract void InitializeTeleportDestination();

	[Token(Token = "0x600021E")]
	protected abstract void UpdateTeleportDestination();

	[Token(Token = "0x600021F")]
	[Address(RVA = "0xE6CE24", Offset = "0xE6CE24", VA = "0xE6CE24")]
	protected Quaternion GetLandingOrientation(OrientationModes mode, Quaternion rotation)
	{
		return default(Quaternion);
	}
}
[Token(Token = "0x2000076")]
public class TeleportOrientationHandler360 : TeleportOrientationHandler
{
	[Token(Token = "0x6000227")]
	[Address(RVA = "0xE6D03C", Offset = "0xE6D03C", VA = "0xE6D03C", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Token(Token = "0x6000228")]
	[Address(RVA = "0xE6D040", Offset = "0xE6D040", VA = "0xE6D040", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Token(Token = "0x6000229")]
	[Address(RVA = "0xE6D0E8", Offset = "0xE6D0E8", VA = "0xE6D0E8")]
	public TeleportOrientationHandler360()
	{
	}
}
[Token(Token = "0x2000077")]
public class TeleportOrientationHandlerHMD : TeleportOrientationHandler
{
	[Token(Token = "0x400024A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("HeadRelative=Character will orient to match the arrow. ForwardFacing=When user orients to match the arrow, they will be facing the sensors.")]
	public OrientationModes OrientationMode;

	[Token(Token = "0x400024B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("Should the destination orientation be updated during the aim state in addition to the PreTeleport state?")]
	public bool UpdateOrientationDuringAim;

	[Token(Token = "0x400024C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("How far from the destination must the HMD be pointing before using it for orientation")]
	public float AimDistanceThreshold;

	[Token(Token = "0x400024D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[Tooltip("How far from the destination must the HMD be pointing before rejecting the teleport")]
	public float AimDistanceMaxRange;

	[Token(Token = "0x400024E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Quaternion _initialRotation;

	[Token(Token = "0x600022A")]
	[Address(RVA = "0xE6D0EC", Offset = "0xE6D0EC", VA = "0xE6D0EC", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Token(Token = "0x600022B")]
	[Address(RVA = "0xE6D13C", Offset = "0xE6D13C", VA = "0xE6D13C", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Token(Token = "0x600022C")]
	[Address(RVA = "0xE6D600", Offset = "0xE6D600", VA = "0xE6D600")]
	public TeleportOrientationHandlerHMD()
	{
	}
}
[Token(Token = "0x2000078")]
public class TeleportOrientationHandlerThumbstick : TeleportOrientationHandler
{
	[Token(Token = "0x400024F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("HeadRelative=Character will orient to match the arrow. ForwardFacing=When user orients to match the arrow, they will be facing the sensors.")]
	public OrientationModes OrientationMode;

	[Token(Token = "0x4000250")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("Which thumbstick is to be used for adjusting the teleport orientation. Supports LTouch, RTouch, or Touch for either.")]
	public OVRInput.Controller Thumbstick;

	[Token(Token = "0x4000251")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("The orientation will only change if the thumbstick magnitude is above this value. This will usually be larger than the TeleportInputHandlerTouch.ThumbstickTeleportThreshold.")]
	public float RotateStickThreshold;

	[Token(Token = "0x4000252")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Quaternion _initialRotation;

	[Token(Token = "0x4000253")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Quaternion _currentRotation;

	[Token(Token = "0x4000254")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector2 _lastValidDirection;

	[Token(Token = "0x600022D")]
	[Address(RVA = "0xE6D604", Offset = "0xE6D604", VA = "0xE6D604", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Token(Token = "0x600022E")]
	[Address(RVA = "0xE6D638", Offset = "0xE6D638", VA = "0xE6D638", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Token(Token = "0x600022F")]
	[Address(RVA = "0xE6DB34", Offset = "0xE6DB34", VA = "0xE6DB34")]
	public TeleportOrientationHandlerThumbstick()
	{
	}
}
[Token(Token = "0x2000079")]
public class TeleportPoint : MonoBehaviour
{
	[Token(Token = "0x4000255")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float dimmingSpeed;

	[Token(Token = "0x4000256")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float fullIntensity;

	[Token(Token = "0x4000257")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float lowIntensity;

	[Token(Token = "0x4000258")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform destTransform;

	[Token(Token = "0x4000259")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float lastLookAtTime;

	[Token(Token = "0x6000230")]
	[Address(RVA = "0xE6DB44", Offset = "0xE6DB44", VA = "0xE6DB44")]
	private void Start()
	{
	}

	[Token(Token = "0x6000231")]
	[Address(RVA = "0xE6DB48", Offset = "0xE6DB48", VA = "0xE6DB48")]
	public Transform GetDestTransform()
	{
		return null;
	}

	[Token(Token = "0x6000232")]
	[Address(RVA = "0xE6DB50", Offset = "0xE6DB50", VA = "0xE6DB50")]
	private void Update()
	{
	}

	[Token(Token = "0x6000233")]
	[Address(RVA = "0xE6DC3C", Offset = "0xE6DC3C", VA = "0xE6DC3C")]
	public void OnLookAt()
	{
	}

	[Token(Token = "0x6000234")]
	[Address(RVA = "0xE6DC58", Offset = "0xE6DC58", VA = "0xE6DC58")]
	public TeleportPoint()
	{
	}
}
[Token(Token = "0x200007A")]
public abstract class TeleportSupport : MonoBehaviour
{
	[Token(Token = "0x400025B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool _eventsActive;

	[Token(Token = "0x1700003D")]
	protected LocomotionTeleport LocomotionTeleport
	{
		[Token(Token = "0x6000235")]
		[Address(RVA = "0xE6DC70", Offset = "0xE6DC70", VA = "0xE6DC70")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000236")]
		[Address(RVA = "0xE6DC78", Offset = "0xE6DC78", VA = "0xE6DC78")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000237")]
	[Address(RVA = "0xE6B1AC", Offset = "0xE6B1AC", VA = "0xE6B1AC", Slot = "4")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000238")]
	[Address(RVA = "0xE6B2BC", Offset = "0xE6B2BC", VA = "0xE6B2BC", Slot = "5")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000239")]
	[Address(RVA = "0xE6DC80", Offset = "0xE6DC80", VA = "0xE6DC80")]
	[Conditional("DEBUG_TELEPORT_EVENT_HANDLERS")]
	private void LogEventHandler(string msg)
	{
	}

	[Token(Token = "0x600023A")]
	[Address(RVA = "0xE6B8EC", Offset = "0xE6B8EC", VA = "0xE6B8EC", Slot = "6")]
	protected virtual void AddEventHandlers()
	{
	}

	[Token(Token = "0x600023B")]
	[Address(RVA = "0xE6B940", Offset = "0xE6B940", VA = "0xE6B940", Slot = "7")]
	protected virtual void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x600023C")]
	[Address(RVA = "0xE6B2EC", Offset = "0xE6B2EC", VA = "0xE6B2EC")]
	protected TeleportSupport()
	{
	}
}
[Token(Token = "0x200007B")]
public abstract class TeleportTargetHandler : TeleportSupport
{
	[Token(Token = "0x200007C")]
	[CompilerGenerated]
	private sealed class <TargetAimCoroutine>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTargetHandler <>4__this;

		[Token(Token = "0x1700003E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000248")]
			[Address(RVA = "0xE6E370", Offset = "0xE6E370", VA = "0xE6E370", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600024A")]
			[Address(RVA = "0xE6E3B8", Offset = "0xE6E3B8", VA = "0xE6E3B8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000245")]
		[Address(RVA = "0xE6DF28", Offset = "0xE6DF28", VA = "0xE6DF28")]
		[DebuggerHidden]
		public <TargetAimCoroutine>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6000246")]
		[Address(RVA = "0xE6E0A4", Offset = "0xE6E0A4", VA = "0xE6E0A4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000247")]
		[Address(RVA = "0xE6E0A8", Offset = "0xE6E0A8", VA = "0xE6E0A8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000249")]
		[Address(RVA = "0xE6E378", Offset = "0xE6E378", VA = "0xE6E378", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400025C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("This bitmask controls which game object layers will be included in the targeting collision tests.")]
	public LayerMask AimCollisionLayerMask;

	[Token(Token = "0x400025D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected readonly LocomotionTeleport.AimData AimData;

	[Token(Token = "0x400025E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _startAimAction;

	[Token(Token = "0x400025F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly List<Vector3> _aimPoints;

	[Token(Token = "0x4000260")]
	private const float ERROR_MARGIN = 0.1f;

	[Token(Token = "0x600023D")]
	[Address(RVA = "0xE6DD50", Offset = "0xE6DD50", VA = "0xE6DD50")]
	protected TeleportTargetHandler()
	{
	}

	[Token(Token = "0x600023E")]
	[Address(RVA = "0xE6DE68", Offset = "0xE6DE68", VA = "0xE6DE68", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x600023F")]
	[Address(RVA = "0xE6DE90", Offset = "0xE6DE90", VA = "0xE6DE90", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x6000240")]
	[Address(RVA = "0xE6DEB4", Offset = "0xE6DEB4", VA = "0xE6DEB4")]
	[IteratorStateMachine(typeof(<TargetAimCoroutine>d__7))]
	private IEnumerator TargetAimCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000241")]
	[Address(RVA = "0xE6DF50", Offset = "0xE6DF50", VA = "0xE6DF50", Slot = "8")]
	protected virtual void ResetAimData()
	{
	}

	[Token(Token = "0x6000242")]
	protected abstract bool ConsiderTeleport(Vector3 start, ref Vector3 end);

	[Token(Token = "0x6000243")]
	[Address(RVA = "0xE6DF68", Offset = "0xE6DF68", VA = "0xE6DF68", Slot = "10")]
	public virtual Vector3? ConsiderDestination(Vector3 location)
	{
		return null;
	}
}
[Token(Token = "0x200007D")]
public class TeleportTargetHandlerNavMesh : TeleportTargetHandler
{
	[Token(Token = "0x4000264")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int NavMeshAreaMask;

	[Token(Token = "0x4000265")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private NavMeshPath _path;

	[Token(Token = "0x600024B")]
	[Address(RVA = "0xE6E3C0", Offset = "0xE6E3C0", VA = "0xE6E3C0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600024C")]
	[Address(RVA = "0xE6E428", Offset = "0xE6E428", VA = "0xE6E428", Slot = "9")]
	protected override bool ConsiderTeleport(Vector3 start, ref Vector3 end)
	{
		return default(bool);
	}

	[Token(Token = "0x600024D")]
	[Address(RVA = "0xE6E590", Offset = "0xE6E590", VA = "0xE6E590", Slot = "10")]
	public override Vector3? ConsiderDestination(Vector3 location)
	{
		return null;
	}

	[Token(Token = "0x600024E")]
	[Address(RVA = "0xE6E67C", Offset = "0xE6E67C", VA = "0xE6E67C")]
	[Conditional("SHOW_PATH_RESULT")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600024F")]
	[Address(RVA = "0xE6E680", Offset = "0xE6E680", VA = "0xE6E680")]
	public TeleportTargetHandlerNavMesh()
	{
	}
}
[Token(Token = "0x200007E")]
public class TeleportTargetHandlerNode : TeleportTargetHandler
{
	[Token(Token = "0x4000266")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("When checking line of sight to the destination, add this value to the vertical offset for targeting collision checks.")]
	public float LOSOffset;

	[Token(Token = "0x4000267")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("Teleport logic will only work with TeleportPoint components that exist in the layers specified by this mask.")]
	public LayerMask TeleportLayerMask;

	[Token(Token = "0x6000250")]
	[Address(RVA = "0xE6E68C", Offset = "0xE6E68C", VA = "0xE6E68C", Slot = "9")]
	protected override bool ConsiderTeleport(Vector3 start, ref Vector3 end)
	{
		return default(bool);
	}

	[Token(Token = "0x6000251")]
	[Address(RVA = "0xE6E884", Offset = "0xE6E884", VA = "0xE6E884")]
	public TeleportTargetHandlerNode()
	{
	}
}
[Token(Token = "0x200007F")]
public class TeleportTargetHandlerPhysical : TeleportTargetHandler
{
	[Token(Token = "0x6000252")]
	[Address(RVA = "0xE6E890", Offset = "0xE6E890", VA = "0xE6E890", Slot = "9")]
	protected override bool ConsiderTeleport(Vector3 start, ref Vector3 end)
	{
		return default(bool);
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0xE6E9F8", Offset = "0xE6E9F8", VA = "0xE6E9F8")]
	public TeleportTargetHandlerPhysical()
	{
	}
}
[Token(Token = "0x2000080")]
public abstract class TeleportTransition : TeleportSupport
{
	[Token(Token = "0x6000254")]
	[Address(RVA = "0xE6E9FC", Offset = "0xE6E9FC", VA = "0xE6E9FC", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x6000255")]
	[Address(RVA = "0xE6EA80", Offset = "0xE6EA80", VA = "0xE6EA80", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x6000256")]
	protected abstract void LocomotionTeleportOnEnterStateTeleporting();

	[Token(Token = "0x6000257")]
	[Address(RVA = "0xE6EB00", Offset = "0xE6EB00", VA = "0xE6EB00")]
	protected TeleportTransition()
	{
	}
}
[Token(Token = "0x2000081")]
public class TeleportTransitionBlink : TeleportTransition
{
	[Token(Token = "0x2000082")]
	[CompilerGenerated]
	private sealed class <BlinkCoroutine>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400026B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400026C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400026D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTransitionBlink <>4__this;

		[Token(Token = "0x400026E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <elapsedTime>5__2;

		[Token(Token = "0x400026F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <teleportTime>5__3;

		[Token(Token = "0x4000270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool <teleported>5__4;

		[Token(Token = "0x17000040")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600025E")]
			[Address(RVA = "0xE6EE64", Offset = "0xE6EE64", VA = "0xE6EE64", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000041")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000260")]
			[Address(RVA = "0xE6EEAC", Offset = "0xE6EEAC", VA = "0xE6EEAC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600025B")]
		[Address(RVA = "0xE6EB9C", Offset = "0xE6EB9C", VA = "0xE6EB9C")]
		[DebuggerHidden]
		public <BlinkCoroutine>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x600025C")]
		[Address(RVA = "0xE6ED60", Offset = "0xE6ED60", VA = "0xE6ED60", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600025D")]
		[Address(RVA = "0xE6ED64", Offset = "0xE6ED64", VA = "0xE6ED64", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600025F")]
		[Address(RVA = "0xE6EE6C", Offset = "0xE6EE6C", VA = "0xE6EE6C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000268")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Range(0.01f, 2f)]
	[Tooltip("How long the transition takes. Usually this is greater than Teleport Delay.")]
	public float TransitionDuration;

	[Token(Token = "0x4000269")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("At what percentage of the elapsed transition time does the teleport occur?")]
	[Range(0f, 1f)]
	public float TeleportDelay;

	[Token(Token = "0x400026A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Fade to black over the duration of the transition")]
	public AnimationCurve FadeLevels;

	[Token(Token = "0x6000258")]
	[Address(RVA = "0xE6EB08", Offset = "0xE6EB08", VA = "0xE6EB08", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Token(Token = "0x6000259")]
	[Address(RVA = "0xE6EB28", Offset = "0xE6EB28", VA = "0xE6EB28")]
	[IteratorStateMachine(typeof(<BlinkCoroutine>d__4))]
	protected IEnumerator BlinkCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600025A")]
	[Address(RVA = "0xE6EBC4", Offset = "0xE6EBC4", VA = "0xE6EBC4")]
	public TeleportTransitionBlink()
	{
	}
}
[Token(Token = "0x2000083")]
public class TeleportTransitionInstant : TeleportTransition
{
	[Token(Token = "0x6000261")]
	[Address(RVA = "0xE6EEB4", Offset = "0xE6EEB4", VA = "0xE6EEB4", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Token(Token = "0x6000262")]
	[Address(RVA = "0xE6EECC", Offset = "0xE6EECC", VA = "0xE6EECC")]
	public TeleportTransitionInstant()
	{
	}
}
[Token(Token = "0x2000084")]
public class TeleportTransitionWarp : TeleportTransition
{
	[Token(Token = "0x2000085")]
	[CompilerGenerated]
	private sealed class <DoWarp>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTransitionWarp <>4__this;

		[Token(Token = "0x4000276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 <startPosition>5__2;

		[Token(Token = "0x4000277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <elapsedTime>5__3;

		[Token(Token = "0x17000042")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000269")]
			[Address(RVA = "0xE6F0F0", Offset = "0xE6F0F0", VA = "0xE6F0F0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000043")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600026B")]
			[Address(RVA = "0xE6F138", Offset = "0xE6F138", VA = "0xE6F138", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000266")]
		[Address(RVA = "0xE6EF68", Offset = "0xE6EF68", VA = "0xE6EF68")]
		[DebuggerHidden]
		public <DoWarp>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x6000267")]
		[Address(RVA = "0xE6EFD8", Offset = "0xE6EFD8", VA = "0xE6EFD8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000268")]
		[Address(RVA = "0xE6EFDC", Offset = "0xE6EFDC", VA = "0xE6EFDC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600026A")]
		[Address(RVA = "0xE6F0F8", Offset = "0xE6F0F8", VA = "0xE6F0F8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("How much time the warp transition takes to complete.")]
	[Range(0.01f, 1f)]
	public float TransitionDuration;

	[Token(Token = "0x4000272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public AnimationCurve PositionLerp;

	[Token(Token = "0x6000263")]
	[Address(RVA = "0xE6EED4", Offset = "0xE6EED4", VA = "0xE6EED4", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Token(Token = "0x6000264")]
	[Address(RVA = "0xE6EEF4", Offset = "0xE6EEF4", VA = "0xE6EEF4")]
	[IteratorStateMachine(typeof(<DoWarp>d__3))]
	private IEnumerator DoWarp()
	{
		return null;
	}

	[Token(Token = "0x6000265")]
	[Address(RVA = "0xE6EF90", Offset = "0xE6EF90", VA = "0xE6EF90")]
	public TeleportTransitionWarp()
	{
	}
}
[Token(Token = "0x2000086")]
public static class NativeVideoPlayer
{
	[Token(Token = "0x2000087")]
	public enum PlabackState
	{
		[Token(Token = "0x4000290")]
		Idle = 1,
		[Token(Token = "0x4000291")]
		Preparing,
		[Token(Token = "0x4000292")]
		Buffering,
		[Token(Token = "0x4000293")]
		Ready,
		[Token(Token = "0x4000294")]
		Ended
	}

	[Token(Token = "0x2000088")]
	public enum StereoMode
	{
		[Token(Token = "0x4000296")]
		Unknown = -1,
		[Token(Token = "0x4000297")]
		Mono,
		[Token(Token = "0x4000298")]
		TopBottom,
		[Token(Token = "0x4000299")]
		LeftRight,
		[Token(Token = "0x400029A")]
		Mesh
	}

	[Token(Token = "0x4000278")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static IntPtr? _Activity;

	[Token(Token = "0x4000279")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static IntPtr? _VideoPlayerClass;

	[Token(Token = "0x400027A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static readonly jvalue[] EmptyParams;

	[Token(Token = "0x400027B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static IntPtr getIsPlayingMethodId;

	[Token(Token = "0x400027C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static IntPtr getCurrentPlaybackStateMethodId;

	[Token(Token = "0x400027D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static IntPtr getDurationMethodId;

	[Token(Token = "0x400027E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static IntPtr getStereoModeMethodId;

	[Token(Token = "0x400027F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static IntPtr getWidthMethodId;

	[Token(Token = "0x4000280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static IntPtr getHeightMethodId;

	[Token(Token = "0x4000281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static IntPtr getPlaybackPositionMethodId;

	[Token(Token = "0x4000282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static IntPtr setPlaybackPositionMethodId;

	[Token(Token = "0x4000283")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private static jvalue[] setPlaybackPositionParams;

	[Token(Token = "0x4000284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static IntPtr playVideoMethodId;

	[Token(Token = "0x4000285")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private static jvalue[] playVideoParams;

	[Token(Token = "0x4000286")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private static IntPtr stopMethodId;

	[Token(Token = "0x4000287")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private static IntPtr resumeMethodId;

	[Token(Token = "0x4000288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private static IntPtr pauseMethodId;

	[Token(Token = "0x4000289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private static IntPtr setPlaybackSpeedMethodId;

	[Token(Token = "0x400028A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private static jvalue[] setPlaybackSpeedParams;

	[Token(Token = "0x400028B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private static IntPtr setLoopingMethodId;

	[Token(Token = "0x400028C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private static jvalue[] setLoopingParams;

	[Token(Token = "0x400028D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private static IntPtr setListenerRotationQuaternionMethodId;

	[Token(Token = "0x400028E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private static jvalue[] setListenerRotationQuaternionParams;

	[Token(Token = "0x17000044")]
	private static IntPtr VideoPlayerClass
	{
		[Token(Token = "0x600026C")]
		[Address(RVA = "0xE6F140", Offset = "0xE6F140", VA = "0xE6F140")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x17000045")]
	private static IntPtr Activity
	{
		[Token(Token = "0x600026D")]
		[Address(RVA = "0xE6F430", Offset = "0xE6F430", VA = "0xE6F430")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x17000046")]
	public static bool IsAvailable
	{
		[Token(Token = "0x600026E")]
		[Address(RVA = "0xE6F6B0", Offset = "0xE6F6B0", VA = "0xE6F6B0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000047")]
	public static bool IsPlaying
	{
		[Token(Token = "0x600026F")]
		[Address(RVA = "0xE6F724", Offset = "0xE6F724", VA = "0xE6F724")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000048")]
	public static PlabackState CurrentPlaybackState
	{
		[Token(Token = "0x6000270")]
		[Address(RVA = "0xE6F828", Offset = "0xE6F828", VA = "0xE6F828")]
		get
		{
			return default(PlabackState);
		}
	}

	[Token(Token = "0x17000049")]
	public static long Duration
	{
		[Token(Token = "0x6000271")]
		[Address(RVA = "0xE6F930", Offset = "0xE6F930", VA = "0xE6F930")]
		get
		{
			return default(long);
		}
	}

	[Token(Token = "0x1700004A")]
	public static StereoMode VideoStereoMode
	{
		[Token(Token = "0x6000272")]
		[Address(RVA = "0xE6FA38", Offset = "0xE6FA38", VA = "0xE6FA38")]
		get
		{
			return default(StereoMode);
		}
	}

	[Token(Token = "0x1700004B")]
	public static int VideoWidth
	{
		[Token(Token = "0x6000273")]
		[Address(RVA = "0xE6FB40", Offset = "0xE6FB40", VA = "0xE6FB40")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700004C")]
	public static int VideoHeight
	{
		[Token(Token = "0x6000274")]
		[Address(RVA = "0xE6FC48", Offset = "0xE6FC48", VA = "0xE6FC48")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700004D")]
	public static long PlaybackPosition
	{
		[Token(Token = "0x6000275")]
		[Address(RVA = "0xE6FD50", Offset = "0xE6FD50", VA = "0xE6FD50")]
		get
		{
			return default(long);
		}
		[Token(Token = "0x6000276")]
		[Address(RVA = "0xE6FE58", Offset = "0xE6FE58", VA = "0xE6FE58")]
		set
		{
		}
	}

	[Token(Token = "0x6000277")]
	[Address(RVA = "0xE6FFC0", Offset = "0xE6FFC0", VA = "0xE6FFC0")]
	public static void PlayVideo(string path, string drmLicenseUrl, IntPtr surfaceObj)
	{
	}

	[Token(Token = "0x6000278")]
	[Address(RVA = "0xE701D8", Offset = "0xE701D8", VA = "0xE701D8")]
	public static void Stop()
	{
	}

	[Token(Token = "0x6000279")]
	[Address(RVA = "0xE702E0", Offset = "0xE702E0", VA = "0xE702E0")]
	public static void Play()
	{
	}

	[Token(Token = "0x600027A")]
	[Address(RVA = "0xE703E8", Offset = "0xE703E8", VA = "0xE703E8")]
	public static void Pause()
	{
	}

	[Token(Token = "0x600027B")]
	[Address(RVA = "0xE704F0", Offset = "0xE704F0", VA = "0xE704F0")]
	public static void SetPlaybackSpeed(float speed)
	{
	}

	[Token(Token = "0x600027C")]
	[Address(RVA = "0xE70660", Offset = "0xE70660", VA = "0xE70660")]
	public static void SetLooping(bool looping)
	{
	}

	[Token(Token = "0x600027D")]
	[Address(RVA = "0xE707CC", Offset = "0xE707CC", VA = "0xE707CC")]
	public static void SetListenerRotation(Quaternion rotation)
	{
	}
}
[Token(Token = "0x2000089")]
public class ButtonDownListener : MonoBehaviour, IPointerDownHandler, IEventSystemHandler
{
	[Token(Token = "0x1400000F")]
	public event Action onButtonDown
	{
		[Token(Token = "0x600027F")]
		[Address(RVA = "0xE70A20", Offset = "0xE70A20", VA = "0xE70A20")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000280")]
		[Address(RVA = "0xE70ABC", Offset = "0xE70ABC", VA = "0xE70ABC")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000281")]
	[Address(RVA = "0xE70B58", Offset = "0xE70B58", VA = "0xE70B58", Slot = "4")]
	public void OnPointerDown(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000282")]
	[Address(RVA = "0xE70B74", Offset = "0xE70B74", VA = "0xE70B74")]
	public ButtonDownListener()
	{
	}
}
[Token(Token = "0x200008A")]
public class MediaPlayerImage : Image
{
	[Token(Token = "0x200008B")]
	public enum ButtonType
	{
		[Token(Token = "0x400029E")]
		Play,
		[Token(Token = "0x400029F")]
		Pause,
		[Token(Token = "0x40002A0")]
		FastForward,
		[Token(Token = "0x40002A1")]
		Rewind,
		[Token(Token = "0x40002A2")]
		SkipForward,
		[Token(Token = "0x40002A3")]
		SkipBack,
		[Token(Token = "0x40002A4")]
		Stop
	}

	[Token(Token = "0x400029C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SerializeField]
	private ButtonType m_ButtonType;

	[Token(Token = "0x1700004E")]
	public ButtonType buttonType
	{
		[Token(Token = "0x6000283")]
		[Address(RVA = "0xE70B7C", Offset = "0xE70B7C", VA = "0xE70B7C")]
		get
		{
			return default(ButtonType);
		}
		[Token(Token = "0x6000284")]
		[Address(RVA = "0xE70B84", Offset = "0xE70B84", VA = "0xE70B84")]
		set
		{
		}
	}

	[Token(Token = "0x6000285")]
	[Address(RVA = "0xE70BA8", Offset = "0xE70BA8", VA = "0xE70BA8", Slot = "44")]
	protected override void OnPopulateMesh(VertexHelper toFill)
	{
	}

	[Token(Token = "0x6000286")]
	[Address(RVA = "0xE719FC", Offset = "0xE719FC", VA = "0xE719FC")]
	public MediaPlayerImage()
	{
	}
}
[Token(Token = "0x200008C")]
public class MoviePlayerSample : MonoBehaviour
{
	[Token(Token = "0x200008D")]
	public enum VideoShape
	{
		[Token(Token = "0x40002B9")]
		_360,
		[Token(Token = "0x40002BA")]
		_180,
		[Token(Token = "0x40002BB")]
		Quad
	}

	[Token(Token = "0x200008E")]
	public enum VideoStereo
	{
		[Token(Token = "0x40002BD")]
		Mono,
		[Token(Token = "0x40002BE")]
		TopBottom,
		[Token(Token = "0x40002BF")]
		LeftRight,
		[Token(Token = "0x40002C0")]
		BottomTop
	}

	[Token(Token = "0x200008F")]
	[CompilerGenerated]
	private sealed class <Start>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MoviePlayerSample <>4__this;

		[Token(Token = "0x17000052")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600029D")]
			[Address(RVA = "0xE72F24", Offset = "0xE72F24", VA = "0xE72F24", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000053")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600029F")]
			[Address(RVA = "0xE72F6C", Offset = "0xE72F6C", VA = "0xE72F6C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600029A")]
		[Address(RVA = "0xE720E0", Offset = "0xE720E0", VA = "0xE720E0")]
		[DebuggerHidden]
		public <Start>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x600029B")]
		[Address(RVA = "0xE72D78", Offset = "0xE72D78", VA = "0xE72D78", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600029C")]
		[Address(RVA = "0xE72D7C", Offset = "0xE72D7C", VA = "0xE72D7C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600029E")]
		[Address(RVA = "0xE72F2C", Offset = "0xE72F2C", VA = "0xE72F2C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40002A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool videoPausedBeforeAppPause;

	[Token(Token = "0x40002A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private VideoPlayer videoPlayer;

	[Token(Token = "0x40002A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVROverlay overlay;

	[Token(Token = "0x40002A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Renderer mediaRenderer;

	[Token(Token = "0x40002AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private RenderTexture copyTexture;

	[Token(Token = "0x40002AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Material externalTex2DMaterial;

	[Token(Token = "0x40002AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string MovieName;

	[Token(Token = "0x40002AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public string DrmLicenseUrl;

	[Token(Token = "0x40002B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool LoopVideo;

	[Token(Token = "0x40002B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public VideoShape Shape;

	[Token(Token = "0x40002B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public VideoStereo Stereo;

	[Token(Token = "0x40002B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool AutoDetectStereoLayout;

	[Token(Token = "0x40002B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
	public bool DisplayMono;

	[Token(Token = "0x40002B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private VideoShape _LastShape;

	[Token(Token = "0x40002B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private VideoStereo _LastStereo;

	[Token(Token = "0x40002B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool _LastDisplayMono;

	[Token(Token = "0x1700004F")]
	public bool IsPlaying
	{
		[Token(Token = "0x6000287")]
		[Address(RVA = "0xE71A54", Offset = "0xE71A54", VA = "0xE71A54")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000288")]
		[Address(RVA = "0xE71A5C", Offset = "0xE71A5C", VA = "0xE71A5C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000050")]
	public long Duration
	{
		[Token(Token = "0x6000289")]
		[Address(RVA = "0xE71A68", Offset = "0xE71A68", VA = "0xE71A68")]
		[CompilerGenerated]
		get
		{
			return default(long);
		}
		[Token(Token = "0x600028A")]
		[Address(RVA = "0xE71A70", Offset = "0xE71A70", VA = "0xE71A70")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000051")]
	public long PlaybackPosition
	{
		[Token(Token = "0x600028B")]
		[Address(RVA = "0xE71A78", Offset = "0xE71A78", VA = "0xE71A78")]
		[CompilerGenerated]
		get
		{
			return default(long);
		}
		[Token(Token = "0x600028C")]
		[Address(RVA = "0xE71A80", Offset = "0xE71A80", VA = "0xE71A80")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x600028D")]
	[Address(RVA = "0xE71A88", Offset = "0xE71A88", VA = "0xE71A88")]
	private void Awake()
	{
	}

	[Token(Token = "0x600028E")]
	[Address(RVA = "0xE71D0C", Offset = "0xE71D0C", VA = "0xE71D0C")]
	private bool IsLocalVideo(string movieName)
	{
		return default(bool);
	}

	[Token(Token = "0x600028F")]
	[Address(RVA = "0xE71D6C", Offset = "0xE71D6C", VA = "0xE71D6C")]
	private void UpdateShapeAndStereo()
	{
	}

	[Token(Token = "0x6000290")]
	[Address(RVA = "0xE7206C", Offset = "0xE7206C", VA = "0xE7206C")]
	[IteratorStateMachine(typeof(<Start>d__33))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000291")]
	[Address(RVA = "0xE72108", Offset = "0xE72108", VA = "0xE72108")]
	public void Play(string moviePath, string drmLicencesUrl)
	{
	}

	[Token(Token = "0x6000292")]
	[Address(RVA = "0xE723E0", Offset = "0xE723E0", VA = "0xE723E0")]
	public void Play()
	{
	}

	[Token(Token = "0x6000293")]
	[Address(RVA = "0xE72464", Offset = "0xE72464", VA = "0xE72464")]
	public void Pause()
	{
	}

	[Token(Token = "0x6000294")]
	[Address(RVA = "0xE724E4", Offset = "0xE724E4", VA = "0xE724E4")]
	public void SeekTo(long position)
	{
	}

	[Token(Token = "0x6000295")]
	[Address(RVA = "0xE725D0", Offset = "0xE725D0", VA = "0xE725D0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000296")]
	[Address(RVA = "0xE72B6C", Offset = "0xE72B6C", VA = "0xE72B6C")]
	public void SetPlaybackSpeed(float speed)
	{
	}

	[Token(Token = "0x6000297")]
	[Address(RVA = "0xE72C08", Offset = "0xE72C08", VA = "0xE72C08")]
	public void Stop()
	{
	}

	[Token(Token = "0x6000298")]
	[Address(RVA = "0xE72C88", Offset = "0xE72C88", VA = "0xE72C88")]
	private void OnApplicationPause(bool appWasPaused)
	{
	}

	[Token(Token = "0x6000299")]
	[Address(RVA = "0xE72D68", Offset = "0xE72D68", VA = "0xE72D68")]
	public MoviePlayerSample()
	{
	}
}
[Token(Token = "0x2000091")]
public class MoviePlayerSampleControls : MonoBehaviour
{
	[Token(Token = "0x2000092")]
	private enum PlaybackState
	{
		[Token(Token = "0x40002DD")]
		Playing,
		[Token(Token = "0x40002DE")]
		Paused,
		[Token(Token = "0x40002DF")]
		Rewinding,
		[Token(Token = "0x40002E0")]
		FastForwarding
	}

	[Token(Token = "0x40002C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MoviePlayerSample Player;

	[Token(Token = "0x40002C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVRInputModule InputModule;

	[Token(Token = "0x40002C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRGazePointer GazePointer;

	[Token(Token = "0x40002CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject LeftHand;

	[Token(Token = "0x40002CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject RightHand;

	[Token(Token = "0x40002CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Canvas Canvas;

	[Token(Token = "0x40002CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ButtonDownListener PlayPause;

	[Token(Token = "0x40002CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public MediaPlayerImage PlayPauseImage;

	[Token(Token = "0x40002CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Slider ProgressBar;

	[Token(Token = "0x40002D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public ButtonDownListener FastForward;

	[Token(Token = "0x40002D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public MediaPlayerImage FastForwardImage;

	[Token(Token = "0x40002D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ButtonDownListener Rewind;

	[Token(Token = "0x40002D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public MediaPlayerImage RewindImage;

	[Token(Token = "0x40002D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float TimeoutTime;

	[Token(Token = "0x40002D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private bool _isVisible;

	[Token(Token = "0x40002D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float _lastButtonTime;

	[Token(Token = "0x40002D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private bool _didSeek;

	[Token(Token = "0x40002D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private long _seekPreviousPosition;

	[Token(Token = "0x40002D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private long _rewindStartPosition;

	[Token(Token = "0x40002DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float _rewindStartTime;

	[Token(Token = "0x40002DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private PlaybackState _state;

	[Token(Token = "0x60002A2")]
	[Address(RVA = "0xE73048", Offset = "0xE73048", VA = "0xE73048")]
	private void Start()
	{
	}

	[Token(Token = "0x60002A3")]
	[Address(RVA = "0xE73374", Offset = "0xE73374", VA = "0xE73374")]
	private void OnPlayPauseClicked()
	{
	}

	[Token(Token = "0x60002A4")]
	[Address(RVA = "0xE73544", Offset = "0xE73544", VA = "0xE73544")]
	private void OnFastForwardClicked()
	{
	}

	[Token(Token = "0x60002A5")]
	[Address(RVA = "0xE73668", Offset = "0xE73668", VA = "0xE73668")]
	private void OnRewindClicked()
	{
	}

	[Token(Token = "0x60002A6")]
	[Address(RVA = "0xE73764", Offset = "0xE73764", VA = "0xE73764")]
	private void OnSeekBarMoved(float value)
	{
	}

	[Token(Token = "0x60002A7")]
	[Address(RVA = "0xE7363C", Offset = "0xE7363C", VA = "0xE7363C")]
	private void Seek(long pos)
	{
	}

	[Token(Token = "0x60002A8")]
	[Address(RVA = "0xE737C4", Offset = "0xE737C4", VA = "0xE737C4")]
	private void Update()
	{
	}

	[Token(Token = "0x60002A9")]
	[Address(RVA = "0xE73274", Offset = "0xE73274", VA = "0xE73274")]
	private void SetVisible(bool visible)
	{
	}

	[Token(Token = "0x60002AA")]
	[Address(RVA = "0xE73AF4", Offset = "0xE73AF4", VA = "0xE73AF4")]
	public MoviePlayerSampleControls()
	{
	}
}
[Token(Token = "0x2000093")]
public static class VectorUtil
{
	[Token(Token = "0x60002AB")]
	[Address(RVA = "0xE72AF4", Offset = "0xE72AF4", VA = "0xE72AF4")]
	public static Vector4 ToVector(this Rect rect)
	{
		return default(Vector4);
	}
}
[Token(Token = "0x2000094")]
public class AppDeeplinkUI : MonoBehaviour
{
	[Token(Token = "0x40002E1")]
	private const ulong UNITY_COMPANION_APP_ID = 3535750239844224uL;

	[Token(Token = "0x40002E2")]
	private const ulong UNREAL_COMPANION_APP_ID = 4055411724486843uL;

	[Token(Token = "0x40002E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private RectTransform deeplinkAppId;

	[Token(Token = "0x40002E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private RectTransform deeplinkMessage;

	[Token(Token = "0x40002E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RectTransform uiLaunchType;

	[Token(Token = "0x40002E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private RectTransform uiLaunchSource;

	[Token(Token = "0x40002E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private RectTransform uiDeepLinkMessage;

	[Token(Token = "0x40002E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool inMenu;

	[Token(Token = "0x60002AC")]
	[Address(RVA = "0xE73B04", Offset = "0xE73B04", VA = "0xE73B04")]
	private void Start()
	{
	}

	[Token(Token = "0x60002AD")]
	[Address(RVA = "0xE74158", Offset = "0xE74158", VA = "0xE74158")]
	private void Update()
	{
	}

	[Token(Token = "0x60002AE")]
	[Address(RVA = "0xE743B4", Offset = "0xE743B4", VA = "0xE743B4")]
	private void LaunchUnrealDeeplinkSample()
	{
	}

	[Token(Token = "0x60002AF")]
	[Address(RVA = "0xE74518", Offset = "0xE74518", VA = "0xE74518")]
	private void LaunchSelf()
	{
	}

	[Token(Token = "0x60002B0")]
	[Address(RVA = "0xE74680", Offset = "0xE74680", VA = "0xE74680")]
	private void LaunchOtherApp()
	{
	}

	[Token(Token = "0x60002B1")]
	[Address(RVA = "0xE74804", Offset = "0xE74804", VA = "0xE74804")]
	public AppDeeplinkUI()
	{
	}
}
[Token(Token = "0x2000095")]
public class CustomDebugUI : MonoBehaviour
{
	[Token(Token = "0x40002E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private RectTransform textPrefab;

	[Token(Token = "0x40002EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static CustomDebugUI instance;

	[Token(Token = "0x40002EB")]
	private const BindingFlags privateFlags = BindingFlags.Instance | BindingFlags.NonPublic;

	[Token(Token = "0x60002B2")]
	[Address(RVA = "0xE74814", Offset = "0xE74814", VA = "0xE74814")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002B3")]
	[Address(RVA = "0xE7486C", Offset = "0xE7486C", VA = "0xE7486C")]
	private void Start()
	{
	}

	[Token(Token = "0x60002B4")]
	[Address(RVA = "0xE74870", Offset = "0xE74870", VA = "0xE74870")]
	private void Update()
	{
	}

	[Token(Token = "0x60002B5")]
	[Address(RVA = "0xE73F00", Offset = "0xE73F00", VA = "0xE73F00")]
	public RectTransform AddTextField(string label, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60002B6")]
	[Address(RVA = "0xE74874", Offset = "0xE74874", VA = "0xE74874")]
	public void RemoveFromCanvas(RectTransform element, int targetCanvas = 0)
	{
	}

	[Token(Token = "0x60002B7")]
	[Address(RVA = "0xE74A90", Offset = "0xE74A90", VA = "0xE74A90")]
	public CustomDebugUI()
	{
	}
}
[Token(Token = "0x2000096")]
public class DebugUISample : MonoBehaviour
{
	[Token(Token = "0x40002EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool inMenu;

	[Token(Token = "0x40002ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Text sliderText;

	[Token(Token = "0x60002B8")]
	[Address(RVA = "0xE74A98", Offset = "0xE74A98", VA = "0xE74A98")]
	private void Start()
	{
	}

	[Token(Token = "0x60002B9")]
	[Address(RVA = "0xE74FF8", Offset = "0xE74FF8", VA = "0xE74FF8")]
	public void TogglePressed(Toggle t)
	{
	}

	[Token(Token = "0x60002BA")]
	[Address(RVA = "0xE750A4", Offset = "0xE750A4", VA = "0xE750A4")]
	public void RadioPressed(string radioLabel, string group, Toggle t)
	{
	}

	[Token(Token = "0x60002BB")]
	[Address(RVA = "0xE75334", Offset = "0xE75334", VA = "0xE75334")]
	public void SliderPressed(float f)
	{
	}

	[Token(Token = "0x60002BC")]
	[Address(RVA = "0xE75408", Offset = "0xE75408", VA = "0xE75408")]
	private void Update()
	{
	}

	[Token(Token = "0x60002BD")]
	[Address(RVA = "0xE754E0", Offset = "0xE754E0", VA = "0xE754E0")]
	private void LogButtonPressed()
	{
	}

	[Token(Token = "0x60002BE")]
	[Address(RVA = "0xE75548", Offset = "0xE75548", VA = "0xE75548")]
	public DebugUISample()
	{
	}
}
[Token(Token = "0x2000097")]
public class AnalyticsUI : MonoBehaviour
{
	[Token(Token = "0x60002C3")]
	[Address(RVA = "0xE756F0", Offset = "0xE756F0", VA = "0xE756F0")]
	public AnalyticsUI()
	{
	}
}
[Token(Token = "0x2000098")]
public class SampleUI : MonoBehaviour
{
	[Token(Token = "0x40002EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private RectTransform collectionButton;

	[Token(Token = "0x40002EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private RectTransform inputText;

	[Token(Token = "0x40002F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RectTransform valueText;

	[Token(Token = "0x40002F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool inMenu;

	[Token(Token = "0x60002C4")]
	[Address(RVA = "0xE756F8", Offset = "0xE756F8", VA = "0xE756F8")]
	private void Start()
	{
	}

	[Token(Token = "0x60002C5")]
	[Address(RVA = "0xE75790", Offset = "0xE75790", VA = "0xE75790")]
	private void Update()
	{
	}

	[Token(Token = "0x60002C6")]
	[Address(RVA = "0xE75868", Offset = "0xE75868", VA = "0xE75868")]
	private string GetText()
	{
		return null;
	}

	[Token(Token = "0x60002C7")]
	[Address(RVA = "0xE758C4", Offset = "0xE758C4", VA = "0xE758C4")]
	public SampleUI()
	{
	}
}
[Token(Token = "0x2000099")]
public class StartCrashlytics : MonoBehaviour
{
	[Token(Token = "0x60002C8")]
	[Address(RVA = "0xE758CC", Offset = "0xE758CC", VA = "0xE758CC")]
	public StartCrashlytics()
	{
	}
}
[Token(Token = "0x200009A")]
public class HandsActiveChecker : MonoBehaviour
{
	[Token(Token = "0x200009B")]
	[CompilerGenerated]
	private sealed class <GetCenterEye>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandsActiveChecker <>4__this;

		[Token(Token = "0x17000054")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002D0")]
			[Address(RVA = "0xE75CDC", Offset = "0xE75CDC", VA = "0xE75CDC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000055")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002D2")]
			[Address(RVA = "0xE75D24", Offset = "0xE75D24", VA = "0xE75D24", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002CD")]
		[Address(RVA = "0xE75B78", Offset = "0xE75B78", VA = "0xE75B78")]
		[DebuggerHidden]
		public <GetCenterEye>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x60002CE")]
		[Address(RVA = "0xE75BA8", Offset = "0xE75BA8", VA = "0xE75BA8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002CF")]
		[Address(RVA = "0xE75BAC", Offset = "0xE75BAC", VA = "0xE75BAC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002D1")]
		[Address(RVA = "0xE75CE4", Offset = "0xE75CE4", VA = "0xE75CE4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40002F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject _notificationPrefab;

	[Token(Token = "0x40002F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject _notification;

	[Token(Token = "0x40002F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVRCameraRig _cameraRig;

	[Token(Token = "0x40002F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform _centerEye;

	[Token(Token = "0x60002C9")]
	[Address(RVA = "0xE758D4", Offset = "0xE758D4", VA = "0xE758D4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002CA")]
	[Address(RVA = "0xE759E0", Offset = "0xE759E0", VA = "0xE759E0")]
	private void Update()
	{
	}

	[Token(Token = "0x60002CB")]
	[Address(RVA = "0xE7596C", Offset = "0xE7596C", VA = "0xE7596C")]
	[IteratorStateMachine(typeof(<GetCenterEye>d__6))]
	private IEnumerator GetCenterEye()
	{
		return null;
	}

	[Token(Token = "0x60002CC")]
	[Address(RVA = "0xE75BA0", Offset = "0xE75BA0", VA = "0xE75BA0")]
	public HandsActiveChecker()
	{
	}
}
[Token(Token = "0x200009C")]
[ExecuteInEditMode]
public class CharacterCapsule : MonoBehaviour
{
	[Token(Token = "0x40002F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private CharacterController _character;

	[Token(Token = "0x40002FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private MeshFilter _meshFilter;

	[Token(Token = "0x40002FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float _height;

	[Token(Token = "0x40002FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float _radius;

	[Token(Token = "0x40002FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Range(4f, 32f)]
	public int SubdivisionsU;

	[Token(Token = "0x40002FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Range(4f, 32f)]
	public int SubdivisionsV;

	[Token(Token = "0x40002FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int _subdivisionU;

	[Token(Token = "0x4000300")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int _subdivisionV;

	[Token(Token = "0x4000301")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3[] _vertices;

	[Token(Token = "0x4000302")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int[] _triangles;

	[Token(Token = "0x60002D3")]
	[Address(RVA = "0xE75D2C", Offset = "0xE75D2C", VA = "0xE75D2C")]
	private void Update()
	{
	}

	[Token(Token = "0x60002D4")]
	[Address(RVA = "0xE776D4", Offset = "0xE776D4", VA = "0xE776D4")]
	public CharacterCapsule()
	{
	}
}
[Token(Token = "0x200009D")]
public class LocomotionSampleSupport : MonoBehaviour
{
	[Token(Token = "0x4000303")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private LocomotionController lc;

	[Token(Token = "0x4000304")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool inMenu;

	[Token(Token = "0x17000056")]
	private LocomotionTeleport TeleportController
	{
		[Token(Token = "0x60002D5")]
		[Address(RVA = "0xE776DC", Offset = "0xE776DC", VA = "0xE776DC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60002D6")]
	[Address(RVA = "0xE7772C", Offset = "0xE7772C", VA = "0xE7772C")]
	public void Start()
	{
	}

	[Token(Token = "0x60002D7")]
	[Address(RVA = "0xE77B44", Offset = "0xE77B44", VA = "0xE77B44")]
	public void Update()
	{
	}

	[Token(Token = "0x60002D8")]
	[Address(RVA = "0xE77C1C", Offset = "0xE77C1C", VA = "0xE77C1C")]
	[Conditional("DEBUG_LOCOMOTION_PANEL")]
	private static void Log(string msg)
	{
	}

	[Token(Token = "0x60002D9")]
	public static TActivate ActivateCategory<TCategory, TActivate>(GameObject target) where TCategory : MonoBehaviour where TActivate : MonoBehaviour
	{
		return null;
	}

	[Token(Token = "0x60002DA")]
	protected void ActivateHandlers<TInput, TAim, TTarget, TOrientation, TTransition>() where TInput : TeleportInputHandler where TAim : TeleportAimHandler where TTarget : TeleportTargetHandler where TOrientation : TeleportOrientationHandler where TTransition : TeleportTransition
	{
	}

	[Token(Token = "0x60002DB")]
	protected void ActivateInput<TActivate>() where TActivate : TeleportInputHandler
	{
	}

	[Token(Token = "0x60002DC")]
	protected void ActivateAim<TActivate>() where TActivate : TeleportAimHandler
	{
	}

	[Token(Token = "0x60002DD")]
	protected void ActivateTarget<TActivate>() where TActivate : TeleportTargetHandler
	{
	}

	[Token(Token = "0x60002DE")]
	protected void ActivateOrientation<TActivate>() where TActivate : TeleportOrientationHandler
	{
	}

	[Token(Token = "0x60002DF")]
	protected void ActivateTransition<TActivate>() where TActivate : TeleportTransition
	{
	}

	[Token(Token = "0x60002E0")]
	protected TActivate ActivateCategory<TCategory, TActivate>() where TCategory : MonoBehaviour where TActivate : MonoBehaviour
	{
		return null;
	}

	[Token(Token = "0x60002E1")]
	[Address(RVA = "0xE77C74", Offset = "0xE77C74", VA = "0xE77C74")]
	protected void UpdateToggle(Toggle toggle, bool enabled)
	{
	}

	[Token(Token = "0x60002E2")]
	[Address(RVA = "0xE77CB4", Offset = "0xE77CB4", VA = "0xE77CB4")]
	private void SetupNonCap()
	{
	}

	[Token(Token = "0x60002E3")]
	[Address(RVA = "0xE77D20", Offset = "0xE77D20", VA = "0xE77D20")]
	private void SetupTeleportDefaults()
	{
	}

	[Token(Token = "0x60002E4")]
	[Address(RVA = "0xE77E44", Offset = "0xE77E44", VA = "0xE77E44")]
	protected GameObject AddInstance(GameObject template, string label)
	{
		return null;
	}

	[Token(Token = "0x60002E5")]
	[Address(RVA = "0xE77F14", Offset = "0xE77F14", VA = "0xE77F14")]
	private void SetupNodeTeleport()
	{
	}

	[Token(Token = "0x60002E6")]
	[Address(RVA = "0xE77A40", Offset = "0xE77A40", VA = "0xE77A40")]
	private void SetupTwoStickTeleport()
	{
	}

	[Token(Token = "0x60002E7")]
	[Address(RVA = "0xE77FD8", Offset = "0xE77FD8", VA = "0xE77FD8")]
	private void SetupWalkOnly()
	{
	}

	[Token(Token = "0x60002E8")]
	[Address(RVA = "0xE78024", Offset = "0xE78024", VA = "0xE78024")]
	private void SetupLeftStrafeRightTeleport()
	{
	}

	[Token(Token = "0x60002E9")]
	[Address(RVA = "0xE78118", Offset = "0xE78118", VA = "0xE78118")]
	public LocomotionSampleSupport()
	{
	}
}
[Token(Token = "0x200009E")]
[RequireComponent(typeof(Canvas))]
public class OVROverlayCanvas : MonoBehaviour
{
	[Token(Token = "0x200009F")]
	public enum DrawMode
	{
		[Token(Token = "0x400031A")]
		Opaque,
		[Token(Token = "0x400031B")]
		OpaqueWithClip,
		[Token(Token = "0x400031C")]
		TransparentDefaultAlpha,
		[Token(Token = "0x400031D")]
		TransparentCorrectAlpha
	}

	[Token(Token = "0x4000305")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[HideInInspector]
	private Shader _transparentShader;

	[Token(Token = "0x4000306")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[HideInInspector]
	private Shader _opaqueShader;

	[Token(Token = "0x4000307")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RectTransform _rectTransform;

	[Token(Token = "0x4000308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Canvas _canvas;

	[Token(Token = "0x4000309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Camera _camera;

	[Token(Token = "0x400030A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private OVROverlay _overlay;

	[Token(Token = "0x400030B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private RenderTexture _renderTexture;

	[Token(Token = "0x400030C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private MeshRenderer _meshRenderer;

	[Token(Token = "0x400030D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Mesh _quad;

	[Token(Token = "0x400030E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Material _defaultMat;

	[Token(Token = "0x400030F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public int MaxTextureSize;

	[Token(Token = "0x4000310")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public int MinTextureSize;

	[Token(Token = "0x4000311")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float PixelsPerUnit;

	[Token(Token = "0x4000312")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public int DrawRate;

	[Token(Token = "0x4000313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public int DrawFrameOffset;

	[Token(Token = "0x4000314")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool Expensive;

	[Token(Token = "0x4000315")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public int Layer;

	[Token(Token = "0x4000316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public DrawMode Opacity;

	[Token(Token = "0x4000317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool ScaleViewport;

	[Token(Token = "0x4000318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Plane[] _FrustumPlanes;

	[Token(Token = "0x17000057")]
	public bool overlayEnabled
	{
		[Token(Token = "0x60002F0")]
		[Address(RVA = "0xE7975C", Offset = "0xE7975C", VA = "0xE7975C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60002F1")]
		[Address(RVA = "0xE797E0", Offset = "0xE797E0", VA = "0xE797E0")]
		set
		{
		}
	}

	[Token(Token = "0x60002EA")]
	[Address(RVA = "0xE78120", Offset = "0xE78120", VA = "0xE78120")]
	private void Start()
	{
	}

	[Token(Token = "0x60002EB")]
	[Address(RVA = "0xE78DE4", Offset = "0xE78DE4", VA = "0xE78DE4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60002EC")]
	[Address(RVA = "0xE78E58", Offset = "0xE78E58", VA = "0xE78E58")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002ED")]
	[Address(RVA = "0xE78F28", Offset = "0xE78F28", VA = "0xE78F28")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60002EE")]
	[Address(RVA = "0xE78FF8", Offset = "0xE78FF8", VA = "0xE78FF8", Slot = "4")]
	protected virtual bool ShouldRender()
	{
		return default(bool);
	}

	[Token(Token = "0x60002EF")]
	[Address(RVA = "0xE791FC", Offset = "0xE791FC", VA = "0xE791FC")]
	private void Update()
	{
	}

	[Token(Token = "0x60002F2")]
	[Address(RVA = "0xE7989C", Offset = "0xE7989C", VA = "0xE7989C")]
	public OVROverlayCanvas()
	{
	}
}
[Token(Token = "0x20000A0")]
public class AugmentedObject : MonoBehaviour
{
	[Token(Token = "0x400031E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRInput.Controller controllerHand;

	[Token(Token = "0x400031F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform shadow;

	[Token(Token = "0x4000320")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool groundShadow;

	[Token(Token = "0x60002F4")]
	[Address(RVA = "0xEECE8C", Offset = "0xEECE8C", VA = "0xEECE8C")]
	private void Start()
	{
	}

	[Token(Token = "0x60002F5")]
	[Address(RVA = "0xEED22C", Offset = "0xEED22C", VA = "0xEED22C")]
	private void Update()
	{
	}

	[Token(Token = "0x60002F6")]
	[Address(RVA = "0xEED3C0", Offset = "0xEED3C0", VA = "0xEED3C0")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x60002F7")]
	[Address(RVA = "0xEED3C8", Offset = "0xEED3C8", VA = "0xEED3C8")]
	public void Release()
	{
	}

	[Token(Token = "0x60002F8")]
	[Address(RVA = "0xEED3B0", Offset = "0xEED3B0", VA = "0xEED3B0")]
	private void ToggleShadowType()
	{
	}

	[Token(Token = "0x60002F9")]
	[Address(RVA = "0xEED3D0", Offset = "0xEED3D0", VA = "0xEED3D0")]
	public AugmentedObject()
	{
	}
}
[Token(Token = "0x20000A1")]
public class BrushController : MonoBehaviour
{
	[Token(Token = "0x20000A2")]
	[CompilerGenerated]
	private sealed class <FadeCameraClearColor>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float fadeTime;

		[Token(Token = "0x4000328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Color newColor;

		[Token(Token = "0x4000329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <timer>5__2;

		[Token(Token = "0x400032A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Color <currentColor>5__3;

		[Token(Token = "0x17000058")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000304")]
			[Address(RVA = "0xEEDB18", Offset = "0xEEDB18", VA = "0xEEDB18", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000059")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000306")]
			[Address(RVA = "0xEEDB60", Offset = "0xEEDB60", VA = "0xEEDB60", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000301")]
		[Address(RVA = "0xEED9BC", Offset = "0xEED9BC", VA = "0xEED9BC")]
		[DebuggerHidden]
		public <FadeCameraClearColor>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x6000302")]
		[Address(RVA = "0xEEDA14", Offset = "0xEEDA14", VA = "0xEEDA14", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000303")]
		[Address(RVA = "0xEEDA18", Offset = "0xEEDA18", VA = "0xEEDA18", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000305")]
		[Address(RVA = "0xEEDB20", Offset = "0xEEDB20", VA = "0xEEDB20", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000A3")]
	[CompilerGenerated]
	private sealed class <FadeSphere>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400032B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400032C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400032D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BrushController <>4__this;

		[Token(Token = "0x400032E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x400032F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Color newColor;

		[Token(Token = "0x4000330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool disableOnFinish;

		[Token(Token = "0x4000331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <timer>5__2;

		[Token(Token = "0x4000332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Color <currentColor>5__3;

		[Token(Token = "0x1700005A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600030A")]
			[Address(RVA = "0xEEDCE4", Offset = "0xEEDCE4", VA = "0xEEDCE4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600030C")]
			[Address(RVA = "0xEEDD2C", Offset = "0xEEDD2C", VA = "0xEEDD2C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000307")]
		[Address(RVA = "0xEED9E4", Offset = "0xEED9E4", VA = "0xEED9E4")]
		[DebuggerHidden]
		public <FadeSphere>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6000308")]
		[Address(RVA = "0xEEDB68", Offset = "0xEEDB68", VA = "0xEEDB68", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000309")]
		[Address(RVA = "0xEEDB6C", Offset = "0xEEDB6C", VA = "0xEEDB6C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600030B")]
		[Address(RVA = "0xEEDCEC", Offset = "0xEEDCEC", VA = "0xEEDCEC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000321")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PassthroughBrush brush;

	[Token(Token = "0x4000322")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshRenderer backgroundSphere;

	[Token(Token = "0x4000323")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IEnumerator grabRoutine;

	[Token(Token = "0x4000324")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private IEnumerator releaseRoutine;

	[Token(Token = "0x60002FA")]
	[Address(RVA = "0xEED3D8", Offset = "0xEED3D8", VA = "0xEED3D8")]
	private void Start()
	{
	}

	[Token(Token = "0x60002FB")]
	[Address(RVA = "0xEED6B8", Offset = "0xEED6B8", VA = "0xEED6B8")]
	private void Update()
	{
	}

	[Token(Token = "0x60002FC")]
	[Address(RVA = "0xEED708", Offset = "0xEED708", VA = "0xEED708")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x60002FD")]
	[Address(RVA = "0xEED880", Offset = "0xEED880", VA = "0xEED880")]
	public void Release()
	{
	}

	[Token(Token = "0x60002FE")]
	[Address(RVA = "0xEED924", Offset = "0xEED924", VA = "0xEED924")]
	[IteratorStateMachine(typeof(<FadeCameraClearColor>d__8))]
	private IEnumerator FadeCameraClearColor(Color newColor, float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x60002FF")]
	[Address(RVA = "0xEED7C0", Offset = "0xEED7C0", VA = "0xEED7C0")]
	[IteratorStateMachine(typeof(<FadeSphere>d__9))]
	private IEnumerator FadeSphere(Color newColor, float fadeTime, bool disableOnFinish = false)
	{
		return null;
	}

	[Token(Token = "0x6000300")]
	[Address(RVA = "0xEEDA0C", Offset = "0xEEDA0C", VA = "0xEEDA0C")]
	public BrushController()
	{
	}
}
[Token(Token = "0x20000A4")]
public class EnableUnpremultipliedAlpha : MonoBehaviour
{
	[Token(Token = "0x600030D")]
	[Address(RVA = "0xEEDD34", Offset = "0xEEDD34", VA = "0xEEDD34")]
	private void Start()
	{
	}

	[Token(Token = "0x600030E")]
	[Address(RVA = "0xEEDD88", Offset = "0xEEDD88", VA = "0xEEDD88")]
	public EnableUnpremultipliedAlpha()
	{
	}
}
[Token(Token = "0x20000A5")]
public class Flashlight : MonoBehaviour
{
	[Token(Token = "0x4000333")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject lightVolume;

	[Token(Token = "0x4000334")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Light spotlight;

	[Token(Token = "0x4000335")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject bulbGlow;

	[Token(Token = "0x600030F")]
	[Address(RVA = "0xEEDD90", Offset = "0xEEDD90", VA = "0xEEDD90")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000310")]
	[Address(RVA = "0xEEDF64", Offset = "0xEEDF64", VA = "0xEEDF64")]
	public void ToggleFlashlight()
	{
	}

	[Token(Token = "0x6000311")]
	[Address(RVA = "0xEEDFF4", Offset = "0xEEDFF4", VA = "0xEEDFF4")]
	public void EnableFlashlight(bool doEnable)
	{
	}

	[Token(Token = "0x6000312")]
	[Address(RVA = "0xEEE050", Offset = "0xEEE050", VA = "0xEEE050")]
	public Flashlight()
	{
	}
}
[Token(Token = "0x20000A6")]
public class FlashlightController : MonoBehaviour
{
	[Token(Token = "0x20000A7")]
	[CompilerGenerated]
	private sealed class <FadeLighting>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FlashlightController <>4__this;

		[Token(Token = "0x4000343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x4000344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Color newColor;

		[Token(Token = "0x4000345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float sceneLightIntensity;

		[Token(Token = "0x4000346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <timer>5__2;

		[Token(Token = "0x4000347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Color <currentColor>5__3;

		[Token(Token = "0x4000348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float <currentLight>5__4;

		[Token(Token = "0x1700005C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600031F")]
			[Address(RVA = "0xEEF228", Offset = "0xEEF228", VA = "0xEEF228", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000321")]
			[Address(RVA = "0xEEF270", Offset = "0xEEF270", VA = "0xEEF270", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600031C")]
		[Address(RVA = "0xEEEF90", Offset = "0xEEEF90", VA = "0xEEEF90")]
		[DebuggerHidden]
		public <FadeLighting>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x600031D")]
		[Address(RVA = "0xEEF058", Offset = "0xEEF058", VA = "0xEEF058", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600031E")]
		[Address(RVA = "0xEEF05C", Offset = "0xEEF05C", VA = "0xEEF05C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000320")]
		[Address(RVA = "0xEEF230", Offset = "0xEEF230", VA = "0xEEF230", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000336")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Light sceneLight;

	[Token(Token = "0x4000337")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform flashlightRoot;

	[Token(Token = "0x4000338")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 localPosition;

	[Token(Token = "0x4000339")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Quaternion localRotation;

	[Token(Token = "0x400033A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TextMesh infoText;

	[Token(Token = "0x400033B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GrabObject externalController;

	[Token(Token = "0x400033C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private OVRSkeleton[] skeletons;

	[Token(Token = "0x400033D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private OVRHand[] hands;

	[Token(Token = "0x400033E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int handIndex;

	[Token(Token = "0x400033F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool pinching;

	[Token(Token = "0x6000313")]
	[Address(RVA = "0xEEE058", Offset = "0xEEE058", VA = "0xEEE058")]
	private void Start()
	{
	}

	[Token(Token = "0x6000314")]
	[Address(RVA = "0xEEE340", Offset = "0xEEE340", VA = "0xEEE340")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000315")]
	[Address(RVA = "0xEEE62C", Offset = "0xEEE62C", VA = "0xEEE62C")]
	private void FindHands()
	{
	}

	[Token(Token = "0x6000316")]
	[Address(RVA = "0xEEE954", Offset = "0xEEE954", VA = "0xEEE954")]
	private void AlignWithHand(OVRHand hand, OVRSkeleton skeleton)
	{
	}

	[Token(Token = "0x6000317")]
	[Address(RVA = "0xEEEC2C", Offset = "0xEEEC2C", VA = "0xEEEC2C")]
	private void AlignWithController(OVRInput.Controller controller)
	{
	}

	[Token(Token = "0x6000318")]
	[Address(RVA = "0xEEED14", Offset = "0xEEED14", VA = "0xEEED14")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x6000319")]
	[Address(RVA = "0xEEEEAC", Offset = "0xEEEEAC", VA = "0xEEEEAC")]
	public void Release()
	{
	}

	[Token(Token = "0x600031A")]
	[Address(RVA = "0xEEEDFC", Offset = "0xEEEDFC", VA = "0xEEEDFC")]
	[IteratorStateMachine(typeof(<FadeLighting>d__17))]
	private IEnumerator FadeLighting(Color newColor, float sceneLightIntensity, float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x600031B")]
	[Address(RVA = "0xEEEFB8", Offset = "0xEEEFB8", VA = "0xEEEFB8")]
	public FlashlightController()
	{
	}
}
[Token(Token = "0x20000A8")]
public class GrabObject : MonoBehaviour
{
	[Token(Token = "0x20000A9")]
	public enum ManipulationType
	{
		[Token(Token = "0x4000352")]
		Default,
		[Token(Token = "0x4000353")]
		ForcedHand,
		[Token(Token = "0x4000354")]
		DollyHand,
		[Token(Token = "0x4000355")]
		DollyAttached,
		[Token(Token = "0x4000356")]
		HorizontalScaled,
		[Token(Token = "0x4000357")]
		VerticalScaled,
		[Token(Token = "0x4000358")]
		Menu
	}

	[Token(Token = "0x20000AA")]
	public delegate void GrabbedObject(OVRInput.Controller grabHand);

	[Token(Token = "0x20000AB")]
	public delegate void ReleasedObject();

	[Token(Token = "0x20000AC")]
	public delegate void SetCursorPosition(Vector3 cursorPosition);

	[Token(Token = "0x4000349")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[TextArea]
	public string ObjectName;

	[Token(Token = "0x400034A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[TextArea]
	public string ObjectInstructions;

	[Token(Token = "0x400034B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ManipulationType objectManipulationType;

	[Token(Token = "0x400034C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool showLaserWhileGrabbed;

	[Token(Token = "0x400034D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public Quaternion grabbedRotation;

	[Token(Token = "0x400034E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GrabbedObject GrabbedObjectDelegate;

	[Token(Token = "0x400034F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ReleasedObject ReleasedObjectDelegate;

	[Token(Token = "0x4000350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public SetCursorPosition CursorPositionDelegate;

	[Token(Token = "0x6000322")]
	[Address(RVA = "0xEEF278", Offset = "0xEEF278", VA = "0xEEF278")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x6000323")]
	[Address(RVA = "0xEEF2D8", Offset = "0xEEF2D8", VA = "0xEEF2D8")]
	public void Release()
	{
	}

	[Token(Token = "0x6000324")]
	[Address(RVA = "0xEEF2F4", Offset = "0xEEF2F4", VA = "0xEEF2F4")]
	public void CursorPos(Vector3 cursorPos)
	{
	}

	[Token(Token = "0x6000325")]
	[Address(RVA = "0xEEF310", Offset = "0xEEF310", VA = "0xEEF310")]
	public GrabObject()
	{
	}
}
[Token(Token = "0x20000AD")]
public class HandMeshMask : MonoBehaviour
{
	[Token(Token = "0x4000359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRSkeleton referenceHand;

	[Token(Token = "0x400035A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material maskMaterial;

	[Token(Token = "0x400035B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The segments around the tip of a finger")]
	public int radialDivisions;

	[Token(Token = "0x400035C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("The fade range (finger width is 2x this)")]
	public float borderSize;

	[Token(Token = "0x400035D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Along the fingers, each knuckle scales down by this amount.  Default is zero for uniform width along entire finger.")]
	public float fingerTaper;

	[Token(Token = "0x400035E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Tooltip("Shorten the last bone of each finger; need this to account for bone structure (end bone is at finger tip instead of center). Default is 1.")]
	public float fingerTipLength;

	[Token(Token = "0x400035F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("Move the base of the 4 main fingers towards the tips, to avoid a visible mesh crack between finger webbing. Default is 0.")]
	public float webOffset;

	[Token(Token = "0x4000360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float handScale;

	[Token(Token = "0x4000361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject maskMeshObject;

	[Token(Token = "0x4000362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Mesh maskMesh;

	[Token(Token = "0x4000363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3[] handVertices;

	[Token(Token = "0x4000364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector2[] handUVs;

	[Token(Token = "0x4000365")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Color32[] handColors;

	[Token(Token = "0x4000366")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int[] handTriangles;

	[Token(Token = "0x4000367")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int vertCounter;

	[Token(Token = "0x4000368")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private int triCounter;

	[Token(Token = "0x6000332")]
	[Address(RVA = "0xEEF5C8", Offset = "0xEEF5C8", VA = "0xEEF5C8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000333")]
	[Address(RVA = "0xEEF828", Offset = "0xEEF828", VA = "0xEEF828")]
	private void Update()
	{
	}

	[Token(Token = "0x6000334")]
	[Address(RVA = "0xEEF9F0", Offset = "0xEEF9F0", VA = "0xEEF9F0")]
	private void CreateHandMesh()
	{
	}

	[Token(Token = "0x6000335")]
	[Address(RVA = "0xEF0044", Offset = "0xEF0044", VA = "0xEF0044")]
	private void AddKnuckleMesh(int knuckleVerts, float point1scale, float point2scale, Vector3 point1, Vector3 point2)
	{
	}

	[Token(Token = "0x6000336")]
	[Address(RVA = "0xEF05DC", Offset = "0xEF05DC", VA = "0xEF05DC")]
	private void AddPalmMesh(int knuckleVerts)
	{
	}

	[Token(Token = "0x6000337")]
	[Address(RVA = "0xEF28E4", Offset = "0xEF28E4", VA = "0xEF28E4")]
	private void AddVertex(Vector3 position, Vector2 uv, Color color)
	{
	}

	[Token(Token = "0x6000338")]
	[Address(RVA = "0xEF2C58", Offset = "0xEF2C58", VA = "0xEF2C58")]
	public HandMeshMask()
	{
	}
}
[Token(Token = "0x20000AE")]
public class HandMeshUI : MonoBehaviour
{
	[Token(Token = "0x4000369")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SphereCollider[] knobs;

	[Token(Token = "0x400036A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMesh[] readouts;

	[Token(Token = "0x400036B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int rightHeldKnob;

	[Token(Token = "0x400036C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int leftHeldKnob;

	[Token(Token = "0x400036D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public OVRSkeleton leftHand;

	[Token(Token = "0x400036E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public OVRSkeleton rightHand;

	[Token(Token = "0x400036F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public HandMeshMask leftMask;

	[Token(Token = "0x4000370")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public HandMeshMask rightMask;

	[Token(Token = "0x6000339")]
	[Address(RVA = "0xEF2C7C", Offset = "0xEF2C7C", VA = "0xEF2C7C")]
	private void Start()
	{
	}

	[Token(Token = "0x600033A")]
	[Address(RVA = "0xEF2FE4", Offset = "0xEF2FE4", VA = "0xEF2FE4")]
	private void Update()
	{
	}

	[Token(Token = "0x600033B")]
	[Address(RVA = "0xEF2D18", Offset = "0xEF2D18", VA = "0xEF2D18")]
	private void SetSliderValue(int sliderID, float value, bool isNormalized)
	{
	}

	[Token(Token = "0x600033C")]
	[Address(RVA = "0xEF344C", Offset = "0xEF344C", VA = "0xEF344C")]
	private void CheckForHands()
	{
	}

	[Token(Token = "0x600033D")]
	[Address(RVA = "0xEF39BC", Offset = "0xEF39BC", VA = "0xEF39BC")]
	public HandMeshUI()
	{
	}
}
[Token(Token = "0x20000AF")]
public class ObjectManipulator : MonoBehaviour
{
	[Token(Token = "0x20000B0")]
	[CompilerGenerated]
	private sealed class <StartDemo>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ObjectManipulator <>4__this;

		[Token(Token = "0x4000387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <timer>5__2;

		[Token(Token = "0x4000388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <fadeTime>5__3;

		[Token(Token = "0x1700005E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600034D")]
			[Address(RVA = "0xEF6264", Offset = "0xEF6264", VA = "0xEF6264", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600034F")]
			[Address(RVA = "0xEF62AC", Offset = "0xEF62AC", VA = "0xEF62AC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600034A")]
		[Address(RVA = "0xEF5BA4", Offset = "0xEF5BA4", VA = "0xEF5BA4")]
		[DebuggerHidden]
		public <StartDemo>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x600034B")]
		[Address(RVA = "0xEF5F8C", Offset = "0xEF5F8C", VA = "0xEF5F8C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600034C")]
		[Address(RVA = "0xEF5F90", Offset = "0xEF5F90", VA = "0xEF5F90", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600034E")]
		[Address(RVA = "0xEF626C", Offset = "0xEF626C", VA = "0xEF626C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRInput.Controller controller;

	[Token(Token = "0x4000372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject hoverObject;

	[Token(Token = "0x4000373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject grabObject;

	[Token(Token = "0x4000374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float grabTime;

	[Token(Token = "0x4000375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 localGrabOffset;

	[Token(Token = "0x4000376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Quaternion localGrabRotation;

	[Token(Token = "0x4000377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 camGrabPosition;

	[Token(Token = "0x4000378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Quaternion camGrabRotation;

	[Token(Token = "0x4000379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector3 handGrabPosition;

	[Token(Token = "0x400037A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Quaternion handGrabRotation;

	[Token(Token = "0x400037B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Vector3 cursorPosition;

	[Token(Token = "0x400037C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float rotationOffset;

	[Token(Token = "0x400037D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public LineRenderer laser;

	[Token(Token = "0x400037E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Transform objectInfo;

	[Token(Token = "0x400037F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public TextMesh objectNameLabel;

	[Token(Token = "0x4000380")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public TextMesh objectInstructionsLabel;

	[Token(Token = "0x4000381")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Image objectInfoBG;

	[Token(Token = "0x4000382")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public GameObject demoObjects;

	[Token(Token = "0x4000383")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public OVRPassthroughLayer passthrough;

	[Token(Token = "0x600033E")]
	[Address(RVA = "0xEF39CC", Offset = "0xEF39CC", VA = "0xEF39CC")]
	private void Start()
	{
	}

	[Token(Token = "0x600033F")]
	[Address(RVA = "0xEF3BC8", Offset = "0xEF3BC8", VA = "0xEF3BC8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000340")]
	[Address(RVA = "0xEF4B04", Offset = "0xEF4B04", VA = "0xEF4B04")]
	private void GrabHoverObject(GameObject grbObj, Vector3 controllerPos, Quaternion controllerRot)
	{
	}

	[Token(Token = "0x6000341")]
	[Address(RVA = "0xEF5898", Offset = "0xEF5898", VA = "0xEF5898")]
	private void ReleaseObject()
	{
	}

	[Token(Token = "0x6000342")]
	[Address(RVA = "0xEF3B54", Offset = "0xEF3B54", VA = "0xEF3B54")]
	[IteratorStateMachine(typeof(<StartDemo>d__23))]
	private IEnumerator StartDemo()
	{
		return null;
	}

	[Token(Token = "0x6000343")]
	[Address(RVA = "0xEF3E18", Offset = "0xEF3E18", VA = "0xEF3E18")]
	private void FindHoverObject(Vector3 controllerPos, Quaternion controllerRot)
	{
	}

	[Token(Token = "0x6000344")]
	[Address(RVA = "0xEF4DF8", Offset = "0xEF4DF8", VA = "0xEF4DF8")]
	private void ManipulateObject(GameObject obj, Vector3 controllerPos, Quaternion controllerRot)
	{
	}

	[Token(Token = "0x6000345")]
	[Address(RVA = "0xEF5BCC", Offset = "0xEF5BCC", VA = "0xEF5BCC")]
	private void ClampGrabOffset(ref Vector3 localOffset, float thumbY)
	{
	}

	[Token(Token = "0x6000346")]
	[Address(RVA = "0xEF5C80", Offset = "0xEF5C80", VA = "0xEF5C80")]
	private Vector3 ClampScale(Vector3 localScale, Vector2 thumb)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000347")]
	[Address(RVA = "0xEF5CB0", Offset = "0xEF5CB0", VA = "0xEF5CB0")]
	private void CheckForDominantHand()
	{
	}

	[Token(Token = "0x6000348")]
	[Address(RVA = "0xEF5A88", Offset = "0xEF5A88", VA = "0xEF5A88")]
	private void AssignInstructions(GrabObject targetObject)
	{
	}

	[Token(Token = "0x6000349")]
	[Address(RVA = "0xEF5DA0", Offset = "0xEF5DA0", VA = "0xEF5DA0")]
	public ObjectManipulator()
	{
	}
}
[Token(Token = "0x20000B1")]
public class OverlayPassthrough : MonoBehaviour
{
	[Token(Token = "0x4000389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x6000350")]
	[Address(RVA = "0xEF62B4", Offset = "0xEF62B4", VA = "0xEF62B4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000351")]
	[Address(RVA = "0xEF6420", Offset = "0xEF6420", VA = "0xEF6420")]
	private void Update()
	{
	}

	[Token(Token = "0x6000352")]
	[Address(RVA = "0xEF64D4", Offset = "0xEF64D4", VA = "0xEF64D4")]
	public OverlayPassthrough()
	{
	}
}
[Token(Token = "0x20000B2")]
public class PassthroughBrush : MonoBehaviour
{
	[Token(Token = "0x20000B3")]
	public enum BrushState
	{
		[Token(Token = "0x4000395")]
		Idle,
		[Token(Token = "0x4000396")]
		Inking
	}

	[Token(Token = "0x400038A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRInput.Controller controllerHand;

	[Token(Token = "0x400038B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject lineSegmentPrefab;

	[Token(Token = "0x400038C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject lineContainer;

	[Token(Token = "0x400038D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool forceActive;

	[Token(Token = "0x400038E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private LineRenderer currentLineSegment;

	[Token(Token = "0x400038F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<Vector3> inkPositions;

	[Token(Token = "0x4000390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float minInkDist;

	[Token(Token = "0x4000391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float strokeWidth;

	[Token(Token = "0x4000392")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float strokeLength;

	[Token(Token = "0x4000393")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private BrushState brushStatus;

	[Token(Token = "0x6000353")]
	[Address(RVA = "0xEF64DC", Offset = "0xEF64DC", VA = "0xEF64DC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000354")]
	[Address(RVA = "0xEF64E4", Offset = "0xEF64E4", VA = "0xEF64E4")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000355")]
	[Address(RVA = "0xEF6794", Offset = "0xEF6794", VA = "0xEF6794")]
	private void StartLine(Vector3 inkPos)
	{
	}

	[Token(Token = "0x6000356")]
	[Address(RVA = "0xEF69C8", Offset = "0xEF69C8", VA = "0xEF69C8")]
	private void UpdateLine(Vector3 inkPos)
	{
	}

	[Token(Token = "0x6000357")]
	[Address(RVA = "0xEF6C08", Offset = "0xEF6C08", VA = "0xEF6C08")]
	public void ClearLines()
	{
	}

	[Token(Token = "0x6000358")]
	[Address(RVA = "0xEF66AC", Offset = "0xEF66AC", VA = "0xEF66AC")]
	public void UndoInkLine()
	{
	}

	[Token(Token = "0x6000359")]
	[Address(RVA = "0xEF6CD8", Offset = "0xEF6CD8", VA = "0xEF6CD8")]
	public PassthroughBrush()
	{
	}
}
[Token(Token = "0x20000B4")]
public class PassthroughController : MonoBehaviour
{
	[Token(Token = "0x4000397")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x600035A")]
	[Address(RVA = "0xEF6D74", Offset = "0xEF6D74", VA = "0xEF6D74")]
	private void Start()
	{
	}

	[Token(Token = "0x600035B")]
	[Address(RVA = "0xEF6EE0", Offset = "0xEF6EE0", VA = "0xEF6EE0")]
	private void Update()
	{
	}

	[Token(Token = "0x600035C")]
	[Address(RVA = "0xEF70CC", Offset = "0xEF70CC", VA = "0xEF70CC")]
	public PassthroughController()
	{
	}
}
[Token(Token = "0x20000B5")]
public class PassthroughProjectionSurface : MonoBehaviour
{
	[Token(Token = "0x4000398")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x4000399")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshFilter projectionObject;

	[Token(Token = "0x400039A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private MeshRenderer quadOutline;

	[Token(Token = "0x600035D")]
	[Address(RVA = "0xEF70D4", Offset = "0xEF70D4", VA = "0xEF70D4")]
	private void Start()
	{
	}

	[Token(Token = "0x600035E")]
	[Address(RVA = "0xEF72BC", Offset = "0xEF72BC", VA = "0xEF72BC")]
	private void Update()
	{
	}

	[Token(Token = "0x600035F")]
	[Address(RVA = "0xEF745C", Offset = "0xEF745C", VA = "0xEF745C")]
	public PassthroughProjectionSurface()
	{
	}
}
[Token(Token = "0x20000B6")]
public class PassthroughStyler : MonoBehaviour
{
	[Token(Token = "0x20000B7")]
	[CompilerGenerated]
	private sealed class <FadeToCurrentStyle>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PassthroughStyler <>4__this;

		[Token(Token = "0x40003AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x40003AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <timer>5__2;

		[Token(Token = "0x40003AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <brightness>5__3;

		[Token(Token = "0x40003AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <contrast>5__4;

		[Token(Token = "0x40003B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Color <edgeCol>5__5;

		[Token(Token = "0x17000060")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000371")]
			[Address(RVA = "0xEF80B4", Offset = "0xEF80B4", VA = "0xEF80B4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000061")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000373")]
			[Address(RVA = "0xEF80FC", Offset = "0xEF80FC", VA = "0xEF80FC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600036E")]
		[Address(RVA = "0xEF7E1C", Offset = "0xEF7E1C", VA = "0xEF7E1C")]
		[DebuggerHidden]
		public <FadeToCurrentStyle>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x600036F")]
		[Address(RVA = "0xEF7F60", Offset = "0xEF7F60", VA = "0xEF7F60", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000370")]
		[Address(RVA = "0xEF7F64", Offset = "0xEF7F64", VA = "0xEF7F64", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000372")]
		[Address(RVA = "0xEF80BC", Offset = "0xEF80BC", VA = "0xEF80BC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000B8")]
	[CompilerGenerated]
	private sealed class <FadeToDefaultPassthrough>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PassthroughStyler <>4__this;

		[Token(Token = "0x40003B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x40003B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <timer>5__2;

		[Token(Token = "0x40003B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <brightness>5__3;

		[Token(Token = "0x40003B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <contrast>5__4;

		[Token(Token = "0x40003B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Color <edgeCol>5__5;

		[Token(Token = "0x17000062")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000377")]
			[Address(RVA = "0xEF8270", Offset = "0xEF8270", VA = "0xEF8270", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000063")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000379")]
			[Address(RVA = "0xEF82B8", Offset = "0xEF82B8", VA = "0xEF82B8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000374")]
		[Address(RVA = "0xEF7E44", Offset = "0xEF7E44", VA = "0xEF7E44")]
		[DebuggerHidden]
		public <FadeToDefaultPassthrough>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x6000375")]
		[Address(RVA = "0xEF8104", Offset = "0xEF8104", VA = "0xEF8104", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000376")]
		[Address(RVA = "0xEF8108", Offset = "0xEF8108", VA = "0xEF8108", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000378")]
		[Address(RVA = "0xEF8278", Offset = "0xEF8278", VA = "0xEF8278", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400039B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRInput.Controller controllerHand;

	[Token(Token = "0x400039C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x400039D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IEnumerator fadeIn;

	[Token(Token = "0x400039E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private IEnumerator fadeOut;

	[Token(Token = "0x400039F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public RectTransform[] menuOptions;

	[Token(Token = "0x40003A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public RectTransform colorWheel;

	[Token(Token = "0x40003A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Texture2D colorTexture;

	[Token(Token = "0x40003A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 cursorPosition;

	[Token(Token = "0x40003A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool settingColor;

	[Token(Token = "0x40003A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Color savedColor;

	[Token(Token = "0x40003A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float savedBrightness;

	[Token(Token = "0x40003A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float savedContrast;

	[Token(Token = "0x40003A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public CanvasGroup mainCanvas;

	[Token(Token = "0x40003A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject[] compactObjects;

	[Token(Token = "0x6000360")]
	[Address(RVA = "0xEF7464", Offset = "0xEF7464", VA = "0xEF7464")]
	private void Start()
	{
	}

	[Token(Token = "0x6000361")]
	[Address(RVA = "0xEF77A0", Offset = "0xEF77A0", VA = "0xEF77A0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000362")]
	[Address(RVA = "0xEF7B40", Offset = "0xEF7B40", VA = "0xEF7B40")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x6000363")]
	[Address(RVA = "0xEF7CB4", Offset = "0xEF7CB4", VA = "0xEF7CB4")]
	public void Release()
	{
	}

	[Token(Token = "0x6000364")]
	[Address(RVA = "0xEF7C30", Offset = "0xEF7C30", VA = "0xEF7C30")]
	[IteratorStateMachine(typeof(<FadeToCurrentStyle>d__18))]
	private IEnumerator FadeToCurrentStyle(float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x6000365")]
	[Address(RVA = "0xEF7D98", Offset = "0xEF7D98", VA = "0xEF7D98")]
	[IteratorStateMachine(typeof(<FadeToDefaultPassthrough>d__19))]
	private IEnumerator FadeToDefaultPassthrough(float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x6000366")]
	[Address(RVA = "0xEF7E6C", Offset = "0xEF7E6C", VA = "0xEF7E6C")]
	public void OnBrightnessChanged(float newValue)
	{
	}

	[Token(Token = "0x6000367")]
	[Address(RVA = "0xEF7E8C", Offset = "0xEF7E8C", VA = "0xEF7E8C")]
	public void OnContrastChanged(float newValue)
	{
	}

	[Token(Token = "0x6000368")]
	[Address(RVA = "0xEF7EAC", Offset = "0xEF7EAC", VA = "0xEF7EAC")]
	public void OnAlphaChanged(float newValue)
	{
	}

	[Token(Token = "0x6000369")]
	[Address(RVA = "0xEF7738", Offset = "0xEF7738", VA = "0xEF7738")]
	private void ShowFullMenu(bool doShow)
	{
	}

	[Token(Token = "0x600036A")]
	[Address(RVA = "0xEF7EE0", Offset = "0xEF7EE0", VA = "0xEF7EE0")]
	public void Cursor(Vector3 cP)
	{
	}

	[Token(Token = "0x600036B")]
	[Address(RVA = "0xEF7EEC", Offset = "0xEF7EEC", VA = "0xEF7EEC")]
	public void DoColorDrag(bool doDrag)
	{
	}

	[Token(Token = "0x600036C")]
	[Address(RVA = "0xEF77B8", Offset = "0xEF77B8", VA = "0xEF77B8")]
	public void GetColorFromWheel()
	{
	}

	[Token(Token = "0x600036D")]
	[Address(RVA = "0xEF7EF8", Offset = "0xEF7EF8", VA = "0xEF7EF8")]
	public PassthroughStyler()
	{
	}
}
[Token(Token = "0x20000B9")]
public class PassthroughSurface : MonoBehaviour
{
	[Token(Token = "0x40003B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x40003BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshFilter projectionObject;

	[Token(Token = "0x600037A")]
	[Address(RVA = "0xEF82C0", Offset = "0xEF82C0", VA = "0xEF82C0")]
	private void Start()
	{
	}

	[Token(Token = "0x600037B")]
	[Address(RVA = "0xEF8374", Offset = "0xEF8374", VA = "0xEF8374")]
	public PassthroughSurface()
	{
	}
}
[Token(Token = "0x20000BA")]
public class SceneSampler : MonoBehaviour
{
	[Token(Token = "0x40003BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int currentSceneIndex;

	[Token(Token = "0x40003BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject displayText;

	[Token(Token = "0x600037C")]
	[Address(RVA = "0xEF837C", Offset = "0xEF837C", VA = "0xEF837C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600037D")]
	[Address(RVA = "0xEF83E8", Offset = "0xEF83E8", VA = "0xEF83E8")]
	private void Update()
	{
	}

	[Token(Token = "0x600037E")]
	[Address(RVA = "0xEF86DC", Offset = "0xEF86DC", VA = "0xEF86DC")]
	public SceneSampler()
	{
	}
}
[Token(Token = "0x20000BB")]
public class SelectivePassthroughExperience : MonoBehaviour
{
	[Token(Token = "0x40003BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject leftMaskObject;

	[Token(Token = "0x40003BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject rightMaskObject;

	[Token(Token = "0x600037F")]
	[Address(RVA = "0xEF86E4", Offset = "0xEF86E4", VA = "0xEF86E4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000380")]
	[Address(RVA = "0xEF8B38", Offset = "0xEF8B38", VA = "0xEF8B38")]
	public SelectivePassthroughExperience()
	{
	}
}
[Token(Token = "0x20000BC")]
public class SPPquad : MonoBehaviour
{
	[Token(Token = "0x40003BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x40003C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshFilter projectionObject;

	[Token(Token = "0x40003C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVRInput.Controller controllerHand;

	[Token(Token = "0x6000381")]
	[Address(RVA = "0xEF8B40", Offset = "0xEF8B40", VA = "0xEF8B40")]
	private void Start()
	{
	}

	[Token(Token = "0x6000382")]
	[Address(RVA = "0xEF8DA0", Offset = "0xEF8DA0", VA = "0xEF8DA0")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x6000383")]
	[Address(RVA = "0xEF8DEC", Offset = "0xEF8DEC", VA = "0xEF8DEC")]
	public void Release()
	{
	}

	[Token(Token = "0x6000384")]
	[Address(RVA = "0xEF8E2C", Offset = "0xEF8E2C", VA = "0xEF8E2C")]
	public SPPquad()
	{
	}
}
[Token(Token = "0x20000BD")]
public class BouncingBallLogic : MonoBehaviour
{
	[Token(Token = "0x20000BE")]
	[CompilerGenerated]
	private sealed class <PlayPopCallback>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float clipLength;

		[Token(Token = "0x40003D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BouncingBallLogic <>4__this;

		[Token(Token = "0x17000064")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000390")]
			[Address(RVA = "0xEF9548", Offset = "0xEF9548", VA = "0xEF9548", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000065")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000392")]
			[Address(RVA = "0xEF9590", Offset = "0xEF9590", VA = "0xEF9590", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600038D")]
		[Address(RVA = "0xEF9410", Offset = "0xEF9410", VA = "0xEF9410")]
		[DebuggerHidden]
		public <PlayPopCallback>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x600038E")]
		[Address(RVA = "0xEF9450", Offset = "0xEF9450", VA = "0xEF9450", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600038F")]
		[Address(RVA = "0xEF9454", Offset = "0xEF9454", VA = "0xEF9454", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000391")]
		[Address(RVA = "0xEF9550", Offset = "0xEF9550", VA = "0xEF9550", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float TTL;

	[Token(Token = "0x40003C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AudioClip pop;

	[Token(Token = "0x40003C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AudioClip bounce;

	[Token(Token = "0x40003C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioClip loadball;

	[Token(Token = "0x40003C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Material visibleMat;

	[Token(Token = "0x40003C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Material hiddenMat;

	[Token(Token = "0x40003C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private AudioSource audioSource;

	[Token(Token = "0x40003C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform centerEyeCamera;

	[Token(Token = "0x40003CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool isVisible;

	[Token(Token = "0x40003CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float timer;

	[Token(Token = "0x40003CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool isReleased;

	[Token(Token = "0x40003CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	private bool isReadyForDestroy;

	[Token(Token = "0x6000385")]
	[Address(RVA = "0xEF8E34", Offset = "0xEF8E34", VA = "0xEF8E34")]
	private void OnCollisionEnter()
	{
	}

	[Token(Token = "0x6000386")]
	[Address(RVA = "0xEF8E58", Offset = "0xEF8E58", VA = "0xEF8E58")]
	private void Start()
	{
	}

	[Token(Token = "0x6000387")]
	[Address(RVA = "0xEF8F60", Offset = "0xEF8F60", VA = "0xEF8F60")]
	private void Update()
	{
	}

	[Token(Token = "0x6000388")]
	[Address(RVA = "0xEF9004", Offset = "0xEF9004", VA = "0xEF9004")]
	private void UpdateVisibility()
	{
	}

	[Token(Token = "0x6000389")]
	[Address(RVA = "0xEF9258", Offset = "0xEF9258", VA = "0xEF9258")]
	private void SetVisible(bool setVisible)
	{
	}

	[Token(Token = "0x600038A")]
	[Address(RVA = "0xEF92FC", Offset = "0xEF92FC", VA = "0xEF92FC")]
	public void Release(Vector3 pos, Vector3 vel, Vector3 angVel)
	{
	}

	[Token(Token = "0x600038B")]
	[Address(RVA = "0xEF91D4", Offset = "0xEF91D4", VA = "0xEF91D4")]
	[IteratorStateMachine(typeof(<PlayPopCallback>d__18))]
	private IEnumerator PlayPopCallback(float clipLength)
	{
		return null;
	}

	[Token(Token = "0x600038C")]
	[Address(RVA = "0xEF9438", Offset = "0xEF9438", VA = "0xEF9438")]
	public BouncingBallLogic()
	{
	}
}
[Token(Token = "0x20000BF")]
public class BouncingBallMgr : MonoBehaviour
{
	[Token(Token = "0x40003D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform trackingspace;

	[Token(Token = "0x40003D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject rightControllerPivot;

	[Token(Token = "0x40003D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private OVRInput.RawButton actionBtn;

	[Token(Token = "0x40003D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject ball;

	[Token(Token = "0x40003D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject currentBall;

	[Token(Token = "0x40003D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool ballGrabbed;

	[Token(Token = "0x6000393")]
	[Address(RVA = "0xEF9598", Offset = "0xEF9598", VA = "0xEF9598")]
	private void Update()
	{
	}

	[Token(Token = "0x6000394")]
	[Address(RVA = "0xEF98A8", Offset = "0xEF98A8", VA = "0xEF98A8")]
	public BouncingBallMgr()
	{
	}
}
[Token(Token = "0x20000C0")]
[DefaultExecutionOrder(30)]
[RequireComponent(typeof(OVRSceneAnchor))]
public class FurnitureSpawner : MonoBehaviour
{
	[Token(Token = "0x40003D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Add a point at ceiling.")]
	public GameObject RoomLightPrefab;

	[Token(Token = "0x40003D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<Spawnable> SpawnablePrefabs;

	[Token(Token = "0x40003DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVRSceneAnchor _sceneAnchor;

	[Token(Token = "0x40003DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private OVRSemanticClassification _classification;

	[Token(Token = "0x40003DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static GameObject _roomLightRef;

	[Token(Token = "0x40003DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int _frameCounter;

	[Token(Token = "0x6000395")]
	[Address(RVA = "0xEF98B0", Offset = "0xEF98B0", VA = "0xEF98B0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000396")]
	[Address(RVA = "0xEF9AC8", Offset = "0xEF9AC8", VA = "0xEF9AC8")]
	private void SpawnSpawnable()
	{
	}

	[Token(Token = "0x6000397")]
	[Address(RVA = "0xEF9F38", Offset = "0xEF9F38", VA = "0xEF9F38")]
	private bool FindValidSpawnable(out Spawnable currentSpawnable)
	{
		return default(bool);
	}

	[Token(Token = "0x6000398")]
	[Address(RVA = "0xEF9950", Offset = "0xEF9950", VA = "0xEF9950")]
	private void AddRoomLight()
	{
	}

	[Token(Token = "0x6000399")]
	[Address(RVA = "0xEFA158", Offset = "0xEFA158", VA = "0xEFA158")]
	private void GetVolumeFromTopPlane(Transform plane, Vector2 dimensions, float height, out Vector3 position, out Quaternion rotation, out Vector3 localScale)
	{
	}

	[Token(Token = "0x600039A")]
	[Address(RVA = "0xEFA644", Offset = "0xEFA644", VA = "0xEFA644")]
	public FurnitureSpawner()
	{
	}
}
[Token(Token = "0x20000C1")]
public class MyCustomSceneModelLoader : OVRSceneModelLoader
{
	[Token(Token = "0x20000C2")]
	[CompilerGenerated]
	private sealed class <DelayedLoad>d__0 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MyCustomSceneModelLoader <>4__this;

		[Token(Token = "0x17000066")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003A2")]
			[Address(RVA = "0xEFA878", Offset = "0xEFA878", VA = "0xEFA878", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000067")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003A4")]
			[Address(RVA = "0xEFA8C0", Offset = "0xEFA8C0", VA = "0xEFA8C0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600039F")]
		[Address(RVA = "0xEFA6C0", Offset = "0xEFA6C0", VA = "0xEFA6C0")]
		[DebuggerHidden]
		public <DelayedLoad>d__0(int <>1__state)
		{
		}

		[Token(Token = "0x60003A0")]
		[Address(RVA = "0xEFA778", Offset = "0xEFA778", VA = "0xEFA778", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003A1")]
		[Address(RVA = "0xEFA77C", Offset = "0xEFA77C", VA = "0xEFA77C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003A3")]
		[Address(RVA = "0xEFA880", Offset = "0xEFA880", VA = "0xEFA880", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x600039B")]
	[Address(RVA = "0xEFA64C", Offset = "0xEFA64C", VA = "0xEFA64C")]
	[IteratorStateMachine(typeof(<DelayedLoad>d__0))]
	private IEnumerator DelayedLoad()
	{
		return null;
	}

	[Token(Token = "0x600039C")]
	[Address(RVA = "0xEFA6E8", Offset = "0xEFA6E8", VA = "0xEFA6E8", Slot = "4")]
	protected override void OnStart()
	{
	}

	[Token(Token = "0x600039D")]
	[Address(RVA = "0xEFA708", Offset = "0xEFA708", VA = "0xEFA708", Slot = "6")]
	protected override void OnNoSceneModelToLoad()
	{
	}

	[Token(Token = "0x600039E")]
	[Address(RVA = "0xEFA770", Offset = "0xEFA770", VA = "0xEFA770")]
	public MyCustomSceneModelLoader()
	{
	}
}
[Token(Token = "0x20000C3")]
[RequireComponent(typeof(OVRManager))]
public class PassthroughPlayInEditor : MonoBehaviour
{
	[Token(Token = "0x60003A5")]
	[Address(RVA = "0xEFA8C8", Offset = "0xEFA8C8", VA = "0xEFA8C8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003A6")]
	[Address(RVA = "0xEFA8CC", Offset = "0xEFA8CC", VA = "0xEFA8CC")]
	public PassthroughPlayInEditor()
	{
	}
}
[Token(Token = "0x20000C4")]
public class RequestCaptureFlow : MonoBehaviour
{
	[Token(Token = "0x40003E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRInput.Button RequestCaptureBtn;

	[Token(Token = "0x40003E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private OVRSceneManager _sceneManager;

	[Token(Token = "0x60003A7")]
	[Address(RVA = "0xEFA8D4", Offset = "0xEFA8D4", VA = "0xEFA8D4")]
	private void Start()
	{
	}

	[Token(Token = "0x60003A8")]
	[Address(RVA = "0xEFA94C", Offset = "0xEFA94C", VA = "0xEFA94C")]
	private void Update()
	{
	}

	[Token(Token = "0x60003A9")]
	[Address(RVA = "0xEFA9D0", Offset = "0xEFA9D0", VA = "0xEFA9D0")]
	public RequestCaptureFlow()
	{
	}
}
[Token(Token = "0x20000C5")]
[ExecuteInEditMode]
public class SimpleResizable : MonoBehaviour
{
	[Token(Token = "0x20000C6")]
	public enum Method
	{
		[Token(Token = "0x40003F2")]
		Adapt,
		[Token(Token = "0x40003F3")]
		AdaptWithAsymmetricalPadding,
		[Token(Token = "0x40003F4")]
		Scale,
		[Token(Token = "0x40003F5")]
		None
	}

	[Token(Token = "0x40003E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Space(15f)]
	public Method ScalingX;

	[Token(Token = "0x40003E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(0f, 0.5f)]
	public float PaddingX;

	[Token(Token = "0x40003E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Range(-0.5f, 0f)]
	public float PaddingXMax;

	[Token(Token = "0x40003E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Space(15f)]
	public Method ScalingY;

	[Token(Token = "0x40003E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Range(0f, 0.5f)]
	public float PaddingY;

	[Token(Token = "0x40003E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Range(-0.5f, 0f)]
	public float PaddingYMax;

	[Token(Token = "0x40003E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Space(15f)]
	public Method ScalingZ;

	[Token(Token = "0x40003EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Range(0f, 0.5f)]
	public float PaddingZ;

	[Token(Token = "0x40003EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Range(-0.5f, 0f)]
	public float PaddingZMax;

	[Token(Token = "0x40003EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Bounds _bounds;

	[Token(Token = "0x40003F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Transform _pivotTransform;

	[Token(Token = "0x17000068")]
	public Vector3 PivotPosition
	{
		[Token(Token = "0x60003AA")]
		[Address(RVA = "0xEFA9E0", Offset = "0xEFA9E0", VA = "0xEFA9E0")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000069")]
	public Vector3 NewSize
	{
		[Token(Token = "0x60003AB")]
		[Address(RVA = "0xEFA9FC", Offset = "0xEFA9FC", VA = "0xEFA9FC")]
		[CompilerGenerated]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x60003AC")]
		[Address(RVA = "0xEFAA08", Offset = "0xEFAA08", VA = "0xEFAA08")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700006A")]
	public Vector3 DefaultSize
	{
		[Token(Token = "0x60003AD")]
		[Address(RVA = "0xEFAA14", Offset = "0xEFAA14", VA = "0xEFAA14")]
		[CompilerGenerated]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x60003AE")]
		[Address(RVA = "0xEFAA20", Offset = "0xEFAA20", VA = "0xEFAA20")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700006B")]
	public Mesh Mesh
	{
		[Token(Token = "0x60003AF")]
		[Address(RVA = "0xEFAA2C", Offset = "0xEFAA2C", VA = "0xEFAA2C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60003B0")]
		[Address(RVA = "0xEFAA34", Offset = "0xEFAA34", VA = "0xEFAA34")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60003B1")]
	[Address(RVA = "0xEFAA3C", Offset = "0xEFAA3C", VA = "0xEFAA3C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003B2")]
	[Address(RVA = "0xEFAB78", Offset = "0xEFAB78", VA = "0xEFAB78")]
	public SimpleResizable()
	{
	}
}
[Token(Token = "0x20000C7")]
public class SimpleResizer
{
	[Token(Token = "0x60003B3")]
	[Address(RVA = "0xEFA2B0", Offset = "0xEFA2B0", VA = "0xEFA2B0")]
	public void CreateResizedObject(Vector3 newSize, GameObject parent, SimpleResizable sourcePrefab)
	{
	}

	[Token(Token = "0x60003B4")]
	[Address(RVA = "0xEFAB80", Offset = "0xEFAB80", VA = "0xEFAB80")]
	private Mesh ProcessVertices(SimpleResizable resizable, Vector3 newSize)
	{
		return null;
	}

	[Token(Token = "0x60003B5")]
	[Address(RVA = "0xEFAE04", Offset = "0xEFAE04", VA = "0xEFAE04")]
	private float CalculateNewVertexPosition(SimpleResizable.Method resizeMethod, float currentPosition, float currentSize, float newSize, float padding, float paddingMax, float pivot)
	{
		return default(float);
	}

	[Token(Token = "0x60003B6")]
	[Address(RVA = "0xEFA2A8", Offset = "0xEFA2A8", VA = "0xEFA2A8")]
	public SimpleResizer()
	{
	}
}
[Serializable]
[Token(Token = "0x20000C8")]
public class Spawnable : ISerializationCallbackReceiver
{
	[Token(Token = "0x40003F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public SimpleResizable ResizablePrefab;

	[Token(Token = "0x40003F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string ClassificationLabel;

	[Token(Token = "0x40003F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private int _editorClassificationIndex;

	[Token(Token = "0x60003B7")]
	[Address(RVA = "0xEFAEAC", Offset = "0xEFAEAC", VA = "0xEFAEAC", Slot = "4")]
	public void OnBeforeSerialize()
	{
	}

	[Token(Token = "0x60003B8")]
	[Address(RVA = "0xEFAEB0", Offset = "0xEFAEB0", VA = "0xEFAEB0", Slot = "5")]
	public void OnAfterDeserialize()
	{
	}

	[Token(Token = "0x60003B9")]
	[Address(RVA = "0xEFB318", Offset = "0xEFB318", VA = "0xEFB318")]
	public Spawnable()
	{
	}
}
[Token(Token = "0x20000C9")]
[RequireComponent(typeof(OVRSceneAnchor))]
public class VolumeAndPlaneSwitcher : MonoBehaviour
{
	[Token(Token = "0x20000CA")]
	public enum GeometryType
	{
		[Token(Token = "0x40003FD")]
		Plane,
		[Token(Token = "0x40003FE")]
		Volume
	}

	[Serializable]
	[Token(Token = "0x20000CB")]
	public struct LabelGeometryPair
	{
		[Token(Token = "0x40003FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string label;

		[Token(Token = "0x4000400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public GeometryType desiredGeometryType;
	}

	[Token(Token = "0x40003F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRSceneAnchor planePrefab;

	[Token(Token = "0x40003FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVRSceneAnchor volumePrefab;

	[Token(Token = "0x40003FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<LabelGeometryPair> desiredSwitches;

	[Token(Token = "0x60003BB")]
	[Address(RVA = "0xEFB370", Offset = "0xEFB370", VA = "0xEFB370")]
	private void ReplaceAnchor(OVRSceneAnchor prefab, Vector3 position, Quaternion rotation, Vector3 localScale)
	{
	}

	[Token(Token = "0x60003BC")]
	[Address(RVA = "0xEFB79C", Offset = "0xEFB79C", VA = "0xEFB79C")]
	private void Start()
	{
	}

	[Token(Token = "0x60003BD")]
	[Address(RVA = "0xEFC0D4", Offset = "0xEFC0D4", VA = "0xEFC0D4")]
	private void GetVolumeFromTopPlane(Transform plane, Vector2 dimensions, float height, out Vector3 position, out Quaternion rotation, out Vector3 localScale)
	{
	}

	[Token(Token = "0x60003BE")]
	[Address(RVA = "0xEFBFAC", Offset = "0xEFBFAC", VA = "0xEFBFAC")]
	private void GetTopPlaneFromVolume(Transform volume, Vector3 dimensions, out Vector3 position, out Quaternion rotation, out Vector3 localScale)
	{
	}

	[Token(Token = "0x60003BF")]
	[Address(RVA = "0xEFC154", Offset = "0xEFC154", VA = "0xEFC154")]
	public VolumeAndPlaneSwitcher()
	{
	}
}
[Token(Token = "0x20000CC")]
[RequireComponent(typeof(OVRSpatialAnchor))]
public class Anchor : MonoBehaviour
{
	[Token(Token = "0x20000CD")]
	[CompilerGenerated]
	private sealed class <Start>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Anchor <>4__this;

		[Token(Token = "0x1700006D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003D3")]
			[Address(RVA = "0xEFCF1C", Offset = "0xEFCF1C", VA = "0xEFCF1C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003D5")]
			[Address(RVA = "0xEFCF64", Offset = "0xEFCF64", VA = "0xEFCF64", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003D0")]
		[Address(RVA = "0xEFC350", Offset = "0xEFC350", VA = "0xEFC350")]
		[DebuggerHidden]
		public <Start>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x60003D1")]
		[Address(RVA = "0xEFCDA0", Offset = "0xEFCDA0", VA = "0xEFCDA0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003D2")]
		[Address(RVA = "0xEFCDA4", Offset = "0xEFCDA4", VA = "0xEFCDA4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003D4")]
		[Address(RVA = "0xEFCF24", Offset = "0xEFCF24", VA = "0xEFCF24", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000401")]
	public const string NumUuidsPlayerPref = "numUuids";

	[Token(Token = "0x4000402")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[FormerlySerializedAs("canvas_")]
	[SerializeField]
	private Canvas _canvas;

	[Token(Token = "0x4000403")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[FormerlySerializedAs("pivot_")]
	private Transform _pivot;

	[Token(Token = "0x4000404")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[FormerlySerializedAs("anchorMenu_")]
	[SerializeField]
	private GameObject _anchorMenu;

	[Token(Token = "0x4000405")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool _isSelected;

	[Token(Token = "0x4000406")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool _isHovered;

	[Token(Token = "0x4000407")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[FormerlySerializedAs("anchorName_")]
	[SerializeField]
	private TextMeshProUGUI _anchorName;

	[Token(Token = "0x4000408")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[FormerlySerializedAs("saveIcon_")]
	[SerializeField]
	private GameObject _saveIcon;

	[Token(Token = "0x4000409")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[FormerlySerializedAs("labelImage_")]
	private Image _labelImage;

	[Token(Token = "0x400040A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[FormerlySerializedAs("labelBaseColor_")]
	[SerializeField]
	private Color _labelBaseColor;

	[Token(Token = "0x400040B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[FormerlySerializedAs("labelHighlightColor_")]
	[SerializeField]
	private Color _labelHighlightColor;

	[Token(Token = "0x400040C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	[FormerlySerializedAs("labelSelectedColor_")]
	private Color _labelSelectedColor;

	[Token(Token = "0x400040D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	[FormerlySerializedAs("uiManager_")]
	private AnchorUIManager _uiManager;

	[Token(Token = "0x400040E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[FormerlySerializedAs("renderers_")]
	[SerializeField]
	private MeshRenderer[] _renderers;

	[Token(Token = "0x400040F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private int _menuIndex;

	[Token(Token = "0x4000410")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[FormerlySerializedAs("buttonList_")]
	[SerializeField]
	private List<Button> _buttonList;

	[Token(Token = "0x4000411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Button _selectedButton;

	[Token(Token = "0x4000412")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private OVRSpatialAnchor _spatialAnchor;

	[Token(Token = "0x4000413")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private GameObject _icon;

	[Token(Token = "0x1700006C")]
	public bool ShowSaveIcon
	{
		[Token(Token = "0x60003C6")]
		[Address(RVA = "0xEFC7FC", Offset = "0xEFC7FC", VA = "0xEFC7FC")]
		set
		{
		}
	}

	[Token(Token = "0x60003C0")]
	[Address(RVA = "0xEFC15C", Offset = "0xEFC15C", VA = "0xEFC15C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003C1")]
	[Address(RVA = "0xEFC2DC", Offset = "0xEFC2DC", VA = "0xEFC2DC")]
	[IteratorStateMachine(typeof(<Start>d__20))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60003C2")]
	[Address(RVA = "0xEFC378", Offset = "0xEFC378", VA = "0xEFC378")]
	private void Update()
	{
	}

	[Token(Token = "0x60003C3")]
	[Address(RVA = "0xEFC5F0", Offset = "0xEFC5F0", VA = "0xEFC5F0")]
	public void OnSaveLocalButtonPressed()
	{
	}

	[Token(Token = "0x60003C4")]
	[Address(RVA = "0xEFC6C0", Offset = "0xEFC6C0", VA = "0xEFC6C0")]
	public void OnHideButtonPressed()
	{
	}

	[Token(Token = "0x60003C5")]
	[Address(RVA = "0xEFC72C", Offset = "0xEFC72C", VA = "0xEFC72C")]
	public void OnEraseButtonPressed()
	{
	}

	[Token(Token = "0x60003C7")]
	[Address(RVA = "0xEFC81C", Offset = "0xEFC81C", VA = "0xEFC81C")]
	public void OnHoverStart()
	{
	}

	[Token(Token = "0x60003C8")]
	[Address(RVA = "0xEFC938", Offset = "0xEFC938", VA = "0xEFC938")]
	public void OnHoverEnd()
	{
	}

	[Token(Token = "0x60003C9")]
	[Address(RVA = "0xEFCA40", Offset = "0xEFCA40", VA = "0xEFCA40")]
	public void OnSelect()
	{
	}

	[Token(Token = "0x60003CA")]
	[Address(RVA = "0xEFC3C8", Offset = "0xEFC3C8", VA = "0xEFC3C8")]
	private void BillboardPanel(Transform panel)
	{
	}

	[Token(Token = "0x60003CB")]
	[Address(RVA = "0xEFC4FC", Offset = "0xEFC4FC", VA = "0xEFC4FC")]
	private void HandleMenuNavigation()
	{
	}

	[Token(Token = "0x60003CC")]
	[Address(RVA = "0xEFCB10", Offset = "0xEFCB10", VA = "0xEFCB10")]
	private void NavigateToIndexInMenu(bool moveNext)
	{
	}

	[Token(Token = "0x60003CD")]
	[Address(RVA = "0xEFCC48", Offset = "0xEFCC48", VA = "0xEFCC48")]
	public Anchor()
	{
	}
}
[Token(Token = "0x20000CE")]
[RequireComponent(typeof(SpatialAnchorLoader))]
public class AnchorUIManager : MonoBehaviour
{
	[Token(Token = "0x20000CF")]
	public enum AnchorMode
	{
		[Token(Token = "0x400042A")]
		Create,
		[Token(Token = "0x400042B")]
		Select
	}

	[Token(Token = "0x20000D0")]
	private delegate void PrimaryPressDelegate();

	[Token(Token = "0x4000417")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static AnchorUIManager Instance;

	[Token(Token = "0x4000418")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[FormerlySerializedAs("createModeButton_")]
	private GameObject _createModeButton;

	[Token(Token = "0x4000419")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[FormerlySerializedAs("selectModeButton_")]
	private GameObject _selectModeButton;

	[Token(Token = "0x400041A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[FormerlySerializedAs("trackedDevice_")]
	[SerializeField]
	private Transform _trackedDevice;

	[Token(Token = "0x400041B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform _raycastOrigin;

	[Token(Token = "0x400041C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool _drawRaycast;

	[Token(Token = "0x400041D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[FormerlySerializedAs("lineRenderer_")]
	private LineRenderer _lineRenderer;

	[Token(Token = "0x400041E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Anchor _hoveredAnchor;

	[Token(Token = "0x400041F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Anchor _selectedAnchor;

	[Token(Token = "0x4000420")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private AnchorMode _mode;

	[Token(Token = "0x4000421")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[FormerlySerializedAs("buttonList_")]
	private List<Button> _buttonList;

	[Token(Token = "0x4000422")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int _menuIndex;

	[Token(Token = "0x4000423")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Button _selectedButton;

	[Token(Token = "0x4000424")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Anchor _anchorPrefab;

	[Token(Token = "0x4000425")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	[FormerlySerializedAs("placementPreview_")]
	private GameObject _placementPreview;

	[Token(Token = "0x4000426")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	[FormerlySerializedAs("anchorPlacementTransform_")]
	private Transform _anchorPlacementTransform;

	[Token(Token = "0x4000427")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private PrimaryPressDelegate _primaryPressDelegate;

	[Token(Token = "0x4000428")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool _isFocused;

	[Token(Token = "0x1700006F")]
	public Anchor AnchorPrefab
	{
		[Token(Token = "0x60003D6")]
		[Address(RVA = "0xEFCF6C", Offset = "0xEFCF6C", VA = "0xEFCF6C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60003D7")]
	[Address(RVA = "0xEFCF74", Offset = "0xEFCF74", VA = "0xEFCF74")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003D8")]
	[Address(RVA = "0xEFD040", Offset = "0xEFD040", VA = "0xEFD040")]
	private void Start()
	{
	}

	[Token(Token = "0x60003D9")]
	[Address(RVA = "0xEFD190", Offset = "0xEFD190", VA = "0xEFD190")]
	private void Update()
	{
	}

	[Token(Token = "0x60003DA")]
	[Address(RVA = "0xEFD600", Offset = "0xEFD600", VA = "0xEFD600")]
	public void OnCreateModeButtonPressed()
	{
	}

	[Token(Token = "0x60003DB")]
	[Address(RVA = "0xEFD66C", Offset = "0xEFD66C", VA = "0xEFD66C")]
	public void OnLoadAnchorsButtonPressed()
	{
	}

	[Token(Token = "0x60003DC")]
	[Address(RVA = "0xEFD128", Offset = "0xEFD128", VA = "0xEFD128")]
	private void ToggleCreateMode()
	{
	}

	[Token(Token = "0x60003DD")]
	[Address(RVA = "0xEFD8EC", Offset = "0xEFD8EC", VA = "0xEFD8EC")]
	private void StartPlacementMode()
	{
	}

	[Token(Token = "0x60003DE")]
	[Address(RVA = "0xEFD974", Offset = "0xEFD974", VA = "0xEFD974")]
	private void EndPlacementMode()
	{
	}

	[Token(Token = "0x60003DF")]
	[Address(RVA = "0xEFD994", Offset = "0xEFD994", VA = "0xEFD994")]
	private void StartSelectMode()
	{
	}

	[Token(Token = "0x60003E0")]
	[Address(RVA = "0xEFD8CC", Offset = "0xEFD8CC", VA = "0xEFD8CC")]
	private void EndSelectMode()
	{
	}

	[Token(Token = "0x60003E1")]
	[Address(RVA = "0xEFD50C", Offset = "0xEFD50C", VA = "0xEFD50C")]
	private void HandleMenuNavigation()
	{
	}

	[Token(Token = "0x60003E2")]
	[Address(RVA = "0xEFDB94", Offset = "0xEFDB94", VA = "0xEFDB94")]
	private void NavigateToIndexInMenu(bool moveNext)
	{
	}

	[Token(Token = "0x60003E3")]
	[Address(RVA = "0xEFDA1C", Offset = "0xEFDA1C", VA = "0xEFDA1C")]
	private void ShowAnchorPreview()
	{
	}

	[Token(Token = "0x60003E4")]
	[Address(RVA = "0xEFDB08", Offset = "0xEFDB08", VA = "0xEFDB08")]
	private void HideAnchorPreview()
	{
	}

	[Token(Token = "0x60003E5")]
	[Address(RVA = "0xEFDC94", Offset = "0xEFDC94", VA = "0xEFDC94")]
	private void PlaceAnchor()
	{
	}

	[Token(Token = "0x60003E6")]
	[Address(RVA = "0xEFDB28", Offset = "0xEFDB28", VA = "0xEFDB28")]
	private void ShowRaycastLine()
	{
	}

	[Token(Token = "0x60003E7")]
	[Address(RVA = "0xEFDB60", Offset = "0xEFDB60", VA = "0xEFDB60")]
	private void HideRaycastLine()
	{
	}

	[Token(Token = "0x60003E8")]
	[Address(RVA = "0xEFD290", Offset = "0xEFD290", VA = "0xEFD290")]
	private void ControllerRaycast()
	{
	}

	[Token(Token = "0x60003E9")]
	[Address(RVA = "0xEFDD80", Offset = "0xEFDD80", VA = "0xEFDD80")]
	private void HoverAnchor(Anchor anchor)
	{
	}

	[Token(Token = "0x60003EA")]
	[Address(RVA = "0xEFDDA8", Offset = "0xEFDDA8", VA = "0xEFDDA8")]
	private void UnhoverAnchor()
	{
	}

	[Token(Token = "0x60003EB")]
	[Address(RVA = "0xEFDE38", Offset = "0xEFDE38", VA = "0xEFDE38")]
	private void SelectAnchor()
	{
	}

	[Token(Token = "0x60003EC")]
	[Address(RVA = "0xEFDF80", Offset = "0xEFDF80", VA = "0xEFDF80")]
	public AnchorUIManager()
	{
	}
}
[Token(Token = "0x20000D1")]
public class SpatialAnchorLoader : MonoBehaviour
{
	[Token(Token = "0x400042C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private OVRSpatialAnchor _anchorPrefab;

	[Token(Token = "0x400042D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Action<OVRSpatialAnchor.UnboundAnchor, bool> _onLoadAnchor;

	[Token(Token = "0x60003F1")]
	[Address(RVA = "0xEFD6C0", Offset = "0xEFD6C0", VA = "0xEFD6C0")]
	public void LoadAnchorsByUuid()
	{
	}

	[Token(Token = "0x60003F2")]
	[Address(RVA = "0xEFE13C", Offset = "0xEFE13C", VA = "0xEFE13C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003F3")]
	[Address(RVA = "0xEFE05C", Offset = "0xEFE05C", VA = "0xEFE05C")]
	private void Load(OVRSpatialAnchor.LoadOptions options)
	{
	}

	[Token(Token = "0x60003F4")]
	[Address(RVA = "0xEFE1C0", Offset = "0xEFE1C0", VA = "0xEFE1C0")]
	private void OnLocalized(OVRSpatialAnchor.UnboundAnchor unboundAnchor, bool success)
	{
	}

	[Token(Token = "0x60003F5")]
	[Address(RVA = "0xEFDFD0", Offset = "0xEFDFD0", VA = "0xEFDFD0")]
	private static void Log(string message)
	{
	}

	[Token(Token = "0x60003F6")]
	[Address(RVA = "0xEFE370", Offset = "0xEFE370", VA = "0xEFE370")]
	public SpatialAnchorLoader()
	{
	}
}
[Token(Token = "0x20000D2")]
public class StartMenu : MonoBehaviour
{
	[Token(Token = "0x400042E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVROverlay overlay;

	[Token(Token = "0x400042F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVROverlay text;

	[Token(Token = "0x4000430")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRCameraRig vrRig;

	[Token(Token = "0x60003F8")]
	[Address(RVA = "0xEFE4A8", Offset = "0xEFE4A8", VA = "0xEFE4A8")]
	private void Start()
	{
	}

	[Token(Token = "0x60003F9")]
	[Address(RVA = "0xEFE6BC", Offset = "0xEFE6BC", VA = "0xEFE6BC")]
	private void LoadScene(int idx)
	{
	}

	[Token(Token = "0x60003FA")]
	[Address(RVA = "0xEFE7C0", Offset = "0xEFE7C0", VA = "0xEFE7C0")]
	public StartMenu()
	{
	}
}
[Token(Token = "0x20000D4")]
public class LocalizedHaptics : MonoBehaviour
{
	[Token(Token = "0x4000433")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Header("Settings")]
	private OVRInput.Handedness m_handedness;

	[Token(Token = "0x4000434")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private OVRInput.Controller m_controller;

	[Token(Token = "0x60003FD")]
	[Address(RVA = "0xEFE7E4", Offset = "0xEFE7E4", VA = "0xEFE7E4")]
	private void Start()
	{
	}

	[Token(Token = "0x60003FE")]
	[Address(RVA = "0xEFE80C", Offset = "0xEFE80C", VA = "0xEFE80C")]
	private void Update()
	{
	}

	[Token(Token = "0x60003FF")]
	[Address(RVA = "0xEFE948", Offset = "0xEFE948", VA = "0xEFE948")]
	public LocalizedHaptics()
	{
	}
}
[Token(Token = "0x20000D5")]
public class SceneSettings : MonoBehaviour
{
	[Token(Token = "0x4000435")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Header("Time")]
	private float m_fixedTimeStep;

	[Token(Token = "0x4000436")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	[Header("Physics")]
	private float m_gravityScalar;

	[Token(Token = "0x4000437")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float m_defaultContactOffset;

	[Token(Token = "0x6000400")]
	[Address(RVA = "0xEFE958", Offset = "0xEFE958", VA = "0xEFE958")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000401")]
	[Address(RVA = "0xEFE9F0", Offset = "0xEFE9F0", VA = "0xEFE9F0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000402")]
	[Address(RVA = "0xEFE9F8", Offset = "0xEFE9F8", VA = "0xEFE9F8")]
	private static void CollidersSetContactOffset(float contactOffset)
	{
	}

	[Token(Token = "0x6000403")]
	[Address(RVA = "0xEFEABC", Offset = "0xEFEABC", VA = "0xEFEABC")]
	public SceneSettings()
	{
	}
}
[Token(Token = "0x20000D6")]
public class StylusTip : MonoBehaviour
{
	[Token(Token = "0x4000438")]
	private const int MaxBreadCrumbs = 60;

	[Token(Token = "0x4000439")]
	private const float BreadCrumbMinSize = 0.005f;

	[Token(Token = "0x400043A")]
	private const float BreadCrumbMaxSize = 0.02f;

	[Token(Token = "0x400043B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Header("External")]
	private Transform m_trackingSpace;

	[Token(Token = "0x400043C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Settings")]
	[SerializeField]
	private OVRInput.Handedness m_handedness;

	[Token(Token = "0x400043D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject m_breadCrumbPf;

	[Token(Token = "0x400043E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject m_breadCrumbContainer;

	[Token(Token = "0x400043F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject[] m_breadCrumbs;

	[Token(Token = "0x4000440")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int m_breadCrumbIndexPrev;

	[Token(Token = "0x4000441")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int m_breadCrumbIndexCurr;

	[Token(Token = "0x4000442")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private OVRInput.Controller m_controller;

	[Token(Token = "0x6000404")]
	[Address(RVA = "0xEFEADC", Offset = "0xEFEADC", VA = "0xEFEADC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000405")]
	[Address(RVA = "0xEFED5C", Offset = "0xEFED5C", VA = "0xEFED5C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000406")]
	[Address(RVA = "0xEFF18C", Offset = "0xEFF18C", VA = "0xEFF18C")]
	private static UnityEngine.Pose GetT_Device_StylusTip(OVRInput.Controller controller)
	{
		return default(UnityEngine.Pose);
	}

	[Token(Token = "0x6000407")]
	[Address(RVA = "0xEFF2B8", Offset = "0xEFF2B8", VA = "0xEFF2B8")]
	public StylusTip()
	{
	}
}
[Token(Token = "0x20000D7")]
public class UiAxis1dInspector : MonoBehaviour
{
	[Token(Token = "0x4000443")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Header("Settings")]
	private float m_minExtent;

	[Token(Token = "0x4000444")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float m_maxExtent;

	[Token(Token = "0x4000445")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Components")]
	[SerializeField]
	private TextMeshProUGUI m_nameLabel;

	[Token(Token = "0x4000446")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TextMeshProUGUI m_valueLabel;

	[Token(Token = "0x4000447")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Slider m_slider;

	[Token(Token = "0x6000408")]
	[Address(RVA = "0xEFF2D0", Offset = "0xEFF2D0", VA = "0xEFF2D0")]
	public void SetExtents(float minExtent, float maxExtent)
	{
	}

	[Token(Token = "0x6000409")]
	[Address(RVA = "0xEFF2D8", Offset = "0xEFF2D8", VA = "0xEFF2D8")]
	public void SetName(string name)
	{
	}

	[Token(Token = "0x600040A")]
	[Address(RVA = "0xEFF2FC", Offset = "0xEFF2FC", VA = "0xEFF2FC")]
	public void SetValue(float value)
	{
	}

	[Token(Token = "0x600040B")]
	[Address(RVA = "0xEFF400", Offset = "0xEFF400", VA = "0xEFF400")]
	public UiAxis1dInspector()
	{
	}
}
[Token(Token = "0x20000D8")]
public class UiAxis2dInspector : MonoBehaviour
{
	[Token(Token = "0x4000448")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Header("Settings")]
	private Vector2 m_xExtent;

	[Token(Token = "0x4000449")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Vector2 m_yExtent;

	[Token(Token = "0x400044A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Components")]
	[SerializeField]
	private TextMeshProUGUI m_nameLabel;

	[Token(Token = "0x400044B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private TextMeshProUGUI m_valueLabel;

	[Token(Token = "0x400044C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Image m_handle;

	[Token(Token = "0x600040C")]
	[Address(RVA = "0xEFF410", Offset = "0xEFF410", VA = "0xEFF410")]
	public void SetExtents(Vector2 xExtent, Vector2 yExtent)
	{
	}

	[Token(Token = "0x600040D")]
	[Address(RVA = "0xEFF41C", Offset = "0xEFF41C", VA = "0xEFF41C")]
	public void SetName(string name)
	{
	}

	[Token(Token = "0x600040E")]
	[Address(RVA = "0xEFF440", Offset = "0xEFF440", VA = "0xEFF440")]
	public void SetValue(bool isTouching, Vector2 value)
	{
	}

	[Token(Token = "0x600040F")]
	[Address(RVA = "0xEFF808", Offset = "0xEFF808", VA = "0xEFF808")]
	public UiAxis2dInspector()
	{
	}
}
[Token(Token = "0x20000D9")]
public class UiBoolInspector : MonoBehaviour
{
	[Token(Token = "0x400044D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Header("Components")]
	private TextMeshProUGUI m_nameLabel;

	[Token(Token = "0x400044E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Toggle m_toggle;

	[Token(Token = "0x6000410")]
	[Address(RVA = "0xEFF81C", Offset = "0xEFF81C", VA = "0xEFF81C")]
	public void SetName(string name)
	{
	}

	[Token(Token = "0x6000411")]
	[Address(RVA = "0xEFF840", Offset = "0xEFF840", VA = "0xEFF840")]
	public void SetValue(bool value)
	{
	}

	[Token(Token = "0x6000412")]
	[Address(RVA = "0xEFF860", Offset = "0xEFF860", VA = "0xEFF860")]
	public UiBoolInspector()
	{
	}
}
[Token(Token = "0x20000DA")]
public class UiDeviceInspector : MonoBehaviour
{
	[Token(Token = "0x400044F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Settings")]
	[SerializeField]
	private OVRInput.Handedness m_handedness;

	[Token(Token = "0x4000450")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Header("Left Column Components")]
	private TextMeshProUGUI m_title;

	[Token(Token = "0x4000451")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TextMeshProUGUI m_status;

	[Token(Token = "0x4000452")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private UiBoolInspector m_thumbRestTouch;

	[Token(Token = "0x4000453")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private UiAxis1dInspector m_thumbRestForce;

	[Token(Token = "0x4000454")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private UiAxis1dInspector m_indexTrigger;

	[Token(Token = "0x4000455")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private UiAxis1dInspector m_gripTrigger;

	[Token(Token = "0x4000456")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private UiAxis1dInspector m_stylusTipForce;

	[Token(Token = "0x4000457")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private UiAxis1dInspector m_indexCurl1d;

	[Token(Token = "0x4000458")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private UiAxis1dInspector m_indexSlider1d;

	[Token(Token = "0x4000459")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Header("Right Column Components")]
	[SerializeField]
	private UiBoolInspector m_ax;

	[Token(Token = "0x400045A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private UiBoolInspector m_axTouch;

	[Token(Token = "0x400045B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private UiBoolInspector m_by;

	[Token(Token = "0x400045C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private UiBoolInspector m_byTouch;

	[Token(Token = "0x400045D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private UiBoolInspector m_indexTouch;

	[Token(Token = "0x400045E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private UiAxis2dInspector m_thumbstick;

	[Token(Token = "0x400045F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private OVRInput.Controller m_controller;

	[Token(Token = "0x6000413")]
	[Address(RVA = "0xEFF868", Offset = "0xEFF868", VA = "0xEFF868")]
	private void Start()
	{
	}

	[Token(Token = "0x6000414")]
	[Address(RVA = "0xEFF890", Offset = "0xEFF890", VA = "0xEFF890")]
	private void Update()
	{
	}

	[Token(Token = "0x6000415")]
	[Address(RVA = "0xEFFE18", Offset = "0xEFFE18", VA = "0xEFFE18")]
	private static string ToDeviceModel()
	{
		return null;
	}

	[Token(Token = "0x6000416")]
	[Address(RVA = "0xEFFE58", Offset = "0xEFFE58", VA = "0xEFFE58")]
	private static string ToHandednessString(OVRInput.Handedness handedness)
	{
		return null;
	}

	[Token(Token = "0x6000417")]
	[Address(RVA = "0xEFFEDC", Offset = "0xEFFEDC", VA = "0xEFFEDC")]
	public UiDeviceInspector()
	{
	}
}
[Token(Token = "0x20000DB")]
public class UiSceneMenu : MonoBehaviour
{
	[Token(Token = "0x4000460")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Settings")]
	[SerializeField]
	private VerticalLayoutGroup m_layoutGroup;

	[Token(Token = "0x4000461")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMeshProUGUI m_labelPf;

	[Token(Token = "0x4000462")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Vector2 s_lastThumbstickL;

	[Token(Token = "0x4000463")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Vector2 s_lastThumbstickR;

	[Token(Token = "0x4000464")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Scene m_activeScene;

	[Token(Token = "0x6000418")]
	[Address(RVA = "0xEFFEEC", Offset = "0xEFFEEC", VA = "0xEFFEEC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000419")]
	[Address(RVA = "0xF001B8", Offset = "0xF001B8", VA = "0xF001B8")]
	private void Update()
	{
	}

	[Token(Token = "0x600041A")]
	[Address(RVA = "0xF002D0", Offset = "0xF002D0", VA = "0xF002D0")]
	private bool InputPrevScene()
	{
		return default(bool);
	}

	[Token(Token = "0x600041B")]
	[Address(RVA = "0xF0036C", Offset = "0xF0036C", VA = "0xF0036C")]
	private bool InputNextScene()
	{
		return default(bool);
	}

	[Token(Token = "0x600041C")]
	[Address(RVA = "0xF003B0", Offset = "0xF003B0", VA = "0xF003B0")]
	private bool KeyboardPrevScene()
	{
		return default(bool);
	}

	[Token(Token = "0x600041D")]
	[Address(RVA = "0xF0044C", Offset = "0xF0044C", VA = "0xF0044C")]
	private bool KeyboardNextScene()
	{
		return default(bool);
	}

	[Token(Token = "0x600041E")]
	[Address(RVA = "0xF003BC", Offset = "0xF003BC", VA = "0xF003BC")]
	private bool ThumbstickPrevScene(OVRInput.Controller controller)
	{
		return default(bool);
	}

	[Token(Token = "0x600041F")]
	[Address(RVA = "0xF00458", Offset = "0xF00458", VA = "0xF00458")]
	private bool ThumbstickNextScene(OVRInput.Controller controller)
	{
		return default(bool);
	}

	[Token(Token = "0x6000420")]
	[Address(RVA = "0xF004E8", Offset = "0xF004E8", VA = "0xF004E8")]
	private Vector2 GetLastThumbstickValue(OVRInput.Controller controller)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000421")]
	[Address(RVA = "0xF00314", Offset = "0xF00314", VA = "0xF00314")]
	private void ChangeScene(int nextScene)
	{
	}

	[Token(Token = "0x6000422")]
	[Address(RVA = "0xEFFF90", Offset = "0xEFFF90", VA = "0xEFFF90")]
	private void CreateLabel(int sceneIndex, string scenePath)
	{
	}

	[Token(Token = "0x6000423")]
	[Address(RVA = "0xF00550", Offset = "0xF00550", VA = "0xF00550")]
	public UiSceneMenu()
	{
	}
}
[Token(Token = "0x20000DC")]
public class UiVectorInspector : MonoBehaviour
{
	[Token(Token = "0x4000465")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Components")]
	[SerializeField]
	private TextMeshProUGUI m_nameLabel;

	[Token(Token = "0x4000466")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMeshProUGUI m_valueLabel;

	[Token(Token = "0x6000424")]
	[Address(RVA = "0xF22408", Offset = "0xF22408", VA = "0xF22408")]
	public void SetName(string name)
	{
	}

	[Token(Token = "0x6000425")]
	[Address(RVA = "0xF2242C", Offset = "0xF2242C", VA = "0xF2242C")]
	public void SetValue(bool value)
	{
	}

	[Token(Token = "0x6000426")]
	[Address(RVA = "0xF224DC", Offset = "0xF224DC", VA = "0xF224DC")]
	public UiVectorInspector()
	{
	}
}
[Token(Token = "0x20000DD")]
public class Charge_fx : MonoBehaviour
{
	[Token(Token = "0x4000467")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject firepoint;

	[Token(Token = "0x4000468")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<GameObject> chargefx;

	[Token(Token = "0x4000469")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public RotateGunOnMouse rotate;

	[Token(Token = "0x400046A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject chargeBefore;

	[Token(Token = "0x400046B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int number;

	[Token(Token = "0x400046C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject charge;

	[Token(Token = "0x6000427")]
	[Address(RVA = "0xF224E4", Offset = "0xF224E4", VA = "0xF224E4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000428")]
	[Address(RVA = "0xF22548", Offset = "0xF22548", VA = "0xF22548")]
	private void Update()
	{
	}

	[Token(Token = "0x6000429")]
	[Address(RVA = "0xF22744", Offset = "0xF22744", VA = "0xF22744")]
	public void Next()
	{
	}

	[Token(Token = "0x600042A")]
	[Address(RVA = "0xF22810", Offset = "0xF22810", VA = "0xF22810")]
	public void Previous()
	{
	}

	[Token(Token = "0x600042B")]
	[Address(RVA = "0xF228D8", Offset = "0xF228D8", VA = "0xF228D8")]
	public Charge_fx()
	{
	}
}
[Token(Token = "0x20000DE")]
public class RotateGunOnMouse : MonoBehaviour
{
	[Token(Token = "0x400046D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Camera cam;

	[Token(Token = "0x400046E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float maximumLenght;

	[Token(Token = "0x400046F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Ray rayMouse;

	[Token(Token = "0x4000470")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 pos;

	[Token(Token = "0x4000471")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 direction;

	[Token(Token = "0x4000472")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Quaternion rotation;

	[Token(Token = "0x600042C")]
	[Address(RVA = "0xF22960", Offset = "0xF22960", VA = "0xF22960")]
	private void Update()
	{
	}

	[Token(Token = "0x600042D")]
	[Address(RVA = "0xF22B20", Offset = "0xF22B20", VA = "0xF22B20")]
	private void RotateToMouseDirection(GameObject obj, Vector3 destination)
	{
	}

	[Token(Token = "0x600042E")]
	[Address(RVA = "0xF22BF0", Offset = "0xF22BF0", VA = "0xF22BF0")]
	public Quaternion GetRotation()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x600042F")]
	[Address(RVA = "0xF22BFC", Offset = "0xF22BFC", VA = "0xF22BFC")]
	public RotateGunOnMouse()
	{
	}
}
[Token(Token = "0x20000DF")]
public class ToMoveProjectile : MonoBehaviour
{
	[Token(Token = "0x4000473")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float speed;

	[Token(Token = "0x4000474")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject muzzle;

	[Token(Token = "0x4000475")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject hit;

	[Token(Token = "0x4000476")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private List<GameObject> leftOver;

	[Token(Token = "0x6000430")]
	[Address(RVA = "0xF22C04", Offset = "0xF22C04", VA = "0xF22C04")]
	private void Start()
	{
	}

	[Token(Token = "0x6000431")]
	[Address(RVA = "0xF22E54", Offset = "0xF22E54", VA = "0xF22E54")]
	private void Update()
	{
	}

	[Token(Token = "0x6000432")]
	[Address(RVA = "0xF22F88", Offset = "0xF22F88", VA = "0xF22F88")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000433")]
	[Address(RVA = "0xF233A8", Offset = "0xF233A8", VA = "0xF233A8")]
	public ToMoveProjectile()
	{
	}
}
[Token(Token = "0x20000E0")]
public class ToSpawnProjectiles : MonoBehaviour
{
	[Token(Token = "0x4000477")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject firepoint;

	[Token(Token = "0x4000478")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<GameObject> projectilesfx;

	[Token(Token = "0x4000479")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public RotateGunOnMouse rotate;

	[Token(Token = "0x400047A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject effectToSpawn;

	[Token(Token = "0x400047B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int number;

	[Token(Token = "0x6000434")]
	[Address(RVA = "0xF233B0", Offset = "0xF233B0", VA = "0xF233B0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000435")]
	[Address(RVA = "0xF23414", Offset = "0xF23414", VA = "0xF23414")]
	private void Update()
	{
	}

	[Token(Token = "0x6000436")]
	[Address(RVA = "0xF23470", Offset = "0xF23470", VA = "0xF23470")]
	private void SpawnVFX()
	{
	}

	[Token(Token = "0x6000437")]
	[Address(RVA = "0xF23678", Offset = "0xF23678", VA = "0xF23678")]
	public void Next()
	{
	}

	[Token(Token = "0x6000438")]
	[Address(RVA = "0xF23744", Offset = "0xF23744", VA = "0xF23744")]
	public void Previous()
	{
	}

	[Token(Token = "0x6000439")]
	[Address(RVA = "0xF2380C", Offset = "0xF2380C", VA = "0xF2380C")]
	public ToSpawnProjectiles()
	{
	}
}
[Token(Token = "0x20000E1")]
public class SpawnEffect : MonoBehaviour
{
	[Token(Token = "0x400047C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float spawnEffectTime;

	[Token(Token = "0x400047D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float pause;

	[Token(Token = "0x400047E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve fadeIn;

	[Token(Token = "0x400047F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem ps;

	[Token(Token = "0x4000480")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float timer;

	[Token(Token = "0x4000481")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Renderer _renderer;

	[Token(Token = "0x4000482")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int shaderProperty;

	[Token(Token = "0x600043A")]
	[Address(RVA = "0xF23894", Offset = "0xF23894", VA = "0xF23894")]
	private void Start()
	{
	}

	[Token(Token = "0x600043B")]
	[Address(RVA = "0xF23994", Offset = "0xF23994", VA = "0xF23994")]
	private void Update()
	{
	}

	[Token(Token = "0x600043C")]
	[Address(RVA = "0xF23A54", Offset = "0xF23A54", VA = "0xF23A54")]
	public SpawnEffect()
	{
	}
}
[Token(Token = "0x20000E2")]
public class Move : MonoBehaviour
{
	[Token(Token = "0x4000483")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 localDir;

	[Token(Token = "0x4000484")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float speed;

	[Token(Token = "0x600043D")]
	[Address(RVA = "0xF23A68", Offset = "0xF23A68", VA = "0xF23A68")]
	private void Update()
	{
	}

	[Token(Token = "0x600043E")]
	[Address(RVA = "0xF23B88", Offset = "0xF23B88", VA = "0xF23B88")]
	public Move()
	{
	}
}
[Token(Token = "0x20000E3")]
public class LootDrop : MonoBehaviour
{
	[Token(Token = "0x4000485")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject lootObject;

	[Token(Token = "0x4000486")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public VisualEffect lootVFX;

	[Token(Token = "0x600043F")]
	[Address(RVA = "0xF23B98", Offset = "0xF23B98", VA = "0xF23B98")]
	private void Start()
	{
	}

	[Token(Token = "0x6000440")]
	[Address(RVA = "0xF23BB4", Offset = "0xF23BB4", VA = "0xF23BB4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000441")]
	[Address(RVA = "0xF23BB8", Offset = "0xF23BB8", VA = "0xF23BB8")]
	private void OnTriggerEnter(Collider co)
	{
	}

	[Token(Token = "0x6000442")]
	[Address(RVA = "0xF23CA0", Offset = "0xF23CA0", VA = "0xF23CA0")]
	public LootDrop()
	{
	}
}
[Token(Token = "0x20000E4")]
public class iTween : MonoBehaviour
{
	[Token(Token = "0x20000E5")]
	private delegate float EasingFunction(float start, float end, float Value);

	[Token(Token = "0x20000E6")]
	private delegate void ApplyTween();

	[Token(Token = "0x20000E7")]
	public enum EaseType
	{
		[Token(Token = "0x40004AD")]
		easeInQuad,
		[Token(Token = "0x40004AE")]
		easeOutQuad,
		[Token(Token = "0x40004AF")]
		easeInOutQuad,
		[Token(Token = "0x40004B0")]
		easeInCubic,
		[Token(Token = "0x40004B1")]
		easeOutCubic,
		[Token(Token = "0x40004B2")]
		easeInOutCubic,
		[Token(Token = "0x40004B3")]
		easeInQuart,
		[Token(Token = "0x40004B4")]
		easeOutQuart,
		[Token(Token = "0x40004B5")]
		easeInOutQuart,
		[Token(Token = "0x40004B6")]
		easeInQuint,
		[Token(Token = "0x40004B7")]
		easeOutQuint,
		[Token(Token = "0x40004B8")]
		easeInOutQuint,
		[Token(Token = "0x40004B9")]
		easeInSine,
		[Token(Token = "0x40004BA")]
		easeOutSine,
		[Token(Token = "0x40004BB")]
		easeInOutSine,
		[Token(Token = "0x40004BC")]
		easeInExpo,
		[Token(Token = "0x40004BD")]
		easeOutExpo,
		[Token(Token = "0x40004BE")]
		easeInOutExpo,
		[Token(Token = "0x40004BF")]
		easeInCirc,
		[Token(Token = "0x40004C0")]
		easeOutCirc,
		[Token(Token = "0x40004C1")]
		easeInOutCirc,
		[Token(Token = "0x40004C2")]
		linear,
		[Token(Token = "0x40004C3")]
		spring,
		[Token(Token = "0x40004C4")]
		easeInBounce,
		[Token(Token = "0x40004C5")]
		easeOutBounce,
		[Token(Token = "0x40004C6")]
		easeInOutBounce,
		[Token(Token = "0x40004C7")]
		easeInBack,
		[Token(Token = "0x40004C8")]
		easeOutBack,
		[Token(Token = "0x40004C9")]
		easeInOutBack,
		[Token(Token = "0x40004CA")]
		easeInElastic,
		[Token(Token = "0x40004CB")]
		easeOutElastic,
		[Token(Token = "0x40004CC")]
		easeInOutElastic,
		[Token(Token = "0x40004CD")]
		punch
	}

	[Token(Token = "0x20000E8")]
	public enum LoopType
	{
		[Token(Token = "0x40004CF")]
		none,
		[Token(Token = "0x40004D0")]
		loop,
		[Token(Token = "0x40004D1")]
		pingPong
	}

	[Token(Token = "0x20000E9")]
	public enum NamedValueColor
	{
		[Token(Token = "0x40004D3")]
		_Color,
		[Token(Token = "0x40004D4")]
		_SpecColor,
		[Token(Token = "0x40004D5")]
		_Emission,
		[Token(Token = "0x40004D6")]
		_ReflectColor
	}

	[Token(Token = "0x20000EA")]
	public static class Defaults
	{
		[Token(Token = "0x40004D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float time;

		[Token(Token = "0x40004D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static float delay;

		[Token(Token = "0x40004D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static NamedValueColor namedColorValue;

		[Token(Token = "0x40004DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static LoopType loopType;

		[Token(Token = "0x40004DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static EaseType easeType;

		[Token(Token = "0x40004DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static float lookSpeed;

		[Token(Token = "0x40004DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static bool isLocal;

		[Token(Token = "0x40004DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public static Space space;

		[Token(Token = "0x40004DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static bool orientToPath;

		[Token(Token = "0x40004E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public static Color color;

		[Token(Token = "0x40004E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public static float updateTimePercentage;

		[Token(Token = "0x40004E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static float updateTime;

		[Token(Token = "0x40004E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public static float lookAhead;

		[Token(Token = "0x40004E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static bool useRealTime;

		[Token(Token = "0x40004E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public static Vector3 up;
	}

	[Token(Token = "0x20000EB")]
	private class CRSpline
	{
		[Token(Token = "0x40004E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3[] pts;

		[Token(Token = "0x600053F")]
		[Address(RVA = "0xF24048", Offset = "0xF24048", VA = "0xF24048")]
		public CRSpline(params Vector3[] pts)
		{
		}

		[Token(Token = "0x6000540")]
		[Address(RVA = "0xF240CC", Offset = "0xF240CC", VA = "0xF240CC")]
		public Vector3 Interp(float t)
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x20000EC")]
	[CompilerGenerated]
	private sealed class <TweenDelay>d__145 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public iTween <>4__this;

		[Token(Token = "0x17000070")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000544")]
			[Address(RVA = "0xF243D4", Offset = "0xF243D4", VA = "0xF243D4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000071")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000546")]
			[Address(RVA = "0xF2441C", Offset = "0xF2441C", VA = "0xF2441C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000541")]
		[Address(RVA = "0xF242CC", Offset = "0xF242CC", VA = "0xF242CC")]
		[DebuggerHidden]
		public <TweenDelay>d__145(int <>1__state)
		{
		}

		[Token(Token = "0x6000542")]
		[Address(RVA = "0xF242F4", Offset = "0xF242F4", VA = "0xF242F4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000543")]
		[Address(RVA = "0xF242F8", Offset = "0xF242F8", VA = "0xF242F8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000545")]
		[Address(RVA = "0xF243DC", Offset = "0xF243DC", VA = "0xF243DC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000ED")]
	[CompilerGenerated]
	private sealed class <TweenRestart>d__147 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public iTween <>4__this;

		[Token(Token = "0x17000072")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600054A")]
			[Address(RVA = "0xF24534", Offset = "0xF24534", VA = "0xF24534", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000073")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600054C")]
			[Address(RVA = "0xF2457C", Offset = "0xF2457C", VA = "0xF2457C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000547")]
		[Address(RVA = "0xF24424", Offset = "0xF24424", VA = "0xF24424")]
		[DebuggerHidden]
		public <TweenRestart>d__147(int <>1__state)
		{
		}

		[Token(Token = "0x6000548")]
		[Address(RVA = "0xF2444C", Offset = "0xF2444C", VA = "0xF2444C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000549")]
		[Address(RVA = "0xF24450", Offset = "0xF24450", VA = "0xF24450", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600054B")]
		[Address(RVA = "0xF2453C", Offset = "0xF2453C", VA = "0xF2453C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000EE")]
	[CompilerGenerated]
	private sealed class <Start>d__229 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public iTween <>4__this;

		[Token(Token = "0x17000074")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000550")]
			[Address(RVA = "0xF24660", Offset = "0xF24660", VA = "0xF24660", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000075")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000552")]
			[Address(RVA = "0xF246A8", Offset = "0xF246A8", VA = "0xF246A8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600054D")]
		[Address(RVA = "0xF24584", Offset = "0xF24584", VA = "0xF24584")]
		[DebuggerHidden]
		public <Start>d__229(int <>1__state)
		{
		}

		[Token(Token = "0x600054E")]
		[Address(RVA = "0xF245AC", Offset = "0xF245AC", VA = "0xF245AC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600054F")]
		[Address(RVA = "0xF245B0", Offset = "0xF245B0", VA = "0xF245B0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000551")]
		[Address(RVA = "0xF24668", Offset = "0xF24668", VA = "0xF24668", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000487")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static List<Hashtable> tweens;

	[Token(Token = "0x4000488")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string id;

	[Token(Token = "0x4000489")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string type;

	[Token(Token = "0x400048A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string method;

	[Token(Token = "0x400048B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public EaseType easeType;

	[Token(Token = "0x400048C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float time;

	[Token(Token = "0x400048D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float delay;

	[Token(Token = "0x400048E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public LoopType loopType;

	[Token(Token = "0x400048F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool isRunning;

	[Token(Token = "0x4000490")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool isPaused;

	[Token(Token = "0x4000491")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string _name;

	[Token(Token = "0x4000492")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float runningTime;

	[Token(Token = "0x4000493")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float percentage;

	[Token(Token = "0x4000494")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float delayStarted;

	[Token(Token = "0x4000495")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool kinematic;

	[Token(Token = "0x4000496")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
	private bool isLocal;

	[Token(Token = "0x4000497")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
	private bool loop;

	[Token(Token = "0x4000498")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5F")]
	private bool reverse;

	[Token(Token = "0x4000499")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool wasPaused;

	[Token(Token = "0x400049A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	private bool physics;

	[Token(Token = "0x400049B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Hashtable tweenArguments;

	[Token(Token = "0x400049C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Space space;

	[Token(Token = "0x400049D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private EasingFunction ease;

	[Token(Token = "0x400049E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private ApplyTween apply;

	[Token(Token = "0x400049F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private AudioSource audioSource;

	[Token(Token = "0x40004A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Vector3[] vector3s;

	[Token(Token = "0x40004A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Vector2[] vector2s;

	[Token(Token = "0x40004A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Color[,] colors;

	[Token(Token = "0x40004A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float[] floats;

	[Token(Token = "0x40004A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Rect[] rects;

	[Token(Token = "0x40004A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private CRSpline path;

	[Token(Token = "0x40004A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Vector3 preUpdate;

	[Token(Token = "0x40004A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private Vector3 postUpdate;

	[Token(Token = "0x40004A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private NamedValueColor namedcolorvalue;

	[Token(Token = "0x40004A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private float lastRealTime;

	[Token(Token = "0x40004AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private bool useRealTime;

	[Token(Token = "0x40004AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Transform thisTransform;

	[Token(Token = "0x6000443")]
	[Address(RVA = "0xF00558", Offset = "0xF00558", VA = "0xF00558")]
	public static void Init(GameObject target)
	{
	}

	[Token(Token = "0x6000444")]
	[Address(RVA = "0xF00844", Offset = "0xF00844", VA = "0xF00844")]
	public static void ValueTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000445")]
	[Address(RVA = "0xF019B4", Offset = "0xF019B4", VA = "0xF019B4")]
	public static void FadeFrom(GameObject target, float alpha, float time)
	{
	}

	[Token(Token = "0x6000446")]
	[Address(RVA = "0xF01CF0", Offset = "0xF01CF0", VA = "0xF01CF0")]
	public static void FadeFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000447")]
	[Address(RVA = "0xF02854", Offset = "0xF02854", VA = "0xF02854")]
	public static void FadeTo(GameObject target, float alpha, float time)
	{
	}

	[Token(Token = "0x6000448")]
	[Address(RVA = "0xF02A6C", Offset = "0xF02A6C", VA = "0xF02A6C")]
	public static void FadeTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000449")]
	[Address(RVA = "0xF030AC", Offset = "0xF030AC", VA = "0xF030AC")]
	public static void ColorFrom(GameObject target, Color color, float time)
	{
	}

	[Token(Token = "0x600044A")]
	[Address(RVA = "0xF01D54", Offset = "0xF01D54", VA = "0xF01D54")]
	public static void ColorFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600044B")]
	[Address(RVA = "0xF032F8", Offset = "0xF032F8", VA = "0xF032F8")]
	public static void ColorTo(GameObject target, Color color, float time)
	{
	}

	[Token(Token = "0x600044C")]
	[Address(RVA = "0xF02AD0", Offset = "0xF02AD0", VA = "0xF02AD0")]
	public static void ColorTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600044D")]
	[Address(RVA = "0xF03544", Offset = "0xF03544", VA = "0xF03544")]
	public static void AudioFrom(GameObject target, float volume, float pitch, float time)
	{
	}

	[Token(Token = "0x600044E")]
	[Address(RVA = "0xF0380C", Offset = "0xF0380C", VA = "0xF0380C")]
	public static void AudioFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600044F")]
	[Address(RVA = "0xF03CB0", Offset = "0xF03CB0", VA = "0xF03CB0")]
	public static void AudioTo(GameObject target, float volume, float pitch, float time)
	{
	}

	[Token(Token = "0x6000450")]
	[Address(RVA = "0xF03F78", Offset = "0xF03F78", VA = "0xF03F78")]
	public static void AudioTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000451")]
	[Address(RVA = "0xF0410C", Offset = "0xF0410C", VA = "0xF0410C")]
	public static void Stab(GameObject target, AudioClip audioclip, float delay)
	{
	}

	[Token(Token = "0x6000452")]
	[Address(RVA = "0xF04310", Offset = "0xF04310", VA = "0xF04310")]
	public static void Stab(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000453")]
	[Address(RVA = "0xF043C8", Offset = "0xF043C8", VA = "0xF043C8")]
	public static void LookFrom(GameObject target, Vector3 looktarget, float time)
	{
	}

	[Token(Token = "0x6000454")]
	[Address(RVA = "0xF04608", Offset = "0xF04608", VA = "0xF04608")]
	public static void LookFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000455")]
	[Address(RVA = "0xF04D70", Offset = "0xF04D70", VA = "0xF04D70")]
	public static void LookTo(GameObject target, Vector3 looktarget, float time)
	{
	}

	[Token(Token = "0x6000456")]
	[Address(RVA = "0xF04FB0", Offset = "0xF04FB0", VA = "0xF04FB0")]
	public static void LookTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000457")]
	[Address(RVA = "0xF052EC", Offset = "0xF052EC", VA = "0xF052EC")]
	public static void MoveTo(GameObject target, Vector3 position, float time)
	{
	}

	[Token(Token = "0x6000458")]
	[Address(RVA = "0xF0552C", Offset = "0xF0552C", VA = "0xF0552C")]
	public static void MoveTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000459")]
	[Address(RVA = "0xF058CC", Offset = "0xF058CC", VA = "0xF058CC")]
	public static void MoveFrom(GameObject target, Vector3 position, float time)
	{
	}

	[Token(Token = "0x600045A")]
	[Address(RVA = "0xF05B0C", Offset = "0xF05B0C", VA = "0xF05B0C")]
	public static void MoveFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600045B")]
	[Address(RVA = "0xF06478", Offset = "0xF06478", VA = "0xF06478")]
	public static void MoveAdd(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x600045C")]
	[Address(RVA = "0xF066B8", Offset = "0xF066B8", VA = "0xF066B8")]
	public static void MoveAdd(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600045D")]
	[Address(RVA = "0xF00604", Offset = "0xF00604", VA = "0xF00604")]
	public static void MoveBy(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x600045E")]
	[Address(RVA = "0xF067B4", Offset = "0xF067B4", VA = "0xF067B4")]
	public static void MoveBy(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600045F")]
	[Address(RVA = "0xF068B0", Offset = "0xF068B0", VA = "0xF068B0")]
	public static void ScaleTo(GameObject target, Vector3 scale, float time)
	{
	}

	[Token(Token = "0x6000460")]
	[Address(RVA = "0xF06AF0", Offset = "0xF06AF0", VA = "0xF06AF0")]
	public static void ScaleTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000461")]
	[Address(RVA = "0xF06E7C", Offset = "0xF06E7C", VA = "0xF06E7C")]
	public static void ScaleFrom(GameObject target, Vector3 scale, float time)
	{
	}

	[Token(Token = "0x6000462")]
	[Address(RVA = "0xF070BC", Offset = "0xF070BC", VA = "0xF070BC")]
	public static void ScaleFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000463")]
	[Address(RVA = "0xF075C4", Offset = "0xF075C4", VA = "0xF075C4")]
	public static void ScaleAdd(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000464")]
	[Address(RVA = "0xF07804", Offset = "0xF07804", VA = "0xF07804")]
	public static void ScaleAdd(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000465")]
	[Address(RVA = "0xF07900", Offset = "0xF07900", VA = "0xF07900")]
	public static void ScaleBy(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000466")]
	[Address(RVA = "0xF07B40", Offset = "0xF07B40", VA = "0xF07B40")]
	public static void ScaleBy(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000467")]
	[Address(RVA = "0xF07C3C", Offset = "0xF07C3C", VA = "0xF07C3C")]
	public static void RotateTo(GameObject target, Vector3 rotation, float time)
	{
	}

	[Token(Token = "0x6000468")]
	[Address(RVA = "0xF07E7C", Offset = "0xF07E7C", VA = "0xF07E7C")]
	public static void RotateTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000469")]
	[Address(RVA = "0xF0821C", Offset = "0xF0821C", VA = "0xF0821C")]
	public static void RotateFrom(GameObject target, Vector3 rotation, float time)
	{
	}

	[Token(Token = "0x600046A")]
	[Address(RVA = "0xF0845C", Offset = "0xF0845C", VA = "0xF0845C")]
	public static void RotateFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600046B")]
	[Address(RVA = "0xF08A4C", Offset = "0xF08A4C", VA = "0xF08A4C")]
	public static void RotateAdd(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x600046C")]
	[Address(RVA = "0xF08C8C", Offset = "0xF08C8C", VA = "0xF08C8C")]
	public static void RotateAdd(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600046D")]
	[Address(RVA = "0xF08D88", Offset = "0xF08D88", VA = "0xF08D88")]
	public static void RotateBy(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x600046E")]
	[Address(RVA = "0xF08FC8", Offset = "0xF08FC8", VA = "0xF08FC8")]
	public static void RotateBy(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600046F")]
	[Address(RVA = "0xF090C4", Offset = "0xF090C4", VA = "0xF090C4")]
	public static void ShakePosition(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000470")]
	[Address(RVA = "0xF09304", Offset = "0xF09304", VA = "0xF09304")]
	public static void ShakePosition(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000471")]
	[Address(RVA = "0xF09400", Offset = "0xF09400", VA = "0xF09400")]
	public static void ShakeScale(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000472")]
	[Address(RVA = "0xF09640", Offset = "0xF09640", VA = "0xF09640")]
	public static void ShakeScale(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000473")]
	[Address(RVA = "0xF0973C", Offset = "0xF0973C", VA = "0xF0973C")]
	public static void ShakeRotation(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000474")]
	[Address(RVA = "0xF0997C", Offset = "0xF0997C", VA = "0xF0997C")]
	public static void ShakeRotation(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000475")]
	[Address(RVA = "0xF09A78", Offset = "0xF09A78", VA = "0xF09A78")]
	public static void PunchPosition(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000476")]
	[Address(RVA = "0xF09CB8", Offset = "0xF09CB8", VA = "0xF09CB8")]
	public static void PunchPosition(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000477")]
	[Address(RVA = "0xF09E18", Offset = "0xF09E18", VA = "0xF09E18")]
	public static void PunchRotation(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000478")]
	[Address(RVA = "0xF0A058", Offset = "0xF0A058", VA = "0xF0A058")]
	public static void PunchRotation(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000479")]
	[Address(RVA = "0xF0A1B8", Offset = "0xF0A1B8", VA = "0xF0A1B8")]
	public static void PunchScale(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x600047A")]
	[Address(RVA = "0xF0A3F8", Offset = "0xF0A3F8", VA = "0xF0A3F8")]
	public static void PunchScale(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600047B")]
	[Address(RVA = "0xF0A558", Offset = "0xF0A558", VA = "0xF0A558")]
	private void GenerateTargets()
	{
	}

	[Token(Token = "0x600047C")]
	[Address(RVA = "0xF0B7F0", Offset = "0xF0B7F0", VA = "0xF0B7F0")]
	private void GenerateRectTargets()
	{
	}

	[Token(Token = "0x600047D")]
	[Address(RVA = "0xF0B66C", Offset = "0xF0B66C", VA = "0xF0B66C")]
	private void GenerateColorTargets()
	{
	}

	[Token(Token = "0x600047E")]
	[Address(RVA = "0xF0B3B0", Offset = "0xF0B3B0", VA = "0xF0B3B0")]
	private void GenerateVector3Targets()
	{
	}

	[Token(Token = "0x600047F")]
	[Address(RVA = "0xF0B114", Offset = "0xF0B114", VA = "0xF0B114")]
	private void GenerateVector2Targets()
	{
	}

	[Token(Token = "0x6000480")]
	[Address(RVA = "0xF0AEF0", Offset = "0xF0AEF0", VA = "0xF0AEF0")]
	private void GenerateFloatTargets()
	{
	}

	[Token(Token = "0x6000481")]
	[Address(RVA = "0xF0B944", Offset = "0xF0B944", VA = "0xF0B944")]
	private void GenerateColorToTargets()
	{
	}

	[Token(Token = "0x6000482")]
	[Address(RVA = "0xF0C2C8", Offset = "0xF0C2C8", VA = "0xF0C2C8")]
	private void GenerateAudioToTargets()
	{
	}

	[Token(Token = "0x6000483")]
	[Address(RVA = "0xF115DC", Offset = "0xF115DC", VA = "0xF115DC")]
	private void GenerateStabTargets()
	{
	}

	[Token(Token = "0x6000484")]
	[Address(RVA = "0xF10C4C", Offset = "0xF10C4C", VA = "0xF10C4C")]
	private void GenerateLookToTargets()
	{
	}

	[Token(Token = "0x6000485")]
	[Address(RVA = "0xF0C620", Offset = "0xF0C620", VA = "0xF0C620")]
	private void GenerateMoveToPathTargets()
	{
	}

	[Token(Token = "0x6000486")]
	[Address(RVA = "0xF0CD18", Offset = "0xF0CD18", VA = "0xF0CD18")]
	private void GenerateMoveToTargets()
	{
	}

	[Token(Token = "0x6000487")]
	[Address(RVA = "0xF0D3F4", Offset = "0xF0D3F4", VA = "0xF0D3F4")]
	private void GenerateMoveByTargets()
	{
	}

	[Token(Token = "0x6000488")]
	[Address(RVA = "0xF0DA38", Offset = "0xF0DA38", VA = "0xF0DA38")]
	private void GenerateScaleToTargets()
	{
	}

	[Token(Token = "0x6000489")]
	[Address(RVA = "0xF0DFFC", Offset = "0xF0DFFC", VA = "0xF0DFFC")]
	private void GenerateScaleByTargets()
	{
	}

	[Token(Token = "0x600048A")]
	[Address(RVA = "0xF0E474", Offset = "0xF0E474", VA = "0xF0E474")]
	private void GenerateScaleAddTargets()
	{
	}

	[Token(Token = "0x600048B")]
	[Address(RVA = "0xF0E8E0", Offset = "0xF0E8E0", VA = "0xF0E8E0")]
	private void GenerateRotateToTargets()
	{
	}

	[Token(Token = "0x600048C")]
	[Address(RVA = "0xF0EFF8", Offset = "0xF0EFF8", VA = "0xF0EFF8")]
	private void GenerateRotateAddTargets()
	{
	}

	[Token(Token = "0x600048D")]
	[Address(RVA = "0xF0F46C", Offset = "0xF0F46C", VA = "0xF0F46C")]
	private void GenerateRotateByTargets()
	{
	}

	[Token(Token = "0x600048E")]
	[Address(RVA = "0xF0F918", Offset = "0xF0F918", VA = "0xF0F918")]
	private void GenerateShakePositionTargets()
	{
	}

	[Token(Token = "0x600048F")]
	[Address(RVA = "0xF0FC40", Offset = "0xF0FC40", VA = "0xF0FC40")]
	private void GenerateShakeScaleTargets()
	{
	}

	[Token(Token = "0x6000490")]
	[Address(RVA = "0xF0FF3C", Offset = "0xF0FF3C", VA = "0xF0FF3C")]
	private void GenerateShakeRotationTargets()
	{
	}

	[Token(Token = "0x6000491")]
	[Address(RVA = "0xF10238", Offset = "0xF10238", VA = "0xF10238")]
	private void GeneratePunchPositionTargets()
	{
	}

	[Token(Token = "0x6000492")]
	[Address(RVA = "0xF105B4", Offset = "0xF105B4", VA = "0xF105B4")]
	private void GeneratePunchRotationTargets()
	{
	}

	[Token(Token = "0x6000493")]
	[Address(RVA = "0xF10904", Offset = "0xF10904", VA = "0xF10904")]
	private void GeneratePunchScaleTargets()
	{
	}

	[Token(Token = "0x6000494")]
	[Address(RVA = "0xF11D18", Offset = "0xF11D18", VA = "0xF11D18")]
	private void ApplyRectTargets()
	{
	}

	[Token(Token = "0x6000495")]
	[Address(RVA = "0xF12024", Offset = "0xF12024", VA = "0xF12024")]
	private void ApplyColorTargets()
	{
	}

	[Token(Token = "0x6000496")]
	[Address(RVA = "0xF12270", Offset = "0xF12270", VA = "0xF12270")]
	private void ApplyVector3Targets()
	{
	}

	[Token(Token = "0x6000497")]
	[Address(RVA = "0xF12478", Offset = "0xF12478", VA = "0xF12478")]
	private void ApplyVector2Targets()
	{
	}

	[Token(Token = "0x6000498")]
	[Address(RVA = "0xF1261C", Offset = "0xF1261C", VA = "0xF1261C")]
	private void ApplyFloatTargets()
	{
	}

	[Token(Token = "0x6000499")]
	[Address(RVA = "0xF12770", Offset = "0xF12770", VA = "0xF12770")]
	private void ApplyColorToTargets()
	{
	}

	[Token(Token = "0x600049A")]
	[Address(RVA = "0xF12C8C", Offset = "0xF12C8C", VA = "0xF12C8C")]
	private void ApplyAudioToTargets()
	{
	}

	[Token(Token = "0x600049B")]
	[Address(RVA = "0xF12DFC", Offset = "0xF12DFC", VA = "0xF12DFC")]
	private void ApplyStabTargets()
	{
	}

	[Token(Token = "0x600049C")]
	[Address(RVA = "0xF12E00", Offset = "0xF12E00", VA = "0xF12E00")]
	private void ApplyMoveToPathTargets()
	{
	}

	[Token(Token = "0x600049D")]
	[Address(RVA = "0xF13110", Offset = "0xF13110", VA = "0xF13110")]
	private void ApplyMoveToTargets()
	{
	}

	[Token(Token = "0x600049E")]
	[Address(RVA = "0xF13324", Offset = "0xF13324", VA = "0xF13324")]
	private void ApplyMoveByTargets()
	{
	}

	[Token(Token = "0x600049F")]
	[Address(RVA = "0xF13604", Offset = "0xF13604", VA = "0xF13604")]
	private void ApplyScaleToTargets()
	{
	}

	[Token(Token = "0x60004A0")]
	[Address(RVA = "0xF13778", Offset = "0xF13778", VA = "0xF13778")]
	private void ApplyLookToTargets()
	{
	}

	[Token(Token = "0x60004A1")]
	[Address(RVA = "0xF138D8", Offset = "0xF138D8", VA = "0xF138D8")]
	private void ApplyRotateToTargets()
	{
	}

	[Token(Token = "0x60004A2")]
	[Address(RVA = "0xF13B4C", Offset = "0xF13B4C", VA = "0xF13B4C")]
	private void ApplyRotateAddTargets()
	{
	}

	[Token(Token = "0x60004A3")]
	[Address(RVA = "0xF13D74", Offset = "0xF13D74", VA = "0xF13D74")]
	private void ApplyShakePositionTargets()
	{
	}

	[Token(Token = "0x60004A4")]
	[Address(RVA = "0xF140C8", Offset = "0xF140C8", VA = "0xF140C8")]
	private void ApplyShakeScaleTargets()
	{
	}

	[Token(Token = "0x60004A5")]
	[Address(RVA = "0xF14248", Offset = "0xF14248", VA = "0xF14248")]
	private void ApplyShakeRotationTargets()
	{
	}

	[Token(Token = "0x60004A6")]
	[Address(RVA = "0xF14468", Offset = "0xF14468", VA = "0xF14468")]
	private void ApplyPunchPositionTargets()
	{
	}

	[Token(Token = "0x60004A7")]
	[Address(RVA = "0xF14934", Offset = "0xF14934", VA = "0xF14934")]
	private void ApplyPunchRotationTargets()
	{
	}

	[Token(Token = "0x60004A8")]
	[Address(RVA = "0xF14CD8", Offset = "0xF14CD8", VA = "0xF14CD8")]
	private void ApplyPunchScaleTargets()
	{
	}

	[Token(Token = "0x60004A9")]
	[Address(RVA = "0xF14F84", Offset = "0xF14F84", VA = "0xF14F84")]
	[IteratorStateMachine(typeof(<TweenDelay>d__145))]
	private IEnumerator TweenDelay()
	{
		return null;
	}

	[Token(Token = "0x60004AA")]
	[Address(RVA = "0xF14FF8", Offset = "0xF14FF8", VA = "0xF14FF8")]
	private void TweenStart()
	{
	}

	[Token(Token = "0x60004AB")]
	[Address(RVA = "0xF15A94", Offset = "0xF15A94", VA = "0xF15A94")]
	[IteratorStateMachine(typeof(<TweenRestart>d__147))]
	private IEnumerator TweenRestart()
	{
		return null;
	}

	[Token(Token = "0x60004AC")]
	[Address(RVA = "0xF15B08", Offset = "0xF15B08", VA = "0xF15B08")]
	private void TweenUpdate()
	{
	}

	[Token(Token = "0x60004AD")]
	[Address(RVA = "0xF15BE0", Offset = "0xF15BE0", VA = "0xF15BE0")]
	private void TweenComplete()
	{
	}

	[Token(Token = "0x60004AE")]
	[Address(RVA = "0xF15CC4", Offset = "0xF15CC4", VA = "0xF15CC4")]
	private void TweenLoop()
	{
	}

	[Token(Token = "0x60004AF")]
	[Address(RVA = "0xF15D68", Offset = "0xF15D68", VA = "0xF15D68")]
	public static Rect RectUpdate(Rect currentValue, Rect targetValue, float speed)
	{
		return default(Rect);
	}

	[Token(Token = "0x60004B0")]
	[Address(RVA = "0xF15F1C", Offset = "0xF15F1C", VA = "0xF15F1C")]
	public static Vector3 Vector3Update(Vector3 currentValue, Vector3 targetValue, float speed)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60004B1")]
	[Address(RVA = "0xF15F84", Offset = "0xF15F84", VA = "0xF15F84")]
	public static Vector2 Vector2Update(Vector2 currentValue, Vector2 targetValue, float speed)
	{
		return default(Vector2);
	}

	[Token(Token = "0x60004B2")]
	[Address(RVA = "0xF15EE0", Offset = "0xF15EE0", VA = "0xF15EE0")]
	public static float FloatUpdate(float currentValue, float targetValue, float speed)
	{
		return default(float);
	}

	[Token(Token = "0x60004B3")]
	[Address(RVA = "0xF15FD0", Offset = "0xF15FD0", VA = "0xF15FD0")]
	public static void FadeUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60004B4")]
	[Address(RVA = "0xF16B74", Offset = "0xF16B74", VA = "0xF16B74")]
	public static void FadeUpdate(GameObject target, float alpha, float time)
	{
	}

	[Token(Token = "0x60004B5")]
	[Address(RVA = "0xF16098", Offset = "0xF16098", VA = "0xF16098")]
	public static void ColorUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60004B6")]
	[Address(RVA = "0xF16D8C", Offset = "0xF16D8C", VA = "0xF16D8C")]
	public static void ColorUpdate(GameObject target, Color color, float time)
	{
	}

	[Token(Token = "0x60004B7")]
	[Address(RVA = "0xF16FD8", Offset = "0xF16FD8", VA = "0xF16FD8")]
	public static void AudioUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60004B8")]
	[Address(RVA = "0xF17540", Offset = "0xF17540", VA = "0xF17540")]
	public static void AudioUpdate(GameObject target, float volume, float pitch, float time)
	{
	}

	[Token(Token = "0x60004B9")]
	[Address(RVA = "0xF17808", Offset = "0xF17808", VA = "0xF17808")]
	public static void RotateUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60004BA")]
	[Address(RVA = "0xF17F64", Offset = "0xF17F64", VA = "0xF17F64")]
	public static void RotateUpdate(GameObject target, Vector3 rotation, float time)
	{
	}

	[Token(Token = "0x60004BB")]
	[Address(RVA = "0xF181A4", Offset = "0xF181A4", VA = "0xF181A4")]
	public static void ScaleUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60004BC")]
	[Address(RVA = "0xF187F4", Offset = "0xF187F4", VA = "0xF187F4")]
	public static void ScaleUpdate(GameObject target, Vector3 scale, float time)
	{
	}

	[Token(Token = "0x60004BD")]
	[Address(RVA = "0xF18A34", Offset = "0xF18A34", VA = "0xF18A34")]
	public static void MoveUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60004BE")]
	[Address(RVA = "0xF19DE0", Offset = "0xF19DE0", VA = "0xF19DE0")]
	public static void MoveUpdate(GameObject target, Vector3 position, float time)
	{
	}

	[Token(Token = "0x60004BF")]
	[Address(RVA = "0xF19318", Offset = "0xF19318", VA = "0xF19318")]
	public static void LookUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60004C0")]
	[Address(RVA = "0xF1A020", Offset = "0xF1A020", VA = "0xF1A020")]
	public static void LookUpdate(GameObject target, Vector3 looktarget, float time)
	{
	}

	[Token(Token = "0x60004C1")]
	[Address(RVA = "0xF1A260", Offset = "0xF1A260", VA = "0xF1A260")]
	public static float PathLength(Transform[] path)
	{
		return default(float);
	}

	[Token(Token = "0x60004C2")]
	[Address(RVA = "0xF11B90", Offset = "0xF11B90", VA = "0xF11B90")]
	public static float PathLength(Vector3[] path)
	{
		return default(float);
	}

	[Token(Token = "0x60004C3")]
	[Address(RVA = "0xF1A87C", Offset = "0xF1A87C", VA = "0xF1A87C")]
	public static void PutOnPath(GameObject target, Vector3[] path, float percent)
	{
	}

	[Token(Token = "0x60004C4")]
	[Address(RVA = "0xF1A914", Offset = "0xF1A914", VA = "0xF1A914")]
	public static void PutOnPath(Transform target, Vector3[] path, float percent)
	{
	}

	[Token(Token = "0x60004C5")]
	[Address(RVA = "0xF1A99C", Offset = "0xF1A99C", VA = "0xF1A99C")]
	public static void PutOnPath(GameObject target, Transform[] path, float percent)
	{
	}

	[Token(Token = "0x60004C6")]
	[Address(RVA = "0xF1AAC8", Offset = "0xF1AAC8", VA = "0xF1AAC8")]
	public static void PutOnPath(Transform target, Transform[] path, float percent)
	{
	}

	[Token(Token = "0x60004C7")]
	[Address(RVA = "0xF1ABDC", Offset = "0xF1ABDC", VA = "0xF1ABDC")]
	public static Vector3 PointOnPath(Transform[] path, float percent)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60004C8")]
	[Address(RVA = "0xF1ACD4", Offset = "0xF1ACD4", VA = "0xF1ACD4")]
	public static void DrawLine(Vector3[] line)
	{
	}

	[Token(Token = "0x60004C9")]
	[Address(RVA = "0xF1AF3C", Offset = "0xF1AF3C", VA = "0xF1AF3C")]
	public static void DrawLine(Vector3[] line, Color color)
	{
	}

	[Token(Token = "0x60004CA")]
	[Address(RVA = "0xF1AFFC", Offset = "0xF1AFFC", VA = "0xF1AFFC")]
	public static void DrawLine(Transform[] line)
	{
	}

	[Token(Token = "0x60004CB")]
	[Address(RVA = "0xF1B168", Offset = "0xF1B168", VA = "0xF1B168")]
	public static void DrawLine(Transform[] line, Color color)
	{
	}

	[Token(Token = "0x60004CC")]
	[Address(RVA = "0xF1B2B0", Offset = "0xF1B2B0", VA = "0xF1B2B0")]
	public static void DrawLineGizmos(Vector3[] line)
	{
	}

	[Token(Token = "0x60004CD")]
	[Address(RVA = "0xF1B394", Offset = "0xF1B394", VA = "0xF1B394")]
	public static void DrawLineGizmos(Vector3[] line, Color color)
	{
	}

	[Token(Token = "0x60004CE")]
	[Address(RVA = "0xF1B454", Offset = "0xF1B454", VA = "0xF1B454")]
	public static void DrawLineGizmos(Transform[] line)
	{
	}

	[Token(Token = "0x60004CF")]
	[Address(RVA = "0xF1B5C0", Offset = "0xF1B5C0", VA = "0xF1B5C0")]
	public static void DrawLineGizmos(Transform[] line, Color color)
	{
	}

	[Token(Token = "0x60004D0")]
	[Address(RVA = "0xF1B708", Offset = "0xF1B708", VA = "0xF1B708")]
	public static void DrawLineHandles(Vector3[] line)
	{
	}

	[Token(Token = "0x60004D1")]
	[Address(RVA = "0xF1B7EC", Offset = "0xF1B7EC", VA = "0xF1B7EC")]
	public static void DrawLineHandles(Vector3[] line, Color color)
	{
	}

	[Token(Token = "0x60004D2")]
	[Address(RVA = "0xF1B8AC", Offset = "0xF1B8AC", VA = "0xF1B8AC")]
	public static void DrawLineHandles(Transform[] line)
	{
	}

	[Token(Token = "0x60004D3")]
	[Address(RVA = "0xF1BA18", Offset = "0xF1BA18", VA = "0xF1BA18")]
	public static void DrawLineHandles(Transform[] line, Color color)
	{
	}

	[Token(Token = "0x60004D4")]
	[Address(RVA = "0xF1BB60", Offset = "0xF1BB60", VA = "0xF1BB60")]
	public static Vector3 PointOnPath(Vector3[] path, float percent)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60004D5")]
	[Address(RVA = "0xF1BBC8", Offset = "0xF1BBC8", VA = "0xF1BBC8")]
	public static void DrawPath(Vector3[] path)
	{
	}

	[Token(Token = "0x60004D6")]
	[Address(RVA = "0xF1BEA8", Offset = "0xF1BEA8", VA = "0xF1BEA8")]
	public static void DrawPath(Vector3[] path, Color color)
	{
	}

	[Token(Token = "0x60004D7")]
	[Address(RVA = "0xF1BF68", Offset = "0xF1BF68", VA = "0xF1BF68")]
	public static void DrawPath(Transform[] path)
	{
	}

	[Token(Token = "0x60004D8")]
	[Address(RVA = "0xF1C0D4", Offset = "0xF1C0D4", VA = "0xF1C0D4")]
	public static void DrawPath(Transform[] path, Color color)
	{
	}

	[Token(Token = "0x60004D9")]
	[Address(RVA = "0xF1C21C", Offset = "0xF1C21C", VA = "0xF1C21C")]
	public static void DrawPathGizmos(Vector3[] path)
	{
	}

	[Token(Token = "0x60004DA")]
	[Address(RVA = "0xF1C300", Offset = "0xF1C300", VA = "0xF1C300")]
	public static void DrawPathGizmos(Vector3[] path, Color color)
	{
	}

	[Token(Token = "0x60004DB")]
	[Address(RVA = "0xF1C3C0", Offset = "0xF1C3C0", VA = "0xF1C3C0")]
	public static void DrawPathGizmos(Transform[] path)
	{
	}

	[Token(Token = "0x60004DC")]
	[Address(RVA = "0xF1C52C", Offset = "0xF1C52C", VA = "0xF1C52C")]
	public static void DrawPathGizmos(Transform[] path, Color color)
	{
	}

	[Token(Token = "0x60004DD")]
	[Address(RVA = "0xF1C674", Offset = "0xF1C674", VA = "0xF1C674")]
	public static void DrawPathHandles(Vector3[] path)
	{
	}

	[Token(Token = "0x60004DE")]
	[Address(RVA = "0xF1C758", Offset = "0xF1C758", VA = "0xF1C758")]
	public static void DrawPathHandles(Vector3[] path, Color color)
	{
	}

	[Token(Token = "0x60004DF")]
	[Address(RVA = "0xF1C818", Offset = "0xF1C818", VA = "0xF1C818")]
	public static void DrawPathHandles(Transform[] path)
	{
	}

	[Token(Token = "0x60004E0")]
	[Address(RVA = "0xF1C984", Offset = "0xF1C984", VA = "0xF1C984")]
	public static void DrawPathHandles(Transform[] path, Color color)
	{
	}

	[Token(Token = "0x60004E1")]
	[Address(RVA = "0xF1CACC", Offset = "0xF1CACC", VA = "0xF1CACC")]
	public static void Resume(GameObject target)
	{
	}

	[Token(Token = "0x60004E2")]
	[Address(RVA = "0xF1CBB0", Offset = "0xF1CBB0", VA = "0xF1CBB0")]
	public static void Resume(GameObject target, bool includechildren)
	{
	}

	[Token(Token = "0x60004E3")]
	[Address(RVA = "0xF1CEE0", Offset = "0xF1CEE0", VA = "0xF1CEE0")]
	public static void Resume(GameObject target, string type)
	{
	}

	[Token(Token = "0x60004E4")]
	[Address(RVA = "0xF1D034", Offset = "0xF1D034", VA = "0xF1D034")]
	public static void Resume(GameObject target, string type, bool includechildren)
	{
	}

	[Token(Token = "0x60004E5")]
	[Address(RVA = "0xF1D458", Offset = "0xF1D458", VA = "0xF1D458")]
	public static void Resume()
	{
	}

	[Token(Token = "0x60004E6")]
	[Address(RVA = "0xF1D580", Offset = "0xF1D580", VA = "0xF1D580")]
	public static void Resume(string type)
	{
	}

	[Token(Token = "0x60004E7")]
	[Address(RVA = "0xF1D7B4", Offset = "0xF1D7B4", VA = "0xF1D7B4")]
	public static void Pause(GameObject target)
	{
	}

	[Token(Token = "0x60004E8")]
	[Address(RVA = "0xF1D908", Offset = "0xF1D908", VA = "0xF1D908")]
	public static void Pause(GameObject target, bool includechildren)
	{
	}

	[Token(Token = "0x60004E9")]
	[Address(RVA = "0xF1DC38", Offset = "0xF1DC38", VA = "0xF1DC38")]
	public static void Pause(GameObject target, string type)
	{
	}

	[Token(Token = "0x60004EA")]
	[Address(RVA = "0xF1DDEC", Offset = "0xF1DDEC", VA = "0xF1DDEC")]
	public static void Pause(GameObject target, string type, bool includechildren)
	{
	}

	[Token(Token = "0x60004EB")]
	[Address(RVA = "0xF1E270", Offset = "0xF1E270", VA = "0xF1E270")]
	public static void Pause()
	{
	}

	[Token(Token = "0x60004EC")]
	[Address(RVA = "0xF1E398", Offset = "0xF1E398", VA = "0xF1E398")]
	public static void Pause(string type)
	{
	}

	[Token(Token = "0x60004ED")]
	[Address(RVA = "0xF1E5CC", Offset = "0xF1E5CC", VA = "0xF1E5CC")]
	public static int Count()
	{
		return default(int);
	}

	[Token(Token = "0x60004EE")]
	[Address(RVA = "0xF1E63C", Offset = "0xF1E63C", VA = "0xF1E63C")]
	public static int Count(string type)
	{
		return default(int);
	}

	[Token(Token = "0x60004EF")]
	[Address(RVA = "0xF1E834", Offset = "0xF1E834", VA = "0xF1E834")]
	public static int Count(GameObject target)
	{
		return default(int);
	}

	[Token(Token = "0x60004F0")]
	[Address(RVA = "0xF1E890", Offset = "0xF1E890", VA = "0xF1E890")]
	public static int Count(GameObject target, string type)
	{
		return default(int);
	}

	[Token(Token = "0x60004F1")]
	[Address(RVA = "0xF1E9E8", Offset = "0xF1E9E8", VA = "0xF1E9E8")]
	public static void Stop()
	{
	}

	[Token(Token = "0x60004F2")]
	[Address(RVA = "0xF1EC38", Offset = "0xF1EC38", VA = "0xF1EC38")]
	public static void Stop(string type)
	{
	}

	[Token(Token = "0x60004F3")]
	[Address(RVA = "0xF1EFB8", Offset = "0xF1EFB8", VA = "0xF1EFB8")]
	public static void StopByName(string name)
	{
	}

	[Token(Token = "0x60004F4")]
	[Address(RVA = "0xF1EB5C", Offset = "0xF1EB5C", VA = "0xF1EB5C")]
	public static void Stop(GameObject target)
	{
	}

	[Token(Token = "0x60004F5")]
	[Address(RVA = "0xF1F2F0", Offset = "0xF1F2F0", VA = "0xF1F2F0")]
	public static void Stop(GameObject target, bool includechildren)
	{
	}

	[Token(Token = "0x60004F6")]
	[Address(RVA = "0xF1EE6C", Offset = "0xF1EE6C", VA = "0xF1EE6C")]
	public static void Stop(GameObject target, string type)
	{
	}

	[Token(Token = "0x60004F7")]
	[Address(RVA = "0xF1F1EC", Offset = "0xF1F1EC", VA = "0xF1F1EC")]
	public static void StopByName(GameObject target, string name)
	{
	}

	[Token(Token = "0x60004F8")]
	[Address(RVA = "0xF1F620", Offset = "0xF1F620", VA = "0xF1F620")]
	public static void Stop(GameObject target, string type, bool includechildren)
	{
	}

	[Token(Token = "0x60004F9")]
	[Address(RVA = "0xF1FA3C", Offset = "0xF1FA3C", VA = "0xF1FA3C")]
	public static void StopByName(GameObject target, string name, bool includechildren)
	{
	}

	[Token(Token = "0x60004FA")]
	[Address(RVA = "0xF01BCC", Offset = "0xF01BCC", VA = "0xF01BCC")]
	public static Hashtable Hash(params object[] args)
	{
		return null;
	}

	[Token(Token = "0x60004FB")]
	[Address(RVA = "0xF1FE10", Offset = "0xF1FE10", VA = "0xF1FE10")]
	private iTween(Hashtable h)
	{
	}

	[Token(Token = "0x60004FC")]
	[Address(RVA = "0xF1FE40", Offset = "0xF1FE40", VA = "0xF1FE40")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004FD")]
	[Address(RVA = "0xF2118C", Offset = "0xF2118C", VA = "0xF2118C")]
	[IteratorStateMachine(typeof(<Start>d__229))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60004FE")]
	[Address(RVA = "0xF21200", Offset = "0xF21200", VA = "0xF21200")]
	private void Update()
	{
	}

	[Token(Token = "0x60004FF")]
	[Address(RVA = "0xF2123C", Offset = "0xF2123C", VA = "0xF2123C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000500")]
	[Address(RVA = "0xF21278", Offset = "0xF21278", VA = "0xF21278")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000501")]
	[Address(RVA = "0xF213AC", Offset = "0xF213AC", VA = "0xF213AC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000502")]
	[Address(RVA = "0xF21420", Offset = "0xF21420", VA = "0xF21420")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000503")]
	[Address(RVA = "0xF1ADB8", Offset = "0xF1ADB8", VA = "0xF1ADB8")]
	private static void DrawLineHelper(Vector3[] line, Color color, string method)
	{
	}

	[Token(Token = "0x6000504")]
	[Address(RVA = "0xF1BCAC", Offset = "0xF1BCAC", VA = "0xF1BCAC")]
	private static void DrawPathHelper(Vector3[] path, Color color, string method)
	{
	}

	[Token(Token = "0x6000505")]
	[Address(RVA = "0xF1A468", Offset = "0xF1A468", VA = "0xF1A468")]
	private static Vector3[] PathControlPointGenerator(Vector3[] path)
	{
		return null;
	}

	[Token(Token = "0x6000506")]
	[Address(RVA = "0xF1A688", Offset = "0xF1A688", VA = "0xF1A688")]
	private static Vector3 Interp(Vector3[] pts, float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000507")]
	[Address(RVA = "0xF01830", Offset = "0xF01830", VA = "0xF01830")]
	private static void Launch(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000508")]
	[Address(RVA = "0xF00DB8", Offset = "0xF00DB8", VA = "0xF00DB8")]
	private static Hashtable CleanArgs(Hashtable args)
	{
		return null;
	}

	[Token(Token = "0x6000509")]
	[Address(RVA = "0xF21424", Offset = "0xF21424", VA = "0xF21424")]
	private static string GenerateID()
	{
		return null;
	}

	[Token(Token = "0x600050A")]
	[Address(RVA = "0xF1FE7C", Offset = "0xF1FE7C", VA = "0xF1FE7C")]
	private void RetrieveArgs()
	{
	}

	[Token(Token = "0x600050B")]
	[Address(RVA = "0xF21450", Offset = "0xF21450", VA = "0xF21450")]
	private void GetEasingFunction()
	{
	}

	[Token(Token = "0x600050C")]
	[Address(RVA = "0xF15B74", Offset = "0xF15B74", VA = "0xF15B74")]
	private void UpdatePercentage()
	{
	}

	[Token(Token = "0x600050D")]
	[Address(RVA = "0xF151C8", Offset = "0xF151C8", VA = "0xF151C8")]
	private void CallBack(string callbackType)
	{
	}

	[Token(Token = "0x600050E")]
	[Address(RVA = "0xF11974", Offset = "0xF11974", VA = "0xF11974")]
	private void Dispose()
	{
	}

	[Token(Token = "0x600050F")]
	[Address(RVA = "0xF154DC", Offset = "0xF154DC", VA = "0xF154DC")]
	private void ConflictCheck()
	{
	}

	[Token(Token = "0x6000510")]
	[Address(RVA = "0xF15A90", Offset = "0xF15A90", VA = "0xF15A90")]
	private void EnableKinematic()
	{
	}

	[Token(Token = "0x6000511")]
	[Address(RVA = "0xF15D64", Offset = "0xF15D64", VA = "0xF15D64")]
	private void DisableKinematic()
	{
	}

	[Token(Token = "0x6000512")]
	[Address(RVA = "0xF213D4", Offset = "0xF213D4", VA = "0xF213D4")]
	private void ResumeDelay()
	{
	}

	[Token(Token = "0x6000513")]
	[Address(RVA = "0xF21964", Offset = "0xF21964", VA = "0xF21964")]
	private float linear(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000514")]
	[Address(RVA = "0xF11B2C", Offset = "0xF11B2C", VA = "0xF11B2C")]
	private float clerp(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000515")]
	[Address(RVA = "0xF21988", Offset = "0xF21988", VA = "0xF21988")]
	private float spring(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000516")]
	[Address(RVA = "0xF21A38", Offset = "0xF21A38", VA = "0xF21A38")]
	private float easeInQuad(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000517")]
	[Address(RVA = "0xF21A4C", Offset = "0xF21A4C", VA = "0xF21A4C")]
	private float easeOutQuad(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000518")]
	[Address(RVA = "0xF21A68", Offset = "0xF21A68", VA = "0xF21A68")]
	private float easeInOutQuad(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000519")]
	[Address(RVA = "0xF21ABC", Offset = "0xF21ABC", VA = "0xF21ABC")]
	private float easeInCubic(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600051A")]
	[Address(RVA = "0xF21AD4", Offset = "0xF21AD4", VA = "0xF21AD4")]
	private float easeOutCubic(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600051B")]
	[Address(RVA = "0xF21AFC", Offset = "0xF21AFC", VA = "0xF21AFC")]
	private float easeInOutCubic(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600051C")]
	[Address(RVA = "0xF21B54", Offset = "0xF21B54", VA = "0xF21B54")]
	private float easeInQuart(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600051D")]
	[Address(RVA = "0xF21B70", Offset = "0xF21B70", VA = "0xF21B70")]
	private float easeOutQuart(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600051E")]
	[Address(RVA = "0xF21B98", Offset = "0xF21B98", VA = "0xF21B98")]
	private float easeInOutQuart(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600051F")]
	[Address(RVA = "0xF21BF4", Offset = "0xF21BF4", VA = "0xF21BF4")]
	private float easeInQuint(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000520")]
	[Address(RVA = "0xF21C14", Offset = "0xF21C14", VA = "0xF21C14")]
	private float easeOutQuint(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000521")]
	[Address(RVA = "0xF21C44", Offset = "0xF21C44", VA = "0xF21C44")]
	private float easeInOutQuint(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000522")]
	[Address(RVA = "0xF21CAC", Offset = "0xF21CAC", VA = "0xF21CAC")]
	private float easeInSine(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000523")]
	[Address(RVA = "0xF21CE4", Offset = "0xF21CE4", VA = "0xF21CE4")]
	private float easeOutSine(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000524")]
	[Address(RVA = "0xF21D18", Offset = "0xF21D18", VA = "0xF21D18")]
	private float easeInOutSine(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000525")]
	[Address(RVA = "0xF21D5C", Offset = "0xF21D5C", VA = "0xF21D5C")]
	private float easeInExpo(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000526")]
	[Address(RVA = "0xF21D94", Offset = "0xF21D94", VA = "0xF21D94")]
	private float easeOutExpo(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000527")]
	[Address(RVA = "0xF21DCC", Offset = "0xF21DCC", VA = "0xF21DCC")]
	private float easeInOutExpo(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000528")]
	[Address(RVA = "0xF21E3C", Offset = "0xF21E3C", VA = "0xF21E3C")]
	private float easeInCirc(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000529")]
	[Address(RVA = "0xF21E64", Offset = "0xF21E64", VA = "0xF21E64")]
	private float easeOutCirc(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600052A")]
	[Address(RVA = "0xF21E8C", Offset = "0xF21E8C", VA = "0xF21E8C")]
	private float easeInOutCirc(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600052B")]
	[Address(RVA = "0xF21EE0", Offset = "0xF21EE0", VA = "0xF21EE0")]
	private float easeInBounce(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600052C")]
	[Address(RVA = "0xF21F18", Offset = "0xF21F18", VA = "0xF21F18")]
	private float easeOutBounce(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600052D")]
	[Address(RVA = "0xF21FE0", Offset = "0xF21FE0", VA = "0xF21FE0")]
	private float easeInOutBounce(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600052E")]
	[Address(RVA = "0xF22060", Offset = "0xF22060", VA = "0xF22060")]
	private float easeInBack(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600052F")]
	[Address(RVA = "0xF22090", Offset = "0xF22090", VA = "0xF22090")]
	private float easeOutBack(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000530")]
	[Address(RVA = "0xF220D0", Offset = "0xF220D0", VA = "0xF220D0")]
	private float easeInOutBack(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000531")]
	[Address(RVA = "0xF148C4", Offset = "0xF148C4", VA = "0xF148C4")]
	private float punch(float amplitude, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000532")]
	[Address(RVA = "0xF22154", Offset = "0xF22154", VA = "0xF22154")]
	private float easeInElastic(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000533")]
	[Address(RVA = "0xF221E4", Offset = "0xF221E4", VA = "0xF221E4")]
	private float easeOutElastic(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000534")]
	[Address(RVA = "0xF22274", Offset = "0xF22274", VA = "0xF22274")]
	private float easeInOutElastic(float start, float end, float value)
	{
		return default(float);
	}
}
[Token(Token = "0x20000EF")]
public class FirstPersonControllerScript : MonoBehaviour
{
	[Token(Token = "0x40004F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int FPS;

	[Token(Token = "0x40004F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float speed;

	[Token(Token = "0x40004F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float jumpSpeed;

	[Token(Token = "0x40004F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float gravity;

	[Token(Token = "0x40004F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 moveDirection;

	[Token(Token = "0x40004F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float yRotation;

	[Token(Token = "0x40004F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float xRotation;

	[Token(Token = "0x40004F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float lookSensitivity;

	[Token(Token = "0x40004F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float currentXRotation;

	[Token(Token = "0x40004F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float currentYRotation;

	[Token(Token = "0x40004FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float yRotationV;

	[Token(Token = "0x40004FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float xRotationV;

	[Token(Token = "0x40004FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float lookSmoothnes;

	[Token(Token = "0x6000553")]
	[Address(RVA = "0xF246B0", Offset = "0xF246B0", VA = "0xF246B0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000554")]
	[Address(RVA = "0xF246DC", Offset = "0xF246DC", VA = "0xF246DC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000555")]
	[Address(RVA = "0xF24988", Offset = "0xF24988", VA = "0xF24988")]
	public FirstPersonControllerScript()
	{
	}
}
[Token(Token = "0x20000F0")]
public class Flamethrower : MonoBehaviour
{
	[Token(Token = "0x40004FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public VisualEffect flamethrower;

	[Token(Token = "0x40004FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Animator anim;

	[Token(Token = "0x6000556")]
	[Address(RVA = "0xF24A18", Offset = "0xF24A18", VA = "0xF24A18")]
	private void Start()
	{
	}

	[Token(Token = "0x6000557")]
	[Address(RVA = "0xF24A80", Offset = "0xF24A80", VA = "0xF24A80")]
	private void Update()
	{
	}

	[Token(Token = "0x6000558")]
	[Address(RVA = "0xF24B3C", Offset = "0xF24B3C", VA = "0xF24B3C")]
	public Flamethrower()
	{
	}
}
[Token(Token = "0x20000F1")]
public class FPSShooterTut : MonoBehaviour
{
	[Token(Token = "0x40004FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Camera cam;

	[Token(Token = "0x4000500")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject projectile;

	[Token(Token = "0x4000501")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject muzzle;

	[Token(Token = "0x4000502")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform firePoint;

	[Token(Token = "0x4000503")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float projectileSpeed;

	[Token(Token = "0x4000504")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float fireRate;

	[Token(Token = "0x4000505")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float arcRange;

	[Token(Token = "0x4000506")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 destination;

	[Token(Token = "0x4000507")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float timeToFire;

	[Token(Token = "0x6000559")]
	[Address(RVA = "0xF24B44", Offset = "0xF24B44", VA = "0xF24B44")]
	private void Update()
	{
	}

	[Token(Token = "0x600055A")]
	[Address(RVA = "0xF24BD4", Offset = "0xF24BD4", VA = "0xF24BD4")]
	private void ShootProjectile()
	{
	}

	[Token(Token = "0x600055B")]
	[Address(RVA = "0xF24C50", Offset = "0xF24C50", VA = "0xF24C50")]
	private void InstantiateProjectile(Transform firePoint)
	{
	}

	[Token(Token = "0x600055C")]
	[Address(RVA = "0xF24F78", Offset = "0xF24F78", VA = "0xF24F78")]
	public FPSShooterTut()
	{
	}
}
[Token(Token = "0x20000F2")]
public class GroundSlash : MonoBehaviour
{
	[Token(Token = "0x20000F3")]
	[CompilerGenerated]
	private sealed class <SlowDown>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400050E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400050F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GroundSlash <>4__this;

		[Token(Token = "0x4000511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <t>5__2;

		[Token(Token = "0x17000076")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000564")]
			[Address(RVA = "0xF25638", Offset = "0xF25638", VA = "0xF25638", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000077")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000566")]
			[Address(RVA = "0xF25680", Offset = "0xF25680", VA = "0xF25680", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000561")]
		[Address(RVA = "0xF2545C", Offset = "0xF2545C", VA = "0xF2545C")]
		[DebuggerHidden]
		public <SlowDown>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x6000562")]
		[Address(RVA = "0xF25498", Offset = "0xF25498", VA = "0xF25498", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000563")]
		[Address(RVA = "0xF2549C", Offset = "0xF2549C", VA = "0xF2549C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000565")]
		[Address(RVA = "0xF25640", Offset = "0xF25640", VA = "0xF25640", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000508")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speed;

	[Token(Token = "0x4000509")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float slowDownRate;

	[Token(Token = "0x400050A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float detectingDistance;

	[Token(Token = "0x400050B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float destroyDelay;

	[Token(Token = "0x400050C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Rigidbody rb;

	[Token(Token = "0x400050D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool stopped;

	[Token(Token = "0x600055D")]
	[Address(RVA = "0xF24F94", Offset = "0xF24F94", VA = "0xF24F94")]
	private void Start()
	{
	}

	[Token(Token = "0x600055E")]
	[Address(RVA = "0xF251B4", Offset = "0xF251B4", VA = "0xF251B4")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600055F")]
	[Address(RVA = "0xF25140", Offset = "0xF25140", VA = "0xF25140")]
	[IteratorStateMachine(typeof(<SlowDown>d__8))]
	private IEnumerator SlowDown()
	{
		return null;
	}

	[Token(Token = "0x6000560")]
	[Address(RVA = "0xF25484", Offset = "0xF25484", VA = "0xF25484")]
	public GroundSlash()
	{
	}
}
[Token(Token = "0x20000F4")]
public class GroundSlashShooter : MonoBehaviour
{
	[Token(Token = "0x4000512")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Camera cam;

	[Token(Token = "0x4000513")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject projectile;

	[Token(Token = "0x4000514")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform firePoint;

	[Token(Token = "0x4000515")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float fireRate;

	[Token(Token = "0x4000516")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 destination;

	[Token(Token = "0x4000517")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float timeToFire;

	[Token(Token = "0x4000518")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GroundSlash groundSlashScript;

	[Token(Token = "0x6000567")]
	[Address(RVA = "0xF25688", Offset = "0xF25688", VA = "0xF25688")]
	private void Update()
	{
	}

	[Token(Token = "0x6000568")]
	[Address(RVA = "0xF25718", Offset = "0xF25718", VA = "0xF25718")]
	private void ShootProjectile()
	{
	}

	[Token(Token = "0x6000569")]
	[Address(RVA = "0xF257F4", Offset = "0xF257F4", VA = "0xF257F4")]
	private void InstantiateProjectile()
	{
	}

	[Token(Token = "0x600056A")]
	[Address(RVA = "0xF259B0", Offset = "0xF259B0", VA = "0xF259B0")]
	private void InstantiateProjectileAtFirePoint()
	{
	}

	[Token(Token = "0x600056B")]
	[Address(RVA = "0xF25B9C", Offset = "0xF25B9C", VA = "0xF25B9C")]
	private void RotateToDestination(GameObject obj, Vector3 destination, bool onlyY)
	{
	}

	[Token(Token = "0x600056C")]
	[Address(RVA = "0xF25C84", Offset = "0xF25C84", VA = "0xF25C84")]
	public GroundSlashShooter()
	{
	}
}
[Token(Token = "0x20000F5")]
public class ProjectileTut : MonoBehaviour
{
	[Token(Token = "0x4000519")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject impactVFX;

	[Token(Token = "0x400051A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool collided;

	[Token(Token = "0x600056D")]
	[Address(RVA = "0xF25C94", Offset = "0xF25C94", VA = "0xF25C94")]
	private void OnCollisionEnter(Collision co)
	{
	}

	[Token(Token = "0x600056E")]
	[Address(RVA = "0xF25E88", Offset = "0xF25E88", VA = "0xF25E88")]
	public ProjectileTut()
	{
	}
}
[Token(Token = "0x20000F6")]
public class SlashTest : MonoBehaviour
{
	[Token(Token = "0x20000F7")]
	[CompilerGenerated]
	private sealed class <SlashAttack>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400051E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400051F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SlashTest <>4__this;

		[Token(Token = "0x4000521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__2;

		[Token(Token = "0x17000078")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000577")]
			[Address(RVA = "0xF2620C", Offset = "0xF2620C", VA = "0xF2620C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000079")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000579")]
			[Address(RVA = "0xF26254", Offset = "0xF26254", VA = "0xF26254", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000574")]
		[Address(RVA = "0xF26038", Offset = "0xF26038", VA = "0xF26038")]
		[DebuggerHidden]
		public <SlashAttack>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x6000575")]
		[Address(RVA = "0xF26068", Offset = "0xF26068", VA = "0xF26068", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000576")]
		[Address(RVA = "0xF2606C", Offset = "0xF2606C", VA = "0xF2606C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000578")]
		[Address(RVA = "0xF26214", Offset = "0xF26214", VA = "0xF26214", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400051B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator anim;

	[Token(Token = "0x400051C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<Slash> slashes;

	[Token(Token = "0x400051D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool attacking;

	[Token(Token = "0x600056F")]
	[Address(RVA = "0xF25E90", Offset = "0xF25E90", VA = "0xF25E90")]
	private void Start()
	{
	}

	[Token(Token = "0x6000570")]
	[Address(RVA = "0xF25F2C", Offset = "0xF25F2C", VA = "0xF25F2C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000571")]
	[Address(RVA = "0xF25FC4", Offset = "0xF25FC4", VA = "0xF25FC4")]
	[IteratorStateMachine(typeof(<SlashAttack>d__5))]
	private IEnumerator SlashAttack()
	{
		return null;
	}

	[Token(Token = "0x6000572")]
	[Address(RVA = "0xF25E94", Offset = "0xF25E94", VA = "0xF25E94")]
	private void DisableSlashes()
	{
	}

	[Token(Token = "0x6000573")]
	[Address(RVA = "0xF26060", Offset = "0xF26060", VA = "0xF26060")]
	public SlashTest()
	{
	}
}
[Serializable]
[Token(Token = "0x20000F8")]
public class Slash
{
	[Token(Token = "0x4000522")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject slashObj;

	[Token(Token = "0x4000523")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float delay;

	[Token(Token = "0x600057A")]
	[Address(RVA = "0xF2625C", Offset = "0xF2625C", VA = "0xF2625C")]
	public Slash()
	{
	}
}
[Token(Token = "0x20000F9")]
public class SpawnShield : MonoBehaviour
{
	[Token(Token = "0x4000524")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float delayToDestroy;

	[Token(Token = "0x4000525")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject shieldVFX;

	[Token(Token = "0x4000526")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 shieldOffset;

	[Token(Token = "0x600057B")]
	[Address(RVA = "0xF26264", Offset = "0xF26264", VA = "0xF26264")]
	private void Update()
	{
	}

	[Token(Token = "0x600057C")]
	[Address(RVA = "0xF26384", Offset = "0xF26384", VA = "0xF26384")]
	public SpawnShield()
	{
	}
}
[Token(Token = "0x20000FA")]
public class SpawnShieldRipples : MonoBehaviour
{
	[Token(Token = "0x4000527")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject shieldRipples;

	[Token(Token = "0x4000528")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private VisualEffect shieldRipplesVFX;

	[Token(Token = "0x600057D")]
	[Address(RVA = "0xF26394", Offset = "0xF26394", VA = "0xF26394")]
	private void OnCollisionEnter(Collision co)
	{
	}

	[Token(Token = "0x600057E")]
	[Address(RVA = "0xF26514", Offset = "0xF26514", VA = "0xF26514")]
	public SpawnShieldRipples()
	{
	}
}
[Token(Token = "0x20000FB")]
public class AutoRotate : MonoBehaviour
{
	[Token(Token = "0x4000529")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 BaseRotation;

	[Token(Token = "0x400052A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 RotationSpeed;

	[Token(Token = "0x600057F")]
	[Address(RVA = "0xF2651C", Offset = "0xF2651C", VA = "0xF2651C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000580")]
	[Address(RVA = "0xF265A8", Offset = "0xF265A8", VA = "0xF265A8")]
	public AutoRotate()
	{
	}
}
[Token(Token = "0x20000FC")]
[RequireComponent(typeof(Light))]
[ExecuteInEditMode]
public class SetShadowMapAsGlobalTexture : MonoBehaviour
{
	[Token(Token = "0x400052B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string textureSemanticName;

	[Token(Token = "0x400052C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private RenderTexture shadowMapRenderTexture;

	[Token(Token = "0x400052D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private CommandBuffer commandBuffer;

	[Token(Token = "0x400052E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Light lightComponent;

	[Token(Token = "0x6000581")]
	[Address(RVA = "0xF265B0", Offset = "0xF265B0", VA = "0xF265B0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000582")]
	[Address(RVA = "0xF266FC", Offset = "0xF266FC", VA = "0xF266FC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000583")]
	[Address(RVA = "0xF26610", Offset = "0xF26610", VA = "0xF26610")]
	private void SetupCommandBuffer()
	{
	}

	[Token(Token = "0x6000584")]
	[Address(RVA = "0xF26734", Offset = "0xF26734", VA = "0xF26734")]
	private void ReleaseCommandBuffer()
	{
	}

	[Token(Token = "0x6000585")]
	[Address(RVA = "0xF26750", Offset = "0xF26750", VA = "0xF26750")]
	public SetShadowMapAsGlobalTexture()
	{
	}
}
namespace URPWater
{
	[Token(Token = "0x20000FD")]
	public class DragCamera : MonoBehaviour
	{
		[Token(Token = "0x400052F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _DragSpeed;

		[Token(Token = "0x4000530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float _NormalizedScale;

		[Token(Token = "0x4000531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float _Scale;

		[Token(Token = "0x6000586")]
		[Address(RVA = "0xF267A8", Offset = "0xF267A8", VA = "0xF267A8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000587")]
		[Address(RVA = "0xF2688C", Offset = "0xF2688C", VA = "0xF2688C")]
		public DragCamera()
		{
		}
	}
	[Token(Token = "0x20000FE")]
	[ExecuteAlways]
	public class URPWaterDynamicEffects : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20000FF")]
		public enum Quality
		{
			[Token(Token = "0x400054F")]
			VeryHigh,
			[Token(Token = "0x4000550")]
			High,
			[Token(Token = "0x4000551")]
			Medium,
			[Token(Token = "0x4000552")]
			Low
		}

		[Serializable]
		[Token(Token = "0x2000100")]
		public enum DebugRenderTexture
		{
			[Token(Token = "0x4000554")]
			Off,
			[Token(Token = "0x4000555")]
			RawTexture,
			[Token(Token = "0x4000556")]
			CompTexture
		}

		[Token(Token = "0x2000101")]
		private class DynamicEffectsData
		{
			[Token(Token = "0x4000557")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly bool _Fog;

			[Token(Token = "0x4000558")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private readonly int _MaxLod;

			[Token(Token = "0x4000559")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly float _LodBias;

			[Token(Token = "0x400055A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private readonly bool _DrawGizmos;

			[Token(Token = "0x60005A0")]
			[Address(RVA = "0xF2786C", Offset = "0xF2786C", VA = "0xF2786C")]
			public DynamicEffectsData()
			{
			}

			[Token(Token = "0x60005A1")]
			[Address(RVA = "0xF278AC", Offset = "0xF278AC", VA = "0xF278AC")]
			public void Set()
			{
			}

			[Token(Token = "0x60005A2")]
			[Address(RVA = "0xF27AE8", Offset = "0xF27AE8", VA = "0xF27AE8")]
			public void Restore()
			{
			}
		}

		[Token(Token = "0x4000532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Base")]
		[SerializeField]
		[Tooltip("Effect texture resolution\nVery High: 2048\nHigh: 1024\nMedium: 512\nLow: 256")]
		private Quality _Quality;

		[Token(Token = "0x4000533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Layers that will be used to capture the dynamic effects.")]
		[SerializeField]
		private LayerMask _LayerMask;

		[Token(Token = "0x4000534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Tooltip("Size of the capture region.")]
		private float _CaptureSize;

		[Token(Token = "0x4000535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[Tooltip("Y distance of the capture camera from the target.")]
		private float _CaptureDistance;

		[Token(Token = "0x4000536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[Range(0f, 60f)]
		[Tooltip("Limits the update of the render texture. Set this to 0 for no limits.")]
		private int _CapturePerSeconds;

		[Token(Token = "0x4000537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		[Range(0.1f, 1f)]
		private float _EdgeMaskSize;

		[Token(Token = "0x4000538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Normals")]
		[SerializeField]
		private bool _EnableNormalBlur;

		[Token(Token = "0x4000539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		[Range(0f, 4f)]
		private float _NormalBlur;

		[Token(Token = "0x400053A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[Range(0f, 2f)]
		private float _NormalStrength;

		[Token(Token = "0x400053B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private DebugRenderTexture _DebugMode;

		[Token(Token = "0x400053C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RenderTexture _DynamicEffectsTexture;

		[Token(Token = "0x400053D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RenderTexture _CompRT;

		[Token(Token = "0x400053E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private RenderTexture _TempRT1;

		[Token(Token = "0x400053F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private RenderTexture _TempRT2;

		[Token(Token = "0x4000540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly int _NormalSharpId;

		[Token(Token = "0x4000541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private readonly int _BaseTexId;

		[Token(Token = "0x4000542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly int _DynamicEffectsTextureId;

		[Token(Token = "0x4000543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private readonly int _DynamicEffectsParams;

		[Token(Token = "0x4000544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly int _NormalStrengthId;

		[Token(Token = "0x4000545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private readonly int _NormalBlurId;

		[Token(Token = "0x4000546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly int _DebugTextureId;

		[Token(Token = "0x4000547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Camera _DynamicEffectsCamera;

		[Token(Token = "0x4000548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Shader _EffectsShader;

		[Token(Token = "0x4000549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Material _EffectsMaterial;

		[Token(Token = "0x400054A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private GameObject _DebugGO;

		[Token(Token = "0x400054B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private bool _EnableRender;

		[Token(Token = "0x400054C")]
		private const RenderTextureFormat _HdrFormat = RenderTextureFormat.ARGB32;

		[Token(Token = "0x1700007A")]
		public float CaptureSize
		{
			[Token(Token = "0x600059B")]
			[Address(RVA = "0xF27D74", Offset = "0xF27D74", VA = "0xF27D74")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600059C")]
			[Address(RVA = "0xF27D7C", Offset = "0xF27D7C", VA = "0xF27D7C")]
			set
			{
			}
		}

		[Token(Token = "0x1700007B")]
		public float CaptureDistance
		{
			[Token(Token = "0x600059D")]
			[Address(RVA = "0xF27D84", Offset = "0xF27D84", VA = "0xF27D84")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600059E")]
			[Address(RVA = "0xF27D8C", Offset = "0xF27D8C", VA = "0xF27D8C")]
			set
			{
			}
		}

		[Token(Token = "0x14000010")]
		public static event Action<ScriptableRenderContext, Camera> BeginDynamicEffects
		{
			[Token(Token = "0x6000588")]
			[Address(RVA = "0xF268A0", Offset = "0xF268A0", VA = "0xF268A0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000589")]
			[Address(RVA = "0xF2696C", Offset = "0xF2696C", VA = "0xF2696C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600058A")]
		[Address(RVA = "0xF26A38", Offset = "0xF26A38", VA = "0xF26A38")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600058B")]
		[Address(RVA = "0xF26BC0", Offset = "0xF26BC0", VA = "0xF26BC0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600058C")]
		[Address(RVA = "0xF26DCC", Offset = "0xF26DCC", VA = "0xF26DCC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600058D")]
		[Address(RVA = "0xF26DD0", Offset = "0xF26DD0", VA = "0xF26DD0")]
		private void ResetTime()
		{
		}

		[Token(Token = "0x600058E")]
		[Address(RVA = "0xF26DDC", Offset = "0xF26DDC", VA = "0xF26DDC")]
		private void ComputeEffects(ScriptableRenderContext context, Camera camera)
		{
		}

		[Token(Token = "0x600058F")]
		[Address(RVA = "0xF278E4", Offset = "0xF278E4", VA = "0xF278E4")]
		private void DrawTextures()
		{
		}

		[Token(Token = "0x6000590")]
		[Address(RVA = "0xF27B24", Offset = "0xF27B24", VA = "0xF27B24")]
		private void SetShaderProperties()
		{
		}

		[Token(Token = "0x6000591")]
		[Address(RVA = "0xF2782C", Offset = "0xF2782C", VA = "0xF2782C")]
		private void UpdateEffectsCamera(Camera cam)
		{
		}

		[Token(Token = "0x6000592")]
		[Address(RVA = "0xF26FB0", Offset = "0xF26FB0", VA = "0xF26FB0")]
		private Camera CreateEffectsCamera()
		{
			return null;
		}

		[Token(Token = "0x6000593")]
		[Address(RVA = "0xF27364", Offset = "0xF27364", VA = "0xF27364")]
		private void CreateEffectsMaterial()
		{
		}

		[Token(Token = "0x6000594")]
		[Address(RVA = "0xF27498", Offset = "0xF27498", VA = "0xF27498")]
		private void CreateEffectsTextures()
		{
		}

		[Token(Token = "0x6000595")]
		[Address(RVA = "0xF27C70", Offset = "0xF27C70", VA = "0xF27C70")]
		private Vector2 EffectsResolution(float scale)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000596")]
		[Address(RVA = "0xF27CEC", Offset = "0xF27CEC", VA = "0xF27CEC")]
		private Vector3 XZPos(Vector3 pos)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000597")]
		[Address(RVA = "0xF27CC8", Offset = "0xF27CC8", VA = "0xF27CC8")]
		private float GetScaleValue()
		{
			return default(float);
		}

		[Token(Token = "0x6000598")]
		[Address(RVA = "0xF26BC4", Offset = "0xF26BC4", VA = "0xF26BC4")]
		private void Cleanup()
		{
		}

		[Token(Token = "0x6000599")]
		[Address(RVA = "0xF27CF8", Offset = "0xF27CF8", VA = "0xF27CF8")]
		private static void SafeDestroy(UnityEngine.Object obj)
		{
		}

		[Token(Token = "0x600059A")]
		[Address(RVA = "0xF27D70", Offset = "0xF27D70", VA = "0xF27D70")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x600059F")]
		[Address(RVA = "0xF27D94", Offset = "0xF27D94", VA = "0xF27D94")]
		public URPWaterDynamicEffects()
		{
		}
	}
	[Token(Token = "0x2000102")]
	[RequireComponent(typeof(URPWaterDynamicEffects))]
	public class URPWaterFollowTarget : MonoBehaviour
	{
		[Token(Token = "0x400055B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Tooltip("Transform of the object that the Dynamic Effect Capture should follow.")]
		private Transform _Target;

		[Token(Token = "0x400055C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Tooltip("Offset Y position of the Target.")]
		private float _YOffset;

		[Token(Token = "0x400055D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private URPWaterDynamicEffects _DynamicEffect;

		[Token(Token = "0x60005A3")]
		[Address(RVA = "0xF27F10", Offset = "0xF27F10", VA = "0xF27F10")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60005A4")]
		[Address(RVA = "0xF28004", Offset = "0xF28004", VA = "0xF28004")]
		private void Update()
		{
		}

		[Token(Token = "0x60005A5")]
		[Address(RVA = "0xF28120", Offset = "0xF28120", VA = "0xF28120")]
		public URPWaterFollowTarget()
		{
		}
	}
	[Token(Token = "0x2000103")]
	[ExecuteAlways]
	public class URPWaterReflection : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000104")]
		public enum Quality
		{
			[Token(Token = "0x4000569")]
			VeryHigh,
			[Token(Token = "0x400056A")]
			High,
			[Token(Token = "0x400056B")]
			Medium,
			[Token(Token = "0x400056C")]
			Low
		}

		[Token(Token = "0x2000105")]
		private class ReflectionSettingData
		{
			[Token(Token = "0x400056D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly bool _Fog;

			[Token(Token = "0x400056E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private readonly int _MaxLod;

			[Token(Token = "0x400056F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly float _LodBias;

			[Token(Token = "0x60005B8")]
			[Address(RVA = "0xF28D84", Offset = "0xF28D84", VA = "0xF28D84")]
			public ReflectionSettingData()
			{
			}

			[Token(Token = "0x60005B9")]
			[Address(RVA = "0xF28DC4", Offset = "0xF28DC4", VA = "0xF28DC4")]
			public void Set()
			{
			}

			[Token(Token = "0x60005BA")]
			[Address(RVA = "0xF28E08", Offset = "0xF28E08", VA = "0xF28E08")]
			public void Restore()
			{
			}
		}

		[Token(Token = "0x400055E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Quality _Quality;

		[Token(Token = "0x400055F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float _ClipPlaneOffset;

		[Token(Token = "0x4000560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _PlaneOffset;

		[Token(Token = "0x4000561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private LayerMask _LayerMask;

		[Token(Token = "0x4000562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private bool _Shadows;

		[Token(Token = "0x4000563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject target;

		[Token(Token = "0x4000564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Camera _ReflectionCamera;

		[Token(Token = "0x4000565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RenderTexture _ReflectionTexture;

		[Token(Token = "0x4000566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly int _ReflectionTextureId;

		[Token(Token = "0x14000011")]
		public static event Action<ScriptableRenderContext, Camera> BeginReflections
		{
			[Token(Token = "0x60005A6")]
			[Address(RVA = "0xF28128", Offset = "0xF28128", VA = "0xF28128")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60005A7")]
			[Address(RVA = "0xF281F8", Offset = "0xF281F8", VA = "0xF281F8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60005A8")]
		[Address(RVA = "0xF282C8", Offset = "0xF282C8", VA = "0xF282C8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60005A9")]
		[Address(RVA = "0xF2836C", Offset = "0xF2836C", VA = "0xF2836C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60005AA")]
		[Address(RVA = "0xF284E8", Offset = "0xF284E8", VA = "0xF284E8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60005AB")]
		[Address(RVA = "0xF284EC", Offset = "0xF284EC", VA = "0xF284EC")]
		private void ComputeReflections(ScriptableRenderContext context, Camera camera)
		{
		}

		[Token(Token = "0x60005AC")]
		[Address(RVA = "0xF28E44", Offset = "0xF28E44", VA = "0xF28E44")]
		private void UpdateCamera(Camera src, Camera dest)
		{
		}

		[Token(Token = "0x60005AD")]
		[Address(RVA = "0xF28658", Offset = "0xF28658", VA = "0xF28658")]
		private void UpdateReflectionCamera(Camera realCamera)
		{
		}

		[Token(Token = "0x60005AE")]
		[Address(RVA = "0xF28370", Offset = "0xF28370", VA = "0xF28370")]
		private void Cleanup()
		{
		}

		[Token(Token = "0x60005AF")]
		[Address(RVA = "0xF2941C", Offset = "0xF2941C", VA = "0xF2941C")]
		private static void SafeDestroy(UnityEngine.Object obj)
		{
		}

		[Token(Token = "0x60005B0")]
		[Address(RVA = "0xF28BEC", Offset = "0xF28BEC", VA = "0xF28BEC")]
		private void PlanarReflectionTexture(Camera cam)
		{
		}

		[Token(Token = "0x60005B1")]
		[Address(RVA = "0xF29494", Offset = "0xF29494", VA = "0xF29494")]
		private Vector2 ReflectionResolution(Camera cam, float scale)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60005B2")]
		[Address(RVA = "0xF29568", Offset = "0xF29568", VA = "0xF29568")]
		private float GetScaleValue()
		{
			return default(float);
		}

		[Token(Token = "0x60005B3")]
		[Address(RVA = "0xF28F30", Offset = "0xF28F30", VA = "0xF28F30")]
		private Camera CreateReflectionCamera()
		{
			return null;
		}

		[Token(Token = "0x60005B4")]
		[Address(RVA = "0xF291D0", Offset = "0xF291D0", VA = "0xF291D0")]
		private static void ReflectionMatrix(ref Matrix4x4 reflectionMat, Vector4 plane)
		{
		}

		[Token(Token = "0x60005B5")]
		[Address(RVA = "0xF2926C", Offset = "0xF2926C", VA = "0xF2926C")]
		private Vector4 CameraSpacePlane(Camera cam, Vector3 pos, Vector3 normal, float sideSign)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60005B6")]
		[Address(RVA = "0xF29264", Offset = "0xF29264", VA = "0xF29264")]
		private static Vector3 ReflectPosition(Vector3 pos)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005B7")]
		[Address(RVA = "0xF2958C", Offset = "0xF2958C", VA = "0xF2958C")]
		public URPWaterReflection()
		{
		}
	}
}
namespace UnityTemplateProjects
{
	[Token(Token = "0x2000106")]
	public class SimpleCameraController : MonoBehaviour
	{
		[Token(Token = "0x2000107")]
		private class CameraState
		{
			[Token(Token = "0x4000577")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float yaw;

			[Token(Token = "0x4000578")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float pitch;

			[Token(Token = "0x4000579")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float roll;

			[Token(Token = "0x400057A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float x;

			[Token(Token = "0x400057B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float y;

			[Token(Token = "0x400057C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float z;

			[Token(Token = "0x60005BF")]
			[Address(RVA = "0xF29658", Offset = "0xF29658", VA = "0xF29658")]
			public void SetFromTransform(Transform t)
			{
			}

			[Token(Token = "0x60005C0")]
			[Address(RVA = "0xF29BB0", Offset = "0xF29BB0", VA = "0xF29BB0")]
			public void Translate(Vector3 translation)
			{
			}

			[Token(Token = "0x60005C1")]
			[Address(RVA = "0xF29C30", Offset = "0xF29C30", VA = "0xF29C30")]
			public void LerpTowards(CameraState target, float positionLerpPct, float rotationLerpPct)
			{
			}

			[Token(Token = "0x60005C2")]
			[Address(RVA = "0xF29CB8", Offset = "0xF29CB8", VA = "0xF29CB8")]
			public void UpdateTransform(Transform t)
			{
			}

			[Token(Token = "0x60005C3")]
			[Address(RVA = "0xF29EDC", Offset = "0xF29EDC", VA = "0xF29EDC")]
			public CameraState()
			{
			}
		}

		[Token(Token = "0x4000570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CameraState m_TargetCameraState;

		[Token(Token = "0x4000571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CameraState m_InterpolatingCameraState;

		[Token(Token = "0x4000572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Movement Settings")]
		[Tooltip("Exponential boost factor on translation, controllable by mouse wheel.")]
		public float boost;

		[Token(Token = "0x4000573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0.001f, 1f)]
		[Tooltip("Time it takes to interpolate camera position 99% of the way to the target.")]
		public float positionLerpTime;

		[Token(Token = "0x4000574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("X = Change in mouse position.\nY = Multiplicative factor for camera rotation.")]
		[Header("Rotation Settings")]
		public AnimationCurve mouseSensitivityCurve;

		[Token(Token = "0x4000575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Time it takes to interpolate camera rotation 99% of the way to the target.")]
		[Range(0.001f, 1f)]
		public float rotationLerpTime;

		[Token(Token = "0x4000576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Whether or not to invert our Y axis for mouse input to rotation.")]
		public bool invertY;

		[Token(Token = "0x60005BB")]
		[Address(RVA = "0xF29604", Offset = "0xF29604", VA = "0xF29604")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60005BC")]
		[Address(RVA = "0xF296DC", Offset = "0xF296DC", VA = "0xF296DC")]
		private Vector3 GetInputTranslationDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005BD")]
		[Address(RVA = "0xF2990C", Offset = "0xF2990C", VA = "0xF2990C")]
		private void Update()
		{
		}

		[Token(Token = "0x60005BE")]
		[Address(RVA = "0xF29D00", Offset = "0xF29D00", VA = "0xF29D00")]
		public SimpleCameraController()
		{
		}
	}
}
namespace OculusSampleFramework
{
	[Token(Token = "0x2000108")]
	public class ColorGrabbable : OVRGrabbable
	{
		[Token(Token = "0x400057D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Color COLOR_GRAB;

		[Token(Token = "0x400057E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly Color COLOR_HIGHLIGHT;

		[Token(Token = "0x400057F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Color m_color;

		[Token(Token = "0x4000580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private MeshRenderer[] m_meshRenderers;

		[Token(Token = "0x4000581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool m_highlight;

		[Token(Token = "0x1700007C")]
		public bool Highlight
		{
			[Token(Token = "0x60005C4")]
			[Address(RVA = "0xF29EE4", Offset = "0xF29EE4", VA = "0xF29EE4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60005C5")]
			[Address(RVA = "0xF29EEC", Offset = "0xF29EEC", VA = "0xF29EEC")]
			set
			{
			}
		}

		[Token(Token = "0x60005C6")]
		[Address(RVA = "0xF29EF8", Offset = "0xF29EF8", VA = "0xF29EF8")]
		protected void UpdateColor()
		{
		}

		[Token(Token = "0x60005C7")]
		[Address(RVA = "0xF2A098", Offset = "0xF2A098", VA = "0xF2A098", Slot = "4")]
		public override void GrabBegin(OVRGrabber hand, Collider grabPoint)
		{
		}

		[Token(Token = "0x60005C8")]
		[Address(RVA = "0xF2A0B4", Offset = "0xF2A0B4", VA = "0xF2A0B4", Slot = "5")]
		public override void GrabEnd(Vector3 linearVelocity, Vector3 angularVelocity)
		{
		}

		[Token(Token = "0x60005C9")]
		[Address(RVA = "0xF2A0D0", Offset = "0xF2A0D0", VA = "0xF2A0D0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60005CA")]
		[Address(RVA = "0xF29FA4", Offset = "0xF29FA4", VA = "0xF29FA4")]
		private void SetColor(Color color)
		{
		}

		[Token(Token = "0x60005CB")]
		[Address(RVA = "0xF2A384", Offset = "0xF2A384", VA = "0xF2A384")]
		public ColorGrabbable()
		{
		}
	}
	[Token(Token = "0x2000109")]
	public class DistanceGrabbable : OVRGrabbable
	{
		[Token(Token = "0x4000582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string m_materialColorField;

		[Token(Token = "0x4000583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GrabbableCrosshair m_crosshair;

		[Token(Token = "0x4000584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GrabManager m_crosshairManager;

		[Token(Token = "0x4000585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Renderer m_renderer;

		[Token(Token = "0x4000586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private MaterialPropertyBlock m_mpb;

		[Token(Token = "0x4000587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool m_inRange;

		[Token(Token = "0x4000588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool m_targeted;

		[Token(Token = "0x1700007D")]
		public bool InRange
		{
			[Token(Token = "0x60005CD")]
			[Address(RVA = "0xF2A3FC", Offset = "0xF2A3FC", VA = "0xF2A3FC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60005CE")]
			[Address(RVA = "0xF2A404", Offset = "0xF2A404", VA = "0xF2A404")]
			set
			{
			}
		}

		[Token(Token = "0x1700007E")]
		public bool Targeted
		{
			[Token(Token = "0x60005CF")]
			[Address(RVA = "0xF2A570", Offset = "0xF2A570", VA = "0xF2A570")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60005D0")]
			[Address(RVA = "0xF2A578", Offset = "0xF2A578", VA = "0xF2A578")]
			set
			{
			}
		}

		[Token(Token = "0x60005D1")]
		[Address(RVA = "0xF2A584", Offset = "0xF2A584", VA = "0xF2A584", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60005D2")]
		[Address(RVA = "0xF2A410", Offset = "0xF2A410", VA = "0xF2A410")]
		private void RefreshCrosshair()
		{
		}

		[Token(Token = "0x60005D3")]
		[Address(RVA = "0xF2A774", Offset = "0xF2A774", VA = "0xF2A774")]
		public DistanceGrabbable()
		{
		}
	}
	[Token(Token = "0x200010A")]
	[RequireComponent(typeof(Rigidbody))]
	public class DistanceGrabber : OVRGrabber
	{
		[Token(Token = "0x4000589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[SerializeField]
		private float m_spherecastRadius;

		[Token(Token = "0x400058A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private float m_noSnapThreshhold;

		[Token(Token = "0x400058B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		private bool m_useSpherecast;

		[Token(Token = "0x400058C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
		[SerializeField]
		public bool m_preventGrabThroughWalls;

		[Token(Token = "0x400058D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private float m_objectPullVelocity;

		[Token(Token = "0x400058E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float m_objectPullMaxRotationRate;

		[Token(Token = "0x400058F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool m_movingObjectToHand;

		[Token(Token = "0x4000590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[SerializeField]
		private float m_maxGrabDistance;

		[Token(Token = "0x4000591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private int m_grabObjectsInLayer;

		[Token(Token = "0x4000592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[SerializeField]
		private int m_obstructionLayer;

		[Token(Token = "0x4000593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private DistanceGrabber m_otherHand;

		[Token(Token = "0x4000594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected DistanceGrabbable m_target;

		[Token(Token = "0x4000595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected Collider m_targetCollider;

		[Token(Token = "0x1700007F")]
		public bool UseSpherecast
		{
			[Token(Token = "0x60005D4")]
			[Address(RVA = "0xF2A77C", Offset = "0xF2A77C", VA = "0xF2A77C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60005D5")]
			[Address(RVA = "0xF2A784", Offset = "0xF2A784", VA = "0xF2A784")]
			set
			{
			}
		}

		[Token(Token = "0x60005D6")]
		[Address(RVA = "0xF2A7A0", Offset = "0xF2A7A0", VA = "0xF2A7A0", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60005D7")]
		[Address(RVA = "0xF2A9AC", Offset = "0xF2A9AC", VA = "0xF2A9AC", Slot = "6")]
		public override void Update()
		{
		}

		[Token(Token = "0x60005D8")]
		[Address(RVA = "0xF2B298", Offset = "0xF2B298", VA = "0xF2B298", Slot = "7")]
		protected override void GrabBegin()
		{
		}

		[Token(Token = "0x60005D9")]
		[Address(RVA = "0xF2B800", Offset = "0xF2B800", VA = "0xF2B800", Slot = "8")]
		protected override void MoveGrabbedObject(Vector3 pos, Quaternion rot, bool forceTeleport = false)
		{
		}

		[Token(Token = "0x60005DA")]
		[Address(RVA = "0xF2BC10", Offset = "0xF2BC10", VA = "0xF2BC10")]
		private static DistanceGrabbable HitInfoToGrabbable(RaycastHit hitInfo)
		{
			return null;
		}

		[Token(Token = "0x60005DB")]
		[Address(RVA = "0xF2ABD4", Offset = "0xF2ABD4", VA = "0xF2ABD4")]
		protected bool FindTarget(out DistanceGrabbable dgOut, out Collider collOut)
		{
			return default(bool);
		}

		[Token(Token = "0x60005DC")]
		[Address(RVA = "0xF2BCFC", Offset = "0xF2BCFC", VA = "0xF2BCFC")]
		protected bool FindTargetWithSpherecast(out DistanceGrabbable dgOut, out Collider collOut)
		{
			return default(bool);
		}

		[Token(Token = "0x60005DD")]
		[Address(RVA = "0xF2C0FC", Offset = "0xF2C0FC", VA = "0xF2C0FC", Slot = "9")]
		protected override void GrabVolumeEnable(bool enabled)
		{
		}

		[Token(Token = "0x60005DE")]
		[Address(RVA = "0xF2C114", Offset = "0xF2C114", VA = "0xF2C114", Slot = "10")]
		protected override void OffhandGrabbed(OVRGrabbable grabbable)
		{
		}

		[Token(Token = "0x60005DF")]
		[Address(RVA = "0xF2C11C", Offset = "0xF2C11C", VA = "0xF2C11C")]
		public DistanceGrabber()
		{
		}
	}
	[Token(Token = "0x200010B")]
	public class GrabbableCrosshair : MonoBehaviour
	{
		[Token(Token = "0x200010C")]
		public enum CrosshairState
		{
			[Token(Token = "0x400059B")]
			Disabled,
			[Token(Token = "0x400059C")]
			Enabled,
			[Token(Token = "0x400059D")]
			Targeted
		}

		[Token(Token = "0x4000596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CrosshairState m_state;

		[Token(Token = "0x4000597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform m_centerEyeAnchor;

		[Token(Token = "0x4000598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject m_targetedCrosshair;

		[Token(Token = "0x4000599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject m_enabledCrosshair;

		[Token(Token = "0x60005E0")]
		[Address(RVA = "0xF2C13C", Offset = "0xF2C13C", VA = "0xF2C13C")]
		private void Start()
		{
		}

		[Token(Token = "0x60005E1")]
		[Address(RVA = "0xF2A6E8", Offset = "0xF2A6E8", VA = "0xF2A6E8")]
		public void SetState(CrosshairState cs)
		{
		}

		[Token(Token = "0x60005E2")]
		[Address(RVA = "0xF2C1A4", Offset = "0xF2C1A4", VA = "0xF2C1A4")]
		private void Update()
		{
		}

		[Token(Token = "0x60005E3")]
		[Address(RVA = "0xF2C1DC", Offset = "0xF2C1DC", VA = "0xF2C1DC")]
		public GrabbableCrosshair()
		{
		}
	}
	[Token(Token = "0x200010D")]
	public class GrabManager : MonoBehaviour
	{
		[Token(Token = "0x400059E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Collider m_grabVolume;

		[Token(Token = "0x400059F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color OutlineColorInRange;

		[Token(Token = "0x40005A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color OutlineColorHighlighted;

		[Token(Token = "0x40005A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Color OutlineColorOutOfRange;

		[Token(Token = "0x60005E4")]
		[Address(RVA = "0xF2C1E4", Offset = "0xF2C1E4", VA = "0xF2C1E4")]
		private void OnTriggerEnter(Collider otherCollider)
		{
		}

		[Token(Token = "0x60005E5")]
		[Address(RVA = "0xF2C290", Offset = "0xF2C290", VA = "0xF2C290")]
		private void OnTriggerExit(Collider otherCollider)
		{
		}

		[Token(Token = "0x60005E6")]
		[Address(RVA = "0xF2C338", Offset = "0xF2C338", VA = "0xF2C338")]
		public GrabManager()
		{
		}
	}
	[Token(Token = "0x200010E")]
	public class PauseOnInputLoss : MonoBehaviour
	{
		[Token(Token = "0x60005E7")]
		[Address(RVA = "0xF2C340", Offset = "0xF2C340", VA = "0xF2C340")]
		private void Start()
		{
		}

		[Token(Token = "0x60005E8")]
		[Address(RVA = "0xF2C42C", Offset = "0xF2C42C", VA = "0xF2C42C")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x60005E9")]
		[Address(RVA = "0xF2C438", Offset = "0xF2C438", VA = "0xF2C438")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x60005EA")]
		[Address(RVA = "0xF2C444", Offset = "0xF2C444", VA = "0xF2C444")]
		public PauseOnInputLoss()
		{
		}
	}
	[Token(Token = "0x200010F")]
	public class BoneCapsuleTriggerLogic : MonoBehaviour
	{
		[Token(Token = "0x40005A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractableToolTags ToolTags;

		[Token(Token = "0x40005A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HashSet<ColliderZone> CollidersTouchingUs;

		[Token(Token = "0x40005A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<ColliderZone> _elementsToCleanUp;

		[Token(Token = "0x60005EB")]
		[Address(RVA = "0xF2C44C", Offset = "0xF2C44C", VA = "0xF2C44C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60005EC")]
		[Address(RVA = "0xF2C49C", Offset = "0xF2C49C", VA = "0xF2C49C")]
		private void Update()
		{
		}

		[Token(Token = "0x60005ED")]
		[Address(RVA = "0xF2C874", Offset = "0xF2C874", VA = "0xF2C874")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60005EE")]
		[Address(RVA = "0xF2C960", Offset = "0xF2C960", VA = "0xF2C960")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60005EF")]
		[Address(RVA = "0xF2C4A0", Offset = "0xF2C4A0", VA = "0xF2C4A0")]
		private void CleanUpDeadColliders()
		{
		}

		[Token(Token = "0x60005F0")]
		[Address(RVA = "0xF2CA4C", Offset = "0xF2CA4C", VA = "0xF2CA4C")]
		public BoneCapsuleTriggerLogic()
		{
		}
	}
	[Token(Token = "0x2000110")]
	public class ButtonController : Interactable
	{
		[Token(Token = "0x2000111")]
		public enum ContactTest
		{
			[Token(Token = "0x40005B4")]
			PerpenTest,
			[Token(Token = "0x40005B5")]
			BackwardsPress
		}

		[Token(Token = "0x40005A5")]
		private const float ENTRY_DOT_THRESHOLD = 0.8f;

		[Token(Token = "0x40005A6")]
		private const float PERP_DOT_THRESHOLD = 0.5f;

		[Token(Token = "0x40005A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private GameObject _proximityZone;

		[Token(Token = "0x40005A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject _contactZone;

		[Token(Token = "0x40005A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private GameObject _actionZone;

		[Token(Token = "0x40005AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private ContactTest[] _contactTests;

		[Token(Token = "0x40005AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Transform _buttonPlaneCenter;

		[Token(Token = "0x40005AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private bool _makeSureToolIsOnPositiveSide;

		[Token(Token = "0x40005AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[SerializeField]
		private Vector3 _localButtonDirection;

		[Token(Token = "0x40005AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private InteractableToolTags[] _allValidToolsTags;

		[Token(Token = "0x40005AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int _toolTagsMask;

		[Token(Token = "0x40005B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[SerializeField]
		private bool _allowMultipleNearFieldInteraction;

		[Token(Token = "0x40005B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Dictionary<InteractableTool, InteractableState> _toolToState;

		[Token(Token = "0x17000080")]
		public override int ValidToolTagsMask
		{
			[Token(Token = "0x60005F1")]
			[Address(RVA = "0xF2CB24", Offset = "0xF2CB24", VA = "0xF2CB24", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000081")]
		public Vector3 LocalButtonDirection
		{
			[Token(Token = "0x60005F2")]
			[Address(RVA = "0xF2CB2C", Offset = "0xF2CB2C", VA = "0xF2CB2C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000082")]
		public InteractableState CurrentButtonState
		{
			[Token(Token = "0x60005F3")]
			[Address(RVA = "0xF2CB38", Offset = "0xF2CB38", VA = "0xF2CB38")]
			[CompilerGenerated]
			get
			{
				return default(InteractableState);
			}
			[Token(Token = "0x60005F4")]
			[Address(RVA = "0xF2CB40", Offset = "0xF2CB40", VA = "0xF2CB40")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60005F5")]
		[Address(RVA = "0xF2CB48", Offset = "0xF2CB48", VA = "0xF2CB48", Slot = "9")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60005F6")]
		[Address(RVA = "0xF2CC98", Offset = "0xF2CC98", VA = "0xF2CC98")]
		private void FireInteractionEventsOnDepth(InteractableCollisionDepth oldDepth, InteractableTool collidingTool, InteractionType interactionType)
		{
		}

		[Token(Token = "0x60005F7")]
		[Address(RVA = "0xF2CEA0", Offset = "0xF2CEA0", VA = "0xF2CEA0", Slot = "8")]
		public override void UpdateCollisionDepth(InteractableTool interactableTool, InteractableCollisionDepth oldCollisionDepth, InteractableCollisionDepth newCollisionDepth)
		{
		}

		[Token(Token = "0x60005F8")]
		[Address(RVA = "0xF2D464", Offset = "0xF2D464", VA = "0xF2D464")]
		private InteractableState GetUpcomingStateNearField(InteractableState oldState, InteractableCollisionDepth newCollisionDepth, bool toolIsInActionZone, bool toolIsInContactZone, bool toolIsInProximity, bool validContact, bool onPositiveSideOfInteractable)
		{
			return default(InteractableState);
		}

		[Token(Token = "0x60005F9")]
		[Address(RVA = "0xF2D5CC", Offset = "0xF2D5CC", VA = "0xF2D5CC")]
		public void ForceResetButton()
		{
		}

		[Token(Token = "0x60005FA")]
		[Address(RVA = "0xF2D388", Offset = "0xF2D388", VA = "0xF2D388")]
		private bool IsValidContact(InteractableTool collidingTool, Vector3 buttonDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x60005FB")]
		[Address(RVA = "0xF2D6D8", Offset = "0xF2D6D8", VA = "0xF2D6D8")]
		private bool PassEntryTest(InteractableTool collidingTool, Vector3 buttonDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x60005FC")]
		[Address(RVA = "0xF2D7E4", Offset = "0xF2D7E4", VA = "0xF2D7E4")]
		private bool PassPerpTest(InteractableTool collidingTool, Vector3 buttonDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x60005FD")]
		[Address(RVA = "0xF2D86C", Offset = "0xF2D86C", VA = "0xF2D86C")]
		public ButtonController()
		{
		}
	}
	[Token(Token = "0x2000112")]
	public class ButtonTriggerZone : MonoBehaviour, ColliderZone
	{
		[Token(Token = "0x40005B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _parentInteractableObj;

		[Token(Token = "0x17000083")]
		public Collider Collider
		{
			[Token(Token = "0x60005FE")]
			[Address(RVA = "0xF2D990", Offset = "0xF2D990", VA = "0xF2D990", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60005FF")]
			[Address(RVA = "0xF2D998", Offset = "0xF2D998", VA = "0xF2D998")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000084")]
		public Interactable ParentInteractable
		{
			[Token(Token = "0x6000600")]
			[Address(RVA = "0xF2D9A0", Offset = "0xF2D9A0", VA = "0xF2D9A0", Slot = "5")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000601")]
			[Address(RVA = "0xF2D9A8", Offset = "0xF2D9A8", VA = "0xF2D9A8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000085")]
		public InteractableCollisionDepth CollisionDepth
		{
			[Token(Token = "0x6000602")]
			[Address(RVA = "0xF2D9B0", Offset = "0xF2D9B0", VA = "0xF2D9B0", Slot = "6")]
			get
			{
				return default(InteractableCollisionDepth);
			}
		}

		[Token(Token = "0x6000603")]
		[Address(RVA = "0xF2DA00", Offset = "0xF2DA00", VA = "0xF2DA00")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000604")]
		[Address(RVA = "0xF2DA94", Offset = "0xF2DA94", VA = "0xF2DA94")]
		public ButtonTriggerZone()
		{
		}
	}
	[Token(Token = "0x2000113")]
	public interface ColliderZone
	{
		[Token(Token = "0x17000086")]
		Collider Collider
		{
			[Token(Token = "0x6000605")]
			get;
		}

		[Token(Token = "0x17000087")]
		Interactable ParentInteractable
		{
			[Token(Token = "0x6000606")]
			get;
		}

		[Token(Token = "0x17000088")]
		InteractableCollisionDepth CollisionDepth
		{
			[Token(Token = "0x6000607")]
			get;
		}
	}
	[Token(Token = "0x2000114")]
	public class ColliderZoneArgs : EventArgs
	{
		[Token(Token = "0x40005B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ColliderZone Collider;

		[Token(Token = "0x40005BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly float FrameTime;

		[Token(Token = "0x40005BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly InteractableTool CollidingTool;

		[Token(Token = "0x40005BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly InteractionType InteractionT;

		[Token(Token = "0x6000608")]
		[Address(RVA = "0xF2CDF4", Offset = "0xF2CDF4", VA = "0xF2CDF4")]
		public ColliderZoneArgs(ColliderZone collider, float frameTime, InteractableTool collidingTool, InteractionType interactionType)
		{
		}
	}
	[Token(Token = "0x2000115")]
	public enum InteractionType
	{
		[Token(Token = "0x40005BE")]
		Enter,
		[Token(Token = "0x40005BF")]
		Stay,
		[Token(Token = "0x40005C0")]
		Exit
	}
	[Token(Token = "0x2000116")]
	public class HandsManager : MonoBehaviour
	{
		[Token(Token = "0x2000117")]
		public enum HandsVisualMode
		{
			[Token(Token = "0x40005D2")]
			Mesh,
			[Token(Token = "0x40005D3")]
			Skeleton,
			[Token(Token = "0x40005D4")]
			Both
		}

		[Token(Token = "0x2000118")]
		[CompilerGenerated]
		private sealed class <FindSkeletonVisualGameObjects>d__52 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40005D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40005D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40005D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandsManager <>4__this;

			[Token(Token = "0x17000094")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600062A")]
				[Address(RVA = "0xF2EEF4", Offset = "0xF2EEF4", VA = "0xF2EEF4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000095")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600062C")]
				[Address(RVA = "0xF2EF3C", Offset = "0xF2EF3C", VA = "0xF2EF3C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000627")]
			[Address(RVA = "0xF2E4EC", Offset = "0xF2E4EC", VA = "0xF2E4EC")]
			[DebuggerHidden]
			public <FindSkeletonVisualGameObjects>d__52(int <>1__state)
			{
			}

			[Token(Token = "0x6000628")]
			[Address(RVA = "0xF2ECD4", Offset = "0xF2ECD4", VA = "0xF2ECD4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000629")]
			[Address(RVA = "0xF2ECD8", Offset = "0xF2ECD8", VA = "0xF2ECD8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600062B")]
			[Address(RVA = "0xF2EEFC", Offset = "0xF2EEFC", VA = "0xF2EEFC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40005C1")]
		private const string SKELETON_VISUALIZER_NAME = "SkeletonRenderer";

		[Token(Token = "0x40005C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _leftHand;

		[Token(Token = "0x40005C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject _rightHand;

		[Token(Token = "0x40005C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HandsVisualMode VisualMode;

		[Token(Token = "0x40005C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private OVRHand[] _hand;

		[Token(Token = "0x40005C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private OVRSkeleton[] _handSkeleton;

		[Token(Token = "0x40005C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private OVRSkeletonRenderer[] _handSkeletonRenderer;

		[Token(Token = "0x40005C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private OVRMesh[] _handMesh;

		[Token(Token = "0x40005C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private OVRMeshRenderer[] _handMeshRenderer;

		[Token(Token = "0x40005CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private SkinnedMeshRenderer _leftMeshRenderer;

		[Token(Token = "0x40005CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private SkinnedMeshRenderer _rightMeshRenderer;

		[Token(Token = "0x40005CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject _leftSkeletonVisual;

		[Token(Token = "0x40005CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject _rightSkeletonVisual;

		[Token(Token = "0x40005CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float _currentHandAlpha;

		[Token(Token = "0x40005CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int HandAlphaId;

		[Token(Token = "0x17000089")]
		public OVRHand RightHand
		{
			[Token(Token = "0x6000609")]
			[Address(RVA = "0xF2DA9C", Offset = "0xF2DA9C", VA = "0xF2DA9C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600060A")]
			[Address(RVA = "0xF2DAC8", Offset = "0xF2DAC8", VA = "0xF2DAC8")]
			private set
			{
			}
		}

		[Token(Token = "0x1700008A")]
		public OVRSkeleton RightHandSkeleton
		{
			[Token(Token = "0x600060B")]
			[Address(RVA = "0xF2DB2C", Offset = "0xF2DB2C", VA = "0xF2DB2C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600060C")]
			[Address(RVA = "0xF2DB58", Offset = "0xF2DB58", VA = "0xF2DB58")]
			private set
			{
			}
		}

		[Token(Token = "0x1700008B")]
		public OVRSkeletonRenderer RightHandSkeletonRenderer
		{
			[Token(Token = "0x600060D")]
			[Address(RVA = "0xF2DBBC", Offset = "0xF2DBBC", VA = "0xF2DBBC")]
			get
			{
				return null;
			}
			[Token(Token = "0x600060E")]
			[Address(RVA = "0xF2DBE8", Offset = "0xF2DBE8", VA = "0xF2DBE8")]
			private set
			{
			}
		}

		[Token(Token = "0x1700008C")]
		public OVRMesh RightHandMesh
		{
			[Token(Token = "0x600060F")]
			[Address(RVA = "0xF2DC4C", Offset = "0xF2DC4C", VA = "0xF2DC4C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000610")]
			[Address(RVA = "0xF2DC78", Offset = "0xF2DC78", VA = "0xF2DC78")]
			private set
			{
			}
		}

		[Token(Token = "0x1700008D")]
		public OVRMeshRenderer RightHandMeshRenderer
		{
			[Token(Token = "0x6000611")]
			[Address(RVA = "0xF2DCDC", Offset = "0xF2DCDC", VA = "0xF2DCDC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000612")]
			[Address(RVA = "0xF2DD08", Offset = "0xF2DD08", VA = "0xF2DD08")]
			private set
			{
			}
		}

		[Token(Token = "0x1700008E")]
		public OVRHand LeftHand
		{
			[Token(Token = "0x6000613")]
			[Address(RVA = "0xF2DD6C", Offset = "0xF2DD6C", VA = "0xF2DD6C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000614")]
			[Address(RVA = "0xF2DD94", Offset = "0xF2DD94", VA = "0xF2DD94")]
			private set
			{
			}
		}

		[Token(Token = "0x1700008F")]
		public OVRSkeleton LeftHandSkeleton
		{
			[Token(Token = "0x6000615")]
			[Address(RVA = "0xF2DDF4", Offset = "0xF2DDF4", VA = "0xF2DDF4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000616")]
			[Address(RVA = "0xF2DE1C", Offset = "0xF2DE1C", VA = "0xF2DE1C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000090")]
		public OVRSkeletonRenderer LeftHandSkeletonRenderer
		{
			[Token(Token = "0x6000617")]
			[Address(RVA = "0xF2DE7C", Offset = "0xF2DE7C", VA = "0xF2DE7C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000618")]
			[Address(RVA = "0xF2DEA4", Offset = "0xF2DEA4", VA = "0xF2DEA4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000091")]
		public OVRMesh LeftHandMesh
		{
			[Token(Token = "0x6000619")]
			[Address(RVA = "0xF2DF04", Offset = "0xF2DF04", VA = "0xF2DF04")]
			get
			{
				return null;
			}
			[Token(Token = "0x600061A")]
			[Address(RVA = "0xF2DF2C", Offset = "0xF2DF2C", VA = "0xF2DF2C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000092")]
		public OVRMeshRenderer LeftHandMeshRenderer
		{
			[Token(Token = "0x600061B")]
			[Address(RVA = "0xF2DF8C", Offset = "0xF2DF8C", VA = "0xF2DF8C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600061C")]
			[Address(RVA = "0xF2DFB4", Offset = "0xF2DFB4", VA = "0xF2DFB4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000093")]
		public static HandsManager Instance
		{
			[Token(Token = "0x600061D")]
			[Address(RVA = "0xF2E014", Offset = "0xF2E014", VA = "0xF2E014")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600061E")]
			[Address(RVA = "0xF2E05C", Offset = "0xF2E05C", VA = "0xF2E05C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600061F")]
		[Address(RVA = "0xF2E0B4", Offset = "0xF2E0B4", VA = "0xF2E0B4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000620")]
		[Address(RVA = "0xF2E470", Offset = "0xF2E470", VA = "0xF2E470")]
		private void Update()
		{
		}

		[Token(Token = "0x6000621")]
		[Address(RVA = "0xF2E3FC", Offset = "0xF2E3FC", VA = "0xF2E3FC")]
		[IteratorStateMachine(typeof(<FindSkeletonVisualGameObjects>d__52))]
		private IEnumerator FindSkeletonVisualGameObjects()
		{
			return null;
		}

		[Token(Token = "0x6000622")]
		[Address(RVA = "0xF2E514", Offset = "0xF2E514", VA = "0xF2E514")]
		public void SwitchVisualization()
		{
		}

		[Token(Token = "0x6000623")]
		[Address(RVA = "0xF2E5D8", Offset = "0xF2E5D8", VA = "0xF2E5D8")]
		private void SetToCurrentVisualMode()
		{
		}

		[Token(Token = "0x6000624")]
		[Address(RVA = "0xF2E7A8", Offset = "0xF2E7A8", VA = "0xF2E7A8")]
		public static List<OVRBoneCapsule> GetCapsulesPerBone(OVRSkeleton skeleton, OVRSkeleton.BoneId boneId)
		{
			return null;
		}

		[Token(Token = "0x6000625")]
		[Address(RVA = "0xF2EA0C", Offset = "0xF2EA0C", VA = "0xF2EA0C")]
		public bool IsInitialized()
		{
			return default(bool);
		}

		[Token(Token = "0x6000626")]
		[Address(RVA = "0xF2EB6C", Offset = "0xF2EB6C", VA = "0xF2EB6C")]
		public HandsManager()
		{
		}
	}
	[Token(Token = "0x2000119")]
	public abstract class Interactable : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200011A")]
		public class InteractableStateArgsEvent : UnityEvent<InteractableStateArgs>
		{
			[Token(Token = "0x600063E")]
			[Address(RVA = "0xF2F58C", Offset = "0xF2F58C", VA = "0xF2F58C")]
			public InteractableStateArgsEvent()
			{
			}
		}

		[Token(Token = "0x40005D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected ColliderZone _proximityZoneCollider;

		[Token(Token = "0x40005D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected ColliderZone _contactZoneCollider;

		[Token(Token = "0x40005DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected ColliderZone _actionZoneCollider;

		[Token(Token = "0x40005DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public InteractableStateArgsEvent InteractableStateChanged;

		[Token(Token = "0x17000096")]
		public ColliderZone ProximityCollider
		{
			[Token(Token = "0x600062D")]
			[Address(RVA = "0xF2EF44", Offset = "0xF2EF44", VA = "0xF2EF44")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000097")]
		public ColliderZone ContactCollider
		{
			[Token(Token = "0x600062E")]
			[Address(RVA = "0xF2EF4C", Offset = "0xF2EF4C", VA = "0xF2EF4C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000098")]
		public ColliderZone ActionCollider
		{
			[Token(Token = "0x600062F")]
			[Address(RVA = "0xF2EF54", Offset = "0xF2EF54", VA = "0xF2EF54")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000099")]
		public virtual int ValidToolTagsMask
		{
			[Token(Token = "0x6000630")]
			[Address(RVA = "0xF2EF5C", Offset = "0xF2EF5C", VA = "0xF2EF5C", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x14000012")]
		public event Action<ColliderZoneArgs> ProximityZoneEvent
		{
			[Token(Token = "0x6000631")]
			[Address(RVA = "0xF2EF64", Offset = "0xF2EF64", VA = "0xF2EF64")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000632")]
			[Address(RVA = "0xF2F014", Offset = "0xF2F014", VA = "0xF2F014")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000013")]
		public event Action<ColliderZoneArgs> ContactZoneEvent
		{
			[Token(Token = "0x6000634")]
			[Address(RVA = "0xF2F0E0", Offset = "0xF2F0E0", VA = "0xF2F0E0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000635")]
			[Address(RVA = "0xF2F190", Offset = "0xF2F190", VA = "0xF2F190")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000014")]
		public event Action<ColliderZoneArgs> ActionZoneEvent
		{
			[Token(Token = "0x6000637")]
			[Address(RVA = "0xF2F25C", Offset = "0xF2F25C", VA = "0xF2F25C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000638")]
			[Address(RVA = "0xF2F30C", Offset = "0xF2F30C", VA = "0xF2F30C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000633")]
		[Address(RVA = "0xF2F0C4", Offset = "0xF2F0C4", VA = "0xF2F0C4", Slot = "5")]
		protected virtual void OnProximityZoneEvent(ColliderZoneArgs args)
		{
		}

		[Token(Token = "0x6000636")]
		[Address(RVA = "0xF2F240", Offset = "0xF2F240", VA = "0xF2F240", Slot = "6")]
		protected virtual void OnContactZoneEvent(ColliderZoneArgs args)
		{
		}

		[Token(Token = "0x6000639")]
		[Address(RVA = "0xF2F3BC", Offset = "0xF2F3BC", VA = "0xF2F3BC", Slot = "7")]
		protected virtual void OnActionZoneEvent(ColliderZoneArgs args)
		{
		}

		[Token(Token = "0x600063A")]
		public abstract void UpdateCollisionDepth(InteractableTool interactableTool, InteractableCollisionDepth oldCollisionDepth, InteractableCollisionDepth newCollisionDepth);

		[Token(Token = "0x600063B")]
		[Address(RVA = "0xF2CC44", Offset = "0xF2CC44", VA = "0xF2CC44", Slot = "9")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600063C")]
		[Address(RVA = "0xF2F488", Offset = "0xF2F488", VA = "0xF2F488", Slot = "10")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x600063D")]
		[Address(RVA = "0xF2D988", Offset = "0xF2D988", VA = "0xF2D988")]
		protected Interactable()
		{
		}
	}
	[Token(Token = "0x200011B")]
	public enum InteractableCollisionDepth
	{
		[Token(Token = "0x40005E0")]
		None,
		[Token(Token = "0x40005E1")]
		Proximity,
		[Token(Token = "0x40005E2")]
		Contact,
		[Token(Token = "0x40005E3")]
		Action
	}
	[Token(Token = "0x200011C")]
	public enum InteractableState
	{
		[Token(Token = "0x40005E5")]
		Default,
		[Token(Token = "0x40005E6")]
		ProximityState,
		[Token(Token = "0x40005E7")]
		ContactState,
		[Token(Token = "0x40005E8")]
		ActionState
	}
	[Token(Token = "0x200011D")]
	public class InteractableStateArgs : EventArgs
	{
		[Token(Token = "0x40005E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Interactable Interactable;

		[Token(Token = "0x40005EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly InteractableTool Tool;

		[Token(Token = "0x40005EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly InteractableState OldInteractableState;

		[Token(Token = "0x40005EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public readonly InteractableState NewInteractableState;

		[Token(Token = "0x40005ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly ColliderZoneArgs ColliderArgs;

		[Token(Token = "0x600063F")]
		[Address(RVA = "0xF2D514", Offset = "0xF2D514", VA = "0xF2D514")]
		public InteractableStateArgs(Interactable interactable, InteractableTool tool, InteractableState newInteractableState, InteractableState oldState, ColliderZoneArgs colliderArgs)
		{
		}
	}
	[Token(Token = "0x200011E")]
	public class InteractableRegistry : MonoBehaviour
	{
		[Token(Token = "0x40005EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static HashSet<Interactable> _interactables;

		[Token(Token = "0x1700009A")]
		public static HashSet<Interactable> Interactables
		{
			[Token(Token = "0x6000640")]
			[Address(RVA = "0xF2F5D4", Offset = "0xF2F5D4", VA = "0xF2F5D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000641")]
		[Address(RVA = "0xF2F3D8", Offset = "0xF2F3D8", VA = "0xF2F3D8")]
		public static void RegisterInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6000642")]
		[Address(RVA = "0xF2F4DC", Offset = "0xF2F4DC", VA = "0xF2F4DC")]
		public static void UnregisterInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6000643")]
		[Address(RVA = "0xF2F62C", Offset = "0xF2F62C", VA = "0xF2F62C")]
		public InteractableRegistry()
		{
		}
	}
	[Token(Token = "0x200011F")]
	public class InteractableToolsCreator : MonoBehaviour
	{
		[Token(Token = "0x2000120")]
		[CompilerGenerated]
		private sealed class <AttachToolsToHands>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40005F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40005F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40005F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform[] toolObjects;

			[Token(Token = "0x40005F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool isRightHand;

			[Token(Token = "0x40005F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public InteractableToolsCreator <>4__this;

			[Token(Token = "0x40005F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private HandsManager <handsManagerObj>5__2;

			[Token(Token = "0x40005F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private HashSet<Transform>.Enumerator <>7__wrap2;

			[Token(Token = "0x40005F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Transform <toolObject>5__4;

			[Token(Token = "0x40005F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private OVRSkeleton <handSkeletonToAttachTo>5__5;

			[Token(Token = "0x1700009B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600064D")]
				[Address(RVA = "0xF2FDEC", Offset = "0xF2FDEC", VA = "0xF2FDEC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700009C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600064F")]
				[Address(RVA = "0xF2FE34", Offset = "0xF2FE34", VA = "0xF2FE34", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000649")]
			[Address(RVA = "0xF2F7D4", Offset = "0xF2F7D4", VA = "0xF2F7D4")]
			[DebuggerHidden]
			public <AttachToolsToHands>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x600064A")]
			[Address(RVA = "0xF2F910", Offset = "0xF2F910", VA = "0xF2F910", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600064B")]
			[Address(RVA = "0xF2F92C", Offset = "0xF2F92C", VA = "0xF2F92C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600064C")]
			[Address(RVA = "0xF2FD9C", Offset = "0xF2FD9C", VA = "0xF2FD9C")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x600064E")]
			[Address(RVA = "0xF2FDF4", Offset = "0xF2FDF4", VA = "0xF2FDF4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40005EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform[] LeftHandTools;

		[Token(Token = "0x40005F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform[] RightHandTools;

		[Token(Token = "0x6000645")]
		[Address(RVA = "0xF2F6CC", Offset = "0xF2F6CC", VA = "0xF2F6CC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000646")]
		[Address(RVA = "0xF2F738", Offset = "0xF2F738", VA = "0xF2F738")]
		[IteratorStateMachine(typeof(<AttachToolsToHands>d__3))]
		private IEnumerator AttachToolsToHands(Transform[] toolObjects, bool isRightHand)
		{
			return null;
		}

		[Token(Token = "0x6000647")]
		[Address(RVA = "0xF2F7FC", Offset = "0xF2F7FC", VA = "0xF2F7FC")]
		private void AttachToolToHandTransform(Transform tool, bool isRightHanded)
		{
		}

		[Token(Token = "0x6000648")]
		[Address(RVA = "0xF2F908", Offset = "0xF2F908", VA = "0xF2F908")]
		public InteractableToolsCreator()
		{
		}
	}
	[Token(Token = "0x2000121")]
	public class InteractableToolsInputRouter : MonoBehaviour
	{
		[Token(Token = "0x40005FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static InteractableToolsInputRouter _instance;

		[Token(Token = "0x40005FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool _leftPinch;

		[Token(Token = "0x40005FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool _rightPinch;

		[Token(Token = "0x40005FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HashSet<InteractableTool> _leftHandNearTools;

		[Token(Token = "0x40005FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HashSet<InteractableTool> _leftHandFarTools;

		[Token(Token = "0x40005FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private HashSet<InteractableTool> _rightHandNearTools;

		[Token(Token = "0x4000600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private HashSet<InteractableTool> _rightHandFarTools;

		[Token(Token = "0x1700009D")]
		public static InteractableToolsInputRouter Instance
		{
			[Token(Token = "0x6000650")]
			[Address(RVA = "0xF2FE3C", Offset = "0xF2FE3C", VA = "0xF2FE3C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000651")]
		[Address(RVA = "0xF2FF98", Offset = "0xF2FF98", VA = "0xF2FF98")]
		public void RegisterInteractableTool(InteractableTool interactableTool)
		{
		}

		[Token(Token = "0x6000652")]
		[Address(RVA = "0xF30034", Offset = "0xF30034", VA = "0xF30034")]
		public void UnregisterInteractableTool(InteractableTool interactableTool)
		{
		}

		[Token(Token = "0x6000653")]
		[Address(RVA = "0xF300D0", Offset = "0xF300D0", VA = "0xF300D0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000654")]
		[Address(RVA = "0xF3036C", Offset = "0xF3036C", VA = "0xF3036C")]
		private bool UpdateToolsAndEnableState(HashSet<InteractableTool> tools, bool toolsAreEnabledThisFrame)
		{
			return default(bool);
		}

		[Token(Token = "0x6000655")]
		[Address(RVA = "0xF303A8", Offset = "0xF303A8", VA = "0xF303A8")]
		private bool UpdateTools(HashSet<InteractableTool> tools, bool resetCollisionData = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000656")]
		[Address(RVA = "0xF30680", Offset = "0xF30680", VA = "0xF30680")]
		private void ToggleToolsEnableState(HashSet<InteractableTool> tools, bool enableState)
		{
		}

		[Token(Token = "0x6000657")]
		[Address(RVA = "0xF30888", Offset = "0xF30888", VA = "0xF30888")]
		public InteractableToolsInputRouter()
		{
		}
	}
	[Token(Token = "0x2000122")]
	public class FingerTipPokeTool : InteractableTool
	{
		[Token(Token = "0x2000123")]
		[CompilerGenerated]
		private sealed class <AttachTriggerLogic>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400060C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400060D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400060E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FingerTipPokeTool <>4__this;

			[Token(Token = "0x170000A2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000669")]
				[Address(RVA = "0xF31A58", Offset = "0xF31A58", VA = "0xF31A58", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000A3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600066B")]
				[Address(RVA = "0xF31AA0", Offset = "0xF31AA0", VA = "0xF31AA0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000666")]
			[Address(RVA = "0xF30B24", Offset = "0xF30B24", VA = "0xF30B24")]
			[DebuggerHidden]
			public <AttachTriggerLogic>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x6000667")]
			[Address(RVA = "0xF315C8", Offset = "0xF315C8", VA = "0xF315C8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000668")]
			[Address(RVA = "0xF315CC", Offset = "0xF315CC", VA = "0xF315CC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600066A")]
			[Address(RVA = "0xF31A60", Offset = "0xF31A60", VA = "0xF31A60", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000601")]
		private const int NUM_VELOCITY_FRAMES = 10;

		[Token(Token = "0x4000602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private FingerTipPokeToolView _fingerTipPokeToolView;

		[Token(Token = "0x4000603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private OVRPlugin.HandFinger _fingerToFollow;

		[Token(Token = "0x4000604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3[] _velocityFrames;

		[Token(Token = "0x4000605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int _currVelocityFrame;

		[Token(Token = "0x4000606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private bool _sampledMaxFramesAlready;

		[Token(Token = "0x4000607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 _position;

		[Token(Token = "0x4000608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private BoneCapsuleTriggerLogic[] _boneCapsuleTriggerLogic;

		[Token(Token = "0x4000609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float _lastScale;

		[Token(Token = "0x400060A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool _isInitialized;

		[Token(Token = "0x400060B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private OVRBoneCapsule _capsuleToTrack;

		[Token(Token = "0x1700009E")]
		public override InteractableToolTags ToolTags
		{
			[Token(Token = "0x6000658")]
			[Address(RVA = "0xF30990", Offset = "0xF30990", VA = "0xF30990", Slot = "4")]
			get
			{
				return default(InteractableToolTags);
			}
		}

		[Token(Token = "0x1700009F")]
		public override ToolInputState ToolInputState
		{
			[Token(Token = "0x6000659")]
			[Address(RVA = "0xF30998", Offset = "0xF30998", VA = "0xF30998", Slot = "5")]
			get
			{
				return default(ToolInputState);
			}
		}

		[Token(Token = "0x170000A0")]
		public override bool IsFarFieldTool
		{
			[Token(Token = "0x600065A")]
			[Address(RVA = "0xF309A0", Offset = "0xF309A0", VA = "0xF309A0", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000A1")]
		public override bool EnableState
		{
			[Token(Token = "0x600065B")]
			[Address(RVA = "0xF309A8", Offset = "0xF309A8", VA = "0xF309A8", Slot = "10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600065C")]
			[Address(RVA = "0xF309D0", Offset = "0xF309D0", VA = "0xF309D0", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x600065D")]
		[Address(RVA = "0xF30A00", Offset = "0xF30A00", VA = "0xF30A00", Slot = "12")]
		public override void Initialize()
		{
		}

		[Token(Token = "0x600065E")]
		[Address(RVA = "0xF30AB0", Offset = "0xF30AB0", VA = "0xF30AB0")]
		[IteratorStateMachine(typeof(<AttachTriggerLogic>d__21))]
		private IEnumerator AttachTriggerLogic()
		{
			return null;
		}

		[Token(Token = "0x600065F")]
		[Address(RVA = "0xF30B4C", Offset = "0xF30B4C", VA = "0xF30B4C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000660")]
		[Address(RVA = "0xF30DCC", Offset = "0xF30DCC", VA = "0xF30DCC")]
		private void UpdateAverageVelocity()
		{
		}

		[Token(Token = "0x6000661")]
		[Address(RVA = "0xF30F88", Offset = "0xF30F88", VA = "0xF30F88")]
		private void CheckAndUpdateScale()
		{
		}

		[Token(Token = "0x6000662")]
		[Address(RVA = "0xF31070", Offset = "0xF31070", VA = "0xF31070", Slot = "7")]
		public override List<InteractableCollisionInfo> GetNextIntersectingObjects()
		{
			return null;
		}

		[Token(Token = "0x6000663")]
		[Address(RVA = "0xF31404", Offset = "0xF31404", VA = "0xF31404", Slot = "8")]
		public override void FocusOnInteractable(Interactable focusedInteractable, ColliderZone colliderZone)
		{
		}

		[Token(Token = "0x6000664")]
		[Address(RVA = "0xF31408", Offset = "0xF31408", VA = "0xF31408", Slot = "9")]
		public override void DeFocus()
		{
		}

		[Token(Token = "0x6000665")]
		[Address(RVA = "0xF3140C", Offset = "0xF3140C", VA = "0xF3140C")]
		public FingerTipPokeTool()
		{
		}
	}
	[Token(Token = "0x2000124")]
	public class FingerTipPokeToolView : MonoBehaviour, InteractableToolView
	{
		[Token(Token = "0x400060F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer _sphereMeshRenderer;

		[Token(Token = "0x170000A4")]
		public InteractableTool InteractableTool
		{
			[Token(Token = "0x600066C")]
			[Address(RVA = "0xF31AA8", Offset = "0xF31AA8", VA = "0xF31AA8", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600066D")]
			[Address(RVA = "0xF31AB0", Offset = "0xF31AB0", VA = "0xF31AB0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000A5")]
		public bool EnableState
		{
			[Token(Token = "0x600066E")]
			[Address(RVA = "0xF31AB8", Offset = "0xF31AB8", VA = "0xF31AB8", Slot = "6")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600066F")]
			[Address(RVA = "0xF31AD4", Offset = "0xF31AD4", VA = "0xF31AD4", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x170000A6")]
		public bool ToolActivateState
		{
			[Token(Token = "0x6000670")]
			[Address(RVA = "0xF31AF4", Offset = "0xF31AF4", VA = "0xF31AF4", Slot = "8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000671")]
			[Address(RVA = "0xF31AFC", Offset = "0xF31AFC", VA = "0xF31AFC", Slot = "9")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000A7")]
		public float SphereRadius
		{
			[Token(Token = "0x6000672")]
			[Address(RVA = "0xF31B08", Offset = "0xF31B08", VA = "0xF31B08")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000673")]
			[Address(RVA = "0xF31B10", Offset = "0xF31B10", VA = "0xF31B10")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000674")]
		[Address(RVA = "0xF31B18", Offset = "0xF31B18", VA = "0xF31B18")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000675")]
		[Address(RVA = "0xF31B54", Offset = "0xF31B54", VA = "0xF31B54", Slot = "5")]
		public void SetFocusedInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6000676")]
		[Address(RVA = "0xF31B58", Offset = "0xF31B58", VA = "0xF31B58")]
		public FingerTipPokeToolView()
		{
		}
	}
	[Token(Token = "0x2000125")]
	[Flags]
	public enum InteractableToolTags
	{
		[Token(Token = "0x4000614")]
		None = 0,
		[Token(Token = "0x4000615")]
		Ray = 1,
		[Token(Token = "0x4000616")]
		Poke = 4,
		[Token(Token = "0x4000617")]
		All = -1
	}
	[Token(Token = "0x2000126")]
	public enum ToolInputState
	{
		[Token(Token = "0x4000619")]
		Inactive,
		[Token(Token = "0x400061A")]
		PrimaryInputDown,
		[Token(Token = "0x400061B")]
		PrimaryInputDownStay,
		[Token(Token = "0x400061C")]
		PrimaryInputUp
	}
	[Token(Token = "0x2000127")]
	public class InteractableCollisionInfo
	{
		[Token(Token = "0x400061D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ColliderZone InteractableCollider;

		[Token(Token = "0x400061E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractableCollisionDepth CollisionDepth;

		[Token(Token = "0x400061F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractableTool CollidingTool;

		[Token(Token = "0x6000677")]
		[Address(RVA = "0xF313B0", Offset = "0xF313B0", VA = "0xF313B0")]
		public InteractableCollisionInfo(ColliderZone collider, InteractableCollisionDepth collisionDepth, InteractableTool collidingTool)
		{
		}
	}
	[Token(Token = "0x2000128")]
	public abstract class InteractableTool : MonoBehaviour
	{
		[Token(Token = "0x4000623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected List<InteractableCollisionInfo> _currentIntersectingObjects;

		[Token(Token = "0x4000624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Interactable> _addedInteractables;

		[Token(Token = "0x4000625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Interactable> _removedInteractables;

		[Token(Token = "0x4000626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<Interactable> _remainingInteractables;

		[Token(Token = "0x4000627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<Interactable, InteractableCollisionInfo> _currInteractableToCollisionInfos;

		[Token(Token = "0x4000628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<Interactable, InteractableCollisionInfo> _prevInteractableToCollisionInfos;

		[Token(Token = "0x170000A8")]
		public Transform ToolTransform
		{
			[Token(Token = "0x6000678")]
			[Address(RVA = "0xF2D864", Offset = "0xF2D864", VA = "0xF2D864")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A9")]
		public bool IsRightHandedTool
		{
			[Token(Token = "0x6000679")]
			[Address(RVA = "0xF31B60", Offset = "0xF31B60", VA = "0xF31B60")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600067A")]
			[Address(RVA = "0xF31B68", Offset = "0xF31B68", VA = "0xF31B68")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000AA")]
		public abstract InteractableToolTags ToolTags
		{
			[Token(Token = "0x600067B")]
			get;
		}

		[Token(Token = "0x170000AB")]
		public abstract ToolInputState ToolInputState
		{
			[Token(Token = "0x600067C")]
			get;
		}

		[Token(Token = "0x170000AC")]
		public abstract bool IsFarFieldTool
		{
			[Token(Token = "0x600067D")]
			get;
		}

		[Token(Token = "0x170000AD")]
		public Vector3 Velocity
		{
			[Token(Token = "0x600067E")]
			[Address(RVA = "0xF31B74", Offset = "0xF31B74", VA = "0xF31B74")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600067F")]
			[Address(RVA = "0xF31B80", Offset = "0xF31B80", VA = "0xF31B80")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170000AE")]
		public Vector3 InteractionPosition
		{
			[Token(Token = "0x6000680")]
			[Address(RVA = "0xF31B8C", Offset = "0xF31B8C", VA = "0xF31B8C")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000681")]
			[Address(RVA = "0xF31B98", Offset = "0xF31B98", VA = "0xF31B98")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170000AF")]
		public abstract bool EnableState
		{
			[Token(Token = "0x6000686")]
			get;
			[Token(Token = "0x6000687")]
			set;
		}

		[Token(Token = "0x6000682")]
		[Address(RVA = "0xF31BA4", Offset = "0xF31BA4", VA = "0xF31BA4")]
		public List<InteractableCollisionInfo> GetCurrentIntersectingObjects()
		{
			return null;
		}

		[Token(Token = "0x6000683")]
		public abstract List<InteractableCollisionInfo> GetNextIntersectingObjects();

		[Token(Token = "0x6000684")]
		public abstract void FocusOnInteractable(Interactable focusedInteractable, ColliderZone colliderZone);

		[Token(Token = "0x6000685")]
		public abstract void DeFocus();

		[Token(Token = "0x6000688")]
		public abstract void Initialize();

		[Token(Token = "0x6000689")]
		[Address(RVA = "0xF307F0", Offset = "0xF307F0", VA = "0xF307F0")]
		public KeyValuePair<Interactable, InteractableCollisionInfo> GetFirstCurrentCollisionInfo()
		{
			return default(KeyValuePair<Interactable, InteractableCollisionInfo>);
		}

		[Token(Token = "0x600068A")]
		[Address(RVA = "0xF30838", Offset = "0xF30838", VA = "0xF30838")]
		public void ClearAllCurrentCollisionInfos()
		{
		}

		[Token(Token = "0x600068B")]
		[Address(RVA = "0xF31BAC", Offset = "0xF31BAC", VA = "0xF31BAC", Slot = "13")]
		public virtual void UpdateCurrentCollisionsBasedOnDepth()
		{
		}

		[Token(Token = "0x600068C")]
		[Address(RVA = "0xF31E74", Offset = "0xF31E74", VA = "0xF31E74", Slot = "14")]
		public virtual void UpdateLatestCollisionData()
		{
		}

		[Token(Token = "0x600068D")]
		[Address(RVA = "0xF31420", Offset = "0xF31420", VA = "0xF31420")]
		protected InteractableTool()
		{
		}
	}
	[Token(Token = "0x2000129")]
	public interface InteractableToolView
	{
		[Token(Token = "0x170000B0")]
		InteractableTool InteractableTool
		{
			[Token(Token = "0x600068E")]
			get;
		}

		[Token(Token = "0x170000B1")]
		bool EnableState
		{
			[Token(Token = "0x6000690")]
			get;
			[Token(Token = "0x6000691")]
			set;
		}

		[Token(Token = "0x170000B2")]
		bool ToolActivateState
		{
			[Token(Token = "0x6000692")]
			get;
			[Token(Token = "0x6000693")]
			set;
		}

		[Token(Token = "0x600068F")]
		void SetFocusedInteractable(Interactable interactable);
	}
	[Token(Token = "0x200012A")]
	public class PinchStateModule
	{
		[Token(Token = "0x200012B")]
		private enum PinchState
		{
			[Token(Token = "0x400062D")]
			None,
			[Token(Token = "0x400062E")]
			PinchDown,
			[Token(Token = "0x400062F")]
			PinchStay,
			[Token(Token = "0x4000630")]
			PinchUp
		}

		[Token(Token = "0x4000629")]
		private const float PINCH_STRENGTH_THRESHOLD = 1f;

		[Token(Token = "0x400062A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PinchState _currPinchState;

		[Token(Token = "0x400062B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Interactable _firstFocusedInteractable;

		[Token(Token = "0x170000B3")]
		public bool PinchUpAndDownOnFocusedObject
		{
			[Token(Token = "0x6000694")]
			[Address(RVA = "0xF32710", Offset = "0xF32710", VA = "0xF32710")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B4")]
		public bool PinchSteadyOnFocusedObject
		{
			[Token(Token = "0x6000695")]
			[Address(RVA = "0xF3278C", Offset = "0xF3278C", VA = "0xF3278C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B5")]
		public bool PinchDownOnFocusedObject
		{
			[Token(Token = "0x6000696")]
			[Address(RVA = "0xF32808", Offset = "0xF32808", VA = "0xF32808")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000697")]
		[Address(RVA = "0xF32884", Offset = "0xF32884", VA = "0xF32884")]
		public PinchStateModule()
		{
		}

		[Token(Token = "0x6000698")]
		[Address(RVA = "0xF328AC", Offset = "0xF328AC", VA = "0xF328AC")]
		public void UpdateState(OVRHand hand, Interactable currFocusedInteractable)
		{
		}
	}
	[Token(Token = "0x200012C")]
	public class RayTool : InteractableTool
	{
		[Token(Token = "0x4000631")]
		private const float MINIMUM_RAY_CAST_DISTANCE = 0.8f;

		[Token(Token = "0x4000632")]
		private const float COLLIDER_RADIUS = 0.01f;

		[Token(Token = "0x4000633")]
		private const int NUM_MAX_PRIMARY_HITS = 10;

		[Token(Token = "0x4000634")]
		private const int NUM_MAX_SECONDARY_HITS = 25;

		[Token(Token = "0x4000635")]
		private const int NUM_COLLIDERS_TO_TEST = 20;

		[Token(Token = "0x4000636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private RayToolView _rayToolView;

		[Token(Token = "0x4000637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		[Range(0f, 45f)]
		private float _coneAngleDegrees;

		[Token(Token = "0x4000638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[SerializeField]
		private float _farFieldMaxDistance;

		[Token(Token = "0x4000639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PinchStateModule _pinchStateModule;

		[Token(Token = "0x400063A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Interactable _focusedInteractable;

		[Token(Token = "0x400063B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Collider[] _collidersOverlapped;

		[Token(Token = "0x400063C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Interactable _currInteractableCastedAgainst;

		[Token(Token = "0x400063D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float _coneAngleReleaseDegrees;

		[Token(Token = "0x400063E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private RaycastHit[] _primaryHits;

		[Token(Token = "0x400063F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Collider[] _secondaryOverlapResults;

		[Token(Token = "0x4000640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool _initialized;

		[Token(Token = "0x170000B6")]
		public override InteractableToolTags ToolTags
		{
			[Token(Token = "0x6000699")]
			[Address(RVA = "0xF32A24", Offset = "0xF32A24", VA = "0xF32A24", Slot = "4")]
			get
			{
				return default(InteractableToolTags);
			}
		}

		[Token(Token = "0x170000B7")]
		public override ToolInputState ToolInputState
		{
			[Token(Token = "0x600069A")]
			[Address(RVA = "0xF32A2C", Offset = "0xF32A2C", VA = "0xF32A2C", Slot = "5")]
			get
			{
				return default(ToolInputState);
			}
		}

		[Token(Token = "0x170000B8")]
		public override bool IsFarFieldTool
		{
			[Token(Token = "0x600069B")]
			[Address(RVA = "0xF32A88", Offset = "0xF32A88", VA = "0xF32A88", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B9")]
		public override bool EnableState
		{
			[Token(Token = "0x600069C")]
			[Address(RVA = "0xF32A90", Offset = "0xF32A90", VA = "0xF32A90", Slot = "10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600069D")]
			[Address(RVA = "0xF32AD0", Offset = "0xF32AD0", VA = "0xF32AD0", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x600069E")]
		[Address(RVA = "0xF32B40", Offset = "0xF32B40", VA = "0xF32B40", Slot = "12")]
		public override void Initialize()
		{
		}

		[Token(Token = "0x600069F")]
		[Address(RVA = "0xF32B94", Offset = "0xF32B94", VA = "0xF32B94")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60006A0")]
		[Address(RVA = "0xF32C20", Offset = "0xF32C20", VA = "0xF32C20")]
		private void Update()
		{
		}

		[Token(Token = "0x60006A1")]
		[Address(RVA = "0xF32EC4", Offset = "0xF32EC4", VA = "0xF32EC4")]
		private Vector3 GetRayCastOrigin()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006A2")]
		[Address(RVA = "0xF32F40", Offset = "0xF32F40", VA = "0xF32F40", Slot = "7")]
		public override List<InteractableCollisionInfo> GetNextIntersectingObjects()
		{
			return null;
		}

		[Token(Token = "0x60006A3")]
		[Address(RVA = "0xF33334", Offset = "0xF33334", VA = "0xF33334")]
		private bool HasRayReleasedInteractable(Interactable focusedInteractable)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A4")]
		[Address(RVA = "0xF334D0", Offset = "0xF334D0", VA = "0xF334D0")]
		private Interactable FindTargetInteractable()
		{
			return null;
		}

		[Token(Token = "0x60006A5")]
		[Address(RVA = "0xF335E8", Offset = "0xF335E8", VA = "0xF335E8")]
		private Interactable FindPrimaryRaycastHit(Vector3 rayOrigin, Vector3 rayDirection)
		{
			return null;
		}

		[Token(Token = "0x60006A6")]
		[Address(RVA = "0xF3390C", Offset = "0xF3390C", VA = "0xF3390C")]
		private Interactable FindInteractableViaConeTest(Vector3 rayOrigin, Vector3 rayDirection)
		{
			return null;
		}

		[Token(Token = "0x60006A7")]
		[Address(RVA = "0xF33C88", Offset = "0xF33C88", VA = "0xF33C88", Slot = "8")]
		public override void FocusOnInteractable(Interactable focusedInteractable, ColliderZone colliderZone)
		{
		}

		[Token(Token = "0x60006A8")]
		[Address(RVA = "0xF33D60", Offset = "0xF33D60", VA = "0xF33D60", Slot = "9")]
		public override void DeFocus()
		{
		}

		[Token(Token = "0x60006A9")]
		[Address(RVA = "0xF33D90", Offset = "0xF33D90", VA = "0xF33D90")]
		public RayTool()
		{
		}
	}
	[Token(Token = "0x200012D")]
	public class RayToolView : MonoBehaviour, InteractableToolView
	{
		[Token(Token = "0x4000641")]
		private const int NUM_RAY_LINE_POSITIONS = 25;

		[Token(Token = "0x4000642")]
		private const float DEFAULT_RAY_CAST_DISTANCE = 3f;

		[Token(Token = "0x4000643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform _targetTransform;

		[Token(Token = "0x4000644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private LineRenderer _lineRenderer;

		[Token(Token = "0x4000645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _toolActivateState;

		[Token(Token = "0x4000646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform _focusedTransform;

		[Token(Token = "0x4000647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3[] linePositions;

		[Token(Token = "0x4000648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Gradient _oldColorGradient;

		[Token(Token = "0x4000649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Gradient _highLightColorGradient;

		[Token(Token = "0x170000BA")]
		public bool EnableState
		{
			[Token(Token = "0x60006AA")]
			[Address(RVA = "0xF32AB4", Offset = "0xF32AB4", VA = "0xF32AB4", Slot = "6")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60006AB")]
			[Address(RVA = "0xF32AEC", Offset = "0xF32AEC", VA = "0xF32AEC", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x170000BB")]
		public bool ToolActivateState
		{
			[Token(Token = "0x60006AC")]
			[Address(RVA = "0xF33EA4", Offset = "0xF33EA4", VA = "0xF33EA4", Slot = "8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60006AD")]
			[Address(RVA = "0xF32E88", Offset = "0xF32E88", VA = "0xF32E88", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x170000BC")]
		public InteractableTool InteractableTool
		{
			[Token(Token = "0x60006AF")]
			[Address(RVA = "0xF340CC", Offset = "0xF340CC", VA = "0xF340CC", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60006B0")]
			[Address(RVA = "0xF340D4", Offset = "0xF340D4", VA = "0xF340D4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60006AE")]
		[Address(RVA = "0xF33EAC", Offset = "0xF33EAC", VA = "0xF33EAC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60006B1")]
		[Address(RVA = "0xF33CC0", Offset = "0xF33CC0", VA = "0xF33CC0", Slot = "5")]
		public void SetFocusedInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x60006B2")]
		[Address(RVA = "0xF340DC", Offset = "0xF340DC", VA = "0xF340DC")]
		private void Update()
		{
		}

		[Token(Token = "0x60006B3")]
		[Address(RVA = "0xF34388", Offset = "0xF34388", VA = "0xF34388")]
		public static Vector3 GetPointOnBezierCurve(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006B4")]
		[Address(RVA = "0xF34430", Offset = "0xF34430", VA = "0xF34430")]
		public RayToolView()
		{
		}
	}
	[Token(Token = "0x200012E")]
	public class DistanceGrabberSample : MonoBehaviour
	{
		[Token(Token = "0x400064B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool useSpherecast;

		[Token(Token = "0x400064C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool allowGrabThroughWalls;

		[Token(Token = "0x400064D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private DistanceGrabber[] m_grabbers;

		[Token(Token = "0x170000BD")]
		public bool UseSpherecast
		{
			[Token(Token = "0x60006B5")]
			[Address(RVA = "0xF34494", Offset = "0xF34494", VA = "0xF34494")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60006B6")]
			[Address(RVA = "0xF3449C", Offset = "0xF3449C", VA = "0xF3449C")]
			set
			{
			}
		}

		[Token(Token = "0x170000BE")]
		public bool AllowGrabThroughWalls
		{
			[Token(Token = "0x60006B7")]
			[Address(RVA = "0xF34518", Offset = "0xF34518", VA = "0xF34518")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60006B8")]
			[Address(RVA = "0xF34520", Offset = "0xF34520", VA = "0xF34520")]
			set
			{
			}
		}

		[Token(Token = "0x60006B9")]
		[Address(RVA = "0xF3457C", Offset = "0xF3457C", VA = "0xF3457C")]
		private void Start()
		{
		}

		[Token(Token = "0x60006BA")]
		[Address(RVA = "0xF3481C", Offset = "0xF3481C", VA = "0xF3481C")]
		public void ToggleSphereCasting(Toggle t)
		{
		}

		[Token(Token = "0x60006BB")]
		[Address(RVA = "0xF3482C", Offset = "0xF3482C", VA = "0xF3482C")]
		public void ToggleGrabThroughWalls(Toggle t)
		{
		}

		[Token(Token = "0x60006BC")]
		[Address(RVA = "0xF3483C", Offset = "0xF3483C", VA = "0xF3483C")]
		public DistanceGrabberSample()
		{
		}
	}
	[Token(Token = "0x200012F")]
	public class ControllerBoxController : MonoBehaviour
	{
		[Token(Token = "0x400064E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TrainLocomotive _locomotive;

		[Token(Token = "0x400064F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private CowController _cowController;

		[Token(Token = "0x60006BD")]
		[Address(RVA = "0xF34844", Offset = "0xF34844", VA = "0xF34844")]
		private void Awake()
		{
		}

		[Token(Token = "0x60006BE")]
		[Address(RVA = "0xF34848", Offset = "0xF34848", VA = "0xF34848")]
		public void StartStopStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x60006BF")]
		[Address(RVA = "0xF3487C", Offset = "0xF3487C", VA = "0xF3487C")]
		public void DecreaseSpeedStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x60006C0")]
		[Address(RVA = "0xF348B0", Offset = "0xF348B0", VA = "0xF348B0")]
		public void IncreaseSpeedStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x60006C1")]
		[Address(RVA = "0xF348E4", Offset = "0xF348E4", VA = "0xF348E4")]
		public void SmokeButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x60006C2")]
		[Address(RVA = "0xF34918", Offset = "0xF34918", VA = "0xF34918")]
		public void WhistleButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x60006C3")]
		[Address(RVA = "0xF3494C", Offset = "0xF3494C", VA = "0xF3494C")]
		public void ReverseButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x60006C4")]
		[Address(RVA = "0xF34980", Offset = "0xF34980", VA = "0xF34980")]
		public void SwitchVisualization(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x60006C5")]
		[Address(RVA = "0xF349E0", Offset = "0xF349E0", VA = "0xF349E0")]
		public void GoMoo(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x60006C6")]
		[Address(RVA = "0xF34A40", Offset = "0xF34A40", VA = "0xF34A40")]
		public ControllerBoxController()
		{
		}
	}
	[Token(Token = "0x2000130")]
	public class CowController : MonoBehaviour
	{
		[Token(Token = "0x4000650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Animation _cowAnimation;

		[Token(Token = "0x4000651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioSource _mooCowAudioSource;

		[Token(Token = "0x60006C7")]
		[Address(RVA = "0xF34A48", Offset = "0xF34A48", VA = "0xF34A48")]
		private void Start()
		{
		}

		[Token(Token = "0x60006C8")]
		[Address(RVA = "0xF34A4C", Offset = "0xF34A4C", VA = "0xF34A4C")]
		public void PlayMooSound()
		{
		}

		[Token(Token = "0x60006C9")]
		[Address(RVA = "0xF34A10", Offset = "0xF34A10", VA = "0xF34A10")]
		public void GoMooCowGo()
		{
		}

		[Token(Token = "0x60006CA")]
		[Address(RVA = "0xF34A80", Offset = "0xF34A80", VA = "0xF34A80")]
		public CowController()
		{
		}
	}
	[Token(Token = "0x2000131")]
	public class PanelHMDFollower : MonoBehaviour
	{
		[Token(Token = "0x2000132")]
		[CompilerGenerated]
		private sealed class <LerpToHMD>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400065C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400065D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400065E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PanelHMDFollower <>4__this;

			[Token(Token = "0x400065F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 <newPanelPosition>5__2;

			[Token(Token = "0x4000660")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <startTime>5__3;

			[Token(Token = "0x4000661")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <endTime>5__4;

			[Token(Token = "0x170000BF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60006D3")]
				[Address(RVA = "0xF35100", Offset = "0xF35100", VA = "0xF35100", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000C0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60006D5")]
				[Address(RVA = "0xF35148", Offset = "0xF35148", VA = "0xF35148", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60006D0")]
			[Address(RVA = "0xF34E78", Offset = "0xF34E78", VA = "0xF34E78")]
			[DebuggerHidden]
			public <LerpToHMD>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x60006D1")]
			[Address(RVA = "0xF34F40", Offset = "0xF34F40", VA = "0xF34F40", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60006D2")]
			[Address(RVA = "0xF34F44", Offset = "0xF34F44", VA = "0xF34F44", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60006D4")]
			[Address(RVA = "0xF35108", Offset = "0xF35108", VA = "0xF35108", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000652")]
		private const float TOTAL_DURATION = 3f;

		[Token(Token = "0x4000653")]
		private const float HMD_MOVEMENT_THRESHOLD = 0.3f;

		[Token(Token = "0x4000654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _maxDistance;

		[Token(Token = "0x4000655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float _minDistance;

		[Token(Token = "0x4000656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _minZDistance;

		[Token(Token = "0x4000657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private OVRCameraRig _cameraRig;

		[Token(Token = "0x4000658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 _panelInitialPosition;

		[Token(Token = "0x4000659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Coroutine _coroutine;

		[Token(Token = "0x400065A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 _prevPos;

		[Token(Token = "0x400065B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 _lastMovedToPos;

		[Token(Token = "0x60006CB")]
		[Address(RVA = "0xF34A88", Offset = "0xF34A88", VA = "0xF34A88")]
		private void Awake()
		{
		}

		[Token(Token = "0x60006CC")]
		[Address(RVA = "0xF34B28", Offset = "0xF34B28", VA = "0xF34B28")]
		private void Update()
		{
		}

		[Token(Token = "0x60006CD")]
		[Address(RVA = "0xF34E38", Offset = "0xF34E38", VA = "0xF34E38")]
		private Vector3 CalculateIdealAnchorPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006CE")]
		[Address(RVA = "0xF34DC4", Offset = "0xF34DC4", VA = "0xF34DC4")]
		[IteratorStateMachine(typeof(<LerpToHMD>d__13))]
		private IEnumerator LerpToHMD()
		{
			return null;
		}

		[Token(Token = "0x60006CF")]
		[Address(RVA = "0xF34EA0", Offset = "0xF34EA0", VA = "0xF34EA0")]
		public PanelHMDFollower()
		{
		}
	}
	[Token(Token = "0x2000133")]
	public class SelectionCylinder : MonoBehaviour
	{
		[Token(Token = "0x2000134")]
		public enum SelectionState
		{
			[Token(Token = "0x4000669")]
			Off,
			[Token(Token = "0x400066A")]
			Selected,
			[Token(Token = "0x400066B")]
			Highlighted
		}

		[Token(Token = "0x4000662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer _selectionMeshRenderer;

		[Token(Token = "0x4000663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int _colorId;

		[Token(Token = "0x4000664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material[] _selectionMaterials;

		[Token(Token = "0x4000665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Color[] _defaultSelectionColors;

		[Token(Token = "0x4000666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Color[] _highlightColors;

		[Token(Token = "0x4000667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SelectionState _currSelectionState;

		[Token(Token = "0x170000C1")]
		public SelectionState CurrSelectionState
		{
			[Token(Token = "0x60006D6")]
			[Address(RVA = "0xF35150", Offset = "0xF35150", VA = "0xF35150")]
			get
			{
				return default(SelectionState);
			}
			[Token(Token = "0x60006D7")]
			[Address(RVA = "0xF35158", Offset = "0xF35158", VA = "0xF35158")]
			set
			{
			}
		}

		[Token(Token = "0x60006D8")]
		[Address(RVA = "0xF352AC", Offset = "0xF352AC", VA = "0xF352AC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60006D9")]
		[Address(RVA = "0xF35470", Offset = "0xF35470", VA = "0xF35470")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60006DA")]
		[Address(RVA = "0xF351CC", Offset = "0xF351CC", VA = "0xF351CC")]
		private void AffectSelectionColor(Color[] newColors)
		{
		}

		[Token(Token = "0x60006DB")]
		[Address(RVA = "0xF35538", Offset = "0xF35538", VA = "0xF35538")]
		public SelectionCylinder()
		{
		}
	}
	[Token(Token = "0x2000135")]
	public class TrackSegment : MonoBehaviour
	{
		[Token(Token = "0x2000136")]
		public enum SegmentType
		{
			[Token(Token = "0x400067A")]
			Straight,
			[Token(Token = "0x400067B")]
			LeftTurn,
			[Token(Token = "0x400067C")]
			RightTurn,
			[Token(Token = "0x400067D")]
			Switch
		}

		[Token(Token = "0x400066C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private SegmentType _segmentType;

		[Token(Token = "0x400066D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private MeshFilter _straight;

		[Token(Token = "0x400066E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MeshFilter _leftTurn;

		[Token(Token = "0x400066F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private MeshFilter _rightTurn;

		[Token(Token = "0x4000670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _gridSize;

		[Token(Token = "0x4000671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int _subDivCount;

		[Token(Token = "0x4000672")]
		private const float _originalGridSize = 0.8f;

		[Token(Token = "0x4000673")]
		private const float _trackWidth = 0.15f;

		[Token(Token = "0x4000674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject _mesh;

		[Token(Token = "0x4000676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Pose _p1;

		[Token(Token = "0x4000677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Pose _p2;

		[Token(Token = "0x4000678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Pose _endPose;

		[Token(Token = "0x170000C2")]
		public float StartDistance
		{
			[Token(Token = "0x60006DD")]
			[Address(RVA = "0xF355A8", Offset = "0xF355A8", VA = "0xF355A8")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60006DE")]
			[Address(RVA = "0xF355B0", Offset = "0xF355B0", VA = "0xF355B0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000C3")]
		public float GridSize
		{
			[Token(Token = "0x60006DF")]
			[Address(RVA = "0xF355B8", Offset = "0xF355B8", VA = "0xF355B8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60006E0")]
			[Address(RVA = "0xF355C0", Offset = "0xF355C0", VA = "0xF355C0")]
			private set
			{
			}
		}

		[Token(Token = "0x170000C4")]
		public int SubDivCount
		{
			[Token(Token = "0x60006E1")]
			[Address(RVA = "0xF355C8", Offset = "0xF355C8", VA = "0xF355C8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60006E2")]
			[Address(RVA = "0xF355D0", Offset = "0xF355D0", VA = "0xF355D0")]
			set
			{
			}
		}

		[Token(Token = "0x170000C5")]
		public SegmentType Type
		{
			[Token(Token = "0x60006E3")]
			[Address(RVA = "0xF355D8", Offset = "0xF355D8", VA = "0xF355D8")]
			get
			{
				return default(SegmentType);
			}
		}

		[Token(Token = "0x170000C6")]
		public Pose EndPose
		{
			[Token(Token = "0x60006E4")]
			[Address(RVA = "0xF355E0", Offset = "0xF355E0", VA = "0xF355E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C7")]
		public float Radius
		{
			[Token(Token = "0x60006E5")]
			[Address(RVA = "0xF359B4", Offset = "0xF359B4", VA = "0xF359B4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000C8")]
		public float SegmentLength
		{
			[Token(Token = "0x60006E7")]
			[Address(RVA = "0xF3563C", Offset = "0xF3563C", VA = "0xF3563C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60006E6")]
		[Address(RVA = "0xF359C4", Offset = "0xF359C4", VA = "0xF359C4")]
		public float setGridSize(float size)
		{
			return default(float);
		}

		[Token(Token = "0x60006E8")]
		[Address(RVA = "0xF359DC", Offset = "0xF359DC", VA = "0xF359DC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60006E9")]
		[Address(RVA = "0xF3567C", Offset = "0xF3567C", VA = "0xF3567C")]
		public void UpdatePose(float distanceIntoSegment, Pose pose)
		{
		}

		[Token(Token = "0x60006EA")]
		[Address(RVA = "0xF359E0", Offset = "0xF359E0", VA = "0xF359E0")]
		private void Update()
		{
		}

		[Token(Token = "0x60006EB")]
		[Address(RVA = "0xF359E4", Offset = "0xF359E4", VA = "0xF359E4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60006EC")]
		[Address(RVA = "0xF35A40", Offset = "0xF35A40", VA = "0xF35A40")]
		private void DrawDebugLines()
		{
		}

		[Token(Token = "0x60006ED")]
		[Address(RVA = "0xF36374", Offset = "0xF36374", VA = "0xF36374")]
		public void RegenerateTrackAndMesh()
		{
		}

		[Token(Token = "0x60006EE")]
		[Address(RVA = "0xF365F8", Offset = "0xF365F8", VA = "0xF365F8")]
		public TrackSegment()
		{
		}
	}
	[Token(Token = "0x2000137")]
	public class TrainButtonVisualController : MonoBehaviour
	{
		[Token(Token = "0x2000138")]
		[CompilerGenerated]
		private sealed class <ResetPosition>d__26 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400068F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000690")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000691")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TrainButtonVisualController <>4__this;

			[Token(Token = "0x4000692")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <startTime>5__2;

			[Token(Token = "0x4000693")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <endTime>5__3;

			[Token(Token = "0x170000C9")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60006FD")]
				[Address(RVA = "0xF380A0", Offset = "0xF380A0", VA = "0xF380A0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000CA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60006FF")]
				[Address(RVA = "0xF380E8", Offset = "0xF380E8", VA = "0xF380E8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60006FA")]
			[Address(RVA = "0xF37ED4", Offset = "0xF37ED4", VA = "0xF37ED4")]
			[DebuggerHidden]
			public <ResetPosition>d__26(int <>1__state)
			{
			}

			[Token(Token = "0x60006FB")]
			[Address(RVA = "0xF37F24", Offset = "0xF37F24", VA = "0xF37F24", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60006FC")]
			[Address(RVA = "0xF37F28", Offset = "0xF37F28", VA = "0xF37F28", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60006FE")]
			[Address(RVA = "0xF380A8", Offset = "0xF380A8", VA = "0xF380A8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400067E")]
		private const float LERP_TO_OLD_POS_DURATION = 1f;

		[Token(Token = "0x400067F")]
		private const float LOCAL_SIZE_HALVED = 0.5f;

		[Token(Token = "0x4000680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer _meshRenderer;

		[Token(Token = "0x4000681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private MeshRenderer _glowRenderer;

		[Token(Token = "0x4000682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private ButtonController _buttonController;

		[Token(Token = "0x4000683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Color _buttonContactColor;

		[Token(Token = "0x4000684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Color _buttonActionColor;

		[Token(Token = "0x4000685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x4000686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private AudioClip _actionSoundEffect;

		[Token(Token = "0x4000687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Transform _buttonContactTransform;

		[Token(Token = "0x4000688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float _contactMaxDisplacementDistance;

		[Token(Token = "0x4000689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material _buttonMaterial;

		[Token(Token = "0x400068A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Color _buttonDefaultColor;

		[Token(Token = "0x400068B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _materialColorId;

		[Token(Token = "0x400068C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private bool _buttonInContactOrActionStates;

		[Token(Token = "0x400068D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Coroutine _lerpToOldPositionCr;

		[Token(Token = "0x400068E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 _oldPosition;

		[Token(Token = "0x60006EF")]
		[Address(RVA = "0xF376CC", Offset = "0xF376CC", VA = "0xF376CC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60006F0")]
		[Address(RVA = "0xF37784", Offset = "0xF37784", VA = "0xF37784")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60006F1")]
		[Address(RVA = "0xF37814", Offset = "0xF37814", VA = "0xF37814")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60006F2")]
		[Address(RVA = "0xF37964", Offset = "0xF37964", VA = "0xF37964")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60006F3")]
		[Address(RVA = "0xF37AF8", Offset = "0xF37AF8", VA = "0xF37AF8")]
		private void ActionOrInContactZoneStayEvent(ColliderZoneArgs collisionArgs)
		{
		}

		[Token(Token = "0x60006F4")]
		[Address(RVA = "0xF37C08", Offset = "0xF37C08", VA = "0xF37C08")]
		private void InteractableStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x60006F5")]
		[Address(RVA = "0xF37E0C", Offset = "0xF37E0C", VA = "0xF37E0C")]
		private void PlaySound(AudioClip clip)
		{
		}

		[Token(Token = "0x60006F6")]
		[Address(RVA = "0xF37D18", Offset = "0xF37D18", VA = "0xF37D18")]
		private void StopResetLerping()
		{
		}

		[Token(Token = "0x60006F7")]
		[Address(RVA = "0xF37D2C", Offset = "0xF37D2C", VA = "0xF37D2C")]
		private void LerpToOldPosition()
		{
		}

		[Token(Token = "0x60006F8")]
		[Address(RVA = "0xF37E60", Offset = "0xF37E60", VA = "0xF37E60")]
		[IteratorStateMachine(typeof(<ResetPosition>d__26))]
		private IEnumerator ResetPosition()
		{
			return null;
		}

		[Token(Token = "0x60006F9")]
		[Address(RVA = "0xF37EFC", Offset = "0xF37EFC", VA = "0xF37EFC")]
		public TrainButtonVisualController()
		{
		}
	}
	[Token(Token = "0x2000139")]
	public class TrainCar : TrainCarBase
	{
		[Token(Token = "0x4000694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private TrainCarBase _parentLocomotive;

		[Token(Token = "0x4000695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		protected float _distanceBehindParent;

		[Token(Token = "0x170000CB")]
		public float DistanceBehindParentScaled
		{
			[Token(Token = "0x6000700")]
			[Address(RVA = "0xF380F0", Offset = "0xF380F0", VA = "0xF380F0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000701")]
		[Address(RVA = "0xF38100", Offset = "0xF38100", VA = "0xF38100", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000702")]
		[Address(RVA = "0xF38108", Offset = "0xF38108", VA = "0xF38108", Slot = "5")]
		public override void UpdatePosition()
		{
		}

		[Token(Token = "0x6000703")]
		[Address(RVA = "0xF38438", Offset = "0xF38438", VA = "0xF38438")]
		public TrainCar()
		{
		}
	}
	[Token(Token = "0x200013A")]
	public abstract class TrainCarBase : MonoBehaviour
	{
		[Token(Token = "0x4000696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector3 OFFSET;

		[Token(Token = "0x4000697")]
		private const float WHEEL_RADIUS = 0.027f;

		[Token(Token = "0x4000698")]
		private const float TWO_PI = (float)Math.PI * 2f;

		[Token(Token = "0x4000699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected Transform _frontWheels;

		[Token(Token = "0x400069A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected Transform _rearWheels;

		[Token(Token = "0x400069B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		protected TrainTrack _trainTrack;

		[Token(Token = "0x400069C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected Transform[] _individualWheels;

		[Token(Token = "0x400069E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected float scale;

		[Token(Token = "0x400069F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Pose _frontPose;

		[Token(Token = "0x40006A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Pose _rearPose;

		[Token(Token = "0x170000CC")]
		public float Distance
		{
			[Token(Token = "0x6000704")]
			[Address(RVA = "0xF38534", Offset = "0xF38534", VA = "0xF38534")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000705")]
			[Address(RVA = "0xF3853C", Offset = "0xF3853C", VA = "0xF3853C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170000CD")]
		public float Scale
		{
			[Token(Token = "0x6000706")]
			[Address(RVA = "0xF38544", Offset = "0xF38544", VA = "0xF38544")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000707")]
			[Address(RVA = "0xF3854C", Offset = "0xF3854C", VA = "0xF3854C")]
			set
			{
			}
		}

		[Token(Token = "0x6000708")]
		[Address(RVA = "0xF38104", Offset = "0xF38104", VA = "0xF38104", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000709")]
		[Address(RVA = "0xF38554", Offset = "0xF38554", VA = "0xF38554")]
		public void UpdatePose(float distance, TrainCarBase train, Pose pose)
		{
		}

		[Token(Token = "0x600070A")]
		[Address(RVA = "0xF38144", Offset = "0xF38144", VA = "0xF38144")]
		protected void UpdateCarPosition()
		{
		}

		[Token(Token = "0x600070B")]
		[Address(RVA = "0xF38354", Offset = "0xF38354", VA = "0xF38354")]
		protected void RotateCarWheels()
		{
		}

		[Token(Token = "0x600070C")]
		public abstract void UpdatePosition();

		[Token(Token = "0x600070D")]
		[Address(RVA = "0xF38498", Offset = "0xF38498", VA = "0xF38498")]
		protected TrainCarBase()
		{
		}
	}
	[Token(Token = "0x200013B")]
	public class TrainCrossingController : MonoBehaviour
	{
		[Token(Token = "0x200013C")]
		[CompilerGenerated]
		private sealed class <AnimateCrossing>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40006AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40006AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40006AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TrainCrossingController <>4__this;

			[Token(Token = "0x40006AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float animationLength;

			[Token(Token = "0x40006AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <animationEndTime>5__2;

			[Token(Token = "0x40006B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <lightBlinkDuration>5__3;

			[Token(Token = "0x40006B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <lightBlinkStartTime>5__4;

			[Token(Token = "0x40006B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <lightBlinkEndTime>5__5;

			[Token(Token = "0x40006B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Material <lightToBlinkOn>5__6;

			[Token(Token = "0x40006B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Material <lightToBlinkOff>5__7;

			[Token(Token = "0x40006B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private Color <onColor>5__8;

			[Token(Token = "0x40006B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Color <offColor>5__9;

			[Token(Token = "0x170000CE")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600071B")]
				[Address(RVA = "0xF38EC4", Offset = "0xF38EC4", VA = "0xF38EC4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000CF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600071D")]
				[Address(RVA = "0xF38F0C", Offset = "0xF38F0C", VA = "0xF38F0C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000718")]
			[Address(RVA = "0xF38B38", Offset = "0xF38B38", VA = "0xF38B38")]
			[DebuggerHidden]
			public <AnimateCrossing>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6000719")]
			[Address(RVA = "0xF38CAC", Offset = "0xF38CAC", VA = "0xF38CAC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600071A")]
			[Address(RVA = "0xF38CB0", Offset = "0xF38CB0", VA = "0xF38CB0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600071C")]
			[Address(RVA = "0xF38ECC", Offset = "0xF38ECC", VA = "0xF38ECC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40006A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x40006A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioClip[] _crossingSounds;

		[Token(Token = "0x40006A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MeshRenderer _lightSide1Renderer;

		[Token(Token = "0x40006A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private MeshRenderer _lightSide2Renderer;

		[Token(Token = "0x40006A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private SelectionCylinder _selectionCylinder;

		[Token(Token = "0x40006A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material _lightsSide1Mat;

		[Token(Token = "0x40006A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material _lightsSide2Mat;

		[Token(Token = "0x40006A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int _colorId;

		[Token(Token = "0x40006A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Coroutine _xingAnimationCr;

		[Token(Token = "0x40006AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private InteractableTool _toolInteractingWithMe;

		[Token(Token = "0x600070F")]
		[Address(RVA = "0xF38760", Offset = "0xF38760", VA = "0xF38760")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000710")]
		[Address(RVA = "0xF387BC", Offset = "0xF387BC", VA = "0xF387BC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000711")]
		[Address(RVA = "0xF38894", Offset = "0xF38894", VA = "0xF38894")]
		public void CrossingButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000712")]
		[Address(RVA = "0xF389E8", Offset = "0xF389E8", VA = "0xF389E8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000713")]
		[Address(RVA = "0xF388F0", Offset = "0xF388F0", VA = "0xF388F0")]
		private void ActivateTrainCrossing()
		{
		}

		[Token(Token = "0x6000714")]
		[Address(RVA = "0xF38AB4", Offset = "0xF38AB4", VA = "0xF38AB4")]
		[IteratorStateMachine(typeof(<AnimateCrossing>d__15))]
		private IEnumerator AnimateCrossing(float animationLength)
		{
			return null;
		}

		[Token(Token = "0x6000715")]
		[Address(RVA = "0xF38B60", Offset = "0xF38B60", VA = "0xF38B60")]
		private void AffectMaterials(Material[] materials, Color newColor)
		{
		}

		[Token(Token = "0x6000716")]
		[Address(RVA = "0xF38BF8", Offset = "0xF38BF8", VA = "0xF38BF8")]
		private void ToggleLightObjects(bool enableState)
		{
		}

		[Token(Token = "0x6000717")]
		[Address(RVA = "0xF38C54", Offset = "0xF38C54", VA = "0xF38C54")]
		public TrainCrossingController()
		{
		}
	}
	[Token(Token = "0x200013D")]
	public class TrainLocomotive : TrainCarBase
	{
		[Token(Token = "0x200013E")]
		private enum EngineSoundState
		{
			[Token(Token = "0x40006D5")]
			Start,
			[Token(Token = "0x40006D6")]
			AccelerateOrSetProperSpeed,
			[Token(Token = "0x40006D7")]
			Stop
		}

		[Token(Token = "0x200013F")]
		[CompilerGenerated]
		private sealed class <StartStopTrain>d__34 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40006D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40006D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40006DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool startTrain;

			[Token(Token = "0x40006DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public TrainLocomotive <>4__this;

			[Token(Token = "0x40006DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <endSpeed>5__2;

			[Token(Token = "0x40006DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <timePeriodForSpeedChange>5__3;

			[Token(Token = "0x40006DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <startTime>5__4;

			[Token(Token = "0x40006DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <endTime>5__5;

			[Token(Token = "0x40006E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <startSpeed>5__6;

			[Token(Token = "0x170000D0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000730")]
				[Address(RVA = "0xF399F8", Offset = "0xF399F8", VA = "0xF399F8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000732")]
				[Address(RVA = "0xF39A40", Offset = "0xF39A40", VA = "0xF39A40", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600072D")]
			[Address(RVA = "0xF39210", Offset = "0xF39210", VA = "0xF39210")]
			[DebuggerHidden]
			public <StartStopTrain>d__34(int <>1__state)
			{
			}

			[Token(Token = "0x600072E")]
			[Address(RVA = "0xF397D0", Offset = "0xF397D0", VA = "0xF397D0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600072F")]
			[Address(RVA = "0xF397D4", Offset = "0xF397D4", VA = "0xF397D4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000731")]
			[Address(RVA = "0xF39A00", Offset = "0xF39A00", VA = "0xF39A00", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40006B7")]
		private const float MIN_SPEED = 0.2f;

		[Token(Token = "0x40006B8")]
		private const float MAX_SPEED = 2.7f;

		[Token(Token = "0x40006B9")]
		private const float SMOKE_SPEED_MULTIPLIER = 8f;

		[Token(Token = "0x40006BA")]
		private const int MAX_PARTICLES_MULTIPLIER = 3;

		[Token(Token = "0x40006BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Range(0.2f, 2.7f)]
		[SerializeField]
		protected float _initialSpeed;

		[Token(Token = "0x40006BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject _startStopButton;

		[Token(Token = "0x40006BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private GameObject _decreaseSpeedButton;

		[Token(Token = "0x40006BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private GameObject _increaseSpeedButton;

		[Token(Token = "0x40006BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private GameObject _smokeButton;

		[Token(Token = "0x40006C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private GameObject _whistleButton;

		[Token(Token = "0x40006C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private GameObject _reverseButton;

		[Token(Token = "0x40006C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private AudioSource _whistleAudioSource;

		[Token(Token = "0x40006C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private AudioClip _whistleSound;

		[Token(Token = "0x40006C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private AudioSource _engineAudioSource;

		[Token(Token = "0x40006C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private AudioClip[] _accelerationSounds;

		[Token(Token = "0x40006C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private AudioClip[] _decelerationSounds;

		[Token(Token = "0x40006C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private AudioClip _startUpSound;

		[Token(Token = "0x40006C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private AudioSource _smokeStackAudioSource;

		[Token(Token = "0x40006C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private AudioClip _smokeSound;

		[Token(Token = "0x40006CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private ParticleSystem _smoke1;

		[Token(Token = "0x40006CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private ParticleSystem _smoke2;

		[Token(Token = "0x40006CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private TrainCarBase[] _childCars;

		[Token(Token = "0x40006CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool _isMoving;

		[Token(Token = "0x40006CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
		private bool _reverse;

		[Token(Token = "0x40006CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float _currentSpeed;

		[Token(Token = "0x40006D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float _speedDiv;

		[Token(Token = "0x40006D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float _standardRateOverTimeMultiplier;

		[Token(Token = "0x40006D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private int _standardMaxParticles;

		[Token(Token = "0x40006D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Coroutine _startStopTrainCr;

		[Token(Token = "0x600071E")]
		[Address(RVA = "0xF38F14", Offset = "0xF38F14", VA = "0xF38F14")]
		private void Start()
		{
		}

		[Token(Token = "0x600071F")]
		[Address(RVA = "0xF39070", Offset = "0xF39070", VA = "0xF39070")]
		private void Update()
		{
		}

		[Token(Token = "0x6000720")]
		[Address(RVA = "0xF3907C", Offset = "0xF3907C", VA = "0xF3907C", Slot = "5")]
		public override void UpdatePosition()
		{
		}

		[Token(Token = "0x6000721")]
		[Address(RVA = "0xF391B4", Offset = "0xF391B4", VA = "0xF391B4")]
		public void StartStopStateChanged()
		{
		}

		[Token(Token = "0x6000722")]
		[Address(RVA = "0xF38FE8", Offset = "0xF38FE8", VA = "0xF38FE8")]
		[IteratorStateMachine(typeof(<StartStopTrain>d__34))]
		private IEnumerator StartStopTrain(bool startTrain)
		{
			return null;
		}

		[Token(Token = "0x6000723")]
		[Address(RVA = "0xF39238", Offset = "0xF39238", VA = "0xF39238")]
		private float PlayEngineSound(EngineSoundState engineSoundState)
		{
			return default(float);
		}

		[Token(Token = "0x6000724")]
		[Address(RVA = "0xF39154", Offset = "0xF39154", VA = "0xF39154")]
		private void UpdateDistance()
		{
		}

		[Token(Token = "0x6000725")]
		[Address(RVA = "0xF3944C", Offset = "0xF3944C", VA = "0xF3944C")]
		public void DecreaseSpeedStateChanged()
		{
		}

		[Token(Token = "0x6000726")]
		[Address(RVA = "0xF395A0", Offset = "0xF395A0", VA = "0xF395A0")]
		public void IncreaseSpeedStateChanged()
		{
		}

		[Token(Token = "0x6000727")]
		[Address(RVA = "0xF394AC", Offset = "0xF394AC", VA = "0xF394AC")]
		private void UpdateSmokeEmissionBasedOnSpeed()
		{
		}

		[Token(Token = "0x6000728")]
		[Address(RVA = "0xF39600", Offset = "0xF39600", VA = "0xF39600")]
		private float GetCurrentSmokeEmission()
		{
			return default(float);
		}

		[Token(Token = "0x6000729")]
		[Address(RVA = "0xF3963C", Offset = "0xF3963C", VA = "0xF3963C")]
		public void SmokeButtonStateChanged()
		{
		}

		[Token(Token = "0x600072A")]
		[Address(RVA = "0xF396B8", Offset = "0xF396B8", VA = "0xF396B8")]
		public void WhistleButtonStateChanged()
		{
		}

		[Token(Token = "0x600072B")]
		[Address(RVA = "0xF39764", Offset = "0xF39764", VA = "0xF39764")]
		public void ReverseButtonStateChanged()
		{
		}

		[Token(Token = "0x600072C")]
		[Address(RVA = "0xF39774", Offset = "0xF39774", VA = "0xF39774")]
		public TrainLocomotive()
		{
		}
	}
	[Token(Token = "0x2000140")]
	public class TrainTrack : MonoBehaviour
	{
		[Token(Token = "0x40006E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _gridSize;

		[Token(Token = "0x40006E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private int _subDivCount;

		[Token(Token = "0x40006E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform _segmentParent;

		[Token(Token = "0x40006E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform _trainParent;

		[Token(Token = "0x40006E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private bool _regnerateTrackMeshOnAwake;

		[Token(Token = "0x40006E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float _trainLength;

		[Token(Token = "0x40006E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TrackSegment[] _trackSegments;

		[Token(Token = "0x170000D2")]
		public float TrackLength
		{
			[Token(Token = "0x6000733")]
			[Address(RVA = "0xF39A48", Offset = "0xF39A48", VA = "0xF39A48")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000734")]
			[Address(RVA = "0xF39A50", Offset = "0xF39A50", VA = "0xF39A50")]
			private set
			{
			}
		}

		[Token(Token = "0x6000735")]
		[Address(RVA = "0xF39A58", Offset = "0xF39A58", VA = "0xF39A58")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000736")]
		[Address(RVA = "0xF385C0", Offset = "0xF385C0", VA = "0xF385C0")]
		public TrackSegment GetSegment(float distance)
		{
			return null;
		}

		[Token(Token = "0x6000737")]
		[Address(RVA = "0xF39A5C", Offset = "0xF39A5C", VA = "0xF39A5C")]
		public void Regenerate()
		{
		}

		[Token(Token = "0x6000738")]
		[Address(RVA = "0xF39C28", Offset = "0xF39C28", VA = "0xF39C28")]
		private void SetScale(float ratio)
		{
		}

		[Token(Token = "0x6000739")]
		[Address(RVA = "0xF39D08", Offset = "0xF39D08", VA = "0xF39D08")]
		public TrainTrack()
		{
		}
	}
	[Token(Token = "0x2000141")]
	public class Pose
	{
		[Token(Token = "0x40006E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 Position;

		[Token(Token = "0x40006E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion Rotation;

		[Token(Token = "0x600073A")]
		[Address(RVA = "0xF38674", Offset = "0xF38674", VA = "0xF38674")]
		public Pose()
		{
		}

		[Token(Token = "0x600073B")]
		[Address(RVA = "0xF39D24", Offset = "0xF39D24", VA = "0xF39D24")]
		public Pose(Vector3 position, Quaternion rotation)
		{
		}
	}
	[Token(Token = "0x2000142")]
	public class WindmillBladesController : MonoBehaviour
	{
		[Token(Token = "0x2000143")]
		[CompilerGenerated]
		private sealed class <LerpToSpeed>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40006F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40006F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40006F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WindmillBladesController <>4__this;

			[Token(Token = "0x40006F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float goalSpeed;

			[Token(Token = "0x40006F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <totalTime>5__2;

			[Token(Token = "0x40006FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <startSpeed>5__3;

			[Token(Token = "0x170000D4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000748")]
				[Address(RVA = "0xF3A318", Offset = "0xF3A318", VA = "0xF3A318", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600074A")]
				[Address(RVA = "0xF3A360", Offset = "0xF3A360", VA = "0xF3A360", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000745")]
			[Address(RVA = "0xF3A000", Offset = "0xF3A000", VA = "0xF3A000")]
			[DebuggerHidden]
			public <LerpToSpeed>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x6000746")]
			[Address(RVA = "0xF3A174", Offset = "0xF3A174", VA = "0xF3A174", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000747")]
			[Address(RVA = "0xF3A178", Offset = "0xF3A178", VA = "0xF3A178", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000749")]
			[Address(RVA = "0xF3A320", Offset = "0xF3A320", VA = "0xF3A320", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000144")]
		[CompilerGenerated]
		private sealed class <PlaySoundDelayed>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40006FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40006FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40006FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WindmillBladesController <>4__this;

			[Token(Token = "0x40006FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AudioClip initial;

			[Token(Token = "0x40006FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float timeDelayAfterInitial;

			[Token(Token = "0x4000700")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public AudioClip clip;

			[Token(Token = "0x170000D6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600074E")]
				[Address(RVA = "0xF3A43C", Offset = "0xF3A43C", VA = "0xF3A43C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000750")]
				[Address(RVA = "0xF3A484", Offset = "0xF3A484", VA = "0xF3A484", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600074B")]
			[Address(RVA = "0xF3A0DC", Offset = "0xF3A0DC", VA = "0xF3A0DC")]
			[DebuggerHidden]
			public <PlaySoundDelayed>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x600074C")]
			[Address(RVA = "0xF3A368", Offset = "0xF3A368", VA = "0xF3A368", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600074D")]
			[Address(RVA = "0xF3A36C", Offset = "0xF3A36C", VA = "0xF3A36C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600074F")]
			[Address(RVA = "0xF3A444", Offset = "0xF3A444", VA = "0xF3A444", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40006EA")]
		private const float MAX_TIME = 1f;

		[Token(Token = "0x40006EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x40006EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioClip _windMillRotationSound;

		[Token(Token = "0x40006ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private AudioClip _windMillStartSound;

		[Token(Token = "0x40006EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private AudioClip _windMillStopSound;

		[Token(Token = "0x40006F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float _currentSpeed;

		[Token(Token = "0x40006F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Coroutine _lerpSpeedCoroutine;

		[Token(Token = "0x40006F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Coroutine _audioChangeCr;

		[Token(Token = "0x40006F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion _originalRotation;

		[Token(Token = "0x40006F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float _rotAngle;

		[Token(Token = "0x170000D3")]
		public bool IsMoving
		{
			[Token(Token = "0x600073C")]
			[Address(RVA = "0xF39D88", Offset = "0xF39D88", VA = "0xF39D88")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600073D")]
			[Address(RVA = "0xF39D90", Offset = "0xF39D90", VA = "0xF39D90")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600073E")]
		[Address(RVA = "0xF39D9C", Offset = "0xF39D9C", VA = "0xF39D9C")]
		private void Start()
		{
		}

		[Token(Token = "0x600073F")]
		[Address(RVA = "0xF39DCC", Offset = "0xF39DCC", VA = "0xF39DCC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000740")]
		[Address(RVA = "0xF39F0C", Offset = "0xF39F0C", VA = "0xF39F0C")]
		public void SetMoveState(bool newMoveState, float goalSpeed)
		{
		}

		[Token(Token = "0x6000741")]
		[Address(RVA = "0xF39F7C", Offset = "0xF39F7C", VA = "0xF39F7C")]
		[IteratorStateMachine(typeof(<LerpToSpeed>d__17))]
		private IEnumerator LerpToSpeed(float goalSpeed)
		{
			return null;
		}

		[Token(Token = "0x6000742")]
		[Address(RVA = "0xF3A028", Offset = "0xF3A028", VA = "0xF3A028")]
		[IteratorStateMachine(typeof(<PlaySoundDelayed>d__18))]
		private IEnumerator PlaySoundDelayed(AudioClip initial, AudioClip clip, float timeDelayAfterInitial)
		{
			return null;
		}

		[Token(Token = "0x6000743")]
		[Address(RVA = "0xF3A104", Offset = "0xF3A104", VA = "0xF3A104")]
		private void PlaySound(AudioClip clip, bool loop = false)
		{
		}

		[Token(Token = "0x6000744")]
		[Address(RVA = "0xF3A16C", Offset = "0xF3A16C", VA = "0xF3A16C")]
		public WindmillBladesController()
		{
		}
	}
	[Token(Token = "0x2000145")]
	public class WindmillController : MonoBehaviour
	{
		[Token(Token = "0x4000701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _startStopButton;

		[Token(Token = "0x4000702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _maxSpeed;

		[Token(Token = "0x4000703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private SelectionCylinder _selectionCylinder;

		[Token(Token = "0x4000704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private WindmillBladesController _bladesRotation;

		[Token(Token = "0x4000705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private InteractableTool _toolInteractingWithMe;

		[Token(Token = "0x6000751")]
		[Address(RVA = "0xF3A48C", Offset = "0xF3A48C", VA = "0xF3A48C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000752")]
		[Address(RVA = "0xF3A500", Offset = "0xF3A500", VA = "0xF3A500")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000753")]
		[Address(RVA = "0xF3A5C8", Offset = "0xF3A5C8", VA = "0xF3A5C8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000754")]
		[Address(RVA = "0xF3A6D8", Offset = "0xF3A6D8", VA = "0xF3A6D8")]
		private void StartStopStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000755")]
		[Address(RVA = "0xF3A754", Offset = "0xF3A754", VA = "0xF3A754")]
		private void Update()
		{
		}

		[Token(Token = "0x6000756")]
		[Address(RVA = "0xF3A820", Offset = "0xF3A820", VA = "0xF3A820")]
		public WindmillController()
		{
		}
	}
	[Token(Token = "0x2000146")]
	public enum EUiDisplayType
	{
		[Token(Token = "0x4000707")]
		EUDT_WorldGeoQuad,
		[Token(Token = "0x4000708")]
		EUDT_OverlayQuad,
		[Token(Token = "0x4000709")]
		EUDT_None,
		[Token(Token = "0x400070A")]
		EUDT_MaxDislayTypes
	}
	[Token(Token = "0x2000147")]
	public class OVROverlaySample : MonoBehaviour
	{
		[Token(Token = "0x2000148")]
		[CompilerGenerated]
		private sealed class <WaitforOVROverlay>d__30 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000723")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000724")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000725")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OVROverlaySample <>4__this;

			[Token(Token = "0x170000D8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600076A")]
				[Address(RVA = "0xF3BEB0", Offset = "0xF3BEB0", VA = "0xF3BEB0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600076C")]
				[Address(RVA = "0xF3BEF8", Offset = "0xF3BEF8", VA = "0xF3BEF8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000767")]
			[Address(RVA = "0xF3B540", Offset = "0xF3B540", VA = "0xF3B540")]
			[DebuggerHidden]
			public <WaitforOVROverlay>d__30(int <>1__state)
			{
			}

			[Token(Token = "0x6000768")]
			[Address(RVA = "0xF3BCB4", Offset = "0xF3BCB4", VA = "0xF3BCB4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000769")]
			[Address(RVA = "0xF3BCB8", Offset = "0xF3BCB8", VA = "0xF3BCB8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600076B")]
			[Address(RVA = "0xF3BEB8", Offset = "0xF3BEB8", VA = "0xF3BEB8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400070B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool inMenu;

		[Token(Token = "0x400070C")]
		private const string ovrOverlayID = "OVROverlayID";

		[Token(Token = "0x400070D")]
		private const string applicationID = "ApplicationID";

		[Token(Token = "0x400070E")]
		private const string noneID = "NoneID";

		[Token(Token = "0x400070F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Toggle applicationRadioButton;

		[Token(Token = "0x4000710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Toggle noneRadioButton;

		[Token(Token = "0x4000711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("App vs Compositor Comparison Settings")]
		public GameObject mainCamera;

		[Token(Token = "0x4000712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject uiCamera;

		[Token(Token = "0x4000713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject uiGeoParent;

		[Token(Token = "0x4000714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject worldspaceGeoParent;

		[Token(Token = "0x4000715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public OVROverlay cameraRenderOverlay;

		[Token(Token = "0x4000716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public OVROverlay renderingLabelOverlay;

		[Token(Token = "0x4000717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Texture applicationLabelTexture;

		[Token(Token = "0x4000718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Texture compositorLabelTexture;

		[Token(Token = "0x4000719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Level Loading Sim Settings")]
		public GameObject prefabForLevelLoadSim;

		[Token(Token = "0x400071A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public OVROverlay cubemapOverlay;

		[Token(Token = "0x400071B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public OVROverlay loadingTextQuadOverlay;

		[Token(Token = "0x400071C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float distanceFromCamToLoadText;

		[Token(Token = "0x400071D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float cubeSpawnRadius;

		[Token(Token = "0x400071E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float heightBetweenItems;

		[Token(Token = "0x400071F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public int numObjectsPerLevel;

		[Token(Token = "0x4000720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public int numLevels;

		[Token(Token = "0x4000721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public int numLoopsTrigger;

		[Token(Token = "0x4000722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<GameObject> spawnedCubes;

		[Token(Token = "0x6000757")]
		[Address(RVA = "0xF3A830", Offset = "0xF3A830", VA = "0xF3A830")]
		private void Start()
		{
		}

		[Token(Token = "0x6000758")]
		[Address(RVA = "0xF3B070", Offset = "0xF3B070", VA = "0xF3B070")]
		private void Update()
		{
		}

		[Token(Token = "0x6000759")]
		[Address(RVA = "0xF3B198", Offset = "0xF3B198", VA = "0xF3B198")]
		private void ActivateWorldGeo()
		{
		}

		[Token(Token = "0x600075A")]
		[Address(RVA = "0xF3B2C8", Offset = "0xF3B2C8", VA = "0xF3B2C8")]
		private void ActivateOVROverlay()
		{
		}

		[Token(Token = "0x600075B")]
		[Address(RVA = "0xF3B3F8", Offset = "0xF3B3F8", VA = "0xF3B3F8")]
		private void ActivateNone()
		{
		}

		[Token(Token = "0x600075C")]
		[Address(RVA = "0xF3B178", Offset = "0xF3B178", VA = "0xF3B178")]
		private void TriggerLoad()
		{
		}

		[Token(Token = "0x600075D")]
		[Address(RVA = "0xF3B4CC", Offset = "0xF3B4CC", VA = "0xF3B4CC")]
		[IteratorStateMachine(typeof(<WaitforOVROverlay>d__30))]
		private IEnumerator WaitforOVROverlay()
		{
			return null;
		}

		[Token(Token = "0x600075E")]
		[Address(RVA = "0xF3B568", Offset = "0xF3B568", VA = "0xF3B568")]
		private void TriggerUnload()
		{
		}

		[Token(Token = "0x600075F")]
		[Address(RVA = "0xF3ACA0", Offset = "0xF3ACA0", VA = "0xF3ACA0")]
		private void CameraAndRenderTargetSetup()
		{
		}

		[Token(Token = "0x6000760")]
		[Address(RVA = "0xF3B6B0", Offset = "0xF3B6B0", VA = "0xF3B6B0")]
		private void SimulateLevelLoad()
		{
		}

		[Token(Token = "0x6000761")]
		[Address(RVA = "0xF3B590", Offset = "0xF3B590", VA = "0xF3B590")]
		private void ClearObjects()
		{
		}

		[Token(Token = "0x6000762")]
		[Address(RVA = "0xF3BA38", Offset = "0xF3BA38", VA = "0xF3BA38")]
		public void RadioPressed(string radioLabel, string group, Toggle t)
		{
		}

		[Token(Token = "0x6000763")]
		[Address(RVA = "0xF3BB24", Offset = "0xF3BB24", VA = "0xF3BB24")]
		public OVROverlaySample()
		{
		}
	}
}
namespace OVRTouchSample
{
	[Token(Token = "0x2000149")]
	[RequireComponent(typeof(OVRGrabber))]
	public class Hand : MonoBehaviour
	{
		[Token(Token = "0x4000726")]
		public const string ANIM_LAYER_NAME_POINT = "Point Layer";

		[Token(Token = "0x4000727")]
		public const string ANIM_LAYER_NAME_THUMB = "Thumb Layer";

		[Token(Token = "0x4000728")]
		public const string ANIM_PARAM_NAME_FLEX = "Flex";

		[Token(Token = "0x4000729")]
		public const string ANIM_PARAM_NAME_POSE = "Pose";

		[Token(Token = "0x400072A")]
		public const float THRESH_COLLISION_FLEX = 0.9f;

		[Token(Token = "0x400072B")]
		public const float INPUT_RATE_CHANGE = 20f;

		[Token(Token = "0x400072C")]
		public const float COLLIDER_SCALE_MIN = 0.01f;

		[Token(Token = "0x400072D")]
		public const float COLLIDER_SCALE_MAX = 1f;

		[Token(Token = "0x400072E")]
		public const float COLLIDER_SCALE_PER_SECOND = 1f;

		[Token(Token = "0x400072F")]
		public const float TRIGGER_DEBOUNCE_TIME = 0.05f;

		[Token(Token = "0x4000730")]
		public const float THUMB_DEBOUNCE_TIME = 0.15f;

		[Token(Token = "0x4000731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private OVRInput.Controller m_controller;

		[Token(Token = "0x4000732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Animator m_animator;

		[Token(Token = "0x4000733")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private HandPose m_defaultGrabPose;

		[Token(Token = "0x4000734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Collider[] m_colliders;

		[Token(Token = "0x4000735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool m_collisionEnabled;

		[Token(Token = "0x4000736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private OVRGrabber m_grabber;

		[Token(Token = "0x4000737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Renderer> m_showAfterInputFocusAcquired;

		[Token(Token = "0x4000738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int m_animLayerIndexThumb;

		[Token(Token = "0x4000739")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int m_animLayerIndexPoint;

		[Token(Token = "0x400073A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int m_animParamIndexFlex;

		[Token(Token = "0x400073B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int m_animParamIndexPose;

		[Token(Token = "0x400073C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool m_isPointing;

		[Token(Token = "0x400073D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool m_isGivingThumbsUp;

		[Token(Token = "0x400073E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float m_pointBlend;

		[Token(Token = "0x400073F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float m_thumbsUpBlend;

		[Token(Token = "0x4000740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool m_restoreOnInputAcquired;

		[Token(Token = "0x4000741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float m_collisionScaleCurrent;

		[Token(Token = "0x600076D")]
		[Address(RVA = "0xF3BF00", Offset = "0xF3BF00", VA = "0xF3BF00")]
		private void Awake()
		{
		}

		[Token(Token = "0x600076E")]
		[Address(RVA = "0xF3BF58", Offset = "0xF3BF58", VA = "0xF3BF58")]
		private void Start()
		{
		}

		[Token(Token = "0x600076F")]
		[Address(RVA = "0xF3C3A8", Offset = "0xF3C3A8", VA = "0xF3C3A8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000770")]
		[Address(RVA = "0xF3C494", Offset = "0xF3C494", VA = "0xF3C494")]
		private void Update()
		{
		}

		[Token(Token = "0x6000771")]
		[Address(RVA = "0xF3C5F8", Offset = "0xF3C5F8", VA = "0xF3C5F8")]
		private void UpdateCapTouchStates()
		{
		}

		[Token(Token = "0x6000772")]
		[Address(RVA = "0xF3C8C8", Offset = "0xF3C8C8", VA = "0xF3C8C8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000773")]
		[Address(RVA = "0xF3C9AC", Offset = "0xF3C9AC", VA = "0xF3C9AC")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x6000774")]
		[Address(RVA = "0xF3CB5C", Offset = "0xF3CB5C", VA = "0xF3CB5C")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x6000775")]
		[Address(RVA = "0xF3C684", Offset = "0xF3C684", VA = "0xF3C684")]
		private float InputValueRateChange(bool isDown, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6000776")]
		[Address(RVA = "0xF3C6D8", Offset = "0xF3C6D8", VA = "0xF3C6D8")]
		private void UpdateAnimStates()
		{
		}

		[Token(Token = "0x6000777")]
		[Address(RVA = "0xF3C268", Offset = "0xF3C268", VA = "0xF3C268")]
		private void CollisionEnable(bool enabled)
		{
		}

		[Token(Token = "0x6000778")]
		[Address(RVA = "0xF3CC80", Offset = "0xF3CC80", VA = "0xF3CC80")]
		public Hand()
		{
		}
	}
	[Token(Token = "0x200014B")]
	public enum HandPoseId
	{
		[Token(Token = "0x4000745")]
		Default,
		[Token(Token = "0x4000746")]
		Generic,
		[Token(Token = "0x4000747")]
		PingPongBall,
		[Token(Token = "0x4000748")]
		Controller
	}
	[Token(Token = "0x200014C")]
	public class HandPose : MonoBehaviour
	{
		[Token(Token = "0x4000749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool m_allowPointing;

		[Token(Token = "0x400074A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[SerializeField]
		private bool m_allowThumbsUp;

		[Token(Token = "0x400074B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private HandPoseId m_poseId;

		[Token(Token = "0x170000DA")]
		public bool AllowPointing
		{
			[Token(Token = "0x600077C")]
			[Address(RVA = "0xF3CD38", Offset = "0xF3CD38", VA = "0xF3CD38")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000DB")]
		public bool AllowThumbsUp
		{
			[Token(Token = "0x600077D")]
			[Address(RVA = "0xF3CD40", Offset = "0xF3CD40", VA = "0xF3CD40")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000DC")]
		public HandPoseId PoseId
		{
			[Token(Token = "0x600077E")]
			[Address(RVA = "0xF3CD48", Offset = "0xF3CD48", VA = "0xF3CD48")]
			get
			{
				return default(HandPoseId);
			}
		}

		[Token(Token = "0x600077F")]
		[Address(RVA = "0xF3CD50", Offset = "0xF3CD50", VA = "0xF3CD50")]
		public HandPose()
		{
		}
	}
	[Token(Token = "0x200014D")]
	public class TouchController : MonoBehaviour
	{
		[Token(Token = "0x400074C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private OVRInput.Controller m_controller;

		[Token(Token = "0x400074D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Animator m_animator;

		[Token(Token = "0x400074E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool m_restoreOnInputAcquired;

		[Token(Token = "0x6000780")]
		[Address(RVA = "0xF3CD58", Offset = "0xF3CD58", VA = "0xF3CD58")]
		private void Update()
		{
		}

		[Token(Token = "0x6000781")]
		[Address(RVA = "0xF3D024", Offset = "0xF3D024", VA = "0xF3D024")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x6000782")]
		[Address(RVA = "0xF3D074", Offset = "0xF3D074", VA = "0xF3D074")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x6000783")]
		[Address(RVA = "0xF3D0AC", Offset = "0xF3D0AC", VA = "0xF3D0AC")]
		public TouchController()
		{
		}
	}
}
namespace Autohand
{
	[Token(Token = "0x200014E")]
	public class XRMover : MonoBehaviour
	{
		[Token(Token = "0x400074F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Controllers")]
		[Header("TEMP DEMO SCRIPT - Advanced script coming soon")]
		public XRHandControllerLink moverController;

		[Token(Token = "0x4000750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public XRHandControllerLink turningController;

		[Token(Token = "0x4000751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Common2DAxis moverAxis;

		[Token(Token = "0x4000752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Body")]
		public GameObject cam;

		[Token(Token = "0x4000753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CharacterController controller;

		[Token(Token = "0x4000754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CapsuleCollider collisionCapsule;

		[Token(Token = "0x4000755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Settings")]
		public bool snapTurning;

		[Token(Token = "0x4000756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float turnAngle;

		[Token(Token = "0x4000757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float speed;

		[Token(Token = "0x4000758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float gravity;

		[Token(Token = "0x4000759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float currentGravity;

		[Token(Token = "0x400075A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private bool axisReset;

		[Token(Token = "0x400075B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 moveAxis;

		[Token(Token = "0x400075C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector2 turningAxis;

		[Token(Token = "0x6000784")]
		[Address(RVA = "0xF3D0B4", Offset = "0xF3D0B4", VA = "0xF3D0B4")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x6000785")]
		[Address(RVA = "0xF3D490", Offset = "0xF3D490", VA = "0xF3D490")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000786")]
		[Address(RVA = "0xF3D110", Offset = "0xF3D110", VA = "0xF3D110")]
		public void Move(float x, float y, float z)
		{
		}

		[Token(Token = "0x6000787")]
		[Address(RVA = "0xF3D21C", Offset = "0xF3D21C", VA = "0xF3D21C")]
		private void Turning()
		{
		}

		[Token(Token = "0x6000788")]
		[Address(RVA = "0xF3D534", Offset = "0xF3D534", VA = "0xF3D534")]
		public XRMover()
		{
		}
	}
	[Token(Token = "0x200014F")]
	public class AutoHeaderAttribute : PropertyAttribute
	{
		[Token(Token = "0x400075D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int count;

		[Token(Token = "0x400075E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int depth;

		[Token(Token = "0x400075F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string label;

		[Token(Token = "0x4000760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string tooltip;

		[Token(Token = "0x4000761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string toggleBool;

		[Token(Token = "0x4000762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Type type;

		[Token(Token = "0x6000789")]
		[Address(RVA = "0xF3D550", Offset = "0xF3D550", VA = "0xF3D550")]
		public AutoHeaderAttribute(string label, int count = 0, int depth = 0)
		{
		}

		[Token(Token = "0x600078A")]
		[Address(RVA = "0xF3D594", Offset = "0xF3D594", VA = "0xF3D594")]
		public AutoHeaderAttribute(string label, string tooltip, string toggleName, Type classType, int count = 0, int depth = 0)
		{
		}
	}
	[Token(Token = "0x2000150")]
	public class AutoLineAttribute : PropertyAttribute
	{
		[Token(Token = "0x4000763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int count;

		[Token(Token = "0x4000764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int depth;

		[Token(Token = "0x4000765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string tooltip;

		[Token(Token = "0x4000766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string toggleBool;

		[Token(Token = "0x4000767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Type type;

		[Token(Token = "0x600078B")]
		[Address(RVA = "0xF3D5EC", Offset = "0xF3D5EC", VA = "0xF3D5EC")]
		public AutoLineAttribute(int count = 0, int depth = 0)
		{
		}

		[Token(Token = "0x600078C")]
		[Address(RVA = "0xF3D618", Offset = "0xF3D618", VA = "0xF3D618")]
		public AutoLineAttribute(string tooltip, string toggleName, Type classType, int count = 0, int depth = 0)
		{
		}
	}
	[Token(Token = "0x2000151")]
	public class AutoToggleHeaderAttribute : PropertyAttribute
	{
		[Token(Token = "0x4000768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int count;

		[Token(Token = "0x4000769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int depth;

		[Token(Token = "0x400076A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string label;

		[Token(Token = "0x400076B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string tooltip;

		[Token(Token = "0x400076C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string toggleBool;

		[Token(Token = "0x400076D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Type type;

		[Token(Token = "0x600078D")]
		[Address(RVA = "0xF3D65C", Offset = "0xF3D65C", VA = "0xF3D65C")]
		public AutoToggleHeaderAttribute(string label, int count = 0, int depth = 0)
		{
		}

		[Token(Token = "0x600078E")]
		[Address(RVA = "0xF3D6A0", Offset = "0xF3D6A0", VA = "0xF3D6A0")]
		public AutoToggleHeaderAttribute(string label, string tooltip, string toggleName, Type classType, int count = 0, int depth = 0)
		{
		}
	}
	[Token(Token = "0x2000152")]
	public static class AutoHandExtensions
	{
		[Token(Token = "0x400076E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Transform _transformRuler;

		[Token(Token = "0x400076F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Transform _transformRulerChild;

		[Token(Token = "0x170000DD")]
		public static Transform transformRuler
		{
			[Token(Token = "0x600078F")]
			[Address(RVA = "0xF3D6F8", Offset = "0xF3D6F8", VA = "0xF3D6F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DE")]
		public static Transform transformRulerChild
		{
			[Token(Token = "0x6000790")]
			[Address(RVA = "0xF3D8F8", Offset = "0xF3D8F8", VA = "0xF3D8F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000791")]
		[Address(RVA = "0xF3DB1C", Offset = "0xF3DB1C", VA = "0xF3DB1C")]
		public static float Round(this float value, int digits)
		{
			return default(float);
		}

		[Token(Token = "0x6000792")]
		[Address(RVA = "0xF3DBC0", Offset = "0xF3DBC0", VA = "0xF3DBC0")]
		public static bool HasGrabbable(this Hand hand, GameObject obj, out Grabbable grabbable)
		{
			return default(bool);
		}

		[Token(Token = "0x6000793")]
		[Address(RVA = "0xF3DBCC", Offset = "0xF3DBCC", VA = "0xF3DBCC")]
		public static bool HasGrabbable(this GameObject obj, out Grabbable grabbable)
		{
			return default(bool);
		}

		[Token(Token = "0x6000794")]
		public static T GetCopyOf<T>(this Component comp, T other) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6000795")]
		public static bool CanGetComponent<T>(this Component componentClass, out T component)
		{
			return default(bool);
		}

		[Token(Token = "0x6000796")]
		public static bool CanGetComponent<T>(this GameObject componentClass, out T component)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000153")]
	public class PhysicsGadgetButton : PhysicsGadgetConfigurableLimitReader
	{
		[Token(Token = "0x4000770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool pressed;

		[Token(Token = "0x4000771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The percentage (0-1) from the required value needed to call the event, if threshold is 0.1 OnPressed will be called at 0.9, and OnUnpressed at 0.1")]
		[Min(0.01f)]
		public float threshold;

		[Token(Token = "0x4000772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool lockOnPressed;

		[Token(Token = "0x4000773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Space]
		public UnityEvent OnPressed;

		[Token(Token = "0x4000774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent OnUnpressed;

		[Token(Token = "0x4000775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 startPos;

		[Token(Token = "0x4000776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 pressedPos;

		[Token(Token = "0x4000777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float pressedValue;

		[Token(Token = "0x6000797")]
		[Address(RVA = "0xF3DCC8", Offset = "0xF3DCC8", VA = "0xF3DCC8")]
		protected new void Start()
		{
		}

		[Token(Token = "0x6000798")]
		[Address(RVA = "0xF3DE0C", Offset = "0xF3DE0C", VA = "0xF3DE0C")]
		protected void FixedUpdate()
		{
		}

		[Token(Token = "0x6000799")]
		[Address(RVA = "0xF3E074", Offset = "0xF3E074", VA = "0xF3E074")]
		public void Pressed()
		{
		}

		[Token(Token = "0x600079A")]
		[Address(RVA = "0xF3E0CC", Offset = "0xF3E0CC", VA = "0xF3E0CC")]
		public void Unpressed()
		{
		}

		[Token(Token = "0x600079B")]
		[Address(RVA = "0xF3E0E8", Offset = "0xF3E0E8", VA = "0xF3E0E8")]
		public void Unlock()
		{
		}

		[Token(Token = "0x600079C")]
		[Address(RVA = "0xF3E144", Offset = "0xF3E144", VA = "0xF3E144")]
		public PhysicsGadgetButton()
		{
		}
	}
	[Token(Token = "0x2000154")]
	[RequireComponent(typeof(ConfigurableJoint))]
	public class PhysicsGadgetConfigurableLimitReader : MonoBehaviour
	{
		[Token(Token = "0x4000778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool invertValue;

		[Token(Token = "0x4000779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("For objects slightly off center. \nThe minimum abs value required to return a value nonzero value\n - if playRange is 0.1, you have to move the gadget 10% to get a result")]
		public float playRange;

		[Token(Token = "0x400077A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected ConfigurableJoint joint;

		[Token(Token = "0x400077B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Vector3 axisPos;

		[Token(Token = "0x400077C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float value;

		[Token(Token = "0x400077D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 limitAxis;

		[Token(Token = "0x600079D")]
		[Address(RVA = "0xF3DD00", Offset = "0xF3DD00", VA = "0xF3DD00")]
		protected void Start()
		{
		}

		[Token(Token = "0x600079E")]
		[Address(RVA = "0xF3DEFC", Offset = "0xF3DEFC", VA = "0xF3DEFC")]
		public float GetValue()
		{
			return default(float);
		}

		[Token(Token = "0x600079F")]
		[Address(RVA = "0xF3E164", Offset = "0xF3E164", VA = "0xF3E164")]
		public PhysicsGadgetConfigurableLimitReader()
		{
		}
	}
	[Token(Token = "0x2000155")]
	[RequireComponent(typeof(HingeJoint))]
	public class PhysicsGadgetHingeAngleReader : MonoBehaviour
	{
		[Token(Token = "0x400077E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool invertValue;

		[Token(Token = "0x400077F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("For objects slightly off center. \nThe minimum abs value required to return a value nonzero value\n - if playRange is 0.1, you have to move the gadget 10% to get a result")]
		public float playRange;

		[Token(Token = "0x4000780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HingeJoint joint;

		[Token(Token = "0x4000781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected float value;

		[Token(Token = "0x4000782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion startRot;

		[Token(Token = "0x4000783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion deltaParentRotation;

		[Token(Token = "0x60007A0")]
		[Address(RVA = "0xF3E178", Offset = "0xF3E178", VA = "0xF3E178")]
		protected void Start()
		{
		}

		[Token(Token = "0x60007A1")]
		[Address(RVA = "0xF3E1F8", Offset = "0xF3E1F8", VA = "0xF3E1F8")]
		public float GetValue()
		{
			return default(float);
		}

		[Token(Token = "0x60007A2")]
		[Address(RVA = "0xF3E2F0", Offset = "0xF3E2F0", VA = "0xF3E2F0")]
		public PhysicsGadgetHingeAngleReader()
		{
		}
	}
	[Token(Token = "0x2000156")]
	[RequireComponent(typeof(ConfigurableJoint))]
	public class PhysicsGadgetJoystick : MonoBehaviour
	{
		[Token(Token = "0x4000784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ConfigurableJoint joint;

		[Token(Token = "0x4000785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool invertX;

		[Token(Token = "0x4000786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool invertY;

		[Token(Token = "0x4000787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("For objects slightly off center. \nThe minimum abs value required to return a value nonzero value\n - if playRange is 0.1, you have to move the gadget 10% to get a result")]
		public float playRange;

		[Token(Token = "0x4000788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector2 xRange;

		[Token(Token = "0x4000789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector2 zRange;

		[Token(Token = "0x400078A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector2 value;

		[Token(Token = "0x400078B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 jointRotation;

		[Token(Token = "0x400078C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Rigidbody body;

		[Token(Token = "0x60007A3")]
		[Address(RVA = "0xF3E304", Offset = "0xF3E304", VA = "0xF3E304")]
		private void Start()
		{
		}

		[Token(Token = "0x60007A4")]
		[Address(RVA = "0xF3E394", Offset = "0xF3E394", VA = "0xF3E394")]
		public void FixedUpdate()
		{
		}

		[Token(Token = "0x60007A5")]
		[Address(RVA = "0xF3E49C", Offset = "0xF3E49C", VA = "0xF3E49C")]
		public Vector2 GetValue()
		{
			return default(Vector2);
		}

		[Token(Token = "0x60007A6")]
		[Address(RVA = "0xF3E518", Offset = "0xF3E518", VA = "0xF3E518")]
		public PhysicsGadgetJoystick()
		{
		}
	}
	[Token(Token = "0x2000157")]
	public class PhysicsGadgetLever : PhysicsGadgetHingeAngleReader
	{
		[Token(Token = "0x400078D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The percentage (0-1) from the required value needed to call the event, if threshold is 0.1 OnMax will be called at 0.9, OnMin at -0.9, and OnMiddle at -0.1 or 0.1")]
		[Min(0.01f)]
		public float threshold;

		[Token(Token = "0x400078E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEvent OnMax;

		[Token(Token = "0x400078F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent OnMid;

		[Token(Token = "0x4000790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityEvent OnMin;

		[Token(Token = "0x4000791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool min;

		[Token(Token = "0x4000792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool max;

		[Token(Token = "0x4000793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		private bool mid;

		[Token(Token = "0x60007A7")]
		[Address(RVA = "0xF3E52C", Offset = "0xF3E52C", VA = "0xF3E52C")]
		protected void FixedUpdate()
		{
		}

		[Token(Token = "0x60007A8")]
		[Address(RVA = "0xF3E64C", Offset = "0xF3E64C", VA = "0xF3E64C")]
		private void Max()
		{
		}

		[Token(Token = "0x60007A9")]
		[Address(RVA = "0xF3E690", Offset = "0xF3E690", VA = "0xF3E690")]
		private void Mid()
		{
		}

		[Token(Token = "0x60007AA")]
		[Address(RVA = "0xF3E66C", Offset = "0xF3E66C", VA = "0xF3E66C")]
		private void Min()
		{
		}

		[Token(Token = "0x60007AB")]
		[Address(RVA = "0xF3E6B4", Offset = "0xF3E6B4", VA = "0xF3E6B4")]
		public PhysicsGadgetLever()
		{
		}
	}
	[Token(Token = "0x2000158")]
	public class PhysicsGadgetSlider : PhysicsGadgetConfigurableLimitReader
	{
		[Token(Token = "0x4000794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("The percentage (0-1) from the required value needed to call the event, if threshold is 0.1 OnMax will be called at 0.9, OnMin at -0.9, and OnMiddle at -0.1 or 0.1")]
		[Min(0.01f)]
		public float threshold;

		[Token(Token = "0x4000795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEvent OnMax;

		[Token(Token = "0x4000796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEvent OnMid;

		[Token(Token = "0x4000797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent OnMin;

		[Token(Token = "0x4000798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool min;

		[Token(Token = "0x4000799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool max;

		[Token(Token = "0x400079A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		private bool mid;

		[Token(Token = "0x60007AC")]
		[Address(RVA = "0xF3E6D4", Offset = "0xF3E6D4", VA = "0xF3E6D4")]
		protected void FixedUpdate()
		{
		}

		[Token(Token = "0x60007AD")]
		[Address(RVA = "0xF3E7F4", Offset = "0xF3E7F4", VA = "0xF3E7F4")]
		private void Max()
		{
		}

		[Token(Token = "0x60007AE")]
		[Address(RVA = "0xF3E838", Offset = "0xF3E838", VA = "0xF3E838")]
		private void Mid()
		{
		}

		[Token(Token = "0x60007AF")]
		[Address(RVA = "0xF3E814", Offset = "0xF3E814", VA = "0xF3E814")]
		private void Min()
		{
		}

		[Token(Token = "0x60007B0")]
		[Address(RVA = "0xF3E85C", Offset = "0xF3E85C", VA = "0xF3E85C")]
		public PhysicsGadgetSlider()
		{
		}
	}
	[Token(Token = "0x2000159")]
	[RequireComponent(typeof(Grabbable))]
	[HelpURL("https://earnestrobot.notion.site/Distance-Grabbing-19e4e8b14f00428295eca75fca752787")]
	public class DistanceGrabbable : MonoBehaviour
	{
		[Token(Token = "0x400079B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AutoHeader("Distance Grabbable", 0, 0)]
		public bool ignoreMe;

		[Token(Token = "0x400079C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Header("Pull")]
		public bool instantPull;

		[Token(Token = "0x400079D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Header("Velocity Shoot")]
		[Range(0.4f, 1.1f)]
		[Tooltip("Use this to adjust the angle of the arch that the gameobject follows while shooting towards your hand.")]
		[HideIf("instantPull")]
		public float archMultiplier;

		[Token(Token = "0x400079E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideIf("instantPull")]
		[Tooltip("Slow down or speed up gravitation to your liking.")]
		public float gravitationVelocity;

		[Token(Token = "0x400079F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[HideIf("instantPull")]
		[Tooltip("This enables rotation which makes the gameobject orient to the rotation of you hand as it moves through the air. All below rotation variables have no use when this is false.")]
		[Header("Rotation")]
		public bool rotate;

		[Token(Token = "0x40007A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Speed that the object orients to the rotation of your hand.")]
		[HideIf("instantPull")]
		public float rotationSpeed;

		[Token(Token = "0x40007A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AutoToggleHeader("Enable Highlighting", 0, 0)]
		[Tooltip("Whether or not to ignore all highlights including default highlights on HandPointGrab")]
		public bool ignoreHighlights;

		[Token(Token = "0x40007A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[EnableIf("ignoreHighlights")]
		[Tooltip("Highlight targeted material to use - defaults to HandPointGrab materials if none")]
		public Material targetedMaterial;

		[Token(Token = "0x40007A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Highlight selected material to use - defaults to HandPointGrab materials if none")]
		[EnableIf("ignoreHighlights")]
		public Material selectedMaterial;

		[Token(Token = "0x40007A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AutoToggleHeader("Show Events", 0, 0)]
		public bool showEvents;

		[Token(Token = "0x40007A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[ShowIf("showEvents")]
		public UnityHandGrabEvent OnPull;

		[Token(Token = "0x40007A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Space]
		[ShowIf("showEvents")]
		[Tooltip("Called when the object has been targeted/aimed at by the pointer")]
		public UnityHandGrabEvent StartTargeting;

		[Token(Token = "0x40007A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[ShowIf("showEvents")]
		public UnityHandGrabEvent StopTargeting;

		[Token(Token = "0x40007A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Called when the object has been selected before being pulled or flicked")]
		[ShowIf("showEvents")]
		[Space]
		public UnityHandGrabEvent StartSelecting;

		[Token(Token = "0x40007A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[ShowIf("showEvents")]
		public UnityHandGrabEvent StopSelecting;

		[Token(Token = "0x40007AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public HandGrabEvent OnPullCanceled;

		[Token(Token = "0x40007AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal Grabbable grabbable;

		[Token(Token = "0x40007AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform target;

		[Token(Token = "0x40007AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 calculatedNecessaryVelocity;

		[Token(Token = "0x40007AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool gravitationEnabled;

		[Token(Token = "0x40007AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
		private bool gravitationMethodBegun;

		[Token(Token = "0x40007B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x96")]
		private bool pullStarted;

		[Token(Token = "0x40007B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Rigidbody body;

		[Token(Token = "0x40007B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float timePassedSincePull;

		[Token(Token = "0x40007B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 lastGravitationVelocity;

		[Token(Token = "0x60007B1")]
		[Address(RVA = "0xF3E884", Offset = "0xF3E884", VA = "0xF3E884")]
		private void Start()
		{
		}

		[Token(Token = "0x60007B2")]
		[Address(RVA = "0xF3E8FC", Offset = "0xF3E8FC", VA = "0xF3E8FC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60007B3")]
		[Address(RVA = "0xF3EA78", Offset = "0xF3EA78", VA = "0xF3EA78")]
		private void FollowHandRotation()
		{
		}

		[Token(Token = "0x60007B4")]
		[Address(RVA = "0xF3EB58", Offset = "0xF3EB58", VA = "0xF3EB58")]
		private void GravitateTowardsHand()
		{
		}

		[Token(Token = "0x60007B5")]
		[Address(RVA = "0xF3E9B0", Offset = "0xF3E9B0", VA = "0xF3E9B0")]
		private void InitialVelocityPushToHand()
		{
		}

		[Token(Token = "0x60007B6")]
		[Address(RVA = "0xF3ED90", Offset = "0xF3ED90", VA = "0xF3ED90")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60007B7")]
		[Address(RVA = "0xF3ED20", Offset = "0xF3ED20", VA = "0xF3ED20")]
		private Vector3 CalculateTrajectoryVelocity(Vector3 origin, Vector3 target, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007B8")]
		[Address(RVA = "0xF3EDF0", Offset = "0xF3EDF0", VA = "0xF3EDF0")]
		public void SetTarget(Transform theObject)
		{
		}

		[Token(Token = "0x60007B9")]
		[Address(RVA = "0xF3EDCC", Offset = "0xF3EDCC", VA = "0xF3EDCC")]
		public void CancelTarget()
		{
		}

		[Token(Token = "0x60007BA")]
		[Address(RVA = "0xF3EE14", Offset = "0xF3EE14", VA = "0xF3EE14")]
		public DistanceGrabbable()
		{
		}
	}
	[Token(Token = "0x200015A")]
	public enum HandGrabType
	{
		[Token(Token = "0x40007B5")]
		Default,
		[Token(Token = "0x40007B6")]
		HandToGrabbable,
		[Token(Token = "0x40007B7")]
		GrabbableToHand
	}
	[Token(Token = "0x200015B")]
	[HelpURL("https://earnestrobot.notion.site/Grabbables-9308c564e60848a882eb23e9778ee2b6")]
	public class Grabbable : GrabbableBase
	{
		[Token(Token = "0x40007B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("This will copy the given grabbables settings to this grabbable when applied")]
		[OnValueChanged("EditorCopyGrabbable")]
		public Grabbable CopySettings;

		[Token(Token = "0x40007B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Header("Grab Settings")]
		[Tooltip("Whether or not this can be grabbed with more than one hand")]
		public bool singleHandOnly;

		[Token(Token = "0x40007BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
		[Tooltip("if false single handed items cannot be passes back and forth on grab")]
		[ShowIf("singleHandOnly")]
		public bool allowHeldSwapping;

		[Token(Token = "0x40007BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD2")]
		[Tooltip("Will the item automatically return the hand on grab - good for saved poses, bad for heavy things")]
		public bool instantGrab;

		[Token(Token = "0x40007BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD3")]
		[Tooltip("Experimental - ignores weight of held object while held")]
		public bool ignoreWeight;

		[Token(Token = "0x40007BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[Tooltip("Creates an offset an grab so the hand will not return to the hand on grab - Good for statically jointed grabbable objects")]
		public bool maintainGrabOffset;

		[Token(Token = "0x40007BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD5")]
		[Tooltip("This will NOT parent the object under the hands on grab. This will parent the object to the parents of the hand, which allow you to move the hand parent object smoothly while holding an item, but will also allow you to move items that are very heavy - recommended for all objects that aren't very heavy or jointed to other rigidbodies")]
		public bool parentOnGrab;

		[Token(Token = "0x40007BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Header("Release Settings")]
		[Tooltip("How much to multiply throw by for this grabbable when releasing - 0-1 for no or reduced throw strength")]
		[FormerlySerializedAs("throwMultiplyer")]
		public float throwPower;

		[Token(Token = "0x40007C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[Tooltip("The required force to break the fixedJoint\n Turn this to \"infinity\" to disable (Might cause jitter)\nIdeal value depends on hand mass and velocity settings")]
		public float jointBreakForce;

		[Token(Token = "0x40007C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AutoToggleHeader("Show Advanced", 0, 0)]
		public bool showAdvancedSettings;

		[Token(Token = "0x40007C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[Tooltip("Which hand this can be held by")]
		[ShowIf("showAdvancedSettings")]
		public HandGrabType grabType;

		[Token(Token = "0x40007C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[ShowIf("showAdvancedSettings")]
		[Tooltip("Which hand this can be held by")]
		public HandType handType;

		[Token(Token = "0x40007C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[ShowIf("showAdvancedSettings")]
		[Tooltip("Adds and links a GrabbableChild to each child with a collider on start - So the hand can grab them")]
		public bool makeChildrenGrabbable;

		[Token(Token = "0x40007C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xED")]
		[ShowIf("showAdvancedSettings")]
		[Tooltip("Whether or not the break call made only when holding with multiple hands - if this is false the break event can be called by forcing an object into a static collider")]
		public bool pullApartBreakOnly;

		[Token(Token = "0x40007C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Min(0f)]
		[Space]
		[ShowIf("showAdvancedSettings")]
		[Tooltip("The joint that connects the hand and the grabbable. Defaults to the joint in AutoHand/Resources/DefaultJoint.prefab if empty")]
		public ConfigurableJoint customGrabJoint;

		[Token(Token = "0x40007C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Tooltip("The number of seconds that the hand collision should ignore the released object\n (Good for increased placement precision and resolves clipping errors)")]
		[Min(0f)]
		[ShowIf("showAdvancedSettings")]
		public float ignoreReleaseTime;

		[Token(Token = "0x40007C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[Tooltip("I.E. Grab Prioirty - BIGGER IS BETTER - divides highlight distance by this when calculating which object to grab. Hands always grab closest object to palm")]
		[ShowIf("showAdvancedSettings")]
		[Min(0f)]
		public float grabPriorityWeight;

		[Token(Token = "0x40007C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[ShowIf("showAdvancedSettings")]
		[Tooltip("Offsets the grabbable by this much when being held")]
		public Vector3 heldPositionOffset;

		[Token(Token = "0x40007CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[Tooltip("Offsets the grabbable by this many degrees when being held")]
		[ShowIf("showAdvancedSettings")]
		public Vector3 heldRotationOffset;

		[Token(Token = "0x40007CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[Space]
		[ShowIf("showAdvancedSettings")]
		[Tooltip("For the special use case of having grabbable objects with physics jointed peices move properly while being held")]
		public List<Rigidbody> jointedBodies;

		[Token(Token = "0x40007CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[ShowIf("showAdvancedSettings")]
		[Tooltip("For the special use case of having things connected to the grabbable that the hand should ignore while being held (good for doors and drawers) -> for always active use the [GrabbableIgnoreHands] Component")]
		public List<Collider> heldIgnoreColliders;

		[Token(Token = "0x40007CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[AutoToggleHeader("Show Events", 0, 0)]
		public bool showEvents;

		[Token(Token = "0x40007CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[Space]
		[ShowIf("showEvents")]
		public UnityHandGrabEvent onGrab;

		[Token(Token = "0x40007CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[ShowIf("showEvents")]
		public UnityHandGrabEvent onRelease;

		[Token(Token = "0x40007D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[AutoToggleHeader("Show Advanced Events", 0, 0)]
		public bool showAdvancedEvents;

		[Token(Token = "0x40007D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[ShowIf("showAdvancedEvents")]
		[Space]
		[Space]
		public UnityHandGrabEvent onSqueeze;

		[Token(Token = "0x40007D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[ShowIf("showAdvancedEvents")]
		public UnityHandGrabEvent onUnsqueeze;

		[Token(Token = "0x40007D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[Space]
		[Space]
		[ShowIf("showAdvancedEvents")]
		public UnityHandGrabEvent onHighlight;

		[Token(Token = "0x40007D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[ShowIf("showAdvancedEvents")]
		public UnityHandGrabEvent onUnhighlight;

		[Token(Token = "0x40007D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[Space]
		[ShowIf("showAdvancedEvents")]
		[Space]
		public UnityHandGrabEvent OnJointBreak;

		[Token(Token = "0x40007D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[HideInInspector]
		[Tooltip("Lock hand in place on grab (This is a legacy setting, set hand kinematic on grab/release instead)")]
		[ShowIf("showAdvancedSettings")]
		public bool lockHandOnGrab;

		[Token(Token = "0x40007D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public HandGrabEvent OnBeforeGrabEvent;

		[Token(Token = "0x40007D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public HandGrabEvent OnGrabEvent;

		[Token(Token = "0x40007D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public HandGrabEvent OnReleaseEvent;

		[Token(Token = "0x40007DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public HandGrabEvent OnJointBreakEvent;

		[Token(Token = "0x40007DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public HandGrabEvent OnSqueezeEvent;

		[Token(Token = "0x40007DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public HandGrabEvent OnUnsqueezeEvent;

		[Token(Token = "0x40007DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public HandGrabEvent OnHighlightEvent;

		[Token(Token = "0x40007DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public HandGrabEvent OnUnhighlightEvent;

		[Token(Token = "0x170000DF")]
		public float throwMultiplyer
		{
			[Token(Token = "0x60007BB")]
			[Address(RVA = "0xF3EE40", Offset = "0xF3EE40", VA = "0xF3EE40")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60007BC")]
			[Address(RVA = "0xF3EE48", Offset = "0xF3EE48", VA = "0xF3EE48")]
			set
			{
			}
		}

		[Token(Token = "0x170000E0")]
		public bool wasForceReleased
		{
			[Token(Token = "0x60007BD")]
			[Address(RVA = "0xF3EE50", Offset = "0xF3EE50", VA = "0xF3EE50")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60007BE")]
			[Address(RVA = "0xF3EE58", Offset = "0xF3EE58", VA = "0xF3EE58")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x170000E1")]
		public Hand lastHeldBy
		{
			[Token(Token = "0x60007BF")]
			[Address(RVA = "0xF3EE64", Offset = "0xF3EE64", VA = "0xF3EE64")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60007C0")]
			[Address(RVA = "0xF3EE6C", Offset = "0xF3EE6C", VA = "0xF3EE6C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x60007C1")]
		[Address(RVA = "0xF3EE7C", Offset = "0xF3EE7C", VA = "0xF3EE7C", Slot = "8")]
		protected new virtual void Awake()
		{
		}

		[Token(Token = "0x60007C2")]
		[Address(RVA = "0xF3F028", Offset = "0xF3F028", VA = "0xF3F028", Slot = "9")]
		protected new virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x60007C3")]
		[Address(RVA = "0xF3F098", Offset = "0xF3F098", VA = "0xF3F098", Slot = "10")]
		public virtual void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60007C4")]
		[Address(RVA = "0xF3F170", Offset = "0xF3F170", VA = "0xF3F170", Slot = "11")]
		public virtual void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60007C5")]
		[Address(RVA = "0xF3F2A0", Offset = "0xF3F2A0", VA = "0xF3F2A0", Slot = "12")]
		internal virtual void Highlight(Hand hand, [Optional] Material customMat)
		{
		}

		[Token(Token = "0x60007C6")]
		[Address(RVA = "0xF3F6F4", Offset = "0xF3F6F4", VA = "0xF3F6F4", Slot = "13")]
		internal virtual void Unhighlight(Hand hand)
		{
		}

		[Token(Token = "0x60007C7")]
		[Address(RVA = "0xF3F7E0", Offset = "0xF3F7E0", VA = "0xF3F7E0", Slot = "14")]
		internal virtual void OnSqueeze(Hand hand)
		{
		}

		[Token(Token = "0x60007C8")]
		[Address(RVA = "0xF3F864", Offset = "0xF3F864", VA = "0xF3F864", Slot = "15")]
		internal virtual void OnUnsqueeze(Hand hand)
		{
		}

		[Token(Token = "0x60007C9")]
		[Address(RVA = "0xF3F8E8", Offset = "0xF3F8E8", VA = "0xF3F8E8", Slot = "16")]
		internal virtual void OnBeforeGrab(Hand hand)
		{
		}

		[Token(Token = "0x60007CA")]
		[Address(RVA = "0xF3F9A4", Offset = "0xF3F9A4", VA = "0xF3F9A4", Slot = "17")]
		internal virtual void OnGrab(Hand hand)
		{
		}

		[Token(Token = "0x60007CB")]
		[Address(RVA = "0xF3FDF0", Offset = "0xF3FDF0", VA = "0xF3FDF0", Slot = "18")]
		public virtual bool CanGrab(Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x60007CC")]
		[Address(RVA = "0xF3FE68", Offset = "0xF3FE68", VA = "0xF3FE68", Slot = "19")]
		internal virtual void OnRelease(Hand hand)
		{
		}

		[Token(Token = "0x60007CD")]
		[Address(RVA = "0xF40158", Offset = "0xF40158", VA = "0xF40158", Slot = "20")]
		internal virtual void BreakHandConnection(Hand hand)
		{
		}

		[Token(Token = "0x60007CE")]
		[Address(RVA = "0xF40560", Offset = "0xF40560", VA = "0xF40560", Slot = "21")]
		public virtual void HandsRelease()
		{
		}

		[Token(Token = "0x60007CF")]
		[Address(RVA = "0xF405F4", Offset = "0xF405F4", VA = "0xF405F4", Slot = "22")]
		public virtual void HandRelease(Hand hand)
		{
		}

		[Token(Token = "0x60007D0")]
		[Address(RVA = "0xF40674", Offset = "0xF40674", VA = "0xF40674", Slot = "23")]
		public virtual void ForceHandsRelease()
		{
		}

		[Token(Token = "0x60007D1")]
		[Address(RVA = "0xF40720", Offset = "0xF40720", VA = "0xF40720", Slot = "24")]
		public virtual void ForceHandRelease(Hand hand)
		{
		}

		[Token(Token = "0x60007D2")]
		[Address(RVA = "0xF407AC", Offset = "0xF407AC", VA = "0xF407AC", Slot = "25")]
		public virtual void OnHandJointBreak(Hand hand)
		{
		}

		[Token(Token = "0x60007D3")]
		[Address(RVA = "0xF40A54", Offset = "0xF40A54", VA = "0xF40A54")]
		public Vector3 GetVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007D4")]
		[Address(RVA = "0xF40A9C", Offset = "0xF40A9C", VA = "0xF40A9C")]
		public Vector3 GetAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007D5")]
		[Address(RVA = "0xF40BD4", Offset = "0xF40BD4", VA = "0xF40BD4")]
		public List<Hand> GetHeldBy()
		{
			return null;
		}

		[Token(Token = "0x60007D6")]
		[Address(RVA = "0xF40BDC", Offset = "0xF40BDC", VA = "0xF40BDC")]
		public int HeldCount()
		{
			return default(int);
		}

		[Token(Token = "0x60007D7")]
		[Address(RVA = "0xF40C24", Offset = "0xF40C24", VA = "0xF40C24")]
		public bool IsHeld()
		{
			return default(bool);
		}

		[Token(Token = "0x60007D8")]
		[Address(RVA = "0xF40C74", Offset = "0xF40C74", VA = "0xF40C74")]
		public bool BeingGrabbed()
		{
			return default(bool);
		}

		[Token(Token = "0x60007D9")]
		[Address(RVA = "0xF40C7C", Offset = "0xF40C7C", VA = "0xF40C7C")]
		public void PlayHapticVibration()
		{
		}

		[Token(Token = "0x60007DA")]
		[Address(RVA = "0xF40DC8", Offset = "0xF40DC8", VA = "0xF40DC8")]
		public void PlayHapticVibration(float duration = 0.1f)
		{
		}

		[Token(Token = "0x60007DB")]
		[Address(RVA = "0xF40F24", Offset = "0xF40F24", VA = "0xF40F24")]
		public void PlayHapticVibration(float duration, float amp = 0.5f)
		{
		}

		[Token(Token = "0x60007DC")]
		[Address(RVA = "0xF41088", Offset = "0xF41088", VA = "0xF41088", Slot = "26")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x60007DD")]
		[Address(RVA = "0xF411F4", Offset = "0xF411F4", VA = "0xF411F4")]
		public void AddJointedBody(Rigidbody body)
		{
		}

		[Token(Token = "0x60007DE")]
		[Address(RVA = "0xF414B4", Offset = "0xF414B4", VA = "0xF414B4")]
		public void RemoveJointedBody(Rigidbody body)
		{
		}

		[Token(Token = "0x60007DF")]
		[Address(RVA = "0xF41660", Offset = "0xF41660", VA = "0xF41660")]
		public void DoDestroy()
		{
		}

		[Token(Token = "0x60007E0")]
		[Address(RVA = "0xF416CC", Offset = "0xF416CC", VA = "0xF416CC")]
		public bool PhysicsMovementOnly()
		{
			return default(bool);
		}

		[Token(Token = "0x60007E1")]
		[Address(RVA = "0xF3EFB0", Offset = "0xF3EFB0", VA = "0xF3EFB0")]
		private void MakeChildrenGrabbable()
		{
		}

		[Token(Token = "0x60007E2")]
		[Address(RVA = "0xF4117C", Offset = "0xF4117C", VA = "0xF4117C")]
		private void MakeChildrenUngrabbable()
		{
		}

		[Token(Token = "0x60007E3")]
		[Address(RVA = "0xF403D0", Offset = "0xF403D0", VA = "0xF403D0")]
		internal void ResetGrabbableAfterRlease()
		{
		}

		[Token(Token = "0x60007E4")]
		[Address(RVA = "0xF41A94", Offset = "0xF41A94", VA = "0xF41A94")]
		public Grabbable()
		{
		}
	}
	[Token(Token = "0x200015C")]
	[DefaultExecutionOrder(1)]
	public class GrabbableChild : MonoBehaviour
	{
		[Token(Token = "0x40007E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Grabbable grabParent;

		[Token(Token = "0x60007E7")]
		[Address(RVA = "0xF41BA0", Offset = "0xF41BA0", VA = "0xF41BA0")]
		private void Start()
		{
		}

		[Token(Token = "0x60007E8")]
		[Address(RVA = "0xF41CD8", Offset = "0xF41CD8", VA = "0xF41CD8")]
		public GrabbableChild()
		{
		}
	}
	[Token(Token = "0x200015D")]
	[RequireComponent(typeof(Grabbable))]
	public class GrabbableCollisionHaptics : MonoBehaviour
	{
		[Token(Token = "0x200015E")]
		[CompilerGenerated]
		private sealed class <PlayBuffer>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40007ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40007EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40007EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GrabbableCollisionHaptics <>4__this;

			[Token(Token = "0x170000E2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60007F2")]
				[Address(RVA = "0xF422CC", Offset = "0xF422CC", VA = "0xF422CC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000E3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60007F4")]
				[Address(RVA = "0xF42314", Offset = "0xF42314", VA = "0xF42314", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60007EF")]
			[Address(RVA = "0xF42110", Offset = "0xF42110", VA = "0xF42110")]
			[DebuggerHidden]
			public <PlayBuffer>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x60007F0")]
			[Address(RVA = "0xF421F8", Offset = "0xF421F8", VA = "0xF421F8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60007F1")]
			[Address(RVA = "0xF421FC", Offset = "0xF421FC", VA = "0xF421FC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60007F3")]
			[Address(RVA = "0xF422D4", Offset = "0xF422D4", VA = "0xF422D4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200015F")]
		[CompilerGenerated]
		private sealed class <HapticPlayBuffer>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40007F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40007F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40007F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GrabbableCollisionHaptics <>4__this;

			[Token(Token = "0x40007F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float time;

			[Token(Token = "0x170000E4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60007F8")]
				[Address(RVA = "0xF423F0", Offset = "0xF423F0", VA = "0xF423F0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000E5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60007FA")]
				[Address(RVA = "0xF42438", Offset = "0xF42438", VA = "0xF42438", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60007F5")]
			[Address(RVA = "0xF42138", Offset = "0xF42138", VA = "0xF42138")]
			[DebuggerHidden]
			public <HapticPlayBuffer>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x60007F6")]
			[Address(RVA = "0xF4231C", Offset = "0xF4231C", VA = "0xF4231C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60007F7")]
			[Address(RVA = "0xF42320", Offset = "0xF42320", VA = "0xF42320", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60007F9")]
			[Address(RVA = "0xF423F8", Offset = "0xF423F8", VA = "0xF423F8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40007E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The layers that cause the sound to play")]
		public LayerMask collisionTriggers;

		[Token(Token = "0x40007E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float hapticAmp;

		[Token(Token = "0x40007E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float velocityAmp;

		[Token(Token = "0x40007E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float repeatDelay;

		[Token(Token = "0x40007E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maxDuration;

		[Token(Token = "0x40007E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Source to play sound from")]
		public AnimationCurve velocityAmpCurve;

		[Token(Token = "0x40007E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Source to play sound from")]
		public AnimationCurve velocityDurationCurve;

		[Token(Token = "0x40007E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Grabbable grab;

		[Token(Token = "0x40007EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Rigidbody body;

		[Token(Token = "0x40007EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool canPlay;

		[Token(Token = "0x40007EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Coroutine playRoutine;

		[Token(Token = "0x60007E9")]
		[Address(RVA = "0xF41CE0", Offset = "0xF41CE0", VA = "0xF41CE0")]
		private void Start()
		{
		}

		[Token(Token = "0x60007EA")]
		[Address(RVA = "0xF41E10", Offset = "0xF41E10", VA = "0xF41E10")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60007EB")]
		[Address(RVA = "0xF41E24", Offset = "0xF41E24", VA = "0xF41E24")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60007EC")]
		[Address(RVA = "0xF4209C", Offset = "0xF4209C", VA = "0xF4209C")]
		[IteratorStateMachine(typeof(<PlayBuffer>d__14))]
		private IEnumerator PlayBuffer()
		{
			return null;
		}

		[Token(Token = "0x60007ED")]
		[Address(RVA = "0xF41D8C", Offset = "0xF41D8C", VA = "0xF41D8C")]
		[IteratorStateMachine(typeof(<HapticPlayBuffer>d__15))]
		private IEnumerator HapticPlayBuffer(float time)
		{
			return null;
		}

		[Token(Token = "0x60007EE")]
		[Address(RVA = "0xF42160", Offset = "0xF42160", VA = "0xF42160")]
		public GrabbableCollisionHaptics()
		{
		}
	}
	[Token(Token = "0x2000160")]
	[RequireComponent(typeof(Grabbable))]
	public class GrabbableExtraEvents : MonoBehaviour
	{
		[Token(Token = "0x40007F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityHandGrabEvent OnFirstGrab;

		[Token(Token = "0x40007F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityHandGrabEvent OnLastRelease;

		[Token(Token = "0x40007F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Grabbable grab;

		[Token(Token = "0x60007FB")]
		[Address(RVA = "0xF42440", Offset = "0xF42440", VA = "0xF42440")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60007FC")]
		[Address(RVA = "0xF425E8", Offset = "0xF425E8", VA = "0xF425E8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60007FD")]
		[Address(RVA = "0xF42798", Offset = "0xF42798", VA = "0xF42798")]
		public void Grab(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x60007FE")]
		[Address(RVA = "0xF42824", Offset = "0xF42824", VA = "0xF42824")]
		public void Release(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x60007FF")]
		[Address(RVA = "0xF428AC", Offset = "0xF428AC", VA = "0xF428AC")]
		public GrabbableExtraEvents()
		{
		}
	}
	[Token(Token = "0x2000161")]
	[HelpURL("https://earnestrobot.notion.site/Custom-Poses-868c1fa0590542a0b5b7937b5feb6b0d")]
	public class GrabbablePose : MonoBehaviour
	{
		[Token(Token = "0x40007F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AutoHeader("Grabbable Pose", 0, 0)]
		public bool ignoreMe;

		[Token(Token = "0x40007F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Purely for organizational purposes in the editor")]
		public string poseName;

		[Token(Token = "0x40007F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("This value must match the pose index of the a hand in order for the pose to work")]
		public int poseIndex;

		[Token(Token = "0x40007FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[HideInInspector]
		public bool showEditorTools;

		[Token(Token = "0x40007FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Scriptable options NOT REQUIRED -> Create scriptable throught [Auto Hand/Custom Pose]")]
		[HideInInspector]
		public HandPoseScriptable poseScriptable;

		[Token(Token = "0x40007FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Used to pose for the grabbable")]
		[HideInInspector]
		public Hand editorHand;

		[Token(Token = "0x40007FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public HandPoseData rightPose;

		[Token(Token = "0x40007FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public bool rightPoseSet;

		[Token(Token = "0x40007FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideInInspector]
		public HandPoseData leftPose;

		[Token(Token = "0x4000800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		public bool leftPoseSet;

		[Token(Token = "0x6000800")]
		[Address(RVA = "0xF428B4", Offset = "0xF428B4", VA = "0xF428B4", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000801")]
		[Address(RVA = "0xF4294C", Offset = "0xF4294C", VA = "0xF4294C")]
		public bool CanSetPose(Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6000802")]
		[Address(RVA = "0xF42994", Offset = "0xF42994", VA = "0xF42994", Slot = "5")]
		public virtual HandPoseData GetHandPoseData(Hand hand)
		{
			return default(HandPoseData);
		}

		[Token(Token = "0x6000803")]
		[Address(RVA = "0xF42A5C", Offset = "0xF42A5C", VA = "0xF42A5C", Slot = "6")]
		public virtual void SetHandPose(Hand hand)
		{
		}

		[Token(Token = "0x6000804")]
		[Address(RVA = "0xF42ADC", Offset = "0xF42ADC", VA = "0xF42ADC")]
		public HandPoseData GetNewPoseData(Hand hand)
		{
			return default(HandPoseData);
		}

		[Token(Token = "0x6000805")]
		[Address(RVA = "0xF42F94", Offset = "0xF42F94", VA = "0xF42F94")]
		public bool HasPose(bool left)
		{
			return default(bool);
		}

		[Token(Token = "0x6000806")]
		[Address(RVA = "0xF43048", Offset = "0xF43048", VA = "0xF43048")]
		public GrabbablePose()
		{
		}
	}
	[Token(Token = "0x2000163")]
	[HelpURL("https://earnestrobot.notion.site/Custom-Poses-868c1fa0590542a0b5b7937b5feb6b0d")]
	public class GrabbablePoseAdvanced : GrabbablePose
	{
		[Token(Token = "0x4000803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("Usually this can be left empty, used to create a different center point if the objects transform isn't ceneterd for the prefered rotation/movement axis")]
		public Transform centerObject;

		[Token(Token = "0x4000804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Space]
		[Tooltip("You want this set so the disc gizmo is around the axis you want the hand to rotate, or that the line is straight through the axis you want to move")]
		public Vector3 up;

		[Token(Token = "0x4000805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[Tooltip("Whether or not to automatically allow for the opposite direction pose to be automatically applied (I.E. Should I be able to grab my hammer only with the head facing up, or in both directions?)")]
		[Space]
		public bool useInvertPose;

		[Token(Token = "0x4000806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("The minimum angle rotation around the included directions")]
		[Space]
		public int minAngle;

		[Token(Token = "0x4000807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[Tooltip("The maximum angle rotation around the included directions")]
		public int maxAngle;

		[Token(Token = "0x4000808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Space]
		[Tooltip("The minimum distance allowed from the saved posed along the included directions")]
		public float maxRange;

		[Token(Token = "0x4000809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[Tooltip("The maximum distance allowed from the saved posed along the included directions")]
		public float minRange;

		[Token(Token = "0x400080A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Header("Requires Gizmos Enabled")]
		[Tooltip("Helps test pose by setting the angle of the editor hand, REQUIRES GIZMOS ENABLED")]
		public int testAngle;

		[Token(Token = "0x400080B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[Tooltip("Helps test pose by setting the range position of the editor hand, REQUIRES GIZMOS ENABLED")]
		public float testRange;

		[Token(Token = "0x400080C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private int lastAngle;

		[Token(Token = "0x400080D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private float lastRange;

		[Token(Token = "0x400080E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Vector3 pregrabPos;

		[Token(Token = "0x400080F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private Quaternion pregrabRot;

		[Token(Token = "0x4000810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Transform tempContainer;

		[Token(Token = "0x4000811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Transform handMatch;

		[Token(Token = "0x4000812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Transform getTransform;

		[Token(Token = "0x6000809")]
		[Address(RVA = "0xF43228", Offset = "0xF43228", VA = "0xF43228", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x600080A")]
		[Address(RVA = "0xF4325C", Offset = "0xF4325C", VA = "0xF4325C", Slot = "5")]
		public override HandPoseData GetHandPoseData(Hand hand)
		{
			return default(HandPoseData);
		}

		[Token(Token = "0x600080B")]
		[Address(RVA = "0xF4362C", Offset = "0xF4362C", VA = "0xF4362C")]
		public Quaternion GetClosestRotation(Hand hand, Vector3 up, bool addInverse)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600080C")]
		[Address(RVA = "0xF440A0", Offset = "0xF440A0", VA = "0xF440A0")]
		public Vector3 GetClosestPosition(Vector3 up)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600080D")]
		[Address(RVA = "0xF44484", Offset = "0xF44484", VA = "0xF44484")]
		public HandPoseData GetHandPoseData(Hand hand, int angle, float range)
		{
			return default(HandPoseData);
		}

		[Token(Token = "0x600080E")]
		[Address(RVA = "0xF435AC", Offset = "0xF435AC", VA = "0xF435AC")]
		private Transform GetTransform()
		{
			return null;
		}

		[Token(Token = "0x600080F")]
		[Address(RVA = "0xF447D4", Offset = "0xF447D4", VA = "0xF447D4")]
		public GrabbablePoseAdvanced()
		{
		}
	}
	[Token(Token = "0x2000164")]
	public class GrabbablePoseCombiner : MonoBehaviour
	{
		[Token(Token = "0x4000813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float positionWeight;

		[Token(Token = "0x4000814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float rotationWeight;

		[Token(Token = "0x4000815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GrabbablePose[] poses;

		[Token(Token = "0x4000816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HandPoseData pose;

		[Token(Token = "0x6000810")]
		[Address(RVA = "0xF44840", Offset = "0xF44840", VA = "0xF44840")]
		public void Start()
		{
		}

		[Token(Token = "0x6000811")]
		[Address(RVA = "0xF44898", Offset = "0xF44898", VA = "0xF44898")]
		public bool CanSetPose(Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6000812")]
		[Address(RVA = "0xF4490C", Offset = "0xF4490C", VA = "0xF4490C")]
		public GrabbablePose GetClosestPose(Hand hand, Grabbable grab)
		{
			return null;
		}

		[Token(Token = "0x6000813")]
		[Address(RVA = "0xF44EB0", Offset = "0xF44EB0", VA = "0xF44EB0")]
		public GrabbablePoseCombiner()
		{
		}
	}
	[Token(Token = "0x2000165")]
	[RequireComponent(typeof(Rigidbody), typeof(Grabbable))]
	public class GrabbableThrowEvent : MonoBehaviour
	{
		[Token(Token = "0x2000166")]
		[CompilerGenerated]
		private sealed class <ResetThrown>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400081F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000820")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000821")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GrabbableThrowEvent <>4__this;

			[Token(Token = "0x170000E6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600081F")]
				[Address(RVA = "0xF45534", Offset = "0xF45534", VA = "0xF45534", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000E7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000821")]
				[Address(RVA = "0xF4557C", Offset = "0xF4557C", VA = "0xF4557C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600081C")]
			[Address(RVA = "0xF45264", Offset = "0xF45264", VA = "0xF45264")]
			[DebuggerHidden]
			public <ResetThrown>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x600081D")]
			[Address(RVA = "0xF45468", Offset = "0xF45468", VA = "0xF45468", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600081E")]
			[Address(RVA = "0xF4546C", Offset = "0xF4546C", VA = "0xF4546C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000820")]
			[Address(RVA = "0xF4553C", Offset = "0xF4553C", VA = "0xF4553C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The velocity magnitude required on collision to cause the break event")]
		public float breakVelocity;

		[Token(Token = "0x4000818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The layers that will cause this grabbale to break")]
		public LayerMask collisionLayers;

		[Token(Token = "0x4000819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent OnBreak;

		[Token(Token = "0x400081A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Rigidbody rb;

		[Token(Token = "0x400081B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Grabbable grab;

		[Token(Token = "0x400081C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool thrown;

		[Token(Token = "0x400081D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Coroutine resetThrowing;

		[Token(Token = "0x400081E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float throwTime;

		[Token(Token = "0x6000814")]
		[Address(RVA = "0xF44EC0", Offset = "0xF44EC0", VA = "0xF44EC0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000815")]
		[Address(RVA = "0xF44F50", Offset = "0xF44F50", VA = "0xF44F50")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000816")]
		[Address(RVA = "0xF4502C", Offset = "0xF4502C", VA = "0xF4502C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000817")]
		[Address(RVA = "0xF45108", Offset = "0xF45108", VA = "0xF45108")]
		private void OnReleased(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000818")]
		[Address(RVA = "0xF451F0", Offset = "0xF451F0", VA = "0xF451F0")]
		[IteratorStateMachine(typeof(<ResetThrown>d__12))]
		private IEnumerator ResetThrown()
		{
			return null;
		}

		[Token(Token = "0x6000819")]
		[Address(RVA = "0xF4528C", Offset = "0xF4528C", VA = "0xF4528C")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x600081A")]
		[Address(RVA = "0xF45414", Offset = "0xF45414", VA = "0xF45414")]
		private void Break()
		{
		}

		[Token(Token = "0x600081B")]
		[Address(RVA = "0xF45430", Offset = "0xF45430", VA = "0xF45430")]
		public GrabbableThrowEvent()
		{
		}
	}
	[Token(Token = "0x2000167")]
	[RequireComponent(typeof(Grabbable))]
	public class GrabLock : MonoBehaviour
	{
		[Token(Token = "0x4000822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Use this script to prevent grabbable release")]
		[Header("Hand.Released() must be called elsewhere")]
		public UnityEvent OnGrabPressed;

		[Token(Token = "0x6000822")]
		[Address(RVA = "0xF45584", Offset = "0xF45584", VA = "0xF45584")]
		public GrabLock()
		{
		}
	}
	[Token(Token = "0x2000168")]
	public delegate void PlacePointEvent(PlacePoint point, Grabbable grabbable);
	[Token(Token = "0x2000169")]
	[HelpURL("https://earnestrobot.notion.site/Place-Points-e6361a414928450dbb53d76fd653cf9a")]
	[RequireComponent(typeof(SphereCollider))]
	public class PlacePoint : MonoBehaviour
	{
		[Token(Token = "0x200016A")]
		[CompilerGenerated]
		private sealed class <HighlighSafetyCheck>d__44 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000845")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000846")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000847")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlacePoint <>4__this;

			[Token(Token = "0x170000EB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000842")]
				[Address(RVA = "0xF46D68", Offset = "0xF46D68", VA = "0xF46D68", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000EC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000844")]
				[Address(RVA = "0xF46DB0", Offset = "0xF46DB0", VA = "0xF46DB0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600083F")]
			[Address(RVA = "0xF458D8", Offset = "0xF458D8", VA = "0xF458D8")]
			[DebuggerHidden]
			public <HighlighSafetyCheck>d__44(int <>1__state)
			{
			}

			[Token(Token = "0x6000840")]
			[Address(RVA = "0xF46C3C", Offset = "0xF46C3C", VA = "0xF46C3C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000841")]
			[Address(RVA = "0xF46C40", Offset = "0xF46C40", VA = "0xF46C40", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000843")]
			[Address(RVA = "0xF46D70", Offset = "0xF46D70", VA = "0xF46D70", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AutoHeader("Place Point", 0, 0)]
		public bool ignoreMe;

		[Token(Token = "0x4000824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If used, the place point will only accept this grabbable as a target")]
		public Grabbable matchTarget;

		[Token(Token = "0x4000825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Will allow placement for any grabbable with a name containing this array of strings, leave blank for any grabbable allowed")]
		public string[] placeNames;

		[Token(Token = "0x4000826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The radius of the place point")]
		public float placeRadius;

		[Token(Token = "0x4000827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("This will make the point place the object as soon as it enters the radius, instead of on release")]
		public bool forcePlace;

		[Token(Token = "0x4000828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		[Tooltip("Whether or not the grabbable should be disabled on placement")]
		public bool disableGrabOnPlace;

		[Token(Token = "0x4000829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		[AutoToggleHeader("Use Kinematic", 0, 0)]
		[Tooltip("Makes the object being placedObject kinematic")]
		public bool makePlacedKinematic;

		[Token(Token = "0x400082A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Space]
		[HideIf("makePlacedKinematic")]
		[Tooltip("The rigidbody to attach the placed grabbable to - leave empty means no joint")]
		public Rigidbody placedJointLink;

		[Token(Token = "0x400082B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[FormerlySerializedAs("placedJointBreakForce")]
		[HideIf("makePlacedKinematic")]
		public float jointBreakForce;

		[Token(Token = "0x400082C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AutoToggleHeader("Show Advanced", 0, 0)]
		public bool showAdvanced;

		[Token(Token = "0x400082D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Snaps an object to the point at start, leave empty for no target")]
		[ShowIf("showAdvanced")]
		public Grabbable startPlaced;

		[Token(Token = "0x400082E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ShowIf("showAdvanced")]
		[Tooltip("The object will snap to this point instead of the place point on place")]
		public Transform placedOffset;

		[Token(Token = "0x400082F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[ShowIf("showAdvanced")]
		[Tooltip("This will make the point place the object as soon as it enters the radius, instead of on release")]
		public bool parentOnPlace;

		[Token(Token = "0x4000830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		[ShowIf("showAdvanced")]
		[Tooltip("Whether or not to only allow placement of an object while it's being held (or released)")]
		public bool heldPlaceOnly;

		[Token(Token = "0x4000831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Will prevent placement for any name containing this array of strings")]
		[ShowIf("showAdvanced")]
		public string[] blacklistNames;

		[Token(Token = "0x4000832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AutoToggleHeader("Show Events", 0, 0)]
		public bool showEvents;

		[Token(Token = "0x4000833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ShowIf("showEvents")]
		public UnityEvent OnPlace;

		[Token(Token = "0x4000834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[ShowIf("showEvents")]
		public UnityEvent OnRemove;

		[Token(Token = "0x4000835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[ShowIf("showEvents")]
		public UnityEvent OnHighlight;

		[Token(Token = "0x4000836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[ShowIf("showEvents")]
		public UnityEvent OnStopHighlight;

		[Token(Token = "0x4000837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public PlacePointEvent OnPlaceEvent;

		[Token(Token = "0x4000838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public PlacePointEvent OnRemoveEvent;

		[Token(Token = "0x4000839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public PlacePointEvent OnHighlightEvent;

		[Token(Token = "0x400083A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public PlacePointEvent OnStopHighlightEvent;

		[Token(Token = "0x400083E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected FixedJoint joint;

		[Token(Token = "0x400083F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected float removalDistance;

		[Token(Token = "0x4000840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		protected Vector3 placePosition;

		[Token(Token = "0x4000841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected SphereCollider col;

		[Token(Token = "0x4000842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected Transform originParent;

		[Token(Token = "0x4000843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected bool placingFrame;

		[Token(Token = "0x4000844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		protected CollisionDetectionMode placedObjDetectionMode;

		[Token(Token = "0x170000E8")]
		public Grabbable highlightingObj
		{
			[Token(Token = "0x6000827")]
			[Address(RVA = "0xF45714", Offset = "0xF45714", VA = "0xF45714")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000828")]
			[Address(RVA = "0xF4571C", Offset = "0xF4571C", VA = "0xF4571C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170000E9")]
		public Grabbable placedObject
		{
			[Token(Token = "0x6000829")]
			[Address(RVA = "0xF45724", Offset = "0xF45724", VA = "0xF45724")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600082A")]
			[Address(RVA = "0xF4572C", Offset = "0xF4572C", VA = "0xF4572C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170000EA")]
		public Grabbable lastPlacedObject
		{
			[Token(Token = "0x600082B")]
			[Address(RVA = "0xF45734", Offset = "0xF45734", VA = "0xF45734")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600082C")]
			[Address(RVA = "0xF4573C", Offset = "0xF4573C", VA = "0xF4573C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x600082D")]
		[Address(RVA = "0xF45744", Offset = "0xF45744", VA = "0xF45744", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x600082E")]
		[Address(RVA = "0xF45864", Offset = "0xF45864", VA = "0xF45864")]
		[IteratorStateMachine(typeof(<HighlighSafetyCheck>d__44))]
		private IEnumerator HighlighSafetyCheck()
		{
			return null;
		}

		[Token(Token = "0x600082F")]
		[Address(RVA = "0xF45900", Offset = "0xF45900", VA = "0xF45900", Slot = "5")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000830")]
		[Address(RVA = "0xF45904", Offset = "0xF45904", VA = "0xF45904", Slot = "6")]
		public virtual bool CanPlace(Grabbable placeObj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000831")]
		[Address(RVA = "0xF45AE4", Offset = "0xF45AE4", VA = "0xF45AE4", Slot = "7")]
		public virtual void Place(Grabbable placeObj)
		{
		}

		[Token(Token = "0x6000832")]
		[Address(RVA = "0xF460AC", Offset = "0xF460AC", VA = "0xF460AC")]
		public void Remove()
		{
		}

		[Token(Token = "0x6000833")]
		[Address(RVA = "0xF46130", Offset = "0xF46130", VA = "0xF46130", Slot = "8")]
		public virtual void Remove(Grabbable placeObj)
		{
		}

		[Token(Token = "0x6000834")]
		[Address(RVA = "0xF463FC", Offset = "0xF463FC", VA = "0xF463FC", Slot = "9")]
		internal virtual void Highlight(Grabbable from)
		{
		}

		[Token(Token = "0x6000835")]
		[Address(RVA = "0xF4651C", Offset = "0xF4651C", VA = "0xF4651C")]
		private bool IsOverlapping(Grabbable from)
		{
			return default(bool);
		}

		[Token(Token = "0x6000836")]
		[Address(RVA = "0xF46680", Offset = "0xF46680", VA = "0xF46680", Slot = "10")]
		internal virtual void StopHighlight(Grabbable from)
		{
		}

		[Token(Token = "0x6000837")]
		[Address(RVA = "0xF467B8", Offset = "0xF467B8", VA = "0xF467B8", Slot = "11")]
		public virtual void SetStartPlaced()
		{
		}

		[Token(Token = "0x6000838")]
		[Address(RVA = "0xF46854", Offset = "0xF46854", VA = "0xF46854")]
		public Grabbable GetPlacedObject()
		{
			return null;
		}

		[Token(Token = "0x6000839")]
		[Address(RVA = "0xF4685C", Offset = "0xF4685C", VA = "0xF4685C")]
		internal float Distance(Transform from)
		{
			return default(float);
		}

		[Token(Token = "0x600083A")]
		[Address(RVA = "0xF46964", Offset = "0xF46964", VA = "0xF46964", Slot = "12")]
		protected virtual void OnPlacedObjectGrabbed(Hand pHand, Grabbable pGrabbable)
		{
		}

		[Token(Token = "0x600083B")]
		[Address(RVA = "0xF46998", Offset = "0xF46998", VA = "0xF46998", Slot = "13")]
		protected virtual void OnPlacedObjectReleased(Hand pHand, Grabbable pGrabbable)
		{
		}

		[Token(Token = "0x600083C")]
		[Address(RVA = "0xF469B8", Offset = "0xF469B8", VA = "0xF469B8", Slot = "14")]
		protected virtual void OnJointBreak(float breakForce)
		{
		}

		[Token(Token = "0x600083D")]
		[Address(RVA = "0xF46A3C", Offset = "0xF46A3C", VA = "0xF46A3C")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600083E")]
		[Address(RVA = "0xF46C04", Offset = "0xF46C04", VA = "0xF46C04")]
		public PlacePoint()
		{
		}
	}
	[Token(Token = "0x200016B")]
	[RequireComponent(typeof(Rigidbody))]
	[DefaultExecutionOrder(1)]
	public class WeightlessFollower : MonoBehaviour
	{
		[Token(Token = "0x4000848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public Transform follow;

		[Token(Token = "0x4000849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public Transform follow1;

		[Token(Token = "0x400084A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Dictionary<Hand, Transform> heldMoveTo;

		[Token(Token = "0x400084B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public float followPositionStrength;

		[Token(Token = "0x400084C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[HideInInspector]
		public float followRotationStrength;

		[Token(Token = "0x400084D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public float maxVelocity;

		[Token(Token = "0x400084E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public Grabbable grab;

		[Token(Token = "0x400084F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal Rigidbody body;

		[Token(Token = "0x4000850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform moveTo;

		[Token(Token = "0x4000851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float startMass;

		[Token(Token = "0x4000852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float startDrag;

		[Token(Token = "0x4000853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float startAngleDrag;

		[Token(Token = "0x6000845")]
		[Address(RVA = "0xF46DB8", Offset = "0xF46DB8", VA = "0xF46DB8")]
		public void Start()
		{
		}

		[Token(Token = "0x6000846")]
		[Address(RVA = "0xF46EA8", Offset = "0xF46EA8", VA = "0xF46EA8", Slot = "4")]
		public virtual void Set(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000847")]
		[Address(RVA = "0xF47500", Offset = "0xF47500", VA = "0xF47500", Slot = "5")]
		public virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000848")]
		[Address(RVA = "0xF476F8", Offset = "0xF476F8", VA = "0xF476F8", Slot = "6")]
		protected virtual void MoveTo()
		{
		}

		[Token(Token = "0x6000849")]
		[Address(RVA = "0xF47BF0", Offset = "0xF47BF0", VA = "0xF47BF0", Slot = "7")]
		protected virtual void TorqueTo()
		{
		}

		[Token(Token = "0x600084A")]
		[Address(RVA = "0xF48044", Offset = "0xF48044", VA = "0xF48044")]
		public void RemoveFollow(Hand hand, Transform follow)
		{
		}

		[Token(Token = "0x600084B")]
		[Address(RVA = "0xF482C4", Offset = "0xF482C4", VA = "0xF482C4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600084C")]
		[Address(RVA = "0xF484C4", Offset = "0xF484C4", VA = "0xF484C4")]
		public WeightlessFollower()
		{
		}
	}
	[Token(Token = "0x200016C")]
	[HelpURL("https://earnestrobot.notion.site/Fingers-63ae83cda0b14a35b5ae15beeb51dc03")]
	public class Finger : MonoBehaviour
	{
		[Token(Token = "0x4000854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Tips")]
		[Tooltip("This transfrom will represent the tip/stopper of the finger")]
		public Transform tip;

		[Token(Token = "0x4000855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("This determines the radius of the spherecast check when bending fingers")]
		public float tipRadius;

		[Token(Token = "0x4000856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("This will offset the fingers bend (0 is no bend, 1 is full bend)")]
		[Range(0f, 1f)]
		public float bendOffset;

		[Token(Token = "0x4000857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fingerSmoothSpeed;

		[Token(Token = "0x4000858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[HideInInspector]
		public float secondaryOffset;

		[Token(Token = "0x4000859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float currBendOffset;

		[Token(Token = "0x400085A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float bend;

		[Token(Token = "0x400085B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[HideInInspector]
		private Quaternion[] minGripRotPose;

		[Token(Token = "0x400085C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		[SerializeField]
		private Vector3[] minGripPosPose;

		[Token(Token = "0x400085D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		[SerializeField]
		private Quaternion[] maxGripRotPose;

		[Token(Token = "0x400085E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		[SerializeField]
		private Vector3[] maxGripPosPose;

		[Token(Token = "0x400085F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[HideInInspector]
		private Transform[] fingerJoints;

		[Token(Token = "0x4000860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float lastHitBend;

		[Token(Token = "0x4000861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Collider[] results;

		[Token(Token = "0x600084F")]
		[Address(RVA = "0xF4862C", Offset = "0xF4862C", VA = "0xF4862C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000850")]
		[Address(RVA = "0xF486A8", Offset = "0xF486A8", VA = "0xF486A8")]
		public bool BendFingerUntilHit(int steps, int layermask)
		{
			return default(bool);
		}

		[Token(Token = "0x6000851")]
		[Address(RVA = "0xF48EE4", Offset = "0xF48EE4", VA = "0xF48EE4")]
		public bool UpdateFingerBend(float bend, int layermask)
		{
			return default(bool);
		}

		[Token(Token = "0x6000852")]
		[Address(RVA = "0xF49148", Offset = "0xF49148", VA = "0xF49148")]
		public void UpdateFinger()
		{
		}

		[Token(Token = "0x6000853")]
		[Address(RVA = "0xF492D0", Offset = "0xF492D0", VA = "0xF492D0")]
		public void UpdateFinger(float bend)
		{
		}

		[Token(Token = "0x6000854")]
		[Address(RVA = "0xF4945C", Offset = "0xF4945C", VA = "0xF4945C")]
		public void SetFingerBend(float bend)
		{
		}

		[Token(Token = "0x6000855")]
		[Address(RVA = "0xF48630", Offset = "0xF48630", VA = "0xF48630")]
		private void SlowBend()
		{
		}

		[Token(Token = "0x6000856")]
		[Address(RVA = "0xF48DFC", Offset = "0xF48DFC", VA = "0xF48DFC")]
		[ContextMenu("ResetBend")]
		public void ResetBend()
		{
		}

		[Token(Token = "0x6000857")]
		[Address(RVA = "0xF495E8", Offset = "0xF495E8", VA = "0xF495E8")]
		[ContextMenu("Grip")]
		public void Grip()
		{
		}

		[Token(Token = "0x6000858")]
		[Address(RVA = "0xF496D0", Offset = "0xF496D0", VA = "0xF496D0")]
		public float GetLastHitBend()
		{
			return default(float);
		}

		[Token(Token = "0x6000859")]
		[Address(RVA = "0xF496D8", Offset = "0xF496D8", VA = "0xF496D8")]
		[ContextMenu("Set Open Finger Pose")]
		public void SetMinPose()
		{
		}

		[Token(Token = "0x600085A")]
		[Address(RVA = "0xF49A18", Offset = "0xF49A18", VA = "0xF49A18")]
		[ContextMenu("Set Closed Finger Pose")]
		public void SetMaxPose()
		{
		}

		[Token(Token = "0x600085B")]
		[Address(RVA = "0xF49D58", Offset = "0xF49D58", VA = "0xF49D58")]
		public bool IsMinPoseSaved()
		{
			return default(bool);
		}

		[Token(Token = "0x600085C")]
		[Address(RVA = "0xF49D7C", Offset = "0xF49D7C", VA = "0xF49D7C")]
		public bool IsMaxPoseSaved()
		{
			return default(bool);
		}

		[Token(Token = "0x600085D")]
		[Address(RVA = "0xF49DA0", Offset = "0xF49DA0", VA = "0xF49DA0")]
		public float GetCurrentBend()
		{
			return default(float);
		}

		[Token(Token = "0x600085E")]
		[Address(RVA = "0xF49DAC", Offset = "0xF49DAC", VA = "0xF49DAC")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x600085F")]
		[Address(RVA = "0xF49E60", Offset = "0xF49E60", VA = "0xF49E60")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000860")]
		[Address(RVA = "0xF49FF0", Offset = "0xF49FF0", VA = "0xF49FF0")]
		public Finger()
		{
		}
	}
	[Token(Token = "0x200016D")]
	[HelpURL("https://earnestrobot.notion.site/Hand-967e36c2ab2945b2b0f75cea84624b2f")]
	public class Hand : HandBase
	{
		[Token(Token = "0x2000170")]
		[CompilerGenerated]
		private sealed class <HighlightUpdate>d__121 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400088C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400088D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400088E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Hand <>4__this;

			[Token(Token = "0x400088F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float timestep;

			[Token(Token = "0x170000F0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60008D7")]
				[Address(RVA = "0xF52C40", Offset = "0xF52C40", VA = "0xF52C40", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60008D9")]
				[Address(RVA = "0xF52C88", Offset = "0xF52C88", VA = "0xF52C88", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60008D4")]
			[Address(RVA = "0xF51670", Offset = "0xF51670", VA = "0xF51670")]
			[DebuggerHidden]
			public <HighlightUpdate>d__121(int <>1__state)
			{
			}

			[Token(Token = "0x60008D5")]
			[Address(RVA = "0xF52B28", Offset = "0xF52B28", VA = "0xF52B28", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60008D6")]
			[Address(RVA = "0xF52B2C", Offset = "0xF52B2C", VA = "0xF52B2C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60008D8")]
			[Address(RVA = "0xF52C48", Offset = "0xF52C48", VA = "0xF52C48", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x2000171")]
		[CompilerGenerated]
		private struct <>c__DisplayClass122_0
		{
			[Token(Token = "0x4000890")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Hand <>4__this;

			[Token(Token = "0x4000891")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Grabbable startHoldingObj;
		}

		[Token(Token = "0x2000172")]
		[CompilerGenerated]
		private sealed class <GrabObject>d__122 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000892")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000893")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000894")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Hand <>4__this;

			[Token(Token = "0x4000895")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Grabbable grab;

			[Token(Token = "0x4000896")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public GrabType grabType;

			[Token(Token = "0x4000897")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private <>c__DisplayClass122_0 <>8__1;

			[Token(Token = "0x4000898")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public RaycastHit hit;

			[Token(Token = "0x4000899")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			private bool <instantGrab>5__2;

			[Token(Token = "0x400089A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			private HandPoseData <startGrabPose>5__3;

			[Token(Token = "0x400089B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private Vector3 <startGrabbablePosition>5__4;

			[Token(Token = "0x400089C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			private Quaternion <startGrabbableRotation>5__5;

			[Token(Token = "0x400089D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			private Transform <grabTarget>5__6;

			[Token(Token = "0x400089E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			private HandPoseData <postGrabPose>5__7;

			[Token(Token = "0x400089F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
			private float <adjustedGrabTime>5__8;

			[Token(Token = "0x40008A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
			private float <i>5__9;

			[Token(Token = "0x40008A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
			private bool <useGravity>5__10;

			[Token(Token = "0x170000F2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60008DD")]
				[Address(RVA = "0xF5483C", Offset = "0xF5483C", VA = "0xF5483C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60008DF")]
				[Address(RVA = "0xF54884", Offset = "0xF54884", VA = "0xF54884", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60008DA")]
			[Address(RVA = "0xF51698", Offset = "0xF51698", VA = "0xF51698")]
			[DebuggerHidden]
			public <GrabObject>d__122(int <>1__state)
			{
			}

			[Token(Token = "0x60008DB")]
			[Address(RVA = "0xF52C90", Offset = "0xF52C90", VA = "0xF52C90", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60008DC")]
			[Address(RVA = "0xF52C94", Offset = "0xF52C94", VA = "0xF52C94", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60008DE")]
			[Address(RVA = "0xF54844", Offset = "0xF54844", VA = "0xF54844", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000173")]
		[CompilerGenerated]
		private sealed class <LerpHandPose>d__124 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40008A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40008A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40008A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Hand <>4__this;

			[Token(Token = "0x40008A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public HandPoseData fromPose;

			[Token(Token = "0x40008A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public HandPoseData toPose;

			[Token(Token = "0x40008A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			public float totalTime;

			[Token(Token = "0x40008A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			private float <timePassed>5__2;

			[Token(Token = "0x170000F4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60008E3")]
				[Address(RVA = "0xF54ACC", Offset = "0xF54ACC", VA = "0xF54ACC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60008E5")]
				[Address(RVA = "0xF54B14", Offset = "0xF54B14", VA = "0xF54B14", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60008E0")]
			[Address(RVA = "0xF517EC", Offset = "0xF517EC", VA = "0xF517EC")]
			[DebuggerHidden]
			public <LerpHandPose>d__124(int <>1__state)
			{
			}

			[Token(Token = "0x60008E1")]
			[Address(RVA = "0xF5488C", Offset = "0xF5488C", VA = "0xF5488C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60008E2")]
			[Address(RVA = "0xF54890", Offset = "0xF54890", VA = "0xF54890", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60008E4")]
			[Address(RVA = "0xF54AD4", Offset = "0xF54AD4", VA = "0xF54AD4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		[AutoToggleHeader("Enable Highlight", 0, 0, tooltip = "Raycasting for grabbables to highlight is expensive, you can disable it here if you aren't using it")]
		public bool usingHighlight;

		[Token(Token = "0x4000863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
		[EnableIf("usingHighlight")]
		[Tooltip("The layers to highlight and use look assist on --- Nothing will default on start")]
		public LayerMask highlightLayers;

		[Token(Token = "0x4000864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		[EnableIf("usingHighlight")]
		[Tooltip("Leave empty for none - used as a default option for all grabbables with empty highlight material")]
		public Material defaultHighlight;

		[Token(Token = "0x4000865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		[AutoToggleHeader("Show Advanced", 0, 0)]
		public bool showAdvanced;

		[Token(Token = "0x4000866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		[ShowIf("showAdvanced")]
		[Tooltip("Whether the hand should go to the object and come back on grab, or the object to float to the hand on grab. Will default to HandToGrabbable for objects that have \"parentOnGrab\" disabled")]
		public GrabType grabType;

		[Token(Token = "0x4000867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		[ShowIf("showAdvanced")]
		[Min(0f)]
		[Tooltip("The animation curve based on the grab time 0-1")]
		public AnimationCurve grabCurve;

		[Token(Token = "0x4000868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		[Tooltip("Whether or not the hands return on grab should only move when the controller follow moves")]
		[ShowIf("showAdvanced")]
		public bool useSmoothReturn;

		[Token(Token = "0x4000869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
		[Tooltip("The hand with return X:1 based on controller movement")]
		public float smoothReturnSpeed;

		[Token(Token = "0x400086A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		[ShowIf("showAdvanced")]
		[Tooltip("This is used in conjunction with custom poses. For a custom pose to work it must has the same PoseIndex as the hand. Used for when your game has multiple hands")]
		public int poseIndex;

		[Token(Token = "0x400086B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
		[AutoLine(0, 0)]
		public bool ignoreMe1;

		[Token(Token = "0x400086C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string[] grabbableLayers;

		[Token(Token = "0x400086D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string grabbableLayerNameDefault;

		[Token(Token = "0x400086E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string grabbingLayerName;

		[Token(Token = "0x400086F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static string rightHandLayerName;

		[Token(Token = "0x4000870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static string leftHandLayerName;

		[Token(Token = "0x4000882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		private List<HandTriggerAreaEvents> triggerEventAreas;

		[Token(Token = "0x4000883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		private Coroutine tryGrab;

		[Token(Token = "0x4000884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		private Coroutine highlightRoutine;

		[Token(Token = "0x4000885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		private Coroutine _grabRoutine;

		[Token(Token = "0x170000ED")]
		private Coroutine grabRoutine
		{
			[Token(Token = "0x600088A")]
			[Address(RVA = "0xF4C718", Offset = "0xF4C718", VA = "0xF4C718")]
			get
			{
				return null;
			}
			[Token(Token = "0x600088B")]
			[Address(RVA = "0xF4C720", Offset = "0xF4C720", VA = "0xF4C720")]
			set
			{
			}
		}

		[Token(Token = "0x14000015")]
		public event HandGrabEvent OnTriggerGrab
		{
			[Token(Token = "0x6000868")]
			[Address(RVA = "0xF4B1D8", Offset = "0xF4B1D8", VA = "0xF4B1D8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000869")]
			[Address(RVA = "0xF4B278", Offset = "0xF4B278", VA = "0xF4B278")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000016")]
		public event HandGrabEvent OnBeforeGrabbed
		{
			[Token(Token = "0x600086A")]
			[Address(RVA = "0xF4B318", Offset = "0xF4B318", VA = "0xF4B318")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600086B")]
			[Address(RVA = "0xF4B3B8", Offset = "0xF4B3B8", VA = "0xF4B3B8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000017")]
		public event HandGrabEvent OnGrabbed
		{
			[Token(Token = "0x600086C")]
			[Address(RVA = "0xF4B458", Offset = "0xF4B458", VA = "0xF4B458")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600086D")]
			[Address(RVA = "0xF4B4F8", Offset = "0xF4B4F8", VA = "0xF4B4F8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000018")]
		public event HandGrabEvent OnTriggerRelease
		{
			[Token(Token = "0x600086E")]
			[Address(RVA = "0xF4B598", Offset = "0xF4B598", VA = "0xF4B598")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600086F")]
			[Address(RVA = "0xF4B638", Offset = "0xF4B638", VA = "0xF4B638")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000019")]
		public event HandGrabEvent OnBeforeReleased
		{
			[Token(Token = "0x6000870")]
			[Address(RVA = "0xF4B6D8", Offset = "0xF4B6D8", VA = "0xF4B6D8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000871")]
			[Address(RVA = "0xF4B778", Offset = "0xF4B778", VA = "0xF4B778")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001A")]
		public event HandGrabEvent OnReleased
		{
			[Token(Token = "0x6000872")]
			[Address(RVA = "0xF4B818", Offset = "0xF4B818", VA = "0xF4B818")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000873")]
			[Address(RVA = "0xF4B8B8", Offset = "0xF4B8B8", VA = "0xF4B8B8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001B")]
		public event HandGrabEvent OnSqueezed
		{
			[Token(Token = "0x6000874")]
			[Address(RVA = "0xF4B958", Offset = "0xF4B958", VA = "0xF4B958")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000875")]
			[Address(RVA = "0xF4B9F8", Offset = "0xF4B9F8", VA = "0xF4B9F8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001C")]
		public event HandGrabEvent OnUnsqueezed
		{
			[Token(Token = "0x6000876")]
			[Address(RVA = "0xF4BA98", Offset = "0xF4BA98", VA = "0xF4BA98")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000877")]
			[Address(RVA = "0xF4BB38", Offset = "0xF4BB38", VA = "0xF4BB38")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001D")]
		public event HandGrabEvent OnHighlight
		{
			[Token(Token = "0x6000878")]
			[Address(RVA = "0xF4BBD8", Offset = "0xF4BBD8", VA = "0xF4BBD8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000879")]
			[Address(RVA = "0xF4BC78", Offset = "0xF4BC78", VA = "0xF4BC78")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001E")]
		public event HandGrabEvent OnStopHighlight
		{
			[Token(Token = "0x600087A")]
			[Address(RVA = "0xF4BD18", Offset = "0xF4BD18", VA = "0xF4BD18")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600087B")]
			[Address(RVA = "0xF4BDB8", Offset = "0xF4BDB8", VA = "0xF4BDB8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001F")]
		public event HandGrabEvent OnForcedRelease
		{
			[Token(Token = "0x600087C")]
			[Address(RVA = "0xF4BE58", Offset = "0xF4BE58", VA = "0xF4BE58")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600087D")]
			[Address(RVA = "0xF4BEF8", Offset = "0xF4BEF8", VA = "0xF4BEF8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000020")]
		public event HandGrabEvent OnGrabJointBreak
		{
			[Token(Token = "0x600087E")]
			[Address(RVA = "0xF4BF98", Offset = "0xF4BF98", VA = "0xF4BF98")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600087F")]
			[Address(RVA = "0xF4C038", Offset = "0xF4C038", VA = "0xF4C038")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000021")]
		public event HandGrabEvent OnHeldConnectionBreak
		{
			[Token(Token = "0x6000880")]
			[Address(RVA = "0xF4C0D8", Offset = "0xF4C0D8", VA = "0xF4C0D8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000881")]
			[Address(RVA = "0xF4C178", Offset = "0xF4C178", VA = "0xF4C178")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000022")]
		public event HandGameObjectEvent OnHandCollisionStart
		{
			[Token(Token = "0x6000882")]
			[Address(RVA = "0xF4C218", Offset = "0xF4C218", VA = "0xF4C218")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000883")]
			[Address(RVA = "0xF4C2B8", Offset = "0xF4C2B8", VA = "0xF4C2B8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000023")]
		public event HandGameObjectEvent OnHandCollisionStop
		{
			[Token(Token = "0x6000884")]
			[Address(RVA = "0xF4C358", Offset = "0xF4C358", VA = "0xF4C358")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000885")]
			[Address(RVA = "0xF4C3F8", Offset = "0xF4C3F8", VA = "0xF4C3F8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000024")]
		public event HandGameObjectEvent OnHandTriggerStart
		{
			[Token(Token = "0x6000886")]
			[Address(RVA = "0xF4C498", Offset = "0xF4C498", VA = "0xF4C498")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000887")]
			[Address(RVA = "0xF4C538", Offset = "0xF4C538", VA = "0xF4C538")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000025")]
		public event HandGameObjectEvent OnHandTriggerStop
		{
			[Token(Token = "0x6000888")]
			[Address(RVA = "0xF4C5D8", Offset = "0xF4C5D8", VA = "0xF4C5D8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000889")]
			[Address(RVA = "0xF4C678", Offset = "0xF4C678", VA = "0xF4C678")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600088C")]
		[Address(RVA = "0xF4C880", Offset = "0xF4C880", VA = "0xF4C880", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x600088D")]
		[Address(RVA = "0xF4CDE4", Offset = "0xF4CDE4", VA = "0xF4CDE4", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600088E")]
		[Address(RVA = "0xF4CF90", Offset = "0xF4CF90", VA = "0xF4CF90", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x600088F")]
		[Address(RVA = "0xF4D34C", Offset = "0xF4D34C", VA = "0xF4D34C", Slot = "7")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6000890")]
		[Address(RVA = "0xF4D540", Offset = "0xF4D540", VA = "0xF4D540", Slot = "21")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000891")]
		[Address(RVA = "0xF4D980", Offset = "0xF4D980", VA = "0xF4D980", Slot = "22")]
		public virtual void Grab()
		{
		}

		[Token(Token = "0x6000892")]
		[Address(RVA = "0xF4D994", Offset = "0xF4D994", VA = "0xF4D994", Slot = "23")]
		public virtual void Grab(GrabType grabType)
		{
		}

		[Token(Token = "0x6000893")]
		[Address(RVA = "0xF4DE00", Offset = "0xF4DE00", VA = "0xF4DE00", Slot = "24")]
		public virtual void Grab(RaycastHit hit, Grabbable grab, GrabType grabType = GrabType.InstantGrab)
		{
		}

		[Token(Token = "0x6000894")]
		[Address(RVA = "0xF4E37C", Offset = "0xF4E37C", VA = "0xF4E37C", Slot = "25")]
		public virtual void TryGrab(Grabbable grab)
		{
		}

		[Token(Token = "0x6000895")]
		[Address(RVA = "0xF4E524", Offset = "0xF4E524", VA = "0xF4E524", Slot = "26")]
		public virtual void TryGrab(Grabbable grab, bool imforbackwardscompatability)
		{
		}

		[Token(Token = "0x6000896")]
		[Address(RVA = "0xF4E534", Offset = "0xF4E534", VA = "0xF4E534", Slot = "27")]
		public virtual void Release()
		{
		}

		[Token(Token = "0x6000897")]
		[Address(RVA = "0xF4E7E8", Offset = "0xF4E7E8", VA = "0xF4E7E8", Slot = "28")]
		public virtual void ForceReleaseGrab()
		{
		}

		[Token(Token = "0x6000898")]
		[Address(RVA = "0xF4E894", Offset = "0xF4E894", VA = "0xF4E894", Slot = "29")]
		public virtual void ReleaseGrabLock()
		{
		}

		[Token(Token = "0x6000899")]
		[Address(RVA = "0xF4E8A4", Offset = "0xF4E8A4", VA = "0xF4E8A4", Slot = "30")]
		public virtual void Squeeze()
		{
		}

		[Token(Token = "0x600089A")]
		[Address(RVA = "0xF4EA3C", Offset = "0xF4EA3C", VA = "0xF4EA3C", Slot = "31")]
		public virtual void Unsqueeze()
		{
		}

		[Token(Token = "0x600089B")]
		[Address(RVA = "0xF4EBD0", Offset = "0xF4EBD0", VA = "0xF4EBD0", Slot = "32")]
		public virtual void BreakGrabConnection(bool callEvent = true)
		{
		}

		[Token(Token = "0x600089C")]
		[Address(RVA = "0xF4EE94", Offset = "0xF4EE94", VA = "0xF4EE94", Slot = "33")]
		public virtual void CreateGrabConnection(Grabbable grab, Vector3 handPos, Quaternion handRot, Vector3 grabPos, Quaternion grabRot, bool executeGrabEvents = false)
		{
		}

		[Token(Token = "0x600089D")]
		[Address(RVA = "0xF4F4B4", Offset = "0xF4F4B4", VA = "0xF4F4B4", Slot = "34")]
		public virtual void OnJointBreak(float breakForce)
		{
		}

		[Token(Token = "0x600089E")]
		[Address(RVA = "0xF4F644", Offset = "0xF4F644", VA = "0xF4F644", Slot = "35")]
		protected virtual void UpdateHighlight()
		{
		}

		[Token(Token = "0x600089F")]
		[Address(RVA = "0xF4F9A4", Offset = "0xF4F9A4", VA = "0xF4F9A4")]
		public RaycastHit GetHighlightHit()
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x60008A0")]
		[Address(RVA = "0xF4F9BC", Offset = "0xF4F9BC", VA = "0xF4F9BC")]
		public void AutoPose(RaycastHit hit, Grabbable grabbable)
		{
		}

		[Token(Token = "0x60008A1")]
		[Address(RVA = "0xF50288", Offset = "0xF50288", VA = "0xF50288")]
		public HandPoseData GetHandPose()
		{
			return default(HandPoseData);
		}

		[Token(Token = "0x60008A2")]
		[Address(RVA = "0xF502A8", Offset = "0xF502A8", VA = "0xF502A8")]
		public HandPoseData GetHeldPose()
		{
			return default(HandPoseData);
		}

		[Token(Token = "0x60008A3")]
		[Address(RVA = "0xF50364", Offset = "0xF50364", VA = "0xF50364", Slot = "36")]
		public virtual void SetHeldPose(HandPoseData pose, Grabbable grabbable, bool createJoint = true)
		{
		}

		[Token(Token = "0x60008A4")]
		[Address(RVA = "0xF50734", Offset = "0xF50734", VA = "0xF50734")]
		public void SetHandPose(HandPoseData pose)
		{
		}

		[Token(Token = "0x60008A5")]
		[Address(RVA = "0xF5074C", Offset = "0xF5074C", VA = "0xF5074C")]
		public void SetHandPose(GrabbablePose pose)
		{
		}

		[Token(Token = "0x60008A6")]
		[Address(RVA = "0xF507C4", Offset = "0xF507C4", VA = "0xF507C4")]
		public void UpdatePose(HandPoseData pose, float time)
		{
		}

		[Token(Token = "0x60008A7")]
		[Address(RVA = "0xF508F8", Offset = "0xF508F8", VA = "0xF508F8")]
		public bool GetGrabPose(Transform from, Grabbable grabbable, out GrabbablePose grabPose, out Transform relativeTo)
		{
			return default(bool);
		}

		[Token(Token = "0x60008A8")]
		[Address(RVA = "0xF50AF4", Offset = "0xF50AF4", VA = "0xF50AF4")]
		public Grabbable GetHeldGrabbable()
		{
			return null;
		}

		[Token(Token = "0x60008A9")]
		[Address(RVA = "0xF50AFC", Offset = "0xF50AFC", VA = "0xF50AFC")]
		public Grabbable GetHeld()
		{
			return null;
		}

		[Token(Token = "0x60008AA")]
		[Address(RVA = "0xF50B04", Offset = "0xF50B04", VA = "0xF50B04")]
		public bool IsSqueezing()
		{
			return default(bool);
		}

		[Token(Token = "0x60008AB")]
		[Address(RVA = "0xF4E2FC", Offset = "0xF4E2FC", VA = "0xF4E2FC")]
		public bool CanGrab(Grabbable grab)
		{
			return default(bool);
		}

		[Token(Token = "0x60008AC")]
		[Address(RVA = "0xF50B0C", Offset = "0xF50B0C", VA = "0xF50B0C")]
		public void SetGrip(float grip)
		{
		}

		[Token(Token = "0x60008AD")]
		[Address(RVA = "0xF50B14", Offset = "0xF50B14", VA = "0xF50B14")]
		[ContextMenu("Set Pose - Relax Hand")]
		public void RelaxHand()
		{
		}

		[Token(Token = "0x60008AE")]
		[Address(RVA = "0xF50B7C", Offset = "0xF50B7C", VA = "0xF50B7C")]
		[ContextMenu("Set Pose - Open Hand")]
		public void OpenHand()
		{
		}

		[Token(Token = "0x60008AF")]
		[Address(RVA = "0xF50BE0", Offset = "0xF50BE0", VA = "0xF50BE0")]
		[ContextMenu("Set Pose - Close Hand")]
		public void CloseHand()
		{
		}

		[Token(Token = "0x60008B0")]
		[Address(RVA = "0xF50C50", Offset = "0xF50C50", VA = "0xF50C50")]
		[ContextMenu("Bend Fingers Until Hit")]
		public void ProceduralFingerBend()
		{
		}

		[Token(Token = "0x60008B1")]
		[Address(RVA = "0xF50D78", Offset = "0xF50D78", VA = "0xF50D78")]
		public void ProceduralFingerBend(int layermask)
		{
		}

		[Token(Token = "0x60008B2")]
		[Address(RVA = "0xF50DF0", Offset = "0xF50DF0", VA = "0xF50DF0")]
		public void ProceduralFingerBend(RaycastHit hit)
		{
		}

		[Token(Token = "0x60008B3")]
		[Address(RVA = "0xF50E9C", Offset = "0xF50E9C", VA = "0xF50E9C")]
		public void PlayHapticVibration()
		{
		}

		[Token(Token = "0x60008B4")]
		[Address(RVA = "0xF50F30", Offset = "0xF50F30", VA = "0xF50F30")]
		public void PlayHapticVibration(float duration)
		{
		}

		[Token(Token = "0x60008B5")]
		[Address(RVA = "0xF50EA8", Offset = "0xF50EA8", VA = "0xF50EA8")]
		public void PlayHapticVibration(float duration, float amp = 0.5f)
		{
		}

		[Token(Token = "0x60008B6")]
		[Address(RVA = "0xF50F38", Offset = "0xF50F38", VA = "0xF50F38")]
		[Button("Save Open Pose", EButtonEnableMode.Always)]
		[ContextMenu("SAVE OPEN")]
		public void SaveOpenPose()
		{
		}

		[Token(Token = "0x60008B7")]
		[Address(RVA = "0xF50FF0", Offset = "0xF50FF0", VA = "0xF50FF0")]
		[ContextMenu("SAVE CLOSED")]
		[Button("Save Closed Pose", EButtonEnableMode.Always)]
		public void SaveClosedPose()
		{
		}

		[Token(Token = "0x60008B8")]
		[Address(RVA = "0xF510A8", Offset = "0xF510A8", VA = "0xF510A8", Slot = "37")]
		protected virtual void OnCollisionFirstEnter(GameObject collision)
		{
		}

		[Token(Token = "0x60008B9")]
		[Address(RVA = "0xF51280", Offset = "0xF51280", VA = "0xF51280", Slot = "38")]
		protected virtual void OnCollisionLastExit(GameObject collision)
		{
		}

		[Token(Token = "0x60008BA")]
		[Address(RVA = "0xF514A0", Offset = "0xF514A0", VA = "0xF514A0", Slot = "39")]
		protected virtual void OnTriggerFirstEnter(GameObject other)
		{
		}

		[Token(Token = "0x60008BB")]
		[Address(RVA = "0xF515B0", Offset = "0xF515B0", VA = "0xF515B0", Slot = "40")]
		protected virtual void OnTriggerLastExit(GameObject other)
		{
		}

		[Token(Token = "0x60008BC")]
		[Address(RVA = "0xF4CF0C", Offset = "0xF4CF0C", VA = "0xF4CF0C")]
		[IteratorStateMachine(typeof(<HighlightUpdate>d__121))]
		private IEnumerator HighlightUpdate(float timestep)
		{
			return null;
		}

		[Token(Token = "0x60008BD")]
		[Address(RVA = "0xF4DD40", Offset = "0xF4DD40", VA = "0xF4DD40")]
		[IteratorStateMachine(typeof(<GrabObject>d__122))]
		protected IEnumerator GrabObject(RaycastHit hit, Grabbable grab, GrabType grabType)
		{
			return null;
		}

		[Token(Token = "0x60008BE")]
		[Address(RVA = "0xF516C0", Offset = "0xF516C0", VA = "0xF516C0")]
		protected void CancelPose()
		{
		}

		[Token(Token = "0x60008BF")]
		[Address(RVA = "0xF5170C", Offset = "0xF5170C", VA = "0xF5170C", Slot = "41")]
		[IteratorStateMachine(typeof(<LerpHandPose>d__124))]
		protected virtual IEnumerator LerpHandPose(HandPoseData fromPose, HandPoseData toPose, float totalTime)
		{
			return null;
		}

		[Token(Token = "0x60008C0")]
		[Address(RVA = "0xF51814", Offset = "0xF51814", VA = "0xF51814", Slot = "42")]
		protected virtual void CheckEnterPoseArea(GameObject other)
		{
		}

		[Token(Token = "0x60008C1")]
		[Address(RVA = "0xF51DAC", Offset = "0xF51DAC", VA = "0xF51DAC", Slot = "43")]
		protected virtual void CheckExitPoseArea(GameObject other)
		{
		}

		[Token(Token = "0x60008C2")]
		[Address(RVA = "0xF51BD4", Offset = "0xF51BD4", VA = "0xF51BD4")]
		internal void TryRemoveHandPoseArea(HandPoseArea poseArea)
		{
		}

		[Token(Token = "0x60008C3")]
		[Address(RVA = "0xF51E48", Offset = "0xF51E48", VA = "0xF51E48")]
		private void ClearPoseArea()
		{
		}

		[Token(Token = "0x60008C4")]
		[Address(RVA = "0xF51EFC", Offset = "0xF51EFC", VA = "0xF51EFC", Slot = "44")]
		internal virtual void RemoveHandTriggerArea(HandTriggerAreaEvents handTrigger)
		{
		}

		[Token(Token = "0x60008C5")]
		[Address(RVA = "0xF51F6C", Offset = "0xF51F6C", VA = "0xF51F6C")]
		public Hand()
		{
		}
	}
	[Token(Token = "0x2000174")]
	[RequireComponent(typeof(Hand))]
	[DefaultExecutionOrder(10000)]
	public class HandAdvancedOptions : MonoBehaviour
	{
		[Token(Token = "0x40008A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Meant for things childed under the Hand. These transforms will not be set to the hand layer on start")]
		public List<Collider> ignoreHandCollider;

		[Token(Token = "0x40008AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Hand hand;

		[Token(Token = "0x60008E6")]
		[Address(RVA = "0xF54B1C", Offset = "0xF54B1C", VA = "0xF54B1C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008E7")]
		[Address(RVA = "0xF54B74", Offset = "0xF54B74", VA = "0xF54B74")]
		private void Start()
		{
		}

		[Token(Token = "0x60008E8")]
		[Address(RVA = "0xF54C14", Offset = "0xF54C14", VA = "0xF54C14")]
		public HandAdvancedOptions()
		{
		}
	}
	[Token(Token = "0x2000175")]
	public class HandClippingGuard : MonoBehaviour
	{
		[Token(Token = "0x2000176")]
		[CompilerGenerated]
		private sealed class <Guard>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40008B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40008B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40008B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Hand hand;

			[Token(Token = "0x40008B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public HandClippingGuard <>4__this;

			[Token(Token = "0x170000F6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60008F1")]
				[Address(RVA = "0xF5538C", Offset = "0xF5538C", VA = "0xF5538C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60008F3")]
				[Address(RVA = "0xF553D4", Offset = "0xF553D4", VA = "0xF553D4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60008EE")]
			[Address(RVA = "0xF550B4", Offset = "0xF550B4", VA = "0xF550B4")]
			[DebuggerHidden]
			public <Guard>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x60008EF")]
			[Address(RVA = "0xF550F0", Offset = "0xF550F0", VA = "0xF550F0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60008F0")]
			[Address(RVA = "0xF550F4", Offset = "0xF550F4", VA = "0xF550F4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60008F2")]
			[Address(RVA = "0xF55394", Offset = "0xF55394", VA = "0xF55394", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40008AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hand hand;

		[Token(Token = "0x40008AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("This should be a sphere collider that covers the hand (similar, but seperate from the recommended trigger sphere collider)")]
		public SphereCollider collisionGuard;

		[Token(Token = "0x40008AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform body;

		[Token(Token = "0x40008AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float guardTime;

		[Token(Token = "0x40008AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 grabPoint;

		[Token(Token = "0x40008B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool runProtection;

		[Token(Token = "0x40008B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Coroutine guardRoutine;

		[Token(Token = "0x60008E9")]
		[Address(RVA = "0xF54C9C", Offset = "0xF54C9C", VA = "0xF54C9C")]
		private void Start()
		{
		}

		[Token(Token = "0x60008EA")]
		[Address(RVA = "0xF54EC0", Offset = "0xF54EC0", VA = "0xF54EC0")]
		private void BeforeGrab(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x60008EB")]
		[Address(RVA = "0xF54FE4", Offset = "0xF54FE4", VA = "0xF54FE4")]
		private void OnRelease(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x60008EC")]
		[Address(RVA = "0xF55024", Offset = "0xF55024", VA = "0xF55024")]
		[IteratorStateMachine(typeof(<Guard>d__10))]
		private IEnumerator Guard(Hand hand)
		{
			return null;
		}

		[Token(Token = "0x60008ED")]
		[Address(RVA = "0xF550DC", Offset = "0xF550DC", VA = "0xF550DC")]
		public HandClippingGuard()
		{
		}
	}
	[Token(Token = "0x2000177")]
	[RequireComponent(typeof(Hand))]
	public class HandCollisionHaptics : MonoBehaviour
	{
		[Token(Token = "0x2000178")]
		[CompilerGenerated]
		private sealed class <PlayBuffer>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40008C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40008C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40008C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandCollisionHaptics <>4__this;

			[Token(Token = "0x170000F8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60008FD")]
				[Address(RVA = "0xF559C8", Offset = "0xF559C8", VA = "0xF559C8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60008FF")]
				[Address(RVA = "0xF55A10", Offset = "0xF55A10", VA = "0xF55A10", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60008FA")]
			[Address(RVA = "0xF5580C", Offset = "0xF5580C", VA = "0xF5580C")]
			[DebuggerHidden]
			public <PlayBuffer>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x60008FB")]
			[Address(RVA = "0xF558F4", Offset = "0xF558F4", VA = "0xF558F4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60008FC")]
			[Address(RVA = "0xF558F8", Offset = "0xF558F8", VA = "0xF558F8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60008FE")]
			[Address(RVA = "0xF559D0", Offset = "0xF559D0", VA = "0xF559D0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000179")]
		[CompilerGenerated]
		private sealed class <HapticPlayBuffer>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40008C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40008C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40008C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandCollisionHaptics <>4__this;

			[Token(Token = "0x40008C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float time;

			[Token(Token = "0x170000FA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000903")]
				[Address(RVA = "0xF55AEC", Offset = "0xF55AEC", VA = "0xF55AEC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000FB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000905")]
				[Address(RVA = "0xF55B34", Offset = "0xF55B34", VA = "0xF55B34", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000900")]
			[Address(RVA = "0xF55834", Offset = "0xF55834", VA = "0xF55834")]
			[DebuggerHidden]
			public <HapticPlayBuffer>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6000901")]
			[Address(RVA = "0xF55A18", Offset = "0xF55A18", VA = "0xF55A18", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000902")]
			[Address(RVA = "0xF55A1C", Offset = "0xF55A1C", VA = "0xF55A1C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000904")]
			[Address(RVA = "0xF55AF4", Offset = "0xF55AF4", VA = "0xF55AF4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40008B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The layers that cause the sound to play")]
		public LayerMask collisionTriggers;

		[Token(Token = "0x40008B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float hapticAmp;

		[Token(Token = "0x40008B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float velocityAmp;

		[Token(Token = "0x40008B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float repeatDelay;

		[Token(Token = "0x40008BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maxDuration;

		[Token(Token = "0x40008BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Source to play sound from")]
		public AnimationCurve velocityAmpCurve;

		[Token(Token = "0x40008BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Source to play sound from")]
		public AnimationCurve velocityDurationCurve;

		[Token(Token = "0x40008BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Hand hand;

		[Token(Token = "0x40008BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Rigidbody body;

		[Token(Token = "0x40008BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool canPlay;

		[Token(Token = "0x40008C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Coroutine playRoutine;

		[Token(Token = "0x60008F4")]
		[Address(RVA = "0xF553DC", Offset = "0xF553DC", VA = "0xF553DC")]
		private void Start()
		{
		}

		[Token(Token = "0x60008F5")]
		[Address(RVA = "0xF5550C", Offset = "0xF5550C", VA = "0xF5550C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60008F6")]
		[Address(RVA = "0xF55520", Offset = "0xF55520", VA = "0xF55520")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60008F7")]
		[Address(RVA = "0xF55798", Offset = "0xF55798", VA = "0xF55798")]
		[IteratorStateMachine(typeof(<PlayBuffer>d__14))]
		private IEnumerator PlayBuffer()
		{
			return null;
		}

		[Token(Token = "0x60008F8")]
		[Address(RVA = "0xF55488", Offset = "0xF55488", VA = "0xF55488")]
		[IteratorStateMachine(typeof(<HapticPlayBuffer>d__15))]
		private IEnumerator HapticPlayBuffer(float time)
		{
			return null;
		}

		[Token(Token = "0x60008F9")]
		[Address(RVA = "0xF5585C", Offset = "0xF5585C", VA = "0xF5585C")]
		public HandCollisionHaptics()
		{
		}
	}
	[Token(Token = "0x200017A")]
	public class HandControllerLink : MonoBehaviour
	{
		[Token(Token = "0x40008C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static HandControllerLink handLeft;

		[Token(Token = "0x40008C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static HandControllerLink handRight;

		[Token(Token = "0x40008CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hand hand;

		[Token(Token = "0x6000906")]
		[Address(RVA = "0xF55B3C", Offset = "0xF55B3C", VA = "0xF55B3C", Slot = "4")]
		public virtual void TryHapticImpulse(float duration, float amp, float freq = 10f)
		{
		}

		[Token(Token = "0x6000907")]
		[Address(RVA = "0xF55B40", Offset = "0xF55B40", VA = "0xF55B40")]
		public HandControllerLink()
		{
		}
	}
	[Token(Token = "0x200017B")]
	[DefaultExecutionOrder(2)]
	[HelpURL("https://earnestrobot.notion.site/Distance-Grabbing-19e4e8b14f00428295eca75fca752787")]
	public class HandDistanceGrabber : MonoBehaviour
	{
		[Token(Token = "0x200017C")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass62_0
		{
			[Token(Token = "0x40008F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public HandDistanceGrabber <>4__this;

			[Token(Token = "0x40008F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public DistanceGrabbable grab;

			[Token(Token = "0x40008F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float estimatedRadius;

			[Token(Token = "0x6000925")]
			[Address(RVA = "0xF57EA4", Offset = "0xF57EA4", VA = "0xF57EA4")]
			public <>c__DisplayClass62_0()
			{
			}

			[Token(Token = "0x6000926")]
			[Address(RVA = "0xF57EAC", Offset = "0xF57EAC", VA = "0xF57EAC")]
			internal void <StartCatchAssist>b__0(Hand hand, Grabbable grabbable)
			{
			}

			[Token(Token = "0x6000927")]
			[Address(RVA = "0xF57F48", Offset = "0xF57F48", VA = "0xF57F48")]
			internal void <StartCatchAssist>b__1(Hand hand, Grabbable grabbable)
			{
			}

			[Token(Token = "0x6000929")]
			[Address(RVA = "0xF584EC", Offset = "0xF584EC", VA = "0xF584EC")]
			internal void <StartCatchAssist>b__5(Hand hand, Grabbable grabbable)
			{
			}

			[Token(Token = "0x600092A")]
			[Address(RVA = "0xF58588", Offset = "0xF58588", VA = "0xF58588")]
			internal void <StartCatchAssist>b__6(Hand hand, Grabbable grabbable)
			{
			}
		}

		[Token(Token = "0x200017D")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass62_1
		{
			[Token(Token = "0x40008F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool cancelInstantGrab;

			[Token(Token = "0x600092B")]
			[Address(RVA = "0xF58624", Offset = "0xF58624", VA = "0xF58624")]
			public <>c__DisplayClass62_1()
			{
			}

			[Token(Token = "0x600092C")]
			[Address(RVA = "0xF5862C", Offset = "0xF5862C", VA = "0xF5862C")]
			internal void <StartCatchAssist>b__2(Hand hand, Grabbable grabbable)
			{
			}

			[Token(Token = "0x600092D")]
			[Address(RVA = "0xF58638", Offset = "0xF58638", VA = "0xF58638")]
			internal void <StartCatchAssist>b__4(Hand hand, Grabbable grabbable)
			{
			}
		}

		[Token(Token = "0x200017E")]
		[CompilerGenerated]
		private sealed class <StartCatchAssist>d__62 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40008F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40008F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40008F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandDistanceGrabber <>4__this;

			[Token(Token = "0x40008F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public DistanceGrabbable grab;

			[Token(Token = "0x40008FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float estimatedRadius;

			[Token(Token = "0x40008FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private <>c__DisplayClass62_0 <>8__1;

			[Token(Token = "0x40008FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private <>c__DisplayClass62_1 <>8__2;

			[Token(Token = "0x40008FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float <time>5__2;

			[Token(Token = "0x170000FD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000931")]
				[Address(RVA = "0xF58CEC", Offset = "0xF58CEC", VA = "0xF58CEC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000FE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000933")]
				[Address(RVA = "0xF58D34", Offset = "0xF58D34", VA = "0xF58D34", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600092E")]
			[Address(RVA = "0xF57B8C", Offset = "0xF57B8C", VA = "0xF57B8C")]
			[DebuggerHidden]
			public <StartCatchAssist>d__62(int <>1__state)
			{
			}

			[Token(Token = "0x600092F")]
			[Address(RVA = "0xF58644", Offset = "0xF58644", VA = "0xF58644", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000930")]
			[Address(RVA = "0xF58648", Offset = "0xF58648", VA = "0xF58648", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000932")]
			[Address(RVA = "0xF58CF4", Offset = "0xF58CF4", VA = "0xF58CF4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40008CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Hands")]
		[Tooltip("The primaryHand used to trigger pulling or flicking")]
		public Hand primaryHand;

		[Token(Token = "0x40008CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("This is important for catch assistance")]
		public Hand secondaryHand;

		[Token(Token = "0x40008CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Pointing Options")]
		[Header("Pointer Options")]
		public Transform forwardPointer;

		[Token(Token = "0x40008CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public LineRenderer line;

		[Token(Token = "0x40008CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Space]
		public float maxRange;

		[Token(Token = "0x40008D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Defaults to grabbable on start if none")]
		public LayerMask layers;

		[Token(Token = "0x40008D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Space]
		public Material defaultTargetedMaterial;

		[Token(Token = "0x40008D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The highlight material to use when pulling")]
		public Material defaultSelectedMaterial;

		[Token(Token = "0x40008D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Pull Options")]
		public bool useInstantPull;

		[Token(Token = "0x40008D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		[Tooltip("If false will default to distance pull, set pullGrabDistance to 0 for instant pull on select")]
		public bool useFlickPull;

		[Token(Token = "0x40008D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("The magnitude of your hands angular velocity for \"flick\" to start")]
		[ShowIf("useFlickPull")]
		public float flickThreshold;

		[Token(Token = "0x40008D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideIf("useFlickPull")]
		[Tooltip("The amount you need to move your hand from the select position to trigger the grab")]
		public float pullGrabDistance;

		[Token(Token = "0x40008D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Space]
		[Tooltip("If this is true the object will be grabbed when entering the radius")]
		public bool instantGrabAssist;

		[Token(Token = "0x40008D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The radius around of thrown object")]
		public float catchAssistRadius;

		[Token(Token = "0x40008D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AutoToggleHeader("Show Events", 0, 0)]
		public bool showEvents;

		[Token(Token = "0x40008DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[ShowIf("showEvents")]
		public UnityHandGrabEvent OnPull;

		[Token(Token = "0x40008DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ShowIf("showEvents")]
		public UnityHandEvent StartPoint;

		[Token(Token = "0x40008DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[ShowIf("showEvents")]
		public UnityHandEvent StopPoint;

		[Token(Token = "0x40008DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Targeting is started when object is highlighted")]
		[ShowIf("showEvents")]
		public UnityHandGrabEvent StartTarget;

		[Token(Token = "0x40008DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[ShowIf("showEvents")]
		public UnityHandGrabEvent StopTarget;

		[Token(Token = "0x40008DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[ShowIf("showEvents")]
		[Tooltip("Selecting is started when grab is selected on highlight object")]
		public UnityHandGrabEvent StartSelect;

		[Token(Token = "0x40008E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[ShowIf("showEvents")]
		public UnityHandGrabEvent StopSelect;

		[Token(Token = "0x40008E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<CatchAssistData> catchAssisted;

		[Token(Token = "0x40008E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private DistanceGrabbable targetingDistanceGrabbable;

		[Token(Token = "0x40008E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private DistanceGrabbable selectingDistanceGrabbable;

		[Token(Token = "0x40008E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float catchAssistSeconds;

		[Token(Token = "0x40008E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private bool pointing;

		[Token(Token = "0x40008E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBD")]
		private bool pulling;

		[Token(Token = "0x40008E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Vector3 startPullPosition;

		[Token(Token = "0x40008E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private RaycastHit hit;

		[Token(Token = "0x40008E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Quaternion lastRotation;

		[Token(Token = "0x40008EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private RaycastHit selectionHit;

		[Token(Token = "0x40008EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private float selectedEstimatedRadius;

		[Token(Token = "0x40008EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private float startLookAssist;

		[Token(Token = "0x40008ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private bool lastInstantPull;

		[Token(Token = "0x40008EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private GameObject _hitPoint;

		[Token(Token = "0x40008EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Coroutine catchAssistRoutine;

		[Token(Token = "0x40008F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private DistanceGrabbable catchAsistGrabbable;

		[Token(Token = "0x40008F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private CatchAssistData catchAssistData;

		[Token(Token = "0x170000FC")]
		private GameObject hitPoint
		{
			[Token(Token = "0x6000908")]
			[Address(RVA = "0xF55B48", Offset = "0xF55B48", VA = "0xF55B48")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000909")]
		[Address(RVA = "0xF55C44", Offset = "0xF55C44", VA = "0xF55C44")]
		private void Start()
		{
		}

		[Token(Token = "0x600090A")]
		[Address(RVA = "0xF55DA8", Offset = "0xF55DA8", VA = "0xF55DA8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600090B")]
		[Address(RVA = "0xF55EEC", Offset = "0xF55EEC", VA = "0xF55EEC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600090C")]
		[Address(RVA = "0xF5618C", Offset = "0xF5618C", VA = "0xF5618C")]
		private void Update()
		{
		}

		[Token(Token = "0x600090D")]
		[Address(RVA = "0xF5659C", Offset = "0xF5659C", VA = "0xF5659C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600090E")]
		[Address(RVA = "0xF55D9C", Offset = "0xF55D9C", VA = "0xF55D9C")]
		public void SetInstantPull()
		{
		}

		[Token(Token = "0x600090F")]
		[Address(RVA = "0xF56604", Offset = "0xF56604", VA = "0xF56604")]
		public void SetPull(float distance)
		{
		}

		[Token(Token = "0x6000910")]
		[Address(RVA = "0xF56610", Offset = "0xF56610", VA = "0xF56610")]
		public void SetFlickPull(float threshold)
		{
		}

		[Token(Token = "0x6000911")]
		[Address(RVA = "0xF561C0", Offset = "0xF561C0", VA = "0xF561C0")]
		private void CheckDistanceGrabbable()
		{
		}

		[Token(Token = "0x6000912")]
		[Address(RVA = "0xF569B8", Offset = "0xF569B8", VA = "0xF569B8", Slot = "4")]
		public virtual void StartPointing()
		{
		}

		[Token(Token = "0x6000913")]
		[Address(RVA = "0xF56A1C", Offset = "0xF56A1C", VA = "0xF56A1C", Slot = "5")]
		public virtual void StopPointing()
		{
		}

		[Token(Token = "0x6000914")]
		[Address(RVA = "0xF56B0C", Offset = "0xF56B0C", VA = "0xF56B0C", Slot = "6")]
		public virtual void StartTargeting(DistanceGrabbable target)
		{
		}

		[Token(Token = "0x6000915")]
		[Address(RVA = "0xF56CFC", Offset = "0xF56CFC", VA = "0xF56CFC", Slot = "7")]
		public virtual void StopTargeting()
		{
		}

		[Token(Token = "0x6000916")]
		[Address(RVA = "0xF56E34", Offset = "0xF56E34", VA = "0xF56E34", Slot = "8")]
		public virtual void SelectTarget()
		{
		}

		[Token(Token = "0x6000917")]
		[Address(RVA = "0xF57214", Offset = "0xF57214", VA = "0xF57214", Slot = "9")]
		public virtual void CancelSelect()
		{
		}

		[Token(Token = "0x6000918")]
		[Address(RVA = "0xF57324", Offset = "0xF57324", VA = "0xF57324", Slot = "10")]
		public virtual void ActivatePull()
		{
		}

		[Token(Token = "0x6000919")]
		[Address(RVA = "0xF568C8", Offset = "0xF568C8", VA = "0xF568C8")]
		private void TryDistancePull()
		{
		}

		[Token(Token = "0x600091A")]
		[Address(RVA = "0xF56620", Offset = "0xF56620", VA = "0xF56620")]
		private void TryFlickPull()
		{
		}

		[Token(Token = "0x600091B")]
		[Address(RVA = "0xF57184", Offset = "0xF57184", VA = "0xF57184")]
		private Material GetSelectedMaterial(DistanceGrabbable grabbable)
		{
			return null;
		}

		[Token(Token = "0x600091C")]
		[Address(RVA = "0xF56C68", Offset = "0xF56C68", VA = "0xF56C68")]
		private Material GetTargetedMaterial(DistanceGrabbable grabbable)
		{
			return null;
		}

		[Token(Token = "0x600091D")]
		[Address(RVA = "0xF57650", Offset = "0xF57650", VA = "0xF57650")]
		private void TryCatchAssist(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x600091E")]
		[Address(RVA = "0xF575B0", Offset = "0xF575B0", VA = "0xF575B0")]
		[IteratorStateMachine(typeof(<StartCatchAssist>d__62))]
		private IEnumerator StartCatchAssist(DistanceGrabbable grab, float estimatedRadius)
		{
			return null;
		}

		[Token(Token = "0x600091F")]
		[Address(RVA = "0xF57BB4", Offset = "0xF57BB4", VA = "0xF57BB4")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000920")]
		[Address(RVA = "0xF57D00", Offset = "0xF57D00", VA = "0xF57D00")]
		public HandDistanceGrabber()
		{
		}
	}
	[Token(Token = "0x200017F")]
	internal struct CatchAssistData
	{
		[Token(Token = "0x40008FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Grabbable grab;

		[Token(Token = "0x40008FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float estimatedRadius;

		[Token(Token = "0x6000934")]
		[Address(RVA = "0xF58CC4", Offset = "0xF58CC4", VA = "0xF58CC4")]
		public CatchAssistData(Grabbable grab, float estimatedRadius)
		{
		}
	}
	[Token(Token = "0x2000180")]
	[HelpURL("https://www.notion.so/Pose-Areas-99b9af26d297442a91a9d73f65f13635")]
	public class HandPoseArea : MonoBehaviour
	{
		[Token(Token = "0x4000900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string poseName;

		[Token(Token = "0x4000901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int poseIndex;

		[Token(Token = "0x4000902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float transitionTime;

		[Token(Token = "0x4000903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Events")]
		public UnityHandEvent OnHandEnter;

		[Token(Token = "0x4000904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityHandEvent OnHandExit;

		[Token(Token = "0x4000905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Scriptable options NOT REQUIRED (will be saved locally instead if empty) -> Create scriptable throught [Auto Hand/Custom Pose]")]
		[HideInInspector]
		public HandPoseScriptable poseScriptable;

		[Token(Token = "0x4000906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public HandPoseData rightPose;

		[Token(Token = "0x4000907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public bool rightPoseSet;

		[Token(Token = "0x4000908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideInInspector]
		public HandPoseData leftPose;

		[Token(Token = "0x4000909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		public bool leftPoseSet;

		[Token(Token = "0x400090A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		internal HandPoseArea[] poseAreas;

		[Token(Token = "0x400090B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private List<Hand> posingHands;

		[Token(Token = "0x6000935")]
		[Address(RVA = "0xF58D3C", Offset = "0xF58D3C", VA = "0xF58D3C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000936")]
		[Address(RVA = "0xF58D94", Offset = "0xF58D94", VA = "0xF58D94")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000937")]
		[Address(RVA = "0xF58E88", Offset = "0xF58E88", VA = "0xF58E88")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000938")]
		[Address(RVA = "0xF58FE4", Offset = "0xF58FE4", VA = "0xF58FE4")]
		private void HandEnter(Hand hand)
		{
		}

		[Token(Token = "0x6000939")]
		[Address(RVA = "0xF59094", Offset = "0xF59094", VA = "0xF59094")]
		private void HandExit(Hand hand)
		{
		}

		[Token(Token = "0x600093A")]
		[Address(RVA = "0xF590EC", Offset = "0xF590EC", VA = "0xF590EC", Slot = "4")]
		public virtual HandPoseData GetHandPoseData(bool left)
		{
			return default(HandPoseData);
		}

		[Token(Token = "0x600093B")]
		[Address(RVA = "0xF591AC", Offset = "0xF591AC", VA = "0xF591AC")]
		public void SetHandPose(Hand hand)
		{
		}

		[Token(Token = "0x600093C")]
		[Address(RVA = "0xF51B20", Offset = "0xF51B20", VA = "0xF51B20")]
		public bool HasPose(bool left)
		{
			return default(bool);
		}

		[Token(Token = "0x600093D")]
		[Address(RVA = "0xF59234", Offset = "0xF59234", VA = "0xF59234")]
		public HandPoseArea()
		{
		}
	}
	[Token(Token = "0x2000181")]
	[DefaultExecutionOrder(10)]
	public class HandProjector : MonoBehaviour
	{
		[Token(Token = "0x400090C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("References")]
		public Hand hand;

		[Token(Token = "0x400090D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("This should be a copy of the hand with the desired visual setup for your projection hand")]
		public Hand handProjection;

		[Token(Token = "0x400090E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If true everything in the handVisuals will be disabled/hidden when projection hand is showing")]
		public bool hideHand;

		[Token(Token = "0x400090F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The Object(s) under your Hand that contain the MeshRenderer Component(s)")]
		[ShowIf("hideHand")]
		public Transform[] handVisuals;

		[Token(Token = "0x4000910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float speed;

		[Token(Token = "0x4000911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Events")]
		public UnityHandGrabEvent OnStartProjection;

		[Token(Token = "0x4000912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityHandGrabEvent OnEndProjection;

		[Token(Token = "0x4000913")]
		private const int REQUIRED_TARGET_FRAMES = 5;

		[Token(Token = "0x4000914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private HandPoseData lastProjectionPose;

		[Token(Token = "0x4000915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private HandPoseData newProjectionPose;

		[Token(Token = "0x4000916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool lastFrameDidProjection;

		[Token(Token = "0x4000917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Vector3 lastProjectionPosition;

		[Token(Token = "0x4000918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Quaternion lastProjectionRotation;

		[Token(Token = "0x4000919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Grabbable target;

		[Token(Token = "0x400091A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Grabbable lastTarget;

		[Token(Token = "0x400091B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private RaycastHit targetHit;

		[Token(Token = "0x400091C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private RaycastHit currHit;

		[Token(Token = "0x400091D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private int targetFrames;

		[Token(Token = "0x400091E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private int newTargetFrames;

		[Token(Token = "0x600093E")]
		[Address(RVA = "0xF5936C", Offset = "0xF5936C", VA = "0xF5936C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600093F")]
		[Address(RVA = "0xF59470", Offset = "0xF59470", VA = "0xF59470")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000940")]
		[Address(RVA = "0xF594F4", Offset = "0xF594F4", VA = "0xF594F4")]
		private void OnGrab(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000941")]
		[Address(RVA = "0xF59E40", Offset = "0xF59E40", VA = "0xF59E40")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000942")]
		[Address(RVA = "0xF5A2A8", Offset = "0xF5A2A8", VA = "0xF5A2A8")]
		private void OnProjectionStart(Hand projectionHand, Grabbable lookingAtObj)
		{
		}

		[Token(Token = "0x6000943")]
		[Address(RVA = "0xF5A488", Offset = "0xF5A488", VA = "0xF5A488")]
		private void OnProjectionEnd(Hand projectionHand, Grabbable lookingAtObj)
		{
		}

		[Token(Token = "0x6000944")]
		[Address(RVA = "0xF596A4", Offset = "0xF596A4", VA = "0xF596A4")]
		private void ShowProjection(bool show)
		{
		}

		[Token(Token = "0x6000945")]
		[Address(RVA = "0xF59E74", Offset = "0xF59E74", VA = "0xF59E74")]
		private void SetTarget(Grabbable newTarget)
		{
		}

		[Token(Token = "0x6000946")]
		[Address(RVA = "0xF5A204", Offset = "0xF5A204", VA = "0xF5A204")]
		private bool IsProjectionActive()
		{
			return default(bool);
		}

		[Token(Token = "0x6000947")]
		[Address(RVA = "0xF5A500", Offset = "0xF5A500", VA = "0xF5A500")]
		public HandProjector()
		{
		}
	}
	[Token(Token = "0x2000182")]
	public class HandPublicEvents : MonoBehaviour
	{
		[Token(Token = "0x400091F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hand hand;

		[Token(Token = "0x4000920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityHandGrabEvent OnBeforeGrab;

		[Token(Token = "0x4000921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityHandGrabEvent OnGrab;

		[Token(Token = "0x4000922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityHandGrabEvent OnRelease;

		[Token(Token = "0x4000923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityHandGrabEvent OnForceRelease;

		[Token(Token = "0x4000924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityHandGrabEvent OnSqueeze;

		[Token(Token = "0x4000925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityHandGrabEvent OnUnsqueeze;

		[Token(Token = "0x6000948")]
		[Address(RVA = "0xF5A510", Offset = "0xF5A510", VA = "0xF5A510")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000949")]
		[Address(RVA = "0xF5A6AC", Offset = "0xF5A6AC", VA = "0xF5A6AC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600094A")]
		[Address(RVA = "0xF5A848", Offset = "0xF5A848", VA = "0xF5A848")]
		public void OnBeforeGrabEvent(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x600094B")]
		[Address(RVA = "0xF5A8BC", Offset = "0xF5A8BC", VA = "0xF5A8BC")]
		public void OnGrabEvent(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x600094C")]
		[Address(RVA = "0xF5A930", Offset = "0xF5A930", VA = "0xF5A930")]
		public void OnReleaseEvent(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x600094D")]
		[Address(RVA = "0xF5A9A4", Offset = "0xF5A9A4", VA = "0xF5A9A4")]
		public void OnSqueezeEvent(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x600094E")]
		[Address(RVA = "0xF5AA18", Offset = "0xF5AA18", VA = "0xF5AA18")]
		public void OnUnsqueezeEvent(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x600094F")]
		[Address(RVA = "0xF5AA8C", Offset = "0xF5AA8C", VA = "0xF5AA8C")]
		public void OnForceReleaseEvent(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000950")]
		[Address(RVA = "0xF5AB00", Offset = "0xF5AB00", VA = "0xF5AB00")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000951")]
		[Address(RVA = "0xF5ABE4", Offset = "0xF5ABE4", VA = "0xF5ABE4")]
		public HandPublicEvents()
		{
		}
	}
	[Token(Token = "0x2000183")]
	[DefaultExecutionOrder(1000)]
	public class HandTeleportGuard : MonoBehaviour
	{
		[Token(Token = "0x4000926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Helps prevent hand from passing through static collision boundries")]
		public Hand hand;

		[Token(Token = "0x4000927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Guard Settings")]
		[Tooltip("The mask of things the guarding will ignore, if left on default or empty, will default to ignoring recommended Auto Hand layers")]
		public LayerMask ignoreMask;

		[Token(Token = "0x4000928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("The amount of distance change required in one frame or fixed udpate to activate the teleport guard")]
		public float buffer;

		[Token(Token = "0x4000929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Whether this should always run or only run when activated by the teleporter")]
		public bool alwaysRun;

		[Token(Token = "0x400092A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[Tooltip("If true hands wont teleport return when past the max distance if something is in the way")]
		[FormerlySerializedAs("strict")]
		public bool ignoreMaxHandDistance;

		[Token(Token = "0x400092B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 deltaHandPos;

		[Token(Token = "0x400092C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 deltaHandFixedPos;

		[Token(Token = "0x6000952")]
		[Address(RVA = "0xF5ABEC", Offset = "0xF5ABEC", VA = "0xF5ABEC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000953")]
		[Address(RVA = "0xF5AF74", Offset = "0xF5AF74", VA = "0xF5AF74")]
		private void Update()
		{
		}

		[Token(Token = "0x6000954")]
		[Address(RVA = "0xF5B494", Offset = "0xF5B494", VA = "0xF5B494")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000955")]
		[Address(RVA = "0xF5B130", Offset = "0xF5B130", VA = "0xF5B130")]
		public void TeleportProtection(Vector3 fromPos, Vector3 toPos)
		{
		}

		[Token(Token = "0x6000956")]
		[Address(RVA = "0xF5B650", Offset = "0xF5B650", VA = "0xF5B650")]
		public HandTeleportGuard()
		{
		}
	}
	[Token(Token = "0x2000184")]
	[HelpURL("https://www.notion.so/Touch-Events-1341b3e627dd443a99593ff7f0412aa6")]
	public class HandTouchEvent : MonoBehaviour
	{
		[Token(Token = "0x400092D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("For Solid Collision")]
		[Tooltip("Whether or not first hand to enter should take ownership and be the only one to call events")]
		public bool oneHanded;

		[Token(Token = "0x400092E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public HandType handType;

		[Token(Token = "0x400092F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Events")]
		public UnityHandEvent HandStartTouch;

		[Token(Token = "0x4000930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityHandEvent HandStopTouch;

		[Token(Token = "0x4000931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HandEvent HandStartTouchEvent;

		[Token(Token = "0x4000932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public HandEvent HandStopTouchEvent;

		[Token(Token = "0x4000933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Hand> hands;

		[Token(Token = "0x6000957")]
		[Address(RVA = "0xF5B664", Offset = "0xF5B664", VA = "0xF5B664")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000958")]
		[Address(RVA = "0xF5B944", Offset = "0xF5B944", VA = "0xF5B944")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000959")]
		[Address(RVA = "0xF51120", Offset = "0xF51120", VA = "0xF51120")]
		public void Touch(Hand hand)
		{
		}

		[Token(Token = "0x600095A")]
		[Address(RVA = "0xF512F8", Offset = "0xF512F8", VA = "0xF512F8")]
		public void Untouch(Hand hand)
		{
		}

		[Token(Token = "0x600095B")]
		[Address(RVA = "0xF5BA98", Offset = "0xF5BA98", VA = "0xF5BA98")]
		public HandTouchEvent()
		{
		}
	}
	[Token(Token = "0x2000185")]
	public delegate void HandEvent(Hand hand);
	[Token(Token = "0x2000186")]
	public class HandTriggerAreaEvents : MonoBehaviour
	{
		[Token(Token = "0x4000934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Whether or not first hand to enter should take ownership and be the only one to call events")]
		[Header("Trigger Events Settings")]
		public bool oneHanded;

		[Token(Token = "0x4000935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public HandType handType;

		[Token(Token = "0x4000936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Whether or not to call the release event if exiting while grab event activated")]
		public bool exitTriggerRelease;

		[Token(Token = "0x4000937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[Tooltip("Whether or not to call the release event if exiting while grab event activated")]
		public bool exitTriggerUnsqueeze;

		[Token(Token = "0x4000938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Events")]
		public UnityHandEvent HandEnter;

		[Token(Token = "0x4000939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityHandEvent HandExit;

		[Token(Token = "0x400093A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityHandEvent HandGrab;

		[Token(Token = "0x400093B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityHandEvent HandRelease;

		[Token(Token = "0x400093C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityHandEvent HandSqueeze;

		[Token(Token = "0x400093D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityHandEvent HandUnsqueeze;

		[Token(Token = "0x400093E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public HandEvent HandEnterEvent;

		[Token(Token = "0x400093F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public HandEvent HandExitEvent;

		[Token(Token = "0x4000940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public HandEvent HandGrabEvent;

		[Token(Token = "0x4000941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public HandEvent HandReleaseEvent;

		[Token(Token = "0x4000942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public HandEvent HandSqueezeEvent;

		[Token(Token = "0x4000943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public HandEvent HandUnsqueezeEvent;

		[Token(Token = "0x4000944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<Hand> hands;

		[Token(Token = "0x4000945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool grabbing;

		[Token(Token = "0x4000946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		private bool squeezing;

		[Token(Token = "0x6000964")]
		[Address(RVA = "0xF5BC68", Offset = "0xF5BC68", VA = "0xF5BC68", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000965")]
		[Address(RVA = "0xF5C01C", Offset = "0xF5C01C", VA = "0xF5C01C", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000966")]
		[Address(RVA = "0xF5C3EC", Offset = "0xF5C3EC", VA = "0xF5C3EC", Slot = "6")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000967")]
		[Address(RVA = "0xF5C568", Offset = "0xF5C568", VA = "0xF5C568", Slot = "7")]
		public virtual void Enter(Hand hand)
		{
		}

		[Token(Token = "0x6000968")]
		[Address(RVA = "0xF5C6C8", Offset = "0xF5C6C8", VA = "0xF5C6C8", Slot = "8")]
		public virtual void Exit(Hand hand)
		{
		}

		[Token(Token = "0x6000969")]
		[Address(RVA = "0xF5C950", Offset = "0xF5C950", VA = "0xF5C950", Slot = "9")]
		public virtual void Grab(Hand hand)
		{
		}

		[Token(Token = "0x600096A")]
		[Address(RVA = "0xF5CA64", Offset = "0xF5CA64", VA = "0xF5CA64", Slot = "10")]
		public virtual void Release(Hand hand)
		{
		}

		[Token(Token = "0x600096B")]
		[Address(RVA = "0xF5CB74", Offset = "0xF5CB74", VA = "0xF5CB74", Slot = "11")]
		public virtual void Squeeze(Hand hand)
		{
		}

		[Token(Token = "0x600096C")]
		[Address(RVA = "0xF5CCB8", Offset = "0xF5CCB8", VA = "0xF5CCB8", Slot = "12")]
		public virtual void Unsqueeze(Hand hand)
		{
		}

		[Token(Token = "0x600096D")]
		[Address(RVA = "0xF5CDF4", Offset = "0xF5CDF4", VA = "0xF5CDF4")]
		public HandTriggerAreaEvents()
		{
		}
	}
	[Token(Token = "0x2000187")]
	public class EditorHand : MonoBehaviour
	{
		[Token(Token = "0x4000947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool useEditorGUI;

		[Token(Token = "0x4000948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GrabbablePose grabbablePose;

		[Token(Token = "0x4000949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HandPoseArea grabbablePoseArea;

		[Token(Token = "0x400094A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Hand _hand;

		[Token(Token = "0x170000FF")]
		public Hand hand
		{
			[Token(Token = "0x600097A")]
			[Address(RVA = "0xF5D28C", Offset = "0xF5D28C", VA = "0xF5D28C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600097B")]
		[Address(RVA = "0xF5D334", Offset = "0xF5D334", VA = "0xF5D334")]
		public EditorHand()
		{
		}
	}
	[Token(Token = "0x2000188")]
	public class GrabbableBase : MonoBehaviour
	{
		[Token(Token = "0x200018A")]
		[CompilerGenerated]
		private sealed class <IgnoreHandCollision>d__39 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000966")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000967")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000968")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GrabbableBase <>4__this;

			[Token(Token = "0x4000969")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Hand hand;

			[Token(Token = "0x400096A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float time;

			[Token(Token = "0x17000102")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000998")]
				[Address(RVA = "0xF5E434", Offset = "0xF5E434", VA = "0xF5E434", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000103")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600099A")]
				[Address(RVA = "0xF5E47C", Offset = "0xF5E47C", VA = "0xF5E47C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000995")]
			[Address(RVA = "0xF5DE80", Offset = "0xF5DE80", VA = "0xF5DE80")]
			[DebuggerHidden]
			public <IgnoreHandCollision>d__39(int <>1__state)
			{
			}

			[Token(Token = "0x6000996")]
			[Address(RVA = "0xF5E334", Offset = "0xF5E334", VA = "0xF5E334", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000997")]
			[Address(RVA = "0xF5E338", Offset = "0xF5E338", VA = "0xF5E338", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000999")]
			[Address(RVA = "0xF5E43C", Offset = "0xF5E43C", VA = "0xF5E43C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400094B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AutoHeader("Grabbable", 0, 0)]
		public bool ignoreMe;

		[Token(Token = "0x400094C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The physics body to connect this colliders grab to - if left empty will default to local body")]
		public Rigidbody body;

		[Token(Token = "0x400094D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("A copy of the mesh will be created and slighly scaled and this material will be applied to create a highlight effect with options")]
		public Material hightlightMaterial;

		[Token(Token = "0x400094E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public bool isGrabbable;

		[Token(Token = "0x400094F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PlacePoint _placePoint;

		[Token(Token = "0x4000950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal bool ignoreParent;

		[Token(Token = "0x4000951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected List<Hand> heldBy;

		[Token(Token = "0x4000952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected bool hightlighting;

		[Token(Token = "0x4000953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected GameObject highlightObj;

		[Token(Token = "0x4000954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected PlacePoint lastPlacePoint;

		[Token(Token = "0x4000955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected Transform originalParent;

		[Token(Token = "0x4000956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Vector3 lastCenterOfMassPos;

		[Token(Token = "0x4000957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		protected Quaternion lastCenterOfMassRot;

		[Token(Token = "0x4000958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		protected CollisionDetectionMode detectionMode;

		[Token(Token = "0x4000959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected internal bool beingGrabbed;

		[Token(Token = "0x400095A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		protected bool heldBodyJointed;

		[Token(Token = "0x400095B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
		protected bool wasIsGrabbable;

		[Token(Token = "0x400095C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x93")]
		protected bool beingDestroyed;

		[Token(Token = "0x400095D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected int originalLayer;

		[Token(Token = "0x400095E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected Coroutine resetLayerRoutine;

		[Token(Token = "0x400095F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected List<GrabbableChild> grabChildren;

		[Token(Token = "0x4000960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected List<Transform> jointedParents;

		[Token(Token = "0x4000961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected Dictionary<Transform, GrabbablePoseCombiner> poses;

		[Token(Token = "0x4000962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private CollisionTracker _collisionTracker;

		[Token(Token = "0x4000963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private List<Collider> grabColliders;

		[Token(Token = "0x17000100")]
		public PlacePoint placePoint
		{
			[Token(Token = "0x600097C")]
			[Address(RVA = "0xF5D344", Offset = "0xF5D344", VA = "0xF5D344")]
			get
			{
				return null;
			}
			[Token(Token = "0x600097D")]
			[Address(RVA = "0xF5D34C", Offset = "0xF5D34C", VA = "0xF5D34C")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000101")]
		public CollisionTracker collisionTracker
		{
			[Token(Token = "0x600097E")]
			[Address(RVA = "0xF5D354", Offset = "0xF5D354", VA = "0xF5D354")]
			get
			{
				return null;
			}
			[Token(Token = "0x600097F")]
			[Address(RVA = "0xF5D420", Offset = "0xF5D420", VA = "0xF5D420")]
			protected set
			{
			}
		}

		[Token(Token = "0x6000980")]
		[Address(RVA = "0xF5D4C0", Offset = "0xF5D4C0", VA = "0xF5D4C0", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000981")]
		[Address(RVA = "0xF5D964", Offset = "0xF5D964", VA = "0xF5D964", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000982")]
		[Address(RVA = "0xF5DA68", Offset = "0xF5DA68", VA = "0xF5DA68", Slot = "6")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000983")]
		[Address(RVA = "0xF5DB00", Offset = "0xF5DB00", VA = "0xF5DB00", Slot = "7")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000984")]
		[Address(RVA = "0xF5DB44", Offset = "0xF5DB44", VA = "0xF5DB44")]
		internal void SetPlacePoint(PlacePoint point)
		{
		}

		[Token(Token = "0x6000985")]
		[Address(RVA = "0xF5DB4C", Offset = "0xF5DB4C", VA = "0xF5DB4C")]
		internal void SetGrabbableChild(GrabbableChild child)
		{
		}

		[Token(Token = "0x6000986")]
		[Address(RVA = "0xF5DC34", Offset = "0xF5DC34", VA = "0xF5DC34")]
		protected int GetOriginalLayer()
		{
			return default(int);
		}

		[Token(Token = "0x6000987")]
		[Address(RVA = "0xF5DC3C", Offset = "0xF5DC3C", VA = "0xF5DC3C")]
		internal void SetLayerRecursive(Transform obj, int oldLayer, int newLayer)
		{
		}

		[Token(Token = "0x6000988")]
		[Address(RVA = "0xF50238", Offset = "0xF50238", VA = "0xF50238")]
		internal void SetLayerRecursive(Transform obj, int newLayer)
		{
		}

		[Token(Token = "0x6000989")]
		[Address(RVA = "0xF5DDE0", Offset = "0xF5DDE0", VA = "0xF5DDE0")]
		[IteratorStateMachine(typeof(<IgnoreHandCollision>d__39))]
		protected IEnumerator IgnoreHandCollision(float time, Hand hand)
		{
			return null;
		}

		[Token(Token = "0x600098A")]
		[Address(RVA = "0xF50A34", Offset = "0xF50A34", VA = "0xF50A34")]
		public bool GetSavedPose(Transform poseTarget, out GrabbablePoseCombiner pose)
		{
			return default(bool);
		}

		[Token(Token = "0x600098B")]
		[Address(RVA = "0xF5DEA8", Offset = "0xF5DEA8", VA = "0xF5DEA8")]
		public bool HasCustomPose()
		{
			return default(bool);
		}

		[Token(Token = "0x600098C")]
		[Address(RVA = "0xF5DF04", Offset = "0xF5DF04", VA = "0xF5DF04")]
		public int HeldCollisions()
		{
			return default(int);
		}

		[Token(Token = "0x600098D")]
		[Address(RVA = "0xF5DF58", Offset = "0xF5DF58", VA = "0xF5DF58")]
		public void IgnoreHand(Hand hand, bool ignore)
		{
		}

		[Token(Token = "0x600098E")]
		[Address(RVA = "0xF5D7FC", Offset = "0xF5D7FC", VA = "0xF5D7FC")]
		private void SetCollidersRecursive(Transform obj)
		{
		}

		[Token(Token = "0x600098F")]
		[Address(RVA = "0xF5E0AC", Offset = "0xF5E0AC", VA = "0xF5E0AC")]
		protected void OriginalCollisionDetection()
		{
		}

		[Token(Token = "0x6000990")]
		[Address(RVA = "0xF5E158", Offset = "0xF5E158", VA = "0xF5E158")]
		public bool BeingDestroyed()
		{
			return default(bool);
		}

		[Token(Token = "0x6000991")]
		[Address(RVA = "0xF5E160", Offset = "0xF5E160", VA = "0xF5E160")]
		public void DebugBreak()
		{
		}

		[Token(Token = "0x6000992")]
		[Address(RVA = "0xF5E164", Offset = "0xF5E164", VA = "0xF5E164")]
		public GrabbableBase()
		{
		}
	}
	[Token(Token = "0x200018B")]
	public enum HandMovementType
	{
		[Token(Token = "0x400096C")]
		Legacy,
		[Token(Token = "0x400096D")]
		Forces
	}
	[Token(Token = "0x200018C")]
	public enum HandType
	{
		[Token(Token = "0x400096F")]
		both,
		[Token(Token = "0x4000970")]
		right,
		[Token(Token = "0x4000971")]
		left,
		[Token(Token = "0x4000972")]
		none
	}
	[Token(Token = "0x200018D")]
	public enum GrabType
	{
		[Token(Token = "0x4000974")]
		HandToGrabbable,
		[Token(Token = "0x4000975")]
		GrabbableToHand,
		[Token(Token = "0x4000976")]
		InstantGrab
	}
	[Serializable]
	[Token(Token = "0x200018E")]
	public struct VelocityTimePair
	{
		[Token(Token = "0x4000977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float time;

		[Token(Token = "0x4000978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Vector3 velocity;
	}
	[Token(Token = "0x200018F")]
	public delegate void HandGrabEvent(Hand hand, Grabbable grabbable);
	[Token(Token = "0x2000190")]
	public delegate void HandGameObjectEvent(Hand hand, GameObject other);
	[Serializable]
	[Token(Token = "0x2000191")]
	public class UnityHandGrabEvent : UnityEvent<Hand, Grabbable>
	{
		[Token(Token = "0x60009A3")]
		[Address(RVA = "0xF5E654", Offset = "0xF5E654", VA = "0xF5E654")]
		public UnityHandGrabEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000192")]
	public class UnityHandEvent : UnityEvent<Hand>
	{
		[Token(Token = "0x60009A4")]
		[Address(RVA = "0xF59324", Offset = "0xF59324", VA = "0xF59324")]
		public UnityHandEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000193")]
	[RequireComponent(typeof(Rigidbody))]
	[DefaultExecutionOrder(-1000)]
	public class HandBase : MonoBehaviour
	{
		[Token(Token = "0x4000979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AutoHeader("AUTO HAND", 0, 0)]
		public bool ignoreMe;

		[Token(Token = "0x400097A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Finger[] fingers;

		[Token(Token = "0x400097B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("An empty GameObject that should be placed on the surface of the center of the palm")]
		public Transform palmTransform;

		[Token(Token = "0x400097C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Whether this is the left (on) or right (off) hand")]
		[FormerlySerializedAs("isLeft")]
		public bool left;

		[Token(Token = "0x400097D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Min(0.01f)]
		[Tooltip("Maximum distance for pickup")]
		[Space]
		public float reachDistance;

		[Token(Token = "0x400097E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Min(0f)]
		[Tooltip("Makes grab smoother; also based on range and reach distance - a very near grab is instant and a max distance grab is [X] frames")]
		public float grabTime;

		[Token(Token = "0x400097F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AutoToggleHeader("Enable Movement", 0, 0, tooltip = "Whether or not to enable the hand's Rigidbody Physics movement")]
		public bool enableMovement;

		[Token(Token = "0x4000980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Follow target, the hand will always try to match this transforms position with rigidbody movements")]
		[EnableIf("enableMovement")]
		public Transform follow;

		[Token(Token = "0x4000981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Min(0f)]
		[Tooltip("Returns hand to the target after this distance [helps just in case it gets stuck]")]
		[EnableIf("enableMovement")]
		public float maxFollowDistance;

		[Token(Token = "0x4000982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Amplifier for applied velocity on released object")]
		[EnableIf("enableMovement")]
		[Min(0f)]
		public float throwPower;

		[Token(Token = "0x4000983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		public bool advancedFollowSettings;

		[Token(Token = "0x4000984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		[AutoToggleHeader("Enable Auto Posing", 0, 0, tooltip = "Auto Posing will override Unity Animations -- This will disable all the Auto Hand IK, including animations from: finger sway, pose areas, finger bender scripts (runtime Auto Posing will still work)")]
		[Tooltip("Turn this on when you want to animate the hand or use other IK Drivers")]
		public bool enableIK;

		[Token(Token = "0x4000985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[EnableIf("enableIK")]
		[Tooltip("How much the fingers sway from the velocity")]
		public float swayStrength;

		[Token(Token = "0x4000986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[EnableIf("enableIK")]
		[Tooltip("This will offset each fingers bend (0 is no bend, 1 is full bend)")]
		public float gripOffset;

		[NonSerialized]
		[Token(Token = "0x4000987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("The maximum allowed velocity of the hand")]
		[Min(0f)]
		public float maxVelocity;

		[NonSerialized]
		[Token(Token = "0x4000988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Follow target speed (Can cause jittering if turned too high - recommend increasing drag with speed)")]
		[Min(0f)]
		public float followPositionStrength;

		[NonSerialized]
		[Token(Token = "0x4000989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[HideInInspector]
		[Tooltip("Follow target rotation speed (Can cause jittering if turned too high - recommend increasing angular drag with speed)")]
		[Min(0f)]
		public float followRotationStrength;

		[NonSerialized]
		[Token(Token = "0x400098A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		[Tooltip("After this many seconds velocity data within a 'throw window' will be tossed out. (This allows you to get only use acceeleration data from the last 'x' seconds of the throw.)")]
		public float throwVelocityExpireTime;

		[NonSerialized]
		[Token(Token = "0x400098B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("Increase for closer finger tip results / Decrease for less physics checks - The number of steps the fingers take when bending to grab something")]
		[HideInInspector]
		public int fingerBendSteps;

		[NonSerialized]
		[Token(Token = "0x400098C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		public float sphereCastRadius;

		[Token(Token = "0x400098D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[HideInInspector]
		public bool usingPoseAreas;

		[Token(Token = "0x400098E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public QueryTriggerInteraction queryTriggerInteraction;

		[Token(Token = "0x400098F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Grabbable HoldingObj;

		[Token(Token = "0x4000990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Grabbable _lookingAtObj;

		[Token(Token = "0x4000991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Transform _moveTo;

		[Token(Token = "0x4000992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Rigidbody _body;

		[Token(Token = "0x4000993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 _grabPositionOffset;

		[Token(Token = "0x4000994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Quaternion _grabRotationOffset;

		[Token(Token = "0x4000995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private CollisionTracker _collisionTracker;

		[Token(Token = "0x4000996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected Joint heldJoint;

		[Token(Token = "0x4000997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected bool grabbing;

		[Token(Token = "0x4000998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
		protected bool squeezing;

		[Token(Token = "0x4000999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD2")]
		protected bool grabbed;

		[Token(Token = "0x400099A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		protected float triggerPoint;

		[Token(Token = "0x400099B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected GrabbablePose grabPose;

		[Token(Token = "0x400099C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected Coroutine handAnimateRoutine;

		[Token(Token = "0x400099D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected HandPoseArea handPoseArea;

		[Token(Token = "0x400099E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected HandPoseData preHandPoseAreaPose;

		[Token(Token = "0x400099F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		protected List<Collider> handColliders;

		[Token(Token = "0x40009A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Transform _grabPoint;

		[Token(Token = "0x40009A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		internal int handLayers;

		[Token(Token = "0x40009A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		protected Collider palmCollider;

		[Token(Token = "0x40009A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		protected RaycastHit highlightHit;

		[Token(Token = "0x40009A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		protected HandVelocityTracker velocityTracker;

		[Token(Token = "0x40009A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		protected Transform palmChild;

		[Token(Token = "0x40009A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		protected Vector3 lastFrameFollowPos;

		[Token(Token = "0x40009A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		protected Quaternion lastFrameFollowRot;

		[Token(Token = "0x40009A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		internal bool allowUpdateMovement;

		[Token(Token = "0x40009A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private Vector3[] handRays;

		[Token(Token = "0x40009AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private RaycastHit[] rayHits;

		[Token(Token = "0x40009AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private List<RaycastHit> closestHits;

		[Token(Token = "0x40009AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private List<Grabbable> closestGrabs;

		[Token(Token = "0x40009AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private int tryMaxDistanceCount;

		[Token(Token = "0x40009AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		private bool prerendered;

		[Token(Token = "0x40009AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private Vector3 preRenderPos;

		[Token(Token = "0x40009B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		private Quaternion preRenderRot;

		[Token(Token = "0x40009B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		private float currGrip;

		[Token(Token = "0x17000104")]
		public Grabbable holdingObj
		{
			[Token(Token = "0x60009A5")]
			[Address(RVA = "0xF5E69C", Offset = "0xF5E69C", VA = "0xF5E69C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009A6")]
			[Address(RVA = "0xF5E6A4", Offset = "0xF5E6A4", VA = "0xF5E6A4")]
			internal set
			{
			}
		}

		[Token(Token = "0x17000105")]
		public Grabbable lookingAtObj
		{
			[Token(Token = "0x60009A7")]
			[Address(RVA = "0xF5E6AC", Offset = "0xF5E6AC", VA = "0xF5E6AC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009A8")]
			[Address(RVA = "0xF5E6B4", Offset = "0xF5E6B4", VA = "0xF5E6B4")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000106")]
		public Transform moveTo
		{
			[Token(Token = "0x60009A9")]
			[Address(RVA = "0xF505FC", Offset = "0xF505FC", VA = "0xF505FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000107")]
		public Rigidbody body
		{
			[Token(Token = "0x60009AA")]
			[Address(RVA = "0xF5E6BC", Offset = "0xF5E6BC", VA = "0xF5E6BC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009AB")]
			[Address(RVA = "0xF5E6C4", Offset = "0xF5E6C4", VA = "0xF5E6C4")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000108")]
		public Vector3 grabPositionOffset
		{
			[Token(Token = "0x60009AC")]
			[Address(RVA = "0xF5E6CC", Offset = "0xF5E6CC", VA = "0xF5E6CC")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60009AD")]
			[Address(RVA = "0xF5E6D8", Offset = "0xF5E6D8", VA = "0xF5E6D8")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000109")]
		public Quaternion grabRotationOffset
		{
			[Token(Token = "0x60009AE")]
			[Address(RVA = "0xF5E6E4", Offset = "0xF5E6E4", VA = "0xF5E6E4")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x60009AF")]
			[Address(RVA = "0xF5E6F0", Offset = "0xF5E6F0", VA = "0xF5E6F0")]
			protected set
			{
			}
		}

		[Token(Token = "0x1700010A")]
		public bool disableIK
		{
			[Token(Token = "0x60009B0")]
			[Address(RVA = "0xF5E6FC", Offset = "0xF5E6FC", VA = "0xF5E6FC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60009B1")]
			[Address(RVA = "0xF59460", Offset = "0xF59460", VA = "0xF59460")]
			set
			{
			}
		}

		[Token(Token = "0x1700010B")]
		public CollisionTracker collisionTracker
		{
			[Token(Token = "0x60009B2")]
			[Address(RVA = "0xF4D294", Offset = "0xF4D294", VA = "0xF4D294")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009B3")]
			[Address(RVA = "0xF5E70C", Offset = "0xF5E70C", VA = "0xF5E70C")]
			protected set
			{
			}
		}

		[Token(Token = "0x1700010C")]
		protected Transform grabPoint
		{
			[Token(Token = "0x60009B4")]
			[Address(RVA = "0xF4F3CC", Offset = "0xF4F3CC", VA = "0xF4F3CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009B5")]
		[Address(RVA = "0xF4CA8C", Offset = "0xF4CA8C", VA = "0xF4CA8C", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60009B6")]
		[Address(RVA = "0xF4CE34", Offset = "0xF4CE34", VA = "0xF4CE34", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60009B7")]
		[Address(RVA = "0xF4D274", Offset = "0xF4D274", VA = "0xF4D274", Slot = "6")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x60009B8")]
		[Address(RVA = "0xF4D4D0", Offset = "0xF4D4D0", VA = "0xF4D4D0", Slot = "7")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x60009B9")]
		[Address(RVA = "0xF5E820", Offset = "0xF5E820", VA = "0xF5E820", Slot = "8")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x60009BA")]
		[Address(RVA = "0xF5E904", Offset = "0xF5E904", VA = "0xF5E904", Slot = "9")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x60009BB")]
		[Address(RVA = "0xF5F5D4", Offset = "0xF5F5D4", VA = "0xF5F5D4", Slot = "10")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x60009BC")]
		[Address(RVA = "0xF5F6F8", Offset = "0xF5F6F8", VA = "0xF5F6F8", Slot = "11")]
		public virtual void OnPreRender()
		{
		}

		[Token(Token = "0x60009BD")]
		[Address(RVA = "0xF5F858", Offset = "0xF5F858", VA = "0xF5F858", Slot = "12")]
		public virtual void OnPostRender()
		{
		}

		[Token(Token = "0x60009BE")]
		[Address(RVA = "0xF5F958", Offset = "0xF5F958", VA = "0xF5F958", Slot = "13")]
		protected virtual void CreateJoint(Grabbable grab, float breakForce, float breakTorque)
		{
		}

		[Token(Token = "0x60009BF")]
		[Address(RVA = "0xF5FC30", Offset = "0xF5FC30", VA = "0xF5FC30", Slot = "14")]
		protected virtual void MoveTo()
		{
		}

		[Token(Token = "0x60009C0")]
		[Address(RVA = "0xF60534", Offset = "0xF60534", VA = "0xF60534", Slot = "15")]
		protected virtual void TorqueTo()
		{
		}

		[Token(Token = "0x60009C1")]
		[Address(RVA = "0xF60A98", Offset = "0xF60A98", VA = "0xF60A98", Slot = "16")]
		public virtual void SetHandLocation(Vector3 pos, Quaternion rot)
		{
		}

		[Token(Token = "0x60009C2")]
		[Address(RVA = "0xF611D0", Offset = "0xF611D0", VA = "0xF611D0", Slot = "17")]
		public virtual void SetHandLocation(Vector3 pos)
		{
		}

		[Token(Token = "0x60009C3")]
		[Address(RVA = "0xF61260", Offset = "0xF61260", VA = "0xF61260")]
		public void ResetHandLocation()
		{
		}

		[Token(Token = "0x60009C4")]
		[Address(RVA = "0xF54364", Offset = "0xF54364", VA = "0xF54364")]
		protected void SetMoveTo()
		{
		}

		[Token(Token = "0x60009C5")]
		[Address(RVA = "0xF612F0", Offset = "0xF612F0", VA = "0xF612F0", Slot = "18")]
		protected virtual Vector3 HandClosestHit(out RaycastHit closestHit, out Grabbable grabbable, float dist, int layerMask, [Optional] Grabbable target)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009C6")]
		[Address(RVA = "0xF61A98", Offset = "0xF61A98", VA = "0xF61A98")]
		public bool IsPosing()
		{
			return default(bool);
		}

		[Token(Token = "0x60009C7")]
		[Address(RVA = "0xF61B50", Offset = "0xF61B50", VA = "0xF61B50", Slot = "19")]
		protected virtual void UpdateFingers()
		{
		}

		[Token(Token = "0x60009C8")]
		[Address(RVA = "0xF61CF0", Offset = "0xF61CF0", VA = "0xF61CF0")]
		public int CollisionCount()
		{
			return default(int);
		}

		[Token(Token = "0x60009C9")]
		[Address(RVA = "0xF542C0", Offset = "0xF542C0", VA = "0xF542C0")]
		public void HandIgnoreCollider(Collider collider, bool ignore)
		{
		}

		[Token(Token = "0x60009CA")]
		[Address(RVA = "0xF4CE6C", Offset = "0xF4CE6C", VA = "0xF4CE6C")]
		public void SetLayer()
		{
		}

		[Token(Token = "0x60009CB")]
		[Address(RVA = "0xF61D44", Offset = "0xF61D44", VA = "0xF61D44")]
		internal void SetLayerRecursive(Transform obj, int newLayer)
		{
		}

		[Token(Token = "0x60009CC")]
		[Address(RVA = "0xF5E7AC", Offset = "0xF5E7AC", VA = "0xF5E7AC")]
		protected void SetHandCollidersRecursive(Transform obj)
		{
		}

		[Token(Token = "0x60009CD")]
		[Address(RVA = "0xF61F48", Offset = "0xF61F48", VA = "0xF61F48")]
		public Vector3[] GetPalmRays()
		{
			return null;
		}

		[Token(Token = "0x60009CE")]
		[Address(RVA = "0xF61F6C", Offset = "0xF61F6C", VA = "0xF61F6C", Slot = "20")]
		protected virtual void SetPalmRays()
		{
		}

		[Token(Token = "0x60009CF")]
		[Address(RVA = "0xF621F8", Offset = "0xF621F8", VA = "0xF621F8")]
		public Vector3 ThrowVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009D0")]
		[Address(RVA = "0xF62214", Offset = "0xF62214", VA = "0xF62214")]
		public Vector3 ThrowAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009D1")]
		[Address(RVA = "0xF62230", Offset = "0xF62230", VA = "0xF62230")]
		public bool IsGrabbing()
		{
			return default(bool);
		}

		[Token(Token = "0x60009D2")]
		[Address(RVA = "0xF62238", Offset = "0xF62238", VA = "0xF62238")]
		public static int GetHandsLayerMask()
		{
			return default(int);
		}

		[Token(Token = "0x60009D3")]
		[Address(RVA = "0xF52000", Offset = "0xF52000", VA = "0xF52000")]
		public HandBase()
		{
		}
	}
	[Token(Token = "0x2000194")]
	[RequireComponent(typeof(Hand))]
	public class HandGizmos : MonoBehaviour
	{
		[Token(Token = "0x60009D5")]
		[Address(RVA = "0xF62348", Offset = "0xF62348", VA = "0xF62348")]
		public HandGizmos()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000195")]
	public struct HandPoseData
	{
		[Token(Token = "0x40009B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 handOffset;

		[Token(Token = "0x40009B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 rotationOffset;

		[Token(Token = "0x40009B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Quaternion localQuaternionOffset;

		[Token(Token = "0x40009B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3[] posePositions;

		[Token(Token = "0x40009B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Quaternion[] poseRotations;

		[Token(Token = "0x60009D6")]
		[Address(RVA = "0xF62350", Offset = "0xF62350", VA = "0xF62350")]
		public HandPoseData(Hand hand, Grabbable grabbable)
		{
		}

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0xF62900", Offset = "0xF62900", VA = "0xF62900")]
		public HandPoseData(Hand hand, Transform point)
		{
		}

		[Token(Token = "0x60009D8")]
		[Address(RVA = "0xF62A30", Offset = "0xF62A30", VA = "0xF62A30")]
		public HandPoseData(Hand hand)
		{
		}

		[Token(Token = "0x60009D9")]
		[Address(RVA = "0xF62B54", Offset = "0xF62B54", VA = "0xF62B54")]
		public HandPoseData(HandPoseData data)
		{
		}

		[Token(Token = "0x60009DA")]
		[Address(RVA = "0xF62494", Offset = "0xF62494", VA = "0xF62494")]
		public void SavePose(Hand hand, Transform relativeTo)
		{
		}

		[Token(Token = "0x60009DB")]
		[Address(RVA = "0xF62D5C", Offset = "0xF62D5C", VA = "0xF62D5C")]
		public Quaternion GetRotationOffset()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60009DC")]
		[Address(RVA = "0xF62E20", Offset = "0xF62E20", VA = "0xF62E20")]
		public void SetPose(Hand hand, [Optional] Transform relativeTo)
		{
		}

		[Token(Token = "0x60009DD")]
		[Address(RVA = "0xF631F8", Offset = "0xF631F8", VA = "0xF631F8")]
		public static HandPoseData LerpPose(HandPoseData from, HandPoseData to, float point)
		{
			return default(HandPoseData);
		}

		[Token(Token = "0x60009DE")]
		[Address(RVA = "0xF63478", Offset = "0xF63478", VA = "0xF63478")]
		public static void LerpPose(ref HandPoseData lerpPose, HandPoseData from, HandPoseData to, float point)
		{
		}
	}
	[Token(Token = "0x2000198")]
	[CreateAssetMenu(fileName = "AutoHand Pose", menuName = "Auto Hand/Custom Pose", order = 1)]
	public class HandPoseScriptable : ScriptableObject
	{
		[Token(Token = "0x40009BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public bool rightSaved;

		[Token(Token = "0x40009BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[HideInInspector]
		public bool leftSaved;

		[Token(Token = "0x40009BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandPoseData rightPose;

		[Token(Token = "0x40009BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public HandPoseData leftPose;

		[Token(Token = "0x60009E2")]
		[Address(RVA = "0xF63858", Offset = "0xF63858", VA = "0xF63858")]
		public void SavePoses(HandPoseData right, HandPoseData left)
		{
		}

		[Token(Token = "0x60009E3")]
		[Address(RVA = "0xF638CC", Offset = "0xF638CC", VA = "0xF638CC")]
		public void SaveRightPose(HandPoseData right)
		{
		}

		[Token(Token = "0x60009E4")]
		[Address(RVA = "0xF63908", Offset = "0xF63908", VA = "0xF63908")]
		public void SaveLeftPose(HandPoseData left)
		{
		}

		[Token(Token = "0x60009E5")]
		[Address(RVA = "0xF63948", Offset = "0xF63948", VA = "0xF63948")]
		public HandPoseScriptable()
		{
		}
	}
	[Token(Token = "0x2000199")]
	public class HandStabilizer : MonoBehaviour
	{
		[Token(Token = "0x40009BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Hand[] hands;

		[Token(Token = "0x40009BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3[] handsDeltaPos;

		[Token(Token = "0x60009E6")]
		[Address(RVA = "0xF63950", Offset = "0xF63950", VA = "0xF63950")]
		private void Start()
		{
		}

		[Token(Token = "0x60009E7")]
		[Address(RVA = "0xF63A58", Offset = "0xF63A58", VA = "0xF63A58")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60009E8")]
		[Address(RVA = "0xF63B9C", Offset = "0xF63B9C", VA = "0xF63B9C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60009E9")]
		[Address(RVA = "0xF63CE0", Offset = "0xF63CE0", VA = "0xF63CE0")]
		private void OnPostRender()
		{
		}

		[Token(Token = "0x60009EA")]
		[Address(RVA = "0xF63D7C", Offset = "0xF63D7C", VA = "0xF63D7C")]
		private void OnPreRender()
		{
		}

		[Token(Token = "0x60009EB")]
		[Address(RVA = "0xF63E18", Offset = "0xF63E18", VA = "0xF63E18")]
		private void OnPreRender(ScriptableRenderContext src, Camera cam)
		{
		}

		[Token(Token = "0x60009EC")]
		[Address(RVA = "0xF63EB4", Offset = "0xF63EB4", VA = "0xF63EB4")]
		private void OnPostRender(ScriptableRenderContext src, Camera cam)
		{
		}

		[Token(Token = "0x60009ED")]
		[Address(RVA = "0xF63F50", Offset = "0xF63F50", VA = "0xF63F50")]
		public HandStabilizer()
		{
		}
	}
	[Token(Token = "0x200019A")]
	public class HandVelocityTracker
	{
		[Token(Token = "0x40009C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private HandBase hand;

		[Token(Token = "0x40009C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float minThrowVelocity;

		[Token(Token = "0x40009C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected List<VelocityTimePair> m_ThrowVelocityList;

		[Token(Token = "0x40009C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected List<VelocityTimePair> m_ThrowFrameVelocityList;

		[Token(Token = "0x40009C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected List<VelocityTimePair> m_ThrowAngleVelocityList;

		[Token(Token = "0x60009EE")]
		[Address(RVA = "0xF63F58", Offset = "0xF63F58", VA = "0xF63F58")]
		public void ClearThrow()
		{
		}

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0xF63FD0", Offset = "0xF63FD0", VA = "0xF63FD0")]
		public HandVelocityTracker(HandBase hand)
		{
		}

		[Token(Token = "0x60009F0")]
		[Address(RVA = "0xF640CC", Offset = "0xF640CC", VA = "0xF640CC")]
		public void UpdateFrameThrowing(Vector3 vel)
		{
		}

		[Token(Token = "0x60009F1")]
		[Address(RVA = "0xF64244", Offset = "0xF64244", VA = "0xF64244")]
		public void UpdateThrowing()
		{
		}

		[Token(Token = "0x60009F2")]
		[Address(RVA = "0xF64574", Offset = "0xF64574", VA = "0xF64574")]
		public Vector3 ThrowVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0xF6494C", Offset = "0xF6494C", VA = "0xF6494C")]
		public Vector3 ThrowAngularVelocity()
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x200019B")]
	public class KeyboardHand : MonoBehaviour
	{
		[Token(Token = "0x40009C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hand hand;

		[Token(Token = "0x40009C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float speed;

		[Token(Token = "0x40009C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float flySpeed;

		[Token(Token = "0x40009C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool useLocal;

		[Token(Token = "0x60009F4")]
		[Address(RVA = "0xF64BEC", Offset = "0xF64BEC", VA = "0xF64BEC")]
		private void Update()
		{
		}

		[Token(Token = "0x60009F5")]
		[Address(RVA = "0xF64EEC", Offset = "0xF64EEC", VA = "0xF64EEC")]
		public KeyboardHand()
		{
		}
	}
	[Token(Token = "0x200019C")]
	[RequireComponent(typeof(CapsuleCollider))]
	[RequireComponent(typeof(Rigidbody))]
	[HelpURL("https://earnestrobot.notion.site/Auto-Move-Player-02d91305a4294e039049bd45cacc5b90")]
	[DefaultExecutionOrder(-1)]
	public class AutoHandPlayer : MonoBehaviour
	{
		[Token(Token = "0x40009C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AutoHeader("Auto Hand Player", 0, 0)]
		public bool ignoreMe;

		[Token(Token = "0x40009CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The tracked headCamera object")]
		public Camera headCamera;

		[Token(Token = "0x40009CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The object that represents the forward direction movement, usually should be set as the camera or a tracked controller")]
		public Transform forwardFollow;

		[Token(Token = "0x40009CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("This should NOT be a child of this body. This should be a GameObject that contains all the tracked objects (head/controllers)")]
		public Transform trackingContainer;

		[Token(Token = "0x40009CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Hand handRight;

		[Token(Token = "0x40009CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Hand handLeft;

		[Token(Token = "0x40009CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AutoToggleHeader("Movement", 0, 0)]
		public bool useMovement;

		[Token(Token = "0x40009D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[EnableIf("useMovement")]
		[Tooltip("Helps increase camera smoothness when moving, but might limit movement ")]
		public bool interpolateMovement;

		[Token(Token = "0x40009D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Movement speed when isGrounded")]
		[EnableIf("useMovement")]
		public float moveSpeed;

		[Token(Token = "0x40009D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Maximum distance that the head is allowed to be from the body before movement on that axis is stopped")]
		[EnableIf("useMovement")]
		[Min(0.1f)]
		public float maxHeadDistance;

		[Token(Token = "0x40009D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float heightOffset;

		[Token(Token = "0x40009D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Whether or not the capsule height should be adjusted to match the headCamera height")]
		[AutoToggleHeader("Auto Adjust Height", 0, 0)]
		public bool autoAdjustColliderHeight;

		[Token(Token = "0x40009D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Minimum and maximum auto adjusted height, to adjust height without auto adjustment change capsule collider height instead")]
		[ShowIf("autoAdjustColliderHeight")]
		public Vector2 minMaxHeight;

		[Token(Token = "0x40009D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("Whether or not to use snap turning or smooth turning")]
		[Min(0f)]
		[AutoToggleHeader("Snap Turning", 0, 0)]
		public bool snapTurning;

		[Token(Token = "0x40009D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[ShowIf("snapTurning")]
		[Tooltip("turn speed when not using snap turning - if snap turning, represents angle per snap")]
		public float snapTurnAngle;

		[Token(Token = "0x40009D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[HideIf("snapTurning")]
		public float smoothTurnSpeed;

		[Token(Token = "0x40009D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AutoToggleHeader("Use Grounding", 0, 0)]
		public bool useGrounding;

		[Token(Token = "0x40009DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[EnableIf("useGrounding")]
		[Min(0f)]
		[Tooltip("Maximum height that the body can step up onto")]
		public float maxStepHeight;

		[Token(Token = "0x40009DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[EnableIf("useGrounding")]
		[Tooltip("Maximum angle the player can walk on")]
		[Min(0f)]
		public float maxStepAngle;

		[Token(Token = "0x40009DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[EnableIf("useGrounding")]
		[Tooltip("The layers that count as ground")]
		public LayerMask groundLayerMask;

		[Token(Token = "0x40009DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[EnableIf("useGrounding")]
		public bool crouching;

		[Token(Token = "0x40009DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[EnableIf("useGrounding")]
		public float crouchHeight;

		[Token(Token = "0x40009DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AutoToggleHeader("Enable Climbing", 0, 0)]
		[Tooltip("Whether or not the player can use Climbable objects  (Objects with the Climbable component)")]
		public bool allowClimbing;

		[Token(Token = "0x40009E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		[Tooltip("Whether or not the player move while climbing")]
		[ShowIf("allowClimbing")]
		public bool allowClimbingMovement;

		[Token(Token = "0x40009E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[ShowIf("allowClimbing")]
		[Tooltip("How quickly the player can climb")]
		public Vector3 climbingStrength;

		[Token(Token = "0x40009E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Whether or not the player can use Pushable objects (Objects with the Pushable component)")]
		[AutoToggleHeader("Enable Pushing", 0, 0)]
		public bool allowBodyPushing;

		[Token(Token = "0x40009E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Tooltip("How quickly the player can climb")]
		[EnableIf("allowBodyPushing")]
		public Vector3 pushingStrength;

		[Token(Token = "0x40009E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AutoToggleHeader("Enable Platforming", 0, 0)]
		[Tooltip("Platforms will move the player with them. A platform is an object with the PlayerPlatform component on it")]
		public bool allowPlatforms;

		[Token(Token = "0x40009E5")]
		public const string HandPlayerLayer = "HandPlayer";

		[Token(Token = "0x40009E6")]
		private const int groundRayCount = 21;

		[Token(Token = "0x40009E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float movementDeadzone;

		[Token(Token = "0x40009E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float turnDeadzone;

		[Token(Token = "0x40009E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float turnResetzone;

		[Token(Token = "0x40009EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float groundedOffset;

		[Token(Token = "0x40009EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private float headFollowSpeed;

		[Token(Token = "0x40009EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float groundedDrag;

		[Token(Token = "0x40009ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private HeadPhysicsFollower headPhysicsFollower;

		[Token(Token = "0x40009EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Rigidbody body;

		[Token(Token = "0x40009EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private CapsuleCollider bodyCapsule;

		[Token(Token = "0x40009F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Vector3 moveDirection;

		[Token(Token = "0x40009F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private Vector3 moveVelocity;

		[Token(Token = "0x40009F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private List<Vector3> moveDirections;

		[Token(Token = "0x40009F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Vector3 climbAxis;

		[Token(Token = "0x40009F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private Vector3 adjustedOffset;

		[Token(Token = "0x40009F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private float turningAxis;

		[Token(Token = "0x40009F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private float deltaY;

		[Token(Token = "0x40009F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private bool isGrounded;

		[Token(Token = "0x40009F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x121")]
		private bool axisReset;

		[Token(Token = "0x40009F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private float playerHeight;

		[Token(Token = "0x40009FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private float lastHeightOffset;

		[Token(Token = "0x40009FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private bool lastCrouching;

		[Token(Token = "0x40009FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Hand lastRightHand;

		[Token(Token = "0x40009FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Hand lastLeftHand;

		[Token(Token = "0x40009FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Dictionary<Hand, Climbable> climbing;

		[Token(Token = "0x40009FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Dictionary<Pushable, Hand> pushRight;

		[Token(Token = "0x4000A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Dictionary<Pushable, int> pushRightCount;

		[Token(Token = "0x4000A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private Dictionary<Pushable, Hand> pushLeft;

		[Token(Token = "0x4000A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private Dictionary<Pushable, int> pushLeftCount;

		[Token(Token = "0x4000A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private Vector3 pushAxis;

		[Token(Token = "0x4000A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private List<PlayerPlatform> platforms;

		[Token(Token = "0x4000A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private Dictionary<PlayerPlatform, int> platformsCount;

		[Token(Token = "0x4000A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private Dictionary<PlayerPlatform, Vector3> platformPositions;

		[Token(Token = "0x4000A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private Dictionary<PlayerPlatform, Quaternion> platformRotations;

		[Token(Token = "0x4000A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private Quaternion startRot;

		[Token(Token = "0x4000A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private float headDistance;

		[Token(Token = "0x4000A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private InterpolatedTransform interpolatedTransform;

		[Token(Token = "0x4000A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private Transform _moveTo;

		[Token(Token = "0x1700010D")]
		private Transform moveTo
		{
			[Token(Token = "0x60009F6")]
			[Address(RVA = "0xF64F04", Offset = "0xF64F04", VA = "0xF64F04")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009F7")]
		[Address(RVA = "0xF65048", Offset = "0xF65048", VA = "0xF65048", Slot = "4")]
		public virtual void Start()
		{
		}

		[Token(Token = "0x60009F8")]
		[Address(RVA = "0xF656F0", Offset = "0xF656F0", VA = "0xF656F0", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x60009F9")]
		[Address(RVA = "0xF65910", Offset = "0xF65910", VA = "0xF65910", Slot = "6")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x60009FA")]
		[Address(RVA = "0xF6535C", Offset = "0xF6535C", VA = "0xF6535C")]
		private void CreateHeadFollower()
		{
		}

		[Token(Token = "0x60009FB")]
		[Address(RVA = "0xF65BF0", Offset = "0xF65BF0", VA = "0xF65BF0")]
		private void CheckHands()
		{
		}

		[Token(Token = "0x60009FC")]
		[Address(RVA = "0xF65710", Offset = "0xF65710", VA = "0xF65710")]
		private void EnableHand(Hand hand)
		{
		}

		[Token(Token = "0x60009FD")]
		[Address(RVA = "0xF65930", Offset = "0xF65930", VA = "0xF65930")]
		private void DisableHand(Hand hand)
		{
		}

		[Token(Token = "0x60009FE")]
		[Address(RVA = "0xF65CDC", Offset = "0xF65CDC", VA = "0xF65CDC", Slot = "7")]
		public virtual void Move(Vector2 axis, bool useDeadzone = false)
		{
		}

		[Token(Token = "0x60009FF")]
		[Address(RVA = "0xF65D38", Offset = "0xF65D38", VA = "0xF65D38", Slot = "8")]
		public virtual void Move(Vector3 axis, bool useDeadzone = false)
		{
		}

		[Token(Token = "0x6000A00")]
		[Address(RVA = "0xF65D94", Offset = "0xF65D94", VA = "0xF65D94", Slot = "9")]
		public virtual void AddMove(Vector3 axis, bool useDeadzone = false)
		{
		}

		[Token(Token = "0x6000A01")]
		[Address(RVA = "0xF65ECC", Offset = "0xF65ECC", VA = "0xF65ECC", Slot = "10")]
		public virtual void AddVelocity(Vector3 velocity)
		{
		}

		[Token(Token = "0x6000A02")]
		[Address(RVA = "0xF65EEC", Offset = "0xF65EEC", VA = "0xF65EEC", Slot = "11")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000A03")]
		[Address(RVA = "0xF66050", Offset = "0xF66050", VA = "0xF66050", Slot = "12")]
		public virtual void Turn(float turnAxis)
		{
		}

		[Token(Token = "0x6000A04")]
		[Address(RVA = "0xF66058", Offset = "0xF66058", VA = "0xF66058", Slot = "13")]
		protected virtual void UpdateMove(float deltaTime)
		{
		}

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0xF66968", Offset = "0xF66968", VA = "0xF66968")]
		private Vector3 AlterDirection(Vector3 moveAxis, float deltaTime)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A06")]
		[Address(RVA = "0xF673D0", Offset = "0xF673D0", VA = "0xF673D0", Slot = "14")]
		protected virtual void UpdateTurn()
		{
		}

		[Token(Token = "0x6000A07")]
		[Address(RVA = "0xF67730", Offset = "0xF67730", VA = "0xF67730", Slot = "15")]
		public virtual void SetPosition(Vector3 position)
		{
		}

		[Token(Token = "0x6000A08")]
		[Address(RVA = "0xF677B8", Offset = "0xF677B8", VA = "0xF677B8", Slot = "16")]
		public virtual void SetPosition(Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0xF67CD4", Offset = "0xF67CD4", VA = "0xF67CD4", Slot = "17")]
		public virtual void SetRotation(Quaternion rotation)
		{
		}

		[Token(Token = "0x6000A0A")]
		[Address(RVA = "0xF6808C", Offset = "0xF6808C", VA = "0xF6808C", Slot = "18")]
		public virtual void AddRotation(Quaternion addRotation)
		{
		}

		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0xF683AC", Offset = "0xF683AC", VA = "0xF683AC", Slot = "19")]
		public virtual void AddLocalRotation(Quaternion addRotation)
		{
		}

		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0xF686A0", Offset = "0xF686A0", VA = "0xF686A0", Slot = "20")]
		public virtual void Recenter()
		{
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0xF68848", Offset = "0xF68848", VA = "0xF68848", Slot = "21")]
		protected virtual void Ground(float radius, float yPos, Transform transform)
		{
		}

		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0xF69050", Offset = "0xF69050", VA = "0xF69050")]
		public bool IsGrounded()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0xF69058", Offset = "0xF69058", VA = "0xF69058")]
		public void ToggleFlying()
		{
		}

		[Token(Token = "0x6000A10")]
		[Address(RVA = "0xF69068", Offset = "0xF69068", VA = "0xF69068", Slot = "22")]
		protected virtual void UpdatePlayerHeight()
		{
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0xF691D0", Offset = "0xF691D0", VA = "0xF691D0", Slot = "23")]
		protected virtual void StartPush(Hand hand, GameObject other)
		{
		}

		[Token(Token = "0x6000A12")]
		[Address(RVA = "0xF69404", Offset = "0xF69404", VA = "0xF69404", Slot = "24")]
		protected virtual void StopPush(Hand hand, GameObject other)
		{
		}

		[Token(Token = "0x6000A13")]
		[Address(RVA = "0xF695F8", Offset = "0xF695F8", VA = "0xF695F8", Slot = "25")]
		protected virtual void StartGrabPush(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000A14")]
		[Address(RVA = "0xF69850", Offset = "0xF69850", VA = "0xF69850", Slot = "26")]
		protected virtual void EndGrabPush(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000A15")]
		[Address(RVA = "0xF699C4", Offset = "0xF699C4", VA = "0xF699C4", Slot = "27")]
		protected virtual void ApplyPushingForce()
		{
		}

		[Token(Token = "0x6000A16")]
		[Address(RVA = "0xF66C90", Offset = "0xF66C90", VA = "0xF66C90")]
		public bool IsPushing()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A17")]
		[Address(RVA = "0xF6A3BC", Offset = "0xF6A3BC", VA = "0xF6A3BC", Slot = "28")]
		protected virtual void StartClimb(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000A18")]
		[Address(RVA = "0xF6A624", Offset = "0xF6A624", VA = "0xF6A624", Slot = "29")]
		protected virtual void EndClimb(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000A19")]
		[Address(RVA = "0xF6A6E4", Offset = "0xF6A6E4", VA = "0xF6A6E4", Slot = "30")]
		protected virtual void ApplyClimbingForce()
		{
		}

		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0xF66B28", Offset = "0xF66B28", VA = "0xF66B28")]
		public bool IsClimbing()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A1B")]
		[Address(RVA = "0xF6A9D8", Offset = "0xF6A9D8", VA = "0xF6A9D8", Slot = "31")]
		protected virtual void CheckPlatforms()
		{
		}

		[Token(Token = "0x6000A1C")]
		[Address(RVA = "0xF6B004", Offset = "0xF6B004", VA = "0xF6B004", Slot = "32")]
		protected virtual void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000A1D")]
		[Address(RVA = "0xF6B238", Offset = "0xF6B238", VA = "0xF6B238", Slot = "33")]
		protected virtual void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000A1E")]
		[Address(RVA = "0xF6B3EC", Offset = "0xF6B3EC", VA = "0xF6B3EC")]
		public static LayerMask GetPhysicsLayerMask(int currentLayer)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000A1F")]
		[Address(RVA = "0xF6B454", Offset = "0xF6B454", VA = "0xF6B454")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000A20")]
		[Address(RVA = "0xF6BAC8", Offset = "0xF6BAC8", VA = "0xF6BAC8")]
		public AutoHandPlayer()
		{
		}
	}
	[Token(Token = "0x200019E")]
	[RequireComponent(typeof(Grabbable))]
	public class Climbable : MonoBehaviour
	{
		[Token(Token = "0x4000A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 axis;

		[Token(Token = "0x6000A26")]
		[Address(RVA = "0xF6C00C", Offset = "0xF6C00C", VA = "0xF6C00C")]
		public Climbable()
		{
		}
	}
	[Token(Token = "0x200019F")]
	[RequireComponent(typeof(Rigidbody))]
	public class HeadPhysicsFollower : MonoBehaviour
	{
		[Token(Token = "0x4000A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("References")]
		public Camera headCamera;

		[Token(Token = "0x4000A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform trackingContainer;

		[Token(Token = "0x4000A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform followBody;

		[Token(Token = "0x4000A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Follow Settings")]
		public float followStrength;

		[Token(Token = "0x4000A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("The maximum allowed distance from the body for the headCamera to still move")]
		public float maxBodyDistance;

		[Token(Token = "0x4000A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal SphereCollider headCollider;

		[Token(Token = "0x4000A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 startHeadPos;

		[Token(Token = "0x4000A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool started;

		[Token(Token = "0x4000A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform _moveTo;

		[Token(Token = "0x4000A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal Rigidbody body;

		[Token(Token = "0x4000A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CollisionTracker collisionTracker;

		[Token(Token = "0x1700010E")]
		private Transform moveTo
		{
			[Token(Token = "0x6000A27")]
			[Address(RVA = "0xF6C06C", Offset = "0xF6C06C", VA = "0xF6C06C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A28")]
		[Address(RVA = "0xF6C1DC", Offset = "0xF6C1DC", VA = "0xF6C1DC")]
		public void Start()
		{
		}

		[Token(Token = "0x6000A29")]
		[Address(RVA = "0xF6C3F0", Offset = "0xF6C3F0", VA = "0xF6C3F0")]
		internal void Init()
		{
		}

		[Token(Token = "0x6000A2A")]
		[Address(RVA = "0xF6C5D4", Offset = "0xF6C5D4", VA = "0xF6C5D4")]
		protected void FixedUpdate()
		{
		}

		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0xF6C6BC", Offset = "0xF6C6BC", VA = "0xF6C6BC")]
		public bool Started()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0xF6C6C4", Offset = "0xF6C6C4", VA = "0xF6C6C4", Slot = "4")]
		internal virtual void MoveTo()
		{
		}

		[Token(Token = "0x6000A2D")]
		[Address(RVA = "0xF6BFF4", Offset = "0xF6BFF4", VA = "0xF6BFF4")]
		public int CollisionCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000A2E")]
		[Address(RVA = "0xF6C920", Offset = "0xF6C920", VA = "0xF6C920")]
		public HeadPhysicsFollower()
		{
		}
	}
	[Token(Token = "0x20001A0")]
	[DefaultExecutionOrder(-50)]
	[RequireComponent(typeof(InterpolatedTransformUpdater))]
	public class InterpolatedTransform : MonoBehaviour
	{
		[Token(Token = "0x20001A1")]
		private struct TransformData
		{
			[Token(Token = "0x4000A1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 position;

			[Token(Token = "0x4000A20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Quaternion rotation;

			[Token(Token = "0x4000A21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 scale;

			[Token(Token = "0x6000A39")]
			[Address(RVA = "0xF6CB64", Offset = "0xF6CB64", VA = "0xF6CB64")]
			public TransformData(Vector3 position, Quaternion rotation, Vector3 scale)
			{
			}
		}

		[Token(Token = "0x20001A2")]
		[CompilerGenerated]
		private sealed class <Disable>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InterpolatedTransform <>4__this;

			[Token(Token = "0x4000A25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float time;

			[Token(Token = "0x1700010F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000A3D")]
				[Address(RVA = "0xF6D198", Offset = "0xF6D198", VA = "0xF6D198", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000110")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A3F")]
				[Address(RVA = "0xF6D1E0", Offset = "0xF6D1E0", VA = "0xF6D1E0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A3A")]
			[Address(RVA = "0xF6D090", Offset = "0xF6D090", VA = "0xF6D090")]
			[DebuggerHidden]
			public <Disable>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x6000A3B")]
			[Address(RVA = "0xF6D0C8", Offset = "0xF6D0C8", VA = "0xF6D0C8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A3C")]
			[Address(RVA = "0xF6D0CC", Offset = "0xF6D0CC", VA = "0xF6D0CC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A3E")]
			[Address(RVA = "0xF6D1A0", Offset = "0xF6D1A0", VA = "0xF6D1A0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TransformData[] m_lastTransforms;

		[Token(Token = "0x4000A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int m_newTransformIndex;

		[Token(Token = "0x4000A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool run;

		[Token(Token = "0x4000A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Coroutine disableForTime;

		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0xF6C934", Offset = "0xF6C934", VA = "0xF6C934")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A30")]
		[Address(RVA = "0xF6CA24", Offset = "0xF6CA24", VA = "0xF6CA24")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000A31")]
		[Address(RVA = "0xF6CA28", Offset = "0xF6CA28", VA = "0xF6CA28")]
		public void ForgetPreviousTransforms()
		{
		}

		[Token(Token = "0x6000A32")]
		[Address(RVA = "0xF6CB88", Offset = "0xF6CB88", VA = "0xF6CB88")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0xF6CC90", Offset = "0xF6CC90", VA = "0xF6CC90")]
		public void LateFixedUpdate()
		{
		}

		[Token(Token = "0x6000A34")]
		[Address(RVA = "0xF6CD90", Offset = "0xF6CD90", VA = "0xF6CD90")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A35")]
		[Address(RVA = "0xF6768C", Offset = "0xF6768C", VA = "0xF6768C")]
		public void DisableForSeconds(float time)
		{
		}

		[Token(Token = "0x6000A36")]
		[Address(RVA = "0xF6D00C", Offset = "0xF6D00C", VA = "0xF6D00C")]
		[IteratorStateMachine(typeof(<Disable>d__11))]
		private IEnumerator Disable(float time)
		{
			return null;
		}

		[Token(Token = "0x6000A37")]
		[Address(RVA = "0xF6CD80", Offset = "0xF6CD80", VA = "0xF6CD80")]
		private int OldTransformIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6000A38")]
		[Address(RVA = "0xF6D0B8", Offset = "0xF6D0B8", VA = "0xF6D0B8")]
		public InterpolatedTransform()
		{
		}
	}
	[Token(Token = "0x20001A3")]
	[DefaultExecutionOrder(100)]
	public class InterpolatedTransformUpdater : MonoBehaviour
	{
		[Token(Token = "0x4000A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private InterpolatedTransform _interpolatedTransform;

		[Token(Token = "0x17000111")]
		private InterpolatedTransform interpolatedTransform
		{
			[Token(Token = "0x6000A40")]
			[Address(RVA = "0xF6D1E8", Offset = "0xF6D1E8", VA = "0xF6D1E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A41")]
		[Address(RVA = "0xF6D290", Offset = "0xF6D290", VA = "0xF6D290")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000A42")]
		[Address(RVA = "0xF6D2AC", Offset = "0xF6D2AC", VA = "0xF6D2AC")]
		public InterpolatedTransformUpdater()
		{
		}
	}
	[Token(Token = "0x20001A4")]
	[DefaultExecutionOrder(-100)]
	public class InterpolationController : MonoBehaviour
	{
		[Token(Token = "0x4000A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float[] m_lastFixedUpdateTimes;

		[Token(Token = "0x4000A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int m_newTimeIndex;

		[Token(Token = "0x4000A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float m_interpolationFactor;

		[Token(Token = "0x17000112")]
		public static float InterpolationFactor
		{
			[Token(Token = "0x6000A43")]
			[Address(RVA = "0xF6D2B4", Offset = "0xF6D2B4", VA = "0xF6D2B4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0xF6D2FC", Offset = "0xF6D2FC", VA = "0xF6D2FC")]
		public void Start()
		{
		}

		[Token(Token = "0x6000A45")]
		[Address(RVA = "0xF6D35C", Offset = "0xF6D35C", VA = "0xF6D35C")]
		public void FixedUpdate()
		{
		}

		[Token(Token = "0x6000A46")]
		[Address(RVA = "0xF6D3C4", Offset = "0xF6D3C4", VA = "0xF6D3C4")]
		public void Update()
		{
		}

		[Token(Token = "0x6000A47")]
		[Address(RVA = "0xF6D3B4", Offset = "0xF6D3B4", VA = "0xF6D3B4")]
		private int OldTimeIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0xF6D484", Offset = "0xF6D484", VA = "0xF6D484")]
		public InterpolationController()
		{
		}
	}
	[Token(Token = "0x20001A5")]
	public class PlayerPlatform : MonoBehaviour
	{
		[Token(Token = "0x6000A49")]
		[Address(RVA = "0xF6D48C", Offset = "0xF6D48C", VA = "0xF6D48C")]
		public PlayerPlatform()
		{
		}
	}
	[Token(Token = "0x20001A6")]
	public class Teleporter : MonoBehaviour
	{
		[Token(Token = "0x4000A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Teleport")]
		[Tooltip("The object to teleport")]
		public GameObject teleportObject;

		[Token(Token = "0x4000A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Can be left empty - Used for if there is a container that should be teleported in addition to the main teleport object")]
		public Transform[] additionalTeleports;

		[Token(Token = "0x4000A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The Object to Shoot the Beam From")]
		[Header("Aim Settings")]
		public Transform aimer;

		[Token(Token = "0x4000A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Layers You Can Teleport On")]
		public LayerMask layer;

		[Token(Token = "0x4000A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("The Maximum Slope You Can Teleport On")]
		public float maxSurfaceAngle;

		[Token(Token = "0x4000A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Min(0f)]
		public float distanceMultiplyer;

		[Token(Token = "0x4000A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Min(0f)]
		public float curveStrength;

		[Token(Token = "0x4000A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Use Worldspace Must be True")]
		public LineRenderer line;

		[Token(Token = "0x4000A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Maximum Length of The Teleport Line")]
		public int lineSegments;

		[Token(Token = "0x4000A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Line Settings")]
		public Gradient canTeleportColor;

		[Token(Token = "0x4000A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Gradient cantTeleportColor;

		[Token(Token = "0x4000A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("This gameobject will match the position of the teleport point when aiming")]
		public GameObject indicator;

		[Token(Token = "0x4000A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Unity Events")]
		public UnityEvent OnStartTeleport;

		[Token(Token = "0x4000A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UnityEvent OnStopTeleport;

		[Token(Token = "0x4000A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public UnityEvent OnTeleport;

		[Token(Token = "0x4000A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3[] lineArr;

		[Token(Token = "0x4000A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool aiming;

		[Token(Token = "0x4000A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		private bool hitting;

		[Token(Token = "0x4000A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private RaycastHit aimHit;

		[Token(Token = "0x4000A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private HandTeleportGuard[] teleportGuards;

		[Token(Token = "0x4000A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private AutoHandPlayer playerBody;

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0xF6D494", Offset = "0xF6D494", VA = "0xF6D494")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0xF6D5FC", Offset = "0xF6D5FC", VA = "0xF6D5FC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0xF6D63C", Offset = "0xF6D63C", VA = "0xF6D63C")]
		private void CalculateTeleport()
		{
		}

		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0xF6DB68", Offset = "0xF6DB68", VA = "0xF6DB68")]
		private void DrawIndicator()
		{
		}

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0xF6DC7C", Offset = "0xF6DC7C", VA = "0xF6DC7C")]
		public void StartTeleport()
		{
		}

		[Token(Token = "0x6000A4F")]
		[Address(RVA = "0xF6DC9C", Offset = "0xF6DC9C", VA = "0xF6DC9C")]
		public void CancelTeleport()
		{
		}

		[Token(Token = "0x6000A50")]
		[Address(RVA = "0xF6DCDC", Offset = "0xF6DCDC", VA = "0xF6DCDC")]
		public void Teleport()
		{
		}

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0xF6E028", Offset = "0xF6E028", VA = "0xF6E028")]
		public Teleporter()
		{
		}
	}
	[Token(Token = "0x20001A7")]
	public class AutoInputModule : BaseInputModule
	{
		[Token(Token = "0x4000A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<HandCanvasPointer> pointers;

		[Token(Token = "0x4000A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private PointerEventData[] eventDatas;

		[Token(Token = "0x4000A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AutoInputModule _instance;

		[Token(Token = "0x4000A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool _isDestroyed;

		[Token(Token = "0x17000113")]
		public AutoInputModule Instance
		{
			[Token(Token = "0x6000A52")]
			[Address(RVA = "0xF6E170", Offset = "0xF6E170", VA = "0xF6E170")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0xF6E29C", Offset = "0xF6E29C", VA = "0xF6E29C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0xF6E2A4", Offset = "0xF6E2A4", VA = "0xF6E2A4", Slot = "8")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0xF6E2B0", Offset = "0xF6E2B0", VA = "0xF6E2B0")]
		public int AddPointer(HandCanvasPointer pointer)
		{
			return default(int);
		}

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0xF6E568", Offset = "0xF6E568", VA = "0xF6E568")]
		public void RemovePointer(HandCanvasPointer pointer)
		{
		}

		[Token(Token = "0x6000A57")]
		[Address(RVA = "0xF6E8E8", Offset = "0xF6E8E8", VA = "0xF6E8E8", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x6000A58")]
		[Address(RVA = "0xF6ED80", Offset = "0xF6ED80", VA = "0xF6ED80")]
		public void ProcessPress(int index)
		{
		}

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0xF6F008", Offset = "0xF6F008", VA = "0xF6F008")]
		public void ProcessRelease(int index)
		{
		}

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0xF6F3B4", Offset = "0xF6F3B4", VA = "0xF6F3B4")]
		public PointerEventData GetData(int index)
		{
			return null;
		}

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0xF6F3E4", Offset = "0xF6F3E4", VA = "0xF6F3E4")]
		public AutoInputModule()
		{
		}
	}
	[Token(Token = "0x20001A8")]
	public delegate void CollisionEvent(GameObject from);
	[Token(Token = "0x20001A9")]
	public class CollisionTracker : MonoBehaviour
	{
		[Token(Token = "0x4000A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool disableCollisionTracking;

		[Token(Token = "0x4000A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool disableTriggersTracking;

		[Token(Token = "0x17000114")]
		public int collisionCount
		{
			[Token(Token = "0x6000A68")]
			[Address(RVA = "0xF6C8D8", Offset = "0xF6C8D8", VA = "0xF6C8D8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000115")]
		public int triggerCount
		{
			[Token(Token = "0x6000A69")]
			[Address(RVA = "0xF6FA70", Offset = "0xF6FA70", VA = "0xF6FA70")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000116")]
		public List<GameObject> triggerObjects
		{
			[Token(Token = "0x6000A6A")]
			[Address(RVA = "0xF6FAB8", Offset = "0xF6FAB8", VA = "0xF6FAB8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A6B")]
			[Address(RVA = "0xF6FAC0", Offset = "0xF6FAC0", VA = "0xF6FAC0")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x17000117")]
		public List<int> triggerObjectsCount
		{
			[Token(Token = "0x6000A6C")]
			[Address(RVA = "0xF6FAC8", Offset = "0xF6FAC8", VA = "0xF6FAC8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A6D")]
			[Address(RVA = "0xF6FAD0", Offset = "0xF6FAD0", VA = "0xF6FAD0")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x17000118")]
		public List<GameObject> collisionObjects
		{
			[Token(Token = "0x6000A6E")]
			[Address(RVA = "0xF6FAD8", Offset = "0xF6FAD8", VA = "0xF6FAD8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A6F")]
			[Address(RVA = "0xF6FAE0", Offset = "0xF6FAE0", VA = "0xF6FAE0")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x17000119")]
		public List<int> collisionObjectsCount
		{
			[Token(Token = "0x6000A70")]
			[Address(RVA = "0xF6FAE8", Offset = "0xF6FAE8", VA = "0xF6FAE8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A71")]
			[Address(RVA = "0xF6FAF0", Offset = "0xF6FAF0", VA = "0xF6FAF0")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x14000026")]
		public event CollisionEvent OnCollisionFirstEnter
		{
			[Token(Token = "0x6000A60")]
			[Address(RVA = "0xF6F590", Offset = "0xF6F590", VA = "0xF6F590")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000A61")]
			[Address(RVA = "0xF6F62C", Offset = "0xF6F62C", VA = "0xF6F62C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000027")]
		public event CollisionEvent OnCollisionLastExit
		{
			[Token(Token = "0x6000A62")]
			[Address(RVA = "0xF6F6C8", Offset = "0xF6F6C8", VA = "0xF6F6C8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000A63")]
			[Address(RVA = "0xF6F764", Offset = "0xF6F764", VA = "0xF6F764")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000028")]
		public event CollisionEvent OnTriggerFirstEnter
		{
			[Token(Token = "0x6000A64")]
			[Address(RVA = "0xF6F800", Offset = "0xF6F800", VA = "0xF6F800")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000A65")]
			[Address(RVA = "0xF6F89C", Offset = "0xF6F89C", VA = "0xF6F89C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000029")]
		public event CollisionEvent OnTriggeLastExit
		{
			[Token(Token = "0x6000A66")]
			[Address(RVA = "0xF6F938", Offset = "0xF6F938", VA = "0xF6F938")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000A67")]
			[Address(RVA = "0xF6F9D4", Offset = "0xF6F9D4", VA = "0xF6F9D4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000A72")]
		[Address(RVA = "0xF6FAF8", Offset = "0xF6FAF8", VA = "0xF6FAF8")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000A73")]
		[Address(RVA = "0xF6FBC0", Offset = "0xF6FBC0", VA = "0xF6FBC0", Slot = "4")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000A74")]
		[Address(RVA = "0xF6FE0C", Offset = "0xF6FE0C", VA = "0xF6FE0C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000A75")]
		[Address(RVA = "0xF6FE10", Offset = "0xF6FE10", VA = "0xF6FE10")]
		private void CheckCollisions()
		{
		}

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0xF700B8", Offset = "0xF700B8", VA = "0xF700B8", Slot = "5")]
		protected virtual void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000A77")]
		[Address(RVA = "0xF70318", Offset = "0xF70318", VA = "0xF70318", Slot = "6")]
		protected virtual void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x6000A78")]
		[Address(RVA = "0xF704F0", Offset = "0xF704F0", VA = "0xF704F0", Slot = "7")]
		protected virtual void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000A79")]
		[Address(RVA = "0xF7072C", Offset = "0xF7072C", VA = "0xF7072C", Slot = "8")]
		protected virtual void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000A7A")]
		[Address(RVA = "0xF708FC", Offset = "0xF708FC", VA = "0xF708FC")]
		public CollisionTracker()
		{
		}
	}
	[Token(Token = "0x20001AA")]
	public class HandCanvasPointer : MonoBehaviour
	{
		[Token(Token = "0x4000A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("References")]
		public GameObject hitPointMarker;

		[Token(Token = "0x4000A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LineRenderer lineRenderer;

		[Token(Token = "0x4000A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Ray settings")]
		public float raycastLength;

		[Token(Token = "0x4000A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool autoShowTarget;

		[Token(Token = "0x4000A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public LayerMask UILayer;

		[Token(Token = "0x4000A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Events")]
		public UnityEvent StartSelect;

		[Token(Token = "0x4000A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEvent StopSelect;

		[Token(Token = "0x4000A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEvent StartPoint;

		[Token(Token = "0x4000A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEvent StopPoint;

		[Token(Token = "0x4000A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool hover;

		[Token(Token = "0x4000A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AutoInputModule inputModule;

		[Token(Token = "0x4000A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Camera cam;

		[Token(Token = "0x4000A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int pointerIndex;

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0xF70A34", Offset = "0xF70A34", VA = "0xF70A34")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0xF70D40", Offset = "0xF70D40", VA = "0xF70D40")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000A7D")]
		[Address(RVA = "0xF70D70", Offset = "0xF70D70", VA = "0xF70D70")]
		public void SetIndex(int index)
		{
		}

		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0xF6ECB8", Offset = "0xF6ECB8", VA = "0xF6ECB8")]
		internal void Preprocess()
		{
		}

		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0xF70D78", Offset = "0xF70D78", VA = "0xF70D78")]
		public void Press()
		{
		}

		[Token(Token = "0x6000A80")]
		[Address(RVA = "0xF70E10", Offset = "0xF70E10", VA = "0xF70E10")]
		public void Release()
		{
		}

		[Token(Token = "0x6000A81")]
		[Address(RVA = "0xF70E48", Offset = "0xF70E48", VA = "0xF70E48")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0xF7109C", Offset = "0xF7109C", VA = "0xF7109C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0xF710A0", Offset = "0xF710A0", VA = "0xF710A0")]
		private void UpdateLine()
		{
		}

		[Token(Token = "0x6000A84")]
		[Address(RVA = "0xF712D4", Offset = "0xF712D4", VA = "0xF712D4")]
		private RaycastHit CreateRaycast(float dist)
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x6000A85")]
		[Address(RVA = "0xF70DCC", Offset = "0xF70DCC", VA = "0xF70DCC")]
		private void ShowRay(bool show)
		{
		}

		[Token(Token = "0x6000A86")]
		[Address(RVA = "0xF713C4", Offset = "0xF713C4", VA = "0xF713C4")]
		public HandCanvasPointer()
		{
		}
	}
	[Token(Token = "0x20001AB")]
	[RequireComponent(typeof(Rigidbody))]
	[DefaultExecutionOrder(-1)]
	public class PhysicsFollower : MonoBehaviour
	{
		[Token(Token = "0x4000A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Follow Settings")]
		[Tooltip("Follow target, the hand will always try to match this transforms rotation and position with rigidbody movements")]
		[Space]
		public Transform follow;

		[Token(Token = "0x4000A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Stops hand physics follow - to freeze from all forces change rigidbody to kinematic or change rigidbody constraints")]
		public bool freezePos;

		[Token(Token = "0x4000A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[Tooltip("Stops hand physics follow - to freeze from all forces change rigidbody to kinematic or change rigidbody constraints")]
		public bool freezeRot;

		[Token(Token = "0x4000A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("This will offset the position without offsetting the rotation pivot")]
		public Vector3 followPositionOffset;

		[Token(Token = "0x4000A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 rotationOffset;

		[Token(Token = "0x4000A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Follow target speed (This will cause jittering if turned too high)")]
		[Min(0f)]
		public float followPositionStrength;

		[Token(Token = "0x4000A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Min(0f)]
		[Tooltip("Follow target rotation speed (This will cause jittering if turned too high)")]
		public float followRotationStrength;

		[Token(Token = "0x4000A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("The maximum allowed velocity of the hand")]
		[Min(0f)]
		public float maxVelocity;

		[Token(Token = "0x4000A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal Rigidbody body;

		[Token(Token = "0x4000A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform moveTo;

		[Token(Token = "0x6000A87")]
		[Address(RVA = "0xF713DC", Offset = "0xF713DC", VA = "0xF713DC")]
		public void Start()
		{
		}

		[Token(Token = "0x6000A88")]
		[Address(RVA = "0xF713E8", Offset = "0xF713E8", VA = "0xF713E8", Slot = "4")]
		public virtual void Set()
		{
		}

		[Token(Token = "0x6000A89")]
		[Address(RVA = "0xF715BC", Offset = "0xF715BC", VA = "0xF715BC")]
		public void Update()
		{
		}

		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0xF715C8", Offset = "0xF715C8", VA = "0xF715C8", Slot = "5")]
		protected virtual void OnUpdate()
		{
		}

		[Token(Token = "0x6000A8B")]
		[Address(RVA = "0xF71780", Offset = "0xF71780", VA = "0xF71780")]
		public void FixedUpdate()
		{
		}

		[Token(Token = "0x6000A8C")]
		[Address(RVA = "0xF7178C", Offset = "0xF7178C", VA = "0xF7178C", Slot = "6")]
		protected virtual void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000A8D")]
		[Address(RVA = "0xF71974", Offset = "0xF71974", VA = "0xF71974", Slot = "7")]
		internal virtual void MoveTo()
		{
		}

		[Token(Token = "0x6000A8E")]
		[Address(RVA = "0xF71BB4", Offset = "0xF71BB4", VA = "0xF71BB4", Slot = "8")]
		internal virtual void TorqueTo()
		{
		}

		[Token(Token = "0x6000A8F")]
		[Address(RVA = "0xF71FFC", Offset = "0xF71FFC", VA = "0xF71FFC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000A90")]
		[Address(RVA = "0xF72070", Offset = "0xF72070", VA = "0xF72070")]
		public PhysicsFollower()
		{
		}
	}
	[Token(Token = "0x20001AC")]
	public class Stabbable : MonoBehaviour
	{
		[Token(Token = "0x4000A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody body;

		[Token(Token = "0x4000A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabbable grabbable;

		[Token(Token = "0x4000A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The index that must match the stabbers index to allow stabbing")]
		public int stabIndex;

		[Token(Token = "0x4000A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int maxStabbers;

		[Token(Token = "0x4000A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float positionDamper;

		[Token(Token = "0x4000A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float rotationDamper;

		[Token(Token = "0x4000A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool parentOnStab;

		[Token(Token = "0x4000A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Events")]
		public UnityEvent StartStab;

		[Token(Token = "0x4000A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEvent EndStab;

		[Token(Token = "0x4000A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public StabEvent StartStabEvent;

		[Token(Token = "0x4000A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public StabEvent EndStabEvent;

		[Token(Token = "0x4000A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int currentStabs;

		[Token(Token = "0x4000A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<Stabber> stabbing;

		[Token(Token = "0x4000A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform stabParent;

		[Token(Token = "0x6000A91")]
		[Address(RVA = "0xF72088", Offset = "0xF72088", VA = "0xF72088")]
		public void Start()
		{
		}

		[Token(Token = "0x6000A92")]
		[Address(RVA = "0xF7245C", Offset = "0xF7245C", VA = "0xF7245C", Slot = "4")]
		public virtual void OnStab(Stabber stabber)
		{
		}

		[Token(Token = "0x6000A93")]
		[Address(RVA = "0xF72560", Offset = "0xF72560", VA = "0xF72560", Slot = "5")]
		public virtual void OnEndStab(Stabber stabber)
		{
		}

		[Token(Token = "0x6000A94")]
		[Address(RVA = "0xF725F0", Offset = "0xF725F0", VA = "0xF725F0", Slot = "6")]
		public virtual bool CanStab(Stabber stabber)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A95")]
		[Address(RVA = "0xF7262C", Offset = "0xF7262C", VA = "0xF7262C")]
		public int StabbedCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000A96")]
		[Address(RVA = "0xF72674", Offset = "0xF72674", VA = "0xF72674")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000A97")]
		[Address(RVA = "0xF72754", Offset = "0xF72754", VA = "0xF72754")]
		public Stabbable()
		{
		}
	}
	[Token(Token = "0x20001AD")]
	public delegate void StabEvent(Stabber stabber, Stabbable stab);
	[Token(Token = "0x20001AE")]
	public class Stabber : MonoBehaviour
	{
		[Token(Token = "0x20001AF")]
		[CompilerGenerated]
		private sealed class <StartWait>d__31 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Stabber <>4__this;

			[Token(Token = "0x4000A93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <i>5__2;

			[Token(Token = "0x1700011A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000AAE")]
				[Address(RVA = "0xF745D4", Offset = "0xF745D4", VA = "0xF745D4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700011B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000AB0")]
				[Address(RVA = "0xF7461C", Offset = "0xF7461C", VA = "0xF7461C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000AAB")]
			[Address(RVA = "0xF72C20", Offset = "0xF72C20", VA = "0xF72C20")]
			[DebuggerHidden]
			public <StartWait>d__31(int <>1__state)
			{
			}

			[Token(Token = "0x6000AAC")]
			[Address(RVA = "0xF744D0", Offset = "0xF744D0", VA = "0xF744D0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000AAD")]
			[Address(RVA = "0xF744D4", Offset = "0xF744D4", VA = "0xF744D4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000AAF")]
			[Address(RVA = "0xF745DC", Offset = "0xF745DC", VA = "0xF745DC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Can be left null")]
		public Grabbable grabbable;

		[Token(Token = "0x4000A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Stab Settings")]
		public CapsuleCollider stabCapsule;

		[Token(Token = "0x4000A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If left empty, will default to grabbable layers")]
		public LayerMask stabbableLayers;

		[Token(Token = "0x4000A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("The index that must match the stabbables index to allow stabbing")]
		public int stabIndex;

		[Token(Token = "0x4000A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int maxStabs;

		[Token(Token = "0x4000A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Header("Joint Settings")]
		public Vector3 axis;

		[Token(Token = "0x4000A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float limit;

		[Token(Token = "0x4000A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public ConfigurableJointMotion xMotion;

		[Token(Token = "0x4000A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ConfigurableJointMotion yMotion;

		[Token(Token = "0x4000A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public ConfigurableJointMotion zMotion;

		[Token(Token = "0x4000A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ConfigurableJointMotion angularXMotion;

		[Token(Token = "0x4000A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public ConfigurableJointMotion angularYMotion;

		[Token(Token = "0x4000A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ConfigurableJointMotion angularZMotion;

		[Token(Token = "0x4000A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Space]
		public float positionDampeningMultiplyer;

		[Token(Token = "0x4000A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float rotationDampeningMultiplyer;

		[Token(Token = "0x4000A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Events")]
		public UnityEvent StartStab;

		[Token(Token = "0x4000A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UnityEvent EndStab;

		[Token(Token = "0x4000A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public StabEvent StartStabEvent;

		[Token(Token = "0x4000A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public StabEvent EndStabEvent;

		[Token(Token = "0x4000A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<Stabbable> stabbed;

		[Token(Token = "0x4000A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private List<ConfigurableJoint> stabbedJoints;

		[Token(Token = "0x4000A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Dictionary<Stabbable, int> stabbedFrames;

		[Token(Token = "0x4000A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Collider[] resultsNonAlloc;

		[Token(Token = "0x4000A89")]
		private const int STABFRAMES = 3;

		[Token(Token = "0x4000A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 startPos;

		[Token(Token = "0x4000A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private Quaternion startRot;

		[Token(Token = "0x4000A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Vector3 lastPos;

		[Token(Token = "0x4000A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Quaternion lastRot;

		[Token(Token = "0x4000A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private int frames;

		[Token(Token = "0x4000A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Dictionary<Transform, Transform> originalParents;

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0xF7285C", Offset = "0xF7285C", VA = "0xF7285C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0xF72BAC", Offset = "0xF72BAC", VA = "0xF72BAC")]
		[IteratorStateMachine(typeof(<StartWait>d__31))]
		private IEnumerator StartWait()
		{
			return null;
		}

		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0xF72C48", Offset = "0xF72C48", VA = "0xF72C48")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0xF72D70", Offset = "0xF72D70", VA = "0xF72D70", Slot = "4")]
		protected virtual void CheckStabArea()
		{
		}

		[Token(Token = "0x6000AA3")]
		[Address(RVA = "0xF736C4", Offset = "0xF736C4", VA = "0xF736C4", Slot = "5")]
		protected virtual void OnStabbableEnter(Stabbable stab)
		{
		}

		[Token(Token = "0x6000AA4")]
		[Address(RVA = "0xF73D48", Offset = "0xF73D48", VA = "0xF73D48", Slot = "6")]
		protected virtual void OnStabbableExit(Stabbable stab)
		{
		}

		[Token(Token = "0x6000AA5")]
		[Address(RVA = "0xF73F40", Offset = "0xF73F40", VA = "0xF73F40")]
		public List<Stabbable> GetStabbed()
		{
			return null;
		}

		[Token(Token = "0x6000AA6")]
		[Address(RVA = "0xF73F48", Offset = "0xF73F48", VA = "0xF73F48")]
		public int GetStabbedCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0xF73F90", Offset = "0xF73F90", VA = "0xF73F90")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0xF74408", Offset = "0xF74408", VA = "0xF74408")]
		public Stabber()
		{
		}
	}
	[Token(Token = "0x20001B0")]
	public class Stickable : MonoBehaviour
	{
		[Token(Token = "0x4000A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Sticky Settings")]
		public Rigidbody body;

		[Token(Token = "0x4000A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("How strong the joint is between the stickable and this")]
		public float stickStrength;

		[Token(Token = "0x4000A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Multiplyer for required stick speed to activate")]
		public float stickSpeedMultiplyer;

		[Token(Token = "0x4000A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("This index must match the sticky object to stick")]
		public int stickIndex;

		[Token(Token = "0x4000A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Event")]
		public UnityEvent OnStick;

		[Token(Token = "0x4000A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEvent EndStick;

		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0xF74624", Offset = "0xF74624", VA = "0xF74624")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0xF74704", Offset = "0xF74704", VA = "0xF74704")]
		public Stickable()
		{
		}
	}
	[Token(Token = "0x20001B1")]
	[RequireComponent(typeof(Rigidbody))]
	public class Sticky : MonoBehaviour
	{
		[Token(Token = "0x20001B2")]
		[CompilerGenerated]
		private sealed class <JointBreak>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000AA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000AA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000AA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Sticky <>4__this;

			[Token(Token = "0x1700011C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000ABD")]
				[Address(RVA = "0xF74F14", Offset = "0xF74F14", VA = "0xF74F14", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700011D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000ABF")]
				[Address(RVA = "0xF74F5C", Offset = "0xF74F5C", VA = "0xF74F5C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000ABA")]
			[Address(RVA = "0xF74C10", Offset = "0xF74C10", VA = "0xF74C10")]
			[DebuggerHidden]
			public <JointBreak>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x6000ABB")]
			[Address(RVA = "0xF74D28", Offset = "0xF74D28", VA = "0xF74D28", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000ABC")]
			[Address(RVA = "0xF74D2C", Offset = "0xF74D2C", VA = "0xF74D2C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000ABE")]
			[Address(RVA = "0xF74F1C", Offset = "0xF74F1C", VA = "0xF74F1C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Sticky Settings")]
		[Tooltip("How strong the joint is between the stickable and this")]
		public float stickStrength;

		[Token(Token = "0x4000A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Multiplyer for required stick speed to activate")]
		public float requiredStickSpeed;

		[Token(Token = "0x4000A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("This index must match the stickable object to stick")]
		public int stickIndex;

		[Token(Token = "0x4000A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Event")]
		public UnityEvent OnStick;

		[Token(Token = "0x4000A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody body;

		[Token(Token = "0x4000A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<Stickable> stickers;

		[Token(Token = "0x4000AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Joint> joints;

		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0xF74714", Offset = "0xF74714", VA = "0xF74714")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AB4")]
		[Address(RVA = "0xF74858", Offset = "0xF74858", VA = "0xF74858")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000AB5")]
		[Address(RVA = "0xF748D8", Offset = "0xF748D8", VA = "0xF748D8")]
		private void CreateStick(Stickable sticker)
		{
		}

		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0xF74B7C", Offset = "0xF74B7C", VA = "0xF74B7C")]
		private void OnJointBreak(float breakForce)
		{
		}

		[Token(Token = "0x6000AB7")]
		[Address(RVA = "0xF74B9C", Offset = "0xF74B9C", VA = "0xF74B9C")]
		[IteratorStateMachine(typeof(<JointBreak>d__11))]
		private IEnumerator JointBreak()
		{
			return null;
		}

		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0xF74C38", Offset = "0xF74C38", VA = "0xF74C38")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0xF74D18", Offset = "0xF74D18", VA = "0xF74D18")]
		public Sticky()
		{
		}
	}
}
namespace Autohand.Demo
{
	[Token(Token = "0x20001B3")]
	public class XRAutoHandAxisFingerBender : MonoBehaviour
	{
		[Token(Token = "0x4000AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public XRHandControllerLink controller;

		[Token(Token = "0x4000AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CommonAxis axis;

		[Token(Token = "0x4000AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public float[] bendOffsets;

		[Token(Token = "0x4000AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float lastAxis;

		[Token(Token = "0x6000AC0")]
		[Address(RVA = "0xF74F64", Offset = "0xF74F64", VA = "0xF74F64")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000AC1")]
		[Address(RVA = "0xF75014", Offset = "0xF75014", VA = "0xF75014")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000AC2")]
		[Address(RVA = "0xF75144", Offset = "0xF75144", VA = "0xF75144")]
		public XRAutoHandAxisFingerBender()
		{
		}
	}
	[Token(Token = "0x20001B4")]
	public class XRAutoHandFingerBender : MonoBehaviour
	{
		[Token(Token = "0x4000AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public XRHandControllerLink controller;

		[Token(Token = "0x4000AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CommonButton button;

		[Token(Token = "0x4000AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public float[] bendOffsets;

		[Token(Token = "0x4000AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool pressed;

		[Token(Token = "0x6000AC3")]
		[Address(RVA = "0xF7514C", Offset = "0xF7514C", VA = "0xF7514C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AC4")]
		[Address(RVA = "0xF7529C", Offset = "0xF7529C", VA = "0xF7529C")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000AC5")]
		[Address(RVA = "0xF753CC", Offset = "0xF753CC", VA = "0xF753CC")]
		public XRAutoHandFingerBender()
		{
		}
	}
	[Token(Token = "0x20001B5")]
	public class XRControllerEvent : MonoBehaviour
	{
		[Token(Token = "0x4000AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public XRHandControllerLink link;

		[Token(Token = "0x4000AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CommonButton button;

		[Token(Token = "0x4000AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEvent Pressed;

		[Token(Token = "0x4000AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEvent Released;

		[Token(Token = "0x4000AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool pressed;

		[Token(Token = "0x6000AC6")]
		[Address(RVA = "0xF753D4", Offset = "0xF753D4", VA = "0xF753D4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AC7")]
		[Address(RVA = "0xF754B0", Offset = "0xF754B0", VA = "0xF754B0")]
		public XRControllerEvent()
		{
		}
	}
	[Token(Token = "0x20001B6")]
	public enum CommonButton
	{
		[Token(Token = "0x4000AB2")]
		gripButton,
		[Token(Token = "0x4000AB3")]
		menuButton,
		[Token(Token = "0x4000AB4")]
		primaryButton,
		[Token(Token = "0x4000AB5")]
		secondaryButton,
		[Token(Token = "0x4000AB6")]
		triggerButton,
		[Token(Token = "0x4000AB7")]
		primary2DAxisClick,
		[Token(Token = "0x4000AB8")]
		primary2DAxisTouch,
		[Token(Token = "0x4000AB9")]
		secondary2DAxisClick,
		[Token(Token = "0x4000ABA")]
		secondary2DAxisTouch,
		[Token(Token = "0x4000ABB")]
		primaryTouch,
		[Token(Token = "0x4000ABC")]
		secondaryTouch,
		[Token(Token = "0x4000ABD")]
		none
	}
	[Token(Token = "0x20001B7")]
	public enum CommonAxis
	{
		[Token(Token = "0x4000ABF")]
		trigger,
		[Token(Token = "0x4000AC0")]
		grip,
		[Token(Token = "0x4000AC1")]
		none
	}
	[Token(Token = "0x20001B8")]
	public enum Common2DAxis
	{
		[Token(Token = "0x4000AC3")]
		primaryAxis,
		[Token(Token = "0x4000AC4")]
		secondaryAxis,
		[Token(Token = "0x4000AC5")]
		none
	}
	[Token(Token = "0x20001B9")]
	public class XRHandControllerLink : HandControllerLink
	{
		[Token(Token = "0x4000AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CommonButton grabButton;

		[Token(Token = "0x4000AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("This axis will bend all the fingers on the hand -> replaced with finger bender scripts")]
		public CommonAxis grabAxis;

		[Token(Token = "0x4000AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CommonButton squeezeButton;

		[Token(Token = "0x4000AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private XRNode role;

		[Token(Token = "0x4000ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool squeezing;

		[Token(Token = "0x4000ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool grabbing;

		[Token(Token = "0x4000ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private InputDevice device;

		[Token(Token = "0x4000ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<InputDevice> devices;

		[Token(Token = "0x6000AC8")]
		[Address(RVA = "0xF754B8", Offset = "0xF754B8", VA = "0xF754B8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AC9")]
		[Address(RVA = "0xF75594", Offset = "0xF75594", VA = "0xF75594")]
		private void Update()
		{
		}

		[Token(Token = "0x6000ACA")]
		[Address(RVA = "0xF75954", Offset = "0xF75954", VA = "0xF75954")]
		public List<InputDevice> Devices()
		{
			return null;
		}

		[Token(Token = "0x6000ACB")]
		[Address(RVA = "0xF75450", Offset = "0xF75450", VA = "0xF75450")]
		public bool ButtonPressed(CommonButton button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ACC")]
		[Address(RVA = "0xF7574C", Offset = "0xF7574C", VA = "0xF7574C")]
		public float GetAxis(CommonAxis axis)
		{
			return default(float);
		}

		[Token(Token = "0x6000ACD")]
		[Address(RVA = "0xF759C8", Offset = "0xF759C8", VA = "0xF759C8")]
		public Vector2 GetAxis2D(Common2DAxis axis)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000ACE")]
		[Address(RVA = "0xF75AC0", Offset = "0xF75AC0", VA = "0xF75AC0", Slot = "4")]
		public override void TryHapticImpulse(float duration, float amp, float freq = 0f)
		{
		}

		[Token(Token = "0x6000ACF")]
		[Address(RVA = "0xF757A0", Offset = "0xF757A0", VA = "0xF757A0")]
		public static InputFeatureUsage<bool> GetCommonButton(CommonButton button)
		{
			return default(InputFeatureUsage<bool>);
		}

		[Token(Token = "0x6000AD0")]
		[Address(RVA = "0xF7595C", Offset = "0xF7595C", VA = "0xF7595C")]
		public static InputFeatureUsage<float> GetCommonAxis(CommonAxis axis)
		{
			return default(InputFeatureUsage<float>);
		}

		[Token(Token = "0x6000AD1")]
		[Address(RVA = "0xF75A54", Offset = "0xF75A54", VA = "0xF75A54")]
		public static InputFeatureUsage<Vector2> GetCommon2DAxis(Common2DAxis axis)
		{
			return default(InputFeatureUsage<Vector2>);
		}

		[Token(Token = "0x6000AD2")]
		[Address(RVA = "0xF75C68", Offset = "0xF75C68", VA = "0xF75C68")]
		public XRHandControllerLink()
		{
		}
	}
	[Token(Token = "0x20001BA")]
	public class XRHandPlayerControllerLink : MonoBehaviour
	{
		[Token(Token = "0x4000ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public XRHandControllerLink moveController;

		[Token(Token = "0x4000ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public XRHandControllerLink turnController;

		[Token(Token = "0x4000AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AutoHandPlayer player;

		[Token(Token = "0x4000AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Input")]
		public Common2DAxis moveAxis;

		[Token(Token = "0x4000AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Common2DAxis turnAxis;

		[Token(Token = "0x6000AD3")]
		[Address(RVA = "0xF75CF8", Offset = "0xF75CF8", VA = "0xF75CF8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AD4")]
		[Address(RVA = "0xF75D64", Offset = "0xF75D64", VA = "0xF75D64")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000AD5")]
		[Address(RVA = "0xF75DA0", Offset = "0xF75DA0", VA = "0xF75DA0")]
		public XRHandPlayerControllerLink()
		{
		}
	}
	[Token(Token = "0x20001BB")]
	public class XRHandPointGrabLink : MonoBehaviour
	{
		[Token(Token = "0x4000AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HandDistanceGrabber pointGrab;

		[Token(Token = "0x4000AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public XRHandControllerLink link;

		[Token(Token = "0x4000AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Input")]
		public CommonButton pointInput;

		[Token(Token = "0x4000AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public CommonButton selectInput;

		[Token(Token = "0x4000AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool pointing;

		[Token(Token = "0x4000AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool selecting;

		[Token(Token = "0x6000AD6")]
		[Address(RVA = "0xF75DA8", Offset = "0xF75DA8", VA = "0xF75DA8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AD7")]
		[Address(RVA = "0xF75E98", Offset = "0xF75E98", VA = "0xF75E98")]
		public XRHandPointGrabLink()
		{
		}
	}
	[Token(Token = "0x20001BC")]
	public class XRHeadTracking : MonoBehaviour
	{
		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TrackingOriginModeFlags mode;

		[Token(Token = "0x6000AD8")]
		[Address(RVA = "0xF75EA0", Offset = "0xF75EA0", VA = "0xF75EA0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AD9")]
		[Address(RVA = "0xF75FBC", Offset = "0xF75FBC", VA = "0xF75FBC")]
		public XRHeadTracking()
		{
		}
	}
	[Token(Token = "0x20001BD")]
	public class XRTeleporterLink : MonoBehaviour
	{
		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Teleporter hand;

		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public XRNode role;

		[Token(Token = "0x4000ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public CommonButton button;

		[Token(Token = "0x4000ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool teleporting;

		[Token(Token = "0x4000ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private InputDevice device;

		[Token(Token = "0x4000ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<InputDevice> devices;

		[Token(Token = "0x6000ADA")]
		[Address(RVA = "0xF75FCC", Offset = "0xF75FCC", VA = "0xF75FCC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000ADB")]
		[Address(RVA = "0xF76048", Offset = "0xF76048", VA = "0xF76048")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000ADC")]
		[Address(RVA = "0xF76150", Offset = "0xF76150", VA = "0xF76150")]
		public XRTeleporterLink()
		{
		}
	}
	[Token(Token = "0x20001BE")]
	public class CubeBreak : MonoBehaviour
	{
		[Token(Token = "0x4000AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float force;

		[Token(Token = "0x4000AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3[] offsets;

		[Token(Token = "0x6000ADD")]
		[Address(RVA = "0xF76158", Offset = "0xF76158", VA = "0xF76158")]
		[ContextMenu("Break")]
		public void Break()
		{
		}

		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0xF76754", Offset = "0xF76754", VA = "0xF76754")]
		public CubeBreak()
		{
		}
	}
	[Token(Token = "0x20001BF")]
	public class Door : PhysicsGadgetHingeAngleReader
	{
		[Token(Token = "0x4000AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Door should start closed")]
		public Rigidbody body;

		[Token(Token = "0x4000AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 closedPosition;

		[Token(Token = "0x4000AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Quaternion closedRotation;

		[Token(Token = "0x4000AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("The door needs to reach this level of open before it can be reset")]
		public float minThreshold;

		[Token(Token = "0x4000AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float midThreshold;

		[Token(Token = "0x4000AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("The door needs to reach this level of open before it can be reset")]
		public float maxThreshold;

		[Token(Token = "0x4000AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Space]
		public UnityEvent OnMax;

		[Token(Token = "0x4000AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public UnityEvent OnMid;

		[Token(Token = "0x4000AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public UnityEvent OnMin;

		[Token(Token = "0x4000AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool min;

		[Token(Token = "0x4000AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		private bool max;

		[Token(Token = "0x4000AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9A")]
		private bool mid;

		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0xF76874", Offset = "0xF76874", VA = "0xF76874")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000AE0")]
		[Address(RVA = "0xF7698C", Offset = "0xF7698C", VA = "0xF7698C")]
		protected void FixedUpdate()
		{
		}

		[Token(Token = "0x6000AE1")]
		[Address(RVA = "0xF76AC8", Offset = "0xF76AC8", VA = "0xF76AC8")]
		private void Max()
		{
		}

		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0xF76B0C", Offset = "0xF76B0C", VA = "0xF76B0C")]
		private void Mid()
		{
		}

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0xF76AE8", Offset = "0xF76AE8", VA = "0xF76AE8")]
		private void Min()
		{
		}

		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0xF76B30", Offset = "0xF76B30", VA = "0xF76B30")]
		public void ClosedDoor()
		{
		}

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0xF76B90", Offset = "0xF76B90", VA = "0xF76B90")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0xF76C70", Offset = "0xF76C70", VA = "0xF76C70")]
		public Door()
		{
		}
	}
	[Token(Token = "0x20001C0")]
	public class ExplosionSource : MonoBehaviour
	{
		[Token(Token = "0x4000AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float radius;

		[Token(Token = "0x4000AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float force;

		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0xF76C94", Offset = "0xF76C94", VA = "0xF76C94")]
		public void Explode(bool destroy)
		{
		}

		[Token(Token = "0x6000AE8")]
		[Address(RVA = "0xF76E34", Offset = "0xF76E34", VA = "0xF76E34")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0xF76E80", Offset = "0xF76E80", VA = "0xF76E80")]
		public ExplosionSource()
		{
		}
	}
	[Token(Token = "0x20001C1")]
	public class HandSwapper : MonoBehaviour
	{
		[Token(Token = "0x4000AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AutoHandPlayer player;

		[Token(Token = "0x4000AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Hand fromHand;

		[Token(Token = "0x4000AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Hand toHand;

		[Token(Token = "0x4000AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject fromModel;

		[Token(Token = "0x4000AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject toModel;

		[Token(Token = "0x4000AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool swapped;

		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0xF76E94", Offset = "0xF76E94", VA = "0xF76E94")]
		public void Swap()
		{
		}

		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0xF77028", Offset = "0xF77028", VA = "0xF77028")]
		public HandSwapper()
		{
		}
	}
	[Token(Token = "0x20001C2")]
	public class Pistol : MonoBehaviour
	{
		[Token(Token = "0x4000AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody body;

		[Token(Token = "0x4000AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform barrelTip;

		[Token(Token = "0x4000AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float hitPower;

		[Token(Token = "0x4000AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float recoilPower;

		[Token(Token = "0x4000AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float range;

		[Token(Token = "0x4000AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public LayerMask layer;

		[Token(Token = "0x4000AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioClip shootSound;

		[Token(Token = "0x4000AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float shootVolume;

		[Token(Token = "0x6000AEC")]
		[Address(RVA = "0xF77030", Offset = "0xF77030", VA = "0xF77030")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AED")]
		[Address(RVA = "0xF77118", Offset = "0xF77118", VA = "0xF77118")]
		public void Shoot()
		{
		}

		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0xF775A4", Offset = "0xF775A4", VA = "0xF775A4")]
		public Pistol()
		{
		}
	}
	[Token(Token = "0x20001C3")]
	public class PlayerFallCatcher : MonoBehaviour
	{
		[Token(Token = "0x4000AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AutoHandPlayer player;

		[Token(Token = "0x4000AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 startPos;

		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0xF775C4", Offset = "0xF775C4", VA = "0xF775C4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000AF0")]
		[Address(RVA = "0xF77694", Offset = "0xF77694", VA = "0xF77694")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AF1")]
		[Address(RVA = "0xF77754", Offset = "0xF77754", VA = "0xF77754")]
		public PlayerFallCatcher()
		{
		}
	}
	[Token(Token = "0x20001C4")]
	public class ScaleHighlight : MonoBehaviour
	{
		[Token(Token = "0x4000B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 highlighScale;

		[Token(Token = "0x4000B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 normalScale;

		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0xF7775C", Offset = "0xF7775C", VA = "0xF7775C")]
		public void Highlight()
		{
		}

		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0xF77788", Offset = "0xF77788", VA = "0xF77788")]
		public void HighlightStop()
		{
		}

		[Token(Token = "0x6000AF4")]
		[Address(RVA = "0xF777B4", Offset = "0xF777B4", VA = "0xF777B4")]
		public ScaleHighlight()
		{
		}
	}
	[Token(Token = "0x20001C5")]
	public class Spinner : MonoBehaviour
	{
		[Token(Token = "0x4000B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 rotationSpeed;

		[Token(Token = "0x6000AF5")]
		[Address(RVA = "0xF777BC", Offset = "0xF777BC", VA = "0xF777BC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AF6")]
		[Address(RVA = "0xF77818", Offset = "0xF77818", VA = "0xF77818")]
		public Spinner()
		{
		}
	}
	[Token(Token = "0x20001C6")]
	public class ToggleAutoMoveFlying : MonoBehaviour
	{
		[Token(Token = "0x6000AF7")]
		[Address(RVA = "0xF77820", Offset = "0xF77820", VA = "0xF77820")]
		public void ToggleFlying()
		{
		}

		[Token(Token = "0x6000AF8")]
		[Address(RVA = "0xF7789C", Offset = "0xF7789C", VA = "0xF7789C")]
		public ToggleAutoMoveFlying()
		{
		}
	}
	[Token(Token = "0x20001C7")]
	public class TomatoSpawner : MonoBehaviour
	{
		[Token(Token = "0x4000B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] tomatoes;

		[Token(Token = "0x4000B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<GameObject> copies;

		[Token(Token = "0x6000AF9")]
		[Address(RVA = "0xF778A4", Offset = "0xF778A4", VA = "0xF778A4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AFA")]
		[Address(RVA = "0xF77B18", Offset = "0xF77B18", VA = "0xF77B18")]
		public void SpawnTomato()
		{
		}

		[Token(Token = "0x6000AFB")]
		[Address(RVA = "0xF77CB0", Offset = "0xF77CB0", VA = "0xF77CB0")]
		public TomatoSpawner()
		{
		}
	}
	[Token(Token = "0x20001C8")]
	public class ButtonDemoRespawn : MonoBehaviour
	{
		[Token(Token = "0x4000B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform root;

		[Token(Token = "0x4000B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Transform> respawns;

		[Token(Token = "0x4000B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Vector3> startPos;

		[Token(Token = "0x4000B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<Quaternion> startRot;

		[Token(Token = "0x6000AFC")]
		[Address(RVA = "0xF77CB8", Offset = "0xF77CB8", VA = "0xF77CB8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AFD")]
		[Address(RVA = "0xF78198", Offset = "0xF78198", VA = "0xF78198")]
		public void Respawn()
		{
		}

		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0xF784CC", Offset = "0xF784CC", VA = "0xF784CC")]
		public void ReloadScene()
		{
		}

		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0xF7853C", Offset = "0xF7853C", VA = "0xF7853C")]
		public ButtonDemoRespawn()
		{
		}
	}
	[Token(Token = "0x20001C9")]
	public class DialHandScaler : PhysicsGadgetHingeAngleReader
	{
		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Hand hand;

		[Token(Token = "0x4000B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector3 minScale;

		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Vector3 maxScale;

		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float startReach;

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 startScale;

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float[] fingersStartScale;

		[Token(Token = "0x4000B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 lastHandScale;

		[Token(Token = "0x6000B00")]
		[Address(RVA = "0xF785C4", Offset = "0xF785C4", VA = "0xF785C4")]
		protected new void Start()
		{
		}

		[Token(Token = "0x6000B01")]
		[Address(RVA = "0xF786F8", Offset = "0xF786F8", VA = "0xF786F8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B02")]
		[Address(RVA = "0xF789BC", Offset = "0xF789BC", VA = "0xF789BC")]
		public DialHandScaler()
		{
		}
	}
	[Token(Token = "0x20001CA")]
	public class JoystickObjectMover : PhysicsGadgetJoystick
	{
		[Token(Token = "0x4000B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform move;

		[Token(Token = "0x4000B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float speed;

		[Token(Token = "0x6000B03")]
		[Address(RVA = "0xF789C4", Offset = "0xF789C4", VA = "0xF789C4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0xF78A68", Offset = "0xF78A68", VA = "0xF78A68")]
		public JoystickObjectMover()
		{
		}
	}
	[Token(Token = "0x20001CB")]
	public class MoverLever : PhysicsGadgetHingeAngleReader
	{
		[Token(Token = "0x4000B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform move;

		[Token(Token = "0x4000B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector3 axis;

		[Token(Token = "0x4000B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float speed;

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0xF78A78", Offset = "0xF78A78", VA = "0xF78A78")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0xF78C38", Offset = "0xF78C38", VA = "0xF78C38")]
		public MoverLever()
		{
		}
	}
	[Token(Token = "0x20001CC")]
	public class PhysicsSliderPositionMover : PhysicsGadgetConfigurableLimitReader
	{
		[Token(Token = "0x4000B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Movement")]
		public Transform move;

		[Token(Token = "0x4000B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Acts as speed")]
		public Vector3 axis;

		[Token(Token = "0x4000B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Header("Range")]
		public bool useRange;

		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 minRange;

		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Vector3 maxRange;

		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 startPos;

		[Token(Token = "0x6000B07")]
		[Address(RVA = "0xF78C48", Offset = "0xF78C48", VA = "0xF78C48")]
		protected new void Start()
		{
		}

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0xF78C7C", Offset = "0xF78C7C", VA = "0xF78C7C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0xF78DD4", Offset = "0xF78DD4", VA = "0xF78DD4")]
		public PhysicsSliderPositionMover()
		{
		}
	}
	[Token(Token = "0x20001CD")]
	public class WheelRotator : PhysicsGadgetHingeAngleReader
	{
		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform move;

		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector3 angle;

		[Token(Token = "0x4000B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public bool useLocal;

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0xF78E64", Offset = "0xF78E64", VA = "0xF78E64")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0xF79090", Offset = "0xF79090", VA = "0xF79090")]
		public WheelRotator()
		{
		}
	}
	[Token(Token = "0x20001CE")]
	public class LeverTextChanger : MonoBehaviour
	{
		[Token(Token = "0x4000B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshPro text;

		[Token(Token = "0x4000B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PhysicsGadgetHingeAngleReader sliderReader;

		[Token(Token = "0x6000B0C")]
		[Address(RVA = "0xF79098", Offset = "0xF79098", VA = "0xF79098")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0xF79184", Offset = "0xF79184", VA = "0xF79184")]
		public LeverTextChanger()
		{
		}
	}
	[Token(Token = "0x20001CF")]
	public class SliderTextChanger : MonoBehaviour
	{
		[Token(Token = "0x4000B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshPro text;

		[Token(Token = "0x4000B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PhysicsGadgetConfigurableLimitReader sliderReader;

		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0xF7918C", Offset = "0xF7918C", VA = "0xF7918C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B0F")]
		[Address(RVA = "0xF79278", Offset = "0xF79278", VA = "0xF79278")]
		public SliderTextChanger()
		{
		}
	}
	[Token(Token = "0x20001D0")]
	public class TextChanger : MonoBehaviour
	{
		[Token(Token = "0x20001D1")]
		[CompilerGenerated]
		private sealed class <ChangeText>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TextChanger <>4__this;

			[Token(Token = "0x4000B28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string newText;

			[Token(Token = "0x4000B29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float seconds;

			[Token(Token = "0x4000B2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <totalTime>5__2;

			[Token(Token = "0x4000B2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <timePassed>5__3;

			[Token(Token = "0x1700011E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000B18")]
				[Address(RVA = "0xF797BC", Offset = "0xF797BC", VA = "0xF797BC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700011F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000B1A")]
				[Address(RVA = "0xF79804", Offset = "0xF79804", VA = "0xF79804", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000B15")]
			[Address(RVA = "0xF79498", Offset = "0xF79498", VA = "0xF79498")]
			[DebuggerHidden]
			public <ChangeText>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6000B16")]
			[Address(RVA = "0xF79524", Offset = "0xF79524", VA = "0xF79524", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000B17")]
			[Address(RVA = "0xF79528", Offset = "0xF79528", VA = "0xF79528", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B19")]
			[Address(RVA = "0xF797C4", Offset = "0xF797C4", VA = "0xF797C4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshPro text;

		[Token(Token = "0x4000B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Coroutine changing;

		[Token(Token = "0x4000B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Coroutine hide;

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0xF79280", Offset = "0xF79280", VA = "0xF79280")]
		public void UpdateText(string newText, float upTime)
		{
		}

		[Token(Token = "0x6000B11")]
		[Address(RVA = "0xF793E4", Offset = "0xF793E4", VA = "0xF793E4")]
		public void UpdateText(string newText)
		{
		}

		[Token(Token = "0x6000B12")]
		[Address(RVA = "0xF79344", Offset = "0xF79344", VA = "0xF79344")]
		[IteratorStateMachine(typeof(<ChangeText>d__5))]
		private IEnumerator ChangeText(float seconds, string newText)
		{
			return null;
		}

		[Token(Token = "0x6000B13")]
		[Address(RVA = "0xF794C0", Offset = "0xF794C0", VA = "0xF794C0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000B14")]
		[Address(RVA = "0xF7951C", Offset = "0xF7951C", VA = "0xF7951C")]
		public TextChanger()
		{
		}
	}
	[Token(Token = "0x20001D2")]
	public class TextGrabEvent : MonoBehaviour
	{
		[Token(Token = "0x4000B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextChanger changer;

		[Token(Token = "0x4000B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabbable grab;

		[Token(Token = "0x4000B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[TextArea]
		public string message;

		[Token(Token = "0x6000B1B")]
		[Address(RVA = "0xF7980C", Offset = "0xF7980C", VA = "0xF7980C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B1C")]
		[Address(RVA = "0xF799FC", Offset = "0xF799FC", VA = "0xF799FC")]
		private void OnGrab(Hand hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000B1D")]
		[Address(RVA = "0xF79A14", Offset = "0xF79A14", VA = "0xF79A14")]
		public TextGrabEvent()
		{
		}
	}
	[Token(Token = "0x20001D3")]
	public class TextPlacePointEvent : MonoBehaviour
	{
		[Token(Token = "0x4000B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextChanger changer;

		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlacePoint point;

		[Token(Token = "0x4000B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[TextArea]
		public string placeMessage;

		[Token(Token = "0x4000B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[TextArea]
		public string highlightMessage;

		[Token(Token = "0x6000B1E")]
		[Address(RVA = "0xF79A1C", Offset = "0xF79A1C", VA = "0xF79A1C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B1F")]
		[Address(RVA = "0xF79C30", Offset = "0xF79C30", VA = "0xF79C30")]
		private void OnGrab(PlacePoint hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000B20")]
		[Address(RVA = "0xF79C50", Offset = "0xF79C50", VA = "0xF79C50")]
		private void OnHighlight(PlacePoint hand, Grabbable grab)
		{
		}

		[Token(Token = "0x6000B21")]
		[Address(RVA = "0xF79C70", Offset = "0xF79C70", VA = "0xF79C70")]
		public TextPlacePointEvent()
		{
		}
	}
	[Token(Token = "0x20001D4")]
	[RequireComponent(typeof(Grabbable))]
	public class GrabbableEventDebugger : MonoBehaviour
	{
		[Token(Token = "0x6000B22")]
		[Address(RVA = "0xF79C80", Offset = "0xF79C80", VA = "0xF79C80")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000B23")]
		[Address(RVA = "0xF7A3B0", Offset = "0xF7A3B0", VA = "0xF7A3B0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000B24")]
		[Address(RVA = "0xF7AAE0", Offset = "0xF7AAE0", VA = "0xF7AAE0")]
		public GrabbableEventDebugger()
		{
		}
	}
	[Token(Token = "0x20001D6")]
	[RequireComponent(typeof(Hand))]
	public class HandEventDebugger : MonoBehaviour
	{
		[Token(Token = "0x4000B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool showSqueezeEvents;

		[Token(Token = "0x4000B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool showHighlightEvents;

		[Token(Token = "0x6000B37")]
		[Address(RVA = "0xF7B4A0", Offset = "0xF7B4A0", VA = "0xF7B4A0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000B38")]
		[Address(RVA = "0xF7B764", Offset = "0xF7B764", VA = "0xF7B764")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000B39")]
		[Address(RVA = "0xF7BA28", Offset = "0xF7BA28", VA = "0xF7BA28")]
		public HandEventDebugger()
		{
		}
	}
	[Token(Token = "0x20001D7")]
	public class WristLookEvent : MonoBehaviour
	{
		[Token(Token = "0x4000B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hand hand;

		[Token(Token = "0x4000B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Camera head;

		[Token(Token = "0x4000B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The minimum head->wrist distance required to activate")]
		public float maxDistance;

		[Token(Token = "0x4000B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0f, 1f)]
		[Tooltip("The angle precisness required to activate; 0 is any angle, 1 is exactly pointed at the face")]
		public float anglePreciseness;

		[Token(Token = "0x4000B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool disableWhileHolding;

		[Token(Token = "0x4000B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Events")]
		public UnityHandEvent OnShow;

		[Token(Token = "0x4000B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityHandEvent OnHide;

		[Token(Token = "0x4000B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool showing;

		[Token(Token = "0x6000B4A")]
		[Address(RVA = "0xF7C478", Offset = "0xF7C478", VA = "0xF7C478")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B4B")]
		[Address(RVA = "0xF7C78C", Offset = "0xF7C78C", VA = "0xF7C78C")]
		public WristLookEvent()
		{
		}
	}
	[Token(Token = "0x20001D8")]
	public class Smash : MonoBehaviour
	{
		[Token(Token = "0x4000B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Smash Options")]
		[Tooltip("Required velocity magnitude from Smasher to smash")]
		public float smashForce;

		[Token(Token = "0x4000B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Whether or not to destroy this object on smash")]
		public bool destroyOnSmash;

		[Token(Token = "0x4000B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		[Tooltip("Whether or not to release this object on smash")]
		[HideIf("destroyOnSmash")]
		public bool releaseOnSmash;

		[Token(Token = "0x4000B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Particle Effect")]
		[Tooltip("Plays this effect on smash")]
		public ParticleSystem effect;

		[Token(Token = "0x4000B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Whether or not to instantiates a new a particle system on smash")]
		public bool createNewEffect;

		[Token(Token = "0x4000B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[Tooltip("Whether or not to apply rigidbody velocity to particle velocity on smash")]
		public bool applyVelocityOnSmash;

		[Token(Token = "0x4000B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Sound Options")]
		public AudioClip smashSound;

		[Token(Token = "0x4000B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float smashVolume;

		[Token(Token = "0x4000B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Event")]
		public UnityEvent OnSmash;

		[Token(Token = "0x4000B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public SmashEvent OnSmashEvent;

		[Token(Token = "0x4000B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal Grabbable grabbable;

		[Token(Token = "0x6000B4C")]
		[Address(RVA = "0xF7C7A4", Offset = "0xF7C7A4", VA = "0xF7C7A4")]
		public void Start()
		{
		}

		[Token(Token = "0x6000B4D")]
		[Address(RVA = "0xF7CA7C", Offset = "0xF7CA7C", VA = "0xF7CA7C")]
		public void DelayedSmash(float delay)
		{
		}

		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0xF7759C", Offset = "0xF7759C", VA = "0xF7759C")]
		public void DoSmash()
		{
		}

		[Token(Token = "0x6000B4F")]
		[Address(RVA = "0xF7CAD8", Offset = "0xF7CAD8", VA = "0xF7CAD8")]
		public void DoSmash(Smasher smash)
		{
		}

		[Token(Token = "0x6000B50")]
		[Address(RVA = "0xF7CE70", Offset = "0xF7CE70", VA = "0xF7CE70")]
		public Smash()
		{
		}
	}
	[Token(Token = "0x20001D9")]
	public delegate void SmashEvent(Smasher smasher, Smash smashable);
	[Token(Token = "0x20001DA")]
	[RequireComponent(typeof(Rigidbody))]
	public class Smasher : MonoBehaviour
	{
		[Token(Token = "0x4000B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Rigidbody rb;

		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Options")]
		public LayerMask smashableLayers;

		[Token(Token = "0x4000B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("How much to multiply the magnitude on smash")]
		public float forceMulti;

		[Token(Token = "0x4000B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Can be left empty - The center of mass point to calculate velocity magnitude - for example: the camera of the hammer is a better point vs the pivot center of the hammer object")]
		public Transform centerOfMassPoint;

		[Token(Token = "0x4000B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Event")]
		public UnityEvent OnSmash;

		[Token(Token = "0x4000B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SmashEvent OnSmashEvent;

		[Token(Token = "0x4000B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3[] velocityOverTime;

		[Token(Token = "0x4000B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 lastPos;

		[Token(Token = "0x6000B56")]
		[Address(RVA = "0xF7CEE8", Offset = "0xF7CEE8", VA = "0xF7CEE8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B57")]
		[Address(RVA = "0xF7D0B0", Offset = "0xF7D0B0", VA = "0xF7D0B0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000B58")]
		[Address(RVA = "0xF7D21C", Offset = "0xF7D21C", VA = "0xF7D21C")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000B59")]
		[Address(RVA = "0xF7D2D4", Offset = "0xF7D2D4", VA = "0xF7D2D4")]
		private float GetMagnitude()
		{
			return default(float);
		}

		[Token(Token = "0x6000B5A")]
		[Address(RVA = "0xF7D3F0", Offset = "0xF7D3F0", VA = "0xF7D3F0")]
		public Smasher()
		{
		}
	}
}
namespace World
{
	[Token(Token = "0x20001DB")]
	public class LightingController : MonoBehaviour
	{
		[Token(Token = "0x20001DC")]
		[CompilerGenerated]
		private sealed class <Start>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LightingController <>4__this;

			[Token(Token = "0x17000121")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000B66")]
				[Address(RVA = "0xF7DBA8", Offset = "0xF7DBA8", VA = "0xF7DBA8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000122")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000B68")]
				[Address(RVA = "0xF7DBF0", Offset = "0xF7DBF0", VA = "0xF7DBF0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000B63")]
			[Address(RVA = "0xF7D4E4", Offset = "0xF7D4E4", VA = "0xF7D4E4")]
			[DebuggerHidden]
			public <Start>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6000B64")]
			[Address(RVA = "0xF7DA48", Offset = "0xF7DA48", VA = "0xF7DA48", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000B65")]
			[Address(RVA = "0xF7DA4C", Offset = "0xF7DA4C", VA = "0xF7DA4C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B67")]
			[Address(RVA = "0xF7DBB0", Offset = "0xF7DBB0", VA = "0xF7DBB0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SeasonSetting targetSeason;

		[Token(Token = "0x4000B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material sky;

		[Token(Token = "0x4000B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MeshRenderer cullingHemisphere;

		[Token(Token = "0x4000B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool fogEnabled;

		[Token(Token = "0x4000B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Color fogColor;

		[Token(Token = "0x4000B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public FogMode fogMode;

		[Token(Token = "0x4000B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float fogDensity;

		[Token(Token = "0x4000B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Color dragonFightColorMult;

		[Token(Token = "0x4000B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float dragonFightColorTransitionTime;

		[Token(Token = "0x4000B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private SeasonSetting? prevSeason;

		[Token(Token = "0x4000B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Color? prevColorMult;

		[Token(Token = "0x4000B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Color initialMaterialColor;

		[Token(Token = "0x4000B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int Tint;

		[Token(Token = "0x17000120")]
		private static SeasonSetting CurrentSeason
		{
			[Token(Token = "0x6000B5F")]
			[Address(RVA = "0xF7D6D0", Offset = "0xF7D6D0", VA = "0xF7D6D0")]
			get
			{
				return default(SeasonSetting);
			}
		}

		[Token(Token = "0x6000B5C")]
		[Address(RVA = "0xF7D470", Offset = "0xF7D470", VA = "0xF7D470")]
		[IteratorStateMachine(typeof(<Start>d__13))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6000B5D")]
		[Address(RVA = "0xF7D50C", Offset = "0xF7D50C", VA = "0xF7D50C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0xF7D840", Offset = "0xF7D840", VA = "0xF7D840")]
		private void ResetLighting()
		{
		}

		[Token(Token = "0x6000B60")]
		[Address(RVA = "0xF7D6F0", Offset = "0xF7D6F0", VA = "0xF7D6F0")]
		private Color CurrentColorMult()
		{
			return default(Color);
		}

		[Token(Token = "0x6000B61")]
		[Address(RVA = "0xF7D9B8", Offset = "0xF7D9B8", VA = "0xF7D9B8")]
		public LightingController()
		{
		}
	}
	[Token(Token = "0x20001DD")]
	public class OceanBehavior : MonoBehaviour
	{
		[Token(Token = "0x6000B69")]
		[Address(RVA = "0xF7DBF8", Offset = "0xF7DBF8", VA = "0xF7DBF8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B6A")]
		[Address(RVA = "0xF7DCB0", Offset = "0xF7DCB0", VA = "0xF7DCB0")]
		public OceanBehavior()
		{
		}
	}
	[Token(Token = "0x20001DE")]
	public class SoftWall : MonoBehaviour
	{
		[Token(Token = "0x4000B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float velocityInwardsScale;

		[Token(Token = "0x4000B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float accelerationMultiplier;

		[Token(Token = "0x17000123")]
		private PlayerManager player
		{
			[Token(Token = "0x6000B6B")]
			[Address(RVA = "0xF7DCB8", Offset = "0xF7DCB8", VA = "0xF7DCB8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B6C")]
		[Address(RVA = "0xF7DD00", Offset = "0xF7DD00", VA = "0xF7DD00")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000B6D")]
		[Address(RVA = "0xF7E154", Offset = "0xF7E154", VA = "0xF7E154")]
		public SoftWall()
		{
		}
	}
}
namespace World.Small_Objects
{
	[Serializable]
	[Token(Token = "0x20001DF")]
	public class SmallObject
	{
		[Token(Token = "0x4000B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 position;

		[Token(Token = "0x4000B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion rotation;

		[Token(Token = "0x4000B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float scale;

		[Token(Token = "0x4000B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject prefab;

		[Token(Token = "0x4000B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool updateFixedJoint;

		[Token(Token = "0x4000B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int road;

		[Token(Token = "0x6000B6E")]
		[Address(RVA = "0xF7E164", Offset = "0xF7E164", VA = "0xF7E164")]
		public GameObject Instantiate(GameObject parent)
		{
			return null;
		}

		[Token(Token = "0x6000B6F")]
		[Address(RVA = "0xF7E374", Offset = "0xF7E374", VA = "0xF7E374")]
		public SmallObject()
		{
		}
	}
	[Token(Token = "0x20001E0")]
	public class SmallObjectSpawner : MonoBehaviour
	{
		[Token(Token = "0x20001E1")]
		private class SmallObjectData
		{
			[Token(Token = "0x4000B82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject gameObject;

			[Token(Token = "0x4000B83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public SmallObject smallObject;

			[Token(Token = "0x4000B84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float spawnTime;

			[Token(Token = "0x6000B75")]
			[Address(RVA = "0xF7ECD4", Offset = "0xF7ECD4", VA = "0xF7ECD4")]
			public SmallObjectData()
			{
			}
		}

		[Token(Token = "0x4000B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float DistanceMul;

		[Token(Token = "0x4000B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Dictionary<string, SmallObjectSpawner> AllSpawners;

		[Token(Token = "0x4000B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float distanceToSpawn;

		[Token(Token = "0x4000B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float minDespawnTime;

		[Token(Token = "0x4000B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<SmallObject> toSpawn;

		[Token(Token = "0x4000B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float updateProb;

		[Token(Token = "0x4000B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<SmallObjectData> active;

		[Token(Token = "0x4000B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GridTracker<SmallObjectData> distanceTracker;

		[Token(Token = "0x6000B70")]
		[Address(RVA = "0xF7E3DC", Offset = "0xF7E3DC", VA = "0xF7E3DC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0xF7E510", Offset = "0xF7E510", VA = "0xF7E510")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B72")]
		[Address(RVA = "0xF7ECDC", Offset = "0xF7ECDC", VA = "0xF7ECDC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000B73")]
		[Address(RVA = "0xF7ED6C", Offset = "0xF7ED6C", VA = "0xF7ED6C")]
		public SmallObjectSpawner()
		{
		}
	}
}
namespace World.Shapes
{
	[Token(Token = "0x20001E2")]
	public struct CurvedWall : Shape
	{
		[Token(Token = "0x20001E3")]
		[CompilerGenerated]
		private sealed class <CumulativeSums>d__3 : IEnumerable<float>, IEnumerable, IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4000B89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000B8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CurvedWall <>4__this;

			[Token(Token = "0x4000B8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public CurvedWall <>3__<>4__this;

			[Token(Token = "0x4000B8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <totalLength>5__2;

			[Token(Token = "0x4000B8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private Vector2 <prevPoint>5__3;

			[Token(Token = "0x4000B8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private List<Vector2>.Enumerator <>7__wrap3;

			[Token(Token = "0x17000124")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6000B7E")]
				[Address(RVA = "0xF7F7BC", Offset = "0xF7F7BC", VA = "0xF7F7BC", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000125")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000B80")]
				[Address(RVA = "0xF7F804", Offset = "0xF7F804", VA = "0xF7F804", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000B7A")]
			[Address(RVA = "0xF7F26C", Offset = "0xF7F26C", VA = "0xF7F26C")]
			[DebuggerHidden]
			public <CumulativeSums>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x6000B7B")]
			[Address(RVA = "0xF7F508", Offset = "0xF7F508", VA = "0xF7F508", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000B7C")]
			[Address(RVA = "0xF7F524", Offset = "0xF7F524", VA = "0xF7F524", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B7D")]
			[Address(RVA = "0xF7F76C", Offset = "0xF7F76C", VA = "0xF7F76C")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6000B7F")]
			[Address(RVA = "0xF7F7C4", Offset = "0xF7F7C4", VA = "0xF7F7C4", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6000B81")]
			[Address(RVA = "0xF7F860", Offset = "0xF7F860", VA = "0xF7F860", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<float> System.Collections.Generic.IEnumerable<System.Single>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6000B82")]
			[Address(RVA = "0xF7F91C", Offset = "0xF7F91C", VA = "0xF7F91C", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x4000B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public List<Vector2> path;

		[Token(Token = "0x4000B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float height;

		[Token(Token = "0x6000B76")]
		[Address(RVA = "0xF7EEAC", Offset = "0xF7EEAC", VA = "0xF7EEAC", Slot = "4")]
		public void Instantiate(MeshBuilder mesh, PoseUV pose)
		{
		}

		[Token(Token = "0x6000B77")]
		[Address(RVA = "0xF7F1C8", Offset = "0xF7F1C8", VA = "0xF7F1C8")]
		[IteratorStateMachine(typeof(<CumulativeSums>d__3))]
		private IEnumerable<float> CumulativeSums()
		{
			return null;
		}

		[Token(Token = "0x6000B78")]
		[Address(RVA = "0xF7F2A0", Offset = "0xF7F2A0", VA = "0xF7F2A0")]
		private float IdxAtPerc(float perc)
		{
			return default(float);
		}

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0xF7F3E8", Offset = "0xF7F3E8", VA = "0xF7F3E8")]
		private Vector2 PointAtIdx(float idx)
		{
			return default(Vector2);
		}
	}
	[Serializable]
	[Token(Token = "0x20001E4")]
	public class PolyArea
	{
		[Token(Token = "0x20001E7")]
		[CompilerGenerated]
		private sealed class <CutInHalf>d__10 : IEnumerable<PolyArea>, IEnumerable, IEnumerator<PolyArea>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private PolyArea <>2__current;

			[Token(Token = "0x4000BA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000BA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public PolyArea <>4__this;

			[Token(Token = "0x4000BA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Box2d <box>5__2;

			[Token(Token = "0x4000BA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private Vector2d <majorAxis>5__3;

			[Token(Token = "0x17000126")]
			private PolyArea System.Collections.Generic.IEnumerator<World.Shapes.PolyArea>.Current
			{
				[Token(Token = "0x6000BAC")]
				[Address(RVA = "0xF82734", Offset = "0xF82734", VA = "0xF82734", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000127")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000BAE")]
				[Address(RVA = "0xF8277C", Offset = "0xF8277C", VA = "0xF8277C", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000BA9")]
			[Address(RVA = "0xF809EC", Offset = "0xF809EC", VA = "0xF809EC")]
			[DebuggerHidden]
			public <CutInHalf>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6000BAA")]
			[Address(RVA = "0xF822E8", Offset = "0xF822E8", VA = "0xF822E8", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000BAB")]
			[Address(RVA = "0xF822EC", Offset = "0xF822EC", VA = "0xF822EC", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000BAD")]
			[Address(RVA = "0xF8273C", Offset = "0xF8273C", VA = "0xF8273C", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6000BAF")]
			[Address(RVA = "0xF82784", Offset = "0xF82784", VA = "0xF82784", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<PolyArea> System.Collections.Generic.IEnumerable<World.Shapes.PolyArea>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6000BB0")]
			[Address(RVA = "0xF82830", Offset = "0xF82830", VA = "0xF82830", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x4000B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private List<Polygon> polys;

		[Token(Token = "0x4000B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Box2d? bounds;

		[Token(Token = "0x6000B83")]
		[Address(RVA = "0xF7F920", Offset = "0xF7F920", VA = "0xF7F920")]
		public PolyArea(params IEnumerable<Vector2>[] paths)
		{
		}

		[Token(Token = "0x6000B84")]
		[Address(RVA = "0xF7F924", Offset = "0xF7F924", VA = "0xF7F924")]
		public PolyArea(IEnumerable<IEnumerable<Vector2>> paths)
		{
		}

		[Token(Token = "0x6000B85")]
		[Address(RVA = "0xF7FA50", Offset = "0xF7FA50", VA = "0xF7FA50")]
		public PolyArea(IEnumerable<Polygon> polys)
		{
		}

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0xF7FDBC", Offset = "0xF7FDBC", VA = "0xF7FDBC")]
		public float Area()
		{
			return default(float);
		}

		[Token(Token = "0x6000B87")]
		[Address(RVA = "0xF7FEC8", Offset = "0xF7FEC8", VA = "0xF7FEC8")]
		public Box2d BoundingBox()
		{
			return default(Box2d);
		}

		[Token(Token = "0x6000B88")]
		[Address(RVA = "0xF80348", Offset = "0xF80348", VA = "0xF80348")]
		public Vector2 Centroid()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000B89")]
		[Address(RVA = "0xF80594", Offset = "0xF80594", VA = "0xF80594")]
		public PolyArea Clip(PolyArea other, ProceduralToolkit.ClipperLib.ClipType clipType)
		{
			return null;
		}

		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0xF807F8", Offset = "0xF807F8", VA = "0xF807F8")]
		public bool ContainsPoint(Vector2 p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8B")]
		[Address(RVA = "0xF80968", Offset = "0xF80968", VA = "0xF80968")]
		[IteratorStateMachine(typeof(<CutInHalf>d__10))]
		public IEnumerable<PolyArea> CutInHalf()
		{
			return null;
		}

		[Token(Token = "0x6000B8C")]
		[Address(RVA = "0xF80A20", Offset = "0xF80A20", VA = "0xF80A20")]
		public IEnumerable<PolyArea> CutInHalfUntil(Func<PolyArea, bool> pred)
		{
			return null;
		}

		[Token(Token = "0x6000B8D")]
		[Address(RVA = "0xF80C04", Offset = "0xF80C04", VA = "0xF80C04")]
		public bool Intersects(PolyArea other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8E")]
		[Address(RVA = "0xF80C38", Offset = "0xF80C38", VA = "0xF80C38")]
		public PolyArea Map(Func<Polygon, Polygon> f)
		{
			return null;
		}

		[Token(Token = "0x6000B8F")]
		[Address(RVA = "0xF80CD0", Offset = "0xF80CD0", VA = "0xF80CD0")]
		public PolyArea Offset(float delta, ProceduralToolkit.ClipperLib.JoinType joinType = ProceduralToolkit.ClipperLib.JoinType.jtSquare)
		{
			return null;
		}

		[Token(Token = "0x6000B90")]
		[Address(RVA = "0xF80228", Offset = "0xF80228", VA = "0xF80228")]
		public List<List<Vector2>> Paths()
		{
			return null;
		}

		[Token(Token = "0x6000B91")]
		[Address(RVA = "0xF80F28", Offset = "0xF80F28", VA = "0xF80F28")]
		public List<Vector2> Points()
		{
			return null;
		}

		[Token(Token = "0x6000B92")]
		[Address(RVA = "0xF81048", Offset = "0xF81048", VA = "0xF81048")]
		public Vector2? RandomInside(int numRetries = 1000)
		{
			return null;
		}

		[Token(Token = "0x6000B93")]
		[Address(RVA = "0xF81254", Offset = "0xF81254", VA = "0xF81254")]
		public Vector2 RandomOnBorder()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000B94")]
		[Address(RVA = "0xF816FC", Offset = "0xF816FC", VA = "0xF816FC")]
		public PolyArea Reverse()
		{
			return null;
		}

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0xF817E8", Offset = "0xF817E8", VA = "0xF817E8")]
		public PolyArea Rotate(float angle)
		{
			return null;
		}

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0xF818AC", Offset = "0xF818AC", VA = "0xF818AC")]
		public PolyAreaShape Shape()
		{
			return null;
		}

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0xF8194C", Offset = "0xF8194C", VA = "0xF8194C")]
		public PolygonalPrismWalls ShapeWalls(float height)
		{
			return default(PolygonalPrismWalls);
		}

		[Token(Token = "0x6000B98")]
		[Address(RVA = "0xF81998", Offset = "0xF81998", VA = "0xF81998")]
		public PolyArea Simplify(float clusterTol = 0.1f, float lineDeviationTol = 0.1f)
		{
			return null;
		}

		[Token(Token = "0x6000B99")]
		[Address(RVA = "0xF81ACC", Offset = "0xF81ACC", VA = "0xF81ACC")]
		public PolyArea Translate(Vector2 translate)
		{
			return null;
		}
	}
	[Token(Token = "0x20001EC")]
	public class PolyAreaShape : Shape
	{
		[Token(Token = "0x4000BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PolyArea area;

		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0xF8191C", Offset = "0xF8191C", VA = "0xF8191C")]
		public PolyAreaShape(PolyArea area)
		{
		}

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0xF82C3C", Offset = "0xF82C3C", VA = "0xF82C3C", Slot = "4")]
		public void Instantiate(MeshBuilder mesh, PoseUV pose)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001EE")]
	public class Polygon
	{
		[Token(Token = "0x4000BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private List<Vector2> path;

		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0xF81C6C", Offset = "0xF81C6C", VA = "0xF81C6C")]
		public Polygon(IEnumerable<Vector2> path)
		{
		}

		[Token(Token = "0x6000BBE")]
		[Address(RVA = "0xF81E00", Offset = "0xF81E00", VA = "0xF81E00")]
		public float Area()
		{
			return default(float);
		}

		[Token(Token = "0x6000BBF")]
		[Address(RVA = "0xF835AC", Offset = "0xF835AC", VA = "0xF835AC")]
		public Box2d BoundingBox()
		{
			return default(Box2d);
		}

		[Token(Token = "0x6000BC0")]
		[Address(RVA = "0xF8372C", Offset = "0xF8372C", VA = "0xF8372C")]
		public Vector2 Centroid()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0xF821DC", Offset = "0xF821DC", VA = "0xF821DC")]
		public bool ContainsPoint(Vector2 p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BC2")]
		[Address(RVA = "0xF83854", Offset = "0xF83854", VA = "0xF83854")]
		public Polygon Map(Func<Vector2, Vector2> f)
		{
			return null;
		}

		[Token(Token = "0x6000BC3")]
		[Address(RVA = "0xF838EC", Offset = "0xF838EC", VA = "0xF838EC")]
		public List<Vector2> Path()
		{
			return null;
		}

		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0xF82010", Offset = "0xF82010", VA = "0xF82010")]
		public Polygon Reverse()
		{
			return null;
		}

		[Token(Token = "0x6000BC5")]
		[Address(RVA = "0xF82870", Offset = "0xF82870", VA = "0xF82870")]
		public Polygon Rotate(float angle)
		{
			return null;
		}

		[Token(Token = "0x6000BC6")]
		[Address(RVA = "0xF838FC", Offset = "0xF838FC", VA = "0xF838FC")]
		public Shape Shape()
		{
			return null;
		}

		[Token(Token = "0x6000BC7")]
		[Address(RVA = "0xF82B7C", Offset = "0xF82B7C", VA = "0xF82B7C")]
		public Polygon Translate(Vector2 translate)
		{
			return null;
		}
	}
	[Token(Token = "0x20001F2")]
	public struct PolygonalPrismWalls : Shape
	{
		[Token(Token = "0x4000BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PolyArea area;

		[Token(Token = "0x4000BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float height;

		[Token(Token = "0x4000BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector2 cellSize;

		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0xF83B0C", Offset = "0xF83B0C", VA = "0xF83B0C")]
		private static int NumTiles(float cellSize, float totalSize)
		{
			return default(int);
		}

		[Token(Token = "0x6000BD0")]
		[Address(RVA = "0xF83BCC", Offset = "0xF83BCC", VA = "0xF83BCC", Slot = "4")]
		public void Instantiate(MeshBuilder mesh, PoseUV pose)
		{
		}
	}
	[Token(Token = "0x20001F4")]
	public readonly struct PoseUV
	{
		[Token(Token = "0x4000BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly PoseUV Default;

		[Token(Token = "0x4000BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly Vector3 position;

		[Token(Token = "0x4000BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly Quaternion rotation;

		[Token(Token = "0x4000BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly Vector2 uvOffset;

		[Token(Token = "0x4000BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public readonly Vector2 uvScale;

		[Token(Token = "0x6000BD4")]
		[Address(RVA = "0xF7F250", Offset = "0xF7F250", VA = "0xF7F250")]
		public PoseUV(Vector3 position, Quaternion rotation, Vector2 uvOffset, Vector2 uvScale)
		{
		}

		[Token(Token = "0x6000BD5")]
		[Address(RVA = "0xF84540", Offset = "0xF84540", VA = "0xF84540")]
		public static Vector3 operator *(PoseUV a, Vector3 pos)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BD6")]
		[Address(RVA = "0xF84594", Offset = "0xF84594", VA = "0xF84594")]
		public static Vector2 operator *(PoseUV a, Vector2 uv)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000BD7")]
		[Address(RVA = "0xF834B4", Offset = "0xF834B4", VA = "0xF834B4")]
		public static Vert operator *(PoseUV a, Vert v)
		{
			return default(Vert);
		}

		[Token(Token = "0x6000BD8")]
		[Address(RVA = "0xF845B0", Offset = "0xF845B0", VA = "0xF845B0")]
		public static Tri operator *(PoseUV a, Tri b)
		{
			return default(Tri);
		}

		[Token(Token = "0x6000BD9")]
		[Address(RVA = "0xF8476C", Offset = "0xF8476C", VA = "0xF8476C")]
		public static PoseUV operator *(PoseUV a, PoseUV b)
		{
			return default(PoseUV);
		}
	}
	[Token(Token = "0x20001F5")]
	public struct RoadShape : Shape
	{
		[Token(Token = "0x4000BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector2[] path1;

		[Token(Token = "0x4000BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector2[] path2;

		[Token(Token = "0x4000BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float width;

		[Token(Token = "0x6000BDB")]
		[Address(RVA = "0xF84A48", Offset = "0xF84A48", VA = "0xF84A48", Slot = "4")]
		public void Instantiate(MeshBuilder mesh, PoseUV pose)
		{
		}
	}
	[Token(Token = "0x20001F6")]
	public interface Shape
	{
		[Token(Token = "0x6000BDC")]
		void Instantiate(MeshBuilder mesh, PoseUV pose);
	}
	[Token(Token = "0x20001F7")]
	public static class ShapeExtensions
	{
		[Token(Token = "0x6000BDD")]
		[Address(RVA = "0xF85558", Offset = "0xF85558", VA = "0xF85558")]
		public static void Instantiate(this Shape shape, MeshBuilder mesh)
		{
		}

		[Token(Token = "0x6000BDE")]
		public static TransformedShape<T> Transform<T>(this T shape, PoseUV pose) where T : Shape
		{
			return default(TransformedShape<T>);
		}

		[Token(Token = "0x6000BDF")]
		public static TransformedShape<T> Translate<T>(this T shape, Vector3 position) where T : Shape
		{
			return default(TransformedShape<T>);
		}
	}
	[Token(Token = "0x20001F8")]
	public readonly struct TransformedShape<T> : Shape where T : Shape
	{
		[Token(Token = "0x4000BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly T shape;

		[Token(Token = "0x4000BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly PoseUV pose;

		[Token(Token = "0x6000BE0")]
		public TransformedShape(T shape, PoseUV pose)
		{
		}

		[Token(Token = "0x6000BE1")]
		public void Instantiate(MeshBuilder mesh, PoseUV pose)
		{
		}
	}
	[Token(Token = "0x20001F9")]
	public struct Quad : Shape
	{
		[Token(Token = "0x4000BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector2 size;

		[Token(Token = "0x6000BE2")]
		[Address(RVA = "0xF85674", Offset = "0xF85674", VA = "0xF85674", Slot = "4")]
		public void Instantiate(MeshBuilder mesh, PoseUV pose)
		{
		}
	}
}
namespace World.Meshes
{
	[Token(Token = "0x20001FA")]
	public class MeshBuilder
	{
		[Token(Token = "0x4000BC0")]
		private const int MaxShort = 65535;

		[Token(Token = "0x4000BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly List<int> indices;

		[Token(Token = "0x4000BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly List<Vert> vertices;

		[Token(Token = "0x4000BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Color> colors;

		[Token(Token = "0x4000BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Func<Vector3, Color> colorMap;

		[Token(Token = "0x4000BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Func<Tri, Tri?> triangleFilter;

		[Token(Token = "0x6000BE3")]
		[Address(RVA = "0xF84F14", Offset = "0xF84F14", VA = "0xF84F14")]
		public void Add(Tri tri)
		{
		}

		[Token(Token = "0x6000BE4")]
		[Address(RVA = "0xF82F1C", Offset = "0xF82F1C", VA = "0xF82F1C")]
		public void AddMesh(IEnumerable<Vert> newVertices, IEnumerable<int> newIndices)
		{
		}

		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0xF858CC", Offset = "0xF858CC", VA = "0xF858CC")]
		public Mesh ToMesh()
		{
			return null;
		}

		[Token(Token = "0x6000BE6")]
		[Address(RVA = "0xF8595C", Offset = "0xF8595C", VA = "0xF8595C")]
		public void FillMesh(Mesh mesh)
		{
		}

		[Token(Token = "0x6000BE7")]
		[Address(RVA = "0xF85CEC", Offset = "0xF85CEC", VA = "0xF85CEC")]
		public MeshBuilder()
		{
		}
	}
	[Token(Token = "0x20001FC")]
	public class ModelBuilder
	{
		[Token(Token = "0x4000BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Dictionary<(string, Material), MeshBuilder> output;

		[Token(Token = "0x6000BEA")]
		[Address(RVA = "0xF85E20", Offset = "0xF85E20", VA = "0xF85E20")]
		public MeshBuilder GetOrAdd(string name, Material material)
		{
			return null;
		}

		[Token(Token = "0x6000BEB")]
		[Address(RVA = "0xF85F44", Offset = "0xF85F44", VA = "0xF85F44")]
		public ModelBuilder()
		{
		}
	}
	[Token(Token = "0x20001FD")]
	public readonly struct Vert
	{
		[Token(Token = "0x4000BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly Vector3 pos;

		[Token(Token = "0x4000BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly Vector2 uv;

		[Token(Token = "0x6000BEC")]
		[Address(RVA = "0xF834A4", Offset = "0xF834A4", VA = "0xF834A4")]
		public Vert(Vector3 pos, Vector2 uv)
		{
		}
	}
	[Token(Token = "0x20001FE")]
	public readonly struct Tri
	{
		[Token(Token = "0x4000BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly Vert v1;

		[Token(Token = "0x4000BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly Vert v2;

		[Token(Token = "0x4000BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly Vert v3;

		[Token(Token = "0x6000BED")]
		[Address(RVA = "0xF84EE0", Offset = "0xF84EE0", VA = "0xF84EE0")]
		public Tri(Vector3 p1, Vector2 uv1, Vector3 p2, Vector2 uv2, Vector3 p3, Vector2 uv3)
		{
		}

		[Token(Token = "0x6000BEE")]
		[Address(RVA = "0xF84738", Offset = "0xF84738", VA = "0xF84738")]
		public Tri(Vert v1, Vert v2, Vert v3)
		{
		}
	}
}
namespace World.Interface
{
	[Token(Token = "0x20001FF")]
	[ExecuteInEditMode]
	public class CityLoader : MonoBehaviour
	{
		[Token(Token = "0x4000BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static WorldScriptableObject currentWorld;

		[Token(Token = "0x4000BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CityParameters cityParameters;

		[Token(Token = "0x4000BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WorldScriptableObject world;

		[Token(Token = "0x4000BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string saveFolder;

		[Token(Token = "0x6000BEF")]
		[Address(RVA = "0xF85FCC", Offset = "0xF85FCC", VA = "0xF85FCC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000BF0")]
		[Address(RVA = "0xF86024", Offset = "0xF86024", VA = "0xF86024")]
		public CityLoader()
		{
		}
	}
	[Token(Token = "0x2000200")]
	[CreateAssetMenu(fileName = "World", menuName = "Create World", order = 0)]
	public class WorldScriptableObject : ScriptableObject
	{
		[Token(Token = "0x4000BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public World.Generation.World world;

		[Token(Token = "0x6000BF1")]
		[Address(RVA = "0xF8607C", Offset = "0xF8607C", VA = "0xF8607C")]
		public WorldScriptableObject()
		{
		}
	}
}
namespace World.Grammar
{
	[Serializable]
	[Token(Token = "0x2000201")]
	public class EmptySpace
	{
		[Token(Token = "0x4000BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PolyArea emptySpace;

		[Token(Token = "0x6000BF2")]
		[Address(RVA = "0xF86084", Offset = "0xF86084", VA = "0xF86084")]
		public EmptySpace(PolyArea emptySpace)
		{
		}

		[Token(Token = "0x6000BF3")]
		[Address(RVA = "0xF860B4", Offset = "0xF860B4", VA = "0xF860B4")]
		public List<GenerateObject.GenerateResults> GenerateMany(World.Generation.World world, int num, Vector3 offset, Func<(Vector2, float, GenerateBounds)?> gen, int retries = 100)
		{
			return null;
		}

		[Token(Token = "0x6000BF4")]
		[Address(RVA = "0xF86838", Offset = "0xF86838", VA = "0xF86838")]
		public bool TryAdd(PolyArea newArea)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000204")]
	public enum GenerateColliderMode
	{
		[Token(Token = "0x4000BD7")]
		AUTO,
		[Token(Token = "0x4000BD8")]
		BOX,
		[Token(Token = "0x4000BD9")]
		SPHERE
	}
	[Token(Token = "0x2000205")]
	public class GenerateBounds : MonoBehaviour
	{
		[Token(Token = "0x4000BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GenerateColliderMode generateBoundsMode;

		[Token(Token = "0x4000BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private Bounds box;

		[Token(Token = "0x4000BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float radius;

		[Token(Token = "0x4000BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool autoCenter;

		[Token(Token = "0x4000BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<string> incompatibleWith;

		[Token(Token = "0x4000BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool hasComputedArea;

		[Token(Token = "0x4000BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private PolyArea myArea;

		[Token(Token = "0x4000BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Bounds myBounds;

		[Token(Token = "0x6000BF9")]
		[Address(RVA = "0xF86614", Offset = "0xF86614", VA = "0xF86614")]
		public PolyArea GetArea()
		{
			return null;
		}

		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0xF868B8", Offset = "0xF868B8", VA = "0xF868B8")]
		public List<GenerateObject.GenerateResults> Spawn(World.Generation.World world, Vector3 position, Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x6000BFB")]
		[Address(RVA = "0xF86BC0", Offset = "0xF86BC0", VA = "0xF86BC0")]
		public GenerateBounds()
		{
		}
	}
	[Token(Token = "0x2000207")]
	public class GenerateObject : MonoBehaviour
	{
		[Token(Token = "0x2000208")]
		public struct GenerateResults
		{
			[Token(Token = "0x4000BE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public LargeObject largeObject;

			[Token(Token = "0x4000BE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public SmallObject smallObject;
		}

		[Token(Token = "0x4000BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool isLarge;

		[Token(Token = "0x4000BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string category;

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0xF86D28", Offset = "0xF86D28", VA = "0xF86D28")]
		public GenerateResults AddToWorld(World.Generation.World world, Vector3 position, Quaternion rotation, float scale = 1f)
		{
			return default(GenerateResults);
		}

		[Token(Token = "0x6000BFF")]
		[Address(RVA = "0xF87124", Offset = "0xF87124", VA = "0xF87124")]
		public GenerateObject()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000209")]
	public class Neighborhood
	{
		[Token(Token = "0x4000BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private string name;

		[Token(Token = "0x4000BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float stories;

		[Token(Token = "0x4000BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float tiers;

		[Token(Token = "0x4000BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float complexity;

		[Token(Token = "0x4000BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private List<Material> wallBases;

		[Token(Token = "0x4000BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private List<Material> walls;

		[Token(Token = "0x4000BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private List<Material> roofs;

		[Token(Token = "0x17000128")]
		public float Stories
		{
			[Token(Token = "0x6000C00")]
			[Address(RVA = "0xF8717C", Offset = "0xF8717C", VA = "0xF8717C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000129")]
		public float Tiers
		{
			[Token(Token = "0x6000C01")]
			[Address(RVA = "0xF87184", Offset = "0xF87184", VA = "0xF87184")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700012A")]
		public float Complexity
		{
			[Token(Token = "0x6000C02")]
			[Address(RVA = "0xF8718C", Offset = "0xF8718C", VA = "0xF8718C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700012B")]
		public IReadOnlyList<Material> WallBases
		{
			[Token(Token = "0x6000C03")]
			[Address(RVA = "0xF87194", Offset = "0xF87194", VA = "0xF87194")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012C")]
		public IReadOnlyList<Material> Walls
		{
			[Token(Token = "0x6000C04")]
			[Address(RVA = "0xF8719C", Offset = "0xF8719C", VA = "0xF8719C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012D")]
		public IReadOnlyList<Material> Roofs
		{
			[Token(Token = "0x6000C05")]
			[Address(RVA = "0xF871A4", Offset = "0xF871A4", VA = "0xF871A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C06")]
		[Address(RVA = "0xF871AC", Offset = "0xF871AC", VA = "0xF871AC")]
		public Neighborhood()
		{
		}
	}
	[Token(Token = "0x200020A")]
	public class MixedNeighborhood
	{
		[Token(Token = "0x4000BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IReadOnlyList<Weighted<Neighborhood>> neighborhoods;

		[Token(Token = "0x1700012E")]
		private Neighborhood Primary
		{
			[Token(Token = "0x6000C08")]
			[Address(RVA = "0xF87444", Offset = "0xF87444", VA = "0xF87444")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012F")]
		public float Stories
		{
			[Token(Token = "0x6000C09")]
			[Address(RVA = "0xF87560", Offset = "0xF87560", VA = "0xF87560")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000130")]
		public float Tiers
		{
			[Token(Token = "0x6000C0A")]
			[Address(RVA = "0xF87664", Offset = "0xF87664", VA = "0xF87664")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000131")]
		public float Complexity
		{
			[Token(Token = "0x6000C0B")]
			[Address(RVA = "0xF87768", Offset = "0xF87768", VA = "0xF87768")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000C07")]
		[Address(RVA = "0xF871B4", Offset = "0xF871B4", VA = "0xF871B4")]
		internal MixedNeighborhood(IEnumerable<Weighted<Neighborhood>> neighborhoods)
		{
		}

		[Token(Token = "0x6000C0C")]
		[Address(RVA = "0xF8786C", Offset = "0xF8786C", VA = "0xF8786C")]
		public Material SampleWallBase()
		{
			return null;
		}

		[Token(Token = "0x6000C0D")]
		[Address(RVA = "0xF878C4", Offset = "0xF878C4", VA = "0xF878C4")]
		public Material SampleWall()
		{
			return null;
		}

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0xF8791C", Offset = "0xF8791C", VA = "0xF8791C")]
		public Material SampleRoof()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x200020D")]
	[CreateAssetMenu(menuName = "Park Type")]
	public class ParkType : ScriptableObject
	{
		[Token(Token = "0x4000BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int SidewalkWidth;

		[Token(Token = "0x4000BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float ParkPathWidth;

		[Token(Token = "0x4000BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int[] numTreesPerBorder;

		[Token(Token = "0x4000BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float treeBorderWidth;

		[Token(Token = "0x4000BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float socialDistancePerTree;

		[Token(Token = "0x4000BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool hasFountain;

		[Token(Token = "0x4000BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float fountainOffset;

		[Token(Token = "0x4000BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float fountainScaleMin;

		[Token(Token = "0x4000C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float fountainScaleMax;

		[Token(Token = "0x4000C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject[] fountainPrefabs;

		[Token(Token = "0x4000C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int minNumPaths;

		[Token(Token = "0x4000C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int maxNumPaths;

		[Token(Token = "0x4000C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Material parkPathMaterial;

		[Token(Token = "0x4000C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int minNumLamps;

		[Token(Token = "0x4000C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public int maxNumLamps;

		[Token(Token = "0x4000C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject lampsPrefabs;

		[Token(Token = "0x4000C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int minNumBenches;

		[Token(Token = "0x4000C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int maxNumBenches;

		[Token(Token = "0x4000C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GameObject benchPrefabs;

		[Token(Token = "0x4000C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public int minNumTrash;

		[Token(Token = "0x4000C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public int maxNumTrash;

		[Token(Token = "0x4000C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public GameObject trashPrefabs;

		[Token(Token = "0x6000C18")]
		[Address(RVA = "0xF87BEC", Offset = "0xF87BEC", VA = "0xF87BEC")]
		public ParkType()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200020E")]
	public abstract class RewriteRule
	{
		[Token(Token = "0x6000C19")]
		public abstract PolyArea Rewrite(PolyArea input);

		[Token(Token = "0x6000C1A")]
		[Address(RVA = "0xF87BF4", Offset = "0xF87BF4", VA = "0xF87BF4")]
		public static List<RewriteRule> Sample(float complexity)
		{
			return null;
		}

		[Token(Token = "0x6000C1B")]
		[Address(RVA = "0xF87D58", Offset = "0xF87D58", VA = "0xF87D58")]
		public static RewriteRule Sample()
		{
			return null;
		}

		[Token(Token = "0x6000C1C")]
		[Address(RVA = "0xF88244", Offset = "0xF88244", VA = "0xF88244")]
		protected RewriteRule()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200020F")]
	public class Bevel : RewriteRule
	{
		[Token(Token = "0x4000C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float amt;

		[Token(Token = "0x6000C1D")]
		[Address(RVA = "0xF8824C", Offset = "0xF8824C", VA = "0xF8824C", Slot = "4")]
		public override PolyArea Rewrite(PolyArea input)
		{
			return null;
		}

		[Token(Token = "0x6000C1E")]
		[Address(RVA = "0xF88140", Offset = "0xF88140", VA = "0xF88140")]
		public Bevel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000210")]
	public class Curve : RewriteRule
	{
		[Token(Token = "0x4000C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int detail;

		[Token(Token = "0x4000C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int smoothing;

		[Token(Token = "0x6000C1F")]
		[Address(RVA = "0xF882A4", Offset = "0xF882A4", VA = "0xF882A4")]
		private List<Vector2> CurvePath(List<Vector2> path)
		{
			return null;
		}

		[Token(Token = "0x6000C20")]
		[Address(RVA = "0xF886F8", Offset = "0xF886F8", VA = "0xF886F8", Slot = "4")]
		public override PolyArea Rewrite(PolyArea input)
		{
			return null;
		}

		[Token(Token = "0x6000C21")]
		[Address(RVA = "0xF88154", Offset = "0xF88154", VA = "0xF88154")]
		public Curve()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000211")]
	public class Inset : RewriteRule
	{
		[Token(Token = "0x4000C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector2 insetScale;

		[Token(Token = "0x4000C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector2 insetPos;

		[Token(Token = "0x6000C22")]
		[Address(RVA = "0xF887EC", Offset = "0xF887EC", VA = "0xF887EC", Slot = "4")]
		public override PolyArea Rewrite(PolyArea input)
		{
			return null;
		}

		[Token(Token = "0x6000C23")]
		[Address(RVA = "0xF881B8", Offset = "0xF881B8", VA = "0xF881B8")]
		public Inset()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000213")]
	public class Mirror : RewriteRule
	{
		[Token(Token = "0x4000C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool longAxis;

		[Token(Token = "0x6000C27")]
		[Address(RVA = "0xF88BBC", Offset = "0xF88BBC", VA = "0xF88BBC")]
		private static Vector2 MirrorVec(Vector2 v, Vector2 center, Vector2 axis)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000C28")]
		[Address(RVA = "0xF88BF4", Offset = "0xF88BF4", VA = "0xF88BF4", Slot = "4")]
		public override PolyArea Rewrite(PolyArea input)
		{
			return null;
		}

		[Token(Token = "0x6000C29")]
		[Address(RVA = "0xF88170", Offset = "0xF88170", VA = "0xF88170")]
		public Mirror()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000215")]
	public class Offset : RewriteRule
	{
		[Token(Token = "0x4000C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float amt;

		[Token(Token = "0x6000C2D")]
		[Address(RVA = "0xF88F2C", Offset = "0xF88F2C", VA = "0xF88F2C", Slot = "4")]
		public override PolyArea Rewrite(PolyArea input)
		{
			return null;
		}

		[Token(Token = "0x6000C2E")]
		[Address(RVA = "0xF8818C", Offset = "0xF8818C", VA = "0xF8818C")]
		public Offset()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000216")]
	public class Rotate : RewriteRule
	{
		[Token(Token = "0x4000C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float angle;

		[Token(Token = "0x6000C2F")]
		[Address(RVA = "0xF88F6C", Offset = "0xF88F6C", VA = "0xF88F6C")]
		private Vector2 RotateVec(Vector2 v, Vector2 center)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000C30")]
		[Address(RVA = "0xF88FD4", Offset = "0xF88FD4", VA = "0xF88FD4", Slot = "4")]
		public override PolyArea Rewrite(PolyArea input)
		{
			return null;
		}

		[Token(Token = "0x6000C31")]
		[Address(RVA = "0xF88168", Offset = "0xF88168", VA = "0xF88168")]
		public Rotate()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000218")]
	public class RotationalSymmetry : RewriteRule
	{
		[Token(Token = "0x4000C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int rots;

		[Token(Token = "0x6000C35")]
		[Address(RVA = "0xF891F8", Offset = "0xF891F8", VA = "0xF891F8")]
		private Vector2 RotateVec(Vector2 v, Vector2 center, float angle)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000C36")]
		[Address(RVA = "0xF8925C", Offset = "0xF8925C", VA = "0xF8925C", Slot = "4")]
		public override PolyArea Rewrite(PolyArea input)
		{
			return null;
		}

		[Token(Token = "0x6000C37")]
		[Address(RVA = "0xF881A8", Offset = "0xF881A8", VA = "0xF881A8")]
		public RotationalSymmetry()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200021A")]
	public class Scale : RewriteRule
	{
		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float newScale;

		[Token(Token = "0x6000C3B")]
		[Address(RVA = "0xF8951C", Offset = "0xF8951C", VA = "0xF8951C", Slot = "4")]
		public override PolyArea Rewrite(PolyArea input)
		{
			return null;
		}

		[Token(Token = "0x6000C3C")]
		[Address(RVA = "0xF88178", Offset = "0xF88178", VA = "0xF88178")]
		public Scale()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200021C")]
	public class Square : RewriteRule
	{
		[Token(Token = "0x6000C40")]
		[Address(RVA = "0xF89758", Offset = "0xF89758", VA = "0xF89758", Slot = "4")]
		public override PolyArea Rewrite(PolyArea input)
		{
			return null;
		}

		[Token(Token = "0x6000C41")]
		[Address(RVA = "0xF881A0", Offset = "0xF881A0", VA = "0xF881A0")]
		public Square()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200021E")]
	[CreateAssetMenu(menuName = "Roof Type")]
	public class RoofType : ScriptableObject
	{
		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float generateRoofObjectProb;

		[Token(Token = "0x4000C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float rooftopDensity;

		[Token(Token = "0x4000C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GenerateBounds[] rooftopPrefabs;

		[Token(Token = "0x4000C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float rooftopBillboardDensity;

		[Token(Token = "0x4000C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float rooftopGearDensity;

		[Token(Token = "0x4000C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GenerateBounds[] rooftopBillboardPrefabs;

		[Token(Token = "0x6000C45")]
		[Address(RVA = "0xF89AB8", Offset = "0xF89AB8", VA = "0xF89AB8")]
		public RoofType()
		{
		}
	}
}
namespace World.Generation
{
	[Token(Token = "0x200021F")]
	public class CityParameters : MonoBehaviour
	{
		[Token(Token = "0x4000C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Block Settings")]
		public float parkProb;

		[Token(Token = "0x4000C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float sidewalkWidth;

		[Token(Token = "0x4000C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float sidewalkHeight;

		[Token(Token = "0x4000C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Street Settings")]
		public GenerateBounds trafficLightPrefab;

		[Token(Token = "0x4000C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float carDensity;

		[Token(Token = "0x4000C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GenerateBounds[] carPrefabs;

		[Token(Token = "0x4000C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float streetObjectDensity;

		[Token(Token = "0x4000C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float streetObjectOffset;

		[Token(Token = "0x4000C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GenerateBounds[] streetObjectPrefabs;

		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float streetGearDensity;

		[Token(Token = "0x4000C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Building Settings")]
		public List<Neighborhood> neighborhoods;

		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float neighborhoodSharpness;

		[Token(Token = "0x4000C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float minFloors;

		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float perlinHeightFrequency;

		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float floorHeight;

		[Token(Token = "0x4000C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float fenceHeight;

		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float fenceWidth;

		[Token(Token = "0x4000C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float fenceMinWidth;

		[Token(Token = "0x4000C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Header("Other")]
		public int randomSeed;

		[Token(Token = "0x4000C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public GenerateBounds billboardSidePrefab;

		[Token(Token = "0x4000C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float billboardSideDensity;

		[Token(Token = "0x4000C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float gearSideDensity;

		[Token(Token = "0x4000C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float gearVerticalOffset;

		[Token(Token = "0x4000C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public GenerateBounds gearPrefab;

		[Token(Token = "0x4000C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float maxWorldSize;

		[Token(Token = "0x4000C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[Header("Cranes")]
		public float craneDensity;

		[Token(Token = "0x4000C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public GenerateBounds[] cranePrefabs;

		[Token(Token = "0x4000C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Header("Roof Settings")]
		public RoofType[] roofTypes;

		[Token(Token = "0x4000C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Header("Park Settings")]
		public ParkType[] ParkTypes;

		[Token(Token = "0x4000C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Header("Tree Settings")]
		public float borderStart;

		[Token(Token = "0x4000C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float treeScaleMin;

		[Token(Token = "0x4000C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float treeScaleMax;

		[Token(Token = "0x4000C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public GenerateObject[] treePrefabs;

		[Token(Token = "0x4000C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Header("Ocean Settings")]
		public float oceanScaleMin;

		[Token(Token = "0x4000C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public float oceanScaleMax;

		[Token(Token = "0x4000C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public GameObject[] oceanGroup1Prefabs;

		[Token(Token = "0x4000C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public float numSmallBoats;

		[Token(Token = "0x4000C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public float minSmallBoatRadius;

		[Token(Token = "0x4000C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public float maxSmallBoatRadius;

		[Token(Token = "0x4000C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public GameObject[] oceanSmallBoatPrefabs;

		[Token(Token = "0x4000C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public float numLargeBoats;

		[Token(Token = "0x4000C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		public float minLargeBoatRadius;

		[Token(Token = "0x4000C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public float maxLargeBoatRadius;

		[Token(Token = "0x4000C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public GameObject[] oceanLargeBoatPrefabs;

		[Token(Token = "0x4000C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[Header("Materials")]
		public Material roadMaterial;

		[Token(Token = "0x4000C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public Material roadEmptyMaterial;

		[Token(Token = "0x4000C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public Material grassMaterial;

		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public Material sidewalkMaterial;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public Material oceanWallMaterial;

		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public Material genericRoofMaterial;

		[Token(Token = "0x4000C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[Header("Enemy Settings")]
		public GenerateBounds parkSquad;

		[Token(Token = "0x4000C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public GenerateBounds roadSquad;

		[Token(Token = "0x4000C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public GenerateBounds roofSquad;

		[Token(Token = "0x4000C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public float parkDensity;

		[Token(Token = "0x4000C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		public float roadDensity;

		[Token(Token = "0x4000C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public float roofDensity;

		[Token(Token = "0x4000C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		public float minHostileRadius;

		[Token(Token = "0x4000C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public float hostilePerlinSeed;

		[Token(Token = "0x4000C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		public float hostilePerlinFrequency;

		[Token(Token = "0x4000C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public float hostilePerlinOffset;

		[Token(Token = "0x4000C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		public float hostilePerlinMul;

		[Token(Token = "0x4000C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[Header("Enemy Spawner Settings")]
		public GenerateBounds parkSpawner;

		[Token(Token = "0x4000C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public GenerateBounds roadSpawner;

		[Token(Token = "0x4000C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public GenerateBounds roofSpawner;

		[Token(Token = "0x4000C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public float parkSpawnerDensity;

		[Token(Token = "0x4000C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		public float roadSpawnerDensity;

		[Token(Token = "0x4000C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public float roofSpawnerDensity;

		[Token(Token = "0x6000C46")]
		[Address(RVA = "0xF89ADC", Offset = "0xF89ADC", VA = "0xF89ADC")]
		public MixedNeighborhood NeighborhoodAt(Vector2 pos)
		{
			return null;
		}

		[Token(Token = "0x6000C47")]
		[Address(RVA = "0xF89E28", Offset = "0xF89E28", VA = "0xF89E28")]
		public float TargetSize(PolyArea p1)
		{
			return default(float);
		}

		[Token(Token = "0x6000C48")]
		[Address(RVA = "0xF89E70", Offset = "0xF89E70", VA = "0xF89E70")]
		public float EnemyDensity(Vector2 pos)
		{
			return default(float);
		}

		[Token(Token = "0x6000C49")]
		[Address(RVA = "0xF89F6C", Offset = "0xF89F6C", VA = "0xF89F6C")]
		public CityParameters()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000222")]
	public struct GeneratedObjects
	{
		[Token(Token = "0x4000C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GameObject model;

		[Token(Token = "0x4000C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public GameObject largeObjects;

		[Token(Token = "0x4000C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject smallObjects;

		[Token(Token = "0x17000132")]
		public GameObject[] All
		{
			[Token(Token = "0x6000C51")]
			[Address(RVA = "0xF8A3B0", Offset = "0xF8A3B0", VA = "0xF8A3B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000133")]
		public string[] Names
		{
			[Token(Token = "0x6000C52")]
			[Address(RVA = "0xF8A4C0", Offset = "0xF8A4C0", VA = "0xF8A4C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000134")]
		public int Num
		{
			[Token(Token = "0x6000C53")]
			[Address(RVA = "0xF8A638", Offset = "0xF8A638", VA = "0xF8A638")]
			get
			{
				return default(int);
			}
		}
	}
	[Token(Token = "0x2000223")]
	public class Parser
	{
		[Token(Token = "0x4000C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Queue<string> lines;

		[Token(Token = "0x4000C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly World world;

		[Token(Token = "0x6000C54")]
		[Address(RVA = "0xF8A640", Offset = "0xF8A640", VA = "0xF8A640")]
		public Parser(Queue<string> lines, World world)
		{
		}

		[Token(Token = "0x6000C55")]
		private T[] ParseArray<T>(Func<T> Loader)
		{
			return null;
		}

		[Token(Token = "0x6000C56")]
		[Address(RVA = "0xF8A684", Offset = "0xF8A684", VA = "0xF8A684")]
		private int[] ParseIdArray(Func<WorldObject> Loader)
		{
			return null;
		}

		[Token(Token = "0x6000C57")]
		[Address(RVA = "0xF8A7AC", Offset = "0xF8A7AC", VA = "0xF8A7AC")]
		private Vector2[] ParseVector2List()
		{
			return null;
		}

		[Token(Token = "0x6000C58")]
		[Address(RVA = "0xF8A9B8", Offset = "0xF8A9B8", VA = "0xF8A9B8")]
		private Path ParsePath()
		{
			return null;
		}

		[Token(Token = "0x6000C59")]
		[Address(RVA = "0xF8AA38", Offset = "0xF8AA38", VA = "0xF8AA38")]
		private PolyArea ParseArea()
		{
			return null;
		}

		[Token(Token = "0x6000C5A")]
		[Address(RVA = "0xF8AB0C", Offset = "0xF8AB0C", VA = "0xF8AB0C")]
		private Intersection ParseIntersection()
		{
			return null;
		}

		[Token(Token = "0x6000C5B")]
		[Address(RVA = "0xF8ABA8", Offset = "0xF8ABA8", VA = "0xF8ABA8")]
		private Road ParseRoad()
		{
			return null;
		}

		[Token(Token = "0x6000C5C")]
		[Address(RVA = "0xF8AC5C", Offset = "0xF8AC5C", VA = "0xF8AC5C")]
		private Block ParseBlock()
		{
			return null;
		}

		[Token(Token = "0x6000C5D")]
		[Address(RVA = "0xF8AE8C", Offset = "0xF8AE8C", VA = "0xF8AE8C")]
		private Lot ParseLot()
		{
			return null;
		}

		[Token(Token = "0x6000C5E")]
		[Address(RVA = "0xF8AF04", Offset = "0xF8AF04", VA = "0xF8AF04")]
		public void ParseWorld()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000225")]
	public class Path
	{
		[Token(Token = "0x4000C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector2[] path;

		[Token(Token = "0x17000135")]
		public Vector2 Start
		{
			[Token(Token = "0x6000C62")]
			[Address(RVA = "0xF8B158", Offset = "0xF8B158", VA = "0xF8B158")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x17000136")]
		public Vector2 End
		{
			[Token(Token = "0x6000C63")]
			[Address(RVA = "0xF8B180", Offset = "0xF8B180", VA = "0xF8B180")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x17000137")]
		public Vector2 StartDirection
		{
			[Token(Token = "0x6000C64")]
			[Address(RVA = "0xF8B1B8", Offset = "0xF8B1B8", VA = "0xF8B1B8")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x17000138")]
		public Vector2 EndDirection
		{
			[Token(Token = "0x6000C65")]
			[Address(RVA = "0xF8B298", Offset = "0xF8B298", VA = "0xF8B298")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x17000139")]
		public float Length
		{
			[Token(Token = "0x6000C66")]
			[Address(RVA = "0xF8B3A4", Offset = "0xF8B3A4", VA = "0xF8B3A4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700013A")]
		public Vector2[] Array
		{
			[Token(Token = "0x6000C67")]
			[Address(RVA = "0xF8B3B0", Offset = "0xF8B3B0", VA = "0xF8B3B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C68")]
		[Address(RVA = "0xF8B3F8", Offset = "0xF8B3F8", VA = "0xF8B3F8")]
		public Vector2 Along(float amt)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000C69")]
		[Address(RVA = "0xF8B56C", Offset = "0xF8B56C", VA = "0xF8B56C")]
		public Vector2 Dir(float amt)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000C6A")]
		[Address(RVA = "0xF8B74C", Offset = "0xF8B74C", VA = "0xF8B74C")]
		public int? NextIndex(Vector2 position, Vector2 direction, float minDistance)
		{
			return null;
		}

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0xF8BA08", Offset = "0xF8BA08", VA = "0xF8BA08")]
		public Vector2 Tangent(int index)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000C6C")]
		[Address(RVA = "0xF8AA30", Offset = "0xF8AA30", VA = "0xF8AA30")]
		public Path()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000228")]
	public class World
	{
		[Serializable]
		[Token(Token = "0x2000229")]
		private class WorldObjectList
		{
			[Token(Token = "0x4000C87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string typeName;

			[Token(Token = "0x4000C88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeReference]
			public List<WorldObject> objects;

			[Token(Token = "0x4000C89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int numGenerated;

			[Token(Token = "0x6000C7E")]
			[Address(RVA = "0xF8C4E4", Offset = "0xF8C4E4", VA = "0xF8C4E4")]
			public WorldObjectList()
			{
			}
		}

		[Token(Token = "0x4000C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private List<WorldObjectList> objects;

		[Token(Token = "0x4000C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CityParameters parameters;

		[Token(Token = "0x6000C74")]
		public T Add<T>(T obj) where T : WorldObject
		{
			return null;
		}

		[Token(Token = "0x6000C75")]
		[Address(RVA = "0xF86F20", Offset = "0xF86F20", VA = "0xF86F20")]
		public SmallObject AddSmallObject(string groupName, SmallObject smallObject)
		{
			return null;
		}

		[Token(Token = "0x6000C76")]
		[Address(RVA = "0xF8BED8", Offset = "0xF8BED8", VA = "0xF8BED8")]
		public IEnumerable<WorldObject> AllObjects()
		{
			return null;
		}

		[Token(Token = "0x6000C77")]
		[Address(RVA = "0xF8BFDC", Offset = "0xF8BFDC", VA = "0xF8BFDC")]
		public void GenerateAll()
		{
		}

		[Token(Token = "0x6000C78")]
		public T Get<T>(int id) where T : WorldObject
		{
			return null;
		}

		[Token(Token = "0x6000C79")]
		public IEnumerable<T> GetAll<T>() where T : WorldObject
		{
			return null;
		}

		[Token(Token = "0x6000C7A")]
		private WorldObjectList GetOrAddList<T>() where T : WorldObject
		{
			return null;
		}

		[Token(Token = "0x6000C7B")]
		[Address(RVA = "0xF8C254", Offset = "0xF8C254", VA = "0xF8C254")]
		public World()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200022D")]
	public abstract class WorldObject
	{
		[Token(Token = "0x4000C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private int id;

		[Token(Token = "0x4000C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool doNotGenerate;

		[Token(Token = "0x1700013B")]
		public int Id
		{
			[Token(Token = "0x6000C8A")]
			[Address(RVA = "0xF8C794", Offset = "0xF8C794", VA = "0xF8C794")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700013C")]
		public CityParameters p
		{
			[Token(Token = "0x6000C8B")]
			[Address(RVA = "0xF8C79C", Offset = "0xF8C79C", VA = "0xF8C79C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013D")]
		public World World
		{
			[Token(Token = "0x6000C8C")]
			[Address(RVA = "0xF8C7B8", Offset = "0xF8C7B8", VA = "0xF8C7B8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C8D")]
			[Address(RVA = "0xF8C7C0", Offset = "0xF8C7C0", VA = "0xF8C7C0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0xF8C7C8", Offset = "0xF8C7C8", VA = "0xF8C7C8")]
		internal void SetWorldAndId(World world, int id)
		{
		}

		[Token(Token = "0x6000C8F")]
		public abstract void Generate();

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0xF8C7F4", Offset = "0xF8C7F4", VA = "0xF8C7F4", Slot = "5")]
		public virtual void CreateModel(ModelBuilder model)
		{
		}

		[Token(Token = "0x6000C91")]
		[Address(RVA = "0xF8C7F8", Offset = "0xF8C7F8", VA = "0xF8C7F8", Slot = "6")]
		public virtual void CreateObject(GeneratedObjects generatedObjects)
		{
		}

		[Token(Token = "0x6000C92")]
		[Address(RVA = "0xF8C7FC", Offset = "0xF8C7FC", VA = "0xF8C7FC")]
		protected WorldObject()
		{
		}
	}
}
namespace World.Generation.WorldObjects
{
	[Serializable]
	[Token(Token = "0x200022E")]
	public class Block : WorldObject
	{
		[Token(Token = "0x4000C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PolyArea area;

		[Token(Token = "0x4000C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<int> adjacentIntersections;

		[Token(Token = "0x4000C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<int> adjacentRoads;

		[Token(Token = "0x4000C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool isPark;

		[Token(Token = "0x4000C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool isLandmarkPark;

		[Token(Token = "0x4000C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<int> childLots;

		[Token(Token = "0x4000C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<int> childTrees;

		[Token(Token = "0x4000C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int parkTypeNum;

		[Token(Token = "0x4000C9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public PolyArea grass;

		[Token(Token = "0x4000C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public PolyArea parkPath;

		[Token(Token = "0x6000C93")]
		[Address(RVA = "0xF8C804", Offset = "0xF8C804", VA = "0xF8C804", Slot = "4")]
		public override void Generate()
		{
		}

		[Token(Token = "0x6000C94")]
		[Address(RVA = "0xF8E388", Offset = "0xF8E388", VA = "0xF8E388", Slot = "5")]
		public override void CreateModel(ModelBuilder model)
		{
		}

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0xF8D480", Offset = "0xF8D480", VA = "0xF8D480")]
		private void MakePark()
		{
		}

		[Token(Token = "0x6000C96")]
		[Address(RVA = "0xF8AD7C", Offset = "0xF8AD7C", VA = "0xF8AD7C")]
		public Block()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000231")]
	public class Building : WorldObject
	{
		[Token(Token = "0x2000236")]
		[CompilerGenerated]
		private sealed class <ApplyRules>d__14 : IEnumerable<PolyArea>, IEnumerable, IEnumerator<PolyArea>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000CBB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000CBC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private PolyArea <>2__current;

			[Token(Token = "0x4000CBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000CBE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private PolyArea baseArea;

			[Token(Token = "0x4000CBF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public PolyArea <>3__baseArea;

			[Token(Token = "0x4000CC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private List<List<RewriteRule>> rules;

			[Token(Token = "0x4000CC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public List<List<RewriteRule>> <>3__rules;

			[Token(Token = "0x4000CC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private PolyArea <area>5__2;

			[Token(Token = "0x4000CC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private int <i>5__3;

			[Token(Token = "0x1700013E")]
			private PolyArea System.Collections.Generic.IEnumerator<World.Shapes.PolyArea>.Current
			{
				[Token(Token = "0x6000CB7")]
				[Address(RVA = "0xF90DE0", Offset = "0xF90DE0", VA = "0xF90DE0", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700013F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000CB9")]
				[Address(RVA = "0xF90E28", Offset = "0xF90E28", VA = "0xF90E28", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000CB4")]
			[Address(RVA = "0xF9068C", Offset = "0xF9068C", VA = "0xF9068C")]
			[DebuggerHidden]
			public <ApplyRules>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6000CB5")]
			[Address(RVA = "0xF90A44", Offset = "0xF90A44", VA = "0xF90A44", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000CB6")]
			[Address(RVA = "0xF90A48", Offset = "0xF90A48", VA = "0xF90A48", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000CB8")]
			[Address(RVA = "0xF90DE8", Offset = "0xF90DE8", VA = "0xF90DE8", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6000CBA")]
			[Address(RVA = "0xF90E30", Offset = "0xF90E30", VA = "0xF90E30", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<PolyArea> System.Collections.Generic.IEnumerable<World.Shapes.PolyArea>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6000CBB")]
			[Address(RVA = "0xF90EEC", Offset = "0xF90EEC", VA = "0xF90EEC", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x4000CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PolyArea area;

		[Token(Token = "0x4000CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<float> tierHeights;

		[Token(Token = "0x4000CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float height;

		[Token(Token = "0x4000CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Material wallBaseMaterial;

		[Token(Token = "0x4000CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Material wallMaterial;

		[Token(Token = "0x4000CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Material roofMaterial;

		[Token(Token = "0x4000CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Material fenceMaterial;

		[Token(Token = "0x4000CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int parentLot;

		[Token(Token = "0x4000CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<PolyArea> areas;

		[Token(Token = "0x4000CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<List<RewriteRule>> rules;

		[NonSerialized]
		[Token(Token = "0x4000CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private List<Building> nearbyBuildings;

		[Token(Token = "0x6000C9F")]
		[Address(RVA = "0xF8F43C", Offset = "0xF8F43C", VA = "0xF8F43C", Slot = "4")]
		public override void Generate()
		{
		}

		[Token(Token = "0x6000CA0")]
		[Address(RVA = "0xF8F7CC", Offset = "0xF8F7CC", VA = "0xF8F7CC")]
		private Tri? TriangleFilter(Tri tri)
		{
			return null;
		}

		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0xF8FE8C", Offset = "0xF8FE8C", VA = "0xF8FE8C", Slot = "5")]
		public override void CreateModel(ModelBuilder model)
		{
		}

		[Token(Token = "0x6000CA2")]
		[Address(RVA = "0xF8F724", Offset = "0xF8F724", VA = "0xF8F724")]
		[IteratorStateMachine(typeof(<ApplyRules>d__14))]
		private static IEnumerable<PolyArea> ApplyRules(PolyArea baseArea, List<List<RewriteRule>> rules)
		{
			return null;
		}

		[Token(Token = "0x6000CA3")]
		[Address(RVA = "0xF906C0", Offset = "0xF906C0", VA = "0xF906C0")]
		public Building()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000237")]
	public class Intersection : WorldObject
	{
		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PolyArea area;

		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<int> adjacentRoads;

		[Token(Token = "0x6000CBC")]
		[Address(RVA = "0xF90EF0", Offset = "0xF90EF0", VA = "0xF90EF0", Slot = "4")]
		public override void Generate()
		{
		}

		[Token(Token = "0x6000CBD")]
		[Address(RVA = "0xF90EF4", Offset = "0xF90EF4", VA = "0xF90EF4", Slot = "5")]
		public override void CreateModel(ModelBuilder model)
		{
		}

		[Token(Token = "0x6000CBE")]
		[Address(RVA = "0xF90FE0", Offset = "0xF90FE0", VA = "0xF90FE0")]
		public Intersection()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000238")]
	public class LargeObject : WorldObject
	{
		[Token(Token = "0x4000CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 position;

		[Token(Token = "0x4000CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Quaternion rotation;

		[Token(Token = "0x4000CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float scale;

		[Token(Token = "0x4000CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject prefab;

		[Token(Token = "0x6000CBF")]
		[Address(RVA = "0xF91068", Offset = "0xF91068", VA = "0xF91068", Slot = "4")]
		public override void Generate()
		{
		}

		[Token(Token = "0x6000CC0")]
		[Address(RVA = "0xF9106C", Offset = "0xF9106C", VA = "0xF9106C", Slot = "6")]
		public override void CreateObject(GeneratedObjects generatedObjects)
		{
		}

		[Token(Token = "0x6000CC1")]
		[Address(RVA = "0xF91070", Offset = "0xF91070", VA = "0xF91070")]
		public LargeObject()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000239")]
	public class Lot : WorldObject
	{
		[Token(Token = "0x4000CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PolyArea area;

		[Token(Token = "0x4000CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int parentBlock;

		[Token(Token = "0x4000CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int childBuilding;

		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0xF910D0", Offset = "0xF910D0", VA = "0xF910D0", Slot = "4")]
		public override void Generate()
		{
		}

		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0xF916A8", Offset = "0xF916A8", VA = "0xF916A8")]
		public Lot()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200023B")]
	public class Ocean : WorldObject
	{
		[Token(Token = "0x4000CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PolyArea cityArea;

		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0xF916DC", Offset = "0xF916DC", VA = "0xF916DC", Slot = "4")]
		public override void Generate()
		{
		}

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0xF91FC0", Offset = "0xF91FC0", VA = "0xF91FC0", Slot = "5")]
		public override void CreateModel(ModelBuilder model)
		{
		}

		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0xF92680", Offset = "0xF92680", VA = "0xF92680")]
		public Ocean()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200023C")]
	public class Road : WorldObject
	{
		[Token(Token = "0x4000CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Path primaryPath;

		[Token(Token = "0x4000CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Path rightPath;

		[Token(Token = "0x4000CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int reverseRoad;

		[Token(Token = "0x4000CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int startIntersection;

		[Token(Token = "0x4000CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int endIntersection;

		[Token(Token = "0x4000CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int rightBlock;

		[Token(Token = "0x4000CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public EmptySpace emptySpace;

		[Token(Token = "0x4000CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool _hasComputedCenterPath;

		[Token(Token = "0x4000CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Path _myCenterPath;

		[Token(Token = "0x17000140")]
		public float Width
		{
			[Token(Token = "0x6000CCC")]
			[Address(RVA = "0xF92800", Offset = "0xF92800", VA = "0xF92800")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000CCD")]
		[Address(RVA = "0xF9289C", Offset = "0xF9289C", VA = "0xF9289C")]
		public Path CenterPath()
		{
			return null;
		}

		[Token(Token = "0x6000CCE")]
		[Address(RVA = "0xF92A40", Offset = "0xF92A40", VA = "0xF92A40", Slot = "4")]
		public override void Generate()
		{
		}

		[Token(Token = "0x6000CCF")]
		[Address(RVA = "0xF93950", Offset = "0xF93950", VA = "0xF93950", Slot = "5")]
		public override void CreateModel(ModelBuilder model)
		{
		}

		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0xF93A6C", Offset = "0xF93A6C", VA = "0xF93A6C")]
		public Road()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200023E")]
	public class Rooftop : WorldObject
	{
		[Token(Token = "0x4000CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PolyArea area;

		[Token(Token = "0x4000CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PolyArea areaAbove;

		[Token(Token = "0x4000CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float height;

		[Token(Token = "0x4000CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Material material;

		[Token(Token = "0x4000CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Material fenceMaterial;

		[Token(Token = "0x4000CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public RoofType roofType;

		[Token(Token = "0x4000CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public EmptySpace emptySpace;

		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0xF94254", Offset = "0xF94254", VA = "0xF94254", Slot = "4")]
		public override void Generate()
		{
		}

		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0xF949A8", Offset = "0xF949A8", VA = "0xF949A8", Slot = "5")]
		public override void CreateModel(ModelBuilder model)
		{
		}

		[Token(Token = "0x6000CDC")]
		[Address(RVA = "0xF94744", Offset = "0xF94744", VA = "0xF94744")]
		private void MakeRooftopGeneral(float density, GenerateBounds[] prefabs, bool alignToEdges, float verticalOffset = 0f)
		{
		}

		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0xF8F7C4", Offset = "0xF8F7C4", VA = "0xF8F7C4")]
		public Rooftop()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000240")]
	public class RootObject : WorldObject
	{
		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0xF953F0", Offset = "0xF953F0", VA = "0xF953F0", Slot = "4")]
		public override void Generate()
		{
		}

		[Token(Token = "0x6000CE4")]
		[Address(RVA = "0xF96F1C", Offset = "0xF96F1C", VA = "0xF96F1C")]
		public RootObject()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000243")]
	public class SmallObjectGroup : WorldObject
	{
		[Token(Token = "0x4000CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string name;

		[Token(Token = "0x4000CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float distance;

		[Token(Token = "0x4000CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool objectsAllStatic;

		[Token(Token = "0x4000CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<SmallObject> smallObjects;

		[Token(Token = "0x6000CEF")]
		[Address(RVA = "0xF97270", Offset = "0xF97270", VA = "0xF97270", Slot = "4")]
		public override void Generate()
		{
		}

		[Token(Token = "0x6000CF0")]
		[Address(RVA = "0xF97274", Offset = "0xF97274", VA = "0xF97274", Slot = "6")]
		public override void CreateObject(GeneratedObjects generatedObjects)
		{
		}

		[Token(Token = "0x6000CF1")]
		[Address(RVA = "0xF97278", Offset = "0xF97278", VA = "0xF97278")]
		public SmallObjectGroup()
		{
		}
	}
}
namespace Utility
{
	[Token(Token = "0x2000244")]
	public static class BoundsUtils
	{
		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Vector3[] CAPSULE_DIRS;

		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0xF97308", Offset = "0xF97308", VA = "0xF97308")]
		private static Vector3[] Corners(Bounds bounds)
		{
			return null;
		}

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0xF97590", Offset = "0xF97590", VA = "0xF97590")]
		private static PolyArea Enclose(IEnumerable<Vector3> points)
		{
			return null;
		}

		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0xF977EC", Offset = "0xF977EC", VA = "0xF977EC")]
		private static PolyArea Merge(PolyArea[] boundsList)
		{
			return null;
		}

		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0xF978A8", Offset = "0xF978A8", VA = "0xF978A8")]
		private static PolyArea BoxColliderBounds(BoxCollider collider)
		{
			return null;
		}

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0xF97A14", Offset = "0xF97A14", VA = "0xF97A14")]
		private static PolyArea CapsuleColliderBounds(CapsuleCollider collider)
		{
			return null;
		}

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0xF97D04", Offset = "0xF97D04", VA = "0xF97D04")]
		private static PolyArea MeshColliderBounds(MeshCollider collider)
		{
			return null;
		}

		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0xF97E30", Offset = "0xF97E30", VA = "0xF97E30")]
		private static PolyArea SphereColliderBounds(SphereCollider collider)
		{
			return null;
		}

		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0xF98008", Offset = "0xF98008", VA = "0xF98008")]
		public static PolyArea GetBounds(GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6000CFA")]
		[Address(RVA = "0xF97F84", Offset = "0xF97F84", VA = "0xF97F84")]
		public static PolyArea ToPolyArea(Bounds bounds)
		{
			return null;
		}
	}
	[Token(Token = "0x2000246")]
	public class Cache<T>
	{
		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int period;

		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<T> recompute;

		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int count;

		[Token(Token = "0x17000141")]
		public T Value
		{
			[Token(Token = "0x6000D00")]
			[CompilerGenerated]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x6000D01")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000CFF")]
		public Cache(int period, Func<T> recompute)
		{
		}

		[Token(Token = "0x6000D02")]
		public bool Update()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000247")]
	public class CollisionEffect : MonoBehaviour
	{
		[Token(Token = "0x4000CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject collisionEffectPrefab;

		[Token(Token = "0x4000CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject bouncyEffectPrefab;

		[Token(Token = "0x4000CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool bouncyEnabled;

		[Token(Token = "0x4000CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float minImpulse;

		[Token(Token = "0x4000CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float offset;

		[Token(Token = "0x4000CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool transferVelocity;

		[Token(Token = "0x4000CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool setScale;

		[Token(Token = "0x4000CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float scaleMod;

		[Token(Token = "0x4000CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float maxScale;

		[Token(Token = "0x4000CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool setVolume;

		[Token(Token = "0x4000CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float volumeMod;

		[Token(Token = "0x4000CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float impulseDecay;

		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float minTime;

		[Token(Token = "0x4000D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float elapsedTime;

		[Token(Token = "0x4000D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float recentImpulse;

		[Token(Token = "0x6000D03")]
		[Address(RVA = "0xF98510", Offset = "0xF98510", VA = "0xF98510")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D04")]
		[Address(RVA = "0xF9855C", Offset = "0xF9855C", VA = "0xF9855C")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000D05")]
		[Address(RVA = "0xF98868", Offset = "0xF98868", VA = "0xF98868")]
		public CollisionEffect()
		{
		}
	}
	[Token(Token = "0x2000248")]
	public class DestroyOnRayHit : MonoBehaviour
	{
		[Token(Token = "0x4000D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rayDistance;

		[Token(Token = "0x4000D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject toDestroy;

		[Token(Token = "0x6000D06")]
		[Address(RVA = "0xF9889C", Offset = "0xF9889C", VA = "0xF9889C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D07")]
		[Address(RVA = "0xF98988", Offset = "0xF98988", VA = "0xF98988")]
		public DestroyOnRayHit()
		{
		}
	}
	[Token(Token = "0x2000249")]
	public class DetachOnDeath : MonoBehaviour
	{
		[Token(Token = "0x4000D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject newParent;

		[Token(Token = "0x6000D08")]
		[Address(RVA = "0xF98998", Offset = "0xF98998", VA = "0xF98998")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D09")]
		[Address(RVA = "0xF98A48", Offset = "0xF98A48", VA = "0xF98A48")]
		public DetachOnDeath()
		{
		}
	}
	[Token(Token = "0x200024A")]
	public class DifficultyTextController : MonoBehaviour
	{
		[Token(Token = "0x4000D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshProUGUI text;

		[Token(Token = "0x4000D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string invincibleText;

		[Token(Token = "0x4000D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string easyText;

		[Token(Token = "0x4000D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string normalText;

		[Token(Token = "0x4000D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string hardText;

		[Token(Token = "0x4000D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string insaneText;

		[Token(Token = "0x4000D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private DifficultySetting previousDifficulty;

		[Token(Token = "0x6000D0B")]
		[Address(RVA = "0xF98ACC", Offset = "0xF98ACC", VA = "0xF98ACC")]
		public void Update()
		{
		}

		[Token(Token = "0x6000D0C")]
		[Address(RVA = "0xF98BD8", Offset = "0xF98BD8", VA = "0xF98BD8")]
		public DifficultyTextController()
		{
		}
	}
	[Token(Token = "0x200024B")]
	public class DoNotShatter : MonoBehaviour
	{
		[Token(Token = "0x6000D0D")]
		[Address(RVA = "0xF98CD0", Offset = "0xF98CD0", VA = "0xF98CD0")]
		public DoNotShatter()
		{
		}
	}
	[Token(Token = "0x200024C")]
	internal static class Drawing
	{
		[Token(Token = "0x6000D0E")]
		[Address(RVA = "0xF98CD8", Offset = "0xF98CD8", VA = "0xF98CD8")]
		public static void DrawBox(Vector3 center, Vector3 halfExtents, Quaternion orientation, [Optional] Color? color)
		{
		}
	}
	[Token(Token = "0x200024E")]
	public class EnableOneRandomChild : MonoBehaviour
	{
		[Token(Token = "0x6000D10")]
		[Address(RVA = "0xF991D8", Offset = "0xF991D8", VA = "0xF991D8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D11")]
		[Address(RVA = "0xF995BC", Offset = "0xF995BC", VA = "0xF995BC")]
		public EnableOneRandomChild()
		{
		}
	}
	[Token(Token = "0x200024F")]
	public class ExplosionForceOnSpawn : MonoBehaviour
	{
		[Token(Token = "0x2000250")]
		[CompilerGenerated]
		private sealed class <Explode>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ExplosionForceOnSpawn <>4__this;

			[Token(Token = "0x17000142")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D18")]
				[Address(RVA = "0xF9994C", Offset = "0xF9994C", VA = "0xF9994C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000143")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D1A")]
				[Address(RVA = "0xF99994", Offset = "0xF99994", VA = "0xF99994", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D15")]
			[Address(RVA = "0xF99658", Offset = "0xF99658", VA = "0xF99658")]
			[DebuggerHidden]
			public <Explode>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6000D16")]
			[Address(RVA = "0xF9969C", Offset = "0xF9969C", VA = "0xF9969C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D17")]
			[Address(RVA = "0xF996A0", Offset = "0xF996A0", VA = "0xF996A0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D19")]
			[Address(RVA = "0xF99954", Offset = "0xF99954", VA = "0xF99954", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float radius;

		[Token(Token = "0x4000D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float power;

		[Token(Token = "0x4000D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float minMass;

		[Token(Token = "0x6000D12")]
		[Address(RVA = "0xF995C4", Offset = "0xF995C4", VA = "0xF995C4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D13")]
		[Address(RVA = "0xF995E4", Offset = "0xF995E4", VA = "0xF995E4")]
		[IteratorStateMachine(typeof(<Explode>d__4))]
		private IEnumerator Explode()
		{
			return null;
		}

		[Token(Token = "0x6000D14")]
		[Address(RVA = "0xF99680", Offset = "0xF99680", VA = "0xF99680")]
		public ExplosionForceOnSpawn()
		{
		}
	}
	[Token(Token = "0x2000251")]
	public class FacePlayer : MonoBehaviour
	{
		[Token(Token = "0x4000D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float minDist;

		[Token(Token = "0x4000D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float maxDist;

		[Token(Token = "0x4000D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float prefHeight;

		[Token(Token = "0x4000D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float playerHeightMix;

		[Token(Token = "0x4000D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material myMaterial;

		[Token(Token = "0x6000D1B")]
		[Address(RVA = "0xF9999C", Offset = "0xF9999C", VA = "0xF9999C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D1C")]
		[Address(RVA = "0xF99A04", Offset = "0xF99A04", VA = "0xF99A04")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D1D")]
		[Address(RVA = "0xF99BE4", Offset = "0xF99BE4", VA = "0xF99BE4")]
		public FacePlayer()
		{
		}
	}
	[Token(Token = "0x2000252")]
	public class FadeOnStart : MonoBehaviour
	{
		[Token(Token = "0x6000D1E")]
		[Address(RVA = "0xF99BF8", Offset = "0xF99BF8", VA = "0xF99BF8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D1F")]
		[Address(RVA = "0xF99C50", Offset = "0xF99C50", VA = "0xF99C50")]
		public FadeOnStart()
		{
		}
	}
	[Token(Token = "0x2000253")]
	public class GridTracker<T>
	{
		[Token(Token = "0x4000D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly float cellSize;

		[Token(Token = "0x4000D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly List<(T, Vector2Int, Vector2Int)> changedPosition;

		[Token(Token = "0x4000D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Dictionary<T, Vector2Int> gridCells;

		[Token(Token = "0x4000D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Dictionary<Vector2Int, List<T>> myData;

		[Token(Token = "0x4000D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool checkForNull;

		[Token(Token = "0x4000D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public List<T> justActivated;

		[Token(Token = "0x4000D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public List<T> justDeactivated;

		[Token(Token = "0x4000D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Vector2Int prevMaxCell;

		[Token(Token = "0x4000D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Vector2Int prevMinCell;

		[Token(Token = "0x6000D20")]
		public GridTracker()
		{
		}

		[Token(Token = "0x6000D21")]
		private static bool Contains(Vector2Int gridPos, Vector2Int minCell, Vector2Int maxCell)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D22")]
		private Vector2Int GridPos(Vector3 pos)
		{
			return default(Vector2Int);
		}

		[Token(Token = "0x6000D23")]
		private IEnumerable<T> ObjectsAt(Vector2Int gridPos)
		{
			return null;
		}

		[Token(Token = "0x6000D24")]
		public void Add(T t, Vector3 pos)
		{
		}

		[Token(Token = "0x6000D25")]
		public void Remove(T t)
		{
		}

		[Token(Token = "0x6000D26")]
		public void UpdatePos(T t, Vector3 pos)
		{
		}

		[Token(Token = "0x6000D27")]
		public void Query(Vector3 position, float range)
		{
		}

		[Token(Token = "0x6000D28")]
		public bool QuerySingle(Vector3 position, float range, Vector3 objectPos)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D29")]
		public List<T> GetAll()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000255")]
	internal class DeviceData
	{
		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string[] deviceNames;

		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 position;

		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 rotation;

		[Token(Token = "0x6000D2D")]
		[Address(RVA = "0xF99C58", Offset = "0xF99C58", VA = "0xF99C58")]
		public DeviceData(string name, Vector3 pos, Vector3 rot)
		{
		}

		[Token(Token = "0x6000D2E")]
		[Address(RVA = "0xF99D54", Offset = "0xF99D54", VA = "0xF99D54")]
		public DeviceData(string[] names, Vector3 pos, Vector3 rot)
		{
		}
	}
	[Token(Token = "0x2000256")]
	public class HandOffset : MonoBehaviour
	{
		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform[] rightOffsets;

		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform[] leftOffsets;

		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private DeviceData[] devices;

		[Token(Token = "0x6000D2F")]
		[Address(RVA = "0xF99DC4", Offset = "0xF99DC4", VA = "0xF99DC4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000D30")]
		[Address(RVA = "0xF9A550", Offset = "0xF9A550", VA = "0xF9A550")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000D31")]
		[Address(RVA = "0xF99FA0", Offset = "0xF99FA0", VA = "0xF99FA0")]
		private void DeviceConnected(InputDevice inputDevice)
		{
		}

		[Token(Token = "0x6000D32")]
		[Address(RVA = "0xF9A5D8", Offset = "0xF9A5D8", VA = "0xF9A5D8")]
		public HandOffset()
		{
		}
	}
	[Token(Token = "0x2000258")]
	public class HandPointerController : MonoBehaviour
	{
		[Token(Token = "0x4000D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HandInput hand;

		[Token(Token = "0x4000D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandCanvasPointer pointer;

		[Token(Token = "0x6000D36")]
		[Address(RVA = "0xF9AAC8", Offset = "0xF9AAC8", VA = "0xF9AAC8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D37")]
		[Address(RVA = "0xF9AB20", Offset = "0xF9AB20", VA = "0xF9AB20")]
		public HandPointerController()
		{
		}
	}
	[Token(Token = "0x2000259")]
	internal static class LeaderboardAPI
	{
		[StructLayout(3)]
		[Token(Token = "0x200025A")]
		[CompilerGenerated]
		private struct <GetScoresAsync>d__1 : IAsyncStateMachine
		{
			[Token(Token = "0x4000D30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000D31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder<(List<RaceRecord>, RaceRecord)> <>t__builder;

			[Token(Token = "0x4000D32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string mission;

			[Token(Token = "0x4000D33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string mode;

			[Token(Token = "0x4000D34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private List<RaceRecord> <records>5__2;

			[Token(Token = "0x4000D35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private TaskAwaiter<List<RaceRecord>> <>u__1;

			[Token(Token = "0x6000D3B")]
			[Address(RVA = "0xF9AD58", Offset = "0xF9AD58", VA = "0xF9AD58", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000D3C")]
			[Address(RVA = "0xF9B164", Offset = "0xF9B164", VA = "0xF9B164", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x4000D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly ApiClient ApiClient;

		[Token(Token = "0x6000D38")]
		[Address(RVA = "0xF9AB28", Offset = "0xF9AB28", VA = "0xF9AB28")]
		[AsyncStateMachine(typeof(<GetScoresAsync>d__1))]
		public static Task<(List<RaceRecord>, RaceRecord)> GetScoresAsync(string mission, string mode)
		{
			return null;
		}

		[Token(Token = "0x6000D39")]
		[Address(RVA = "0xF9AC50", Offset = "0xF9AC50", VA = "0xF9AC50")]
		public static Task SendScoreAsync(int time, string mission, AllowedModesSetting mode)
		{
			return null;
		}
	}
	[Token(Token = "0x200025B")]
	internal static class LinqExtra
	{
		[Token(Token = "0x6000D3D")]
		public static TElement MaxBy<TElement, TComparable>(this IEnumerable<TElement> source, Func<TElement, TComparable> selector) where TComparable : IComparable<TComparable>
		{
			return (TElement)null;
		}

		[Token(Token = "0x6000D3E")]
		public static TElement MinBy<TElement, TComparable>(this IEnumerable<TElement> source, Func<TElement, TComparable> selector) where TComparable : IComparable<TComparable>
		{
			return (TElement)null;
		}
	}
	[Token(Token = "0x200025E")]
	public static class LinqHelpers
	{
		[Token(Token = "0x200025F")]
		[CompilerGenerated]
		private sealed class <CutPolygon>d__0 : IEnumerable<List<Vector2>>, IEnumerable, IEnumerator<List<Vector2>>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private List<Vector2> <>2__current;

			[Token(Token = "0x4000D3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000D3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private IEnumerable<Vector2> poly;

			[Token(Token = "0x4000D3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public IEnumerable<Vector2> <>3__poly;

			[Token(Token = "0x4000D3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float threshold;

			[Token(Token = "0x4000D3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float <>3__threshold;

			[Token(Token = "0x4000D3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private IEnumerator<Vector2> <>7__wrap1;

			[Token(Token = "0x4000D40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Vector2 <current>5__3;

			[Token(Token = "0x4000D41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private Vector2 <prev>5__4;

			[Token(Token = "0x17000144")]
			private List<Vector2> System.Collections.Generic.IEnumerator<System.Collections.Generic.List<UnityEngine.Vector2>>.Current
			{
				[Token(Token = "0x6000D4A")]
				[Address(RVA = "0xF9BA68", Offset = "0xF9BA68", VA = "0xF9BA68", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000145")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D4C")]
				[Address(RVA = "0xF9BAB0", Offset = "0xF9BAB0", VA = "0xF9BAB0", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D46")]
			[Address(RVA = "0xF9B250", Offset = "0xF9B250", VA = "0xF9B250")]
			[DebuggerHidden]
			public <CutPolygon>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x6000D47")]
			[Address(RVA = "0xF9B33C", Offset = "0xF9B33C", VA = "0xF9B33C", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D48")]
			[Address(RVA = "0xF9B358", Offset = "0xF9B358", VA = "0xF9B358", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D49")]
			[Address(RVA = "0xF9B9B8", Offset = "0xF9B9B8", VA = "0xF9B9B8")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6000D4B")]
			[Address(RVA = "0xF9BA70", Offset = "0xF9BA70", VA = "0xF9BA70", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6000D4D")]
			[Address(RVA = "0xF9BAB8", Offset = "0xF9BAB8", VA = "0xF9BAB8", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<List<Vector2>> System.Collections.Generic.IEnumerable<System.Collections.Generic.List<UnityEngine.Vector2>>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6000D4E")]
			[Address(RVA = "0xF9BB6C", Offset = "0xF9BB6C", VA = "0xF9BB6C", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000260")]
		[CompilerGenerated]
		private sealed class <Pairify>d__1<T> : IEnumerable<(T, T)>, IEnumerable, IEnumerator<(T, T)>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x4000D43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private (T, T) <>2__current;

			[Token(Token = "0x4000D44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000D45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IEnumerable<T> input;

			[Token(Token = "0x4000D46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IEnumerable<T> <>3__input;

			[Token(Token = "0x4000D47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IEnumerator<T> <>7__wrap1;

			[Token(Token = "0x4000D48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T <t>5__3;

			[Token(Token = "0x17000146")]
			private (T, T) System.Collections.Generic.IEnumerator<(T,T)>.Current
			{
				[Token(Token = "0x6000D53")]
				[DebuggerHidden]
				get
				{
					return default((T, T));
				}
			}

			[Token(Token = "0x17000147")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D55")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D4F")]
			[DebuggerHidden]
			public <Pairify>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x6000D50")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D51")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D52")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6000D54")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6000D56")]
			[DebuggerHidden]
			private IEnumerator<(T, T)> System.Collections.Generic.IEnumerable<(T,T)>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6000D57")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000261")]
		[CompilerGenerated]
		private sealed class <CumulativeSum>d__2 : IEnumerable<float>, IEnumerable, IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4000D4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000D4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private IEnumerable<float> sequence;

			[Token(Token = "0x4000D4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public IEnumerable<float> <>3__sequence;

			[Token(Token = "0x4000D4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <sum>5__2;

			[Token(Token = "0x4000D4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private IEnumerator<float> <>7__wrap2;

			[Token(Token = "0x17000148")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6000D5C")]
				[Address(RVA = "0xF9BEEC", Offset = "0xF9BEEC", VA = "0xF9BEEC", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000149")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D5E")]
				[Address(RVA = "0xF9BF34", Offset = "0xF9BF34", VA = "0xF9BF34", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D58")]
			[Address(RVA = "0xF9B308", Offset = "0xF9B308", VA = "0xF9B308")]
			[DebuggerHidden]
			public <CumulativeSum>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x6000D59")]
			[Address(RVA = "0xF9BB70", Offset = "0xF9BB70", VA = "0xF9BB70", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D5A")]
			[Address(RVA = "0xF9BB8C", Offset = "0xF9BB8C", VA = "0xF9BB8C", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D5B")]
			[Address(RVA = "0xF9BE3C", Offset = "0xF9BE3C", VA = "0xF9BE3C")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6000D5D")]
			[Address(RVA = "0xF9BEF4", Offset = "0xF9BEF4", VA = "0xF9BEF4", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6000D5F")]
			[Address(RVA = "0xF9BF90", Offset = "0xF9BF90", VA = "0xF9BF90", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<float> System.Collections.Generic.IEnumerable<System.Single>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6000D60")]
			[Address(RVA = "0xF9C03C", Offset = "0xF9C03C", VA = "0xF9C03C", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x6000D43")]
		[Address(RVA = "0xF9B1BC", Offset = "0xF9B1BC", VA = "0xF9B1BC")]
		[IteratorStateMachine(typeof(<CutPolygon>d__0))]
		public static IEnumerable<List<Vector2>> CutPolygon(IEnumerable<Vector2> poly, float threshold = 0.8f)
		{
			return null;
		}

		[Token(Token = "0x6000D44")]
		[IteratorStateMachine(typeof(<Pairify>d__1<>))]
		public static IEnumerable<(T, T)> Pairify<T>(IEnumerable<T> input)
		{
			return null;
		}

		[Token(Token = "0x6000D45")]
		[Address(RVA = "0xF9B284", Offset = "0xF9B284", VA = "0xF9B284")]
		[IteratorStateMachine(typeof(<CumulativeSum>d__2))]
		public static IEnumerable<float> CumulativeSum(IEnumerable<float> sequence)
		{
			return null;
		}
	}
	[Token(Token = "0x2000262")]
	public class MoveToRayHit : MonoBehaviour
	{
		[Token(Token = "0x4000D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rayDistance;

		[Token(Token = "0x4000D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform toMove;

		[Token(Token = "0x4000D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject toDestroy;

		[Token(Token = "0x6000D61")]
		[Address(RVA = "0xF9C040", Offset = "0xF9C040", VA = "0xF9C040")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D62")]
		[Address(RVA = "0xF9C168", Offset = "0xF9C168", VA = "0xF9C168")]
		public MoveToRayHit()
		{
		}
	}
	[Token(Token = "0x2000263")]
	public class OculusManager : MonoBehaviour
	{
		[StructLayout(3)]
		[Token(Token = "0x2000264")]
		[CompilerGenerated]
		private struct <InitOculus>d__8 : IAsyncStateMachine
		{
			[Token(Token = "0x4000D56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000D57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncVoidMethodBuilder <>t__builder;

			[Token(Token = "0x4000D58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public OculusManager <>4__this;

			[Token(Token = "0x4000D59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private TaskAwaiter<Message> <>u__1;

			[Token(Token = "0x4000D5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private TaskAwaiter<Message<User>> <>u__2;

			[Token(Token = "0x6000D6A")]
			[Address(RVA = "0xF9C624", Offset = "0xF9C624", VA = "0xF9C624", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000D6B")]
			[Address(RVA = "0xF9CB38", Offset = "0xF9CB38", VA = "0xF9CB38", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x2000265")]
		[CompilerGenerated]
		private struct <GetOculusProof>d__9 : IAsyncStateMachine
		{
			[Token(Token = "0x4000D5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000D5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder<OculusProof> <>t__builder;

			[Token(Token = "0x4000D5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private TaskAwaiter<Message<UserProof>> <>u__1;

			[Token(Token = "0x6000D6C")]
			[Address(RVA = "0xF9CB44", Offset = "0xF9CB44", VA = "0xF9CB44", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000D6D")]
			[Address(RVA = "0xF9CE04", Offset = "0xF9CE04", VA = "0xF9CE04", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x4000D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static OculusManager instance;

		[Token(Token = "0x4000D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[CanBeNull]
		private ulong? userId;

		[Token(Token = "0x4000D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[CanBeNull]
		private new string name;

		[Token(Token = "0x1700014A")]
		[CanBeNull]
		public static ulong? UserId
		{
			[Token(Token = "0x6000D63")]
			[Address(RVA = "0xF9C178", Offset = "0xF9C178", VA = "0xF9C178")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014B")]
		[CanBeNull]
		public static string Name
		{
			[Token(Token = "0x6000D64")]
			[Address(RVA = "0xF9C1CC", Offset = "0xF9C1CC", VA = "0xF9C1CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D65")]
		[Address(RVA = "0xF9C220", Offset = "0xF9C220", VA = "0xF9C220")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D66")]
		[Address(RVA = "0xF9C39C", Offset = "0xF9C39C", VA = "0xF9C39C")]
		[AsyncStateMachine(typeof(<InitOculus>d__8))]
		private void InitOculus()
		{
		}

		[Token(Token = "0x6000D67")]
		[Address(RVA = "0xF9C450", Offset = "0xF9C450", VA = "0xF9C450")]
		[AsyncStateMachine(typeof(<GetOculusProof>d__9))]
		public static Task<OculusProof> GetOculusProof()
		{
			return null;
		}

		[Token(Token = "0x6000D68")]
		[Address(RVA = "0xF9C540", Offset = "0xF9C540", VA = "0xF9C540")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000D69")]
		[Address(RVA = "0xF9C61C", Offset = "0xF9C61C", VA = "0xF9C61C")]
		public OculusManager()
		{
		}
	}
	[Token(Token = "0x2000266")]
	public class ParticleIntensityScaling : MonoBehaviour
	{
		[Token(Token = "0x4000D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float intensity;

		[Token(Token = "0x4000D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ParticleSystem ps;

		[Token(Token = "0x4000D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Space]
		public float alphaMultMin;

		[Token(Token = "0x4000D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float sizeMultMin;

		[Token(Token = "0x4000D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float speedMultMin;

		[Token(Token = "0x4000D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float lifetimeMultMin;

		[Token(Token = "0x4000D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float burstCountMultMin;

		[Token(Token = "0x4000D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float burstCycleMultMin;

		[Token(Token = "0x4000D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float rateMultMin;

		[Token(Token = "0x4000D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float shapeScaleMultMin;

		[Token(Token = "0x4000D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float initialAlpha;

		[Token(Token = "0x4000D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float initialBurstCount;

		[Token(Token = "0x4000D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float initialBurstCycle;

		[Token(Token = "0x4000D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float initialShapeAngle;

		[Token(Token = "0x4000D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float initialShapeRadius;

		[Token(Token = "0x4000D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ParticleSystem.MinMaxCurve lifetimeInitialCurve;

		[Token(Token = "0x4000D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private ParticleSystem.MinMaxCurve rateOverDistanceInitialCurve;

		[Token(Token = "0x4000D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private ParticleSystem.MinMaxCurve rateOverTimeInitialCurve;

		[Token(Token = "0x4000D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private ParticleSystem.MinMaxCurve sizeInitialCurve;

		[Token(Token = "0x4000D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private ParticleSystem.MinMaxCurve speedInitialCurve;

		[Token(Token = "0x6000D6E")]
		[Address(RVA = "0xF9CE5C", Offset = "0xF9CE5C", VA = "0xF9CE5C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D6F")]
		[Address(RVA = "0xF9D1AC", Offset = "0xF9D1AC", VA = "0xF9D1AC")]
		public void UpdateIntensity(float newIntensity)
		{
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0xF9D888", Offset = "0xF9D888", VA = "0xF9D888")]
		private void ApplyMultiplierToMinMaxCurve(ref ParticleSystem.MinMaxCurve curve, ParticleSystem.MinMaxCurve initialCurve, float multiplier)
		{
		}

		[Token(Token = "0x6000D71")]
		[Address(RVA = "0xF9D0A8", Offset = "0xF9D0A8", VA = "0xF9D0A8")]
		private ParticleSystem.MinMaxCurve CopyMinMaxCurve(ParticleSystem.MinMaxCurve toCopy)
		{
			return default(ParticleSystem.MinMaxCurve);
		}

		[Token(Token = "0x6000D72")]
		[Address(RVA = "0xF9D95C", Offset = "0xF9D95C", VA = "0xF9D95C")]
		public ParticleIntensityScaling()
		{
		}
	}
	[Token(Token = "0x2000267")]
	public class RemoveFromHierarchy : MonoBehaviour
	{
		[Token(Token = "0x4000D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool correctNegativeScale;

		[Token(Token = "0x6000D73")]
		[Address(RVA = "0xF9D988", Offset = "0xF9D988", VA = "0xF9D988")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D74")]
		[Address(RVA = "0xF9DA20", Offset = "0xF9DA20", VA = "0xF9DA20")]
		public RemoveFromHierarchy()
		{
		}
	}
	[Token(Token = "0x2000268")]
	public class RotateObject : MonoBehaviour
	{
		[Token(Token = "0x4000D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool randomizeAxis;

		[Token(Token = "0x4000D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 axis;

		[Token(Token = "0x4000D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float rotationSpeed;

		[Token(Token = "0x6000D75")]
		[Address(RVA = "0xF9DA28", Offset = "0xF9DA28", VA = "0xF9DA28")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D76")]
		[Address(RVA = "0xF9DA50", Offset = "0xF9DA50", VA = "0xF9DA50")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D77")]
		[Address(RVA = "0xF9DB44", Offset = "0xF9DB44", VA = "0xF9DB44")]
		public RotateObject()
		{
		}
	}
	[Token(Token = "0x2000269")]
	public class SteamManager : MonoBehaviour
	{
		[Token(Token = "0x6000D78")]
		[Address(RVA = "0xF9DB58", Offset = "0xF9DB58", VA = "0xF9DB58")]
		public SteamManager()
		{
		}
	}
	[Token(Token = "0x200026A")]
	public class TrackInsideTrigger : MonoBehaviour
	{
		[Token(Token = "0x4000D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool rigidbodiesOnly;

		[Token(Token = "0x4000D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly HashSet<Collider> inside;

		[Token(Token = "0x6000D79")]
		[Address(RVA = "0xF9DB60", Offset = "0xF9DB60", VA = "0xF9DB60")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000D7A")]
		[Address(RVA = "0xF9DC1C", Offset = "0xF9DC1C", VA = "0xF9DC1C")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000D7B")]
		[Address(RVA = "0xF9DC74", Offset = "0xF9DC74", VA = "0xF9DC74")]
		public IEnumerable<Collider> AllInside()
		{
			return null;
		}

		[Token(Token = "0x6000D7C")]
		[Address(RVA = "0xF9DD1C", Offset = "0xF9DD1C", VA = "0xF9DD1C")]
		public IEnumerable<Rigidbody> AllRigidbodies()
		{
			return null;
		}

		[Token(Token = "0x6000D7D")]
		[Address(RVA = "0xF9DE4C", Offset = "0xF9DE4C", VA = "0xF9DE4C")]
		public TrackInsideTrigger()
		{
		}
	}
	[Token(Token = "0x200026C")]
	public class VFXTestTrigger : MonoBehaviour
	{
		[Token(Token = "0x200026D")]
		[CompilerGenerated]
		private sealed class <ChargeAttack>d__16 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VFXTestTrigger <>4__this;

			[Token(Token = "0x4000D8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <startTime>5__2;

			[Token(Token = "0x1700014C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D89")]
				[Address(RVA = "0xF9E434", Offset = "0xF9E434", VA = "0xF9E434", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700014D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D8B")]
				[Address(RVA = "0xF9E47C", Offset = "0xF9E47C", VA = "0xF9E47C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D86")]
			[Address(RVA = "0xF9E1B0", Offset = "0xF9E1B0", VA = "0xF9E1B0")]
			[DebuggerHidden]
			public <ChargeAttack>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x6000D87")]
			[Address(RVA = "0xF9E1EC", Offset = "0xF9E1EC", VA = "0xF9E1EC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D88")]
			[Address(RVA = "0xF9E1F0", Offset = "0xF9E1F0", VA = "0xF9E1F0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D8A")]
			[Address(RVA = "0xF9E43C", Offset = "0xF9E43C", VA = "0xF9E43C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve curve;

		[Token(Token = "0x4000D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float chargeLevel;

		[Token(Token = "0x4000D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ParticleSystem chargedParticleSystem;

		[Token(Token = "0x4000D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float chargeTime;

		[Token(Token = "0x4000D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public KeyCode chargeKey;

		[Token(Token = "0x4000D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool chargeAffectsAlpha;

		[Token(Token = "0x4000D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool chargeAffectsSize;

		[Token(Token = "0x4000D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		public bool chargeAffectsEmission;

		[Token(Token = "0x4000D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ParticleSystem firingParticleSystem;

		[Token(Token = "0x4000D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ParticleSystem lingeringParticleSystem;

		[Token(Token = "0x4000D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ParticleSystem impactParticleSystem;

		[Token(Token = "0x4000D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float chargedAlpha;

		[Token(Token = "0x4000D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float chargedEmission;

		[Token(Token = "0x4000D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float chargedSize;

		[Token(Token = "0x6000D82")]
		[Address(RVA = "0xF9E030", Offset = "0xF9E030", VA = "0xF9E030")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D83")]
		[Address(RVA = "0xF9E0F4", Offset = "0xF9E0F4", VA = "0xF9E0F4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D84")]
		[Address(RVA = "0xF9E13C", Offset = "0xF9E13C", VA = "0xF9E13C")]
		[IteratorStateMachine(typeof(<ChargeAttack>d__16))]
		private IEnumerator ChargeAttack()
		{
			return null;
		}

		[Token(Token = "0x6000D85")]
		[Address(RVA = "0xF9E1D8", Offset = "0xF9E1D8", VA = "0xF9E1D8")]
		public VFXTestTrigger()
		{
		}
	}
}
namespace Utility.VRArmIK
{
	[Token(Token = "0x200026E")]
	public class ArmPoser : MonoBehaviour
	{
		[Token(Token = "0x4000D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SpinePoser spinePoser;

		[Token(Token = "0x4000D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform spine;

		[Token(Token = "0x4000D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform shoulder;

		[Token(Token = "0x4000D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform shoulderAnchor;

		[Token(Token = "0x4000D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform upperArm;

		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform lowerArm;

		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform hand;

		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public VRArmIK armIK;

		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool isLeft;

		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Vector3 offsetFromSpine;

		[Token(Token = "0x4000D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float maxIndividualShoulderRotation;

		[Token(Token = "0x4000D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float startShoulderDislocationBefore;

		[Token(Token = "0x4000D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Vector3 extraRotation;

		[Token(Token = "0x4000D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideInInspector]
		public Func<Vector3> handAnchorPosition;

		[Token(Token = "0x4000D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HideInInspector]
		public Func<Quaternion> handAnchorRotation;

		[Token(Token = "0x4000D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 shoulderBaseOffset;

		[Token(Token = "0x1700014E")]
		public Transform DefaultHandAnchor
		{
			[Token(Token = "0x6000D8C")]
			[Address(RVA = "0xF9E484", Offset = "0xF9E484", VA = "0xF9E484")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014F")]
		public float UpperArmLength
		{
			[Token(Token = "0x6000D8D")]
			[Address(RVA = "0xF9E4F4", Offset = "0xF9E4F4", VA = "0xF9E4F4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000150")]
		public float LowerArmLength
		{
			[Token(Token = "0x6000D8E")]
			[Address(RVA = "0xF9E5BC", Offset = "0xF9E5BC", VA = "0xF9E5BC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000151")]
		public float ArmLength
		{
			[Token(Token = "0x6000D8F")]
			[Address(RVA = "0xF9E5C4", Offset = "0xF9E5C4", VA = "0xF9E5C4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000D90")]
		[Address(RVA = "0xF9E5F4", Offset = "0xF9E5F4", VA = "0xF9E5F4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0xF9E704", Offset = "0xF9E704", VA = "0xF9E704")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000D92")]
		[Address(RVA = "0xF9E724", Offset = "0xF9E724", VA = "0xF9E724")]
		private void UpdateShoulder()
		{
		}

		[Token(Token = "0x6000D93")]
		[Address(RVA = "0xF9E924", Offset = "0xF9E924", VA = "0xF9E924")]
		private Vector3 GetShoulderAngles()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D94")]
		[Address(RVA = "0xF9EA80", Offset = "0xF9EA80", VA = "0xF9EA80")]
		private Vector3 GetArmStart()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D95")]
		[Address(RVA = "0xF9E4FC", Offset = "0xF9E4FC", VA = "0xF9E4FC")]
		private float Distance(Transform a, Transform b)
		{
			return default(float);
		}

		[Token(Token = "0x6000D96")]
		[Address(RVA = "0xF9EC60", Offset = "0xF9EC60", VA = "0xF9EC60")]
		public ArmPoser()
		{
		}
	}
	[Token(Token = "0x200026F")]
	public class ArmRigBehavior : MonoBehaviour
	{
		[Token(Token = "0x4000D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform upperArmTarget;

		[Token(Token = "0x4000D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform lowerArmTarget;

		[Token(Token = "0x4000D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform wristTarget;

		[Token(Token = "0x4000D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform upperArmModel;

		[Token(Token = "0x4000DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform lowerArmModel;

		[Token(Token = "0x4000DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform wristModel;

		[Token(Token = "0x4000DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool isLeft;

		[Token(Token = "0x4000DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float handPosLerp;

		[Token(Token = "0x4000DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3 handRot;

		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float handRotLerp;

		[Token(Token = "0x4000DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float handSpin;

		[Token(Token = "0x6000D99")]
		[Address(RVA = "0xF9EDC0", Offset = "0xF9EDC0", VA = "0xF9EDC0")]
		public void Start()
		{
		}

		[Token(Token = "0x6000D9A")]
		[Address(RVA = "0xF9F168", Offset = "0xF9F168", VA = "0xF9F168")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x6000D9B")]
		[Address(RVA = "0xF9F5FC", Offset = "0xF9F5FC", VA = "0xF9F5FC")]
		public ArmRigBehavior()
		{
		}
	}
	[Token(Token = "0x2000270")]
	public static class VectorExtensions
	{
		[Token(Token = "0x6000D9C")]
		[Address(RVA = "0xF9F61C", Offset = "0xF9F61C", VA = "0xF9F61C")]
		public static Vector2 xz(this Vector3 self)
		{
			return default(Vector2);
		}
	}
	[Token(Token = "0x2000271")]
	public static class FloatExtensions
	{
		[Token(Token = "0x6000D9D")]
		[Address(RVA = "0xF9F624", Offset = "0xF9F624", VA = "0xF9F624")]
		public static float toSignedEulerAngle(this float self)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000272")]
	public static class VectorHelpers
	{
		[Token(Token = "0x6000D9E")]
		[Address(RVA = "0xF9F670", Offset = "0xF9F670", VA = "0xF9F670")]
		private static float axisAngle(Vector3 v, Vector3 forward, Vector3 axis)
		{
			return default(float);
		}

		[Token(Token = "0x6000D9F")]
		[Address(RVA = "0xF9F708", Offset = "0xF9F708", VA = "0xF9F708")]
		public static float getAngleBetween(Vector3 a, Vector3 b, Vector3 forward, Vector3 axis)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000273")]
	public class SpinePoser : MonoBehaviour
	{
		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float armToSpineRotation;

		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float headSpineRotationFactor;

		[Token(Token = "0x6000DA0")]
		[Address(RVA = "0xF9F7D8", Offset = "0xF9F7D8", VA = "0xF9F7D8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000DA1")]
		[Address(RVA = "0xF9FA68", Offset = "0xF9FA68", VA = "0xF9FA68")]
		public SpinePoser()
		{
		}
	}
	[Token(Token = "0x2000274")]
	public class VRArmIK : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000275")]
		public class ArmIKElbowSettings
		{
			[Token(Token = "0x4000DB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool calcElbowAngle;

			[Token(Token = "0x4000DB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			public bool clampElbowAngle;

			[Token(Token = "0x4000DB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
			public bool softClampElbowAngle;

			[Token(Token = "0x4000DB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float maxAngle;

			[Token(Token = "0x4000DB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float minAngle;

			[Token(Token = "0x4000DB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float softClampRange;

			[Token(Token = "0x4000DB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float offsetAngle;

			[Token(Token = "0x4000DB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float yWeight;

			[Token(Token = "0x4000DBA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float zWeightTop;

			[Token(Token = "0x4000DBB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float zWeightBottom;

			[Token(Token = "0x4000DBC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float zBorderY;

			[Token(Token = "0x4000DBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float zDistanceStart;

			[Token(Token = "0x4000DBE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float xWeight;

			[Token(Token = "0x4000DBF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float xDistanceStart;

			[Token(Token = "0x6000DB3")]
			[Address(RVA = "0xFA19AC", Offset = "0xFA19AC", VA = "0xFA19AC")]
			public ArmIKElbowSettings()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000276")]
		public class BeforePositioningSettings
		{
			[Token(Token = "0x4000DC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool correctElbowOutside;

			[Token(Token = "0x4000DC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float weight;

			[Token(Token = "0x4000DC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float startBelowZ;

			[Token(Token = "0x4000DC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float startAboveY;

			[Token(Token = "0x6000DB4")]
			[Address(RVA = "0xFA19F8", Offset = "0xFA19F8", VA = "0xFA19F8")]
			public BeforePositioningSettings()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000277")]
		public class ElbowCorrectionSettings
		{
			[Token(Token = "0x4000DC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool useFixedElbowWhenNearShoulder;

			[Token(Token = "0x4000DC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float startBelowDistance;

			[Token(Token = "0x4000DC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float startBelowY;

			[Token(Token = "0x4000DC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float weight;

			[Token(Token = "0x4000DC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 localElbowPos;

			[Token(Token = "0x6000DB5")]
			[Address(RVA = "0xFA1A20", Offset = "0xFA1A20", VA = "0xFA1A20")]
			public ElbowCorrectionSettings()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000278")]
		public class HandSettings
		{
			[Token(Token = "0x4000DC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool useWristRotation;

			[Token(Token = "0x4000DCA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			public bool rotateElbowWithHandRight;

			[Token(Token = "0x4000DCB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
			public bool rotateElbowWithHandForward;

			[Token(Token = "0x4000DCC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float handDeltaPow;

			[Token(Token = "0x4000DCD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float handDeltaFactor;

			[Token(Token = "0x4000DCE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float handDeltaOffset;

			[Token(Token = "0x4000DCF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float handDeltaForwardPow;

			[Token(Token = "0x4000DD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float handDeltaForwardFactor;

			[Token(Token = "0x4000DD1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float handDeltaForwardOffset;

			[Token(Token = "0x4000DD2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float handDeltaForwardDeadzone;

			[Token(Token = "0x4000DD3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float rotateElbowWithHandDelay;

			[Token(Token = "0x6000DB6")]
			[Address(RVA = "0xFA1A48", Offset = "0xFA1A48", VA = "0xFA1A48")]
			public HandSettings()
			{
			}
		}

		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ArmPoser arm;

		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool left;

		[Token(Token = "0x4000DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ArmIKElbowSettings elbowSettings;

		[Token(Token = "0x4000DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BeforePositioningSettings beforePositioningSettings;

		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ElbowCorrectionSettings elbowCorrectionSettings;

		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public HandSettings handSettings;

		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float interpolatedDeltaElbow;

		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float interpolatedDeltaElbowForward;

		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 nextLowerArmAngle;

		[Token(Token = "0x17000152")]
		private Vector3 armDirection
		{
			[Token(Token = "0x6000DA2")]
			[Address(RVA = "0xF9FA7C", Offset = "0xF9FA7C", VA = "0xF9FA7C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000153")]
		private Vector3 upperArmPos
		{
			[Token(Token = "0x6000DA3")]
			[Address(RVA = "0xF9FB18", Offset = "0xF9FB18", VA = "0xF9FB18")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000154")]
		private Vector3 lowerArmPos
		{
			[Token(Token = "0x6000DA4")]
			[Address(RVA = "0xF9FB3C", Offset = "0xF9FB3C", VA = "0xF9FB3C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000155")]
		private Vector3 handPos
		{
			[Token(Token = "0x6000DA5")]
			[Address(RVA = "0xF9FB60", Offset = "0xF9FB60", VA = "0xF9FB60")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000156")]
		private Transform shoulderTarget
		{
			[Token(Token = "0x6000DA6")]
			[Address(RVA = "0xF9FB84", Offset = "0xF9FB84", VA = "0xF9FB84")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DA7")]
		[Address(RVA = "0xF9E880", Offset = "0xF9E880", VA = "0xF9E880")]
		public void MyLateUpdate()
		{
		}

		[Token(Token = "0x6000DA8")]
		[Address(RVA = "0xFA1940", Offset = "0xFA1940", VA = "0xFA1940")]
		private float CalcAngle(float a, float b, float c, float fallback)
		{
			return default(float);
		}

		[Token(Token = "0x6000DA9")]
		[Address(RVA = "0xF9FBA0", Offset = "0xF9FBA0", VA = "0xF9FBA0")]
		private Vector3 CalcElbowInnerAngle()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DAA")]
		[Address(RVA = "0xF9FD1C", Offset = "0xF9FD1C", VA = "0xF9FD1C")]
		private void RotateShoulder()
		{
		}

		[Token(Token = "0x6000DAB")]
		[Address(RVA = "0xFA0650", Offset = "0xFA0650", VA = "0xFA0650")]
		private float GetElbowTargetAngle()
		{
			return default(float);
		}

		[Token(Token = "0x6000DAC")]
		[Address(RVA = "0xFA00D4", Offset = "0xFA00D4", VA = "0xFA00D4")]
		private void CorrectElbowRotation()
		{
		}

		[Token(Token = "0x6000DAD")]
		[Address(RVA = "0xFA0974", Offset = "0xFA0974", VA = "0xFA0974")]
		private void correctElbowAfterPositioning()
		{
		}

		[Token(Token = "0x6000DAE")]
		[Address(RVA = "0xFA07A0", Offset = "0xFA07A0", VA = "0xFA07A0")]
		private void RotateElbow(float angle)
		{
		}

		[Token(Token = "0x6000DAF")]
		[Address(RVA = "0xFA0FC0", Offset = "0xFA0FC0", VA = "0xFA0FC0")]
		private void rotateElbowWithHandRight()
		{
		}

		[Token(Token = "0x6000DB0")]
		[Address(RVA = "0xFA13AC", Offset = "0xFA13AC", VA = "0xFA13AC")]
		private void rotateElbowWithHandFoward()
		{
		}

		[Token(Token = "0x6000DB1")]
		[Address(RVA = "0xFA163C", Offset = "0xFA163C", VA = "0xFA163C")]
		private void rotateHand()
		{
		}

		[Token(Token = "0x6000DB2")]
		[Address(RVA = "0xFA199C", Offset = "0xFA199C", VA = "0xFA199C")]
		public VRArmIK()
		{
		}
	}
}
namespace Utility.Surfaces
{
	[Token(Token = "0x2000279")]
	public class DynamicSurface : MonoBehaviour
	{
		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Dictionary<string, DynamicSurface> Instances;

		[Token(Token = "0x4000DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string materialName;

		[Token(Token = "0x4000DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float scale;

		[Token(Token = "0x4000DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int chunkSize;

		[Token(Token = "0x4000DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Material material;

		[Token(Token = "0x4000DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PhysicMaterial physicMaterial;

		[Token(Token = "0x4000DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public DynamicSurfaceChunk dscPrefab;

		[Token(Token = "0x4000DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly Dictionary<Vector3Int, DynamicSurfaceChunk> chunks;

		[Token(Token = "0x6000DB7")]
		[Address(RVA = "0xFA1A80", Offset = "0xFA1A80", VA = "0xFA1A80")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000DB8")]
		[Address(RVA = "0xFA1B04", Offset = "0xFA1B04", VA = "0xFA1B04")]
		private bool ContainsChunk(Vector3Int v)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DB9")]
		[Address(RVA = "0xFA1BF0", Offset = "0xFA1BF0", VA = "0xFA1BF0")]
		private Vector3Int GetChunkPos(Vector3 pos)
		{
			return default(Vector3Int);
		}

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0xFA1D88", Offset = "0xFA1D88", VA = "0xFA1D88")]
		private void MakeDSC(Vector3Int v)
		{
		}

		[Token(Token = "0x6000DBB")]
		[Address(RVA = "0xFA2250", Offset = "0xFA2250", VA = "0xFA2250")]
		public void Intersect(SDF sdf, Bounds bounds)
		{
		}

		[Token(Token = "0x6000DBC")]
		[Address(RVA = "0xFA25A0", Offset = "0xFA25A0", VA = "0xFA25A0")]
		public void Union(SDF sdf, Bounds bounds)
		{
		}

		[Token(Token = "0x6000DBD")]
		[Address(RVA = "0xFA2914", Offset = "0xFA2914", VA = "0xFA2914")]
		public DynamicSurface()
		{
		}
	}
	[Token(Token = "0x200027A")]
	public class DynamicSurfaceChunk : MonoBehaviour
	{
		[Token(Token = "0x4000DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MeshFilter meshFilter;

		[Token(Token = "0x4000DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MeshCollider meshCollider;

		[Token(Token = "0x4000DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MeshRenderer meshRenderer;

		[Token(Token = "0x4000DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Lifetime lifetime;

		[Token(Token = "0x4000DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float updateColliderProb;

		[Token(Token = "0x4000DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[HideInInspector]
		public Vector3Int pos;

		[Token(Token = "0x4000DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public float scale;

		[Token(Token = "0x4000DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[HideInInspector]
		public int chunkSize;

		[Token(Token = "0x4000DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool changed;

		[Token(Token = "0x4000DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float maxLifetime;

		[Token(Token = "0x4000DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public SurfaceNet surfaceNet;

		[Token(Token = "0x6000DBF")]
		[Address(RVA = "0xFA2A40", Offset = "0xFA2A40", VA = "0xFA2A40")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DC0")]
		[Address(RVA = "0xFA2ADC", Offset = "0xFA2ADC", VA = "0xFA2ADC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DC1")]
		[Address(RVA = "0xFA2D40", Offset = "0xFA2D40", VA = "0xFA2D40")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000DC2")]
		[Address(RVA = "0xFA2DD8", Offset = "0xFA2DD8", VA = "0xFA2DD8")]
		private (Vector3Int, Vector3Int) MinMax(Bounds bounds)
		{
			return default((Vector3Int, Vector3Int));
		}

		[Token(Token = "0x6000DC3")]
		[Address(RVA = "0xFA23D4", Offset = "0xFA23D4", VA = "0xFA23D4")]
		public void Intersect(SDF sdf, Bounds bounds)
		{
		}

		[Token(Token = "0x6000DC4")]
		[Address(RVA = "0xFA2748", Offset = "0xFA2748", VA = "0xFA2748")]
		public void Union(SDF sdf, Bounds bounds)
		{
		}

		[Token(Token = "0x6000DC5")]
		[Address(RVA = "0xFA3560", Offset = "0xFA3560", VA = "0xFA3560")]
		public DynamicSurfaceChunk()
		{
		}
	}
	[Token(Token = "0x200027B")]
	public delegate float SDF(Vector3 v);
	[Token(Token = "0x200027C")]
	public class SDFUtils
	{
		[Token(Token = "0x6000DCA")]
		[Address(RVA = "0xFA3714", Offset = "0xFA3714", VA = "0xFA3714")]
		public static SDF Cone(Vector3 pos, Vector3 dir, float width)
		{
			return null;
		}

		[Token(Token = "0x6000DCB")]
		[Address(RVA = "0xFA38CC", Offset = "0xFA38CC", VA = "0xFA38CC")]
		public static SDF Cylinder(Vector3 pos, Vector3 dir, float radius)
		{
			return null;
		}

		[Token(Token = "0x6000DCC")]
		[Address(RVA = "0xFA3A68", Offset = "0xFA3A68", VA = "0xFA3A68")]
		public static SDF Cylinder(Vector3 pos, Vector3 dir, float radius, float height)
		{
			return null;
		}

		[Token(Token = "0x6000DCD")]
		[Address(RVA = "0xFA3C2C", Offset = "0xFA3C2C", VA = "0xFA3C2C")]
		public static SDF HalfSpace(Vector3 pos, Vector3 dir)
		{
			return null;
		}

		[Token(Token = "0x6000DCE")]
		[Address(RVA = "0xFA3DB4", Offset = "0xFA3DB4", VA = "0xFA3DB4")]
		public static SDF Intersection(params SDF[] a)
		{
			return null;
		}

		[Token(Token = "0x6000DCF")]
		[Address(RVA = "0xFA3E78", Offset = "0xFA3E78", VA = "0xFA3E78")]
		public static SDF IntersectionSmooth(float k, params SDF[] a)
		{
			return null;
		}

		[Token(Token = "0x6000DD0")]
		[Address(RVA = "0xFA3F50", Offset = "0xFA3F50", VA = "0xFA3F50")]
		public static SDF Invert(SDF s)
		{
			return null;
		}

		[Token(Token = "0x6000DD1")]
		[Address(RVA = "0xFA3268", Offset = "0xFA3268", VA = "0xFA3268")]
		public static SDF Scale(SDF s, float scale)
		{
			return null;
		}

		[Token(Token = "0x6000DD2")]
		[Address(RVA = "0xFA4014", Offset = "0xFA4014", VA = "0xFA4014")]
		public static SDF Sphere(Vector3 pos, float size)
		{
			return null;
		}

		[Token(Token = "0x6000DD3")]
		[Address(RVA = "0xFA40E4", Offset = "0xFA40E4", VA = "0xFA40E4")]
		public static SDF Tanslate(SDF s, Vector3 t)
		{
			return null;
		}

		[Token(Token = "0x6000DD4")]
		[Address(RVA = "0xFA41D0", Offset = "0xFA41D0", VA = "0xFA41D0")]
		public static SDF Union(params SDF[] a)
		{
			return null;
		}

		[Token(Token = "0x6000DD5")]
		[Address(RVA = "0xFA428C", Offset = "0xFA428C", VA = "0xFA428C")]
		public SDFUtils()
		{
		}
	}
	[Token(Token = "0x2000287")]
	public class SurfaceNet
	{
		[Token(Token = "0x2000288")]
		private readonly struct Edge
		{
			[Token(Token = "0x4000E06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly int x0;

			[Token(Token = "0x4000E07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public readonly int y0;

			[Token(Token = "0x4000E08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public readonly int z0;

			[Token(Token = "0x4000E09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public readonly int x1;

			[Token(Token = "0x4000E0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public readonly int y1;

			[Token(Token = "0x4000E0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public readonly int z1;

			[Token(Token = "0x4000E0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public readonly float d0;

			[Token(Token = "0x4000E0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public readonly float d1;

			[Token(Token = "0x6000DF0")]
			[Address(RVA = "0xFA549C", Offset = "0xFA549C", VA = "0xFA549C")]
			public Edge(int x0, int y0, int z0, int x1, int y1, int z1, float d0, float d1)
			{
			}

			[Token(Token = "0x6000DF1")]
			[Address(RVA = "0xFA47E4", Offset = "0xFA47E4", VA = "0xFA47E4")]
			public void AddToModel(Vector3[,,] points, int[,,] pointCounts, MeshBuilder builder)
			{
			}

			[Token(Token = "0x6000DF2")]
			[Address(RVA = "0xFA5504", Offset = "0xFA5504", VA = "0xFA5504", Slot = "0")]
			public override bool Equals(object obj)
			{
				return default(bool);
			}

			[Token(Token = "0x6000DF3")]
			[Address(RVA = "0xFA55CC", Offset = "0xFA55CC", VA = "0xFA55CC", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}

			[Token(Token = "0x6000DF4")]
			[Address(RVA = "0xFA5678", Offset = "0xFA5678", VA = "0xFA5678", Slot = "3")]
			public override string ToString()
			{
				return null;
			}
		}

		[Token(Token = "0x4000DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly float MIN;

		[Token(Token = "0x4000DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static readonly float BOUNDARY;

		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly float MAX;

		[Token(Token = "0x4000DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static readonly Vector3 ZERO;

		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly float[,,] data;

		[Token(Token = "0x4000E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly int[,,] pointCounts;

		[Token(Token = "0x4000E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly Vector3[,,] points;

		[Token(Token = "0x4000E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly int size;

		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly HashSet<Edge> surfaceEdges;

		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool changed;

		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Mesh mesh;

		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0xFA1F90", Offset = "0xFA1F90", VA = "0xFA1F90")]
		public SurfaceNet(int size)
		{
		}

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0xFA332C", Offset = "0xFA332C", VA = "0xFA332C")]
		public float Get(int x, int y, int z)
		{
			return default(float);
		}

		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0xFA2B38", Offset = "0xFA2B38", VA = "0xFA2B38")]
		public bool FillMesh(Mesh mesh)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DED")]
		[Address(RVA = "0xFA3398", Offset = "0xFA3398", VA = "0xFA3398")]
		public void Set(int x, int y, int z, float d)
		{
		}

		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0xFA4FC8", Offset = "0xFA4FC8", VA = "0xFA4FC8")]
		private void UpdateEdge(int x0, int y0, int z0, int x1, int y1, int z1, float newD0)
		{
		}
	}
}
namespace Utility.Settings
{
	[Token(Token = "0x2000289")]
	public enum DifficultySetting
	{
		[Token(Token = "0x4000E0F")]
		Invincible,
		[Token(Token = "0x4000E10")]
		Easy,
		[Token(Token = "0x4000E11")]
		Normal,
		[Token(Token = "0x4000E12")]
		Hard,
		[Token(Token = "0x4000E13")]
		Insane
	}
	[Token(Token = "0x200028A")]
	public enum FallDamageSetting
	{
		[Token(Token = "0x4000E15")]
		Off,
		[Token(Token = "0x4000E16")]
		Normal,
		[Token(Token = "0x4000E17")]
		Realistic
	}
	[Token(Token = "0x200028B")]
	public enum LanguageSetting
	{
		[Token(Token = "0x4000E19")]
		English
	}
	[Token(Token = "0x200028C")]
	public enum GameModeSetting
	{
		[Token(Token = "0x4000E1B")]
		Story,
		[Token(Token = "0x4000E1C")]
		FreePlay
	}
	[Token(Token = "0x200028D")]
	public enum StableFloorSetting
	{
		[Token(Token = "0x4000E1E")]
		Off,
		[Token(Token = "0x4000E1F")]
		Small,
		[Token(Token = "0x4000E20")]
		Medium,
		[Token(Token = "0x4000E21")]
		Large
	}
	[Token(Token = "0x200028E")]
	public enum TurningSetting
	{
		[Token(Token = "0x4000E23")]
		Off,
		[Token(Token = "0x4000E24")]
		SnapTurn,
		[Token(Token = "0x4000E25")]
		SmoothTurn
	}
	[Token(Token = "0x200028F")]
	public enum WalkDirectionSetting
	{
		[Token(Token = "0x4000E27")]
		Hand,
		[Token(Token = "0x4000E28")]
		Head
	}
	[Token(Token = "0x2000290")]
	public enum SeasonSetting
	{
		[Token(Token = "0x4000E2A")]
		Summer,
		[Token(Token = "0x4000E2B")]
		Winter,
		[Token(Token = "0x4000E2C")]
		Dark
	}
	[Token(Token = "0x2000291")]
	public enum GraphicsQualitySetting
	{
		[Token(Token = "0x4000E2E")]
		QuestLow,
		[Token(Token = "0x4000E2F")]
		QuestMedium,
		[Token(Token = "0x4000E30")]
		QuestHigh,
		[Token(Token = "0x4000E31")]
		Low,
		[Token(Token = "0x4000E32")]
		Medium,
		[Token(Token = "0x4000E33")]
		High
	}
	[Token(Token = "0x2000292")]
	public enum DrawDistanceSetting
	{
		[Token(Token = "0x4000E35")]
		Low,
		[Token(Token = "0x4000E36")]
		Medium,
		[Token(Token = "0x4000E37")]
		High
	}
	[Token(Token = "0x2000293")]
	public enum PhysicsQualitySetting
	{
		[Token(Token = "0x4000E39")]
		Low,
		[Token(Token = "0x4000E3A")]
		Medium,
		[Token(Token = "0x4000E3B")]
		High
	}
	[Token(Token = "0x2000294")]
	public enum AllowedModesSetting
	{
		[Token(Token = "0x4000E3D")]
		Any,
		[Token(Token = "0x4000E3E")]
		Thruster,
		[Token(Token = "0x4000E3F")]
		WebSlinger,
		[Token(Token = "0x4000E40")]
		IceTrail,
		[Token(Token = "0x4000E41")]
		Wings,
		[Token(Token = "0x4000E42")]
		Claw,
		[Token(Token = "0x4000E43")]
		Lightning,
		[Token(Token = "0x4000E44")]
		BlackHole,
		[Token(Token = "0x4000E45")]
		Speed
	}
	[Token(Token = "0x2000295")]
	public enum StoryStage
	{
		[Token(Token = "0x4000E47")]
		WinTutorial,
		[Token(Token = "0x4000E48")]
		UnlockIce,
		[Token(Token = "0x4000E49")]
		UnlockWing,
		[Token(Token = "0x4000E4A")]
		UnlockClaw,
		[Token(Token = "0x4000E4B")]
		UnlockLightning,
		[Token(Token = "0x4000E4C")]
		UnlockBlackHole,
		[Token(Token = "0x4000E4D")]
		UnlockSpeed,
		[Token(Token = "0x4000E4E")]
		UnlockBlink,
		[Token(Token = "0x4000E4F")]
		UnlockTelekinesis,
		[Token(Token = "0x4000E50")]
		UnlockPortals,
		[Token(Token = "0x4000E51")]
		UnlockGiant,
		[Token(Token = "0x4000E52")]
		UnlockAnySidegrade,
		[Token(Token = "0x4000E53")]
		DefeatWormBoss,
		[Token(Token = "0x4000E54")]
		DefeatSpiderBoss,
		[Token(Token = "0x4000E55")]
		DefeatTurretBoss
	}
	[Serializable]
	[Token(Token = "0x2000296")]
	public class SettingsData
	{
		[Token(Token = "0x4000E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int gameVersion;

		[Token(Token = "0x4000E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int? UUID;

		[Token(Token = "0x4000E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public long? playerId;

		[Token(Token = "0x4000E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string playerToken;

		[Token(Token = "0x4000E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string username;

		[Token(Token = "0x4000E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool tutorialActive;

		[Token(Token = "0x4000E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<Sidegrade> sidegradesActive;

		[Token(Token = "0x4000E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AllowedModesSetting allowedModes;

		[Token(Token = "0x4000E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public StoryStage? latestStoryStage;

		[Token(Token = "0x4000E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public int gearsTotal;

		[Token(Token = "0x4000E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int gearsAvailable;

		[Token(Token = "0x4000E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int currentUnlockGears;

		[Token(Token = "0x4000E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<Sidegrade> sidegradesUnlocked;

		[Token(Token = "0x4000E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<string> racesCompleted;

		[Token(Token = "0x4000E64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public List<int> powerUnlocked;

		[Token(Token = "0x4000E65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public List<int> sideGradeBossFightsUnlocked;

		[Token(Token = "0x4000E66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool enableArmSwinging;

		[Token(Token = "0x4000E67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		public bool flipHands;

		[Token(Token = "0x4000E68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public TurningSetting turning;

		[Token(Token = "0x4000E69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public int snapTurnAngle;

		[Token(Token = "0x4000E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public int smoothTurnSpeed;

		[Token(Token = "0x4000E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public WalkDirectionSetting walkDirection;

		[Token(Token = "0x4000E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public bool swapGripTrigger;

		[Token(Token = "0x4000E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
		public bool swapLightningControls;

		[Token(Token = "0x4000E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public int masterVolume;

		[Token(Token = "0x4000E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public int musicVolume;

		[Token(Token = "0x4000E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public int soundEffectsVolume;

		[Token(Token = "0x4000E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public int voiceVolume;

		[Token(Token = "0x4000E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool subtitles;

		[Token(Token = "0x4000E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public GameModeSetting gameMode;

		[Token(Token = "0x4000E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public bool hasCompletedTutorial;

		[Token(Token = "0x4000E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
		public bool hasPlayedGame;

		[Token(Token = "0x4000E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public DifficultySetting difficulty;

		[Token(Token = "0x4000E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public FallDamageSetting fallDamage;

		[Token(Token = "0x4000E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public int enemiesMul;

		[Token(Token = "0x4000E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public bool enableStreamerCamera;

		[Token(Token = "0x4000E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public LanguageSetting language;

		[Token(Token = "0x4000E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public bool controllerVibration;

		[Token(Token = "0x4000E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public GraphicsQualitySetting graphicsQuality;

		[Token(Token = "0x4000E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public DrawDistanceSetting drawDistance;

		[Token(Token = "0x4000E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public PhysicsQualitySetting physicsQuality;

		[Token(Token = "0x4000E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public bool enableExtraParticles;

		[Token(Token = "0x4000E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
		public bool enableShadows;

		[Token(Token = "0x4000E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE2")]
		public bool enableFragments;

		[Token(Token = "0x4000E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE3")]
		public bool enableBuildingInteriors;

		[Token(Token = "0x4000E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public bool enableRoofFence;

		[Token(Token = "0x4000E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public SeasonSetting season;

		[Token(Token = "0x4000E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public int physicsScale;

		[Token(Token = "0x4000E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public int gravityMul;

		[Token(Token = "0x4000E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public StableFloorSetting stableFloor;

		[Token(Token = "0x6000DF5")]
		[Address(RVA = "0xE79958", Offset = "0xE79958", VA = "0xE79958")]
		public void ValidateAndFix()
		{
		}

		[Token(Token = "0x6000DF6")]
		[Address(RVA = "0xE79B14", Offset = "0xE79B14", VA = "0xE79B14")]
		public SettingsData DeepClone()
		{
			return null;
		}

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0xE79D64", Offset = "0xE79D64", VA = "0xE79D64")]
		protected bool Equals(SettingsData other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0xE7A1C0", Offset = "0xE7A1C0", VA = "0xE7A1C0", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0xE7A2CC", Offset = "0xE7A2CC", VA = "0xE7A2CC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000DFA")]
		private static string PrintCollection<T>(IEnumerable<T> collection)
		{
			return null;
		}

		[Token(Token = "0x6000DFB")]
		[Address(RVA = "0xE7A714", Offset = "0xE7A714", VA = "0xE7A714", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000DFC")]
		[Address(RVA = "0xE7C9DC", Offset = "0xE7C9DC", VA = "0xE7C9DC")]
		public SettingsData()
		{
		}
	}
	[Token(Token = "0x2000297")]
	public class SettingsManager : MonoBehaviour
	{
		[Token(Token = "0x4000E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static SettingsData _settings;

		[Token(Token = "0x4000E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private SettingsData previousSettings;

		[Token(Token = "0x17000157")]
		public static SettingsData Settings
		{
			[Token(Token = "0x6000DFD")]
			[Address(RVA = "0xE7CBC8", Offset = "0xE7CBC8", VA = "0xE7CBC8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000158")]
		private static string Filepath
		{
			[Token(Token = "0x6000DFE")]
			[Address(RVA = "0xE7D798", Offset = "0xE7D798", VA = "0xE7D798")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0xE7CD14", Offset = "0xE7CD14", VA = "0xE7CD14")]
		private static void InitializeSettings()
		{
		}

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0xE7D7E4", Offset = "0xE7D7E4", VA = "0xE7D7E4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0xE7D7E8", Offset = "0xE7D7E8", VA = "0xE7D7E8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000E02")]
		[Address(RVA = "0xE7D8F8", Offset = "0xE7D8F8", VA = "0xE7D8F8")]
		public SettingsManager()
		{
		}
	}
}
namespace Utility.Math
{
	[Token(Token = "0x2000298")]
	public class IndividualPoissonDiskSampler
	{
		[Token(Token = "0x2000299")]
		private struct Disk
		{
			[Token(Token = "0x4000E8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector2 pos;

			[Token(Token = "0x4000E8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float radius;
		}

		[Token(Token = "0x4000E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly List<Disk> disks;

		[Token(Token = "0x6000E03")]
		[Address(RVA = "0xE7D900", Offset = "0xE7D900", VA = "0xE7D900")]
		public Vector2? Spawn(float radius, PolyArea area)
		{
			return null;
		}

		[Token(Token = "0x6000E04")]
		[Address(RVA = "0xE7DBC8", Offset = "0xE7DBC8", VA = "0xE7DBC8")]
		public IndividualPoissonDiskSampler()
		{
		}
	}
	[Token(Token = "0x200029C")]
	public class PoissonDiscSampler
	{
		[Token(Token = "0x200029D")]
		private struct GridPos
		{
			[Token(Token = "0x4000E96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly int x;

			[Token(Token = "0x4000E97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public readonly int y;

			[Token(Token = "0x6000E0D")]
			[Address(RVA = "0xE7E160", Offset = "0xE7E160", VA = "0xE7E160")]
			public GridPos(Vector2 sample, float cellSize)
			{
			}
		}

		[Token(Token = "0x200029E")]
		[CompilerGenerated]
		private sealed class <Samples>d__7 : IEnumerable<Vector2>, IEnumerable, IEnumerator<Vector2>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private Vector2 <>2__current;

			[Token(Token = "0x4000E9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000E9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PoissonDiscSampler <>4__this;

			[Token(Token = "0x4000E9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <i>5__2;

			[Token(Token = "0x4000E9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private bool <found>5__3;

			[Token(Token = "0x17000159")]
			private Vector2 System.Collections.Generic.IEnumerator<UnityEngine.Vector2>.Current
			{
				[Token(Token = "0x6000E11")]
				[Address(RVA = "0xE7E854", Offset = "0xE7E854", VA = "0xE7E854", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return default(Vector2);
				}
			}

			[Token(Token = "0x1700015A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E13")]
				[Address(RVA = "0xE7E89C", Offset = "0xE7E89C", VA = "0xE7E89C", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E0E")]
			[Address(RVA = "0xE7DF58", Offset = "0xE7DF58", VA = "0xE7DF58")]
			[DebuggerHidden]
			public <Samples>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6000E0F")]
			[Address(RVA = "0xE7E578", Offset = "0xE7E578", VA = "0xE7E578", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E10")]
			[Address(RVA = "0xE7E57C", Offset = "0xE7E57C", VA = "0xE7E57C", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E12")]
			[Address(RVA = "0xE7E85C", Offset = "0xE7E85C", VA = "0xE7E85C", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6000E14")]
			[Address(RVA = "0xE7E8F8", Offset = "0xE7E8F8", VA = "0xE7E8F8", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<Vector2> System.Collections.Generic.IEnumerable<UnityEngine.Vector2>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6000E15")]
			[Address(RVA = "0xE7E9A4", Offset = "0xE7E9A4", VA = "0xE7E9A4", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x4000E90")]
		private const int k = 30;

		[Token(Token = "0x4000E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly List<Vector2> activeSamples;

		[Token(Token = "0x4000E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly float cellSize;

		[Token(Token = "0x4000E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly Vector2[,] grid;

		[Token(Token = "0x4000E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly float radius2;

		[Token(Token = "0x4000E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private readonly Rect rect;

		[Token(Token = "0x6000E08")]
		[Address(RVA = "0xE7DCFC", Offset = "0xE7DCFC", VA = "0xE7DCFC")]
		public PoissonDiscSampler(float width, float height, float radius)
		{
		}

		[Token(Token = "0x6000E09")]
		[Address(RVA = "0xE7DED4", Offset = "0xE7DED4", VA = "0xE7DED4")]
		[IteratorStateMachine(typeof(<Samples>d__7))]
		public IEnumerable<Vector2> Samples()
		{
			return null;
		}

		[Token(Token = "0x6000E0A")]
		[Address(RVA = "0xE7DF8C", Offset = "0xE7DF8C", VA = "0xE7DF8C")]
		private bool IsFarEnough(Vector2 sample)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0xE7E194", Offset = "0xE7E194", VA = "0xE7E194")]
		private Vector2 AddSample(Vector2 sample)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000E0C")]
		[Address(RVA = "0xE7E2BC", Offset = "0xE7E2BC", VA = "0xE7E2BC")]
		public static List<Vector2> SampleFromArea(PolyArea roofArea, float radius)
		{
			return null;
		}
	}
	[Token(Token = "0x20002A0")]
	internal static class RandomExtra
	{
		[Token(Token = "0x6000E19")]
		public static T Choose<T>(IReadOnlyList<T> items)
		{
			return (T)null;
		}

		[Token(Token = "0x6000E1A")]
		public static T Choose<T>(IReadOnlyList<T> items, Func<T, float> weight)
		{
			return (T)null;
		}
	}
	[Token(Token = "0x20002A1")]
	public struct Spline
	{
		[Token(Token = "0x20002A2")]
		public struct Keyframe
		{
			[Token(Token = "0x4000EA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 position;

			[Token(Token = "0x4000EA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 velocity;

			[Token(Token = "0x4000EA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float time;
		}

		[Token(Token = "0x4000E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly float t;

		[Token(Token = "0x4000EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private readonly Vector3 a;

		[Token(Token = "0x4000EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Vector3 b;

		[Token(Token = "0x4000EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private readonly Vector3 c;

		[Token(Token = "0x4000EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly Vector3 d;

		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0xE7EB04", Offset = "0xE7EB04", VA = "0xE7EB04")]
		public Spline(Keyframe k1, Keyframe k2)
		{
		}

		[Token(Token = "0x6000E1C")]
		[Address(RVA = "0xE7EBF0", Offset = "0xE7EBF0", VA = "0xE7EBF0")]
		public Vector3 Position(float time)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E1D")]
		[Address(RVA = "0xE7EC74", Offset = "0xE7EC74", VA = "0xE7EC74")]
		public Vector3 Velocity(float time)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0xE7ECDC", Offset = "0xE7ECDC", VA = "0xE7ECDC")]
		public Vector3 Acceleration(float time)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x20002A3")]
	public class VectorHelper
	{
		[Token(Token = "0x6000E1F")]
		[Address(RVA = "0xE7ED24", Offset = "0xE7ED24", VA = "0xE7ED24")]
		public static float AngleFromZ(Vector2 v)
		{
			return default(float);
		}

		[Token(Token = "0x6000E20")]
		[Address(RVA = "0xE7ED44", Offset = "0xE7ED44", VA = "0xE7ED44")]
		public static float Length(IEnumerable<Vector2> path)
		{
			return default(float);
		}

		[Token(Token = "0x6000E21")]
		[Address(RVA = "0xE7EE6C", Offset = "0xE7EE6C", VA = "0xE7EE6C")]
		public static Vector2 Mean(IEnumerable<Vector2> list)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000E22")]
		[Address(RVA = "0xE7EF1C", Offset = "0xE7EF1C", VA = "0xE7EF1C")]
		public static Matrix4x4 TR(Vector3 pos, Quaternion q)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6000E23")]
		[Address(RVA = "0xE7EF60", Offset = "0xE7EF60", VA = "0xE7EF60")]
		public static Vector3 Vec3(Vector2 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E24")]
		[Address(RVA = "0xE7EF6C", Offset = "0xE7EF6C", VA = "0xE7EF6C")]
		public VectorHelper()
		{
		}
	}
	[Token(Token = "0x20002A4")]
	internal class Weighted<T>
	{
		[Token(Token = "0x1700015B")]
		public T Value
		{
			[Token(Token = "0x6000E26")]
			[CompilerGenerated]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x1700015C")]
		public float Weight
		{
			[Token(Token = "0x6000E27")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000E25")]
		public Weighted(T value, float weight)
		{
		}

		[Token(Token = "0x6000E28")]
		public static Weighted<T> operator /(Weighted<T> weighted, float divisor)
		{
			return null;
		}
	}
	[Token(Token = "0x20002A5")]
	internal static class Weighted
	{
		[Token(Token = "0x6000E29")]
		public static Weighted<T> Create<T>(T value, float weight)
		{
			return null;
		}
	}
}
namespace Utility.IK
{
	[Token(Token = "0x20002A6")]
	public class SpiderLegIK : MonoBehaviour
	{
		[Token(Token = "0x20002A7")]
		public struct FabrikJoint
		{
			[Token(Token = "0x4000EC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 position;

			[Token(Token = "0x4000EC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public float distance;
		}

		[Token(Token = "0x20002A8")]
		[CompilerGenerated]
		private sealed class <AnimateStep>d__34 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000EC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000EC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000EC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SpiderLegIK <>4__this;

			[Token(Token = "0x4000EC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float duration;

			[Token(Token = "0x4000EC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 endPos;

			[Token(Token = "0x4000ECA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <startTime>5__2;

			[Token(Token = "0x4000ECB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <t>5__3;

			[Token(Token = "0x4000ECC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <timeOffset>5__4;

			[Token(Token = "0x4000ECD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private Vector3 <startTargetPosition>5__5;

			[Token(Token = "0x4000ECE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private Vector3 <startNormal>5__6;

			[Token(Token = "0x4000ECF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			private Vector3 <endNormal>5__7;

			[Token(Token = "0x1700015D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E3C")]
				[Address(RVA = "0xE81B80", Offset = "0xE81B80", VA = "0xE81B80", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700015E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E3E")]
				[Address(RVA = "0xE81BC8", Offset = "0xE81BC8", VA = "0xE81BC8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E39")]
			[Address(RVA = "0xE8085C", Offset = "0xE8085C", VA = "0xE8085C")]
			[DebuggerHidden]
			public <AnimateStep>d__34(int <>1__state)
			{
			}

			[Token(Token = "0x6000E3A")]
			[Address(RVA = "0xE8184C", Offset = "0xE8184C", VA = "0xE8184C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E3B")]
			[Address(RVA = "0xE81850", Offset = "0xE81850", VA = "0xE81850", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E3D")]
			[Address(RVA = "0xE81B88", Offset = "0xE81B88", VA = "0xE81B88", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float tolerance;

		[Token(Token = "0x4000EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static int maxIter;

		[Token(Token = "0x4000EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject spiderGroup;

		[Token(Token = "0x4000EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Rigidbody spiderRb;

		[Token(Token = "0x4000EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float stepHeight;

		[Token(Token = "0x4000EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float stepDuration;

		[Token(Token = "0x4000EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float forceStepDistance;

		[Token(Token = "0x4000EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SpiderLegIK[] supportingLegs;

		[Token(Token = "0x4000EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float lowerRaycastArcAngle;

		[Token(Token = "0x4000EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject[] jointChain;

		[Token(Token = "0x4000EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject footTarget;

		[Token(Token = "0x4000EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject footNeutral;

		[Token(Token = "0x4000EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Quaternion[] ikInitialLocalRotations;

		[Token(Token = "0x4000EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Vector3 offset;

		[Token(Token = "0x4000EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private Quaternion[] fkInitialLocalRotations;

		[Token(Token = "0x4000EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float fkikBlend;

		[Token(Token = "0x4000EB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Vector3 normalVec;

		[Token(Token = "0x4000EBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Space]
		public float pointinessValOnRagdoll;

		[Token(Token = "0x4000EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float totalRagdollMass;

		[Token(Token = "0x4000EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 groundedNeutralNormal;

		[Token(Token = "0x4000EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 groundedNeutralPos;

		[Token(Token = "0x4000EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3[] ikInitialLocalPositions;

		[Token(Token = "0x4000EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool isCloseToGround;

		[Token(Token = "0x4000EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
		private bool isStepping;

		[Token(Token = "0x4000EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private float maxJointChainReach;

		[Token(Token = "0x4000EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Quaternion[] rotationOffsets;

		[Token(Token = "0x6000E2A")]
		[Address(RVA = "0xE7EF74", Offset = "0xE7EF74", VA = "0xE7EF74")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0xE7F6A4", Offset = "0xE7F6A4", VA = "0xE7F6A4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0xE7FC08", Offset = "0xE7FC08", VA = "0xE7FC08")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0xE7F46C", Offset = "0xE7F46C", VA = "0xE7F46C")]
		private void ResetLegIkTarget()
		{
		}

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0xE7FE30", Offset = "0xE7FE30", VA = "0xE7FE30")]
		private void CheckIfIsCloseToGround()
		{
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0xE80240", Offset = "0xE80240", VA = "0xE80240")]
		private void TakeStep()
		{
		}

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0xE807E8", Offset = "0xE807E8", VA = "0xE807E8")]
		public Vector3 GetDirVectorFromNeutral()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0xE80658", Offset = "0xE80658", VA = "0xE80658")]
		private bool OtherLegsStable()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0xE8074C", Offset = "0xE8074C", VA = "0xE8074C")]
		[IteratorStateMachine(typeof(<AnimateStep>d__34))]
		private IEnumerator AnimateStep(float duration, Vector3 endPos)
		{
			return null;
		}

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0xE7F6A8", Offset = "0xE7F6A8", VA = "0xE7F6A8")]
		private void PoseLegWithIKFK()
		{
		}

		[Token(Token = "0x6000E34")]
		[Address(RVA = "0xE8099C", Offset = "0xE8099C", VA = "0xE8099C")]
		public void ActivateRagdoll()
		{
		}

		[Token(Token = "0x6000E35")]
		[Address(RVA = "0xE80F9C", Offset = "0xE80F9C", VA = "0xE80F9C")]
		public static Vector3[] SolvePose(Vector3[] positions, Vector3 targetPosition)
		{
			return null;
		}

		[Token(Token = "0x6000E36")]
		[Address(RVA = "0xE80884", Offset = "0xE80884", VA = "0xE80884")]
		public static Vector3[] SolvePose(GameObject[] jointObjs, Vector3 targetPosition)
		{
			return null;
		}

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0xE817CC", Offset = "0xE817CC", VA = "0xE817CC")]
		public SpiderLegIK()
		{
		}
	}
}
namespace Utility.Graphics
{
	[Token(Token = "0x20002AA")]
	public class DisableVR : MonoBehaviour
	{
		[Token(Token = "0x6000E41")]
		[Address(RVA = "0xE81BE0", Offset = "0xE81BE0", VA = "0xE81BE0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E42")]
		[Address(RVA = "0xE81BEC", Offset = "0xE81BEC", VA = "0xE81BEC")]
		public DisableVR()
		{
		}
	}
	[Token(Token = "0x20002AB")]
	public class RandomizeMesh : MonoBehaviour
	{
		[Token(Token = "0x4000ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Mesh[] meshes;

		[Token(Token = "0x4000ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MeshFilter meshFilter;

		[Token(Token = "0x4000ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Mesh chosenMesh;

		[Token(Token = "0x6000E43")]
		[Address(RVA = "0xE81BF4", Offset = "0xE81BF4", VA = "0xE81BF4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E44")]
		[Address(RVA = "0xE81C6C", Offset = "0xE81C6C", VA = "0xE81C6C")]
		public RandomizeMesh()
		{
		}
	}
	[Token(Token = "0x20002AC")]
	public class Repaint : MonoBehaviour
	{
		[Token(Token = "0x4000ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material[] materials;

		[Token(Token = "0x4000ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MeshRenderer meshRenderer;

		[Token(Token = "0x4000ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Material chosenMaterial;

		[Token(Token = "0x6000E45")]
		[Address(RVA = "0xE81C74", Offset = "0xE81C74", VA = "0xE81C74")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E46")]
		[Address(RVA = "0xE81CEC", Offset = "0xE81CEC", VA = "0xE81CEC")]
		public Repaint()
		{
		}
	}
	[Token(Token = "0x20002AD")]
	public class RepaintSkinnedMesh : MonoBehaviour
	{
		[Token(Token = "0x4000ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material[] materials;

		[Token(Token = "0x4000ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SkinnedMeshRenderer meshRenderer;

		[Token(Token = "0x6000E47")]
		[Address(RVA = "0xE81CF4", Offset = "0xE81CF4", VA = "0xE81CF4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E48")]
		[Address(RVA = "0xE81D50", Offset = "0xE81D50", VA = "0xE81D50")]
		public RepaintSkinnedMesh()
		{
		}
	}
	[Token(Token = "0x20002AE")]
	public class SmoothCamera : MonoBehaviour
	{
		[Token(Token = "0x4000ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float smoothRate;

		[Token(Token = "0x6000E49")]
		[Address(RVA = "0xE81D58", Offset = "0xE81D58", VA = "0xE81D58")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E4A")]
		[Address(RVA = "0xE81D64", Offset = "0xE81D64", VA = "0xE81D64")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E4B")]
		[Address(RVA = "0xE81EC4", Offset = "0xE81EC4", VA = "0xE81EC4")]
		public SmoothCamera()
		{
		}
	}
	[Token(Token = "0x20002AF")]
	public static class UnityGraphicsHelper
	{
		[Token(Token = "0x4000EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static FieldInfo MainLightCastShadows_FieldInfo;

		[Token(Token = "0x4000EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static FieldInfo AdditionalLightCastShadows_FieldInfo;

		[Token(Token = "0x4000EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static FieldInfo MainLightShadowmapResolution_FieldInfo;

		[Token(Token = "0x4000EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static FieldInfo AdditionalLightShadowmapResolution_FieldInfo;

		[Token(Token = "0x4000EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static FieldInfo Cascade2Split_FieldInfo;

		[Token(Token = "0x4000EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static FieldInfo Cascade4Split_FieldInfo;

		[Token(Token = "0x4000EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static FieldInfo SoftShadowsEnabled_FieldInfo;

		[Token(Token = "0x1700015F")]
		public static bool MainLightCastShadows
		{
			[Token(Token = "0x6000E4D")]
			[Address(RVA = "0xE82170", Offset = "0xE82170", VA = "0xE82170")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E4E")]
			[Address(RVA = "0xE8222C", Offset = "0xE8222C", VA = "0xE8222C")]
			set
			{
			}
		}

		[Token(Token = "0x17000160")]
		public static bool AdditionalLightCastShadows
		{
			[Token(Token = "0x6000E4F")]
			[Address(RVA = "0xE822DC", Offset = "0xE822DC", VA = "0xE822DC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E50")]
			[Address(RVA = "0xE82398", Offset = "0xE82398", VA = "0xE82398")]
			set
			{
			}
		}

		[Token(Token = "0x17000161")]
		public static ShadowResolution MainLightShadowResolution
		{
			[Token(Token = "0x6000E51")]
			[Address(RVA = "0xE82448", Offset = "0xE82448", VA = "0xE82448")]
			get
			{
				return default(ShadowResolution);
			}
			[Token(Token = "0x6000E52")]
			[Address(RVA = "0xE82504", Offset = "0xE82504", VA = "0xE82504")]
			set
			{
			}
		}

		[Token(Token = "0x17000162")]
		public static ShadowResolution AdditionalLightShadowResolution
		{
			[Token(Token = "0x6000E53")]
			[Address(RVA = "0xE825B4", Offset = "0xE825B4", VA = "0xE825B4")]
			get
			{
				return default(ShadowResolution);
			}
			[Token(Token = "0x6000E54")]
			[Address(RVA = "0xE82670", Offset = "0xE82670", VA = "0xE82670")]
			set
			{
			}
		}

		[Token(Token = "0x17000163")]
		public static float Cascade2Split
		{
			[Token(Token = "0x6000E55")]
			[Address(RVA = "0xE82720", Offset = "0xE82720", VA = "0xE82720")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E56")]
			[Address(RVA = "0xE827DC", Offset = "0xE827DC", VA = "0xE827DC")]
			set
			{
			}
		}

		[Token(Token = "0x17000164")]
		public static Vector3 Cascade4Split
		{
			[Token(Token = "0x6000E57")]
			[Address(RVA = "0xE8288C", Offset = "0xE8288C", VA = "0xE8288C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000E58")]
			[Address(RVA = "0xE8294C", Offset = "0xE8294C", VA = "0xE8294C")]
			set
			{
			}
		}

		[Token(Token = "0x17000165")]
		public static bool SoftShadowsEnabled
		{
			[Token(Token = "0x6000E59")]
			[Address(RVA = "0xE82A18", Offset = "0xE82A18", VA = "0xE82A18")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E5A")]
			[Address(RVA = "0xE82AD4", Offset = "0xE82AD4", VA = "0xE82AD4")]
			set
			{
			}
		}

		[Token(Token = "0x6000E4C")]
		[Address(RVA = "0xE81ED4", Offset = "0xE81ED4", VA = "0xE81ED4")]
		static UnityGraphicsHelper()
		{
		}
	}
}
namespace Utility.Api
{
	[Token(Token = "0x20002B0")]
	internal class ApiClient : IDisposable
	{
		[StructLayout(3)]
		[Token(Token = "0x20002B1")]
		[CompilerGenerated]
		private struct <SubmitRaceRecordAsync>d__12 : IAsyncStateMachine
		{
			[Token(Token = "0x4000EE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000EE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4000EE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AllowedModesSetting mode;

			[Token(Token = "0x4000EEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ApiClient <>4__this;

			[Token(Token = "0x4000EEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string mission;

			[Token(Token = "0x4000EEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public int time;

			[Token(Token = "0x4000EED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private string <modeString>5__2;

			[Token(Token = "0x4000EEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private HttpRequestMessage <request>5__3;

			[Token(Token = "0x4000EEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private HttpRequestHeaders <>7__wrap3;

			[Token(Token = "0x4000EF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private TaskAwaiter<AuthenticationHeaderValue> <>u__1;

			[Token(Token = "0x4000EF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private TaskAwaiter<HttpResponseMessage> <>u__2;

			[Token(Token = "0x6000E69")]
			[Address(RVA = "0xE83838", Offset = "0xE83838", VA = "0xE83838", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000E6A")]
			[Address(RVA = "0xE83FF0", Offset = "0xE83FF0", VA = "0xE83FF0", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20002B3")]
		[CompilerGenerated]
		private struct <GetRaceRecordsAsync>d__13 : IAsyncStateMachine
		{
			[Token(Token = "0x4000EF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000EF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder<List<RaceRecord>> <>t__builder;

			[Token(Token = "0x4000EF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string mission;

			[Token(Token = "0x4000EF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string mode;

			[Token(Token = "0x4000EF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public long? playerId;

			[Token(Token = "0x4000EFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public ApiClient <>4__this;

			[Token(Token = "0x4000EFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private HttpRequestMessage <request>5__2;

			[Token(Token = "0x4000EFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private TaskAwaiter<HttpResponseMessage> <>u__1;

			[Token(Token = "0x4000EFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private TaskAwaiter<List<RaceRecord>> <>u__2;

			[Token(Token = "0x6000E6F")]
			[Address(RVA = "0xE84120", Offset = "0xE84120", VA = "0xE84120", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000E70")]
			[Address(RVA = "0xE84AFC", Offset = "0xE84AFC", VA = "0xE84AFC", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20002B4")]
		[CompilerGenerated]
		private struct <SubmitGearRecordAsync>d__14 : IAsyncStateMachine
		{
			[Token(Token = "0x4000EFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000EFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4000F00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ApiClient <>4__this;

			[Token(Token = "0x4000F01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int gears;

			[Token(Token = "0x4000F02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public DateTimeOffset startTime;

			[Token(Token = "0x4000F03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public DateTimeOffset endTime;

			[Token(Token = "0x4000F04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private HttpRequestMessage <request>5__2;

			[Token(Token = "0x4000F05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private HttpRequestHeaders <>7__wrap2;

			[Token(Token = "0x4000F06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private TaskAwaiter<AuthenticationHeaderValue> <>u__1;

			[Token(Token = "0x4000F07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private TaskAwaiter<HttpResponseMessage> <>u__2;

			[Token(Token = "0x6000E71")]
			[Address(RVA = "0xE84B54", Offset = "0xE84B54", VA = "0xE84B54", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000E72")]
			[Address(RVA = "0xE8521C", Offset = "0xE8521C", VA = "0xE8521C", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20002B5")]
		[CompilerGenerated]
		private struct <CreatePlayerAsync>d__15 : IAsyncStateMachine
		{
			[Token(Token = "0x4000F08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000F09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder<Player> <>t__builder;

			[Token(Token = "0x4000F0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ApiClient <>4__this;

			[Token(Token = "0x4000F0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private HttpRequestMessage <request>5__2;

			[Token(Token = "0x4000F0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private TaskAwaiter<OculusProof> <>u__1;

			[Token(Token = "0x4000F0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private TaskAwaiter<HttpResponseMessage> <>u__2;

			[Token(Token = "0x4000F0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private TaskAwaiter<Player> <>u__3;

			[Token(Token = "0x6000E73")]
			[Address(RVA = "0xE85228", Offset = "0xE85228", VA = "0xE85228", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000E74")]
			[Address(RVA = "0xE859EC", Offset = "0xE859EC", VA = "0xE859EC", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20002B6")]
		[CompilerGenerated]
		private struct <UpdatePlayerAsync>d__16 : IAsyncStateMachine
		{
			[Token(Token = "0x4000F0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000F10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder<Player> <>t__builder;

			[Token(Token = "0x4000F11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ApiClient <>4__this;

			[Token(Token = "0x4000F12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private HttpRequestMessage <request>5__2;

			[Token(Token = "0x4000F13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private TaskAwaiter<OculusProof> <>u__1;

			[Token(Token = "0x4000F14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private TaskAwaiter<HttpResponseMessage> <>u__2;

			[Token(Token = "0x4000F15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private TaskAwaiter<Player> <>u__3;

			[Token(Token = "0x6000E75")]
			[Address(RVA = "0xE85A44", Offset = "0xE85A44", VA = "0xE85A44", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000E76")]
			[Address(RVA = "0xE8623C", Offset = "0xE8623C", VA = "0xE8623C", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20002B7")]
		[CompilerGenerated]
		private struct <GetFreshAuthorizationAsync>d__17 : IAsyncStateMachine
		{
			[Token(Token = "0x4000F16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000F17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder<AuthenticationHeaderValue> <>t__builder;

			[Token(Token = "0x4000F18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ApiClient <>4__this;

			[Token(Token = "0x4000F19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private TaskAwaiter <>u__1;

			[Token(Token = "0x6000E77")]
			[Address(RVA = "0xE86294", Offset = "0xE86294", VA = "0xE86294", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000E78")]
			[Address(RVA = "0xE86494", Offset = "0xE86494", VA = "0xE86494", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20002B8")]
		[CompilerGenerated]
		private struct <SendJsonRequestAsync>d__18<T> : IAsyncStateMachine
		{
			[Token(Token = "0x4000F1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000F1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public AsyncTaskMethodBuilder<HttpResponseMessage> <>t__builder;

			[Token(Token = "0x4000F1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T content;

			[Token(Token = "0x4000F1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public HttpRequestMessage request;

			[Token(Token = "0x4000F1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ApiClient <>4__this;

			[Token(Token = "0x4000F1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private TaskAwaiter<HttpResponseMessage> <>u__1;

			[Token(Token = "0x6000E79")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000E7A")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20002B9")]
		[CompilerGenerated]
		private struct <GetJsonResponse>d__19<T> : IAsyncStateMachine
		{
			[Token(Token = "0x4000F20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000F21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public AsyncTaskMethodBuilder<T> <>t__builder;

			[Token(Token = "0x4000F22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public HttpResponseMessage response;

			[Token(Token = "0x4000F23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private TaskAwaiter<string> <>u__1;

			[Token(Token = "0x6000E7B")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000E7C")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x4000EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Uri PlayerUri;

		[Token(Token = "0x4000EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly Uri PlayersUri;

		[Token(Token = "0x4000EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly Uri RaceRecordsUri;

		[Token(Token = "0x4000EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly Uri GearRecordsUri;

		[Token(Token = "0x4000EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly HttpClient httpClient;

		[Token(Token = "0x4000EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Lazy<Task> loginTask;

		[Token(Token = "0x17000166")]
		private static string PlayerName
		{
			[Token(Token = "0x6000E5C")]
			[Address(RVA = "0xE82D30", Offset = "0xE82D30", VA = "0xE82D30")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000167")]
		[CanBeNull]
		private static AuthenticationHeaderValue AuthorizationFromSettings
		{
			[Token(Token = "0x6000E5D")]
			[Address(RVA = "0xE82D64", Offset = "0xE82D64", VA = "0xE82D64")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E5B")]
		[Address(RVA = "0xE82B84", Offset = "0xE82B84", VA = "0xE82B84")]
		internal ApiClient()
		{
		}

		[Token(Token = "0x6000E5E")]
		[Address(RVA = "0xE82EF8", Offset = "0xE82EF8", VA = "0xE82EF8", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000E5F")]
		[Address(RVA = "0xE82F14", Offset = "0xE82F14", VA = "0xE82F14")]
		[AsyncStateMachine(typeof(<SubmitRaceRecordAsync>d__12))]
		internal Task SubmitRaceRecordAsync(string mission, AllowedModesSetting mode, int time)
		{
			return null;
		}

		[Token(Token = "0x6000E60")]
		[Address(RVA = "0xE83034", Offset = "0xE83034", VA = "0xE83034")]
		[AsyncStateMachine(typeof(<GetRaceRecordsAsync>d__13))]
		internal Task<List<RaceRecord>> GetRaceRecordsAsync([CanBeNull] string mission, [CanBeNull] string mode, long? playerId)
		{
			return null;
		}

		[Token(Token = "0x6000E61")]
		[Address(RVA = "0xE83188", Offset = "0xE83188", VA = "0xE83188")]
		[AsyncStateMachine(typeof(<SubmitGearRecordAsync>d__14))]
		internal Task SubmitGearRecordAsync(int gears, DateTimeOffset startTime, DateTimeOffset endTime)
		{
			return null;
		}

		[Token(Token = "0x6000E62")]
		[Address(RVA = "0xE832B8", Offset = "0xE832B8", VA = "0xE832B8")]
		[AsyncStateMachine(typeof(<CreatePlayerAsync>d__15))]
		private Task<Player> CreatePlayerAsync()
		{
			return null;
		}

		[Token(Token = "0x6000E63")]
		[Address(RVA = "0xE833C8", Offset = "0xE833C8", VA = "0xE833C8")]
		[AsyncStateMachine(typeof(<UpdatePlayerAsync>d__16))]
		private Task<Player> UpdatePlayerAsync()
		{
			return null;
		}

		[Token(Token = "0x6000E64")]
		[Address(RVA = "0xE834D8", Offset = "0xE834D8", VA = "0xE834D8")]
		[AsyncStateMachine(typeof(<GetFreshAuthorizationAsync>d__17))]
		private Task<AuthenticationHeaderValue> GetFreshAuthorizationAsync()
		{
			return null;
		}

		[Token(Token = "0x6000E65")]
		[AsyncStateMachine(typeof(<SendJsonRequestAsync>d__18<>))]
		private Task<HttpResponseMessage> SendJsonRequestAsync<T>(HttpRequestMessage request, T content)
		{
			return null;
		}

		[Token(Token = "0x6000E66")]
		[AsyncStateMachine(typeof(<GetJsonResponse>d__19<>))]
		private static Task<T> GetJsonResponse<T>(HttpResponseMessage response)
		{
			return null;
		}
	}
	[Token(Token = "0x20002BB")]
	internal class ByteArrayHexConverter : JsonConverter<byte[]>
	{
		[Token(Token = "0x17000168")]
		public override bool CanRead
		{
			[Token(Token = "0x6000E7F")]
			[Address(RVA = "0xE86788", Offset = "0xE86788", VA = "0xE86788", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000E80")]
		[Address(RVA = "0xE86790", Offset = "0xE86790", VA = "0xE86790", Slot = "9")]
		public override void WriteJson(JsonWriter writer, byte[] value, JsonSerializer serializer)
		{
		}

		[Token(Token = "0x6000E81")]
		[Address(RVA = "0xE868C0", Offset = "0xE868C0", VA = "0xE868C0", Slot = "10")]
		public override byte[] ReadJson(JsonReader reader, Type objectType, byte[] existingValue, bool hasExistingValue, JsonSerializer serializer)
		{
			return null;
		}

		[Token(Token = "0x6000E82")]
		[Address(RVA = "0xE86900", Offset = "0xE86900", VA = "0xE86900")]
		public ByteArrayHexConverter()
		{
		}
	}
	[Token(Token = "0x20002BD")]
	public class OculusProof
	{
		[Token(Token = "0x17000169")]
		[JsonProperty("userId")]
		public ulong UserId
		{
			[Token(Token = "0x6000E87")]
			[Address(RVA = "0xE86A48", Offset = "0xE86A48", VA = "0xE86A48")]
			[CompilerGenerated]
			get
			{
				return default(ulong);
			}
		}

		[Token(Token = "0x1700016A")]
		[JsonProperty("nonce")]
		public string Nonce
		{
			[Token(Token = "0x6000E88")]
			[Address(RVA = "0xE86A50", Offset = "0xE86A50", VA = "0xE86A50")]
			[CompilerGenerated]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E86")]
		[Address(RVA = "0xE86A10", Offset = "0xE86A10", VA = "0xE86A10")]
		public OculusProof(ulong userId, string nonce)
		{
		}
	}
	[Token(Token = "0x20002BE")]
	internal class PatchPlayerParams
	{
		[Token(Token = "0x1700016B")]
		[JsonProperty("name")]
		public string Name
		{
			[Token(Token = "0x6000E8A")]
			[Address(RVA = "0xE86A58", Offset = "0xE86A58", VA = "0xE86A58")]
			[CompilerGenerated]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016C")]
		[CanBeNull]
		[JsonProperty("steamTicket")]
		[JsonConverter(typeof(ByteArrayHexConverter))]
		public byte[] SteamTicket
		{
			[Token(Token = "0x6000E8B")]
			[Address(RVA = "0xE86A60", Offset = "0xE86A60", VA = "0xE86A60")]
			[CompilerGenerated]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016D")]
		[JsonProperty("oculusProof")]
		public OculusProof OculusProof
		{
			[Token(Token = "0x6000E8C")]
			[Address(RVA = "0xE86A68", Offset = "0xE86A68", VA = "0xE86A68")]
			[CompilerGenerated]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E89")]
		[Address(RVA = "0xE861DC", Offset = "0xE861DC", VA = "0xE861DC")]
		public PatchPlayerParams(string name, [CanBeNull] byte[] steamTicket, [CanBeNull] OculusProof oculusProof)
		{
		}
	}
	[Token(Token = "0x20002BF")]
	internal class Player
	{
		[Token(Token = "0x1700016E")]
		[JsonProperty("id")]
		public long Id
		{
			[Token(Token = "0x6000E8E")]
			[Address(RVA = "0xE86ADC", Offset = "0xE86ADC", VA = "0xE86ADC")]
			[CompilerGenerated]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x1700016F")]
		[JsonProperty("name")]
		public string Name
		{
			[Token(Token = "0x6000E8F")]
			[Address(RVA = "0xE86AE4", Offset = "0xE86AE4", VA = "0xE86AE4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000170")]
		[JsonProperty("token")]
		public string Token
		{
			[Token(Token = "0x6000E90")]
			[Address(RVA = "0xE86AEC", Offset = "0xE86AEC", VA = "0xE86AEC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000171")]
		[JsonProperty("steamId")]
		public long? SteamId
		{
			[Token(Token = "0x6000E91")]
			[Address(RVA = "0xE86AF4", Offset = "0xE86AF4", VA = "0xE86AF4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E8D")]
		[Address(RVA = "0xE86A70", Offset = "0xE86A70", VA = "0xE86A70")]
		public Player(long id, string name, string token, long? steamId)
		{
		}
	}
	[Token(Token = "0x20002C0")]
	internal class PlayerProfile
	{
		[Token(Token = "0x17000172")]
		[JsonProperty("id")]
		public long Id
		{
			[Token(Token = "0x6000E93")]
			[Address(RVA = "0xE86B38", Offset = "0xE86B38", VA = "0xE86B38")]
			[CompilerGenerated]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x17000173")]
		[JsonProperty("name")]
		public string Name
		{
			[Token(Token = "0x6000E94")]
			[Address(RVA = "0xE86B40", Offset = "0xE86B40", VA = "0xE86B40")]
			[CompilerGenerated]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E92")]
		[Address(RVA = "0xE86B00", Offset = "0xE86B00", VA = "0xE86B00")]
		public PlayerProfile(long id, string name)
		{
		}
	}
	[Token(Token = "0x20002C1")]
	internal class PostGearRecordsParams
	{
		[Token(Token = "0x17000174")]
		[JsonProperty("gears")]
		public int Gears
		{
			[Token(Token = "0x6000E96")]
			[Address(RVA = "0xE86B48", Offset = "0xE86B48", VA = "0xE86B48")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000175")]
		[JsonProperty("startTime")]
		public DateTimeOffset StartTime
		{
			[Token(Token = "0x6000E97")]
			[Address(RVA = "0xE86B50", Offset = "0xE86B50", VA = "0xE86B50")]
			[CompilerGenerated]
			get
			{
				return default(DateTimeOffset);
			}
		}

		[Token(Token = "0x17000176")]
		[JsonProperty("endTime")]
		public DateTimeOffset EndTime
		{
			[Token(Token = "0x6000E98")]
			[Address(RVA = "0xE86B5C", Offset = "0xE86B5C", VA = "0xE86B5C")]
			[CompilerGenerated]
			get
			{
				return default(DateTimeOffset);
			}
		}

		[Token(Token = "0x17000177")]
		[JsonProperty("version")]
		public int Version
		{
			[Token(Token = "0x6000E99")]
			[Address(RVA = "0xE86B68", Offset = "0xE86B68", VA = "0xE86B68")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000E95")]
		[Address(RVA = "0xE851C4", Offset = "0xE851C4", VA = "0xE851C4")]
		public PostGearRecordsParams(int gears, DateTimeOffset startTime, DateTimeOffset endTime, int version)
		{
		}
	}
	[Token(Token = "0x20002C2")]
	internal class PostPlayersParams
	{
		[Token(Token = "0x17000178")]
		[JsonProperty("name")]
		public string Name
		{
			[Token(Token = "0x6000E9B")]
			[Address(RVA = "0xE86B70", Offset = "0xE86B70", VA = "0xE86B70")]
			[CompilerGenerated]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000179")]
		[JsonConverter(typeof(ByteArrayHexConverter))]
		[JsonProperty("steamTicket")]
		[CanBeNull]
		public byte[] SteamTicket
		{
			[Token(Token = "0x6000E9C")]
			[Address(RVA = "0xE86B78", Offset = "0xE86B78", VA = "0xE86B78")]
			[CompilerGenerated]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017A")]
		[JsonProperty("oculusProof")]
		public OculusProof OculusProof
		{
			[Token(Token = "0x6000E9D")]
			[Address(RVA = "0xE86B80", Offset = "0xE86B80", VA = "0xE86B80")]
			[CompilerGenerated]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E9A")]
		[Address(RVA = "0xE8598C", Offset = "0xE8598C", VA = "0xE8598C")]
		public PostPlayersParams(string name, [CanBeNull] byte[] steamTicket, [CanBeNull] OculusProof oculusProof)
		{
		}
	}
	[Token(Token = "0x20002C3")]
	internal class PostRaceRecordsParams
	{
		[Token(Token = "0x1700017B")]
		[JsonProperty("mission")]
		public string Mission
		{
			[Token(Token = "0x6000E9F")]
			[Address(RVA = "0xE86B88", Offset = "0xE86B88", VA = "0xE86B88")]
			[CompilerGenerated]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017C")]
		[JsonProperty("mode")]
		public string Mode
		{
			[Token(Token = "0x6000EA0")]
			[Address(RVA = "0xE86B90", Offset = "0xE86B90", VA = "0xE86B90")]
			[CompilerGenerated]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017D")]
		[JsonProperty("time")]
		public int Time
		{
			[Token(Token = "0x6000EA1")]
			[Address(RVA = "0xE86B98", Offset = "0xE86B98", VA = "0xE86B98")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700017E")]
		[JsonProperty("version")]
		public int Version
		{
			[Token(Token = "0x6000EA2")]
			[Address(RVA = "0xE86BA0", Offset = "0xE86BA0", VA = "0xE86BA0")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000E9E")]
		[Address(RVA = "0xE83F94", Offset = "0xE83F94", VA = "0xE83F94")]
		public PostRaceRecordsParams(string mission, string mode, int time, int version)
		{
		}
	}
	[Token(Token = "0x20002C4")]
	internal class RaceRecord
	{
		[Token(Token = "0x1700017F")]
		[JsonProperty("rank")]
		public int Rank
		{
			[Token(Token = "0x6000EA4")]
			[Address(RVA = "0xE86C3C", Offset = "0xE86C3C", VA = "0xE86C3C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000180")]
		[JsonProperty("player")]
		public PlayerProfile Player
		{
			[Token(Token = "0x6000EA5")]
			[Address(RVA = "0xE86C44", Offset = "0xE86C44", VA = "0xE86C44")]
			[CompilerGenerated]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000181")]
		[JsonProperty("mission")]
		public string Mission
		{
			[Token(Token = "0x6000EA6")]
			[Address(RVA = "0xE86C4C", Offset = "0xE86C4C", VA = "0xE86C4C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000182")]
		[JsonProperty("mode")]
		public string Mode
		{
			[Token(Token = "0x6000EA7")]
			[Address(RVA = "0xE86C54", Offset = "0xE86C54", VA = "0xE86C54")]
			[CompilerGenerated]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000183")]
		[JsonProperty("time")]
		public int Time
		{
			[Token(Token = "0x6000EA8")]
			[Address(RVA = "0xE86C5C", Offset = "0xE86C5C", VA = "0xE86C5C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000184")]
		[JsonProperty("date")]
		public DateTime Date
		{
			[Token(Token = "0x6000EA9")]
			[Address(RVA = "0xE86C64", Offset = "0xE86C64", VA = "0xE86C64")]
			[CompilerGenerated]
			get
			{
				return default(DateTime);
			}
		}

		[Token(Token = "0x17000185")]
		[JsonProperty("version")]
		public int Version
		{
			[Token(Token = "0x6000EAA")]
			[Address(RVA = "0xE86C6C", Offset = "0xE86C6C", VA = "0xE86C6C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000186")]
		internal string TimeString
		{
			[Token(Token = "0x6000EAB")]
			[Address(RVA = "0xE86C74", Offset = "0xE86C74", VA = "0xE86C74")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EA3")]
		[Address(RVA = "0xE86BA8", Offset = "0xE86BA8", VA = "0xE86BA8")]
		public RaceRecord(int rank, PlayerProfile player, string mission, string mode, int time, DateTime date, int version)
		{
		}
	}
}
namespace Code.UI
{
	[Token(Token = "0x20002C5")]
	public class GearCollectionProgress : MonoBehaviour
	{
		[Token(Token = "0x20002C6")]
		[CompilerGenerated]
		private sealed class <ShowGearCollectionProgress>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GearCollectionProgress <>4__this;

			[Token(Token = "0x17000187")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000EB5")]
				[Address(RVA = "0xE87084", Offset = "0xE87084", VA = "0xE87084", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000188")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000EB7")]
				[Address(RVA = "0xE870CC", Offset = "0xE870CC", VA = "0xE870CC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000EB2")]
			[Address(RVA = "0xE86F0C", Offset = "0xE86F0C", VA = "0xE86F0C")]
			[DebuggerHidden]
			public <ShowGearCollectionProgress>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x6000EB3")]
			[Address(RVA = "0xE86F9C", Offset = "0xE86F9C", VA = "0xE86F9C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000EB4")]
			[Address(RVA = "0xE86FA0", Offset = "0xE86FA0", VA = "0xE86FA0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000EB6")]
			[Address(RVA = "0xE8708C", Offset = "0xE8708C", VA = "0xE8708C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002C7")]
		[CompilerGenerated]
		private sealed class <ResetGearCollectionProgress>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GearCollectionProgress <>4__this;

			[Token(Token = "0x17000189")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000EBB")]
				[Address(RVA = "0xE871B4", Offset = "0xE871B4", VA = "0xE871B4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700018A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000EBD")]
				[Address(RVA = "0xE871FC", Offset = "0xE871FC", VA = "0xE871FC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000EB8")]
			[Address(RVA = "0xE86F34", Offset = "0xE86F34", VA = "0xE86F34")]
			[DebuggerHidden]
			public <ResetGearCollectionProgress>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6000EB9")]
			[Address(RVA = "0xE870D4", Offset = "0xE870D4", VA = "0xE870D4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000EBA")]
			[Address(RVA = "0xE870D8", Offset = "0xE870D8", VA = "0xE870D8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000EBC")]
			[Address(RVA = "0xE871BC", Offset = "0xE871BC", VA = "0xE871BC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static GearCollectionProgress instance;

		[Token(Token = "0x4000F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject gearProgressCanvas;

		[Token(Token = "0x4000F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Coroutine currentCoroutine;

		[Token(Token = "0x4000F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool isCoroutineRunning;

		[Token(Token = "0x6000EAC")]
		[Address(RVA = "0xE86D4C", Offset = "0xE86D4C", VA = "0xE86D4C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EAD")]
		[Address(RVA = "0xE86DA4", Offset = "0xE86DA4", VA = "0xE86DA4")]
		public void StartShowGearCollectionProgress()
		{
		}

		[Token(Token = "0x6000EAE")]
		[Address(RVA = "0xE86E98", Offset = "0xE86E98", VA = "0xE86E98")]
		[IteratorStateMachine(typeof(<ShowGearCollectionProgress>d__6))]
		private IEnumerator ShowGearCollectionProgress()
		{
			return null;
		}

		[Token(Token = "0x6000EAF")]
		[Address(RVA = "0xE86E24", Offset = "0xE86E24", VA = "0xE86E24")]
		[IteratorStateMachine(typeof(<ResetGearCollectionProgress>d__7))]
		private IEnumerator ResetGearCollectionProgress()
		{
			return null;
		}

		[Token(Token = "0x6000EB0")]
		[Address(RVA = "0xE86F5C", Offset = "0xE86F5C", VA = "0xE86F5C")]
		public void StopShowGearCollectionProgress()
		{
		}

		[Token(Token = "0x6000EB1")]
		[Address(RVA = "0xE86F94", Offset = "0xE86F94", VA = "0xE86F94")]
		public GearCollectionProgress()
		{
		}
	}
	[Token(Token = "0x20002C8")]
	public class UpdateGearProgressText : MonoBehaviour
	{
		[Token(Token = "0x4000F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshProUGUI gearProgressText;

		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0xE87204", Offset = "0xE87204", VA = "0xE87204")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EBF")]
		[Address(RVA = "0xE87244", Offset = "0xE87244", VA = "0xE87244")]
		public UpdateGearProgressText()
		{
		}
	}
	[Token(Token = "0x20002C9")]
	public class UpdateHelpText : MonoBehaviour
	{
		[Token(Token = "0x4000F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LocalizedString localizationKey;

		[Token(Token = "0x4000F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocalizedString inverseLocalizationKey;

		[Token(Token = "0x4000F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool isLightning;

		[Token(Token = "0x4000F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private LocalizedStringProperty helpText;

		[Token(Token = "0x4000F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool prevShouldSwap;

		[Token(Token = "0x6000EC0")]
		[Address(RVA = "0xE8724C", Offset = "0xE8724C", VA = "0xE8724C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0xE87324", Offset = "0xE87324", VA = "0xE87324")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000EC2")]
		[Address(RVA = "0xE87410", Offset = "0xE87410", VA = "0xE87410")]
		public UpdateHelpText()
		{
		}
	}
}
namespace UI
{
	[Token(Token = "0x20002CA")]
	public class ActivateNearbyMenu : MonoBehaviour
	{
		[Token(Token = "0x4000F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MenuController menu;

		[Token(Token = "0x4000F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float activationDistance;

		[Token(Token = "0x4000F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float autoOpenAtTime;

		[Token(Token = "0x4000F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maxVelocity;

		[Token(Token = "0x4000F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool ignoreYDiff;

		[Token(Token = "0x4000F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject waypoint;

		[Token(Token = "0x4000F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float timeActive;

		[Token(Token = "0x1700018B")]
		private PlayerManager player
		{
			[Token(Token = "0x6000EC3")]
			[Address(RVA = "0xE87418", Offset = "0xE87418", VA = "0xE87418")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EC4")]
		[Address(RVA = "0xE87460", Offset = "0xE87460", VA = "0xE87460")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EC5")]
		[Address(RVA = "0xE877E4", Offset = "0xE877E4", VA = "0xE877E4")]
		public ActivateNearbyMenu()
		{
		}
	}
	[Token(Token = "0x20002CB")]
	public class FollowGaze : MonoBehaviour
	{
		[Token(Token = "0x20002CC")]
		[CompilerGenerated]
		private sealed class <SmoothReset>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FollowGaze <>4__this;

			[Token(Token = "0x1700018D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000ED3")]
				[Address(RVA = "0xE87FA8", Offset = "0xE87FA8", VA = "0xE87FA8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700018E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000ED5")]
				[Address(RVA = "0xE87FF0", Offset = "0xE87FF0", VA = "0xE87FF0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000ED0")]
			[Address(RVA = "0xE87CE0", Offset = "0xE87CE0", VA = "0xE87CE0")]
			[DebuggerHidden]
			public <SmoothReset>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x6000ED1")]
			[Address(RVA = "0xE87D24", Offset = "0xE87D24", VA = "0xE87D24", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000ED2")]
			[Address(RVA = "0xE87D28", Offset = "0xE87D28", VA = "0xE87D28", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000ED4")]
			[Address(RVA = "0xE87FB0", Offset = "0xE87FB0", VA = "0xE87FB0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float distanceThreshold;

		[Token(Token = "0x4000F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float angleThreshold;

		[Token(Token = "0x4000F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float smoothingTime;

		[Token(Token = "0x4000F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve smoothingCurve;

		[Token(Token = "0x4000F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool followHeight;

		[Token(Token = "0x4000F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool currentlySmoothing;

		[Token(Token = "0x4000F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float smoothingStartTime;

		[Token(Token = "0x4000F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 startPos;

		[Token(Token = "0x4000F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 startDirection;

		[Token(Token = "0x1700018C")]
		private PlayerManager player
		{
			[Token(Token = "0x6000EC6")]
			[Address(RVA = "0xE87804", Offset = "0xE87804", VA = "0xE87804")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EC7")]
		[Address(RVA = "0xE8784C", Offset = "0xE8784C", VA = "0xE8784C")]
		private Vector3 GoalPos()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000EC8")]
		[Address(RVA = "0xE878C0", Offset = "0xE878C0", VA = "0xE878C0")]
		private Vector3 GoalDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000EC9")]
		[Address(RVA = "0xE8791C", Offset = "0xE8791C", VA = "0xE8791C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000ECA")]
		[Address(RVA = "0xE87A50", Offset = "0xE87A50", VA = "0xE87A50")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000ECB")]
		[Address(RVA = "0xE87AF8", Offset = "0xE87AF8", VA = "0xE87AF8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000ECC")]
		[Address(RVA = "0xE87CD8", Offset = "0xE87CD8", VA = "0xE87CD8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000ECD")]
		[Address(RVA = "0xE87994", Offset = "0xE87994", VA = "0xE87994")]
		private void HardReset()
		{
		}

		[Token(Token = "0x6000ECE")]
		[Address(RVA = "0xE87C64", Offset = "0xE87C64", VA = "0xE87C64")]
		[IteratorStateMachine(typeof(<SmoothReset>d__18))]
		private IEnumerator SmoothReset()
		{
			return null;
		}

		[Token(Token = "0x6000ECF")]
		[Address(RVA = "0xE87D08", Offset = "0xE87D08", VA = "0xE87D08")]
		public FollowGaze()
		{
		}
	}
	[Token(Token = "0x20002CD")]
	public class MenuController : MonoBehaviour
	{
		[Token(Token = "0x4000F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static MenuController currentActiveMenu;

		[Token(Token = "0x4000F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool showMenuOnStart;

		[Token(Token = "0x4000F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject menuChild;

		[Token(Token = "0x4000F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject deathPanel;

		[Token(Token = "0x6000ED6")]
		[Address(RVA = "0xE87FF8", Offset = "0xE87FF8", VA = "0xE87FF8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000ED7")]
		[Address(RVA = "0xE876C0", Offset = "0xE876C0", VA = "0xE876C0")]
		public void ShowMenu(bool isActive)
		{
		}

		[Token(Token = "0x6000ED8")]
		[Address(RVA = "0xE880C0", Offset = "0xE880C0", VA = "0xE880C0")]
		public void ShowYouDiedMenu(bool isActive)
		{
		}

		[Token(Token = "0x6000ED9")]
		[Address(RVA = "0xE88108", Offset = "0xE88108", VA = "0xE88108")]
		public MenuController()
		{
		}
	}
	[Token(Token = "0x20002CE")]
	public class PanelSelector : MonoBehaviour
	{
		[Token(Token = "0x4000F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject currentPanel;

		[Token(Token = "0x4000F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject currentSubSection;

		[Token(Token = "0x4000F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Sprite activeSection;

		[Token(Token = "0x4000F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Sprite inactiveSection;

		[Token(Token = "0x4000F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool isMainPanel;

		[Token(Token = "0x6000EDA")]
		[Address(RVA = "0xE88118", Offset = "0xE88118", VA = "0xE88118")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EDB")]
		[Address(RVA = "0xE88120", Offset = "0xE88120", VA = "0xE88120")]
		public void SelectSubsection(GameObject subSection)
		{
		}

		[Token(Token = "0x6000EDC")]
		[Address(RVA = "0xE883E4", Offset = "0xE883E4", VA = "0xE883E4")]
		public void SelectPanel(GameObject panel)
		{
		}

		[Token(Token = "0x6000EDD")]
		[Address(RVA = "0xE88278", Offset = "0xE88278", VA = "0xE88278")]
		private static void SetImageColor(GameObject section, Color color)
		{
		}

		[Token(Token = "0x6000EDE")]
		[Address(RVA = "0xE884BC", Offset = "0xE884BC", VA = "0xE884BC")]
		public PanelSelector()
		{
		}
	}
	[Token(Token = "0x20002D0")]
	public class PauseMenu : MonoBehaviour
	{
		[Token(Token = "0x4000F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MenuController menu;

		[Token(Token = "0x6000EE1")]
		[Address(RVA = "0xE88558", Offset = "0xE88558", VA = "0xE88558")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EE2")]
		[Address(RVA = "0xE885CC", Offset = "0xE885CC", VA = "0xE885CC")]
		public void ToggleMenu()
		{
		}

		[Token(Token = "0x6000EE3")]
		[Address(RVA = "0xE88668", Offset = "0xE88668", VA = "0xE88668")]
		public PauseMenu()
		{
		}
	}
	[Token(Token = "0x20002D1")]
	public class Subtitles : MonoBehaviour
	{
		[Token(Token = "0x4000F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Subtitles instance;

		[Token(Token = "0x4000F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject subtitleCanvas;

		[Token(Token = "0x4000F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Sound sound;

		[Token(Token = "0x4000F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private LocalizedString subtitle;

		[Token(Token = "0x6000EE4")]
		[Address(RVA = "0xE88670", Offset = "0xE88670", VA = "0xE88670")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EE5")]
		[Address(RVA = "0xE886C8", Offset = "0xE886C8", VA = "0xE886C8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EE6")]
		[Address(RVA = "0xE88838", Offset = "0xE88838", VA = "0xE88838")]
		public void ShowSubtitles(Sound sound)
		{
		}

		[Token(Token = "0x6000EE7")]
		[Address(RVA = "0xE88940", Offset = "0xE88940", VA = "0xE88940")]
		public Subtitles()
		{
		}
	}
}
namespace UI.VR_Input
{
	[Token(Token = "0x20002D2")]
	public class VRInput : BaseInput
	{
		[Token(Token = "0x4000F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Camera eventCamera;

		[Token(Token = "0x4000F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandInput[] hands;

		[Token(Token = "0x1700018F")]
		public override Vector2 mousePosition
		{
			[Token(Token = "0x6000EE8")]
			[Address(RVA = "0xE88A6C", Offset = "0xE88A6C", VA = "0xE88A6C", Slot = "26")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x6000EE9")]
		[Address(RVA = "0xE88ABC", Offset = "0xE88ABC", VA = "0xE88ABC", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0xE88B24", Offset = "0xE88B24", VA = "0xE88B24", Slot = "25")]
		public override bool GetMouseButton(int button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EEB")]
		[Address(RVA = "0xE88C28", Offset = "0xE88C28", VA = "0xE88C28", Slot = "23")]
		public override bool GetMouseButtonDown(int button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EEC")]
		[Address(RVA = "0xE88D2C", Offset = "0xE88D2C", VA = "0xE88D2C", Slot = "24")]
		public override bool GetMouseButtonUp(int button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EED")]
		[Address(RVA = "0xE88E30", Offset = "0xE88E30", VA = "0xE88E30")]
		public VRInput()
		{
		}
	}
	[Token(Token = "0x20002D4")]
	public class VRPointer : MonoBehaviour
	{
		[Token(Token = "0x4000F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxLength;

		[Token(Token = "0x4000F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EventSystem eventSystem;

		[Token(Token = "0x4000F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public StandaloneInputModule inputModule;

		[Token(Token = "0x4000F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Camera eventCamera;

		[Token(Token = "0x4000F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private LineRenderer lineRenderer;

		[Token(Token = "0x17000190")]
		private PlayerManager player
		{
			[Token(Token = "0x6000EF3")]
			[Address(RVA = "0xE88ED4", Offset = "0xE88ED4", VA = "0xE88ED4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EF4")]
		[Address(RVA = "0xE88F1C", Offset = "0xE88F1C", VA = "0xE88F1C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EF5")]
		[Address(RVA = "0xE890C4", Offset = "0xE890C4", VA = "0xE890C4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EF6")]
		[Address(RVA = "0xE88FBC", Offset = "0xE88FBC", VA = "0xE88FBC")]
		private void SetParent(MovementModeSelector newParent)
		{
		}

		[Token(Token = "0x6000EF7")]
		[Address(RVA = "0xE897D4", Offset = "0xE897D4", VA = "0xE897D4")]
		public VRPointer()
		{
		}
	}
}
namespace UI.Controllers
{
	[Token(Token = "0x20002D6")]
	public class DifficultySettingPanel : MonoBehaviour
	{
		[Token(Token = "0x4000F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SettingElement difficulty;

		[Token(Token = "0x6000EFC")]
		[Address(RVA = "0xE898C0", Offset = "0xE898C0", VA = "0xE898C0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EFD")]
		[Address(RVA = "0xE89A90", Offset = "0xE89A90", VA = "0xE89A90")]
		public DifficultySettingPanel()
		{
		}
	}
	[Token(Token = "0x20002D8")]
	public class ExitPanel : MonoBehaviour
	{
		[Token(Token = "0x6000F00")]
		[Address(RVA = "0xE89AB4", Offset = "0xE89AB4", VA = "0xE89AB4")]
		public void QuitGame()
		{
		}

		[Token(Token = "0x6000F01")]
		[Address(RVA = "0xE89B24", Offset = "0xE89B24", VA = "0xE89B24")]
		public ExitPanel()
		{
		}
	}
	[Token(Token = "0x20002D9")]
	public class LeaderboardPanel : MonoBehaviour
	{
		[StructLayout(3)]
		[Token(Token = "0x20002DA")]
		[CompilerGenerated]
		private struct <Refresh>d__9 : IAsyncStateMachine
		{
			[Token(Token = "0x4000F91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000F92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4000F93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LeaderboardPanel <>4__this;

			[Token(Token = "0x4000F94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <myUpdateId>5__2;

			[Token(Token = "0x4000F95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private TaskAwaiter<(List<RaceRecord>, RaceRecord)> <>u__1;

			[Token(Token = "0x6000F08")]
			[Address(RVA = "0xE8A0CC", Offset = "0xE8A0CC", VA = "0xE8A0CC", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000F09")]
			[Address(RVA = "0xE8A4E0", Offset = "0xE8A4E0", VA = "0xE8A4E0", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x4000F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int numRows;

		[Token(Token = "0x4000F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private TMP_Dropdown missionDropdown;

		[Token(Token = "0x4000F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private TMP_Dropdown modesDropdown;

		[Token(Token = "0x4000F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private TextMeshProUGUI ranks;

		[Token(Token = "0x4000F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private TextMeshProUGUI names;

		[Token(Token = "0x4000F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private TextMeshProUGUI times;

		[Token(Token = "0x4000F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private TextMeshProUGUI personalBestTime;

		[Token(Token = "0x4000F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int updateId;

		[Token(Token = "0x6000F02")]
		[Address(RVA = "0xE89B2C", Offset = "0xE89B2C", VA = "0xE89B2C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F03")]
		[Address(RVA = "0xE89C38", Offset = "0xE89C38", VA = "0xE89C38")]
		[AsyncStateMachine(typeof(<Refresh>d__9))]
		private Task Refresh()
		{
			return null;
		}

		[Token(Token = "0x6000F04")]
		[Address(RVA = "0xE89D28", Offset = "0xE89D28", VA = "0xE89D28")]
		private void SetRecords(List<RaceRecord> records, RaceRecord personalBest)
		{
		}

		[Token(Token = "0x6000F05")]
		[Address(RVA = "0xE8A0B4", Offset = "0xE8A0B4", VA = "0xE8A0B4")]
		public LeaderboardPanel()
		{
		}
	}
	[Token(Token = "0x20002DC")]
	public class MissionPanel : MonoBehaviour
	{
		[Token(Token = "0x4000F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshProUGUI missionText;

		[Token(Token = "0x4000F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject missionDescriptionText;

		[Token(Token = "0x4000F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject specificMissionText;

		[Token(Token = "0x4000F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Button exitMissionButton;

		[Token(Token = "0x6000F0F")]
		[Address(RVA = "0xE8A5C4", Offset = "0xE8A5C4", VA = "0xE8A5C4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F10")]
		[Address(RVA = "0xE8A774", Offset = "0xE8A774", VA = "0xE8A774")]
		public MissionPanel()
		{
		}
	}
	[Token(Token = "0x20002DD")]
	public class PowersPanel : MonoBehaviour
	{
		[Token(Token = "0x4000F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<GameObject> pageVariants;

		[Token(Token = "0x6000F11")]
		[Address(RVA = "0xE8A77C", Offset = "0xE8A77C", VA = "0xE8A77C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F12")]
		[Address(RVA = "0xE8A86C", Offset = "0xE8A86C", VA = "0xE8A86C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F13")]
		[Address(RVA = "0xE8A7CC", Offset = "0xE8A7CC", VA = "0xE8A7CC")]
		public void UpdateIconPanel(int modeIndex)
		{
		}

		[Token(Token = "0x6000F14")]
		[Address(RVA = "0xE8A8BC", Offset = "0xE8A8BC", VA = "0xE8A8BC")]
		public PowersPanel()
		{
		}
	}
	[Token(Token = "0x20002DE")]
	public class SettingElement : MonoBehaviour
	{
		[Token(Token = "0x4000F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TMP_Dropdown dropdown;

		[Token(Token = "0x4000FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Toggle toggle;

		[Token(Token = "0x4000FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Slider slider;

		[Token(Token = "0x6000F15")]
		public void BuildDropdown<T>(T val, Action<T> setter, T[] vals)
		{
		}

		[Token(Token = "0x6000F16")]
		[Address(RVA = "0xE8A8C4", Offset = "0xE8A8C4", VA = "0xE8A8C4")]
		public void BuildToggle(bool val, Action<bool> setter)
		{
		}

		[Token(Token = "0x6000F17")]
		[Address(RVA = "0xE8A9D4", Offset = "0xE8A9D4", VA = "0xE8A9D4")]
		public void BuildSlider(int val, Action<int> setter)
		{
		}

		[Token(Token = "0x6000F18")]
		[Address(RVA = "0xE8AAEC", Offset = "0xE8AAEC", VA = "0xE8AAEC")]
		public void Despawn()
		{
		}

		[Token(Token = "0x6000F19")]
		[Address(RVA = "0xE8AB58", Offset = "0xE8AB58", VA = "0xE8AB58")]
		public SettingElement()
		{
		}
	}
	[Token(Token = "0x20002E2")]
	public class SettingsPanel : MonoBehaviour
	{
		[Token(Token = "0x4000FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Controls")]
		public SettingElement enableArmSwinging;

		[Token(Token = "0x4000FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SettingElement flipHands;

		[Token(Token = "0x4000FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SettingElement turning;

		[Token(Token = "0x4000FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SettingElement snapTurnAngle;

		[Token(Token = "0x4000FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SettingElement smoothTurnSpeed;

		[Token(Token = "0x4000FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SettingElement walkDirection;

		[Token(Token = "0x4000FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public SettingElement swapGripTrigger;

		[Token(Token = "0x4000FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SettingElement swapLightningControls;

		[Token(Token = "0x4000FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Audio")]
		public SettingElement masterVolume;

		[Token(Token = "0x4000FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public SettingElement musicVolume;

		[Token(Token = "0x4000FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public SettingElement soundEffectsVolume;

		[Token(Token = "0x4000FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public SettingElement voiceVolume;

		[Token(Token = "0x4000FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public SettingElement subtitles;

		[Token(Token = "0x4000FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Header("Gameplay")]
		public SettingElement gameMode;

		[Token(Token = "0x4000FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public SettingElement skipTutorial;

		[Token(Token = "0x4000FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public SettingElement difficulty;

		[Token(Token = "0x4000FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public SettingElement fallDamage;

		[Token(Token = "0x4000FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public SettingElement enemiesMul;

		[Token(Token = "0x4000FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public SettingElement enableStreamerCamera;

		[Token(Token = "0x4000FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public SettingElement language;

		[Token(Token = "0x4000FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public SettingElement controllerVibration;

		[Token(Token = "0x4000FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Header("Quality")]
		public SettingElement graphicsQuality;

		[Token(Token = "0x4000FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public SettingElement drawDistance;

		[Token(Token = "0x4000FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public SettingElement physicsQuality;

		[Token(Token = "0x4000FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public SettingElement enableExtraParticles;

		[Token(Token = "0x4000FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public SettingElement enableShadows;

		[Token(Token = "0x4000FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public SettingElement enableFragments;

		[Token(Token = "0x4000FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public SettingElement enableBuildingInteriors;

		[Token(Token = "0x4000FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Header("Extra")]
		public SettingElement season;

		[Token(Token = "0x4000FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public SettingElement physicsScale;

		[Token(Token = "0x4000FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public SettingElement gravityMul;

		[Token(Token = "0x4000FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public SettingElement stableFloor;

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0xE8AC80", Offset = "0xE8AC80", VA = "0xE8AC80")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0xE8BFF4", Offset = "0xE8BFF4", VA = "0xE8BFF4")]
		public SettingsPanel()
		{
		}
	}
	[Token(Token = "0x20002E4")]
	public class SidegradeElement : MonoBehaviour
	{
		[Token(Token = "0x4000FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Sidegrade sidegrade;

		[Token(Token = "0x4000FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject lockedIcon;

		[Token(Token = "0x4000FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject enabledIcon;

		[Token(Token = "0x4000FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject disabledIcon;

		[Token(Token = "0x4000FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject unlockButton;

		[Token(Token = "0x4000FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject disableButton;

		[Token(Token = "0x4000FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject enableButton;

		[Token(Token = "0x4000FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject gearSection;

		[Token(Token = "0x4000FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public TextMeshProUGUI gearText;

		[Token(Token = "0x4000FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Image background;

		[Token(Token = "0x4000FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Image titleBar;

		[Token(Token = "0x4000FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public TextMeshProUGUI descriptionText;

		[Token(Token = "0x17000191")]
		private ProgressionManager progMan
		{
			[Token(Token = "0x6000F42")]
			[Address(RVA = "0xE8C38C", Offset = "0xE8C38C", VA = "0xE8C38C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F43")]
		[Address(RVA = "0xE8C3E0", Offset = "0xE8C3E0", VA = "0xE8C3E0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F44")]
		[Address(RVA = "0xE8C750", Offset = "0xE8C750", VA = "0xE8C750")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F45")]
		[Address(RVA = "0xE8C3E4", Offset = "0xE8C3E4", VA = "0xE8C3E4")]
		private void UpdatePanel()
		{
		}

		[Token(Token = "0x6000F46")]
		[Address(RVA = "0xE8C754", Offset = "0xE8C754", VA = "0xE8C754")]
		public void Unlock()
		{
		}

		[Token(Token = "0x6000F47")]
		[Address(RVA = "0xE8C794", Offset = "0xE8C794", VA = "0xE8C794")]
		public void Disable()
		{
		}

		[Token(Token = "0x6000F48")]
		[Address(RVA = "0xE8C7F0", Offset = "0xE8C7F0", VA = "0xE8C7F0")]
		public void Enable()
		{
		}

		[Token(Token = "0x6000F49")]
		[Address(RVA = "0xE8C89C", Offset = "0xE8C89C", VA = "0xE8C89C")]
		public SidegradeElement()
		{
		}
	}
}
namespace Player
{
	[Token(Token = "0x20002E5")]
	public class ClampMovement : MonoBehaviour
	{
		[Token(Token = "0x4000FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float positionCap;

		[Token(Token = "0x4000FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 positionReset;

		[Token(Token = "0x4000FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float velocityCap;

		[Token(Token = "0x4000FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 velocityReset;

		[Token(Token = "0x4000FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Rigidbody myRigidbody;

		[Token(Token = "0x6000F4A")]
		[Address(RVA = "0xE8C8A4", Offset = "0xE8C8A4", VA = "0xE8C8A4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F4B")]
		[Address(RVA = "0xE8C930", Offset = "0xE8C930", VA = "0xE8C930")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F4C")]
		[Address(RVA = "0xE8CA74", Offset = "0xE8CA74", VA = "0xE8CA74")]
		private static bool IsBad(Vector3 v, float max)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F4D")]
		[Address(RVA = "0xE8CC4C", Offset = "0xE8CC4C", VA = "0xE8CC4C")]
		public ClampMovement()
		{
		}
	}
	[Token(Token = "0x20002E6")]
	public class FlightSpeedParticleController : MonoBehaviour
	{
		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ParticleSystem myParticleSystem;

		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Sound windSound;

		[Token(Token = "0x4000FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float particleSpeedMultiplier;

		[Token(Token = "0x4000FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float particleEmissionMultiplier;

		[Token(Token = "0x4000FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("At what speed do particles start and stop spawning")]
		public float particleSpeedThreshold;

		[Token(Token = "0x6000F4E")]
		[Address(RVA = "0xE8CCC0", Offset = "0xE8CCC0", VA = "0xE8CCC0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F4F")]
		[Address(RVA = "0xE8CEF0", Offset = "0xE8CEF0", VA = "0xE8CEF0")]
		public FlightSpeedParticleController()
		{
		}
	}
	[Token(Token = "0x20002E7")]
	public class PlayerAchievements : MonoBehaviour
	{
		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float recentDistanceTraveled;

		[Token(Token = "0x4000FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float maxSpeed;

		[Token(Token = "0x6000F50")]
		[Address(RVA = "0xE8CF08", Offset = "0xE8CF08", VA = "0xE8CF08")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F51")]
		[Address(RVA = "0xE8D308", Offset = "0xE8D308", VA = "0xE8D308")]
		public PlayerAchievements()
		{
		}
	}
	[Token(Token = "0x20002E8")]
	public class PlayerInputManager : MonoBehaviour
	{
		[Token(Token = "0x20002E9")]
		[CompilerGenerated]
		private sealed class <Start>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000FEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000FEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x17000192")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F58")]
				[Address(RVA = "0xE8DF0C", Offset = "0xE8DF0C", VA = "0xE8DF0C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000193")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F5A")]
				[Address(RVA = "0xE8DF54", Offset = "0xE8DF54", VA = "0xE8DF54", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F55")]
			[Address(RVA = "0xE8D370", Offset = "0xE8D370", VA = "0xE8D370")]
			[DebuggerHidden]
			public <Start>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6000F56")]
			[Address(RVA = "0xE8D964", Offset = "0xE8D964", VA = "0xE8D964", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F57")]
			[Address(RVA = "0xE8D968", Offset = "0xE8D968", VA = "0xE8D968", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F59")]
			[Address(RVA = "0xE8DF14", Offset = "0xE8DF14", VA = "0xE8DF14", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000FE0")]
		private const float TurnJoystickAllowance = 0.6f;

		[Token(Token = "0x4000FE1")]
		private const float MenuHoldDelay = 0.2f;

		[Token(Token = "0x4000FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool jump;

		[Token(Token = "0x4000FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool snapTurnLeft;

		[Token(Token = "0x4000FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool snapTurnRight;

		[Token(Token = "0x4000FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector2 walk;

		[Token(Token = "0x4000FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool modeSelectLeft;

		[Token(Token = "0x4000FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool modeSelectRight;

		[Token(Token = "0x4000FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		public bool menu;

		[Token(Token = "0x4000FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float leftMenuDownTime;

		[Token(Token = "0x4000FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float rightMenuDownTime;

		[Token(Token = "0x4000FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool prevTurnHandUp;

		[Token(Token = "0x4000FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool prevTurnHandLeft;

		[Token(Token = "0x4000FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool prevTurnHandRight;

		[Token(Token = "0x6000F52")]
		[Address(RVA = "0xE8D310", Offset = "0xE8D310", VA = "0xE8D310")]
		[IteratorStateMachine(typeof(<Start>d__14))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6000F53")]
		[Address(RVA = "0xE8D398", Offset = "0xE8D398", VA = "0xE8D398")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F54")]
		[Address(RVA = "0xE8D95C", Offset = "0xE8D95C", VA = "0xE8D95C")]
		public PlayerInputManager()
		{
		}
	}
	[Token(Token = "0x20002EA")]
	public class PlayerManager : MonoBehaviour
	{
		[Token(Token = "0x4000FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static PlayerManager instance;

		[Token(Token = "0x4000FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody myRigidbody;

		[Token(Token = "0x4000FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CapsuleCollider myCollider;

		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Camera myCamera;

		[Token(Token = "0x4000FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform trackerOffsets;

		[Token(Token = "0x4000FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform head;

		[Token(Token = "0x4000FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform neck;

		[Token(Token = "0x4000FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public MovementModeSelector leftMode;

		[Token(Token = "0x4000FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public MovementModeSelector rightMode;

		[Token(Token = "0x4000FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ControllerInputHistory leftInput;

		[Token(Token = "0x4000FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public ControllerInputHistory rightInput;

		[Token(Token = "0x4000FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public HandColliderManager leftCollider;

		[Token(Token = "0x4000FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public HandColliderManager rightCollider;

		[Token(Token = "0x4000FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public SpinePoser spine;

		[Token(Token = "0x4000FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public PlayerInputManager inputManager;

		[Token(Token = "0x4000FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public PlayerSettingsManager settingsManager;

		[Token(Token = "0x4001000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public ProgressionManager progressionManager;

		[Token(Token = "0x4001001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public PlayerSizeManager sizeManager;

		[Token(Token = "0x4001002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public PlayerSoundManager soundManager;

		[Token(Token = "0x4001003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public CollisionEffect collisionEffect;

		[Token(Token = "0x4001004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public TelekinesisHover telekinesisHover;

		[Token(Token = "0x4001005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Health health;

		[Token(Token = "0x4001006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public MeshRenderer vignette;

		[Token(Token = "0x4001007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public PlayerHealth playerHealth;

		[Token(Token = "0x4001008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public CrashDamage2 crashDamage;

		[Token(Token = "0x17000194")]
		public bool InMenu
		{
			[Token(Token = "0x6000F5B")]
			[Address(RVA = "0xE8975C", Offset = "0xE8975C", VA = "0xE8975C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000195")]
		public bool CanMove
		{
			[Token(Token = "0x6000F5C")]
			[Address(RVA = "0xE8DF5C", Offset = "0xE8DF5C", VA = "0xE8DF5C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000196")]
		public new GameObject gameObject
		{
			[Token(Token = "0x6000F5D")]
			[Address(RVA = "0xE8E098", Offset = "0xE8E098", VA = "0xE8E098")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000197")]
		public new Transform transform
		{
			[Token(Token = "0x6000F5E")]
			[Address(RVA = "0xE876A4", Offset = "0xE876A4", VA = "0xE876A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F5F")]
		[Address(RVA = "0xE8E0B4", Offset = "0xE8E0B4", VA = "0xE8E0B4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F60")]
		[Address(RVA = "0xE8E19C", Offset = "0xE8E19C", VA = "0xE8E19C")]
		public void EmpHit(float duration, bool bothHands)
		{
		}

		[Token(Token = "0x6000F61")]
		[Address(RVA = "0xE8E204", Offset = "0xE8E204", VA = "0xE8E204")]
		public Vector3 IrlPos(Vector3 worldPos)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F62")]
		[Address(RVA = "0xE8E220", Offset = "0xE8E220", VA = "0xE8E220")]
		public bool OnGround()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F63")]
		[Address(RVA = "0xE8E3B0", Offset = "0xE8E3B0", VA = "0xE8E3B0")]
		public Vector3 WorldPos(Vector3 irlPos)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F64")]
		[Address(RVA = "0xE8E3CC", Offset = "0xE8E3CC", VA = "0xE8E3CC")]
		public PlayerManager()
		{
		}
	}
	[Token(Token = "0x20002EB")]
	public class PlayerSettingsManager : MonoBehaviour, IDamageModifier
	{
		[Token(Token = "0x4001009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform stableFloor;

		[Token(Token = "0x400100A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioMixer sound;

		[Token(Token = "0x400100B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Camera streamerCamera;

		[Token(Token = "0x400100C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject snowParticles;

		[Token(Token = "0x400100D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 initialFloorScale;

		[Token(Token = "0x400100E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string prevCelValue;

		[Token(Token = "0x400100F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private LanguageSetting? previousLanguageSetting;

		[Token(Token = "0x4001010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool previousFlipHands;

		[Token(Token = "0x4001011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private SeasonSetting? previousSeason;

		[Token(Token = "0x4001012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private GraphicsQualitySetting? previousGraphicsQuality;

		[Token(Token = "0x6000F65")]
		[Address(RVA = "0xE8E3D4", Offset = "0xE8E3D4", VA = "0xE8E3D4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F66")]
		[Address(RVA = "0xE8E4C4", Offset = "0xE8E4C4", VA = "0xE8E4C4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F67")]
		[Address(RVA = "0xE8EE3C", Offset = "0xE8EE3C", VA = "0xE8EE3C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F68")]
		[Address(RVA = "0xE8ED9C", Offset = "0xE8ED9C", VA = "0xE8ED9C")]
		private float LinearToDecibel(float linear)
		{
			return default(float);
		}

		[Token(Token = "0x6000F69")]
		[Address(RVA = "0xE8EDD0", Offset = "0xE8EDD0", VA = "0xE8EDD0")]
		public float DifficultyMul()
		{
			return default(float);
		}

		[Token(Token = "0x6000F6A")]
		[Address(RVA = "0xE8EEF4", Offset = "0xE8EEF4", VA = "0xE8EEF4", Slot = "4")]
		public void ModifyDamage(ref Damage damage)
		{
		}

		[Token(Token = "0x6000F6B")]
		[Address(RVA = "0xE8EF1C", Offset = "0xE8EF1C", VA = "0xE8EF1C")]
		public PlayerSettingsManager()
		{
		}
	}
	[Token(Token = "0x20002EC")]
	public class PlayerSizeManager : MonoBehaviour, IDamageModifier
	{
		[Token(Token = "0x4001013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float currentSize;

		[Token(Token = "0x4001014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float baseMass;

		[Token(Token = "0x4001015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float cameraNearClip;

		[Token(Token = "0x4001016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float streamerCameraNearClip;

		[Token(Token = "0x17000198")]
		public float CurrentSize
		{
			[Token(Token = "0x6000F6D")]
			[Address(RVA = "0xE8F070", Offset = "0xE8F070", VA = "0xE8F070")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F6E")]
			[Address(RVA = "0xE8F078", Offset = "0xE8F078", VA = "0xE8F078")]
			set
			{
			}
		}

		[Token(Token = "0x17000199")]
		public float GorillaHeightOffset
		{
			[Token(Token = "0x6000F6F")]
			[Address(RVA = "0xE8F494", Offset = "0xE8F494", VA = "0xE8F494")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700019A")]
		public float MassScale
		{
			[Token(Token = "0x6000F70")]
			[Address(RVA = "0xE8F488", Offset = "0xE8F488", VA = "0xE8F488")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700019B")]
		public float MovementScale
		{
			[Token(Token = "0x6000F71")]
			[Address(RVA = "0xE8F4CC", Offset = "0xE8F4CC", VA = "0xE8F4CC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700019C")]
		public float EMPScale
		{
			[Token(Token = "0x6000F72")]
			[Address(RVA = "0xE8F4E8", Offset = "0xE8F4E8", VA = "0xE8F4E8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000F6C")]
		[Address(RVA = "0xE8EF24", Offset = "0xE8EF24", VA = "0xE8EF24")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F73")]
		[Address(RVA = "0xE8F518", Offset = "0xE8F518", VA = "0xE8F518", Slot = "4")]
		public void ModifyDamage(ref Damage damage)
		{
		}

		[Token(Token = "0x6000F74")]
		[Address(RVA = "0xE8F554", Offset = "0xE8F554", VA = "0xE8F554")]
		public PlayerSizeManager()
		{
		}
	}
	[Token(Token = "0x20002ED")]
	public class PlayerSoundManager : MonoBehaviour
	{
		[Token(Token = "0x4001017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Sound checkScreenSound;

		[Token(Token = "0x4001018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Sound timeDilationSound;

		[Token(Token = "0x6000F75")]
		[Address(RVA = "0xE8F564", Offset = "0xE8F564", VA = "0xE8F564")]
		public PlayerSoundManager()
		{
		}
	}
	[Token(Token = "0x20002EE")]
	public class PlayerWantedUI : MonoBehaviour
	{
		[Token(Token = "0x4001019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject parent;

		[Token(Token = "0x400101A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MeshRenderer[] stars;

		[Token(Token = "0x400101B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color offColor;

		[Token(Token = "0x400101C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color onColor;

		[Token(Token = "0x6000F76")]
		[Address(RVA = "0xE8F56C", Offset = "0xE8F56C", VA = "0xE8F56C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F77")]
		[Address(RVA = "0xE8F70C", Offset = "0xE8F70C", VA = "0xE8F70C")]
		public PlayerWantedUI()
		{
		}
	}
	[Token(Token = "0x20002EF")]
	public class PowerUnlockEffects : MonoBehaviour
	{
		[Token(Token = "0x400101D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject iceUnlockEffectPrefab;

		[Token(Token = "0x400101E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject wingUnlockEffectPrefab;

		[Token(Token = "0x400101F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject clawUnlockEffectPrefab;

		[Token(Token = "0x4001020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject lightningUnlockEffectPrefab;

		[Token(Token = "0x4001021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject blackHoleUnlockEffectPrefab;

		[Token(Token = "0x4001022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject speedUnlockEffectPrefab;

		[Token(Token = "0x4001023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject blinkUnlockEffectPrefab;

		[Token(Token = "0x4001024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject telekinesisUnlockEffectPrefab;

		[Token(Token = "0x4001025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject portalUnlockEffectPrefab;

		[Token(Token = "0x4001026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject giantUnlockEffectPrefab;

		[Token(Token = "0x4001027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<GameObject> powerUnlockEffects;

		[Token(Token = "0x6000F78")]
		[Address(RVA = "0xE8F728", Offset = "0xE8F728", VA = "0xE8F728")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F79")]
		[Address(RVA = "0xE8FC10", Offset = "0xE8FC10", VA = "0xE8FC10")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F7A")]
		[Address(RVA = "0xE90260", Offset = "0xE90260", VA = "0xE90260")]
		public PowerUnlockEffects()
		{
		}
	}
	[Token(Token = "0x20002F0")]
	public class ProgressionManager : MonoBehaviour, IDisposable
	{
		[Token(Token = "0x20002F1")]
		private class Record
		{
			[Token(Token = "0x170001A1")]
			internal int Gears
			{
				[Token(Token = "0x6000F8D")]
				[Address(RVA = "0xE90CB0", Offset = "0xE90CB0", VA = "0xE90CB0")]
				[CompilerGenerated]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x170001A2")]
			internal DateTimeOffset StartTime
			{
				[Token(Token = "0x6000F8E")]
				[Address(RVA = "0xE90CB8", Offset = "0xE90CB8", VA = "0xE90CB8")]
				[CompilerGenerated]
				get
				{
					return default(DateTimeOffset);
				}
			}

			[Token(Token = "0x170001A3")]
			internal DateTimeOffset EndTime
			{
				[Token(Token = "0x6000F8F")]
				[Address(RVA = "0xE90CC4", Offset = "0xE90CC4", VA = "0xE90CC4")]
				[CompilerGenerated]
				get
				{
					return default(DateTimeOffset);
				}
			}

			[Token(Token = "0x6000F8C")]
			[Address(RVA = "0xE90934", Offset = "0xE90934", VA = "0xE90934")]
			internal Record(int gears, DateTimeOffset startTime, DateTimeOffset endTime)
			{
			}

			[Token(Token = "0x6000F90")]
			[Address(RVA = "0xE90898", Offset = "0xE90898", VA = "0xE90898")]
			internal Record AddGears(int quantity, DateTimeOffset endTime)
			{
				return null;
			}

			[Token(Token = "0x6000F91")]
			[Address(RVA = "0xE90CD0", Offset = "0xE90CD0", VA = "0xE90CD0", Slot = "3")]
			public override string ToString()
			{
				return null;
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20002F2")]
		[CompilerGenerated]
		private struct <Start>d__14 : IAsyncStateMachine
		{
			[Token(Token = "0x4001031")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001032")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncVoidMethodBuilder <>t__builder;

			[Token(Token = "0x4001033")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ProgressionManager <>4__this;

			[Token(Token = "0x4001034")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private TaskAwaiter <>u__1;

			[Token(Token = "0x6000F92")]
			[Address(RVA = "0xE90DA8", Offset = "0xE90DA8", VA = "0xE90DA8", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000F93")]
			[Address(RVA = "0xE90F30", Offset = "0xE90F30", VA = "0xE90F30", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20002F3")]
		[CompilerGenerated]
		private struct <SendScoreAsync>d__22 : IAsyncStateMachine
		{
			[Token(Token = "0x4001035")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001036")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4001037")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ProgressionManager <>4__this;

			[Token(Token = "0x4001038")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private TaskAwaiter <>u__1;

			[Token(Token = "0x6000F94")]
			[Address(RVA = "0xE90F3C", Offset = "0xE90F3C", VA = "0xE90F3C", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000F95")]
			[Address(RVA = "0xE91354", Offset = "0xE91354", VA = "0xE91354", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x4001028")]
		private const int GearsPerMode = 10;

		[Token(Token = "0x4001029")]
		private const int NumModes = 12;

		[NonSerialized]
		[Token(Token = "0x400102A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BanMovementModes banMovementModes;

		[Token(Token = "0x400102B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ApiClient apiClient;

		[Token(Token = "0x400102C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly CancellationTokenSource destroyTokenSource;

		[Token(Token = "0x400102D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[CanBeNull]
		private Record nextRecord;

		[Token(Token = "0x1700019D")]
		private static List<Sidegrade> sidegradesUnlocked
		{
			[Token(Token = "0x6000F7B")]
			[Address(RVA = "0xE90268", Offset = "0xE90268", VA = "0xE90268")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019E")]
		private static int TotalGears
		{
			[Token(Token = "0x6000F7C")]
			[Address(RVA = "0xE90288", Offset = "0xE90288", VA = "0xE90288")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700019F")]
		private static int AvailableGears
		{
			[Token(Token = "0x6000F7D")]
			[Address(RVA = "0xE902A8", Offset = "0xE902A8", VA = "0xE902A8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001A0")]
		public static int GearsToUnlockNextSidegrade
		{
			[Token(Token = "0x6000F7E")]
			[Address(RVA = "0xE902C8", Offset = "0xE902C8", VA = "0xE902C8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000F7F")]
		[Address(RVA = "0xE90318", Offset = "0xE90318", VA = "0xE90318")]
		[AsyncStateMachine(typeof(<Start>d__14))]
		public void Start()
		{
		}

		[Token(Token = "0x6000F80")]
		[Address(RVA = "0xE903D0", Offset = "0xE903D0", VA = "0xE903D0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F81")]
		[Address(RVA = "0xE90400", Offset = "0xE90400", VA = "0xE90400", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000F82")]
		[Address(RVA = "0xE9041C", Offset = "0xE9041C", VA = "0xE9041C")]
		public bool IsModeAvailable(int mode)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F83")]
		[Address(RVA = "0xE90228", Offset = "0xE90228", VA = "0xE90228")]
		public static bool IsModeUnlockedStoryMode(int mode)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F84")]
		[Address(RVA = "0xE904FC", Offset = "0xE904FC", VA = "0xE904FC")]
		public bool IsSidegradeUnlocked(Sidegrade sidegrade)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F85")]
		[Address(RVA = "0xE905A0", Offset = "0xE905A0", VA = "0xE905A0")]
		public static bool IsSidegradeActive(Sidegrade sidegrade)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F86")]
		[Address(RVA = "0xE90648", Offset = "0xE90648", VA = "0xE90648")]
		public void CollectGear()
		{
		}

		[Token(Token = "0x6000F87")]
		[Address(RVA = "0xE90984", Offset = "0xE90984", VA = "0xE90984")]
		[AsyncStateMachine(typeof(<SendScoreAsync>d__22))]
		private Task SendScoreAsync()
		{
			return null;
		}

		[Token(Token = "0x6000F88")]
		[Address(RVA = "0xE90A70", Offset = "0xE90A70", VA = "0xE90A70")]
		public void EnsureModeUnlocked(int mode)
		{
		}

		[Token(Token = "0x6000F89")]
		[Address(RVA = "0xE90B04", Offset = "0xE90B04", VA = "0xE90B04")]
		public bool CanUnlockSidegrade()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F8A")]
		[Address(RVA = "0xE90B30", Offset = "0xE90B30", VA = "0xE90B30")]
		public void UnlockSidegrade(Sidegrade sidegrade)
		{
		}

		[Token(Token = "0x6000F8B")]
		[Address(RVA = "0xE90C00", Offset = "0xE90C00", VA = "0xE90C00")]
		public ProgressionManager()
		{
		}
	}
	[Token(Token = "0x20002F4")]
	public class SetUpdatePose : MonoBehaviour
	{
		[Token(Token = "0x6000F96")]
		[Address(RVA = "0xE91360", Offset = "0xE91360", VA = "0xE91360")]
		public SetUpdatePose()
		{
		}
	}
	[Token(Token = "0x20002F5")]
	public class SlowMotionController : MonoBehaviour
	{
		[Token(Token = "0x20002F6")]
		[CompilerGenerated]
		private sealed class <TemporarySlowmo>d__28 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001049")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400104A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400104B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SlowMotionController <>4__this;

			[Token(Token = "0x170001A5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000FAB")]
				[Address(RVA = "0xE91E7C", Offset = "0xE91E7C", VA = "0xE91E7C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001A6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000FAD")]
				[Address(RVA = "0xE91EC4", Offset = "0xE91EC4", VA = "0xE91EC4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000FA8")]
			[Address(RVA = "0xE91B1C", Offset = "0xE91B1C", VA = "0xE91B1C")]
			[DebuggerHidden]
			public <TemporarySlowmo>d__28(int <>1__state)
			{
			}

			[Token(Token = "0x6000FA9")]
			[Address(RVA = "0xE91D64", Offset = "0xE91D64", VA = "0xE91D64", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000FAA")]
			[Address(RVA = "0xE91D68", Offset = "0xE91D68", VA = "0xE91D68", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000FAC")]
			[Address(RVA = "0xE91E84", Offset = "0xE91E84", VA = "0xE91E84", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static SlowMotionController instance;

		[Token(Token = "0x400103A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("When this is active in the hierarchy, updates the timescale to be pausedTimeScale")]
		[SerializeField]
		[Header("Pausing")]
		private float pausedTimeScale;

		[Token(Token = "0x400103B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Header("Mode Switching")]
		public bool slowmoOnModeSwitch;

		[Token(Token = "0x400103C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float modeSwitchTimeScale;

		[Token(Token = "0x400103D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("How long to slow down before returning to full speed")]
		[SerializeField]
		private float modeSwitchDuration;

		[Token(Token = "0x400103E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Should there be a smooth transition back to the normal timescale?")]
		public bool easeOutModeSwitchSlowmo;

		[Token(Token = "0x400103F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool canStartTemporarySlowMo;

		[NonSerialized]
		[Token(Token = "0x4001040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float maxSlowdown;

		[Token(Token = "0x4001041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Coroutine slowmoCorouitine;

		[Token(Token = "0x4001042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float slowmoCoroutineDuration;

		[Token(Token = "0x4001043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float slowmoCoroutineStartTime;

		[Token(Token = "0x4001044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float slowmoCoroutineStartTimeScale;

		[Token(Token = "0x4001045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool inputFocusLost;

		[Token(Token = "0x4001046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		private bool hmdUnmounted;

		[Token(Token = "0x4001047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		private bool applicationFocusLost;

		[Token(Token = "0x4001048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
		private bool applicationPaused;

		[Token(Token = "0x170001A4")]
		public bool gamePaused
		{
			[Token(Token = "0x6000F97")]
			[Address(RVA = "0xE91368", Offset = "0xE91368", VA = "0xE91368")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000F98")]
		[Address(RVA = "0xE91398", Offset = "0xE91398", VA = "0xE91398")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F99")]
		[Address(RVA = "0xE915C8", Offset = "0xE915C8", VA = "0xE915C8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F9A")]
		[Address(RVA = "0xE91630", Offset = "0xE91630", VA = "0xE91630")]
		private void OnApplicationFocus(bool focusStatus)
		{
		}

		[Token(Token = "0x6000F9B")]
		[Address(RVA = "0xE9174C", Offset = "0xE9174C", VA = "0xE9174C")]
		private void OnApplicationPause(bool pauseStatus)
		{
		}

		[Token(Token = "0x6000F9C")]
		[Address(RVA = "0xE9181C", Offset = "0xE9181C", VA = "0xE9181C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000F9D")]
		[Address(RVA = "0xE91714", Offset = "0xE91714", VA = "0xE91714")]
		private void UpdateTimeScale()
		{
		}

		[Token(Token = "0x6000F9E")]
		[Address(RVA = "0xE91928", Offset = "0xE91928", VA = "0xE91928")]
		public void RequestSlowdown(float slowdown)
		{
		}

		[Token(Token = "0x6000F9F")]
		[Address(RVA = "0xE9193C", Offset = "0xE9193C", VA = "0xE9193C")]
		public void RequestSpeedPowerSlowdown(float slowdown)
		{
		}

		[Token(Token = "0x6000FA0")]
		[Address(RVA = "0xE91A14", Offset = "0xE91A14", VA = "0xE91A14")]
		public void StartModeSwitchSlowmo()
		{
		}

		[Token(Token = "0x6000FA1")]
		[Address(RVA = "0xE91A28", Offset = "0xE91A28", VA = "0xE91A28")]
		private void StartTemporarySlowmo(float startTimeScale, float duration)
		{
		}

		[Token(Token = "0x6000FA2")]
		[Address(RVA = "0xE91AA8", Offset = "0xE91AA8", VA = "0xE91AA8")]
		[IteratorStateMachine(typeof(<TemporarySlowmo>d__28))]
		private IEnumerator TemporarySlowmo()
		{
			return null;
		}

		[Token(Token = "0x6000FA3")]
		[Address(RVA = "0xE91B44", Offset = "0xE91B44", VA = "0xE91B44")]
		public SlowMotionController()
		{
		}
	}
}
namespace Player.Utility
{
	[Token(Token = "0x20002F7")]
	public class BanMovementModes : MonoBehaviour
	{
		[Token(Token = "0x400104C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int[] toAllow;

		[Token(Token = "0x6000FAE")]
		[Address(RVA = "0xE91ECC", Offset = "0xE91ECC", VA = "0xE91ECC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000FAF")]
		[Address(RVA = "0xE91F30", Offset = "0xE91F30", VA = "0xE91F30")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000FB0")]
		[Address(RVA = "0xE91F90", Offset = "0xE91F90", VA = "0xE91F90")]
		public void SetByAllowedModes()
		{
		}

		[Token(Token = "0x6000FB1")]
		[Address(RVA = "0xE92194", Offset = "0xE92194", VA = "0xE92194")]
		public BanMovementModes()
		{
		}
	}
	[Token(Token = "0x20002F8")]
	public enum ControllerType
	{
		[Token(Token = "0x400104E")]
		Other,
		[Token(Token = "0x400104F")]
		Index,
		[Token(Token = "0x4001050")]
		Oculus,
		[Token(Token = "0x4001051")]
		Vive,
		[Token(Token = "0x4001052")]
		WindowsMR
	}
	[Token(Token = "0x20002F9")]
	public struct ControllerState
	{
		[Token(Token = "0x4001053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool connected;

		[Token(Token = "0x4001054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ControllerType type;

		[Token(Token = "0x4001055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool click;

		[Token(Token = "0x4001056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 devicePosition;

		[Token(Token = "0x4001057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 deviceVelocity;

		[Token(Token = "0x4001058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 deviceAngularVelocity;

		[Token(Token = "0x4001059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool gripButton;

		[Token(Token = "0x400105A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float grip;

		[Token(Token = "0x400105B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool menuButton;

		[Token(Token = "0x400105C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool primaryButton;

		[Token(Token = "0x400105D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		public bool secondaryButton;

		[Token(Token = "0x400105E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
		public bool triggerButton;

		[Token(Token = "0x400105F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float trigger;

		[Token(Token = "0x4001060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector2 primary2DAxis;

		[Token(Token = "0x4001061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool primary2DAxisClick;

		[Token(Token = "0x4001062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool primary2DAxisTouch;

		[Token(Token = "0x4001063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Vector2 secondary2DAxis;

		[Token(Token = "0x4001064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool secondary2DAxisClick;

		[Token(Token = "0x4001065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		public bool secondary2DAxisTouch;

		[Token(Token = "0x4001066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<InputFeatureUsage> featureUsages;

		[Token(Token = "0x6000FB2")]
		[Address(RVA = "0xE9219C", Offset = "0xE9219C", VA = "0xE9219C")]
		public ControllerState(List<InputFeatureUsage> featureUsages)
		{
		}
	}
	[Token(Token = "0x20002FA")]
	public class ControllerInputHistory : MonoBehaviour
	{
		[Token(Token = "0x4001067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public XRNode xrNode;

		[Token(Token = "0x4001068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ControllerState current;

		[Token(Token = "0x4001069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float lastErrorMessageTime;

		[Token(Token = "0x400106A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public ControllerState previous;

		[Token(Token = "0x6000FB3")]
		[Address(RVA = "0xE921B8", Offset = "0xE921B8", VA = "0xE921B8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000FB4")]
		[Address(RVA = "0xE92760", Offset = "0xE92760", VA = "0xE92760")]
		private InputDevice? GetDevice()
		{
			return null;
		}

		[Token(Token = "0x6000FB5")]
		[Address(RVA = "0xE9293C", Offset = "0xE9293C", VA = "0xE9293C")]
		public ControllerInputHistory()
		{
		}
	}
	[Token(Token = "0x20002FB")]
	public class FollowController : MonoBehaviour
	{
		[Token(Token = "0x400106B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform toFollow;

		[Token(Token = "0x400106C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ConfigurableJoint joint;

		[Token(Token = "0x400106D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Rigidbody player;

		[Token(Token = "0x400106E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool forceMatchRotation;

		[Token(Token = "0x400106F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float resetDistance;

		[Token(Token = "0x4001070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool firstUpdate;

		[Token(Token = "0x4001071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 prevPosition;

		[Token(Token = "0x4001072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float maxForceX;

		[Token(Token = "0x4001073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float maxForceY;

		[Token(Token = "0x4001074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float maxForceZ;

		[Token(Token = "0x4001075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float maxForceSlerp;

		[Token(Token = "0x6000FB6")]
		[Address(RVA = "0xE92944", Offset = "0xE92944", VA = "0xE92944")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FB7")]
		[Address(RVA = "0xE92B64", Offset = "0xE92B64", VA = "0xE92B64")]
		private void UpdateDriveMaxForces()
		{
		}

		[Token(Token = "0x6000FB8")]
		[Address(RVA = "0xE92D50", Offset = "0xE92D50", VA = "0xE92D50")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000FB9")]
		[Address(RVA = "0xE9324C", Offset = "0xE9324C", VA = "0xE9324C")]
		public FollowController()
		{
		}
	}
	[Token(Token = "0x20002FC")]
	public struct GrabbedObject
	{
		[Token(Token = "0x4001076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Collider collider;

		[Token(Token = "0x4001077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private Vector3 localPos;

		[Token(Token = "0x4001078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Vector3 localNormal;

		[Token(Token = "0x4001079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool hasRigidbody;

		[Token(Token = "0x400107A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Rigidbody rigidbody;

		[Token(Token = "0x170001A7")]
		public bool Destroyed
		{
			[Token(Token = "0x6000FBA")]
			[Address(RVA = "0xE93264", Offset = "0xE93264", VA = "0xE93264")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001A8")]
		public Vector3 GrabPos
		{
			[Token(Token = "0x6000FBB")]
			[Address(RVA = "0xE932C4", Offset = "0xE932C4", VA = "0xE932C4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170001A9")]
		public float InvMass
		{
			[Token(Token = "0x6000FBC")]
			[Address(RVA = "0xE932F8", Offset = "0xE932F8", VA = "0xE932F8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001AA")]
		public Vector3 Normal
		{
			[Token(Token = "0x6000FBD")]
			[Address(RVA = "0xE93330", Offset = "0xE93330", VA = "0xE93330")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170001AB")]
		public Quaternion Rotation
		{
			[Token(Token = "0x6000FBE")]
			[Address(RVA = "0xE93364", Offset = "0xE93364", VA = "0xE93364")]
			get
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x170001AC")]
		public Vector3 Velocity
		{
			[Token(Token = "0x6000FBF")]
			[Address(RVA = "0xE9338C", Offset = "0xE9338C", VA = "0xE9338C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170001AD")]
		public GrabResistance resistances
		{
			[Token(Token = "0x6000FC0")]
			[Address(RVA = "0xE933F0", Offset = "0xE933F0", VA = "0xE933F0")]
			[CompilerGenerated]
			readonly get
			{
				return null;
			}
			[Token(Token = "0x6000FC1")]
			[Address(RVA = "0xE933F8", Offset = "0xE933F8", VA = "0xE933F8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000FC2")]
		[Address(RVA = "0xE93400", Offset = "0xE93400", VA = "0xE93400")]
		public void AddForce(Vector3 force, ForceMode forceMode = ForceMode.Force)
		{
		}

		[Token(Token = "0x6000FC3")]
		[Address(RVA = "0xE93484", Offset = "0xE93484", VA = "0xE93484")]
		public static GrabbedObject FromCollision(Transform self, Collision collision)
		{
			return default(GrabbedObject);
		}

		[Token(Token = "0x6000FC4")]
		[Address(RVA = "0xE93660", Offset = "0xE93660", VA = "0xE93660")]
		public static GrabbedObject FromRaycast(RaycastHit hit)
		{
			return default(GrabbedObject);
		}
	}
	[Token(Token = "0x20002FD")]
	public class GrabResistance : MonoBehaviour
	{
		[Token(Token = "0x400107C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool onlyResistTethersToStatic;

		[Token(Token = "0x400107D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float tetherBreakTimeMin;

		[Token(Token = "0x400107E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float tetherBreakTimeMax;

		[Token(Token = "0x6000FC5")]
		[Address(RVA = "0xE93810", Offset = "0xE93810", VA = "0xE93810")]
		public float GetTetherBreakTime()
		{
			return default(float);
		}

		[Token(Token = "0x6000FC6")]
		[Address(RVA = "0xE9381C", Offset = "0xE9381C", VA = "0xE9381C")]
		public bool ShouldResistTethersTo(GrabbedObject grabbedObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FC7")]
		[Address(RVA = "0xE93848", Offset = "0xE93848", VA = "0xE93848")]
		public GrabResistance()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002FE")]
	public enum HandInput
	{
		[Token(Token = "0x4001080")]
		LEFT,
		[Token(Token = "0x4001081")]
		RIGHT
	}
	[Token(Token = "0x20002FF")]
	public static class HandInputExtensions
	{
		[Token(Token = "0x6000FC8")]
		[Address(RVA = "0xE93864", Offset = "0xE93864", VA = "0xE93864")]
		public static bool IsLeft(this HandInput self)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FC9")]
		[Address(RVA = "0xE93870", Offset = "0xE93870", VA = "0xE93870")]
		private static ControllerInputHistory Hand(this HandInput self)
		{
			return null;
		}

		[Token(Token = "0x6000FCA")]
		[Address(RVA = "0xE938D8", Offset = "0xE938D8", VA = "0xE938D8")]
		public static bool GetClick(this HandInput self)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FCB")]
		[Address(RVA = "0xE938F4", Offset = "0xE938F4", VA = "0xE938F4")]
		public static bool GetClickDown(this HandInput self)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FCC")]
		[Address(RVA = "0xE93938", Offset = "0xE93938", VA = "0xE93938")]
		public static bool GetClickUp(this HandInput self)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FCD")]
		[Address(RVA = "0xE9397C", Offset = "0xE9397C", VA = "0xE9397C")]
		public static ControllerType GetControllerType(this HandInput self)
		{
			return default(ControllerType);
		}

		[Token(Token = "0x6000FCE")]
		[Address(RVA = "0xE93998", Offset = "0xE93998", VA = "0xE93998")]
		public static Vector3 GetDeviceAngularVelocity(this HandInput self)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FCF")]
		[Address(RVA = "0xE939B8", Offset = "0xE939B8", VA = "0xE939B8")]
		public static Vector3 GetDevicePosition(this HandInput self)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FD0")]
		[Address(RVA = "0xE939D8", Offset = "0xE939D8", VA = "0xE939D8")]
		public static Vector3 GetDeviceVelocity(this HandInput self)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FD1")]
		[Address(RVA = "0xE939F8", Offset = "0xE939F8", VA = "0xE939F8")]
		public static bool GetGripButton(this HandInput self)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FD2")]
		[Address(RVA = "0xE93A14", Offset = "0xE93A14", VA = "0xE93A14")]
		public static bool GetGripButtonDown(this HandInput self)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0xE93A58", Offset = "0xE93A58", VA = "0xE93A58")]
		public static bool GetGripButtonUp(this HandInput self)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FD4")]
		[Address(RVA = "0xE93A9C", Offset = "0xE93A9C", VA = "0xE93A9C")]
		public static float GetGrip(this HandInput self)
		{
			return default(float);
		}

		[Token(Token = "0x6000FD5")]
		[Address(RVA = "0xE93AB8", Offset = "0xE93AB8", VA = "0xE93AB8")]
		public static bool GetMenuButton(this HandInput self)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FD6")]
		[Address(RVA = "0xE93AD4", Offset = "0xE93AD4", VA = "0xE93AD4")]
		public static bool GetMenuButtonDown(this HandInput self)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FD7")]
		[Address(RVA = "0xE93B18", Offset = "0xE93B18", VA = "0xE93B18")]
		public static bool GetMenuButtonUp(this HandInput self)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FD8")]
		[Address(RVA = "0xE93B5C", Offset = "0xE93B5C", VA = "0xE93B5C")]
		public static bool GetPrimaryButton(this HandInput self)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FD9")]
		[Address(RVA = "0xE93B78", Offset = "0xE93B78", VA = "0xE93B78")]
		public static bool GetPrimaryButtonDown(this HandInput self)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FDA")]
		[Address(RVA = "0xE93BBC", Offset = "0xE93BBC", VA = "0xE93BBC")]
		public static bool GetPrimaryButtonUp(this HandInput self)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FDB")]
		[Address(RVA = "0xE93C00", Offset = "0xE93C00", VA = "0xE93C00")]
		public static bool GetSecondaryButton(this HandInput self)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FDC")]
		[Address(RVA = "0xE93C1C", Offset = "0xE93C1C", VA = "0xE93C1C")]
		public static bool GetSecondaryButtonDown(this HandInput self)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FDD")]
		[Address(RVA = "0xE93C60", Offset = "0xE93C60", VA = "0xE93C60")]
		public static bool GetSecondaryButtonUp(this HandInput self)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FDE")]
		[Address(RVA = "0xE93CA4", Offset = "0xE93CA4", VA = "0xE93CA4")]
		public static bool GetTriggerButton(this HandInput self)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FDF")]
		[Address(RVA = "0xE93CC0", Offset = "0xE93CC0", VA = "0xE93CC0")]
		public static bool GetTriggerButtonDown(this HandInput self)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FE0")]
		[Address(RVA = "0xE93D04", Offset = "0xE93D04", VA = "0xE93D04")]
		public static bool GetTriggerButtonUp(this HandInput self)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FE1")]
		[Address(RVA = "0xE93D48", Offset = "0xE93D48", VA = "0xE93D48")]
		public static float GetTrigger(this HandInput self)
		{
			return default(float);
		}

		[Token(Token = "0x6000FE2")]
		[Address(RVA = "0xE93D64", Offset = "0xE93D64", VA = "0xE93D64")]
		public static Vector2 GetPrimary2DAxis(this HandInput self)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000FE3")]
		[Address(RVA = "0xE93D80", Offset = "0xE93D80", VA = "0xE93D80")]
		public static Vector2 GetPrimary2DAxisDelta(this HandInput self)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000FE4")]
		[Address(RVA = "0xE93DC0", Offset = "0xE93DC0", VA = "0xE93DC0")]
		public static bool GetPrimary2DAxisClick(this HandInput self)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FE5")]
		[Address(RVA = "0xE93DDC", Offset = "0xE93DDC", VA = "0xE93DDC")]
		public static bool GetPrimary2DAxisClickDown(this HandInput self)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FE6")]
		[Address(RVA = "0xE93E20", Offset = "0xE93E20", VA = "0xE93E20")]
		public static bool GetPrimary2DAxisClickUp(this HandInput self)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FE7")]
		[Address(RVA = "0xE93E64", Offset = "0xE93E64", VA = "0xE93E64")]
		public static bool GetPrimary2DAxisTouch(this HandInput self)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FE8")]
		[Address(RVA = "0xE93E80", Offset = "0xE93E80", VA = "0xE93E80")]
		public static bool GetPrimary2DAxisTouchDown(this HandInput self)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FE9")]
		[Address(RVA = "0xE93EC4", Offset = "0xE93EC4", VA = "0xE93EC4")]
		public static bool GetPrimary2DAxisTouchUp(this HandInput self)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FEA")]
		[Address(RVA = "0xE93F08", Offset = "0xE93F08", VA = "0xE93F08")]
		public static Vector2 GetSecondary2DAxis(this HandInput self)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000FEB")]
		[Address(RVA = "0xE93F24", Offset = "0xE93F24", VA = "0xE93F24")]
		public static Vector2 GetSecondary2DAxisDelta(this HandInput self)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000FEC")]
		[Address(RVA = "0xE93F64", Offset = "0xE93F64", VA = "0xE93F64")]
		public static bool GetSecondary2DAxisClick(this HandInput self)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FED")]
		[Address(RVA = "0xE93F80", Offset = "0xE93F80", VA = "0xE93F80")]
		public static bool GetSecondary2DAxisClickDown(this HandInput self)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FEE")]
		[Address(RVA = "0xE93FC4", Offset = "0xE93FC4", VA = "0xE93FC4")]
		public static bool GetSecondary2DAxisClickUp(this HandInput self)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FEF")]
		[Address(RVA = "0xE94008", Offset = "0xE94008", VA = "0xE94008")]
		public static bool GetSecondary2DAxisTouch(this HandInput self)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FF0")]
		[Address(RVA = "0xE94024", Offset = "0xE94024", VA = "0xE94024")]
		public static bool GetSecondary2DAxisTouchDown(this HandInput self)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FF1")]
		[Address(RVA = "0xE94068", Offset = "0xE94068", VA = "0xE94068")]
		public static bool GetSecondary2DAxisTouchUp(this HandInput self)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FF2")]
		public static bool HasFeatureUsage<T>(this HandInput self, InputFeatureUsage<T> featureUsage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FF3")]
		[Address(RVA = "0xE940AC", Offset = "0xE940AC", VA = "0xE940AC")]
		public static void HapticPulse(this HandInput self, float frequency, float amplitude)
		{
		}
	}
	[Token(Token = "0x2000301")]
	public class Icon : MonoBehaviour
	{
		[Token(Token = "0x4001083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform positionTracker;

		[Token(Token = "0x4001084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject iconEffect;

		[Token(Token = "0x4001085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MeshRenderer iconRenderer;

		[Token(Token = "0x4001086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject selectionEffect;

		[Token(Token = "0x4001087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Sound selectionSound;

		[Token(Token = "0x4001088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private GameObject empEffect;

		[Token(Token = "0x4001089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private GameObject lockedEffect;

		[Token(Token = "0x400108A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float iconWheelRadius;

		[Token(Token = "0x400108B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float selectionHeight;

		[Token(Token = "0x400108C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float selectionScale;

		[Token(Token = "0x400108D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float selectionLerpRate;

		[Token(Token = "0x400108E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private HandInput hand;

		[Token(Token = "0x400108F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Vector3 localPosition;

		[Token(Token = "0x4001090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float currentHeight;

		[Token(Token = "0x4001091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float currentScale;

		[Token(Token = "0x4001092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool isSelected;

		[Token(Token = "0x170001AE")]
		public Vector3 WorldPosition
		{
			[Token(Token = "0x6000FF6")]
			[Address(RVA = "0xE94158", Offset = "0xE94158", VA = "0xE94158")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000FF7")]
		[Address(RVA = "0xE94174", Offset = "0xE94174", VA = "0xE94174")]
		public void SetInitial(HandInput hand, float angle, Material material)
		{
		}

		[Token(Token = "0x6000FF8")]
		[Address(RVA = "0xE9423C", Offset = "0xE9423C", VA = "0xE9423C")]
		public void SetSelected(bool isSelected)
		{
		}

		[Token(Token = "0x6000FF9")]
		[Address(RVA = "0xE942A8", Offset = "0xE942A8", VA = "0xE942A8")]
		public void SetEMPed(bool isEMPed)
		{
		}

		[Token(Token = "0x6000FFA")]
		[Address(RVA = "0xE942C8", Offset = "0xE942C8", VA = "0xE942C8")]
		public void SetLocked(bool isLocked)
		{
		}

		[Token(Token = "0x6000FFB")]
		[Address(RVA = "0xE94318", Offset = "0xE94318", VA = "0xE94318")]
		private void Update()
		{
		}

		[Token(Token = "0x6000FFC")]
		[Address(RVA = "0xE94714", Offset = "0xE94714", VA = "0xE94714")]
		public Icon()
		{
		}
	}
	[Token(Token = "0x2000302")]
	public class MovementMode : MonoBehaviour
	{
		[Token(Token = "0x4001093")]
		private const float PlayerCenterHeight = 1.2f;

		[Token(Token = "0x4001094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int raycastLayers;

		[Token(Token = "0x4001095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static int raycastLayersAll;

		[Token(Token = "0x4001096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public HandInput hand;

		[Token(Token = "0x4001097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly List<GameObject> nonHierarchyChildren;

		[Token(Token = "0x170001AF")]
		public PlayerManager player
		{
			[Token(Token = "0x6000FFF")]
			[Address(RVA = "0xE947CC", Offset = "0xE947CC", VA = "0xE947CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B0")]
		public Transform Head
		{
			[Token(Token = "0x6001000")]
			[Address(RVA = "0xE94814", Offset = "0xE94814", VA = "0xE94814")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B1")]
		protected Rigidbody PlayerRigidbody
		{
			[Token(Token = "0x6001001")]
			[Address(RVA = "0xE94860", Offset = "0xE94860", VA = "0xE94860")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000FFD")]
		[Address(RVA = "0xE94730", Offset = "0xE94730", VA = "0xE94730")]
		public static float PhysicsScale()
		{
			return default(float);
		}

		[Token(Token = "0x6000FFE")]
		[Address(RVA = "0xE94760", Offset = "0xE94760", VA = "0xE94760")]
		public static float PhysicsScale(float min)
		{
			return default(float);
		}

		[Token(Token = "0x6001002")]
		[Address(RVA = "0xE948AC", Offset = "0xE948AC", VA = "0xE948AC")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x6001003")]
		[Address(RVA = "0xE94A3C", Offset = "0xE94A3C", VA = "0xE94A3C")]
		protected Vector3 ExagPos(float exag)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001004")]
		[Address(RVA = "0xE94B10", Offset = "0xE94B10", VA = "0xE94B10")]
		protected Vector3 Outwards()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001005")]
		[Address(RVA = "0xE94B78", Offset = "0xE94B78", VA = "0xE94B78")]
		public void RemoveFromHierarchy(GameObject obj)
		{
		}

		[Token(Token = "0x6001006")]
		[Address(RVA = "0xE94C48", Offset = "0xE94C48", VA = "0xE94C48")]
		public MovementMode()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000303")]
	public struct MovementModeOption
	{
		[Token(Token = "0x4001098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public MovementMode prefab;

		[Token(Token = "0x4001099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Material iconMaterialPC;

		[Token(Token = "0x400109A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Material iconMaterialQuest;

		[Token(Token = "0x400109B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material handMaterial;
	}
	[Token(Token = "0x2000304")]
	public class MovementModeSelector : MonoBehaviour
	{
		[Token(Token = "0x400109C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int mostRecentSelection;

		[Token(Token = "0x400109D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MovementModeOption[] movementModeOptions;

		[Token(Token = "0x400109E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandInput hand;

		[Token(Token = "0x400109F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Material defaultHandMaterial;

		[Token(Token = "0x40010A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject empEffect;

		[Token(Token = "0x40010A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Sound empSound;

		[Token(Token = "0x40010A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject powerWheelPrefab;

		[Token(Token = "0x40010A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Icon iconPrefab;

		[Token(Token = "0x40010A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform iconsParent;

		[Token(Token = "0x40010A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public SkinnedMeshRenderer handMesh;

		[Token(Token = "0x40010A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 shoulder;

		[Token(Token = "0x40010A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float iconSelectDist;

		[Token(Token = "0x40010A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float selectionTimeSlowdown;

		[Token(Token = "0x40010A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject powerWheel;

		[Token(Token = "0x40010AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Icon[] icons;

		[Token(Token = "0x40010AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float[] empTimers;

		[Token(Token = "0x40010AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private MovementMode current;

		[Token(Token = "0x40010AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int? desiredMode;

		[Token(Token = "0x40010AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int? prevActualMode;

		[Token(Token = "0x170001B2")]
		private int NumModes
		{
			[Token(Token = "0x6001008")]
			[Address(RVA = "0xE94D20", Offset = "0xE94D20", VA = "0xE94D20")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001B3")]
		public int? DesiredMode
		{
			[Token(Token = "0x6001009")]
			[Address(RVA = "0xE94D3C", Offset = "0xE94D3C", VA = "0xE94D3C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B4")]
		private bool Select
		{
			[Token(Token = "0x600100A")]
			[Address(RVA = "0xE94D44", Offset = "0xE94D44", VA = "0xE94D44")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001B5")]
		private Vector3 ShoulderPos
		{
			[Token(Token = "0x600100B")]
			[Address(RVA = "0xE94E14", Offset = "0xE94E14", VA = "0xE94E14")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170001B6")]
		private bool CurrentlyEMPed
		{
			[Token(Token = "0x600100D")]
			[Address(RVA = "0xE94FF0", Offset = "0xE94FF0", VA = "0xE94FF0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600100C")]
		[Address(RVA = "0xE94E94", Offset = "0xE94E94", VA = "0xE94E94")]
		private int? GetChoice()
		{
			return null;
		}

		[Token(Token = "0x600100E")]
		[Address(RVA = "0xE95084", Offset = "0xE95084", VA = "0xE95084")]
		private void Start()
		{
		}

		[Token(Token = "0x600100F")]
		[Address(RVA = "0xE953F0", Offset = "0xE953F0", VA = "0xE953F0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001010")]
		[Address(RVA = "0xE95A08", Offset = "0xE95A08", VA = "0xE95A08")]
		public void EmpHit(float empDuration)
		{
		}

		[Token(Token = "0x6001011")]
		[Address(RVA = "0xE9532C", Offset = "0xE9532C", VA = "0xE9532C")]
		public void SelectMode(int newMode)
		{
		}

		[Token(Token = "0x6001012")]
		[Address(RVA = "0xE95B54", Offset = "0xE95B54", VA = "0xE95B54")]
		public MovementModeSelector()
		{
		}
	}
}
namespace Player.Movement_Modes
{
	[Token(Token = "0x2000305")]
	public class BlinkStrike : MovementMode
	{
		[Token(Token = "0x2000306")]
		[CompilerGenerated]
		private sealed class <Blink>d__47 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40010D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40010DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BlinkStrike <>4__this;

			[Token(Token = "0x40010DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 destination;

			[Token(Token = "0x40010DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public GameObject targetObject;

			[Token(Token = "0x40010DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Vector3 <blinkDir>5__2;

			[Token(Token = "0x170001B8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001023")]
				[Address(RVA = "0xE989B4", Offset = "0xE989B4", VA = "0xE989B4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001B9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001025")]
				[Address(RVA = "0xE989FC", Offset = "0xE989FC", VA = "0xE989FC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001020")]
			[Address(RVA = "0xE97F84", Offset = "0xE97F84", VA = "0xE97F84")]
			[DebuggerHidden]
			public <Blink>d__47(int <>1__state)
			{
			}

			[Token(Token = "0x6001021")]
			[Address(RVA = "0xE98428", Offset = "0xE98428", VA = "0xE98428", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001022")]
			[Address(RVA = "0xE9842C", Offset = "0xE9842C", VA = "0xE9842C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001024")]
			[Address(RVA = "0xE989BC", Offset = "0xE989BC", VA = "0xE989BC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000307")]
		[CompilerGenerated]
		private sealed class <Dash>d__48 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40010DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40010E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameObject targetObject;

			[Token(Token = "0x40010E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 destination;

			[Token(Token = "0x40010E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public BlinkStrike <>4__this;

			[Token(Token = "0x40010E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Vector3 <dashVector>5__2;

			[Token(Token = "0x40010E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float <dashDuration>5__3;

			[Token(Token = "0x40010E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private Vector3 <dashVelocity>5__4;

			[Token(Token = "0x40010E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			private float <startDash>5__5;

			[Token(Token = "0x170001BA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001029")]
				[Address(RVA = "0xE98FC8", Offset = "0xE98FC8", VA = "0xE98FC8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001BB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600102B")]
				[Address(RVA = "0xE99010", Offset = "0xE99010", VA = "0xE99010", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001026")]
			[Address(RVA = "0xE97FAC", Offset = "0xE97FAC", VA = "0xE97FAC")]
			[DebuggerHidden]
			public <Dash>d__48(int <>1__state)
			{
			}

			[Token(Token = "0x6001027")]
			[Address(RVA = "0xE98A04", Offset = "0xE98A04", VA = "0xE98A04", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001028")]
			[Address(RVA = "0xE98A08", Offset = "0xE98A08", VA = "0xE98A08", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600102A")]
			[Address(RVA = "0xE98FD0", Offset = "0xE98FD0", VA = "0xE98FD0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40010AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Haptics")]
		public float hapticMinAccel;

		[Token(Token = "0x40010B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float hapticMul;

		[Token(Token = "0x40010B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float hapticFrequency;

		[Token(Token = "0x40010B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float hapticMax;

		[Token(Token = "0x40010B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 prevLocalPos;

		[Token(Token = "0x40010B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Header("Blink Attack")]
		public float blinkAttackOffset;

		[Token(Token = "0x40010B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ProjectileThrowing projectileThrowing;

		[Token(Token = "0x40010B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject blinkAttack;

		[Token(Token = "0x40010B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Sound blinkSound;

		[Token(Token = "0x40010B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Blink Projectile")]
		public GameObject handProjectile;

		[Token(Token = "0x40010B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Sound kunaiEquipSound;

		[Token(Token = "0x40010BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Blink Targeting")]
		public float blinkCooldown;

		[Token(Token = "0x40010BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float maxRayDist;

		[Token(Token = "0x40010BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float minRayDist;

		[Token(Token = "0x40010BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float maxAngleOffset;

		[Token(Token = "0x40010BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float enemyMaxTargetDist;

		[Token(Token = "0x40010BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float enemyTargetAngleMult;

		[Token(Token = "0x40010C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float civilianMaxTargetDist;

		[Token(Token = "0x40010C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float civilianTargetAngleMult;

		[Token(Token = "0x40010C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float projectileMaxTargetDist;

		[Token(Token = "0x40010C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float projectileTargetAngleMult;

		[Token(Token = "0x40010C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float sphereCastRadius;

		[Token(Token = "0x40010C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public GameObject targetingMarker;

		[Token(Token = "0x40010C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float slowFactor;

		[Token(Token = "0x40010C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float nearWallSphereRadius;

		[Token(Token = "0x40010C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public GameObject laserPointer;

		[Token(Token = "0x40010C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Header("Blink Movement")]
		public float blinkDelay;

		[Token(Token = "0x40010CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float blinkForce;

		[Token(Token = "0x40010CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private GameObject grabbed;

		[Token(Token = "0x40010CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Vector3 newTargetPoint;

		[Token(Token = "0x40010CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float bestTargetScore;

		[Token(Token = "0x40010CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float latestBlink;

		[Token(Token = "0x40010CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Header("Dash Sidegrade")]
		public bool dashSidegrade;

		[Token(Token = "0x40010D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public float dashSpeed;

		[Token(Token = "0x40010D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public float maxDashDuration;

		[Token(Token = "0x40010D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public float endDashSpeed;

		[Token(Token = "0x40010D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Header("Vampire Sidegrade")]
		public bool vampireSidegrade;

		[Token(Token = "0x40010D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public GameObject vampireClaws;

		[Token(Token = "0x40010D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public GameObject vampireProjectile;

		[Token(Token = "0x40010D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public float vampireProjectileSpeed;

		[Token(Token = "0x40010D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public Sound clawsSound;

		[Token(Token = "0x170001B7")]
		private float ScaledSphereRadius
		{
			[Token(Token = "0x600101C")]
			[Address(RVA = "0xE97FD4", Offset = "0xE97FD4", VA = "0xE97FD4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001014")]
		[Address(RVA = "0xE95CB0", Offset = "0xE95CB0", VA = "0xE95CB0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001015")]
		[Address(RVA = "0xE95DA0", Offset = "0xE95DA0", VA = "0xE95DA0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001016")]
		[Address(RVA = "0xE96760", Offset = "0xE96760", VA = "0xE96760")]
		private float targetScore(Vector3 toTarget, float angleMult, Vector3 direction)
		{
			return default(float);
		}

		[Token(Token = "0x6001017")]
		[Address(RVA = "0xE96968", Offset = "0xE96968", VA = "0xE96968")]
		private bool setTargetIfPathClear(GameObject target, Vector3 originPosition, Vector3 direction, float targetRayDist)
		{
			return default(bool);
		}

		[Token(Token = "0x6001018")]
		[Address(RVA = "0xE96BE0", Offset = "0xE96BE0", VA = "0xE96BE0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001019")]
		[Address(RVA = "0xE96D78", Offset = "0xE96D78", VA = "0xE96D78")]
		private void BlinkTargeting()
		{
		}

		[Token(Token = "0x600101A")]
		[Address(RVA = "0xE966AC", Offset = "0xE966AC", VA = "0xE966AC")]
		[IteratorStateMachine(typeof(<Blink>d__47))]
		private IEnumerator Blink(Vector3 destination, GameObject targetObject)
		{
			return null;
		}

		[Token(Token = "0x600101B")]
		[Address(RVA = "0xE965F8", Offset = "0xE965F8", VA = "0xE965F8")]
		[IteratorStateMachine(typeof(<Dash>d__48))]
		private IEnumerator Dash(Vector3 destination, GameObject targetObject)
		{
			return null;
		}

		[Token(Token = "0x600101D")]
		[Address(RVA = "0xE9644C", Offset = "0xE9644C", VA = "0xE9644C")]
		private bool NearWall()
		{
			return default(bool);
		}

		[Token(Token = "0x600101E")]
		[Address(RVA = "0xE98050", Offset = "0xE98050", VA = "0xE98050")]
		private bool UnsafeBlink(Vector3 newPlayerPos, Rigidbody rb)
		{
			return default(bool);
		}

		[Token(Token = "0x600101F")]
		[Address(RVA = "0xE98364", Offset = "0xE98364", VA = "0xE98364")]
		public BlinkStrike()
		{
		}
	}
	[Token(Token = "0x2000308")]
	public class GrabLeap : MovementMode
	{
		[Token(Token = "0x40010E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float minExag;

		[Token(Token = "0x40010E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float maxExag;

		[Token(Token = "0x40010E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float thrustAccel;

		[Token(Token = "0x40010EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float minPull;

		[Token(Token = "0x40010EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float releaseSpeed;

		[Token(Token = "0x40010EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float extensionRate;

		[Token(Token = "0x40010ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 shoulder;

		[Token(Token = "0x40010EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Header("Attack")]
		public float spinRate;

		[Token(Token = "0x40010EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float hapticStrength;

		[Token(Token = "0x40010F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float hapticFreq;

		[Token(Token = "0x40010F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Sword Sidegrade")]
		public bool swordEnabled;

		[Token(Token = "0x40010F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float swordDamageHapticCooldown;

		[Token(Token = "0x40010F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Octopus Sidegrade")]
		public bool octopusEnabled;

		[Token(Token = "0x40010F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int octopusNumArms;

		[Token(Token = "0x40010F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float rotPerArm;

		[Token(Token = "0x40010F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float baseRot;

		[Token(Token = "0x40010F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Components")]
		public Sound grabLeapSound;

		[Token(Token = "0x40010F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public ClawManager clawManagerPrefab;

		[Token(Token = "0x40010F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private List<ClawManager> clawManagers;

		[Token(Token = "0x40010FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float currentExtension;

		[Token(Token = "0x40010FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float prevTrigger;

		[Token(Token = "0x170001BC")]
		private float Scale
		{
			[Token(Token = "0x600102C")]
			[Address(RVA = "0xE99018", Offset = "0xE99018", VA = "0xE99018")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001BD")]
		private int NumClaws
		{
			[Token(Token = "0x600102D")]
			[Address(RVA = "0xE990BC", Offset = "0xE990BC", VA = "0xE990BC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001BE")]
		private Vector3 ShoulderPos
		{
			[Token(Token = "0x600102E")]
			[Address(RVA = "0xE990D4", Offset = "0xE990D4", VA = "0xE990D4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x600102F")]
		[Address(RVA = "0xE99114", Offset = "0xE99114", VA = "0xE99114")]
		private void Start()
		{
		}

		[Token(Token = "0x6001030")]
		[Address(RVA = "0xE99528", Offset = "0xE99528", VA = "0xE99528")]
		private void Update()
		{
		}

		[Token(Token = "0x6001031")]
		[Address(RVA = "0xE99910", Offset = "0xE99910", VA = "0xE99910")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001032")]
		[Address(RVA = "0xE992E0", Offset = "0xE992E0", VA = "0xE992E0")]
		private void SetGoals()
		{
		}

		[Token(Token = "0x6001033")]
		[Address(RVA = "0xE99B64", Offset = "0xE99B64", VA = "0xE99B64")]
		public GrabLeap()
		{
		}
	}
	[Token(Token = "0x200030A")]
	public class Gravity : MovementMode
	{
		[Token(Token = "0x40010FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BlackHoleAI blackHolePrefab;

		[Token(Token = "0x40010FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform blackHoleSpawnPos;

		[Token(Token = "0x4001100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float posDecay;

		[Token(Token = "0x4001101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float blackHoleSpeedRatio;

		[Token(Token = "0x4001102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Control")]
		public float blackHoleMaxLifetime;

		[Token(Token = "0x4001103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float blackHoleRedirectSpeed;

		[Token(Token = "0x4001104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float redirectForce;

		[Token(Token = "0x4001105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float stopForce;

		[Token(Token = "0x4001106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Accel")]
		public float blackHolePullAccel;

		[Token(Token = "0x4001107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float blackHoleMaxRadius;

		[Token(Token = "0x4001108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AnimationCurve accelOverDistance;

		[Token(Token = "0x4001109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Haptics")]
		public float hapticMinAccel;

		[Token(Token = "0x400110A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float hapticFrequency;

		[Token(Token = "0x400110B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float hapticMul;

		[Token(Token = "0x400110C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float hapticMax;

		[Token(Token = "0x400110D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("White Hole Sidegrade")]
		public bool whiteHoleEnabled;

		[Token(Token = "0x400110E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public BlackHoleAI whiteHolePrefab;

		[Token(Token = "0x400110F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public GameObject whiteHoleModel;

		[Token(Token = "0x4001110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public AnimationCurve whiteHoleAccelOverDistance;

		[Token(Token = "0x4001111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Header("Swarm Sidegrade")]
		public bool swarmEnabled;

		[Token(Token = "0x4001112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public int numInSwarm;

		[Token(Token = "0x4001113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float accelMul;

		[Token(Token = "0x4001114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float throwNoiseRatio;

		[Token(Token = "0x4001115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float activeSwarmVolume;

		[Token(Token = "0x4001116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float activeSwarmPitch;

		[Token(Token = "0x4001117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Header("Other")]
		[ColorUsage(true, true)]
		public Color gravityLineColor;

		[Token(Token = "0x4001118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public GameObject blackHoleModel;

		[Token(Token = "0x4001119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private readonly List<BlackHoleAI> myBlackHoles;

		[Token(Token = "0x400111A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool anyActiveBlackHole;

		[Token(Token = "0x400111B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float blackHoleRemainingLifetime;

		[Token(Token = "0x400111C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Vector3 startPos;

		[Token(Token = "0x170001BF")]
		private BlackHoleAI ProjectilePrefab
		{
			[Token(Token = "0x6001038")]
			[Address(RVA = "0xE99CCC", Offset = "0xE99CCC", VA = "0xE99CCC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C0")]
		private GameObject ProjectileModel
		{
			[Token(Token = "0x6001039")]
			[Address(RVA = "0xE99CE8", Offset = "0xE99CE8", VA = "0xE99CE8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C1")]
		private AnimationCurve AccelOverDistance
		{
			[Token(Token = "0x600103A")]
			[Address(RVA = "0xE99D04", Offset = "0xE99D04", VA = "0xE99D04")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600103B")]
		[Address(RVA = "0xE99D20", Offset = "0xE99D20", VA = "0xE99D20")]
		private void Start()
		{
		}

		[Token(Token = "0x600103C")]
		[Address(RVA = "0xE99D50", Offset = "0xE99D50", VA = "0xE99D50")]
		private void Update()
		{
		}

		[Token(Token = "0x600103D")]
		[Address(RVA = "0xE9A864", Offset = "0xE9A864", VA = "0xE9A864")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600103E")]
		[Address(RVA = "0xE9B30C", Offset = "0xE9B30C", VA = "0xE9B30C")]
		public Gravity()
		{
		}
	}
	[Token(Token = "0x200030B")]
	public class IceTrail : MovementMode
	{
		[Token(Token = "0x400111D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Movement")]
		public float goalSpeed;

		[Token(Token = "0x400111E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float accel;

		[Token(Token = "0x400111F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float keepLine;

		[Token(Token = "0x4001120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float maxSpeed;

		[Token(Token = "0x4001121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float speedDamper;

		[Token(Token = "0x4001122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Header("Trail")]
		public float radius;

		[Token(Token = "0x4001123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float negRadius;

		[Token(Token = "0x4001124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float footDist;

		[Token(Token = "0x4001125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float playerCenterHeight;

		[Token(Token = "0x4001126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Icicles")]
		public Rigidbody iciclePrefab;

		[Token(Token = "0x4001127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform icicleSpawnPos;

		[Token(Token = "0x4001128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float icicleMaxChargeTime;

		[Token(Token = "0x4001129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float icicleMaxFowards;

		[Token(Token = "0x400112A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float icicleMinSpeed;

		[Token(Token = "0x400112B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float icicleMaxSpeed;

		[Token(Token = "0x400112C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float icicleMaxScale;

		[Token(Token = "0x400112D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Sound icicleReleaseSound;

		[Token(Token = "0x400112E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Header("Wall-Slide Sidegrade")]
		public bool wallSlideEnabled;

		[Token(Token = "0x400112F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float searchRadius;

		[Token(Token = "0x4001130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float nearWallSpeedMul;

		[Token(Token = "0x4001131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float midairSpeedMul;

		[Token(Token = "0x4001132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Header("Rock Sidegrade")]
		public bool rockEnabled;

		[Token(Token = "0x4001133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public string materialNameRock;

		[Token(Token = "0x4001134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Header("Other")]
		public float minPress;

		[Token(Token = "0x4001135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public string materialName;

		[Token(Token = "0x4001136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Sound trailSoundIce;

		[Token(Token = "0x4001137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Sound trailSoundRock;

		[Token(Token = "0x4001138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public ProjectileThrowing rockThrowing;

		[Token(Token = "0x4001139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool prevExists;

		[Token(Token = "0x400113A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private Vector3 prevPos;

		[Token(Token = "0x400113B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Vector3 prevDir;

		[Token(Token = "0x400113C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Vector3 prevNormal;

		[Token(Token = "0x400113D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Vector3 totalForce;

		[Token(Token = "0x400113E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Rigidbody myIcicle;

		[Token(Token = "0x400113F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private float lastIcicleTime;

		[Token(Token = "0x170001C2")]
		private float GoalSpeed
		{
			[Token(Token = "0x600103F")]
			[Address(RVA = "0xE9B3FC", Offset = "0xE9B3FC", VA = "0xE9B3FC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001C3")]
		private Sound TrailSound
		{
			[Token(Token = "0x6001040")]
			[Address(RVA = "0xE9B460", Offset = "0xE9B460", VA = "0xE9B460")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C4")]
		private DynamicSurface Surface
		{
			[Token(Token = "0x6001041")]
			[Address(RVA = "0xE9B47C", Offset = "0xE9B47C", VA = "0xE9B47C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C5")]
		private float ScaledFootDist
		{
			[Token(Token = "0x6001042")]
			[Address(RVA = "0xE9B510", Offset = "0xE9B510", VA = "0xE9B510")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001043")]
		[Address(RVA = "0xE9B578", Offset = "0xE9B578", VA = "0xE9B578")]
		private void Start()
		{
		}

		[Token(Token = "0x6001044")]
		[Address(RVA = "0xE9B5E0", Offset = "0xE9B5E0", VA = "0xE9B5E0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001045")]
		[Address(RVA = "0xE9C698", Offset = "0xE9C698", VA = "0xE9C698")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001046")]
		[Address(RVA = "0xE9BDA8", Offset = "0xE9BDA8", VA = "0xE9BDA8")]
		private void CreateIce(Vector3 pos1, Vector3 pos2, Vector3 up)
		{
		}

		[Token(Token = "0x6001047")]
		[Address(RVA = "0xE9CE84", Offset = "0xE9CE84", VA = "0xE9CE84")]
		public IceTrail()
		{
		}
	}
	[Token(Token = "0x200030C")]
	public class Lightning : MovementMode
	{
		[Token(Token = "0x4001140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float posDecay;

		[Token(Token = "0x4001141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float speedMul;

		[Token(Token = "0x4001142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float slowFactor;

		[Token(Token = "0x4001143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float pushFactor;

		[Token(Token = "0x4001144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Haptics")]
		public float hapticMul;

		[Token(Token = "0x4001145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float hapticFreq;

		[Token(Token = "0x4001146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Sound")]
		public Sound electricitySound;

		[Token(Token = "0x4001147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float volumeBase;

		[Token(Token = "0x4001148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float volumeMul;

		[Token(Token = "0x4001149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float volumeDecay;

		[Token(Token = "0x400114A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Particles")]
		public ParticleSystem electricitySphere;

		[Token(Token = "0x400114B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float emissionBase;

		[Token(Token = "0x400114C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float emissionMul;

		[Token(Token = "0x400114D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float emissionRadiusMul;

		[Token(Token = "0x400114E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Header("Beam")]
		public float minInput;

		[Token(Token = "0x400114F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float maxBeamEmissionRate;

		[Token(Token = "0x4001150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float maxBeamDPS;

		[Token(Token = "0x4001151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public ParticleSystem beamParticles;

		[Token(Token = "0x4001152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public ContinualDamage beamDamager;

		[Token(Token = "0x4001153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Sound beamSound;

		[Token(Token = "0x4001154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Header("Railgun Sidegrade")]
		public bool railgunEnabled;

		[Token(Token = "0x4001155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public RailgunShotAI railgunShotPrefab;

		[Token(Token = "0x4001156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public ParticleSystem railgunChargePrefab;

		[Token(Token = "0x4001157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float chargeRate;

		[Token(Token = "0x4001158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Transform laserLine;

		[Token(Token = "0x4001159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Header("Super Sidegrade")]
		public bool superEnabled;

		[Token(Token = "0x400115A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float playerCenterHeight;

		[Token(Token = "0x400115B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public float superAccelMul;

		[Token(Token = "0x400115C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float superSpeedMul;

		[Token(Token = "0x400115D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float superDamping;

		[Token(Token = "0x400115E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float superWindUpTime;

		[Token(Token = "0x400115F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Vector3 shoulder;

		[Token(Token = "0x4001160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public float superHapticMul;

		[Token(Token = "0x4001161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public float superHapticFreq;

		[Token(Token = "0x4001162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private ParticleIntensityScaling[] chargeParticleIntensities;

		[Token(Token = "0x4001163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private ParticleSystem chargeParticlesInstance;

		[Token(Token = "0x4001164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private float currentCharge;

		[Token(Token = "0x4001165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private Vector3 prevPos;

		[Token(Token = "0x4001166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private float prevVolume;

		[Token(Token = "0x4001167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private Vector3 startPos;

		[Token(Token = "0x4001168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private float superTimeSinceStart;

		[Token(Token = "0x170001C6")]
		private Vector3 ShoulderPos
		{
			[Token(Token = "0x600104D")]
			[Address(RVA = "0xE9D054", Offset = "0xE9D054", VA = "0xE9D054")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6001048")]
		[Address(RVA = "0xE9CF34", Offset = "0xE9CF34", VA = "0xE9CF34")]
		private float GetTrigger()
		{
			return default(float);
		}

		[Token(Token = "0x6001049")]
		[Address(RVA = "0xE9CF84", Offset = "0xE9CF84", VA = "0xE9CF84")]
		private bool GetTriggerButton()
		{
			return default(bool);
		}

		[Token(Token = "0x600104A")]
		[Address(RVA = "0xE9CFB8", Offset = "0xE9CFB8", VA = "0xE9CFB8")]
		private bool GetGripButton()
		{
			return default(bool);
		}

		[Token(Token = "0x600104B")]
		[Address(RVA = "0xE9CFEC", Offset = "0xE9CFEC", VA = "0xE9CFEC")]
		private bool GetGripButtonDown()
		{
			return default(bool);
		}

		[Token(Token = "0x600104C")]
		[Address(RVA = "0xE9D020", Offset = "0xE9D020", VA = "0xE9D020")]
		private bool GetGripButtonUp()
		{
			return default(bool);
		}

		[Token(Token = "0x600104E")]
		[Address(RVA = "0xE9D094", Offset = "0xE9D094", VA = "0xE9D094")]
		private void Start()
		{
		}

		[Token(Token = "0x600104F")]
		[Address(RVA = "0xE9D1E8", Offset = "0xE9D1E8", VA = "0xE9D1E8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001050")]
		[Address(RVA = "0xE9DA9C", Offset = "0xE9DA9C", VA = "0xE9DA9C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001051")]
		[Address(RVA = "0xE9DEC8", Offset = "0xE9DEC8", VA = "0xE9DEC8")]
		public Lightning()
		{
		}
	}
	[Token(Token = "0x200030D")]
	public class Speed : MovementMode
	{
		[Token(Token = "0x4001169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float disableBrakeTime;

		[Token(Token = "0x400116A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float targetSpeed;

		[Token(Token = "0x400116B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float accelRate;

		[Token(Token = "0x400116C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float sphereRadius;

		[Token(Token = "0x400116D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float headWeight;

		[Token(Token = "0x400116E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Air Control")]
		public float airAccel;

		[Token(Token = "0x400116F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float maxGravity;

		[Token(Token = "0x4001170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Brake")]
		public float brakeRate;

		[Token(Token = "0x4001171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float maxDisableBrakeTime;

		[Token(Token = "0x4001172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float maxInactiveTime;

		[Token(Token = "0x4001173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Header("Jump")]
		public float posDecay;

		[Token(Token = "0x4001174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float speedMul;

		[Token(Token = "0x4001175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Sound jumpSound;

		[Token(Token = "0x4001176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Bubble Sidegrade")]
		public bool bubbleEnabled;

		[Token(Token = "0x4001177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float maxSpeedDiff;

		[Token(Token = "0x4001178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float myBounciness;

		[Token(Token = "0x4001179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float normalBounciness;

		[Token(Token = "0x400117A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Time Dilation Sidegrade")]
		public bool timeDilationEnabled;

		[Token(Token = "0x400117B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float slowdownMul;

		[Token(Token = "0x400117C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float slowdownRate;

		[Token(Token = "0x400117D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float slowdownPower;

		[Token(Token = "0x400117E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool timeDilationActive;

		[Token(Token = "0x400117F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Header("Haptics")]
		public float hapticMul;

		[Token(Token = "0x4001180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float hapticFreq;

		[Token(Token = "0x4001181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Header("Trail")]
		public TrailRenderer trail;

		[Token(Token = "0x4001182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float minTrailSpeed;

		[Token(Token = "0x4001183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Vector3 startPos;

		[Token(Token = "0x4001184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float timeSinceActive;

		[Token(Token = "0x170001C7")]
		private float ScaledSphereRadius
		{
			[Token(Token = "0x6001057")]
			[Address(RVA = "0xE9EDD8", Offset = "0xE9EDD8", VA = "0xE9EDD8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001052")]
		[Address(RVA = "0xE9DF90", Offset = "0xE9DF90", VA = "0xE9DF90")]
		private void Start()
		{
		}

		[Token(Token = "0x6001053")]
		[Address(RVA = "0xE9E0D0", Offset = "0xE9E0D0", VA = "0xE9E0D0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001054")]
		[Address(RVA = "0xE9E5C0", Offset = "0xE9E5C0", VA = "0xE9E5C0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001055")]
		[Address(RVA = "0xE9ED68", Offset = "0xE9ED68", VA = "0xE9ED68")]
		private new void OnDestroy()
		{
		}

		[Token(Token = "0x6001056")]
		[Address(RVA = "0xE9ECC0", Offset = "0xE9ECC0", VA = "0xE9ECC0")]
		private void SetPhysicMaterial(bool bouncy)
		{
		}

		[Token(Token = "0x6001058")]
		[Address(RVA = "0xE9E414", Offset = "0xE9E414", VA = "0xE9E414")]
		private bool NearWall()
		{
			return default(bool);
		}

		[Token(Token = "0x6001059")]
		[Address(RVA = "0xE9EE54", Offset = "0xE9EE54", VA = "0xE9EE54")]
		public Speed()
		{
		}
	}
	[Token(Token = "0x200030E")]
	public class Telekinesis : MovementMode
	{
		[Token(Token = "0x4001185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Movement")]
		public float targetSpeed;

		[Token(Token = "0x4001186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float accelRate;

		[Token(Token = "0x4001187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float headWeight;

		[Token(Token = "0x4001188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Parts")]
		public Transform reticle;

		[Token(Token = "0x4001189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform aimLaser;

		[Token(Token = "0x400118A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Sound grabSound;

		[Token(Token = "0x400118B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Telekinesis Targeting")]
		public float armDirMul;

		[Token(Token = "0x400118C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float armDirPower;

		[Token(Token = "0x400118D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float armLengthOffset;

		[Token(Token = "0x400118E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Vector3 handOffset;

		[Token(Token = "0x400118F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Vector3 shoulder;

		[Token(Token = "0x4001190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Header("Telekinesis Force")]
		public float grabRadius;

		[Token(Token = "0x4001191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float grabSpring;

		[Token(Token = "0x4001192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float grabDampingRatio;

		[Token(Token = "0x4001193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float maxGrabForce;

		[Token(Token = "0x4001194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float handSpeedForceMul;

		[Token(Token = "0x4001195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Header("Energy Blast Sidegrade")]
		public bool energyBlastSidegrade;

		[Token(Token = "0x4001196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public LaserBlastAI blastPrefab;

		[Token(Token = "0x4001197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Rigidbody boltPrefab;

		[Token(Token = "0x4001198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float boltSpeed;

		[Token(Token = "0x4001199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float blastHapticMul1;

		[Token(Token = "0x400119A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float blastHapticMul2;

		[Token(Token = "0x400119B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float blastHapticFreq;

		[Token(Token = "0x400119C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Header("Free Flight Sidegrade")]
		public bool freeFlightSidegrade;

		[Token(Token = "0x400119D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float newAccelRate;

		[Token(Token = "0x400119E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int numSelf;

		[Token(Token = "0x400119F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private HashSet<Rigidbody> grabbed;

		[Token(Token = "0x40011A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private LaserBlastAI blastInstance;

		[Token(Token = "0x170001C8")]
		public static int NumSelf
		{
			[Token(Token = "0x600105A")]
			[Address(RVA = "0xE9EF08", Offset = "0xE9EF08", VA = "0xE9EF08")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001C9")]
		private float AccelRate
		{
			[Token(Token = "0x600105B")]
			[Address(RVA = "0xE9EF50", Offset = "0xE9EF50", VA = "0xE9EF50")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001CA")]
		private Vector3 ShoulderPos
		{
			[Token(Token = "0x600105C")]
			[Address(RVA = "0xE9EF6C", Offset = "0xE9EF6C", VA = "0xE9EF6C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170001CB")]
		public Vector3 ArmDirection
		{
			[Token(Token = "0x600105D")]
			[Address(RVA = "0xE9EFAC", Offset = "0xE9EFAC", VA = "0xE9EFAC")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x600105E")]
		[Address(RVA = "0xE9F00C", Offset = "0xE9F00C", VA = "0xE9F00C")]
		private Vector3 GetGrabTargetPos()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600105F")]
		[Address(RVA = "0xE9F208", Offset = "0xE9F208", VA = "0xE9F208")]
		private void Start()
		{
		}

		[Token(Token = "0x6001060")]
		[Address(RVA = "0xE9F238", Offset = "0xE9F238", VA = "0xE9F238")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001061")]
		[Address(RVA = "0xE9F288", Offset = "0xE9F288", VA = "0xE9F288")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001062")]
		[Address(RVA = "0xE9F2D8", Offset = "0xE9F2D8", VA = "0xE9F2D8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001063")]
		[Address(RVA = "0xE9F9BC", Offset = "0xE9F9BC", VA = "0xE9F9BC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001064")]
		[Address(RVA = "0xEA0280", Offset = "0xEA0280", VA = "0xEA0280")]
		public Telekinesis()
		{
		}
	}
	[Token(Token = "0x2000310")]
	public class Thruster : MovementMode
	{
		[Token(Token = "0x40011A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Movement")]
		public float thrustAccel;

		[Token(Token = "0x40011A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float antigravAccel;

		[Token(Token = "0x40011A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float minInput;

		[Token(Token = "0x40011A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float brakeDrag;

		[Token(Token = "0x40011AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Missiles")]
		public GameObject missilePrefab;

		[Token(Token = "0x40011AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float missileSpeed;

		[Token(Token = "0x40011AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform missileSpawnPos;

		[Token(Token = "0x40011AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float missileCooldown;

		[Token(Token = "0x40011AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Header("Fireball Sidegrade")]
		public bool fireballSidegrade;

		[Token(Token = "0x40011AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ProjectileThrowing fireballThrowing;

		[Token(Token = "0x40011B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Explosion Sidegrade")]
		public bool explosionSidegrade;

		[Token(Token = "0x40011B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float explosionMinSpeed;

		[Token(Token = "0x40011B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float explosionMaxSpeed;

		[Token(Token = "0x40011B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float chargeRate;

		[Token(Token = "0x40011B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GameObject explosionPrefab;

		[Token(Token = "0x40011B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public ParticleSystem explosionChargePrefab;

		[Token(Token = "0x40011B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float explosionHapticMul;

		[Token(Token = "0x40011B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float explosionHapticFreq;

		[Token(Token = "0x40011B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Header("Other")]
		public float maxEmissionRate;

		[Token(Token = "0x40011B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float maxDPS;

		[Token(Token = "0x40011BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public ParticleSystem flameStreamPC;

		[Token(Token = "0x40011BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public ParticleSystem flameStreamQuest;

		[Token(Token = "0x40011BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public ContinualDamage fireDamager;

		[Token(Token = "0x40011BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Sound thrusterSound;

		[Token(Token = "0x40011BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public GameObject state1;

		[Token(Token = "0x40011BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public GameObject state2;

		[Token(Token = "0x40011C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private ParticleSystem chargeParticlesInstance;

		[Token(Token = "0x40011C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float currentFuel;

		[Token(Token = "0x40011C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float explosionChargeAlpha;

		[Token(Token = "0x40011C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float explosionChargeSize;

		[Token(Token = "0x40011C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Vector3 fireballStartPos;

		[Token(Token = "0x40011C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float sinceLastMissile;

		[Token(Token = "0x170001CC")]
		public ParticleSystem flameStream
		{
			[Token(Token = "0x600106B")]
			[Address(RVA = "0xEA0528", Offset = "0xEA0528", VA = "0xEA0528")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600106C")]
		[Address(RVA = "0xEA0530", Offset = "0xEA0530", VA = "0xEA0530")]
		private void Start()
		{
		}

		[Token(Token = "0x600106D")]
		[Address(RVA = "0xEA06B8", Offset = "0xEA06B8", VA = "0xEA06B8")]
		private void Update()
		{
		}

		[Token(Token = "0x600106E")]
		[Address(RVA = "0xEA15BC", Offset = "0xEA15BC", VA = "0xEA15BC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600106F")]
		[Address(RVA = "0xEA19B8", Offset = "0xEA19B8", VA = "0xEA19B8")]
		public Thruster()
		{
		}
	}
	[Token(Token = "0x2000311")]
	public class WebSlinger : MovementMode
	{
		[Token(Token = "0x40011C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Main Spring")]
		public float spring;

		[Token(Token = "0x40011C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float damper;

		[Token(Token = "0x40011C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float maxSpringMul;

		[Token(Token = "0x40011C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float maxMassMul;

		[Token(Token = "0x40011CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Align to Head")]
		public float headAlignDotMin;

		[Token(Token = "0x40011CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float headAlignAccel;

		[Token(Token = "0x40011CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Forward Thrust")]
		public float headForwardAccel;

		[Token(Token = "0x40011CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Header("Pull Length Exaggeration")]
		public float pullExag;

		[Token(Token = "0x40011CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float strongPullFactor;

		[Token(Token = "0x40011CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Header("Pull Impulse Boost")]
		public float pullImpulse;

		[Token(Token = "0x40011D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Pull Up Near Ground")]
		public float pullUpMinDist;

		[Token(Token = "0x40011D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float pullUpMaxDist;

		[Token(Token = "0x40011D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float pullUpMul;

		[Token(Token = "0x40011D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float pullUpVelocityMul;

		[Token(Token = "0x40011D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Haptics")]
		public float hapticMinAccel;

		[Token(Token = "0x40011D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float hapticMul;

		[Token(Token = "0x40011D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float hapticFrequency;

		[Token(Token = "0x40011D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float hapticMax;

		[Token(Token = "0x40011D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Grapple Sidegrade")]
		public bool grappleSidegrade;

		[Token(Token = "0x40011D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float reelInSpeed;

		[Token(Token = "0x40011DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float handVelocityMul;

		[Token(Token = "0x40011DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float reelInDamping;

		[Token(Token = "0x40011DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float sidewaysDamping;

		[Token(Token = "0x40011DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float antiGrav;

		[Token(Token = "0x40011DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float hookShootSpeed;

		[Token(Token = "0x40011DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public GameObject cablePrefab;

		[Token(Token = "0x40011E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public HookAI hookPrefab;

		[Token(Token = "0x40011E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Sound hookLaunchSound;

		[Token(Token = "0x40011E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Sound hookLaunchZipSound;

		[Token(Token = "0x40011E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Sound hookReelingSound;

		[Token(Token = "0x40011E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Sound hookLatchSound;

		[Token(Token = "0x40011E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Header("Shot Sidegrade")]
		public bool shotEnabled;

		[Token(Token = "0x40011E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Rigidbody shotPrefab;

		[Token(Token = "0x40011E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public float shotSpeed;

		[Token(Token = "0x40011E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[Header("Other")]
		public float maxRayDist;

		[Token(Token = "0x40011E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public GameObject webPrefab;

		[Token(Token = "0x40011EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Sound shootSound;

		[Token(Token = "0x40011EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public float uvYScale;

		[Token(Token = "0x40011EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public ProjectileThrowing netThrowing;

		[Token(Token = "0x40011ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public TetherAI tetherPrefab;

		[Token(Token = "0x40011EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private GrabbedObject? grabbed;

		[Token(Token = "0x40011EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private GameObject myCable;

		[Token(Token = "0x40011F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private HookAI myHook;

		[Token(Token = "0x40011F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Material myMaterial;

		[Token(Token = "0x40011F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private GameObject myWeb;

		[Token(Token = "0x40011F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private float prefLength;

		[Token(Token = "0x40011F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private Vector3 prevLocalPos;

		[Token(Token = "0x170001CD")]
		private float MaxMass
		{
			[Token(Token = "0x6001070")]
			[Address(RVA = "0xEA1A3C", Offset = "0xEA1A3C", VA = "0xEA1A3C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001071")]
		[Address(RVA = "0xEA1A6C", Offset = "0xEA1A6C", VA = "0xEA1A6C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001072")]
		[Address(RVA = "0xEA1ADC", Offset = "0xEA1ADC", VA = "0xEA1ADC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001073")]
		[Address(RVA = "0xEA2944", Offset = "0xEA2944", VA = "0xEA2944")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001074")]
		[Address(RVA = "0xEA3F78", Offset = "0xEA3F78", VA = "0xEA3F78")]
		public WebSlinger()
		{
		}
	}
	[Token(Token = "0x2000312")]
	public class Wing : MovementMode
	{
		[Token(Token = "0x2000313")]
		private struct FeatherModel
		{
			[Token(Token = "0x400121D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public GameObject model;

			[Token(Token = "0x400121E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Vector3 localPos;

			[Token(Token = "0x400121F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Quaternion localRot;

			[Token(Token = "0x4001220")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float spawnTime;
		}

		[Token(Token = "0x40011F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Wings")]
		public float exag;

		[Token(Token = "0x40011F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float drag;

		[Token(Token = "0x40011F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float maxSpeed;

		[Token(Token = "0x40011F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int dragResX;

		[Token(Token = "0x40011F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int dragResZ;

		[Token(Token = "0x40011FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float updraftSpeed;

		[Token(Token = "0x40011FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Feathers")]
		public float fireRate;

		[Token(Token = "0x40011FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float disappearTime;

		[Token(Token = "0x40011FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool fireOnDisappear;

		[Token(Token = "0x40011FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject featherModelPrefab;

		[Token(Token = "0x40011FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject featherProjectilePrefab;

		[Token(Token = "0x4001200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float fireSpeed;

		[Token(Token = "0x4001201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float speedOnFire;

		[Token(Token = "0x4001202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float fireSoundMul;

		[Token(Token = "0x4001203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Header("Auto-flap Sidegrade")]
		public bool autoflapEnabled;

		[Token(Token = "0x4001204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float matchSpeedRate;

		[Token(Token = "0x4001205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float maxFlapSpeed;

		[Token(Token = "0x4001206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float dragMult;

		[Token(Token = "0x4001207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float rotationStrength;

		[Token(Token = "0x4001208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public GameObject[] duplicateWings;

		[Token(Token = "0x4001209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Sound autoFlapSound;

		[Token(Token = "0x400120A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Header("Booster Sidegrade")]
		public bool boosterEnabled;

		[Token(Token = "0x400120B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float maxFuel;

		[Token(Token = "0x400120C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float fuelConsumptionRate;

		[Token(Token = "0x400120D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float fuelRechargeRate;

		[Token(Token = "0x400120E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float thrustAccel;

		[Token(Token = "0x400120F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float maxEmissionRate;

		[Token(Token = "0x4001210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public ParticleSystem flameStream;

		[Token(Token = "0x4001211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Sound thrusterSound;

		[Token(Token = "0x4001212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Header("Parts")]
		public Transform followTransform;

		[Token(Token = "0x4001213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public FollowController followController;

		[Token(Token = "0x4001214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public GameObject myWing;

		[Token(Token = "0x4001215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Sound flapSound;

		[Token(Token = "0x4001216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Sound fireSound;

		[Token(Token = "0x4001217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float averageFlapStrength;

		[Token(Token = "0x4001218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float currentFuel;

		[Token(Token = "0x4001219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private List<FeatherModel> featherModels;

		[Token(Token = "0x400121A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private MeshRenderer[] mainWingRenderers;

		[Token(Token = "0x400121B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Vector3[] prevPos;

		[Token(Token = "0x400121C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private float sinceLastSpawn;

		[Token(Token = "0x6001075")]
		[Address(RVA = "0xEA5034", Offset = "0xEA5034", VA = "0xEA5034")]
		private void Start()
		{
		}

		[Token(Token = "0x6001076")]
		[Address(RVA = "0xEA5130", Offset = "0xEA5130", VA = "0xEA5130")]
		private void Update()
		{
		}

		[Token(Token = "0x6001077")]
		[Address(RVA = "0xEA61A8", Offset = "0xEA61A8", VA = "0xEA61A8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001078")]
		[Address(RVA = "0xEA5C24", Offset = "0xEA5C24", VA = "0xEA5C24")]
		private void SetWingPosition()
		{
		}

		[Token(Token = "0x6001079")]
		[Address(RVA = "0xEA5FBC", Offset = "0xEA5FBC", VA = "0xEA5FBC")]
		private void Fire(FeatherModel featherModel)
		{
		}

		[Token(Token = "0x600107A")]
		[Address(RVA = "0xEA6C1C", Offset = "0xEA6C1C", VA = "0xEA6C1C")]
		public Wing()
		{
		}
	}
}
namespace Player.General_Movement
{
	[Token(Token = "0x2000315")]
	public class CustomDrag : MonoBehaviour
	{
		[Token(Token = "0x4001223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float linearDrag;

		[Token(Token = "0x4001224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float quadraticDrag;

		[Token(Token = "0x4001225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Rigidbody myRigidbody;

		[Token(Token = "0x600107E")]
		[Address(RVA = "0xEA6E1C", Offset = "0xEA6E1C", VA = "0xEA6E1C")]
		private void Start()
		{
		}

		[Token(Token = "0x600107F")]
		[Address(RVA = "0xEA6E7C", Offset = "0xEA6E7C", VA = "0xEA6E7C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001080")]
		[Address(RVA = "0xEA6F58", Offset = "0xEA6F58", VA = "0xEA6F58")]
		public CustomDrag()
		{
		}
	}
	[Token(Token = "0x2000316")]
	public class Jump : MonoBehaviour
	{
		[Token(Token = "0x4001226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float headCoyoteTime;

		[Token(Token = "0x4001227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float buttonCoyoteTime;

		[Token(Token = "0x4001228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float heightSmoothTime;

		[Token(Token = "0x4001229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float minHeightDiff;

		[Token(Token = "0x400122A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float speedMultiplier;

		[Token(Token = "0x400122B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float buttonJumpSpeed;

		[Token(Token = "0x400122C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float jumpCooldown;

		[Token(Token = "0x400122D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float disableTimeOnStart;

		[Token(Token = "0x400122E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float currentHeightDiff;

		[Token(Token = "0x400122F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float lastJumpTime;

		[Token(Token = "0x4001230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float minY;

		[Token(Token = "0x4001231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float sinceOnGround;

		[Token(Token = "0x170001CE")]
		private PlayerManager player
		{
			[Token(Token = "0x6001081")]
			[Address(RVA = "0xEA6F6C", Offset = "0xEA6F6C", VA = "0xEA6F6C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001082")]
		[Address(RVA = "0xEA6FB4", Offset = "0xEA6FB4", VA = "0xEA6FB4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001083")]
		[Address(RVA = "0xEA724C", Offset = "0xEA724C", VA = "0xEA724C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001084")]
		[Address(RVA = "0xEA73A4", Offset = "0xEA73A4", VA = "0xEA73A4")]
		public Jump()
		{
		}
	}
	[Token(Token = "0x2000317")]
	public class SnapTurn : MonoBehaviour
	{
		[Token(Token = "0x2000318")]
		[CompilerGenerated]
		private sealed class <DoRotatePlayer>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001236")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001237")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001238")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SnapTurn <>4__this;

			[Token(Token = "0x4001239")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float angle;

			[Token(Token = "0x170001CF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600108B")]
				[Address(RVA = "0xEA7898", Offset = "0xEA7898", VA = "0xEA7898", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600108D")]
				[Address(RVA = "0xEA78E0", Offset = "0xEA78E0", VA = "0xEA78E0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001088")]
			[Address(RVA = "0xEA7654", Offset = "0xEA7654", VA = "0xEA7654")]
			[DebuggerHidden]
			public <DoRotatePlayer>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6001089")]
			[Address(RVA = "0xEA76A4", Offset = "0xEA76A4", VA = "0xEA76A4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600108A")]
			[Address(RVA = "0xEA76A8", Offset = "0xEA76A8", VA = "0xEA76A8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600108C")]
			[Address(RVA = "0xEA78A0", Offset = "0xEA78A0", VA = "0xEA78A0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool fadeScreen;

		[Token(Token = "0x4001233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float fadeTime;

		[Token(Token = "0x4001234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color screenFadeColor;

		[Token(Token = "0x4001235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool canRotate;

		[Token(Token = "0x6001085")]
		[Address(RVA = "0xEA73CC", Offset = "0xEA73CC", VA = "0xEA73CC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001086")]
		[Address(RVA = "0xEA75D0", Offset = "0xEA75D0", VA = "0xEA75D0")]
		[IteratorStateMachine(typeof(<DoRotatePlayer>d__5))]
		private IEnumerator DoRotatePlayer(float angle)
		{
			return null;
		}

		[Token(Token = "0x6001087")]
		[Address(RVA = "0xEA767C", Offset = "0xEA767C", VA = "0xEA767C")]
		public SnapTurn()
		{
		}
	}
	[Token(Token = "0x2000319")]
	public class UnderwaterDrag : MonoBehaviour
	{
		[Token(Token = "0x400123A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float waterHeight;

		[Token(Token = "0x400123B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float linearDrag;

		[Token(Token = "0x400123C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float quadraticDrag;

		[Token(Token = "0x400123D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Rigidbody myRigidbody;

		[Token(Token = "0x600108E")]
		[Address(RVA = "0xEA78E8", Offset = "0xEA78E8", VA = "0xEA78E8")]
		private void Start()
		{
		}

		[Token(Token = "0x600108F")]
		[Address(RVA = "0xEA7948", Offset = "0xEA7948", VA = "0xEA7948")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001090")]
		[Address(RVA = "0xEA7A58", Offset = "0xEA7A58", VA = "0xEA7A58")]
		public UnderwaterDrag()
		{
		}
	}
	[Token(Token = "0x200031A")]
	public class Walking : MonoBehaviour
	{
		[Token(Token = "0x400123E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float targetSpeed;

		[Token(Token = "0x400123F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float accelRate;

		[Token(Token = "0x4001240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float airAccel;

		[Token(Token = "0x4001241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float brakeRate;

		[Token(Token = "0x4001242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float sphereRadius;

		[Token(Token = "0x4001243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float deadzone;

		[Token(Token = "0x4001244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float minArmSwingSpeed;

		[Token(Token = "0x4001245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float maxArmSwingSpeed;

		[Token(Token = "0x4001246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float armSwingExtraStrength;

		[Token(Token = "0x4001247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float armSwingSmoothing;

		[Token(Token = "0x4001248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool hasPrevFrame;

		[Token(Token = "0x4001249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 prevGoalDir;

		[Token(Token = "0x400124A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 prevLeftPos;

		[Token(Token = "0x400124B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 prevRightPos;

		[Token(Token = "0x170001D1")]
		private Rigidbody PlayerRigidbody
		{
			[Token(Token = "0x6001091")]
			[Address(RVA = "0xEA7A6C", Offset = "0xEA7A6C", VA = "0xEA7A6C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D2")]
		private Vector3 LeftIrlPos
		{
			[Token(Token = "0x6001092")]
			[Address(RVA = "0xEA7AC0", Offset = "0xEA7AC0", VA = "0xEA7AC0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170001D3")]
		private Vector3 RightIrlPos
		{
			[Token(Token = "0x6001093")]
			[Address(RVA = "0xEA7B34", Offset = "0xEA7B34", VA = "0xEA7B34")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6001094")]
		[Address(RVA = "0xEA7BA8", Offset = "0xEA7BA8", VA = "0xEA7BA8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001095")]
		[Address(RVA = "0xEA7C90", Offset = "0xEA7C90", VA = "0xEA7C90")]
		private Vector3 ComputeMovement()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001096")]
		[Address(RVA = "0xEA8274", Offset = "0xEA8274", VA = "0xEA8274")]
		private Vector3 ComputeAccel(Vector3 goalDir)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001097")]
		[Address(RVA = "0xEA863C", Offset = "0xEA863C", VA = "0xEA863C")]
		private bool NearWall()
		{
			return default(bool);
		}

		[Token(Token = "0x6001098")]
		[Address(RVA = "0xEA8718", Offset = "0xEA8718", VA = "0xEA8718")]
		public Walking()
		{
		}
	}
}
namespace Player.Abilities
{
	[Token(Token = "0x200031B")]
	public class BlackHoleAI : MonoBehaviour
	{
		[Token(Token = "0x400124C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody myRigidbody;

		[Token(Token = "0x400124D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TrackInsideTrigger tracker;

		[Token(Token = "0x400124E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform gravityLine;

		[Token(Token = "0x400124F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ParticleSystem myParticleSystem1;

		[Token(Token = "0x4001250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ParticleSystem myParticleSystem2;

		[Token(Token = "0x4001251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ParticleSystem myParticleSystem3;

		[Token(Token = "0x4001252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ParticleSystem myParticleSystem1Quest;

		[Token(Token = "0x4001253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ParticleSystem myParticleSystem2Quest;

		[Token(Token = "0x4001254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ParticleSystem myParticleSystem3Quest;

		[Token(Token = "0x4001255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Sound activeSound;

		[Token(Token = "0x6001099")]
		[Address(RVA = "0xEA8744", Offset = "0xEA8744", VA = "0xEA8744")]
		public void UpdateParticleSystems(float rate)
		{
		}

		[Token(Token = "0x600109A")]
		[Address(RVA = "0xEA87E8", Offset = "0xEA87E8", VA = "0xEA87E8")]
		public BlackHoleAI()
		{
		}
	}
	[Token(Token = "0x200031C")]
	public class ClawManager : MonoBehaviour
	{
		[Token(Token = "0x4001256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float spring;

		[Token(Token = "0x4001257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float springGrabbing;

		[Token(Token = "0x4001258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float dampingRatio;

		[Token(Token = "0x4001259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float maxSpringForce;

		[Token(Token = "0x400125A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float angularSpring;

		[Token(Token = "0x400125B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float angularDampingRatio;

		[Token(Token = "0x400125C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float angularMaxSpringForce;

		[Token(Token = "0x400125D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float grabbingMass;

		[Token(Token = "0x400125E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float punchingMass;

		[Token(Token = "0x400125F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float grabbingInertia;

		[Token(Token = "0x4001260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float punchingInertia;

		[Token(Token = "0x4001261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 handOffset;

		[Token(Token = "0x4001262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ArmPoser armPrefabLeft;

		[Token(Token = "0x4001263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ArmPoser armPrefabRight;

		[Token(Token = "0x4001264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform goal;

		[Token(Token = "0x4001265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject myHand;

		[Token(Token = "0x4001266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FollowController followController;

		[Token(Token = "0x4001267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public GameObject sword;

		[Token(Token = "0x4001268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public ContinualDamage swordDamage;

		[Token(Token = "0x4001269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private GameObject grabbed;

		[Token(Token = "0x400126A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HideInInspector]
		public MovementMode controller;

		[Token(Token = "0x400126B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool punching;

		[Token(Token = "0x400126C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Vector3 prevLocalHandVel;

		[Token(Token = "0x400126D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 prevLocalHandAngularVel;

		[Token(Token = "0x400126E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private ArmPoser myArmPoser;

		[Token(Token = "0x400126F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private ArmRigBehavior myArmRig;

		[Token(Token = "0x4001270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private SphereCollider myHandSphereCollider;

		[Token(Token = "0x4001271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Rigidbody myHandRigidbody;

		[Token(Token = "0x4001272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Sound spinSound;

		[Token(Token = "0x4001273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Sound swordSpawnSound;

		[Token(Token = "0x170001D4")]
		private float Spring
		{
			[Token(Token = "0x600109B")]
			[Address(RVA = "0xEA87F0", Offset = "0xEA87F0", VA = "0xEA87F0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001D5")]
		private float MaxSpringForce
		{
			[Token(Token = "0x600109C")]
			[Address(RVA = "0xEA8868", Offset = "0xEA8868", VA = "0xEA8868")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001D6")]
		private float HandMass
		{
			[Token(Token = "0x600109D")]
			[Address(RVA = "0xEA88D0", Offset = "0xEA88D0", VA = "0xEA88D0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001D7")]
		private float HandInertia
		{
			[Token(Token = "0x600109E")]
			[Address(RVA = "0xEA88EC", Offset = "0xEA88EC", VA = "0xEA88EC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600109F")]
		[Address(RVA = "0xEA8908", Offset = "0xEA8908", VA = "0xEA8908")]
		public void InitializeClaw(MovementMode controller)
		{
		}

		[Token(Token = "0x60010A0")]
		[Address(RVA = "0xEA8C5C", Offset = "0xEA8C5C", VA = "0xEA8C5C")]
		public bool Grabbing()
		{
			return default(bool);
		}

		[Token(Token = "0x60010A1")]
		[Address(RVA = "0xEA8CBC", Offset = "0xEA8CBC", VA = "0xEA8CBC")]
		public void Release()
		{
		}

		[Token(Token = "0x60010A2")]
		[Address(RVA = "0xEA8D54", Offset = "0xEA8D54", VA = "0xEA8D54")]
		public void SetGoal(Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x60010A3")]
		[Address(RVA = "0xEA8D70", Offset = "0xEA8D70", VA = "0xEA8D70")]
		public void SetPunching(bool punching)
		{
		}

		[Token(Token = "0x60010A4")]
		[Address(RVA = "0xEA8ECC", Offset = "0xEA8ECC", VA = "0xEA8ECC")]
		public void SetScale(float scale)
		{
		}

		[Token(Token = "0x60010A5")]
		[Address(RVA = "0xEA8FFC", Offset = "0xEA8FFC", VA = "0xEA8FFC")]
		public void SpinHand(float amt)
		{
		}

		[Token(Token = "0x60010A6")]
		[Address(RVA = "0xEA9020", Offset = "0xEA9020", VA = "0xEA9020")]
		public bool TryGrab(Vector3 origin)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A7")]
		[Address(RVA = "0xEA92E8", Offset = "0xEA92E8", VA = "0xEA92E8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60010A8")]
		[Address(RVA = "0xEA9B1C", Offset = "0xEA9B1C", VA = "0xEA9B1C")]
		public ClawManager()
		{
		}
	}
	[Token(Token = "0x200031D")]
	public class ClawSwordSoundManager : MonoBehaviour
	{
		[Token(Token = "0x4001274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Sound swordImpactSound;

		[Token(Token = "0x4001275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Sound swordSlashSound;

		[Token(Token = "0x4001276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float minTime;

		[Token(Token = "0x4001277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ClawManager clawManager;

		[Token(Token = "0x4001278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 swordLength;

		[Token(Token = "0x4001279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float elapsedTime;

		[Token(Token = "0x400127A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float averageSlashStrength;

		[Token(Token = "0x60010AB")]
		[Address(RVA = "0xEA9C74", Offset = "0xEA9C74", VA = "0xEA9C74")]
		private void Start()
		{
		}

		[Token(Token = "0x60010AC")]
		[Address(RVA = "0xEA9C7C", Offset = "0xEA9C7C", VA = "0xEA9C7C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60010AD")]
		[Address(RVA = "0xEA9C9C", Offset = "0xEA9C9C", VA = "0xEA9C9C")]
		private void Update()
		{
		}

		[Token(Token = "0x60010AE")]
		[Address(RVA = "0xEA9DEC", Offset = "0xEA9DEC", VA = "0xEA9DEC")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60010AF")]
		[Address(RVA = "0xEA9E28", Offset = "0xEA9E28", VA = "0xEA9E28")]
		public ClawSwordSoundManager()
		{
		}
	}
	[Token(Token = "0x200031E")]
	public class CobwebAI : MonoBehaviour
	{
		[Token(Token = "0x400127B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float damperStrength;

		[Token(Token = "0x400127C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float maxMass;

		[Token(Token = "0x400127D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public StickToObject stickToObject;

		[Token(Token = "0x400127E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public GrabbedObject grabbed;

		[Token(Token = "0x60010B0")]
		[Address(RVA = "0xEA9E4C", Offset = "0xEA9E4C", VA = "0xEA9E4C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60010B1")]
		[Address(RVA = "0xEA9EF8", Offset = "0xEA9EF8", VA = "0xEA9EF8")]
		public CobwebAI()
		{
		}
	}
	[Token(Token = "0x200031F")]
	public class FeatherAI : MonoBehaviour
	{
		[Token(Token = "0x400127F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float damage;

		[Token(Token = "0x4001280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public StickToObject featherStuckPrefab;

		[Token(Token = "0x4001281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ScaleOverTime scaleOverTime;

		[Token(Token = "0x60010B2")]
		[Address(RVA = "0xEA9F0C", Offset = "0xEA9F0C", VA = "0xEA9F0C")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60010B3")]
		[Address(RVA = "0xEAA19C", Offset = "0xEAA19C", VA = "0xEAA19C")]
		public FeatherAI()
		{
		}
	}
	[Token(Token = "0x2000320")]
	public class HookAI : MonoBehaviour
	{
		[Token(Token = "0x4001282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody myRigidbody;

		[Token(Token = "0x4001283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool collided;

		[Token(Token = "0x4001284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Collision collision;

		[Token(Token = "0x60010B4")]
		[Address(RVA = "0xEAA1AC", Offset = "0xEAA1AC", VA = "0xEAA1AC")]
		public void OnCollisionEnter(Collision other)
		{
		}

		[Token(Token = "0x60010B5")]
		[Address(RVA = "0xEAA258", Offset = "0xEAA258", VA = "0xEAA258")]
		public HookAI()
		{
		}
	}
	[Token(Token = "0x2000321")]
	public class IcicleAI : MonoBehaviour
	{
		[Token(Token = "0x4001285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rotateSpeed;

		[Token(Token = "0x4001286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float rotateSpeedLerp;

		[Token(Token = "0x4001287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float goalDirectionDecay;

		[NonSerialized]
		[Token(Token = "0x4001288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 goalDirection;

		[Token(Token = "0x4001289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody myRigidbody;

		[Token(Token = "0x60010B6")]
		[Address(RVA = "0xEAA260", Offset = "0xEAA260", VA = "0xEAA260")]
		private void Start()
		{
		}

		[Token(Token = "0x60010B7")]
		[Address(RVA = "0xEAA2B8", Offset = "0xEAA2B8", VA = "0xEAA2B8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60010B8")]
		[Address(RVA = "0xEAA550", Offset = "0xEAA550", VA = "0xEAA550")]
		public IcicleAI()
		{
		}
	}
	[Token(Token = "0x2000322")]
	public class LaserBlastAI : MonoBehaviour
	{
		[Token(Token = "0x2000323")]
		[CompilerGenerated]
		private sealed class <Start>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001297")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001298")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001299")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LaserBlastAI <>4__this;

			[Token(Token = "0x170001D9")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010C2")]
				[Address(RVA = "0xEAAF38", Offset = "0xEAAF38", VA = "0xEAAF38", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001DA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010C4")]
				[Address(RVA = "0xEAAF80", Offset = "0xEAAF80", VA = "0xEAAF80", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010BF")]
			[Address(RVA = "0xEAA668", Offset = "0xEAA668", VA = "0xEAA668")]
			[DebuggerHidden]
			public <Start>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x60010C0")]
			[Address(RVA = "0xEAADC4", Offset = "0xEAADC4", VA = "0xEAADC4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010C1")]
			[Address(RVA = "0xEAADC8", Offset = "0xEAADC8", VA = "0xEAADC8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010C3")]
			[Address(RVA = "0xEAAF40", Offset = "0xEAAF40", VA = "0xEAAF40", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400128A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject eyeLaserImpactFX;

		[Token(Token = "0x400128B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject collider;

		[Token(Token = "0x400128C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Sound sound;

		[Token(Token = "0x400128D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float maxLength;

		[Token(Token = "0x400128E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float initialLength;

		[Token(Token = "0x400128F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float knockbackForce;

		[Token(Token = "0x4001290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<Transform> toScale;

		[Token(Token = "0x4001291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<GameObject> disableOnStopAttack;

		[Token(Token = "0x4001292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float windupTime;

		[Token(Token = "0x4001293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float endTime;

		[Token(Token = "0x4001294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public Telekinesis telekinesisMode;

		[Token(Token = "0x4001295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public float startTime;

		[Token(Token = "0x4001296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool attackDone;

		[Token(Token = "0x170001D8")]
		public bool AttackOff
		{
			[Token(Token = "0x60010B9")]
			[Address(RVA = "0xEAA56C", Offset = "0xEAA56C", VA = "0xEAA56C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60010BA")]
		[Address(RVA = "0xEAA5F4", Offset = "0xEAA5F4", VA = "0xEAA5F4")]
		[IteratorStateMachine(typeof(<Start>d__15))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x60010BB")]
		[Address(RVA = "0xEAA690", Offset = "0xEAA690", VA = "0xEAA690")]
		private void Update()
		{
		}

		[Token(Token = "0x60010BC")]
		[Address(RVA = "0xEAAA48", Offset = "0xEAAA48", VA = "0xEAAA48")]
		private void Rescale(float scale)
		{
		}

		[Token(Token = "0x60010BD")]
		[Address(RVA = "0xEAABB4", Offset = "0xEAABB4", VA = "0xEAABB4")]
		public void StopAttack()
		{
		}

		[Token(Token = "0x60010BE")]
		[Address(RVA = "0xEAAD98", Offset = "0xEAAD98", VA = "0xEAAD98")]
		public LaserBlastAI()
		{
		}
	}
	[Token(Token = "0x2000324")]
	public class MaintainEnergy : MonoBehaviour
	{
		[Token(Token = "0x400129A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxExtraEnergy;

		[Token(Token = "0x400129B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float accelMax;

		[Token(Token = "0x400129C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float minVelocity;

		[Token(Token = "0x400129D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float energyDecay;

		[Token(Token = "0x400129E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float recentEnergyHigh;

		[Token(Token = "0x170001DB")]
		private Rigidbody PlayerRigidbody
		{
			[Token(Token = "0x60010C5")]
			[Address(RVA = "0xEAAF88", Offset = "0xEAAF88", VA = "0xEAAF88")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DC")]
		private Transform Head
		{
			[Token(Token = "0x60010C6")]
			[Address(RVA = "0xEAAFDC", Offset = "0xEAAFDC", VA = "0xEAAFDC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010C7")]
		[Address(RVA = "0xEAB030", Offset = "0xEAB030", VA = "0xEAB030")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60010C8")]
		[Address(RVA = "0xEAB318", Offset = "0xEAB318", VA = "0xEAB318")]
		public MaintainEnergy()
		{
		}
	}
	[Token(Token = "0x2000325")]
	public class MissileAI : MonoBehaviour
	{
		[Token(Token = "0x400129F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 accel;

		[Token(Token = "0x40012A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Rigidbody myRigidbody;

		[Token(Token = "0x60010C9")]
		[Address(RVA = "0xEAB32C", Offset = "0xEAB32C", VA = "0xEAB32C")]
		private void Start()
		{
		}

		[Token(Token = "0x60010CA")]
		[Address(RVA = "0xEAB384", Offset = "0xEAB384", VA = "0xEAB384")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60010CB")]
		[Address(RVA = "0xEAB3D0", Offset = "0xEAB3D0", VA = "0xEAB3D0")]
		public MissileAI()
		{
		}
	}
	[Token(Token = "0x2000326")]
	public class NetAI : MonoBehaviour
	{
		[Token(Token = "0x40012A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int numCobwebs;

		[Token(Token = "0x40012A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float explosionSize;

		[Token(Token = "0x40012A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CobwebAI cobwebPrefab;

		[Token(Token = "0x40012A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int numTethers;

		[Token(Token = "0x40012A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float maxTetherLength;

		[Token(Token = "0x40012A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TetherAI tetherPrefab;

		[Token(Token = "0x60010CC")]
		[Address(RVA = "0xEAB3D8", Offset = "0xEAB3D8", VA = "0xEAB3D8")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60010CD")]
		[Address(RVA = "0xEAB8A4", Offset = "0xEAB8A4", VA = "0xEAB8A4")]
		public NetAI()
		{
		}
	}
	[Token(Token = "0x2000327")]
	public class PortalAI : MonoBehaviour
	{
		[Token(Token = "0x40012A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static HashSet<PortalAI> allPortals;

		[Token(Token = "0x40012A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float perObjectCooldown;

		[Token(Token = "0x40012A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve expelAccel;

		[Token(Token = "0x40012AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PortalModelAI portalModel;

		[Token(Token = "0x40012AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve growthCurve;

		[Token(Token = "0x40012AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform scaleTarget;

		[Token(Token = "0x40012AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float minLinkDistance;

		[Token(Token = "0x40012AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject deathEffectPrefab;

		[Token(Token = "0x40012AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Sound sendSound;

		[Token(Token = "0x40012B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public PortalAI otherEnd;

		[Token(Token = "0x40012B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public Transform hand;

		[Token(Token = "0x40012B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static LayerMask? PlayerLayerMask;

		[Token(Token = "0x40012B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float creationTime;

		[Token(Token = "0x40012B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Dictionary<Rigidbody, float> recentTravellers;

		[Token(Token = "0x170001DD")]
		private float CurrentScale
		{
			[Token(Token = "0x60010CE")]
			[Address(RVA = "0xEAB8C4", Offset = "0xEAB8C4", VA = "0xEAB8C4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001DE")]
		private Transform Target
		{
			[Token(Token = "0x60010CF")]
			[Address(RVA = "0xEAB900", Offset = "0xEAB900", VA = "0xEAB900")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010D0")]
		[Address(RVA = "0xEAB988", Offset = "0xEAB988", VA = "0xEAB988")]
		private void Start()
		{
		}

		[Token(Token = "0x60010D1")]
		[Address(RVA = "0xEABBA0", Offset = "0xEABBA0", VA = "0xEABBA0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60010D2")]
		[Address(RVA = "0xEABDC4", Offset = "0xEABDC4", VA = "0xEABDC4")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60010D3")]
		[Address(RVA = "0xEAC39C", Offset = "0xEAC39C", VA = "0xEAC39C")]
		private void OnTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x60010D4")]
		[Address(RVA = "0xEAC5D0", Offset = "0xEAC5D0", VA = "0xEAC5D0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60010D5")]
		[Address(RVA = "0xEAC650", Offset = "0xEAC650", VA = "0xEAC650")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60010D6")]
		[Address(RVA = "0xEAC274", Offset = "0xEAC274", VA = "0xEAC274")]
		private Vector3 NewRbPosition(Rigidbody rb)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010D7")]
		[Address(RVA = "0xEABB38", Offset = "0xEABB38", VA = "0xEABB38")]
		private static LayerMask GetPhysicsLayerMask(int currentLayer)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60010D8")]
		[Address(RVA = "0xEABF7C", Offset = "0xEABF7C", VA = "0xEABF7C")]
		private bool CanSend(Rigidbody rb)
		{
			return default(bool);
		}

		[Token(Token = "0x60010D9")]
		[Address(RVA = "0xEAC6D0", Offset = "0xEAC6D0", VA = "0xEAC6D0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60010DA")]
		[Address(RVA = "0xEAC77C", Offset = "0xEAC77C", VA = "0xEAC77C")]
		public PortalAI()
		{
		}
	}
	[Token(Token = "0x2000328")]
	public class PortalModelAI : MonoBehaviour
	{
		[Token(Token = "0x40012B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MeshRenderer meshRenderer;

		[Token(Token = "0x40012B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<ParticleSystemRenderer> particleSystems;

		[Token(Token = "0x40012B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Sound activeSound;

		[Token(Token = "0x40012B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float previousColor;

		[Token(Token = "0x60010DC")]
		[Address(RVA = "0xEAC8A4", Offset = "0xEAC8A4", VA = "0xEAC8A4")]
		public void Recolor(float angle)
		{
		}

		[Token(Token = "0x60010DD")]
		[Address(RVA = "0xEACB6C", Offset = "0xEACB6C", VA = "0xEACB6C")]
		private static Color RotateHue(Color color, float angle)
		{
			return default(Color);
		}

		[Token(Token = "0x60010DE")]
		[Address(RVA = "0xEACBD8", Offset = "0xEACBD8", VA = "0xEACBD8")]
		public PortalModelAI()
		{
		}
	}
	[Token(Token = "0x2000329")]
	public class ProjectileThrowing : MonoBehaviour
	{
		[Token(Token = "0x40012B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HandInput hand;

		[Token(Token = "0x40012BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float holdDistance;

		[Token(Token = "0x40012BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float holdInwardsDistance;

		[Token(Token = "0x40012BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float holdAwayFromHead;

		[Token(Token = "0x40012BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float handSmoothing;

		[Token(Token = "0x40012BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float handSpeedMul;

		[Token(Token = "0x40012BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool alignToHandOnStart;

		[Token(Token = "0x40012C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool allowRotation;

		[Token(Token = "0x40012C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Rigidbody rockPrefab;

		[Token(Token = "0x40012C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool spawnRockOnPress;

		[Token(Token = "0x40012C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 rockCenter;

		[Token(Token = "0x40012C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool copyAngularVelocity;

		[Token(Token = "0x40012C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform copyStartTranform;

		[Token(Token = "0x40012C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float angularSpeedMul;

		[Token(Token = "0x40012C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float angularAddSpeedFactor;

		[NonSerialized]
		[Token(Token = "0x40012C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool disableRockSpawn;

		[Token(Token = "0x40012C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody heldRock;

		[Token(Token = "0x40012CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 smoothedVelocity;

		[Token(Token = "0x40012CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 prevTargetRockPos;

		[Token(Token = "0x170001DF")]
		private Vector3 EffectiveVelocity
		{
			[Token(Token = "0x60010E0")]
			[Address(RVA = "0xEACD70", Offset = "0xEACD70", VA = "0xEACD70")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x60010DF")]
		[Address(RVA = "0xEACBE0", Offset = "0xEACBE0", VA = "0xEACBE0")]
		private Vector3 TargetRockPos()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010E1")]
		[Address(RVA = "0xEACDF4", Offset = "0xEACDF4", VA = "0xEACDF4")]
		private void SpawnRock()
		{
		}

		[Token(Token = "0x60010E2")]
		[Address(RVA = "0xEAD060", Offset = "0xEAD060", VA = "0xEAD060")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60010E3")]
		[Address(RVA = "0xEAD368", Offset = "0xEAD368", VA = "0xEAD368")]
		private void Update()
		{
		}

		[Token(Token = "0x60010E4")]
		[Address(RVA = "0xEAD5F8", Offset = "0xEAD5F8", VA = "0xEAD5F8")]
		public ProjectileThrowing()
		{
		}
	}
	[Token(Token = "0x200032A")]
	public class RailgunHum : MonoBehaviour
	{
		[Token(Token = "0x200032B")]
		[CompilerGenerated]
		private sealed class <StartHum>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40012CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40012CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40012CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RailgunHum <>4__this;

			[Token(Token = "0x170001E0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010EB")]
				[Address(RVA = "0xEAD7A8", Offset = "0xEAD7A8", VA = "0xEAD7A8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001E1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010ED")]
				[Address(RVA = "0xEAD7F0", Offset = "0xEAD7F0", VA = "0xEAD7F0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010E8")]
			[Address(RVA = "0xEAD6B8", Offset = "0xEAD6B8", VA = "0xEAD6B8")]
			[DebuggerHidden]
			public <StartHum>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x60010E9")]
			[Address(RVA = "0xEAD6E8", Offset = "0xEAD6E8", VA = "0xEAD6E8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010EA")]
			[Address(RVA = "0xEAD6EC", Offset = "0xEAD6EC", VA = "0xEAD6EC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010EC")]
			[Address(RVA = "0xEAD7B0", Offset = "0xEAD7B0", VA = "0xEAD7B0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40012CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Sound humSound;

		[Token(Token = "0x60010E5")]
		[Address(RVA = "0xEAD624", Offset = "0xEAD624", VA = "0xEAD624")]
		private void Awake()
		{
		}

		[Token(Token = "0x60010E6")]
		[Address(RVA = "0xEAD644", Offset = "0xEAD644", VA = "0xEAD644")]
		[IteratorStateMachine(typeof(<StartHum>d__2))]
		private IEnumerator StartHum()
		{
			return null;
		}

		[Token(Token = "0x60010E7")]
		[Address(RVA = "0xEAD6E0", Offset = "0xEAD6E0", VA = "0xEAD6E0")]
		public RailgunHum()
		{
		}
	}
	[Token(Token = "0x200032C")]
	public class RailgunShotAI : MonoBehaviour
	{
		[Token(Token = "0x40012D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ParticleSystem myParticles;

		[Token(Token = "0x40012D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Sound sound;

		[Token(Token = "0x40012D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ContinualDamage continualDamage;

		[Token(Token = "0x60010EE")]
		[Address(RVA = "0xEAD7F8", Offset = "0xEAD7F8", VA = "0xEAD7F8")]
		public void SetPower(float power)
		{
		}

		[Token(Token = "0x60010EF")]
		[Address(RVA = "0xEAD898", Offset = "0xEAD898", VA = "0xEAD898")]
		public RailgunShotAI()
		{
		}
	}
	[Token(Token = "0x200032D")]
	public class ScaleOverTime : MonoBehaviour
	{
		[Token(Token = "0x40012D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve scaleOverTime;

		[Token(Token = "0x40012D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 originalScale;

		[Token(Token = "0x40012D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float timeElapsed;

		[Token(Token = "0x60010F0")]
		[Address(RVA = "0xEAD8A0", Offset = "0xEAD8A0", VA = "0xEAD8A0")]
		private void Start()
		{
		}

		[Token(Token = "0x60010F1")]
		[Address(RVA = "0xEAD8D0", Offset = "0xEAD8D0", VA = "0xEAD8D0")]
		private void Update()
		{
		}

		[Token(Token = "0x60010F2")]
		[Address(RVA = "0xEAD958", Offset = "0xEAD958", VA = "0xEAD958")]
		public ScaleOverTime()
		{
		}
	}
	[Token(Token = "0x200032E")]
	public class StickToObject : MonoBehaviour
	{
		[Token(Token = "0x40012D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool angleToNormal;

		[Token(Token = "0x40012D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GrabbedObject grabbed;

		[Token(Token = "0x40012D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion? initialRot;

		[Token(Token = "0x60010F3")]
		[Address(RVA = "0xEAD960", Offset = "0xEAD960", VA = "0xEAD960")]
		private void Update()
		{
		}

		[Token(Token = "0x60010F4")]
		[Address(RVA = "0xEADC78", Offset = "0xEADC78", VA = "0xEADC78")]
		public StickToObject()
		{
		}
	}
	[Token(Token = "0x200032F")]
	public class TelekinesisHover : MonoBehaviour
	{
		[Token(Token = "0x40012D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float brakeRate;

		[Token(Token = "0x40012DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float brakeMinSpeed;

		[Token(Token = "0x40012DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float newBrakeRate;

		[Token(Token = "0x40012DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<Sound> movementSounds;

		[Token(Token = "0x40012DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float movementSoundVelocityMult;

		[Token(Token = "0x40012DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float movementSoundAccelMult;

		[Token(Token = "0x40012DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float movementSoundDecay;

		[Token(Token = "0x40012E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float hoverVolume;

		[Token(Token = "0x40012E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 accel;

		[Token(Token = "0x40012E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float movementSoundVolume;

		[Token(Token = "0x40012E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float movementSoundAccel;

		[Token(Token = "0x40012E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float movementSoundVelocity;

		[Token(Token = "0x170001E2")]
		private bool FreeFlightSidegrade
		{
			[Token(Token = "0x60010F5")]
			[Address(RVA = "0xEADC80", Offset = "0xEADC80", VA = "0xEADC80")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001E3")]
		private float BrakeRate
		{
			[Token(Token = "0x60010F6")]
			[Address(RVA = "0xEADC8C", Offset = "0xEADC8C", VA = "0xEADC8C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001E4")]
		private Rigidbody PlayerRigidbody
		{
			[Token(Token = "0x60010F7")]
			[Address(RVA = "0xEADD14", Offset = "0xEADD14", VA = "0xEADD14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010F8")]
		[Address(RVA = "0xEADD68", Offset = "0xEADD68", VA = "0xEADD68")]
		private void Start()
		{
		}

		[Token(Token = "0x60010F9")]
		[Address(RVA = "0xEADEBC", Offset = "0xEADEBC", VA = "0xEADEBC")]
		public void AddAccel(Vector3 accel)
		{
		}

		[Token(Token = "0x60010FA")]
		[Address(RVA = "0xEADEDC", Offset = "0xEADEDC", VA = "0xEADEDC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60010FB")]
		[Address(RVA = "0xEAE568", Offset = "0xEAE568", VA = "0xEAE568")]
		public TelekinesisHover()
		{
		}
	}
	[Token(Token = "0x2000330")]
	public class TetherAI : MonoBehaviour
	{
		[Token(Token = "0x40012E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float forceStrength;

		[Token(Token = "0x40012E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float damperStrength;

		[Token(Token = "0x40012E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float uvYScale;

		[Token(Token = "0x40012E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float maxMass;

		[Token(Token = "0x40012E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float reelInRate;

		[Token(Token = "0x40012EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float maxReelInTime;

		[Token(Token = "0x40012EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject model;

		[Token(Token = "0x40012EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject webFloor1;

		[Token(Token = "0x40012ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject webFloor2;

		[Token(Token = "0x40012EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public Vector3 initialPos1;

		[Token(Token = "0x40012EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[HideInInspector]
		public Vector3 initialPos2;

		[Token(Token = "0x40012F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float elapsedTime;

		[Token(Token = "0x40012F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public GrabbedObject g1;

		[Token(Token = "0x40012F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[HideInInspector]
		public GrabbedObject g2;

		[Token(Token = "0x40012F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Lifetime lifetime;

		[Token(Token = "0x40012F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Material myMaterial;

		[Token(Token = "0x60010FC")]
		[Address(RVA = "0xEAE594", Offset = "0xEAE594", VA = "0xEAE594")]
		private void Start()
		{
		}

		[Token(Token = "0x60010FD")]
		[Address(RVA = "0xEAE7C0", Offset = "0xEAE7C0", VA = "0xEAE7C0")]
		private void Update()
		{
		}

		[Token(Token = "0x60010FE")]
		[Address(RVA = "0xEAECF4", Offset = "0xEAECF4", VA = "0xEAECF4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60010FF")]
		[Address(RVA = "0xEAF07C", Offset = "0xEAF07C", VA = "0xEAF07C")]
		public TetherAI()
		{
		}
	}
	[Token(Token = "0x2000331")]
	public class WarpAI : MonoBehaviour
	{
		[Token(Token = "0x40012F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static HashSet<WarpAI> allWarps;

		[Token(Token = "0x40012F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float warpMinTime;

		[Token(Token = "0x40012F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float warpMaxSpeed;

		[Token(Token = "0x40012F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float perObjectCooldown;

		[Token(Token = "0x40012F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PortalModelAI portalModel;

		[Token(Token = "0x40012FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve growthCurve;

		[Token(Token = "0x40012FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform scaleTarget;

		[Token(Token = "0x40012FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float minLinkDistance;

		[Token(Token = "0x40012FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject deathEffectPrefab;

		[Token(Token = "0x40012FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Sound sendSound;

		[Token(Token = "0x40012FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public WarpAI otherEnd;

		[Token(Token = "0x4001300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public Transform hand;

		[Token(Token = "0x4001301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static LayerMask? PlayerLayerMask;

		[Token(Token = "0x4001302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float creationTime;

		[Token(Token = "0x4001303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Dictionary<Rigidbody, float> recentTravellers;

		[Token(Token = "0x170001E5")]
		private float CurrentScale
		{
			[Token(Token = "0x6001100")]
			[Address(RVA = "0xEAF09C", Offset = "0xEAF09C", VA = "0xEAF09C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001E6")]
		private Transform Target
		{
			[Token(Token = "0x6001101")]
			[Address(RVA = "0xEAF0D8", Offset = "0xEAF0D8", VA = "0xEAF0D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001102")]
		[Address(RVA = "0xEAF160", Offset = "0xEAF160", VA = "0xEAF160")]
		private void Start()
		{
		}

		[Token(Token = "0x6001103")]
		[Address(RVA = "0xEAF378", Offset = "0xEAF378", VA = "0xEAF378")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001104")]
		[Address(RVA = "0xEAF59C", Offset = "0xEAF59C", VA = "0xEAF59C")]
		private float WarpSpeed(float distance)
		{
			return default(float);
		}

		[Token(Token = "0x6001105")]
		[Address(RVA = "0xEAF5B0", Offset = "0xEAF5B0", VA = "0xEAF5B0")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001106")]
		[Address(RVA = "0xEAF9A0", Offset = "0xEAF9A0", VA = "0xEAF9A0")]
		private void OnTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x6001107")]
		[Address(RVA = "0xEAFC44", Offset = "0xEAFC44", VA = "0xEAFC44")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001108")]
		[Address(RVA = "0xEAFCC4", Offset = "0xEAFCC4", VA = "0xEAFCC4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001109")]
		[Address(RVA = "0xEAFD44", Offset = "0xEAFD44", VA = "0xEAFD44")]
		private Vector3 NewRbPosition(Rigidbody rb)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600110A")]
		[Address(RVA = "0xEAF310", Offset = "0xEAF310", VA = "0xEAF310")]
		private static LayerMask GetPhysicsLayerMask(int currentLayer)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x600110B")]
		[Address(RVA = "0xEAF854", Offset = "0xEAF854", VA = "0xEAF854")]
		private bool CanSend(Rigidbody rb)
		{
			return default(bool);
		}

		[Token(Token = "0x600110C")]
		[Address(RVA = "0xEAFE6C", Offset = "0xEAFE6C", VA = "0xEAFE6C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600110D")]
		[Address(RVA = "0xEAFF18", Offset = "0xEAFF18", VA = "0xEAFF18")]
		public WarpAI()
		{
		}
	}
}
namespace Missions
{
	[Token(Token = "0x2000332")]
	public class GrassAchievements : MonoBehaviour
	{
		[Token(Token = "0x600110F")]
		[Address(RVA = "0xEB004C", Offset = "0xEB004C", VA = "0xEB004C")]
		private void OnCollisionEnter(Collision other)
		{
		}

		[Token(Token = "0x6001110")]
		[Address(RVA = "0xEB015C", Offset = "0xEB015C", VA = "0xEB015C")]
		public GrassAchievements()
		{
		}
	}
	[Token(Token = "0x2000333")]
	public class MissionManager : MonoBehaviour
	{
		[Token(Token = "0x4001304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static MissionManager Instance;

		[Token(Token = "0x4001305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject prompts;

		[Token(Token = "0x4001306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject winEffectPrefab;

		[Token(Token = "0x4001307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Task currentMissionTask;

		[Token(Token = "0x6001111")]
		[Address(RVA = "0xEB0164", Offset = "0xEB0164", VA = "0xEB0164")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001112")]
		[Address(RVA = "0xEB01BC", Offset = "0xEB01BC", VA = "0xEB01BC")]
		public MissionMarker AddMissionMarker(MissionMarker missionMarkerPrefab, Vector3 position, string name, LocalizedString nameKey, LocalizedString descriptionKey)
		{
			return null;
		}

		[Token(Token = "0x6001113")]
		[Address(RVA = "0xEB0300", Offset = "0xEB0300", VA = "0xEB0300")]
		private void SetCurrentMissionTask(Task task)
		{
		}

		[Token(Token = "0x6001114")]
		[Address(RVA = "0xEB0480", Offset = "0xEB0480", VA = "0xEB0480")]
		public void StartMission(Func<Task> taskSpawner)
		{
		}

		[Token(Token = "0x6001115")]
		[Address(RVA = "0xEB05E0", Offset = "0xEB05E0", VA = "0xEB05E0")]
		public MissionManager()
		{
		}
	}
	[Token(Token = "0x2000334")]
	public class MissionMarker : MonoBehaviour
	{
		[Token(Token = "0x4001308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MenuController menu;

		[Token(Token = "0x4001309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Func<Task> taskSpawner;

		[Token(Token = "0x400130A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject missionName;

		[Token(Token = "0x400130B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public LocalizedString localizedMissionNameKey;

		[Token(Token = "0x400130C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject missionDescription;

		[Token(Token = "0x400130D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public LocalizedString localizedMissionDescriptionKey;

		[Token(Token = "0x6001118")]
		[Address(RVA = "0xEB069C", Offset = "0xEB069C", VA = "0xEB069C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001119")]
		[Address(RVA = "0xEB07E0", Offset = "0xEB07E0", VA = "0xEB07E0")]
		public void StartMission()
		{
		}

		[Token(Token = "0x600111A")]
		[Address(RVA = "0xEB0838", Offset = "0xEB0838", VA = "0xEB0838")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600111B")]
		[Address(RVA = "0xEB08C0", Offset = "0xEB08C0", VA = "0xEB08C0")]
		public MissionMarker()
		{
		}
	}
	[Token(Token = "0x2000335")]
	public class Task : MonoBehaviour
	{
		[Token(Token = "0x2000336")]
		public enum TaskStatus
		{
			[Token(Token = "0x4001315")]
			Inactive,
			[Token(Token = "0x4001316")]
			Running,
			[Token(Token = "0x4001317")]
			Won,
			[Token(Token = "0x4001318")]
			Lost,
			[Token(Token = "0x4001319")]
			Aborted
		}

		[Token(Token = "0x400130E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent begin;

		[Token(Token = "0x400130F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent win;

		[Token(Token = "0x4001310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEvent lose;

		[Token(Token = "0x4001311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEvent abort;

		[Token(Token = "0x4001312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEvent cleanup;

		[Token(Token = "0x4001313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private TaskStatus status;

		[Token(Token = "0x600111C")]
		[Address(RVA = "0xEB08C8", Offset = "0xEB08C8", VA = "0xEB08C8", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600111D")]
		[Address(RVA = "0xEB08EC", Offset = "0xEB08EC", VA = "0xEB08EC")]
		private void Transition(TaskStatus oldStatus, TaskStatus newStatus)
		{
		}

		[Token(Token = "0x600111E")]
		[Address(RVA = "0xEB05A0", Offset = "0xEB05A0", VA = "0xEB05A0")]
		public void Begin()
		{
		}

		[Token(Token = "0x600111F")]
		[Address(RVA = "0xEB08F4", Offset = "0xEB08F4", VA = "0xEB08F4")]
		public void Win()
		{
		}

		[Token(Token = "0x6001120")]
		[Address(RVA = "0xEB095C", Offset = "0xEB095C", VA = "0xEB095C")]
		public void Lose()
		{
		}

		[Token(Token = "0x6001121")]
		[Address(RVA = "0xEB098C", Offset = "0xEB098C", VA = "0xEB098C")]
		public void Abort()
		{
		}

		[Token(Token = "0x6001122")]
		[Address(RVA = "0xEB046C", Offset = "0xEB046C", VA = "0xEB046C")]
		public void AbortIfRunning()
		{
		}

		[Token(Token = "0x6001123")]
		[Address(RVA = "0xEB0924", Offset = "0xEB0924", VA = "0xEB0924")]
		private void Cleanup()
		{
		}

		[Token(Token = "0x6001124")]
		[Address(RVA = "0xEB09BC", Offset = "0xEB09BC", VA = "0xEB09BC")]
		protected Task[] GetSubtasks()
		{
			return null;
		}

		[Token(Token = "0x6001125")]
		[Address(RVA = "0xEB0B80", Offset = "0xEB0B80", VA = "0xEB0B80")]
		public Task()
		{
		}
	}
}
namespace Missions.Tutorial
{
	[Token(Token = "0x2000338")]
	public class HackBotKillCount : MonoBehaviour
	{
		[Token(Token = "0x600112A")]
		[Address(RVA = "0xEB0CC8", Offset = "0xEB0CC8", VA = "0xEB0CC8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600112B")]
		[Address(RVA = "0xEB0E04", Offset = "0xEB0E04", VA = "0xEB0E04")]
		public HackBotKillCount()
		{
		}
	}
	[Token(Token = "0x2000339")]
	public class Tutorial : MonoBehaviour
	{
		[Token(Token = "0x200033A")]
		[CompilerGenerated]
		private sealed class <Fadein>d__158 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40013B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tutorial <>4__this;

			[Token(Token = "0x170001E7")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001140")]
				[Address(RVA = "0xEB2660", Offset = "0xEB2660", VA = "0xEB2660", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001E8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001142")]
				[Address(RVA = "0xEB26A8", Offset = "0xEB26A8", VA = "0xEB26A8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600113D")]
			[Address(RVA = "0xEB205C", Offset = "0xEB205C", VA = "0xEB205C")]
			[DebuggerHidden]
			public <Fadein>d__158(int <>1__state)
			{
			}

			[Token(Token = "0x600113E")]
			[Address(RVA = "0xEB2320", Offset = "0xEB2320", VA = "0xEB2320", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600113F")]
			[Address(RVA = "0xEB2324", Offset = "0xEB2324", VA = "0xEB2324", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001141")]
			[Address(RVA = "0xEB2668", Offset = "0xEB2668", VA = "0xEB2668", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200033B")]
		[CompilerGenerated]
		private sealed class <ToThrusterOrb>d__161 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40013BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tutorial <>4__this;

			[Token(Token = "0x170001E9")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001146")]
				[Address(RVA = "0xEB2964", Offset = "0xEB2964", VA = "0xEB2964", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001EA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001148")]
				[Address(RVA = "0xEB29AC", Offset = "0xEB29AC", VA = "0xEB29AC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001143")]
			[Address(RVA = "0xEB2118", Offset = "0xEB2118", VA = "0xEB2118")]
			[DebuggerHidden]
			public <ToThrusterOrb>d__161(int <>1__state)
			{
			}

			[Token(Token = "0x6001144")]
			[Address(RVA = "0xEB26B0", Offset = "0xEB26B0", VA = "0xEB26B0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001145")]
			[Address(RVA = "0xEB26B4", Offset = "0xEB26B4", VA = "0xEB26B4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001147")]
			[Address(RVA = "0xEB296C", Offset = "0xEB296C", VA = "0xEB296C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200033C")]
		[CompilerGenerated]
		private sealed class <OrbFight>d__162 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40013BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tutorial <>4__this;

			[Token(Token = "0x170001EB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600114C")]
				[Address(RVA = "0xEB2DC8", Offset = "0xEB2DC8", VA = "0xEB2DC8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001EC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600114E")]
				[Address(RVA = "0xEB2E10", Offset = "0xEB2E10", VA = "0xEB2E10", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001149")]
			[Address(RVA = "0xEB2140", Offset = "0xEB2140", VA = "0xEB2140")]
			[DebuggerHidden]
			public <OrbFight>d__162(int <>1__state)
			{
			}

			[Token(Token = "0x600114A")]
			[Address(RVA = "0xEB29B4", Offset = "0xEB29B4", VA = "0xEB29B4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600114B")]
			[Address(RVA = "0xEB29B8", Offset = "0xEB29B8", VA = "0xEB29B8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600114D")]
			[Address(RVA = "0xEB2DD0", Offset = "0xEB2DD0", VA = "0xEB2DD0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200033D")]
		[CompilerGenerated]
		private sealed class <UnlockWebMode>d__163 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40013C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tutorial <>4__this;

			[Token(Token = "0x170001ED")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001152")]
				[Address(RVA = "0xEB3284", Offset = "0xEB3284", VA = "0xEB3284", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001EE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001154")]
				[Address(RVA = "0xEB32CC", Offset = "0xEB32CC", VA = "0xEB32CC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600114F")]
			[Address(RVA = "0xEB2168", Offset = "0xEB2168", VA = "0xEB2168")]
			[DebuggerHidden]
			public <UnlockWebMode>d__163(int <>1__state)
			{
			}

			[Token(Token = "0x6001150")]
			[Address(RVA = "0xEB2E18", Offset = "0xEB2E18", VA = "0xEB2E18", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001151")]
			[Address(RVA = "0xEB2E1C", Offset = "0xEB2E1C", VA = "0xEB2E1C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001153")]
			[Address(RVA = "0xEB328C", Offset = "0xEB328C", VA = "0xEB328C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200033E")]
		[CompilerGenerated]
		private sealed class <EscapeMusic>d__164 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x170001EF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001158")]
				[Address(RVA = "0xEB33F0", Offset = "0xEB33F0", VA = "0xEB33F0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001F0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600115A")]
				[Address(RVA = "0xEB3438", Offset = "0xEB3438", VA = "0xEB3438", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001155")]
			[Address(RVA = "0xEB2190", Offset = "0xEB2190", VA = "0xEB2190")]
			[DebuggerHidden]
			public <EscapeMusic>d__164(int <>1__state)
			{
			}

			[Token(Token = "0x6001156")]
			[Address(RVA = "0xEB32D4", Offset = "0xEB32D4", VA = "0xEB32D4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001157")]
			[Address(RVA = "0xEB32D8", Offset = "0xEB32D8", VA = "0xEB32D8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001159")]
			[Address(RVA = "0xEB33F8", Offset = "0xEB33F8", VA = "0xEB33F8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200033F")]
		[CompilerGenerated]
		private sealed class <TestComplete>d__165 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40013C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tutorial <>4__this;

			[Token(Token = "0x170001F1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600115E")]
				[Address(RVA = "0xEB3770", Offset = "0xEB3770", VA = "0xEB3770", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001F2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001160")]
				[Address(RVA = "0xEB37B8", Offset = "0xEB37B8", VA = "0xEB37B8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600115B")]
			[Address(RVA = "0xEB222C", Offset = "0xEB222C", VA = "0xEB222C")]
			[DebuggerHidden]
			public <TestComplete>d__165(int <>1__state)
			{
			}

			[Token(Token = "0x600115C")]
			[Address(RVA = "0xEB3440", Offset = "0xEB3440", VA = "0xEB3440", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600115D")]
			[Address(RVA = "0xEB3444", Offset = "0xEB3444", VA = "0xEB3444", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600115F")]
			[Address(RVA = "0xEB3778", Offset = "0xEB3778", VA = "0xEB3778", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000340")]
		[CompilerGenerated]
		private sealed class <HackingRobots>d__167 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40013C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tutorial <>4__this;

			[Token(Token = "0x170001F3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001164")]
				[Address(RVA = "0xEB3BF0", Offset = "0xEB3BF0", VA = "0xEB3BF0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001F4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001166")]
				[Address(RVA = "0xEB3C38", Offset = "0xEB3C38", VA = "0xEB3C38", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001161")]
			[Address(RVA = "0xEB22E8", Offset = "0xEB22E8", VA = "0xEB22E8")]
			[DebuggerHidden]
			public <HackingRobots>d__167(int <>1__state)
			{
			}

			[Token(Token = "0x6001162")]
			[Address(RVA = "0xEB37C0", Offset = "0xEB37C0", VA = "0xEB37C0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001163")]
			[Address(RVA = "0xEB37C4", Offset = "0xEB37C4", VA = "0xEB37C4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001165")]
			[Address(RVA = "0xEB3BF8", Offset = "0xEB3BF8", VA = "0xEB3BF8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400131C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Tutorial instance;

		[Token(Token = "0x400131D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Screens")]
		public MeshRenderer groundScreen;

		[Token(Token = "0x400131E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material xScreen;

		[Token(Token = "0x400131F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Material checkScreen;

		[Token(Token = "0x4001320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Material blackScreen;

		[Token(Token = "0x4001321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Material arrowLeftScreen;

		[Token(Token = "0x4001322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Material arrowRightScreen;

		[Token(Token = "0x4001323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Material invisibleShader;

		[Token(Token = "0x4001324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Material glowRedShader;

		[Token(Token = "0x4001325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Material staticScreen;

		[Token(Token = "0x4001326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Material sufferAnnoyed;

		[Token(Token = "0x4001327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Material sufferLaughing;

		[Token(Token = "0x4001328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Material sufferSmug;

		[Token(Token = "0x4001329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Material sufferShocked;

		[Token(Token = "0x400132A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public MeshRenderer backLowerRightScreen;

		[Token(Token = "0x400132B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public MeshRenderer backLowerLeftScreen;

		[Token(Token = "0x400132C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public MeshRenderer backUpperLeftScreen;

		[Token(Token = "0x400132D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public MeshRenderer backUpperMiddleScreen;

		[Token(Token = "0x400132E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public MeshRenderer backUpperRightScreen;

		[Token(Token = "0x400132F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public MeshRenderer frontLeftArrowScreen;

		[Token(Token = "0x4001330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public MeshRenderer frontRightArrowScreen;

		[Token(Token = "0x4001331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public MeshRenderer frontUpperLeftScreen;

		[Token(Token = "0x4001332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public MeshRenderer frontUpperRightScreen;

		[Token(Token = "0x4001333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public MeshRenderer sufferFrontScreen;

		[Token(Token = "0x4001334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public MeshRenderer sufferLeftScreen;

		[Token(Token = "0x4001335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public MeshRenderer sufferRightScreen;

		[Token(Token = "0x4001336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public MeshRenderer sufferBackScreen;

		[Token(Token = "0x4001337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Header("Targets")]
		public Collider backLowerLeftTarget;

		[Token(Token = "0x4001338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Collider backLowerRightTarget;

		[Token(Token = "0x4001339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public Collider backUpperLeftTarget;

		[Token(Token = "0x400133A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Collider backUpperMiddleTarget;

		[Token(Token = "0x400133B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public Collider backUpperRightTarget;

		[Token(Token = "0x400133C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public Collider frontUpperLeftTarget;

		[Token(Token = "0x400133D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public Collider frontUpperRightTarget;

		[Token(Token = "0x400133E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public Collider groundTarget;

		[Token(Token = "0x400133F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[Header("Doors")]
		public Collider backLeftDoor;

		[Token(Token = "0x4001340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public Collider backRightDoor;

		[Token(Token = "0x4001341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public Collider frontLeftDoor;

		[Token(Token = "0x4001342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public Collider frontRightDoor;

		[Token(Token = "0x4001343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public Sound frontLeftDoorSound;

		[Token(Token = "0x4001344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public Sound frontRightDoorSound;

		[Token(Token = "0x4001345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public Sound backLeftDoorSound;

		[Token(Token = "0x4001346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public Sound backRightDoorSound;

		[Token(Token = "0x4001347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public Sound ceilingDoorSound;

		[Token(Token = "0x4001348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public GameObject ceilingDoor;

		[Token(Token = "0x4001349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public Animator backDoorAnimator;

		[Token(Token = "0x400134A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public Animator backLeftDoorAnimator;

		[Token(Token = "0x400134B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public Animator backRightDoorAnimator;

		[Token(Token = "0x400134C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public Animator ceilingDoorAnimator;

		[Token(Token = "0x400134D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public Animator frontLeftDoorAnimator;

		[Token(Token = "0x400134E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public Animator frontRightDoorAnimator;

		[Token(Token = "0x400134F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		[Header("Misc objects")]
		public GameObject orbTutorialPrefab;

		[Token(Token = "0x4001350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public GameObject pedestal;

		[Token(Token = "0x4001351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public GameObject thrusterOrb;

		[Token(Token = "0x4001352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public GameObject light1;

		[Token(Token = "0x4001353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public GameObject light2;

		[Token(Token = "0x4001354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public GameObject light3;

		[Token(Token = "0x4001355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public GameObject light4;

		[Token(Token = "0x4001356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public GameObject leftGenerator;

		[Token(Token = "0x4001357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public GameObject rightGenerator;

		[Token(Token = "0x4001358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		public Collider GroundPlatform;

		[Token(Token = "0x4001359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		public Collider FlyingCollider;

		[Token(Token = "0x400135A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public GameObject leftForcefield;

		[Token(Token = "0x400135B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		public GameObject rightForcefield;

		[Token(Token = "0x400135C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		public BanMovementModes banMovementModes;

		[Token(Token = "0x400135D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		public GameObject SmallObjects;

		[Token(Token = "0x400135E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		public GameObject opticalSuite;

		[Token(Token = "0x400135F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		[Header("Matrix Numbers on Walls")]
		public MeshRenderer nums1;

		[Token(Token = "0x4001360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		public MeshRenderer nums2;

		[Token(Token = "0x4001361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		public MeshRenderer nums3;

		[Token(Token = "0x4001362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		public MeshRenderer nums4;

		[Token(Token = "0x4001363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		public MeshRenderer nums5;

		[Token(Token = "0x4001364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		public MeshRenderer nums6;

		[Token(Token = "0x4001365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		public MeshRenderer nums7;

		[Token(Token = "0x4001366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		public MeshRenderer nums8;

		[Token(Token = "0x4001367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		public MeshRenderer nums9;

		[Token(Token = "0x4001368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		public MeshRenderer nums10;

		[Token(Token = "0x4001369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		[Header("Voice lines")]
		public GameObject tutorialAudio;

		[Token(Token = "0x400136A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		public Sound tutorialLine1;

		[Token(Token = "0x400136B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		public Sound tutorialLine2;

		[Token(Token = "0x400136C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		public Sound tutorialLine4;

		[Token(Token = "0x400136D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		public Sound tutorialLine5;

		[Token(Token = "0x400136E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		public Sound tutorialLine6;

		[Token(Token = "0x400136F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		public Sound tutorialLine7;

		[Token(Token = "0x4001370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		public Sound tutorialLine10;

		[Token(Token = "0x4001371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		public Sound tutorialLine11;

		[Token(Token = "0x4001372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		public Sound tutorialLine12;

		[Token(Token = "0x4001373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		public Sound tutorialLine13;

		[Token(Token = "0x4001374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		public Sound tutorialLine14;

		[Token(Token = "0x4001375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
		public Sound tutorialLine15;

		[Token(Token = "0x4001376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		public Sound tutorialLine15point5;

		[Token(Token = "0x4001377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		public Sound tutorialLine16;

		[Token(Token = "0x4001378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
		public Sound tutorialLine17;

		[Token(Token = "0x4001379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		public Sound tutorialLine17point25;

		[Token(Token = "0x400137A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		public Sound tutorialLine17point50;

		[Token(Token = "0x400137B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		public Sound tutorialLine17point75;

		[Token(Token = "0x400137C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
		public Sound tutorialLine18;

		[Token(Token = "0x400137D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		public Sound tutorialLine19;

		[Token(Token = "0x400137E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
		public Sound tutorialLine20;

		[Token(Token = "0x400137F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
		public Sound tutorialLine21;

		[Token(Token = "0x4001380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
		[Header("Other sounds")]
		public Sound eyesOn;

		[Token(Token = "0x4001381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x338")]
		public Sound forcefieldPowerDown;

		[Token(Token = "0x4001382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
		public Sound backDoorSoundEffect;

		[Token(Token = "0x4001383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
		public Sound generatorPowerDown;

		[Token(Token = "0x4001384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
		public Sound movementOn;

		[Token(Token = "0x4001385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
		public Sound thrusterPedestalMovement;

		[Token(Token = "0x4001386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x360")]
		[Header("Spawners")]
		public TutorialSpawner GearSpawner1;

		[Token(Token = "0x4001387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x368")]
		public TutorialSpawner GearSpawner2;

		[Token(Token = "0x4001388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x370")]
		public TutorialSpawner GearSpawner3;

		[Token(Token = "0x4001389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x378")]
		public TutorialSpawner GearSpawner4;

		[Token(Token = "0x400138A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x380")]
		public TutorialSpawner GearSpawner5;

		[Token(Token = "0x400138B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x388")]
		public TutorialSpawner GearSpawner6;

		[Token(Token = "0x400138C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x390")]
		public TutorialSpawner GearSpawner7;

		[Token(Token = "0x400138D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x398")]
		public TutorialSpawner GearSpawner8;

		[Token(Token = "0x400138E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A0")]
		public TutorialSpawner GearSpawner9;

		[Token(Token = "0x400138F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A8")]
		public TutorialSpawner GearSpawner10;

		[Token(Token = "0x4001390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B0")]
		public TutorialSpawner OrbSpawner1;

		[Token(Token = "0x4001391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B8")]
		public TutorialSpawner OrbSpawner2;

		[Token(Token = "0x4001392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C0")]
		public TutorialSpawner OrbSpawner3;

		[Token(Token = "0x4001393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C8")]
		public TutorialSpawner OrbSpawner4;

		[Token(Token = "0x4001394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D0")]
		public TutorialSpawner OrbSpawner5;

		[Token(Token = "0x4001395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D8")]
		public TutorialSpawner OrbSpawner6;

		[Token(Token = "0x4001396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E0")]
		public TutorialSpawner OrbSpawner7;

		[Token(Token = "0x4001397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E8")]
		public TutorialSpawner OrbSpawner8;

		[Token(Token = "0x4001398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F0")]
		public TutorialSpawner PunisherSpawner;

		[Token(Token = "0x4001399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F8")]
		public TutorialSpawner HackingOrbSpawner;

		[Token(Token = "0x400139A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x400")]
		public TutorialSpawner PlayerSpawner;

		[Token(Token = "0x400139B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x408")]
		[Header("Effects")]
		public GameObject thrusterUnlockEffectPrefab;

		[Token(Token = "0x400139C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x410")]
		public GameObject webUnlockEffectPrefab;

		[Token(Token = "0x400139D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x418")]
		public GameObject gearPickupEffect;

		[Token(Token = "0x400139E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x420")]
		[HideInInspector]
		public int targetsShot;

		[Token(Token = "0x400139F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x424")]
		[HideInInspector]
		public int botDestroyedCount;

		[Token(Token = "0x40013A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x428")]
		[HideInInspector]
		public int generatorDestroyedCount;

		[Token(Token = "0x40013A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42C")]
		[HideInInspector]
		public int hackBotDestroyedCount;

		[Token(Token = "0x40013A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x430")]
		[HideInInspector]
		public bool generatorsDestroyed;

		[Token(Token = "0x40013A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x431")]
		[HideInInspector]
		public bool enterShaftCollider;

		[Token(Token = "0x40013A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x432")]
		[HideInInspector]
		public bool exitShaftCollider;

		[Token(Token = "0x40013A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x433")]
		[HideInInspector]
		public bool flownHighComplete;

		[Token(Token = "0x40013A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x434")]
		[HideInInspector]
		public int gearPickup;

		[Token(Token = "0x40013A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x438")]
		[HideInInspector]
		public bool groundplatformComplete;

		[Token(Token = "0x40013A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x439")]
		[HideInInspector]
		public bool hasPressedPowerMode;

		[Token(Token = "0x40013A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x43A")]
		[HideInInspector]
		public bool shootingPlatformComplete;

		[Token(Token = "0x40013AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x43B")]
		[HideInInspector]
		public bool thrusterPowerComplete;

		[Token(Token = "0x40013AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x43C")]
		[HideInInspector]
		public bool playerCanMove;

		[Token(Token = "0x40013AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x440")]
		private string controllerType;

		[Token(Token = "0x40013AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x448")]
		private bool groundplatformAudioComplete;

		[Token(Token = "0x40013AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x449")]
		private bool hasPressedWalk;

		[Token(Token = "0x40013AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44A")]
		private bool isTutorialComplete;

		[Token(Token = "0x40013B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x450")]
		private double lightHeight;

		[Token(Token = "0x40013B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x458")]
		private Material[] lightMaterialCopy;

		[Token(Token = "0x40013B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x460")]
		private double pedestalHeight;

		[Token(Token = "0x40013B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x468")]
		private bool startControllerUIChange;

		[Token(Token = "0x40013B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x469")]
		private bool startedWebCoroutine;

		[Token(Token = "0x600112C")]
		[Address(RVA = "0xEB0E0C", Offset = "0xEB0E0C", VA = "0xEB0E0C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600112D")]
		[Address(RVA = "0xEB0E64", Offset = "0xEB0E64", VA = "0xEB0E64")]
		private void Start()
		{
		}

		[Token(Token = "0x600112E")]
		[Address(RVA = "0xEB13D4", Offset = "0xEB13D4", VA = "0xEB13D4")]
		private void Update()
		{
		}

		[Token(Token = "0x600112F")]
		[Address(RVA = "0xEB1B58", Offset = "0xEB1B58", VA = "0xEB1B58")]
		public void OnTargetDestroyed(MeshRenderer targetScreen)
		{
		}

		[Token(Token = "0x6001130")]
		[Address(RVA = "0xEB1E54", Offset = "0xEB1E54", VA = "0xEB1E54")]
		public void OnGeneratorDestroyed()
		{
		}

		[Token(Token = "0x6001131")]
		[Address(RVA = "0xEB1360", Offset = "0xEB1360", VA = "0xEB1360")]
		[IteratorStateMachine(typeof(<Fadein>d__158))]
		private IEnumerator Fadein()
		{
			return null;
		}

		[Token(Token = "0x6001132")]
		[Address(RVA = "0xEB1D78", Offset = "0xEB1D78", VA = "0xEB1D78")]
		public void SetSufferScreens(Material screen)
		{
		}

		[Token(Token = "0x6001133")]
		[Address(RVA = "0xEB2084", Offset = "0xEB2084", VA = "0xEB2084")]
		public void StartToThrusterOrb()
		{
		}

		[Token(Token = "0x6001134")]
		[Address(RVA = "0xEB20A4", Offset = "0xEB20A4", VA = "0xEB20A4")]
		[IteratorStateMachine(typeof(<ToThrusterOrb>d__161))]
		private IEnumerator ToThrusterOrb()
		{
			return null;
		}

		[Token(Token = "0x6001135")]
		[Address(RVA = "0xEB1DE0", Offset = "0xEB1DE0", VA = "0xEB1DE0")]
		[IteratorStateMachine(typeof(<OrbFight>d__162))]
		private IEnumerator OrbFight()
		{
			return null;
		}

		[Token(Token = "0x6001136")]
		[Address(RVA = "0xEB1AE4", Offset = "0xEB1AE4", VA = "0xEB1AE4")]
		[IteratorStateMachine(typeof(<UnlockWebMode>d__163))]
		private IEnumerator UnlockWebMode()
		{
			return null;
		}

		[Token(Token = "0x6001137")]
		[Address(RVA = "0xEB1FFC", Offset = "0xEB1FFC", VA = "0xEB1FFC")]
		[IteratorStateMachine(typeof(<EscapeMusic>d__164))]
		private IEnumerator EscapeMusic()
		{
			return null;
		}

		[Token(Token = "0x6001138")]
		[Address(RVA = "0xEB21B8", Offset = "0xEB21B8", VA = "0xEB21B8")]
		[IteratorStateMachine(typeof(<TestComplete>d__165))]
		private IEnumerator TestComplete()
		{
			return null;
		}

		[Token(Token = "0x6001139")]
		[Address(RVA = "0xEB2254", Offset = "0xEB2254", VA = "0xEB2254")]
		public void StartHackingRobots()
		{
		}

		[Token(Token = "0x600113A")]
		[Address(RVA = "0xEB2274", Offset = "0xEB2274", VA = "0xEB2274")]
		[IteratorStateMachine(typeof(<HackingRobots>d__167))]
		private IEnumerator HackingRobots()
		{
			return null;
		}

		[Token(Token = "0x600113B")]
		[Address(RVA = "0xEB0DE4", Offset = "0xEB0DE4", VA = "0xEB0DE4")]
		public void StartTestComplete()
		{
		}

		[Token(Token = "0x600113C")]
		[Address(RVA = "0xEB2310", Offset = "0xEB2310", VA = "0xEB2310")]
		public Tutorial()
		{
		}
	}
	[Token(Token = "0x2000341")]
	public class TutorialColliders : MonoBehaviour
	{
		[Token(Token = "0x2000342")]
		public enum TutorialCollidersEnum
		{
			[Token(Token = "0x40013CC")]
			GroundPlatformCollider,
			[Token(Token = "0x40013CD")]
			ShootingPlatformCollider,
			[Token(Token = "0x40013CE")]
			FlyingCollider,
			[Token(Token = "0x40013CF")]
			ExitShaftCollider,
			[Token(Token = "0x40013D0")]
			EnterShaftCollider,
			[Token(Token = "0x40013D1")]
			PowerOrbCollider,
			[Token(Token = "0x40013D2")]
			GearCollider,
			[Token(Token = "0x40013D3")]
			ExitTutorialCollider
		}

		[Token(Token = "0x40013C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TutorialCollidersEnum collider;

		[Token(Token = "0x40013CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool hasTouched;

		[Token(Token = "0x6001167")]
		[Address(RVA = "0xEB3C40", Offset = "0xEB3C40", VA = "0xEB3C40")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001168")]
		[Address(RVA = "0xEB4B70", Offset = "0xEB4B70", VA = "0xEB4B70")]
		public TutorialColliders()
		{
		}
	}
	[Token(Token = "0x2000343")]
	public class TutorialHints : MonoBehaviour
	{
		[Token(Token = "0x40013D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static LocalizedString touchpadWalk;

		[Token(Token = "0x40013D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static LocalizedString joystickWalk;

		[Token(Token = "0x40013D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static LocalizedString touchpadTurn;

		[Token(Token = "0x40013D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static LocalizedString joystickTurn;

		[Token(Token = "0x40013D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static LocalizedString shootWeb;

		[Token(Token = "0x40013D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static LocalizedString squeezeGripWeb;

		[Token(Token = "0x40013DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static LocalizedString holdGripWeb;

		[Token(Token = "0x40013DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static LocalizedString triggerThrusters;

		[Token(Token = "0x40013DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static LocalizedString squeezeGripMissile;

		[Token(Token = "0x40013DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static LocalizedString pressGripMissile;

		[Token(Token = "0x40013DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static LocalizedString indexPowerSelect;

		[Token(Token = "0x40013DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private static LocalizedString oculusPowerSelectLeft;

		[Token(Token = "0x40013E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private static LocalizedString oculusPowerSelectRight;

		[Token(Token = "0x40013E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private static LocalizedString vivePowerSelect;

		[Token(Token = "0x40013E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private static LocalizedString windowsMRPowerSelect;

		[Token(Token = "0x40013E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private static LocalizedString otherPowerSelect;

		[Token(Token = "0x40013E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private static string touchpadWalkString;

		[Token(Token = "0x40013E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private static string joystickWalkString;

		[Token(Token = "0x40013E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private static string touchpadTurnString;

		[Token(Token = "0x40013E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private static string joystickTurnString;

		[Token(Token = "0x40013E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private static string shootWebString;

		[Token(Token = "0x40013E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private static string squeezeGripWebString;

		[Token(Token = "0x40013EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private static string holdGripWebString;

		[Token(Token = "0x40013EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private static string triggerThrustersString;

		[Token(Token = "0x40013EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private static string squeezeGripMissileString;

		[Token(Token = "0x40013ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private static string pressGripMissileString;

		[Token(Token = "0x40013EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private static string indexPowerSelectString;

		[Token(Token = "0x40013EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private static string oculusPowerSelectLeftString;

		[Token(Token = "0x40013F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private static string oculusPowerSelectRightString;

		[Token(Token = "0x40013F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private static string vivePowerSelectString;

		[Token(Token = "0x40013F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private static string windowsMRPowerSelectString;

		[Token(Token = "0x40013F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private static string otherPowerSelectString;

		[Token(Token = "0x40013F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private static Func<HandInput, string> currentHintLeft;

		[Token(Token = "0x40013F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private static Func<HandInput, string> currentHintRight;

		[Token(Token = "0x40013F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public static readonly Func<HandInput, string> WalkingHint;

		[Token(Token = "0x40013F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public static readonly Func<HandInput, string> TurningHint;

		[Token(Token = "0x40013F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public static readonly Func<HandInput, string> WebTriggerHint;

		[Token(Token = "0x40013F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public static readonly Func<HandInput, string> WebGripHint;

		[Token(Token = "0x40013FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public static readonly Func<HandInput, string> ThrusterTriggerHint;

		[Token(Token = "0x40013FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public static readonly Func<HandInput, string> ThrusterGripHint;

		[Token(Token = "0x40013FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public static readonly Func<HandInput, string> PowerSelectionHint;

		[Token(Token = "0x40013FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private static TutorialHints instance;

		[Token(Token = "0x40013FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject hintCanvasPrefab;

		[Token(Token = "0x40013FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float canvasHeightOffset;

		[Token(Token = "0x4001400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float canvasForwardOffset;

		[Token(Token = "0x4001401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject leftHintCanvas;

		[Token(Token = "0x4001402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject rightHintCanvas;

		[Token(Token = "0x6001169")]
		[Address(RVA = "0xEB4B78", Offset = "0xEB4B78", VA = "0xEB4B78")]
		private GameObject HintCanvas(HandInput hand)
		{
			return null;
		}

		[Token(Token = "0x600116A")]
		[Address(RVA = "0xEB4BA8", Offset = "0xEB4BA8", VA = "0xEB4BA8")]
		private void Start()
		{
		}

		[Token(Token = "0x600116B")]
		[Address(RVA = "0xEB4CE0", Offset = "0xEB4CE0", VA = "0xEB4CE0")]
		private void Update()
		{
		}

		[Token(Token = "0x600116C")]
		[Address(RVA = "0xEB19E4", Offset = "0xEB19E4", VA = "0xEB19E4")]
		public static void ShowHint(HandInput hand, Func<HandInput, string> hint)
		{
		}

		[Token(Token = "0x600116D")]
		[Address(RVA = "0xEB1954", Offset = "0xEB1954", VA = "0xEB1954")]
		public static void HideHint(HandInput hand)
		{
		}

		[Token(Token = "0x600116E")]
		[Address(RVA = "0xEB57A4", Offset = "0xEB57A4", VA = "0xEB57A4")]
		public TutorialHints()
		{
		}
	}
	[Token(Token = "0x2000345")]
	public class TutorialKillCount : MonoBehaviour
	{
		[Token(Token = "0x6001179")]
		[Address(RVA = "0xEB695C", Offset = "0xEB695C", VA = "0xEB695C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600117A")]
		[Address(RVA = "0xEB6A78", Offset = "0xEB6A78", VA = "0xEB6A78")]
		public TutorialKillCount()
		{
		}
	}
	[Token(Token = "0x2000346")]
	public class TutorialObjectsController : MonoBehaviour
	{
		[Token(Token = "0x4001404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject smallObjects;

		[Token(Token = "0x4001405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int numContainingPlayer;

		[Token(Token = "0x600117B")]
		[Address(RVA = "0xEB6A80", Offset = "0xEB6A80", VA = "0xEB6A80")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600117C")]
		[Address(RVA = "0xEB6AEC", Offset = "0xEB6AEC", VA = "0xEB6AEC")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x600117D")]
		[Address(RVA = "0xEB6B58", Offset = "0xEB6B58", VA = "0xEB6B58")]
		private void Update()
		{
		}

		[Token(Token = "0x600117E")]
		[Address(RVA = "0xEB6BE8", Offset = "0xEB6BE8", VA = "0xEB6BE8")]
		public TutorialObjectsController()
		{
		}
	}
	[Token(Token = "0x2000347")]
	public class TutorialSpawner : MonoBehaviour
	{
		[Token(Token = "0x4001406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject gears;

		[Token(Token = "0x4001407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject orb;

		[Token(Token = "0x4001408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject punisher;

		[Token(Token = "0x4001409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject nexusBot;

		[Token(Token = "0x600117F")]
		[Address(RVA = "0xEB3674", Offset = "0xEB3674", VA = "0xEB3674")]
		public void SpawnGears()
		{
		}

		[Token(Token = "0x6001180")]
		[Address(RVA = "0xEB2C7C", Offset = "0xEB2C7C", VA = "0xEB2C7C")]
		public void SpawnOrb(bool isRight)
		{
		}

		[Token(Token = "0x6001181")]
		[Address(RVA = "0xEB3988", Offset = "0xEB3988", VA = "0xEB3988")]
		public void SpawnPunisher()
		{
		}

		[Token(Token = "0x6001182")]
		[Address(RVA = "0xEB3ABC", Offset = "0xEB3ABC", VA = "0xEB3ABC")]
		public void SpawnNexusBot()
		{
		}

		[Token(Token = "0x6001183")]
		[Address(RVA = "0xEB1298", Offset = "0xEB1298", VA = "0xEB1298")]
		public void SpawnPlayer()
		{
		}

		[Token(Token = "0x6001184")]
		[Address(RVA = "0xEB6BF0", Offset = "0xEB6BF0", VA = "0xEB6BF0")]
		public TutorialSpawner()
		{
		}
	}
}
namespace Missions.Race
{
	[Token(Token = "0x2000348")]
	[CreateAssetMenu(fileName = "RaceDef", menuName = "Create Race Definition", order = 0)]
	public class RaceDefinition : ScriptableObject
	{
		[Serializable]
		[Token(Token = "0x2000349")]
		public struct RingPos
		{
			[Token(Token = "0x4001416")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 position;

			[Token(Token = "0x4001417")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 direction;
		}

		[Token(Token = "0x400140A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int NUM_ROADS;

		[Token(Token = "0x400140B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static float ROAD_HEIGHT;

		[Token(Token = "0x400140C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static float MAX_RING_DIST;

		[Token(Token = "0x400140D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static float STREET_RACE_HEIGHT;

		[Token(Token = "0x400140E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static int STREET_RACE_NUM_ROADS;

		[Token(Token = "0x400140F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static float STREET_RACE_TURN_CHANCE;

		[Token(Token = "0x4001410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool isStreetRace;

		[Token(Token = "0x4001411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CityParameters cityParameters;

		[Token(Token = "0x4001412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public WorldScriptableObject worldScriptableObject;

		[Token(Token = "0x4001413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 startPos;

		[Token(Token = "0x4001414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<RingPos> rings;

		[Token(Token = "0x4001415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public MissionMarker missionMarker;

		[Token(Token = "0x6001185")]
		[Address(RVA = "0xEB6BF8", Offset = "0xEB6BF8", VA = "0xEB6BF8")]
		public RaceDefinition()
		{
		}
	}
	[Token(Token = "0x200034A")]
	public class RaceMissionSpawner : MonoBehaviour
	{
		[Token(Token = "0x4001418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MissionManager missionManager;

		[Token(Token = "0x4001419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<RaceDefinition> raceDefs;

		[Token(Token = "0x400141A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RaceTask raceTaskPrefab;

		[Token(Token = "0x400141B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public RaceTask streetRaceTaskPrefab;

		[Token(Token = "0x6001187")]
		[Address(RVA = "0xEB6C70", Offset = "0xEB6C70", VA = "0xEB6C70")]
		private void Start()
		{
		}

		[Token(Token = "0x6001188")]
		[Address(RVA = "0xEB73BC", Offset = "0xEB73BC", VA = "0xEB73BC")]
		public RaceMissionSpawner()
		{
		}
	}
	[Token(Token = "0x200034C")]
	public class RaceTask : SequentialTask
	{
		[Token(Token = "0x400141E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public RaceDefinition raceDef;

		[Token(Token = "0x400141F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject ringModelPrefab;

		[Token(Token = "0x4001420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public RingBehavior ringBehaviorPrefab;

		[Token(Token = "0x4001421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public BanMovementModes banMovementModes;

		[Token(Token = "0x4001422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AllowedModesSetting myModes;

		[Token(Token = "0x4001423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float timeElapsed;

		[Token(Token = "0x600118B")]
		[Address(RVA = "0xEB748C", Offset = "0xEB748C", VA = "0xEB748C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x600118C")]
		[Address(RVA = "0xEB7904", Offset = "0xEB7904", VA = "0xEB7904")]
		private void Update()
		{
		}

		[Token(Token = "0x600118D")]
		[Address(RVA = "0xEB7930", Offset = "0xEB7930", VA = "0xEB7930")]
		public RaceTask()
		{
		}
	}
	[Token(Token = "0x200034D")]
	public class RingBehavior : MonoBehaviour
	{
		[Token(Token = "0x4001424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject ringModel;

		[Token(Token = "0x4001425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material myMaterial1;

		[Token(Token = "0x4001426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Material myMaterial2;

		[Token(Token = "0x4001427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Sound mySound;

		[Token(Token = "0x6001191")]
		[Address(RVA = "0xEB7DC4", Offset = "0xEB7DC4", VA = "0xEB7DC4")]
		public void SetMaterial1()
		{
		}

		[Token(Token = "0x6001192")]
		[Address(RVA = "0xEB7E24", Offset = "0xEB7E24", VA = "0xEB7E24")]
		public void SetMaterial2()
		{
		}

		[Token(Token = "0x6001193")]
		[Address(RVA = "0xEB7E98", Offset = "0xEB7E98", VA = "0xEB7E98")]
		public RingBehavior()
		{
		}
	}
}
namespace Missions.Combat
{
	[Token(Token = "0x200034E")]
	[CreateAssetMenu(fileName = "CombatDef", menuName = "Create Combat Definition", order = 0)]
	public class CombatDefinition : ScriptableObject
	{
		[Serializable]
		[Token(Token = "0x200034F")]
		public struct CombatWave
		{
			[Token(Token = "0x400142D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public List<SmallObject> toSpawn;
		}

		[Serializable]
		[Token(Token = "0x2000350")]
		public struct EnemyPerWave
		{
			[Token(Token = "0x400142E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public GameObject prefab;

			[Token(Token = "0x400142F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float num;

			[Token(Token = "0x4001430")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public float power;
		}

		[Token(Token = "0x4001428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int NUM_WAVES;

		[Token(Token = "0x4001429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WorldScriptableObject worldScriptableObject;

		[Token(Token = "0x400142A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<EnemyPerWave> enemiesPerWave;

		[Token(Token = "0x400142B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 startPos;

		[Token(Token = "0x400142C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<CombatWave> waves;

		[Token(Token = "0x6001194")]
		[Address(RVA = "0xEB7EA0", Offset = "0xEB7EA0", VA = "0xEB7EA0")]
		public CombatDefinition()
		{
		}
	}
	[Token(Token = "0x2000351")]
	public class CombatMissionSpawner : MonoBehaviour
	{
		[Token(Token = "0x4001431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MissionManager missionManager;

		[Token(Token = "0x4001432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<CombatDefinition> combatDefs;

		[Token(Token = "0x4001433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CombatTask combatTaskPrefab;

		[Token(Token = "0x4001434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public MissionMarker missionMarkerPrefab;

		[Token(Token = "0x6001196")]
		[Address(RVA = "0xEB7EF4", Offset = "0xEB7EF4", VA = "0xEB7EF4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001197")]
		[Address(RVA = "0xEB7FE8", Offset = "0xEB7FE8", VA = "0xEB7FE8")]
		public CombatMissionSpawner()
		{
		}
	}
	[Token(Token = "0x2000352")]
	public class CombatTask : SequentialTask
	{
		[Token(Token = "0x4001435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public CombatDefinition combatDef;

		[Token(Token = "0x4001436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public BanMovementModes banMovementModes;

		[Token(Token = "0x4001437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AllowedModesSetting myModes;

		[Token(Token = "0x4001438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public DestroyTask destroyTaskPrefab;

		[Token(Token = "0x4001439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float timeElapsed;

		[Token(Token = "0x6001198")]
		[Address(RVA = "0xEB7FF0", Offset = "0xEB7FF0", VA = "0xEB7FF0", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001199")]
		[Address(RVA = "0xEB85DC", Offset = "0xEB85DC", VA = "0xEB85DC")]
		private void Update()
		{
		}

		[Token(Token = "0x600119A")]
		[Address(RVA = "0xEB860C", Offset = "0xEB860C", VA = "0xEB860C")]
		public CombatTask()
		{
		}
	}
}
namespace Missions.Boss
{
	[Token(Token = "0x2000354")]
	[CreateAssetMenu(fileName = "BossfightDef", menuName = "Create Bossfight Definition", order = 0)]
	public class BossfightDefinition : ScriptableObject
	{
		[Token(Token = "0x400143C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 startPos;

		[Token(Token = "0x400143D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject bossEnemy;

		[Token(Token = "0x400143E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 spawnPosition;

		[Token(Token = "0x400143F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 spawnRotation;

		[Token(Token = "0x4001440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public MissionMarker missionMarker;

		[Token(Token = "0x60011A0")]
		[Address(RVA = "0xEB8A00", Offset = "0xEB8A00", VA = "0xEB8A00")]
		public BossfightDefinition()
		{
		}
	}
	[Token(Token = "0x2000355")]
	public class BossfightMissionSpawner : MonoBehaviour
	{
		[Token(Token = "0x4001441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MissionManager missionManager;

		[Token(Token = "0x4001442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<BossfightDefinition> bossfightDefs;

		[Token(Token = "0x4001443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BossfightTask bossfightTaskPrefab;

		[Token(Token = "0x60011A1")]
		[Address(RVA = "0xEB8A08", Offset = "0xEB8A08", VA = "0xEB8A08")]
		private void Start()
		{
		}

		[Token(Token = "0x60011A2")]
		[Address(RVA = "0xEB8F80", Offset = "0xEB8F80", VA = "0xEB8F80")]
		public BossfightMissionSpawner()
		{
		}
	}
	[Token(Token = "0x2000357")]
	public class BossfightTask : SequentialTask
	{
		[Token(Token = "0x4001446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public BossfightDefinition bossfightDef;

		[Token(Token = "0x4001447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public BanMovementModes banMovementModes;

		[Token(Token = "0x4001448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AllowedModesSetting myModes;

		[Token(Token = "0x4001449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public DestroyTask destroyTaskPrefab;

		[Token(Token = "0x400144A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float timeElapsed;

		[Token(Token = "0x60011A5")]
		[Address(RVA = "0xEB9028", Offset = "0xEB9028", VA = "0xEB9028", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60011A6")]
		[Address(RVA = "0xEB9548", Offset = "0xEB9548", VA = "0xEB9548")]
		public BossfightTask()
		{
		}
	}
}
namespace Missions.Basic_Tasks
{
	[Token(Token = "0x2000359")]
	public class CloseMenuTask : Task
	{
		[Token(Token = "0x60011AA")]
		[Address(RVA = "0xEB9600", Offset = "0xEB9600", VA = "0xEB9600")]
		private void Update()
		{
		}

		[Token(Token = "0x60011AB")]
		[Address(RVA = "0xEB9674", Offset = "0xEB9674", VA = "0xEB9674")]
		public CloseMenuTask()
		{
		}
	}
	[Token(Token = "0x200035A")]
	public class DestroyTask : Task
	{
		[Token(Token = "0x400144D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject[] toDestroy;

		[Token(Token = "0x60011AC")]
		[Address(RVA = "0xEB967C", Offset = "0xEB967C", VA = "0xEB967C")]
		private void Update()
		{
		}

		[Token(Token = "0x60011AD")]
		[Address(RVA = "0xEB97A0", Offset = "0xEB97A0", VA = "0xEB97A0")]
		public DestroyTask()
		{
		}
	}
	[Token(Token = "0x200035C")]
	public class ParallelTask : Task
	{
		[Token(Token = "0x4001450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected int subtaskWinCount;

		[Token(Token = "0x4001451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected int totalSubTasks;

		[Token(Token = "0x60011B1")]
		[Address(RVA = "0xEB987C", Offset = "0xEB987C", VA = "0xEB987C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60011B2")]
		[Address(RVA = "0xEB9A9C", Offset = "0xEB9A9C", VA = "0xEB9A9C")]
		protected void CompleteSubtask()
		{
		}

		[Token(Token = "0x60011B3")]
		[Address(RVA = "0xEB9ABC", Offset = "0xEB9ABC", VA = "0xEB9ABC")]
		public ParallelTask()
		{
		}
	}
	[Token(Token = "0x200035D")]
	public class ReachPositionTask : Task
	{
		[Token(Token = "0x4001452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float maxDistance;

		[Token(Token = "0x4001453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool ignoreY;

		[Token(Token = "0x60011B4")]
		[Address(RVA = "0xEB9AC4", Offset = "0xEB9AC4", VA = "0xEB9AC4")]
		private void Update()
		{
		}

		[Token(Token = "0x60011B5")]
		[Address(RVA = "0xEB9C08", Offset = "0xEB9C08", VA = "0xEB9C08")]
		public ReachPositionTask()
		{
		}
	}
	[Token(Token = "0x200035E")]
	public class SelectModesTask : Task
	{
		[Token(Token = "0x4001454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int rightMode;

		[Token(Token = "0x4001455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int leftMode;

		[Token(Token = "0x60011B6")]
		[Address(RVA = "0xEB9C20", Offset = "0xEB9C20", VA = "0xEB9C20")]
		private void Update()
		{
		}

		[Token(Token = "0x60011B7")]
		[Address(RVA = "0xEB9CE0", Offset = "0xEB9CE0", VA = "0xEB9CE0")]
		public SelectModesTask()
		{
		}
	}
	[Token(Token = "0x200035F")]
	public class SequentialTask : Task
	{
		[Token(Token = "0x60011B8")]
		[Address(RVA = "0xEB92F0", Offset = "0xEB92F0", VA = "0xEB92F0", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60011B9")]
		[Address(RVA = "0xEB9550", Offset = "0xEB9550", VA = "0xEB9550")]
		public SequentialTask()
		{
		}
	}
	[Token(Token = "0x2000360")]
	public class WaitTask : Task
	{
		[Token(Token = "0x4001456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float timer;

		[Token(Token = "0x4001457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float timeElapsed;

		[Token(Token = "0x60011BA")]
		[Address(RVA = "0xEB9CE8", Offset = "0xEB9CE8", VA = "0xEB9CE8")]
		private void Update()
		{
		}

		[Token(Token = "0x60011BB")]
		[Address(RVA = "0xEB9D34", Offset = "0xEB9D34", VA = "0xEB9D34")]
		public WaitTask()
		{
		}
	}
}
namespace Combat
{
	[Token(Token = "0x2000361")]
	public class BoltBehavior : MonoBehaviour
	{
		[Token(Token = "0x4001458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject bolt;

		[Token(Token = "0x4001459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject tracer;

		[Token(Token = "0x400145A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MeshRenderer tracerRenderer;

		[Token(Token = "0x400145B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Projectile damageBehavior;

		[Token(Token = "0x400145C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform attacker;

		[Token(Token = "0x400145D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform target;

		[Token(Token = "0x400145E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 attackerLocal;

		[Token(Token = "0x400145F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Vector3 targetLocal;

		[Token(Token = "0x4001460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool tracking;

		[Token(Token = "0x4001461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float speed;

		[Token(Token = "0x4001462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float warmupTime;

		[Token(Token = "0x4001463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float activeTime;

		[Token(Token = "0x4001464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Color warmupStartColor;

		[Token(Token = "0x4001465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Color warmupEndColor;

		[Token(Token = "0x4001466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Color activeStartColor;

		[Token(Token = "0x4001467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Color activeEndColor;

		[Token(Token = "0x4001468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float time;

		[Token(Token = "0x60011BC")]
		[Address(RVA = "0xEB9D3C", Offset = "0xEB9D3C", VA = "0xEB9D3C")]
		private void Start()
		{
		}

		[Token(Token = "0x60011BD")]
		[Address(RVA = "0xEBA02C", Offset = "0xEBA02C", VA = "0xEBA02C")]
		private void Update()
		{
		}

		[Token(Token = "0x60011BE")]
		[Address(RVA = "0xEB9DC8", Offset = "0xEB9DC8", VA = "0xEB9DC8")]
		public void Reposition()
		{
		}

		[Token(Token = "0x60011BF")]
		[Address(RVA = "0xEB9E30", Offset = "0xEB9E30", VA = "0xEB9E30")]
		public void Reorient()
		{
		}

		[Token(Token = "0x60011C0")]
		[Address(RVA = "0xEBA368", Offset = "0xEBA368", VA = "0xEBA368")]
		public BoltBehavior()
		{
		}
	}
	[Token(Token = "0x2000362")]
	public class BoltDeflector : MonoBehaviour
	{
		[Token(Token = "0x4001469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject toIgnore;

		[Token(Token = "0x60011C1")]
		[Address(RVA = "0xEBA3AC", Offset = "0xEBA3AC", VA = "0xEBA3AC")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60011C2")]
		[Address(RVA = "0xEBA658", Offset = "0xEBA658", VA = "0xEBA658")]
		public BoltDeflector()
		{
		}
	}
	[Token(Token = "0x2000363")]
	public class ChangeLayerAfterTime : MonoBehaviour
	{
		[Token(Token = "0x2000364")]
		[CompilerGenerated]
		private sealed class <Start>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400146C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400146D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400146E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ChangeLayerAfterTime <>4__this;

			[Token(Token = "0x170001F5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60011C8")]
				[Address(RVA = "0xEBA7E4", Offset = "0xEBA7E4", VA = "0xEBA7E4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001F6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60011CA")]
				[Address(RVA = "0xEBA82C", Offset = "0xEBA82C", VA = "0xEBA82C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60011C5")]
			[Address(RVA = "0xEBA6D4", Offset = "0xEBA6D4", VA = "0xEBA6D4")]
			[DebuggerHidden]
			public <Start>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x60011C6")]
			[Address(RVA = "0xEBA70C", Offset = "0xEBA70C", VA = "0xEBA70C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60011C7")]
			[Address(RVA = "0xEBA710", Offset = "0xEBA710", VA = "0xEBA710", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60011C9")]
			[Address(RVA = "0xEBA7EC", Offset = "0xEBA7EC", VA = "0xEBA7EC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400146A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float waitTime;

		[Token(Token = "0x400146B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int newLayer;

		[Token(Token = "0x60011C3")]
		[Address(RVA = "0xEBA660", Offset = "0xEBA660", VA = "0xEBA660")]
		[IteratorStateMachine(typeof(<Start>d__2))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x60011C4")]
		[Address(RVA = "0xEBA6FC", Offset = "0xEBA6FC", VA = "0xEBA6FC")]
		public ChangeLayerAfterTime()
		{
		}
	}
	[Token(Token = "0x2000365")]
	public class CompoundCrashDamage : CrashDamage
	{
		[Serializable]
		[Token(Token = "0x2000366")]
		protected struct CrashDamageResistances
		{
			[Token(Token = "0x4001471")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Only apply modifiers if the LayerMask matches")]
			public LayerMask layerMaskToMatch;

			[Token(Token = "0x4001472")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("Multiply all damage by this value")]
			public float damageMultiplier;

			[Token(Token = "0x4001473")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("A single instance of crash damage can't do more than this percentage of damage")]
			public float maxFactorHealthDamagePerImpulse;

			[Token(Token = "0x60011CF")]
			[Address(RVA = "0xEBB104", Offset = "0xEBB104", VA = "0xEBB104")]
			public void init()
			{
			}
		}

		[Token(Token = "0x400146F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private CrashDamageResistances[] resistances;

		[Token(Token = "0x4001470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<Collider, Health> colliderHealthMap;

		[Token(Token = "0x60011CB")]
		[Address(RVA = "0xEBA834", Offset = "0xEBA834", VA = "0xEBA834", Slot = "4")]
		[ContextMenu("Initialize with Awake()")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60011CC")]
		[Address(RVA = "0xEBAAB8", Offset = "0xEBAAB8", VA = "0xEBAAB8", Slot = "5")]
		protected override void OnCollisionEnter(Collision col)
		{
		}

		[Token(Token = "0x60011CD")]
		[Address(RVA = "0xEBAE54", Offset = "0xEBAE54", VA = "0xEBAE54")]
		[ContextMenu("PrintCollisionHealthMap")]
		private void DebugPrintMap()
		{
		}

		[Token(Token = "0x60011CE")]
		[Address(RVA = "0xEBB08C", Offset = "0xEBB08C", VA = "0xEBB08C")]
		public CompoundCrashDamage()
		{
		}
	}
	[Token(Token = "0x2000367")]
	public class ContinualDamage : MonoBehaviour
	{
		[Token(Token = "0x4001474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float currentDPS;

		[Token(Token = "0x4001475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float mostRecentDamage;

		[Token(Token = "0x4001476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool isUnderWaterDamage;

		[Token(Token = "0x4001477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool avoidSelfDamage;

		[Token(Token = "0x4001478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HashSet<Health> alreadyHit;

		[Token(Token = "0x60011D0")]
		[Address(RVA = "0xEBB110", Offset = "0xEBB110", VA = "0xEBB110")]
		private void OnTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x60011D1")]
		[Address(RVA = "0xEBB374", Offset = "0xEBB374", VA = "0xEBB374")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60011D2")]
		[Address(RVA = "0xEBB3C4", Offset = "0xEBB3C4", VA = "0xEBB3C4")]
		public ContinualDamage()
		{
		}
	}
	[Token(Token = "0x2000368")]
	public class CrashDamage : MonoBehaviour
	{
		[Token(Token = "0x4001479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float globalDamageScale;

		[Token(Token = "0x400147A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float hardness;

		[Token(Token = "0x400147B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float minFactorHealthDamage;

		[Token(Token = "0x400147C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Health myHealth;

		[Token(Token = "0x60011D3")]
		[Address(RVA = "0xEBAA60", Offset = "0xEBAA60", VA = "0xEBAA60", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60011D4")]
		[Address(RVA = "0xEBB44C", Offset = "0xEBB44C", VA = "0xEBB44C", Slot = "5")]
		protected virtual void OnCollisionEnter(Collision col)
		{
		}

		[Token(Token = "0x60011D5")]
		[Address(RVA = "0xEBB510", Offset = "0xEBB510", VA = "0xEBB510", Slot = "6")]
		protected virtual float CalculateDamageFromCollision(Collision col)
		{
			return default(float);
		}

		[Token(Token = "0x60011D6")]
		[Address(RVA = "0xEBB0F0", Offset = "0xEBB0F0", VA = "0xEBB0F0")]
		public CrashDamage()
		{
		}
	}
	[Token(Token = "0x2000369")]
	public class CrashDamage2 : MonoBehaviour
	{
		[Token(Token = "0x400147D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float minSpeed;

		[Token(Token = "0x400147E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float fatalSpeed;

		[Token(Token = "0x400147F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float speedPower;

		[Token(Token = "0x4001480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float damageMultiplier;

		[Token(Token = "0x4001481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Health myHealth;

		[Token(Token = "0x4001482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody myRigidbody;

		[Token(Token = "0x60011D8")]
		[Address(RVA = "0xEBB734", Offset = "0xEBB734", VA = "0xEBB734", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60011D9")]
		[Address(RVA = "0xEBB7C4", Offset = "0xEBB7C4", VA = "0xEBB7C4", Slot = "5")]
		protected virtual void OnCollisionEnter(Collision col)
		{
		}

		[Token(Token = "0x60011DA")]
		[Address(RVA = "0xEBBA0C", Offset = "0xEBBA0C", VA = "0xEBBA0C")]
		public CrashDamage2()
		{
		}
	}
	[Token(Token = "0x200036A")]
	public class DeathEffect : MonoBehaviour
	{
		[Token(Token = "0x4001483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject deathEffectPrefab;

		[Token(Token = "0x4001484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool transferVelocity;

		[Token(Token = "0x4001485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool transferAngularVelocity;

		[Token(Token = "0x4001486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float minTime;

		[Token(Token = "0x4001487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool copyMaterialFromRepaint;

		[Token(Token = "0x4001488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Repaint repaint;

		[Token(Token = "0x4001489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool copyScale;

		[Token(Token = "0x400148A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool isFragments;

		[Token(Token = "0x400148B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		public bool isExtraParticle;

		[Token(Token = "0x400148C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rigidbody myRigidbody;

		[Token(Token = "0x400148D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float spawnTime;

		[Token(Token = "0x60011DB")]
		[Address(RVA = "0xEBBA20", Offset = "0xEBBA20", VA = "0xEBBA20")]
		private void Start()
		{
		}

		[Token(Token = "0x60011DC")]
		[Address(RVA = "0xEBBB58", Offset = "0xEBBB58", VA = "0xEBBB58")]
		public void OnDeath()
		{
		}

		[Token(Token = "0x60011DD")]
		[Address(RVA = "0xEBC038", Offset = "0xEBC038", VA = "0xEBC038")]
		public DeathEffect()
		{
		}
	}
	[Token(Token = "0x200036B")]
	public class DeathGears : MonoBehaviour
	{
		[Token(Token = "0x400148E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody gearPrefab;

		[Token(Token = "0x400148F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float averageDropNum;

		[Token(Token = "0x4001490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float initialVelocityScale;

		[Token(Token = "0x4001491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float minTime;

		[Token(Token = "0x4001492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool attachToHealth;

		[Token(Token = "0x4001493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody inheritVelocityFrom;

		[Token(Token = "0x4001494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float spawnTime;

		[Token(Token = "0x60011DE")]
		[Address(RVA = "0xEBC048", Offset = "0xEBC048", VA = "0xEBC048")]
		private void Start()
		{
		}

		[Token(Token = "0x60011DF")]
		[Address(RVA = "0xEBC1F0", Offset = "0xEBC1F0", VA = "0xEBC1F0")]
		public void DropGears()
		{
		}

		[Token(Token = "0x60011E0")]
		[Address(RVA = "0xEBC3B8", Offset = "0xEBC3B8", VA = "0xEBC3B8")]
		public DeathGears()
		{
		}
	}
	[Token(Token = "0x200036C")]
	public class DeathWantedPoints : MonoBehaviour
	{
		[Token(Token = "0x4001495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int numPoints;

		[Token(Token = "0x60011E1")]
		[Address(RVA = "0xEBC3DC", Offset = "0xEBC3DC", VA = "0xEBC3DC")]
		private void Start()
		{
		}

		[Token(Token = "0x60011E2")]
		[Address(RVA = "0xEBC54C", Offset = "0xEBC54C", VA = "0xEBC54C")]
		public void OnDeath()
		{
		}

		[Token(Token = "0x60011E3")]
		[Address(RVA = "0xEBC66C", Offset = "0xEBC66C", VA = "0xEBC66C")]
		public DeathWantedPoints()
		{
		}
	}
	[Token(Token = "0x200036D")]
	public class EmpAreaDamage : MonoBehaviour
	{
		[Token(Token = "0x4001496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("How long should the EMP effect last")]
		public float empDuration;

		[Token(Token = "0x4001497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("How long between two different emp pulses?")]
		public float repeatDelay;

		[Token(Token = "0x4001498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Should the EMP affect both hands or just one?")]
		public bool affectBothHands;

		[Token(Token = "0x4001499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float lastHitTime;

		[Token(Token = "0x60011E4")]
		[Address(RVA = "0xEBC674", Offset = "0xEBC674", VA = "0xEBC674")]
		private void OnCollisionStay(Collision collision)
		{
		}

		[Token(Token = "0x60011E5")]
		[Address(RVA = "0xEBC6A0", Offset = "0xEBC6A0", VA = "0xEBC6A0")]
		private void OnTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x60011E6")]
		[Address(RVA = "0xEBC7B4", Offset = "0xEBC7B4", VA = "0xEBC7B4")]
		public EmpAreaDamage()
		{
		}
	}
	[Token(Token = "0x200036E")]
	public class EmpMissileBehavior : MonoBehaviour
	{
		[Token(Token = "0x400149A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float forwardAccel;

		[Token(Token = "0x400149B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float sidewaysAccel;

		[Token(Token = "0x400149C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float turnToTargetTorque;

		[Token(Token = "0x400149D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float maxTrackingTime;

		[Token(Token = "0x400149E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Rigidbody myRigidbody;

		[Token(Token = "0x60011E7")]
		[Address(RVA = "0xEBC7C8", Offset = "0xEBC7C8", VA = "0xEBC7C8")]
		private void Start()
		{
		}

		[Token(Token = "0x60011E8")]
		[Address(RVA = "0xEBC830", Offset = "0xEBC830", VA = "0xEBC830")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60011E9")]
		[Address(RVA = "0xEBCC6C", Offset = "0xEBCC6C", VA = "0xEBCC6C")]
		public EmpMissileBehavior()
		{
		}
	}
	[Token(Token = "0x200036F")]
	public class EnableAfterTime : MonoBehaviour
	{
		[Token(Token = "0x400149F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float enableAfterTime;

		[Token(Token = "0x40014A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject toEnable;

		[Token(Token = "0x60011EA")]
		[Address(RVA = "0xEBCC80", Offset = "0xEBCC80", VA = "0xEBCC80")]
		private void Update()
		{
		}

		[Token(Token = "0x60011EB")]
		[Address(RVA = "0xEBCD24", Offset = "0xEBCD24", VA = "0xEBCD24")]
		public EnableAfterTime()
		{
		}
	}
	[Token(Token = "0x2000370")]
	public class EnableColliderAfterTime : MonoBehaviour
	{
		[Token(Token = "0x40014A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float enableAfterTime;

		[Token(Token = "0x40014A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Collider toEnable;

		[Token(Token = "0x60011EC")]
		[Address(RVA = "0xEBCD34", Offset = "0xEBCD34", VA = "0xEBCD34")]
		private void Update()
		{
		}

		[Token(Token = "0x60011ED")]
		[Address(RVA = "0xEBCDD8", Offset = "0xEBCDD8", VA = "0xEBCDD8")]
		public EnableColliderAfterTime()
		{
		}
	}
	[Token(Token = "0x2000371")]
	public struct Damage
	{
		[Token(Token = "0x40014A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float amount;

		[Token(Token = "0x40014A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Vector3 direction;
	}
	[Token(Token = "0x2000372")]
	public interface IDamageModifier
	{
		[Token(Token = "0x60011EE")]
		void ModifyDamage(ref Damage damage);
	}
	[Token(Token = "0x2000373")]
	public class Health : MonoBehaviour
	{
		[Token(Token = "0x40014A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected float health;

		[Token(Token = "0x40014A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float damageMultiplier;

		[Token(Token = "0x40014A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject destroyOther;

		[Token(Token = "0x40014A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool destroyOnZeroHealth;

		[Token(Token = "0x40014A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEvent<Damage> onDamaged;

		[Token(Token = "0x40014AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEvent onKilled;

		[Token(Token = "0x40014AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform center;

		[NonSerialized]
		[Token(Token = "0x40014AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float initialHealth;

		[NonSerialized]
		[Token(Token = "0x40014AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<IDamageModifier> modifiers;

		[Token(Token = "0x40014AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Vulnerability")]
		[Tooltip("Does this only take damage from a particular direction?")]
		public bool hasDirectionalVulnerability;

		[Token(Token = "0x40014AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("From what direction is this vulnerable to attack (in local space)")]
		public Vector3 vulnerableDamageDirection;

		[Token(Token = "0x40014B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Offset this transform's position for vunerability calculations (in local space)")]
		public Vector3 vulnerabilityPositionOffset;

		[Token(Token = "0x40014B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("How wide of an angle can this be damaged from  (in degrees)")]
		public float vulnerableDamageAngle;

		[Token(Token = "0x40014B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Value to multiply damage from this direction by")]
		public float vulnerableDamagemultiplier;

		[Token(Token = "0x40014B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("Can this still be damaged anywhere outside of the vulnerabiliy angle?")]
		public bool invincibleElsewhere;

		[Token(Token = "0x40014B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
		[Tooltip("Draws a fan to visualize the vulnerability angle")]
		public bool drawVulnerabilityAngleGizmo;

		[Token(Token = "0x40014B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7E")]
		private bool alreadyDead;

		[Token(Token = "0x170001F7")]
		public float CurrentHealth
		{
			[Token(Token = "0x60011EF")]
			[Address(RVA = "0xEBCDE8", Offset = "0xEBCDE8", VA = "0xEBCDE8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001F8")]
		public Transform Center
		{
			[Token(Token = "0x60011F0")]
			[Address(RVA = "0xEBCDF0", Offset = "0xEBCDF0", VA = "0xEBCDF0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011F1")]
		[Address(RVA = "0xEBCE70", Offset = "0xEBCE70", VA = "0xEBCE70")]
		protected void Start()
		{
		}

		[Token(Token = "0x60011F2")]
		[Address(RVA = "0xEBCE7C", Offset = "0xEBCE7C", VA = "0xEBCE7C")]
		public void Die()
		{
		}

		[Token(Token = "0x60011F3")]
		[Address(RVA = "0xEBD01C", Offset = "0xEBD01C", VA = "0xEBD01C")]
		public bool isDead()
		{
			return default(bool);
		}

		[Token(Token = "0x60011F4")]
		[Address(RVA = "0xEBD03C", Offset = "0xEBD03C", VA = "0xEBD03C")]
		public void TakeDamageDirectional(float amount, Vector3 direction)
		{
		}

		[Token(Token = "0x60011F5")]
		[Address(RVA = "0xEBADF4", Offset = "0xEBADF4", VA = "0xEBADF4")]
		public void TakeDamagePosition(float amount, Vector3 position)
		{
		}

		[Token(Token = "0x60011F6")]
		[Address(RVA = "0xEBD12C", Offset = "0xEBD12C", VA = "0xEBD12C", Slot = "4")]
		public virtual void TakeDamage(Damage damage)
		{
		}

		[Token(Token = "0x60011F7")]
		[Address(RVA = "0xEBD5B4", Offset = "0xEBD5B4", VA = "0xEBD5B4")]
		public void Heal(float amount)
		{
		}

		[Token(Token = "0x60011F8")]
		[Address(RVA = "0xEBD600", Offset = "0xEBD600", VA = "0xEBD600")]
		public float GetNormalizedHealth()
		{
			return default(float);
		}

		[Token(Token = "0x60011F9")]
		[Address(RVA = "0xEBD438", Offset = "0xEBD438", VA = "0xEBD438")]
		protected void ApplyDirectionalVulnerability(ref Damage damage)
		{
		}

		[Token(Token = "0x60011FA")]
		[Address(RVA = "0xEBD624", Offset = "0xEBD624", VA = "0xEBD624")]
		public void Set(float amount)
		{
		}

		[Token(Token = "0x60011FB")]
		[Address(RVA = "0xEBD62C", Offset = "0xEBD62C", VA = "0xEBD62C")]
		public Health()
		{
		}
	}
	[Token(Token = "0x2000374")]
	public class HealthColorizer : MonoBehaviour
	{
		[Token(Token = "0x40014B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MeshRenderer[] meshRenderers;

		[Token(Token = "0x40014B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Health health;

		[Token(Token = "0x40014B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Space]
		public Gradient colorGradient;

		[Token(Token = "0x40014B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float colorInfluence;

		[Token(Token = "0x40014BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Gradient blinkSpeedGradient;

		[Token(Token = "0x40014BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float blinkSpeed;

		[Token(Token = "0x40014BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float blinkAmount;

		[Token(Token = "0x40014BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float blinkOffset;

		[Token(Token = "0x40014BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Space]
		public bool adjustCustomColorProperty;

		[Token(Token = "0x40014BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string customColorPropertyName;

		[Token(Token = "0x40014C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float customColorPropertyintensityMult;

		[Token(Token = "0x40014C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material[] mats;

		[Token(Token = "0x40014C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Color[] startColors;

		[Token(Token = "0x60011FC")]
		[Address(RVA = "0xEBD750", Offset = "0xEBD750", VA = "0xEBD750")]
		public void Start()
		{
		}

		[Token(Token = "0x60011FD")]
		[Address(RVA = "0xEBD994", Offset = "0xEBD994", VA = "0xEBD994")]
		public void Update()
		{
		}

		[Token(Token = "0x60011FE")]
		[Address(RVA = "0xEBDBB4", Offset = "0xEBDBB4", VA = "0xEBDBB4")]
		public void RestartBlinking()
		{
		}

		[Token(Token = "0x60011FF")]
		[Address(RVA = "0xEBDC5C", Offset = "0xEBDC5C", VA = "0xEBDC5C")]
		public HealthColorizer()
		{
		}
	}
	[Token(Token = "0x2000375")]
	public class KillAchievements : MonoBehaviour
	{
		[Token(Token = "0x2000376")]
		public enum EntityType
		{
			[Token(Token = "0x40014C6")]
			Blimp,
			[Token(Token = "0x40014C7")]
			Car,
			[Token(Token = "0x40014C8")]
			Mech,
			[Token(Token = "0x40014C9")]
			Orb,
			[Token(Token = "0x40014CA")]
			Punisher,
			[Token(Token = "0x40014CB")]
			Spider,
			[Token(Token = "0x40014CC")]
			WormBoss,
			[Token(Token = "0x40014CD")]
			SpiderBoss,
			[Token(Token = "0x40014CE")]
			TurretBoss,
			[Token(Token = "0x40014CF")]
			Boat,
			[Token(Token = "0x40014D0")]
			Dragon,
			[Token(Token = "0x40014D1")]
			Other,
			[Token(Token = "0x40014D2")]
			Delivery,
			[Token(Token = "0x40014D3")]
			Pin,
			[Token(Token = "0x40014D4")]
			Blast,
			[Token(Token = "0x40014D5")]
			Grabber,
			[Token(Token = "0x40014D6")]
			Tentacle,
			[Token(Token = "0x40014D7")]
			Soldier,
			[Token(Token = "0x40014D8")]
			Nexus
		}

		[Token(Token = "0x40014C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EntityType entityID;

		[Token(Token = "0x40014C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool attachToHealth;

		[Token(Token = "0x6001200")]
		[Address(RVA = "0xEBDCE8", Offset = "0xEBDCE8", VA = "0xEBDCE8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001201")]
		[Address(RVA = "0xEBDDAC", Offset = "0xEBDDAC", VA = "0xEBDDAC")]
		public void OnDeath()
		{
		}

		[Token(Token = "0x6001202")]
		[Address(RVA = "0xEBEA90", Offset = "0xEBEA90", VA = "0xEBEA90")]
		public KillAchievements()
		{
		}
	}
	[Token(Token = "0x2000377")]
	public class LaserSweepAttack : MonoBehaviour
	{
		[Token(Token = "0x2000378")]
		[CompilerGenerated]
		private sealed class <EyeLaserSweep>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40014E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40014E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40014E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 initialTargetPosition;

			[Token(Token = "0x40014E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public LaserSweepAttack <>4__this;

			[Token(Token = "0x40014E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Vector3 planeNormal;

			[Token(Token = "0x40014E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float <startTime>5__2;

			[Token(Token = "0x40014E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Vector3 <targetVector>5__3;

			[Token(Token = "0x170001F9")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600120A")]
				[Address(RVA = "0xEBF5DC", Offset = "0xEBF5DC", VA = "0xEBF5DC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001FA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600120C")]
				[Address(RVA = "0xEBF624", Offset = "0xEBF624", VA = "0xEBF624", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001207")]
			[Address(RVA = "0xEBEFE8", Offset = "0xEBEFE8", VA = "0xEBEFE8")]
			[DebuggerHidden]
			public <EyeLaserSweep>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x6001208")]
			[Address(RVA = "0xEBF034", Offset = "0xEBF034", VA = "0xEBF034", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001209")]
			[Address(RVA = "0xEBF038", Offset = "0xEBF038", VA = "0xEBF038", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600120B")]
			[Address(RVA = "0xEBF5E4", Offset = "0xEBF5E4", VA = "0xEBF5E4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40014D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("What to shoot at")]
		public Rigidbody targetedRigidbody;

		[Token(Token = "0x40014DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Object to enable/disable to control the laser")]
		public GameObject eyeLaser;

		[Token(Token = "0x40014DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Object to enable/disable to control the impact particle effects")]
		public GameObject eyeLaserImpactFX;

		[Token(Token = "0x40014DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("How long does a sweep last")]
		public float sweepDuration;

		[Token(Token = "0x40014DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("How wide of an arc can the laser be swept across")]
		public float sweepArc;

		[Token(Token = "0x40014DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("How wide of an arc can the laser be fired in")]
		public float maxForwardTargetingArc;

		[Token(Token = "0x40014DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Sound StartAttackSound;

		[Token(Token = "0x40014E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool isSweeping;

		[Token(Token = "0x6001203")]
		[Address(RVA = "0xEBEAA0", Offset = "0xEBEAA0", VA = "0xEBEAA0")]
		public void PerformEyeSweep()
		{
		}

		[Token(Token = "0x6001204")]
		[Address(RVA = "0xEBEF34", Offset = "0xEBEF34", VA = "0xEBEF34")]
		[IteratorStateMachine(typeof(<EyeLaserSweep>d__9))]
		private IEnumerator EyeLaserSweep(Vector3 planeNormal, Vector3 initialTargetPosition)
		{
			return null;
		}

		[Token(Token = "0x6001205")]
		[Address(RVA = "0xEBF010", Offset = "0xEBF010", VA = "0xEBF010")]
		public bool IsSweeping()
		{
			return default(bool);
		}

		[Token(Token = "0x6001206")]
		[Address(RVA = "0xEBF018", Offset = "0xEBF018", VA = "0xEBF018")]
		public LaserSweepAttack()
		{
		}
	}
	[Token(Token = "0x2000379")]
	public class Lifetime : MonoBehaviour
	{
		[Token(Token = "0x40014E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float lifetime;

		[Token(Token = "0x600120D")]
		[Address(RVA = "0xEBF62C", Offset = "0xEBF62C", VA = "0xEBF62C")]
		private void Update()
		{
		}

		[Token(Token = "0x600120E")]
		[Address(RVA = "0xEBF6CC", Offset = "0xEBF6CC", VA = "0xEBF6CC")]
		public Lifetime()
		{
		}
	}
	[Token(Token = "0x200037A")]
	public class Pointiness : MonoBehaviour
	{
		[Token(Token = "0x40014E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool ignoreThis;

		[Token(Token = "0x40014EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float pointiness;

		[Token(Token = "0x40014EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float extraDamageScaling;

		[Token(Token = "0x600120F")]
		[Address(RVA = "0xEBF6DC", Offset = "0xEBF6DC", VA = "0xEBF6DC")]
		public Pointiness()
		{
		}
	}
	[Token(Token = "0x200037B")]
	public class Projectile : MonoBehaviour
	{
		[Token(Token = "0x40014EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject ignore;

		[Token(Token = "0x40014ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float damage;

		[Token(Token = "0x40014EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float empDuration;

		[Token(Token = "0x40014EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool empAffectsBothHands;

		[Token(Token = "0x40014F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Health myHealth;

		[Token(Token = "0x40014F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Rigidbody myRigidbody;

		[Token(Token = "0x40014F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public DeathEffect myDeathEffect;

		[Token(Token = "0x40014F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public LayerMask excludeHitLayers;

		[Token(Token = "0x6001210")]
		[Address(RVA = "0xEBF6EC", Offset = "0xEBF6EC", VA = "0xEBF6EC")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001211")]
		[Address(RVA = "0xEBF9F8", Offset = "0xEBF9F8", VA = "0xEBF9F8")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001212")]
		[Address(RVA = "0xEBF718", Offset = "0xEBF718", VA = "0xEBF718")]
		private void Hit(Collider other)
		{
		}

		[Token(Token = "0x6001213")]
		[Address(RVA = "0xEBF9FC", Offset = "0xEBF9FC", VA = "0xEBF9FC")]
		public Projectile()
		{
		}
	}
	[Token(Token = "0x200037C")]
	public class RedirectedHealth : Health
	{
		[Token(Token = "0x40014F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7F")]
		[Tooltip("Should this objects damage modifiers be applied to redirected damage (ie. directional vulnerability)")]
		[Header("Redirection Properties")]
		public bool applyMultipiersBeforeRedirections;

		[Token(Token = "0x40014F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool normalizedRedistribution;

		[Token(Token = "0x40014F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private RedirectionInfo[] redirections;

		[Token(Token = "0x6001214")]
		[Address(RVA = "0xEBFA0C", Offset = "0xEBFA0C", VA = "0xEBFA0C")]
		private new void Start()
		{
		}

		[Token(Token = "0x6001215")]
		[Address(RVA = "0xEBFBB4", Offset = "0xEBFBB4", VA = "0xEBFBB4", Slot = "4")]
		public override void TakeDamage(Damage damage)
		{
		}

		[Token(Token = "0x6001216")]
		[Address(RVA = "0xEBFE14", Offset = "0xEBFE14", VA = "0xEBFE14")]
		private bool RedirectionsAreValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6001217")]
		[Address(RVA = "0xEBFA18", Offset = "0xEBFA18", VA = "0xEBFA18")]
		private void CalculateNormalizedWeights()
		{
		}

		[Token(Token = "0x6001218")]
		[Address(RVA = "0xEBFED4", Offset = "0xEBFED4", VA = "0xEBFED4")]
		public RedirectedHealth()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200037D")]
	internal struct RedirectionInfo
	{
		[Token(Token = "0x40014F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Health target;

		[Token(Token = "0x40014F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float damageMultiplier;

		[Token(Token = "0x40014F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float normalizedWeight;
	}
	[Token(Token = "0x200037E")]
	public class StaticDamage : MonoBehaviour
	{
		[Token(Token = "0x40014FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float damage;

		[Token(Token = "0x40014FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float cooldown;

		[Token(Token = "0x40014FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float mostRecentDamage;

		[Token(Token = "0x6001219")]
		[Address(RVA = "0xEBFEE0", Offset = "0xEBFEE0", VA = "0xEBFEE0")]
		private void OnTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x600121A")]
		[Address(RVA = "0xEC0010", Offset = "0xEC0010", VA = "0xEC0010")]
		public StaticDamage()
		{
		}
	}
	[Token(Token = "0x200037F")]
	public class Team : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000380")]
		public enum TeamEnum
		{
			[Token(Token = "0x40014FF")]
			Player,
			[Token(Token = "0x4001500")]
			Civilian,
			[Token(Token = "0x4001501")]
			Enemy,
			[Token(Token = "0x4001502")]
			Objective
		}

		[Token(Token = "0x40014FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TeamEnum myTeam;

		[Token(Token = "0x600121B")]
		[Address(RVA = "0xEC0020", Offset = "0xEC0020", VA = "0xEC0020")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600121C")]
		[Address(RVA = "0xEC01B4", Offset = "0xEC01B4", VA = "0xEC01B4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600121D")]
		[Address(RVA = "0xEC02AC", Offset = "0xEC02AC", VA = "0xEC02AC")]
		public Team()
		{
		}
	}
	[Token(Token = "0x2000381")]
	public class TeamManager : MonoBehaviour
	{
		[Token(Token = "0x4001503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static TeamManager Instance;

		[Token(Token = "0x4001504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Dictionary<Team.TeamEnum, HashSet<GameObject>> teamDict;

		[Token(Token = "0x600121E")]
		[Address(RVA = "0xEC02B4", Offset = "0xEC02B4", VA = "0xEC02B4")]
		private void Awake()
		{
		}

		[Token(Token = "0x600121F")]
		[Address(RVA = "0xEC0090", Offset = "0xEC0090", VA = "0xEC0090")]
		public void Add(Team.TeamEnum t, GameObject g)
		{
		}

		[Token(Token = "0x6001220")]
		[Address(RVA = "0xEC0224", Offset = "0xEC0224", VA = "0xEC0224")]
		public void Remove(Team.TeamEnum t, GameObject g)
		{
		}

		[Token(Token = "0x6001221")]
		[Address(RVA = "0xEC030C", Offset = "0xEC030C", VA = "0xEC030C")]
		public IEnumerable<GameObject> GetAll(IEnumerable<Team.TeamEnum> teams)
		{
			return null;
		}

		[Token(Token = "0x6001222")]
		[Address(RVA = "0xEC03B0", Offset = "0xEC03B0", VA = "0xEC03B0")]
		public IEnumerable<GameObject> GetAll(Team.TeamEnum t)
		{
			return null;
		}

		[Token(Token = "0x6001223")]
		[Address(RVA = "0xEC046C", Offset = "0xEC046C", VA = "0xEC046C")]
		public IEnumerable<GameObject> GetNearby(Team.TeamEnum[] teams, Vector3 pos, float maxDist)
		{
			return null;
		}

		[Token(Token = "0x6001224")]
		[Address(RVA = "0xEC0580", Offset = "0xEC0580", VA = "0xEC0580")]
		public IEnumerable<GameObject> GetNearby(Team.TeamEnum t, Vector3 pos, float maxDist)
		{
			return null;
		}

		[Token(Token = "0x6001225")]
		[Address(RVA = "0xEC0694", Offset = "0xEC0694", VA = "0xEC0694")]
		public TeamManager()
		{
		}
	}
}
namespace Audio
{
	[Token(Token = "0x2000384")]
	public class AmbienceManager : MonoBehaviour
	{
		[Token(Token = "0x400150A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Sound cityAmbience;

		[Token(Token = "0x400150B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Sound windAmbience;

		[Token(Token = "0x400150C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Sound oceanAmbience;

		[Token(Token = "0x400150D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float windTransitionStart;

		[Token(Token = "0x400150E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float windTransitionEnd;

		[Token(Token = "0x400150F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float oceanTransitionStart;

		[Token(Token = "0x4001510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float oceanTransitionEnd;

		[Token(Token = "0x600122A")]
		[Address(RVA = "0xEC080C", Offset = "0xEC080C", VA = "0xEC080C")]
		private void Update()
		{
		}

		[Token(Token = "0x600122B")]
		[Address(RVA = "0xEC09C4", Offset = "0xEC09C4", VA = "0xEC09C4")]
		public AmbienceManager()
		{
		}
	}
	[Token(Token = "0x2000385")]
	public class BlackHoleSpawnSound : MonoBehaviour
	{
		[Token(Token = "0x4001511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Sound spawnSound;

		[Token(Token = "0x600122C")]
		[Address(RVA = "0xEC09D8", Offset = "0xEC09D8", VA = "0xEC09D8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600122D")]
		[Address(RVA = "0xEC09F4", Offset = "0xEC09F4", VA = "0xEC09F4")]
		public BlackHoleSpawnSound()
		{
		}
	}
	[Token(Token = "0x2000386")]
	public class CombatMusicManager : MonoBehaviour
	{
		[Token(Token = "0x4001512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static CombatMusicManager instance;

		[Token(Token = "0x4001513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float combatDecayRate;

		[Token(Token = "0x4001514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float combatSmoothRate;

		[Token(Token = "0x4001515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float combatSignalScale;

		[Token(Token = "0x4001516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float combatSignal;

		[Token(Token = "0x4001517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float smoothedCombatSignal;

		[Token(Token = "0x170001FB")]
		public float CombatVolumeMod
		{
			[Token(Token = "0x600122E")]
			[Address(RVA = "0xEC09FC", Offset = "0xEC09FC", VA = "0xEC09FC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600122F")]
		[Address(RVA = "0xEC0A20", Offset = "0xEC0A20", VA = "0xEC0A20")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001230")]
		[Address(RVA = "0xEC0A78", Offset = "0xEC0A78", VA = "0xEC0A78")]
		public static void LogCombatAction(float significance = 1f)
		{
		}

		[Token(Token = "0x6001231")]
		[Address(RVA = "0xEC0AE0", Offset = "0xEC0AE0", VA = "0xEC0AE0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001232")]
		[Address(RVA = "0xEC0B64", Offset = "0xEC0B64", VA = "0xEC0B64")]
		public CombatMusicManager()
		{
		}
	}
	[Token(Token = "0x2000387")]
	public class EnemyVoices : MonoBehaviour
	{
		[Token(Token = "0x4001518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static EnemyVoices currentSpeaker;

		[Token(Token = "0x4001519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Sounds")]
		public SoundSet fallSounds;

		[Token(Token = "0x400151A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SoundSet jumpSounds;

		[Token(Token = "0x400151B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SoundSet engageSounds;

		[Token(Token = "0x400151C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SoundSet damageSounds;

		[Token(Token = "0x400151D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SoundSet attackSounds;

		[Token(Token = "0x400151E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SoundSet actionSounds;

		[Token(Token = "0x400151F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Modifiers")]
		public float attackSoundFreq;

		[Token(Token = "0x4001520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float engageSoundFreq;

		[Token(Token = "0x4001521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float deathLineDivisor;

		[Token(Token = "0x4001522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float maxPlayDistance;

		[Token(Token = "0x4001523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Components")]
		public Sound voice;

		[Token(Token = "0x4001524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Health myHealth;

		[Token(Token = "0x4001525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shooting myShooting;

		[Token(Token = "0x170001FC")]
		private float DistanceToPlayer
		{
			[Token(Token = "0x6001233")]
			[Address(RVA = "0xEC0B80", Offset = "0xEC0B80", VA = "0xEC0B80")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001FD")]
		private float PlayFreqMult
		{
			[Token(Token = "0x6001234")]
			[Address(RVA = "0xEC0C8C", Offset = "0xEC0C8C", VA = "0xEC0C8C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001235")]
		[Address(RVA = "0xEC0CBC", Offset = "0xEC0CBC", VA = "0xEC0CBC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001236")]
		[Address(RVA = "0xEC0ED8", Offset = "0xEC0ED8", VA = "0xEC0ED8")]
		private bool TryPlay(SoundSet soundSet)
		{
			return default(bool);
		}

		[Token(Token = "0x6001237")]
		[Address(RVA = "0xEC113C", Offset = "0xEC113C", VA = "0xEC113C")]
		public void PlayFallSound()
		{
		}

		[Token(Token = "0x6001238")]
		[Address(RVA = "0xEC1144", Offset = "0xEC1144", VA = "0xEC1144")]
		public void PlayActionSound()
		{
		}

		[Token(Token = "0x6001239")]
		[Address(RVA = "0xEC114C", Offset = "0xEC114C", VA = "0xEC114C")]
		public void PlayAttackSound()
		{
		}

		[Token(Token = "0x600123A")]
		[Address(RVA = "0xEC1154", Offset = "0xEC1154", VA = "0xEC1154")]
		public void PlayJumpSound()
		{
		}

		[Token(Token = "0x600123B")]
		[Address(RVA = "0xEC115C", Offset = "0xEC115C", VA = "0xEC115C")]
		public void PlayEngageSound()
		{
		}

		[Token(Token = "0x600123C")]
		[Address(RVA = "0xEC1164", Offset = "0xEC1164", VA = "0xEC1164")]
		public EnemyVoices()
		{
		}
	}
	[Token(Token = "0x2000388")]
	public class MusicManager : MonoBehaviour
	{
		[Token(Token = "0x4001526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static MusicManager instance;

		[Token(Token = "0x4001527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string currentTrack;

		[Token(Token = "0x4001528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly Dictionary<string, MusicPool> musicTracks;

		[Token(Token = "0x600123E")]
		[Address(RVA = "0xEC125C", Offset = "0xEC125C", VA = "0xEC125C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600123F")]
		[Address(RVA = "0xEC15E8", Offset = "0xEC15E8", VA = "0xEC15E8")]
		public void Play(string track)
		{
		}

		[Token(Token = "0x6001240")]
		[Address(RVA = "0xEC1690", Offset = "0xEC1690", VA = "0xEC1690")]
		public MusicManager()
		{
		}
	}
	[Token(Token = "0x2000389")]
	public class MusicPool : MonoBehaviour
	{
		[Token(Token = "0x4001529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip[] music;

		[Token(Token = "0x400152A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioMixerGroup audioMixerGroup;

		[Token(Token = "0x400152B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float baseVolume;

		[Token(Token = "0x400152C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool isPlaying;

		[Token(Token = "0x400152D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float fadeInTime;

		[Token(Token = "0x400152E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float fadeOutTime;

		[Token(Token = "0x400152F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool allowRepeats;

		[Token(Token = "0x4001530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int current;

		[Token(Token = "0x4001531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float currentVolume;

		[Token(Token = "0x4001532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Sound[] musicSounds;

		[Token(Token = "0x170001FE")]
		private static float MusicPitch
		{
			[Token(Token = "0x6001241")]
			[Address(RVA = "0xEC1718", Offset = "0xEC1718", VA = "0xEC1718")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001242")]
		[Address(RVA = "0xEC1788", Offset = "0xEC1788", VA = "0xEC1788")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001243")]
		[Address(RVA = "0xEC187C", Offset = "0xEC187C", VA = "0xEC187C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001244")]
		[Address(RVA = "0xEC1A44", Offset = "0xEC1A44", VA = "0xEC1A44")]
		public MusicPool()
		{
		}
	}
	[Token(Token = "0x200038A")]
	public class OceanSound : MonoBehaviour
	{
		[Token(Token = "0x4001533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Sound enterOceanSound;

		[Token(Token = "0x4001534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Sound inOceanSound;

		[Token(Token = "0x4001535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Sound exitOceanSound;

		[Token(Token = "0x6001246")]
		[Address(RVA = "0xEC1B64", Offset = "0xEC1B64", VA = "0xEC1B64")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001247")]
		[Address(RVA = "0xEC1C88", Offset = "0xEC1C88", VA = "0xEC1C88")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6001248")]
		[Address(RVA = "0xEC1DA8", Offset = "0xEC1DA8", VA = "0xEC1DA8")]
		public OceanSound()
		{
		}
	}
	[Token(Token = "0x200038B")]
	public class PlayTrack : MonoBehaviour
	{
		[Token(Token = "0x4001536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string musicTrack;

		[Token(Token = "0x4001537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string prevTrack;

		[Token(Token = "0x6001249")]
		[Address(RVA = "0xEC1DB0", Offset = "0xEC1DB0", VA = "0xEC1DB0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600124A")]
		[Address(RVA = "0xEC1E28", Offset = "0xEC1E28", VA = "0xEC1E28")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600124B")]
		[Address(RVA = "0xEC1E80", Offset = "0xEC1E80", VA = "0xEC1E80")]
		public PlayTrack()
		{
		}
	}
	[Token(Token = "0x200038C")]
	public class SliderTextController : MonoBehaviour
	{
		[Token(Token = "0x4001538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Slider sliderUI;

		[Token(Token = "0x4001539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private TextMeshProUGUI sliderTextUI;

		[Token(Token = "0x600124C")]
		[Address(RVA = "0xEC1E88", Offset = "0xEC1E88", VA = "0xEC1E88")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x600124D")]
		[Address(RVA = "0xEC1F1C", Offset = "0xEC1F1C", VA = "0xEC1F1C")]
		public void OnSliderChange(float val)
		{
		}

		[Token(Token = "0x600124E")]
		[Address(RVA = "0xEC1FB0", Offset = "0xEC1FB0", VA = "0xEC1FB0")]
		public SliderTextController()
		{
		}
	}
	[Token(Token = "0x200038D")]
	public class Sound : MonoBehaviour
	{
		[Token(Token = "0x200038E")]
		public enum SpatializationMode
		{
			[Token(Token = "0x400154C")]
			None,
			[Token(Token = "0x400154D")]
			Normal,
			[Token(Token = "0x400154E")]
			Advanced
		}

		[Token(Token = "0x200038F")]
		[CompilerGenerated]
		private sealed class <EveryUpdate>d__23 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400154F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001550")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001551")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Sound <>4__this;

			[Token(Token = "0x17000201")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001262")]
				[Address(RVA = "0xEC2860", Offset = "0xEC2860", VA = "0xEC2860", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000202")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001264")]
				[Address(RVA = "0xEC28A8", Offset = "0xEC28A8", VA = "0xEC28A8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600125F")]
			[Address(RVA = "0xEC21B8", Offset = "0xEC21B8", VA = "0xEC21B8")]
			[DebuggerHidden]
			public <EveryUpdate>d__23(int <>1__state)
			{
			}

			[Token(Token = "0x6001260")]
			[Address(RVA = "0xEC268C", Offset = "0xEC268C", VA = "0xEC268C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001261")]
			[Address(RVA = "0xEC2690", Offset = "0xEC2690", VA = "0xEC2690", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001263")]
			[Address(RVA = "0xEC2868", Offset = "0xEC2868", VA = "0xEC2868", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400153A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip clip;

		[Token(Token = "0x400153B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioMixerGroup audioMixerGroup;

		[Token(Token = "0x400153C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 1f)]
		public float baseVolume;

		[Token(Token = "0x400153D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float pitchMin;

		[Token(Token = "0x400153E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float pitchMax;

		[Token(Token = "0x400153F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool loop;

		[Token(Token = "0x4001540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool playOnAwake;

		[Token(Token = "0x4001541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float emitterSize;

		[Token(Token = "0x4001542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float dopplerLevel;

		[Token(Token = "0x4001543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SpatializationMode spatialization;

		[Token(Token = "0x4001544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string localizationKey;

		[Token(Token = "0x4001545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Optional Auto Start/Stop")]
		public bool autoStartStop;

		[Token(Token = "0x4001546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float maxDistance;

		[Token(Token = "0x4001547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private AudioSource audioSource;

		[Token(Token = "0x4001548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Coroutine everyUpdate;

		[Token(Token = "0x4001549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool hasInitialized;

		[Token(Token = "0x400154A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool paused;

		[Token(Token = "0x170001FF")]
		private bool HasSubtitles
		{
			[Token(Token = "0x600124F")]
			[Address(RVA = "0xEC1FB8", Offset = "0xEC1FB8", VA = "0xEC1FB8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000200")]
		public bool IsPlaying
		{
			[Token(Token = "0x6001250")]
			[Address(RVA = "0xEC107C", Offset = "0xEC107C", VA = "0xEC107C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001251")]
		[Address(RVA = "0xEC2130", Offset = "0xEC2130", VA = "0xEC2130")]
		private void Start()
		{
		}

		[Token(Token = "0x6001252")]
		[Address(RVA = "0xEC2144", Offset = "0xEC2144", VA = "0xEC2144")]
		[IteratorStateMachine(typeof(<EveryUpdate>d__23))]
		private IEnumerator EveryUpdate()
		{
			return null;
		}

		[Token(Token = "0x6001253")]
		[Address(RVA = "0xEC1FD8", Offset = "0xEC1FD8", VA = "0xEC1FD8")]
		private void InitializeIfNeeded()
		{
		}

		[Token(Token = "0x6001254")]
		[Address(RVA = "0xEC2338", Offset = "0xEC2338", VA = "0xEC2338")]
		public void CopySettingsFrom(SoundSet soundSet)
		{
		}

		[Token(Token = "0x6001255")]
		[Address(RVA = "0xEC21E0", Offset = "0xEC21E0", VA = "0xEC21E0")]
		private void SetAudioSourceSettings()
		{
		}

		[Token(Token = "0x6001256")]
		[Address(RVA = "0xEBED10", Offset = "0xEBED10", VA = "0xEBED10")]
		public void Play(bool restart = false)
		{
		}

		[Token(Token = "0x6001257")]
		[Address(RVA = "0xEC099C", Offset = "0xEC099C", VA = "0xEC099C")]
		public void Play(float volume, bool restart = false)
		{
		}

		[Token(Token = "0x6001258")]
		[Address(RVA = "0xEC10CC", Offset = "0xEC10CC", VA = "0xEC10CC")]
		public bool Play(SoundSet soundSet)
		{
			return default(bool);
		}

		[Token(Token = "0x6001259")]
		[Address(RVA = "0xEC25E4", Offset = "0xEC25E4", VA = "0xEC25E4")]
		public void SetClip(AudioClip clip)
		{
		}

		[Token(Token = "0x600125A")]
		[Address(RVA = "0xEC2628", Offset = "0xEC2628", VA = "0xEC2628")]
		public void SetEmitterSize(float emitterSize)
		{
		}

		[Token(Token = "0x600125B")]
		[Address(RVA = "0xEC1A10", Offset = "0xEC1A10", VA = "0xEC1A10")]
		public void SetPitch(float pitch)
		{
		}

		[Token(Token = "0x600125C")]
		[Address(RVA = "0xEC25AC", Offset = "0xEC25AC", VA = "0xEC25AC")]
		public void SetVolume(float volume)
		{
		}

		[Token(Token = "0x600125D")]
		[Address(RVA = "0xEC10A0", Offset = "0xEC10A0", VA = "0xEC10A0")]
		public void Stop()
		{
		}

		[Token(Token = "0x600125E")]
		[Address(RVA = "0xEC2660", Offset = "0xEC2660", VA = "0xEC2660")]
		public Sound()
		{
		}
	}
	[Token(Token = "0x2000390")]
	[CreateAssetMenu(fileName = "New Sound Set", menuName = "SoundSet")]
	public class SoundSet : ScriptableObject
	{
		[Token(Token = "0x4001552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool canInterrupt;

		[Token(Token = "0x4001553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool avoidRepeats;

		[Token(Token = "0x4001554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float sayNothingProbability;

		[Token(Token = "0x4001555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Sound Data")]
		public AudioMixerGroup audioMixerGroup;

		[Token(Token = "0x4001556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 1f)]
		public float baseVolume;

		[Token(Token = "0x4001557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float pitchMin;

		[Token(Token = "0x4001558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float pitchMax;

		[Token(Token = "0x4001559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool loop;

		[Token(Token = "0x400155A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool playOnAwake;

		[Token(Token = "0x400155B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float emitterSize;

		[Token(Token = "0x400155C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float dopplerLevel;

		[Token(Token = "0x400155D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Sound.SpatializationMode spatialization;

		[Token(Token = "0x400155E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Header("Optional Auto Start/Stop")]
		public bool autoStartStop;

		[Token(Token = "0x400155F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float maxDistance;

		[Token(Token = "0x4001560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Sound References")]
		public AudioClip[] soundClips;

		[Token(Token = "0x4001561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string[] localizationKeys;

		[Token(Token = "0x6001265")]
		[Address(RVA = "0xEC23F4", Offset = "0xEC23F4", VA = "0xEC23F4")]
		public AudioClip GetRandomClip(AudioClip prev)
		{
			return null;
		}

		[Token(Token = "0x6001266")]
		[Address(RVA = "0xEC24DC", Offset = "0xEC24DC", VA = "0xEC24DC")]
		public string GetLocalizationKey(AudioClip clip)
		{
			return null;
		}

		[Token(Token = "0x6001267")]
		[Address(RVA = "0xEC28B0", Offset = "0xEC28B0", VA = "0xEC28B0")]
		public SoundSet()
		{
		}
	}
	[Token(Token = "0x2000391")]
	public class VoiceUtils
	{
		[Token(Token = "0x4001562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Sound current;

		[Token(Token = "0x4001563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxPlayDist;

		[Token(Token = "0x6001268")]
		[Address(RVA = "0xEC28E0", Offset = "0xEC28E0", VA = "0xEC28E0")]
		private bool CouldPlaySound(Transform transform)
		{
			return default(bool);
		}

		[Token(Token = "0x6001269")]
		[Address(RVA = "0xEC2A4C", Offset = "0xEC2A4C", VA = "0xEC2A4C")]
		public bool PlaySound(Transform transform, Sound[] sounds)
		{
			return default(bool);
		}

		[Token(Token = "0x600126A")]
		[Address(RVA = "0xEC2A94", Offset = "0xEC2A94", VA = "0xEC2A94")]
		public static Sound PlayRandom(Sound[] sounds)
		{
			return null;
		}

		[Token(Token = "0x600126B")]
		[Address(RVA = "0xEC2AE8", Offset = "0xEC2AE8", VA = "0xEC2AE8")]
		public VoiceUtils()
		{
		}
	}
}
namespace AI
{
	[Token(Token = "0x2000392")]
	public class BillboardAI : MonoBehaviour
	{
		[Token(Token = "0x4001564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HashSet<BillboardAI> All;

		[Token(Token = "0x4001565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Sound mySound;

		[Token(Token = "0x4001566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MeshRenderer myMeshRenderer;

		[Token(Token = "0x4001567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material originalMaterial;

		[Token(Token = "0x600126C")]
		[Address(RVA = "0xEC2AF8", Offset = "0xEC2AF8", VA = "0xEC2AF8")]
		public void SetMaterialOverride(Material newMaterial)
		{
		}

		[Token(Token = "0x600126D")]
		[Address(RVA = "0xEC2BD0", Offset = "0xEC2BD0", VA = "0xEC2BD0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600126E")]
		[Address(RVA = "0xEC2C50", Offset = "0xEC2C50", VA = "0xEC2C50")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600126F")]
		[Address(RVA = "0xEC2CD0", Offset = "0xEC2CD0", VA = "0xEC2CD0")]
		public BillboardAI()
		{
		}
	}
	[Token(Token = "0x2000393")]
	public class BobAI : MonoBehaviour
	{
		[Token(Token = "0x4001568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float textHeight;

		[Token(Token = "0x6001271")]
		[Address(RVA = "0xEC2D70", Offset = "0xEC2D70", VA = "0xEC2D70")]
		private void Update()
		{
		}

		[Token(Token = "0x6001272")]
		[Address(RVA = "0xEC2EF8", Offset = "0xEC2EF8", VA = "0xEC2EF8")]
		public BobAI()
		{
		}
	}
	[Token(Token = "0x2000394")]
	public class FloatAI : MonoBehaviour
	{
		[Token(Token = "0x4001569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float waterHeight;

		[Token(Token = "0x400156A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float underwaterDist;

		[Token(Token = "0x400156B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float underwaterDrag;

		[Token(Token = "0x400156C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float underwaterAngularDrag;

		[Token(Token = "0x400156D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Rigidbody myRigidbody;

		[Token(Token = "0x6001273")]
		[Address(RVA = "0xEC2F0C", Offset = "0xEC2F0C", VA = "0xEC2F0C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001274")]
		[Address(RVA = "0xEC2F64", Offset = "0xEC2F64", VA = "0xEC2F64")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001275")]
		[Address(RVA = "0xEC30B8", Offset = "0xEC30B8", VA = "0xEC30B8")]
		public FloatAI()
		{
		}
	}
	[Token(Token = "0x2000395")]
	public class GearBehavior : MonoBehaviour
	{
		[Token(Token = "0x400156E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float activateChance;

		[Token(Token = "0x400156F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject pickupEffectPrefab;

		[Token(Token = "0x4001570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool hasBeenCollected;

		[Token(Token = "0x6001276")]
		[Address(RVA = "0xEC30CC", Offset = "0xEC30CC", VA = "0xEC30CC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001277")]
		[Address(RVA = "0xEC3114", Offset = "0xEC3114", VA = "0xEC3114")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001278")]
		[Address(RVA = "0xEC32B4", Offset = "0xEC32B4", VA = "0xEC32B4")]
		public GearBehavior()
		{
		}
	}
	[Token(Token = "0x2000396")]
	public class RandomizeInitialDirection : MonoBehaviour
	{
		[Token(Token = "0x2000397")]
		[CompilerGenerated]
		private sealed class <Start>d__1 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001572")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001573")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001574")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RandomizeInitialDirection <>4__this;

			[Token(Token = "0x17000203")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600127E")]
				[Address(RVA = "0xEC3478", Offset = "0xEC3478", VA = "0xEC3478", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000204")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001280")]
				[Address(RVA = "0xEC34C0", Offset = "0xEC34C0", VA = "0xEC34C0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600127B")]
			[Address(RVA = "0xEC333C", Offset = "0xEC333C", VA = "0xEC333C")]
			[DebuggerHidden]
			public <Start>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x600127C")]
			[Address(RVA = "0xEC336C", Offset = "0xEC336C", VA = "0xEC336C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600127D")]
			[Address(RVA = "0xEC3370", Offset = "0xEC3370", VA = "0xEC3370", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600127F")]
			[Address(RVA = "0xEC3480", Offset = "0xEC3480", VA = "0xEC3480", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool randomizeEveryAxis;

		[Token(Token = "0x6001279")]
		[Address(RVA = "0xEC32C8", Offset = "0xEC32C8", VA = "0xEC32C8")]
		[IteratorStateMachine(typeof(<Start>d__1))]
		public IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x600127A")]
		[Address(RVA = "0xEC3364", Offset = "0xEC3364", VA = "0xEC3364")]
		public RandomizeInitialDirection()
		{
		}
	}
	[Token(Token = "0x2000398")]
	public class SpawnerAI : MonoBehaviour
	{
		[Token(Token = "0x200039A")]
		[CompilerGenerated]
		private sealed class <Spawn>d__16 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001584")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001585")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001586")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SpawnerAI <>4__this;

			[Token(Token = "0x4001587")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <i>5__2;

			[Token(Token = "0x17000205")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600128C")]
				[Address(RVA = "0xEC3F8C", Offset = "0xEC3F8C", VA = "0xEC3F8C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000206")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600128E")]
				[Address(RVA = "0xEC3FD4", Offset = "0xEC3FD4", VA = "0xEC3FD4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001289")]
			[Address(RVA = "0xEC396C", Offset = "0xEC396C", VA = "0xEC396C")]
			[DebuggerHidden]
			public <Spawn>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x600128A")]
			[Address(RVA = "0xEC3AE8", Offset = "0xEC3AE8", VA = "0xEC3AE8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600128B")]
			[Address(RVA = "0xEC3AEC", Offset = "0xEC3AEC", VA = "0xEC3AEC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600128D")]
			[Address(RVA = "0xEC3F94", Offset = "0xEC3F94", VA = "0xEC3F94", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject objectToSpawn;

		[Token(Token = "0x4001576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform spawnPosition;

		[Token(Token = "0x4001577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Targeting myTargeting;

		[Token(Token = "0x4001578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Rigidbody rb;

		[Token(Token = "0x4001579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 SpeedOnSpawn;

		[Token(Token = "0x400157A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Sound spawnSound;

		[Token(Token = "0x400157B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Management")]
		public int maxNumSpawnedObjects;

		[Token(Token = "0x400157C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float lifetimeDuration;

		[Token(Token = "0x400157D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool randomizeFirstSpawnTime;

		[Token(Token = "0x400157E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float spawnFrequency;

		[Token(Token = "0x400157F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float spawnStagger;

		[Token(Token = "0x4001580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<GameObject> spawnedObjects;

		[Token(Token = "0x4001581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UnityEvent spawnEvent;

		[Token(Token = "0x6001281")]
		[Address(RVA = "0xEC34C8", Offset = "0xEC34C8", VA = "0xEC34C8")]
		public void Start()
		{
		}

		[Token(Token = "0x6001282")]
		[Address(RVA = "0xEC35B0", Offset = "0xEC35B0", VA = "0xEC35B0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001283")]
		[Address(RVA = "0xEC3740", Offset = "0xEC3740", VA = "0xEC3740")]
		private void SpawnLoop()
		{
		}

		[Token(Token = "0x6001284")]
		[Address(RVA = "0xEC38F8", Offset = "0xEC38F8", VA = "0xEC38F8")]
		[IteratorStateMachine(typeof(<Spawn>d__16))]
		private IEnumerator Spawn()
		{
			return null;
		}

		[Token(Token = "0x6001285")]
		[Address(RVA = "0xEC3994", Offset = "0xEC3994", VA = "0xEC3994")]
		public SpawnerAI()
		{
		}
	}
	[Token(Token = "0x200039B")]
	public class StoryModeVoices : MonoBehaviour
	{
		[Token(Token = "0x200039C")]
		[CompilerGenerated]
		private sealed class <StoryModeLine>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400158E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400158F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001590")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public StoryModeVoices <>4__this;

			[Token(Token = "0x4001591")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int lineNum;

			[Token(Token = "0x17000207")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001298")]
				[Address(RVA = "0xEC44F4", Offset = "0xEC44F4", VA = "0xEC44F4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000208")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600129A")]
				[Address(RVA = "0xEC453C", Offset = "0xEC453C", VA = "0xEC453C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001295")]
			[Address(RVA = "0xEC40D8", Offset = "0xEC40D8", VA = "0xEC40D8")]
			[DebuggerHidden]
			public <StoryModeLine>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6001296")]
			[Address(RVA = "0xEC4348", Offset = "0xEC4348", VA = "0xEC4348", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001297")]
			[Address(RVA = "0xEC434C", Offset = "0xEC434C", VA = "0xEC434C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001299")]
			[Address(RVA = "0xEC44FC", Offset = "0xEC44FC", VA = "0xEC44FC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200039E")]
		[CompilerGenerated]
		private sealed class <PlaySound>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001594")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001595")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001596")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SoundSet soundSet;

			[Token(Token = "0x4001597")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int lineNum;

			[Token(Token = "0x4001598")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public StoryModeVoices <>4__this;

			[Token(Token = "0x17000209")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60012A1")]
				[Address(RVA = "0xEC4C40", Offset = "0xEC4C40", VA = "0xEC4C40", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700020A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60012A3")]
				[Address(RVA = "0xEC4C88", Offset = "0xEC4C88", VA = "0xEC4C88", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600129E")]
			[Address(RVA = "0xEC4198", Offset = "0xEC4198", VA = "0xEC4198")]
			[DebuggerHidden]
			public <PlaySound>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x600129F")]
			[Address(RVA = "0xEC467C", Offset = "0xEC467C", VA = "0xEC467C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60012A0")]
			[Address(RVA = "0xEC4680", Offset = "0xEC4680", VA = "0xEC4680", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60012A2")]
			[Address(RVA = "0xEC4C48", Offset = "0xEC4C48", VA = "0xEC4C48", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static StoryModeVoices instance;

		[Token(Token = "0x4001589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SoundSet storyModeVoices;

		[Token(Token = "0x400158A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material sufferMaterial;

		[Token(Token = "0x400158B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int maxBillboardSounds;

		[Token(Token = "0x400158C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Material staticMaterial;

		[Token(Token = "0x400158D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SoundSet staticSound;

		[Token(Token = "0x600128F")]
		[Address(RVA = "0xEC3FDC", Offset = "0xEC3FDC", VA = "0xEC3FDC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001290")]
		[Address(RVA = "0xEC4034", Offset = "0xEC4034", VA = "0xEC4034")]
		public void PlayStoryModeLine(int lineNum)
		{
		}

		[Token(Token = "0x6001291")]
		[Address(RVA = "0xEC4054", Offset = "0xEC4054", VA = "0xEC4054")]
		[IteratorStateMachine(typeof(<StoryModeLine>d__8))]
		private IEnumerator StoryModeLine(int lineNum)
		{
			return null;
		}

		[Token(Token = "0x6001292")]
		[Address(RVA = "0xEC4100", Offset = "0xEC4100", VA = "0xEC4100")]
		[IteratorStateMachine(typeof(<PlaySound>d__9))]
		private IEnumerator PlaySound(SoundSet soundSet, int lineNum)
		{
			return null;
		}

		[Token(Token = "0x6001293")]
		[Address(RVA = "0xEC41C0", Offset = "0xEC41C0", VA = "0xEC41C0")]
		private void SetMaterials(Material material)
		{
		}

		[Token(Token = "0x6001294")]
		[Address(RVA = "0xEC4338", Offset = "0xEC4338", VA = "0xEC4338")]
		public StoryModeVoices()
		{
		}
	}
	[Token(Token = "0x200039F")]
	public class StreetSpawnerAI : MonoBehaviour
	{
		[Token(Token = "0x20003A0")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass21_0
		{
			[Token(Token = "0x40015A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public EnemyState enemy;

			[Token(Token = "0x40015AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public StreetSpawnerAI <>4__this;

			[Token(Token = "0x60012B1")]
			[Address(RVA = "0xEC5458", Offset = "0xEC5458", VA = "0xEC5458")]
			public <>c__DisplayClass21_0()
			{
			}

			[Token(Token = "0x60012B2")]
			[Address(RVA = "0xEC5460", Offset = "0xEC5460", VA = "0xEC5460")]
			internal void <Act>b__1(float height)
			{
			}
		}

		[Token(Token = "0x20003A2")]
		[CompilerGenerated]
		private sealed class <Act>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40015AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40015AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40015AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public StreetSpawnerAI <>4__this;

			[Token(Token = "0x40015B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private <>c__DisplayClass21_0 <>8__1;

			[Token(Token = "0x1700020C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60012B9")]
				[Address(RVA = "0xEC5BF0", Offset = "0xEC5BF0", VA = "0xEC5BF0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700020D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60012BB")]
				[Address(RVA = "0xEC5C38", Offset = "0xEC5C38", VA = "0xEC5C38", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60012B6")]
			[Address(RVA = "0xEC4F68", Offset = "0xEC4F68", VA = "0xEC4F68")]
			[DebuggerHidden]
			public <Act>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x60012B7")]
			[Address(RVA = "0xEC5620", Offset = "0xEC5620", VA = "0xEC5620", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60012B8")]
			[Address(RVA = "0xEC5624", Offset = "0xEC5624", VA = "0xEC5624", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60012BA")]
			[Address(RVA = "0xEC5BF8", Offset = "0xEC5BF8", VA = "0xEC5BF8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003A3")]
		[CompilerGenerated]
		private sealed class <Open>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40015B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40015B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40015B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public StreetSpawnerAI <>4__this;

			[Token(Token = "0x1700020E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60012BF")]
				[Address(RVA = "0xEC5F64", Offset = "0xEC5F64", VA = "0xEC5F64", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700020F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60012C1")]
				[Address(RVA = "0xEC5FAC", Offset = "0xEC5FAC", VA = "0xEC5FAC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60012BC")]
			[Address(RVA = "0xEC5004", Offset = "0xEC5004", VA = "0xEC5004")]
			[DebuggerHidden]
			public <Open>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x60012BD")]
			[Address(RVA = "0xEC5C40", Offset = "0xEC5C40", VA = "0xEC5C40", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60012BE")]
			[Address(RVA = "0xEC5C44", Offset = "0xEC5C44", VA = "0xEC5C44", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60012C0")]
			[Address(RVA = "0xEC5F6C", Offset = "0xEC5F6C", VA = "0xEC5F6C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003A4")]
		[CompilerGenerated]
		private sealed class <Close>d__23 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40015B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40015B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40015B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public StreetSpawnerAI <>4__this;

			[Token(Token = "0x17000210")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60012C5")]
				[Address(RVA = "0xEC62D8", Offset = "0xEC62D8", VA = "0xEC62D8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000211")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60012C7")]
				[Address(RVA = "0xEC6320", Offset = "0xEC6320", VA = "0xEC6320", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60012C2")]
			[Address(RVA = "0xEC50A0", Offset = "0xEC50A0", VA = "0xEC50A0")]
			[DebuggerHidden]
			public <Close>d__23(int <>1__state)
			{
			}

			[Token(Token = "0x60012C3")]
			[Address(RVA = "0xEC5FB4", Offset = "0xEC5FB4", VA = "0xEC5FB4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60012C4")]
			[Address(RVA = "0xEC5FB8", Offset = "0xEC5FB8", VA = "0xEC5FB8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60012C6")]
			[Address(RVA = "0xEC62E0", Offset = "0xEC62E0", VA = "0xEC62E0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003A5")]
		[CompilerGenerated]
		private sealed class <AnimateValue>d__25 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40015B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40015B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40015B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public StreetSpawnerAI <>4__this;

			[Token(Token = "0x40015BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Action<float> callback;

			[Token(Token = "0x40015BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float valueStart;

			[Token(Token = "0x40015BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float valueEnd;

			[Token(Token = "0x40015BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float duration;

			[Token(Token = "0x40015BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <timer>5__2;

			[Token(Token = "0x17000212")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60012CB")]
				[Address(RVA = "0xEC6458", Offset = "0xEC6458", VA = "0xEC6458", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000213")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60012CD")]
				[Address(RVA = "0xEC64A0", Offset = "0xEC64A0", VA = "0xEC64A0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60012C8")]
			[Address(RVA = "0xEC5188", Offset = "0xEC5188", VA = "0xEC5188")]
			[DebuggerHidden]
			public <AnimateValue>d__25(int <>1__state)
			{
			}

			[Token(Token = "0x60012C9")]
			[Address(RVA = "0xEC6328", Offset = "0xEC6328", VA = "0xEC6328", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60012CA")]
			[Address(RVA = "0xEC632C", Offset = "0xEC632C", VA = "0xEC632C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60012CC")]
			[Address(RVA = "0xEC6460", Offset = "0xEC6460", VA = "0xEC6460", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static HashSet<StreetSpawnerAI> All;

		[Token(Token = "0x400159A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Renderer> toEnableRenderers;

		[Token(Token = "0x400159B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<Collider> toEnableColliders;

		[Token(Token = "0x400159C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform hinge;

		[Token(Token = "0x400159D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float raiseDuration;

		[Token(Token = "0x400159E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float minHeight;

		[Token(Token = "0x400159F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float maxHeight;

		[Token(Token = "0x40015A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float minRotation;

		[Token(Token = "0x40015A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float maxRotation;

		[Token(Token = "0x40015A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float enemyRaiseDuration;

		[Token(Token = "0x40015A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float enemyMinHeight;

		[Token(Token = "0x40015A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float enemyMaxHeight;

		[Token(Token = "0x40015A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float pauseAfterEnemyRaise;

		[Token(Token = "0x40015A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float[] levelTimeScales;

		[NonSerialized]
		[Token(Token = "0x40015A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool spawnQueued;

		[Token(Token = "0x40015A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Vector3 basePosition;

		[Token(Token = "0x1700020B")]
		private float timeScale
		{
			[Token(Token = "0x60012A4")]
			[Address(RVA = "0xEC4C90", Offset = "0xEC4C90", VA = "0xEC4C90")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60012A5")]
		[Address(RVA = "0xEC4DAC", Offset = "0xEC4DAC", VA = "0xEC4DAC")]
		private void Start()
		{
		}

		[Token(Token = "0x60012A6")]
		[Address(RVA = "0xEC4DDC", Offset = "0xEC4DDC", VA = "0xEC4DDC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60012A7")]
		[Address(RVA = "0xEC4EE8", Offset = "0xEC4EE8", VA = "0xEC4EE8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60012A8")]
		[Address(RVA = "0xEC4E74", Offset = "0xEC4E74", VA = "0xEC4E74")]
		[IteratorStateMachine(typeof(<Act>d__21))]
		private IEnumerator Act()
		{
			return null;
		}

		[Token(Token = "0x60012A9")]
		[Address(RVA = "0xEC4F90", Offset = "0xEC4F90", VA = "0xEC4F90")]
		[IteratorStateMachine(typeof(<Open>d__22))]
		private IEnumerator Open()
		{
			return null;
		}

		[Token(Token = "0x60012AA")]
		[Address(RVA = "0xEC502C", Offset = "0xEC502C", VA = "0xEC502C")]
		[IteratorStateMachine(typeof(<Close>d__23))]
		private IEnumerator Close()
		{
			return null;
		}

		[Token(Token = "0x60012AB")]
		[Address(RVA = "0xEC50C8", Offset = "0xEC50C8", VA = "0xEC50C8")]
		private IEnumerator AnimateValue(float duration, Action<float> callback)
		{
			return null;
		}

		[Token(Token = "0x60012AC")]
		[Address(RVA = "0xEC50D4", Offset = "0xEC50D4", VA = "0xEC50D4")]
		[IteratorStateMachine(typeof(<AnimateValue>d__25))]
		private IEnumerator AnimateValue(float duration, float valueStart, float valueEnd, Action<float> callback)
		{
			return null;
		}

		[Token(Token = "0x60012AD")]
		[Address(RVA = "0xEC51B0", Offset = "0xEC51B0", VA = "0xEC51B0")]
		public StreetSpawnerAI()
		{
		}
	}
	[Token(Token = "0x20003A6")]
	public class WantedSystemDragon : MonoBehaviour
	{
		[Token(Token = "0x40015BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject dragonPrefab;

		[Token(Token = "0x40015C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<GameObject> bonusDragonPrefabs;

		[Token(Token = "0x40015C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 dragonSpawnPos;

		[Token(Token = "0x40015C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float spawnPosNoise;

		[Token(Token = "0x40015C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string dragonMusic;

		[Token(Token = "0x40015C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string defaultMusic;

		[NonSerialized]
		[Token(Token = "0x40015C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool dragonFightActive;

		[NonSerialized]
		[Token(Token = "0x40015C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float dragonFightStartTime;

		[Token(Token = "0x40015C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<GameObject> myDragons;

		[Token(Token = "0x60012CE")]
		[Address(RVA = "0xEC64A8", Offset = "0xEC64A8", VA = "0xEC64A8")]
		private void Start()
		{
		}

		[Token(Token = "0x60012CF")]
		[Address(RVA = "0xEC65EC", Offset = "0xEC65EC", VA = "0xEC65EC")]
		private void Update()
		{
		}

		[Token(Token = "0x60012D0")]
		[Address(RVA = "0xEC6A6C", Offset = "0xEC6A6C", VA = "0xEC6A6C")]
		private void StartDragonFight()
		{
		}

		[Token(Token = "0x60012D1")]
		[Address(RVA = "0xEC6BCC", Offset = "0xEC6BCC", VA = "0xEC6BCC")]
		private void StartTripleDragonFight()
		{
		}

		[Token(Token = "0x60012D2")]
		[Address(RVA = "0xEC67D0", Offset = "0xEC67D0", VA = "0xEC67D0")]
		private void StopDragonFight()
		{
		}

		[Token(Token = "0x60012D3")]
		[Address(RVA = "0xEC6EB4", Offset = "0xEC6EB4", VA = "0xEC6EB4")]
		public WantedSystemDragon()
		{
		}
	}
	[Token(Token = "0x20003A8")]
	public class WantedSystemManager : MonoBehaviour
	{
		[Token(Token = "0x40015CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static WantedSystemManager Instance;

		[Token(Token = "0x40015CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int[] levelPointThresholds;

		[Token(Token = "0x40015CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int[] levelNumEnemies;

		[Token(Token = "0x40015CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EnemyState[] enemyTypes;

		[Token(Token = "0x40015CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float maxSpawnerDistance;

		[Token(Token = "0x40015D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float noPointTimeout;

		[Token(Token = "0x40015D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float numEnemyMul;

		[Token(Token = "0x40015D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float lookAheadTime;

		[Token(Token = "0x40015D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public WantedSystemVoice wantedSystemVoice;

		[Token(Token = "0x40015D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public WantedSystemDragon wantedSystemDragon;

		[NonSerialized]
		[Token(Token = "0x40015D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEvent<int> reachWantedLevel;

		[NonSerialized]
		[Token(Token = "0x40015D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent defeatDragon;

		[NonSerialized]
		[Token(Token = "0x40015D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityEvent giveUp;

		[Token(Token = "0x40015D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int currentPoints;

		[Token(Token = "0x40015D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float lastPointTime;

		[Token(Token = "0x17000214")]
		public int WantedLevel
		{
			[Token(Token = "0x60012D9")]
			[Address(RVA = "0xEC4D08", Offset = "0xEC4D08", VA = "0xEC4D08")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000215")]
		public List<EnemyState> CurrentEnemyTypes
		{
			[Token(Token = "0x60012DA")]
			[Address(RVA = "0xEC5AD0", Offset = "0xEC5AD0", VA = "0xEC5AD0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60012DB")]
		[Address(RVA = "0xEC70EC", Offset = "0xEC70EC", VA = "0xEC70EC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60012DC")]
		[Address(RVA = "0xEBC5A4", Offset = "0xEBC5A4", VA = "0xEBC5A4")]
		public void AddPoints(int numPoints)
		{
		}

		[Token(Token = "0x60012DD")]
		[Address(RVA = "0xEC67C8", Offset = "0xEC67C8", VA = "0xEC67C8")]
		public void ResetWantedLevel()
		{
		}

		[Token(Token = "0x60012DE")]
		[Address(RVA = "0xEC7144", Offset = "0xEC7144", VA = "0xEC7144")]
		private void Update()
		{
		}

		[Token(Token = "0x60012DF")]
		[Address(RVA = "0xEC76FC", Offset = "0xEC76FC", VA = "0xEC76FC")]
		public WantedSystemManager()
		{
		}
	}
	[Token(Token = "0x20003AB")]
	public class WantedSystemVoice : MonoBehaviour
	{
		[Token(Token = "0x20003AC")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass15_0
		{
			[Token(Token = "0x40015EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public WantedSystemVoice <>4__this;

			[Token(Token = "0x40015EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int wantedLevel;

			[Token(Token = "0x60012F2")]
			[Address(RVA = "0xEC8214", Offset = "0xEC8214", VA = "0xEC8214")]
			public <>c__DisplayClass15_0()
			{
			}

			[Token(Token = "0x60012F3")]
			[Address(RVA = "0xEC821C", Offset = "0xEC821C", VA = "0xEC821C")]
			internal void <PlayLevelStartLine>b__0()
			{
			}
		}

		[Token(Token = "0x20003AD")]
		[CompilerGenerated]
		private sealed class <PlayLevelStartLine>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40015F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40015F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40015F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WantedSystemVoice <>4__this;

			[Token(Token = "0x40015F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int wantedLevel;

			[Token(Token = "0x40015F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private <>c__DisplayClass15_0 <>8__1;

			[Token(Token = "0x40015F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private List<SoundSet> <lines>5__2;

			[Token(Token = "0x17000216")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60012F7")]
				[Address(RVA = "0xEC8638", Offset = "0xEC8638", VA = "0xEC8638", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000217")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60012F9")]
				[Address(RVA = "0xEC8680", Offset = "0xEC8680", VA = "0xEC8680", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60012F4")]
			[Address(RVA = "0xEC7C8C", Offset = "0xEC7C8C", VA = "0xEC7C8C")]
			[DebuggerHidden]
			public <PlayLevelStartLine>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x60012F5")]
			[Address(RVA = "0xEC8278", Offset = "0xEC8278", VA = "0xEC8278", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60012F6")]
			[Address(RVA = "0xEC827C", Offset = "0xEC827C", VA = "0xEC827C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60012F8")]
			[Address(RVA = "0xEC8640", Offset = "0xEC8640", VA = "0xEC8640", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003AE")]
		[CompilerGenerated]
		private sealed class <PlayLines>d__16 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40015F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40015F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40015F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WantedSystemVoice <>4__this;

			[Token(Token = "0x40015F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public IEnumerable<SoundSet> lines;

			[Token(Token = "0x40015FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Action runAtEnd;

			[Token(Token = "0x40015FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private IEnumerator<SoundSet> <>7__wrap1;

			[Token(Token = "0x17000218")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60012FE")]
				[Address(RVA = "0xEC8B14", Offset = "0xEC8B14", VA = "0xEC8B14", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000219")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001300")]
				[Address(RVA = "0xEC8B5C", Offset = "0xEC8B5C", VA = "0xEC8B5C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60012FA")]
			[Address(RVA = "0xEC7D58", Offset = "0xEC7D58", VA = "0xEC7D58")]
			[DebuggerHidden]
			public <PlayLines>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x60012FB")]
			[Address(RVA = "0xEC8688", Offset = "0xEC8688", VA = "0xEC8688", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60012FC")]
			[Address(RVA = "0xEC86A4", Offset = "0xEC86A4", VA = "0xEC86A4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60012FD")]
			[Address(RVA = "0xEC8A64", Offset = "0xEC8A64", VA = "0xEC8A64")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60012FF")]
			[Address(RVA = "0xEC8B1C", Offset = "0xEC8B1C", VA = "0xEC8B1C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003B0")]
		[CompilerGenerated]
		private sealed class <PlaySound>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40015FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40015FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001600")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SoundSet soundSet;

			[Token(Token = "0x4001601")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public WantedSystemVoice <>4__this;

			[Token(Token = "0x1700021A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001307")]
				[Address(RVA = "0xEC9244", Offset = "0xEC9244", VA = "0xEC9244", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700021B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001309")]
				[Address(RVA = "0xEC928C", Offset = "0xEC928C", VA = "0xEC928C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001304")]
			[Address(RVA = "0xEC7F88", Offset = "0xEC7F88", VA = "0xEC7F88")]
			[DebuggerHidden]
			public <PlaySound>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x6001305")]
			[Address(RVA = "0xEC8C9C", Offset = "0xEC8C9C", VA = "0xEC8C9C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001306")]
			[Address(RVA = "0xEC8CA0", Offset = "0xEC8CA0", VA = "0xEC8CA0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001308")]
			[Address(RVA = "0xEC924C", Offset = "0xEC924C", VA = "0xEC924C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40015E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<SoundSet> levelSoundsPart1;

		[Token(Token = "0x40015E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<SoundSet> levelSoundsPart2;

		[Token(Token = "0x40015E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<SoundSet> levelSoundsPart3;

		[Token(Token = "0x40015E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<SoundSet> giveUpSounds;

		[Token(Token = "0x40015E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<SoundSet> defeatDragonSounds;

		[Token(Token = "0x40015E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Material sufferMaterial;

		[Token(Token = "0x40015E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int maxBillboardSounds;

		[Token(Token = "0x40015E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Material staticMaterial;

		[Token(Token = "0x40015E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public SoundSet staticSound;

		[NonSerialized]
		[Token(Token = "0x40015E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool isPlayingLine;

		[NonSerialized]
		[Token(Token = "0x40015EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public UnityEvent<int> reachWantedLevelLineFinished;

		[NonSerialized]
		[Token(Token = "0x40015EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UnityEvent defeatDragonLineFinished;

		[NonSerialized]
		[Token(Token = "0x40015EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public UnityEvent giveUpLineFinished;

		[NonSerialized]
		[Token(Token = "0x40015ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool allowedToPlayLine;

		[Token(Token = "0x60012E9")]
		[Address(RVA = "0xEC7A70", Offset = "0xEC7A70", VA = "0xEC7A70")]
		private void Start()
		{
		}

		[Token(Token = "0x60012EA")]
		[Address(RVA = "0xEC7C08", Offset = "0xEC7C08", VA = "0xEC7C08")]
		[IteratorStateMachine(typeof(<PlayLevelStartLine>d__15))]
		private IEnumerator PlayLevelStartLine(int wantedLevel)
		{
			return null;
		}

		[Token(Token = "0x60012EB")]
		[Address(RVA = "0xEC7CB4", Offset = "0xEC7CB4", VA = "0xEC7CB4")]
		[IteratorStateMachine(typeof(<PlayLines>d__16))]
		private IEnumerator PlayLines(IEnumerable<SoundSet> lines, Action runAtEnd)
		{
			return null;
		}

		[Token(Token = "0x60012EC")]
		[Address(RVA = "0xEC7D80", Offset = "0xEC7D80", VA = "0xEC7D80")]
		private void SetMaterials(Material material)
		{
		}

		[Token(Token = "0x60012ED")]
		[Address(RVA = "0xEC7EF8", Offset = "0xEC7EF8", VA = "0xEC7EF8")]
		[IteratorStateMachine(typeof(<PlaySound>d__18))]
		private IEnumerator PlaySound(SoundSet soundSet)
		{
			return null;
		}

		[Token(Token = "0x60012EE")]
		[Address(RVA = "0xEC7FB0", Offset = "0xEC7FB0", VA = "0xEC7FB0")]
		public WantedSystemVoice()
		{
		}
	}
}
namespace AI.Vehicles
{
	[Token(Token = "0x20003B1")]
	public class BlimpAI : MonoBehaviour
	{
		[Token(Token = "0x20003B2")]
		[CompilerGenerated]
		private sealed class <OnDeath>d__32 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400161E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400161F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001620")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BlimpAI <>4__this;

			[Token(Token = "0x4001621")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <i>5__2;

			[Token(Token = "0x1700021C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001315")]
				[Address(RVA = "0xECA368", Offset = "0xECA368", VA = "0xECA368", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700021D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001317")]
				[Address(RVA = "0xECA3B0", Offset = "0xECA3B0", VA = "0xECA3B0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001312")]
			[Address(RVA = "0xECA130", Offset = "0xECA130", VA = "0xECA130")]
			[DebuggerHidden]
			public <OnDeath>d__32(int <>1__state)
			{
			}

			[Token(Token = "0x6001313")]
			[Address(RVA = "0xECA204", Offset = "0xECA204", VA = "0xECA204", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001314")]
			[Address(RVA = "0xECA208", Offset = "0xECA208", VA = "0xECA208", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001316")]
			[Address(RVA = "0xECA370", Offset = "0xECA370", VA = "0xECA370", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CityParameters p;

		[Token(Token = "0x4001603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float springLinear;

		[Token(Token = "0x4001604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float springLinearDampingRatio;

		[Token(Token = "0x4001605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float springLinearMaxForce;

		[Token(Token = "0x4001606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float springAngular;

		[Token(Token = "0x4001607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float springAngularUp;

		[Token(Token = "0x4001608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float gravity;

		[Token(Token = "0x4001609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 gravityPosition;

		[Token(Token = "0x400160A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float moveSpeed;

		[Token(Token = "0x400160B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float turnSpeed;

		[Token(Token = "0x400160C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float propellerSpeed;

		[Token(Token = "0x400160D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform[] propellers;

		[Token(Token = "0x400160E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject explosionPrefab;

		[Token(Token = "0x400160F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float explosionSpawnRate;

		[Token(Token = "0x4001610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int deathExplosionNumber;

		[Token(Token = "0x4001611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float deathExplosionDuration;

		[Token(Token = "0x4001612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float healthStage;

		[Token(Token = "0x4001613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Bounds explosionSpawnArea;

		[Token(Token = "0x4001614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public KillAchievements killAchievements;

		[Token(Token = "0x4001615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public DeathWantedPoints deathWantedPoints;

		[Token(Token = "0x4001616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public DeathEffect deathEffect;

		[Token(Token = "0x4001617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float downVel;

		[Token(Token = "0x4001618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Health myHealth;

		[Token(Token = "0x4001619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Rigidbody myRigidbody;

		[Token(Token = "0x400161A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float prevHealth;

		[Token(Token = "0x400161B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Cache<float> targetHeight;

		[Token(Token = "0x400161C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Vector3 goalPosition;

		[Token(Token = "0x400161D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Quaternion goalRotation;

		[Token(Token = "0x600130A")]
		[Address(RVA = "0xEC9294", Offset = "0xEC9294", VA = "0xEC9294")]
		private void Start()
		{
		}

		[Token(Token = "0x600130B")]
		[Address(RVA = "0xEC951C", Offset = "0xEC951C", VA = "0xEC951C")]
		private void Update()
		{
		}

		[Token(Token = "0x600130C")]
		[Address(RVA = "0xEC99C4", Offset = "0xEC99C4", VA = "0xEC99C4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600130D")]
		[Address(RVA = "0xECA05C", Offset = "0xECA05C", VA = "0xECA05C")]
		private void OnCollisionEnter(Collision col)
		{
		}

		[Token(Token = "0x600130E")]
		[Address(RVA = "0xECA0BC", Offset = "0xECA0BC", VA = "0xECA0BC")]
		[IteratorStateMachine(typeof(<OnDeath>d__32))]
		private IEnumerator OnDeath()
		{
			return null;
		}

		[Token(Token = "0x600130F")]
		[Address(RVA = "0xEC9818", Offset = "0xEC9818", VA = "0xEC9818")]
		private void SpawnExplosions(int num)
		{
		}

		[Token(Token = "0x6001310")]
		[Address(RVA = "0xECA158", Offset = "0xECA158", VA = "0xECA158")]
		public BlimpAI()
		{
		}
	}
	[Token(Token = "0x20003B3")]
	public class BlimpSpawner : MonoBehaviour
	{
		[Token(Token = "0x4001622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CityParameters p;

		[Token(Token = "0x4001623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BlimpAI[] blimpPrefabs;

		[Token(Token = "0x4001624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int numOfEach;

		[Token(Token = "0x4001625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float radius;

		[Token(Token = "0x4001626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float minHeight;

		[Token(Token = "0x4001627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float maxHeight;

		[Token(Token = "0x6001318")]
		[Address(RVA = "0xECA3B8", Offset = "0xECA3B8", VA = "0xECA3B8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001319")]
		[Address(RVA = "0xECA630", Offset = "0xECA630", VA = "0xECA630")]
		public BlimpSpawner()
		{
		}
	}
	[Token(Token = "0x20003B4")]
	public class BoatAI : MonoBehaviour
	{
		[Token(Token = "0x4001628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float moveSpeed;

		[Token(Token = "0x4001629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float height;

		[Token(Token = "0x400162A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float radius;

		[Token(Token = "0x400162B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float initialAngle;

		[Token(Token = "0x400162C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Rigidbody myRigidbody;

		[Token(Token = "0x400162D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float timeElapsed;

		[Token(Token = "0x600131A")]
		[Address(RVA = "0xECA638", Offset = "0xECA638", VA = "0xECA638")]
		private void Start()
		{
		}

		[Token(Token = "0x600131B")]
		[Address(RVA = "0xECAA0C", Offset = "0xECAA0C", VA = "0xECAA0C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600131C")]
		[Address(RVA = "0xECABB8", Offset = "0xECABB8", VA = "0xECABB8")]
		public BoatAI()
		{
		}
	}
	[Token(Token = "0x20003B5")]
	public class CarAI : MonoBehaviour
	{
		[Token(Token = "0x400162E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool debug;

		[Token(Token = "0x400162F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float accelMax;

		[Token(Token = "0x4001630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float lookaheadPathDistance;

		[Token(Token = "0x4001631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float lookaheadSplineTime;

		[Token(Token = "0x4001632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float sightDistanceMax;

		[Token(Token = "0x4001633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float sightDistanceMin;

		[Token(Token = "0x4001634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float speedMax;

		[Token(Token = "0x4001635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float torqueFactorBraking;

		[Token(Token = "0x4001636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float torqueFactorDriving;

		[Token(Token = "0x4001637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float goalTurningSpeed;

		[Token(Token = "0x4001638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float cacheUpdatePeriod;

		[Token(Token = "0x4001639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform front;

		[Token(Token = "0x400163A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Rigidbody rigidbody;

		[Token(Token = "0x400163B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public PhysicMaterial wheelBraking;

		[Token(Token = "0x400163C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public PhysicMaterial wheelDriving;

		[Token(Token = "0x400163D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int currentRoad;

		[Token(Token = "0x400163E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool lastRoadTurned;

		[Token(Token = "0x400163F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int nextRoad;

		[Token(Token = "0x4001640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Cache<bool> onGround;

		[Token(Token = "0x4001641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Cache<bool> seesObstacle;

		[Token(Token = "0x4001642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Cache<Spline> spline;

		[Token(Token = "0x4001643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 targetPos;

		[Token(Token = "0x4001644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private SphereCollider[] wheels;

		[Token(Token = "0x1700021E")]
		private int CacheUpdatePeriod
		{
			[Token(Token = "0x600131D")]
			[Address(RVA = "0xECABCC", Offset = "0xECABCC", VA = "0xECABCC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700021F")]
		private World.Generation.World world
		{
			[Token(Token = "0x600131E")]
			[Address(RVA = "0xECACB8", Offset = "0xECACB8", VA = "0xECACB8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000220")]
		private Road CurrentRoad
		{
			[Token(Token = "0x600131F")]
			[Address(RVA = "0xECAD0C", Offset = "0xECAD0C", VA = "0xECAD0C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000221")]
		private Road NextRoad
		{
			[Token(Token = "0x6001320")]
			[Address(RVA = "0xECAD60", Offset = "0xECAD60", VA = "0xECAD60")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000222")]
		private bool NextRoadTurns
		{
			[Token(Token = "0x6001321")]
			[Address(RVA = "0xECADB4", Offset = "0xECADB4", VA = "0xECADB4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000223")]
		private Spline.Keyframe CurrentKeyframe
		{
			[Token(Token = "0x6001322")]
			[Address(RVA = "0xECAE48", Offset = "0xECAE48", VA = "0xECAE48")]
			get
			{
				return default(Spline.Keyframe);
			}
		}

		[Token(Token = "0x17000224")]
		private Spline.Keyframe NextKeyframe
		{
			[Token(Token = "0x6001323")]
			[Address(RVA = "0xECAEB8", Offset = "0xECAEB8", VA = "0xECAEB8")]
			get
			{
				return default(Spline.Keyframe);
			}
		}

		[Token(Token = "0x6001324")]
		[Address(RVA = "0xECB2B0", Offset = "0xECB2B0", VA = "0xECB2B0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001325")]
		[Address(RVA = "0xECB7D4", Offset = "0xECB7D4", VA = "0xECB7D4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001326")]
		[Address(RVA = "0xECB76C", Offset = "0xECB76C", VA = "0xECB76C")]
		private void SetWheelMaterial(PhysicMaterial material)
		{
		}

		[Token(Token = "0x6001327")]
		[Address(RVA = "0xECBBB4", Offset = "0xECBBB4", VA = "0xECBBB4")]
		public void SetNextRoad(int road)
		{
		}

		[Token(Token = "0x6001328")]
		[Address(RVA = "0xECB4F4", Offset = "0xECB4F4", VA = "0xECB4F4")]
		private void ToNextRoad()
		{
		}

		[Token(Token = "0x6001329")]
		[Address(RVA = "0xECBBBC", Offset = "0xECBBBC", VA = "0xECBBBC")]
		private static float CubicRamp(float t)
		{
			return default(float);
		}

		[Token(Token = "0x600132A")]
		[Address(RVA = "0xECBBF8", Offset = "0xECBBF8", VA = "0xECBBF8")]
		public CarAI()
		{
		}
	}
	[Token(Token = "0x20003B6")]
	public class CarAISimple : MonoBehaviour
	{
		[Token(Token = "0x4001645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float goalSpeed;

		[Token(Token = "0x4001646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float accelerationRate;

		[Token(Token = "0x4001647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CarData carData;

		[Token(Token = "0x6001330")]
		[Address(RVA = "0xECC488", Offset = "0xECC488", VA = "0xECC488")]
		private void Start()
		{
		}

		[Token(Token = "0x6001331")]
		[Address(RVA = "0xECC4E0", Offset = "0xECC4E0", VA = "0xECC4E0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001332")]
		[Address(RVA = "0xECC694", Offset = "0xECC694", VA = "0xECC694")]
		public CarAISimple()
		{
		}
	}
	[Token(Token = "0x20003B7")]
	public class CarData : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003B8")]
		public class AxleInfo
		{
			[Token(Token = "0x400165E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public WheelCollider leftWheel;

			[Token(Token = "0x400165F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public WheelCollider rightWheel;

			[Token(Token = "0x4001660")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform leftWheelModel;

			[Token(Token = "0x4001661")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Transform rightWheelModel;

			[Token(Token = "0x4001662")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool motor;

			[Token(Token = "0x4001663")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
			public bool brake;

			[Token(Token = "0x4001664")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
			public bool steering;

			[Token(Token = "0x600133B")]
			[Address(RVA = "0xECD060", Offset = "0xECD060", VA = "0xECD060")]
			public AxleInfo()
			{
			}
		}

		[Token(Token = "0x4001648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Drive Parameters")]
		public float maxMotorTorque;

		[Token(Token = "0x4001649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float maxBrakeTorque;

		[Token(Token = "0x400164A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float maxSteeringAngle;

		[Token(Token = "0x400164B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float reverseTorqueMultiplier;

		[Token(Token = "0x400164C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float antiRoll;

		[Token(Token = "0x400164D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float steerRate;

		[Token(Token = "0x400164E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Other Settings")]
		public List<AxleInfo> axleInfos;

		[Token(Token = "0x400164F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float maxDist;

		[Token(Token = "0x4001650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject target;

		[Token(Token = "0x4001651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject target2;

		[Token(Token = "0x4001652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Runtime Data")]
		public float currentSteer;

		[Token(Token = "0x4001653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float MPH;

		[Token(Token = "0x4001654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector3 targetPos;

		[Token(Token = "0x4001655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Vector3 toTarget;

		[Token(Token = "0x4001656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public int currentRoad;

		[Token(Token = "0x4001657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public int nextRoad;

		[Token(Token = "0x4001658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float inputMotor;

		[Token(Token = "0x4001659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float inputSteer;

		[Token(Token = "0x400165A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float inputBrake;

		[Token(Token = "0x400165B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Rigidbody myRigidbody;

		[Token(Token = "0x400165C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Health myHealth;

		[Token(Token = "0x400165D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private World.Generation.World world;

		[Token(Token = "0x6001333")]
		[Address(RVA = "0xECC6A8", Offset = "0xECC6A8", VA = "0xECC6A8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001334")]
		[Address(RVA = "0xECCAF8", Offset = "0xECCAF8", VA = "0xECCAF8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001335")]
		[Address(RVA = "0xECCCD8", Offset = "0xECCCD8", VA = "0xECCCD8")]
		public void FixedUpdate()
		{
		}

		[Token(Token = "0x6001336")]
		[Address(RVA = "0xECC778", Offset = "0xECC778", VA = "0xECC778")]
		private void ToNextRoad()
		{
		}

		[Token(Token = "0x6001337")]
		[Address(RVA = "0xECCE60", Offset = "0xECCE60", VA = "0xECCE60")]
		private void ApplyLocalPositionToVisuals(WheelCollider collider, Transform visualWheel)
		{
		}

		[Token(Token = "0x6001338")]
		[Address(RVA = "0xECC68C", Offset = "0xECC68C", VA = "0xECC68C")]
		public bool IsGrounded()
		{
			return default(bool);
		}

		[Token(Token = "0x6001339")]
		[Address(RVA = "0xECCF84", Offset = "0xECCF84", VA = "0xECCF84")]
		public CarData()
		{
		}
	}
}
namespace AI.Enemies
{
	[Token(Token = "0x20003BA")]
	public class AngularSpring : MonoBehaviour
	{
		[Token(Token = "0x4001666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Quaternion targetRotation;

		[Token(Token = "0x4001667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 targetAngularVel;

		[Token(Token = "0x4001668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float spring;

		[Token(Token = "0x4001669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float dampingRatio;

		[Token(Token = "0x400166A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float maxSpringForce;

		[Token(Token = "0x400166B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float horizontalMultiplier;

		[Token(Token = "0x400166C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float verticalMultiplier;

		[Token(Token = "0x400166D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Rigidbody myRigidbody;

		[Token(Token = "0x600133E")]
		[Address(RVA = "0xECD0D4", Offset = "0xECD0D4", VA = "0xECD0D4")]
		private void Start()
		{
		}

		[Token(Token = "0x600133F")]
		[Address(RVA = "0xECD12C", Offset = "0xECD12C", VA = "0xECD12C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001340")]
		[Address(RVA = "0xECD3E4", Offset = "0xECD3E4", VA = "0xECD3E4")]
		public AngularSpring()
		{
		}
	}
	[Token(Token = "0x20003BB")]
	public class DashAI : MonoBehaviour
	{
		[Token(Token = "0x20003BC")]
		[CompilerGenerated]
		private sealed class <EffectWait>d__30 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400168A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400168B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400168C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DashAI <>4__this;

			[Token(Token = "0x400168D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <originalAngularSpring>5__2;

			[Token(Token = "0x400168E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private Vector3 <dashVelocity>5__3;

			[Token(Token = "0x400168F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private GameObject <charging>5__4;

			[Token(Token = "0x4001690")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <effectChargeTime>5__5;

			[Token(Token = "0x4001691")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private GameObject <dashProjectile>5__6;

			[Token(Token = "0x4001692")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private bool <isDashEffectActive>5__7;

			[Token(Token = "0x4001693")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private float <oldDamageMultiplier>5__8;

			[Token(Token = "0x4001694")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private int <i>5__9;

			[Token(Token = "0x17000225")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001349")]
				[Address(RVA = "0xECDDA8", Offset = "0xECDDA8", VA = "0xECDDA8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000226")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600134B")]
				[Address(RVA = "0xECDDF0", Offset = "0xECDDF0", VA = "0xECDDF0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001346")]
			[Address(RVA = "0xECD63C", Offset = "0xECD63C", VA = "0xECD63C")]
			[DebuggerHidden]
			public <EffectWait>d__30(int <>1__state)
			{
			}

			[Token(Token = "0x6001347")]
			[Address(RVA = "0xECD8A8", Offset = "0xECD8A8", VA = "0xECD8A8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001348")]
			[Address(RVA = "0xECD8AC", Offset = "0xECD8AC", VA = "0xECD8AC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600134A")]
			[Address(RVA = "0xECDDB0", Offset = "0xECDDB0", VA = "0xECDDB0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400166E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float dashCooldown;

		[Token(Token = "0x400166F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float dashSpeed;

		[Token(Token = "0x4001670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float chargeUpTime;

		[Token(Token = "0x4001671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float dashLockInTime;

		[Token(Token = "0x4001672")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float dashRange;

		[Token(Token = "0x4001673")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float dashDuration;

		[Token(Token = "0x4001674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float accuracy;

		[Token(Token = "0x4001675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string dashAnimation;

		[Token(Token = "0x4001676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SkinnedMeshRenderer enemyMeshRenderer;

		[Token(Token = "0x4001677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Sound dashCharge;

		[Token(Token = "0x4001678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Sound dashAttack;

		[Token(Token = "0x4001679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject chargeEffect;

		[Token(Token = "0x400167A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform chargeEffectLocation;

		[Token(Token = "0x400167B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject dashEffect;

		[Token(Token = "0x400167C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform dashEffectLocation;

		[Token(Token = "0x400167D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float dashAngularSpring;

		[Token(Token = "0x400167E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float dashVoiceChance;

		[Token(Token = "0x400167F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Header("Components")]
		public Targeting myTargeting;

		[Token(Token = "0x4001680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Rigidbody myRigidbody;

		[Token(Token = "0x4001681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Animator myAnimator;

		[Token(Token = "0x4001682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public CrashDamage2 myCrashDamage;

		[Token(Token = "0x4001683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Pointiness myPointiness;

		[Token(Token = "0x4001684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public AngularSpring myAngularSpring;

		[Token(Token = "0x4001685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public FlyingAI myFlyingAI;

		[Token(Token = "0x4001686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public EnemyVoices myVoice;

		[Token(Token = "0x4001687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[HideInInspector]
		public bool isDashing;

		[Token(Token = "0x4001688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private float sinceLastDash;

		[Token(Token = "0x4001689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool chargeFinished;

		[Token(Token = "0x6001341")]
		[Address(RVA = "0xECD450", Offset = "0xECD450", VA = "0xECD450")]
		private void Start()
		{
		}

		[Token(Token = "0x6001342")]
		[Address(RVA = "0xECD4C0", Offset = "0xECD4C0", VA = "0xECD4C0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001343")]
		[Address(RVA = "0xECD5C8", Offset = "0xECD5C8", VA = "0xECD5C8")]
		[IteratorStateMachine(typeof(<EffectWait>d__30))]
		private IEnumerator EffectWait()
		{
			return null;
		}

		[Token(Token = "0x6001344")]
		[Address(RVA = "0xECD664", Offset = "0xECD664", VA = "0xECD664")]
		private Vector3 ComputeDashVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001345")]
		[Address(RVA = "0xECD87C", Offset = "0xECD87C", VA = "0xECD87C")]
		public DashAI()
		{
		}
	}
	[Token(Token = "0x20003BD")]
	public class DeliveryBehavior : MonoBehaviour
	{
		[Token(Token = "0x4001695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float effectiveMassMul;

		[Token(Token = "0x4001696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FixedJoint myJoint;

		[Token(Token = "0x4001697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Rigidbody myRigidbody;

		[Token(Token = "0x4001698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ProxMineAI myProxMine;

		[Token(Token = "0x4001699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public FlyingAI myFlying;

		[Token(Token = "0x400169A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rigidbody packageRigidbody;

		[Token(Token = "0x400169B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AngularSpring packageAngularSpring;

		[Token(Token = "0x400169C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private WalkAI packageWalking;

		[Token(Token = "0x400169D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private JumpAI packageJumping;

		[Token(Token = "0x400169E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private SlamAI packageSlamming;

		[Token(Token = "0x400169F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private TankerController packageTankerContoller;

		[Token(Token = "0x40016A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float originalMass;

		[Token(Token = "0x40016A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float originalPackageSpring;

		[Token(Token = "0x600134C")]
		[Address(RVA = "0xECDDF8", Offset = "0xECDDF8", VA = "0xECDDF8")]
		private void Start()
		{
		}

		[Token(Token = "0x600134D")]
		[Address(RVA = "0xECE1C8", Offset = "0xECE1C8", VA = "0xECE1C8")]
		private void Update()
		{
		}

		[Token(Token = "0x600134E")]
		[Address(RVA = "0xECE2A8", Offset = "0xECE2A8", VA = "0xECE2A8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600134F")]
		[Address(RVA = "0xECE414", Offset = "0xECE414", VA = "0xECE414")]
		public DeliveryBehavior()
		{
		}
	}
	[Token(Token = "0x20003BE")]
	public class DisableCarsWhileAlive : MonoBehaviour
	{
		[Token(Token = "0x40016A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GameObject cars;

		[Token(Token = "0x6001350")]
		[Address(RVA = "0xECE424", Offset = "0xECE424", VA = "0xECE424")]
		private void Start()
		{
		}

		[Token(Token = "0x6001351")]
		[Address(RVA = "0xECE5B8", Offset = "0xECE5B8", VA = "0xECE5B8")]
		private void OnDeath()
		{
		}

		[Token(Token = "0x6001352")]
		[Address(RVA = "0xECE640", Offset = "0xECE640", VA = "0xECE640")]
		public DisableCarsWhileAlive()
		{
		}
	}
	[Token(Token = "0x20003BF")]
	public class DragonController : MonoBehaviour
	{
		[Token(Token = "0x20003C0")]
		[CompilerGenerated]
		private sealed class <Start>d__16 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40016B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40016B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40016B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DragonController <>4__this;

			[Token(Token = "0x17000227")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600135B")]
				[Address(RVA = "0xECEC50", Offset = "0xECEC50", VA = "0xECEC50", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000228")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600135D")]
				[Address(RVA = "0xECEC98", Offset = "0xECEC98", VA = "0xECEC98", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001358")]
			[Address(RVA = "0xECE6BC", Offset = "0xECE6BC", VA = "0xECE6BC")]
			[DebuggerHidden]
			public <Start>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x6001359")]
			[Address(RVA = "0xECEB90", Offset = "0xECEB90", VA = "0xECEB90", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600135A")]
			[Address(RVA = "0xECEB94", Offset = "0xECEB94", VA = "0xECEB94", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600135C")]
			[Address(RVA = "0xECEC58", Offset = "0xECEC58", VA = "0xECEC58", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003C1")]
		[CompilerGenerated]
		private sealed class <OnDeath>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40016B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40016B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40016B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DragonController <>4__this;

			[Token(Token = "0x40016B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <i>5__2;

			[Token(Token = "0x17000229")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001361")]
				[Address(RVA = "0xECEE50", Offset = "0xECEE50", VA = "0xECEE50", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700022A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001363")]
				[Address(RVA = "0xECEE98", Offset = "0xECEE98", VA = "0xECEE98", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600135E")]
			[Address(RVA = "0xECEB4C", Offset = "0xECEB4C", VA = "0xECEB4C")]
			[DebuggerHidden]
			public <OnDeath>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x600135F")]
			[Address(RVA = "0xECECA0", Offset = "0xECECA0", VA = "0xECECA0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001360")]
			[Address(RVA = "0xECECA4", Offset = "0xECECA4", VA = "0xECECA4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001362")]
			[Address(RVA = "0xECEE58", Offset = "0xECEE58", VA = "0xECEE58", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40016A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Components")]
		public Shooting myShooting;

		[Token(Token = "0x40016A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FlameBreath myFlameBreath;

		[Token(Token = "0x40016A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LaserBeamAI myLaserBeam;

		[Token(Token = "0x40016A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public DashAI myDash;

		[Token(Token = "0x40016A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Health myHealth;

		[Token(Token = "0x40016A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Rigidbody myRigidbody;

		[Token(Token = "0x40016A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public KillAchievements myKillAchievements;

		[Token(Token = "0x40016AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public DeathWantedPoints myDeathWantedPoints;

		[Token(Token = "0x40016AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public DeathEffect myDeathEffect;

		[Token(Token = "0x40016AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Death Sequence")]
		public GameObject explosionPrefab;

		[Token(Token = "0x40016AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Sound dragonDeathSound;

		[Token(Token = "0x40016AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public int deathExplosionNumber;

		[Token(Token = "0x40016AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float deathExplosionDuration;

		[Token(Token = "0x40016B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float healthStage;

		[Token(Token = "0x40016B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public Bounds explosionSpawnArea;

		[Token(Token = "0x40016B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float prevHealth;

		[Token(Token = "0x6001353")]
		[Address(RVA = "0xECE648", Offset = "0xECE648", VA = "0xECE648")]
		[IteratorStateMachine(typeof(<Start>d__16))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6001354")]
		[Address(RVA = "0xECE6E4", Offset = "0xECE6E4", VA = "0xECE6E4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001355")]
		[Address(RVA = "0xECEAD8", Offset = "0xECEAD8", VA = "0xECEAD8")]
		[IteratorStateMachine(typeof(<OnDeath>d__18))]
		private IEnumerator OnDeath()
		{
			return null;
		}

		[Token(Token = "0x6001356")]
		[Address(RVA = "0xECE92C", Offset = "0xECE92C", VA = "0xECE92C")]
		private void SpawnExplosions(int num)
		{
		}

		[Token(Token = "0x6001357")]
		[Address(RVA = "0xECEB74", Offset = "0xECEB74", VA = "0xECEB74")]
		public DragonController()
		{
		}
	}
	[Token(Token = "0x20003C2")]
	public enum EnemyStateEnum
	{
		[Token(Token = "0x40016BB")]
		Frozen,
		[Token(Token = "0x40016BC")]
		Passive,
		[Token(Token = "0x40016BD")]
		Aggressive
	}
	[Token(Token = "0x20003C3")]
	public class EnemyState : MonoBehaviour
	{
		[Token(Token = "0x40016BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HashSet<EnemyState> All;

		[Token(Token = "0x40016BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EnemyStateEnum state;

		[Token(Token = "0x40016C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private int minWantedLevel;

		[Token(Token = "0x40016C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float spawnFrequency;

		[Token(Token = "0x40016C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float despawnDistance;

		[Token(Token = "0x40016C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float despawnTime;

		[Token(Token = "0x40016C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Cache<float> currentDistance;

		[Token(Token = "0x40016C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float despawnStartTime;

		[Token(Token = "0x1700022B")]
		public bool CouldAttack
		{
			[Token(Token = "0x6001364")]
			[Address(RVA = "0xECEEA0", Offset = "0xECEEA0", VA = "0xECEEA0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001365")]
		[Address(RVA = "0xECEF08", Offset = "0xECEF08", VA = "0xECEF08")]
		private void Start()
		{
		}

		[Token(Token = "0x6001366")]
		[Address(RVA = "0xECF008", Offset = "0xECF008", VA = "0xECF008")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001367")]
		[Address(RVA = "0xECF138", Offset = "0xECF138", VA = "0xECF138")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001368")]
		[Address(RVA = "0xECF1B8", Offset = "0xECF1B8", VA = "0xECF1B8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001369")]
		[Address(RVA = "0xECF2A4", Offset = "0xECF2A4", VA = "0xECF2A4")]
		public EnemyState()
		{
		}
	}
	[Token(Token = "0x20003C4")]
	public class FlameBreath : MonoBehaviour
	{
		[Token(Token = "0x20003C5")]
		[CompilerGenerated]
		private sealed class <EffectWait>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40016DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40016DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40016DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FlameBreath <>4__this;

			[Token(Token = "0x40016DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <startTime>5__2;

			[Token(Token = "0x1700022C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001374")]
				[Address(RVA = "0xECFBF8", Offset = "0xECFBF8", VA = "0xECFBF8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700022D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001376")]
				[Address(RVA = "0xECFC40", Offset = "0xECFC40", VA = "0xECFC40", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001371")]
			[Address(RVA = "0xECF5E4", Offset = "0xECF5E4", VA = "0xECF5E4")]
			[DebuggerHidden]
			public <EffectWait>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x6001372")]
			[Address(RVA = "0xECF628", Offset = "0xECF628", VA = "0xECF628", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001373")]
			[Address(RVA = "0xECF62C", Offset = "0xECF62C", VA = "0xECF62C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001375")]
			[Address(RVA = "0xECFC00", Offset = "0xECFC00", VA = "0xECFC00", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40016C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Modifiers")]
		public float fireBreathCooldown;

		[Token(Token = "0x40016C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float fireBreathLength;

		[Token(Token = "0x40016C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float newGoalDistance;

		[Token(Token = "0x40016C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float newSpring;

		[Token(Token = "0x40016CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform flameBreathParent;

		[Token(Token = "0x40016CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ParticleSystem flameBreathParticles;

		[Token(Token = "0x40016CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject flameBreathCollider;

		[Token(Token = "0x40016CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float maxReorientAmount;

		[Token(Token = "0x40016CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform flameBreathEmissionPoint;

		[Token(Token = "0x40016CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Sound dragonIdleSound;

		[Token(Token = "0x40016D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Sound dragonFasterSound;

		[Token(Token = "0x40016D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Sound dragonFlameBreath;

		[Token(Token = "0x40016D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Components")]
		public FlyingAI myFlying;

		[Token(Token = "0x40016D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Animator myAnimator;

		[Token(Token = "0x40016D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Targeting myTargeting;

		[Token(Token = "0x40016D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float sinceLastFireBreath;

		[Token(Token = "0x40016D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float originalGoalDistance;

		[Token(Token = "0x40016D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float originalSpring;

		[Token(Token = "0x40016D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private bool fireBreathFinished;

		[Token(Token = "0x40016D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
		[HideInInspector]
		public bool allowedToBreathe;

		[Token(Token = "0x600136D")]
		[Address(RVA = "0xECF488", Offset = "0xECF488", VA = "0xECF488")]
		private void Awake()
		{
		}

		[Token(Token = "0x600136E")]
		[Address(RVA = "0xECF4D8", Offset = "0xECF4D8", VA = "0xECF4D8")]
		private void Update()
		{
		}

		[Token(Token = "0x600136F")]
		[Address(RVA = "0xECF570", Offset = "0xECF570", VA = "0xECF570")]
		[IteratorStateMachine(typeof(<EffectWait>d__22))]
		private IEnumerator EffectWait()
		{
			return null;
		}

		[Token(Token = "0x6001370")]
		[Address(RVA = "0xECF60C", Offset = "0xECF60C", VA = "0xECF60C")]
		public FlameBreath()
		{
		}
	}
	[Token(Token = "0x20003C6")]
	public class FlyingAI : MonoBehaviour
	{
		[Token(Token = "0x40016DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Movement")]
		public float spring;

		[Token(Token = "0x40016DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float damping;

		[Token(Token = "0x40016E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float maxAccel;

		[Token(Token = "0x40016E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float upwardsAccel;

		[Token(Token = "0x40016E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float downwardsAccel;

		[Token(Token = "0x40016E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float randomAccel;

		[Token(Token = "0x40016E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float randomAccelBlocked;

		[Token(Token = "0x40016E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float goalDistance;

		[Token(Token = "0x40016E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool shouldUpdateSpring;

		[Token(Token = "0x40016E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Components")]
		public Animator myAnimator;

		[Token(Token = "0x40016E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Health myHealth;

		[Token(Token = "0x40016E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Rigidbody myRigidbody;

		[Token(Token = "0x40016EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Targeting myTargeting;

		[Token(Token = "0x40016EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AngularSpring myAngularSpring;

		[Token(Token = "0x40016EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public EnemyVoices myVoices;

		[Token(Token = "0x40016ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Animations")]
		public string idleAnimation;

		[Token(Token = "0x40016EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public string attackAnimation;

		[Token(Token = "0x40016EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public string damageTakenAnimation;

		[Token(Token = "0x40016F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float prevHealth;

		[Token(Token = "0x40016F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float sinceLastEngageSound;

		[Token(Token = "0x40016F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float originalRandomAccel;

		[Token(Token = "0x6001377")]
		[Address(RVA = "0xECFC48", Offset = "0xECFC48", VA = "0xECFC48")]
		private void Start()
		{
		}

		[Token(Token = "0x6001378")]
		[Address(RVA = "0xECFCD0", Offset = "0xECFCD0", VA = "0xECFCD0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001379")]
		[Address(RVA = "0xECFECC", Offset = "0xECFECC", VA = "0xECFECC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600137A")]
		[Address(RVA = "0xED0458", Offset = "0xED0458", VA = "0xED0458")]
		public FlyingAI()
		{
		}
	}
	[Token(Token = "0x20003C7")]
	public class GrabberAI : MonoBehaviour
	{
		[Token(Token = "0x40016F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float distanceToGrab;

		[Token(Token = "0x40016F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string grabAnimation;

		[Token(Token = "0x40016F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Sound grabSound;

		[Token(Token = "0x40016F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SoundSet grabSoundSet;

		[Token(Token = "0x40016F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Components")]
		public Targeting myTargeting;

		[Token(Token = "0x40016F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Animator myAnimator;

		[Token(Token = "0x40016F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shooting myShooting;

		[Token(Token = "0x40016FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public EnemyVoices myVoice;

		[Token(Token = "0x40016FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool currentlyGrabbing;

		[Token(Token = "0x600137B")]
		[Address(RVA = "0xED0480", Offset = "0xED0480", VA = "0xED0480")]
		private void Update()
		{
		}

		[Token(Token = "0x600137C")]
		[Address(RVA = "0xED06CC", Offset = "0xED06CC", VA = "0xED06CC")]
		public GrabberAI()
		{
		}
	}
	[Token(Token = "0x20003C8")]
	public class Hacking : MonoBehaviour
	{
		[Token(Token = "0x40016FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float hackDistance;

		[Token(Token = "0x40016FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float hackDPS;

		[Token(Token = "0x40016FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform laserOrigin;

		[Token(Token = "0x40016FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 laserDir;

		[Token(Token = "0x4001700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float minLaserDot;

		[Token(Token = "0x4001701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject hackLaserPrefab;

		[Token(Token = "0x4001702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float lookAwayHackMultiplier;

		[Token(Token = "0x4001703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GameObject myHackLaser;

		[Token(Token = "0x600137D")]
		[Address(RVA = "0xED06D4", Offset = "0xED06D4", VA = "0xED06D4")]
		private void Update()
		{
		}

		[Token(Token = "0x600137E")]
		[Address(RVA = "0xED0D0C", Offset = "0xED0D0C", VA = "0xED0D0C")]
		public Hacking()
		{
		}
	}
	[Token(Token = "0x20003C9")]
	public class JumpAI : MonoBehaviour
	{
		[Token(Token = "0x20003CA")]
		[CompilerGenerated]
		private sealed class <AnimationWait>d__20 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001716")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001717")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001718")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public JumpAI <>4__this;

			[Token(Token = "0x1700022E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001386")]
				[Address(RVA = "0xED12AC", Offset = "0xED12AC", VA = "0xED12AC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700022F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001388")]
				[Address(RVA = "0xED12F4", Offset = "0xED12F4", VA = "0xED12F4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001383")]
			[Address(RVA = "0xED0FB0", Offset = "0xED0FB0", VA = "0xED0FB0")]
			[DebuggerHidden]
			public <AnimationWait>d__20(int <>1__state)
			{
			}

			[Token(Token = "0x6001384")]
			[Address(RVA = "0xED100C", Offset = "0xED100C", VA = "0xED100C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001385")]
			[Address(RVA = "0xED1010", Offset = "0xED1010", VA = "0xED1010", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001387")]
			[Address(RVA = "0xED12B4", Offset = "0xED12B4", VA = "0xED12B4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Movement")]
		public float jumpRate;

		[Token(Token = "0x4001705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float jumpSpeedUp;

		[Token(Token = "0x4001706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float jumpSpeedForward;

		[Token(Token = "0x4001707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float jumpCooldown;

		[Token(Token = "0x4001708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float onGroundAnyMaxDist;

		[Token(Token = "0x4001709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 onGroundRayOrigin;

		[Token(Token = "0x400170A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float maxGroundUpdateTime;

		[Token(Token = "0x400170B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string jumpAnimation;

		[Token(Token = "0x400170C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float animationWaitTime;

		[Token(Token = "0x400170D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Header("Sound")]
		public float jumpPlayFreq;

		[Token(Token = "0x400170E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Components")]
		public Animator myAnimator;

		[Token(Token = "0x400170F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Rigidbody myRigidbody;

		[Token(Token = "0x4001710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Targeting myTargeting;

		[Token(Token = "0x4001711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public EnemyVoices myVoices;

		[Token(Token = "0x4001712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		public bool allowedToJump;

		[Token(Token = "0x4001713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float sinceLastJump;

		[Token(Token = "0x4001714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool onGroundAny;

		[Token(Token = "0x4001715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float groundUpdateTimer;

		[Token(Token = "0x600137F")]
		[Address(RVA = "0xED0D30", Offset = "0xED0D30", VA = "0xED0D30")]
		private void Update()
		{
		}

		[Token(Token = "0x6001380")]
		[Address(RVA = "0xED0E94", Offset = "0xED0E94", VA = "0xED0E94")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001381")]
		[Address(RVA = "0xED0F3C", Offset = "0xED0F3C", VA = "0xED0F3C")]
		[IteratorStateMachine(typeof(<AnimationWait>d__20))]
		private IEnumerator AnimationWait()
		{
			return null;
		}

		[Token(Token = "0x6001382")]
		[Address(RVA = "0xED0FD8", Offset = "0xED0FD8", VA = "0xED0FD8")]
		public JumpAI()
		{
		}
	}
	[Token(Token = "0x20003CB")]
	public class LaserBeamAI : MonoBehaviour
	{
		[Token(Token = "0x20003CC")]
		[CompilerGenerated]
		private sealed class <BeamAttack>d__24 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400172F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001730")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001731")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LaserBeamAI <>4__this;

			[Token(Token = "0x4001732")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private GameObject <beam>5__2;

			[Token(Token = "0x4001733")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 <beamTargetDir>5__3;

			[Token(Token = "0x4001734")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 <beamAxis>5__4;

			[Token(Token = "0x4001735")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float <currentBeamDuration>5__5;

			[Token(Token = "0x17000230")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001390")]
				[Address(RVA = "0xED1DE4", Offset = "0xED1DE4", VA = "0xED1DE4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000231")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001392")]
				[Address(RVA = "0xED1E2C", Offset = "0xED1E2C", VA = "0xED1E2C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600138D")]
			[Address(RVA = "0xED1688", Offset = "0xED1688", VA = "0xED1688")]
			[DebuggerHidden]
			public <BeamAttack>d__24(int <>1__state)
			{
			}

			[Token(Token = "0x600138E")]
			[Address(RVA = "0xED174C", Offset = "0xED174C", VA = "0xED174C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600138F")]
			[Address(RVA = "0xED1750", Offset = "0xED1750", VA = "0xED1750", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001391")]
			[Address(RVA = "0xED1DEC", Offset = "0xED1DEC", VA = "0xED1DEC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Modifiers")]
		public float beamCooldown;

		[Token(Token = "0x400171A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float beamDuration;

		[Token(Token = "0x400171B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float range;

		[Token(Token = "0x400171C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float beamSlashAngle;

		[Token(Token = "0x400171D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float minBeamDot;

		[Token(Token = "0x400171E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject beamEffect;

		[Token(Token = "0x400171F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform beamSource;

		[Token(Token = "0x4001720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 beamForward;

		[Token(Token = "0x4001721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float beamSpawnOffset;

		[Token(Token = "0x4001722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string laserAnimation;

		[Token(Token = "0x4001723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float laserVoiceChance;

		[Token(Token = "0x4001724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool isAntiAir;

		[Token(Token = "0x4001725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 antiAirTargetDirection;

		[Token(Token = "0x4001726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float antiAirAngle;

		[Token(Token = "0x4001727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool fireOnce;

		[Token(Token = "0x4001728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("Components")]
		public Rigidbody myRigidbody;

		[Token(Token = "0x4001729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Targeting myTargeting;

		[Token(Token = "0x400172A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Animator myAnimator;

		[Token(Token = "0x400172B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public DashAI myDash;

		[Token(Token = "0x400172C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public EnemyVoices myVoice;

		[Token(Token = "0x400172D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float sinceLastBeam;

		[Token(Token = "0x400172E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[HideInInspector]
		public bool allowedToLaser;

		[Token(Token = "0x6001389")]
		[Address(RVA = "0xED12FC", Offset = "0xED12FC", VA = "0xED12FC")]
		private void Update()
		{
		}

		[Token(Token = "0x600138A")]
		[Address(RVA = "0xED1328", Offset = "0xED1328", VA = "0xED1328")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600138B")]
		[Address(RVA = "0xED1614", Offset = "0xED1614", VA = "0xED1614")]
		[IteratorStateMachine(typeof(<BeamAttack>d__24))]
		private IEnumerator BeamAttack()
		{
			return null;
		}

		[Token(Token = "0x600138C")]
		[Address(RVA = "0xED16B0", Offset = "0xED16B0", VA = "0xED16B0")]
		public LaserBeamAI()
		{
		}
	}
	[Token(Token = "0x20003CD")]
	public class LookAtTarget : MonoBehaviour
	{
		[Token(Token = "0x4001736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Targeting myTargeting;

		[Token(Token = "0x4001737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform toRotate;

		[Token(Token = "0x4001738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool isDeliveryBot;

		[Token(Token = "0x6001393")]
		[Address(RVA = "0xED1E34", Offset = "0xED1E34", VA = "0xED1E34")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001394")]
		[Address(RVA = "0xED20B4", Offset = "0xED20B4", VA = "0xED20B4")]
		public LookAtTarget()
		{
		}
	}
	[Token(Token = "0x20003CE")]
	public class PositionFollow : MonoBehaviour
	{
		[Token(Token = "0x4001739")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform toFollow;

		[Token(Token = "0x400173A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 offset;

		[Token(Token = "0x6001395")]
		[Address(RVA = "0xED20BC", Offset = "0xED20BC", VA = "0xED20BC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001396")]
		[Address(RVA = "0xED21E0", Offset = "0xED21E0", VA = "0xED21E0")]
		public PositionFollow()
		{
		}
	}
	[Token(Token = "0x20003CF")]
	public class ProxMineAI : MonoBehaviour
	{
		[Token(Token = "0x400173B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Explosion")]
		public float explodeRadius;

		[Token(Token = "0x400173C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float explodeTimer;

		[Token(Token = "0x400173D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Light explosionLight;

		[Token(Token = "0x400173E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maxLightIntensity;

		[Token(Token = "0x400173F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ParticleSystem chargeParticles;

		[Token(Token = "0x4001740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Sound chargeSound;

		[Token(Token = "0x4001741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Components")]
		public Targeting myTargeting;

		[Token(Token = "0x4001742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Health myHealth;

		[Token(Token = "0x4001743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool explosionCharging;

		[Token(Token = "0x4001744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float explodeCurrentTime;

		[Token(Token = "0x4001745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public bool allowedToProxMine;

		[Token(Token = "0x6001397")]
		[Address(RVA = "0xED21E8", Offset = "0xED21E8", VA = "0xED21E8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001398")]
		[Address(RVA = "0xED2204", Offset = "0xED2204", VA = "0xED2204")]
		private void Update()
		{
		}

		[Token(Token = "0x6001399")]
		[Address(RVA = "0xED2430", Offset = "0xED2430", VA = "0xED2430")]
		public ProxMineAI()
		{
		}
	}
	[Token(Token = "0x20003D0")]
	public class ShieldAuraAI : MonoBehaviour
	{
		[Token(Token = "0x4001746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Modifiers")]
		public float auraRange;

		[Token(Token = "0x4001747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float auraBuffer;

		[Token(Token = "0x4001748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string shieldAnimation;

		[Token(Token = "0x4001749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float shieldVoiceChance;

		[Token(Token = "0x400174A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Combat.Team.TeamEnum[] teams;

		[Token(Token = "0x400174B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform shieldEmissionPoint;

		[Token(Token = "0x400174C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Components")]
		public EnemyState myEnemyState;

		[Token(Token = "0x400174D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Rigidbody myRigidbody;

		[Token(Token = "0x400174E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Animator myAnimator;

		[Token(Token = "0x400174F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public EnemyVoices myVoice;

		[Token(Token = "0x600139A")]
		[Address(RVA = "0xED2448", Offset = "0xED2448", VA = "0xED2448")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600139B")]
		[Address(RVA = "0xED29E8", Offset = "0xED29E8", VA = "0xED29E8")]
		public ShieldAuraAI()
		{
		}
	}
	[Token(Token = "0x20003D1")]
	public class ShieldBehaviour : MonoBehaviour, IDamageModifier
	{
		[Token(Token = "0x4001750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Sound activateSound;

		[Token(Token = "0x4001751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Rigidbody myRigidbody;

		[Token(Token = "0x4001752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Health myHealth;

		[Token(Token = "0x4001753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject lightningPlanePrefab;

		[Token(Token = "0x4001754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform shieldModel;

		[Token(Token = "0x4001755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Dictionary<ShieldAuraAI, GameObject> shielders;

		[Token(Token = "0x600139C")]
		[Address(RVA = "0xED28BC", Offset = "0xED28BC", VA = "0xED28BC")]
		public bool AddShielder(ShieldAuraAI shielder)
		{
			return default(bool);
		}

		[Token(Token = "0x600139D")]
		[Address(RVA = "0xED2A08", Offset = "0xED2A08", VA = "0xED2A08")]
		private void Start()
		{
		}

		[Token(Token = "0x600139E")]
		[Address(RVA = "0xED2ABC", Offset = "0xED2ABC", VA = "0xED2ABC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600139F")]
		[Address(RVA = "0xED2ADC", Offset = "0xED2ADC", VA = "0xED2ADC")]
		private void Update()
		{
		}

		[Token(Token = "0x60013A0")]
		[Address(RVA = "0xED3234", Offset = "0xED3234", VA = "0xED3234", Slot = "4")]
		public void ModifyDamage(ref Damage damage)
		{
		}

		[Token(Token = "0x60013A1")]
		[Address(RVA = "0xED3298", Offset = "0xED3298", VA = "0xED3298")]
		public ShieldBehaviour()
		{
		}
	}
	[Token(Token = "0x20003D3")]
	public class Shooting : MonoBehaviour
	{
		[Token(Token = "0x20003D4")]
		public enum FiringMode
		{
			[Token(Token = "0x4001776")]
			Regular,
			[Token(Token = "0x4001777")]
			AntiAir,
			[Token(Token = "0x4001778")]
			BurstFire
		}

		[Token(Token = "0x20003D5")]
		[CompilerGenerated]
		private sealed class <Shoot>d__43 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001779")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400177A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400177B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Shooting <>4__this;

			[Token(Token = "0x400177C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 shootDirection;

			[Token(Token = "0x400177D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Transform spawnPoint;

			[Token(Token = "0x400177E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Sound sound;

			[Token(Token = "0x17000237")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60013B0")]
				[Address(RVA = "0xED4240", Offset = "0xED4240", VA = "0xED4240", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000238")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013B2")]
				[Address(RVA = "0xED4288", Offset = "0xED4288", VA = "0xED4288", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013AD")]
			[Address(RVA = "0xED3CF0", Offset = "0xED3CF0", VA = "0xED3CF0")]
			[DebuggerHidden]
			public <Shoot>d__43(int <>1__state)
			{
			}

			[Token(Token = "0x60013AE")]
			[Address(RVA = "0xED3DE0", Offset = "0xED3DE0", VA = "0xED3DE0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013AF")]
			[Address(RVA = "0xED3DE4", Offset = "0xED3DE4", VA = "0xED3DE4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013B1")]
			[Address(RVA = "0xED4248", Offset = "0xED4248", VA = "0xED4248", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FiringMode firingMode;

		[Token(Token = "0x4001758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Header("Firing")]
		public float accuracy;

		[Token(Token = "0x4001759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float randomCooldownTime;

		[Token(Token = "0x400175A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform[] bulletSpawnPoints;

		[Token(Token = "0x400175B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Sound[] bulletSounds;

		[Token(Token = "0x400175C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 bulletSpawnDir;

		[Token(Token = "0x400175D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float minBulletDot;

		[Token(Token = "0x400175E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Projectile bulletPrefab;

		[Token(Token = "0x400175F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float bulletSpeed;

		[Token(Token = "0x4001760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float targetNoise;

		[Token(Token = "0x4001761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool fireOnce;

		[Token(Token = "0x4001762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		public bool cycleSpawnPoints;

		[Token(Token = "0x4001763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float lookAwayFireMultiplier;

		[Token(Token = "0x4001764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string shootAnimation;

		[Token(Token = "0x4001765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AnimationCurve fireRateCurve;

		[Token(Token = "0x4001766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float fireRateMult;

		[Token(Token = "0x4001767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Vector3 antiAirTargetDirection;

		[Token(Token = "0x4001768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float antiAirAngle;

		[Token(Token = "0x4001769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public int burstShots;

		[Token(Token = "0x400176A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float burstSpread;

		[Token(Token = "0x400176B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float animationWaitTime;

		[Token(Token = "0x400176C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Header("Other")]
		public Rigidbody myRigidbody;

		[Token(Token = "0x400176D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Targeting myTargeting;

		[Token(Token = "0x400176E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public UnityEvent shootEvent;

		[Token(Token = "0x400176F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Animator myAnimator;

		[NonSerialized]
		[Token(Token = "0x4001770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool shotLastFrame;

		[NonSerialized]
		[Token(Token = "0x4001771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		public bool allowedToShoot;

		[Token(Token = "0x4001772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private int nextSpawnPoint;

		[Token(Token = "0x4001773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float? shootStart;

		[Token(Token = "0x4001774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float cooldownProgress;

		[Token(Token = "0x17000232")]
		public bool IsShooting
		{
			[Token(Token = "0x60013A4")]
			[Address(RVA = "0xED33FC", Offset = "0xED33FC", VA = "0xED33FC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000233")]
		private float SinceShootStart
		{
			[Token(Token = "0x60013A5")]
			[Address(RVA = "0xED3438", Offset = "0xED3438", VA = "0xED3438")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000234")]
		private int NumShots
		{
			[Token(Token = "0x60013A6")]
			[Address(RVA = "0xED34B8", Offset = "0xED34B8", VA = "0xED34B8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000235")]
		private float SpreadAngle
		{
			[Token(Token = "0x60013A7")]
			[Address(RVA = "0xED34D4", Offset = "0xED34D4", VA = "0xED34D4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000236")]
		private float CurrentFireRate
		{
			[Token(Token = "0x60013A8")]
			[Address(RVA = "0xED34EC", Offset = "0xED34EC", VA = "0xED34EC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60013A9")]
		[Address(RVA = "0xED3534", Offset = "0xED3534", VA = "0xED3534")]
		private void StopShooting()
		{
		}

		[Token(Token = "0x60013AA")]
		[Address(RVA = "0xED35B8", Offset = "0xED35B8", VA = "0xED35B8")]
		private void Update()
		{
		}

		[Token(Token = "0x60013AB")]
		[Address(RVA = "0xED3C28", Offset = "0xED3C28", VA = "0xED3C28")]
		[IteratorStateMachine(typeof(<Shoot>d__43))]
		private IEnumerator Shoot(Vector3 shootDirection, Transform spawnPoint, Sound sound)
		{
			return null;
		}

		[Token(Token = "0x60013AC")]
		[Address(RVA = "0xED3D18", Offset = "0xED3D18", VA = "0xED3D18")]
		public Shooting()
		{
		}
	}
	[Token(Token = "0x20003D6")]
	public class SlamAI : MonoBehaviour
	{
		[Token(Token = "0x20003D7")]
		[CompilerGenerated]
		private sealed class <AnimationWait>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400178A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400178B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400178C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SlamAI <>4__this;

			[Token(Token = "0x17000239")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60013BA")]
				[Address(RVA = "0xED44F4", Offset = "0xED44F4", VA = "0xED44F4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700023A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013BC")]
				[Address(RVA = "0xED453C", Offset = "0xED453C", VA = "0xED453C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013B7")]
			[Address(RVA = "0xED4390", Offset = "0xED4390", VA = "0xED4390")]
			[DebuggerHidden]
			public <AnimationWait>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x60013B8")]
			[Address(RVA = "0xED43D8", Offset = "0xED43D8", VA = "0xED43D8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013B9")]
			[Address(RVA = "0xED43DC", Offset = "0xED43DC", VA = "0xED43DC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013BB")]
			[Address(RVA = "0xED44FC", Offset = "0xED44FC", VA = "0xED44FC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400177F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Modifiers")]
		public float slamCooldown;

		[Token(Token = "0x4001780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string slamAnimation;

		[Token(Token = "0x4001781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float range;

		[Token(Token = "0x4001782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject slamEffect;

		[Token(Token = "0x4001783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform slamEffectLocation;

		[Token(Token = "0x4001784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float animationWaitTime;

		[Token(Token = "0x4001785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Components")]
		public Animator myAnimator;

		[Token(Token = "0x4001786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Rigidbody myRigidbody;

		[Token(Token = "0x4001787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Targeting myTargeting;

		[Token(Token = "0x4001788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public bool allowedToSlam;

		[Token(Token = "0x4001789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float sinceLastSlam;

		[Token(Token = "0x60013B3")]
		[Address(RVA = "0xED4290", Offset = "0xED4290", VA = "0xED4290")]
		private void Update()
		{
		}

		[Token(Token = "0x60013B4")]
		[Address(RVA = "0xED42BC", Offset = "0xED42BC", VA = "0xED42BC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60013B5")]
		[Address(RVA = "0xED431C", Offset = "0xED431C", VA = "0xED431C")]
		[IteratorStateMachine(typeof(<AnimationWait>d__13))]
		private IEnumerator AnimationWait()
		{
			return null;
		}

		[Token(Token = "0x60013B6")]
		[Address(RVA = "0xED43B8", Offset = "0xED43B8", VA = "0xED43B8")]
		public SlamAI()
		{
		}
	}
	[Token(Token = "0x20003D8")]
	public class SoldierController : MonoBehaviour
	{
		[Token(Token = "0x400178D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float distanceToShoot;

		[Token(Token = "0x400178E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Components")]
		public Targeting myTargeting;

		[Token(Token = "0x400178F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Animator myAnimator;

		[Token(Token = "0x4001790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shooting myShooting;

		[Token(Token = "0x60013BD")]
		[Address(RVA = "0xED4544", Offset = "0xED4544", VA = "0xED4544")]
		private void Update()
		{
		}

		[Token(Token = "0x60013BE")]
		[Address(RVA = "0xED45E4", Offset = "0xED45E4", VA = "0xED45E4")]
		public SoldierController()
		{
		}
	}
	[Token(Token = "0x20003D9")]
	public class TankerController : MonoBehaviour
	{
		[Token(Token = "0x4001791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WalkAI myWalking;

		[Token(Token = "0x4001792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Shooting myShooting;

		[Token(Token = "0x4001793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Animator myAnimator;

		[Token(Token = "0x4001794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Targeting myTargeting;

		[Token(Token = "0x4001795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool isAttachedDelivery;

		[Token(Token = "0x60013BF")]
		[Address(RVA = "0xED45EC", Offset = "0xED45EC", VA = "0xED45EC")]
		private void Update()
		{
		}

		[Token(Token = "0x60013C0")]
		[Address(RVA = "0xED4910", Offset = "0xED4910", VA = "0xED4910")]
		public TankerController()
		{
		}
	}
	[Token(Token = "0x20003DA")]
	public class Targeting : MonoBehaviour
	{
		[Token(Token = "0x4001796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float aggressionDistance;

		[Token(Token = "0x4001797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyState myState;

		[Token(Token = "0x4001798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float navigateAroundWalls;

		[Token(Token = "0x4001799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float yOffsetRate;

		[Token(Token = "0x400179A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Cache<RaycastHit?> raycastToTarget;

		[Token(Token = "0x400179B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float yOffset;

		[Token(Token = "0x1700023B")]
		public bool isAggressive
		{
			[Token(Token = "0x60013C1")]
			[Address(RVA = "0xED4918", Offset = "0xED4918", VA = "0xED4918")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700023C")]
		public bool isTargetVisisble
		{
			[Token(Token = "0x60013C2")]
			[Address(RVA = "0xED03A0", Offset = "0xED03A0", VA = "0xED03A0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700023D")]
		public GameObject target
		{
			[Token(Token = "0x60013C3")]
			[Address(RVA = "0xECFE58", Offset = "0xECFE58", VA = "0xECFE58")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700023E")]
		public float currentTargetDistance
		{
			[Token(Token = "0x60013C4")]
			[Address(RVA = "0xED0610", Offset = "0xED0610", VA = "0xED0610")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700023F")]
		public Vector3 TargetPos
		{
			[Token(Token = "0x60013C5")]
			[Address(RVA = "0xECFB24", Offset = "0xECFB24", VA = "0xECFB24")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000240")]
		public Vector3 TargetVel
		{
			[Token(Token = "0x60013C6")]
			[Address(RVA = "0xED03FC", Offset = "0xED03FC", VA = "0xED03FC")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x60013C7")]
		[Address(RVA = "0xED49A0", Offset = "0xED49A0", VA = "0xED49A0")]
		public Vector3 MovementToTarget()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60013C8")]
		[Address(RVA = "0xED4BB4", Offset = "0xED4BB4", VA = "0xED4BB4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60013C9")]
		[Address(RVA = "0xED4C80", Offset = "0xED4C80", VA = "0xED4C80")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60013CA")]
		[Address(RVA = "0xED4D08", Offset = "0xED4D08", VA = "0xED4D08")]
		private void Update()
		{
		}

		[Token(Token = "0x60013CB")]
		[Address(RVA = "0xED4E08", Offset = "0xED4E08", VA = "0xED4E08")]
		public Targeting()
		{
		}
	}
	[Token(Token = "0x20003DB")]
	public class WalkAI : MonoBehaviour
	{
		[Token(Token = "0x400179C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Movement")]
		public float walkSpeed;

		[Token(Token = "0x400179D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float walkAccel;

		[Token(Token = "0x400179E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float brakeAccel;

		[Token(Token = "0x400179F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 onGroundRayOrigin;

		[Token(Token = "0x40017A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float onGroundAnyMaxDist;

		[Token(Token = "0x40017A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float onGroundWalkingMaxDist;

		[Token(Token = "0x40017A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string walkAnimation;

		[Token(Token = "0x40017A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float fallPlayFreq;

		[Token(Token = "0x40017A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Components")]
		public AngularSpring angularSpring;

		[Token(Token = "0x40017A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Animator myAnimator;

		[Token(Token = "0x40017A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Rigidbody myRigidbody;

		[Token(Token = "0x40017A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Targeting myTargeting;

		[Token(Token = "0x40017A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public EnemyVoices myVoices;

		[Token(Token = "0x40017A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Cache<bool> onGroundWalking;

		[Token(Token = "0x40017AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Cache<bool> onGroundAny;

		[NonSerialized]
		[Token(Token = "0x40017AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool allowedToRotate;

		[NonSerialized]
		[Token(Token = "0x40017AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		public bool allowedToWalk;

		[Token(Token = "0x17000241")]
		public bool ShouldRotate
		{
			[Token(Token = "0x60013CD")]
			[Address(RVA = "0xED5084", Offset = "0xED5084", VA = "0xED5084")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000242")]
		public bool ShouldWalk
		{
			[Token(Token = "0x60013CE")]
			[Address(RVA = "0xED5130", Offset = "0xED5130", VA = "0xED5130")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60013CF")]
		[Address(RVA = "0xED51DC", Offset = "0xED51DC", VA = "0xED51DC")]
		private void Start()
		{
		}

		[Token(Token = "0x60013D0")]
		[Address(RVA = "0xED531C", Offset = "0xED531C", VA = "0xED531C")]
		private void Update()
		{
		}

		[Token(Token = "0x60013D1")]
		[Address(RVA = "0xED53E8", Offset = "0xED53E8", VA = "0xED53E8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60013D2")]
		[Address(RVA = "0xED5808", Offset = "0xED5808", VA = "0xED5808")]
		public WalkAI()
		{
		}
	}
}
namespace AI.Boss.Worm
{
	[Token(Token = "0x20003DC")]
	public class WormAI : MonoBehaviour
	{
		[Token(Token = "0x20003E0")]
		[CompilerGenerated]
		private sealed class <HandleHitstunCoroutine>d__61 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40017EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40017EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40017ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WormAI <>4__this;

			[Token(Token = "0x40017EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <newBlinkSpeedVal>5__2;

			[Token(Token = "0x40017EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int <i>5__3;

			[Token(Token = "0x17000245")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60013F5")]
				[Address(RVA = "0xED89E8", Offset = "0xED89E8", VA = "0xED89E8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000246")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013F7")]
				[Address(RVA = "0xED8A30", Offset = "0xED8A30", VA = "0xED8A30", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013F2")]
			[Address(RVA = "0xED8228", Offset = "0xED8228", VA = "0xED8228")]
			[DebuggerHidden]
			public <HandleHitstunCoroutine>d__61(int <>1__state)
			{
			}

			[Token(Token = "0x60013F3")]
			[Address(RVA = "0xED8778", Offset = "0xED8778", VA = "0xED8778", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013F4")]
			[Address(RVA = "0xED877C", Offset = "0xED877C", VA = "0xED877C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013F6")]
			[Address(RVA = "0xED89F0", Offset = "0xED89F0", VA = "0xED89F0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003E1")]
		[CompilerGenerated]
		private sealed class <SequentialSegmentDestuction>d__64 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40017F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40017F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40017F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WormAI <>4__this;

			[Token(Token = "0x40017F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float delay;

			[Token(Token = "0x17000247")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60013FB")]
				[Address(RVA = "0xED8DF0", Offset = "0xED8DF0", VA = "0xED8DF0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000248")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013FD")]
				[Address(RVA = "0xED8E38", Offset = "0xED8E38", VA = "0xED8E38", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013F8")]
			[Address(RVA = "0xED82D4", Offset = "0xED82D4", VA = "0xED82D4")]
			[DebuggerHidden]
			public <SequentialSegmentDestuction>d__64(int <>1__state)
			{
			}

			[Token(Token = "0x60013F9")]
			[Address(RVA = "0xED8A38", Offset = "0xED8A38", VA = "0xED8A38", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013FA")]
			[Address(RVA = "0xED8A3C", Offset = "0xED8A3C", VA = "0xED8A3C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013FC")]
			[Address(RVA = "0xED8DF8", Offset = "0xED8DF8", VA = "0xED8DF8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40017AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform wormSegmentGroup;

		[Token(Token = "0x40017AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Kills the worm if the number of segments following the head drops below this number")]
		public int minimumNumberOfSegments;

		[Token(Token = "0x40017AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool leaveHeadOnDeath;

		[Token(Token = "0x40017B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public DeathGears deathGears;

		[Token(Token = "0x40017B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public KillAchievements killAchievements;

		[Token(Token = "0x40017B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject destructionEffectPrefab;

		[Token(Token = "0x40017B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Locomotion")]
		[Tooltip("Target speed to accelerate up to")]
		public float maxspeed;

		[Token(Token = "0x40017B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("How fast to accelerate")]
		public float accelerationAmount;

		[Token(Token = "0x40017B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("How frequently to wiggle left and right")]
		public float wiggleSpeed;

		[Token(Token = "0x40017B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("How much to divert from linear path")]
		public float wiggleStrength;

		[Token(Token = "0x40017B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Rigidbody rb;

		[Token(Token = "0x40017B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public LayerMask whiskerMask;

		[Token(Token = "0x40017B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float raycastLengthMult;

		[Token(Token = "0x40017BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("How quickly does the guidance steer (in degrees/second)")]
		[Header("Guidance")]
		public float guidanceTurnSpeed;

		[Token(Token = "0x40017BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("How imprecise can the movement direction be from the true direction (in degrees)")]
		public float guidanceTolerance;

		[Token(Token = "0x40017BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Steers towards the target position if this is not null")]
		public Transform targetTransform;

		[Token(Token = "0x40017BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Given a percentage health, what is the furthest that the worm can get away from the player")]
		public AnimationCurve maxDistanceFromPlayerByNormalizedHealth;

		[Token(Token = "0x40017BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Given a percentage health, at what distance does the worm start to prefer to scale buildings (to help locate it at range)")]
		public AnimationCurve climbDistanceByNormalizedHealth;

		[Token(Token = "0x40017BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Header("Hitstun")]
		public Health health;

		[Token(Token = "0x40017C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public HealthColorizer[] stunnableHealthColorizers;

		[Token(Token = "0x40017C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("How long should the hitstun last (in seconds)")]
		public float hitstunDuration;

		[Token(Token = "0x40017C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("The delay between when each segement recovers from hitstun (adds a ripple to blinking effect when the worm is long)")]
		public float recoveryRippleDelay;

		[Token(Token = "0x40017C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool overrideBlinkSpeed;

		[Token(Token = "0x40017C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public AnimationCurve blinkSpeedCurve;

		[Token(Token = "0x40017C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Sound mainVoice;

		[Token(Token = "0x40017C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float segmentsPerSpeaker;

		[Token(Token = "0x40017C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float maxDelayPerSpeaker;

		[Token(Token = "0x40017C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public SoundSet soundAttackHit1;

		[Token(Token = "0x40017C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public SoundSet soundAttackHit2;

		[Token(Token = "0x40017CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public SoundSet soundCharge;

		[Token(Token = "0x40017CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public SoundSet soundClose;

		[Token(Token = "0x40017CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public SoundSet soundDamaged;

		[Token(Token = "0x40017CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public SoundSet soundDefeated;

		[Token(Token = "0x40017CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public SoundSet soundDescend;

		[Token(Token = "0x40017CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public SoundSet soundDistant;

		[Token(Token = "0x40017D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public SoundSet soundIntroduction;

		[Token(Token = "0x40017D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public SoundSet soundLaserEye;

		[Token(Token = "0x40017D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public SoundSet soundRetreat;

		[Token(Token = "0x40017D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public SoundSet soundSegmentDestroyed;

		[Token(Token = "0x40017D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public SoundSet soundSpawnDrones;

		[Token(Token = "0x40017D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Vector3 avgNormal;

		[Token(Token = "0x40017D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private Vector3 avgPoint;

		[Token(Token = "0x40017D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Ray[] groundingWhiskers;

		[Token(Token = "0x40017D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Coroutine hitstunCoroutine;

		[Token(Token = "0x40017D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private float hitstunEndtime;

		[Token(Token = "0x40017DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private bool isDead;

		[Token(Token = "0x40017DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14D")]
		private bool isGrounded;

		[Token(Token = "0x40017DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14E")]
		private bool isStunned;

		[Token(Token = "0x40017DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private float[] prevHealthColorizerBlinkAmounts;

		[Token(Token = "0x40017DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private int startNumSegments;

		[Token(Token = "0x40017DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		private Vector3 targetUpDir;

		[Token(Token = "0x40017E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[Tooltip("What part of the wiggle does it start at")]
		private float wiggleRandomSeed;

		[Token(Token = "0x60013D5")]
		[Address(RVA = "0xED5A50", Offset = "0xED5A50", VA = "0xED5A50")]
		private void Start()
		{
		}

		[Token(Token = "0x60013D6")]
		[Address(RVA = "0xED69A8", Offset = "0xED69A8", VA = "0xED69A8")]
		private void Update()
		{
		}

		[Token(Token = "0x60013D7")]
		[Address(RVA = "0xED6D4C", Offset = "0xED6D4C", VA = "0xED6D4C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60013D8")]
		[Address(RVA = "0xED654C", Offset = "0xED654C", VA = "0xED654C")]
		private void Speak(SoundSet soundSet)
		{
		}

		[Token(Token = "0x60013D9")]
		[Address(RVA = "0xED6D64", Offset = "0xED6D64", VA = "0xED6D64")]
		protected void ApplyLocomotionForces()
		{
		}

		[Token(Token = "0x60013DA")]
		[Address(RVA = "0xED7938", Offset = "0xED7938", VA = "0xED7938")]
		protected void ApplyGuidanceForces()
		{
		}

		[Token(Token = "0x60013DB")]
		[Address(RVA = "0xED7FD0", Offset = "0xED7FD0", VA = "0xED7FD0")]
		public float GetNormalizedHealth()
		{
			return default(float);
		}

		[Token(Token = "0x60013DC")]
		[Address(RVA = "0xED6CB4", Offset = "0xED6CB4", VA = "0xED6CB4")]
		protected void CheckSegmentCount()
		{
		}

		[Token(Token = "0x60013DD")]
		[Address(RVA = "0xED80FC", Offset = "0xED80FC", VA = "0xED80FC")]
		private void HandleHitstun(Damage damage)
		{
		}

		[Token(Token = "0x60013DE")]
		[Address(RVA = "0xED6934", Offset = "0xED6934", VA = "0xED6934")]
		[IteratorStateMachine(typeof(<HandleHitstunCoroutine>d__61))]
		private IEnumerator HandleHitstunCoroutine()
		{
			return null;
		}

		[Token(Token = "0x60013DF")]
		[Address(RVA = "0xED80BC", Offset = "0xED80BC", VA = "0xED80BC")]
		protected void KillWorm()
		{
		}

		[Token(Token = "0x60013E0")]
		[Address(RVA = "0xED8038", Offset = "0xED8038", VA = "0xED8038")]
		private Vector3 RotateTowardsWithTolerance(Vector3 current, Vector3 target, float maxRadiansDelta, float maxMagnitudeDelta, float toleranceRadians)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60013E1")]
		[Address(RVA = "0xED8250", Offset = "0xED8250", VA = "0xED8250")]
		[IteratorStateMachine(typeof(<SequentialSegmentDestuction>d__64))]
		private IEnumerator SequentialSegmentDestuction(float delay)
		{
			return null;
		}

		[Token(Token = "0x60013E2")]
		[Address(RVA = "0xED82FC", Offset = "0xED82FC", VA = "0xED82FC")]
		public WormAI()
		{
		}
	}
	[Token(Token = "0x20003E2")]
	public class WormBodyAI : MonoBehaviour
	{
		[Token(Token = "0x40017F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("How far can this get from the next segment before trying to follow it?")]
		public float maxDistance;

		[Token(Token = "0x40017F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float constantAccelerationForce;

		[Token(Token = "0x40017F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("What should this follow")]
		public Rigidbody followTargetRB;

		[Token(Token = "0x40017F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ConfigurableJoint joint;

		[Token(Token = "0x40017F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float followForce;

		[Token(Token = "0x40017F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float pullForceRatio;

		[Token(Token = "0x40017FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float catchupPow;

		[Token(Token = "0x40017FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float alignmentScalingFactor;

		[Token(Token = "0x40017FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float followOverrideFactor;

		[Token(Token = "0x40017FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Rigidbody rb;

		[Token(Token = "0x40017FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public LayerMask whiskerMask;

		[Token(Token = "0x40017FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float raycastLengthMult;

		[Token(Token = "0x4001800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		public WormBodyAI nextSegment;

		[Token(Token = "0x4001801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		public WormBodyAI prevSegment;

		[Token(Token = "0x4001802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public UnityEvent deathEvent;

		[Token(Token = "0x60013FE")]
		[Address(RVA = "0xED8E40", Offset = "0xED8E40", VA = "0xED8E40")]
		private void Start()
		{
		}

		[Token(Token = "0x60013FF")]
		[Address(RVA = "0xED8F9C", Offset = "0xED8F9C", VA = "0xED8F9C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001400")]
		[Address(RVA = "0xED9A84", Offset = "0xED9A84", VA = "0xED9A84")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001401")]
		[Address(RVA = "0xED9C1C", Offset = "0xED9C1C", VA = "0xED9C1C")]
		[ExecuteInEditMode]
		[ContextMenu("ConfigureSegmentChain")]
		private void ConfigureSiblingSegmentsChain()
		{
		}

		[Token(Token = "0x6001402")]
		[Address(RVA = "0xED9F10", Offset = "0xED9F10", VA = "0xED9F10")]
		[ExecuteInEditMode]
		[ContextMenu("ConfigureSegmentPositionOffset")]
		private void ConfigureSiblingSegmentsPositionOffset()
		{
		}

		[Token(Token = "0x6001403")]
		[Address(RVA = "0xEDA130", Offset = "0xEDA130", VA = "0xEDA130")]
		[ExecuteInEditMode]
		[ContextMenu("ConfiureBlinkingOffsets")]
		private void ConfiureBlinkingOffsets()
		{
		}

		[Token(Token = "0x6001404")]
		[Address(RVA = "0xEDA27C", Offset = "0xEDA27C", VA = "0xEDA27C")]
		public WormBodyAI()
		{
		}
	}
}
namespace AI.Boss.TurretBoy
{
	[Token(Token = "0x20003E3")]
	public class AirMineBehavior : MonoBehaviour
	{
		[Token(Token = "0x4001803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float initialRotationSpeed;

		[Token(Token = "0x4001804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float proximityDetectionRange;

		[Token(Token = "0x4001805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float proximityBlinkInterval;

		[Token(Token = "0x4001806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MeshRenderer mineBolts;

		[Token(Token = "0x4001807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject player;

		[Token(Token = "0x4001808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool playerNear;

		[Token(Token = "0x4001809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool boltsLit;

		[Token(Token = "0x400180A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float blinkTimer;

		[Token(Token = "0x400180B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Material baseBolt;

		[Token(Token = "0x400180C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Material litBolt;

		[Token(Token = "0x400180D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Sound proximitySound;

		[Token(Token = "0x400180E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float damage;

		[Token(Token = "0x400180F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float empDuration;

		[Token(Token = "0x4001810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool empAffectsBothHands;

		[Token(Token = "0x6001405")]
		[Address(RVA = "0xEDA2B0", Offset = "0xEDA2B0", VA = "0xEDA2B0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001406")]
		[Address(RVA = "0xEDA3F0", Offset = "0xEDA3F0", VA = "0xEDA3F0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001407")]
		[Address(RVA = "0xEDA5A4", Offset = "0xEDA5A4", VA = "0xEDA5A4")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001408")]
		[Address(RVA = "0xEDA74C", Offset = "0xEDA74C", VA = "0xEDA74C")]
		public AirMineBehavior()
		{
		}
	}
	[Token(Token = "0x20003E4")]
	public class BouncingMineBehaviour : MonoBehaviour
	{
		[Token(Token = "0x20003E5")]
		[CompilerGenerated]
		private sealed class <EMPBurst>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001820")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001821")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001822")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BouncingMineBehaviour <>4__this;

			[Token(Token = "0x4001823")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <empBurstTimer>5__2;

			[Token(Token = "0x17000249")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001410")]
				[Address(RVA = "0xEDADD4", Offset = "0xEDADD4", VA = "0xEDADD4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700024A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001412")]
				[Address(RVA = "0xEDAE1C", Offset = "0xEDAE1C", VA = "0xEDAE1C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600140D")]
			[Address(RVA = "0xEDAB1C", Offset = "0xEDAB1C", VA = "0xEDAB1C")]
			[DebuggerHidden]
			public <EMPBurst>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x600140E")]
			[Address(RVA = "0xEDAB78", Offset = "0xEDAB78", VA = "0xEDAB78", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600140F")]
			[Address(RVA = "0xEDAB7C", Offset = "0xEDAB7C", VA = "0xEDAB7C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001411")]
			[Address(RVA = "0xEDADDC", Offset = "0xEDADDC", VA = "0xEDADDC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float empBurstCooldown;

		[Token(Token = "0x4001812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float empBurstTransition;

		[Token(Token = "0x4001813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float empBurstDuration;

		[Token(Token = "0x4001814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject empField;

		[Token(Token = "0x4001815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float empFieldBurstSize;

		[Token(Token = "0x4001816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Rigidbody myRigidbody;

		[Token(Token = "0x4001817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float targetEnergy;

		[Token(Token = "0x4001818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float followMul;

		[Token(Token = "0x4001819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float forceMul;

		[Token(Token = "0x400181A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float forceMin;

		[Token(Token = "0x400181B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float forceMax;

		[Token(Token = "0x400181C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float empCooldownTimer;

		[Token(Token = "0x400181D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 initialEMPFieldScale;

		[Token(Token = "0x400181E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Vector3 targetEMPFieldScale;

		[Token(Token = "0x400181F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool bursting;

		[Token(Token = "0x6001409")]
		[Address(RVA = "0xEDA774", Offset = "0xEDA774", VA = "0xEDA774")]
		private void Start()
		{
		}

		[Token(Token = "0x600140A")]
		[Address(RVA = "0xEDA7E4", Offset = "0xEDA7E4", VA = "0xEDA7E4")]
		private void Update()
		{
		}

		[Token(Token = "0x600140B")]
		[Address(RVA = "0xEDAAA8", Offset = "0xEDAAA8", VA = "0xEDAAA8")]
		[IteratorStateMachine(typeof(<EMPBurst>d__17))]
		private IEnumerator EMPBurst()
		{
			return null;
		}

		[Token(Token = "0x600140C")]
		[Address(RVA = "0xEDAB44", Offset = "0xEDAB44", VA = "0xEDAB44")]
		public BouncingMineBehaviour()
		{
		}
	}
	[Token(Token = "0x20003E6")]
	public class EMPField : MonoBehaviour
	{
		[Token(Token = "0x4001824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float empDuration;

		[Token(Token = "0x4001825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool empAffectsBothHands;

		[Token(Token = "0x4001826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		private bool playerInField;

		[Token(Token = "0x4001827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float empFieldBurstInterval;

		[Token(Token = "0x4001828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float empFieldTimer;

		[Token(Token = "0x6001413")]
		[Address(RVA = "0xEDAE24", Offset = "0xEDAE24", VA = "0xEDAE24")]
		private void Start()
		{
		}

		[Token(Token = "0x6001414")]
		[Address(RVA = "0xEDAE30", Offset = "0xEDAE30", VA = "0xEDAE30")]
		private void Update()
		{
		}

		[Token(Token = "0x6001415")]
		[Address(RVA = "0xEDAEC8", Offset = "0xEDAEC8", VA = "0xEDAEC8")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001416")]
		[Address(RVA = "0xEDAFC4", Offset = "0xEDAFC4", VA = "0xEDAFC4")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6001417")]
		[Address(RVA = "0xEDB080", Offset = "0xEDB080", VA = "0xEDB080")]
		public EMPField()
		{
		}
	}
	[Token(Token = "0x20003E7")]
	public class LaserFanAttack : MonoBehaviour
	{
		[Token(Token = "0x20003E8")]
		[CompilerGenerated]
		private sealed class <FanAttack>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001834")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001835")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001836")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LaserFanAttack <>4__this;

			[Token(Token = "0x4001837")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <startTime>5__2;

			[Token(Token = "0x4001838")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <setupEndTime>5__3;

			[Token(Token = "0x4001839")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <angleDelta>5__4;

			[Token(Token = "0x1700024B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600141F")]
				[Address(RVA = "0xEDBB94", Offset = "0xEDBB94", VA = "0xEDBB94", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700024C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001421")]
				[Address(RVA = "0xEDBBDC", Offset = "0xEDBBDC", VA = "0xEDBBDC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600141C")]
			[Address(RVA = "0xEDB13C", Offset = "0xEDB13C", VA = "0xEDB13C")]
			[DebuggerHidden]
			public <FanAttack>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x600141D")]
			[Address(RVA = "0xEDB180", Offset = "0xEDB180", VA = "0xEDB180", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600141E")]
			[Address(RVA = "0xEDB184", Offset = "0xEDB184", VA = "0xEDB184", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001420")]
			[Address(RVA = "0xEDBB9C", Offset = "0xEDBB9C", VA = "0xEDBB9C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("What to shoot at")]
		public Rigidbody targetedRigidbody;

		[Token(Token = "0x400182A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Object to enable/disable to control the primary laser")]
		public GameObject primaryLaser;

		[Token(Token = "0x400182B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Object to enable/disable to control the fan laser assembly")]
		public GameObject fanLaser;

		[Token(Token = "0x400182C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("How long to get to initial fan position")]
		public float fanSetupDuration;

		[Token(Token = "0x400182D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("How long does a fan attack last")]
		public float fanDuration;

		[Token(Token = "0x400182E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("How wide of an arc does the fan attack sweep")]
		public float sweepArc;

		[Token(Token = "0x400182F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("How wide of an arc can the laser be fired in")]
		public float maxForwardTargetingArc;

		[Token(Token = "0x4001830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Sound FanningSound;

		[Token(Token = "0x4001831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The individual fan lasers")]
		public LaserFanSpread[] spreadLasers;

		[Token(Token = "0x4001832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool isFanning;

		[Token(Token = "0x4001833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public LaserSweepAttack sweepAttack;

		[Token(Token = "0x6001418")]
		[Address(RVA = "0xEDB098", Offset = "0xEDB098", VA = "0xEDB098")]
		public void PerformFanAttack()
		{
		}

		[Token(Token = "0x6001419")]
		[Address(RVA = "0xEDB0C8", Offset = "0xEDB0C8", VA = "0xEDB0C8")]
		[IteratorStateMachine(typeof(<FanAttack>d__12))]
		private IEnumerator FanAttack()
		{
			return null;
		}

		[Token(Token = "0x600141A")]
		[Address(RVA = "0xEDB164", Offset = "0xEDB164", VA = "0xEDB164")]
		public bool IsFanning()
		{
			return default(bool);
		}

		[Token(Token = "0x600141B")]
		[Address(RVA = "0xEDB16C", Offset = "0xEDB16C", VA = "0xEDB16C")]
		public LaserFanAttack()
		{
		}
	}
	[Token(Token = "0x20003E9")]
	public class LaserFanSpread : MonoBehaviour
	{
		[Token(Token = "0x400183A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxRotation;

		[Token(Token = "0x400183B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool opening;

		[Token(Token = "0x400183C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float dur;

		[Token(Token = "0x400183D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float startTime;

		[Token(Token = "0x6001422")]
		[Address(RVA = "0xEDBBE4", Offset = "0xEDBBE4", VA = "0xEDBBE4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001423")]
		[Address(RVA = "0xEDBB38", Offset = "0xEDBB38", VA = "0xEDBB38")]
		public void startOpening(float duration)
		{
		}

		[Token(Token = "0x6001424")]
		[Address(RVA = "0xEDBB68", Offset = "0xEDBB68", VA = "0xEDBB68")]
		public void startClosing(float duration)
		{
		}

		[Token(Token = "0x6001425")]
		[Address(RVA = "0xEDBCEC", Offset = "0xEDBCEC", VA = "0xEDBCEC")]
		public LaserFanSpread()
		{
		}
	}
	[Token(Token = "0x20003EA")]
	public class LaserShooting : MonoBehaviour
	{
		[Token(Token = "0x400183E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float laserCooldown;

		[Token(Token = "0x400183F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LaserSweepAttack myLaserSweepAttack;

		[Token(Token = "0x4001840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LaserFanAttack myLaserFanAttack;

		[Token(Token = "0x4001841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float laserTimer;

		[Token(Token = "0x6001426")]
		[Address(RVA = "0xEDBCF4", Offset = "0xEDBCF4", VA = "0xEDBCF4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001427")]
		[Address(RVA = "0xEDBD7C", Offset = "0xEDBD7C", VA = "0xEDBD7C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001428")]
		[Address(RVA = "0xEDBDF0", Offset = "0xEDBDF0", VA = "0xEDBDF0")]
		public LaserShooting()
		{
		}
	}
	[Token(Token = "0x20003EB")]
	public class MineShooting : MonoBehaviour
	{
		[Token(Token = "0x4001842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Firing")]
		public Transform[] bulletSpawnPoints;

		[Token(Token = "0x4001843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Sound[] bulletSounds;

		[Token(Token = "0x4001844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 bulletSpawnDir;

		[Token(Token = "0x4001845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float minBulletDot;

		[Token(Token = "0x4001846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Projectile bulletPrefab;

		[Token(Token = "0x4001847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float bulletSpeed;

		[Token(Token = "0x4001848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float targetNoise;

		[Token(Token = "0x4001849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float mineShotSeconds;

		[Token(Token = "0x400184A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Other")]
		public Rigidbody myRigidbody;

		[Token(Token = "0x400184B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Targeting myTargeting;

		[Token(Token = "0x400184C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float mineTimer;

		[Token(Token = "0x6001429")]
		[Address(RVA = "0xEDBE00", Offset = "0xEDBE00", VA = "0xEDBE00")]
		private void Update()
		{
		}

		[Token(Token = "0x600142A")]
		[Address(RVA = "0xEDC234", Offset = "0xEDC234", VA = "0xEDC234")]
		public MineShooting()
		{
		}
	}
	[Token(Token = "0x20003EC")]
	public class MineShootingSpecial : MonoBehaviour
	{
		[Token(Token = "0x20003EE")]
		[CompilerGenerated]
		private sealed class <bouncyMineAttack>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001852")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001853")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001854")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Sound voiceline;

			[Token(Token = "0x4001855")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MineShootingSpecial <>4__this;

			[Token(Token = "0x1700024D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001435")]
				[Address(RVA = "0xEDCCC4", Offset = "0xEDCCC4", VA = "0xEDCCC4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700024E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001437")]
				[Address(RVA = "0xEDCD0C", Offset = "0xEDCD0C", VA = "0xEDCD0C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001432")]
			[Address(RVA = "0xEDC5A0", Offset = "0xEDC5A0", VA = "0xEDC5A0")]
			[DebuggerHidden]
			public <bouncyMineAttack>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6001433")]
			[Address(RVA = "0xEDC5F4", Offset = "0xEDC5F4", VA = "0xEDC5F4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001434")]
			[Address(RVA = "0xEDC5F8", Offset = "0xEDC5F8", VA = "0xEDC5F8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001436")]
			[Address(RVA = "0xEDCCCC", Offset = "0xEDCCCC", VA = "0xEDCCCC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400184D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Targeting myTargeting;

		[Token(Token = "0x400184E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Shooting mineShooter;

		[Token(Token = "0x400184F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject minePrefab;

		[Token(Token = "0x4001850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<GameObject> activeMines;

		[Token(Token = "0x600142B")]
		[Address(RVA = "0xEDC2A8", Offset = "0xEDC2A8", VA = "0xEDC2A8")]
		private void Start()
		{
		}

		[Token(Token = "0x600142C")]
		[Address(RVA = "0xEDC324", Offset = "0xEDC324", VA = "0xEDC324")]
		public void SpecialMineAttack(Sound voiceline)
		{
		}

		[Token(Token = "0x600142D")]
		[Address(RVA = "0xEDC3D4", Offset = "0xEDC3D4", VA = "0xEDC3D4")]
		public void ClearAllMines()
		{
		}

		[Token(Token = "0x600142E")]
		[Address(RVA = "0xEDC344", Offset = "0xEDC344", VA = "0xEDC344")]
		[IteratorStateMachine(typeof(<bouncyMineAttack>d__7))]
		private IEnumerator bouncyMineAttack(Sound voiceline)
		{
			return null;
		}

		[Token(Token = "0x600142F")]
		[Address(RVA = "0xEDC5C8", Offset = "0xEDC5C8", VA = "0xEDC5C8")]
		public MineShootingSpecial()
		{
		}
	}
	[Token(Token = "0x20003EF")]
	public class RocketShooting : MonoBehaviour
	{
		[Token(Token = "0x20003F0")]
		[CompilerGenerated]
		private sealed class <MissileSalvo>d__19 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001866")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001867")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001868")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RocketShooting <>4__this;

			[Token(Token = "0x4001869")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private List<Projectile> <activeRockets>5__2;

			[Token(Token = "0x400186A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <i>5__3;

			[Token(Token = "0x1700024F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001442")]
				[Address(RVA = "0xEDD92C", Offset = "0xEDD92C", VA = "0xEDD92C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000250")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001444")]
				[Address(RVA = "0xEDD974", Offset = "0xEDD974", VA = "0xEDD974", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600143F")]
			[Address(RVA = "0xEDD3D0", Offset = "0xEDD3D0", VA = "0xEDD3D0")]
			[DebuggerHidden]
			public <MissileSalvo>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x6001440")]
			[Address(RVA = "0xEDD488", Offset = "0xEDD488", VA = "0xEDD488", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001441")]
			[Address(RVA = "0xEDD48C", Offset = "0xEDD48C", VA = "0xEDD48C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001443")]
			[Address(RVA = "0xEDD934", Offset = "0xEDD934", VA = "0xEDD934", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Firing")]
		public Transform[] bulletSpawnPoints;

		[Token(Token = "0x4001857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Sound[] bulletSounds;

		[Token(Token = "0x4001858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 bulletSpawnDir;

		[Token(Token = "0x4001859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float minBulletDot;

		[Token(Token = "0x400185A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Projectile bulletPrefab;

		[Token(Token = "0x400185B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float bulletScale;

		[Token(Token = "0x400185C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float bulletCount;

		[Token(Token = "0x400185D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float bulletSpeed;

		[Token(Token = "0x400185E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float targetNoise;

		[Token(Token = "0x400185F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float activateRocketsDelay;

		[Token(Token = "0x4001860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Other")]
		public Rigidbody myRigidbody;

		[Token(Token = "0x4001861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Targeting myTargeting;

		[Token(Token = "0x4001862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly float timeBetweenRockets;

		[Token(Token = "0x4001863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool fireRockets;

		[Token(Token = "0x4001864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float initialRocketTimer;

		[Token(Token = "0x4001865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float rocketTimer;

		[Token(Token = "0x6001438")]
		[Address(RVA = "0xEDCD14", Offset = "0xEDCD14", VA = "0xEDCD14")]
		private void Start()
		{
		}

		[Token(Token = "0x6001439")]
		[Address(RVA = "0xEDCD20", Offset = "0xEDCD20", VA = "0xEDCD20")]
		private void Update()
		{
		}

		[Token(Token = "0x600143A")]
		[Address(RVA = "0xEDD324", Offset = "0xEDD324", VA = "0xEDD324")]
		public void PerformMissileSalvo()
		{
		}

		[Token(Token = "0x600143B")]
		[Address(RVA = "0xEDD35C", Offset = "0xEDD35C", VA = "0xEDD35C")]
		[IteratorStateMachine(typeof(<MissileSalvo>d__19))]
		private IEnumerator MissileSalvo()
		{
			return null;
		}

		[Token(Token = "0x600143C")]
		[Address(RVA = "0xEDCE58", Offset = "0xEDCE58", VA = "0xEDCE58")]
		private Projectile FireMissile(int spawnPointInd)
		{
			return null;
		}

		[Token(Token = "0x600143D")]
		[Address(RVA = "0xEDD3F8", Offset = "0xEDD3F8", VA = "0xEDD3F8")]
		public bool IsFiring()
		{
			return default(bool);
		}

		[Token(Token = "0x600143E")]
		[Address(RVA = "0xEDD400", Offset = "0xEDD400", VA = "0xEDD400")]
		public RocketShooting()
		{
		}
	}
	[Token(Token = "0x20003F1")]
	public class ShieldForceField : MonoBehaviour
	{
		[Token(Token = "0x400186B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float accelerationMultiplier;

		[Token(Token = "0x400186C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool playerInField;

		[Token(Token = "0x6001445")]
		[Address(RVA = "0xEDD97C", Offset = "0xEDD97C", VA = "0xEDD97C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001446")]
		[Address(RVA = "0xEDD984", Offset = "0xEDD984", VA = "0xEDD984")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001447")]
		[Address(RVA = "0xEDDCD0", Offset = "0xEDDCD0", VA = "0xEDDCD0")]
		private void OnCollisionEnter(Collision other)
		{
		}

		[Token(Token = "0x6001448")]
		[Address(RVA = "0xEDDD90", Offset = "0xEDDD90", VA = "0xEDDD90")]
		private void OnCollisionExit(Collision other)
		{
		}

		[Token(Token = "0x6001449")]
		[Address(RVA = "0xEDDE4C", Offset = "0xEDDE4C", VA = "0xEDDE4C")]
		public ShieldForceField()
		{
		}
	}
	[Token(Token = "0x20003F2")]
	public class TurretAiming : MonoBehaviour
	{
		[Token(Token = "0x400186D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Targeting myTargeting;

		[Token(Token = "0x400186E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float aimSpeed;

		[Token(Token = "0x400186F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Header("Constraints are relative to the parent transform")]
		[Range(-180f, 180f)]
		public float yawLowerLimit;

		[Token(Token = "0x4001870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(-180f, 180f)]
		public float yawUpperLimit;

		[Token(Token = "0x4001871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Space]
		[Range(-90f, 0f)]
		public float pitchLowerLimit;

		[Token(Token = "0x4001872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 90f)]
		public float pitchUpperLimit;

		[Token(Token = "0x4001873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 forwardDir;

		[Token(Token = "0x4001874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 rightDir;

		[Token(Token = "0x4001875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 upDir;

		[Token(Token = "0x600144A")]
		[Address(RVA = "0xEDDE5C", Offset = "0xEDDE5C", VA = "0xEDDE5C")]
		public void Start()
		{
		}

		[Token(Token = "0x600144B")]
		[Address(RVA = "0xEDDF0C", Offset = "0xEDDF0C", VA = "0xEDDF0C")]
		public void Update()
		{
		}

		[Token(Token = "0x600144C")]
		[Address(RVA = "0xEDE154", Offset = "0xEDE154", VA = "0xEDE154")]
		private Vector3 RotateTowardsWithConstraints(Vector3 current, Vector3 target, float maxRadiansDelta, float maxMagnitude)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600144D")]
		[Address(RVA = "0xEDE724", Offset = "0xEDE724", VA = "0xEDE724")]
		public TurretAiming()
		{
		}
	}
	[Token(Token = "0x20003F3")]
	public class TurretBossPhase : MonoBehaviour
	{
		[Token(Token = "0x20003F5")]
		[CompilerGenerated]
		private sealed class <HackDroneSpawner>d__44 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400189E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400189F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40018A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TurretBossPhase <>4__this;

			[Token(Token = "0x17000251")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600145C")]
				[Address(RVA = "0xEE04CC", Offset = "0xEE04CC", VA = "0xEE04CC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000252")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600145E")]
				[Address(RVA = "0xEE0514", Offset = "0xEE0514", VA = "0xEE0514", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001459")]
			[Address(RVA = "0xEDFD7C", Offset = "0xEDFD7C", VA = "0xEDFD7C")]
			[DebuggerHidden]
			public <HackDroneSpawner>d__44(int <>1__state)
			{
			}

			[Token(Token = "0x600145A")]
			[Address(RVA = "0xEE0320", Offset = "0xEE0320", VA = "0xEE0320", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600145B")]
			[Address(RVA = "0xEE0324", Offset = "0xEE0324", VA = "0xEE0324", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600145D")]
			[Address(RVA = "0xEE04D4", Offset = "0xEE04D4", VA = "0xEE04D4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject generator;

		[Token(Token = "0x4001877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject shield;

		[Token(Token = "0x4001878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Rate of acceleration to push the player out of the turret's shield")]
		public float accelerationMultiplier;

		[Token(Token = "0x4001879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Distance to push the player away from the turret's shield")]
		public float forceFieldDistance;

		[Token(Token = "0x400187A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject mineShooter;

		[Token(Token = "0x400187B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject rocketLauncher;

		[Token(Token = "0x400187C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject bigLaser;

		[Token(Token = "0x400187D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject hackingDrone;

		[Token(Token = "0x400187E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float droneSpawnTimer;

		[Token(Token = "0x400187F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float lastSpecialAttackTime;

		[Token(Token = "0x4001880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int prevSpecialAttackInd;

		[Token(Token = "0x4001881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Sound prevSpecialVL;

		[Token(Token = "0x4001882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float specialAttackTimer;

		[Token(Token = "0x4001883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Sound introVoiceline;

		[Token(Token = "0x4001884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Sound shieldDownVoiceline;

		[Token(Token = "0x4001885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float damagePlayFreq;

		[Token(Token = "0x4001886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float damagePlayDelay;

		[Token(Token = "0x4001887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Sound laserPhaseVoiceline;

		[Token(Token = "0x4001888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Sound missilePhaseVoiceline;

		[Token(Token = "0x4001889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Sound finalPhaseVoiceline;

		[Token(Token = "0x400188A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Sound[] damagedVoicelines;

		[Token(Token = "0x400188B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Sound[] fanAttackVoicelines;

		[Token(Token = "0x400188C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Sound[] missileSalvoVoicelines;

		[Token(Token = "0x400188D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Sound[] bouncyMineVoicelines;

		[Token(Token = "0x400188E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float lastDamageResponse;

		[Token(Token = "0x400188F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private bool damageSFXQueued;

		[Token(Token = "0x4001890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Queue<Sound> voicelineQueue;

		[Token(Token = "0x4001891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Sound activeVoiceline;

		[Token(Token = "0x4001892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public List<GameObject> genList;

		[Token(Token = "0x4001893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private readonly List<Vector3> position;

		[Token(Token = "0x4001894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private bool genShieldsUp;

		[Token(Token = "0x4001895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE9")]
		public bool scriptedSequence;

		[Token(Token = "0x4001896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public int phaseNum;

		[Token(Token = "0x4001897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private bool queueNextPhase;

		[Token(Token = "0x4001898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private GameObject player;

		[Token(Token = "0x4001899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Health turretHealth;

		[Token(Token = "0x400189A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private float turretMaxHealth;

		[Token(Token = "0x400189B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private int numPhases;

		[Token(Token = "0x600144E")]
		[Address(RVA = "0xEDE740", Offset = "0xEDE740", VA = "0xEDE740")]
		private void Start()
		{
		}

		[Token(Token = "0x600144F")]
		[Address(RVA = "0xEDF0B0", Offset = "0xEDF0B0", VA = "0xEDF0B0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001450")]
		[Address(RVA = "0xEDF7E4", Offset = "0xEDF7E4", VA = "0xEDF7E4")]
		private void VulnerabilityPhase()
		{
		}

		[Token(Token = "0x6001451")]
		[Address(RVA = "0xEDF2D0", Offset = "0xEDF2D0", VA = "0xEDF2D0")]
		private void PhaseTransition()
		{
		}

		[Token(Token = "0x6001452")]
		[Address(RVA = "0xEDFBC0", Offset = "0xEDFBC0", VA = "0xEDFBC0")]
		private void EnterPhase(int pnum)
		{
		}

		[Token(Token = "0x6001453")]
		[Address(RVA = "0xEDF624", Offset = "0xEDF624", VA = "0xEDF624")]
		private void SpecialAttack(int attack, bool useVoiceline)
		{
		}

		[Token(Token = "0x6001454")]
		[Address(RVA = "0xEDFD08", Offset = "0xEDFD08", VA = "0xEDFD08")]
		[IteratorStateMachine(typeof(<HackDroneSpawner>d__44))]
		public IEnumerator HackDroneSpawner()
		{
			return null;
		}

		[Token(Token = "0x6001455")]
		[Address(RVA = "0xEDFDA4", Offset = "0xEDFDA4", VA = "0xEDFDA4")]
		public TurretBossPhase()
		{
		}
	}
	[Token(Token = "0x20003F6")]
	public class TurretBoyShoot : MonoBehaviour
	{
		[Token(Token = "0x40018A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float moveToTargetForce;

		[Token(Token = "0x40018A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float turnToTargetTorque;

		[Token(Token = "0x40018A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Rigidbody myRigidbody;

		[Token(Token = "0x40018A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Targeting myTargeting;

		[Token(Token = "0x600145F")]
		[Address(RVA = "0xEE051C", Offset = "0xEE051C", VA = "0xEE051C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001460")]
		[Address(RVA = "0xEE0744", Offset = "0xEE0744", VA = "0xEE0744")]
		public TurretBoyShoot()
		{
		}
	}
	[Token(Token = "0x20003F7")]
	public class TurretIntroAndDeathEffects : MonoBehaviour
	{
		[Token(Token = "0x20003F8")]
		[CompilerGenerated]
		private sealed class <TurretIntroSequence>d__19 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40018B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40018B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40018B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TurretIntroAndDeathEffects <>4__this;

			[Token(Token = "0x17000253")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600146B")]
				[Address(RVA = "0xEE0F2C", Offset = "0xEE0F2C", VA = "0xEE0F2C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000254")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600146D")]
				[Address(RVA = "0xEE0F74", Offset = "0xEE0F74", VA = "0xEE0F74", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001468")]
			[Address(RVA = "0xEE0844", Offset = "0xEE0844", VA = "0xEE0844")]
			[DebuggerHidden]
			public <TurretIntroSequence>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x6001469")]
			[Address(RVA = "0xEE0BF4", Offset = "0xEE0BF4", VA = "0xEE0BF4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600146A")]
			[Address(RVA = "0xEE0BF8", Offset = "0xEE0BF8", VA = "0xEE0BF8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600146C")]
			[Address(RVA = "0xEE0F34", Offset = "0xEE0F34", VA = "0xEE0F34", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003F9")]
		[CompilerGenerated]
		private sealed class <TurretDeathSequence>d__20 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40018B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40018B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40018BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TurretIntroAndDeathEffects <>4__this;

			[Token(Token = "0x17000255")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001471")]
				[Address(RVA = "0xEE1588", Offset = "0xEE1588", VA = "0xEE1588", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000256")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001473")]
				[Address(RVA = "0xEE15D0", Offset = "0xEE15D0", VA = "0xEE15D0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600146E")]
			[Address(RVA = "0xEE086C", Offset = "0xEE086C", VA = "0xEE086C")]
			[DebuggerHidden]
			public <TurretDeathSequence>d__20(int <>1__state)
			{
			}

			[Token(Token = "0x600146F")]
			[Address(RVA = "0xEE0F7C", Offset = "0xEE0F7C", VA = "0xEE0F7C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001470")]
			[Address(RVA = "0xEE0F80", Offset = "0xEE0F80", VA = "0xEE0F80", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001472")]
			[Address(RVA = "0xEE1590", Offset = "0xEE1590", VA = "0xEE1590", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40018A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject turretModulesExplosionPrefab;

		[Token(Token = "0x40018A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject MineTurret;

		[Token(Token = "0x40018A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject MineTurretFragments;

		[Token(Token = "0x40018A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject GunTurret;

		[Token(Token = "0x40018A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject GunTurretFragments;

		[Token(Token = "0x40018AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject LaserTurret;

		[Token(Token = "0x40018AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject LaserTurretFragments;

		[Token(Token = "0x40018AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject MissileTurret;

		[Token(Token = "0x40018AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject MissileLauncher;

		[Token(Token = "0x40018AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject MissileTurretFragments;

		[Token(Token = "0x40018AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject TurretBoss;

		[Token(Token = "0x40018B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Sound DeathSound;

		[Token(Token = "0x40018B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float explosionDelay;

		[Token(Token = "0x40018B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float topPopForce;

		[Token(Token = "0x40018B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public DeathGears deathGears;

		[Token(Token = "0x40018B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public KillAchievements killAchievements;

		[Token(Token = "0x6001461")]
		[Address(RVA = "0xEE0758", Offset = "0xEE0758", VA = "0xEE0758")]
		private void Start()
		{
		}

		[Token(Token = "0x6001462")]
		[Address(RVA = "0xEDEEE8", Offset = "0xEDEEE8", VA = "0xEDEEE8")]
		public void startIntroSequence()
		{
		}

		[Token(Token = "0x6001463")]
		[Address(RVA = "0xEE0150", Offset = "0xEE0150", VA = "0xEE0150")]
		public void onDeath()
		{
		}

		[Token(Token = "0x6001464")]
		[Address(RVA = "0xEE075C", Offset = "0xEE075C", VA = "0xEE075C")]
		[IteratorStateMachine(typeof(<TurretIntroSequence>d__19))]
		private IEnumerator TurretIntroSequence()
		{
			return null;
		}

		[Token(Token = "0x6001465")]
		[Address(RVA = "0xEE07D0", Offset = "0xEE07D0", VA = "0xEE07D0")]
		[IteratorStateMachine(typeof(<TurretDeathSequence>d__20))]
		private IEnumerator TurretDeathSequence()
		{
			return null;
		}

		[Token(Token = "0x6001466")]
		[Address(RVA = "0xEE0894", Offset = "0xEE0894", VA = "0xEE0894")]
		private void explodeModule(GameObject module, GameObject moduleFragments)
		{
		}

		[Token(Token = "0x6001467")]
		[Address(RVA = "0xEE0BEC", Offset = "0xEE0BEC", VA = "0xEE0BEC")]
		public TurretIntroAndDeathEffects()
		{
		}
	}
	[Token(Token = "0x20003FA")]
	public class TurretLaserBeamRange : MonoBehaviour
	{
		[Token(Token = "0x40018BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Object to enable/disable to control the impact particle effects")]
		public GameObject turretLaserImpactFX;

		[Token(Token = "0x6001474")]
		[Address(RVA = "0xEE15D8", Offset = "0xEE15D8", VA = "0xEE15D8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001475")]
		[Address(RVA = "0xEE15DC", Offset = "0xEE15DC", VA = "0xEE15DC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001476")]
		[Address(RVA = "0xEE1930", Offset = "0xEE1930", VA = "0xEE1930")]
		public TurretLaserBeamRange()
		{
		}
	}
	[Token(Token = "0x20003FB")]
	public class TurretRotation : MonoBehaviour
	{
		[Token(Token = "0x40018BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rotateSpeed;

		[Token(Token = "0x40018BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float lowerLim;

		[Token(Token = "0x40018BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float upperLim;

		[Token(Token = "0x40018BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject followWhileActive;

		[Token(Token = "0x6001477")]
		[Address(RVA = "0xEE1938", Offset = "0xEE1938", VA = "0xEE1938")]
		private void Update()
		{
		}

		[Token(Token = "0x6001478")]
		[Address(RVA = "0xEE1B88", Offset = "0xEE1B88", VA = "0xEE1B88")]
		public TurretRotation()
		{
		}
	}
	[Token(Token = "0x20003FC")]
	public class VariableDistanceShooting : MonoBehaviour
	{
		[Token(Token = "0x40018C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Shooting shootingSource;

		[Token(Token = "0x40018C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject projectile;

		[Token(Token = "0x40018C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Targeting myTargeting;

		[Token(Token = "0x40018C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Animator recoilAnim;

		[Token(Token = "0x6001479")]
		[Address(RVA = "0xEE1BA4", Offset = "0xEE1BA4", VA = "0xEE1BA4")]
		private void Update()
		{
		}

		[Token(Token = "0x600147A")]
		[Address(RVA = "0xEE1D60", Offset = "0xEE1D60", VA = "0xEE1D60")]
		public VariableDistanceShooting()
		{
		}
	}
}
namespace AI.Boss.Spider
{
	[Token(Token = "0x20003FD")]
	public class HovercraftEngine : MonoBehaviour
	{
		[Token(Token = "0x40018C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody rb;

		[Token(Token = "0x40018C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float targetHeight;

		[Token(Token = "0x40018C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float springForce;

		[Token(Token = "0x40018C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float dampingForce;

		[Token(Token = "0x40018C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float lateralDampForceRatio;

		[Token(Token = "0x40018C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float downForce;

		[Token(Token = "0x40018CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool easeoutForces;

		[Token(Token = "0x40018CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool autoconfigTargetHeight;

		[Token(Token = "0x40018CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform forceApplicationPoint;

		[Token(Token = "0x40018CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Space]
		public Vector3 downDir;

		[Token(Token = "0x40018CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float uprightingSpeed;

		[Token(Token = "0x40018CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float uprightingDampRatio;

		[Token(Token = "0x40018D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float raycastLengthMult;

		[Token(Token = "0x40018D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool isGrounded;

		[Token(Token = "0x40018D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 avgNormal;

		[Token(Token = "0x40018D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 avgPoint;

		[Token(Token = "0x40018D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Ray[] whiskers;

		[Token(Token = "0x600147B")]
		[Address(RVA = "0xEE2D68", Offset = "0xEE2D68", VA = "0xEE2D68")]
		private void Start()
		{
		}

		[Token(Token = "0x600147C")]
		[Address(RVA = "0xEE34D8", Offset = "0xEE34D8", VA = "0xEE34D8")]
		private void Update()
		{
		}

		[Token(Token = "0x600147D")]
		[Address(RVA = "0xEE34DC", Offset = "0xEE34DC", VA = "0xEE34DC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600147E")]
		[Address(RVA = "0xEE350C", Offset = "0xEE350C", VA = "0xEE350C")]
		public void EstimateDownDir()
		{
		}

		[Token(Token = "0x600147F")]
		[Address(RVA = "0xEE3E60", Offset = "0xEE3E60", VA = "0xEE3E60")]
		public void ApplyUprightForce()
		{
		}

		[Token(Token = "0x6001480")]
		[Address(RVA = "0xEE399C", Offset = "0xEE399C", VA = "0xEE399C")]
		public void ApplyHoverForces()
		{
		}

		[Token(Token = "0x6001481")]
		[Address(RVA = "0xEE333C", Offset = "0xEE333C", VA = "0xEE333C")]
		[ContextMenu("ConfigureTargetHeight")]
		private void ConfigureTargetHeight()
		{
		}

		[Token(Token = "0x6001482")]
		[Address(RVA = "0xEE43A4", Offset = "0xEE43A4", VA = "0xEE43A4")]
		public HovercraftEngine()
		{
		}
	}
	[Token(Token = "0x20003FE")]
	public class SpiderBossAI : MonoBehaviour
	{
		[Token(Token = "0x20003FF")]
		[CompilerGenerated]
		private sealed class <TryToPlayPositionalVoicelineLoop>d__97 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001934")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001935")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001936")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SpiderBossAI <>4__this;

			[Token(Token = "0x17000257")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014A9")]
				[Address(RVA = "0xEEA188", Offset = "0xEEA188", VA = "0xEEA188", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000258")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014AB")]
				[Address(RVA = "0xEEA1D0", Offset = "0xEEA1D0", VA = "0xEEA1D0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014A6")]
			[Address(RVA = "0xEE7560", Offset = "0xEE7560", VA = "0xEE7560")]
			[DebuggerHidden]
			public <TryToPlayPositionalVoicelineLoop>d__97(int <>1__state)
			{
			}

			[Token(Token = "0x60014A7")]
			[Address(RVA = "0xEE9F18", Offset = "0xEE9F18", VA = "0xEE9F18", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014A8")]
			[Address(RVA = "0xEE9F1C", Offset = "0xEE9F1C", VA = "0xEE9F1C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014AA")]
			[Address(RVA = "0xEEA190", Offset = "0xEEA190", VA = "0xEEA190", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000400")]
		[CompilerGenerated]
		private sealed class <TemporarilyChangeHoverDownforce>d__106 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001937")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001938")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001939")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SpiderBossAI <>4__this;

			[Token(Token = "0x400193A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float multiplier;

			[Token(Token = "0x400193B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float duration;

			[Token(Token = "0x17000259")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014AF")]
				[Address(RVA = "0xEEA314", Offset = "0xEEA314", VA = "0xEEA314", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700025A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014B1")]
				[Address(RVA = "0xEEA35C", Offset = "0xEEA35C", VA = "0xEEA35C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014AC")]
			[Address(RVA = "0xEE7E1C", Offset = "0xEE7E1C", VA = "0xEE7E1C")]
			[DebuggerHidden]
			public <TemporarilyChangeHoverDownforce>d__106(int <>1__state)
			{
			}

			[Token(Token = "0x60014AD")]
			[Address(RVA = "0xEEA1D8", Offset = "0xEEA1D8", VA = "0xEEA1D8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014AE")]
			[Address(RVA = "0xEEA1DC", Offset = "0xEEA1DC", VA = "0xEEA1DC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014B0")]
			[Address(RVA = "0xEEA31C", Offset = "0xEEA31C", VA = "0xEEA31C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000401")]
		[CompilerGenerated]
		private sealed class <TemporarilyChangeHoverUprightingSpeed>d__107 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400193C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400193D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400193E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SpiderBossAI <>4__this;

			[Token(Token = "0x400193F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float multiplier;

			[Token(Token = "0x4001940")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float duration;

			[Token(Token = "0x1700025B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014B5")]
				[Address(RVA = "0xEEA4A0", Offset = "0xEEA4A0", VA = "0xEEA4A0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700025C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014B7")]
				[Address(RVA = "0xEEA4E8", Offset = "0xEEA4E8", VA = "0xEEA4E8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014B2")]
			[Address(RVA = "0xEE7E44", Offset = "0xEE7E44", VA = "0xEE7E44")]
			[DebuggerHidden]
			public <TemporarilyChangeHoverUprightingSpeed>d__107(int <>1__state)
			{
			}

			[Token(Token = "0x60014B3")]
			[Address(RVA = "0xEEA364", Offset = "0xEEA364", VA = "0xEEA364", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014B4")]
			[Address(RVA = "0xEEA368", Offset = "0xEEA368", VA = "0xEEA368", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014B6")]
			[Address(RVA = "0xEEA4A8", Offset = "0xEEA4A8", VA = "0xEEA4A8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000402")]
		[CompilerGenerated]
		private sealed class <TemporaryInvincibility>d__109 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001941")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001942")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001943")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SpiderBossAI <>4__this;

			[Token(Token = "0x4001944")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool triggerInvisibility;

			[Token(Token = "0x4001945")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
			public bool teleport;

			[Token(Token = "0x4001946")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float duration;

			[Token(Token = "0x4001947")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float[] <bodyHealthDamageMultipliers>5__2;

			[Token(Token = "0x4001948")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float[] <coreHealthDamageMultipliers>5__3;

			[Token(Token = "0x1700025D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014BB")]
				[Address(RVA = "0xEEA9A0", Offset = "0xEEA9A0", VA = "0xEEA9A0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700025E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014BD")]
				[Address(RVA = "0xEEA9E8", Offset = "0xEEA9E8", VA = "0xEEA9E8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014B8")]
			[Address(RVA = "0xEE82C0", Offset = "0xEE82C0", VA = "0xEE82C0")]
			[DebuggerHidden]
			public <TemporaryInvincibility>d__109(int <>1__state)
			{
			}

			[Token(Token = "0x60014B9")]
			[Address(RVA = "0xEEA4F0", Offset = "0xEEA4F0", VA = "0xEEA4F0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014BA")]
			[Address(RVA = "0xEEA4F4", Offset = "0xEEA4F4", VA = "0xEEA4F4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014BC")]
			[Address(RVA = "0xEEA9A8", Offset = "0xEEA9A8", VA = "0xEEA9A8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000403")]
		[CompilerGenerated]
		private sealed class <DramaticDestroy>d__113 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001949")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400194A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400194B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SpiderBossAI <>4__this;

			[Token(Token = "0x400194C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float duration;

			[Token(Token = "0x400194D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float explosionRepeatDelay;

			[Token(Token = "0x400194E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <startTime>5__2;

			[Token(Token = "0x1700025F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014C1")]
				[Address(RVA = "0xEEB1C4", Offset = "0xEEB1C4", VA = "0xEEB1C4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000260")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014C3")]
				[Address(RVA = "0xEEB20C", Offset = "0xEEB20C", VA = "0xEEB20C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014BE")]
			[Address(RVA = "0xEE841C", Offset = "0xEE841C", VA = "0xEE841C")]
			[DebuggerHidden]
			public <DramaticDestroy>d__113(int <>1__state)
			{
			}

			[Token(Token = "0x60014BF")]
			[Address(RVA = "0xEEA9F0", Offset = "0xEEA9F0", VA = "0xEEA9F0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014C0")]
			[Address(RVA = "0xEEA9F4", Offset = "0xEEA9F4", VA = "0xEEA9F4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014C2")]
			[Address(RVA = "0xEEB1CC", Offset = "0xEEB1CC", VA = "0xEEB1CC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000404")]
		[CompilerGenerated]
		private sealed class <EyeLaserSweep>d__120 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400194F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001950")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001951")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 initialTargetPosition;

			[Token(Token = "0x4001952")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public SpiderBossAI <>4__this;

			[Token(Token = "0x4001953")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float duration;

			[Token(Token = "0x4001954")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float sweepDegrees;

			[Token(Token = "0x4001955")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Vector3 planeNormal;

			[Token(Token = "0x4001956")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float <startTime>5__2;

			[Token(Token = "0x4001957")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private Vector3 <targetVector>5__3;

			[Token(Token = "0x17000261")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014C7")]
				[Address(RVA = "0xEEB7A8", Offset = "0xEEB7A8", VA = "0xEEB7A8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000262")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014C9")]
				[Address(RVA = "0xEEB7F0", Offset = "0xEEB7F0", VA = "0xEEB7F0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014C4")]
			[Address(RVA = "0xEE92FC", Offset = "0xEE92FC", VA = "0xEE92FC")]
			[DebuggerHidden]
			public <EyeLaserSweep>d__120(int <>1__state)
			{
			}

			[Token(Token = "0x60014C5")]
			[Address(RVA = "0xEEB214", Offset = "0xEEB214", VA = "0xEEB214", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014C6")]
			[Address(RVA = "0xEEB218", Offset = "0xEEB218", VA = "0xEEB218", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014C8")]
			[Address(RVA = "0xEEB7B0", Offset = "0xEEB7B0", VA = "0xEEB7B0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000405")]
		[CompilerGenerated]
		private sealed class <LaunchObjects>d__121 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001958")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001959")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400195A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SpiderBossAI <>4__this;

			[Token(Token = "0x400195B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public GameObject prefab;

			[Token(Token = "0x400195C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float launchSpeedMult;

			[Token(Token = "0x400195D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float staggerDelay;

			[Token(Token = "0x400195E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public int count;

			[Token(Token = "0x400195F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int <initialIndex>5__2;

			[Token(Token = "0x4001960")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <i>5__3;

			[Token(Token = "0x17000263")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014CD")]
				[Address(RVA = "0xEEB984", Offset = "0xEEB984", VA = "0xEEB984", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000264")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014CF")]
				[Address(RVA = "0xEEB9CC", Offset = "0xEEB9CC", VA = "0xEEB9CC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014CA")]
			[Address(RVA = "0xEE9324", Offset = "0xEE9324", VA = "0xEE9324")]
			[DebuggerHidden]
			public <LaunchObjects>d__121(int <>1__state)
			{
			}

			[Token(Token = "0x60014CB")]
			[Address(RVA = "0xEEB7F8", Offset = "0xEEB7F8", VA = "0xEEB7F8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014CC")]
			[Address(RVA = "0xEEB7FC", Offset = "0xEEB7FC", VA = "0xEEB7FC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014CE")]
			[Address(RVA = "0xEEB98C", Offset = "0xEEB98C", VA = "0xEEB98C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000407")]
		[CompilerGenerated]
		private sealed class <MaintainAccelerationDuringLaunch>d__126 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001963")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001964")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001965")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SpiderBossAI <>4__this;

			[Token(Token = "0x4001966")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 direction;

			[Token(Token = "0x4001967")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float targetVel;

			[Token(Token = "0x4001968")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float duration;

			[Token(Token = "0x4001969")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <startTime>5__2;

			[Token(Token = "0x17000265")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014D6")]
				[Address(RVA = "0xEEC17C", Offset = "0xEEC17C", VA = "0xEEC17C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000266")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014D8")]
				[Address(RVA = "0xEEC1C4", Offset = "0xEEC1C4", VA = "0xEEC1C4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014D3")]
			[Address(RVA = "0xEE9C08", Offset = "0xEE9C08", VA = "0xEE9C08")]
			[DebuggerHidden]
			public <MaintainAccelerationDuringLaunch>d__126(int <>1__state)
			{
			}

			[Token(Token = "0x60014D4")]
			[Address(RVA = "0xEEBBD0", Offset = "0xEEBBD0", VA = "0xEEBBD0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014D5")]
			[Address(RVA = "0xEEBBD4", Offset = "0xEEBBD4", VA = "0xEEBBD4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014D7")]
			[Address(RVA = "0xEEC184", Offset = "0xEEC184", VA = "0xEEC184", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000408")]
		[CompilerGenerated]
		private sealed class <ChangeInvisibilityCoroutine>d__128 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400196A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400196B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400196C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool becomeInvisible;

			[Token(Token = "0x400196D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public SpiderBossAI <>4__this;

			[Token(Token = "0x400196E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float duration;

			[Token(Token = "0x400196F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <rateOfChange>5__2;

			[Token(Token = "0x4001970")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <currentValue>5__3;

			[Token(Token = "0x4001971")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <targetValue>5__4;

			[Token(Token = "0x17000267")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014DC")]
				[Address(RVA = "0xEEC514", Offset = "0xEEC514", VA = "0xEEC514", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000268")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014DE")]
				[Address(RVA = "0xEEC55C", Offset = "0xEEC55C", VA = "0xEEC55C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014D9")]
			[Address(RVA = "0xEE9DE0", Offset = "0xEE9DE0", VA = "0xEE9DE0")]
			[DebuggerHidden]
			public <ChangeInvisibilityCoroutine>d__128(int <>1__state)
			{
			}

			[Token(Token = "0x60014DA")]
			[Address(RVA = "0xEEC1CC", Offset = "0xEEC1CC", VA = "0xEEC1CC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014DB")]
			[Address(RVA = "0xEEC1D0", Offset = "0xEEC1D0", VA = "0xEEC1D0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014DD")]
			[Address(RVA = "0xEEC51C", Offset = "0xEEC51C", VA = "0xEEC51C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40018D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody rb;

		[Token(Token = "0x40018D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float moveSpeed;

		[Token(Token = "0x40018D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float moveTopSpeed;

		[Token(Token = "0x40018D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float rotateSpeed;

		[Token(Token = "0x40018D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float jumpSpeed;

		[Token(Token = "0x40018DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float gravityMult;

		[Token(Token = "0x40018DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SpiderLegIK[] allLegs;

		[Token(Token = "0x40018DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public HovercraftEngine[] allHovers;

		[Token(Token = "0x40018DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Health[] bodyHealth;

		[Token(Token = "0x40018DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Health[] coreHealth;

		[Token(Token = "0x40018DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float uprightingSpeed;

		[Token(Token = "0x40018E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float uprightingDampRatio;

		[Token(Token = "0x40018E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 uprightVector;

		[Token(Token = "0x40018E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int numLegsBeforeVulnerable;

		[Token(Token = "0x40018E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Temporary Invincibility")]
		public float tempInvincibilityTimeOnLostLeg;

		[Token(Token = "0x40018E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public MeshRenderer[] spiderMats;

		[Token(Token = "0x40018E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float invisibilityFadeTime;

		[Token(Token = "0x40018E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Coroutine invincibilityCouroutine;

		[Token(Token = "0x40018E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Coroutine invisibilityCoroutine;

		[Token(Token = "0x40018E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Header("Wall Climbing")]
		public float raycastLengthMult;

		[Token(Token = "0x40018E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float flippedRaycastLength;

		[Token(Token = "0x40018EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float flipRecoveryUprightMult;

		[Token(Token = "0x40018EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public GameObject frontBodyJoint;

		[Token(Token = "0x40018EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public GameObject backBodyJoint;

		[Token(Token = "0x40018ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float maxAbBendAngle;

		[Token(Token = "0x40018EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float abBendSpeed;

		[Token(Token = "0x40018EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public float abBendRayLength;

		[Token(Token = "0x40018F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Header("Weapons")]
		public float minLaunchSpeed;

		[Token(Token = "0x40018F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float maxLaunchSpeed;

		[Token(Token = "0x40018F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public GameObject hackerMinonPrefab;

		[Token(Token = "0x40018F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public GameObject standardMinonPrefab;

		[Token(Token = "0x40018F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public GameObject tripwireBombPrefab;

		[Token(Token = "0x40018F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Transform canisterEmmitPosition;

		[Token(Token = "0x40018F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Transform[] mainCannonSpawnPositions;

		[Token(Token = "0x40018F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Space]
		public GameObject eyeLaser;

		[Token(Token = "0x40018F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public GameObject eyeLaserImpactFX;

		[Token(Token = "0x40018F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public float sweepDuration;

		[Token(Token = "0x40018FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public float sweepArc;

		[Token(Token = "0x40018FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Space]
		public GameObject hackingBeam;

		[Token(Token = "0x40018FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[Header("AI")]
		public Targeting myTargeting;

		[Token(Token = "0x40018FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public GameObject headJoint;

		[Token(Token = "0x40018FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		private float maxForwardTargetingArc;

		[Token(Token = "0x40018FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		public float nearEngageDistance;

		[Token(Token = "0x4001900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public float farEngageDistance;

		[Token(Token = "0x4001901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		[SerializeField]
		private float baseAttackCooldown;

		[Token(Token = "0x4001902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		private float baseManeuverCooldown;

		[Token(Token = "0x4001903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		[SerializeField]
		private float aiAttackCooldownTimer;

		[Token(Token = "0x4001904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[SerializeField]
		private float aiManeuverCooldownTimer;

		[Token(Token = "0x4001905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		public float aiAttackCooldownTickrateMult;

		[Token(Token = "0x4001906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public float aiManeuverCooldownTickrateMult;

		[Token(Token = "0x4001907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[Header("Death")]
		public GameObject spiderBossGroup;

		[Token(Token = "0x4001908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public bool leaveHeadOnDeath;

		[Token(Token = "0x4001909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public GameObject explosionPrefab;

		[Token(Token = "0x400190A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public Vector3 headEjectForce;

		[Token(Token = "0x400190B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		public float headEjectTorqueMagnitude;

		[Token(Token = "0x400190C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public DeathGears deathGears;

		[Token(Token = "0x400190D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public KillAchievements killAchievements;

		[Token(Token = "0x400190E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		[Header("Debug")]
		[SerializeField]
		private bool useAIAttacks;

		[Token(Token = "0x400190F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x189")]
		[SerializeField]
		private bool useAIManeuvers;

		[Token(Token = "0x4001910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18A")]
		[SerializeField]
		private bool useAIControls;

		[Token(Token = "0x4001911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18B")]
		[SerializeField]
		private bool useKeyboard;

		[Token(Token = "0x4001912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private Ray[] AbBendWhiskers;

		[Token(Token = "0x4001913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private Vector3 anticipatedTargetPosition;

		[Token(Token = "0x4001914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		private Vector3 avgNormal;

		[Token(Token = "0x4001915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private Vector3 avgPoint;

		[Token(Token = "0x4001916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		private bool hasLegs;

		[Token(Token = "0x4001917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BD")]
		private bool isGrounded;

		[Token(Token = "0x4001918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private Ray[] ManueverWhiskers;

		[Token(Token = "0x4001919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private float normalizedHealth;

		[Token(Token = "0x400191A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		private int numOfLegs;

		[Token(Token = "0x400191B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private bool prevIsGrounded;

		[Token(Token = "0x400191C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private Rigidbody targetedPlayerRB;

		[Token(Token = "0x400191D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		[Header("Sounds")]
		public Sound soundVoiceInstance;

		[Token(Token = "0x400191E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public Sound soundEffectsInstance;

		[Token(Token = "0x400191F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		public SoundSet introVoiceSounds;

		[Token(Token = "0x4001920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		public SoundSet smallDamageSounds;

		[Token(Token = "0x4001921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public SoundSet hackingQuipSounds;

		[Token(Token = "0x4001922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		public SoundSet tripwiresLaunchedSounds;

		[Token(Token = "0x4001923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		public SoundSet laserAttackSounds;

		[Token(Token = "0x4001924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		public SoundSet lostSingleLegSounds;

		[Token(Token = "0x4001925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		public SoundSet lostMostLegsSounds;

		[Token(Token = "0x4001926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		public SoundSet deathScreamSounds;

		[Token(Token = "0x4001927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		public SoundSet deathQuipSounds;

		[Token(Token = "0x4001928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		public SoundSet jumpToWallSounds;

		[Token(Token = "0x4001929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		public SoundSet jumpToPlayerSounds;

		[Token(Token = "0x400192A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		public SoundSet playerCloseSounds;

		[Token(Token = "0x400192B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		public SoundSet playerDistantSounds;

		[Token(Token = "0x400192C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		public SoundSet playerAboveSounds;

		[Token(Token = "0x400192D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		public SoundSet playerBelowSounds;

		[Token(Token = "0x400192E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		public SoundSet invisibilityStartSounds;

		[Token(Token = "0x400192F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		public SoundSet invisibilityEndSounds;

		[Token(Token = "0x4001930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		public float timeBetweenPositionalVoicelines;

		[Token(Token = "0x4001931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		[Space]
		public SoundSet teleportDisappearSoundSource;

		[Token(Token = "0x4001932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		public SoundSet teleportAppearSoundSource;

		[Token(Token = "0x4001933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		private int numLegsForLostMostLegsSound;

		[Token(Token = "0x6001483")]
		[Address(RVA = "0xEE4430", Offset = "0xEE4430", VA = "0xEE4430")]
		private void Start()
		{
		}

		[Token(Token = "0x6001484")]
		[Address(RVA = "0xEE497C", Offset = "0xEE497C", VA = "0xEE497C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001485")]
		[Address(RVA = "0xEE4908", Offset = "0xEE4908", VA = "0xEE4908")]
		[IteratorStateMachine(typeof(<TryToPlayPositionalVoicelineLoop>d__97))]
		private IEnumerator TryToPlayPositionalVoicelineLoop()
		{
			return null;
		}

		[Token(Token = "0x6001486")]
		[Address(RVA = "0xEE69D8", Offset = "0xEE69D8", VA = "0xEE69D8")]
		public void RecoverFromFlippedPosture()
		{
		}

		[Token(Token = "0x6001487")]
		[Address(RVA = "0xEE6020", Offset = "0xEE6020", VA = "0xEE6020")]
		public void ApplyKeyboardControls()
		{
		}

		[Token(Token = "0x6001488")]
		[Address(RVA = "0xEE7A60", Offset = "0xEE7A60", VA = "0xEE7A60")]
		public void ApplyUprightForce()
		{
		}

		[Token(Token = "0x6001489")]
		[Address(RVA = "0xEE7A70", Offset = "0xEE7A70", VA = "0xEE7A70")]
		public void ApplyUprightForce(Vector3 upVec, float deadzoneShift)
		{
		}

		[Token(Token = "0x600148A")]
		[Address(RVA = "0xEE6698", Offset = "0xEE6698", VA = "0xEE6698")]
		public void OrientToLandUpright()
		{
		}

		[Token(Token = "0x600148B")]
		[Address(RVA = "0xEE6D8C", Offset = "0xEE6D8C", VA = "0xEE6D8C")]
		public void BendAbdomen()
		{
		}

		[Token(Token = "0x600148C")]
		[Address(RVA = "0xEE46B8", Offset = "0xEE46B8", VA = "0xEE46B8")]
		private void IgnoreSelfCollision()
		{
		}

		[Token(Token = "0x600148D")]
		[Address(RVA = "0xEE7D48", Offset = "0xEE7D48", VA = "0xEE7D48")]
		public void SetHoverEnabled(bool state)
		{
		}

		[Token(Token = "0x600148E")]
		[Address(RVA = "0xEE5680", Offset = "0xEE5680", VA = "0xEE5680")]
		[IteratorStateMachine(typeof(<TemporarilyChangeHoverDownforce>d__106))]
		public IEnumerator TemporarilyChangeHoverDownforce(float multiplier, float duration)
		{
			return null;
		}

		[Token(Token = "0x600148F")]
		[Address(RVA = "0xEE5708", Offset = "0xEE5708", VA = "0xEE5708")]
		[IteratorStateMachine(typeof(<TemporarilyChangeHoverUprightingSpeed>d__107))]
		public IEnumerator TemporarilyChangeHoverUprightingSpeed(float multiplier, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001490")]
		[Address(RVA = "0xEE7E6C", Offset = "0xEE7E6C", VA = "0xEE7E6C")]
		public void OnLegDestroyed()
		{
		}

		[Token(Token = "0x6001491")]
		[Address(RVA = "0xEE821C", Offset = "0xEE821C", VA = "0xEE821C")]
		[IteratorStateMachine(typeof(<TemporaryInvincibility>d__109))]
		private IEnumerator TemporaryInvincibility(float duration, bool triggerInvisibility = false, bool teleport = true)
		{
			return null;
		}

		[Token(Token = "0x6001492")]
		[Address(RVA = "0xEE82E8", Offset = "0xEE82E8", VA = "0xEE82E8")]
		public void OnDamaged(float amount)
		{
		}

		[Token(Token = "0x6001493")]
		[Address(RVA = "0xEE4818", Offset = "0xEE4818", VA = "0xEE4818")]
		public void UpdateNormalizedHealth()
		{
		}

		[Token(Token = "0x6001494")]
		[Address(RVA = "0xEE8368", Offset = "0xEE8368", VA = "0xEE8368")]
		public void KillSpider()
		{
		}

		[Token(Token = "0x6001495")]
		[Address(RVA = "0xEE8394", Offset = "0xEE8394", VA = "0xEE8394")]
		[IteratorStateMachine(typeof(<DramaticDestroy>d__113))]
		private IEnumerator DramaticDestroy(float explosionRepeatDelay, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001496")]
		[Address(RVA = "0xEE5790", Offset = "0xEE5790", VA = "0xEE5790")]
		public void ApplyAIControls()
		{
		}

		[Token(Token = "0x6001497")]
		[Address(RVA = "0xEE5238", Offset = "0xEE5238", VA = "0xEE5238")]
		public void MaintainAiCooldowns()
		{
		}

		[Token(Token = "0x6001498")]
		[Address(RVA = "0xEE8444", Offset = "0xEE8444", VA = "0xEE8444")]
		public Vector3 TryToClimbToPursue()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001499")]
		[Address(RVA = "0xEE7634", Offset = "0xEE7634", VA = "0xEE7634")]
		public bool AttemptRandomAttack()
		{
			return default(bool);
		}

		[Token(Token = "0x600149A")]
		[Address(RVA = "0xEE77B0", Offset = "0xEE77B0", VA = "0xEE77B0")]
		public bool AttemptRandomManeuver()
		{
			return default(bool);
		}

		[Token(Token = "0x600149B")]
		[Address(RVA = "0xEE8B3C", Offset = "0xEE8B3C", VA = "0xEE8B3C")]
		private void PerformEyeSweep(float duration, float arc)
		{
		}

		[Token(Token = "0x600149C")]
		[Address(RVA = "0xEE9234", Offset = "0xEE9234", VA = "0xEE9234")]
		[IteratorStateMachine(typeof(<EyeLaserSweep>d__120))]
		private IEnumerator EyeLaserSweep(Vector3 planeNormal, Vector3 initialTargetPosition, float duration, float sweepDegrees)
		{
			return null;
		}

		[Token(Token = "0x600149D")]
		[Address(RVA = "0xEE8A90", Offset = "0xEE8A90", VA = "0xEE8A90")]
		[IteratorStateMachine(typeof(<LaunchObjects>d__121))]
		private IEnumerator LaunchObjects(GameObject prefab, int count, float staggerDelay, float launchSpeedMult)
		{
			return null;
		}

		[Token(Token = "0x600149E")]
		[Address(RVA = "0xEE934C", Offset = "0xEE934C", VA = "0xEE934C")]
		private Rigidbody SpawnObject(GameObject prefab, Transform spawnTransform)
		{
			return null;
		}

		[Token(Token = "0x600149F")]
		[Address(RVA = "0xEE8CFC", Offset = "0xEE8CFC", VA = "0xEE8CFC")]
		private bool JumpToNearbyWall()
		{
			return default(bool);
		}

		[Token(Token = "0x60014A0")]
		[Address(RVA = "0xEE7A1C", Offset = "0xEE7A1C", VA = "0xEE7A1C")]
		private bool TeleportToRandomLocationAroundPlayer()
		{
			return default(bool);
		}

		[Token(Token = "0x60014A1")]
		[Address(RVA = "0xEE9510", Offset = "0xEE9510", VA = "0xEE9510")]
		private bool TeleportToRandomLocationAroundPosition(Vector3 sourcePosition)
		{
			return default(bool);
		}

		[Token(Token = "0x60014A2")]
		[Address(RVA = "0xEE7588", Offset = "0xEE7588", VA = "0xEE7588")]
		[IteratorStateMachine(typeof(<MaintainAccelerationDuringLaunch>d__126))]
		private IEnumerator MaintainAccelerationDuringLaunch(Vector3 direction, float targetVel, float duration)
		{
			return null;
		}

		[Token(Token = "0x60014A3")]
		[Address(RVA = "0xEE9C30", Offset = "0xEE9C30", VA = "0xEE9C30")]
		private void ChangeInvisibility(float duration, bool becomeInvisible)
		{
		}

		[Token(Token = "0x60014A4")]
		[Address(RVA = "0xEE9D48", Offset = "0xEE9D48", VA = "0xEE9D48")]
		[IteratorStateMachine(typeof(<ChangeInvisibilityCoroutine>d__128))]
		private IEnumerator ChangeInvisibilityCoroutine(float duration, bool becomeInvisible)
		{
			return null;
		}

		[Token(Token = "0x60014A5")]
		[Address(RVA = "0xEE9E08", Offset = "0xEE9E08", VA = "0xEE9E08")]
		public SpiderBossAI()
		{
		}
	}
	[Token(Token = "0x2000409")]
	public class TripwireAI : MonoBehaviour
	{
		[Token(Token = "0x60014DF")]
		[Address(RVA = "0xEEC564", Offset = "0xEEC564", VA = "0xEEC564")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60014E0")]
		[Address(RVA = "0xEEC634", Offset = "0xEEC634", VA = "0xEEC634")]
		public TripwireAI()
		{
		}
	}
	[Token(Token = "0x200040A")]
	public class TripwireBombAI : MonoBehaviour
	{
		[Token(Token = "0x200040B")]
		[CompilerGenerated]
		private sealed class <StartFuse>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400197B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400197C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400197D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TripwireBombAI <>4__this;

			[Token(Token = "0x17000269")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014E9")]
				[Address(RVA = "0xEECDC0", Offset = "0xEECDC0", VA = "0xEECDC0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700026A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014EB")]
				[Address(RVA = "0xEECE08", Offset = "0xEECE08", VA = "0xEECE08", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014E6")]
			[Address(RVA = "0xEECCA8", Offset = "0xEECCA8", VA = "0xEECCA8")]
			[DebuggerHidden]
			public <StartFuse>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x60014E7")]
			[Address(RVA = "0xEECD00", Offset = "0xEECD00", VA = "0xEECD00", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014E8")]
			[Address(RVA = "0xEECD04", Offset = "0xEECD04", VA = "0xEECD04", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014EA")]
			[Address(RVA = "0xEECDC8", Offset = "0xEECDC8", VA = "0xEECDC8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float bombFuseLength;

		[Token(Token = "0x4001973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool explodeOnContact;

		[Token(Token = "0x4001974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Explosion Properties")]
		public float explosionSize;

		[Token(Token = "0x4001975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int numTethers;

		[Token(Token = "0x4001976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maxTripwireLength;

		[Token(Token = "0x4001977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float minTripwireLength;

		[Token(Token = "0x4001978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int numOfAttemptsPerTether;

		[Token(Token = "0x4001979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject tripwirePrefab;

		[Token(Token = "0x400197A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject explosionPrefab;

		[Token(Token = "0x60014E1")]
		[Address(RVA = "0xEEC63C", Offset = "0xEEC63C", VA = "0xEEC63C")]
		private void Start()
		{
		}

		[Token(Token = "0x60014E2")]
		[Address(RVA = "0xEECC98", Offset = "0xEECC98", VA = "0xEECC98")]
		public void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60014E3")]
		[Address(RVA = "0xEEC678", Offset = "0xEEC678", VA = "0xEEC678")]
		[IteratorStateMachine(typeof(<StartFuse>d__11))]
		private IEnumerator StartFuse()
		{
			return null;
		}

		[Token(Token = "0x60014E4")]
		[Address(RVA = "0xEEC6EC", Offset = "0xEEC6EC", VA = "0xEEC6EC")]
		[ContextMenu("DeployTripwires")]
		public void DeployTripwires()
		{
		}

		[Token(Token = "0x60014E5")]
		[Address(RVA = "0xEECCD0", Offset = "0xEECCD0", VA = "0xEECCD0")]
		public TripwireBombAI()
		{
		}
	}
}
