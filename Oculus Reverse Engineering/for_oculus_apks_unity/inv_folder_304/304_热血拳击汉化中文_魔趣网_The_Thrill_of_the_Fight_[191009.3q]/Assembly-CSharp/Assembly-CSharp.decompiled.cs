using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Xml;
using Il2CppDummyDll;
using Oculus.Platform;
using Oculus.Platform.Models;
using Poly2Tri;
using ProgressBar;
using ProgressBar.Utils;
using RogoDigital.Lipsync;
using RootMotion.Dynamics;
using RootMotion.FinalIK;
using SynthesisvrArcade;
using TMPro;
using UltimateFracturing;
using UnityEngine;
using UnityEngine.Audio;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.UI;

[assembly: AssemblyVersion("3.7.1.6")]
[Token(Token = "0x2000002")]
public class CopyAvatarPositions : MonoBehaviour
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Animator target;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Animator self;

	[Token(Token = "0x6000001")]
	[Address(RVA = "0x4FCC3C", Offset = "0x4FCC3C", VA = "0x4FCC3C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0x4FCCA4", Offset = "0x4FCCA4", VA = "0x4FCCA4")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000003")]
	[Address(RVA = "0x4FCDA0", Offset = "0x4FCDA0", VA = "0x4FCDA0")]
	private void CopyBonePosition(HumanBodyBones bone)
	{
	}

	[Token(Token = "0x6000004")]
	[Address(RVA = "0x4FD088", Offset = "0x4FD088", VA = "0x4FD088")]
	public CopyAvatarPositions()
	{
	}
}
[Token(Token = "0x2000003")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x240A18", Offset = "0x240A18")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x240A18", Offset = "0x240A18")]
public class PhotoshootController : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000255")]
	public class PhotoshootPose
	{
		[Token(Token = "0x4000D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector3 lookAtPosition;

		[Token(Token = "0x4000D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector3 leftHandPosition;

		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 leftHandRotation;

		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 leftShoulderPosition;

		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 leftArmBendGoal;

		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 rightHandPosition;

		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3 rightHandRotation;

		[Token(Token = "0x4000D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Vector3 rightShoulderPosition;

		[Token(Token = "0x4000D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Vector3 rightArmBendGoal;

		[Token(Token = "0x4000D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Vector3 bodyPosition;

		[Token(Token = "0x4000D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Vector3 leftFootPosition;

		[Token(Token = "0x4000D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public Vector3 leftFootRotation;

		[Token(Token = "0x4000D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Vector3 leftThighPosition;

		[Token(Token = "0x4000D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public Vector3 leftLegBendGoal;

		[Token(Token = "0x4000D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Vector3 rightFootPosition;

		[Token(Token = "0x4000D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public Vector3 rightFootRotation;

		[Token(Token = "0x4000D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Vector3 rightThighPosition;

		[Token(Token = "0x4000DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public Vector3 rightLegBendGoal;

		[Token(Token = "0x600139B")]
		[Address(RVA = "0x5BFCF0", Offset = "0x5BFCF0", VA = "0x5BFCF0")]
		public PhotoshootPose()
		{
		}
	}

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private FullBodyBipedIK _ik;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private LookAtIK _lik;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Transform _lookAtTarget;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform _leftHandTarget;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Transform _leftShoulderTarget;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform _leftElbowTarget;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Transform _rightHandTarget;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform _rightShoulderTarget;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Transform _rightElbowTarget;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform _bodyTarget;

	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Transform _leftFootTarget;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform _leftThighTarget;

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Transform _leftKneeTarget;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform _rightFootTarget;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Transform _rightThighTarget;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Transform _rightKneeTarget;

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool weGotPose;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int previousIndex;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public int poseIndex;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private PhotoshootPose currentPose;

	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public PhotoshootPose[] poses;

	[Token(Token = "0x17000001")]
	private FullBodyBipedIK ik
	{
		[Token(Token = "0x6000005")]
		[Address(RVA = "0x5BC56C", Offset = "0x5BC56C", VA = "0x5BC56C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000002")]
	private LookAtIK lik
	{
		[Token(Token = "0x6000006")]
		[Address(RVA = "0x5BC620", Offset = "0x5BC620", VA = "0x5BC620")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000003")]
	private Transform lookAtTarget
	{
		[Token(Token = "0x6000007")]
		[Address(RVA = "0x5BC6D4", Offset = "0x5BC6D4", VA = "0x5BC6D4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000004")]
	private Transform leftHandTarget
	{
		[Token(Token = "0x6000008")]
		[Address(RVA = "0x5BC814", Offset = "0x5BC814", VA = "0x5BC814")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000005")]
	private Transform leftShoulderTarget
	{
		[Token(Token = "0x6000009")]
		[Address(RVA = "0x5BC974", Offset = "0x5BC974", VA = "0x5BC974")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000006")]
	private Transform leftElbowTarget
	{
		[Token(Token = "0x600000A")]
		[Address(RVA = "0x5BCAD4", Offset = "0x5BCAD4", VA = "0x5BCAD4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000007")]
	private Transform rightHandTarget
	{
		[Token(Token = "0x600000B")]
		[Address(RVA = "0x5BCC48", Offset = "0x5BCC48", VA = "0x5BCC48")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000008")]
	private Transform rightShoulderTarget
	{
		[Token(Token = "0x600000C")]
		[Address(RVA = "0x5BCDA8", Offset = "0x5BCDA8", VA = "0x5BCDA8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000009")]
	private Transform rightElbowTarget
	{
		[Token(Token = "0x600000D")]
		[Address(RVA = "0x5BCF08", Offset = "0x5BCF08", VA = "0x5BCF08")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000A")]
	private Transform bodyTarget
	{
		[Token(Token = "0x600000E")]
		[Address(RVA = "0x5BD07C", Offset = "0x5BD07C", VA = "0x5BD07C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000B")]
	private Transform leftFootTarget
	{
		[Token(Token = "0x600000F")]
		[Address(RVA = "0x5BD1DC", Offset = "0x5BD1DC", VA = "0x5BD1DC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000C")]
	private Transform leftThighTarget
	{
		[Token(Token = "0x6000010")]
		[Address(RVA = "0x5BD33C", Offset = "0x5BD33C", VA = "0x5BD33C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000D")]
	private Transform leftKneeTarget
	{
		[Token(Token = "0x6000011")]
		[Address(RVA = "0x5BD49C", Offset = "0x5BD49C", VA = "0x5BD49C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000E")]
	private Transform rightFootTarget
	{
		[Token(Token = "0x6000012")]
		[Address(RVA = "0x5BD610", Offset = "0x5BD610", VA = "0x5BD610")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000F")]
	private Transform rightThighTarget
	{
		[Token(Token = "0x6000013")]
		[Address(RVA = "0x5BD770", Offset = "0x5BD770", VA = "0x5BD770")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000010")]
	private Transform rightKneeTarget
	{
		[Token(Token = "0x6000014")]
		[Address(RVA = "0x5BD8D0", Offset = "0x5BD8D0", VA = "0x5BD8D0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000015")]
	[Address(RVA = "0x5BDA44", Offset = "0x5BDA44", VA = "0x5BDA44")]
	private void Start()
	{
	}

	[Token(Token = "0x6000016")]
	[Address(RVA = "0x5BE268", Offset = "0x5BE268", VA = "0x5BE268")]
	private void Update()
	{
	}

	[Token(Token = "0x6000017")]
	[Address(RVA = "0x5BE284", Offset = "0x5BE284", VA = "0x5BE284")]
	private void MonitorPoseChanges()
	{
	}

	[Token(Token = "0x6000018")]
	[Address(RVA = "0x5BE9EC", Offset = "0x5BE9EC", VA = "0x5BE9EC")]
	private void SetCurrentPose()
	{
	}

	[Token(Token = "0x6000019")]
	[Address(RVA = "0x5BF028", Offset = "0x5BF028", VA = "0x5BF028")]
	[AttributeAttribute(Name = "InspectAttribute", RVA = "0x248570", Offset = "0x248570")]
	public void SetInitialPose()
	{
	}

	[Token(Token = "0x600001A")]
	[Address(RVA = "0x5BFCE0", Offset = "0x5BFCE0", VA = "0x5BFCE0")]
	public PhotoshootController()
	{
	}
}
[Token(Token = "0x2000004")]
public class AudienceLoopStateMachine : StateMachineBehaviour
{
	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int animationCount;

	[Token(Token = "0x600001B")]
	[Address(RVA = "0x4EE79C", Offset = "0x4EE79C", VA = "0x4EE79C", Slot = "9")]
	public override void OnStateMachineEnter(Animator animator, int stateMachinePathHash)
	{
	}

	[Token(Token = "0x600001C")]
	[Address(RVA = "0x4EE830", Offset = "0x4EE830", VA = "0x4EE830", Slot = "6")]
	public override void OnStateExit(Animator animator, AnimatorStateInfo animatorStateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600001D")]
	[Address(RVA = "0x4EE8C4", Offset = "0x4EE8C4", VA = "0x4EE8C4")]
	public AudienceLoopStateMachine()
	{
	}
}
[Token(Token = "0x2000005")]
public class AudioRandomizer : MonoBehaviour
{
	[Token(Token = "0x600001E")]
	[Address(RVA = "0x4EE8D4", Offset = "0x4EE8D4", VA = "0x4EE8D4")]
	private void Start()
	{
	}

	[Token(Token = "0x600001F")]
	[Address(RVA = "0x4EE9AC", Offset = "0x4EE9AC", VA = "0x4EE9AC")]
	public AudioRandomizer()
	{
	}
}
[Token(Token = "0x2000006")]
public class CelebrateStateMachine : StateMachineBehaviour
{
	[Token(Token = "0x6000020")]
	[Address(RVA = "0x4F72E4", Offset = "0x4F72E4", VA = "0x4F72E4", Slot = "9")]
	public override void OnStateMachineEnter(Animator animator, int stateMachinePathHash)
	{
	}

	[Token(Token = "0x6000021")]
	[Address(RVA = "0x4F7374", Offset = "0x4F7374", VA = "0x4F7374")]
	public CelebrateStateMachine()
	{
	}
}
[Token(Token = "0x2000007")]
public class ClockController : MonoBehaviour
{
	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public GameObject bigHand;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject littleHand;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private int hour;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int minute;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float seconds;

	[Token(Token = "0x6000022")]
	[Address(RVA = "0x4F7BF8", Offset = "0x4F7BF8", VA = "0x4F7BF8")]
	public void Start()
	{
	}

	[Token(Token = "0x6000023")]
	[Address(RVA = "0x4F7D10", Offset = "0x4F7D10", VA = "0x4F7D10")]
	public void Update()
	{
	}

	[Token(Token = "0x6000024")]
	[Address(RVA = "0x4F7F8C", Offset = "0x4F7F8C", VA = "0x4F7F8C")]
	public ClockController()
	{
	}
}
[Token(Token = "0x2000008")]
public class CrowdCullingGroup : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000256")]
	public class SphereDefinition
	{
		[Token(Token = "0x4000DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector3 localCenter;

		[Token(Token = "0x4000DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float radius;

		[Token(Token = "0x600139C")]
		[Address(RVA = "0x4FD3EC", Offset = "0x4FD3EC", VA = "0x4FD3EC")]
		public SphereDefinition()
		{
		}
	}

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public SphereDefinition[] spheres;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private CullingGroup cullingGroup;

	[Token(Token = "0x6000025")]
	[Address(RVA = "0x4FD090", Offset = "0x4FD090", VA = "0x4FD090")]
	public void Start()
	{
	}

	[Token(Token = "0x6000026")]
	[Address(RVA = "0x4FD30C", Offset = "0x4FD30C", VA = "0x4FD30C")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x6000027")]
	[Address(RVA = "0x4FD344", Offset = "0x4FD344", VA = "0x4FD344")]
	private void StateChangedMethod(CullingGroupEvent evt)
	{
	}

	[Token(Token = "0x6000028")]
	[Address(RVA = "0x4FD3E4", Offset = "0x4FD3E4", VA = "0x4FD3E4")]
	public CrowdCullingGroup()
	{
	}
}
[Token(Token = "0x2000009")]
public class DamageDisplayController : MonoBehaviour
{
	[Token(Token = "0x2000257")]
	public class DamageText
	{
		[Token(Token = "0x4000DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public TextMeshProUGUI text;

		[Token(Token = "0x4000DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool isFree;

		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float lifetime;

		[Token(Token = "0x4000DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float travelLifetime;

		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 startPosition;

		[Token(Token = "0x600139D")]
		[Address(RVA = "0x4FEC08", Offset = "0x4FEC08", VA = "0x4FEC08")]
		public void Initialize()
		{
		}

		[Token(Token = "0x600139E")]
		[Address(RVA = "0x4FF440", Offset = "0x4FF440", VA = "0x4FF440")]
		public void Deinitialize()
		{
		}

		[Token(Token = "0x600139F")]
		[Address(RVA = "0x4FEC00", Offset = "0x4FEC00", VA = "0x4FEC00")]
		public DamageText()
		{
		}
	}

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<DamageText> poolList;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private List<DamageText> textQueue;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float maxLifetime;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int textSize;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Color color;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int maxSlots;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float offsetSize;

	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float travelRate;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public TMP_FontAsset font;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextAlignmentOptions alignment;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int slotsInUse;

	[Token(Token = "0x6000029")]
	[Address(RVA = "0x4FE908", Offset = "0x4FE908", VA = "0x4FE908")]
	private static DamageText GrabObjectFromPool()
	{
		return null;
	}

	[Token(Token = "0x600002A")]
	[Address(RVA = "0x4FEC64", Offset = "0x4FEC64", VA = "0x4FEC64")]
	public void AddText(string text, Vector3 startPosition)
	{
	}

	[Token(Token = "0x600002B")]
	[Address(RVA = "0x4FF268", Offset = "0x4FF268", VA = "0x4FF268")]
	public void ClearAllEntries()
	{
	}

	[Token(Token = "0x600002C")]
	[Address(RVA = "0x4FF030", Offset = "0x4FF030", VA = "0x4FF030")]
	public void PrepText(DamageText damageObject, string textValue, Vector3 startPosition)
	{
	}

	[Token(Token = "0x600002D")]
	[Address(RVA = "0x4FF298", Offset = "0x4FF298", VA = "0x4FF298")]
	public void Awake()
	{
	}

	[Token(Token = "0x600002E")]
	[Address(RVA = "0x4FF380", Offset = "0x4FF380", VA = "0x4FF380")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x600002F")]
	[Address(RVA = "0x4FEDF8", Offset = "0x4FEDF8", VA = "0x4FEDF8")]
	private void Dequeue()
	{
	}

	[Token(Token = "0x6000030")]
	[Address(RVA = "0x4FEEE8", Offset = "0x4FEEE8", VA = "0x4FEEE8")]
	private void MoveUpRestingSlots()
	{
	}

	[Token(Token = "0x6000031")]
	[Address(RVA = "0x4FF498", Offset = "0x4FF498", VA = "0x4FF498")]
	public DamageDisplayController()
	{
	}
}
[Token(Token = "0x200000A")]
public class DungeonScreams : MonoBehaviour
{
	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public AudioClip[] screams;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private AudioSource source;

	[Token(Token = "0x6000032")]
	[Address(RVA = "0x4FF8CC", Offset = "0x4FF8CC", VA = "0x4FF8CC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000033")]
	[Address(RVA = "0x4FF934", Offset = "0x4FF934", VA = "0x4FF934")]
	private void Update()
	{
	}

	[Token(Token = "0x6000034")]
	[Address(RVA = "0x4FFA70", Offset = "0x4FFA70", VA = "0x4FFA70")]
	public DungeonScreams()
	{
	}
}
[Token(Token = "0x200000B")]
public class ElbowTarget : MonoBehaviour
{
	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public GameObject attachTo;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector3 position;

	[Token(Token = "0x6000035")]
	[Address(RVA = "0x4FFA78", Offset = "0x4FFA78", VA = "0x4FFA78")]
	private void Start()
	{
	}

	[Token(Token = "0x6000036")]
	[Address(RVA = "0x4FFB28", Offset = "0x4FFB28", VA = "0x4FFB28")]
	private void Update()
	{
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0x4FFB2C", Offset = "0x4FFB2C", VA = "0x4FFB2C")]
	public ElbowTarget()
	{
	}
}
[Token(Token = "0x200000C")]
public class FlipPlayspaceButton : MonoBehaviour
{
	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int type;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Button button;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Text text;

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private FlipPlayspaceButton[] buttons;

	[Token(Token = "0x6000038")]
	[Address(RVA = "0x50F7C8", Offset = "0x50F7C8", VA = "0x50F7C8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0x50F8A8", Offset = "0x50F8A8", VA = "0x50F8A8")]
	private void Start()
	{
	}

	[Token(Token = "0x600003A")]
	[Address(RVA = "0x50FA24", Offset = "0x50FA24", VA = "0x50FA24")]
	private void OnTriggerEnter()
	{
	}

	[Token(Token = "0x600003B")]
	[Address(RVA = "0x50F924", Offset = "0x50F924", VA = "0x50F924")]
	public void Press()
	{
	}

	[Token(Token = "0x600003C")]
	[Address(RVA = "0x50FB10", Offset = "0x50FB10", VA = "0x50FB10")]
	public void Depress()
	{
	}

	[Token(Token = "0x600003D")]
	[Address(RVA = "0x50FC00", Offset = "0x50FC00", VA = "0x50FC00")]
	public FlipPlayspaceButton()
	{
	}
}
[Token(Token = "0x200000D")]
public class HideOnConditions : MonoBehaviour
{
	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string[] showConditions;

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string[] hideConditions;

	[Token(Token = "0x600003E")]
	[Address(RVA = "0x8BCFFC", Offset = "0x8BCFFC", VA = "0x8BCFFC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600003F")]
	[Address(RVA = "0x8BD198", Offset = "0x8BD198", VA = "0x8BD198")]
	public HideOnConditions()
	{
	}
}
[Token(Token = "0x200000E")]
[AttributeAttribute(Name = "ExecuteInEditMode", RVA = "0x240ABC", Offset = "0x240ABC")]
public class BWEffect : MonoBehaviour
{
	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Shader shader;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x24197C", Offset = "0x24197C")]
	public float intensity;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Material material;

	[Token(Token = "0x17000011")]
	private Material m_Mat
	{
		[Token(Token = "0x6000040")]
		[Address(RVA = "0x4EE9B4", Offset = "0x4EE9B4", VA = "0x4EE9B4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000041")]
	[Address(RVA = "0x4EEA98", Offset = "0x4EEA98", VA = "0x4EEA98")]
	private void Update()
	{
	}

	[Token(Token = "0x6000042")]
	[Address(RVA = "0x4EEA9C", Offset = "0x4EEA9C", VA = "0x4EEA9C")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x6000043")]
	[Address(RVA = "0x4EEBD8", Offset = "0x4EEBD8", VA = "0x4EEBD8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0x4EECA4", Offset = "0x4EECA4", VA = "0x4EECA4")]
	public BWEffect()
	{
	}
}
[Token(Token = "0x200000F")]
[AttributeAttribute(Name = "ExecuteInEditMode", RVA = "0x240ACC", Offset = "0x240ACC")]
public class DoubleVisionEffect : MonoBehaviour
{
	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Shader shader;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x241994", Offset = "0x241994")]
	public float intensity;

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Material material;

	[Token(Token = "0x17000012")]
	private Material m_Mat
	{
		[Token(Token = "0x6000045")]
		[Address(RVA = "0x4FF5C8", Offset = "0x4FF5C8", VA = "0x4FF5C8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0x4FF6AC", Offset = "0x4FF6AC", VA = "0x4FF6AC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0x4FF6B0", Offset = "0x4FF6B0", VA = "0x4FF6B0")]
	private void OnRenderImage(RenderTexture src, RenderTexture dst)
	{
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0x4FF7F8", Offset = "0x4FF7F8", VA = "0x4FF7F8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000049")]
	[Address(RVA = "0x4FF8C4", Offset = "0x4FF8C4", VA = "0x4FF8C4")]
	public DoubleVisionEffect()
	{
	}
}
[Token(Token = "0x2000010")]
[AttributeAttribute(Name = "ExecuteInEditMode", RVA = "0x240ADC", Offset = "0x240ADC")]
public class EyesClosedEffect : MonoBehaviour
{
	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Shader shader;

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2419AC", Offset = "0x2419AC")]
	public float intensity;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Material material;

	[Token(Token = "0x17000013")]
	private Material m_Mat
	{
		[Token(Token = "0x600004A")]
		[Address(RVA = "0x4FFE88", Offset = "0x4FFE88", VA = "0x4FFE88")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600004B")]
	[Address(RVA = "0x4FFF6C", Offset = "0x4FFF6C", VA = "0x4FFF6C")]
	private void Update()
	{
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0x4FFF70", Offset = "0x4FFF70", VA = "0x4FFF70")]
	private void OnRenderImage(RenderTexture src, RenderTexture dst)
	{
	}

	[Token(Token = "0x600004D")]
	[Address(RVA = "0x500124", Offset = "0x500124", VA = "0x500124")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0x5001F0", Offset = "0x5001F0", VA = "0x5001F0")]
	public EyesClosedEffect()
	{
	}
}
[Token(Token = "0x2000011")]
[AttributeAttribute(Name = "ExecuteInEditMode", RVA = "0x240AEC", Offset = "0x240AEC")]
public class FadeToBlackEffect : MonoBehaviour
{
	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Shader shader;

	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2419C4", Offset = "0x2419C4")]
	public float intensity;

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Material material;

	[Token(Token = "0x17000014")]
	private Material m_Mat
	{
		[Token(Token = "0x600004F")]
		[Address(RVA = "0x50ECD8", Offset = "0x50ECD8", VA = "0x50ECD8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0x50EDBC", Offset = "0x50EDBC", VA = "0x50EDBC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000051")]
	[Address(RVA = "0x50EDC0", Offset = "0x50EDC0", VA = "0x50EDC0")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0x50EEFC", Offset = "0x50EEFC", VA = "0x50EEFC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0x50EFC8", Offset = "0x50EFC8", VA = "0x50EFC8")]
	public FadeToBlackEffect()
	{
	}
}
[Token(Token = "0x2000012")]
[AttributeAttribute(Name = "ExecuteInEditMode", RVA = "0x240AFC", Offset = "0x240AFC")]
public class FadeToWhiteEffect : MonoBehaviour
{
	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Shader shader;

	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2419DC", Offset = "0x2419DC")]
	public float intensity;

	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Material material;

	[Token(Token = "0x17000015")]
	private Material m_Mat
	{
		[Token(Token = "0x6000054")]
		[Address(RVA = "0x50EFD0", Offset = "0x50EFD0", VA = "0x50EFD0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0x50F0B4", Offset = "0x50F0B4", VA = "0x50F0B4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0x50F0B8", Offset = "0x50F0B8", VA = "0x50F0B8")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0x50F1F4", Offset = "0x50F1F4", VA = "0x50F1F4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0x50F2C0", Offset = "0x50F2C0", VA = "0x50F2C0")]
	public FadeToWhiteEffect()
	{
	}
}
[Token(Token = "0x2000013")]
[AttributeAttribute(Name = "ExecuteInEditMode", RVA = "0x240B0C", Offset = "0x240B0C")]
public class HitToHeadEffect : MonoBehaviour
{
	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Shader shader;

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2419F4", Offset = "0x2419F4")]
	public float intensity;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Material material;

	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float TimeX;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Vector4 ScreenResolution;

	[Token(Token = "0x17000016")]
	private Material m_Mat
	{
		[Token(Token = "0x6000059")]
		[Address(RVA = "0x8BD1A0", Offset = "0x8BD1A0", VA = "0x8BD1A0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0x8BD284", Offset = "0x8BD284", VA = "0x8BD284")]
	private void Update()
	{
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0x8BD288", Offset = "0x8BD288", VA = "0x8BD288")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x600005C")]
	[Address(RVA = "0x8BD51C", Offset = "0x8BD51C", VA = "0x8BD51C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0x8BD5E8", Offset = "0x8BD5E8", VA = "0x8BD5E8")]
	public HitToHeadEffect()
	{
	}
}
[Token(Token = "0x2000014")]
[AttributeAttribute(Name = "ExecuteInEditMode", RVA = "0x240B1C", Offset = "0x240B1C")]
public class VignetteEffect : MonoBehaviour
{
	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Shader shader;

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x241A0C", Offset = "0x241A0C")]
	public float intensity;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Material material;

	[Token(Token = "0x17000017")]
	private Material m_Mat
	{
		[Token(Token = "0x600005E")]
		[Address(RVA = "0x1016648", Offset = "0x1016648", VA = "0x1016648")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0x101672C", Offset = "0x101672C", VA = "0x101672C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000060")]
	[Address(RVA = "0x1016730", Offset = "0x1016730", VA = "0x1016730")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x6000061")]
	[Address(RVA = "0x101686C", Offset = "0x101686C", VA = "0x101686C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000062")]
	[Address(RVA = "0x1016938", Offset = "0x1016938", VA = "0x1016938")]
	public VignetteEffect()
	{
	}
}
[Token(Token = "0x2000015")]
public class LevelLoader : MonoBehaviour
{
	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static LevelLoader instance;

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Shader canvasShader;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Texture2D loadingScreen;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Texture2D defaultFront;

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture2D defaultBack;

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Texture2D defaultRight;

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Texture2D defaultLeft;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Texture2D defaultTop;

	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Texture2D defaultBottom;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Cubemap defaultCubemap;

	[Token(Token = "0x6000063")]
	[Address(RVA = "0x8BE8D4", Offset = "0x8BE8D4", VA = "0x8BE8D4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000064")]
	[Address(RVA = "0x8BEA08", Offset = "0x8BEA08", VA = "0x8BEA08")]
	private void Start()
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0x8BEA48", Offset = "0x8BEA48", VA = "0x8BEA48")]
	public static void LoadScene(string sceneName, Texture2D front, Texture2D back, Texture2D right, Texture2D left, Texture2D top, Texture2D bottom, Cubemap cubemap)
	{
	}

	[Token(Token = "0x6000066")]
	[Address(RVA = "0x8BEBC0", Offset = "0x8BEBC0", VA = "0x8BEBC0")]
	public static void LoadScene(string sceneName)
	{
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0x8BEB70", Offset = "0x8BEB70", VA = "0x8BEB70")]
	public void LoadSceneInstance(string sceneName, Texture2D front, Texture2D back, Texture2D right, Texture2D left, Texture2D top, Texture2D bottom, Cubemap cubemap)
	{
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0x8BEC9C", Offset = "0x8BEC9C", VA = "0x8BEC9C")]
	public void LoadSceneInstance(string sceneName)
	{
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0x8BED68", Offset = "0x8BED68", VA = "0x8BED68")]
	public LevelLoader()
	{
	}
}
[Token(Token = "0x2000016")]
public class LightFlicker : MonoBehaviour
{
	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float flickerChance;

	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float unflickerChance;

	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Color flickerColor;

	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float initialIntensity;

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool flickering;

	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Color normalColor;

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public MeshRenderer mesh;

	[Token(Token = "0x600006A")]
	[Address(RVA = "0x8BED70", Offset = "0x8BED70", VA = "0x8BED70")]
	private void Awake()
	{
	}

	[Token(Token = "0x600006B")]
	[Address(RVA = "0x8BEE48", Offset = "0x8BEE48", VA = "0x8BEE48")]
	private void Update()
	{
	}

	[Token(Token = "0x600006C")]
	[Address(RVA = "0x8BEFB8", Offset = "0x8BEFB8", VA = "0x8BEFB8")]
	public LightFlicker()
	{
	}
}
[Token(Token = "0x2000017")]
public class LIVLoader : MonoBehaviour
{
	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Transform trackedSpaceOrigin;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Camera HMDCamera;

	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public LayerMask spectatorLayerMask;

	[Token(Token = "0x600006D")]
	[Address(RVA = "0x8BE8CC", Offset = "0x8BE8CC", VA = "0x8BE8CC")]
	public LIVLoader()
	{
	}
}
[Token(Token = "0x2000018")]
public class LoseStateMachine : StateMachineBehaviour
{
	[Token(Token = "0x600006E")]
	[Address(RVA = "0x8C1E50", Offset = "0x8C1E50", VA = "0x8C1E50", Slot = "9")]
	public override void OnStateMachineEnter(Animator animator, int stateMachinePathHash)
	{
	}

	[Token(Token = "0x600006F")]
	[Address(RVA = "0x8C1F18", Offset = "0x8C1F18", VA = "0x8C1F18")]
	public LoseStateMachine()
	{
	}
}
[Token(Token = "0x2000019")]
public class NormalDistributionGenetrator : MonoBehaviour
{
	[Token(Token = "0x6000070")]
	[Address(RVA = "0x8C2398", Offset = "0x8C2398", VA = "0x8C2398")]
	public static float Generate(float mu, float s)
	{
		return default(float);
	}

	[Token(Token = "0x6000071")]
	[Address(RVA = "0x8C2470", Offset = "0x8C2470", VA = "0x8C2470")]
	public NormalDistributionGenetrator()
	{
	}
}
[Token(Token = "0x200001A")]
public class ParentToGameObject : MonoBehaviour
{
	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Transform parentObject;

	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform rotateWith;

	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Vector3 localPosition;

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 localRotation;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool doRotate;

	[Token(Token = "0x6000072")]
	[Address(RVA = "0x5BC380", Offset = "0x5BC380", VA = "0x5BC380")]
	private void Start()
	{
	}

	[Token(Token = "0x6000073")]
	[Address(RVA = "0x5BC4D8", Offset = "0x5BC4D8", VA = "0x5BC4D8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0x5BC55C", Offset = "0x5BC55C", VA = "0x5BC55C")]
	public ParentToGameObject()
	{
	}
}
[Token(Token = "0x200001B")]
public class PlayAreaRotationTrigger : MonoBehaviour
{
	[Token(Token = "0x6000075")]
	[Address(RVA = "0xD44C58", Offset = "0xD44C58", VA = "0xD44C58")]
	public PlayAreaRotationTrigger()
	{
	}
}
[Token(Token = "0x200001C")]
public class PlayerHeadPosition : MonoBehaviour
{
	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public GameObject followObject;

	[Token(Token = "0x6000076")]
	[Address(RVA = "0xD44F08", Offset = "0xD44F08", VA = "0xD44F08")]
	private void Start()
	{
	}

	[Token(Token = "0x6000077")]
	[Address(RVA = "0xD450A8", Offset = "0xD450A8", VA = "0xD450A8")]
	public PlayerHeadPosition()
	{
	}
}
[Token(Token = "0x200001D")]
public class PlayerBodyTest : MonoBehaviour
{
	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Animator animator;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform leftHand;

	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Transform rightHand;

	[Token(Token = "0x6000078")]
	[Address(RVA = "0xD44C60", Offset = "0xD44C60", VA = "0xD44C60", Slot = "4")]
	public virtual void OnAnimatorIK()
	{
	}

	[Token(Token = "0x6000079")]
	[Address(RVA = "0xD44F00", Offset = "0xD44F00", VA = "0xD44F00")]
	public PlayerBodyTest()
	{
	}
}
[Token(Token = "0x200001E")]
public class PMFixer : MonoBehaviour
{
	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private PuppetMaster pm;

	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private int frameCounter;

	[Token(Token = "0x600007A")]
	[Address(RVA = "0x5BC06C", Offset = "0x5BC06C", VA = "0x5BC06C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600007B")]
	[Address(RVA = "0x5BC0D4", Offset = "0x5BC0D4", VA = "0x5BC0D4")]
	private void Update()
	{
	}

	[Token(Token = "0x600007C")]
	[Address(RVA = "0x5BC120", Offset = "0x5BC120", VA = "0x5BC120")]
	public PMFixer()
	{
	}
}
[Token(Token = "0x200001F")]
public class PMMaker : MonoBehaviour
{
	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Animator animator;

	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private int frameSkip;

	[Token(Token = "0x600007D")]
	[Address(RVA = "0x5BC128", Offset = "0x5BC128", VA = "0x5BC128")]
	private void Start()
	{
	}

	[Token(Token = "0x600007E")]
	[Address(RVA = "0x5BC190", Offset = "0x5BC190", VA = "0x5BC190")]
	private void Update()
	{
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0x5BC378", Offset = "0x5BC378", VA = "0x5BC378")]
	public PMMaker()
	{
	}
}
[Token(Token = "0x2000020")]
public class PostCelebrateStateMachine : StateMachineBehaviour
{
	[Token(Token = "0x6000080")]
	[Address(RVA = "0x498588", Offset = "0x498588", VA = "0x498588", Slot = "9")]
	public override void OnStateMachineEnter(Animator animator, int stateMachinePathHash)
	{
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0x49869C", Offset = "0x49869C", VA = "0x49869C")]
	public PostCelebrateStateMachine()
	{
	}
}
[Token(Token = "0x2000021")]
public class PumpkinLid : MonoBehaviour
{
	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Rigidbody rb;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool sleeping;

	[Token(Token = "0x6000082")]
	[Address(RVA = "0x499798", Offset = "0x499798", VA = "0x499798")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000083")]
	[Address(RVA = "0x499800", Offset = "0x499800", VA = "0x499800")]
	private void OnChunkNotification()
	{
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0x499848", Offset = "0x499848", VA = "0x499848")]
	public PumpkinLid()
	{
	}
}
[Token(Token = "0x2000022")]
public class ResonanceAudioPositionFixer : MonoBehaviour
{
	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private AudioSource _audioSource;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool _needsToReset;

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	private bool _init;

	[Token(Token = "0x6000085")]
	[Address(RVA = "0x4A15A0", Offset = "0x4A15A0", VA = "0x4A15A0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000086")]
	[Address(RVA = "0x4A1608", Offset = "0x4A1608", VA = "0x4A1608")]
	private void Update()
	{
	}

	[Token(Token = "0x6000087")]
	[Address(RVA = "0x4A1690", Offset = "0x4A1690", VA = "0x4A1690")]
	public ResonanceAudioPositionFixer()
	{
	}
}
[Token(Token = "0x2000023")]
public class RingController : MonoBehaviour
{
	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static RingController instance;

	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float halfRingSizeX;

	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float halfRingSizeZ;

	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Transform redCorner;

	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform blueCorner;

	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Transform[] neutralCorners;

	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform[] refereePositions;

	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Transform announcerPosition;

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform redCornerWinnerPosition;

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Transform blueCornerWinnerPosition;

	[Token(Token = "0x6000088")]
	[Address(RVA = "0x4A4490", Offset = "0x4A4490", VA = "0x4A4490")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0x4A44F4", Offset = "0x4A44F4", VA = "0x4A44F4")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x600008A")]
	[Address(RVA = "0x4A455C", Offset = "0x4A455C", VA = "0x4A455C")]
	public RingController()
	{
	}
}
[Token(Token = "0x2000024")]
public class ShowOnDateRange : MonoBehaviour
{
	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public GameObject objectToEnable;

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int startMonth;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int startDay;

	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int endMonth;

	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int endDay;

	[Token(Token = "0x600008B")]
	[Address(RVA = "0xC6D6A4", Offset = "0xC6D6A4", VA = "0xC6D6A4")]
	public void Awake()
	{
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0xC6D7D8", Offset = "0xC6D7D8", VA = "0xC6D7D8")]
	public ShowOnDateRange()
	{
	}
}
[Token(Token = "0x2000025")]
public class VRInputModule : StandaloneInputModule
{
	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static VRInputModule instance;

	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private GameObject currentDragging;

	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private GameObject currentPointedAt;

	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Ray customControllerRay;

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool pressedDown;

	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
	private bool pressedLastFrame;

	[Token(Token = "0x17000018")]
	public static VRInputModule Instance
	{
		[Token(Token = "0x6000090")]
		[Address(RVA = "0x1014E58", Offset = "0x1014E58", VA = "0x1014E58")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000091")]
		[Address(RVA = "0x1014F40", Offset = "0x1014F40", VA = "0x1014F40")]
		private set
		{
		}
	}

	[Token(Token = "0x17000019")]
	public static Ray CustomControllerRay
	{
		[Token(Token = "0x6000092")]
		[Address(RVA = "0x1014FA4", Offset = "0x1014FA4", VA = "0x1014FA4")]
		get
		{
			return default(Ray);
		}
		[Token(Token = "0x6000093")]
		[Address(RVA = "0x1014FE0", Offset = "0x1014FE0", VA = "0x1014FE0")]
		set
		{
		}
	}

	[Token(Token = "0x1700001A")]
	public static bool CustomControllerButtonDown
	{
		[Token(Token = "0x6000094")]
		[Address(RVA = "0x1015038", Offset = "0x1015038", VA = "0x1015038")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000095")]
		[Address(RVA = "0x1015060", Offset = "0x1015060", VA = "0x1015060")]
		set
		{
		}
	}

	[Token(Token = "0x1700001B")]
	public GameObject CurrentPointedAt
	{
		[Token(Token = "0x6000096")]
		[Address(RVA = "0x101508C", Offset = "0x101508C", VA = "0x101508C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0x1014150", Offset = "0x1014150", VA = "0x1014150", Slot = "17")]
	public override void Process()
	{
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0x1014418", Offset = "0x1014418", VA = "0x1014418", Slot = "31")]
	protected virtual void ProcessDownRelease(PointerEventData eventData, bool down, bool released)
	{
	}

	[Token(Token = "0x600008F")]
	private static T EnableInputModule<T>() where T : BaseInputModule
	{
		return null;
	}

	[Token(Token = "0x6000097")]
	[Address(RVA = "0x1015094", Offset = "0x1015094", VA = "0x1015094")]
	public VRInputModule()
	{
	}
}
[Token(Token = "0x2000026")]
[AttributeAttribute(Name = "ExecuteInEditMode", RVA = "0x240B2C", Offset = "0x240B2C")]
public class VRConfig : MonoBehaviour
{
	[Token(Token = "0x4000087")]
	private const float defaultRenderScale = 0.907f;

	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static VRConfig instance;

	[Token(Token = "0x4000089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x241A24", Offset = "0x241A24")]
	public int CPULevel;

	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int GPULevel;

	[Token(Token = "0x400008B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x241A60", Offset = "0x241A60")]
	public int FFRLevel;

	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool overrideRenderScale;

	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float renderScale;

	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x241A98", Offset = "0x241A98")]
	public bool hideCoachDuringRounds;

	[Token(Token = "0x1700001C")]
	public static bool shouldHideCoachDuringRounds
	{
		[Token(Token = "0x6000098")]
		[Address(RVA = "0x1013D40", Offset = "0x1013D40", VA = "0x1013D40")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000099")]
	[Address(RVA = "0x1013E20", Offset = "0x1013E20", VA = "0x1013E20")]
	private void Awake()
	{
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0x1013EA0", Offset = "0x1013EA0", VA = "0x1013EA0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0x1013F08", Offset = "0x1013F08", VA = "0x1013F08")]
	private void Start()
	{
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0x1014104", Offset = "0x1014104", VA = "0x1014104")]
	public VRConfig()
	{
	}
}
[Token(Token = "0x2000027")]
public class Talkbox : MonoBehaviour
{
	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public LipSyncData[] clips;

	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public LipSync mouth;

	[Token(Token = "0x600009D")]
	[Address(RVA = "0x3DB520", Offset = "0x3DB520", VA = "0x3DB520")]
	[AttributeAttribute(Name = "InspectAttribute", RVA = "0x248580", Offset = "0x248580")]
	public void Talk()
	{
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0x3DB5D4", Offset = "0x3DB5D4", VA = "0x3DB5D4")]
	public Talkbox()
	{
	}
}
[Token(Token = "0x2000028")]
public class Fire : FireFlicker
{
	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int calmTime;

	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int intenseTime;

	[Token(Token = "0x4000093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float changeFireOn;

	[Token(Token = "0x4000094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float stopChangeFireOn;

	[Token(Token = "0x600009F")]
	[Address(RVA = "0x50F2C8", Offset = "0x50F2C8", VA = "0x50F2C8")]
	private void Start()
	{
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0x50F310", Offset = "0x50F310", VA = "0x50F310")]
	private void Update()
	{
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0x50F394", Offset = "0x50F394", VA = "0x50F394")]
	private float UpdateLightSource()
	{
		return default(float);
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0x50F504", Offset = "0x50F504", VA = "0x50F504")]
	public Fire()
	{
	}
}
[Token(Token = "0x2000029")]
public class FireFlicker : MonoBehaviour
{
	[Token(Token = "0x4000095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Light thisLight;

	[Token(Token = "0x4000096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Color originalColor;

	[Token(Token = "0x4000097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float timePassed;

	[Token(Token = "0x4000098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float changeValue;

	[Token(Token = "0x1700001D")]
	public Light ThisLight
	{
		[Token(Token = "0x60000A3")]
		[Address(RVA = "0x50F524", Offset = "0x50F524", VA = "0x50F524")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700001E")]
	public Color OriginalColor
	{
		[Token(Token = "0x60000A4")]
		[Address(RVA = "0x50F52C", Offset = "0x50F52C", VA = "0x50F52C")]
		get
		{
			return default(Color);
		}
	}

	[Token(Token = "0x1700001F")]
	public float TimePassed
	{
		[Token(Token = "0x60000A5")]
		[Address(RVA = "0x50F53C", Offset = "0x50F53C", VA = "0x50F53C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60000A6")]
		[Address(RVA = "0x50F544", Offset = "0x50F544", VA = "0x50F544")]
		set
		{
		}
	}

	[Token(Token = "0x17000020")]
	public float ChangeValue
	{
		[Token(Token = "0x60000A7")]
		[Address(RVA = "0x50F54C", Offset = "0x50F54C", VA = "0x50F54C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60000A8")]
		[Address(RVA = "0x50F554", Offset = "0x50F554", VA = "0x50F554")]
		set
		{
		}
	}

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0x50F55C", Offset = "0x50F55C", VA = "0x50F55C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0x50F51C", Offset = "0x50F51C", VA = "0x50F51C")]
	public FireFlicker()
	{
	}
}
[Token(Token = "0x200002A")]
public class BufferedAudioStream
{
	[Token(Token = "0x4000099")]
	private const bool VerboseLogging = false;

	[Token(Token = "0x400009A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private AudioSource audio;

	[Token(Token = "0x400009B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private float[] audioBuffer;

	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private int writePos;

	[Token(Token = "0x400009D")]
	private const float bufferLengthSeconds = 0.25f;

	[Token(Token = "0x400009E")]
	private const int sampleRate = 48000;

	[Token(Token = "0x400009F")]
	private const int bufferSize = 12000;

	[Token(Token = "0x40000A0")]
	private const float playbackDelayTimeSeconds = 0.05f;

	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private float playbackDelayRemaining;

	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float remainingBufferTime;

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0x4F6CC4", Offset = "0x4F6CC4", VA = "0x4F6CC4")]
	public BufferedAudioStream(AudioSource audio)
	{
	}

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0x4F6E28", Offset = "0x4F6E28", VA = "0x4F6E28")]
	public void Update()
	{
	}

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0x4F6DC0", Offset = "0x4F6DC0", VA = "0x4F6DC0")]
	private void Stop()
	{
	}

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0x4F70B4", Offset = "0x4F70B4", VA = "0x4F70B4")]
	public void AddData(float[] samples)
	{
	}
}
[Token(Token = "0x200002B")]
public class popup : MonoBehaviour
{
	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Transform target;

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Rigidbody rb;

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0x1016940", Offset = "0x1016940", VA = "0x1016940")]
	private void Start()
	{
	}

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0x10169A8", Offset = "0x10169A8", VA = "0x10169A8")]
	private void Update()
	{
	}

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0x1016B1C", Offset = "0x1016B1C", VA = "0x1016B1C")]
	public popup()
	{
	}
}
[Token(Token = "0x200002C")]
public static class ResonanceAudio
{
	[StructLayout(0)]
	[Token(Token = "0x2000258")]
	private class RoomProperties
	{
		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float positionX;

		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float positionY;

		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float positionZ;

		[Token(Token = "0x4000DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float rotationX;

		[Token(Token = "0x4000DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rotationY;

		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float rotationZ;

		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float rotationW;

		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float dimensionsX;

		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float dimensionsY;

		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float dimensionsZ;

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ResonanceAudioRoomManager.SurfaceMaterial materialLeft;

		[Token(Token = "0x4000DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public ResonanceAudioRoomManager.SurfaceMaterial materialRight;

		[Token(Token = "0x4000DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ResonanceAudioRoomManager.SurfaceMaterial materialBottom;

		[Token(Token = "0x4000DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public ResonanceAudioRoomManager.SurfaceMaterial materialTop;

		[Token(Token = "0x4000DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ResonanceAudioRoomManager.SurfaceMaterial materialFront;

		[Token(Token = "0x4000DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public ResonanceAudioRoomManager.SurfaceMaterial materialBack;

		[Token(Token = "0x4000DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float reflectionScalar;

		[Token(Token = "0x4000DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float reverbGain;

		[Token(Token = "0x4000DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float reverbTime;

		[Token(Token = "0x4000DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float reverbBrightness;

		[Token(Token = "0x60013A0")]
		[Address(RVA = "0x49BE88", Offset = "0x49BE88", VA = "0x49BE88")]
		public RoomProperties()
		{
		}
	}

	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Transform listenerTransform;

	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static readonly Color listenerDirectivityColor;

	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public static readonly Color sourceDirectivityColor;

	[Token(Token = "0x40000A8")]
	public const float distanceEpsilon = 0.01f;

	[Token(Token = "0x40000A9")]
	public const float maxDistanceLimit = 1000000f;

	[Token(Token = "0x40000AA")]
	public const float minDistanceLimit = 990099f;

	[Token(Token = "0x40000AB")]
	public const float maxGainDb = 24f;

	[Token(Token = "0x40000AC")]
	public const float minGainDb = -24f;

	[Token(Token = "0x40000AD")]
	public const float maxReverbBrightness = 1f;

	[Token(Token = "0x40000AE")]
	public const float minReverbBrightness = -1f;

	[Token(Token = "0x40000AF")]
	public const float maxReverbTime = 10f;

	[Token(Token = "0x40000B0")]
	public const float maxReflectivity = 2f;

	[Token(Token = "0x40000B1")]
	public const int maxNumOcclusionHits = 12;

	[Token(Token = "0x40000B2")]
	public const float occlusionDetectionInterval = 0.2f;

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private static readonly Matrix4x4 flipZ;

	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private static RaycastHit[] occlusionHits;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private static int occlusionMaskValue;

	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private static float[] roomPosition;

	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static RoomProperties roomProperties;

	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private static IntPtr roomPropertiesPtr;

	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private static Matrix4x4 transformMatrix;

	[Token(Token = "0x40000BA")]
	private const string pluginName = "audiopluginresonanceaudio";

	[Token(Token = "0x17000021")]
	public static Transform ListenerTransform
	{
		[Token(Token = "0x60000B2")]
		[Address(RVA = "0x499858", Offset = "0x499858", VA = "0x499858")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0x499A28", Offset = "0x499A28", VA = "0x499A28")]
	public static void UpdateAudioListener(ResonanceAudioListener listener)
	{
	}

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0x499DA0", Offset = "0x499DA0", VA = "0x499DA0")]
	public static void DisableRoomEffects()
	{
	}

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0x49A000", Offset = "0x49A000", VA = "0x49A000")]
	public static void UpdateRoom(ResonanceAudioRoom room)
	{
	}

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0x49A45C", Offset = "0x49A45C", VA = "0x49A45C")]
	public static void UpdateReverbProbe(ResonanceAudioReverbProbe reverbPobe)
	{
	}

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0x49A86C", Offset = "0x49A86C", VA = "0x49A86C")]
	public static bool StartRecording()
	{
		return default(bool);
	}

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0x49A874", Offset = "0x49A874", VA = "0x49A874")]
	public static bool StopRecordingAndSaveToFile(string filePath, bool seamless)
	{
		return default(bool);
	}

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0x49A87C", Offset = "0x49A87C", VA = "0x49A87C")]
	public static void InitializeReverbComputer(float[] vertices, int[] triangles, int[] materialIndices, float scatteringCoefficient)
	{
	}

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0x49A880", Offset = "0x49A880", VA = "0x49A880")]
	public static bool ComputeRt60sAndProxyRoom(ResonanceAudioReverbProbe reverbProbe, int totalNumPaths, int numPathsPerBatch, int maxDepth, float energyThreshold, float listenerSphereRadius)
	{
		return default(bool);
	}

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0x49A888", Offset = "0x49A888", VA = "0x49A888")]
	public static float ComputeOcclusion(Transform sourceTransform)
	{
		return default(float);
	}

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0x499B18", Offset = "0x499B18", VA = "0x499B18")]
	public static float ConvertAmplitudeFromDb(float db)
	{
		return default(float);
	}

	[Token(Token = "0x60000BD")]
	[Address(RVA = "0x49ACD0", Offset = "0x49ACD0", VA = "0x49ACD0")]
	public static Vector2[] Generate2dPolarPattern(float alpha, float order, int resolution)
	{
		return null;
	}

	[Token(Token = "0x60000BE")]
	[Address(RVA = "0x49AE78", Offset = "0x49AE78", VA = "0x49AE78")]
	private static void ConvertAudioTransformFromUnity(ref Vector3 position, ref Quaternion rotation)
	{
	}

	[Token(Token = "0x60000BF")]
	[Address(RVA = "0x49B498", Offset = "0x49B498", VA = "0x49B498")]
	private static void SetProxyRoomProperties(ResonanceAudioReverbProbe reverbProbe, RoomProperties proxyRoomProperties)
	{
	}

	[Token(Token = "0x60000C0")]
	[Address(RVA = "0x49A264", Offset = "0x49A264", VA = "0x49A264")]
	private static void UpdateRoomProperties(ResonanceAudioRoom room)
	{
	}

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0x49A6E0", Offset = "0x49A6E0", VA = "0x49A6E0")]
	private static void UpdateRoomProperties(ResonanceAudioReverbProbe reverbProbe)
	{
	}

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0x49B67C", Offset = "0x49B67C", VA = "0x49B67C")]
	private static void FillGeometryOfRoomProperties(Vector3 position, Quaternion rotation, Vector3 scale)
	{
	}

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0x49B908", Offset = "0x49B908", VA = "0x49B908")]
	private static void FillWallMaterialsOfRoomProperties(ResonanceAudioRoomManager.SurfaceMaterial leftWall, ResonanceAudioRoomManager.SurfaceMaterial rightWall, ResonanceAudioRoomManager.SurfaceMaterial floor, ResonanceAudioRoomManager.SurfaceMaterial ceiling, ResonanceAudioRoomManager.SurfaceMaterial frontWall, ResonanceAudioRoomManager.SurfaceMaterial backWall)
	{
	}

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0x49BA9C", Offset = "0x49BA9C", VA = "0x49BA9C")]
	private static void FillModifiersOfRoomProperties(float reverbGainDb, float reverbTime, float reverbBrightness, float reflectivity)
	{
	}

	[PreserveSig]
	[Token(Token = "0x60000C5")]
	[Address(RVA = "0x499BB8", Offset = "0x499BB8", VA = "0x499BB8")]
	private static extern void SetListenerGain(float gain);

	[PreserveSig]
	[Token(Token = "0x60000C6")]
	[Address(RVA = "0x499CC0", Offset = "0x499CC0", VA = "0x499CC0")]
	private static extern void SetListenerStereoSpeakerMode(bool enableStereoSpeakerMode);

	[PreserveSig]
	[Token(Token = "0x60000C7")]
	[Address(RVA = "0x499EE8", Offset = "0x499EE8", VA = "0x499EE8")]
	private static extern void SetRoomProperties(IntPtr roomProperties, float[] rt60s);
}
[Token(Token = "0x200002D")]
public class ResonanceAudioAcousticMesh
{
	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x241AD8", Offset = "0x241AD8")]
	private Mesh <mesh>k__BackingField;

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x241AE8", Offset = "0x241AE8")]
	private GameObject <sourceObject>k__BackingField;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool isIncludedByObjectFiltering;

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private ResonanceAudioRoomManager.SurfaceMaterial[] surfaceMaterialsFromSubMesh;

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private RangeInt[] triangleRangesFromSubMesh;

	[Token(Token = "0x40000C0")]
	private const int unityMaxNumVerticesPerMesh = 65000;

	[Token(Token = "0x40000C1")]
	private const int maxNumSubMeshes = 256;

	[Token(Token = "0x40000C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Material visualizationMaterial;

	[Token(Token = "0x17000022")]
	public Mesh mesh
	{
		[Token(Token = "0x60000C9")]
		[Address(RVA = "0x49BE90", Offset = "0x49BE90", VA = "0x49BE90")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248590", Offset = "0x248590")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000CA")]
		[Address(RVA = "0x49BE98", Offset = "0x49BE98", VA = "0x49BE98")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2485A0", Offset = "0x2485A0")]
		private set
		{
		}
	}

	[Token(Token = "0x17000023")]
	public GameObject sourceObject
	{
		[Token(Token = "0x60000CB")]
		[Address(RVA = "0x49BEA0", Offset = "0x49BEA0", VA = "0x49BEA0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2485B0", Offset = "0x2485B0")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000CC")]
		[Address(RVA = "0x49BEA8", Offset = "0x49BEA8", VA = "0x49BEA8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2485C0", Offset = "0x2485C0")]
		private set
		{
		}
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0x49BEB0", Offset = "0x49BEB0", VA = "0x49BEB0")]
	public static ResonanceAudioAcousticMesh GenerateFromMeshFilter(MeshFilter meshFilter, Shader surfaceMaterialShader)
	{
		return null;
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0x49CBA4", Offset = "0x49CBA4", VA = "0x49CBA4")]
	public static ResonanceAudioAcousticMesh GenerateFromTerrain(Terrain terrain, Shader surfaceMaterialShader)
	{
		return null;
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0x49D680", Offset = "0x49D680", VA = "0x49D680")]
	public int[] GetSurfaceMaterialIndicesFromTriangle()
	{
		return null;
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0x49D850", Offset = "0x49D850", VA = "0x49D850")]
	public void SetSurfaceMaterialToAllSubMeshes(ResonanceAudioRoomManager.SurfaceMaterial surfaceMaterial)
	{
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0x49DA6C", Offset = "0x49DA6C", VA = "0x49DA6C")]
	public void SetSurfaceMaterialToSubMesh(ResonanceAudioRoomManager.SurfaceMaterial surfaceMaterial, int subMeshIndex)
	{
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0x49DDE8", Offset = "0x49DDE8", VA = "0x49DDE8")]
	public bool Render()
	{
		return default(bool);
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0x49DF8C", Offset = "0x49DF8C", VA = "0x49DF8C")]
	public bool IsIncluded()
	{
		return default(bool);
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0x49E09C", Offset = "0x49E09C", VA = "0x49E09C")]
	public bool IsSubMeshTriangular(int subMeshIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0x49C1B8", Offset = "0x49C1B8", VA = "0x49C1B8")]
	private static int CountTriangleIndices(Mesh sourceMesh)
	{
		return default(int);
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0x49CF40", Offset = "0x49CF40", VA = "0x49CF40")]
	private static void SubSampleHeightMap(int originalM, int originalN, out int m, out int n, out int subSampleStep, out int subSampledNumTriangleIndices)
	{
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0x49C254", Offset = "0x49C254", VA = "0x49C254")]
	private void InitializeMesh(int numTriangleIndices, int numVertices, out int[] triangles, out Vector3[] vertices)
	{
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0x49C9E4", Offset = "0x49C9E4", VA = "0x49C9E4")]
	private void InitializeSubMeshMaterials()
	{
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0x49CADC", Offset = "0x49CADC", VA = "0x49CADC")]
	private void InitializeVisualizationMaterial(Shader surfaceMaterialShader)
	{
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0x49C3A0", Offset = "0x49C3A0", VA = "0x49C3A0")]
	private void FillVerticesAndTrianglesFromMesh(Mesh sourceMesh, Transform sourceObjectTransform, ref Vector3[] vertices, ref int[] triangles)
	{
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0x49CFF0", Offset = "0x49CFF0", VA = "0x49CFF0")]
	private void FillTrianglesAndVerticesFromHeightMap(Vector3 terrainPosition, Vector3 terrainSize, float[,] heightMap, int m, int n, int subSampleStep, ref int[] triangles, ref Vector3[] vertices)
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0x49E0F0", Offset = "0x49E0F0", VA = "0x49E0F0")]
	private void SetSubMeshEnds()
	{
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0x49D8D0", Offset = "0x49D8D0", VA = "0x49D8D0")]
	private void SetSubMeshSurfaceMaterials()
	{
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0x49C24C", Offset = "0x49C24C", VA = "0x49C24C")]
	public ResonanceAudioAcousticMesh()
	{
	}
}
[Token(Token = "0x200002E")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x240B3C", Offset = "0x240B3C")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x240B3C", Offset = "0x240B3C")]
[AttributeAttribute(Name = "ExecuteInEditMode", RVA = "0x240B3C", Offset = "0x240B3C")]
public class ResonanceAudioListener : MonoBehaviour
{
	[Token(Token = "0x40000C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x241AF8", Offset = "0x241AF8")]
	public float globalGainDb;

	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x241B2C", Offset = "0x241B2C")]
	public LayerMask occlusionMask;

	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x241B8C", Offset = "0x241B8C")]
	public bool stereoSpeakerModeEnabled;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x241BC0", Offset = "0x241BC0")]
	public bool recorderSeamless;

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x241BF4", Offset = "0x241BF4")]
	public string recorderSourceTag;

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x241C28", Offset = "0x241C28")]
	private bool <IsRecording>k__BackingField;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	[SerializeField]
	private bool recorderFoldout;

	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<AudioSource> recorderTaggedSources;

	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private double recorderStartTime;

	[Token(Token = "0x17000024")]
	public bool IsRecording
	{
		[Token(Token = "0x60000DF")]
		[Address(RVA = "0x49E620", Offset = "0x49E620", VA = "0x49E620")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2485D0", Offset = "0x2485D0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000E0")]
		[Address(RVA = "0x49E628", Offset = "0x49E628", VA = "0x49E628")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2485E0", Offset = "0x2485E0")]
		private set
		{
		}
	}

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0x49E630", Offset = "0x49E630", VA = "0x49E630")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0x49E6E0", Offset = "0x49E6E0", VA = "0x49E6E0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0x49E99C", Offset = "0x49E99C", VA = "0x49E99C")]
	private void Update()
	{
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0x49EC94", Offset = "0x49EC94", VA = "0x49EC94")]
	public double GetCurrentRecordDuration()
	{
		return default(double);
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0x49ECD0", Offset = "0x49ECD0", VA = "0x49ECD0")]
	public void StartSoundfieldRecorder()
	{
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0x49E798", Offset = "0x49E798", VA = "0x49E798")]
	public void StopSoundfieldRecorder(string filePath)
	{
	}

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0x49EA50", Offset = "0x49EA50", VA = "0x49EA50")]
	private void UpdateTaggedSources()
	{
	}

	[Token(Token = "0x60000E8")]
	[Address(RVA = "0x49EFD4", Offset = "0x49EFD4", VA = "0x49EFD4")]
	public ResonanceAudioListener()
	{
	}
}
[Token(Token = "0x200002F")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x240C0C", Offset = "0x240C0C")]
public class ResonanceAudioMaterialMap : ScriptableObject
{
	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly Color[] surfaceMaterialColors;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[SerializeField]
	private ResonanceAudioRoomManager.SurfaceMaterialDictionary surfaceMaterialFromGuid;

	[Token(Token = "0x40000CE")]
	private const ResonanceAudioRoomManager.SurfaceMaterial defaultSurfaceMaterial = ResonanceAudioRoomManager.SurfaceMaterial.Transparent;

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0x49F050", Offset = "0x49F050", VA = "0x49F050")]
	public List<string> GuidList()
	{
		return null;
	}

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0x49F0DC", Offset = "0x49F0DC", VA = "0x49F0DC")]
	public ResonanceAudioRoomManager.SurfaceMaterial GetMaterialFromGuid(string guid)
	{
		return default(ResonanceAudioRoomManager.SurfaceMaterial);
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0x49F15C", Offset = "0x49F15C", VA = "0x49F15C")]
	public void AddDefaultMaterialIfGuidUnmapped(string guid)
	{
	}

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0x49F218", Offset = "0x49F218", VA = "0x49F218")]
	public ResonanceAudioMaterialMap()
	{
	}
}
[Token(Token = "0x2000030")]
public class ResonanceAudioMaterialMapper : ScriptableObject
{
	[Token(Token = "0x2000259")]
	private class UnityMaterialAcousticMeshData
	{
		[Token(Token = "0x4000DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public List<ResonanceAudioAcousticMesh> acousticMeshes;

		[Token(Token = "0x4000DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public List<int> subMeshIndices;

		[Token(Token = "0x60013A1")]
		[Address(RVA = "0x4A0B70", Offset = "0x4A0B70", VA = "0x4A0B70")]
		public UnityMaterialAcousticMeshData()
		{
		}
	}

	[Token(Token = "0x200025A")]
	private class TerrainAcousticMeshData
	{
		[Token(Token = "0x4000DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public List<ResonanceAudioAcousticMesh> acousticMeshes;

		[Token(Token = "0x60013A2")]
		[Address(RVA = "0x4A0C30", Offset = "0x4A0C30", VA = "0x4A0C30")]
		public TerrainAcousticMeshData()
		{
		}
	}

	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[SerializeField]
	private ResonanceAudioMaterialMap materialMap;

	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Dictionary<string, UnityMaterialAcousticMeshData> unityMaterialAcousticMeshDataFromGuid;

	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Dictionary<string, TerrainAcousticMeshData> terrainAcousticMeshDataFromGuid;

	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private LayerMask reverbLayerMask;

	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private bool includeNonStaticGameObjects;

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0x49FAA0", Offset = "0x49FAA0", VA = "0x49FAA0")]
	public void Initialize()
	{
	}

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0x49FB54", Offset = "0x49FB54", VA = "0x49FB54")]
	public void ApplyMaterialMapping(MeshRenderer[] meshRenderers, List<string>[] guidsForMeshRenderers, Terrain[] activeTerrains, string[] guidsForTerrains, Shader surfaceMaterialShader)
	{
	}

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0x4A0684", Offset = "0x4A0684", VA = "0x4A0684")]
	public void RenderAcousticMeshes()
	{
	}

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0x4A0738", Offset = "0x4A0738", VA = "0x4A0738")]
	public List<ResonanceAudioAcousticMesh> GetIncludedAcousticMeshes()
	{
		return null;
	}

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0x49FBC0", Offset = "0x49FBC0", VA = "0x49FBC0")]
	private void BuildUnityMaterialData(MeshRenderer[] meshRenderers, List<string>[] guidsForMeshRenderers, Shader surfaceMaterialShader)
	{
	}

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0x49FFB8", Offset = "0x49FFB8", VA = "0x49FFB8")]
	private void BuildTerrainData(Terrain[] activeTerrains, string[] guidsForTerrains, Shader surfaceMaterialShader)
	{
	}

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0x4A024C", Offset = "0x4A024C", VA = "0x4A024C")]
	private void ApplyMaterialMappingToGuids(List<string> guids)
	{
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0x4A0CBC", Offset = "0x4A0CBC", VA = "0x4A0CBC")]
	private void ApplySurfaceMaterialToGameObjects(ResonanceAudioRoomManager.SurfaceMaterial surfaceMaterial, string guid)
	{
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0x4A10F4", Offset = "0x4A10F4", VA = "0x4A10F4")]
	private void ApplySurfaceMaterialToTerrains(ResonanceAudioRoomManager.SurfaceMaterial surfaceMaterial, string guid)
	{
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0x4A03A8", Offset = "0x4A03A8", VA = "0x4A03A8")]
	private void ApplyObjectFiltering()
	{
	}

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0x4A1208", Offset = "0x4A1208", VA = "0x4A1208")]
	private bool IsIncludedByObjectFiltering(GameObject gameObject)
	{
		return default(bool);
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0x4A1290", Offset = "0x4A1290", VA = "0x4A1290")]
	public ResonanceAudioMaterialMapper()
	{
	}
}
[Token(Token = "0x2000031")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x240C7C", Offset = "0x240C7C")]
[AttributeAttribute(Name = "ExecuteInEditMode", RVA = "0x240C7C", Offset = "0x240C7C")]
public class ResonanceAudioMaterialMapperUpdater : MonoBehaviour
{
	[Token(Token = "0x200025B")]
	public delegate void RefreshMaterialMapperDelegate();

	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public RefreshMaterialMapperDelegate RefreshMaterialMapper;

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0x4A12C4", Offset = "0x4A12C4", VA = "0x4A12C4")]
	private void Update()
	{
	}

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0x4A154C", Offset = "0x4A154C", VA = "0x4A154C")]
	public ResonanceAudioMaterialMapperUpdater()
	{
	}
}
[Token(Token = "0x2000032")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x240CC4", Offset = "0x240CC4")]
[AttributeAttribute(Name = "ExecuteInEditMode", RVA = "0x240CC4", Offset = "0x240CC4")]
public class ResonanceAudioReverbProbe : MonoBehaviour
{
	[Token(Token = "0x200025C")]
	public enum RegionShape
	{
		[Token(Token = "0x4000DC0")]
		Sphere,
		[Token(Token = "0x4000DC1")]
		Box
	}

	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x241C88", Offset = "0x241C88")]
	public float[] rt60s;

	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x241CBC", Offset = "0x241CBC")]
	public float reverbGainDb;

	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x241CF0", Offset = "0x241CF0")]
	public float reverbBrightness;

	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x241D24", Offset = "0x241D24")]
	public float reverbTime;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x241D58", Offset = "0x241D58")]
	public RegionShape regionShape;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x241DB8", Offset = "0x241DB8")]
	public Vector3 boxRegionSize;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x241DEC", Offset = "0x241DEC")]
	public float sphereRegionRadius;

	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x241E20", Offset = "0x241E20")]
	public bool onlyApplyWhenVisible;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Vector3 proxyRoomPosition;

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Quaternion proxyRoomRotation;

	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Vector3 proxyRoomSize;

	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public ResonanceAudioRoomManager.SurfaceMaterial proxyRoomLeftWall;

	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public ResonanceAudioRoomManager.SurfaceMaterial proxyRoomRightWall;

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public ResonanceAudioRoomManager.SurfaceMaterial proxyRoomFloor;

	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public ResonanceAudioRoomManager.SurfaceMaterial proxyRoomCeiling;

	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public ResonanceAudioRoomManager.SurfaceMaterial proxyRoomBackWall;

	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ResonanceAudioRoomManager.SurfaceMaterial proxyRoomFrontWall;

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0x4A1698", Offset = "0x4A1698", VA = "0x4A1698")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0x4A17A8", Offset = "0x4A17A8", VA = "0x4A17A8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0x4A18B0", Offset = "0x4A18B0", VA = "0x4A18B0")]
	private void Update()
	{
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0x4A1930", Offset = "0x4A1930", VA = "0x4A1930")]
	public float GetScaledSphericalRegionRadius()
	{
		return default(float);
	}

	[Token(Token = "0x6000100")]
	[Address(RVA = "0x4A1A20", Offset = "0x4A1A20", VA = "0x4A1A20")]
	public Vector3 GetScaledBoxRegionSize()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000101")]
	[Address(RVA = "0x4A1B00", Offset = "0x4A1B00", VA = "0x4A1B00")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000102")]
	[Address(RVA = "0x4A1CEC", Offset = "0x4A1CEC", VA = "0x4A1CEC")]
	public ResonanceAudioReverbProbe()
	{
	}
}
[Token(Token = "0x2000033")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x240D30", Offset = "0x240D30")]
public class ResonanceAudioRoom : MonoBehaviour
{
	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x241E54", Offset = "0x241E54")]
	public ResonanceAudioRoomManager.SurfaceMaterial leftWall;

	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x241E88", Offset = "0x241E88")]
	public ResonanceAudioRoomManager.SurfaceMaterial rightWall;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x241EBC", Offset = "0x241EBC")]
	public ResonanceAudioRoomManager.SurfaceMaterial floor;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x241EF0", Offset = "0x241EF0")]
	public ResonanceAudioRoomManager.SurfaceMaterial ceiling;

	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x241F24", Offset = "0x241F24")]
	public ResonanceAudioRoomManager.SurfaceMaterial backWall;

	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x241F58", Offset = "0x241F58")]
	public ResonanceAudioRoomManager.SurfaceMaterial frontWall;

	[Token(Token = "0x40000EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x241F8C", Offset = "0x241F8C")]
	public float reflectivity;

	[Token(Token = "0x40000ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x241FC0", Offset = "0x241FC0")]
	public float reverbGainDb;

	[Token(Token = "0x40000EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x241FF4", Offset = "0x241FF4")]
	public float reverbBrightness;

	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x242028", Offset = "0x242028")]
	public float reverbTime;

	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x24205C", Offset = "0x24205C")]
	public Vector3 size;

	[Token(Token = "0x6000103")]
	[Address(RVA = "0x4A1E44", Offset = "0x4A1E44", VA = "0x4A1E44")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000104")]
	[Address(RVA = "0x4A1F54", Offset = "0x4A1F54", VA = "0x4A1F54")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000105")]
	[Address(RVA = "0x4A205C", Offset = "0x4A205C", VA = "0x4A205C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0x4A20DC", Offset = "0x4A20DC", VA = "0x4A20DC")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0x4A2260", Offset = "0x4A2260", VA = "0x4A2260")]
	public ResonanceAudioRoom()
	{
	}
}
[Token(Token = "0x2000034")]
public static class ResonanceAudioRoomManager
{
	[Token(Token = "0x200025D")]
	public enum SurfaceMaterial
	{
		[Token(Token = "0x4000DC3")]
		Transparent,
		[Token(Token = "0x4000DC4")]
		AcousticCeilingTiles,
		[Token(Token = "0x4000DC5")]
		BrickBare,
		[Token(Token = "0x4000DC6")]
		BrickPainted,
		[Token(Token = "0x4000DC7")]
		ConcreteBlockCoarse,
		[Token(Token = "0x4000DC8")]
		ConcreteBlockPainted,
		[Token(Token = "0x4000DC9")]
		CurtainHeavy,
		[Token(Token = "0x4000DCA")]
		FiberglassInsulation,
		[Token(Token = "0x4000DCB")]
		GlassThin,
		[Token(Token = "0x4000DCC")]
		GlassThick,
		[Token(Token = "0x4000DCD")]
		Grass,
		[Token(Token = "0x4000DCE")]
		LinoleumOnConcrete,
		[Token(Token = "0x4000DCF")]
		Marble,
		[Token(Token = "0x4000DD0")]
		Metal,
		[Token(Token = "0x4000DD1")]
		ParquetOnConcrete,
		[Token(Token = "0x4000DD2")]
		PlasterRough,
		[Token(Token = "0x4000DD3")]
		PlasterSmooth,
		[Token(Token = "0x4000DD4")]
		PlywoodPanel,
		[Token(Token = "0x4000DD5")]
		PolishedConcreteOrTile,
		[Token(Token = "0x4000DD6")]
		Sheetrock,
		[Token(Token = "0x4000DD7")]
		WaterOrIceSurface,
		[Token(Token = "0x4000DD8")]
		WoodCeiling,
		[Token(Token = "0x4000DD9")]
		WoodPanel
	}

	[Serializable]
	[Token(Token = "0x200025E")]
	public class SurfaceMaterialDictionary : Dictionary<string, SurfaceMaterial>, ISerializationCallbackReceiver
	{
		[Token(Token = "0x4000DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private List<string> guids;

		[Token(Token = "0x4000DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private List<SurfaceMaterial> surfaceMaterials;

		[Token(Token = "0x60013A7")]
		[Address(RVA = "0x4A3A98", Offset = "0x4A3A98", VA = "0x4A3A98")]
		public SurfaceMaterialDictionary()
		{
		}

		[Token(Token = "0x60013A8")]
		[Address(RVA = "0x4A3B64", Offset = "0x4A3B64", VA = "0x4A3B64", Slot = "35")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x60013A9")]
		[Address(RVA = "0x4A3D50", Offset = "0x4A3D50", VA = "0x4A3D50", Slot = "36")]
		public void OnAfterDeserialize()
		{
		}
	}

	[Token(Token = "0x200025F")]
	private struct RoomEffectsRegion
	{
		[Token(Token = "0x4000DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ResonanceAudioRoom room;

		[Token(Token = "0x4000DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ResonanceAudioReverbProbe reverbProbe;

		[Token(Token = "0x60013AA")]
		[Address(RVA = "0x2C1388", Offset = "0x2C1388", VA = "0x2C1388")]
		public RoomEffectsRegion(ResonanceAudioRoom room, ResonanceAudioReverbProbe reverbProbe)
		{
		}
	}

	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<RoomEffectsRegion> roomEffectsRegions;

	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static Bounds bounds;

	[Token(Token = "0x6000108")]
	[Address(RVA = "0x4A2340", Offset = "0x4A2340", VA = "0x4A2340")]
	public static float ComputeRoomEffectsGain(Vector3 sourcePosition)
	{
		return default(float);
	}

	[Token(Token = "0x6000109")]
	[Address(RVA = "0x4A1EC4", Offset = "0x4A1EC4", VA = "0x4A1EC4")]
	public static void UpdateRoom(ResonanceAudioRoom room)
	{
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0x4A1FD4", Offset = "0x4A1FD4", VA = "0x4A1FD4")]
	public static void RemoveRoom(ResonanceAudioRoom room)
	{
	}

	[Token(Token = "0x600010B")]
	[Address(RVA = "0x4A1718", Offset = "0x4A1718", VA = "0x4A1718")]
	public static void UpdateReverbProbe(ResonanceAudioReverbProbe reverbProbe)
	{
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0x4A1828", Offset = "0x4A1828", VA = "0x4A1828")]
	public static void RemoveReverbProbe(ResonanceAudioReverbProbe reverbProbe)
	{
	}

	[Token(Token = "0x600010D")]
	[Address(RVA = "0x4A2E48", Offset = "0x4A2E48", VA = "0x4A2E48")]
	private static void UpdateRoomEffectsRegions(ResonanceAudioRoom room, bool isEnabled)
	{
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0x4A36B0", Offset = "0x4A36B0", VA = "0x4A36B0")]
	private static void UpdateRoomEffectsRegions(ResonanceAudioReverbProbe reverbProbe, bool isEnabled)
	{
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0x4A30E4", Offset = "0x4A30E4", VA = "0x4A30E4")]
	private static void UpdateRoomEffects()
	{
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0x4A2A58", Offset = "0x4A2A58", VA = "0x4A2A58")]
	private static float ComputeRoomEffectsAttenuation(float distanceToRoom)
	{
		return default(float);
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0x4A2AEC", Offset = "0x4A2AEC", VA = "0x4A2AEC")]
	private static bool IsListenerInsideRoom(ResonanceAudioRoom room)
	{
		return default(bool);
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0x4A3308", Offset = "0x4A3308", VA = "0x4A3308")]
	private static bool IsListenerInsideVisibleReverbProbe(ResonanceAudioReverbProbe reverbProbe)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000035")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x240D80", Offset = "0x240D80")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x240D80", Offset = "0x240D80")]
[AttributeAttribute(Name = "ExecuteInEditMode", RVA = "0x240D80", Offset = "0x240D80")]
public class ResonanceAudioSource : MonoBehaviour
{
	[Token(Token = "0x2000260")]
	public enum Quality
	{
		[Token(Token = "0x4000DDF")]
		Stereo,
		[Token(Token = "0x4000DE0")]
		Low,
		[Token(Token = "0x4000DE1")]
		High
	}

	[Token(Token = "0x2000261")]
	private enum EffectData
	{
		[Token(Token = "0x4000DE3")]
		Id,
		[Token(Token = "0x4000DE4")]
		DistanceAttenuation,
		[Token(Token = "0x4000DE5")]
		RoomEffectsGain,
		[Token(Token = "0x4000DE6")]
		Gain,
		[Token(Token = "0x4000DE7")]
		DirectivityAlpha,
		[Token(Token = "0x4000DE8")]
		DirectivitySharpness,
		[Token(Token = "0x4000DE9")]
		ListenerDirectivityAlpha,
		[Token(Token = "0x4000DEA")]
		ListenerDirectivitySharpness,
		[Token(Token = "0x4000DEB")]
		Occlusion,
		[Token(Token = "0x4000DEC")]
		Quality,
		[Token(Token = "0x4000DED")]
		NearFieldEffectGain,
		[Token(Token = "0x4000DEE")]
		Volume
	}

	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x242090", Offset = "0x242090")]
	public bool bypassRoomEffects;

	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2420C4", Offset = "0x2420C4")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2420C4", Offset = "0x2420C4")]
	public float directivityAlpha;

	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x242114", Offset = "0x242114")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x242114", Offset = "0x242114")]
	public float directivitySharpness;

	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x242168", Offset = "0x242168")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x242168", Offset = "0x242168")]
	public float listenerDirectivityAlpha;

	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2421B8", Offset = "0x2421B8")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2421B8", Offset = "0x2421B8")]
	public float listenerDirectivitySharpness;

	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x24220C", Offset = "0x24220C")]
	public float gainDb;

	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x242240", Offset = "0x242240")]
	public bool nearFieldEffectEnabled;

	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x242274", Offset = "0x242274")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x242274", Offset = "0x242274")]
	public float nearFieldEffectGain;

	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2422C8", Offset = "0x2422C8")]
	public bool occlusionEnabled;

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2422FC", Offset = "0x2422FC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2422FC", Offset = "0x2422FC")]
	public float occlusionIntensity;

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x242350", Offset = "0x242350")]
	public Quality quality;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x242384", Offset = "0x242384")]
	private AudioSource <audioSource>k__BackingField;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float currentOcclusion;

	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float nextOcclusionUpdate;

	[Token(Token = "0x17000025")]
	public AudioSource audioSource
	{
		[Token(Token = "0x6000114")]
		[Address(RVA = "0x4A3E60", Offset = "0x4A3E60", VA = "0x4A3E60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2485F0", Offset = "0x2485F0")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000115")]
		[Address(RVA = "0x4A3E68", Offset = "0x4A3E68", VA = "0x4A3E68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248600", Offset = "0x248600")]
		private set
		{
		}
	}

	[Token(Token = "0x6000116")]
	[Address(RVA = "0x4A3E70", Offset = "0x4A3E70", VA = "0x4A3E70")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000117")]
	[Address(RVA = "0x4A3ED8", Offset = "0x4A3ED8", VA = "0x4A3ED8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0x4A3FD8", Offset = "0x4A3FD8", VA = "0x4A3FD8")]
	private void UpdateSource()
	{
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0x4A446C", Offset = "0x4A446C", VA = "0x4A446C")]
	public ResonanceAudioSource()
	{
	}
}
[Token(Token = "0x2000036")]
public class Arrow : MonoBehaviour
{
	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float textureSpeed;

	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float lifeSpan;

	[Token(Token = "0x600011A")]
	[Address(RVA = "0x4EE588", Offset = "0x4EE588", VA = "0x4EE588")]
	private void Update()
	{
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0x4EE794", Offset = "0x4EE794", VA = "0x4EE794")]
	public Arrow()
	{
	}
}
[Token(Token = "0x2000037")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x240E4C", Offset = "0x240E4C")]
public class CursorManager : MonoBehaviour
{
	[Token(Token = "0x2000262")]
	public enum AxisPair
	{
		[Token(Token = "0x4000DF0")]
		XY,
		[Token(Token = "0x4000DF1")]
		YZ,
		[Token(Token = "0x4000DF2")]
		XZ
	}

	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static CursorManager instance;

	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x242394", Offset = "0x242394")]
	public AudioClip clickAudio;

	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject clickMarker;

	[Token(Token = "0x4000106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public GameObject clickEffect;

	[Token(Token = "0x4000107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x2423D0", Offset = "0x2423D0")]
	public int markerLimit;

	[Token(Token = "0x4000108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool limitMarkers;

	[Token(Token = "0x4000109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "HideInInspector", RVA = "0x24240C", Offset = "0x24240C")]
	public List<GameObject> activeMarkers;

	[Token(Token = "0x400010A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool destroyOldestMarker;

	[Token(Token = "0x400010B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x24241C", Offset = "0x24241C")]
	public bool hideMouseCursor;

	[Token(Token = "0x400010C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AxisPair axisPair;

	[Token(Token = "0x400010D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Transform effectContainer;

	[Token(Token = "0x600011C")]
	[Address(RVA = "0x4FD494", Offset = "0x4FD494", VA = "0x4FD494")]
	private void Awake()
	{
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0x4FD634", Offset = "0x4FD634", VA = "0x4FD634")]
	private void Start()
	{
	}

	[Token(Token = "0x600011E")]
	[Address(RVA = "0x4FD670", Offset = "0x4FD670", VA = "0x4FD670")]
	private void Update()
	{
	}

	[Token(Token = "0x600011F")]
	[Address(RVA = "0x4FDA84", Offset = "0x4FDA84", VA = "0x4FDA84")]
	public void GenerateMarker()
	{
	}

	[Token(Token = "0x6000120")]
	[Address(RVA = "0x4FDF7C", Offset = "0x4FDF7C", VA = "0x4FDF7C")]
	public CursorManager()
	{
	}
}
[Token(Token = "0x2000038")]
public class DestroyEmpty : MonoBehaviour
{
	[Token(Token = "0x6000121")]
	[Address(RVA = "0x4FF4F8", Offset = "0x4FF4F8", VA = "0x4FF4F8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000122")]
	[Address(RVA = "0x4FF5C0", Offset = "0x4FF5C0", VA = "0x4FF5C0")]
	public DestroyEmpty()
	{
	}
}
[Token(Token = "0x2000039")]
public class MarkerBehaviour : MonoBehaviour
{
	[Token(Token = "0x400010E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private bool canSpin;

	[Token(Token = "0x400010F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float spinRate;

	[Token(Token = "0x4000110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private float currentScale;

	[Token(Token = "0x4000111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float initialScale;

	[Token(Token = "0x4000112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool canScale;

	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float scalePulseAmount;

	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float scalePulseSpeed;

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool isShrinking;

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float shrinkScale;

	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float scaleThreshold;

	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float markerLifespan;

	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float shrinkRate;

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float timer;

	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float markerTimer;

	[Token(Token = "0x6000123")]
	[Address(RVA = "0x8C1F20", Offset = "0x8C1F20", VA = "0x8C1F20")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000124")]
	[Address(RVA = "0x8C1F68", Offset = "0x8C1F68", VA = "0x8C1F68")]
	private void Update()
	{
	}

	[Token(Token = "0x6000125")]
	[Address(RVA = "0x8C2364", Offset = "0x8C2364", VA = "0x8C2364")]
	public MarkerBehaviour()
	{
	}
}
[Token(Token = "0x200003A")]
public class Spinner : MonoBehaviour
{
	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float spinRate;

	[Token(Token = "0x6000126")]
	[Address(RVA = "0xC6D7E0", Offset = "0xC6D7E0", VA = "0xC6D7E0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000127")]
	[Address(RVA = "0xC6D84C", Offset = "0xC6D84C", VA = "0xC6D84C")]
	public Spinner()
	{
	}
}
[Token(Token = "0x200003B")]
public class FlickerCandleLight : MonoBehaviour
{
	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Light candleLight;

	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float flickerSpeed;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float maxLightIntensity;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float xPosition;

	[Token(Token = "0x6000128")]
	[Address(RVA = "0x50F6A8", Offset = "0x50F6A8", VA = "0x50F6A8")]
	private void FlickerLight(Light candleLight)
	{
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0x50F794", Offset = "0x50F794", VA = "0x50F794")]
	private void Update()
	{
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0x50F79C", Offset = "0x50F79C", VA = "0x50F79C")]
	public FlickerCandleLight()
	{
	}
}
[Token(Token = "0x200003C")]
public class BonesOnlyBlendSystem : BlendSystem
{
	[Token(Token = "0x600012B")]
	[Address(RVA = "0x4F6CB0", Offset = "0x4F6CB0", VA = "0x4F6CB0", Slot = "6")]
	public override void OnVariableChanged()
	{
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0x4F6CBC", Offset = "0x4F6CBC", VA = "0x4F6CBC")]
	public BonesOnlyBlendSystem()
	{
	}
}
[Serializable]
[Token(Token = "0x200003D")]
public class GestureInstance
{
	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[SerializeField]
	public string gesture;

	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[SerializeField]
	public AnimationClip clip;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	public string triggerName;

	[Token(Token = "0x600012D")]
	[Address(RVA = "0x8BCEE4", Offset = "0x8BCEE4", VA = "0x8BCEE4")]
	public GestureInstance(string gesture, AnimationClip clip, string triggerName)
	{
	}

	[Token(Token = "0x600012E")]
	[Address(RVA = "0x8BCF14", Offset = "0x8BCF14", VA = "0x8BCF14")]
	public bool IsValid(Animator animator)
	{
		return default(bool);
	}
}
[Token(Token = "0x200003E")]
public class sceneSwitch : MonoBehaviour
{
	[Token(Token = "0x600012F")]
	[Address(RVA = "0x1016B24", Offset = "0x1016B24", VA = "0x1016B24")]
	public sceneSwitch()
	{
	}
}
[Token(Token = "0x200003F")]
public class SynthesisArcadeObject : MonoBehaviour
{
	[Token(Token = "0x2000263")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2417AC", Offset = "0x2417AC")]
	private sealed class <EnableLicensingCheckTask>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int <>1__state;

		[Token(Token = "0x4000DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private object <>2__current;

		[Token(Token = "0x4000DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SynthesisArcadeObject <>4__this;

		[Token(Token = "0x4000DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private ArcadeInterface <svrInterface>5__2;

		[Token(Token = "0x170001BA")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60013AE")]
			[Address(RVA = "0x3DB488", Offset = "0x3DB488", VA = "0x3DB488", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001BB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60013B0")]
			[Address(RVA = "0x3DB518", Offset = "0x3DB518", VA = "0x3DB518", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013AB")]
		[Address(RVA = "0x3DB178", Offset = "0x3DB178", VA = "0x3DB178")]
		[DebuggerHidden]
		public <EnableLicensingCheckTask>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x60013AC")]
		[Address(RVA = "0x3DB198", Offset = "0x3DB198", VA = "0x3DB198", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60013AD")]
		[Address(RVA = "0x3DB19C", Offset = "0x3DB19C", VA = "0x3DB19C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60013AF")]
		[Address(RVA = "0x3DB490", Offset = "0x3DB490", VA = "0x3DB490", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static SynthesisArcadeObject _instance;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Coroutine co;

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string synthesisGameId;

	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private bool init;

	[Token(Token = "0x17000026")]
	public static SynthesisArcadeObject Instance
	{
		[Token(Token = "0x6000130")]
		[Address(RVA = "0xC6D854", Offset = "0xC6D854", VA = "0xC6D854")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0xC6D8B8", Offset = "0xC6D8B8", VA = "0xC6D8B8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0xC6D94C", Offset = "0xC6D94C", VA = "0xC6D94C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x248610", Offset = "0x248610")]
	private IEnumerator EnableLicensingCheckTask()
	{
		return null;
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0xC6D9D4", Offset = "0xC6D9D4", VA = "0xC6D9D4")]
	protected string filehash(string fileName)
	{
		return null;
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0xC6DCF4", Offset = "0xC6DCF4", VA = "0xC6DCF4")]
	public SynthesisArcadeObject()
	{
	}
}
[Token(Token = "0x2000040")]
public class test : StateMachineBehaviour
{
	[Token(Token = "0x6000135")]
	[Address(RVA = "0x1016B2C", Offset = "0x1016B2C", VA = "0x1016B2C")]
	public test()
	{
	}
}
[Token(Token = "0x2000041")]
public class LogicArcsAndColumns : MonoBehaviour
{
	[Token(Token = "0x6000136")]
	[Address(RVA = "0x8BF010", Offset = "0x8BF010", VA = "0x8BF010")]
	private void Start()
	{
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0x8BF014", Offset = "0x8BF014", VA = "0x8BF014")]
	private void Update()
	{
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0x8BF018", Offset = "0x8BF018", VA = "0x8BF018")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000139")]
	[Address(RVA = "0x8BFB6C", Offset = "0x8BFB6C", VA = "0x8BFB6C")]
	public LogicArcsAndColumns()
	{
	}
}
[Token(Token = "0x2000042")]
public class LogicCollidingSphere : MonoBehaviour
{
	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Rigidbody ObjectToDrop;

	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool bDropped;

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private int nChunksDetached;

	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int nChunkCollisions;

	[Token(Token = "0x600013A")]
	[Address(RVA = "0x8BFB74", Offset = "0x8BFB74", VA = "0x8BFB74")]
	private void Start()
	{
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0x8BFB84", Offset = "0x8BFB84", VA = "0x8BFB84")]
	private void Update()
	{
	}

	[Token(Token = "0x600013C")]
	[Address(RVA = "0x8BFC10", Offset = "0x8BFC10", VA = "0x8BFC10")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600013D")]
	[Address(RVA = "0x8C063C", Offset = "0x8C063C", VA = "0x8C063C")]
	private void OnChunkDetach(FracturedChunk.CollisionInfo info)
	{
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0x8C0674", Offset = "0x8C0674", VA = "0x8C0674")]
	private void OnFreeChunkCollision(FracturedChunk.CollisionInfo info)
	{
	}

	[Token(Token = "0x600013F")]
	[Address(RVA = "0x8C06AC", Offset = "0x8C06AC", VA = "0x8C06AC")]
	public LogicCollidingSphere()
	{
	}
}
[Token(Token = "0x2000043")]
public class LogicCompoundObject : MonoBehaviour
{
	[Token(Token = "0x6000140")]
	[Address(RVA = "0x8C06B4", Offset = "0x8C06B4", VA = "0x8C06B4")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000141")]
	[Address(RVA = "0x8C1068", Offset = "0x8C1068", VA = "0x8C1068")]
	public LogicCompoundObject()
	{
	}
}
[Token(Token = "0x2000044")]
public class LogicExplodingFloor : MonoBehaviour
{
	[Token(Token = "0x6000142")]
	[Address(RVA = "0x8C1070", Offset = "0x8C1070", VA = "0x8C1070")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000143")]
	[Address(RVA = "0x8C1508", Offset = "0x8C1508", VA = "0x8C1508")]
	public LogicExplodingFloor()
	{
	}
}
[Token(Token = "0x2000045")]
public class LogicExplodingGoblin : MonoBehaviour
{
	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float ExplosionForce;

	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public FracturedObject TargetFracturedObject;

	[Token(Token = "0x6000144")]
	[Address(RVA = "0x8C1510", Offset = "0x8C1510", VA = "0x8C1510")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000145")]
	[Address(RVA = "0x8C1C4C", Offset = "0x8C1C4C", VA = "0x8C1C4C")]
	public LogicExplodingGoblin()
	{
	}
}
[Token(Token = "0x2000046")]
public class LogicGlobalFracturing : MonoBehaviour
{
	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "HideInInspector", RVA = "0x242464", Offset = "0x242464")]
	public static bool HelpVisible;

	[Token(Token = "0x6000146")]
	[Address(RVA = "0x8C1C60", Offset = "0x8C1C60", VA = "0x8C1C60")]
	private void Start()
	{
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0x8BF85C", Offset = "0x8BF85C", VA = "0x8BF85C")]
	public static void GlobalGUI()
	{
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0x8C1CF0", Offset = "0x8C1CF0", VA = "0x8C1CF0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0x8C1DE0", Offset = "0x8C1DE0", VA = "0x8C1DE0")]
	public LogicGlobalFracturing()
	{
	}
}
[Token(Token = "0x2000047")]
public class UltimateFracturingFPS : MonoBehaviour
{
	[Token(Token = "0x2000264")]
	public enum Mode
	{
		[Token(Token = "0x4000DF8")]
		ShootObjects,
		[Token(Token = "0x4000DF9")]
		ExplodeRaycast
	}

	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Mode ShootMode;

	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float MouseSpeed;

	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Texture HUDTexture;

	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float HUDSize;

	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Color HUDColorNormal;

	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Color HUDColorRaycast;

	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Transform Weapon;

	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioClip AudioWeaponShot;

	[Token(Token = "0x4000137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float WeaponShotVolume;

	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float ExplosionForce;

	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float ExplosionRadius;

	[Token(Token = "0x400013A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float RecoilDuration;

	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float RecoilIntensity;

	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject ObjectToShoot;

	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float InitialObjectSpeed;

	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float ObjectScale;

	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float ObjectMass;

	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float ObjectLife;

	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector3 m_v3MousePosition;

	[Token(Token = "0x4000142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool m_bRaycastFound;

	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float m_fRecoilTimer;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Vector3 m_v3InitialWeaponPos;

	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private Quaternion m_qInitialWeaponRot;

	[Token(Token = "0x600014B")]
	[Address(RVA = "0x1012CE4", Offset = "0x1012CE4", VA = "0x1012CE4")]
	private void Start()
	{
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0x1012E0C", Offset = "0x1012E0C", VA = "0x1012E0C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600014D")]
	[Address(RVA = "0x10130D0", Offset = "0x10130D0", VA = "0x10130D0")]
	private void Update()
	{
	}

	[Token(Token = "0x600014E")]
	[Address(RVA = "0x1013CC8", Offset = "0x1013CC8", VA = "0x1013CC8")]
	public UltimateFracturingFPS()
	{
	}
}
[Token(Token = "0x2000048")]
public class CheckDynamicCollision : MonoBehaviour
{
	[Token(Token = "0x600014F")]
	[Address(RVA = "0x4F737C", Offset = "0x4F737C", VA = "0x4F737C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000150")]
	[Address(RVA = "0x4F7794", Offset = "0x4F7794", VA = "0x4F7794")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000151")]
	[Address(RVA = "0x4F7614", Offset = "0x4F7614", VA = "0x4F7614")]
	private void EnableObjectColliders(GameObject chunk, bool bEnable)
	{
	}

	[Token(Token = "0x6000152")]
	private static void SearchForAllComponentsInHierarchy<T>(GameObject current, ref List<T> listOut) where T : Component
	{
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0x4F7BF0", Offset = "0x4F7BF0", VA = "0x4F7BF0")]
	public CheckDynamicCollision()
	{
	}
}
[Token(Token = "0x2000049")]
public class ExplosionSource : MonoBehaviour
{
	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float InfluenceRadius;

	[Token(Token = "0x4000147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float Force;

	[Token(Token = "0x4000148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool CheckStructureIntegrity;

	[Token(Token = "0x4000149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
	public bool MoveManually;

	[Token(Token = "0x400014A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 PosStart;

	[Token(Token = "0x400014B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 PosEnd;

	[Token(Token = "0x400014C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float MoveDuration;

	[Token(Token = "0x400014D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private FracturedObject[] m_aFracturedObjects;

	[Token(Token = "0x400014E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float m_fStartTime;

	[Token(Token = "0x6000154")]
	[Address(RVA = "0x4FFB34", Offset = "0x4FFB34", VA = "0x4FFB34")]
	private void Start()
	{
	}

	[Token(Token = "0x6000155")]
	[Address(RVA = "0x4FFC28", Offset = "0x4FFC28", VA = "0x4FFC28")]
	private void Update()
	{
	}

	[Token(Token = "0x6000156")]
	[Address(RVA = "0x4FFE6C", Offset = "0x4FFE6C", VA = "0x4FFE6C")]
	public ExplosionSource()
	{
	}
}
[Serializable]
[Token(Token = "0x200004A")]
[AttributeAttribute(Name = "ExecuteInEditMode", RVA = "0x240EC4", Offset = "0x240EC4")]
public class FracturedChunk : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000265")]
	public class AdjacencyInfo
	{
		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public FracturedChunk chunk;

		[Token(Token = "0x4000DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float fArea;

		[Token(Token = "0x60013B1")]
		[Address(RVA = "0x8B7748", Offset = "0x8B7748", VA = "0x8B7748")]
		public AdjacencyInfo(FracturedChunk chunk, float fArea)
		{
		}
	}

	[Token(Token = "0x2000266")]
	public class CollisionInfo
	{
		[Token(Token = "0x4000DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public FracturedChunk chunk;

		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 collisionPoint;

		[Token(Token = "0x4000DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool bIsMain;

		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool bCancelCollisionEvent;

		[Token(Token = "0x60013B2")]
		[Address(RVA = "0x8B7770", Offset = "0x8B7770", VA = "0x8B7770")]
		public CollisionInfo(FracturedChunk chunk, Vector3 collisionPoint, bool bIsMain)
		{
		}
	}

	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public FracturedObject FracturedObjectSource;

	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int SplitSubMeshIndex;

	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool DontDeleteAfterBroken;

	[Token(Token = "0x4000152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
	public bool IsSupportChunk;

	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
	public bool IsNonSupportedChunk;

	[Token(Token = "0x4000154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17")]
	public bool IsDetachedChunk;

	[Token(Token = "0x4000155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float RelativeVolume;

	[Token(Token = "0x4000156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float Volume;

	[Token(Token = "0x4000157")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool HasConcaveCollider;

	[Token(Token = "0x4000158")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float PreviewDecompositionValue;

	[Token(Token = "0x4000159")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Color RandomMaterialColor;

	[Token(Token = "0x400015A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool Visited;

	[Token(Token = "0x400015B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public List<AdjacencyInfo> ListAdjacentChunks;

	[Token(Token = "0x400015C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Vector3 m_v3InitialLocalPosition;

	[Token(Token = "0x400015D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private Quaternion m_qInitialLocalRotation;

	[Token(Token = "0x400015E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SerializeField]
	private Vector3 m_v3InitialLocalScale;

	[Token(Token = "0x400015F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private bool m_bInitialLocalRotScaleInitialized;

	[Token(Token = "0x4000160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private List<AdjacencyInfo> ListAdjacentChunksCopy;

	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float m_fInvisibleTimer;

	[Token(Token = "0x4000162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private bool m_bNonSupportedChunkStored;

	[Token(Token = "0x6000157")]
	[Address(RVA = "0x50FC08", Offset = "0x50FC08", VA = "0x50FC08")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000158")]
	[Address(RVA = "0x50FD9C", Offset = "0x50FD9C", VA = "0x50FD9C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000159")]
	[Address(RVA = "0x50FF2C", Offset = "0x50FF2C", VA = "0x50FF2C")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600015A")]
	[Address(RVA = "0x510BE0", Offset = "0x510BE0", VA = "0x510BE0")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600015B")]
	[Address(RVA = "0x51009C", Offset = "0x51009C", VA = "0x51009C")]
	private void HandleCollision(Collider other, Vector3 v3CollisionPos, float relativeSpeed)
	{
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0x510DF8", Offset = "0x510DF8", VA = "0x510DF8")]
	public bool IsDestructibleChunk()
	{
		return default(bool);
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0x5112EC", Offset = "0x5112EC", VA = "0x5112EC")]
	public void ResetChunk(FracturedObject fracturedObjectSource)
	{
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0x511540", Offset = "0x511540", VA = "0x511540")]
	public void Impact(Vector3 v3Position, float fExplosionForce, float fRadius, bool bAlsoImpactFreeChunks)
	{
	}

	[Token(Token = "0x600015F")]
	[Address(RVA = "0x511A14", Offset = "0x511A14", VA = "0x511A14")]
	public void OnCreateFromFracturedObject(FracturedObject fracturedComponent, int nSplitSubMeshIndex)
	{
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0x511B5C", Offset = "0x511B5C", VA = "0x511B5C")]
	public void UpdatePreviewDecompositionPosition()
	{
	}

	[Token(Token = "0x6000161")]
	[Address(RVA = "0x511D1C", Offset = "0x511D1C", VA = "0x511D1C")]
	public void ConnectTo(FracturedChunk chunk, float fArea)
	{
	}

	[Token(Token = "0x6000162")]
	[Address(RVA = "0x5120FC", Offset = "0x5120FC", VA = "0x5120FC")]
	public void DisconnectFrom(FracturedChunk chunk)
	{
	}

	[Token(Token = "0x6000163")]
	[Address(RVA = "0x511E98", Offset = "0x511E98", VA = "0x511E98")]
	public bool IsConnectedTo(FracturedChunk chunk)
	{
		return default(bool);
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0x510FE0", Offset = "0x510FE0", VA = "0x510FE0")]
	public void DetachFromObject(bool bCheckStructureIntegrity = true)
	{
	}

	[Token(Token = "0x6000165")]
	[Address(RVA = "0x512398", Offset = "0x512398", VA = "0x512398")]
	private void RemoveConnectionInfo()
	{
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0x510EE8", Offset = "0x510EE8", VA = "0x510EE8")]
	public List<FracturedChunk> ComputeRandomConnectionBreaks()
	{
		return null;
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0x5127C4", Offset = "0x5127C4", VA = "0x5127C4")]
	private static void ComputeRandomConnectionBreaksRecursive(FracturedChunk chunk, List<FracturedChunk> listBreaksOut, int nLevel)
	{
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0x512B10", Offset = "0x512B10", VA = "0x512B10")]
	public static FracturedChunk ChunkRaycast(Vector3 v3Pos, Vector3 v3Forward, out RaycastHit hitInfo)
	{
		return null;
	}

	[Token(Token = "0x6000169")]
	[Address(RVA = "0x512D40", Offset = "0x512D40", VA = "0x512D40")]
	public FracturedChunk()
	{
	}
}
[Token(Token = "0x200004B")]
[AttributeAttribute(Name = "ExecuteInEditMode", RVA = "0x240ED4", Offset = "0x240ED4")]
public class FracturedObject : MonoBehaviour
{
	[Token(Token = "0x2000267")]
	public enum EFracturePattern
	{
		[Token(Token = "0x4000E01")]
		BSP,
		[Token(Token = "0x4000E02")]
		Voronoi
	}

	[Serializable]
	[Token(Token = "0x2000268")]
	public class PrefabInfo
	{
		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float MinLifeTime;

		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float MaxLifeTime;

		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject GameObject;

		[Token(Token = "0x60013B3")]
		[Address(RVA = "0x8BCEAC", Offset = "0x8BCEAC", VA = "0x8BCEAC")]
		public PrefabInfo()
		{
		}
	}

	[Token(Token = "0x2000269")]
	public enum ECCAlgorithm
	{
		[Token(Token = "0x4000E07")]
		Fast,
		[Token(Token = "0x4000E08")]
		Normal,
		[Token(Token = "0x4000E09")]
		Legacy
	}

	[Token(Token = "0x4000163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool GUIExpandMain;

	[Token(Token = "0x4000164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject SourceObject;

	[Token(Token = "0x4000165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool GenerateIslands;

	[Token(Token = "0x4000166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
	public bool GenerateChunkConnectionInfo;

	[Token(Token = "0x4000167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
	public bool StartStatic;

	[Token(Token = "0x4000168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float ChunkConnectionMinArea;

	[Token(Token = "0x4000169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ChunkConnectionStrength;

	[Token(Token = "0x400016A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float ChunkHorizontalRadiusSupportStrength;

	[Token(Token = "0x400016B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool SupportChunksAreIndestructible;

	[Token(Token = "0x400016C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float ChunkIslandConnectionMaxDistance;

	[Token(Token = "0x400016D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float TotalMass;

	[Token(Token = "0x400016E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public PhysicMaterial ChunkPhysicMaterial;

	[Token(Token = "0x400016F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float MinColliderVolumeForBox;

	[Token(Token = "0x4000170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float CapPrecisionFix;

	[Token(Token = "0x4000171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool InvertCapNormals;

	[Token(Token = "0x4000172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	public bool GUIExpandSplits;

	[Token(Token = "0x4000173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public EFracturePattern FracturePattern;

	[Token(Token = "0x4000174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool VoronoiVolumeOptimization;

	[Token(Token = "0x4000175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	public bool VoronoiProximityOptimization;

	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
	public bool VoronoiMultithreading;

	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int VoronoiCellsXCount;

	[Token(Token = "0x4000178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public int VoronoiCellsYCount;

	[Token(Token = "0x4000179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public int VoronoiCellsZCount;

	[Token(Token = "0x400017A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float VoronoiCellsXSizeVariation;

	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float VoronoiCellsYSizeVariation;

	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float VoronoiCellsZSizeVariation;

	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public int GenerateNumChunks;

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool SplitsWorldSpace;

	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	public bool SplitRegularly;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float SplitXProbability;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float SplitYProbability;

	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float SplitZProbability;

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float SplitSizeVariation;

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float SplitXVariation;

	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float SplitYVariation;

	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float SplitZVariation;

	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public Material SplitMaterial;

	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float SplitMappingTileU;

	[Token(Token = "0x4000189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public float SplitMappingTileV;

	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public bool GUIExpandEvents;

	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public float EventDetachMinMass;

	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public float EventDetachMinVelocity;

	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public float EventDetachExitForce;

	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public float EventDetachUpwardsModifier;

	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public AudioClip EventDetachSound;

	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public PrefabInfo[] EventDetachPrefabsArray;

	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public string EventDetachCollisionCallMethod;

	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public GameObject EventDetachCollisionCallGameObject;

	[Token(Token = "0x4000193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public float EventDetachedMinLifeTime;

	[Token(Token = "0x4000194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public float EventDetachedMaxLifeTime;

	[Token(Token = "0x4000195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	public float EventDetachedOffscreenLifeTime;

	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public float EventDetachedMinMass;

	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public float EventDetachedMinVelocity;

	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public int EventDetachedMaxSounds;

	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public AudioClip[] EventDetachedSoundArray;

	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public int EventDetachedMaxPrefabs;

	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public PrefabInfo[] EventDetachedPrefabsArray;

	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public string EventDetachedCollisionCallMethod;

	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	public GameObject EventDetachedCollisionCallGameObject;

	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public AudioClip EventExplosionSound;

	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public int EventExplosionPrefabsInstanceCount;

	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public PrefabInfo[] EventExplosionPrefabsArray;

	[Token(Token = "0x40001A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	public AudioClip EventImpactSound;

	[Token(Token = "0x40001A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public PrefabInfo[] EventImpactPrefabsArray;

	[Token(Token = "0x40001A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	public string EventDetachedAnyCallMethod;

	[Token(Token = "0x40001A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public GameObject EventDetachedAnyCallGameObject;

	[Token(Token = "0x40001A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	public bool GUIExpandSupportPlanes;

	[Token(Token = "0x40001A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public int RandomSeed;

	[Token(Token = "0x40001A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	public float DecomposePreview;

	[Token(Token = "0x40001A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public bool AlwaysComputeColliders;

	[Token(Token = "0x40001A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x109")]
	public bool ShowChunkConnectionLines;

	[Token(Token = "0x40001AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10A")]
	public bool ShowChunkColoredState;

	[Token(Token = "0x40001AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10B")]
	public bool ShowChunkColoredRandomly;

	[Token(Token = "0x40001AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	public bool SaveMeshDataToAsset;

	[Token(Token = "0x40001AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public string MeshAssetDataFile;

	[Token(Token = "0x40001AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	public bool Verbose;

	[Token(Token = "0x40001AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x115")]
	public bool IntegrateWithConcaveCollider;

	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public ECCAlgorithm ConcaveColliderAlgorithm;

	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	public int ConcaveColliderMaxHulls;

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public int ConcaveColliderMaxHullVertices;

	[Token(Token = "0x40001B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	public int ConcaveColliderLegacySteps;

	[Token(Token = "0x40001B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[AttributeAttribute(Name = "HideInInspector", RVA = "0x2424B4", Offset = "0x2424B4")]
	public List<SupportPlane> ListSupportPlanes;

	[Token(Token = "0x40001B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	[AttributeAttribute(Name = "HideInInspector", RVA = "0x2424C4", Offset = "0x2424C4")]
	public List<FracturedChunk> ListFracturedChunks;

	[Token(Token = "0x40001B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[AttributeAttribute(Name = "HideInInspector", RVA = "0x2424D4", Offset = "0x2424D4")]
	public GameObject SingleMeshObject;

	[Token(Token = "0x40001B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	[AttributeAttribute(Name = "HideInInspector", RVA = "0x2424E4", Offset = "0x2424E4")]
	public bool IsUsingSingleMeshObjectDraw;

	[Token(Token = "0x40001B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[AttributeAttribute(Name = "HideInInspector", RVA = "0x2424F4", Offset = "0x2424F4")]
	public float DecomposeRadius;

	[Token(Token = "0x40001B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Color GizmoColorSupport;

	[Token(Token = "0x40001BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Color GizmoColorNonSupport;

	[Token(Token = "0x40001BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	private bool m_bCheckDetachNonSupportedChunkds;

	[Token(Token = "0x40001BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13D")]
	private bool m_bExploded;

	[Token(Token = "0x40001BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13E")]
	private bool m_bDetached;

	[Token(Token = "0x40001BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private float[] m_afFreeChunkSoundTimers;

	[Token(Token = "0x40001BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	private float[] m_afFreeChunkPrefabTimers;

	[Token(Token = "0x40001C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private Material m_GizmosMaterial;

	[Token(Token = "0x17000027")]
	public Material GizmosMaterial
	{
		[Token(Token = "0x600016A")]
		[Address(RVA = "0x8B77B8", Offset = "0x8B77B8", VA = "0x8B77B8")]
		get
		{
			return null;
		}
		[Token(Token = "0x600016B")]
		[Address(RVA = "0x8B789C", Offset = "0x8B789C", VA = "0x8B789C")]
		set
		{
		}
	}

	[Token(Token = "0x600016C")]
	[Address(RVA = "0x8B78A4", Offset = "0x8B78A4", VA = "0x8B78A4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600016D")]
	[Address(RVA = "0x8B78A8", Offset = "0x8B78A8", VA = "0x8B78A8")]
	private void Start()
	{
	}

	[Token(Token = "0x600016E")]
	[Address(RVA = "0x8B7DFC", Offset = "0x8B7DFC", VA = "0x8B7DFC")]
	private void Update()
	{
	}

	[Token(Token = "0x600016F")]
	[Address(RVA = "0x8B8C28", Offset = "0x8B8C28", VA = "0x8B8C28")]
	private void OnRenderObject()
	{
	}

	[Token(Token = "0x6000170")]
	[Address(RVA = "0x8B8C2C", Offset = "0x8B8C2C", VA = "0x8B8C2C")]
	public void OnCreateFracturedObject()
	{
	}

	[Token(Token = "0x6000171")]
	[Address(RVA = "0x8B7B64", Offset = "0x8B7B64", VA = "0x8B7B64")]
	public void SetSingleMeshVisibility(bool bEnabled)
	{
	}

	[Token(Token = "0x6000172")]
	[Address(RVA = "0x8B8D34", Offset = "0x8B8D34", VA = "0x8B8D34")]
	public bool ResetChunks()
	{
		return default(bool);
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0x8B901C", Offset = "0x8B901C", VA = "0x8B901C")]
	public List<FracturedChunk> GetDestructibleChunksInRadius(Vector3 v3Position, float fRadius, bool bAlsoIncludeFreeChunks)
	{
		return null;
	}

	[Token(Token = "0x6000174")]
	[Address(RVA = "0x8B9344", Offset = "0x8B9344", VA = "0x8B9344")]
	public void Explode(Vector3 v3ExplosionPosition, float fExplosionForce)
	{
	}

	[Token(Token = "0x6000175")]
	[Address(RVA = "0x8B99F4", Offset = "0x8B99F4", VA = "0x8B99F4")]
	public void Explode(Vector3 v3ExplosionPosition, float fExplosionForce, float fRadius, bool bPlayExplosionSound, bool bInstanceExplosionPrefabs, bool bAlsoExplodeFree, bool bCheckStructureIntegrityAfter)
	{
	}

	[Token(Token = "0x6000176")]
	[Address(RVA = "0x8BA0A0", Offset = "0x8BA0A0", VA = "0x8BA0A0")]
	public void DeleteChunks()
	{
	}

	[Token(Token = "0x6000177")]
	[Address(RVA = "0x8BA31C", Offset = "0x8BA31C", VA = "0x8BA31C")]
	public void CollapseChunks()
	{
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0x8BA500", Offset = "0x8BA500", VA = "0x8BA500")]
	public void ExplodeChunks(float fExplosionForce, Vector3 v3ExplosionPosition, float fUpwardsModifier)
	{
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0x8BA760", Offset = "0x8BA760", VA = "0x8BA760")]
	public void ComputeChunksRelativeVolume()
	{
	}

	[Token(Token = "0x600017A")]
	[Address(RVA = "0x8BAE2C", Offset = "0x8BAE2C", VA = "0x8BAE2C")]
	public void ComputeChunksMass(float fTotalMass)
	{
	}

	[Token(Token = "0x600017B")]
	[Address(RVA = "0x8BB0B4", Offset = "0x8BB0B4", VA = "0x8BB0B4")]
	public bool HasDetachedChunks()
	{
		return default(bool);
	}

	[Token(Token = "0x600017C")]
	[Address(RVA = "0x8BB0BC", Offset = "0x8BB0BC", VA = "0x8BB0BC")]
	public void NotifyChunkDetach(FracturedChunk chunk)
	{
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0x8BB37C", Offset = "0x8BB37C", VA = "0x8BB37C")]
	public void NotifyDetachChunkCollision(FracturedChunk.CollisionInfo collisionInfo)
	{
	}

	[Token(Token = "0x600017E")]
	[Address(RVA = "0x8BB49C", Offset = "0x8BB49C", VA = "0x8BB49C")]
	public void NotifyDetachChunkCollision(Vector3 v3Position, bool bIsMain)
	{
	}

	[Token(Token = "0x600017F")]
	[Address(RVA = "0x8BB794", Offset = "0x8BB794", VA = "0x8BB794")]
	public void NotifyFreeChunkCollision(FracturedChunk.CollisionInfo collisionInfo)
	{
	}

	[Token(Token = "0x6000180")]
	[Address(RVA = "0x8BBE00", Offset = "0x8BBE00", VA = "0x8BBE00")]
	public void NotifyImpact(Vector3 v3Position)
	{
	}

	[Token(Token = "0x6000181")]
	[Address(RVA = "0x8BC0E4", Offset = "0x8BC0E4", VA = "0x8BC0E4")]
	public void ResetAllChunkVisitedFlags()
	{
	}

	[Token(Token = "0x6000182")]
	[Address(RVA = "0x8B7DE4", Offset = "0x8B7DE4", VA = "0x8B7DE4")]
	public void CheckDetachNonSupportedChunks(bool bForceImmediate = false)
	{
	}

	[Token(Token = "0x6000183")]
	[Address(RVA = "0x8BC268", Offset = "0x8BC268", VA = "0x8BC268")]
	public void MarkNonSupportedChunks()
	{
	}

	[Token(Token = "0x6000184")]
	[Address(RVA = "0x8B8088", Offset = "0x8B8088", VA = "0x8B8088")]
	private void CheckDetachNonSupportedChunksInternal(bool bOnlyMarkThem = false)
	{
	}

	[Token(Token = "0x6000185")]
	[Address(RVA = "0x8BC3F8", Offset = "0x8BC3F8", VA = "0x8BC3F8")]
	private static bool AreSupportedChunksRecursive(FracturedChunk chunk, List<FracturedChunk> listChunksVisited, List<FracturedChunk> listChunksSupport)
	{
		return default(bool);
	}

	[Token(Token = "0x6000186")]
	[Address(RVA = "0x8BC75C", Offset = "0x8BC75C", VA = "0x8BC75C")]
	public void AddSupportPlane()
	{
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0x8BC838", Offset = "0x8BC838", VA = "0x8BC838")]
	public void ComputeSupportPlaneIntersections()
	{
	}

	[Token(Token = "0x6000188")]
	[Address(RVA = "0x8BCBC0", Offset = "0x8BCBC0", VA = "0x8BCBC0")]
	public FracturedObject()
	{
	}
}
[Token(Token = "0x200004C")]
public class CombinedMesh : MonoBehaviour
{
	[Token(Token = "0x200026A")]
	public delegate void CombineProgressDelegate(string strMessage, float fT);

	[Serializable]
	[Token(Token = "0x200026B")]
	public class ObjectInfo
	{
		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Material[] aMaterials;

		[Token(Token = "0x4000E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Mesh mesh;

		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 v3LocalPosition;

		[Token(Token = "0x4000E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion qLocalRotation;

		[Token(Token = "0x4000E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 v3LocalScale;

		[Token(Token = "0x4000E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Matrix4x4 mtxLocal;

		[Token(Token = "0x4000E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Matrix4x4 mtxWorld;

		[Token(Token = "0x4000E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Vector3[] av3NormalsWorld;

		[Token(Token = "0x4000E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public Vector4[] av4TangentsWorld;

		[Token(Token = "0x60013B8")]
		[Address(RVA = "0x4FC500", Offset = "0x4FC500", VA = "0x4FC500")]
		public ObjectInfo(Material[] aMaterials, Mesh mesh, Transform transform, Matrix4x4 mtxLocal)
		{
		}
	}

	[Token(Token = "0x200026C")]
	private class MaterialMeshInfo
	{
		[Token(Token = "0x4000E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Transform transform;

		[Token(Token = "0x4000E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Mesh mesh;

		[Token(Token = "0x4000E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int nSubMesh;

		[Token(Token = "0x60013B9")]
		[Address(RVA = "0x4FC4D0", Offset = "0x4FC4D0", VA = "0x4FC4D0")]
		public MaterialMeshInfo(Transform transform, Mesh mesh, int nSubMesh)
		{
		}
	}

	[Token(Token = "0x200026D")]
	public enum EPivotMode
	{
		[Token(Token = "0x4000E17")]
		Keep,
		[Token(Token = "0x4000E18")]
		Center,
		[Token(Token = "0x4000E19")]
		BottomCenter,
		[Token(Token = "0x4000E1A")]
		TopCenter,
		[Token(Token = "0x4000E1B")]
		Min,
		[Token(Token = "0x4000E1C")]
		Max
	}

	[Token(Token = "0x40001C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool SaveMeshAsset;

	[Token(Token = "0x40001C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
	public bool KeepPosition;

	[Token(Token = "0x40001C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public EPivotMode PivotMode;

	[Token(Token = "0x40001C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public MeshFilter[] MeshObjects;

	[Token(Token = "0x40001C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject RootNode;

	[Token(Token = "0x40001C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool m_bCancelled;

	[Token(Token = "0x40001C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private List<ObjectInfo> m_listObjectInfo;

	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Dictionary<Material, List<MaterialMeshInfo>> m_dicMeshEntries;

	[Token(Token = "0x600018A")]
	[Address(RVA = "0x4F7F94", Offset = "0x4F7F94", VA = "0x4F7F94")]
	public void CancelCombining()
	{
	}

	[Token(Token = "0x600018B")]
	[Address(RVA = "0x4F7FA0", Offset = "0x4F7FA0", VA = "0x4F7FA0")]
	public bool CombiningCancelled()
	{
		return default(bool);
	}

	[Token(Token = "0x600018C")]
	[Address(RVA = "0x4F7FA8", Offset = "0x4F7FA8", VA = "0x4F7FA8")]
	public void TransformObjInfoMeshVectorsToLocal(Transform newTransform)
	{
	}

	[Token(Token = "0x600018D")]
	[Address(RVA = "0x4F8514", Offset = "0x4F8514", VA = "0x4F8514")]
	public int GetObjectCount()
	{
		return default(int);
	}

	[Token(Token = "0x600018E")]
	[Address(RVA = "0x4F8578", Offset = "0x4F8578", VA = "0x4F8578")]
	public ObjectInfo GetObjectInfo(int nIndex)
	{
		return null;
	}

	[Token(Token = "0x600018F")]
	[Address(RVA = "0x4F85FC", Offset = "0x4F85FC", VA = "0x4F85FC")]
	public void Combine(CombineProgressDelegate progress)
	{
	}

	[Token(Token = "0x6000190")]
	[Address(RVA = "0x4FCAB0", Offset = "0x4FCAB0", VA = "0x4FCAB0")]
	public CombinedMesh()
	{
	}
}
[Token(Token = "0x200004D")]
public class CustomOVRCameraRig : MonoBehaviour
{
	[Token(Token = "0x40001C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Transform trackingSpace;

	[Token(Token = "0x40001CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform centerEyeAnchor;

	[Token(Token = "0x40001CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Transform leftHandAnchor;

	[Token(Token = "0x40001CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform rightHandAnchor;

	[Token(Token = "0x40001CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected bool _skipUpdate;

	[Token(Token = "0x40001CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	protected Camera _centerEyeCamera;

	[Token(Token = "0x14000001")]
	public event Action<CustomOVRCameraRig> UpdatedAnchors
	{
		[Token(Token = "0x6000191")]
		[Address(RVA = "0x4FDF8C", Offset = "0x4FDF8C", VA = "0x4FDF8C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248688", Offset = "0x248688")]
		add
		{
		}
		[Token(Token = "0x6000192")]
		[Address(RVA = "0x4FE044", Offset = "0x4FE044", VA = "0x4FE044")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248698", Offset = "0x248698")]
		remove
		{
		}
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0x4FE0FC", Offset = "0x4FE0FC", VA = "0x4FE0FC", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6000194")]
	[Address(RVA = "0x4FE108", Offset = "0x4FE108", VA = "0x4FE108", Slot = "5")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x6000195")]
	[Address(RVA = "0x4FE118", Offset = "0x4FE118", VA = "0x4FE118", Slot = "6")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x6000196")]
	[Address(RVA = "0x4FE130", Offset = "0x4FE130", VA = "0x4FE130", Slot = "7")]
	protected virtual void UpdateAnchors()
	{
	}

	[Token(Token = "0x6000197")]
	[Address(RVA = "0x4FE478", Offset = "0x4FE478", VA = "0x4FE478", Slot = "8")]
	protected virtual void RaiseUpdatedAnchorsEvent()
	{
	}

	[Token(Token = "0x6000198")]
	[Address(RVA = "0x4FE4E8", Offset = "0x4FE4E8", VA = "0x4FE4E8", Slot = "9")]
	public virtual Matrix4x4 ComputeTrackReferenceMatrix()
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x6000199")]
	[Address(RVA = "0x4FE900", Offset = "0x4FE900", VA = "0x4FE900")]
	public CustomOVRCameraRig()
	{
	}
}
[Token(Token = "0x200004E")]
public class OculusInputDevice : VRInputDevice
{
	[Token(Token = "0x40001D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private OVRInput.Controller controller;

	[Token(Token = "0x40001D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float vibrationStrength;

	[Token(Token = "0x40001D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float vibrationTimer;

	[Token(Token = "0x600019A")]
	[Address(RVA = "0x5B960C", Offset = "0x5B960C", VA = "0x5B960C")]
	private void Start()
	{
	}

	[Token(Token = "0x600019B")]
	[Address(RVA = "0x5B96A4", Offset = "0x5B96A4", VA = "0x5B96A4")]
	private void Update()
	{
	}

	[Token(Token = "0x600019C")]
	[Address(RVA = "0x5B9778", Offset = "0x5B9778", VA = "0x5B9778", Slot = "4")]
	public override void Vibrate(float intensity)
	{
	}

	[Token(Token = "0x600019D")]
	[Address(RVA = "0x5B96A8", Offset = "0x5B96A8", VA = "0x5B96A8")]
	private void HandleVibration()
	{
	}

	[Token(Token = "0x600019E")]
	[Address(RVA = "0x5B9894", Offset = "0x5B9894", VA = "0x5B9894", Slot = "5")]
	public override void ShowModel()
	{
	}

	[Token(Token = "0x600019F")]
	[Address(RVA = "0x5B98C4", Offset = "0x5B98C4", VA = "0x5B98C4", Slot = "6")]
	public override void HideModel()
	{
	}

	[Token(Token = "0x60001A0")]
	[Address(RVA = "0x5B98F4", Offset = "0x5B98F4", VA = "0x5B98F4")]
	public OculusInputDevice()
	{
	}
}
[Token(Token = "0x200004F")]
public class OculusSceneLoader : MonoBehaviour
{
	[Token(Token = "0x200026E")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2417BC", Offset = "0x2417BC")]
	private sealed class <LoadLevel>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int <>1__state;

		[Token(Token = "0x4000E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private object <>2__current;

		[Token(Token = "0x4000E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public OculusSceneLoader <>4__this;

		[Token(Token = "0x4000E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private AsyncOperation <async>5__2;

		[Token(Token = "0x4000E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float <t>5__3;

		[Token(Token = "0x170001BC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60013BD")]
			[Address(RVA = "0x5BA8DC", Offset = "0x5BA8DC", VA = "0x5BA8DC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001BD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60013BF")]
			[Address(RVA = "0x5BA96C", Offset = "0x5BA96C", VA = "0x5BA96C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013BA")]
		[Address(RVA = "0x5B9CE4", Offset = "0x5B9CE4", VA = "0x5B9CE4")]
		[DebuggerHidden]
		public <LoadLevel>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x60013BB")]
		[Address(RVA = "0x5B9D34", Offset = "0x5B9D34", VA = "0x5B9D34", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60013BC")]
		[Address(RVA = "0x5B9D38", Offset = "0x5B9D38", VA = "0x5B9D38", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60013BE")]
		[Address(RVA = "0x5BA8E4", Offset = "0x5BA8E4", VA = "0x5BA8E4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40001D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static OculusSceneLoader _active;

	[Token(Token = "0x40001D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public GameObject logoCanvas;

	[Token(Token = "0x40001D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x242524", Offset = "0x242524")]
	public float defaultFadeTime;

	[Token(Token = "0x40001D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public string levelName;

	[Token(Token = "0x40001D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture loadingScreen;

	[Token(Token = "0x40001D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Cubemap cubemap;

	[Token(Token = "0x40001D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float postLoadSettleTime;

	[Token(Token = "0x40001DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float loadingScreenFadeInTime;

	[Token(Token = "0x40001DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float loadingScreenFadeOutTime;

	[Token(Token = "0x40001DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float minimumLoadingTime;

	[Token(Token = "0x40001DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float fadeRate;

	[Token(Token = "0x40001DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float alpha;

	[Token(Token = "0x40001DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int playerRotation;

	[Token(Token = "0x17000028")]
	public static bool loading
	{
		[Token(Token = "0x60001A1")]
		[Address(RVA = "0x5B98FC", Offset = "0x5B98FC", VA = "0x5B98FC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60001A2")]
	[Address(RVA = "0x5B99C4", Offset = "0x5B99C4", VA = "0x5B99C4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001A3")]
	[Address(RVA = "0x5B9A30", Offset = "0x5B9A30", VA = "0x5B9A30")]
	private void Update()
	{
	}

	[Token(Token = "0x60001A4")]
	[Address(RVA = "0x5B9BA4", Offset = "0x5B9BA4", VA = "0x5B9BA4")]
	public void Trigger()
	{
	}

	[Token(Token = "0x60001A5")]
	[Address(RVA = "0x5B9C58", Offset = "0x5B9C58", VA = "0x5B9C58")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2486A8", Offset = "0x2486A8")]
	private IEnumerator LoadLevel()
	{
		return null;
	}

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0x5B9D08", Offset = "0x5B9D08", VA = "0x5B9D08")]
	public OculusSceneLoader()
	{
	}
}
[Token(Token = "0x2000050")]
public class OculusVRIntegration : VRIntegration
{
	[Token(Token = "0x40001E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private CustomOVRCameraRig rig;

	[Token(Token = "0x40001E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool pauseGameWhenDashboardIsVisible;

	[Token(Token = "0x40001E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool hadFocusLastFrame;

	[Token(Token = "0x40001E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	private bool hadVrFocusLastFrame;

	[Token(Token = "0x40001E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float timeScale;

	[Token(Token = "0x40001E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool paused;

	[Token(Token = "0x40001E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private OVRManager ovrManager;

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0x5BA974", Offset = "0x5BA974", VA = "0x5BA974")]
	private void Update()
	{
	}

	[Token(Token = "0x60001A9")]
	[Address(RVA = "0x5BAFC0", Offset = "0x5BAFC0", VA = "0x5BAFC0", Slot = "6")]
	public override void Initialize(VRManager vrManager)
	{
	}

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0x5BB678", Offset = "0x5BB678", VA = "0x5BB678")]
	public void OnNewPosesApplied(CustomOVRCameraRig rig)
	{
	}

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0x5BB6A4", Offset = "0x5BB6A4", VA = "0x5BB6A4", Slot = "7")]
	public override void LoadScene(string sceneName, Texture2D logo, Texture2D front, Texture2D back, Texture2D right, Texture2D left, Texture2D top, Texture2D bottom, Cubemap cubemap)
	{
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0x5BB79C", Offset = "0x5BB79C", VA = "0x5BB79C", Slot = "8")]
	public override void Deinitialize()
	{
	}

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0x5BB85C", Offset = "0x5BB85C", VA = "0x5BB85C", Slot = "4")]
	public override bool IsBoundaryConfigured()
	{
		return default(bool);
	}

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0x5BB990", Offset = "0x5BB990", VA = "0x5BB990", Slot = "5")]
	public override bool GetBounds(out Vector3 playAreaSize, out Vector3 centerOffset)
	{
		return default(bool);
	}

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0x5BAB18", Offset = "0x5BAB18", VA = "0x5BAB18")]
	private void OnInputFocus(bool hasFocus)
	{
	}

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0x5BAD84", Offset = "0x5BAD84", VA = "0x5BAD84")]
	private void OnVrFocus(bool hasFocus)
	{
	}

	[Token(Token = "0x60001B1")]
	[Address(RVA = "0x5BBD44", Offset = "0x5BBD44", VA = "0x5BBD44")]
	private void SetPause(bool shouldPause)
	{
	}

	[Token(Token = "0x60001B2")]
	[Address(RVA = "0x5BBDAC", Offset = "0x5BBDAC", VA = "0x5BBDAC", Slot = "9")]
	public override int GetRecommendedMSAALevel()
	{
		return default(int);
	}

	[Token(Token = "0x60001B3")]
	[Address(RVA = "0x5BBEB8", Offset = "0x5BBEB8", VA = "0x5BBEB8", Slot = "10")]
	public override void SetFFRLevel(int level)
	{
	}

	[Token(Token = "0x60001B4")]
	[Address(RVA = "0x5BBF3C", Offset = "0x5BBF3C", VA = "0x5BBF3C", Slot = "11")]
	public override void SetCPULevel(int level)
	{
	}

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0x5BBFC0", Offset = "0x5BBFC0", VA = "0x5BBFC0", Slot = "12")]
	public override void SetGPULevel(int level)
	{
	}

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0x5BC044", Offset = "0x5BC044", VA = "0x5BC044", Slot = "13")]
	public override void QuitApplication()
	{
	}

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0x5BC04C", Offset = "0x5BC04C", VA = "0x5BC04C")]
	public OculusVRIntegration()
	{
	}
}
[Token(Token = "0x2000051")]
public abstract class VRInputDevice : MonoBehaviour
{
	[Token(Token = "0x40001E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24258C", Offset = "0x24258C")]
	private bool <isLeftHand>k__BackingField;

	[Token(Token = "0x40001E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24259C", Offset = "0x24259C")]
	private GameObject <controllerModel>k__BackingField;

	[Token(Token = "0x17000029")]
	public bool isLeftHand
	{
		[Token(Token = "0x60001B8")]
		[Address(RVA = "0x1014128", Offset = "0x1014128", VA = "0x1014128")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248720", Offset = "0x248720")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001B9")]
		[Address(RVA = "0x1014130", Offset = "0x1014130", VA = "0x1014130")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248730", Offset = "0x248730")]
		set
		{
		}
	}

	[Token(Token = "0x1700002A")]
	public GameObject controllerModel
	{
		[Token(Token = "0x60001BA")]
		[Address(RVA = "0x1014138", Offset = "0x1014138", VA = "0x1014138")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248740", Offset = "0x248740")]
		get
		{
			return null;
		}
		[Token(Token = "0x60001BB")]
		[Address(RVA = "0x1014140", Offset = "0x1014140", VA = "0x1014140")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248750", Offset = "0x248750")]
		set
		{
		}
	}

	[Token(Token = "0x60001BC")]
	public abstract void Vibrate(float intensity);

	[Token(Token = "0x60001BD")]
	public abstract void ShowModel();

	[Token(Token = "0x60001BE")]
	public abstract void HideModel();

	[Token(Token = "0x60001BF")]
	[Address(RVA = "0x1014148", Offset = "0x1014148", VA = "0x1014148")]
	protected VRInputDevice()
	{
	}
}
[Token(Token = "0x2000052")]
public abstract class VRIntegration : MonoBehaviour
{
	[Token(Token = "0x40001E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	protected VRManager manager;

	[Token(Token = "0x40001EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	protected bool isInitialized;

	[Token(Token = "0x60001C0")]
	public abstract bool IsBoundaryConfigured();

	[Token(Token = "0x60001C1")]
	public abstract bool GetBounds(out Vector3 playAreaSize, out Vector3 centerOffset);

	[Token(Token = "0x60001C2")]
	public abstract void Initialize(VRManager vrManager);

	[Token(Token = "0x60001C3")]
	public abstract void LoadScene(string sceneName, Texture2D logo, Texture2D front, Texture2D back, Texture2D right, Texture2D left, Texture2D top, Texture2D bottom, Cubemap cubemap);

	[Token(Token = "0x60001C4")]
	public abstract void Deinitialize();

	[Token(Token = "0x60001C5")]
	public abstract int GetRecommendedMSAALevel();

	[Token(Token = "0x60001C6")]
	public abstract void SetFFRLevel(int level);

	[Token(Token = "0x60001C7")]
	public abstract void SetCPULevel(int level);

	[Token(Token = "0x60001C8")]
	public abstract void SetGPULevel(int level);

	[Token(Token = "0x60001C9")]
	public abstract void QuitApplication();

	[Token(Token = "0x60001CA")]
	[Address(RVA = "0x101509C", Offset = "0x101509C", VA = "0x101509C")]
	protected VRIntegration()
	{
	}
}
[Token(Token = "0x2000053")]
public class VRManager : MonoBehaviour
{
	[Token(Token = "0x200026F")]
	public delegate void TrackingUpdateEvent();

	[Token(Token = "0x2000270")]
	public delegate void RecenterRequestEvent();

	[Token(Token = "0x2000271")]
	public delegate void ResizeRequestEvent();

	[Token(Token = "0x40001EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static TrackingUpdateEvent OnTrackingUpdate;

	[Token(Token = "0x40001EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static RecenterRequestEvent OnRecenterRequest;

	[Token(Token = "0x40001ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static ResizeRequestEvent OnResizeRequest;

	[Token(Token = "0x40001EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool pauseGameWhenDashboardIsVisible;

	[Token(Token = "0x40001EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform origin;

	[Token(Token = "0x40001F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Transform leftController;

	[Token(Token = "0x40001F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform leftControllerModel;

	[Token(Token = "0x40001F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Transform rightController;

	[Token(Token = "0x40001F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform rightControllerModel;

	[Token(Token = "0x40001F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Transform head;

	[Token(Token = "0x40001F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform ears;

	[Token(Token = "0x40001F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Shader controllerShader;

	[Token(Token = "0x40001F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Mesh leftControllerMesh;

	[Token(Token = "0x40001F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Mesh rightControllerMesh;

	[Token(Token = "0x40001F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2425AC", Offset = "0x2425AC")]
	private static VRManager <instance>k__BackingField;

	[Token(Token = "0x40001FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2425BC", Offset = "0x2425BC")]
	private static bool <usingOculusSDK>k__BackingField;

	[Token(Token = "0x40001FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2425CC", Offset = "0x2425CC")]
	private static bool <usingSteamVR>k__BackingField;

	[Token(Token = "0x40001FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private VRIntegration integration;

	[Token(Token = "0x1700002B")]
	public static VRManager instance
	{
		[Token(Token = "0x60001CB")]
		[Address(RVA = "0x10150A4", Offset = "0x10150A4", VA = "0x10150A4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248760", Offset = "0x248760")]
		get
		{
			return null;
		}
		[Token(Token = "0x60001CC")]
		[Address(RVA = "0x1015108", Offset = "0x1015108", VA = "0x1015108")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248770", Offset = "0x248770")]
		private set
		{
		}
	}

	[Token(Token = "0x1700002C")]
	public static bool usingOculusSDK
	{
		[Token(Token = "0x60001CD")]
		[Address(RVA = "0x101516C", Offset = "0x101516C", VA = "0x101516C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248780", Offset = "0x248780")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001CE")]
		[Address(RVA = "0x10151D0", Offset = "0x10151D0", VA = "0x10151D0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248790", Offset = "0x248790")]
		set
		{
		}
	}

	[Token(Token = "0x1700002D")]
	public static bool usingSteamVR
	{
		[Token(Token = "0x60001CF")]
		[Address(RVA = "0x1015234", Offset = "0x1015234", VA = "0x1015234")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2487A0", Offset = "0x2487A0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001D0")]
		[Address(RVA = "0x1015298", Offset = "0x1015298", VA = "0x1015298")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2487B0", Offset = "0x2487B0")]
		set
		{
		}
	}

	[Token(Token = "0x60001D1")]
	[Address(RVA = "0x10152FC", Offset = "0x10152FC", VA = "0x10152FC")]
	public static void QuitApplication()
	{
	}

	[Token(Token = "0x60001D2")]
	[Address(RVA = "0x101550C", Offset = "0x101550C", VA = "0x101550C")]
	public static void LoadScene(string sceneName, Texture2D logo, Texture2D front, Texture2D back, Texture2D right, Texture2D left, Texture2D top, Texture2D bottom, Cubemap cubemap)
	{
	}

	[Token(Token = "0x60001D3")]
	[Address(RVA = "0x10155FC", Offset = "0x10155FC", VA = "0x10155FC")]
	public static bool IsBoundaryConfigured()
	{
		return default(bool);
	}

	[Token(Token = "0x60001D4")]
	[Address(RVA = "0x1015690", Offset = "0x1015690", VA = "0x1015690")]
	public static bool GetBounds(out Vector3 playAreaSize, out Vector3 centerOffset)
	{
		return default(bool);
	}

	[Token(Token = "0x60001D5")]
	[Address(RVA = "0x1015734", Offset = "0x1015734", VA = "0x1015734")]
	public static void OffsetOrigin(Vector3 offset)
	{
	}

	[Token(Token = "0x60001D6")]
	[Address(RVA = "0x1015804", Offset = "0x1015804", VA = "0x1015804")]
	public static int GetRecommendedMSAALevel()
	{
		return default(int);
	}

	[Token(Token = "0x60001D7")]
	[Address(RVA = "0x1013F30", Offset = "0x1013F30", VA = "0x1013F30")]
	public static void SetFFRLevel(int level)
	{
	}

	[Token(Token = "0x60001D8")]
	[Address(RVA = "0x1013FCC", Offset = "0x1013FCC", VA = "0x1013FCC")]
	public static void SetCPULevel(int level)
	{
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0x1014068", Offset = "0x1014068", VA = "0x1014068")]
	public static void SetGPULevel(int level)
	{
	}

	[Token(Token = "0x60001DA")]
	[Address(RVA = "0x1015898", Offset = "0x1015898", VA = "0x1015898")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001DB")]
	[Address(RVA = "0x1015D58", Offset = "0x1015D58", VA = "0x1015D58")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60001DC")]
	[Address(RVA = "0x1015DE0", Offset = "0x1015DE0", VA = "0x1015DE0")]
	public void TrackingUpdated()
	{
	}

	[Token(Token = "0x60001DD")]
	[Address(RVA = "0x1016090", Offset = "0x1016090", VA = "0x1016090")]
	private void OnEntitlementCheckComplete(Message msg)
	{
	}

	[Token(Token = "0x60001DE")]
	[Address(RVA = "0x10160CC", Offset = "0x10160CC", VA = "0x10160CC")]
	public VRManager()
	{
	}
}
namespace UltimateFracturing
{
	[Token(Token = "0x2000054")]
	public static class ConcaveColliderInterface
	{
		[Token(Token = "0x2000272")]
		private struct SConvexDecompositionInfoInOut
		{
			[Token(Token = "0x4000E22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public uint uMaxHullVertices;

			[Token(Token = "0x4000E23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public uint uMaxHulls;

			[Token(Token = "0x4000E24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float fPrecision;

			[Token(Token = "0x4000E25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public float fBackFaceDistanceFactor;

			[Token(Token = "0x4000E26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public uint uLegacyDepth;

			[Token(Token = "0x4000E27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public uint uNormalizeInputMesh;

			[Token(Token = "0x4000E28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public uint uUseFastVersion;

			[Token(Token = "0x4000E29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public uint uTriangleCount;

			[Token(Token = "0x4000E2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public uint uVertexCount;

			[Token(Token = "0x4000E2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public int nHullsOut;
		}

		[Token(Token = "0x2000273")]
		private struct SConvexDecompositionHullInfo
		{
			[Token(Token = "0x4000E2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int nVertexCount;

			[Token(Token = "0x4000E2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int nTriangleCount;
		}

		[Token(Token = "0x2000274")]
		public delegate void LogDelegate(string message);

		[PreserveSig]
		[Token(Token = "0x60001DF")]
		[Address(RVA = "0x3B4EE8", Offset = "0x3B4EE8", VA = "0x3B4EE8")]
		private static extern void DllInit(bool bUseMultithreading);

		[PreserveSig]
		[Token(Token = "0x60001E0")]
		[Address(RVA = "0x3B4FE0", Offset = "0x3B4FE0", VA = "0x3B4FE0")]
		private static extern void DllClose();

		[PreserveSig]
		[Token(Token = "0x60001E1")]
		[Address(RVA = "0x3B50C8", Offset = "0x3B50C8", VA = "0x3B50C8")]
		private static extern void SetLogFunctionPointer(IntPtr pfnUnity3DLog);

		[PreserveSig]
		[Token(Token = "0x60001E2")]
		[Address(RVA = "0x3B51D8", Offset = "0x3B51D8", VA = "0x3B51D8")]
		private static extern void SetProgressFunctionPointer(IntPtr pfnUnity3DProgress);

		[PreserveSig]
		[Token(Token = "0x60001E3")]
		[Address(RVA = "0x3B52B8", Offset = "0x3B52B8", VA = "0x3B52B8")]
		private static extern void CancelConvexDecomposition();

		[PreserveSig]
		[Token(Token = "0x60001E4")]
		[Address(RVA = "0x3B53C0", Offset = "0x3B53C0", VA = "0x3B53C0")]
		private static extern bool DoConvexDecomposition(ref SConvexDecompositionInfoInOut infoInOut, Vector3[] pfVertices, int[] puIndices);

		[PreserveSig]
		[Token(Token = "0x60001E5")]
		[Address(RVA = "0x3B54F8", Offset = "0x3B54F8", VA = "0x3B54F8")]
		private static extern bool GetHullInfo(uint uHullIndex, ref SConvexDecompositionHullInfo infoOut);

		[PreserveSig]
		[Token(Token = "0x60001E6")]
		[Address(RVA = "0x3B5608", Offset = "0x3B5608", VA = "0x3B5608")]
		private static extern bool FillHullMeshData(uint uHullIndex, ref float pfVolumeOut, int[] pnIndicesOut, Vector3[] pfVerticesOut);

		[Token(Token = "0x60001E7")]
		[Address(RVA = "0x3B5740", Offset = "0x3B5740", VA = "0x3B5740")]
		public static int ComputeHull(GameObject gameObject, FracturedObject fracturedObject)
		{
			return default(int);
		}

		[Token(Token = "0x60001E8")]
		[Address(RVA = "0x3B59C0", Offset = "0x3B59C0", VA = "0x3B59C0")]
		private static bool ComputeHull(GameObject gameObject, FracturedObject.ECCAlgorithm eAlgorithm, int nMaxHulls, int nMaxHullVertices, int nLegacySteps, bool bVerbose, out int nTotalTrianglesOut)
		{
			return default(bool);
		}

		[Token(Token = "0x60001E9")]
		[Address(RVA = "0x3B6460", Offset = "0x3B6460", VA = "0x3B6460")]
		private static void Log(string message)
		{
		}
	}
	[Token(Token = "0x2000055")]
	public static class Fracturer
	{
		[Token(Token = "0x2000275")]
		private class FracturingStats
		{
			[Token(Token = "0x4000E2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int nChunkCount;

			[Token(Token = "0x4000E2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int nTotalChunks;

			[Token(Token = "0x4000E30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int nSplitCount;

			[Token(Token = "0x4000E31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public bool bCancelFracturing;

			[Token(Token = "0x60013D0")]
			[Address(RVA = "0x1003550", Offset = "0x1003550", VA = "0x1003550")]
			public FracturingStats()
			{
			}
		}

		[Token(Token = "0x2000276")]
		private class VoronoiCell
		{
			[Token(Token = "0x2000313")]
			public class Face
			{
				[Token(Token = "0x4001191")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
				public Plane plane;

				[Token(Token = "0x4001192")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				public Matrix4x4 mtxPlane;

				[Token(Token = "0x4001193")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
				public int nAdjacentCell;

				[Token(Token = "0x600156C")]
				[Address(RVA = "0x1004B7C", Offset = "0x1004B7C", VA = "0x1004B7C")]
				public Face(Plane plane, Matrix4x4 mtxPlane, int nAdjacentCell)
				{
				}
			}

			[Token(Token = "0x4000E32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int nIndex;

			[Token(Token = "0x4000E33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int x;

			[Token(Token = "0x4000E34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int y;

			[Token(Token = "0x4000E35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int z;

			[Token(Token = "0x4000E36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 v3Center;

			[Token(Token = "0x4000E37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Vector3 v3Min;

			[Token(Token = "0x4000E38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Vector3 v3Max;

			[Token(Token = "0x4000E39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public List<Face> listCellFaces;

			[Token(Token = "0x60013D1")]
			[Address(RVA = "0x1004A84", Offset = "0x1004A84", VA = "0x1004A84")]
			public VoronoiCell(int nIndex, int x, int y, int z)
			{
			}
		}

		[Token(Token = "0x2000277")]
		private class VoronoiPointDistance
		{
			[Token(Token = "0x2000314")]
			public class IncreasingDistanceComparer : IComparer<VoronoiPointDistance>
			{
				[Token(Token = "0x600156D")]
				[Address(RVA = "0x1004CEC", Offset = "0x1004CEC", VA = "0x1004CEC", Slot = "4")]
				public int Compare(VoronoiPointDistance a, VoronoiPointDistance b)
				{
					return default(int);
				}

				[Token(Token = "0x600156E")]
				[Address(RVA = "0x1004D44", Offset = "0x1004D44", VA = "0x1004D44")]
				public IncreasingDistanceComparer()
				{
				}
			}

			[Token(Token = "0x4000E3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int nIndex;

			[Token(Token = "0x4000E3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public float fDistanceSqr;

			[Token(Token = "0x60013D2")]
			[Address(RVA = "0x1004CC4", Offset = "0x1004CC4", VA = "0x1004CC4")]
			public VoronoiPointDistance(int nIndex, float fDistanceSqr)
			{
			}
		}

		[Token(Token = "0x2000278")]
		public struct VoronoiCellKey
		{
			[Token(Token = "0x2000315")]
			public class EqualityComparer : IEqualityComparer<VoronoiCellKey>
			{
				[Token(Token = "0x600156F")]
				[Address(RVA = "0x1004C40", Offset = "0x1004C40", VA = "0x1004C40", Slot = "4")]
				public bool Equals(VoronoiCellKey x, VoronoiCellKey y)
				{
					return default(bool);
				}

				[Token(Token = "0x6001570")]
				[Address(RVA = "0x1004C70", Offset = "0x1004C70", VA = "0x1004C70", Slot = "5")]
				public int GetHashCode(VoronoiCellKey x)
				{
					return default(int);
				}

				[Token(Token = "0x6001571")]
				[Address(RVA = "0x1004CBC", Offset = "0x1004CBC", VA = "0x1004CBC")]
				public EqualityComparer()
				{
				}
			}

			[Token(Token = "0x4000E3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int x;

			[Token(Token = "0x4000E3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int y;

			[Token(Token = "0x4000E3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int z;

			[Token(Token = "0x60013D3")]
			[Address(RVA = "0x2E5EDC", Offset = "0x2E5EDC", VA = "0x2E5EDC")]
			public VoronoiCellKey(int x, int y, int z)
			{
			}
		}

		[Token(Token = "0x2000279")]
		private class VoronoiThreadData
		{
			[Token(Token = "0x4000E3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public List<VoronoiCell> listVoronoiCells;

			[Token(Token = "0x4000E40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public MeshData meshDataCube;

			[Token(Token = "0x4000E41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<MeshData> listMeshDatasObject;

			[Token(Token = "0x4000E42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public List<MeshData> listMeshDatasChunks;

			[Token(Token = "0x4000E43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public SpaceTreeNode spaceTree;

			[Token(Token = "0x4000E44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public FracturedObject fracturedComponent;

			[Token(Token = "0x4000E45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int nCurrentCell;

			[Token(Token = "0x4000E46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public int nTotalCells;

			[Token(Token = "0x4000E47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int nCellsProcessed;

			[Token(Token = "0x4000E48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public ProgressDelegate progress;

			[Token(Token = "0x60013D4")]
			[Address(RVA = "0x1004D4C", Offset = "0x1004D4C", VA = "0x1004D4C")]
			public VoronoiThreadData()
			{
			}
		}

		[Token(Token = "0x200027A")]
		public delegate void ProgressDelegate(string strTitle, string message, float fT);

		[Token(Token = "0x200027B")]
		private class SpaceTreeNode
		{
			[Token(Token = "0x4000E49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private SpaceTreeNode nodeOneSide;

			[Token(Token = "0x4000E4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private SpaceTreeNode nodeOtherSide;

			[Token(Token = "0x4000E4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int nLevel;

			[Token(Token = "0x4000E4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private int nSplitsX;

			[Token(Token = "0x4000E4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private int nSplitsY;

			[Token(Token = "0x4000E4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private int nSplitsZ;

			[Token(Token = "0x4000E4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Vector3 v3Min;

			[Token(Token = "0x4000E50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private Vector3 v3Max;

			[Token(Token = "0x4000E51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private List<MeshData> listMeshDatasSpace;

			[Token(Token = "0x60013D9")]
			[Address(RVA = "0x1003A70", Offset = "0x1003A70", VA = "0x1003A70")]
			public SpaceTreeNode()
			{
			}

			[Token(Token = "0x60013DA")]
			[Address(RVA = "0x1003B14", Offset = "0x1003B14", VA = "0x1003B14")]
			public bool ContainsCompletely(Vector3 v3Min, Vector3 v3Max)
			{
				return default(bool);
			}

			[Token(Token = "0x60013DB")]
			[Address(RVA = "0x1003BD4", Offset = "0x1003BD4", VA = "0x1003BD4")]
			public static List<MeshData> GetSmallestPossibleMeshData(SpaceTreeNode root, Vector3 v3Min, Vector3 v3Max)
			{
				return null;
			}

			[Token(Token = "0x60013DC")]
			[Address(RVA = "0x1003CD4", Offset = "0x1003CD4", VA = "0x1003CD4")]
			public static SpaceTreeNode BuildSpaceTree(MeshData meshDataIn, int nSubdivisionLevels, FracturedObject fracturedComponent, [Optional] ProgressDelegate progress)
			{
				return null;
			}
		}

		[Token(Token = "0x200027C")]
		public class SplitOptions
		{
			[Token(Token = "0x4000E52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static SplitOptions Default;

			[Token(Token = "0x4000E53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public bool bForceNoProgressInfo;

			[Token(Token = "0x4000E54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
			public bool bForceNoIslandGeneration;

			[Token(Token = "0x4000E55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
			public bool bForceNoChunkConnectionInfo;

			[Token(Token = "0x4000E56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB")]
			public bool bForceNoIslandConnectionInfo;

			[Token(Token = "0x4000E57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public bool bForceNoCap;

			[Token(Token = "0x4000E58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
			public bool bForceCapVertexSoup;

			[Token(Token = "0x4000E59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
			public bool bIgnoreNegativeSide;

			[Token(Token = "0x4000E5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF")]
			public bool bVerticesAreLocal;

			[Token(Token = "0x4000E5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int nForceMeshConnectivityHash;

			[Token(Token = "0x60013DD")]
			[Address(RVA = "0x10049D0", Offset = "0x10049D0", VA = "0x10049D0")]
			public SplitOptions()
			{
			}
		}

		[Token(Token = "0x40001FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static FracturingStats s_FracturingStats;

		[Token(Token = "0x40001FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static VoronoiThreadData s_VoronoiThreadData;

		[Token(Token = "0x60001EA")]
		[Address(RVA = "0x3B6BA0", Offset = "0x3B6BA0", VA = "0x3B6BA0")]
		public static void CancelFracturing()
		{
		}

		[Token(Token = "0x60001EB")]
		[Address(RVA = "0x3B6D14", Offset = "0x3B6D14", VA = "0x3B6D14")]
		public static bool IsFracturingCancelled()
		{
			return default(bool);
		}

		[Token(Token = "0x60001EC")]
		[Address(RVA = "0x3B6E94", Offset = "0x3B6E94", VA = "0x3B6E94")]
		public static bool FractureToChunks(FracturedObject fracturedComponent, bool bPositionOnSourceAndHideOriginal, out List<GameObject> listGameObjectsOut, [Optional] ProgressDelegate progress)
		{
			return default(bool);
		}

		[Token(Token = "0x60001ED")]
		[Address(RVA = "0x3B780C", Offset = "0x3B780C", VA = "0x3B780C")]
		private static Mesh CopyMesh(MeshFilter meshfIn)
		{
			return null;
		}

		[Token(Token = "0x60001EE")]
		[Address(RVA = "0x3B7E48", Offset = "0x3B7E48", VA = "0x3B7E48")]
		private static bool FractureToChunksBSP(FracturedObject fracturedComponent, bool bPositionOnSourceAndHideOriginal, out List<GameObject> listGameObjectsOut, [Optional] ProgressDelegate progress)
		{
			return default(bool);
		}

		[Token(Token = "0x60001EF")]
		[Address(RVA = "0x3BA8AC", Offset = "0x3BA8AC", VA = "0x3BA8AC")]
		private static bool FractureToChunksVoronoi(FracturedObject fracturedComponent, bool bPositionOnSourceAndHideOriginal, out List<GameObject> listGameObjectsOut, [Optional] ProgressDelegate progress)
		{
			return default(bool);
		}

		[Token(Token = "0x60001F0")]
		[Address(RVA = "0x3D046C", Offset = "0x3D046C", VA = "0x3D046C")]
		public static void ThreadVoronoiComputePlaneDependencies()
		{
		}

		[Token(Token = "0x60001F1")]
		[Address(RVA = "0x3D1B1C", Offset = "0x3D1B1C", VA = "0x3D1B1C")]
		public static void ThreadVoronoiComputeCells()
		{
		}

		[Token(Token = "0x60001F2")]
		[Address(RVA = "0x3BF218", Offset = "0x3BF218", VA = "0x3BF218")]
		public static List<MeshData> ComputeMeshDataIslands(MeshData meshDataIn, bool bVerticesAreLocal, FracturedObject fracturedComponent, ProgressDelegate progress)
		{
			return null;
		}

		[Token(Token = "0x60001F3")]
		[Address(RVA = "0x3CF3C8", Offset = "0x3CF3C8", VA = "0x3CF3C8")]
		public static void ComputeChunkColliders(FracturedObject fracturedComponent, ProgressDelegate progress)
		{
		}

		[Token(Token = "0x60001F4")]
		[Address(RVA = "0x3D3978", Offset = "0x3D3978", VA = "0x3D3978")]
		public static void DeleteChunkColliders(FracturedObject fracturedComponent)
		{
		}

		[Token(Token = "0x60001F5")]
		[Address(RVA = "0x3C15EC", Offset = "0x3C15EC", VA = "0x3C15EC")]
		private static Matrix4x4 GetRandomPlaneSplitMatrix(MeshData meshDataIn, FracturedObject fracturedComponent, out int nSplitAxisPerformed)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x60001F6")]
		[Address(RVA = "0x3CE854", Offset = "0x3CE854", VA = "0x3CE854")]
		private static GameObject CreateNewSplitGameObject(GameObject gameObjectIn, FracturedObject fracturedComponent, string strName, bool bTransformVerticesBackToLocal, MeshData meshData)
		{
			return null;
		}

		[Token(Token = "0x60001F7")]
		[Address(RVA = "0x3D3468", Offset = "0x3D3468", VA = "0x3D3468")]
		private static int CreateMeshConnectivityVoronoiHash(int nCell1, int nCell2)
		{
			return default(int);
		}

		[Token(Token = "0x60001F8")]
		[Address(RVA = "0x3CEFC8", Offset = "0x3CEFC8", VA = "0x3CEFC8")]
		private static void ComputeChunkConnections(FracturedObject fracturedObject, List<GameObject> listGameObjects, List<MeshData> listMeshDatas, [Optional] ProgressDelegate progress)
		{
		}

		[Token(Token = "0x60001F9")]
		[Address(RVA = "0x3D3518", Offset = "0x3D3518", VA = "0x3D3518")]
		private static void RemoveEmptySubmeshes(FracturedChunk fracturedChunk)
		{
		}

		[Token(Token = "0x60001FA")]
		[Address(RVA = "0x3D3DA8", Offset = "0x3D3DA8", VA = "0x3D3DA8")]
		public static bool SplitMeshUsingPlane(GameObject gameObjectIn, FracturedObject fracturedComponent, SplitOptions splitOptions, Transform transformPlaneSplit, out List<GameObject> listGameObjectsPosOut, out List<GameObject> listGameObjectsNegOut, [Optional] ProgressDelegate progress)
		{
			return default(bool);
		}

		[Token(Token = "0x60001FB")]
		[Address(RVA = "0x3C2310", Offset = "0x3C2310", VA = "0x3C2310")]
		private static bool SplitMeshUsingPlane(MeshData meshDataIn, FracturedObject fracturedComponent, SplitOptions splitOptions, Vector3 v3PlaneNormal, Vector3 v3PlaneRight, Vector3 v3PlanePoint, out List<MeshData> listMeshDatasPosOut, out List<MeshData> listMeshDatasNegOut, [Optional] ProgressDelegate progress)
		{
			return default(bool);
		}

		[Token(Token = "0x60001FC")]
		[Address(RVA = "0x3BFCDC", Offset = "0x3BFCDC", VA = "0x3BFCDC")]
		private static bool ComputeIslandsMeshDataConnectivity(FracturedObject fracturedComponent, bool bVerticesAreLocal, MeshData meshData1, MeshData meshData2)
		{
			return default(bool);
		}

		[Token(Token = "0x60001FD")]
		[Address(RVA = "0x3D89E4", Offset = "0x3D89E4", VA = "0x3D89E4")]
		public static bool IntersectEdges2D(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4)
		{
			return default(bool);
		}

		[Token(Token = "0x60001FE")]
		[Address(RVA = "0x3D8CE8", Offset = "0x3D8CE8", VA = "0x3D8CE8")]
		private static float CrossProduct2D(Vector2 a, Vector2 b)
		{
			return default(float);
		}

		[Token(Token = "0x60001FF")]
		[Address(RVA = "0x3D5D20", Offset = "0x3D5D20", VA = "0x3D5D20")]
		private static void TriangulateConstrainedDelaunay(List<List<Vector3>> listlistPointsConstrainedDelaunay, List<List<int>> listlistHashValuesConstrainedDelaunay, bool bForceVertexSoup, FracturedObject fracturedComponent, bool bConnectivityPostprocess, MeshFaceConnectivity faceConnectivityPos, MeshFaceConnectivity faceConnectivityNeg, MeshDataConnectivity meshConnectivityPos, MeshDataConnectivity meshConnectivityNeg, int nForceMeshConnectivityHash, int nSplitCloseSubMesh, Matrix4x4 mtxPlane, Matrix4x4 mtxToLocalPos, Matrix4x4 mtxToLocalNeg, Vector3 v3CenterPos, Vector3 v3CenterNeg, List<int>[] aListIndicesPosInOut, List<VertexData> listVertexDataPosInOut, List<int>[] aListIndicesNegInOut, List<VertexData> listVertexDataNegInOut)
		{
		}

		[Token(Token = "0x6000200")]
		[Address(RVA = "0x3D8D0C", Offset = "0x3D8D0C", VA = "0x3D8D0C")]
		private static void CreateIndexedMesh(IList<DelaunayTriangle> listTriangles, List<Vector3> listVerticesOut, List<int> listIndicesOut, Matrix4x4 mtxTransform, bool bTransform)
		{
		}

		[Token(Token = "0x6000201")]
		[Address(RVA = "0x3D9620", Offset = "0x3D9620", VA = "0x3D9620")]
		private static void Triangulate(List<Vector3> listVertices, List<int> listIndices, FracturedObject fracturedComponent, List<List<Vector3>> listlistPointsConstrainedDelaunay, List<List<int>> listlistHashValuesConstrainedDelaunay, bool bConnectivityPostprocess, MeshFaceConnectivity faceConnectivityPos, MeshFaceConnectivity faceConnectivityNeg, MeshDataConnectivity meshConnectivityPos, MeshDataConnectivity meshConnectivityNeg, int nForceMeshConnectivityHash, int nSplitCloseSubMesh, Matrix4x4 mtxPlane, Matrix4x4 mtxToLocalPos, Matrix4x4 mtxToLocalNeg, Vector3 v3CenterPos, Vector3 v3CenterNeg, List<int>[] aListIndicesPosInOut, List<VertexData> listVertexDataPosInOut, List<int>[] aListIndicesNegInOut, List<VertexData> listVertexDataNegInOut)
		{
		}

		[Token(Token = "0x6000202")]
		[Address(RVA = "0x3DAE10", Offset = "0x3DAE10", VA = "0x3DAE10")]
		private static int ComputeVertexHash(Vector3 v3Vertex, List<List<Vector3>> listlistPointsConstrainedDelaunay, List<List<int>> listlistHashValuesConstrainedDelaunay)
		{
			return default(int);
		}

		[Token(Token = "0x6000203")]
		[Address(RVA = "0x3D4B00", Offset = "0x3D4B00", VA = "0x3D4B00")]
		private static bool AddCapEdge(Dictionary<EdgeKeyByHash, CapEdge> dicCapEdges, int nVertexHash1, int nVertexHash2, Vector3 v3Vertex1, Vector3 v3Vertex2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000204")]
		[Address(RVA = "0x3D4C68", Offset = "0x3D4C68", VA = "0x3D4C68")]
		private static bool ResolveCap(Dictionary<EdgeKeyByHash, CapEdge> dicCapEdges, List<List<Vector3>> listlistResolvedCapVertices, List<List<int>> listlistResolvedCapHashValues, FracturedObject fracturedComponent)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000056")]
	public class DieTimer : MonoBehaviour
	{
		[Token(Token = "0x40001FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float SecondsToDie;

		[Token(Token = "0x4000200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float OffscreenLifeTime;

		[Token(Token = "0x4000201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float m_fTimer;

		[Token(Token = "0x6000206")]
		[Address(RVA = "0x3B691C", Offset = "0x3B691C", VA = "0x3B691C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000207")]
		[Address(RVA = "0x3B6928", Offset = "0x3B6928", VA = "0x3B6928")]
		private void Update()
		{
		}

		[Token(Token = "0x6000208")]
		[Address(RVA = "0x3B69F0", Offset = "0x3B69F0", VA = "0x3B69F0")]
		public DieTimer()
		{
		}
	}
	[Token(Token = "0x2000057")]
	public static class Parameters
	{
		[Token(Token = "0x4000202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float EPSILONDISTANCEPLANE;

		[Token(Token = "0x4000203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static float EPSILONDISTANCEVERTEX;

		[Token(Token = "0x4000204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static float EPSILONCAPPRECISIONMIN;

		[Token(Token = "0x4000205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static float EPSILONCROSSPRODUCT;

		[Token(Token = "0x4000206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static float EPSILONINSIDETRIANGLE;

		[Token(Token = "0x4000207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static int VERTICESSPACESUBDIVISION;
	}
	[Token(Token = "0x2000058")]
	public class VertexData
	{
		[Token(Token = "0x4000208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int nVertexHash;

		[Token(Token = "0x4000209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 v3Vertex;

		[Token(Token = "0x400020A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 v3Normal;

		[Token(Token = "0x400020B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector4 v4Tangent;

		[Token(Token = "0x400020C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Color32 color32;

		[Token(Token = "0x400020D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector2 v2Mapping1;

		[Token(Token = "0x400020E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector2 v2Mapping2;

		[Token(Token = "0x400020F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool bHasNormal;

		[Token(Token = "0x4000210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool bHasTangent;

		[Token(Token = "0x4000211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		public bool bHasColor32;

		[Token(Token = "0x4000212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
		public bool bHasMapping1;

		[Token(Token = "0x4000213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool bHasMapping2;

		[Token(Token = "0x600020A")]
		[Address(RVA = "0x1007974", Offset = "0x1007974", VA = "0x1007974")]
		public VertexData(int nVertexHash)
		{
		}

		[Token(Token = "0x600020B")]
		[Address(RVA = "0x10123C4", Offset = "0x10123C4", VA = "0x10123C4")]
		public VertexData(int nVertexHash, Vector3 v3Vertex, Vector3 v3Normal, Vector3 v4Tangent, Color32 color32, Vector2 v2Mapping1, Vector2 v2Mapping2, bool bHasNormal, bool bHasTangent, bool bHasColor32, bool bHasMapping1, bool bHasMapping2)
		{
		}

		[Token(Token = "0x600020C")]
		[Address(RVA = "0x100CD4C", Offset = "0x100CD4C", VA = "0x100CD4C")]
		public VertexData Copy()
		{
			return null;
		}

		[Token(Token = "0x600020D")]
		[Address(RVA = "0x101250C", Offset = "0x101250C", VA = "0x101250C")]
		public static VertexData Lerp(int nVertexHash, VertexData vd1, VertexData vd2, float fT)
		{
			return null;
		}

		[Token(Token = "0x600020E")]
		[Address(RVA = "0x101299C", Offset = "0x101299C", VA = "0x101299C")]
		public static bool ClipAgainstPlane(VertexData[] aVertexDataInput, int nIndexA, int nIndexB, Vector3 v3A, Vector3 v3B, Plane planeSplit, ref VertexData clippedVertexDataOut)
		{
			return default(bool);
		}

		[Token(Token = "0x600020F")]
		[Address(RVA = "0x10066A0", Offset = "0x10066A0", VA = "0x10066A0")]
		public static VertexData[] BuildVertexDataArray(Mesh mesh, Matrix4x4 mtxLocalToWorld, bool bTransformVerticesToWorld)
		{
			return null;
		}

		[Token(Token = "0x6000210")]
		[Address(RVA = "0x1008A40", Offset = "0x1008A40", VA = "0x1008A40")]
		public static void SetMeshDataFromVertexDataArray(MeshFilter meshFilter, MeshData meshData, bool bTransformVertexToLocal)
		{
		}
	}
	[Token(Token = "0x2000059")]
	public struct EdgeKeyByIndex
	{
		[Token(Token = "0x200027D")]
		public class EqualityComparer : IEqualityComparer<EdgeKeyByIndex>
		{
			[Token(Token = "0x60013DF")]
			[Address(RVA = "0x3B6B34", Offset = "0x3B6B34", VA = "0x3B6B34", Slot = "4")]
			public bool Equals(EdgeKeyByIndex x, EdgeKeyByIndex y)
			{
				return default(bool);
			}

			[Token(Token = "0x60013E0")]
			[Address(RVA = "0x3B6B60", Offset = "0x3B6B60", VA = "0x3B6B60", Slot = "5")]
			public int GetHashCode(EdgeKeyByIndex x)
			{
				return default(int);
			}

			[Token(Token = "0x60013E1")]
			[Address(RVA = "0x3B6B98", Offset = "0x3B6B98", VA = "0x3B6B98")]
			public EqualityComparer()
			{
			}
		}

		[Token(Token = "0x4000214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int nIndexA;

		[Token(Token = "0x4000215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int nIndexB;

		[Token(Token = "0x6000211")]
		[Address(RVA = "0x2C058C", Offset = "0x2C058C", VA = "0x2C058C")]
		public EdgeKeyByIndex(int nIndexA, int nIndexB)
		{
		}

		[Token(Token = "0x6000212")]
		[Address(RVA = "0x2C0598", Offset = "0x2C0598", VA = "0x2C0598")]
		public void Set(int nIndexA, int nIndexB)
		{
		}

		[Token(Token = "0x6000213")]
		[Address(RVA = "0x2C05A4", Offset = "0x2C05A4", VA = "0x2C05A4")]
		public bool CompareTo(int nIndexA, int nIndexB)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200005A")]
	public struct EdgeKeyByHash
	{
		[Token(Token = "0x200027E")]
		public class EqualityComparer : IEqualityComparer<EdgeKeyByHash>
		{
			[Token(Token = "0x60013E2")]
			[Address(RVA = "0x3B6A68", Offset = "0x3B6A68", VA = "0x3B6A68", Slot = "4")]
			public bool Equals(EdgeKeyByHash x, EdgeKeyByHash y)
			{
				return default(bool);
			}

			[Token(Token = "0x60013E3")]
			[Address(RVA = "0x3B6A94", Offset = "0x3B6A94", VA = "0x3B6A94", Slot = "5")]
			public int GetHashCode(EdgeKeyByHash x)
			{
				return default(int);
			}

			[Token(Token = "0x60013E4")]
			[Address(RVA = "0x3B6ACC", Offset = "0x3B6ACC", VA = "0x3B6ACC")]
			public EqualityComparer()
			{
			}
		}

		[Token(Token = "0x4000216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int nHashA;

		[Token(Token = "0x4000217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int nHashB;

		[Token(Token = "0x6000214")]
		[Address(RVA = "0x2C0524", Offset = "0x2C0524", VA = "0x2C0524")]
		public EdgeKeyByHash(int nHashA, int nHashB)
		{
		}

		[Token(Token = "0x6000215")]
		[Address(RVA = "0x2C0530", Offset = "0x2C0530", VA = "0x2C0530")]
		public void Set(int nHashA, int nHashB)
		{
		}

		[Token(Token = "0x6000216")]
		[Address(RVA = "0x2C053C", Offset = "0x2C053C", VA = "0x2C053C")]
		public bool CompareTo(int nHashA, int nHashB)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200005B")]
	public struct ClippedEdge
	{
		[Token(Token = "0x4000218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int nOldIndexA;

		[Token(Token = "0x4000219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int nOldIndexB;

		[Token(Token = "0x400021A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int nNewIndexA;

		[Token(Token = "0x400021B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int nNewIndexB;

		[Token(Token = "0x400021C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int nClippedIndex;

		[Token(Token = "0x6000217")]
		[Address(RVA = "0x2C04A0", Offset = "0x2C04A0", VA = "0x2C04A0")]
		public ClippedEdge(int nOldIndexA, int nOldIndexB, int nNewIndexA, int nNewIndexB, int nClippedIndex)
		{
		}

		[Token(Token = "0x6000218")]
		[Address(RVA = "0x2C04C8", Offset = "0x2C04C8", VA = "0x2C04C8")]
		public int GetFirstIndex(int nOldIndexA)
		{
			return default(int);
		}

		[Token(Token = "0x6000219")]
		[Address(RVA = "0x2C04E0", Offset = "0x2C04E0", VA = "0x2C04E0")]
		public int GetSecondIndex(int nOldIndexB)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200005C")]
	public struct CapEdge
	{
		[Token(Token = "0x400021D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 v1;

		[Token(Token = "0x400021E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 v2;

		[Token(Token = "0x400021F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int nHash1;

		[Token(Token = "0x4000220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int nHash2;

		[Token(Token = "0x4000221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float fLength;

		[Token(Token = "0x600021A")]
		[Address(RVA = "0x2C0404", Offset = "0x2C0404", VA = "0x2C0404")]
		public CapEdge(int nHash1, int nHash2, Vector3 v1, Vector3 v2, float fLength)
		{
		}

		[Token(Token = "0x600021B")]
		[Address(RVA = "0x2C0448", Offset = "0x2C0448", VA = "0x2C0448")]
		public int SharesVertex1Of(CapEdge edge)
		{
			return default(int);
		}

		[Token(Token = "0x600021C")]
		[Address(RVA = "0x2C0474", Offset = "0x2C0474", VA = "0x2C0474")]
		public int SharesVertex2Of(CapEdge edge)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200005D")]
	public class MeshFaceConnectivity
	{
		[Token(Token = "0x200027F")]
		public struct EdgeData
		{
			[Token(Token = "0x2000316")]
			public struct SideData
			{
				[Token(Token = "0x4001194")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int nFace;

				[Token(Token = "0x4001195")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
				public int nSubMesh;

				[Token(Token = "0x4001196")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
				public int nSubMeshFace;

				[Token(Token = "0x4001197")]
				[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
				public int nEdgePos;

				[Token(Token = "0x4001198")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public int nVertexDataV1;

				[Token(Token = "0x4001199")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				public int nVertexDataV2;

				[Token(Token = "0x6001572")]
				[Address(RVA = "0x2E60B4", Offset = "0x2E60B4", VA = "0x2E60B4")]
				public SideData(int nFace, int nSubMesh, int nSubMeshFace, int nEdgePos, int nVertexDataV1, int nVertexDataV2)
				{
				}
			}

			[Token(Token = "0x4000E5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int nEdgeIndex;

			[Token(Token = "0x4000E5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			private int nVertex1Hash;

			[Token(Token = "0x4000E5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int nVertex2Hash;

			[Token(Token = "0x4000E5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 v1;

			[Token(Token = "0x4000E60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 v2;

			[Token(Token = "0x4000E61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public List<SideData> listSides;

			[Token(Token = "0x60013E5")]
			[Address(RVA = "0x2E5F50", Offset = "0x2E5F50", VA = "0x2E5F50")]
			public EdgeData(int nEdgeIndex, int nFace, int nSubMesh, int nSubMeshFace, int nEdgePos, Vector3 v1, Vector3 v2, int nVertex1Hash, int nVertex2Hash, int nVertexDataV1, int nVertexDataV2)
			{
			}

			[Token(Token = "0x60013E6")]
			[Address(RVA = "0x2E5FC4", Offset = "0x2E5FC4", VA = "0x2E5FC4")]
			public bool Compare(int nVertex1Hash, int nVertex2Hash)
			{
				return default(bool);
			}

			[Token(Token = "0x60013E7")]
			[Address(RVA = "0x2E6014", Offset = "0x2E6014", VA = "0x2E6014")]
			public void AddSideData(int nFace, int nSubMesh, int nSubMeshFace, int nEdgePos, int nVertexDataV1, int nVertexDataV2)
			{
			}

			[Token(Token = "0x60013E8")]
			[Address(RVA = "0x2E6044", Offset = "0x2E6044", VA = "0x2E6044")]
			public bool HasMoreThanOneSide()
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000280")]
		public class TriangleData
		{
			[Token(Token = "0x4000E62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int nSubMesh;

			[Token(Token = "0x4000E63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int nTriangle;

			[Token(Token = "0x4000E64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int[] anEdges;

			[Token(Token = "0x4000E65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public List<int>[] alistNeighborSubMeshes;

			[Token(Token = "0x4000E66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public List<int>[] alistNeighborTriangles;

			[Token(Token = "0x4000E67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public bool bVisited;

			[Token(Token = "0x60013E9")]
			[Address(RVA = "0x100F740", Offset = "0x100F740", VA = "0x100F740")]
			public TriangleData(int nSubMesh, int nTriangle)
			{
			}
		}

		[Token(Token = "0x4000222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public List<TriangleData> listTriangles;

		[Token(Token = "0x4000223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private List<EdgeData> listEdges;

		[Token(Token = "0x4000224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<int> listEdgeIndices;

		[Token(Token = "0x4000225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Dictionary<EdgeKeyByHash, EdgeData> dicEdges;

		[Token(Token = "0x4000226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int nEdgeCount;

		[Token(Token = "0x4000227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Dictionary<int, int> dicSubMeshTriangleCount;

		[Token(Token = "0x600021D")]
		[Address(RVA = "0x100DE84", Offset = "0x100DE84", VA = "0x100DE84")]
		public MeshFaceConnectivity()
		{
		}

		[Token(Token = "0x600021E")]
		[Address(RVA = "0x100E00C", Offset = "0x100E00C", VA = "0x100E00C")]
		public void Clear()
		{
		}

		[Token(Token = "0x600021F")]
		[Address(RVA = "0x100E13C", Offset = "0x100E13C", VA = "0x100E13C")]
		public void ResetVisited()
		{
		}

		[Token(Token = "0x6000220")]
		[Address(RVA = "0x100E200", Offset = "0x100E200", VA = "0x100E200")]
		public void AddEdge(int nSubMesh, Vector3 v1, Vector3 v2, int nVertex1Hash, int nVertex2Hash, int nVertexDataIndex1, int nVertexDataIndex2)
		{
		}
	}
	[Token(Token = "0x200005E")]
	public class MeshDataConnectivity
	{
		[Token(Token = "0x2000281")]
		public struct Face
		{
			[Token(Token = "0x2000317")]
			public class EqualityComparer : IEqualityComparer<Face>
			{
				[Token(Token = "0x6001573")]
				[Address(RVA = "0x100DE30", Offset = "0x100DE30", VA = "0x100DE30", Slot = "4")]
				public bool Equals(Face x, Face y)
				{
					return default(bool);
				}

				[Token(Token = "0x6001574")]
				[Address(RVA = "0x100DE4C", Offset = "0x100DE4C", VA = "0x100DE4C", Slot = "5")]
				public int GetHashCode(Face x)
				{
					return default(int);
				}

				[Token(Token = "0x6001575")]
				[Address(RVA = "0x100D4EC", Offset = "0x100D4EC", VA = "0x100D4EC")]
				public EqualityComparer()
				{
				}
			}

			[Token(Token = "0x4000E68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int nSubMesh;

			[Token(Token = "0x4000E69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int nFaceIndex;

			[Token(Token = "0x60013EA")]
			[Address(RVA = "0x2E5EE8", Offset = "0x2E5EE8", VA = "0x2E5EE8")]
			public Face(int nSubMesh, int nFaceIndex)
			{
			}
		}

		[Token(Token = "0x4000228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int s_CurrentSharedFaceHash;

		[Token(Token = "0x4000229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Dictionary<int, List<Face>> dicHash2FaceList;

		[Token(Token = "0x400022A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Dictionary<Face, List<int>> dicFace2HashList;

		[Token(Token = "0x400022B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Dictionary<Face, bool> dicFace2IsClipped;

		[Token(Token = "0x6000221")]
		[Address(RVA = "0x1004ED8", Offset = "0x1004ED8", VA = "0x1004ED8")]
		public MeshDataConnectivity()
		{
		}

		[Token(Token = "0x6000222")]
		[Address(RVA = "0x1007E78", Offset = "0x1007E78", VA = "0x1007E78")]
		public MeshDataConnectivity GetDeepCopy()
		{
			return null;
		}

		[Token(Token = "0x6000223")]
		[Address(RVA = "0x100D4F4", Offset = "0x100D4F4", VA = "0x100D4F4")]
		public void NotifyNewClippedFace(MeshData meshDataSource, int nSourceSubMesh, int nSourceFaceIndex, int nDestSubMesh, int nDestFaceIndex)
		{
		}

		[Token(Token = "0x6000224")]
		[Address(RVA = "0x100DA54", Offset = "0x100DA54", VA = "0x100DA54")]
		public static int GetNewHash()
		{
			return default(int);
		}

		[Token(Token = "0x6000225")]
		[Address(RVA = "0x100DBC0", Offset = "0x100DBC0", VA = "0x100DBC0")]
		public void NotifyNewCapFace(int nHash, int nSubMesh, int nFaceIndex)
		{
		}

		[Token(Token = "0x6000226")]
		[Address(RVA = "0x100C7AC", Offset = "0x100C7AC", VA = "0x100C7AC")]
		public void NotifyRemappedFace(MeshDataConnectivity source, int nSourceSubMesh, int nSourceFaceIndex, int nDestSubMesh, int nDestFaceIndex)
		{
		}
	}
	[Token(Token = "0x200005F")]
	public class MeshData
	{
		[Token(Token = "0x2000282")]
		public class IncreasingSizeComparer : IComparer<MeshData>
		{
			[Token(Token = "0x4000E6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int nSplitAxis;

			[Token(Token = "0x60013EB")]
			[Address(RVA = "0x100D1F8", Offset = "0x100D1F8", VA = "0x100D1F8")]
			public IncreasingSizeComparer(int nSplitAxis)
			{
			}

			[Token(Token = "0x60013EC")]
			[Address(RVA = "0x100D218", Offset = "0x100D218", VA = "0x100D218", Slot = "4")]
			public int Compare(MeshData a, MeshData b)
			{
				return default(int);
			}
		}

		[Token(Token = "0x2000283")]
		public class DecreasingSizeComparer : IComparer<MeshData>
		{
			[Token(Token = "0x4000E6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int nSplitAxis;

			[Token(Token = "0x60013ED")]
			[Address(RVA = "0x100CF04", Offset = "0x100CF04", VA = "0x100CF04")]
			public DecreasingSizeComparer(int nSplitAxis)
			{
			}

			[Token(Token = "0x60013EE")]
			[Address(RVA = "0x100CF24", Offset = "0x100CF24", VA = "0x100CF24", Slot = "4")]
			public int Compare(MeshData a, MeshData b)
			{
				return default(int);
			}
		}

		[Token(Token = "0x400022C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int nSubMeshCount;

		[Token(Token = "0x400022D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int[][] aaIndices;

		[Token(Token = "0x400022E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int nSplitCloseSubMesh;

		[Token(Token = "0x400022F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public VertexData[] aVertexData;

		[Token(Token = "0x4000230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 v3Position;

		[Token(Token = "0x4000231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Quaternion qRotation;

		[Token(Token = "0x4000232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 v3Scale;

		[Token(Token = "0x4000233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 v3Min;

		[Token(Token = "0x4000234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Vector3 v3Max;

		[Token(Token = "0x4000235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int nCurrentVertexHash;

		[Token(Token = "0x4000236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Material[] aMaterials;

		[Token(Token = "0x4000237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public MeshDataConnectivity meshDataConnectivity;

		[Token(Token = "0x6000228")]
		[Address(RVA = "0x1004E0C", Offset = "0x1004E0C", VA = "0x1004E0C")]
		private MeshData()
		{
		}

		[Token(Token = "0x6000229")]
		[Address(RVA = "0x1005008", Offset = "0x1005008", VA = "0x1005008")]
		public MeshData(Material[] aMaterials, List<int>[] alistIndices, List<VertexData> listVertexData, int nSplitCloseSubMesh, Vector3 v3Position, Quaternion qRotation, Vector3 v3Scale, Matrix4x4 mtxTransformVertices, bool bUseTransform, bool bBuildVertexHashData)
		{
		}

		[Token(Token = "0x600022A")]
		[Address(RVA = "0x10061EC", Offset = "0x10061EC", VA = "0x10061EC")]
		public MeshData(Transform transform, Mesh mesh, Material[] aMaterials, Matrix4x4 mtxLocalToWorld, bool bTransformVerticesToWorld, int nSplitCloseSubMesh, bool bBuildVertexHashData)
		{
		}

		[Token(Token = "0x600022B")]
		[Address(RVA = "0x1006368", Offset = "0x1006368", VA = "0x1006368")]
		public MeshData(Vector3 v3Position, Quaternion qRotation, Vector3 v3Scale, Mesh mesh, Material[] aMaterials, Matrix4x4 mtxLocalToWorld, bool bTransformVerticesToWorld, int nSplitCloseSubMesh, bool bBuildVertexHashData)
		{
		}

		[Token(Token = "0x600022C")]
		[Address(RVA = "0x10072D0", Offset = "0x10072D0", VA = "0x10072D0")]
		public static MeshData CreateBoxMeshData(Vector3 v3Pos, Quaternion qRot, Vector3 v3Scale, Vector3 v3Min, Vector3 v3Max)
		{
			return null;
		}

		[Token(Token = "0x600022D")]
		[Address(RVA = "0x1007B08", Offset = "0x1007B08", VA = "0x1007B08")]
		public MeshData GetDeepCopy()
		{
			return null;
		}

		[Token(Token = "0x600022E")]
		[Address(RVA = "0x10087A4", Offset = "0x10087A4", VA = "0x10087A4")]
		public bool FillMeshFilter(MeshFilter meshFilter, bool bTransformVerticesToLocal)
		{
			return default(bool);
		}

		[Token(Token = "0x600022F")]
		[Address(RVA = "0x1005458", Offset = "0x1005458", VA = "0x1005458")]
		public static void ComputeMinMax(IEnumerable<VertexData> VertexData, ref Vector3 v3Min, ref Vector3 v3Max)
		{
		}

		[Token(Token = "0x6000230")]
		[Address(RVA = "0x1005834", Offset = "0x1005834", VA = "0x1005834")]
		private void BuildVertexHashData()
		{
		}

		[Token(Token = "0x6000231")]
		[Address(RVA = "0x10094B4", Offset = "0x10094B4", VA = "0x10094B4")]
		public bool GetSharedFacesArea(FracturedObject fracturedComponent, MeshData meshData2, out float fSharedArea)
		{
			return default(bool);
		}

		[Token(Token = "0x6000232")]
		[Address(RVA = "0x100A394", Offset = "0x100A394", VA = "0x100A394")]
		private static bool Face2InsideFace1(FracturedObject fracturedComponent, MeshData meshData1, MeshData meshData2, MeshDataConnectivity.Face face1, MeshDataConnectivity.Face face2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000233")]
		[Address(RVA = "0x100B454", Offset = "0x100B454", VA = "0x100B454")]
		public static List<MeshData> PostProcessConnectivity(MeshData meshDataSource, MeshFaceConnectivity connectivity, MeshDataConnectivity meshConnectivity, List<int>[] alistIndices, List<VertexData> listVertexData, int nSplitCloseSubMesh, int nCurrentVertexHash, bool bTransformToLocal)
		{
			return null;
		}

		[Token(Token = "0x6000234")]
		[Address(RVA = "0x100C6F4", Offset = "0x100C6F4", VA = "0x100C6F4")]
		private static bool StillHasFacesToProcess(List<int>[] alistFacesRemaining)
		{
			return default(bool);
		}

		[Token(Token = "0x6000235")]
		[Address(RVA = "0x100BF0C", Offset = "0x100BF0C", VA = "0x100BF0C")]
		private static void LookForClosedObjectRecursive(MeshFaceConnectivity connectivity, MeshDataConnectivity meshConnectivity, int nSubMeshStart, int nFaceSubMeshStart, List<int>[] alistIndicesIn, List<VertexData> listVertexDataIn, List<int>[] alistFacesRemainingInOut, int[] aLinearFaceIndexStart, List<int>[] alistIndicesOut, List<VertexData> listVertexDataOut, Dictionary<int, int> dicVertexRemap, MeshDataConnectivity meshConnectivityOut)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000060")]
	public class SupportPlane
	{
		[Token(Token = "0x4000238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool GUIExpanded;

		[Token(Token = "0x4000239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string GUIName;

		[Token(Token = "0x400023A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool GUIShowInScene;

		[Token(Token = "0x400023B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector3 v3PlanePosition;

		[Token(Token = "0x400023C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Quaternion qPlaneRotation;

		[Token(Token = "0x400023D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 v3PlaneScale;

		[Token(Token = "0x400023E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Mesh planeMesh;

		[Token(Token = "0x400023F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public FracturedObject fracturedObject;

		[Token(Token = "0x6000236")]
		[Address(RVA = "0x100FB0C", Offset = "0x100FB0C", VA = "0x100FB0C")]
		public SupportPlane(FracturedObject fracturedObject)
		{
		}

		[Token(Token = "0x6000237")]
		[Address(RVA = "0x1010788", Offset = "0x1010788", VA = "0x1010788")]
		public Matrix4x4 GetLocalMatrix()
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6000238")]
		[Address(RVA = "0x1010874", Offset = "0x1010874", VA = "0x1010874")]
		public Vector3[] GetBoundingBoxSegments(Bounds bounds)
		{
			return null;
		}

		[Token(Token = "0x6000239")]
		[Address(RVA = "0x1010FBC", Offset = "0x1010FBC", VA = "0x1010FBC")]
		public bool IntersectsWith(GameObject otherGameObject, bool bBelowIsAlsoValid = false)
		{
			return default(bool);
		}

		[Token(Token = "0x600023A")]
		[Address(RVA = "0x1011F68", Offset = "0x1011F68", VA = "0x1011F68")]
		private static bool TestSegmentVsPlane(Vector3 v1, Vector3 v2, Plane plane, Matrix4x4 mtxToPlaneLocal, float fLimitRight, float fLimitUp, float fLimitForward)
		{
			return default(bool);
		}
	}
}
namespace Poly2Tri
{
	[Token(Token = "0x2000061")]
	public static class P2T
	{
		[Token(Token = "0x4000240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static TriangulationAlgorithm _defaultAlgorithm;

		[Token(Token = "0x600023B")]
		[Address(RVA = "0xD590A8", Offset = "0xD590A8", VA = "0xD590A8")]
		public static void Triangulate(PolygonSet ps)
		{
		}

		[Token(Token = "0x600023C")]
		[Address(RVA = "0xD593CC", Offset = "0xD593CC", VA = "0xD593CC")]
		public static void Triangulate(Polygon p)
		{
		}

		[Token(Token = "0x600023D")]
		[Address(RVA = "0xD59514", Offset = "0xD59514", VA = "0xD59514")]
		public static void Triangulate(ConstrainedPointSet cps)
		{
		}

		[Token(Token = "0x600023E")]
		[Address(RVA = "0xD595AC", Offset = "0xD595AC", VA = "0xD595AC")]
		public static void Triangulate(PointSet ps)
		{
		}

		[Token(Token = "0x600023F")]
		[Address(RVA = "0xD59644", Offset = "0xD59644", VA = "0xD59644")]
		public static TriangulationContext CreateContext(TriangulationAlgorithm algorithm)
		{
			return null;
		}

		[Token(Token = "0x6000240")]
		[Address(RVA = "0xD59464", Offset = "0xD59464", VA = "0xD59464")]
		public static void Triangulate(TriangulationAlgorithm algorithm, ITriangulatable t)
		{
		}

		[Token(Token = "0x6000241")]
		[Address(RVA = "0xD596AC", Offset = "0xD596AC", VA = "0xD596AC")]
		public static void Triangulate(TriangulationContext tcx)
		{
		}

		[Token(Token = "0x6000242")]
		[Address(RVA = "0xD59778", Offset = "0xD59778", VA = "0xD59778")]
		public static void Warmup()
		{
		}
	}
	[Token(Token = "0x2000062")]
	public class DelaunayTriangle
	{
		[Token(Token = "0x4000241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public FixedArray3<TriangulationPoint> Points;

		[Token(Token = "0x4000242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public FixedArray3<DelaunayTriangle> Neighbors;

		[Token(Token = "0x4000243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FixedBitArray3 mEdgeIsConstrained;

		[Token(Token = "0x4000244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		public FixedBitArray3 EdgeIsDelaunay;

		[Token(Token = "0x4000245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2425DC", Offset = "0x2425DC")]
		private bool <IsInterior>k__BackingField;

		[Token(Token = "0x1700002E")]
		public FixedBitArray3 EdgeIsConstrained
		{
			[Token(Token = "0x6000244")]
			[Address(RVA = "0xD574BC", Offset = "0xD574BC", VA = "0xD574BC")]
			get
			{
				return default(FixedBitArray3);
			}
		}

		[Token(Token = "0x1700002F")]
		public bool IsInterior
		{
			[Token(Token = "0x6000245")]
			[Address(RVA = "0xD574CC", Offset = "0xD574CC", VA = "0xD574CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2487C0", Offset = "0x2487C0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000246")]
			[Address(RVA = "0xD574D4", Offset = "0xD574D4", VA = "0xD574D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2487D0", Offset = "0x2487D0")]
			set
			{
			}
		}

		[Token(Token = "0x6000247")]
		[Address(RVA = "0xD53298", Offset = "0xD53298", VA = "0xD53298")]
		public DelaunayTriangle(TriangulationPoint p1, TriangulationPoint p2, TriangulationPoint p3)
		{
		}

		[Token(Token = "0x6000248")]
		[Address(RVA = "0xD56704", Offset = "0xD56704", VA = "0xD56704")]
		public int IndexOf(TriangulationPoint p)
		{
			return default(int);
		}

		[Token(Token = "0x6000249")]
		[Address(RVA = "0xD574DC", Offset = "0xD574DC", VA = "0xD574DC")]
		public int IndexCWFrom(TriangulationPoint p)
		{
			return default(int);
		}

		[Token(Token = "0x600024A")]
		[Address(RVA = "0xD57508", Offset = "0xD57508", VA = "0xD57508")]
		public int IndexCCWFrom(TriangulationPoint p)
		{
			return default(int);
		}

		[Token(Token = "0x600024B")]
		[Address(RVA = "0xD51EB0", Offset = "0xD51EB0", VA = "0xD51EB0")]
		public bool Contains(TriangulationPoint p)
		{
			return default(bool);
		}

		[Token(Token = "0x600024C")]
		[Address(RVA = "0xD57534", Offset = "0xD57534", VA = "0xD57534")]
		private void MarkNeighbor(TriangulationPoint p1, TriangulationPoint p2, DelaunayTriangle t)
		{
		}

		[Token(Token = "0x600024D")]
		[Address(RVA = "0xD53354", Offset = "0xD53354", VA = "0xD53354")]
		public void MarkNeighbor(DelaunayTriangle t)
		{
		}

		[Token(Token = "0x600024E")]
		[Address(RVA = "0xD5761C", Offset = "0xD5761C", VA = "0xD5761C")]
		public void ClearNeighbors()
		{
		}

		[Token(Token = "0x600024F")]
		[Address(RVA = "0xD576B4", Offset = "0xD576B4", VA = "0xD576B4")]
		public void ClearNeighbor(DelaunayTriangle triangle)
		{
		}

		[Token(Token = "0x6000250")]
		[Address(RVA = "0xD52918", Offset = "0xD52918", VA = "0xD52918")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000251")]
		[Address(RVA = "0xD51FA4", Offset = "0xD51FA4", VA = "0xD51FA4")]
		public TriangulationPoint OppositePoint(DelaunayTriangle t, TriangulationPoint p)
		{
			return null;
		}

		[Token(Token = "0x6000252")]
		[Address(RVA = "0xD52A84", Offset = "0xD52A84", VA = "0xD52A84")]
		public DelaunayTriangle NeighborCWFrom(TriangulationPoint point)
		{
			return null;
		}

		[Token(Token = "0x6000253")]
		[Address(RVA = "0xD52878", Offset = "0xD52878", VA = "0xD52878")]
		public DelaunayTriangle NeighborCCWFrom(TriangulationPoint point)
		{
			return null;
		}

		[Token(Token = "0x6000254")]
		[Address(RVA = "0xD51F1C", Offset = "0xD51F1C", VA = "0xD51F1C")]
		public DelaunayTriangle NeighborAcrossFrom(TriangulationPoint point)
		{
			return null;
		}

		[Token(Token = "0x6000255")]
		[Address(RVA = "0xD527E8", Offset = "0xD527E8", VA = "0xD527E8")]
		public TriangulationPoint PointCCWFrom(TriangulationPoint point)
		{
			return null;
		}

		[Token(Token = "0x6000256")]
		[Address(RVA = "0xD529F4", Offset = "0xD529F4", VA = "0xD529F4")]
		public TriangulationPoint PointCWFrom(TriangulationPoint point)
		{
			return null;
		}

		[Token(Token = "0x6000257")]
		[Address(RVA = "0xD577BC", Offset = "0xD577BC", VA = "0xD577BC")]
		private void RotateCW()
		{
		}

		[Token(Token = "0x6000258")]
		[Address(RVA = "0xD56864", Offset = "0xD56864", VA = "0xD56864")]
		public void Legalize(TriangulationPoint oPoint, TriangulationPoint nPoint)
		{
		}

		[Token(Token = "0x6000259")]
		[Address(RVA = "0xD57894", Offset = "0xD57894", VA = "0xD57894", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600025A")]
		[Address(RVA = "0xD57B44", Offset = "0xD57B44", VA = "0xD57B44")]
		public void MarkNeighborEdges()
		{
		}

		[Token(Token = "0x600025B")]
		[Address(RVA = "0xD57CC8", Offset = "0xD57CC8", VA = "0xD57CC8")]
		public void MarkEdge(DelaunayTriangle triangle)
		{
		}

		[Token(Token = "0x600025C")]
		[Address(RVA = "0xD57DE4", Offset = "0xD57DE4", VA = "0xD57DE4")]
		public void MarkEdge(List<DelaunayTriangle> tList)
		{
		}

		[Token(Token = "0x600025D")]
		[Address(RVA = "0xD51D38", Offset = "0xD51D38", VA = "0xD51D38")]
		public void MarkConstrainedEdge(int index)
		{
		}

		[Token(Token = "0x600025E")]
		[Address(RVA = "0xD58000", Offset = "0xD58000", VA = "0xD58000")]
		public void MarkConstrainedEdge(DTSweepConstraint edge)
		{
		}

		[Token(Token = "0x600025F")]
		[Address(RVA = "0xD54D28", Offset = "0xD54D28", VA = "0xD54D28")]
		public void MarkConstrainedEdge(TriangulationPoint p, TriangulationPoint q)
		{
		}

		[Token(Token = "0x6000260")]
		[Address(RVA = "0xD58070", Offset = "0xD58070", VA = "0xD58070")]
		public double Area()
		{
			return default(double);
		}

		[Token(Token = "0x6000261")]
		[Address(RVA = "0xD58250", Offset = "0xD58250", VA = "0xD58250")]
		public TriangulationPoint Centroid()
		{
			return null;
		}

		[Token(Token = "0x6000262")]
		[Address(RVA = "0xD54C0C", Offset = "0xD54C0C", VA = "0xD54C0C")]
		public int EdgeIndex(TriangulationPoint p1, TriangulationPoint p2)
		{
			return default(int);
		}

		[Token(Token = "0x6000263")]
		[Address(RVA = "0xD51CAC", Offset = "0xD51CAC", VA = "0xD51CAC")]
		public bool GetConstrainedEdgeCCW(TriangulationPoint p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000264")]
		[Address(RVA = "0xD52D7C", Offset = "0xD52D7C", VA = "0xD52D7C")]
		public bool GetConstrainedEdgeCW(TriangulationPoint p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000265")]
		[Address(RVA = "0xD584F0", Offset = "0xD584F0", VA = "0xD584F0")]
		public bool GetConstrainedEdgeAcross(TriangulationPoint p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000266")]
		[Address(RVA = "0xD58524", Offset = "0xD58524", VA = "0xD58524")]
		protected void SetConstrainedEdge(int idx, bool ce)
		{
		}

		[Token(Token = "0x6000267")]
		[Address(RVA = "0xD56984", Offset = "0xD56984", VA = "0xD56984")]
		public void SetConstrainedEdgeCCW(TriangulationPoint p, bool ce)
		{
		}

		[Token(Token = "0x6000268")]
		[Address(RVA = "0xD569C4", Offset = "0xD569C4", VA = "0xD569C4")]
		public void SetConstrainedEdgeCW(TriangulationPoint p, bool ce)
		{
		}

		[Token(Token = "0x6000269")]
		[Address(RVA = "0xD567CC", Offset = "0xD567CC", VA = "0xD567CC")]
		public void SetConstrainedEdgeAcross(TriangulationPoint p, bool ce)
		{
		}

		[Token(Token = "0x600026A")]
		[Address(RVA = "0xD567F4", Offset = "0xD567F4", VA = "0xD567F4")]
		public bool GetDelaunayEdgeCCW(TriangulationPoint p)
		{
			return default(bool);
		}

		[Token(Token = "0x600026B")]
		[Address(RVA = "0xD5682C", Offset = "0xD5682C", VA = "0xD5682C")]
		public bool GetDelaunayEdgeCW(TriangulationPoint p)
		{
			return default(bool);
		}

		[Token(Token = "0x600026C")]
		[Address(RVA = "0xD5852C", Offset = "0xD5852C", VA = "0xD5852C")]
		public bool GetDelaunayEdgeAcross(TriangulationPoint p)
		{
			return default(bool);
		}

		[Token(Token = "0x600026D")]
		[Address(RVA = "0xD56904", Offset = "0xD56904", VA = "0xD56904")]
		public void SetDelaunayEdgeCCW(TriangulationPoint p, bool ce)
		{
		}

		[Token(Token = "0x600026E")]
		[Address(RVA = "0xD56944", Offset = "0xD56944", VA = "0xD56944")]
		public void SetDelaunayEdgeCW(TriangulationPoint p, bool ce)
		{
		}

		[Token(Token = "0x600026F")]
		[Address(RVA = "0xD5854C", Offset = "0xD5854C", VA = "0xD5854C")]
		public void SetDelaunayEdgeAcross(TriangulationPoint p, bool ce)
		{
		}

		[Token(Token = "0x6000270")]
		[Address(RVA = "0xD58574", Offset = "0xD58574", VA = "0xD58574")]
		public bool GetEdge(int idx, out DTSweepConstraint edge)
		{
			return default(bool);
		}

		[Token(Token = "0x6000271")]
		[Address(RVA = "0xD51CF8", Offset = "0xD51CF8", VA = "0xD51CF8")]
		public bool GetEdgeCCW(TriangulationPoint p, out DTSweepConstraint edge)
		{
			return default(bool);
		}

		[Token(Token = "0x6000272")]
		[Address(RVA = "0xD58694", Offset = "0xD58694", VA = "0xD58694")]
		public bool GetEdgeCW(TriangulationPoint p, out DTSweepConstraint edge)
		{
			return default(bool);
		}

		[Token(Token = "0x6000273")]
		[Address(RVA = "0xD586D4", Offset = "0xD586D4", VA = "0xD586D4")]
		public bool GetEdgeAcross(TriangulationPoint p, out DTSweepConstraint edge)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000063")]
	public class AdvancingFront
	{
		[Token(Token = "0x4000246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AdvancingFrontNode Head;

		[Token(Token = "0x4000247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public AdvancingFrontNode Tail;

		[Token(Token = "0x4000248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected AdvancingFrontNode Search;

		[Token(Token = "0x6000274")]
		[Address(RVA = "0xD450B0", Offset = "0xD450B0", VA = "0xD450B0")]
		public AdvancingFront(AdvancingFrontNode head, AdvancingFrontNode tail)
		{
		}

		[Token(Token = "0x6000275")]
		[Address(RVA = "0xD450DC", Offset = "0xD450DC", VA = "0xD450DC")]
		public void AddNode(AdvancingFrontNode node)
		{
		}

		[Token(Token = "0x6000276")]
		[Address(RVA = "0xD450E0", Offset = "0xD450E0", VA = "0xD450E0")]
		public void RemoveNode(AdvancingFrontNode node)
		{
		}

		[Token(Token = "0x6000277")]
		[Address(RVA = "0xD450E4", Offset = "0xD450E4", VA = "0xD450E4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000278")]
		[Address(RVA = "0xD452B0", Offset = "0xD452B0", VA = "0xD452B0")]
		private AdvancingFrontNode FindSearchNode(double x)
		{
			return null;
		}

		[Token(Token = "0x6000279")]
		[Address(RVA = "0xD452B8", Offset = "0xD452B8", VA = "0xD452B8")]
		public AdvancingFrontNode LocateNode(TriangulationPoint point)
		{
			return null;
		}

		[Token(Token = "0x600027A")]
		[Address(RVA = "0xD45308", Offset = "0xD45308", VA = "0xD45308")]
		private AdvancingFrontNode LocateNode(double x)
		{
			return null;
		}

		[Token(Token = "0x600027B")]
		[Address(RVA = "0xD453A0", Offset = "0xD453A0", VA = "0xD453A0")]
		public AdvancingFrontNode LocatePoint(TriangulationPoint point)
		{
			return null;
		}
	}
	[Token(Token = "0x2000064")]
	public class AdvancingFrontNode
	{
		[Token(Token = "0x4000249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AdvancingFrontNode Next;

		[Token(Token = "0x400024A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public AdvancingFrontNode Prev;

		[Token(Token = "0x400024B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double Value;

		[Token(Token = "0x400024C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TriangulationPoint Point;

		[Token(Token = "0x400024D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public DelaunayTriangle Triangle;

		[Token(Token = "0x17000030")]
		public bool HasNext
		{
			[Token(Token = "0x600027D")]
			[Address(RVA = "0xD455C0", Offset = "0xD455C0", VA = "0xD455C0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000031")]
		public bool HasPrev
		{
			[Token(Token = "0x600027E")]
			[Address(RVA = "0xD455D0", Offset = "0xD455D0", VA = "0xD455D0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600027C")]
		[Address(RVA = "0xD45578", Offset = "0xD45578", VA = "0xD45578")]
		public AdvancingFrontNode(TriangulationPoint point)
		{
		}
	}
	[Token(Token = "0x2000065")]
	public static class DTSweep
	{
		[Token(Token = "0x400024E")]
		private const double PI_div2 = Math.PI / 2.0;

		[Token(Token = "0x400024F")]
		private const double PI_3div4 = Math.PI * 3.0 / 4.0;

		[Token(Token = "0x600027F")]
		[Address(RVA = "0xD504F4", Offset = "0xD504F4", VA = "0xD504F4")]
		public static void Triangulate(DTSweepContext tcx)
		{
		}

		[Token(Token = "0x6000280")]
		[Address(RVA = "0xD50854", Offset = "0xD50854", VA = "0xD50854")]
		private static void Sweep(DTSweepContext tcx)
		{
		}

		[Token(Token = "0x6000281")]
		[Address(RVA = "0xD50B04", Offset = "0xD50B04", VA = "0xD50B04")]
		private static void FixupConstrainedEdges(DTSweepContext tcx)
		{
		}

		[Token(Token = "0x6000282")]
		[Address(RVA = "0xD50ECC", Offset = "0xD50ECC", VA = "0xD50ECC")]
		private static void FinalizationConvexHull(DTSweepContext tcx)
		{
		}

		[Token(Token = "0x6000283")]
		[Address(RVA = "0xD51D44", Offset = "0xD51D44", VA = "0xD51D44")]
		private static void TurnAdvancingFrontConvex(DTSweepContext tcx, AdvancingFrontNode b, AdvancingFrontNode c)
		{
		}

		[Token(Token = "0x6000284")]
		[Address(RVA = "0xD50D90", Offset = "0xD50D90", VA = "0xD50D90")]
		private static void FinalizationPolygon(DTSweepContext tcx)
		{
		}

		[Token(Token = "0x6000285")]
		[Address(RVA = "0xD52DCC", Offset = "0xD52DCC", VA = "0xD52DCC")]
		private static void FinalizationConstraints(DTSweepContext tcx)
		{
		}

		[Token(Token = "0x6000286")]
		[Address(RVA = "0xD516BC", Offset = "0xD516BC", VA = "0xD516BC")]
		private static AdvancingFrontNode PointEvent(DTSweepContext tcx, TriangulationPoint point)
		{
			return null;
		}

		[Token(Token = "0x6000287")]
		[Address(RVA = "0xD52F10", Offset = "0xD52F10", VA = "0xD52F10")]
		private static AdvancingFrontNode NewFrontTriangle(DTSweepContext tcx, TriangulationPoint point, AdvancingFrontNode node)
		{
			return null;
		}

		[Token(Token = "0x6000288")]
		[Address(RVA = "0xD51914", Offset = "0xD51914", VA = "0xD51914")]
		private static void EdgeEvent(DTSweepContext tcx, DTSweepConstraint edge, AdvancingFrontNode node)
		{
		}

		[Token(Token = "0x6000289")]
		[Address(RVA = "0xD53AA0", Offset = "0xD53AA0", VA = "0xD53AA0")]
		private static void FillEdgeEvent(DTSweepContext tcx, DTSweepConstraint edge, AdvancingFrontNode node)
		{
		}

		[Token(Token = "0x600028A")]
		[Address(RVA = "0xD54314", Offset = "0xD54314", VA = "0xD54314")]
		private static void FillRightConcaveEdgeEvent(DTSweepContext tcx, DTSweepConstraint edge, AdvancingFrontNode node)
		{
		}

		[Token(Token = "0x600028B")]
		[Address(RVA = "0xD54474", Offset = "0xD54474", VA = "0xD54474")]
		private static void FillRightConvexEdgeEvent(DTSweepContext tcx, DTSweepConstraint edge, AdvancingFrontNode node)
		{
		}

		[Token(Token = "0x600028C")]
		[Address(RVA = "0xD545EC", Offset = "0xD545EC", VA = "0xD545EC")]
		private static void FillRightBelowEdgeEvent(DTSweepContext tcx, DTSweepConstraint edge, AdvancingFrontNode node)
		{
		}

		[Token(Token = "0x600028D")]
		[Address(RVA = "0xD53FC4", Offset = "0xD53FC4", VA = "0xD53FC4")]
		private static void FillRightAboveEdgeEvent(DTSweepContext tcx, DTSweepConstraint edge, AdvancingFrontNode node)
		{
		}

		[Token(Token = "0x600028E")]
		[Address(RVA = "0xD54790", Offset = "0xD54790", VA = "0xD54790")]
		private static void FillLeftConvexEdgeEvent(DTSweepContext tcx, DTSweepConstraint edge, AdvancingFrontNode node)
		{
		}

		[Token(Token = "0x600028F")]
		[Address(RVA = "0xD54908", Offset = "0xD54908", VA = "0xD54908")]
		private static void FillLeftConcaveEdgeEvent(DTSweepContext tcx, DTSweepConstraint edge, AdvancingFrontNode node)
		{
		}

		[Token(Token = "0x6000290")]
		[Address(RVA = "0xD54A68", Offset = "0xD54A68", VA = "0xD54A68")]
		private static void FillLeftBelowEdgeEvent(DTSweepContext tcx, DTSweepConstraint edge, AdvancingFrontNode node)
		{
		}

		[Token(Token = "0x6000291")]
		[Address(RVA = "0xD5416C", Offset = "0xD5416C", VA = "0xD5416C")]
		private static void FillLeftAboveEdgeEvent(DTSweepContext tcx, DTSweepConstraint edge, AdvancingFrontNode node)
		{
		}

		[Token(Token = "0x6000292")]
		[Address(RVA = "0xD539A8", Offset = "0xD539A8", VA = "0xD539A8")]
		private static bool IsEdgeSideOfTriangle(DelaunayTriangle triangle, TriangulationPoint ep, TriangulationPoint eq)
		{
			return default(bool);
		}

		[Token(Token = "0x6000293")]
		[Address(RVA = "0xD53B0C", Offset = "0xD53B0C", VA = "0xD53B0C")]
		private static void EdgeEvent(DTSweepContext tcx, TriangulationPoint ep, TriangulationPoint eq, DelaunayTriangle triangle, TriangulationPoint point)
		{
		}

		[Token(Token = "0x6000294")]
		[Address(RVA = "0xD54D84", Offset = "0xD54D84", VA = "0xD54D84")]
		private static void FlipEdgeEvent(DTSweepContext tcx, TriangulationPoint ep, TriangulationPoint eq, DelaunayTriangle t, TriangulationPoint p)
		{
		}

		[Token(Token = "0x6000295")]
		[Address(RVA = "0xD55458", Offset = "0xD55458", VA = "0xD55458")]
		private static bool NextFlipPoint(TriangulationPoint ep, TriangulationPoint eq, DelaunayTriangle ot, TriangulationPoint op, out TriangulationPoint newP)
		{
			return default(bool);
		}

		[Token(Token = "0x6000296")]
		[Address(RVA = "0xD55330", Offset = "0xD55330", VA = "0xD55330")]
		private static DelaunayTriangle NextFlipTriangle(DTSweepContext tcx, Orientation o, DelaunayTriangle t, DelaunayTriangle ot, TriangulationPoint p, TriangulationPoint op)
		{
			return null;
		}

		[Token(Token = "0x6000297")]
		[Address(RVA = "0xD55588", Offset = "0xD55588", VA = "0xD55588")]
		private static void FlipScanEdgeEvent(DTSweepContext tcx, TriangulationPoint ep, TriangulationPoint eq, DelaunayTriangle flipTriangle, DelaunayTriangle t, TriangulationPoint p)
		{
		}

		[Token(Token = "0x6000298")]
		[Address(RVA = "0xD53138", Offset = "0xD53138", VA = "0xD53138")]
		private static void FillAdvancingFront(DTSweepContext tcx, AdvancingFrontNode n)
		{
		}

		[Token(Token = "0x6000299")]
		[Address(RVA = "0xD55D1C", Offset = "0xD55D1C", VA = "0xD55D1C")]
		private static void FillBasin(DTSweepContext tcx, AdvancingFrontNode node)
		{
		}

		[Token(Token = "0x600029A")]
		[Address(RVA = "0xD5629C", Offset = "0xD5629C", VA = "0xD5629C")]
		private static void FillBasinReq(DTSweepContext tcx, AdvancingFrontNode node)
		{
		}

		[Token(Token = "0x600029B")]
		[Address(RVA = "0xD56504", Offset = "0xD56504", VA = "0xD56504")]
		private static bool IsShallow(DTSweepContext tcx, AdvancingFrontNode node)
		{
			return default(bool);
		}

		[Token(Token = "0x600029C")]
		[Address(RVA = "0xD558F0", Offset = "0xD558F0", VA = "0xD558F0")]
		private static double HoleAngle(AdvancingFrontNode node)
		{
			return default(double);
		}

		[Token(Token = "0x600029D")]
		[Address(RVA = "0xD55B54", Offset = "0xD55B54", VA = "0xD55B54")]
		private static double BasinAngle(AdvancingFrontNode node)
		{
			return default(double);
		}

		[Token(Token = "0x600029E")]
		[Address(RVA = "0xD52BA8", Offset = "0xD52BA8", VA = "0xD52BA8")]
		private static void Fill(DTSweepContext tcx, AdvancingFrontNode node)
		{
		}

		[Token(Token = "0x600029F")]
		[Address(RVA = "0xD535E4", Offset = "0xD535E4", VA = "0xD535E4")]
		private static bool Legalize(DTSweepContext tcx, DelaunayTriangle t)
		{
			return default(bool);
		}

		[Token(Token = "0x60002A0")]
		[Address(RVA = "0xD51FE4", Offset = "0xD51FE4", VA = "0xD51FE4")]
		private static void RotateTrianglePair(DelaunayTriangle t, TriangulationPoint p, DelaunayTriangle ot, TriangulationPoint op)
		{
		}
	}
	[Token(Token = "0x2000066")]
	public class DTSweepBasin
	{
		[Token(Token = "0x4000250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AdvancingFrontNode leftNode;

		[Token(Token = "0x4000251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public AdvancingFrontNode bottomNode;

		[Token(Token = "0x4000252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AdvancingFrontNode rightNode;

		[Token(Token = "0x4000253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public double width;

		[Token(Token = "0x4000254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool leftHighest;

		[Token(Token = "0x60002A1")]
		[Address(RVA = "0xD56A04", Offset = "0xD56A04", VA = "0xD56A04")]
		public DTSweepBasin()
		{
		}
	}
	[Token(Token = "0x2000067")]
	public class DTSweepConstraint : TriangulationConstraint
	{
		[Token(Token = "0x60002A2")]
		[Address(RVA = "0xD56A0C", Offset = "0xD56A0C", VA = "0xD56A0C")]
		public DTSweepConstraint(TriangulationPoint p1, TriangulationPoint p2)
		{
		}
	}
	[Token(Token = "0x2000068")]
	public class DTSweepContext : TriangulationContext
	{
		[Token(Token = "0x4000255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private readonly float ALPHA;

		[Token(Token = "0x4000256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AdvancingFront Front;

		[Token(Token = "0x4000257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2425EC", Offset = "0x2425EC")]
		private TriangulationPoint <Head>k__BackingField;

		[Token(Token = "0x4000258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2425FC", Offset = "0x2425FC")]
		private TriangulationPoint <Tail>k__BackingField;

		[Token(Token = "0x4000259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public DTSweepBasin Basin;

		[Token(Token = "0x400025A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public DTSweepEdgeEvent EdgeEvent;

		[Token(Token = "0x400025B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private DTSweepPointComparator _comparator;

		[Token(Token = "0x17000032")]
		public TriangulationPoint Head
		{
			[Token(Token = "0x60002A3")]
			[Address(RVA = "0xD56A54", Offset = "0xD56A54", VA = "0xD56A54")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2487E0", Offset = "0x2487E0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60002A4")]
			[Address(RVA = "0xD56A5C", Offset = "0xD56A5C", VA = "0xD56A5C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2487F0", Offset = "0x2487F0")]
			set
			{
			}
		}

		[Token(Token = "0x17000033")]
		public TriangulationPoint Tail
		{
			[Token(Token = "0x60002A5")]
			[Address(RVA = "0xD56A64", Offset = "0xD56A64", VA = "0xD56A64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248800", Offset = "0x248800")]
			get
			{
				return null;
			}
			[Token(Token = "0x60002A6")]
			[Address(RVA = "0xD56A6C", Offset = "0xD56A6C", VA = "0xD56A6C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248810", Offset = "0x248810")]
			set
			{
			}
		}

		[Token(Token = "0x17000034")]
		public override TriangulationAlgorithm Algorithm
		{
			[Token(Token = "0x60002A7")]
			[Address(RVA = "0xD56A74", Offset = "0xD56A74", VA = "0xD56A74", Slot = "4")]
			get
			{
				return default(TriangulationAlgorithm);
			}
		}

		[Token(Token = "0x17000035")]
		public override bool IsDebugEnabled
		{
			[Token(Token = "0x60002A9")]
			[Address(RVA = "0xD56B70", Offset = "0xD56B70", VA = "0xD56B70", Slot = "8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60002AA")]
			[Address(RVA = "0xD56B78", Offset = "0xD56B78", VA = "0xD56B78", Slot = "9")]
			protected set
			{
			}
		}

		[Token(Token = "0x60002A8")]
		[Address(RVA = "0xD56A7C", Offset = "0xD56A7C", VA = "0xD56A7C")]
		public DTSweepContext()
		{
		}

		[Token(Token = "0x60002AB")]
		[Address(RVA = "0xD52768", Offset = "0xD52768", VA = "0xD52768")]
		public void RemoveFromList(DelaunayTriangle triangle)
		{
		}

		[Token(Token = "0x60002AC")]
		[Address(RVA = "0xD52DC8", Offset = "0xD52DC8", VA = "0xD52DC8")]
		public void MeshClean(DelaunayTriangle triangle)
		{
		}

		[Token(Token = "0x60002AD")]
		[Address(RVA = "0xD56C0C", Offset = "0xD56C0C", VA = "0xD56C0C")]
		private void MeshCleanReq(DelaunayTriangle triangle)
		{
		}

		[Token(Token = "0x60002AE")]
		[Address(RVA = "0xD56D84", Offset = "0xD56D84", VA = "0xD56D84", Slot = "7")]
		public override void Clear()
		{
		}

		[Token(Token = "0x60002AF")]
		[Address(RVA = "0xD53120", Offset = "0xD53120", VA = "0xD53120")]
		public void AddNode(AdvancingFrontNode node)
		{
		}

		[Token(Token = "0x60002B0")]
		[Address(RVA = "0xD56634", Offset = "0xD56634", VA = "0xD56634")]
		public void RemoveNode(AdvancingFrontNode node)
		{
		}

		[Token(Token = "0x60002B1")]
		[Address(RVA = "0xD52EE0", Offset = "0xD52EE0", VA = "0xD52EE0")]
		public AdvancingFrontNode LocateNode(TriangulationPoint point)
		{
			return null;
		}

		[Token(Token = "0x60002B2")]
		[Address(RVA = "0xD50584", Offset = "0xD50584", VA = "0xD50584")]
		public void CreateAdvancingFront()
		{
		}

		[Token(Token = "0x60002B3")]
		[Address(RVA = "0xD5261C", Offset = "0xD5261C", VA = "0xD5261C")]
		public void MapTriangleToNodes(DelaunayTriangle t)
		{
		}

		[Token(Token = "0x60002B4")]
		[Address(RVA = "0xD56E08", Offset = "0xD56E08", VA = "0xD56E08", Slot = "5")]
		public override void PrepareTriangulation(ITriangulatable t)
		{
		}

		[Token(Token = "0x60002B5")]
		[Address(RVA = "0xD515B0", Offset = "0xD515B0", VA = "0xD515B0")]
		public void FinalizeTriangulation()
		{
		}

		[Token(Token = "0x60002B6")]
		[Address(RVA = "0xD571F4", Offset = "0xD571F4", VA = "0xD571F4", Slot = "6")]
		public override TriangulationConstraint NewConstraint(TriangulationPoint a, TriangulationPoint b)
		{
			return null;
		}
	}
	[Token(Token = "0x2000069")]
	public class DTSweepDebugContext : TriangulationDebugContext
	{
		[Token(Token = "0x400025C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private DelaunayTriangle _primaryTriangle;

		[Token(Token = "0x400025D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private DelaunayTriangle _secondaryTriangle;

		[Token(Token = "0x400025E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private TriangulationPoint _activePoint;

		[Token(Token = "0x400025F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private AdvancingFrontNode _activeNode;

		[Token(Token = "0x4000260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private DTSweepConstraint _activeConstraint;

		[Token(Token = "0x17000036")]
		public DelaunayTriangle PrimaryTriangle
		{
			[Token(Token = "0x60002B7")]
			[Address(RVA = "0xD5726C", Offset = "0xD5726C", VA = "0xD5726C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60002B8")]
			[Address(RVA = "0xD53924", Offset = "0xD53924", VA = "0xD53924")]
			set
			{
			}
		}

		[Token(Token = "0x17000037")]
		public DelaunayTriangle SecondaryTriangle
		{
			[Token(Token = "0x60002B9")]
			[Address(RVA = "0xD57274", Offset = "0xD57274", VA = "0xD57274")]
			get
			{
				return null;
			}
			[Token(Token = "0x60002BA")]
			[Address(RVA = "0xD552AC", Offset = "0xD552AC", VA = "0xD552AC")]
			set
			{
			}
		}

		[Token(Token = "0x17000038")]
		public TriangulationPoint ActivePoint
		{
			[Token(Token = "0x60002BB")]
			[Address(RVA = "0xD5727C", Offset = "0xD5727C", VA = "0xD5727C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60002BC")]
			[Address(RVA = "0xD57284", Offset = "0xD57284", VA = "0xD57284")]
			set
			{
			}
		}

		[Token(Token = "0x17000039")]
		public AdvancingFrontNode ActiveNode
		{
			[Token(Token = "0x60002BD")]
			[Address(RVA = "0xD57308", Offset = "0xD57308", VA = "0xD57308")]
			get
			{
				return null;
			}
			[Token(Token = "0x60002BE")]
			[Address(RVA = "0xD52B24", Offset = "0xD52B24", VA = "0xD52B24")]
			set
			{
			}
		}

		[Token(Token = "0x1700003A")]
		public DTSweepConstraint ActiveConstraint
		{
			[Token(Token = "0x60002BF")]
			[Address(RVA = "0xD57310", Offset = "0xD57310", VA = "0xD57310")]
			get
			{
				return null;
			}
			[Token(Token = "0x60002C0")]
			[Address(RVA = "0xD51890", Offset = "0xD51890", VA = "0xD51890")]
			set
			{
			}
		}

		[Token(Token = "0x1700003B")]
		public bool IsDebugContext
		{
			[Token(Token = "0x60002C2")]
			[Address(RVA = "0xD57318", Offset = "0xD57318", VA = "0xD57318")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60002C1")]
		[Address(RVA = "0xD56C04", Offset = "0xD56C04", VA = "0xD56C04")]
		public DTSweepDebugContext(DTSweepContext tcx)
		{
		}

		[Token(Token = "0x60002C3")]
		[Address(RVA = "0xD57320", Offset = "0xD57320", VA = "0xD57320", Slot = "4")]
		public override void Clear()
		{
		}
	}
	[Token(Token = "0x200006A")]
	public class DTSweepEdgeEvent
	{
		[Token(Token = "0x4000261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public DTSweepConstraint ConstrainedEdge;

		[Token(Token = "0x4000262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool Right;

		[Token(Token = "0x60002C4")]
		[Address(RVA = "0xD56B60", Offset = "0xD56B60", VA = "0xD56B60")]
		public DTSweepEdgeEvent()
		{
		}
	}
	[Token(Token = "0x200006B")]
	public class DTSweepPointComparator : IComparer<TriangulationPoint>
	{
		[Token(Token = "0x60002C5")]
		[Address(RVA = "0xD57368", Offset = "0xD57368", VA = "0xD57368", Slot = "4")]
		public int Compare(TriangulationPoint p1, TriangulationPoint p2)
		{
			return default(int);
		}

		[Token(Token = "0x60002C6")]
		[Address(RVA = "0xD56B68", Offset = "0xD56B68", VA = "0xD56B68")]
		public DTSweepPointComparator()
		{
		}
	}
	[Token(Token = "0x200006C")]
	public class PointOnEdgeException : NotImplementedException
	{
		[Token(Token = "0x4000263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public readonly TriangulationPoint A;

		[Token(Token = "0x4000264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public readonly TriangulationPoint B;

		[Token(Token = "0x4000265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public readonly TriangulationPoint C;

		[Token(Token = "0x60002C7")]
		[Address(RVA = "0xD54D54", Offset = "0xD54D54", VA = "0xD54D54")]
		public PointOnEdgeException(string message, TriangulationPoint a, TriangulationPoint b, TriangulationPoint c)
		{
		}
	}
	[Token(Token = "0x200006D")]
	public interface ITriangulatable
	{
		[Token(Token = "0x1700003C")]
		IList<DelaunayTriangle> Triangles
		{
			[Token(Token = "0x60002C8")]
			get;
		}

		[Token(Token = "0x1700003D")]
		TriangulationMode TriangulationMode
		{
			[Token(Token = "0x60002C9")]
			get;
		}

		[Token(Token = "0x1700003E")]
		string FileName
		{
			[Token(Token = "0x60002CA")]
			get;
			[Token(Token = "0x60002CB")]
			set;
		}

		[Token(Token = "0x1700003F")]
		bool DisplayFlipX
		{
			[Token(Token = "0x60002CC")]
			get;
			[Token(Token = "0x60002CD")]
			set;
		}

		[Token(Token = "0x17000040")]
		bool DisplayFlipY
		{
			[Token(Token = "0x60002CE")]
			get;
			[Token(Token = "0x60002CF")]
			set;
		}

		[Token(Token = "0x17000041")]
		float DisplayRotate
		{
			[Token(Token = "0x60002D0")]
			get;
			[Token(Token = "0x60002D1")]
			set;
		}

		[Token(Token = "0x17000042")]
		double Precision
		{
			[Token(Token = "0x60002D2")]
			get;
			[Token(Token = "0x60002D3")]
			set;
		}

		[Token(Token = "0x17000043")]
		double MinX
		{
			[Token(Token = "0x60002D4")]
			get;
		}

		[Token(Token = "0x17000044")]
		double MaxX
		{
			[Token(Token = "0x60002D5")]
			get;
		}

		[Token(Token = "0x17000045")]
		double MinY
		{
			[Token(Token = "0x60002D6")]
			get;
		}

		[Token(Token = "0x17000046")]
		double MaxY
		{
			[Token(Token = "0x60002D7")]
			get;
		}

		[Token(Token = "0x17000047")]
		Rect2D Bounds
		{
			[Token(Token = "0x60002D8")]
			get;
		}

		[Token(Token = "0x60002D9")]
		void Prepare(TriangulationContext tcx);

		[Token(Token = "0x60002DA")]
		void AddTriangle(DelaunayTriangle t);

		[Token(Token = "0x60002DB")]
		void AddTriangles(IEnumerable<DelaunayTriangle> list);

		[Token(Token = "0x60002DC")]
		void ClearTriangles();
	}
	[Token(Token = "0x200006E")]
	public enum Orientation
	{
		[Token(Token = "0x4000267")]
		CW,
		[Token(Token = "0x4000268")]
		CCW,
		[Token(Token = "0x4000269")]
		Collinear
	}
	[Token(Token = "0x200006F")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x240EE4", Offset = "0x240EE4")]
	public class Contour : Point2DList, ITriangulatable, IEnumerable<TriangulationPoint>, IEnumerable, IList<TriangulationPoint>, ICollection<TriangulationPoint>
	{
		[Token(Token = "0x400026A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Contour> mHoles;

		[Token(Token = "0x400026B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private ITriangulatable mParent;

		[Token(Token = "0x400026C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string mName;

		[Token(Token = "0x17000048")]
		public new TriangulationPoint Item
		{
			[Token(Token = "0x60002DD")]
			[Address(RVA = "0xD4751C", Offset = "0xD4751C", VA = "0xD4751C", Slot = "49")]
			get
			{
				return null;
			}
			[Token(Token = "0x60002DE")]
			[Address(RVA = "0xD4BE20", Offset = "0xD4BE20", VA = "0xD4BE20", Slot = "50")]
			set
			{
			}
		}

		[Token(Token = "0x17000049")]
		public string Name
		{
			[Token(Token = "0x60002DF")]
			[Address(RVA = "0xD4BEA8", Offset = "0xD4BEA8", VA = "0xD4BEA8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60002E0")]
			[Address(RVA = "0xD4BEB0", Offset = "0xD4BEB0", VA = "0xD4BEB0")]
			set
			{
			}
		}

		[Token(Token = "0x1700004A")]
		public IList<DelaunayTriangle> Triangles
		{
			[Token(Token = "0x60002E1")]
			[Address(RVA = "0xD4BEB8", Offset = "0xD4BEB8", VA = "0xD4BEB8", Slot = "27")]
			get
			{
				return null;
			}
			[Token(Token = "0x60002E2")]
			[Address(RVA = "0xD4BF54", Offset = "0xD4BF54", VA = "0xD4BF54")]
			private set
			{
			}
		}

		[Token(Token = "0x1700004B")]
		public TriangulationMode TriangulationMode
		{
			[Token(Token = "0x60002E3")]
			[Address(RVA = "0xD4BF58", Offset = "0xD4BF58", VA = "0xD4BF58", Slot = "28")]
			get
			{
				return default(TriangulationMode);
			}
		}

		[Token(Token = "0x1700004C")]
		public string FileName
		{
			[Token(Token = "0x60002E4")]
			[Address(RVA = "0xD4C030", Offset = "0xD4C030", VA = "0xD4C030", Slot = "29")]
			get
			{
				return null;
			}
			[Token(Token = "0x60002E5")]
			[Address(RVA = "0xD4C108", Offset = "0xD4C108", VA = "0xD4C108", Slot = "30")]
			set
			{
			}
		}

		[Token(Token = "0x1700004D")]
		public bool DisplayFlipX
		{
			[Token(Token = "0x60002E6")]
			[Address(RVA = "0xD4C10C", Offset = "0xD4C10C", VA = "0xD4C10C", Slot = "31")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60002E7")]
			[Address(RVA = "0xD4C1E4", Offset = "0xD4C1E4", VA = "0xD4C1E4", Slot = "32")]
			set
			{
			}
		}

		[Token(Token = "0x1700004E")]
		public bool DisplayFlipY
		{
			[Token(Token = "0x60002E8")]
			[Address(RVA = "0xD4C1E8", Offset = "0xD4C1E8", VA = "0xD4C1E8", Slot = "33")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60002E9")]
			[Address(RVA = "0xD4C2C0", Offset = "0xD4C2C0", VA = "0xD4C2C0", Slot = "34")]
			set
			{
			}
		}

		[Token(Token = "0x1700004F")]
		public float DisplayRotate
		{
			[Token(Token = "0x60002EA")]
			[Address(RVA = "0xD4C2C4", Offset = "0xD4C2C4", VA = "0xD4C2C4", Slot = "35")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60002EB")]
			[Address(RVA = "0xD4C39C", Offset = "0xD4C39C", VA = "0xD4C39C", Slot = "36")]
			set
			{
			}
		}

		[Token(Token = "0x17000050")]
		public double Precision
		{
			[Token(Token = "0x60002EC")]
			[Address(RVA = "0xD4C3A0", Offset = "0xD4C3A0", VA = "0xD4C3A0", Slot = "37")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60002ED")]
			[Address(RVA = "0xD4C478", Offset = "0xD4C478", VA = "0xD4C478", Slot = "38")]
			set
			{
			}
		}

		[Token(Token = "0x17000051")]
		public double MinX
		{
			[Token(Token = "0x60002EE")]
			[Address(RVA = "0xD4C47C", Offset = "0xD4C47C", VA = "0xD4C47C", Slot = "39")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000052")]
		public double MaxX
		{
			[Token(Token = "0x60002EF")]
			[Address(RVA = "0xD4C4A4", Offset = "0xD4C4A4", VA = "0xD4C4A4", Slot = "40")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000053")]
		public double MinY
		{
			[Token(Token = "0x60002F0")]
			[Address(RVA = "0xD4C4CC", Offset = "0xD4C4CC", VA = "0xD4C4CC", Slot = "41")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000054")]
		public double MaxY
		{
			[Token(Token = "0x60002F1")]
			[Address(RVA = "0xD4C4F4", Offset = "0xD4C4F4", VA = "0xD4C4F4", Slot = "42")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000055")]
		public Rect2D Bounds
		{
			[Token(Token = "0x60002F2")]
			[Address(RVA = "0xD4C51C", Offset = "0xD4C51C", VA = "0xD4C51C", Slot = "43")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002F3")]
		[Address(RVA = "0xD49710", Offset = "0xD49710", VA = "0xD49710")]
		public Contour(ITriangulatable parent)
		{
		}

		[Token(Token = "0x60002F4")]
		[Address(RVA = "0xD473D0", Offset = "0xD473D0", VA = "0xD473D0")]
		public Contour(ITriangulatable parent, IList<TriangulationPoint> points, WindingOrderType windingOrder)
		{
		}

		[Token(Token = "0x60002F5")]
		[Address(RVA = "0xD4C96C", Offset = "0xD4C96C", VA = "0xD4C96C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60002F6")]
		[Address(RVA = "0xD4CB34", Offset = "0xD4CB34", VA = "0xD4CB34", Slot = "48")]
		private IEnumerator<TriangulationPoint> System.Collections.Generic.IEnumerable<Poly2Tri.TriangulationPoint>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x60002F7")]
		[Address(RVA = "0xD4CBAC", Offset = "0xD4CBAC", VA = "0xD4CBAC", Slot = "51")]
		public int IndexOf(TriangulationPoint p)
		{
			return default(int);
		}

		[Token(Token = "0x60002F8")]
		[Address(RVA = "0xD4CC2C", Offset = "0xD4CC2C", VA = "0xD4CC2C", Slot = "56")]
		public void Add(TriangulationPoint p)
		{
		}

		[Token(Token = "0x60002F9")]
		[Address(RVA = "0xD4CC5C", Offset = "0xD4CC5C", VA = "0xD4CC5C", Slot = "20")]
		protected override void Add(Point2D p, int idx, bool bCalcWindingOrderAndEpsilon)
		{
		}

		[Token(Token = "0x60002FA")]
		[Address(RVA = "0xD4CFE8", Offset = "0xD4CFE8", VA = "0xD4CFE8", Slot = "22")]
		public override void AddRange(IEnumerator<Point2D> iter, WindingOrderType windingOrder)
		{
		}

		[Token(Token = "0x60002FB")]
		[Address(RVA = "0xD4C624", Offset = "0xD4C624", VA = "0xD4C624")]
		public void AddRange(IList<TriangulationPoint> points, WindingOrderType windingOrder)
		{
		}

		[Token(Token = "0x60002FC")]
		[Address(RVA = "0xD4D5FC", Offset = "0xD4D5FC", VA = "0xD4D5FC", Slot = "52")]
		public void Insert(int idx, TriangulationPoint p)
		{
		}

		[Token(Token = "0x60002FD")]
		[Address(RVA = "0xD4D634", Offset = "0xD4D634", VA = "0xD4D634", Slot = "60")]
		public bool Remove(TriangulationPoint p)
		{
			return default(bool);
		}

		[Token(Token = "0x60002FE")]
		[Address(RVA = "0xD4D644", Offset = "0xD4D644", VA = "0xD4D644", Slot = "58")]
		public bool Contains(TriangulationPoint p)
		{
			return default(bool);
		}

		[Token(Token = "0x60002FF")]
		[Address(RVA = "0xD4D6C4", Offset = "0xD4D6C4", VA = "0xD4D6C4", Slot = "59")]
		public void CopyTo(TriangulationPoint[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6000300")]
		[Address(RVA = "0xD4D8B4", Offset = "0xD4D8B4", VA = "0xD4D8B4")]
		protected void AddHole(Contour c)
		{
		}

		[Token(Token = "0x6000301")]
		[Address(RVA = "0xD49C1C", Offset = "0xD49C1C", VA = "0xD49C1C")]
		public int GetNumHoles(bool parentIsHole)
		{
			return default(int);
		}

		[Token(Token = "0x6000302")]
		[Address(RVA = "0xD4D948", Offset = "0xD4D948", VA = "0xD4D948")]
		public int GetNumHoles()
		{
			return default(int);
		}

		[Token(Token = "0x6000303")]
		[Address(RVA = "0xD4D9AC", Offset = "0xD4D9AC", VA = "0xD4D9AC")]
		public Contour GetHole(int idx)
		{
			return null;
		}

		[Token(Token = "0x6000304")]
		[Address(RVA = "0xD49FC0", Offset = "0xD49FC0", VA = "0xD49FC0")]
		public void GetActualHoles(bool parentIsHole, ref List<Contour> holes)
		{
		}

		[Token(Token = "0x6000305")]
		[Address(RVA = "0xD4DA60", Offset = "0xD4DA60", VA = "0xD4DA60")]
		public List<Contour>.Enumerator GetHoleEnumerator()
		{
			return default(List<Contour>.Enumerator);
		}

		[Token(Token = "0x6000306")]
		[Address(RVA = "0xD4B874", Offset = "0xD4B874", VA = "0xD4B874")]
		public void InitializeHoles(ConstrainedPointSet cps)
		{
		}

		[Token(Token = "0x6000307")]
		[Address(RVA = "0xD4A2A0", Offset = "0xD4A2A0", VA = "0xD4A2A0")]
		public static void InitializeHoles(List<Contour> holes, ITriangulatable parent, ConstrainedPointSet cps)
		{
		}

		[Token(Token = "0x6000308")]
		[Address(RVA = "0xD4F868", Offset = "0xD4F868", VA = "0xD4F868", Slot = "44")]
		public void Prepare(TriangulationContext tcx)
		{
		}

		[Token(Token = "0x6000309")]
		[Address(RVA = "0xD4F904", Offset = "0xD4F904", VA = "0xD4F904", Slot = "45")]
		public void AddTriangle(DelaunayTriangle t)
		{
		}

		[Token(Token = "0x600030A")]
		[Address(RVA = "0xD4F9A0", Offset = "0xD4F9A0", VA = "0xD4F9A0", Slot = "46")]
		public void AddTriangles(IEnumerable<DelaunayTriangle> list)
		{
		}

		[Token(Token = "0x600030B")]
		[Address(RVA = "0xD4FA3C", Offset = "0xD4FA3C", VA = "0xD4FA3C", Slot = "47")]
		public void ClearTriangles()
		{
		}

		[Token(Token = "0x600030C")]
		[Address(RVA = "0xD4FAD8", Offset = "0xD4FAD8", VA = "0xD4FAD8")]
		public Point2D FindPointInContour()
		{
			return null;
		}

		[Token(Token = "0x600030D")]
		[Address(RVA = "0xD4FE68", Offset = "0xD4FE68", VA = "0xD4FE68")]
		public bool IsPointInsideContour(Point2D p)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000070")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x240F18", Offset = "0x240F18")]
	public class Polygon : Point2DList, ITriangulatable, IEnumerable<TriangulationPoint>, IEnumerable, IList<TriangulationPoint>, ICollection<TriangulationPoint>
	{
		[Token(Token = "0x400026D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Dictionary<uint, TriangulationPoint> mPointMap;

		[Token(Token = "0x400026E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		protected List<DelaunayTriangle> mTriangles;

		[Token(Token = "0x400026F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24260C", Offset = "0x24260C")]
		private string <FileName>k__BackingField;

		[Token(Token = "0x4000270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24261C", Offset = "0x24261C")]
		private bool <DisplayFlipX>k__BackingField;

		[Token(Token = "0x4000271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24262C", Offset = "0x24262C")]
		private bool <DisplayFlipY>k__BackingField;

		[Token(Token = "0x4000272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24263C", Offset = "0x24263C")]
		private float <DisplayRotate>k__BackingField;

		[Token(Token = "0x4000273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private double mPrecision;

		[Token(Token = "0x4000274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected List<Polygon> mHoles;

		[Token(Token = "0x4000275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected List<TriangulationPoint> mSteinerPoints;

		[Token(Token = "0x4000276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected PolygonPoint _last;

		[Token(Token = "0x17000056")]
		public IList<TriangulationPoint> Points
		{
			[Token(Token = "0x600030E")]
			[Address(RVA = "0xD60F48", Offset = "0xD60F48", VA = "0xD60F48")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000057")]
		public IList<DelaunayTriangle> Triangles
		{
			[Token(Token = "0x600030F")]
			[Address(RVA = "0xD60F4C", Offset = "0xD60F4C", VA = "0xD60F4C", Slot = "27")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000058")]
		public TriangulationMode TriangulationMode
		{
			[Token(Token = "0x6000310")]
			[Address(RVA = "0xD60F54", Offset = "0xD60F54", VA = "0xD60F54", Slot = "28")]
			get
			{
				return default(TriangulationMode);
			}
		}

		[Token(Token = "0x17000059")]
		public string FileName
		{
			[Token(Token = "0x6000311")]
			[Address(RVA = "0xD60F5C", Offset = "0xD60F5C", VA = "0xD60F5C", Slot = "29")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248820", Offset = "0x248820")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000312")]
			[Address(RVA = "0xD60F64", Offset = "0xD60F64", VA = "0xD60F64", Slot = "30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248830", Offset = "0x248830")]
			set
			{
			}
		}

		[Token(Token = "0x1700005A")]
		public bool DisplayFlipX
		{
			[Token(Token = "0x6000313")]
			[Address(RVA = "0xD60F6C", Offset = "0xD60F6C", VA = "0xD60F6C", Slot = "31")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248840", Offset = "0x248840")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000314")]
			[Address(RVA = "0xD60F74", Offset = "0xD60F74", VA = "0xD60F74", Slot = "32")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248850", Offset = "0x248850")]
			set
			{
			}
		}

		[Token(Token = "0x1700005B")]
		public bool DisplayFlipY
		{
			[Token(Token = "0x6000315")]
			[Address(RVA = "0xD60F7C", Offset = "0xD60F7C", VA = "0xD60F7C", Slot = "33")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248860", Offset = "0x248860")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000316")]
			[Address(RVA = "0xD60F84", Offset = "0xD60F84", VA = "0xD60F84", Slot = "34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248870", Offset = "0x248870")]
			set
			{
			}
		}

		[Token(Token = "0x1700005C")]
		public float DisplayRotate
		{
			[Token(Token = "0x6000317")]
			[Address(RVA = "0xD60F8C", Offset = "0xD60F8C", VA = "0xD60F8C", Slot = "35")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248880", Offset = "0x248880")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000318")]
			[Address(RVA = "0xD60F94", Offset = "0xD60F94", VA = "0xD60F94", Slot = "36")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248890", Offset = "0x248890")]
			set
			{
			}
		}

		[Token(Token = "0x1700005D")]
		public double Precision
		{
			[Token(Token = "0x6000319")]
			[Address(RVA = "0xD60F9C", Offset = "0xD60F9C", VA = "0xD60F9C", Slot = "37")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x600031A")]
			[Address(RVA = "0xD60FA8", Offset = "0xD60FA8", VA = "0xD60FA8", Slot = "38")]
			set
			{
			}
		}

		[Token(Token = "0x1700005E")]
		public double MinX
		{
			[Token(Token = "0x600031B")]
			[Address(RVA = "0xD60FB8", Offset = "0xD60FB8", VA = "0xD60FB8", Slot = "39")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700005F")]
		public double MaxX
		{
			[Token(Token = "0x600031C")]
			[Address(RVA = "0xD60FE0", Offset = "0xD60FE0", VA = "0xD60FE0", Slot = "40")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000060")]
		public double MinY
		{
			[Token(Token = "0x600031D")]
			[Address(RVA = "0xD61008", Offset = "0xD61008", VA = "0xD61008", Slot = "41")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000061")]
		public double MaxY
		{
			[Token(Token = "0x600031E")]
			[Address(RVA = "0xD61030", Offset = "0xD61030", VA = "0xD61030", Slot = "42")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000062")]
		public Rect2D Bounds
		{
			[Token(Token = "0x600031F")]
			[Address(RVA = "0xD61058", Offset = "0xD61058", VA = "0xD61058", Slot = "43")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000063")]
		public new TriangulationPoint Item
		{
			[Token(Token = "0x6000320")]
			[Address(RVA = "0xD61060", Offset = "0xD61060", VA = "0xD61060", Slot = "49")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000321")]
			[Address(RVA = "0xD6112C", Offset = "0xD6112C", VA = "0xD6112C", Slot = "50")]
			set
			{
			}
		}

		[Token(Token = "0x17000064")]
		public IList<Polygon> Holes
		{
			[Token(Token = "0x6000322")]
			[Address(RVA = "0xD611B4", Offset = "0xD611B4", VA = "0xD611B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000323")]
		[Address(RVA = "0xD611BC", Offset = "0xD611BC", VA = "0xD611BC")]
		public Polygon(IList<PolygonPoint> points)
		{
		}

		[Token(Token = "0x6000324")]
		[Address(RVA = "0xD6170C", Offset = "0xD6170C", VA = "0xD6170C")]
		public Polygon(IEnumerable<PolygonPoint> points)
		{
		}

		[Token(Token = "0x6000325")]
		[Address(RVA = "0xD617B8", Offset = "0xD617B8", VA = "0xD617B8")]
		public Polygon(params PolygonPoint[] points)
		{
		}

		[Token(Token = "0x6000326")]
		[Address(RVA = "0xD617BC", Offset = "0xD617BC", VA = "0xD617BC", Slot = "48")]
		private IEnumerator<TriangulationPoint> System.Collections.Generic.IEnumerable<Poly2Tri.TriangulationPoint>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000327")]
		[Address(RVA = "0xD61834", Offset = "0xD61834", VA = "0xD61834", Slot = "51")]
		public int IndexOf(TriangulationPoint p)
		{
			return default(int);
		}

		[Token(Token = "0x6000328")]
		[Address(RVA = "0xD618B4", Offset = "0xD618B4", VA = "0xD618B4", Slot = "19")]
		public override void Add(Point2D p)
		{
		}

		[Token(Token = "0x6000329")]
		[Address(RVA = "0xD618E4", Offset = "0xD618E4", VA = "0xD618E4", Slot = "56")]
		public void Add(TriangulationPoint p)
		{
		}

		[Token(Token = "0x600032A")]
		[Address(RVA = "0xD61914", Offset = "0xD61914", VA = "0xD61914")]
		public void Add(PolygonPoint p)
		{
		}

		[Token(Token = "0x600032B")]
		[Address(RVA = "0xD61944", Offset = "0xD61944", VA = "0xD61944", Slot = "20")]
		protected override void Add(Point2D p, int idx, bool bCalcWindingOrderAndEpsilon)
		{
		}

		[Token(Token = "0x600032C")]
		[Address(RVA = "0xD613C4", Offset = "0xD613C4", VA = "0xD613C4")]
		public void AddRange(IList<PolygonPoint> points, WindingOrderType windingOrder)
		{
		}

		[Token(Token = "0x600032D")]
		[Address(RVA = "0xD61B08", Offset = "0xD61B08", VA = "0xD61B08")]
		public void AddRange(IList<TriangulationPoint> points, WindingOrderType windingOrder)
		{
		}

		[Token(Token = "0x600032E")]
		[Address(RVA = "0xD61E50", Offset = "0xD61E50", VA = "0xD61E50", Slot = "52")]
		public void Insert(int idx, TriangulationPoint p)
		{
		}

		[Token(Token = "0x600032F")]
		[Address(RVA = "0xD61E88", Offset = "0xD61E88", VA = "0xD61E88", Slot = "60")]
		public bool Remove(TriangulationPoint p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000330")]
		[Address(RVA = "0xD61E8C", Offset = "0xD61E8C", VA = "0xD61E8C")]
		public void RemovePoint(PolygonPoint p)
		{
		}

		[Token(Token = "0x6000331")]
		[Address(RVA = "0xD620D8", Offset = "0xD620D8", VA = "0xD620D8", Slot = "58")]
		public bool Contains(TriangulationPoint p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000332")]
		[Address(RVA = "0xD62158", Offset = "0xD62158", VA = "0xD62158", Slot = "59")]
		public void CopyTo(TriangulationPoint[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6000333")]
		[Address(RVA = "0xD62348", Offset = "0xD62348", VA = "0xD62348")]
		public void AddSteinerPoint(TriangulationPoint point)
		{
		}

		[Token(Token = "0x6000334")]
		[Address(RVA = "0xD62408", Offset = "0xD62408", VA = "0xD62408")]
		public void AddSteinerPoints(List<TriangulationPoint> points)
		{
		}

		[Token(Token = "0x6000335")]
		[Address(RVA = "0xD624C8", Offset = "0xD624C8", VA = "0xD624C8")]
		public void ClearSteinerPoints()
		{
		}

		[Token(Token = "0x6000336")]
		[Address(RVA = "0xD62534", Offset = "0xD62534", VA = "0xD62534")]
		public void AddHole(Polygon poly)
		{
		}

		[Token(Token = "0x6000337")]
		[Address(RVA = "0xD625F4", Offset = "0xD625F4", VA = "0xD625F4", Slot = "45")]
		public void AddTriangle(DelaunayTriangle t)
		{
		}

		[Token(Token = "0x6000338")]
		[Address(RVA = "0xD62674", Offset = "0xD62674", VA = "0xD62674", Slot = "46")]
		public void AddTriangles(IEnumerable<DelaunayTriangle> list)
		{
		}

		[Token(Token = "0x6000339")]
		[Address(RVA = "0xD626F4", Offset = "0xD626F4", VA = "0xD626F4", Slot = "47")]
		public void ClearTriangles()
		{
		}

		[Token(Token = "0x600033A")]
		[Address(RVA = "0xD62760", Offset = "0xD62760", VA = "0xD62760")]
		public bool IsPointInside(TriangulationPoint p)
		{
			return default(bool);
		}

		[Token(Token = "0x600033B")]
		[Address(RVA = "0xD62764", Offset = "0xD62764", VA = "0xD62764", Slot = "44")]
		public void Prepare(TriangulationContext tcx)
		{
		}
	}
	[Token(Token = "0x2000071")]
	public class PolygonPoint : TriangulationPoint
	{
		[Token(Token = "0x4000277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24264C", Offset = "0x24264C")]
		private PolygonPoint <Next>k__BackingField;

		[Token(Token = "0x4000278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24265C", Offset = "0x24265C")]
		private PolygonPoint <Previous>k__BackingField;

		[Token(Token = "0x17000065")]
		public PolygonPoint Next
		{
			[Token(Token = "0x600033D")]
			[Address(RVA = "0xD63D08", Offset = "0xD63D08", VA = "0xD63D08")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2488A0", Offset = "0x2488A0")]
			get
			{
				return null;
			}
			[Token(Token = "0x600033E")]
			[Address(RVA = "0xD63D10", Offset = "0xD63D10", VA = "0xD63D10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2488B0", Offset = "0x2488B0")]
			set
			{
			}
		}

		[Token(Token = "0x17000066")]
		public PolygonPoint Previous
		{
			[Token(Token = "0x600033F")]
			[Address(RVA = "0xD63D18", Offset = "0xD63D18", VA = "0xD63D18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2488C0", Offset = "0x2488C0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000340")]
			[Address(RVA = "0xD63D20", Offset = "0xD63D20", VA = "0xD63D20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2488D0", Offset = "0x2488D0")]
			set
			{
			}
		}

		[Token(Token = "0x600033C")]
		[Address(RVA = "0xD62FF0", Offset = "0xD62FF0", VA = "0xD62FF0")]
		public PolygonPoint(double x, double y)
		{
		}

		[Token(Token = "0x6000341")]
		[Address(RVA = "0xD63D28", Offset = "0xD63D28", VA = "0xD63D28")]
		public static Point2D ToBasePoint(PolygonPoint p)
		{
			return null;
		}

		[Token(Token = "0x6000342")]
		[Address(RVA = "0xD63D2C", Offset = "0xD63D2C", VA = "0xD63D2C")]
		public static TriangulationPoint ToTriangulationPoint(PolygonPoint p)
		{
			return null;
		}
	}
	[Token(Token = "0x2000072")]
	public class PolygonSet
	{
		[Token(Token = "0x4000279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		protected List<Polygon> _polygons;

		[Token(Token = "0x17000067")]
		public IEnumerable<Polygon> Polygons
		{
			[Token(Token = "0x6000346")]
			[Address(RVA = "0xD63EFC", Offset = "0xD63EFC", VA = "0xD63EFC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000343")]
		[Address(RVA = "0xD63D30", Offset = "0xD63D30", VA = "0xD63D30")]
		public PolygonSet()
		{
		}

		[Token(Token = "0x6000344")]
		[Address(RVA = "0xD63DBC", Offset = "0xD63DBC", VA = "0xD63DBC")]
		public PolygonSet(Polygon poly)
		{
		}

		[Token(Token = "0x6000345")]
		[Address(RVA = "0xD63E7C", Offset = "0xD63E7C", VA = "0xD63E7C")]
		public void Add(Polygon p)
		{
		}
	}
	[Token(Token = "0x2000073")]
	public class PolygonUtil
	{
		[Token(Token = "0x2000284")]
		public enum PolyUnionError
		{
			[Token(Token = "0x4000E6D")]
			None,
			[Token(Token = "0x4000E6E")]
			NoIntersections,
			[Token(Token = "0x4000E6F")]
			Poly1InsidePoly2,
			[Token(Token = "0x4000E70")]
			InfiniteLoop
		}

		[Token(Token = "0x2000285")]
		[Flags]
		public enum PolyOperation : uint
		{
			[Token(Token = "0x4000E72")]
			None = 0u,
			[Token(Token = "0x4000E73")]
			Union = 1u,
			[Token(Token = "0x4000E74")]
			Intersect = 2u,
			[Token(Token = "0x4000E75")]
			Subtract = 4u
		}

		[Token(Token = "0x6000347")]
		[Address(RVA = "0xD63F04", Offset = "0xD63F04", VA = "0xD63F04")]
		public static Point2DList.WindingOrderType CalculateWindingOrder(IList<Point2D> l)
		{
			return default(Point2DList.WindingOrderType);
		}

		[Token(Token = "0x6000348")]
		[Address(RVA = "0xD4DAE0", Offset = "0xD4DAE0", VA = "0xD4DAE0")]
		public static bool PolygonsAreSame2D(IList<Point2D> poly1, IList<Point2D> poly2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000349")]
		[Address(RVA = "0xD4FFE0", Offset = "0xD4FFE0", VA = "0xD4FFE0")]
		public static bool PointInPolygon2D(IList<Point2D> polygon, Point2D p)
		{
			return default(bool);
		}

		[Token(Token = "0x600034A")]
		[Address(RVA = "0xD4E410", Offset = "0xD4E410", VA = "0xD4E410")]
		public static bool PolygonsIntersect2D(IList<Point2D> poly1, Rect2D boundRect1, IList<Point2D> poly2, Rect2D boundRect2)
		{
			return default(bool);
		}

		[Token(Token = "0x600034B")]
		[Address(RVA = "0xD6440C", Offset = "0xD6440C", VA = "0xD6440C")]
		public bool PolygonContainsPolygon(IList<Point2D> poly1, Rect2D boundRect1, IList<Point2D> poly2, Rect2D boundRect2)
		{
			return default(bool);
		}

		[Token(Token = "0x600034C")]
		[Address(RVA = "0xD4E0D0", Offset = "0xD4E0D0", VA = "0xD4E0D0")]
		public static bool PolygonContainsPolygon(IList<Point2D> poly1, Rect2D boundRect1, IList<Point2D> poly2, Rect2D boundRect2, bool runIntersectionTest)
		{
			return default(bool);
		}

		[Token(Token = "0x600034D")]
		[Address(RVA = "0xD64440", Offset = "0xD64440", VA = "0xD64440")]
		public static void ClipPolygonToEdge2D(Point2D edgeBegin, Point2D edgeEnd, IList<Point2D> poly, out List<Point2D> outPoly)
		{
		}

		[Token(Token = "0x600034E")]
		[Address(RVA = "0xD653A4", Offset = "0xD653A4", VA = "0xD653A4")]
		public static void ClipPolygonToPolygon(IList<Point2D> poly, IList<Point2D> clipPoly, out List<Point2D> outPoly)
		{
		}

		[Token(Token = "0x600034F")]
		[Address(RVA = "0xD65794", Offset = "0xD65794", VA = "0xD65794")]
		public static PolyUnionError PolygonUnion(Point2DList polygon1, Point2DList polygon2, out Point2DList union)
		{
			return default(PolyUnionError);
		}

		[Token(Token = "0x6000350")]
		[Address(RVA = "0xD65884", Offset = "0xD65884", VA = "0xD65884")]
		protected static void PolygonUnionInternal(PolygonOperationContext ctx)
		{
		}

		[Token(Token = "0x6000351")]
		[Address(RVA = "0xD65F8C", Offset = "0xD65F8C", VA = "0xD65F8C")]
		public static PolyUnionError PolygonIntersect(Point2DList polygon1, Point2DList polygon2, out Point2DList intersectOut)
		{
			return default(PolyUnionError);
		}

		[Token(Token = "0x6000352")]
		[Address(RVA = "0xD6607C", Offset = "0xD6607C", VA = "0xD6607C")]
		protected static void PolygonIntersectInternal(PolygonOperationContext ctx)
		{
		}

		[Token(Token = "0x6000353")]
		[Address(RVA = "0xD6682C", Offset = "0xD6682C", VA = "0xD6682C")]
		public static PolyUnionError PolygonSubtract(Point2DList polygon1, Point2DList polygon2, out Point2DList subtract)
		{
			return default(PolyUnionError);
		}

		[Token(Token = "0x6000354")]
		[Address(RVA = "0xD6691C", Offset = "0xD6691C", VA = "0xD6691C")]
		public static void PolygonSubtractInternal(PolygonOperationContext ctx)
		{
		}

		[Token(Token = "0x6000355")]
		[Address(RVA = "0xD67184", Offset = "0xD67184", VA = "0xD67184")]
		public static PolyUnionError PolygonOperation(PolyOperation operations, Point2DList polygon1, Point2DList polygon2, out Dictionary<uint, Point2DList> results)
		{
			return default(PolyUnionError);
		}

		[Token(Token = "0x6000356")]
		[Address(RVA = "0xD4F608", Offset = "0xD4F608", VA = "0xD4F608")]
		public static PolyUnionError PolygonOperation(PolygonOperationContext ctx)
		{
			return default(PolyUnionError);
		}

		[Token(Token = "0x6000357")]
		[Address(RVA = "0xD48280", Offset = "0xD48280", VA = "0xD48280")]
		public static List<Point2DList> SplitComplexPolygon(Point2DList verts, double epsilon)
		{
			return null;
		}

		[Token(Token = "0x6000358")]
		[Address(RVA = "0xD67254", Offset = "0xD67254", VA = "0xD67254")]
		private static List<Point2DList> SplitComplexPolygonCleanup(IList<Point2D> orig)
		{
			return null;
		}

		[Token(Token = "0x6000359")]
		[Address(RVA = "0xD67640", Offset = "0xD67640", VA = "0xD67640")]
		public PolygonUtil()
		{
		}
	}
	[Token(Token = "0x2000074")]
	public class EdgeIntersectInfo
	{
		[Token(Token = "0x400027A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24266C", Offset = "0x24266C")]
		private Edge <EdgeOne>k__BackingField;

		[Token(Token = "0x400027B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24267C", Offset = "0x24267C")]
		private Edge <EdgeTwo>k__BackingField;

		[Token(Token = "0x400027C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24268C", Offset = "0x24268C")]
		private Point2D <IntersectionPoint>k__BackingField;

		[Token(Token = "0x17000068")]
		public Edge EdgeOne
		{
			[Token(Token = "0x600035B")]
			[Address(RVA = "0xD58798", Offset = "0xD58798", VA = "0xD58798")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2488E0", Offset = "0x2488E0")]
			get
			{
				return null;
			}
			[Token(Token = "0x600035C")]
			[Address(RVA = "0xD587A0", Offset = "0xD587A0", VA = "0xD587A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2488F0", Offset = "0x2488F0")]
			private set
			{
			}
		}

		[Token(Token = "0x17000069")]
		public Edge EdgeTwo
		{
			[Token(Token = "0x600035D")]
			[Address(RVA = "0xD587A8", Offset = "0xD587A8", VA = "0xD587A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248900", Offset = "0x248900")]
			get
			{
				return null;
			}
			[Token(Token = "0x600035E")]
			[Address(RVA = "0xD587B0", Offset = "0xD587B0", VA = "0xD587B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248910", Offset = "0x248910")]
			private set
			{
			}
		}

		[Token(Token = "0x1700006A")]
		public Point2D IntersectionPoint
		{
			[Token(Token = "0x600035F")]
			[Address(RVA = "0xD587B8", Offset = "0xD587B8", VA = "0xD587B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248920", Offset = "0x248920")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000360")]
			[Address(RVA = "0xD587C0", Offset = "0xD587C0", VA = "0xD587C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248930", Offset = "0x248930")]
			private set
			{
			}
		}

		[Token(Token = "0x600035A")]
		[Address(RVA = "0xD58768", Offset = "0xD58768", VA = "0xD58768")]
		public EdgeIntersectInfo(Edge edgeOne, Edge edgeTwo, Point2D intersectionPoint)
		{
		}
	}
	[Token(Token = "0x2000075")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x240F4C", Offset = "0x240F4C")]
	public class SplitComplexPolygonNode
	{
		[Token(Token = "0x400027D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private List<SplitComplexPolygonNode> mConnected;

		[Token(Token = "0x400027E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Point2D mPosition;

		[Token(Token = "0x1700006B")]
		public int NumConnected
		{
			[Token(Token = "0x6000361")]
			[Address(RVA = "0x4944A0", Offset = "0x4944A0", VA = "0x4944A0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700006C")]
		public Point2D Position
		{
			[Token(Token = "0x6000362")]
			[Address(RVA = "0x494504", Offset = "0x494504", VA = "0x494504")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000363")]
			[Address(RVA = "0x49450C", Offset = "0x49450C", VA = "0x49450C")]
			set
			{
			}
		}

		[Token(Token = "0x1700006D")]
		public SplitComplexPolygonNode Item
		{
			[Token(Token = "0x6000364")]
			[Address(RVA = "0x494514", Offset = "0x494514", VA = "0x494514")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000365")]
		[Address(RVA = "0x494598", Offset = "0x494598", VA = "0x494598")]
		public SplitComplexPolygonNode()
		{
		}

		[Token(Token = "0x6000366")]
		[Address(RVA = "0x494624", Offset = "0x494624", VA = "0x494624")]
		public SplitComplexPolygonNode(Point2D pos)
		{
		}

		[Token(Token = "0x6000367")]
		[Address(RVA = "0x4946B8", Offset = "0x4946B8", VA = "0x4946B8", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000368")]
		[Address(RVA = "0x4947EC", Offset = "0x4947EC", VA = "0x4947EC")]
		public bool Equals(SplitComplexPolygonNode pn)
		{
			return default(bool);
		}

		[Token(Token = "0x6000369")]
		[Address(RVA = "0x494818", Offset = "0x494818", VA = "0x494818", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600036A")]
		[Address(RVA = "0x4947A4", Offset = "0x4947A4", VA = "0x4947A4")]
		public static bool operator ==(SplitComplexPolygonNode lhs, SplitComplexPolygonNode rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x600036B")]
		[Address(RVA = "0x494820", Offset = "0x494820", VA = "0x494820")]
		public static bool operator !=(SplitComplexPolygonNode lhs, SplitComplexPolygonNode rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x600036C")]
		[Address(RVA = "0x49487C", Offset = "0x49487C", VA = "0x49487C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600036D")]
		[Address(RVA = "0x494A80", Offset = "0x494A80", VA = "0x494A80")]
		private bool IsRighter(double sinA, double cosA, double sinB, double cosB)
		{
			return default(bool);
		}

		[Token(Token = "0x600036E")]
		[Address(RVA = "0x494AE0", Offset = "0x494AE0", VA = "0x494AE0")]
		private int remainder(int x, int modulus)
		{
			return default(int);
		}

		[Token(Token = "0x600036F")]
		[Address(RVA = "0x494B0C", Offset = "0x494B0C", VA = "0x494B0C")]
		public void AddConnection(SplitComplexPolygonNode toMe)
		{
		}

		[Token(Token = "0x6000370")]
		[Address(RVA = "0x494BDC", Offset = "0x494BDC", VA = "0x494BDC")]
		public void RemoveConnection(SplitComplexPolygonNode fromMe)
		{
		}

		[Token(Token = "0x6000371")]
		[Address(RVA = "0x494C5C", Offset = "0x494C5C", VA = "0x494C5C")]
		private void RemoveConnectionByIndex(int index)
		{
		}

		[Token(Token = "0x6000372")]
		[Address(RVA = "0x494D08", Offset = "0x494D08", VA = "0x494D08")]
		public void ClearConnections()
		{
		}

		[Token(Token = "0x6000373")]
		[Address(RVA = "0x494D80", Offset = "0x494D80", VA = "0x494D80")]
		private bool IsConnectedTo(SplitComplexPolygonNode me)
		{
			return default(bool);
		}

		[Token(Token = "0x6000374")]
		[Address(RVA = "0x494E00", Offset = "0x494E00", VA = "0x494E00")]
		public SplitComplexPolygonNode GetRightestConnection(SplitComplexPolygonNode incoming)
		{
			return null;
		}

		[Token(Token = "0x6000375")]
		[Address(RVA = "0x495350", Offset = "0x495350", VA = "0x495350")]
		public SplitComplexPolygonNode GetRightestConnection(Point2D incomingDir)
		{
			return null;
		}
	}
	[Token(Token = "0x2000076")]
	public class PolygonOperationContext
	{
		[Token(Token = "0x400027F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PolygonUtil.PolyOperation mOperations;

		[Token(Token = "0x4000280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Point2DList mOriginalPolygon1;

		[Token(Token = "0x4000281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Point2DList mOriginalPolygon2;

		[Token(Token = "0x4000282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Point2DList mPoly1;

		[Token(Token = "0x4000283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Point2DList mPoly2;

		[Token(Token = "0x4000284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public List<EdgeIntersectInfo> mIntersections;

		[Token(Token = "0x4000285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int mStartingIndex;

		[Token(Token = "0x4000286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public PolygonUtil.PolyUnionError mError;

		[Token(Token = "0x4000287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<int> mPoly1VectorAngles;

		[Token(Token = "0x4000288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public List<int> mPoly2VectorAngles;

		[Token(Token = "0x4000289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Dictionary<uint, Point2DList> mOutput;

		[Token(Token = "0x1700006E")]
		public Point2DList Union
		{
			[Token(Token = "0x6000376")]
			[Address(RVA = "0xD4F664", Offset = "0xD4F664", VA = "0xD4F664")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006F")]
		public Point2DList Intersect
		{
			[Token(Token = "0x6000377")]
			[Address(RVA = "0xD4F754", Offset = "0xD4F754", VA = "0xD4F754")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000070")]
		public Point2DList Subtract
		{
			[Token(Token = "0x6000378")]
			[Address(RVA = "0xD63464", Offset = "0xD63464", VA = "0xD63464")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000379")]
		[Address(RVA = "0xD4EAD0", Offset = "0xD4EAD0", VA = "0xD4EAD0")]
		public PolygonOperationContext()
		{
		}

		[Token(Token = "0x600037A")]
		[Address(RVA = "0xD63554", Offset = "0xD63554", VA = "0xD63554")]
		public void Clear()
		{
		}

		[Token(Token = "0x600037B")]
		[Address(RVA = "0xD4EB5C", Offset = "0xD4EB5C", VA = "0xD4EB5C")]
		public bool Init(PolygonUtil.PolyOperation operations, Point2DList polygon1, Point2DList polygon2)
		{
			return default(bool);
		}

		[Token(Token = "0x600037C")]
		[Address(RVA = "0xD63600", Offset = "0xD63600", VA = "0xD63600")]
		private bool VerticesIntersect(Point2DList polygon1, Point2DList polygon2, out List<EdgeIntersectInfo> intersections)
		{
			return default(bool);
		}

		[Token(Token = "0x600037D")]
		[Address(RVA = "0xD639D0", Offset = "0xD639D0", VA = "0xD639D0")]
		public bool PointInPolygonAngle(Point2D point, Point2DList polygon)
		{
			return default(bool);
		}

		[Token(Token = "0x600037E")]
		[Address(RVA = "0xD63B30", Offset = "0xD63B30", VA = "0xD63B30")]
		public double VectorAngle(Point2D p1, Point2D p2)
		{
			return default(double);
		}
	}
	[Token(Token = "0x2000077")]
	public class ConstrainedPointSet : PointSet
	{
		[Token(Token = "0x400028A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Dictionary<uint, TriangulationConstraint> mConstraintMap;

		[Token(Token = "0x400028B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected List<Contour> mHoles;

		[Token(Token = "0x17000071")]
		public override TriangulationMode TriangulationMode
		{
			[Token(Token = "0x600037F")]
			[Address(RVA = "0xD455E0", Offset = "0xD455E0", VA = "0xD455E0", Slot = "61")]
			get
			{
				return default(TriangulationMode);
			}
		}

		[Token(Token = "0x6000380")]
		[Address(RVA = "0xD455E8", Offset = "0xD455E8", VA = "0xD455E8")]
		public ConstrainedPointSet(List<TriangulationPoint> bounds)
		{
		}

		[Token(Token = "0x6000381")]
		[Address(RVA = "0xD45D60", Offset = "0xD45D60", VA = "0xD45D60")]
		public ConstrainedPointSet(List<TriangulationPoint> bounds, List<TriangulationConstraint> constraints)
		{
		}

		[Token(Token = "0x6000382")]
		[Address(RVA = "0xD4608C", Offset = "0xD4608C", VA = "0xD4608C")]
		public ConstrainedPointSet(List<TriangulationPoint> bounds, int[] indices)
		{
		}

		[Token(Token = "0x6000383")]
		[Address(RVA = "0xD45908", Offset = "0xD45908", VA = "0xD45908")]
		protected void AddBoundaryConstraints()
		{
		}

		[Token(Token = "0x6000384")]
		[Address(RVA = "0xD466F4", Offset = "0xD466F4", VA = "0xD466F4", Slot = "19")]
		public override void Add(Point2D p)
		{
		}

		[Token(Token = "0x6000385")]
		[Address(RVA = "0xD468F8", Offset = "0xD468F8", VA = "0xD468F8", Slot = "62")]
		public override void Add(TriangulationPoint p)
		{
		}

		[Token(Token = "0x6000386")]
		[Address(RVA = "0xD46918", Offset = "0xD46918", VA = "0xD46918", Slot = "63")]
		public override bool AddRange(List<TriangulationPoint> points)
		{
			return default(bool);
		}

		[Token(Token = "0x6000387")]
		[Address(RVA = "0xD46A5C", Offset = "0xD46A5C", VA = "0xD46A5C")]
		public bool AddHole(List<TriangulationPoint> points, string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000388")]
		[Address(RVA = "0xD45E3C", Offset = "0xD45E3C", VA = "0xD45E3C")]
		public bool AddConstraints(List<TriangulationConstraint> constraints)
		{
			return default(bool);
		}

		[Token(Token = "0x6000389")]
		[Address(RVA = "0xD46454", Offset = "0xD46454", VA = "0xD46454")]
		public bool AddConstraint(TriangulationConstraint tc)
		{
			return default(bool);
		}

		[Token(Token = "0x600038A")]
		[Address(RVA = "0xD4994C", Offset = "0xD4994C", VA = "0xD4994C")]
		public bool TryGetConstraint(uint constraintCode, out TriangulationConstraint tc)
		{
			return default(bool);
		}

		[Token(Token = "0x600038B")]
		[Address(RVA = "0xD499D4", Offset = "0xD499D4", VA = "0xD499D4")]
		public int GetNumConstraints()
		{
			return default(int);
		}

		[Token(Token = "0x600038C")]
		[Address(RVA = "0xD49A4C", Offset = "0xD49A4C", VA = "0xD49A4C")]
		public Dictionary<uint, TriangulationConstraint>.Enumerator GetConstraintEnumerator()
		{
			return default(Dictionary<uint, TriangulationConstraint>.Enumerator);
		}

		[Token(Token = "0x600038D")]
		[Address(RVA = "0xD49ACC", Offset = "0xD49ACC", VA = "0xD49ACC")]
		public int GetNumHoles()
		{
			return default(int);
		}

		[Token(Token = "0x600038E")]
		[Address(RVA = "0xD49D74", Offset = "0xD49D74", VA = "0xD49D74")]
		public Contour GetHole(int idx)
		{
			return null;
		}

		[Token(Token = "0x600038F")]
		[Address(RVA = "0xD49E28", Offset = "0xD49E28", VA = "0xD49E28")]
		public int GetActualHoles(out List<Contour> holes)
		{
			return default(int);
		}

		[Token(Token = "0x6000390")]
		[Address(RVA = "0xD4A14C", Offset = "0xD4A14C", VA = "0xD4A14C")]
		protected void InitializeHoles()
		{
		}

		[Token(Token = "0x6000391")]
		[Address(RVA = "0xD4B9CC", Offset = "0xD4B9CC", VA = "0xD4B9CC", Slot = "65")]
		public override bool Initialize()
		{
			return default(bool);
		}

		[Token(Token = "0x6000392")]
		[Address(RVA = "0xD4B9E8", Offset = "0xD4B9E8", VA = "0xD4B9E8", Slot = "66")]
		public override void Prepare(TriangulationContext tcx)
		{
		}

		[Token(Token = "0x6000393")]
		[Address(RVA = "0xD4BD40", Offset = "0xD4BD40", VA = "0xD4BD40", Slot = "64")]
		public override void AddTriangle(DelaunayTriangle t)
		{
		}
	}
	[Token(Token = "0x2000078")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x240F80", Offset = "0x240F80")]
	public class PointSet : Point2DList, ITriangulatable, IEnumerable<TriangulationPoint>, IEnumerable, IList<TriangulationPoint>, ICollection<TriangulationPoint>
	{
		[Token(Token = "0x400028C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Dictionary<uint, TriangulationPoint> mPointMap;

		[Token(Token = "0x400028D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24269C", Offset = "0x24269C")]
		private IList<DelaunayTriangle> <Triangles>k__BackingField;

		[Token(Token = "0x400028E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2426AC", Offset = "0x2426AC")]
		private string <FileName>k__BackingField;

		[Token(Token = "0x400028F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2426BC", Offset = "0x2426BC")]
		private bool <DisplayFlipX>k__BackingField;

		[Token(Token = "0x4000290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2426CC", Offset = "0x2426CC")]
		private bool <DisplayFlipY>k__BackingField;

		[Token(Token = "0x4000291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2426DC", Offset = "0x2426DC")]
		private float <DisplayRotate>k__BackingField;

		[Token(Token = "0x4000292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected double mPrecision;

		[Token(Token = "0x17000072")]
		public IList<TriangulationPoint> Points
		{
			[Token(Token = "0x6000394")]
			[Address(RVA = "0xD5FBA0", Offset = "0xD5FBA0", VA = "0xD5FBA0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000395")]
			[Address(RVA = "0xD5FBA4", Offset = "0xD5FBA4", VA = "0xD5FBA4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000073")]
		public IList<DelaunayTriangle> Triangles
		{
			[Token(Token = "0x6000396")]
			[Address(RVA = "0xD5FBA8", Offset = "0xD5FBA8", VA = "0xD5FBA8", Slot = "27")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248940", Offset = "0x248940")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000397")]
			[Address(RVA = "0xD5FBB0", Offset = "0xD5FBB0", VA = "0xD5FBB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248950", Offset = "0x248950")]
			private set
			{
			}
		}

		[Token(Token = "0x17000074")]
		public string FileName
		{
			[Token(Token = "0x6000398")]
			[Address(RVA = "0xD5FBB8", Offset = "0xD5FBB8", VA = "0xD5FBB8", Slot = "29")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248960", Offset = "0x248960")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000399")]
			[Address(RVA = "0xD5FBC0", Offset = "0xD5FBC0", VA = "0xD5FBC0", Slot = "30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248970", Offset = "0x248970")]
			set
			{
			}
		}

		[Token(Token = "0x17000075")]
		public bool DisplayFlipX
		{
			[Token(Token = "0x600039A")]
			[Address(RVA = "0xD5FBC8", Offset = "0xD5FBC8", VA = "0xD5FBC8", Slot = "31")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248980", Offset = "0x248980")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600039B")]
			[Address(RVA = "0xD5FBD0", Offset = "0xD5FBD0", VA = "0xD5FBD0", Slot = "32")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248990", Offset = "0x248990")]
			set
			{
			}
		}

		[Token(Token = "0x17000076")]
		public bool DisplayFlipY
		{
			[Token(Token = "0x600039C")]
			[Address(RVA = "0xD5FBD8", Offset = "0xD5FBD8", VA = "0xD5FBD8", Slot = "33")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2489A0", Offset = "0x2489A0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600039D")]
			[Address(RVA = "0xD5FBE0", Offset = "0xD5FBE0", VA = "0xD5FBE0", Slot = "34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2489B0", Offset = "0x2489B0")]
			set
			{
			}
		}

		[Token(Token = "0x17000077")]
		public float DisplayRotate
		{
			[Token(Token = "0x600039E")]
			[Address(RVA = "0xD5FBE8", Offset = "0xD5FBE8", VA = "0xD5FBE8", Slot = "35")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2489C0", Offset = "0x2489C0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600039F")]
			[Address(RVA = "0xD5FBF0", Offset = "0xD5FBF0", VA = "0xD5FBF0", Slot = "36")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2489D0", Offset = "0x2489D0")]
			set
			{
			}
		}

		[Token(Token = "0x17000078")]
		public double Precision
		{
			[Token(Token = "0x60003A0")]
			[Address(RVA = "0xD5FBF8", Offset = "0xD5FBF8", VA = "0xD5FBF8", Slot = "37")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60003A1")]
			[Address(RVA = "0xD5FC04", Offset = "0xD5FC04", VA = "0xD5FC04", Slot = "38")]
			set
			{
			}
		}

		[Token(Token = "0x17000079")]
		public double MinX
		{
			[Token(Token = "0x60003A2")]
			[Address(RVA = "0xD462C4", Offset = "0xD462C4", VA = "0xD462C4", Slot = "39")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700007A")]
		public double MaxX
		{
			[Token(Token = "0x60003A3")]
			[Address(RVA = "0xD46404", Offset = "0xD46404", VA = "0xD46404", Slot = "40")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700007B")]
		public double MinY
		{
			[Token(Token = "0x60003A4")]
			[Address(RVA = "0xD462EC", Offset = "0xD462EC", VA = "0xD462EC", Slot = "41")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700007C")]
		public double MaxY
		{
			[Token(Token = "0x60003A5")]
			[Address(RVA = "0xD4642C", Offset = "0xD4642C", VA = "0xD4642C", Slot = "42")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700007D")]
		public Rect2D Bounds
		{
			[Token(Token = "0x60003A6")]
			[Address(RVA = "0xD5FC14", Offset = "0xD5FC14", VA = "0xD5FC14", Slot = "43")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007E")]
		public virtual TriangulationMode TriangulationMode
		{
			[Token(Token = "0x60003A7")]
			[Address(RVA = "0xD5FC1C", Offset = "0xD5FC1C", VA = "0xD5FC1C", Slot = "61")]
			get
			{
				return default(TriangulationMode);
			}
		}

		[Token(Token = "0x1700007F")]
		public new TriangulationPoint Item
		{
			[Token(Token = "0x60003A8")]
			[Address(RVA = "0xD5FC24", Offset = "0xD5FC24", VA = "0xD5FC24", Slot = "49")]
			get
			{
				return null;
			}
			[Token(Token = "0x60003A9")]
			[Address(RVA = "0xD5FCF0", Offset = "0xD5FCF0", VA = "0xD5FCF0", Slot = "50")]
			set
			{
			}
		}

		[Token(Token = "0x60003AA")]
		[Address(RVA = "0xD456B4", Offset = "0xD456B4", VA = "0xD456B4")]
		public PointSet(List<TriangulationPoint> bounds)
		{
		}

		[Token(Token = "0x60003AB")]
		[Address(RVA = "0xD5FD78", Offset = "0xD5FD78", VA = "0xD5FD78", Slot = "48")]
		private IEnumerator<TriangulationPoint> System.Collections.Generic.IEnumerable<Poly2Tri.TriangulationPoint>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x60003AC")]
		[Address(RVA = "0xD5FDF0", Offset = "0xD5FDF0", VA = "0xD5FDF0", Slot = "51")]
		public int IndexOf(TriangulationPoint p)
		{
			return default(int);
		}

		[Token(Token = "0x60003AD")]
		[Address(RVA = "0xD5FE70", Offset = "0xD5FE70", VA = "0xD5FE70", Slot = "19")]
		public override void Add(Point2D p)
		{
		}

		[Token(Token = "0x60003AE")]
		[Address(RVA = "0xD5FF20", Offset = "0xD5FF20", VA = "0xD5FF20", Slot = "62")]
		public virtual void Add(TriangulationPoint p)
		{
		}

		[Token(Token = "0x60003AF")]
		[Address(RVA = "0xD5FF40", Offset = "0xD5FF40", VA = "0xD5FF40", Slot = "20")]
		protected override void Add(Point2D p, int idx, bool constrainToBounds)
		{
		}

		[Token(Token = "0x60003B0")]
		[Address(RVA = "0xD467A4", Offset = "0xD467A4", VA = "0xD467A4")]
		protected bool Add(TriangulationPoint p, int idx, bool constrainToBounds)
		{
			return default(bool);
		}

		[Token(Token = "0x60003B1")]
		[Address(RVA = "0xD5FFF8", Offset = "0xD5FFF8", VA = "0xD5FFF8", Slot = "22")]
		public override void AddRange(IEnumerator<Point2D> iter, WindingOrderType windingOrder)
		{
		}

		[Token(Token = "0x60003B2")]
		[Address(RVA = "0xD601E4", Offset = "0xD601E4", VA = "0xD601E4", Slot = "63")]
		public virtual bool AddRange(List<TriangulationPoint> points)
		{
			return default(bool);
		}

		[Token(Token = "0x60003B3")]
		[Address(RVA = "0xD46314", Offset = "0xD46314", VA = "0xD46314")]
		public bool TryGetPoint(double x, double y, out TriangulationPoint p)
		{
			return default(bool);
		}

		[Token(Token = "0x60003B4")]
		[Address(RVA = "0xD60328", Offset = "0xD60328", VA = "0xD60328", Slot = "52")]
		public void Insert(int idx, TriangulationPoint item)
		{
		}

		[Token(Token = "0x60003B5")]
		[Address(RVA = "0xD603B0", Offset = "0xD603B0", VA = "0xD603B0", Slot = "24")]
		public override bool Remove(Point2D p)
		{
			return default(bool);
		}

		[Token(Token = "0x60003B6")]
		[Address(RVA = "0xD60430", Offset = "0xD60430", VA = "0xD60430", Slot = "60")]
		public bool Remove(TriangulationPoint p)
		{
			return default(bool);
		}

		[Token(Token = "0x60003B7")]
		[Address(RVA = "0xD604B0", Offset = "0xD604B0", VA = "0xD604B0", Slot = "25")]
		public override void RemoveAt(int idx)
		{
		}

		[Token(Token = "0x60003B8")]
		[Address(RVA = "0xD6054C", Offset = "0xD6054C", VA = "0xD6054C", Slot = "58")]
		public bool Contains(TriangulationPoint p)
		{
			return default(bool);
		}

		[Token(Token = "0x60003B9")]
		[Address(RVA = "0xD605CC", Offset = "0xD605CC", VA = "0xD605CC", Slot = "59")]
		public void CopyTo(TriangulationPoint[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x60003BA")]
		[Address(RVA = "0xD607BC", Offset = "0xD607BC", VA = "0xD607BC")]
		protected bool ConstrainPointToBounds(Point2D p)
		{
			return default(bool);
		}

		[Token(Token = "0x60003BB")]
		[Address(RVA = "0xD475E8", Offset = "0xD475E8", VA = "0xD475E8")]
		protected bool ConstrainPointToBounds(TriangulationPoint p)
		{
			return default(bool);
		}

		[Token(Token = "0x60003BC")]
		[Address(RVA = "0xD60A9C", Offset = "0xD60A9C", VA = "0xD60A9C", Slot = "64")]
		public virtual void AddTriangle(DelaunayTriangle t)
		{
		}

		[Token(Token = "0x60003BD")]
		[Address(RVA = "0xD60B7C", Offset = "0xD60B7C", VA = "0xD60B7C", Slot = "46")]
		public void AddTriangles(IEnumerable<DelaunayTriangle> list)
		{
		}

		[Token(Token = "0x60003BE")]
		[Address(RVA = "0xD60E70", Offset = "0xD60E70", VA = "0xD60E70", Slot = "47")]
		public void ClearTriangles()
		{
		}

		[Token(Token = "0x60003BF")]
		[Address(RVA = "0xD4B9E0", Offset = "0xD4B9E0", VA = "0xD4B9E0", Slot = "65")]
		public virtual bool Initialize()
		{
			return default(bool);
		}

		[Token(Token = "0x60003C0")]
		[Address(RVA = "0xD4BB74", Offset = "0xD4BB74", VA = "0xD4BB74", Slot = "66")]
		public virtual void Prepare(TriangulationContext tcx)
		{
		}
	}
	[Token(Token = "0x2000079")]
	public enum TriangulationAlgorithm
	{
		[Token(Token = "0x4000294")]
		DTSweep
	}
	[Token(Token = "0x200007A")]
	public class Edge
	{
		[Token(Token = "0x4000295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		protected Point2D mP;

		[Token(Token = "0x4000296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		protected Point2D mQ;

		[Token(Token = "0x17000080")]
		public Point2D EdgeStart
		{
			[Token(Token = "0x60003C1")]
			[Address(RVA = "0xD586FC", Offset = "0xD586FC", VA = "0xD586FC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60003C2")]
			[Address(RVA = "0xD58704", Offset = "0xD58704", VA = "0xD58704")]
			set
			{
			}
		}

		[Token(Token = "0x17000081")]
		public Point2D EdgeEnd
		{
			[Token(Token = "0x60003C3")]
			[Address(RVA = "0xD5870C", Offset = "0xD5870C", VA = "0xD5870C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60003C4")]
			[Address(RVA = "0xD58714", Offset = "0xD58714", VA = "0xD58714")]
			set
			{
			}
		}

		[Token(Token = "0x60003C5")]
		[Address(RVA = "0xD5871C", Offset = "0xD5871C", VA = "0xD5871C")]
		public Edge()
		{
		}

		[Token(Token = "0x60003C6")]
		[Address(RVA = "0xD58740", Offset = "0xD58740", VA = "0xD58740")]
		public Edge(Point2D edgeStart, Point2D edgeEnd)
		{
		}
	}
	[Token(Token = "0x200007B")]
	public class TriangulationConstraint : Edge
	{
		[Token(Token = "0x4000297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private uint mContraintCode;

		[Token(Token = "0x17000082")]
		public TriangulationPoint P
		{
			[Token(Token = "0x60003C7")]
			[Address(RVA = "0x4953E0", Offset = "0x4953E0", VA = "0x4953E0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60003C8")]
			[Address(RVA = "0x495478", Offset = "0x495478", VA = "0x495478")]
			set
			{
			}
		}

		[Token(Token = "0x17000083")]
		public TriangulationPoint Q
		{
			[Token(Token = "0x60003C9")]
			[Address(RVA = "0x4954C4", Offset = "0x4954C4", VA = "0x4954C4")]
			get
			{
				return null;
			}
			[Token(Token = "0x60003CA")]
			[Address(RVA = "0x49555C", Offset = "0x49555C", VA = "0x49555C")]
			set
			{
			}
		}

		[Token(Token = "0x17000084")]
		public uint ConstraintCode
		{
			[Token(Token = "0x60003CB")]
			[Address(RVA = "0x495578", Offset = "0x495578", VA = "0x495578")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x60003CC")]
		[Address(RVA = "0x495580", Offset = "0x495580", VA = "0x495580")]
		public TriangulationConstraint(TriangulationPoint p1, TriangulationPoint p2)
		{
		}

		[Token(Token = "0x60003CD")]
		[Address(RVA = "0x4956D0", Offset = "0x4956D0", VA = "0x4956D0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60003CE")]
		[Address(RVA = "0x495494", Offset = "0x495494", VA = "0x495494")]
		public void CalculateContraintCode()
		{
		}

		[Token(Token = "0x60003CF")]
		[Address(RVA = "0x495A6C", Offset = "0x495A6C", VA = "0x495A6C")]
		public static uint CalculateContraintCode(TriangulationPoint p, TriangulationPoint q)
		{
			return default(uint);
		}
	}
	[Token(Token = "0x200007C")]
	public abstract class TriangulationContext
	{
		[Token(Token = "0x4000298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2426EC", Offset = "0x2426EC")]
		private TriangulationDebugContext <DebugContext>k__BackingField;

		[Token(Token = "0x4000299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly List<DelaunayTriangle> Triangles;

		[Token(Token = "0x400029A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly List<TriangulationPoint> Points;

		[Token(Token = "0x400029B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2426FC", Offset = "0x2426FC")]
		private TriangulationMode <TriangulationMode>k__BackingField;

		[Token(Token = "0x400029C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24270C", Offset = "0x24270C")]
		private ITriangulatable <Triangulatable>k__BackingField;

		[Token(Token = "0x400029D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24271C", Offset = "0x24271C")]
		private int <StepCount>k__BackingField;

		[Token(Token = "0x400029E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24272C", Offset = "0x24272C")]
		private bool <IsDebugEnabled>k__BackingField;

		[Token(Token = "0x17000085")]
		public TriangulationDebugContext DebugContext
		{
			[Token(Token = "0x60003D0")]
			[Address(RVA = "0x495BB0", Offset = "0x495BB0", VA = "0x495BB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2489E0", Offset = "0x2489E0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60003D1")]
			[Address(RVA = "0x495BB8", Offset = "0x495BB8", VA = "0x495BB8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2489F0", Offset = "0x2489F0")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000086")]
		public TriangulationMode TriangulationMode
		{
			[Token(Token = "0x60003D2")]
			[Address(RVA = "0x495BC0", Offset = "0x495BC0", VA = "0x495BC0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248A00", Offset = "0x248A00")]
			get
			{
				return default(TriangulationMode);
			}
			[Token(Token = "0x60003D3")]
			[Address(RVA = "0x495BC8", Offset = "0x495BC8", VA = "0x495BC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248A10", Offset = "0x248A10")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000087")]
		public ITriangulatable Triangulatable
		{
			[Token(Token = "0x60003D4")]
			[Address(RVA = "0x495BD0", Offset = "0x495BD0", VA = "0x495BD0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248A20", Offset = "0x248A20")]
			get
			{
				return null;
			}
			[Token(Token = "0x60003D5")]
			[Address(RVA = "0x495BD8", Offset = "0x495BD8", VA = "0x495BD8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248A30", Offset = "0x248A30")]
			private set
			{
			}
		}

		[Token(Token = "0x17000088")]
		public int StepCount
		{
			[Token(Token = "0x60003D6")]
			[Address(RVA = "0x495BE0", Offset = "0x495BE0", VA = "0x495BE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248A40", Offset = "0x248A40")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60003D7")]
			[Address(RVA = "0x495BE8", Offset = "0x495BE8", VA = "0x495BE8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248A50", Offset = "0x248A50")]
			private set
			{
			}
		}

		[Token(Token = "0x17000089")]
		public abstract TriangulationAlgorithm Algorithm
		{
			[Token(Token = "0x60003D9")]
			get;
		}

		[Token(Token = "0x1700008A")]
		public virtual bool IsDebugEnabled
		{
			[Token(Token = "0x60003DE")]
			[Address(RVA = "0x495E0C", Offset = "0x495E0C", VA = "0x495E0C", Slot = "8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248A60", Offset = "0x248A60")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60003DF")]
			[Address(RVA = "0x495E14", Offset = "0x495E14", VA = "0x495E14", Slot = "9")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248A70", Offset = "0x248A70")]
			protected set
			{
			}
		}

		[Token(Token = "0x1700008B")]
		public DTSweepDebugContext DTDebugContext
		{
			[Token(Token = "0x60003E0")]
			[Address(RVA = "0x495E1C", Offset = "0x495E1C", VA = "0x495E1C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003D8")]
		[Address(RVA = "0x495BF0", Offset = "0x495BF0", VA = "0x495BF0")]
		public void Done()
		{
		}

		[Token(Token = "0x60003DA")]
		[Address(RVA = "0x495C00", Offset = "0x495C00", VA = "0x495C00", Slot = "5")]
		public virtual void PrepareTriangulation(ITriangulatable t)
		{
		}

		[Token(Token = "0x60003DB")]
		public abstract TriangulationConstraint NewConstraint(TriangulationPoint a, TriangulationPoint b);

		[Token(Token = "0x60003DC")]
		[Address(RVA = "0x495D6C", Offset = "0x495D6C", VA = "0x495D6C")]
		public void Update(string message)
		{
		}

		[Token(Token = "0x60003DD")]
		[Address(RVA = "0x495D70", Offset = "0x495D70", VA = "0x495D70", Slot = "7")]
		public virtual void Clear()
		{
		}

		[Token(Token = "0x60003E1")]
		[Address(RVA = "0x495EB4", Offset = "0x495EB4", VA = "0x495EB4")]
		protected TriangulationContext()
		{
		}
	}
	[Token(Token = "0x200007D")]
	public abstract class TriangulationDebugContext
	{
		[Token(Token = "0x400029F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		protected TriangulationContext _tcx;

		[Token(Token = "0x60003E2")]
		[Address(RVA = "0x495F78", Offset = "0x495F78", VA = "0x495F78")]
		public TriangulationDebugContext(TriangulationContext tcx)
		{
		}

		[Token(Token = "0x60003E3")]
		public abstract void Clear();
	}
	[Token(Token = "0x200007E")]
	public enum TriangulationMode
	{
		[Token(Token = "0x40002A1")]
		Unconstrained,
		[Token(Token = "0x40002A2")]
		Constrained,
		[Token(Token = "0x40002A3")]
		Polygon
	}
	[Token(Token = "0x200007F")]
	public class TriangulationPoint : Point2D
	{
		[Token(Token = "0x40002A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly double kVertexCodeDefaultPrecision;

		[Token(Token = "0x40002A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected uint mVertexCode;

		[Token(Token = "0x40002A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24273C", Offset = "0x24273C")]
		private List<DTSweepConstraint> <Edges>k__BackingField;

		[Token(Token = "0x1700008C")]
		public override double X
		{
			[Token(Token = "0x60003E4")]
			[Address(RVA = "0x495F98", Offset = "0x495F98", VA = "0x495F98", Slot = "5")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60003E5")]
			[Address(RVA = "0x495FA4", Offset = "0x495FA4", VA = "0x495FA4", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x1700008D")]
		public override double Y
		{
			[Token(Token = "0x60003E6")]
			[Address(RVA = "0x4961D0", Offset = "0x4961D0", VA = "0x4961D0", Slot = "7")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60003E7")]
			[Address(RVA = "0x4961DC", Offset = "0x4961DC", VA = "0x4961DC", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x1700008E")]
		public uint VertexCode
		{
			[Token(Token = "0x60003E8")]
			[Address(RVA = "0x4962BC", Offset = "0x4962BC", VA = "0x4962BC")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x1700008F")]
		public List<DTSweepConstraint> Edges
		{
			[Token(Token = "0x60003E9")]
			[Address(RVA = "0x4962C4", Offset = "0x4962C4", VA = "0x4962C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248A80", Offset = "0x248A80")]
			get
			{
				return null;
			}
			[Token(Token = "0x60003EA")]
			[Address(RVA = "0x4962CC", Offset = "0x4962CC", VA = "0x4962CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248A90", Offset = "0x248A90")]
			private set
			{
			}
		}

		[Token(Token = "0x17000090")]
		public bool HasEdges
		{
			[Token(Token = "0x60003EB")]
			[Address(RVA = "0x4962D4", Offset = "0x4962D4", VA = "0x4962D4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60003EC")]
		[Address(RVA = "0x4962E4", Offset = "0x4962E4", VA = "0x4962E4")]
		public TriangulationPoint(double x, double y)
		{
		}

		[Token(Token = "0x60003ED")]
		[Address(RVA = "0x4963A8", Offset = "0x4963A8", VA = "0x4963A8")]
		public TriangulationPoint(double x, double y, double precision)
		{
		}

		[Token(Token = "0x60003EE")]
		[Address(RVA = "0x496474", Offset = "0x496474", VA = "0x496474", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60003EF")]
		[Address(RVA = "0x496518", Offset = "0x496518", VA = "0x496518", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60003F0")]
		[Address(RVA = "0x496520", Offset = "0x496520", VA = "0x496520", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60003F1")]
		[Address(RVA = "0x4965D8", Offset = "0x4965D8", VA = "0x4965D8", Slot = "9")]
		public override void Set(double x, double y)
		{
		}

		[Token(Token = "0x60003F2")]
		[Address(RVA = "0x496080", Offset = "0x496080", VA = "0x496080")]
		public static uint CreateVertexCode(double x, double y, double precision)
		{
			return default(uint);
		}

		[Token(Token = "0x60003F3")]
		[Address(RVA = "0x4966C8", Offset = "0x4966C8", VA = "0x4966C8")]
		public void AddEdge(DTSweepConstraint e)
		{
		}

		[Token(Token = "0x60003F4")]
		[Address(RVA = "0x496788", Offset = "0x496788", VA = "0x496788")]
		public bool HasEdge(TriangulationPoint p)
		{
			return default(bool);
		}

		[Token(Token = "0x60003F5")]
		[Address(RVA = "0x4967AC", Offset = "0x4967AC", VA = "0x4967AC")]
		public bool GetEdge(TriangulationPoint p, out DTSweepConstraint edge)
		{
			return default(bool);
		}

		[Token(Token = "0x60003F6")]
		[Address(RVA = "0x496A64", Offset = "0x496A64", VA = "0x496A64")]
		public static Point2D ToPoint2D(TriangulationPoint p)
		{
			return null;
		}
	}
	[Token(Token = "0x2000080")]
	public class TriangulationPointEnumerator : IEnumerator<TriangulationPoint>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		protected IList<Point2D> mPoints;

		[Token(Token = "0x40002A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		protected int position;

		[Token(Token = "0x17000091")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003FC")]
			[Address(RVA = "0x496C0C", Offset = "0x496C0C", VA = "0x496C0C", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000092")]
		public TriangulationPoint Current
		{
			[Token(Token = "0x60003FD")]
			[Address(RVA = "0x496C10", Offset = "0x496C10", VA = "0x496C10", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003F8")]
		[Address(RVA = "0x496ADC", Offset = "0x496ADC", VA = "0x496ADC")]
		public TriangulationPointEnumerator(IList<Point2D> points)
		{
		}

		[Token(Token = "0x60003F9")]
		[Address(RVA = "0x496B08", Offset = "0x496B08", VA = "0x496B08", Slot = "6")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003FA")]
		[Address(RVA = "0x496BFC", Offset = "0x496BFC", VA = "0x496BFC", Slot = "8")]
		public void Reset()
		{
		}

		[Token(Token = "0x60003FB")]
		[Address(RVA = "0x496C08", Offset = "0x496C08", VA = "0x496C08", Slot = "5")]
		private void System.IDisposable.Dispose()
		{
		}
	}
	[Token(Token = "0x2000081")]
	public class TriangulationPointList : Point2DList
	{
		[Token(Token = "0x60003FE")]
		[Address(RVA = "0x496DE4", Offset = "0x496DE4", VA = "0x496DE4")]
		public TriangulationPointList()
		{
		}
	}
	[Token(Token = "0x2000082")]
	public class PointGenerator
	{
		[Token(Token = "0x40002A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly System.Random RNG;

		[Token(Token = "0x60003FF")]
		[Address(RVA = "0xD5F7B4", Offset = "0xD5F7B4", VA = "0xD5F7B4")]
		public static List<TriangulationPoint> UniformDistribution(int n, double scale)
		{
			return null;
		}

		[Token(Token = "0x6000400")]
		[Address(RVA = "0xD5F9A4", Offset = "0xD5F9A4", VA = "0xD5F9A4")]
		public static List<TriangulationPoint> UniformGrid(int n, double scale)
		{
			return null;
		}

		[Token(Token = "0x6000401")]
		[Address(RVA = "0xD5FB18", Offset = "0xD5FB18", VA = "0xD5FB18")]
		public PointGenerator()
		{
		}
	}
	[Token(Token = "0x2000083")]
	public class PolygonGenerator
	{
		[Token(Token = "0x40002AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly System.Random RNG;

		[Token(Token = "0x40002AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static double PI_2;

		[Token(Token = "0x6000403")]
		[Address(RVA = "0xD62BA0", Offset = "0xD62BA0", VA = "0xD62BA0")]
		public static Polygon RandomCircleSweep(double scale, int vertexCount)
		{
			return null;
		}

		[Token(Token = "0x6000404")]
		[Address(RVA = "0xD630A0", Offset = "0xD630A0", VA = "0xD630A0")]
		public static Polygon RandomCircleSweep2(double scale, int vertexCount)
		{
			return null;
		}

		[Token(Token = "0x6000405")]
		[Address(RVA = "0xD633BC", Offset = "0xD633BC", VA = "0xD633BC")]
		public PolygonGenerator()
		{
		}
	}
	[Token(Token = "0x2000084")]
	public class TriangulationUtil
	{
		[Token(Token = "0x6000407")]
		[Address(RVA = "0x496E68", Offset = "0x496E68", VA = "0x496E68")]
		public static bool SmartIncircle(Point2D pa, Point2D pb, Point2D pc, Point2D pd)
		{
			return default(bool);
		}

		[Token(Token = "0x6000408")]
		[Address(RVA = "0x4970A4", Offset = "0x4970A4", VA = "0x4970A4")]
		public static bool InScanArea(Point2D pa, Point2D pb, Point2D pc, Point2D pd)
		{
			return default(bool);
		}

		[Token(Token = "0x6000409")]
		[Address(RVA = "0x49728C", Offset = "0x49728C", VA = "0x49728C")]
		public static Orientation Orient2d(Point2D pa, Point2D pb, Point2D pc)
		{
			return default(Orientation);
		}

		[Token(Token = "0x600040A")]
		[Address(RVA = "0x4974E0", Offset = "0x4974E0", VA = "0x4974E0")]
		public static bool PointInBoundingBox(double xmin, double xmax, double ymin, double ymax, Point2D p)
		{
			return default(bool);
		}

		[Token(Token = "0x600040B")]
		[Address(RVA = "0x4975BC", Offset = "0x4975BC", VA = "0x4975BC")]
		public static bool PointOnLineSegment2D(Point2D lineStart, Point2D lineEnd, Point2D p, double epsilon)
		{
			return default(bool);
		}

		[Token(Token = "0x600040C")]
		[Address(RVA = "0x497718", Offset = "0x497718", VA = "0x497718")]
		public static bool PointOnLineSegment2D(double x1, double y1, double x2, double y2, double x, double y, double epsilon)
		{
			return default(bool);
		}

		[Token(Token = "0x600040D")]
		[Address(RVA = "0x494274", Offset = "0x494274", VA = "0x494274")]
		public static bool RectsIntersect(Rect2D r1, Rect2D r2)
		{
			return default(bool);
		}

		[Token(Token = "0x600040E")]
		[Address(RVA = "0x497908", Offset = "0x497908", VA = "0x497908")]
		public static bool LinesIntersect2D(Point2D ptStart0, Point2D ptEnd0, Point2D ptStart1, Point2D ptEnd1, bool firstIsSegment, bool secondIsSegment, bool coincidentEndPointCollisions, ref Point2D pIntersectionPt, double epsilon)
		{
			return default(bool);
		}

		[Token(Token = "0x600040F")]
		[Address(RVA = "0x498004", Offset = "0x498004", VA = "0x498004")]
		public static bool LinesIntersect2D(Point2D ptStart0, Point2D ptEnd0, Point2D ptStart1, Point2D ptEnd1, ref Point2D pIntersectionPt, double epsilon)
		{
			return default(bool);
		}

		[Token(Token = "0x6000410")]
		[Address(RVA = "0x49803C", Offset = "0x49803C", VA = "0x49803C")]
		public static double LI2DDotProduct(Point2D v0, Point2D v1)
		{
			return default(double);
		}

		[Token(Token = "0x6000411")]
		[Address(RVA = "0x498108", Offset = "0x498108", VA = "0x498108")]
		public static bool RaysIntersect2D(Point2D ptRayOrigin0, Point2D ptRayVector0, Point2D ptRayOrigin1, Point2D ptRayVector1, ref Point2D ptIntersection)
		{
			return default(bool);
		}

		[Token(Token = "0x6000412")]
		[Address(RVA = "0x498580", Offset = "0x498580", VA = "0x498580")]
		public TriangulationUtil()
		{
		}
	}
	[Token(Token = "0x2000085")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x240FB4", Offset = "0x240FB4")]
	public struct FixedArray3<T> : IEnumerable<T>, IEnumerable where T : class
	{
		[Token(Token = "0x2000286")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2417DC", Offset = "0x2417DC")]
		private sealed class <Enumerate>d__10 : IEnumerable<T>, IEnumerable, IEnumerator<T>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x4000E77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T <>2__current;

			[Token(Token = "0x4000E78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000E79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public FixedArray3<T> <>4__this;

			[Token(Token = "0x4000E7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public FixedArray3<T> <>3__<>4__this;

			[Token(Token = "0x4000E7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <i>5__2;

			[Token(Token = "0x170001BE")]
			private T System.Collections.Generic.IEnumerator<T>.Current
			{
				[Token(Token = "0x60013F2")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001BF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013F4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013EF")]
			[DebuggerHidden]
			public <Enumerate>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x60013F0")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013F1")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013F3")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x60013F5")]
			[DebuggerHidden]
			private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60013F6")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x40002AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T _0;

		[Token(Token = "0x40002AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T _1;

		[Token(Token = "0x40002AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T _2;

		[Token(Token = "0x17000093")]
		public T Item
		{
			[Token(Token = "0x6000413")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000414")]
			set
			{
			}
		}

		[Token(Token = "0x6000415")]
		public bool Contains(T value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000416")]
		public int IndexOf(T value)
		{
			return default(int);
		}

		[Token(Token = "0x6000417")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000418")]
		public void Clear(T value)
		{
		}

		[Token(Token = "0x6000419")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x248AA0", Offset = "0x248AA0")]
		private IEnumerable<T> Enumerate()
		{
			return null;
		}

		[Token(Token = "0x600041A")]
		public IEnumerator<T> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600041B")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x2000086")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x240FE8", Offset = "0x240FE8")]
	public struct FixedBitArray3 : IEnumerable<bool>, IEnumerable
	{
		[Token(Token = "0x2000287")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2417EC", Offset = "0x2417EC")]
		private sealed class <Enumerate>d__10 : IEnumerable<bool>, IEnumerable, IEnumerator<bool>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x4000E7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private bool <>2__current;

			[Token(Token = "0x4000E7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000E7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public FixedBitArray3 <>4__this;

			[Token(Token = "0x4000E80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x17")]
			public FixedBitArray3 <>3__<>4__this;

			[Token(Token = "0x4000E81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private int <i>5__2;

			[Token(Token = "0x170001C0")]
			private bool System.Collections.Generic.IEnumerator<System.Boolean>.Current
			{
				[Token(Token = "0x60013FA")]
				[Address(RVA = "0xD58ACC", Offset = "0xD58ACC", VA = "0xD58ACC", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170001C1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013FC")]
				[Address(RVA = "0xD58B5C", Offset = "0xD58B5C", VA = "0xD58B5C", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013F7")]
			[Address(RVA = "0xD5894C", Offset = "0xD5894C", VA = "0xD5894C")]
			[DebuggerHidden]
			public <Enumerate>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x60013F8")]
			[Address(RVA = "0xD58A5C", Offset = "0xD58A5C", VA = "0xD58A5C", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013F9")]
			[Address(RVA = "0xD58A60", Offset = "0xD58A60", VA = "0xD58A60", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013FB")]
			[Address(RVA = "0xD58AD4", Offset = "0xD58AD4", VA = "0xD58AD4", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x60013FD")]
			[Address(RVA = "0xD58BD0", Offset = "0xD58BD0", VA = "0xD58BD0", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<bool> System.Collections.Generic.IEnumerable<System.Boolean>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60013FE")]
			[Address(RVA = "0xD58CA8", Offset = "0xD58CA8", VA = "0xD58CA8", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x40002AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool _0;

		[Token(Token = "0x40002B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public bool _1;

		[Token(Token = "0x40002B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public bool _2;

		[Token(Token = "0x17000094")]
		public bool Item
		{
			[Token(Token = "0x600041C")]
			[Address(RVA = "0x2DD0C8", Offset = "0x2DD0C8", VA = "0x2DD0C8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600041D")]
			[Address(RVA = "0x2DD0D0", Offset = "0x2DD0D0", VA = "0x2DD0D0")]
			set
			{
			}
		}

		[Token(Token = "0x600041E")]
		[Address(RVA = "0x2DD0D8", Offset = "0x2DD0D8", VA = "0x2DD0D8")]
		public bool Contains(bool value)
		{
			return default(bool);
		}

		[Token(Token = "0x600041F")]
		[Address(RVA = "0x2DD120", Offset = "0x2DD120", VA = "0x2DD120")]
		public int IndexOf(bool value)
		{
			return default(int);
		}

		[Token(Token = "0x6000420")]
		[Address(RVA = "0x2DD168", Offset = "0x2DD168", VA = "0x2DD168")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000421")]
		[Address(RVA = "0x2DD178", Offset = "0x2DD178", VA = "0x2DD178")]
		public void Clear(bool value)
		{
		}

		[Token(Token = "0x6000422")]
		[Address(RVA = "0x2DD180", Offset = "0x2DD180", VA = "0x2DD180")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x248B18", Offset = "0x248B18")]
		private IEnumerable<bool> Enumerate()
		{
			return null;
		}

		[Token(Token = "0x6000423")]
		[Address(RVA = "0x2DD188", Offset = "0x2DD188", VA = "0x2DD188", Slot = "4")]
		public IEnumerator<bool> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000424")]
		[Address(RVA = "0x2DD190", Offset = "0x2DD190", VA = "0x2DD190", Slot = "5")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x2000087")]
	public class MathUtil
	{
		[Token(Token = "0x40002B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static double EPSILON;

		[Token(Token = "0x6000425")]
		[Address(RVA = "0xD58CAC", Offset = "0xD58CAC", VA = "0xD58CAC")]
		public static bool AreValuesEqual(double val1, double val2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000426")]
		[Address(RVA = "0xD58D84", Offset = "0xD58D84", VA = "0xD58D84")]
		public static bool AreValuesEqual(double val1, double val2, double tolerance)
		{
			return default(bool);
		}

		[Token(Token = "0x6000427")]
		[Address(RVA = "0xD58DC0", Offset = "0xD58DC0", VA = "0xD58DC0")]
		public static bool IsValueBetween(double val, double min, double max, double tolerance)
		{
			return default(bool);
		}

		[Token(Token = "0x6000428")]
		[Address(RVA = "0xD58E1C", Offset = "0xD58E1C", VA = "0xD58E1C")]
		public static double RoundWithPrecision(double f, double precision)
		{
			return default(double);
		}

		[Token(Token = "0x6000429")]
		[Address(RVA = "0xD58EEC", Offset = "0xD58EEC", VA = "0xD58EEC")]
		public static double Clamp(double a, double low, double high)
		{
			return default(double);
		}

		[Token(Token = "0x600042A")]
		public static void Swap<T>(ref T a, ref T b)
		{
		}

		[Token(Token = "0x600042B")]
		[Address(RVA = "0xD58FB4", Offset = "0xD58FB4", VA = "0xD58FB4")]
		public static uint Jenkins32Hash(byte[] data, uint nInitialValue)
		{
			return default(uint);
		}

		[Token(Token = "0x600042C")]
		[Address(RVA = "0xD59028", Offset = "0xD59028", VA = "0xD59028")]
		public MathUtil()
		{
		}
	}
	[Token(Token = "0x2000088")]
	public class Point2D : IComparable<Point2D>
	{
		[Token(Token = "0x40002B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		protected double mX;

		[Token(Token = "0x40002B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected double mY;

		[Token(Token = "0x17000095")]
		public virtual double X
		{
			[Token(Token = "0x600042E")]
			[Address(RVA = "0xD59780", Offset = "0xD59780", VA = "0xD59780", Slot = "5")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x600042F")]
			[Address(RVA = "0xD5978C", Offset = "0xD5978C", VA = "0xD5978C", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000096")]
		public virtual double Y
		{
			[Token(Token = "0x6000430")]
			[Address(RVA = "0xD5979C", Offset = "0xD5979C", VA = "0xD5979C", Slot = "7")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000431")]
			[Address(RVA = "0xD597A8", Offset = "0xD597A8", VA = "0xD597A8", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000097")]
		public float Xf
		{
			[Token(Token = "0x6000432")]
			[Address(RVA = "0xD597B8", Offset = "0xD597B8", VA = "0xD597B8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000098")]
		public float Yf
		{
			[Token(Token = "0x6000433")]
			[Address(RVA = "0xD597E0", Offset = "0xD597E0", VA = "0xD597E0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000434")]
		[Address(RVA = "0xD59808", Offset = "0xD59808", VA = "0xD59808")]
		public Point2D()
		{
		}

		[Token(Token = "0x6000435")]
		[Address(RVA = "0xD5982C", Offset = "0xD5982C", VA = "0xD5982C")]
		public Point2D(double x, double y)
		{
		}

		[Token(Token = "0x6000436")]
		[Address(RVA = "0xD5985C", Offset = "0xD5985C", VA = "0xD5985C")]
		public Point2D(Point2D p)
		{
		}

		[Token(Token = "0x6000437")]
		[Address(RVA = "0xD598C8", Offset = "0xD598C8", VA = "0xD598C8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000438")]
		[Address(RVA = "0xD59B94", Offset = "0xD59B94", VA = "0xD59B94", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000439")]
		[Address(RVA = "0xD59B9C", Offset = "0xD59B9C", VA = "0xD59B9C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600043A")]
		[Address(RVA = "0xD59C60", Offset = "0xD59C60", VA = "0xD59C60")]
		public bool Equals(Point2D p)
		{
			return default(bool);
		}

		[Token(Token = "0x600043B")]
		[Address(RVA = "0xD59C80", Offset = "0xD59C80", VA = "0xD59C80")]
		public bool Equals(Point2D p, double epsilon)
		{
			return default(bool);
		}

		[Token(Token = "0x600043C")]
		[Address(RVA = "0xD59E14", Offset = "0xD59E14", VA = "0xD59E14", Slot = "4")]
		public int CompareTo(Point2D other)
		{
			return default(int);
		}

		[Token(Token = "0x600043D")]
		[Address(RVA = "0xD59F58", Offset = "0xD59F58", VA = "0xD59F58", Slot = "9")]
		public virtual void Set(double x, double y)
		{
		}

		[Token(Token = "0x600043E")]
		[Address(RVA = "0xD59FA8", Offset = "0xD59FA8", VA = "0xD59FA8", Slot = "10")]
		public virtual void Set(Point2D p)
		{
		}

		[Token(Token = "0x600043F")]
		[Address(RVA = "0xD5A04C", Offset = "0xD5A04C", VA = "0xD5A04C")]
		public void Add(Point2D p)
		{
		}

		[Token(Token = "0x6000440")]
		[Address(RVA = "0xD5A130", Offset = "0xD5A130", VA = "0xD5A130")]
		public void Add(double scalar)
		{
		}

		[Token(Token = "0x6000441")]
		[Address(RVA = "0xD5A1C4", Offset = "0xD5A1C4", VA = "0xD5A1C4")]
		public void Subtract(Point2D p)
		{
		}

		[Token(Token = "0x6000442")]
		[Address(RVA = "0xD5A2A8", Offset = "0xD5A2A8", VA = "0xD5A2A8")]
		public void Subtract(double scalar)
		{
		}

		[Token(Token = "0x6000443")]
		[Address(RVA = "0xD5A33C", Offset = "0xD5A33C", VA = "0xD5A33C")]
		public void Multiply(Point2D p)
		{
		}

		[Token(Token = "0x6000444")]
		[Address(RVA = "0xD5A420", Offset = "0xD5A420", VA = "0xD5A420")]
		public void Multiply(double scalar)
		{
		}

		[Token(Token = "0x6000445")]
		[Address(RVA = "0xD5A4B4", Offset = "0xD5A4B4", VA = "0xD5A4B4")]
		public void Divide(Point2D p)
		{
		}

		[Token(Token = "0x6000446")]
		[Address(RVA = "0xD5A598", Offset = "0xD5A598", VA = "0xD5A598")]
		public void Divide(double scalar)
		{
		}

		[Token(Token = "0x6000447")]
		[Address(RVA = "0xD5A62C", Offset = "0xD5A62C", VA = "0xD5A62C")]
		public void Negate()
		{
		}

		[Token(Token = "0x6000448")]
		[Address(RVA = "0xD5A6AC", Offset = "0xD5A6AC", VA = "0xD5A6AC")]
		public double Magnitude()
		{
			return default(double);
		}

		[Token(Token = "0x6000449")]
		[Address(RVA = "0xD5A7E4", Offset = "0xD5A7E4", VA = "0xD5A7E4")]
		public double MagnitudeSquared()
		{
			return default(double);
		}

		[Token(Token = "0x600044A")]
		[Address(RVA = "0xD5A880", Offset = "0xD5A880", VA = "0xD5A880")]
		public double MagnitudeReciprocal()
		{
			return default(double);
		}

		[Token(Token = "0x600044B")]
		[Address(RVA = "0xD5A8A0", Offset = "0xD5A8A0", VA = "0xD5A8A0")]
		public void Normalize()
		{
		}

		[Token(Token = "0x600044C")]
		[Address(RVA = "0xD5A8D4", Offset = "0xD5A8D4", VA = "0xD5A8D4")]
		public double Dot(Point2D p)
		{
			return default(double);
		}

		[Token(Token = "0x600044D")]
		[Address(RVA = "0xD5A98C", Offset = "0xD5A98C", VA = "0xD5A98C")]
		public double Cross(Point2D p)
		{
			return default(double);
		}

		[Token(Token = "0x600044E")]
		[Address(RVA = "0xD5AA44", Offset = "0xD5AA44", VA = "0xD5AA44")]
		public void Clamp(Point2D low, Point2D high)
		{
		}

		[Token(Token = "0x600044F")]
		[Address(RVA = "0xD5AC38", Offset = "0xD5AC38", VA = "0xD5AC38")]
		public void Abs()
		{
		}

		[Token(Token = "0x6000450")]
		[Address(RVA = "0xD5AD34", Offset = "0xD5AD34", VA = "0xD5AD34")]
		public void Reciprocal()
		{
		}

		[Token(Token = "0x6000451")]
		[Address(RVA = "0xD5AE10", Offset = "0xD5AE10", VA = "0xD5AE10")]
		public void Translate(Point2D vector)
		{
		}

		[Token(Token = "0x6000452")]
		[Address(RVA = "0xD5AE14", Offset = "0xD5AE14", VA = "0xD5AE14")]
		public void Translate(double x, double y)
		{
		}

		[Token(Token = "0x6000453")]
		[Address(RVA = "0xD5AEAC", Offset = "0xD5AEAC", VA = "0xD5AEAC")]
		public void Scale(Point2D vector)
		{
		}

		[Token(Token = "0x6000454")]
		[Address(RVA = "0xD5AEB0", Offset = "0xD5AEB0", VA = "0xD5AEB0")]
		public void Scale(double scalar)
		{
		}

		[Token(Token = "0x6000455")]
		[Address(RVA = "0xD5AEC8", Offset = "0xD5AEC8", VA = "0xD5AEC8")]
		public void Scale(double x, double y)
		{
		}

		[Token(Token = "0x6000456")]
		[Address(RVA = "0xD5AF60", Offset = "0xD5AF60", VA = "0xD5AF60")]
		public void Rotate(double radians)
		{
		}

		[Token(Token = "0x6000457")]
		[Address(RVA = "0xD5B0A8", Offset = "0xD5B0A8", VA = "0xD5B0A8")]
		public void RotateDegrees(double degrees)
		{
		}

		[Token(Token = "0x6000458")]
		[Address(RVA = "0xD5B0E8", Offset = "0xD5B0E8", VA = "0xD5B0E8")]
		public static double Dot(Point2D lhs, Point2D rhs)
		{
			return default(double);
		}

		[Token(Token = "0x6000459")]
		[Address(RVA = "0xD5B1B0", Offset = "0xD5B1B0", VA = "0xD5B1B0")]
		public static double Cross(Point2D lhs, Point2D rhs)
		{
			return default(double);
		}

		[Token(Token = "0x600045A")]
		[Address(RVA = "0xD5B278", Offset = "0xD5B278", VA = "0xD5B278")]
		public static Point2D Clamp(Point2D a, Point2D low, Point2D high)
		{
			return null;
		}

		[Token(Token = "0x600045B")]
		[Address(RVA = "0xD5B310", Offset = "0xD5B310", VA = "0xD5B310")]
		public static Point2D Min(Point2D a, Point2D b)
		{
			return null;
		}

		[Token(Token = "0x600045C")]
		[Address(RVA = "0xD5B4F4", Offset = "0xD5B4F4", VA = "0xD5B4F4")]
		public static Point2D Max(Point2D a, Point2D b)
		{
			return null;
		}

		[Token(Token = "0x600045D")]
		[Address(RVA = "0xD5B6D8", Offset = "0xD5B6D8", VA = "0xD5B6D8")]
		public static Point2D Abs(Point2D a)
		{
			return null;
		}

		[Token(Token = "0x600045E")]
		[Address(RVA = "0xD5B7D8", Offset = "0xD5B7D8", VA = "0xD5B7D8")]
		public static Point2D Reciprocal(Point2D a)
		{
			return null;
		}

		[Token(Token = "0x600045F")]
		[Address(RVA = "0xD5B8BC", Offset = "0xD5B8BC", VA = "0xD5B8BC")]
		public static Point2D Perpendicular(Point2D lhs, double scalar)
		{
			return null;
		}

		[Token(Token = "0x6000460")]
		[Address(RVA = "0xD5B9A8", Offset = "0xD5B9A8", VA = "0xD5B9A8")]
		public static Point2D Perpendicular(double scalar, Point2D rhs)
		{
			return null;
		}

		[Token(Token = "0x6000461")]
		[Address(RVA = "0xD5BA94", Offset = "0xD5BA94", VA = "0xD5BA94")]
		public static Point2D operator +(Point2D lhs, Point2D rhs)
		{
			return null;
		}

		[Token(Token = "0x6000462")]
		[Address(RVA = "0xD5BB24", Offset = "0xD5BB24", VA = "0xD5BB24")]
		public static Point2D operator +(Point2D lhs, double scalar)
		{
			return null;
		}

		[Token(Token = "0x6000463")]
		[Address(RVA = "0xD5BBC4", Offset = "0xD5BBC4", VA = "0xD5BBC4")]
		public static Point2D operator -(Point2D lhs, Point2D rhs)
		{
			return null;
		}

		[Token(Token = "0x6000464")]
		[Address(RVA = "0xD5BC54", Offset = "0xD5BC54", VA = "0xD5BC54")]
		public static Point2D operator -(Point2D lhs, double scalar)
		{
			return null;
		}

		[Token(Token = "0x6000465")]
		[Address(RVA = "0xD5BCF4", Offset = "0xD5BCF4", VA = "0xD5BCF4")]
		public static Point2D operator *(Point2D lhs, Point2D rhs)
		{
			return null;
		}

		[Token(Token = "0x6000466")]
		[Address(RVA = "0xD5BD84", Offset = "0xD5BD84", VA = "0xD5BD84")]
		public static Point2D operator *(Point2D lhs, double scalar)
		{
			return null;
		}

		[Token(Token = "0x6000467")]
		[Address(RVA = "0xD5BE24", Offset = "0xD5BE24", VA = "0xD5BE24")]
		public static Point2D operator *(double scalar, Point2D lhs)
		{
			return null;
		}

		[Token(Token = "0x6000468")]
		[Address(RVA = "0xD5BEC4", Offset = "0xD5BEC4", VA = "0xD5BEC4")]
		public static Point2D operator /(Point2D lhs, Point2D rhs)
		{
			return null;
		}

		[Token(Token = "0x6000469")]
		[Address(RVA = "0xD5BF54", Offset = "0xD5BF54", VA = "0xD5BF54")]
		public static Point2D operator /(Point2D lhs, double scalar)
		{
			return null;
		}

		[Token(Token = "0x600046A")]
		[Address(RVA = "0xD5BFF4", Offset = "0xD5BFF4", VA = "0xD5BFF4")]
		public static Point2D operator -(Point2D p)
		{
			return null;
		}

		[Token(Token = "0x600046B")]
		[Address(RVA = "0xD5C07C", Offset = "0xD5C07C", VA = "0xD5C07C")]
		public static bool operator <(Point2D lhs, Point2D rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x600046C")]
		[Address(RVA = "0xD5C0BC", Offset = "0xD5C0BC", VA = "0xD5C0BC")]
		public static bool operator >(Point2D lhs, Point2D rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x600046D")]
		[Address(RVA = "0xD5C0F4", Offset = "0xD5C0F4", VA = "0xD5C0F4")]
		public static bool operator <=(Point2D lhs, Point2D rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x600046E")]
		[Address(RVA = "0xD5C134", Offset = "0xD5C134", VA = "0xD5C134")]
		public static bool operator >=(Point2D lhs, Point2D rhs)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000089")]
	public class Point2DEnumerator : IEnumerator<Point2D>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		protected IList<Point2D> mPoints;

		[Token(Token = "0x40002B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		protected int position;

		[Token(Token = "0x17000099")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000473")]
			[Address(RVA = "0xD5C2A4", Offset = "0xD5C2A4", VA = "0xD5C2A4", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009A")]
		public Point2D Current
		{
			[Token(Token = "0x6000474")]
			[Address(RVA = "0xD5C2A8", Offset = "0xD5C2A8", VA = "0xD5C2A8", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600046F")]
		[Address(RVA = "0xD5C174", Offset = "0xD5C174", VA = "0xD5C174")]
		public Point2DEnumerator(IList<Point2D> points)
		{
		}

		[Token(Token = "0x6000470")]
		[Address(RVA = "0xD5C1A0", Offset = "0xD5C1A0", VA = "0xD5C1A0", Slot = "6")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000471")]
		[Address(RVA = "0xD5C294", Offset = "0xD5C294", VA = "0xD5C294", Slot = "8")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000472")]
		[Address(RVA = "0xD5C2A0", Offset = "0xD5C2A0", VA = "0xD5C2A0", Slot = "5")]
		private void System.IDisposable.Dispose()
		{
		}
	}
	[Token(Token = "0x200008A")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x24101C", Offset = "0x24101C")]
	public class Point2DList : IEnumerable<Point2D>, IEnumerable, IList<Point2D>, ICollection<Point2D>
	{
		[Token(Token = "0x2000288")]
		public enum WindingOrderType
		{
			[Token(Token = "0x4000E83")]
			CW = 0,
			[Token(Token = "0x4000E84")]
			CCW = 1,
			[Token(Token = "0x4000E85")]
			Unknown = 2,
			[Token(Token = "0x4000E86")]
			Default = 1
		}

		[Token(Token = "0x2000289")]
		[Flags]
		public enum PolygonError : uint
		{
			[Token(Token = "0x4000E88")]
			None = 0u,
			[Token(Token = "0x4000E89")]
			NotEnoughVertices = 1u,
			[Token(Token = "0x4000E8A")]
			NotConvex = 2u,
			[Token(Token = "0x4000E8B")]
			NotSimple = 4u,
			[Token(Token = "0x4000E8C")]
			AreaTooSmall = 8u,
			[Token(Token = "0x4000E8D")]
			SidesTooCloseToParallel = 0x10u,
			[Token(Token = "0x4000E8E")]
			TooThin = 0x20u,
			[Token(Token = "0x4000E8F")]
			Degenerate = 0x40u,
			[Token(Token = "0x4000E90")]
			Unknown = 0x40000000u
		}

		[Token(Token = "0x40002B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int kMaxPolygonVertices;

		[Token(Token = "0x40002B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly double kLinearSlop;

		[Token(Token = "0x40002B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly double kAngularSlop;

		[Token(Token = "0x40002BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		protected List<Point2D> mPoints;

		[Token(Token = "0x40002BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		protected Rect2D mBoundingBox;

		[Token(Token = "0x40002BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected WindingOrderType mWindingOrder;

		[Token(Token = "0x40002BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected double mEpsilon;

		[Token(Token = "0x1700009B")]
		public Rect2D BoundingBox
		{
			[Token(Token = "0x6000475")]
			[Address(RVA = "0xD5C430", Offset = "0xD5C430", VA = "0xD5C430")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009C")]
		public WindingOrderType WindingOrder
		{
			[Token(Token = "0x6000476")]
			[Address(RVA = "0xD5C438", Offset = "0xD5C438", VA = "0xD5C438")]
			get
			{
				return default(WindingOrderType);
			}
			[Token(Token = "0x6000477")]
			[Address(RVA = "0xD47AA8", Offset = "0xD47AA8", VA = "0xD47AA8")]
			set
			{
			}
		}

		[Token(Token = "0x1700009D")]
		public double Epsilon
		{
			[Token(Token = "0x6000478")]
			[Address(RVA = "0xD5C440", Offset = "0xD5C440", VA = "0xD5C440")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700009E")]
		public Point2D Item
		{
			[Token(Token = "0x6000479")]
			[Address(RVA = "0xD5C44C", Offset = "0xD5C44C", VA = "0xD5C44C", Slot = "6")]
			get
			{
				return null;
			}
			[Token(Token = "0x600047A")]
			[Address(RVA = "0xD5C4D0", Offset = "0xD5C4D0", VA = "0xD5C4D0", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x1700009F")]
		public int Count
		{
			[Token(Token = "0x600047B")]
			[Address(RVA = "0xD474B8", Offset = "0xD474B8", VA = "0xD474B8", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000A0")]
		public virtual bool IsReadOnly
		{
			[Token(Token = "0x600047C")]
			[Address(RVA = "0xD5C558", Offset = "0xD5C558", VA = "0xD5C558", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600047D")]
		[Address(RVA = "0xD4C524", Offset = "0xD4C524", VA = "0xD4C524")]
		public Point2DList()
		{
		}

		[Token(Token = "0x600047E")]
		[Address(RVA = "0xD5C560", Offset = "0xD5C560", VA = "0xD5C560")]
		public Point2DList(int capacity)
		{
		}

		[Token(Token = "0x600047F")]
		[Address(RVA = "0xD5C694", Offset = "0xD5C694", VA = "0xD5C694")]
		public Point2DList(IList<Point2D> l)
		{
		}

		[Token(Token = "0x6000480")]
		[Address(RVA = "0xD5C83C", Offset = "0xD5C83C", VA = "0xD5C83C")]
		public Point2DList(Point2DList l)
		{
		}

		[Token(Token = "0x6000481")]
		[Address(RVA = "0xD4C9E4", Offset = "0xD4C9E4", VA = "0xD4C9E4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000482")]
		[Address(RVA = "0xD5CA14", Offset = "0xD5CA14", VA = "0xD5CA14", Slot = "5")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000483")]
		[Address(RVA = "0xD5CABC", Offset = "0xD5CABC", VA = "0xD5CABC", Slot = "4")]
		private IEnumerator<Point2D> System.Collections.Generic.IEnumerable<Poly2Tri.Point2D>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000484")]
		[Address(RVA = "0xD5CB40", Offset = "0xD5CB40", VA = "0xD5CB40", Slot = "14")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000485")]
		[Address(RVA = "0xD5CC28", Offset = "0xD5CC28", VA = "0xD5CC28", Slot = "8")]
		public int IndexOf(Point2D p)
		{
			return default(int);
		}

		[Token(Token = "0x6000486")]
		[Address(RVA = "0xD5CCA8", Offset = "0xD5CCA8", VA = "0xD5CCA8", Slot = "19")]
		public virtual void Add(Point2D p)
		{
		}

		[Token(Token = "0x6000487")]
		[Address(RVA = "0xD5CCD8", Offset = "0xD5CCD8", VA = "0xD5CCD8", Slot = "20")]
		protected virtual void Add(Point2D p, int idx, bool bCalcWindingOrderAndEpsilon)
		{
		}

		[Token(Token = "0x6000488")]
		[Address(RVA = "0xD5CDF4", Offset = "0xD5CDF4", VA = "0xD5CDF4", Slot = "21")]
		public virtual void AddRange(Point2DList l)
		{
		}

		[Token(Token = "0x6000489")]
		[Address(RVA = "0xD5CECC", Offset = "0xD5CECC", VA = "0xD5CECC", Slot = "22")]
		public virtual void AddRange(IEnumerator<Point2D> iter, WindingOrderType windingOrder)
		{
		}

		[Token(Token = "0x600048A")]
		[Address(RVA = "0xD5D280", Offset = "0xD5D280", VA = "0xD5D280", Slot = "23")]
		public virtual void Insert(int idx, Point2D item)
		{
		}

		[Token(Token = "0x600048B")]
		[Address(RVA = "0xD5D2B8", Offset = "0xD5D2B8", VA = "0xD5D2B8", Slot = "24")]
		public virtual bool Remove(Point2D p)
		{
			return default(bool);
		}

		[Token(Token = "0x600048C")]
		[Address(RVA = "0xD5D4CC", Offset = "0xD5D4CC", VA = "0xD5D4CC", Slot = "25")]
		public virtual void RemoveAt(int idx)
		{
		}

		[Token(Token = "0x600048D")]
		[Address(RVA = "0xD5D578", Offset = "0xD5D578", VA = "0xD5D578", Slot = "26")]
		public virtual void RemoveRange(int idxStart, int count)
		{
		}

		[Token(Token = "0x600048E")]
		[Address(RVA = "0xD5D634", Offset = "0xD5D634", VA = "0xD5D634", Slot = "15")]
		public bool Contains(Point2D p)
		{
			return default(bool);
		}

		[Token(Token = "0x600048F")]
		[Address(RVA = "0xD5D6B4", Offset = "0xD5D6B4", VA = "0xD5D6B4", Slot = "16")]
		public void CopyTo(Point2D[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6000490")]
		[Address(RVA = "0xD5D360", Offset = "0xD5D360", VA = "0xD5D360")]
		public void CalculateBounds()
		{
		}

		[Token(Token = "0x6000491")]
		[Address(RVA = "0xD4CE80", Offset = "0xD4CE80", VA = "0xD4CE80")]
		public double CalculateEpsilon()
		{
			return default(double);
		}

		[Token(Token = "0x6000492")]
		[Address(RVA = "0xD4CE50", Offset = "0xD4CE50", VA = "0xD4CE50")]
		public WindingOrderType CalculateWindingOrder()
		{
			return default(WindingOrderType);
		}

		[Token(Token = "0x6000493")]
		[Address(RVA = "0xD4F844", Offset = "0xD4F844", VA = "0xD4F844")]
		public int NextIndex(int index)
		{
			return default(int);
		}

		[Token(Token = "0x6000494")]
		[Address(RVA = "0xD5D99C", Offset = "0xD5D99C", VA = "0xD5D99C")]
		public int PreviousIndex(int index)
		{
			return default(int);
		}

		[Token(Token = "0x6000495")]
		[Address(RVA = "0xD5D818", Offset = "0xD5D818", VA = "0xD5D818")]
		public double GetSignedArea()
		{
			return default(double);
		}

		[Token(Token = "0x6000496")]
		[Address(RVA = "0xD5D9C0", Offset = "0xD5D9C0", VA = "0xD5D9C0")]
		public double GetArea()
		{
			return default(double);
		}

		[Token(Token = "0x6000497")]
		[Address(RVA = "0xD4FCD0", Offset = "0xD4FCD0", VA = "0xD4FCD0")]
		public Point2D GetCentroid()
		{
			return null;
		}

		[Token(Token = "0x6000498")]
		[Address(RVA = "0xD5DB54", Offset = "0xD5DB54", VA = "0xD5DB54")]
		public void Translate(Point2D vector)
		{
		}

		[Token(Token = "0x6000499")]
		[Address(RVA = "0xD5DBB0", Offset = "0xD5DBB0", VA = "0xD5DBB0")]
		public void Scale(Point2D value)
		{
		}

		[Token(Token = "0x600049A")]
		[Address(RVA = "0xD5DC0C", Offset = "0xD5DC0C", VA = "0xD5DC0C")]
		public void Rotate(double radians)
		{
		}

		[Token(Token = "0x600049B")]
		[Address(RVA = "0xD5DE60", Offset = "0xD5DE60", VA = "0xD5DE60")]
		public bool IsDegenerate()
		{
			return default(bool);
		}

		[Token(Token = "0x600049C")]
		[Address(RVA = "0xD5E08C", Offset = "0xD5E08C", VA = "0xD5E08C")]
		public bool IsConvex()
		{
			return default(bool);
		}

		[Token(Token = "0x600049D")]
		[Address(RVA = "0xD5E394", Offset = "0xD5E394", VA = "0xD5E394")]
		public bool IsSimple()
		{
			return default(bool);
		}

		[Token(Token = "0x600049E")]
		[Address(RVA = "0xD47B60", Offset = "0xD47B60", VA = "0xD47B60")]
		public PolygonError CheckPolygon()
		{
			return default(PolygonError);
		}

		[Token(Token = "0x600049F")]
		[Address(RVA = "0xD5E598", Offset = "0xD5E598", VA = "0xD5E598")]
		public static string GetErrorString(PolygonError error)
		{
			return null;
		}

		[Token(Token = "0x60004A0")]
		[Address(RVA = "0xD478C8", Offset = "0xD478C8", VA = "0xD478C8")]
		public void RemoveDuplicateNeighborPoints()
		{
		}

		[Token(Token = "0x60004A1")]
		[Address(RVA = "0xD5EDC0", Offset = "0xD5EDC0", VA = "0xD5EDC0")]
		public void Simplify()
		{
		}

		[Token(Token = "0x60004A2")]
		[Address(RVA = "0xD497E0", Offset = "0xD497E0", VA = "0xD497E0")]
		public void Simplify(double bias)
		{
		}

		[Token(Token = "0x60004A3")]
		[Address(RVA = "0xD5EDE0", Offset = "0xD5EDE0", VA = "0xD5EDE0")]
		public void MergeParallelEdges(double tolerance)
		{
		}

		[Token(Token = "0x60004A4")]
		[Address(RVA = "0xD5F664", Offset = "0xD5F664", VA = "0xD5F664")]
		public void ProjectToAxis(Point2D axis, out double min, out double max)
		{
		}
	}
	[Token(Token = "0x200008B")]
	public class Rect2D
	{
		[Token(Token = "0x40002BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private double mMinX;

		[Token(Token = "0x40002BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private double mMaxX;

		[Token(Token = "0x40002C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private double mMinY;

		[Token(Token = "0x40002C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private double mMaxY;

		[Token(Token = "0x170000A1")]
		public double MinX
		{
			[Token(Token = "0x60004A6")]
			[Address(RVA = "0x4931F0", Offset = "0x4931F0", VA = "0x4931F0")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60004A7")]
			[Address(RVA = "0x4931FC", Offset = "0x4931FC", VA = "0x4931FC")]
			set
			{
			}
		}

		[Token(Token = "0x170000A2")]
		public double MaxX
		{
			[Token(Token = "0x60004A8")]
			[Address(RVA = "0x49320C", Offset = "0x49320C", VA = "0x49320C")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60004A9")]
			[Address(RVA = "0x493218", Offset = "0x493218", VA = "0x493218")]
			set
			{
			}
		}

		[Token(Token = "0x170000A3")]
		public double MinY
		{
			[Token(Token = "0x60004AA")]
			[Address(RVA = "0x493228", Offset = "0x493228", VA = "0x493228")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60004AB")]
			[Address(RVA = "0x493234", Offset = "0x493234", VA = "0x493234")]
			set
			{
			}
		}

		[Token(Token = "0x170000A4")]
		public double MaxY
		{
			[Token(Token = "0x60004AC")]
			[Address(RVA = "0x493244", Offset = "0x493244", VA = "0x493244")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60004AD")]
			[Address(RVA = "0x493250", Offset = "0x493250", VA = "0x493250")]
			set
			{
			}
		}

		[Token(Token = "0x170000A5")]
		public double Left
		{
			[Token(Token = "0x60004AE")]
			[Address(RVA = "0x493260", Offset = "0x493260", VA = "0x493260")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60004AF")]
			[Address(RVA = "0x49326C", Offset = "0x49326C", VA = "0x49326C")]
			set
			{
			}
		}

		[Token(Token = "0x170000A6")]
		public double Right
		{
			[Token(Token = "0x60004B0")]
			[Address(RVA = "0x49327C", Offset = "0x49327C", VA = "0x49327C")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60004B1")]
			[Address(RVA = "0x493288", Offset = "0x493288", VA = "0x493288")]
			set
			{
			}
		}

		[Token(Token = "0x170000A7")]
		public double Top
		{
			[Token(Token = "0x60004B2")]
			[Address(RVA = "0x493298", Offset = "0x493298", VA = "0x493298")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60004B3")]
			[Address(RVA = "0x4932A4", Offset = "0x4932A4", VA = "0x4932A4")]
			set
			{
			}
		}

		[Token(Token = "0x170000A8")]
		public double Bottom
		{
			[Token(Token = "0x60004B4")]
			[Address(RVA = "0x4932B4", Offset = "0x4932B4", VA = "0x4932B4")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60004B5")]
			[Address(RVA = "0x4932C0", Offset = "0x4932C0", VA = "0x4932C0")]
			set
			{
			}
		}

		[Token(Token = "0x170000A9")]
		public double Width
		{
			[Token(Token = "0x60004B6")]
			[Address(RVA = "0x4932D0", Offset = "0x4932D0", VA = "0x4932D0")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x170000AA")]
		public double Height
		{
			[Token(Token = "0x60004B7")]
			[Address(RVA = "0x4932E4", Offset = "0x4932E4", VA = "0x4932E4")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x170000AB")]
		public bool Empty
		{
			[Token(Token = "0x60004B8")]
			[Address(RVA = "0x4932F8", Offset = "0x4932F8", VA = "0x4932F8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60004B9")]
		[Address(RVA = "0x49332C", Offset = "0x49332C", VA = "0x49332C")]
		public Rect2D()
		{
		}

		[Token(Token = "0x60004BA")]
		[Address(RVA = "0x493398", Offset = "0x493398", VA = "0x493398", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60004BB")]
		[Address(RVA = "0x4933A0", Offset = "0x4933A0", VA = "0x4933A0", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60004BC")]
		[Address(RVA = "0x493450", Offset = "0x493450", VA = "0x493450")]
		public bool Equals(Rect2D r)
		{
			return default(bool);
		}

		[Token(Token = "0x60004BD")]
		[Address(RVA = "0x4934FC", Offset = "0x4934FC", VA = "0x4934FC")]
		public bool Equals(Rect2D r, double epsilon)
		{
			return default(bool);
		}

		[Token(Token = "0x60004BE")]
		[Address(RVA = "0x49336C", Offset = "0x49336C", VA = "0x49336C")]
		public void Clear()
		{
		}

		[Token(Token = "0x60004BF")]
		[Address(RVA = "0x4936C4", Offset = "0x4936C4", VA = "0x4936C4")]
		public void Set(double xmin, double xmax, double ymin, double ymax)
		{
		}

		[Token(Token = "0x60004C0")]
		[Address(RVA = "0x493800", Offset = "0x493800", VA = "0x493800")]
		public void Set(Rect2D b)
		{
		}

		[Token(Token = "0x60004C1")]
		[Address(RVA = "0x493884", Offset = "0x493884", VA = "0x493884")]
		public void SetSize(double w, double h)
		{
		}

		[Token(Token = "0x60004C2")]
		[Address(RVA = "0x4938A8", Offset = "0x4938A8", VA = "0x4938A8")]
		public bool Contains(double x, double y)
		{
			return default(bool);
		}

		[Token(Token = "0x60004C3")]
		[Address(RVA = "0x493900", Offset = "0x493900", VA = "0x493900")]
		public bool Contains(Point2D p)
		{
			return default(bool);
		}

		[Token(Token = "0x60004C4")]
		[Address(RVA = "0x4939B8", Offset = "0x4939B8", VA = "0x4939B8")]
		public bool Contains(Rect2D r)
		{
			return default(bool);
		}

		[Token(Token = "0x60004C5")]
		[Address(RVA = "0x493A3C", Offset = "0x493A3C", VA = "0x493A3C")]
		public bool ContainsInclusive(double x, double y)
		{
			return default(bool);
		}

		[Token(Token = "0x60004C6")]
		[Address(RVA = "0x493A94", Offset = "0x493A94", VA = "0x493A94")]
		public bool ContainsInclusive(double x, double y, double epsilon)
		{
			return default(bool);
		}

		[Token(Token = "0x60004C7")]
		[Address(RVA = "0x493B00", Offset = "0x493B00", VA = "0x493B00")]
		public bool ContainsInclusive(Point2D p)
		{
			return default(bool);
		}

		[Token(Token = "0x60004C8")]
		[Address(RVA = "0x493BB8", Offset = "0x493BB8", VA = "0x493BB8")]
		public bool ContainsInclusive(Point2D p, double epsilon)
		{
			return default(bool);
		}

		[Token(Token = "0x60004C9")]
		[Address(RVA = "0x493C8C", Offset = "0x493C8C", VA = "0x493C8C")]
		public bool ContainsInclusive(Rect2D r)
		{
			return default(bool);
		}

		[Token(Token = "0x60004CA")]
		[Address(RVA = "0x493D10", Offset = "0x493D10", VA = "0x493D10")]
		public bool ContainsInclusive(Rect2D r, double epsilon)
		{
			return default(bool);
		}

		[Token(Token = "0x60004CB")]
		[Address(RVA = "0x493DA8", Offset = "0x493DA8", VA = "0x493DA8")]
		public bool Intersects(Rect2D r)
		{
			return default(bool);
		}

		[Token(Token = "0x60004CC")]
		[Address(RVA = "0x493E2C", Offset = "0x493E2C", VA = "0x493E2C")]
		public Point2D GetCenter()
		{
			return null;
		}

		[Token(Token = "0x60004CD")]
		[Address(RVA = "0x493EE0", Offset = "0x493EE0", VA = "0x493EE0")]
		public bool IsNormalized()
		{
			return default(bool);
		}

		[Token(Token = "0x60004CE")]
		[Address(RVA = "0x4936EC", Offset = "0x4936EC", VA = "0x4936EC")]
		public void Normalize()
		{
		}

		[Token(Token = "0x60004CF")]
		[Address(RVA = "0x493F18", Offset = "0x493F18", VA = "0x493F18")]
		public void AddPoint(Point2D p)
		{
		}

		[Token(Token = "0x60004D0")]
		[Address(RVA = "0x494080", Offset = "0x494080", VA = "0x494080")]
		public void Inflate(double w, double h)
		{
		}

		[Token(Token = "0x60004D1")]
		[Address(RVA = "0x4940AC", Offset = "0x4940AC", VA = "0x4940AC")]
		public void Inflate(double left, double top, double right, double bottom)
		{
		}

		[Token(Token = "0x60004D2")]
		[Address(RVA = "0x4940E4", Offset = "0x4940E4", VA = "0x4940E4")]
		public void Offset(double w, double h)
		{
		}

		[Token(Token = "0x60004D3")]
		[Address(RVA = "0x494110", Offset = "0x494110", VA = "0x494110")]
		public void SetPosition(double x, double y)
		{
		}

		[Token(Token = "0x60004D4")]
		[Address(RVA = "0x494144", Offset = "0x494144", VA = "0x494144")]
		public bool Intersection(Rect2D r1, Rect2D r2)
		{
			return default(bool);
		}

		[Token(Token = "0x60004D5")]
		[Address(RVA = "0x494308", Offset = "0x494308", VA = "0x494308")]
		public void Union(Rect2D r1, Rect2D r2)
		{
		}
	}
}
namespace RogoDigital
{
	[Token(Token = "0x200008C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x241050", Offset = "0x241050")]
	public class EyeController : BlendSystemUser
	{
		[Token(Token = "0x200028A")]
		public enum ControlMode
		{
			[Token(Token = "0x4000E92")]
			Classic,
			[Token(Token = "0x4000E93")]
			PoseBased
		}

		[Token(Token = "0x200028B")]
		public enum Axis
		{
			[Token(Token = "0x4000E95")]
			X_Positive,
			[Token(Token = "0x4000E96")]
			X_Negative,
			[Token(Token = "0x4000E97")]
			Y_Positive,
			[Token(Token = "0x4000E98")]
			Y_Negative,
			[Token(Token = "0x4000E99")]
			Z_Positive,
			[Token(Token = "0x4000E9A")]
			Z_Negative
		}

		[Token(Token = "0x200028C")]
		public class BoneShapeInfo
		{
			[Token(Token = "0x4000E9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private Transform bone;

			[Token(Token = "0x4000E9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private Vector3 m_storedPosition;

			[Token(Token = "0x4000E9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Quaternion m_storedRotation;

			[Token(Token = "0x4000E9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 targetPosition;

			[Token(Token = "0x4000E9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Quaternion targetRotation;

			[Token(Token = "0x170001C2")]
			public Vector3 storedPosition
			{
				[Token(Token = "0x60013FF")]
				[Address(RVA = "0x4B02E0", Offset = "0x4B02E0", VA = "0x4B02E0")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001400")]
				[Address(RVA = "0x4AE144", Offset = "0x4AE144", VA = "0x4AE144")]
				set
				{
				}
			}

			[Token(Token = "0x170001C3")]
			public Quaternion storedRotation
			{
				[Token(Token = "0x6001401")]
				[Address(RVA = "0x4B02F4", Offset = "0x4B02F4", VA = "0x4B02F4")]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6001402")]
				[Address(RVA = "0x4AE1A0", Offset = "0x4AE1A0", VA = "0x4AE1A0")]
				set
				{
				}
			}

			[Token(Token = "0x6001403")]
			[Address(RVA = "0x4A5D48", Offset = "0x4A5D48", VA = "0x4A5D48")]
			public BoneShapeInfo(BoneShape boneShape)
			{
			}
		}

		[Token(Token = "0x200028D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24180C", Offset = "0x24180C")]
		private sealed class <CloseEyes>d__58 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000EA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x4000EA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private object <>2__current;

			[Token(Token = "0x4000EA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public EyeController <>4__this;

			[Token(Token = "0x4000EA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private bool <end>5__2;

			[Token(Token = "0x170001C4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001407")]
				[Address(RVA = "0x4AF3B8", Offset = "0x4AF3B8", VA = "0x4AF3B8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001C5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001409")]
				[Address(RVA = "0x4AF448", Offset = "0x4AF448", VA = "0x4AF448", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001404")]
			[Address(RVA = "0x4AE208", Offset = "0x4AE208", VA = "0x4AE208")]
			[DebuggerHidden]
			public <CloseEyes>d__58(int <>1__state)
			{
			}

			[Token(Token = "0x6001405")]
			[Address(RVA = "0x4AE5C0", Offset = "0x4AE5C0", VA = "0x4AE5C0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001406")]
			[Address(RVA = "0x4AE5C4", Offset = "0x4AE5C4", VA = "0x4AE5C4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001408")]
			[Address(RVA = "0x4AF3C0", Offset = "0x4AF3C0", VA = "0x4AF3C0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200028E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24181C", Offset = "0x24181C")]
		private sealed class <OpenEyes>d__59 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000EA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x4000EA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private object <>2__current;

			[Token(Token = "0x4000EA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public EyeController <>4__this;

			[Token(Token = "0x4000EA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private bool <end>5__2;

			[Token(Token = "0x170001C6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600140D")]
				[Address(RVA = "0x4B0248", Offset = "0x4B0248", VA = "0x4B0248", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001C7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600140F")]
				[Address(RVA = "0x4B02D8", Offset = "0x4B02D8", VA = "0x4B02D8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600140A")]
			[Address(RVA = "0x4AE228", Offset = "0x4AE228", VA = "0x4AE228")]
			[DebuggerHidden]
			public <OpenEyes>d__59(int <>1__state)
			{
			}

			[Token(Token = "0x600140B")]
			[Address(RVA = "0x4AF450", Offset = "0x4AF450", VA = "0x4AF450", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600140C")]
			[Address(RVA = "0x4AF454", Offset = "0x4AF454", VA = "0x4AF454", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600140E")]
			[Address(RVA = "0x4B0250", Offset = "0x4B0250", VA = "0x4B0250", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40002C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool blinkingEnabled;

		[Token(Token = "0x40002C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ControlMode blinkingControlMode;

		[Token(Token = "0x40002C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Shape blinkingShape;

		[Token(Token = "0x40002C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x24274C", Offset = "0x24274C")]
		public int leftEyeBlinkBlendable;

		[Token(Token = "0x40002C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x242790", Offset = "0x242790")]
		public int rightEyeBlinkBlendable;

		[Token(Token = "0x40002C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float minimumBlinkGap;

		[Token(Token = "0x40002C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maximumBlinkGap;

		[Token(Token = "0x40002C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x2427D4", Offset = "0x2427D4")]
		public float blinkDuration;

		[Token(Token = "0x40002CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool randomLookingEnabled;

		[Token(Token = "0x40002CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public ControlMode lookingControlMode;

		[Token(Token = "0x40002CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shape lookingUpShape;

		[Token(Token = "0x40002CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Shape lookingDownShape;

		[Token(Token = "0x40002CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shape lookingLeftShape;

		[Token(Token = "0x40002CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Shape lookingRightShape;

		[Token(Token = "0x40002D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x24280C", Offset = "0x24280C")]
		private Transform _leftEyeLookAtBone;

		[Token(Token = "0x40002D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x242860", Offset = "0x242860")]
		private Transform _rightEyeLookAtBone;

		[Token(Token = "0x40002D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector2 eyeRotationRangeX;

		[Token(Token = "0x40002D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector2 eyeRotationRangeY;

		[Token(Token = "0x40002D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 eyeLookOffset;

		[Token(Token = "0x40002D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Axis eyeForwardAxis;

		[Token(Token = "0x40002D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float eyeTurnSpeed;

		[Token(Token = "0x40002D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float minimumChangeDirectionGap;

		[Token(Token = "0x40002D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float maximumChangeDirectionGap;

		[Token(Token = "0x40002D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public bool targetEnabled;

		[Token(Token = "0x40002DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
		public bool autoTarget;

		[Token(Token = "0x40002DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public string autoTargetTag;

		[Token(Token = "0x40002DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float autoTargetDistance;

		[Token(Token = "0x40002DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform viewTarget;

		[Token(Token = "0x40002DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float targetWeight;

		[Token(Token = "0x40002DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool boneUpdateAnimation;

		[Token(Token = "0x40002E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float blinkTimer;

		[Token(Token = "0x40002E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool blinking;

		[Token(Token = "0x40002E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		private bool _keepEyesClosed;

		[Token(Token = "0x40002E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9A")]
		private bool _asyncBlending;

		[Token(Token = "0x40002E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Transform leftEyeDummy;

		[Token(Token = "0x40002E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Transform rightEyeDummy;

		[Token(Token = "0x40002E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Quaternion leftRotation;

		[Token(Token = "0x40002E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private Quaternion rightRotation;

		[Token(Token = "0x40002E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Vector3[] axisOffsets;

		[Token(Token = "0x40002E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float lookTimer;

		[Token(Token = "0x40002EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private Quaternion randomAngle;

		[Token(Token = "0x40002EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private Vector2 randomBlend;

		[Token(Token = "0x40002EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Transform target;

		[Token(Token = "0x40002ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Quaternion leftTargetAngle;

		[Token(Token = "0x40002EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Quaternion rightTargetAngle;

		[Token(Token = "0x40002EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Transform[] markedTargets;

		[Token(Token = "0x40002F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private Dictionary<Transform, BoneShapeInfo> boneShapes;

		[Token(Token = "0x170000AC")]
		public bool keepEyesClosed
		{
			[Token(Token = "0x60004D6")]
			[Address(RVA = "0x4A4574", Offset = "0x4A4574", VA = "0x4A4574")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60004D7")]
			[Address(RVA = "0x4A457C", Offset = "0x4A457C", VA = "0x4A457C")]
			set
			{
			}
		}

		[Token(Token = "0x170000AD")]
		public Transform LeftEyeLookAtBone
		{
			[Token(Token = "0x60004D8")]
			[Address(RVA = "0x4A46F8", Offset = "0x4A46F8", VA = "0x4A46F8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60004D9")]
			[Address(RVA = "0x4A4700", Offset = "0x4A4700", VA = "0x4A4700")]
			set
			{
			}
		}

		[Token(Token = "0x170000AE")]
		public Transform RightEyeLookAtBone
		{
			[Token(Token = "0x60004DA")]
			[Address(RVA = "0x4A4E70", Offset = "0x4A4E70", VA = "0x4A4E70")]
			get
			{
				return null;
			}
			[Token(Token = "0x60004DB")]
			[Address(RVA = "0x4A4E78", Offset = "0x4A4E78", VA = "0x4A4E78")]
			set
			{
			}
		}

		[Token(Token = "0x60004DC")]
		[Address(RVA = "0x4A4F30", Offset = "0x4A4F30", VA = "0x4A4F30")]
		private void Start()
		{
		}

		[Token(Token = "0x60004DD")]
		[Address(RVA = "0x4A5E60", Offset = "0x4A5E60", VA = "0x4A5E60")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60004DE")]
		[Address(RVA = "0x4A45E0", Offset = "0x4A45E0", VA = "0x4A45E0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x248B90", Offset = "0x248B90")]
		private IEnumerator CloseEyes()
		{
			return null;
		}

		[Token(Token = "0x60004DF")]
		[Address(RVA = "0x4A466C", Offset = "0x4A466C", VA = "0x4A466C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x248C08", Offset = "0x248C08")]
		private IEnumerator OpenEyes()
		{
			return null;
		}

		[Token(Token = "0x60004E0")]
		[Address(RVA = "0x4A47B8", Offset = "0x4A47B8", VA = "0x4A47B8")]
		private void FixDummyHierarchy()
		{
		}

		[Token(Token = "0x60004E1")]
		[Address(RVA = "0x4A5BE8", Offset = "0x4A5BE8", VA = "0x4A5BE8")]
		public void FindTargets()
		{
		}

		[Token(Token = "0x60004E2")]
		[Address(RVA = "0x4AE020", Offset = "0x4AE020", VA = "0x4AE020")]
		public static Vector3 Vector3LerpAngle(Vector3 a, Vector3 b, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004E3")]
		[Address(RVA = "0x4AE248", Offset = "0x4AE248", VA = "0x4AE248")]
		public void SetLookAtAmount(float amount)
		{
		}

		[Token(Token = "0x60004E4")]
		[Address(RVA = "0x4AE250", Offset = "0x4AE250", VA = "0x4AE250")]
		public EyeController()
		{
		}
	}
}
namespace RogoDigital.Lipsync
{
	[Token(Token = "0x200008D")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x241098", Offset = "0x241098")]
	public class AdvancedBlendshapeBlendSystem : BlendSystem
	{
		[Token(Token = "0x40002F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private BlendshapeManager manager;

		[Token(Token = "0x60004E5")]
		[Address(RVA = "0x4B0304", Offset = "0x4B0304", VA = "0x4B0304", Slot = "4")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x60004E6")]
		[Address(RVA = "0x4B05A8", Offset = "0x4B05A8", VA = "0x4B05A8", Slot = "9")]
		public override string[] GetBlendables()
		{
			return null;
		}

		[Token(Token = "0x60004E7")]
		[Address(RVA = "0x4B0AF0", Offset = "0x4B0AF0", VA = "0x4B0AF0", Slot = "5")]
		public override void SetBlendableValue(int blendable, float value)
		{
		}

		[Token(Token = "0x60004E8")]
		[Address(RVA = "0x4B0E80", Offset = "0x4B0E80", VA = "0x4B0E80")]
		public AdvancedBlendshapeBlendSystem()
		{
		}
	}
	[Token(Token = "0x200008E")]
	public class BlendshapeBlendSystem : BlendSystem
	{
		[Token(Token = "0x40002F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public SkinnedMeshRenderer characterMesh;

		[Token(Token = "0x40002F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SkinnedMeshRenderer[] optionalOtherMeshes;

		[Token(Token = "0x40002F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool wireframeVisible;

		[Token(Token = "0x60004E9")]
		[Address(RVA = "0x4B1C4C", Offset = "0x4B1C4C", VA = "0x4B1C4C", Slot = "4")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x60004EA")]
		[Address(RVA = "0x4B1D20", Offset = "0x4B1D20", VA = "0x4B1D20", Slot = "5")]
		public override void SetBlendableValue(int blendable, float value)
		{
		}

		[Token(Token = "0x60004EB")]
		[Address(RVA = "0x4B1EBC", Offset = "0x4B1EBC", VA = "0x4B1EBC", Slot = "9")]
		public override string[] GetBlendables()
		{
			return null;
		}

		[Token(Token = "0x60004EC")]
		[Address(RVA = "0x4B2138", Offset = "0x4B2138", VA = "0x4B2138", Slot = "6")]
		public override void OnVariableChanged()
		{
		}

		[Token(Token = "0x60004ED")]
		[Address(RVA = "0x4B21C8", Offset = "0x4B21C8", VA = "0x4B21C8")]
		[AttributeAttribute(Name = "BlendSystemButton", RVA = "0x248C80", Offset = "0x248C80")]
		public void ToggleWireframe()
		{
		}

		[Token(Token = "0x60004EE")]
		[Address(RVA = "0x4B2264", Offset = "0x4B2264", VA = "0x4B2264")]
		public BlendshapeBlendSystem()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200008F")]
	public class BlendshapeManager : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200028F")]
		public struct AdvancedBlendShape
		{
			[Token(Token = "0x4000EA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string name;

			[Token(Token = "0x4000EA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public BlendShapeMapping[] mappings;
		}

		[Serializable]
		[Token(Token = "0x2000290")]
		public struct BlendShapeMapping
		{
			[Token(Token = "0x4000EAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public SkinnedMeshRenderer skinnedMeshRenderer;

			[Token(Token = "0x4000EAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int blendShapeIndex;
		}

		[Token(Token = "0x40002F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x2428C4", Offset = "0x2428C4")]
		public AdvancedBlendShape[] blendShapes;

		[Token(Token = "0x40002F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x2428D4", Offset = "0x2428D4")]
		public AdvancedBlendshapeBlendSystem blendSystem;

		[Token(Token = "0x60004EF")]
		[Address(RVA = "0x4B2270", Offset = "0x4B2270", VA = "0x4B2270")]
		public BlendshapeManager()
		{
		}
	}
	[Token(Token = "0x2000090")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x241110", Offset = "0x241110")]
	public class SpriteBlendSystem : BlendSystem
	{
		[Token(Token = "0x40002F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private SpriteManager manager;

		[Token(Token = "0x60004F0")]
		[Address(RVA = "0xC4B204", Offset = "0xC4B204", VA = "0xC4B204", Slot = "4")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x60004F1")]
		[Address(RVA = "0xC4B430", Offset = "0xC4B430", VA = "0xC4B430", Slot = "5")]
		public override void SetBlendableValue(int blendable, float value)
		{
		}

		[Token(Token = "0x60004F2")]
		[Address(RVA = "0xC4B838", Offset = "0xC4B838", VA = "0xC4B838", Slot = "9")]
		public override string[] GetBlendables()
		{
			return null;
		}

		[Token(Token = "0x60004F3")]
		[Address(RVA = "0xC4BEBC", Offset = "0xC4BEBC", VA = "0xC4BEBC", Slot = "6")]
		public override void OnVariableChanged()
		{
		}

		[Token(Token = "0x60004F4")]
		[Address(RVA = "0xC4BEC8", Offset = "0xC4BEC8", VA = "0xC4BEC8")]
		[AttributeAttribute(Name = "BlendSystemButton", RVA = "0x248CC0", Offset = "0x248CC0")]
		public void ShowHelp()
		{
		}

		[Token(Token = "0x60004F5")]
		[Address(RVA = "0xC4BF28", Offset = "0xC4BF28", VA = "0xC4BF28")]
		public SpriteBlendSystem()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000091")]
	public class SpriteManager : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000291")]
		public class SpriteGroup
		{
			[Token(Token = "0x4000EAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[SerializeField]
			public string groupName;

			[Token(Token = "0x4000EAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[SerializeField]
			public SpriteRenderer spriteRenderer;

			[Token(Token = "0x4000EAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			public Sprite defaultSprite;

			[Token(Token = "0x6001410")]
			[Address(RVA = "0xC4BFF0", Offset = "0xC4BFF0", VA = "0xC4BFF0")]
			public SpriteGroup(string groupName)
			{
			}
		}

		[Token(Token = "0x40002F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		public List<Sprite> availableSprites;

		[Token(Token = "0x40002F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public List<SpriteGroup> groups;

		[Token(Token = "0x40002FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public SpriteBlendSystem blendSystem;

		[Token(Token = "0x60004F6")]
		[Address(RVA = "0xC4BF30", Offset = "0xC4BF30", VA = "0xC4BF30")]
		public SpriteManager()
		{
		}
	}
	[Token(Token = "0x2000092")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x241188", Offset = "0x241188")]
	public class TextureOffsetBlendSystem : BlendSystem
	{
		[Token(Token = "0x40002FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private TextureOffsetManager manager;

		[Token(Token = "0x40002FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<int, int> groupLookup;

		[Token(Token = "0x40002FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Dictionary<string, int> reverseGroupLookup;

		[Token(Token = "0x60004F7")]
		[Address(RVA = "0xC4C410", Offset = "0xC4C410", VA = "0xC4C410", Slot = "4")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x60004F8")]
		[Address(RVA = "0xC4C644", Offset = "0xC4C644", VA = "0xC4C644")]
		private void CacheGroups()
		{
		}

		[Token(Token = "0x60004F9")]
		[Address(RVA = "0xC4CBA4", Offset = "0xC4CBA4", VA = "0xC4CBA4", Slot = "5")]
		public override void SetBlendableValue(int blendable, float value)
		{
		}

		[Token(Token = "0x60004FA")]
		[Address(RVA = "0xC4D138", Offset = "0xC4D138", VA = "0xC4D138", Slot = "9")]
		public override string[] GetBlendables()
		{
			return null;
		}

		[Token(Token = "0x60004FB")]
		[Address(RVA = "0xC4D848", Offset = "0xC4D848", VA = "0xC4D848", Slot = "6")]
		public override void OnVariableChanged()
		{
		}

		[Token(Token = "0x60004FC")]
		[Address(RVA = "0xC4D854", Offset = "0xC4D854", VA = "0xC4D854")]
		public TextureOffsetBlendSystem()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000093")]
	public class TextureOffsetManager : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000292")]
		public class MaterialTextureGroup
		{
			[Token(Token = "0x4000EAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[SerializeField]
			public string displayName;

			[Token(Token = "0x4000EB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x247670", Offset = "0x247670")]
			[SerializeField]
			public Material material;

			[Token(Token = "0x4000EB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			public string texturePropertyName;

			[Token(Token = "0x4000EB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x2476B0", Offset = "0x2476B0")]
			[SerializeField]
			public Texture2D defaultTexture;

			[Token(Token = "0x4000EB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			public Vector2 defaultTextureOffset;

			[Token(Token = "0x4000EB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			public Vector2 defaultTextureScale;

			[Token(Token = "0x4000EB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x247700", Offset = "0x247700")]
			[SerializeField]
			public TextureSetting[] textureSettings;

			[Token(Token = "0x6001411")]
			[Address(RVA = "0xC4D8D0", Offset = "0xC4D8D0", VA = "0xC4D8D0")]
			public MaterialTextureGroup()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000293")]
		public class TextureSetting
		{
			[Token(Token = "0x4000EB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[SerializeField]
			public string displayName;

			[Token(Token = "0x4000EB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x247740", Offset = "0x247740")]
			[SerializeField]
			public Texture2D texture;

			[Token(Token = "0x4000EB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			public Vector2 textureOffset;

			[Token(Token = "0x4000EB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			public Vector2 textureScale;

			[Token(Token = "0x6001412")]
			[Address(RVA = "0xC4D974", Offset = "0xC4D974", VA = "0xC4D974")]
			public TextureSetting()
			{
			}
		}

		[Token(Token = "0x40002FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		public MaterialTextureGroup[] materialGroups;

		[Token(Token = "0x40002FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x242934", Offset = "0x242934")]
		public TextureOffsetBlendSystem blendSystem;

		[Token(Token = "0x60004FD")]
		[Address(RVA = "0xC4D85C", Offset = "0xC4D85C", VA = "0xC4D85C")]
		public TextureOffsetManager()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000094")]
	public class Blendable
	{
		[Token(Token = "0x4000300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int number;

		[Token(Token = "0x4000301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float currentWeight;

		[Token(Token = "0x60004FE")]
		[Address(RVA = "0x4B16A4", Offset = "0x4B16A4", VA = "0x4B16A4")]
		public Blendable(int number, float currentWeight)
		{
		}
	}
	[Token(Token = "0x2000095")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x241200", Offset = "0x241200")]
	public class BlendshapePreset : ScriptableObject
	{
		[Token(Token = "0x4000302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		public List<PhonemeShape> phonemeShapes;

		[Token(Token = "0x4000303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public List<EmotionShape> emotionShapes;

		[Token(Token = "0x60004FF")]
		[Address(RVA = "0x4B22E4", Offset = "0x4B22E4", VA = "0x4B22E4")]
		public BlendshapePreset()
		{
		}
	}
	[Token(Token = "0x2000096")]
	[AttributeAttribute(Name = "ExecuteInEditMode", RVA = "0x241234", Offset = "0x241234")]
	public class BlendSystem : MonoBehaviour
	{
		[Token(Token = "0x2000294")]
		public delegate void BlendSystemGenericDelegate();

		[NonSerialized]
		[Token(Token = "0x4000304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string blendableDisplayName;

		[NonSerialized]
		[Token(Token = "0x4000305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string blendableDisplayNamePlural;

		[NonSerialized]
		[Token(Token = "0x4000306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public string noBlendablesMessage;

		[NonSerialized]
		[Token(Token = "0x4000307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string notReadyMessage;

		[NonSerialized]
		[Token(Token = "0x4000308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float blendRangeLow;

		[NonSerialized]
		[Token(Token = "0x4000309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float blendRangeHigh;

		[NonSerialized]
		[Token(Token = "0x400030A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool allowResyncing;

		[Token(Token = "0x400030B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool isReady;

		[Token(Token = "0x400030C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BlendSystemUser[] users;

		[Token(Token = "0x400030D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public BlendSystemGenericDelegate onBlendablesChanged;

		[Token(Token = "0x400030E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x242964", Offset = "0x242964")]
		private List<Blendable> _blendables;

		[Token(Token = "0x170000AF")]
		public int blendableCount
		{
			[Token(Token = "0x6000500")]
			[Address(RVA = "0x4B0954", Offset = "0x4B0954", VA = "0x4B0954")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000501")]
		[Address(RVA = "0x4B0564", Offset = "0x4B0564", VA = "0x4B0564", Slot = "4")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000502")]
		[Address(RVA = "0x4B0F54", Offset = "0x4B0F54", VA = "0x4B0F54")]
		public void Register(BlendSystemUser user)
		{
		}

		[Token(Token = "0x6000503")]
		[Address(RVA = "0x4B13E0", Offset = "0x4B13E0", VA = "0x4B13E0")]
		public void Unregister(BlendSystemUser user)
		{
		}

		[Token(Token = "0x6000504")]
		[Address(RVA = "0x4B1684", Offset = "0x4B1684", VA = "0x4B1684", Slot = "5")]
		public virtual void SetBlendableValue(int blendable, float value)
		{
		}

		[Token(Token = "0x6000505")]
		[Address(RVA = "0x4ADF48", Offset = "0x4ADF48", VA = "0x4ADF48")]
		public float GetBlendableValue(int blendable)
		{
			return default(float);
		}

		[Token(Token = "0x6000506")]
		[Address(RVA = "0x4B1688", Offset = "0x4B1688", VA = "0x4B1688", Slot = "6")]
		public virtual void OnVariableChanged()
		{
		}

		[Token(Token = "0x6000507")]
		[Address(RVA = "0x4B168C", Offset = "0x4B168C", VA = "0x4B168C", Slot = "7")]
		public virtual void OnBlendSystemAdded()
		{
		}

		[Token(Token = "0x6000508")]
		[Address(RVA = "0x4B1690", Offset = "0x4B1690", VA = "0x4B1690", Slot = "8")]
		public virtual void OnBlendSystemRemoved()
		{
		}

		[Token(Token = "0x6000509")]
		[Address(RVA = "0x4B1694", Offset = "0x4B1694", VA = "0x4B1694", Slot = "9")]
		public virtual string[] GetBlendables()
		{
			return null;
		}

		[Token(Token = "0x600050A")]
		[Address(RVA = "0x4B169C", Offset = "0x4B169C", VA = "0x4B169C", Slot = "10")]
		public virtual void OnBlendableAddedToPose(int blendable)
		{
		}

		[Token(Token = "0x600050B")]
		[Address(RVA = "0x4B16A0", Offset = "0x4B16A0", VA = "0x4B16A0", Slot = "11")]
		public virtual void OnBlendableRemovedFromPose(int blendable)
		{
		}

		[Token(Token = "0x600050C")]
		[Address(RVA = "0x4B09F8", Offset = "0x4B09F8", VA = "0x4B09F8")]
		public void AddBlendable(int blendable, float currentValue)
		{
		}

		[Token(Token = "0x600050D")]
		[Address(RVA = "0x4B16CC", Offset = "0x4B16CC", VA = "0x4B16CC")]
		public void ClearBlendables()
		{
		}

		[Token(Token = "0x600050E")]
		[Address(RVA = "0x4B0D4C", Offset = "0x4B0D4C", VA = "0x4B0D4C")]
		public void SetInternalValue(int blendable, float value)
		{
		}

		[Token(Token = "0x600050F")]
		[Address(RVA = "0x4B0E84", Offset = "0x4B0E84", VA = "0x4B0E84")]
		public BlendSystem()
		{
		}
	}
	[Token(Token = "0x2000097")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x241244", Offset = "0x241244")]
	public class BlendSystemButton : Attribute
	{
		[Token(Token = "0x2000295")]
		public struct Reference
		{
			[Token(Token = "0x4000EBA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string displayName;

			[Token(Token = "0x4000EBB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public MethodInfo method;

			[Token(Token = "0x6001417")]
			[Address(RVA = "0x2C13FC", Offset = "0x2C13FC", VA = "0x2C13FC")]
			public Reference(string displayName, MethodInfo method)
			{
			}
		}

		[Token(Token = "0x400030F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string displayName;

		[Token(Token = "0x6000510")]
		[Address(RVA = "0x4B19DC", Offset = "0x4B19DC", VA = "0x4B19DC")]
		public BlendSystemButton(string displayName)
		{
		}
	}
	[Token(Token = "0x2000098")]
	public class BlendSystemUser : MonoBehaviour
	{
		[Token(Token = "0x4000310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public BlendSystem blendSystem;

		[Token(Token = "0x6000511")]
		[Address(RVA = "0x4B1A04", Offset = "0x4B1A04", VA = "0x4B1A04")]
		protected void OnDestroy()
		{
		}

		[Token(Token = "0x6000512")]
		[Address(RVA = "0x4B1A34", Offset = "0x4B1A34", VA = "0x4B1A34")]
		protected void CleanUpBlendSystems()
		{
		}

		[Token(Token = "0x6000513")]
		[Address(RVA = "0x4AE5B8", Offset = "0x4AE5B8", VA = "0x4AE5B8")]
		public BlendSystemUser()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000099")]
	public class BoneShape
	{
		[Token(Token = "0x4000311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[SerializeField]
		public Transform bone;

		[Token(Token = "0x4000312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		public Vector3 endPosition;

		[Token(Token = "0x4000313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Vector3 endRotation;

		[Token(Token = "0x4000314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		public Vector3 endScale;

		[Token(Token = "0x4000315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		public bool lockPosition;

		[Token(Token = "0x4000316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[SerializeField]
		public bool lockRotation;

		[Token(Token = "0x4000317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 neutralPosition;

		[Token(Token = "0x4000318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 neutralRotation;

		[Token(Token = "0x4000319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Vector3 neutralScale;

		[Token(Token = "0x6000514")]
		[Address(RVA = "0x4B22EC", Offset = "0x4B22EC", VA = "0x4B22EC")]
		public void SetNeutral()
		{
		}

		[Token(Token = "0x6000515")]
		[Address(RVA = "0x4B2420", Offset = "0x4B2420", VA = "0x4B2420")]
		public BoneShape(Transform bone, Vector3 endPosition, Vector3 endRotation, Vector3 endScale)
		{
		}

		[Token(Token = "0x6000516")]
		[Address(RVA = "0x4B252C", Offset = "0x4B252C", VA = "0x4B252C")]
		public BoneShape(Transform bone, Vector3 endPosition, Vector3 endRotation)
		{
		}

		[Token(Token = "0x6000517")]
		[Address(RVA = "0x4B2650", Offset = "0x4B2650", VA = "0x4B2650")]
		public BoneShape()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200009A")]
	public class EmotionMarker
	{
		[Token(Token = "0x400031A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[SerializeField]
		public string emotion;

		[Token(Token = "0x400031B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		public bool isMixer;

		[Token(Token = "0x400031C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public EmotionMixer mixer;

		[Token(Token = "0x400031D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		public float startTime;

		[Token(Token = "0x400031E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public float endTime;

		[Token(Token = "0x400031F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		public float blendInTime;

		[Token(Token = "0x4000320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public float blendOutTime;

		[Token(Token = "0x4000321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		public bool blendToMarker;

		[Token(Token = "0x4000322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		[SerializeField]
		public bool blendFromMarker;

		[Token(Token = "0x4000323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		[SerializeField]
		public bool customBlendIn;

		[Token(Token = "0x4000324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
		[SerializeField]
		public bool customBlendOut;

		[Token(Token = "0x4000325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public float intensity;

		[Token(Token = "0x4000326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		public bool continuousVariation;

		[Token(Token = "0x4000327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		public float variationFrequency;

		[Token(Token = "0x4000328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		public float intensityVariation;

		[Token(Token = "0x4000329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		public float blendableVariation;

		[Token(Token = "0x400032A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		public float bonePositionVariation;

		[Token(Token = "0x400032B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		public float boneRotationVariation;

		[Token(Token = "0x400032C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool invalid;

		[Token(Token = "0x6000518")]
		[Address(RVA = "0x4B2710", Offset = "0x4B2710", VA = "0x4B2710")]
		public EmotionMarker(string emotion, float startTime, float endTime, float blendInTime, float blendOutTime, bool blendToMarker, bool blendFromMarker, bool customBlendIn, bool customBlendOut)
		{
		}

		[Token(Token = "0x6000519")]
		[Address(RVA = "0x4B27A0", Offset = "0x4B27A0", VA = "0x4B27A0")]
		public EmotionMarker(EmotionMixer mixer, float startTime, float endTime, float blendInTime, float blendOutTime, bool blendToMarker, bool blendFromMarker, bool customBlendIn, bool customBlendOut)
		{
		}

		[Token(Token = "0x600051A")]
		[Address(RVA = "0x4B2840", Offset = "0x4B2840", VA = "0x4B2840")]
		public EmotionMarker(string emotion, float startTime, float endTime, float blendInTime, float blendOutTime, bool blendToMarker, bool blendFromMarker, bool customBlendIn, bool customBlendOut, float intensity)
		{
		}

		[Token(Token = "0x600051B")]
		[Address(RVA = "0x4B28E0", Offset = "0x4B28E0", VA = "0x4B28E0")]
		public EmotionMarker CreateCopy()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x200009B")]
	public class EmotionMixer
	{
		[Serializable]
		[Token(Token = "0x2000296")]
		public struct EmotionComponent
		{
			[Token(Token = "0x4000EBC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string emotion;

			[Token(Token = "0x4000EBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float weight;

			[Token(Token = "0x6001418")]
			[Address(RVA = "0x2C1530", Offset = "0x2C1530", VA = "0x2C1530")]
			public EmotionComponent(string emotion, float weight)
			{
			}
		}

		[Token(Token = "0x2000297")]
		public enum MixingMode
		{
			[Token(Token = "0x4000EBF")]
			Normal,
			[Token(Token = "0x4000EC0")]
			Additive
		}

		[Token(Token = "0x400032D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[SerializeField]
		public List<EmotionComponent> emotions;

		[Token(Token = "0x400032E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		public MixingMode mixingMode;

		[Token(Token = "0x400032F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Color displayColor;

		[Token(Token = "0x600051C")]
		[Address(RVA = "0x4B2A88", Offset = "0x4B2A88", VA = "0x4B2A88")]
		public EmotionMixer()
		{
		}

		[Token(Token = "0x600051D")]
		[Address(RVA = "0x4B2B54", Offset = "0x4B2B54", VA = "0x4B2B54")]
		public EmotionShape GetShape(LipSync character)
		{
			return null;
		}

		[Token(Token = "0x600051E")]
		[Address(RVA = "0x4B38D4", Offset = "0x4B38D4", VA = "0x4B38D4")]
		public void SetWeight(int index, float weight)
		{
		}

		[Token(Token = "0x600051F")]
		[Address(RVA = "0x4B38F0", Offset = "0x4B38F0", VA = "0x4B38F0")]
		public void SetWeight(int index, float weight, bool bypassMinChecks)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200009C")]
	public class EmotionShape : Shape
	{
		[Token(Token = "0x4000330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		public string emotion;

		[Token(Token = "0x6000520")]
		[Address(RVA = "0x4B37D8", Offset = "0x4B37D8", VA = "0x4B37D8")]
		public EmotionShape(string eEmotion)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200009D")]
	public class GestureMarker
	{
		[Token(Token = "0x4000331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[SerializeField]
		public string gesture;

		[Token(Token = "0x4000332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		public float time;

		[Token(Token = "0x6000521")]
		[Address(RVA = "0x4B3DDC", Offset = "0x4B3DDC", VA = "0x4B3DDC")]
		public GestureMarker(string gesture, float time)
		{
		}

		[Token(Token = "0x6000522")]
		[Address(RVA = "0x4B3E04", Offset = "0x4B3E04", VA = "0x4B3E04")]
		public GestureMarker CreateCopy()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x200009E")]
	public class LipSyncData : ScriptableObject
	{
		[Token(Token = "0x4000333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public AudioClip clip;

		[Token(Token = "0x4000334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PhonemeMarker[] phonemeData;

		[Token(Token = "0x4000335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public EmotionMarker[] emotionData;

		[Token(Token = "0x4000336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GestureMarker[] gestureData;

		[Token(Token = "0x4000337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float version;

		[Token(Token = "0x4000338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float length;

		[Token(Token = "0x4000339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public string transcript;

		[Token(Token = "0x400033A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve[] phonemePoseCurves;

		[Token(Token = "0x400033B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public AnimationCurve[] emotionPoseCurves;

		[Token(Token = "0x6000523")]
		[Address(RVA = "0xC46BD4", Offset = "0xC46BD4", VA = "0xC46BD4")]
		public void GenerateCurves(int phonemeCount, int emotionCount)
		{
		}

		[Token(Token = "0x6000524")]
		[Address(RVA = "0xC472C4", Offset = "0xC472C4", VA = "0xC472C4")]
		public static explicit operator LipSyncData(TemporaryLipSyncData data)
		{
			return null;
		}

		[Token(Token = "0x6000525")]
		[Address(RVA = "0xC477D8", Offset = "0xC477D8", VA = "0xC477D8")]
		public LipSyncData()
		{
		}
	}
	[Token(Token = "0x200009F")]
	public static class LipSyncExtensions
	{
		[Token(Token = "0x6000526")]
		[Address(RVA = "0xC4785C", Offset = "0xC4785C", VA = "0xC4785C")]
		public static Transform FindDeepChild(this Transform aParent, string aName)
		{
			return null;
		}

		[Token(Token = "0x6000527")]
		[Address(RVA = "0xC47C70", Offset = "0xC47C70", VA = "0xC47C70")]
		public static Vector3 InverseTransformEulerAngle(this Transform transform, Vector3 eulerAngle)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000528")]
		[Address(RVA = "0xC47DD0", Offset = "0xC47DD0", VA = "0xC47DD0")]
		public static Vector3 TransformEulerAngle(this Transform transform, Vector3 eulerAngle)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000529")]
		[Address(RVA = "0xC47D54", Offset = "0xC47D54", VA = "0xC47D54")]
		public static Vector3 ToPositiveEuler(this Vector3 eulerAngle)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600052A")]
		[Address(RVA = "0xC47F50", Offset = "0xC47F50", VA = "0xC47F50")]
		public static Vector3 ToNegativeEuler(this Vector3 eulerAngle)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600052B")]
		[Address(RVA = "0xC47EB4", Offset = "0xC47EB4", VA = "0xC47EB4")]
		private static Vector3 ClampRange(Vector3 eulerAngle)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600052C")]
		[Address(RVA = "0xC47FD4", Offset = "0xC47FD4", VA = "0xC47FD4")]
		public static EmotionMarker PreviousMarker(this List<EmotionMarker> list, EmotionMarker current)
		{
			return null;
		}

		[Token(Token = "0x600052D")]
		[Address(RVA = "0xC48094", Offset = "0xC48094", VA = "0xC48094")]
		public static EmotionMarker NextMarker(this List<EmotionMarker> list, EmotionMarker current)
		{
			return null;
		}
	}
	[Token(Token = "0x20000A0")]
	public class LipSyncPreset : ScriptableObject
	{
		[Serializable]
		[Token(Token = "0x2000298")]
		public struct PhonemeShapeInfo
		{
			[Token(Token = "0x4000EC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[SerializeField]
			public string phonemeName;

			[Token(Token = "0x4000EC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[SerializeField]
			[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x2477A0", Offset = "0x2477A0")]
			public Phoneme phoneme;

			[Token(Token = "0x4000EC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[SerializeField]
			public BlendableInfo[] blendables;

			[Token(Token = "0x4000EC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[SerializeField]
			public BoneInfo[] bones;
		}

		[Serializable]
		[Token(Token = "0x2000299")]
		public struct EmotionShapeInfo
		{
			[Token(Token = "0x4000EC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[SerializeField]
			public string emotion;

			[Token(Token = "0x4000EC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[SerializeField]
			public BlendableInfo[] blendables;

			[Token(Token = "0x4000EC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[SerializeField]
			public BoneInfo[] bones;
		}

		[Serializable]
		[Token(Token = "0x200029A")]
		public struct BlendableInfo
		{
			[Token(Token = "0x4000EC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[SerializeField]
			public int blendableNumber;

			[Token(Token = "0x4000EC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[SerializeField]
			public string blendableName;

			[Token(Token = "0x4000ECA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[SerializeField]
			public float weight;
		}

		[Serializable]
		[Token(Token = "0x200029B")]
		public struct BoneInfo
		{
			[Token(Token = "0x4000ECB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[SerializeField]
			public string path;

			[Token(Token = "0x4000ECC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[SerializeField]
			public string name;

			[Token(Token = "0x4000ECD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[SerializeField]
			public Vector3 localPosition;

			[Token(Token = "0x4000ECE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[SerializeField]
			public Vector3 localRotation;

			[Token(Token = "0x4000ECF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			public bool lockPosition;

			[Token(Token = "0x4000ED0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
			[SerializeField]
			public bool lockRotation;
		}

		[Token(Token = "0x400033C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool isRelative;

		[Token(Token = "0x400033D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public PhonemeShapeInfo[] phonemeShapes;

		[Token(Token = "0x400033E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		public EmotionShapeInfo[] emotionShapes;

		[Token(Token = "0x600052E")]
		[Address(RVA = "0xC48150", Offset = "0xC48150", VA = "0xC48150")]
		public int FindBlendable(BlendableInfo blendable, BlendSystem blendSystem)
		{
			return default(int);
		}

		[Token(Token = "0x600052F")]
		[Address(RVA = "0xC48990", Offset = "0xC48990", VA = "0xC48990")]
		public Transform FindBone(BoneInfo bone, Transform searchRoot)
		{
			return null;
		}

		[Token(Token = "0x6000530")]
		[Address(RVA = "0xC48A74", Offset = "0xC48A74", VA = "0xC48A74")]
		public void CreateFromShapes(PhonemeShape[] phonemes, EmotionShape[] emotions, BlendSystem blendSystem, bool relative)
		{
		}

		[Token(Token = "0x6000531")]
		[Address(RVA = "0xC4A838", Offset = "0xC4A838", VA = "0xC4A838")]
		public LipSyncPreset()
		{
		}
	}
	[Token(Token = "0x20000A1")]
	public class LipSyncProject : ScriptableObject
	{
		[Token(Token = "0x400033F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		public string[] emotions;

		[Token(Token = "0x4000340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public Color[] emotionColors;

		[Token(Token = "0x4000341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		public List<string> gestures;

		[Token(Token = "0x4000342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public PhonemeSet phonemeSet;

		[Token(Token = "0x6000532")]
		[Address(RVA = "0xC4A840", Offset = "0xC4A840", VA = "0xC4A840")]
		public LipSyncProject()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000A2")]
	public class PhonemeMarker
	{
		[Token(Token = "0x4000343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[SerializeField]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x242BC4", Offset = "0x242BC4")]
		public Phoneme phoneme;

		[Token(Token = "0x4000344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		public int phonemeNumber;

		[Token(Token = "0x4000345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public float time;

		[Token(Token = "0x4000346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		public float intensity;

		[Token(Token = "0x4000347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public bool sustain;

		[Token(Token = "0x4000348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[SerializeField]
		public bool useRandomness;

		[Token(Token = "0x4000349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		public float intensityRandomness;

		[Token(Token = "0x400034A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public float blendableRandomness;

		[Token(Token = "0x400034B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		public float bonePositionRandomness;

		[Token(Token = "0x400034C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public float boneRotationRandomness;

		[Token(Token = "0x6000533")]
		[Address(RVA = "0xC4A8D0", Offset = "0xC4A8D0", VA = "0xC4A8D0")]
		public PhonemeMarker(int phonemeNumber, float time, float intensity, bool sustain)
		{
		}

		[Token(Token = "0x6000534")]
		[Address(RVA = "0xC4A938", Offset = "0xC4A938", VA = "0xC4A938")]
		public PhonemeMarker(int phonemeNumber, float time)
		{
		}

		[Token(Token = "0x6000535")]
		[Address(RVA = "0xC4A990", Offset = "0xC4A990", VA = "0xC4A990")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x248D68", Offset = "0x248D68")]
		public PhonemeMarker(Phoneme phoneme, float time, float intensity, bool sustain)
		{
		}

		[Token(Token = "0x6000536")]
		[Address(RVA = "0xC4A9F8", Offset = "0xC4A9F8", VA = "0xC4A9F8")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x248D9C", Offset = "0x248D9C")]
		public PhonemeMarker(Phoneme phoneme, float time)
		{
		}

		[Token(Token = "0x6000537")]
		[Address(RVA = "0xC476A8", Offset = "0xC476A8", VA = "0xC476A8")]
		public PhonemeMarker CreateCopy()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20000A3")]
	[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x241280", Offset = "0x241280")]
	public class PhonemeSet : ScriptableObject
	{
		[Serializable]
		[Token(Token = "0x200029C")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x24182C", Offset = "0x24182C")]
		public class PhonemeCollection
		{
			[Token(Token = "0x4000ED1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public List<string> phonemeNames;

			[Token(Token = "0x170001C8")]
			public int Length
			{
				[Token(Token = "0x6001419")]
				[Address(RVA = "0xC4AB8C", Offset = "0xC4AB8C", VA = "0xC4AB8C")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x170001C9")]
			public Phoneme Item
			{
				[Token(Token = "0x600141A")]
				[Address(RVA = "0xC4ABF0", Offset = "0xC4ABF0", VA = "0xC4ABF0")]
				get
				{
					return default(Phoneme);
				}
			}

			[Token(Token = "0x600141B")]
			[Address(RVA = "0xC4AAC8", Offset = "0xC4AAC8", VA = "0xC4AAC8")]
			public PhonemeCollection()
			{
			}
		}

		[Token(Token = "0x200029D")]
		public struct Phoneme
		{
			[Token(Token = "0x4000ED2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2478E8", Offset = "0x2478E8")]
			private string <name>k__BackingField;

			[Token(Token = "0x4000ED3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2478F8", Offset = "0x2478F8")]
			private int <number>k__BackingField;

			[Token(Token = "0x4000ED4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x247908", Offset = "0x247908")]
			private int <flag>k__BackingField;

			[Token(Token = "0x170001CA")]
			public string name
			{
				[Token(Token = "0x600141C")]
				[Address(RVA = "0x2D8EB4", Offset = "0x2D8EB4", VA = "0x2D8EB4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A834", Offset = "0x24A834")]
				get
				{
					return null;
				}
				[Token(Token = "0x600141D")]
				[Address(RVA = "0x2D8EBC", Offset = "0x2D8EBC", VA = "0x2D8EBC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A844", Offset = "0x24A844")]
				private set
				{
				}
			}

			[Token(Token = "0x170001CB")]
			public int number
			{
				[Token(Token = "0x600141E")]
				[Address(RVA = "0x2D8EC4", Offset = "0x2D8EC4", VA = "0x2D8EC4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A854", Offset = "0x24A854")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x600141F")]
				[Address(RVA = "0x2D8ECC", Offset = "0x2D8ECC", VA = "0x2D8ECC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A864", Offset = "0x24A864")]
				private set
				{
				}
			}

			[Token(Token = "0x170001CC")]
			public int flag
			{
				[Token(Token = "0x6001420")]
				[Address(RVA = "0x2D8ED4", Offset = "0x2D8ED4", VA = "0x2D8ED4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A874", Offset = "0x24A874")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6001421")]
				[Address(RVA = "0x2D8EDC", Offset = "0x2D8EDC", VA = "0x2D8EDC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A884", Offset = "0x24A884")]
				private set
				{
				}
			}

			[Token(Token = "0x6001422")]
			[Address(RVA = "0x2D8EE4", Offset = "0x2D8EE4", VA = "0x2D8EE4")]
			public Phoneme(string name, int number, int flag)
			{
			}
		}

		[Token(Token = "0x400034D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		public string scriptingName;

		[Token(Token = "0x400034E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public PhonemeCollection phonemes;

		[Token(Token = "0x400034F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		public Texture2D[] guideImages;

		[Token(Token = "0x6000538")]
		[Address(RVA = "0xC4AA50", Offset = "0xC4AA50", VA = "0xC4AA50")]
		public PhonemeSet()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000A4")]
	public class PhonemeShape : Shape
	{
		[Token(Token = "0x4000350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		public string phonemeName;

		[Token(Token = "0x4000351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x242D00", Offset = "0x242D00")]
		public Phoneme phoneme;

		[Token(Token = "0x6000539")]
		[Address(RVA = "0xC4ACC4", Offset = "0xC4ACC4", VA = "0xC4ACC4")]
		public PhonemeShape(string phonemeName)
		{
		}

		[Token(Token = "0x600053A")]
		[Address(RVA = "0xC4AEEC", Offset = "0xC4AEEC", VA = "0xC4AEEC")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x248DD0", Offset = "0x248DD0")]
		public PhonemeShape(Phoneme ePhoneme)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000A5")]
	public class Shape
	{
		[Token(Token = "0x4000352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[SerializeField]
		public List<int> blendShapes;

		[Token(Token = "0x4000353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		public List<string> blendableNames;

		[Token(Token = "0x4000354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public List<float> weights;

		[Token(Token = "0x4000355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		public List<BoneShape> bones;

		[Token(Token = "0x4000356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public bool verified;

		[Token(Token = "0x600053B")]
		[Address(RVA = "0xC4AFE4", Offset = "0xC4AFE4", VA = "0xC4AFE4")]
		public bool HasBone(Transform bone)
		{
			return default(bool);
		}

		[Token(Token = "0x600053C")]
		[Address(RVA = "0xC4B0F4", Offset = "0xC4B0F4", VA = "0xC4B0F4")]
		public int IndexOfBone(Transform bone)
		{
			return default(int);
		}

		[Token(Token = "0x600053D")]
		[Address(RVA = "0xC4ADBC", Offset = "0xC4ADBC", VA = "0xC4ADBC")]
		public Shape()
		{
		}
	}
	[Token(Token = "0x20000A6")]
	public class TemporaryLipSyncData : ScriptableObject
	{
		[Token(Token = "0x4000357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public AudioClip clip;

		[Token(Token = "0x4000358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<PhonemeMarker> phonemeData;

		[Token(Token = "0x4000359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public List<EmotionMarker> emotionData;

		[Token(Token = "0x400035A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<GestureMarker> gestureData;

		[Token(Token = "0x400035B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float version;

		[Token(Token = "0x400035C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float length;

		[Token(Token = "0x400035D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public string transcript;

		[Token(Token = "0x600053E")]
		[Address(RVA = "0xC4C010", Offset = "0xC4C010", VA = "0xC4C010")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600053F")]
		[Address(RVA = "0xC4C01C", Offset = "0xC4C01C", VA = "0xC4C01C")]
		public static explicit operator TemporaryLipSyncData(LipSyncData data)
		{
			return null;
		}

		[Token(Token = "0x6000540")]
		[Address(RVA = "0xC4C398", Offset = "0xC4C398", VA = "0xC4C398")]
		public TemporaryLipSyncData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000A7")]
	public class TransformAnimationCurve
	{
		[Token(Token = "0x200029E")]
		public struct TransformKeyframe
		{
			[Token(Token = "0x4000ED5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float time;

			[Token(Token = "0x4000ED6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public Quaternion rotation;

			[Token(Token = "0x4000ED7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 position;

			[Token(Token = "0x4000ED8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 scale;

			[Token(Token = "0x4000ED9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float inTangent;

			[Token(Token = "0x4000EDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float outTangent;

			[Token(Token = "0x6001423")]
			[Address(RVA = "0x2D8EF0", Offset = "0x2D8EF0", VA = "0x2D8EF0")]
			public TransformKeyframe(float time, Vector3 position, Quaternion rotation, Vector3 scale, float inTangent, float outTangent)
			{
			}
		}

		[Token(Token = "0x400035E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private AnimationCurve _posX;

		[Token(Token = "0x400035F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private AnimationCurve _posY;

		[Token(Token = "0x4000360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private AnimationCurve _posZ;

		[Token(Token = "0x4000361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private AnimationCurve _rotX;

		[Token(Token = "0x4000362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private AnimationCurve _rotY;

		[Token(Token = "0x4000363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private AnimationCurve _rotZ;

		[Token(Token = "0x4000364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AnimationCurve _rotW;

		[Token(Token = "0x4000365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private AnimationCurve _scaleX;

		[Token(Token = "0x4000366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AnimationCurve _scaleY;

		[Token(Token = "0x4000367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private AnimationCurve _scaleZ;

		[Token(Token = "0x170000B0")]
		public TransformKeyframe[] keys
		{
			[Token(Token = "0x6000541")]
			[Address(RVA = "0xC4DA18", Offset = "0xC4DA18", VA = "0xC4DA18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B1")]
		public int length
		{
			[Token(Token = "0x6000542")]
			[Address(RVA = "0xC4E228", Offset = "0xC4E228", VA = "0xC4E228")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000B2")]
		public WrapMode postWrapMode
		{
			[Token(Token = "0x6000543")]
			[Address(RVA = "0xC4E254", Offset = "0xC4E254", VA = "0xC4E254")]
			get
			{
				return default(WrapMode);
			}
			[Token(Token = "0x6000544")]
			[Address(RVA = "0xC4E280", Offset = "0xC4E280", VA = "0xC4E280")]
			set
			{
			}
		}

		[Token(Token = "0x170000B3")]
		public WrapMode preWrapMode
		{
			[Token(Token = "0x6000545")]
			[Address(RVA = "0xC4E3FC", Offset = "0xC4E3FC", VA = "0xC4E3FC")]
			get
			{
				return default(WrapMode);
			}
			[Token(Token = "0x6000546")]
			[Address(RVA = "0xC4E428", Offset = "0xC4E428", VA = "0xC4E428")]
			set
			{
			}
		}

		[Token(Token = "0x6000547")]
		[Address(RVA = "0xC4E5A4", Offset = "0xC4E5A4", VA = "0xC4E5A4")]
		public int AddKey(float time, Vector3 position, Quaternion rotation, Vector3 scale, float inTangent, float outTangent)
		{
			return default(int);
		}

		[Token(Token = "0x6000548")]
		[Address(RVA = "0xC4EB70", Offset = "0xC4EB70", VA = "0xC4EB70")]
		public int AddKey(float time, Vector3 position, Quaternion rotation, float inTangent, float outTangent)
		{
			return default(int);
		}

		[Token(Token = "0x6000549")]
		[Address(RVA = "0xC4EFBC", Offset = "0xC4EFBC", VA = "0xC4EFBC")]
		public int AddKey(float time, Quaternion rotation, float inTangent, float outTangent)
		{
			return default(int);
		}

		[Token(Token = "0x600054A")]
		[Address(RVA = "0xC4F280", Offset = "0xC4F280", VA = "0xC4F280")]
		public int AddKey(float time, Vector3 position, float inTangent, float outTangent)
		{
			return default(int);
		}

		[Token(Token = "0x600054B")]
		[Address(RVA = "0xC4F410", Offset = "0xC4F410", VA = "0xC4F410")]
		public int AddKey(float time, Vector3 position, Quaternion rotation, Vector3 scale)
		{
			return default(int);
		}

		[Token(Token = "0x600054C")]
		[Address(RVA = "0xC4F6B8", Offset = "0xC4F6B8", VA = "0xC4F6B8")]
		public int AddKey(float time, Vector3 position, Quaternion rotation)
		{
			return default(int);
		}

		[Token(Token = "0x600054D")]
		[Address(RVA = "0xC4F8DC", Offset = "0xC4F8DC", VA = "0xC4F8DC")]
		public int AddKey(float time, Quaternion rotation)
		{
			return default(int);
		}

		[Token(Token = "0x600054E")]
		[Address(RVA = "0xC4FA70", Offset = "0xC4FA70", VA = "0xC4FA70")]
		public int AddKey(float time, Vector3 position)
		{
			return default(int);
		}

		[Token(Token = "0x600054F")]
		[Address(RVA = "0xC4FB10", Offset = "0xC4FB10", VA = "0xC4FB10")]
		public int AddKey(TransformKeyframe keyframe)
		{
			return default(int);
		}

		[Token(Token = "0x6000550")]
		[Address(RVA = "0xC4FF98", Offset = "0xC4FF98", VA = "0xC4FF98")]
		public Vector3 EvaluateScale(float time)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000551")]
		[Address(RVA = "0xC50054", Offset = "0xC50054", VA = "0xC50054")]
		public Vector3 EvaluatePosition(float time)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000552")]
		[Address(RVA = "0xC50110", Offset = "0xC50110", VA = "0xC50110")]
		public Quaternion EvaluateRotation(float time)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000553")]
		[Address(RVA = "0xC501F0", Offset = "0xC501F0", VA = "0xC501F0")]
		public TransformAnimationCurve()
		{
		}

		[Token(Token = "0x6000554")]
		[Address(RVA = "0xC4EB48", Offset = "0xC4EB48", VA = "0xC4EB48")]
		private Vector3 CentreAngles(Vector3 euler)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000555")]
		[Address(RVA = "0xC50344", Offset = "0xC50344", VA = "0xC50344")]
		public void FixQuaternionContinuity()
		{
		}
	}
	[Token(Token = "0x20000A8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2412E0", Offset = "0x2412E0")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x2412E0", Offset = "0x2412E0")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2412E0", Offset = "0x2412E0")]
	public class LipSync : BlendSystemUser
	{
		[Token(Token = "0x200029F")]
		public delegate void ResetDelegate();

		[Token(Token = "0x20002A0")]
		public enum AnimationTimingMode
		{
			[Token(Token = "0x4000EDC")]
			AudioPlayback,
			[Token(Token = "0x4000EDD")]
			CustomTimer,
			[Token(Token = "0x4000EDE")]
			FixedFrameRate
		}

		[Token(Token = "0x20002A1")]
		public enum CurveGenerationMode
		{
			[Token(Token = "0x4000EE0")]
			Tight,
			[Token(Token = "0x4000EE1")]
			Loose
		}

		[Token(Token = "0x20002A2")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x241860", Offset = "0x241860")]
		private sealed class <StopAudioSource>d__92 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000EE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x4000EE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private object <>2__current;

			[Token(Token = "0x4000EE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float delay;

			[Token(Token = "0x4000EE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public LipSync <>4__this;

			[Token(Token = "0x170001CD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600142B")]
				[Address(RVA = "0xC468AC", Offset = "0xC468AC", VA = "0xC468AC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001CE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600142D")]
				[Address(RVA = "0xC4693C", Offset = "0xC4693C", VA = "0xC4693C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001428")]
			[Address(RVA = "0xC467A0", Offset = "0xC467A0", VA = "0xC467A0")]
			[DebuggerHidden]
			public <StopAudioSource>d__92(int <>1__state)
			{
			}

			[Token(Token = "0x6001429")]
			[Address(RVA = "0xC467C0", Offset = "0xC467C0", VA = "0xC467C0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600142A")]
			[Address(RVA = "0xC467C4", Offset = "0xC467C4", VA = "0xC467C4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600142C")]
			[Address(RVA = "0xC468B4", Offset = "0xC468B4", VA = "0xC468B4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AudioSource audioSource;

		[Token(Token = "0x4000369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool useBones;

		[Token(Token = "0x400036A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		public bool boneUpdateAnimation;

		[Token(Token = "0x400036B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public List<PhonemeShape> phonemes;

		[Token(Token = "0x400036C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		public List<EmotionShape> emotions;

		[Token(Token = "0x400036D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool playOnAwake;

		[Token(Token = "0x400036E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool loop;

		[Token(Token = "0x400036F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public LipSyncData defaultClip;

		[Token(Token = "0x4000370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float defaultDelay;

		[Token(Token = "0x4000371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool scaleAudioSpeed;

		[Token(Token = "0x4000372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private AnimationTimingMode m_animationTimingMode;

		[Token(Token = "0x4000373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int frameRate;

		[Token(Token = "0x4000374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float restTime;

		[Token(Token = "0x4000375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float restHoldTime;

		[Token(Token = "0x4000376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public CurveGenerationMode phonemeCurveGenerationMode;

		[Token(Token = "0x4000377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public CurveGenerationMode emotionCurveGenerationMode;

		[Token(Token = "0x4000378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool keepEmotionWhenFinished;

		[Token(Token = "0x4000379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x242DDC", Offset = "0x242DDC")]
		private bool <IsPlaying>k__BackingField;

		[Token(Token = "0x400037A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x242DEC", Offset = "0x242DEC")]
		private bool <IsPaused>k__BackingField;

		[Token(Token = "0x400037B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x242DFC", Offset = "0x242DFC")]
		private bool <IsStopping>k__BackingField;

		[Token(Token = "0x400037C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Animator gesturesAnimator;

		[Token(Token = "0x400037D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int gesturesLayer;

		[Token(Token = "0x400037E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public List<GestureInstance> gestures;

		[Token(Token = "0x400037F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent onFinishedPlaying;

		[Token(Token = "0x4000380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private AudioClip audioClip;

		[Token(Token = "0x4000381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool ready;

		[Token(Token = "0x4000382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Dictionary<string, EmotionShape> emotionCache;

		[Token(Token = "0x4000383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int currentFileID;

		[Token(Token = "0x4000384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private LipSyncData lastClip;

		[Token(Token = "0x4000385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float emotionBlendTime;

		[Token(Token = "0x4000386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float emotionTimer;

		[Token(Token = "0x4000387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool changingEmotion;

		[Token(Token = "0x4000388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int customEmotion;

		[Token(Token = "0x4000389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float customTimer;

		[Token(Token = "0x400038A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private bool isDelaying;

		[Token(Token = "0x400038B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<PhonemeMarker> phonemeMarkers;

		[Token(Token = "0x400038C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private List<EmotionMarker> emotionMarkers;

		[Token(Token = "0x400038D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private List<GestureMarker> gestureMarkers;

		[Token(Token = "0x400038E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float fileLength;

		[Token(Token = "0x400038F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int nextGesture;

		[Token(Token = "0x4000390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private List<int> indexBlendables;

		[Token(Token = "0x4000391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public List<AnimationCurve> animCurves;

		[Token(Token = "0x4000392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private List<Transform> bones;

		[Token(Token = "0x4000393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private List<TransformAnimationCurve> boneCurves;

		[Token(Token = "0x4000394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private List<Vector3> boneNeutralPositions;

		[Token(Token = "0x4000395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private List<Vector3> boneNeutralScales;

		[Token(Token = "0x4000396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private List<Quaternion> boneNeutralRotations;

		[Token(Token = "0x4000397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public ResetDelegate reset;

		[Token(Token = "0x4000398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float lastUsedVersion;

		[Token(Token = "0x170000B4")]
		public AnimationTimingMode animationTimingMode
		{
			[Token(Token = "0x6000556")]
			[Address(RVA = "0x4B3E84", Offset = "0x4B3E84", VA = "0x4B3E84")]
			get
			{
				return default(AnimationTimingMode);
			}
			[Token(Token = "0x6000557")]
			[Address(RVA = "0x4B3E8C", Offset = "0x4B3E8C", VA = "0x4B3E8C")]
			set
			{
			}
		}

		[Token(Token = "0x170000B5")]
		public bool IsPlaying
		{
			[Token(Token = "0x6000558")]
			[Address(RVA = "0x4B3E94", Offset = "0x4B3E94", VA = "0x4B3E94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248E24", Offset = "0x248E24")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000559")]
			[Address(RVA = "0x4B3E9C", Offset = "0x4B3E9C", VA = "0x4B3E9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248E34", Offset = "0x248E34")]
			private set
			{
			}
		}

		[Token(Token = "0x170000B6")]
		public bool IsPaused
		{
			[Token(Token = "0x600055A")]
			[Address(RVA = "0x4B3EA4", Offset = "0x4B3EA4", VA = "0x4B3EA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248E44", Offset = "0x248E44")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600055B")]
			[Address(RVA = "0x4B3EAC", Offset = "0x4B3EAC", VA = "0x4B3EAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248E54", Offset = "0x248E54")]
			private set
			{
			}
		}

		[Token(Token = "0x170000B7")]
		public bool IsStopping
		{
			[Token(Token = "0x600055C")]
			[Address(RVA = "0x4B3EB4", Offset = "0x4B3EB4", VA = "0x4B3EB4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248E64", Offset = "0x248E64")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600055D")]
			[Address(RVA = "0x4B3EBC", Offset = "0x4B3EBC", VA = "0x4B3EBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248E74", Offset = "0x248E74")]
			private set
			{
			}
		}

		[Token(Token = "0x170000B8")]
		public float CurrentTime
		{
			[Token(Token = "0x600055E")]
			[Address(RVA = "0x4B3EC4", Offset = "0x4B3EC4", VA = "0x4B3EC4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600055F")]
		[Address(RVA = "0x4B3F20", Offset = "0x4B3F20", VA = "0x4B3F20")]
		private void Reset()
		{
		}

		[Token(Token = "0x6000560")]
		[Address(RVA = "0x4B3F48", Offset = "0x4B3F48", VA = "0x4B3F48")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000561")]
		[Address(RVA = "0x4B4F84", Offset = "0x4B4F84", VA = "0x4B4F84")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000562")]
		[Address(RVA = "0x4B65CC", Offset = "0x4B65CC", VA = "0x4B65CC")]
		public void SetEmotion(string emotion, float blendTime)
		{
		}

		[Token(Token = "0x6000563")]
		[Address(RVA = "0x4B8870", Offset = "0x4B8870", VA = "0x4B8870")]
		public void ResetEmotion(float blendTime)
		{
		}

		[Token(Token = "0x6000564")]
		[Address(RVA = "0x4B4C14", Offset = "0x4B4C14", VA = "0x4B4C14")]
		public void Play(LipSyncData dataFile, float delay)
		{
		}

		[Token(Token = "0x6000565")]
		[Address(RVA = "0x4B65C4", Offset = "0x4B65C4", VA = "0x4B65C4")]
		public void Play(LipSyncData dataFile)
		{
		}

		[Token(Token = "0x6000566")]
		[Address(RVA = "0x4C6B7C", Offset = "0x4C6B7C", VA = "0x4C6B7C")]
		public void Play(TextAsset xmlFile, AudioClip clip, float delay)
		{
		}

		[Token(Token = "0x6000567")]
		[Address(RVA = "0x4C80A4", Offset = "0x4C80A4", VA = "0x4C80A4")]
		public void Play(TextAsset xmlFile, AudioClip clip)
		{
		}

		[Token(Token = "0x6000568")]
		[Address(RVA = "0x4C80C0", Offset = "0x4C80C0", VA = "0x4C80C0")]
		public void PlayFromTime(LipSyncData dataFile, float delay, float time)
		{
		}

		[Token(Token = "0x6000569")]
		[Address(RVA = "0x4C8348", Offset = "0x4C8348", VA = "0x4C8348")]
		public void PlayFromTime(LipSyncData dataFile, float time)
		{
		}

		[Token(Token = "0x600056A")]
		[Address(RVA = "0x4C8368", Offset = "0x4C8368", VA = "0x4C8368")]
		public void PlayFromTime(TextAsset xmlFile, AudioClip clip, float delay, float time)
		{
		}

		[Token(Token = "0x600056B")]
		[Address(RVA = "0x4C85B8", Offset = "0x4C85B8", VA = "0x4C85B8")]
		public void PlayFromTime(TextAsset xmlFile, AudioClip clip, float time)
		{
		}

		[Token(Token = "0x600056C")]
		[Address(RVA = "0x4C85D8", Offset = "0x4C85D8", VA = "0x4C85D8")]
		public void Pause()
		{
		}

		[Token(Token = "0x600056D")]
		[Address(RVA = "0x4C8640", Offset = "0x4C8640", VA = "0x4C8640")]
		public void Resume()
		{
		}

		[Token(Token = "0x600056E")]
		[Address(RVA = "0x4B5E04", Offset = "0x4B5E04", VA = "0x4B5E04")]
		public void Stop(bool stopAudio)
		{
		}

		[Token(Token = "0x600056F")]
		[Address(RVA = "0x4C86A4", Offset = "0x4C86A4", VA = "0x4C86A4")]
		public void PreviewAtTime(float time)
		{
		}

		[Token(Token = "0x6000570")]
		[Address(RVA = "0x4C8AD8", Offset = "0x4C8AD8", VA = "0x4C8AD8")]
		public void DisplayEmotionPose(int emotion, float intensity)
		{
		}

		[Token(Token = "0x6000571")]
		[Address(RVA = "0x4C90B0", Offset = "0x4C90B0", VA = "0x4C90B0")]
		public void ResetDisplayedEmotions()
		{
		}

		[Token(Token = "0x6000572")]
		[Address(RVA = "0x4C9630", Offset = "0x4C9630", VA = "0x4C9630")]
		public void PreviewAudioAtTime(float time, float length)
		{
		}

		[Token(Token = "0x6000573")]
		[Address(RVA = "0x4C9860", Offset = "0x4C9860", VA = "0x4C9860")]
		public void TempLoad(List<PhonemeMarker> pData, List<EmotionMarker> eData, AudioClip clip, float duration)
		{
		}

		[Token(Token = "0x6000574")]
		[Address(RVA = "0x4C9938", Offset = "0x4C9938", VA = "0x4C9938")]
		public void TempLoad(PhonemeMarker[] pData, EmotionMarker[] eData, AudioClip clip, float duration)
		{
		}

		[Token(Token = "0x6000575")]
		[Address(RVA = "0x4B93D8", Offset = "0x4B93D8", VA = "0x4B93D8")]
		public void ProcessData()
		{
		}

		[Token(Token = "0x6000576")]
		[Address(RVA = "0x4C9D1C", Offset = "0x4C9D1C", VA = "0x4C9D1C")]
		public void ClearDataCache()
		{
		}

		[Token(Token = "0x6000577")]
		[Address(RVA = "0x4C9D28", Offset = "0x4C9D28", VA = "0x4C9D28")]
		private void FixEmotionBlends(ref List<EmotionMarker> data)
		{
		}

		[Token(Token = "0x6000578")]
		[Address(RVA = "0x4C9E6C", Offset = "0x4C9E6C", VA = "0x4C9E6C")]
		private void FixEmotionBlends(ref EmotionMarker[] data)
		{
		}

		[Token(Token = "0x6000579")]
		[Address(RVA = "0x4C6D58", Offset = "0x4C6D58", VA = "0x4C6D58")]
		private void LoadXML(TextAsset xmlFile, AudioClip linkedClip)
		{
		}

		[Token(Token = "0x600057A")]
		[Address(RVA = "0x4B88DC", Offset = "0x4B88DC", VA = "0x4B88DC")]
		private bool LoadData(LipSyncData dataFile)
		{
			return default(bool);
		}

		[Token(Token = "0x600057B")]
		[Address(RVA = "0x4C97B0", Offset = "0x4C97B0", VA = "0x4C97B0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x248E84", Offset = "0x248E84")]
		private IEnumerator StopAudioSource(float delay)
		{
			return null;
		}

		[Token(Token = "0x600057C")]
		[Address(RVA = "0x4B5CF4", Offset = "0x4B5CF4", VA = "0x4B5CF4")]
		private GestureInstance GetGesture(string name)
		{
			return null;
		}

		[Token(Token = "0x600057D")]
		[Address(RVA = "0x4CA1D0", Offset = "0x4CA1D0", VA = "0x4CA1D0")]
		public LipSync()
		{
		}

		[Token(Token = "0x600057E")]
		[Address(RVA = "0x4CA2CC", Offset = "0x4CA2CC", VA = "0x4CA2CC")]
		public static int SortTime(PhonemeMarker a, PhonemeMarker b)
		{
			return default(int);
		}

		[Token(Token = "0x600057F")]
		[Address(RVA = "0x4CA328", Offset = "0x4CA328", VA = "0x4CA328")]
		public static int SortTime(GestureMarker a, GestureMarker b)
		{
			return default(int);
		}

		[Token(Token = "0x6000580")]
		[Address(RVA = "0x4CA384", Offset = "0x4CA384", VA = "0x4CA384")]
		private static int EmotionSort(EmotionMarker a, EmotionMarker b)
		{
			return default(int);
		}

		[Token(Token = "0x6000581")]
		[Address(RVA = "0x4CA104", Offset = "0x4CA104", VA = "0x4CA104")]
		public static string ReadXML(XmlDocument xml, string parentElement, string elementName)
		{
			return null;
		}
	}
	[Token(Token = "0x20000A9")]
	public enum Phoneme
	{
		[Token(Token = "0x400039A")]
		AI,
		[Token(Token = "0x400039B")]
		E,
		[Token(Token = "0x400039C")]
		U,
		[Token(Token = "0x400039D")]
		O,
		[Token(Token = "0x400039E")]
		CDGKNRSThYZ,
		[Token(Token = "0x400039F")]
		FV,
		[Token(Token = "0x40003A0")]
		L,
		[Token(Token = "0x40003A1")]
		MBP,
		[Token(Token = "0x40003A2")]
		WQ,
		[Token(Token = "0x40003A3")]
		Rest
	}
}
namespace ProgressBar
{
	[Token(Token = "0x20000AA")]
	public class ProgressBarBehaviour : MonoBehaviour, IIncrementable, IDecrementable
	{
		[Token(Token = "0x40003A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private RectTransform m_FillRect;

		[Token(Token = "0x40003A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private FillerProperty m_FillerInfo;

		[Token(Token = "0x40003A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private ProgressValue m_Value;

		[Token(Token = "0x40003A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x242E1C", Offset = "0x242E1C")]
		private float <TransitoryValue>k__BackingField;

		[Token(Token = "0x40003A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private Text m_AttachedText;

		[Token(Token = "0x40003A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x242E3C", Offset = "0x242E3C")]
		public int ProgressSpeed;

		[Token(Token = "0x40003AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool TriggerOnComplete;

		[Token(Token = "0x40003AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private OnCompleteEvent OnCompleteMethods;

		[Token(Token = "0x40003AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float m_XOffset;

		[Token(Token = "0x170000B9")]
		public FillerProperty FillerInfo
		{
			[Token(Token = "0x6000582")]
			[Address(RVA = "0x4986A4", Offset = "0x4986A4", VA = "0x4986A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BA")]
		public float Value
		{
			[Token(Token = "0x6000583")]
			[Address(RVA = "0x4987AC", Offset = "0x4987AC", VA = "0x4987AC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000584")]
			[Address(RVA = "0x498910", Offset = "0x498910", VA = "0x498910")]
			set
			{
			}
		}

		[Token(Token = "0x170000BB")]
		public float TransitoryValue
		{
			[Token(Token = "0x6000585")]
			[Address(RVA = "0x4989B8", Offset = "0x4989B8", VA = "0x4989B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248EFC", Offset = "0x248EFC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000586")]
			[Address(RVA = "0x4989C0", Offset = "0x4989C0", VA = "0x4989C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248F0C", Offset = "0x248F0C")]
			private set
			{
			}
		}

		[Token(Token = "0x170000BC")]
		public bool isDone
		{
			[Token(Token = "0x6000587")]
			[Address(RVA = "0x4989C8", Offset = "0x4989C8", VA = "0x4989C8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000BD")]
		public bool isPaused
		{
			[Token(Token = "0x6000588")]
			[Address(RVA = "0x498A20", Offset = "0x498A20", VA = "0x498A20")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000BE")]
		public float XOffset
		{
			[Token(Token = "0x6000589")]
			[Address(RVA = "0x498A60", Offset = "0x498A60", VA = "0x498A60")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600058A")]
		[Address(RVA = "0x498BB0", Offset = "0x498BB0", VA = "0x498BB0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600058B")]
		[Address(RVA = "0x498EB8", Offset = "0x498EB8", VA = "0x498EB8")]
		private void Update()
		{
		}

		[Token(Token = "0x600058C")]
		[Address(RVA = "0x498C58", Offset = "0x498C58", VA = "0x498C58")]
		public void SetFillerSize(float Width)
		{
		}

		[Token(Token = "0x600058D")]
		[Address(RVA = "0x498914", Offset = "0x498914", VA = "0x498914")]
		public void SetFillerSizeAsPercentage(float Percent)
		{
		}

		[Token(Token = "0x600058E")]
		[Address(RVA = "0x499090", Offset = "0x499090", VA = "0x499090")]
		public void OnComplete()
		{
		}

		[Token(Token = "0x600058F")]
		[Address(RVA = "0x4990BC", Offset = "0x4990BC", VA = "0x4990BC", Slot = "4")]
		public void IncrementValue(float inc)
		{
		}

		[Token(Token = "0x6000590")]
		[Address(RVA = "0x49911C", Offset = "0x49911C", VA = "0x49911C", Slot = "5")]
		public void DecrementValue(float dec)
		{
		}

		[Token(Token = "0x6000591")]
		[Address(RVA = "0x499170", Offset = "0x499170", VA = "0x499170")]
		public ProgressBarBehaviour()
		{
		}
	}
	[Token(Token = "0x20000AB")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x241398", Offset = "0x241398")]
	public class ProgressRadialBehaviour : MonoBehaviour, IIncrementable, IDecrementable
	{
		[Token(Token = "0x40003AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Image m_Fill;

		[Token(Token = "0x40003AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float m_Value;

		[Token(Token = "0x40003AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x242E68", Offset = "0x242E68")]
		private float <TransitoryValue>k__BackingField;

		[Token(Token = "0x40003B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Text m_AttachedText;

		[Token(Token = "0x40003B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float ProgressSpeed;

		[Token(Token = "0x40003B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool TriggerOnComplete;

		[Token(Token = "0x40003B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private OnCompleteEvent OnCompleteMethods;

		[Token(Token = "0x170000BF")]
		public float Value
		{
			[Token(Token = "0x6000592")]
			[Address(RVA = "0x499184", Offset = "0x499184", VA = "0x499184")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000593")]
			[Address(RVA = "0x4992B8", Offset = "0x4992B8", VA = "0x4992B8")]
			set
			{
			}
		}

		[Token(Token = "0x170000C0")]
		public float TransitoryValue
		{
			[Token(Token = "0x6000594")]
			[Address(RVA = "0x499340", Offset = "0x499340", VA = "0x499340")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248F1C", Offset = "0x248F1C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000595")]
			[Address(RVA = "0x499348", Offset = "0x499348", VA = "0x499348")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248F2C", Offset = "0x248F2C")]
			private set
			{
			}
		}

		[Token(Token = "0x170000C1")]
		public bool isDone
		{
			[Token(Token = "0x6000596")]
			[Address(RVA = "0x499350", Offset = "0x499350", VA = "0x499350")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C2")]
		public bool isPaused
		{
			[Token(Token = "0x6000597")]
			[Address(RVA = "0x49936C", Offset = "0x49936C", VA = "0x49936C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000598")]
		[Address(RVA = "0x499388", Offset = "0x499388", VA = "0x499388")]
		private void Start()
		{
		}

		[Token(Token = "0x6000599")]
		[Address(RVA = "0x499574", Offset = "0x499574", VA = "0x499574")]
		private void Update()
		{
		}

		[Token(Token = "0x600059A")]
		[Address(RVA = "0x499404", Offset = "0x499404", VA = "0x499404")]
		public void SetFillerSize(float fill)
		{
		}

		[Token(Token = "0x600059B")]
		[Address(RVA = "0x4992FC", Offset = "0x4992FC", VA = "0x4992FC")]
		public void SetFillerSizeAsPercentage(float Percent)
		{
		}

		[Token(Token = "0x600059C")]
		[Address(RVA = "0x49968C", Offset = "0x49968C", VA = "0x49968C")]
		public void OnComplete()
		{
		}

		[Token(Token = "0x600059D")]
		[Address(RVA = "0x4996B8", Offset = "0x4996B8", VA = "0x4996B8", Slot = "4")]
		public void IncrementValue(float inc)
		{
		}

		[Token(Token = "0x600059E")]
		[Address(RVA = "0x4996E0", Offset = "0x4996E0", VA = "0x4996E0", Slot = "5")]
		public void DecrementValue(float dec)
		{
		}

		[Token(Token = "0x600059F")]
		[Address(RVA = "0x49970C", Offset = "0x49970C", VA = "0x49970C")]
		public ProgressRadialBehaviour()
		{
		}
	}
}
namespace ProgressBar.Utils
{
	[Token(Token = "0x20000AC")]
	public interface IIncrementable
	{
		[Token(Token = "0x60005A0")]
		void IncrementValue(float inc);
	}
	[Token(Token = "0x20000AD")]
	public interface IDecrementable
	{
		[Token(Token = "0x60005A1")]
		void DecrementValue(float dec);
	}
	[Serializable]
	[Token(Token = "0x20000AE")]
	public class OnCompleteEvent : UnityEvent
	{
		[Token(Token = "0x60005A2")]
		[Address(RVA = "0x499714", Offset = "0x499714", VA = "0x499714")]
		public OnCompleteEvent()
		{
		}
	}
	[Token(Token = "0x20000AF")]
	public class FillerProperty
	{
		[Token(Token = "0x40003B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float MaxWidth;

		[Token(Token = "0x40003B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float MinWidth;

		[Token(Token = "0x60005A3")]
		[Address(RVA = "0x498784", Offset = "0x498784", VA = "0x498784")]
		public FillerProperty(float Min, float Max)
		{
		}
	}
	[Token(Token = "0x20000B0")]
	public class ProgressValue
	{
		[Token(Token = "0x40003B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private float m_Value;

		[Token(Token = "0x40003B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private float m_MaxValue;

		[Token(Token = "0x170000C3")]
		public float AsFloat
		{
			[Token(Token = "0x60005A6")]
			[Address(RVA = "0x499724", Offset = "0x499724", VA = "0x499724")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000C4")]
		public int AsInt
		{
			[Token(Token = "0x60005A7")]
			[Address(RVA = "0x49972C", Offset = "0x49972C", VA = "0x49972C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000C5")]
		public float Normalized
		{
			[Token(Token = "0x60005A8")]
			[Address(RVA = "0x49973C", Offset = "0x49973C", VA = "0x49973C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000C6")]
		public float PercentAsFloat
		{
			[Token(Token = "0x60005A9")]
			[Address(RVA = "0x499750", Offset = "0x499750", VA = "0x499750")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000C7")]
		public float PercentAsInt
		{
			[Token(Token = "0x60005AA")]
			[Address(RVA = "0x499770", Offset = "0x499770", VA = "0x499770")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60005A4")]
		[Address(RVA = "0x498E90", Offset = "0x498E90", VA = "0x498E90")]
		public ProgressValue(float value, float MaxValue)
		{
		}

		[Token(Token = "0x60005A5")]
		[Address(RVA = "0x49971C", Offset = "0x49971C", VA = "0x49971C")]
		public void Set(float newValue)
		{
		}
	}
}
namespace JBrothers.PreIntegratedSkinShader2
{
	[Token(Token = "0x20000B1")]
	public class PreIntegratedSkinProfile : ScriptableObject
	{
		[Token(Token = "0x40003B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector4 gauss6_1;

		[Token(Token = "0x40003B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector4 gauss6_2;

		[Token(Token = "0x40003BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector4 gauss6_3;

		[Token(Token = "0x40003BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector4 gauss6_4;

		[Token(Token = "0x40003BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Vector4 gauss6_5;

		[Token(Token = "0x40003BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Vector4 gauss6_6;

		[Token(Token = "0x40003BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x242E98", Offset = "0x242E98")]
		[SerializeField]
		private Vector4 _PSSProfileHigh_weighths1_var1;

		[Token(Token = "0x40003BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x242EC8", Offset = "0x242EC8")]
		[SerializeField]
		private Vector4 _PSSProfileHigh_weighths2_var2;

		[Token(Token = "0x40003C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x242EF8", Offset = "0x242EF8")]
		[SerializeField]
		private Vector4 _PSSProfileHigh_weighths3_var3;

		[Token(Token = "0x40003C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x242F28", Offset = "0x242F28")]
		[SerializeField]
		private Vector4 _PSSProfileHigh_weighths4_var4;

		[Token(Token = "0x40003C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x242F58", Offset = "0x242F58")]
		[SerializeField]
		private Vector4 _PSSProfileHigh_weighths5_var5;

		[Token(Token = "0x40003C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x242F88", Offset = "0x242F88")]
		[SerializeField]
		private Vector4 _PSSProfileHigh_weighths6_var6;

		[Token(Token = "0x40003C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x242FB8", Offset = "0x242FB8")]
		[SerializeField]
		private Vector4 _PSSProfileHigh_sqrtvar1234;

		[Token(Token = "0x40003C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x242FE8", Offset = "0x242FE8")]
		[SerializeField]
		private Vector4 _PSSProfileHigh_transl123_sqrtvar5;

		[Token(Token = "0x40003C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x243018", Offset = "0x243018")]
		[SerializeField]
		private Vector4 _PSSProfileHigh_transl456_sqrtvar6;

		[Token(Token = "0x40003C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x243048", Offset = "0x243048")]
		[SerializeField]
		private Vector4 _PSSProfileMedium_weighths1_var1;

		[Token(Token = "0x40003C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x243078", Offset = "0x243078")]
		[SerializeField]
		private Vector4 _PSSProfileMedium_weighths2_var2;

		[Token(Token = "0x40003C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x2430A8", Offset = "0x2430A8")]
		[SerializeField]
		private Vector4 _PSSProfileMedium_weighths3_var3;

		[Token(Token = "0x40003CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x2430D8", Offset = "0x2430D8")]
		[SerializeField]
		private Vector4 _PSSProfileMedium_transl123;

		[Token(Token = "0x40003CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x243108", Offset = "0x243108")]
		[SerializeField]
		private Vector4 _PSSProfileMedium_sqrtvar123;

		[Token(Token = "0x40003CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x243138", Offset = "0x243138")]
		[SerializeField]
		private Vector4 _PSSProfileLow_weighths1_var1;

		[Token(Token = "0x40003CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x243168", Offset = "0x243168")]
		[SerializeField]
		private Vector4 _PSSProfileLow_weighths2_var2;

		[Token(Token = "0x40003CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x243198", Offset = "0x243198")]
		[SerializeField]
		private Vector4 _PSSProfileLow_sqrtvar12;

		[Token(Token = "0x40003CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x2431C8", Offset = "0x2431C8")]
		[SerializeField]
		private Vector4 _PSSProfileLow_transl;

		[Token(Token = "0x40003D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x2431F8", Offset = "0x2431F8")]
		public bool needsRenormalize;

		[Token(Token = "0x40003D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18D")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x243208", Offset = "0x243208")]
		public bool needsRecalcDerived;

		[Token(Token = "0x40003D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x243218", Offset = "0x243218")]
		public Texture2D referenceTexture;

		[Token(Token = "0x60005AB")]
		[Address(RVA = "0x8BD5F8", Offset = "0x8BD5F8", VA = "0x8BD5F8")]
		public void NormalizeOriginalWeights()
		{
		}

		[Token(Token = "0x60005AC")]
		[Address(RVA = "0x8BD68C", Offset = "0x8BD68C", VA = "0x8BD68C")]
		public void RecalculateDerived()
		{
		}

		[Token(Token = "0x60005AD")]
		[Address(RVA = "0x8BE358", Offset = "0x8BE358", VA = "0x8BE358")]
		public void ApplyProfile(Material material)
		{
		}

		[Token(Token = "0x60005AE")]
		[Address(RVA = "0x8BE360", Offset = "0x8BE360", VA = "0x8BE360")]
		public void ApplyProfile(Material material, bool noWarn)
		{
		}

		[Token(Token = "0x60005AF")]
		[Address(RVA = "0x8BE8B8", Offset = "0x8BE8B8", VA = "0x8BE8B8")]
		public PreIntegratedSkinProfile()
		{
		}
	}
}
namespace Oculus.Platform
{
	[Token(Token = "0x20000B2")]
	public class AbuseReportOptions
	{
		[Token(Token = "0x40003D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IntPtr Handle;

		[Token(Token = "0x60005B0")]
		[Address(RVA = "0x8C2478", Offset = "0x8C2478", VA = "0x8C2478")]
		public AbuseReportOptions()
		{
		}

		[Token(Token = "0x60005B1")]
		[Address(RVA = "0x8C25E0", Offset = "0x8C25E0", VA = "0x8C25E0")]
		public void SetPreventPeopleChooser(bool value)
		{
		}

		[Token(Token = "0x60005B2")]
		[Address(RVA = "0x8C2768", Offset = "0x8C2768", VA = "0x8C2768")]
		public void SetReportType(AbuseReportType value)
		{
		}

		[Token(Token = "0x60005B3")]
		[Address(RVA = "0x8C28E8", Offset = "0x8C28E8", VA = "0x8C28E8")]
		public static explicit operator IntPtr(AbuseReportOptions options)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60005B4")]
		[Address(RVA = "0x8C2940", Offset = "0x8C2940", VA = "0x8C2940", Slot = "1")]
		~AbuseReportOptions()
		{
		}
	}
	[Token(Token = "0x20000B3")]
	public enum AbuseReportType
	{
		[Token(Token = "0x40003D5")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243228", Offset = "0x243228")]
		Unknown,
		[Token(Token = "0x40003D6")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x24325C", Offset = "0x24325C")]
		Object,
		[Token(Token = "0x40003D7")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243290", Offset = "0x243290")]
		User
	}
	[Token(Token = "0x20000B4")]
	public enum AchievementType
	{
		[Token(Token = "0x40003D9")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2432C4", Offset = "0x2432C4")]
		Unknown,
		[Token(Token = "0x40003DA")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2432F8", Offset = "0x2432F8")]
		Simple,
		[Token(Token = "0x40003DB")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x24332C", Offset = "0x24332C")]
		Bitfield,
		[Token(Token = "0x40003DC")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243364", Offset = "0x243364")]
		Count
	}
	[Token(Token = "0x20000B5")]
	public class AndroidPlatform
	{
		[Token(Token = "0x60005B5")]
		[Address(RVA = "0x8C4320", Offset = "0x8C4320", VA = "0x8C4320")]
		public bool Initialize(string appId)
		{
			return default(bool);
		}

		[Token(Token = "0x60005B6")]
		[Address(RVA = "0x8C454C", Offset = "0x8C454C", VA = "0x8C454C")]
		public Request<PlatformInitialize> AsyncInitialize(string appId)
		{
			return null;
		}

		[Token(Token = "0x60005B7")]
		[Address(RVA = "0x8C4798", Offset = "0x8C4798", VA = "0x8C4798")]
		public AndroidPlatform()
		{
		}
	}
	[Token(Token = "0x20000B6")]
	public class ApplicationOptions
	{
		[Token(Token = "0x40003DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IntPtr Handle;

		[Token(Token = "0x60005B8")]
		[Address(RVA = "0x8C4EAC", Offset = "0x8C4EAC", VA = "0x8C4EAC")]
		public ApplicationOptions()
		{
		}

		[Token(Token = "0x60005B9")]
		[Address(RVA = "0x8C5010", Offset = "0x8C5010", VA = "0x8C5010")]
		public void SetDeeplinkMessage(string value)
		{
		}

		[Token(Token = "0x60005BA")]
		[Address(RVA = "0x8C4BD4", Offset = "0x8C4BD4", VA = "0x8C4BD4")]
		public static explicit operator IntPtr(ApplicationOptions options)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60005BB")]
		[Address(RVA = "0x8C5168", Offset = "0x8C5168", VA = "0x8C5168", Slot = "1")]
		~ApplicationOptions()
		{
		}
	}
	[Token(Token = "0x20000B7")]
	public static class Callback
	{
		[Token(Token = "0x20002A3")]
		private class RequestCallback
		{
			[Token(Token = "0x4000EE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private Message.Callback messageCallback;

			[Token(Token = "0x600142E")]
			[Address(RVA = "0x5C0C14", Offset = "0x5C0C14", VA = "0x5C0C14")]
			public RequestCallback()
			{
			}

			[Token(Token = "0x600142F")]
			[Address(RVA = "0x5C0280", Offset = "0x5C0280", VA = "0x5C0280")]
			public RequestCallback(Message.Callback callback)
			{
			}

			[Token(Token = "0x6001430")]
			[Address(RVA = "0x5C0C1C", Offset = "0x5C0C1C", VA = "0x5C0C1C", Slot = "4")]
			public virtual void HandleMessage(Message msg)
			{
			}
		}

		[Token(Token = "0x20002A4")]
		private sealed class RequestCallback<T> : RequestCallback
		{
			[Token(Token = "0x4000EE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Message<T>.Callback callback;

			[Token(Token = "0x6001431")]
			public RequestCallback(Message<T>.Callback callback)
			{
			}

			[Token(Token = "0x6001432")]
			public override void HandleMessage(Message msg)
			{
			}
		}

		[Token(Token = "0x40003DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<ulong, RequestCallback> requestIDsToCallbacks;

		[Token(Token = "0x40003DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static Dictionary<Message.MessageType, RequestCallback> notificationCallbacks;

		[Token(Token = "0x40003E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static bool hasRegisteredRoomInviteNotificationHandler;

		[Token(Token = "0x40003E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static List<Message> pendingRoomInviteNotifications;

		[Token(Token = "0x60005BC")]
		internal static void SetNotificationCallback<T>(Message.MessageType type, Message<T>.Callback callback)
		{
		}

		[Token(Token = "0x60005BD")]
		[Address(RVA = "0x5C0138", Offset = "0x5C0138", VA = "0x5C0138")]
		internal static void SetNotificationCallback(Message.MessageType type, Message.Callback callback)
		{
		}

		[Token(Token = "0x60005BE")]
		internal static void OnComplete<T>(Request<T> request, Message<T>.Callback callback)
		{
		}

		[Token(Token = "0x60005BF")]
		[Address(RVA = "0x5C02A0", Offset = "0x5C02A0", VA = "0x5C02A0")]
		internal static void OnComplete(Request request, Message.Callback callback)
		{
		}

		[Token(Token = "0x60005C0")]
		[Address(RVA = "0x5C03B0", Offset = "0x5C03B0", VA = "0x5C03B0")]
		internal static void RunCallbacks()
		{
		}

		[Token(Token = "0x60005C1")]
		[Address(RVA = "0x5C083C", Offset = "0x5C083C", VA = "0x5C083C")]
		internal static void RunLimitedCallbacks(uint limit)
		{
		}

		[Token(Token = "0x60005C2")]
		[Address(RVA = "0x5C08F0", Offset = "0x5C08F0", VA = "0x5C08F0")]
		private static void FlushRoomInviteNotificationQueue()
		{
		}

		[Token(Token = "0x60005C3")]
		[Address(RVA = "0x5C059C", Offset = "0x5C059C", VA = "0x5C059C")]
		private static void HandleMessage(Message msg)
		{
		}
	}
	[Token(Token = "0x20000B8")]
	public class CallbackRunner : MonoBehaviour
	{
		[Token(Token = "0x40003E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool IsPersistantBetweenSceneLoads;

		[PreserveSig]
		[Token(Token = "0x60005C5")]
		[Address(RVA = "0x5C1030", Offset = "0x5C1030", VA = "0x5C1030")]
		private static extern void ovr_UnityResetTestPlatform();

		[Token(Token = "0x60005C6")]
		[Address(RVA = "0x5C110C", Offset = "0x5C110C", VA = "0x5C110C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60005C7")]
		[Address(RVA = "0x5C1244", Offset = "0x5C1244", VA = "0x5C1244")]
		private void Update()
		{
		}

		[Token(Token = "0x60005C8")]
		[Address(RVA = "0x5C12F8", Offset = "0x5C12F8", VA = "0x5C12F8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60005C9")]
		[Address(RVA = "0x5C12FC", Offset = "0x5C12FC", VA = "0x5C12FC")]
		public CallbackRunner()
		{
		}
	}
	[Token(Token = "0x20000B9")]
	public class CAPI
	{
		[Token(Token = "0x20002A5")]
		public struct ovrKeyValuePair
		{
			[Token(Token = "0x4000EE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string key_;

			[Token(Token = "0x4000EE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			private KeyValuePairType valueType_;

			[Token(Token = "0x4000EEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string stringValue_;

			[Token(Token = "0x4000EEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int intValue_;

			[Token(Token = "0x4000EEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public double doubleValue_;

			[Token(Token = "0x6001433")]
			[Address(RVA = "0x2C2464", Offset = "0x2C2464", VA = "0x2C2464")]
			public ovrKeyValuePair(string key, string value)
			{
			}

			[Token(Token = "0x6001434")]
			[Address(RVA = "0x2C2484", Offset = "0x2C2484", VA = "0x2C2484")]
			public ovrKeyValuePair(string key, int value)
			{
			}

			[Token(Token = "0x6001435")]
			[Address(RVA = "0x2C24A8", Offset = "0x2C24A8", VA = "0x2C24A8")]
			public ovrKeyValuePair(string key, double value)
			{
			}
		}

		[Token(Token = "0x20002A6")]
		public struct ovrMatchmakingCriterion
		{
			[Token(Token = "0x4000EED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string key_;

			[Token(Token = "0x4000EEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public MatchmakingCriterionImportance importance_;

			[Token(Token = "0x4000EEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public IntPtr parameterArray;

			[Token(Token = "0x4000EF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public uint parameterArrayCount;

			[Token(Token = "0x6001436")]
			[Address(RVA = "0x2C2564", Offset = "0x2C2564", VA = "0x2C2564")]
			public ovrMatchmakingCriterion(string key, MatchmakingCriterionImportance importance)
			{
			}
		}

		[Token(Token = "0x20002A7")]
		public struct ovrMatchmakingCustomQueryData
		{
			[Token(Token = "0x4000EF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IntPtr dataArray;

			[Token(Token = "0x4000EF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public uint dataArrayCount;

			[Token(Token = "0x4000EF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public IntPtr criterionArray;

			[Token(Token = "0x4000EF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public uint criterionArrayCount;
		}

		[Token(Token = "0x20002A8")]
		public struct OculusInitParams
		{
			[Token(Token = "0x4000EF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int sType;

			[Token(Token = "0x4000EF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public string email;

			[Token(Token = "0x4000EF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string password;

			[Token(Token = "0x4000EF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ulong appId;

			[Token(Token = "0x4000EF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string uriPrefixOverride;
		}

		[Token(Token = "0x20002A9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x241870", Offset = "0x241870")]
		public delegate void FilterCallback([In][Out] short[] pcmData, UIntPtr pcmDataLength, int frequency, int numChannels);

		[Token(Token = "0x40003E3")]
		public const string DLL_NAME = "ovrplatformloader";

		[Token(Token = "0x40003E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static UTF8Encoding nativeStringEncoding;

		[Token(Token = "0x40003E5")]
		public const int VoipFilterBufferSize = 480;

		[Token(Token = "0x60005CA")]
		[Address(RVA = "0x8C7468", Offset = "0x8C7468", VA = "0x8C7468")]
		public static IntPtr ArrayOfStructsToIntPtr(Array ar)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60005CB")]
		[Address(RVA = "0x8C7674", Offset = "0x8C7674", VA = "0x8C7674")]
		public static ovrKeyValuePair[] DictionaryToOVRKeyValuePairs(Dictionary<string, object> dict)
		{
			return null;
		}

		[Token(Token = "0x60005CC")]
		[Address(RVA = "0x8C7CD8", Offset = "0x8C7CD8", VA = "0x8C7CD8")]
		public static byte[] IntPtrToByteArray(IntPtr data, ulong size)
		{
			return null;
		}

		[Token(Token = "0x60005CD")]
		[Address(RVA = "0x8C7DCC", Offset = "0x8C7DCC", VA = "0x8C7DCC")]
		public static Dictionary<string, string> DataStoreFromNative(IntPtr pointer)
		{
			return null;
		}

		[Token(Token = "0x60005CE")]
		[Address(RVA = "0x8C81DC", Offset = "0x8C81DC", VA = "0x8C81DC")]
		public static string StringFromNative(IntPtr pointer)
		{
			return null;
		}

		[Token(Token = "0x60005CF")]
		[Address(RVA = "0x8C8330", Offset = "0x8C8330", VA = "0x8C8330")]
		public static int GetNativeStringLengthNotIncludingNullTerminator(IntPtr pointer)
		{
			return default(int);
		}

		[Token(Token = "0x60005D0")]
		[Address(RVA = "0x8C83CC", Offset = "0x8C83CC", VA = "0x8C83CC")]
		public static DateTime DateTimeFromNative(ulong seconds_since_the_one_true_epoch)
		{
			return default(DateTime);
		}

		[Token(Token = "0x60005D1")]
		[Address(RVA = "0x8C8468", Offset = "0x8C8468", VA = "0x8C8468")]
		public static byte[] BlobFromNative(uint size, IntPtr pointer)
		{
			return null;
		}

		[Token(Token = "0x60005D2")]
		[Address(RVA = "0x8C856C", Offset = "0x8C856C", VA = "0x8C856C")]
		public static byte[] FiledataFromNative(uint size, IntPtr pointer)
		{
			return null;
		}

		[Token(Token = "0x60005D3")]
		[Address(RVA = "0x8C862C", Offset = "0x8C862C", VA = "0x8C862C")]
		public static IntPtr StringToNative(string s)
		{
			return default(IntPtr);
		}

		[PreserveSig]
		[Token(Token = "0x60005D4")]
		[Address(RVA = "0x8C4410", Offset = "0x8C4410", VA = "0x8C4410")]
		public static extern bool ovr_UnityInitWrapper(string appId);

		[PreserveSig]
		[Token(Token = "0x60005D5")]
		[Address(RVA = "0x8C8820", Offset = "0x8C8820", VA = "0x8C8820")]
		public static extern void ovr_UnityInitGlobals(IntPtr loggingCB);

		[PreserveSig]
		[Token(Token = "0x60005D6")]
		[Address(RVA = "0x8C4688", Offset = "0x8C4688", VA = "0x8C4688")]
		public static extern ulong ovr_UnityInitWrapperAsynchronous(string appId);

		[PreserveSig]
		[Token(Token = "0x60005D7")]
		[Address(RVA = "0x8C8930", Offset = "0x8C8930", VA = "0x8C8930")]
		public static extern bool ovr_UnityInitWrapperStandalone(string accessToken, IntPtr loggingCB);

		[PreserveSig]
		[Token(Token = "0x60005D8")]
		[Address(RVA = "0x8C8A48", Offset = "0x8C8A48", VA = "0x8C8A48")]
		public static extern ulong ovr_Platform_InitializeStandaloneOculus(ref OculusInitParams init);

		[PreserveSig]
		[Token(Token = "0x60005D9")]
		[Address(RVA = "0x8C8BA8", Offset = "0x8C8BA8", VA = "0x8C8BA8")]
		public static extern ulong ovr_PlatformInitializeWithAccessToken(ulong appId, string accessToken);

		[PreserveSig]
		[Token(Token = "0x60005DA")]
		[Address(RVA = "0x8C8CD0", Offset = "0x8C8CD0", VA = "0x8C8CD0")]
		public static extern bool ovr_UnityInitWrapperWindows(string appId, IntPtr loggingCB);

		[PreserveSig]
		[Token(Token = "0x60005DB")]
		[Address(RVA = "0x8C8DE0", Offset = "0x8C8DE0", VA = "0x8C8DE0")]
		public static extern ulong ovr_UnityInitWrapperWindowsAsynchronous(string appId, IntPtr loggingCB);

		[PreserveSig]
		[Token(Token = "0x60005DC")]
		[Address(RVA = "0x8C8F00", Offset = "0x8C8F00", VA = "0x8C8F00")]
		public static extern bool ovr_SetDeveloperAccessToken(string accessToken);

		[Token(Token = "0x60005DD")]
		[Address(RVA = "0x8C9008", Offset = "0x8C9008", VA = "0x8C9008")]
		public static string ovr_GetLoggedInUserLocale()
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60005DE")]
		[Address(RVA = "0x8C9088", Offset = "0x8C9088", VA = "0x8C9088")]
		private static extern IntPtr ovr_GetLoggedInUserLocale_Native();

		[PreserveSig]
		[Token(Token = "0x60005DF")]
		[Address(RVA = "0x8C9160", Offset = "0x8C9160", VA = "0x8C9160")]
		public static extern IntPtr ovr_PopMessage();

		[PreserveSig]
		[Token(Token = "0x60005E0")]
		[Address(RVA = "0x8C9258", Offset = "0x8C9258", VA = "0x8C9258")]
		public static extern void ovr_FreeMessage(IntPtr message);

		[PreserveSig]
		[Token(Token = "0x60005E1")]
		[Address(RVA = "0x8C9360", Offset = "0x8C9360", VA = "0x8C9360")]
		public static extern uint ovr_NetworkingPeer_GetSendPolicy(IntPtr networkingPeer);

		[PreserveSig]
		[Token(Token = "0x60005E2")]
		[Address(RVA = "0x8C9448", Offset = "0x8C9448", VA = "0x8C9448")]
		public static extern IntPtr ovr_Voip_CreateEncoder();

		[PreserveSig]
		[Token(Token = "0x60005E3")]
		[Address(RVA = "0x8C9550", Offset = "0x8C9550", VA = "0x8C9550")]
		public static extern void ovr_Voip_DestroyEncoder(IntPtr encoder);

		[PreserveSig]
		[Token(Token = "0x60005E4")]
		[Address(RVA = "0x8C9668", Offset = "0x8C9668", VA = "0x8C9668")]
		public static extern IntPtr ovr_Voip_CreateDecoder();

		[PreserveSig]
		[Token(Token = "0x60005E5")]
		[Address(RVA = "0x8C9770", Offset = "0x8C9770", VA = "0x8C9770")]
		public static extern void ovr_Voip_DestroyDecoder(IntPtr decoder);

		[PreserveSig]
		[Token(Token = "0x60005E6")]
		[Address(RVA = "0x8C9888", Offset = "0x8C9888", VA = "0x8C9888")]
		public static extern void ovr_VoipDecoder_Decode(IntPtr obj, byte[] compressedData, ulong compressedSize);

		[PreserveSig]
		[Token(Token = "0x60005E7")]
		[Address(RVA = "0x8C9978", Offset = "0x8C9978", VA = "0x8C9978")]
		public static extern IntPtr ovr_Microphone_Create();

		[PreserveSig]
		[Token(Token = "0x60005E8")]
		[Address(RVA = "0x8C9A78", Offset = "0x8C9A78", VA = "0x8C9A78")]
		public static extern void ovr_Microphone_Destroy(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60005E9")]
		[Address(RVA = "0x8C9B90", Offset = "0x8C9B90", VA = "0x8C9B90")]
		public static extern void ovr_Voip_SetSystemVoipPassthrough(bool passthrough);

		[PreserveSig]
		[Token(Token = "0x60005EA")]
		[Address(RVA = "0x8C9C78", Offset = "0x8C9C78", VA = "0x8C9C78")]
		public static extern void ovr_Voip_SetSystemVoipMicrophoneMuted(VoipMuteState muted);

		[PreserveSig]
		[Token(Token = "0x60005EB")]
		[Address(RVA = "0x8C9D60", Offset = "0x8C9D60", VA = "0x8C9D60")]
		public static extern void ovr_UnityResetTestPlatform();

		[PreserveSig]
		[Token(Token = "0x60005EC")]
		[Address(RVA = "0x8C3FF0", Offset = "0x8C3FF0", VA = "0x8C3FF0")]
		public static extern ulong ovr_HTTP_GetWithMessageType(string url, int messageType);

		[PreserveSig]
		[Token(Token = "0x60005ED")]
		[Address(RVA = "0x8C9E38", Offset = "0x8C9E38", VA = "0x8C9E38")]
		public static extern void ovr_CrashApplication();

		[PreserveSig]
		[Token(Token = "0x60005EE")]
		[Address(RVA = "0x8C9F38", Offset = "0x8C9F38", VA = "0x8C9F38")]
		public static extern void ovr_Voip_SetMicrophoneFilterCallback(FilterCallback cb);

		[PreserveSig]
		[Token(Token = "0x60005EF")]
		[Address(RVA = "0x8CA030", Offset = "0x8CA030", VA = "0x8CA030")]
		public static extern void ovr_Voip_SetMicrophoneFilterCallbackWithFixedSizeBuffer(FilterCallback cb, UIntPtr bufferSizeElements);

		[Token(Token = "0x60005F0")]
		[Address(RVA = "0x8CA13C", Offset = "0x8CA13C", VA = "0x8CA13C")]
		public static void LogNewEvent(string eventName, Dictionary<string, string> values)
		{
		}

		[PreserveSig]
		[Token(Token = "0x60005F1")]
		[Address(RVA = "0x8CA518", Offset = "0x8CA518", VA = "0x8CA518")]
		public static extern void ovr_Log_NewEvent(IntPtr eventName, IntPtr[] values, UIntPtr length);

		[PreserveSig]
		[Token(Token = "0x60005F2")]
		[Address(RVA = "0x8C4DC8", Offset = "0x8C4DC8", VA = "0x8C4DC8")]
		public static extern IntPtr ovr_ApplicationLifecycle_GetLaunchDetails();

		[Token(Token = "0x60005F3")]
		[Address(RVA = "0x8CA638", Offset = "0x8CA638", VA = "0x8CA638")]
		public static ulong ovr_HTTP_StartTransfer(string url, ovrKeyValuePair[] headers)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x60005F4")]
		[Address(RVA = "0x8CA768", Offset = "0x8CA768", VA = "0x8CA768")]
		private static extern ulong ovr_HTTP_StartTransfer_Native(IntPtr url, ovrKeyValuePair[] headers, UIntPtr numItems);

		[PreserveSig]
		[Token(Token = "0x60005F5")]
		[Address(RVA = "0x8CA928", Offset = "0x8CA928", VA = "0x8CA928")]
		public static extern bool ovr_HTTP_Write(ulong transferId, byte[] bytes, UIntPtr length);

		[PreserveSig]
		[Token(Token = "0x60005F6")]
		[Address(RVA = "0x8CAA58", Offset = "0x8CAA58", VA = "0x8CAA58")]
		public static extern void ovr_HTTP_WriteEOM(ulong transferId);

		[Token(Token = "0x60005F7")]
		[Address(RVA = "0x8CAB68", Offset = "0x8CAB68", VA = "0x8CAB68")]
		public static string ovr_Message_GetStringForJavascript(IntPtr message)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60005F8")]
		[Address(RVA = "0x8CABF0", Offset = "0x8CABF0", VA = "0x8CABF0")]
		private static extern IntPtr ovr_Message_GetStringForJavascript_Native(IntPtr message);

		[PreserveSig]
		[Token(Token = "0x60005F9")]
		[Address(RVA = "0x8CACD8", Offset = "0x8CACD8", VA = "0x8CACD8")]
		public static extern void ovr_Net_Accept(ulong peerID);

		[PreserveSig]
		[Token(Token = "0x60005FA")]
		[Address(RVA = "0x8CADE8", Offset = "0x8CADE8", VA = "0x8CADE8")]
		public static extern bool ovr_Net_AcceptForCurrentRoom();

		[PreserveSig]
		[Token(Token = "0x60005FB")]
		[Address(RVA = "0x8CAEC8", Offset = "0x8CAEC8", VA = "0x8CAEC8")]
		public static extern void ovr_Net_Close(ulong peerID);

		[PreserveSig]
		[Token(Token = "0x60005FC")]
		[Address(RVA = "0x8CAFD0", Offset = "0x8CAFD0", VA = "0x8CAFD0")]
		public static extern void ovr_Net_CloseForCurrentRoom();

		[PreserveSig]
		[Token(Token = "0x60005FD")]
		[Address(RVA = "0x8CB0A8", Offset = "0x8CB0A8", VA = "0x8CB0A8")]
		public static extern void ovr_Net_Connect(ulong peerID);

		[PreserveSig]
		[Token(Token = "0x60005FE")]
		[Address(RVA = "0x8CB1B8", Offset = "0x8CB1B8", VA = "0x8CB1B8")]
		public static extern bool ovr_Net_IsConnected(ulong peerID);

		[PreserveSig]
		[Token(Token = "0x60005FF")]
		[Address(RVA = "0x8CB2D8", Offset = "0x8CB2D8", VA = "0x8CB2D8")]
		public static extern ulong ovr_Net_Ping(ulong peerID);

		[PreserveSig]
		[Token(Token = "0x6000600")]
		[Address(RVA = "0x8CB3E0", Offset = "0x8CB3E0", VA = "0x8CB3E0")]
		public static extern IntPtr ovr_Net_ReadPacket();

		[PreserveSig]
		[Token(Token = "0x6000601")]
		[Address(RVA = "0x8CB4E0", Offset = "0x8CB4E0", VA = "0x8CB4E0")]
		public static extern bool ovr_Net_SendPacket(ulong userID, UIntPtr length, byte[] bytes, SendPolicy policy);

		[PreserveSig]
		[Token(Token = "0x6000602")]
		[Address(RVA = "0x8CB620", Offset = "0x8CB620", VA = "0x8CB620")]
		public static extern bool ovr_Net_SendPacketToCurrentRoom(UIntPtr length, byte[] bytes, SendPolicy policy);

		[PreserveSig]
		[Token(Token = "0x6000603")]
		[Address(RVA = "0x8CB720", Offset = "0x8CB720", VA = "0x8CB720")]
		public static extern int ovr_Party_PluginGetSharedMemHandle();

		[PreserveSig]
		[Token(Token = "0x6000604")]
		[Address(RVA = "0x8CB800", Offset = "0x8CB800", VA = "0x8CB800")]
		public static extern VoipMuteState ovr_Party_PluginGetVoipMicrophoneMuted();

		[PreserveSig]
		[Token(Token = "0x6000605")]
		[Address(RVA = "0x8CB8E0", Offset = "0x8CB8E0", VA = "0x8CB8E0")]
		public static extern bool ovr_Party_PluginGetVoipPassthrough();

		[PreserveSig]
		[Token(Token = "0x6000606")]
		[Address(RVA = "0x8CB9C8", Offset = "0x8CB9C8", VA = "0x8CB9C8")]
		public static extern SystemVoipStatus ovr_Party_PluginGetVoipStatus();

		[PreserveSig]
		[Token(Token = "0x6000607")]
		[Address(RVA = "0x8CBAA0", Offset = "0x8CBAA0", VA = "0x8CBAA0")]
		public static extern void ovr_Voip_Accept(ulong userID);

		[PreserveSig]
		[Token(Token = "0x6000608")]
		[Address(RVA = "0x8CBBB0", Offset = "0x8CBBB0", VA = "0x8CBBB0")]
		public static extern VoipDtxState ovr_Voip_GetIsConnectionUsingDtx(ulong peerID);

		[PreserveSig]
		[Token(Token = "0x6000609")]
		[Address(RVA = "0x8CBCA0", Offset = "0x8CBCA0", VA = "0x8CBCA0")]
		public static extern VoipBitrate ovr_Voip_GetLocalBitrate(ulong peerID);

		[PreserveSig]
		[Token(Token = "0x600060A")]
		[Address(RVA = "0x8CBDC0", Offset = "0x8CBDC0", VA = "0x8CBDC0")]
		public static extern UIntPtr ovr_Voip_GetOutputBufferMaxSize();

		[PreserveSig]
		[Token(Token = "0x600060B")]
		[Address(RVA = "0x8CBE98", Offset = "0x8CBE98", VA = "0x8CBE98")]
		public static extern UIntPtr ovr_Voip_GetPCM(ulong senderID, short[] outputBuffer, UIntPtr outputBufferNumElements);

		[PreserveSig]
		[Token(Token = "0x600060C")]
		[Address(RVA = "0x8CBFC0", Offset = "0x8CBFC0", VA = "0x8CBFC0")]
		public static extern UIntPtr ovr_Voip_GetPCMFloat(ulong senderID, float[] outputBuffer, UIntPtr outputBufferNumElements);

		[PreserveSig]
		[Token(Token = "0x600060D")]
		[Address(RVA = "0x8CC0F0", Offset = "0x8CC0F0", VA = "0x8CC0F0")]
		public static extern UIntPtr ovr_Voip_GetPCMSize(ulong senderID);

		[PreserveSig]
		[Token(Token = "0x600060E")]
		[Address(RVA = "0x8CC208", Offset = "0x8CC208", VA = "0x8CC208")]
		public static extern UIntPtr ovr_Voip_GetPCMWithTimestamp(ulong senderID, short[] outputBuffer, UIntPtr outputBufferNumElements, uint[] timestamp);

		[PreserveSig]
		[Token(Token = "0x600060F")]
		[Address(RVA = "0x8CC318", Offset = "0x8CC318", VA = "0x8CC318")]
		public static extern UIntPtr ovr_Voip_GetPCMWithTimestampFloat(ulong senderID, float[] outputBuffer, UIntPtr outputBufferNumElements, uint[] timestamp);

		[PreserveSig]
		[Token(Token = "0x6000610")]
		[Address(RVA = "0x8CC430", Offset = "0x8CC430", VA = "0x8CC430")]
		public static extern VoipBitrate ovr_Voip_GetRemoteBitrate(ulong peerID);

		[PreserveSig]
		[Token(Token = "0x6000611")]
		[Address(RVA = "0x8CC550", Offset = "0x8CC550", VA = "0x8CC550")]
		public static extern uint ovr_Voip_GetSyncTimestamp(ulong userID);

		[PreserveSig]
		[Token(Token = "0x6000612")]
		[Address(RVA = "0x8CC670", Offset = "0x8CC670", VA = "0x8CC670")]
		public static extern long ovr_Voip_GetSyncTimestampDifference(uint lhs, uint rhs);

		[PreserveSig]
		[Token(Token = "0x6000613")]
		[Address(RVA = "0x8CC760", Offset = "0x8CC760", VA = "0x8CC760")]
		public static extern VoipMuteState ovr_Voip_GetSystemVoipMicrophoneMuted();

		[PreserveSig]
		[Token(Token = "0x6000614")]
		[Address(RVA = "0x8CC840", Offset = "0x8CC840", VA = "0x8CC840")]
		public static extern SystemVoipStatus ovr_Voip_GetSystemVoipStatus();

		[PreserveSig]
		[Token(Token = "0x6000615")]
		[Address(RVA = "0x8CC918", Offset = "0x8CC918", VA = "0x8CC918")]
		public static extern void ovr_Voip_SetMicrophoneMuted(VoipMuteState state);

		[PreserveSig]
		[Token(Token = "0x6000616")]
		[Address(RVA = "0x8CC9F8", Offset = "0x8CC9F8", VA = "0x8CC9F8")]
		public static extern void ovr_Voip_SetNewConnectionOptions(IntPtr voipOptions);

		[PreserveSig]
		[Token(Token = "0x6000617")]
		[Address(RVA = "0x8CCAE0", Offset = "0x8CCAE0", VA = "0x8CCAE0")]
		public static extern void ovr_Voip_SetOutputSampleRate(VoipSampleRate rate);

		[PreserveSig]
		[Token(Token = "0x6000618")]
		[Address(RVA = "0x8CCBC0", Offset = "0x8CCBC0", VA = "0x8CCBC0")]
		public static extern void ovr_Voip_Start(ulong userID);

		[PreserveSig]
		[Token(Token = "0x6000619")]
		[Address(RVA = "0x8CCCD0", Offset = "0x8CCCD0", VA = "0x8CCCD0")]
		public static extern void ovr_Voip_Stop(ulong userID);

		[Token(Token = "0x600061A")]
		[Address(RVA = "0x8C2C90", Offset = "0x8C2C90", VA = "0x8C2C90")]
		public static ulong ovr_Achievements_AddCount(string name, ulong count)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600061B")]
		[Address(RVA = "0x8CCDD8", Offset = "0x8CCDD8", VA = "0x8CCDD8")]
		private static extern ulong ovr_Achievements_AddCount_Native(IntPtr name, ulong count);

		[Token(Token = "0x600061C")]
		[Address(RVA = "0x8C2F08", Offset = "0x8C2F08", VA = "0x8C2F08")]
		public static ulong ovr_Achievements_AddFields(string name, string fields)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600061D")]
		[Address(RVA = "0x8CCEC8", Offset = "0x8CCEC8", VA = "0x8CCEC8")]
		private static extern ulong ovr_Achievements_AddFields_Native(IntPtr name, IntPtr fields);

		[PreserveSig]
		[Token(Token = "0x600061E")]
		[Address(RVA = "0x8C3180", Offset = "0x8C3180", VA = "0x8C3180")]
		public static extern ulong ovr_Achievements_GetAllDefinitions();

		[PreserveSig]
		[Token(Token = "0x600061F")]
		[Address(RVA = "0x8C33E0", Offset = "0x8C33E0", VA = "0x8C33E0")]
		public static extern ulong ovr_Achievements_GetAllProgress();

		[PreserveSig]
		[Token(Token = "0x6000620")]
		[Address(RVA = "0x8C3650", Offset = "0x8C3650", VA = "0x8C3650")]
		public static extern ulong ovr_Achievements_GetDefinitionsByName(string[] names, int count);

		[PreserveSig]
		[Token(Token = "0x6000621")]
		[Address(RVA = "0x8C39B0", Offset = "0x8C39B0", VA = "0x8C39B0")]
		public static extern ulong ovr_Achievements_GetProgressByName(string[] names, int count);

		[Token(Token = "0x6000622")]
		[Address(RVA = "0x8C3CFC", Offset = "0x8C3CFC", VA = "0x8C3CFC")]
		public static ulong ovr_Achievements_Unlock(string name)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000623")]
		[Address(RVA = "0x8CCFB0", Offset = "0x8CCFB0", VA = "0x8CCFB0")]
		private static extern ulong ovr_Achievements_Unlock_Native(IntPtr name);

		[PreserveSig]
		[Token(Token = "0x6000624")]
		[Address(RVA = "0x8CD088", Offset = "0x8CD088", VA = "0x8CD088")]
		public static extern ulong ovr_Application_ExecuteCoordinatedLaunch(ulong appID, ulong roomID);

		[PreserveSig]
		[Token(Token = "0x6000625")]
		[Address(RVA = "0x8CD190", Offset = "0x8CD190", VA = "0x8CD190")]
		public static extern ulong ovr_Application_GetInstalledApplications();

		[PreserveSig]
		[Token(Token = "0x6000626")]
		[Address(RVA = "0x8C4920", Offset = "0x8C4920", VA = "0x8C4920")]
		public static extern ulong ovr_Application_GetVersion();

		[PreserveSig]
		[Token(Token = "0x6000627")]
		[Address(RVA = "0x8C4C30", Offset = "0x8C4C30", VA = "0x8C4C30")]
		public static extern ulong ovr_Application_LaunchOtherApp(ulong appID, IntPtr deeplink_options);

		[PreserveSig]
		[Token(Token = "0x6000628")]
		[Address(RVA = "0x8CD278", Offset = "0x8CD278", VA = "0x8CD278")]
		public static extern ulong ovr_ApplicationLifecycle_GetRegisteredPIDs();

		[PreserveSig]
		[Token(Token = "0x6000629")]
		[Address(RVA = "0x8CD360", Offset = "0x8CD360", VA = "0x8CD360")]
		public static extern ulong ovr_ApplicationLifecycle_GetSessionKey();

		[Token(Token = "0x600062A")]
		[Address(RVA = "0x8CD440", Offset = "0x8CD440", VA = "0x8CD440")]
		public static ulong ovr_ApplicationLifecycle_RegisterSessionKey(string sessionKey)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600062B")]
		[Address(RVA = "0x8CD510", Offset = "0x8CD510", VA = "0x8CD510")]
		private static extern ulong ovr_ApplicationLifecycle_RegisterSessionKey_Native(IntPtr sessionKey);

		[PreserveSig]
		[Token(Token = "0x600062C")]
		[Address(RVA = "0x8C54B0", Offset = "0x8C54B0", VA = "0x8C54B0")]
		public static extern ulong ovr_AssetFile_Delete(ulong assetFileID);

		[PreserveSig]
		[Token(Token = "0x600062D")]
		[Address(RVA = "0x8C5758", Offset = "0x8C5758", VA = "0x8C5758")]
		public static extern ulong ovr_AssetFile_DeleteById(ulong assetFileID);

		[Token(Token = "0x600062E")]
		[Address(RVA = "0x8C5A00", Offset = "0x8C5A00", VA = "0x8C5A00")]
		public static ulong ovr_AssetFile_DeleteByName(string assetFileName)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600062F")]
		[Address(RVA = "0x8CD600", Offset = "0x8CD600", VA = "0x8CD600")]
		private static extern ulong ovr_AssetFile_DeleteByName_Native(IntPtr assetFileName);

		[PreserveSig]
		[Token(Token = "0x6000630")]
		[Address(RVA = "0x8C5C60", Offset = "0x8C5C60", VA = "0x8C5C60")]
		public static extern ulong ovr_AssetFile_Download(ulong assetFileID);

		[PreserveSig]
		[Token(Token = "0x6000631")]
		[Address(RVA = "0x8C5F10", Offset = "0x8C5F10", VA = "0x8C5F10")]
		public static extern ulong ovr_AssetFile_DownloadById(ulong assetFileID);

		[Token(Token = "0x6000632")]
		[Address(RVA = "0x8C617C", Offset = "0x8C617C", VA = "0x8C617C")]
		public static ulong ovr_AssetFile_DownloadByName(string assetFileName)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000633")]
		[Address(RVA = "0x8CD6E0", Offset = "0x8CD6E0", VA = "0x8CD6E0")]
		private static extern ulong ovr_AssetFile_DownloadByName_Native(IntPtr assetFileName);

		[PreserveSig]
		[Token(Token = "0x6000634")]
		[Address(RVA = "0x8C63E0", Offset = "0x8C63E0", VA = "0x8C63E0")]
		public static extern ulong ovr_AssetFile_DownloadCancel(ulong assetFileID);

		[PreserveSig]
		[Token(Token = "0x6000635")]
		[Address(RVA = "0x8C6658", Offset = "0x8C6658", VA = "0x8C6658")]
		public static extern ulong ovr_AssetFile_DownloadCancelById(ulong assetFileID);

		[Token(Token = "0x6000636")]
		[Address(RVA = "0x8C68CC", Offset = "0x8C68CC", VA = "0x8C68CC")]
		public static ulong ovr_AssetFile_DownloadCancelByName(string assetFileName)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000637")]
		[Address(RVA = "0x8CD7C0", Offset = "0x8CD7C0", VA = "0x8CD7C0")]
		private static extern ulong ovr_AssetFile_DownloadCancelByName_Native(IntPtr assetFileName);

		[PreserveSig]
		[Token(Token = "0x6000638")]
		[Address(RVA = "0x8C6B20", Offset = "0x8C6B20", VA = "0x8C6B20")]
		public static extern ulong ovr_AssetFile_GetList();

		[PreserveSig]
		[Token(Token = "0x6000639")]
		[Address(RVA = "0x8C6DB0", Offset = "0x8C6DB0", VA = "0x8C6DB0")]
		public static extern ulong ovr_AssetFile_Status(ulong assetFileID);

		[PreserveSig]
		[Token(Token = "0x600063A")]
		[Address(RVA = "0x8C7058", Offset = "0x8C7058", VA = "0x8C7058")]
		public static extern ulong ovr_AssetFile_StatusById(ulong assetFileID);

		[Token(Token = "0x600063B")]
		[Address(RVA = "0x8C7300", Offset = "0x8C7300", VA = "0x8C7300")]
		public static ulong ovr_AssetFile_StatusByName(string assetFileName)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600063C")]
		[Address(RVA = "0x8CD8A8", Offset = "0x8CD8A8", VA = "0x8CD8A8")]
		private static extern ulong ovr_AssetFile_StatusByName_Native(IntPtr assetFileName);

		[Token(Token = "0x600063D")]
		[Address(RVA = "0x8CD984", Offset = "0x8CD984", VA = "0x8CD984")]
		public static ulong ovr_Avatar_UpdateMetaData(string avatarMetaData, string imageFilePath)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600063E")]
		[Address(RVA = "0x8CDA78", Offset = "0x8CDA78", VA = "0x8CDA78")]
		private static extern ulong ovr_Avatar_UpdateMetaData_Native(IntPtr avatarMetaData, IntPtr imageFilePath);

		[PreserveSig]
		[Token(Token = "0x600063F")]
		[Address(RVA = "0x8CDB60", Offset = "0x8CDB60", VA = "0x8CDB60")]
		public static extern ulong ovr_Cal_FinalizeApplication(ulong groupingObject, ulong[] userIDs, int numUserIDs, ulong finalized_application_ID);

		[PreserveSig]
		[Token(Token = "0x6000640")]
		[Address(RVA = "0x8CDC70", Offset = "0x8CDC70", VA = "0x8CDC70")]
		public static extern ulong ovr_Cal_GetSuggestedApplications(ulong groupingObject, ulong[] userIDs, int numUserIDs);

		[PreserveSig]
		[Token(Token = "0x6000641")]
		[Address(RVA = "0x8CDD78", Offset = "0x8CDD78", VA = "0x8CDD78")]
		public static extern ulong ovr_Cal_ProposeApplication(ulong groupingObject, ulong[] userIDs, int numUserIDs, ulong proposed_application_ID);

		[Token(Token = "0x6000642")]
		[Address(RVA = "0x8CDE84", Offset = "0x8CDE84", VA = "0x8CDE84")]
		public static ulong ovr_CloudStorage_Delete(string bucket, string key)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000643")]
		[Address(RVA = "0x8CDF78", Offset = "0x8CDF78", VA = "0x8CDF78")]
		private static extern ulong ovr_CloudStorage_Delete_Native(IntPtr bucket, IntPtr key);

		[Token(Token = "0x6000644")]
		[Address(RVA = "0x8CE058", Offset = "0x8CE058", VA = "0x8CE058")]
		public static ulong ovr_CloudStorage_Load(string bucket, string key)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000645")]
		[Address(RVA = "0x8CE150", Offset = "0x8CE150", VA = "0x8CE150")]
		private static extern ulong ovr_CloudStorage_Load_Native(IntPtr bucket, IntPtr key);

		[Token(Token = "0x6000646")]
		[Address(RVA = "0x8CE230", Offset = "0x8CE230", VA = "0x8CE230")]
		public static ulong ovr_CloudStorage_LoadBucketMetadata(string bucket)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000647")]
		[Address(RVA = "0x8CE300", Offset = "0x8CE300", VA = "0x8CE300")]
		private static extern ulong ovr_CloudStorage_LoadBucketMetadata_Native(IntPtr bucket);

		[Token(Token = "0x6000648")]
		[Address(RVA = "0x8CE3E4", Offset = "0x8CE3E4", VA = "0x8CE3E4")]
		public static ulong ovr_CloudStorage_LoadConflictMetadata(string bucket, string key)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000649")]
		[Address(RVA = "0x8CE4D8", Offset = "0x8CE4D8", VA = "0x8CE4D8")]
		private static extern ulong ovr_CloudStorage_LoadConflictMetadata_Native(IntPtr bucket, IntPtr key);

		[Token(Token = "0x600064A")]
		[Address(RVA = "0x8CE5C8", Offset = "0x8CE5C8", VA = "0x8CE5C8")]
		public static ulong ovr_CloudStorage_LoadHandle(string handle)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600064B")]
		[Address(RVA = "0x8CE698", Offset = "0x8CE698", VA = "0x8CE698")]
		private static extern ulong ovr_CloudStorage_LoadHandle_Native(IntPtr handle);

		[Token(Token = "0x600064C")]
		[Address(RVA = "0x8CE774", Offset = "0x8CE774", VA = "0x8CE774")]
		public static ulong ovr_CloudStorage_LoadMetadata(string bucket, string key)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600064D")]
		[Address(RVA = "0x8CE868", Offset = "0x8CE868", VA = "0x8CE868")]
		private static extern ulong ovr_CloudStorage_LoadMetadata_Native(IntPtr bucket, IntPtr key);

		[Token(Token = "0x600064E")]
		[Address(RVA = "0x8CE950", Offset = "0x8CE950", VA = "0x8CE950")]
		public static ulong ovr_CloudStorage_ResolveKeepLocal(string bucket, string key, string remoteHandle)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600064F")]
		[Address(RVA = "0x8CEA68", Offset = "0x8CEA68", VA = "0x8CEA68")]
		private static extern ulong ovr_CloudStorage_ResolveKeepLocal_Native(IntPtr bucket, IntPtr key, IntPtr remoteHandle);

		[Token(Token = "0x6000650")]
		[Address(RVA = "0x8CEB5C", Offset = "0x8CEB5C", VA = "0x8CEB5C")]
		public static ulong ovr_CloudStorage_ResolveKeepRemote(string bucket, string key, string remoteHandle)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000651")]
		[Address(RVA = "0x8CEC70", Offset = "0x8CEC70", VA = "0x8CEC70")]
		private static extern ulong ovr_CloudStorage_ResolveKeepRemote_Native(IntPtr bucket, IntPtr key, IntPtr remoteHandle);

		[Token(Token = "0x6000652")]
		[Address(RVA = "0x8CED64", Offset = "0x8CED64", VA = "0x8CED64")]
		public static ulong ovr_CloudStorage_Save(string bucket, string key, byte[] data, uint dataSize, long counter, string extraData)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000653")]
		[Address(RVA = "0x8CEEA0", Offset = "0x8CEEA0", VA = "0x8CEEA0")]
		private static extern ulong ovr_CloudStorage_Save_Native(IntPtr bucket, IntPtr key, byte[] data, uint dataSize, long counter, IntPtr extraData);

		[PreserveSig]
		[Token(Token = "0x6000654")]
		[Address(RVA = "0x8CEFB0", Offset = "0x8CEFB0", VA = "0x8CEFB0")]
		public static extern ulong ovr_CloudStorage2_GetUserDirectoryPath();

		[PreserveSig]
		[Token(Token = "0x6000655")]
		[Address(RVA = "0x8CF090", Offset = "0x8CF090", VA = "0x8CF090")]
		public static extern ulong ovr_Entitlement_GetIsViewerEntitled();

		[Token(Token = "0x6000656")]
		[Address(RVA = "0x8CF16C", Offset = "0x8CF16C", VA = "0x8CF16C")]
		public static ulong ovr_GraphAPI_Get(string url)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000657")]
		[Address(RVA = "0x8CF240", Offset = "0x8CF240", VA = "0x8CF240")]
		private static extern ulong ovr_GraphAPI_Get_Native(IntPtr url);

		[Token(Token = "0x6000658")]
		[Address(RVA = "0x8CF350", Offset = "0x8CF350", VA = "0x8CF350")]
		public static ulong ovr_GraphAPI_Post(string url)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000659")]
		[Address(RVA = "0x8CF420", Offset = "0x8CF420", VA = "0x8CF420")]
		private static extern ulong ovr_GraphAPI_Post_Native(IntPtr url);

		[Token(Token = "0x600065A")]
		[Address(RVA = "0x8CF530", Offset = "0x8CF530", VA = "0x8CF530")]
		public static ulong ovr_HTTP_Get(string url)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600065B")]
		[Address(RVA = "0x8CF600", Offset = "0x8CF600", VA = "0x8CF600")]
		private static extern ulong ovr_HTTP_Get_Native(IntPtr url);

		[Token(Token = "0x600065C")]
		[Address(RVA = "0x8CF708", Offset = "0x8CF708", VA = "0x8CF708")]
		public static ulong ovr_HTTP_GetToFile(string url, string diskFile)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600065D")]
		[Address(RVA = "0x8CF800", Offset = "0x8CF800", VA = "0x8CF800")]
		private static extern ulong ovr_HTTP_GetToFile_Native(IntPtr url, IntPtr diskFile);

		[Token(Token = "0x600065E")]
		[Address(RVA = "0x8CF918", Offset = "0x8CF918", VA = "0x8CF918")]
		public static ulong ovr_HTTP_MultiPartPost(string url, string filepath_param_name, string filepath, string access_token, ovrKeyValuePair[] post_params)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600065F")]
		[Address(RVA = "0x8CFAB0", Offset = "0x8CFAB0", VA = "0x8CFAB0")]
		private static extern ulong ovr_HTTP_MultiPartPost_Native(IntPtr url, IntPtr filepath_param_name, IntPtr filepath, IntPtr access_token, ovrKeyValuePair[] post_params, UIntPtr numItems);

		[Token(Token = "0x6000660")]
		[Address(RVA = "0x8CFC9C", Offset = "0x8CFC9C", VA = "0x8CFC9C")]
		public static ulong ovr_HTTP_Post(string url)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000661")]
		[Address(RVA = "0x8CFD70", Offset = "0x8CFD70", VA = "0x8CFD70")]
		private static extern ulong ovr_HTTP_Post_Native(IntPtr url);

		[Token(Token = "0x6000662")]
		[Address(RVA = "0x8CFE78", Offset = "0x8CFE78", VA = "0x8CFE78")]
		public static ulong ovr_IAP_ConsumePurchase(string sku)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000663")]
		[Address(RVA = "0x8CFF48", Offset = "0x8CFF48", VA = "0x8CFF48")]
		private static extern ulong ovr_IAP_ConsumePurchase_Native(IntPtr sku);

		[PreserveSig]
		[Token(Token = "0x6000664")]
		[Address(RVA = "0x8D0020", Offset = "0x8D0020", VA = "0x8D0020")]
		public static extern ulong ovr_IAP_GetProductsBySKU(string[] skus, int count);

		[PreserveSig]
		[Token(Token = "0x6000665")]
		[Address(RVA = "0x8D0218", Offset = "0x8D0218", VA = "0x8D0218")]
		public static extern ulong ovr_IAP_GetViewerPurchases();

		[Token(Token = "0x6000666")]
		[Address(RVA = "0x8D02EC", Offset = "0x8D02EC", VA = "0x8D02EC")]
		public static ulong ovr_IAP_LaunchCheckoutFlow(string sku)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000667")]
		[Address(RVA = "0x8D03C0", Offset = "0x8D03C0", VA = "0x8D03C0")]
		private static extern ulong ovr_IAP_LaunchCheckoutFlow_Native(IntPtr sku);

		[PreserveSig]
		[Token(Token = "0x6000668")]
		[Address(RVA = "0x8D04A0", Offset = "0x8D04A0", VA = "0x8D04A0")]
		public static extern ulong ovr_LanguagePack_GetCurrent();

		[Token(Token = "0x6000669")]
		[Address(RVA = "0x8D0574", Offset = "0x8D0574", VA = "0x8D0574")]
		public static ulong ovr_LanguagePack_SetCurrent(string tag)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600066A")]
		[Address(RVA = "0x8D0648", Offset = "0x8D0648", VA = "0x8D0648")]
		private static extern ulong ovr_LanguagePack_SetCurrent_Native(IntPtr tag);

		[Token(Token = "0x600066B")]
		[Address(RVA = "0x8D0724", Offset = "0x8D0724", VA = "0x8D0724")]
		public static ulong ovr_Leaderboard_GetEntries(string leaderboardName, int limit, LeaderboardFilterType filter, LeaderboardStartAt startAt)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600066C")]
		[Address(RVA = "0x8D0818", Offset = "0x8D0818", VA = "0x8D0818")]
		private static extern ulong ovr_Leaderboard_GetEntries_Native(IntPtr leaderboardName, int limit, LeaderboardFilterType filter, LeaderboardStartAt startAt);

		[Token(Token = "0x600066D")]
		[Address(RVA = "0x8D090C", Offset = "0x8D090C", VA = "0x8D090C")]
		public static ulong ovr_Leaderboard_GetEntriesAfterRank(string leaderboardName, int limit, ulong afterRank)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600066E")]
		[Address(RVA = "0x8D0A00", Offset = "0x8D0A00", VA = "0x8D0A00")]
		private static extern ulong ovr_Leaderboard_GetEntriesAfterRank_Native(IntPtr leaderboardName, int limit, ulong afterRank);

		[PreserveSig]
		[Token(Token = "0x600066F")]
		[Address(RVA = "0x8D0B00", Offset = "0x8D0B00", VA = "0x8D0B00")]
		public static extern ulong ovr_Leaderboard_GetNextEntries(IntPtr handle);

		[PreserveSig]
		[Token(Token = "0x6000670")]
		[Address(RVA = "0x8D0BE0", Offset = "0x8D0BE0", VA = "0x8D0BE0")]
		public static extern ulong ovr_Leaderboard_GetPreviousEntries(IntPtr handle);

		[Token(Token = "0x6000671")]
		[Address(RVA = "0x8D0CC4", Offset = "0x8D0CC4", VA = "0x8D0CC4")]
		public static ulong ovr_Leaderboard_WriteEntry(string leaderboardName, long score, byte[] extraData, uint extraDataLength, bool forceUpdate)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000672")]
		[Address(RVA = "0x8D0DC0", Offset = "0x8D0DC0", VA = "0x8D0DC0")]
		private static extern ulong ovr_Leaderboard_WriteEntry_Native(IntPtr leaderboardName, long score, byte[] extraData, uint extraDataLength, bool forceUpdate);

		[PreserveSig]
		[Token(Token = "0x6000673")]
		[Address(RVA = "0x8D0ED0", Offset = "0x8D0ED0", VA = "0x8D0ED0")]
		public static extern ulong ovr_Livestreaming_GetStatus();

		[Token(Token = "0x6000674")]
		[Address(RVA = "0x8D0FA4", Offset = "0x8D0FA4", VA = "0x8D0FA4")]
		public static ulong ovr_Livestreaming_IsAllowedForApplication(string packageName)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000675")]
		[Address(RVA = "0x8D1078", Offset = "0x8D1078", VA = "0x8D1078")]
		private static extern ulong ovr_Livestreaming_IsAllowedForApplication_Native(IntPtr packageName);

		[PreserveSig]
		[Token(Token = "0x6000676")]
		[Address(RVA = "0x8D1168", Offset = "0x8D1168", VA = "0x8D1168")]
		public static extern ulong ovr_Livestreaming_PauseStream();

		[PreserveSig]
		[Token(Token = "0x6000677")]
		[Address(RVA = "0x8D1240", Offset = "0x8D1240", VA = "0x8D1240")]
		public static extern ulong ovr_Livestreaming_ResumeStream();

		[PreserveSig]
		[Token(Token = "0x6000678")]
		[Address(RVA = "0x8D1318", Offset = "0x8D1318", VA = "0x8D1318")]
		public static extern ulong ovr_Livestreaming_StartPartyStream();

		[PreserveSig]
		[Token(Token = "0x6000679")]
		[Address(RVA = "0x8D13F8", Offset = "0x8D13F8", VA = "0x8D13F8")]
		public static extern ulong ovr_Livestreaming_StartStream(LivestreamingAudience audience, LivestreamingMicrophoneStatus micStatus);

		[PreserveSig]
		[Token(Token = "0x600067A")]
		[Address(RVA = "0x8D14E0", Offset = "0x8D14E0", VA = "0x8D14E0")]
		public static extern ulong ovr_Livestreaming_StopPartyStream();

		[PreserveSig]
		[Token(Token = "0x600067B")]
		[Address(RVA = "0x8D15C0", Offset = "0x8D15C0", VA = "0x8D15C0")]
		public static extern ulong ovr_Livestreaming_StopStream();

		[PreserveSig]
		[Token(Token = "0x600067C")]
		[Address(RVA = "0x8D1698", Offset = "0x8D1698", VA = "0x8D1698")]
		public static extern ulong ovr_Livestreaming_UpdateCommentsOverlayVisibility(bool isVisible);

		[PreserveSig]
		[Token(Token = "0x600067D")]
		[Address(RVA = "0x8D1790", Offset = "0x8D1790", VA = "0x8D1790")]
		public static extern ulong ovr_Livestreaming_UpdateMicStatus(LivestreamingMicrophoneStatus micStatus);

		[Token(Token = "0x600067E")]
		[Address(RVA = "0x8D1874", Offset = "0x8D1874", VA = "0x8D1874")]
		public static ulong ovr_Matchmaking_Browse(string pool, IntPtr customQueryData)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600067F")]
		[Address(RVA = "0x8D1950", Offset = "0x8D1950", VA = "0x8D1950")]
		private static extern ulong ovr_Matchmaking_Browse_Native(IntPtr pool, IntPtr customQueryData);

		[Token(Token = "0x6000680")]
		[Address(RVA = "0x8D1A30", Offset = "0x8D1A30", VA = "0x8D1A30")]
		public static ulong ovr_Matchmaking_Browse2(string pool, IntPtr matchmakingOptions)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000681")]
		[Address(RVA = "0x8D1B08", Offset = "0x8D1B08", VA = "0x8D1B08")]
		private static extern ulong ovr_Matchmaking_Browse2_Native(IntPtr pool, IntPtr matchmakingOptions);

		[Token(Token = "0x6000682")]
		[Address(RVA = "0x8D1BE8", Offset = "0x8D1BE8", VA = "0x8D1BE8")]
		public static ulong ovr_Matchmaking_Cancel(string pool, string requestHash)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000683")]
		[Address(RVA = "0x8D1CE0", Offset = "0x8D1CE0", VA = "0x8D1CE0")]
		private static extern ulong ovr_Matchmaking_Cancel_Native(IntPtr pool, IntPtr requestHash);

		[PreserveSig]
		[Token(Token = "0x6000684")]
		[Address(RVA = "0x8D1DC0", Offset = "0x8D1DC0", VA = "0x8D1DC0")]
		public static extern ulong ovr_Matchmaking_Cancel2();

		[Token(Token = "0x6000685")]
		[Address(RVA = "0x8D1EC4", Offset = "0x8D1EC4", VA = "0x8D1EC4")]
		public static ulong ovr_Matchmaking_CreateAndEnqueueRoom(string pool, uint maxUsers, bool subscribeToUpdates, IntPtr customQueryData)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000686")]
		[Address(RVA = "0x8D1FB8", Offset = "0x8D1FB8", VA = "0x8D1FB8")]
		private static extern ulong ovr_Matchmaking_CreateAndEnqueueRoom_Native(IntPtr pool, uint maxUsers, bool subscribeToUpdates, IntPtr customQueryData);

		[Token(Token = "0x6000687")]
		[Address(RVA = "0x8D20B8", Offset = "0x8D20B8", VA = "0x8D20B8")]
		public static ulong ovr_Matchmaking_CreateAndEnqueueRoom2(string pool, IntPtr matchmakingOptions)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000688")]
		[Address(RVA = "0x8D2190", Offset = "0x8D2190", VA = "0x8D2190")]
		private static extern ulong ovr_Matchmaking_CreateAndEnqueueRoom2_Native(IntPtr pool, IntPtr matchmakingOptions);

		[Token(Token = "0x6000689")]
		[Address(RVA = "0x8D2280", Offset = "0x8D2280", VA = "0x8D2280")]
		public static ulong ovr_Matchmaking_CreateRoom(string pool, uint maxUsers, bool subscribeToUpdates)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600068A")]
		[Address(RVA = "0x8D2360", Offset = "0x8D2360", VA = "0x8D2360")]
		private static extern ulong ovr_Matchmaking_CreateRoom_Native(IntPtr pool, uint maxUsers, bool subscribeToUpdates);

		[Token(Token = "0x600068B")]
		[Address(RVA = "0x8D244C", Offset = "0x8D244C", VA = "0x8D244C")]
		public static ulong ovr_Matchmaking_CreateRoom2(string pool, IntPtr matchmakingOptions)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600068C")]
		[Address(RVA = "0x8D2528", Offset = "0x8D2528", VA = "0x8D2528")]
		private static extern ulong ovr_Matchmaking_CreateRoom2_Native(IntPtr pool, IntPtr matchmakingOptions);

		[Token(Token = "0x600068D")]
		[Address(RVA = "0x8D260C", Offset = "0x8D260C", VA = "0x8D260C")]
		public static ulong ovr_Matchmaking_Enqueue(string pool, IntPtr customQueryData)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600068E")]
		[Address(RVA = "0x8D26E8", Offset = "0x8D26E8", VA = "0x8D26E8")]
		private static extern ulong ovr_Matchmaking_Enqueue_Native(IntPtr pool, IntPtr customQueryData);

		[Token(Token = "0x600068F")]
		[Address(RVA = "0x8D27C8", Offset = "0x8D27C8", VA = "0x8D27C8")]
		public static ulong ovr_Matchmaking_Enqueue2(string pool, IntPtr matchmakingOptions)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000690")]
		[Address(RVA = "0x8D28A0", Offset = "0x8D28A0", VA = "0x8D28A0")]
		private static extern ulong ovr_Matchmaking_Enqueue2_Native(IntPtr pool, IntPtr matchmakingOptions);

		[PreserveSig]
		[Token(Token = "0x6000691")]
		[Address(RVA = "0x8D2988", Offset = "0x8D2988", VA = "0x8D2988")]
		public static extern ulong ovr_Matchmaking_EnqueueRoom(ulong roomID, IntPtr customQueryData);

		[PreserveSig]
		[Token(Token = "0x6000692")]
		[Address(RVA = "0x8D2A78", Offset = "0x8D2A78", VA = "0x8D2A78")]
		public static extern ulong ovr_Matchmaking_EnqueueRoom2(ulong roomID, IntPtr matchmakingOptions);

		[PreserveSig]
		[Token(Token = "0x6000693")]
		[Address(RVA = "0x8D2B68", Offset = "0x8D2B68", VA = "0x8D2B68")]
		public static extern ulong ovr_Matchmaking_GetAdminSnapshot();

		[Token(Token = "0x6000694")]
		[Address(RVA = "0x8D2C44", Offset = "0x8D2C44", VA = "0x8D2C44")]
		public static ulong ovr_Matchmaking_GetStats(string pool, uint maxLevel, MatchmakingStatApproach approach)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000695")]
		[Address(RVA = "0x8D2D28", Offset = "0x8D2D28", VA = "0x8D2D28")]
		private static extern ulong ovr_Matchmaking_GetStats_Native(IntPtr pool, uint maxLevel, MatchmakingStatApproach approach);

		[PreserveSig]
		[Token(Token = "0x6000696")]
		[Address(RVA = "0x8D2E18", Offset = "0x8D2E18", VA = "0x8D2E18")]
		public static extern ulong ovr_Matchmaking_JoinRoom(ulong roomID, bool subscribeToUpdates);

		[Token(Token = "0x6000697")]
		[Address(RVA = "0x8D2F40", Offset = "0x8D2F40", VA = "0x8D2F40")]
		public static ulong ovr_Matchmaking_ReportResultInsecure(ulong roomID, ovrKeyValuePair[] data)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000698")]
		[Address(RVA = "0x8D3030", Offset = "0x8D3030", VA = "0x8D3030")]
		private static extern ulong ovr_Matchmaking_ReportResultInsecure_Native(ulong roomID, ovrKeyValuePair[] data, UIntPtr numItems);

		[PreserveSig]
		[Token(Token = "0x6000699")]
		[Address(RVA = "0x8D3210", Offset = "0x8D3210", VA = "0x8D3210")]
		public static extern ulong ovr_Matchmaking_StartMatch(ulong roomID);

		[Token(Token = "0x600069A")]
		[Address(RVA = "0x8D32F4", Offset = "0x8D32F4", VA = "0x8D32F4")]
		public static ulong ovr_Media_ShareToFacebook(string postTextSuggestion, string filePath, MediaContentType contentType)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600069B")]
		[Address(RVA = "0x8D33F0", Offset = "0x8D33F0", VA = "0x8D33F0")]
		private static extern ulong ovr_Media_ShareToFacebook_Native(IntPtr postTextSuggestion, IntPtr filePath, MediaContentType contentType);

		[PreserveSig]
		[Token(Token = "0x600069C")]
		[Address(RVA = "0x8D34E0", Offset = "0x8D34E0", VA = "0x8D34E0")]
		public static extern ulong ovr_Notification_GetRoomInvites();

		[PreserveSig]
		[Token(Token = "0x600069D")]
		[Address(RVA = "0x8D35B8", Offset = "0x8D35B8", VA = "0x8D35B8")]
		public static extern ulong ovr_Notification_MarkAsRead(ulong notificationID);

		[PreserveSig]
		[Token(Token = "0x600069E")]
		[Address(RVA = "0x8D36A0", Offset = "0x8D36A0", VA = "0x8D36A0")]
		public static extern ulong ovr_Party_Create();

		[PreserveSig]
		[Token(Token = "0x600069F")]
		[Address(RVA = "0x8D3798", Offset = "0x8D3798", VA = "0x8D3798")]
		public static extern ulong ovr_Party_GatherInApplication(ulong partyID, ulong appID);

		[PreserveSig]
		[Token(Token = "0x60006A0")]
		[Address(RVA = "0x8D3890", Offset = "0x8D3890", VA = "0x8D3890")]
		public static extern ulong ovr_Party_Get(ulong partyID);

		[PreserveSig]
		[Token(Token = "0x60006A1")]
		[Address(RVA = "0x8D3998", Offset = "0x8D3998", VA = "0x8D3998")]
		public static extern ulong ovr_Party_GetCurrent();

		[PreserveSig]
		[Token(Token = "0x60006A2")]
		[Address(RVA = "0x8D3A98", Offset = "0x8D3A98", VA = "0x8D3A98")]
		public static extern ulong ovr_Party_GetCurrentForUser(ulong userID);

		[PreserveSig]
		[Token(Token = "0x60006A3")]
		[Address(RVA = "0x8D3B80", Offset = "0x8D3B80", VA = "0x8D3B80")]
		public static extern ulong ovr_Party_Invite(ulong partyID, ulong userID);

		[PreserveSig]
		[Token(Token = "0x60006A4")]
		[Address(RVA = "0x8D3CA0", Offset = "0x8D3CA0", VA = "0x8D3CA0")]
		public static extern ulong ovr_Party_Join(ulong partyID);

		[PreserveSig]
		[Token(Token = "0x60006A5")]
		[Address(RVA = "0x8D3DB0", Offset = "0x8D3DB0", VA = "0x8D3DB0")]
		public static extern ulong ovr_Party_Leave(ulong partyID);

		[PreserveSig]
		[Token(Token = "0x60006A6")]
		[Address(RVA = "0x8D3EC0", Offset = "0x8D3EC0", VA = "0x8D3EC0")]
		public static extern ulong ovr_Room_CreateAndJoinPrivate(RoomJoinPolicy joinPolicy, uint maxUsers, bool subscribeToUpdates);

		[PreserveSig]
		[Token(Token = "0x60006A7")]
		[Address(RVA = "0x8D3FB0", Offset = "0x8D3FB0", VA = "0x8D3FB0")]
		public static extern ulong ovr_Room_CreateAndJoinPrivate2(RoomJoinPolicy joinPolicy, uint maxUsers, IntPtr roomOptions);

		[PreserveSig]
		[Token(Token = "0x60006A8")]
		[Address(RVA = "0x8D40A0", Offset = "0x8D40A0", VA = "0x8D40A0")]
		public static extern ulong ovr_Room_Get(ulong roomID);

		[PreserveSig]
		[Token(Token = "0x60006A9")]
		[Address(RVA = "0x8D41A8", Offset = "0x8D41A8", VA = "0x8D41A8")]
		public static extern ulong ovr_Room_GetCurrent();

		[PreserveSig]
		[Token(Token = "0x60006AA")]
		[Address(RVA = "0x8D42A8", Offset = "0x8D42A8", VA = "0x8D42A8")]
		public static extern ulong ovr_Room_GetCurrentForUser(ulong userID);

		[PreserveSig]
		[Token(Token = "0x60006AB")]
		[Address(RVA = "0x8D4390", Offset = "0x8D4390", VA = "0x8D4390")]
		public static extern ulong ovr_Room_GetInvitableUsers();

		[PreserveSig]
		[Token(Token = "0x60006AC")]
		[Address(RVA = "0x8D4468", Offset = "0x8D4468", VA = "0x8D4468")]
		public static extern ulong ovr_Room_GetInvitableUsers2(IntPtr roomOptions);

		[PreserveSig]
		[Token(Token = "0x60006AD")]
		[Address(RVA = "0x8D4548", Offset = "0x8D4548", VA = "0x8D4548")]
		public static extern ulong ovr_Room_GetModeratedRooms();

		[PreserveSig]
		[Token(Token = "0x60006AE")]
		[Address(RVA = "0x8D4620", Offset = "0x8D4620", VA = "0x8D4620")]
		public static extern ulong ovr_Room_GetSocialRooms(ulong appID);

		[Token(Token = "0x60006AF")]
		[Address(RVA = "0x8D473C", Offset = "0x8D473C", VA = "0x8D473C")]
		public static ulong ovr_Room_InviteUser(ulong roomID, string inviteToken)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x60006B0")]
		[Address(RVA = "0x8D4820", Offset = "0x8D4820", VA = "0x8D4820")]
		private static extern ulong ovr_Room_InviteUser_Native(ulong roomID, IntPtr inviteToken);

		[PreserveSig]
		[Token(Token = "0x60006B1")]
		[Address(RVA = "0x8D4908", Offset = "0x8D4908", VA = "0x8D4908")]
		public static extern ulong ovr_Room_Join(ulong roomID, bool subscribeToUpdates);

		[PreserveSig]
		[Token(Token = "0x60006B2")]
		[Address(RVA = "0x8D4A18", Offset = "0x8D4A18", VA = "0x8D4A18")]
		public static extern ulong ovr_Room_Join2(ulong roomID, IntPtr roomOptions);

		[PreserveSig]
		[Token(Token = "0x60006B3")]
		[Address(RVA = "0x8D4B30", Offset = "0x8D4B30", VA = "0x8D4B30")]
		public static extern ulong ovr_Room_KickUser(ulong roomID, ulong userID, int kickDurationSeconds);

		[PreserveSig]
		[Token(Token = "0x60006B4")]
		[Address(RVA = "0x8D4C58", Offset = "0x8D4C58", VA = "0x8D4C58")]
		public static extern ulong ovr_Room_LaunchInvitableUserFlow(ulong roomID);

		[PreserveSig]
		[Token(Token = "0x60006B5")]
		[Address(RVA = "0x8D4D48", Offset = "0x8D4D48", VA = "0x8D4D48")]
		public static extern ulong ovr_Room_Leave(ulong roomID);

		[Token(Token = "0x60006B6")]
		[Address(RVA = "0x8D4E54", Offset = "0x8D4E54", VA = "0x8D4E54")]
		public static ulong ovr_Room_SetDescription(ulong roomID, string description)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x60006B7")]
		[Address(RVA = "0x8D4F38", Offset = "0x8D4F38", VA = "0x8D4F38")]
		private static extern ulong ovr_Room_SetDescription_Native(ulong roomID, IntPtr description);

		[Token(Token = "0x60006B8")]
		[Address(RVA = "0x8D5020", Offset = "0x8D5020", VA = "0x8D5020")]
		public static ulong ovr_Room_UpdateDataStore(ulong roomID, ovrKeyValuePair[] data)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x60006B9")]
		[Address(RVA = "0x8D5110", Offset = "0x8D5110", VA = "0x8D5110")]
		private static extern ulong ovr_Room_UpdateDataStore_Native(ulong roomID, ovrKeyValuePair[] data, UIntPtr numItems);

		[PreserveSig]
		[Token(Token = "0x60006BA")]
		[Address(RVA = "0x8D52E0", Offset = "0x8D52E0", VA = "0x8D52E0")]
		public static extern ulong ovr_Room_UpdateMembershipLockStatus(ulong roomID, RoomMembershipLockStatus membershipLockStatus);

		[PreserveSig]
		[Token(Token = "0x60006BB")]
		[Address(RVA = "0x8D53D8", Offset = "0x8D53D8", VA = "0x8D53D8")]
		public static extern ulong ovr_Room_UpdateOwner(ulong roomID, ulong userID);

		[PreserveSig]
		[Token(Token = "0x60006BC")]
		[Address(RVA = "0x8D5500", Offset = "0x8D5500", VA = "0x8D5500")]
		public static extern ulong ovr_Room_UpdatePrivateRoomJoinPolicy(ulong roomID, RoomJoinPolicy newJoinPolicy);

		[PreserveSig]
		[Token(Token = "0x60006BD")]
		[Address(RVA = "0x8D55F8", Offset = "0x8D55F8", VA = "0x8D55F8")]
		public static extern ulong ovr_SystemPermissions_GetStatus(PermissionType permType);

		[PreserveSig]
		[Token(Token = "0x60006BE")]
		[Address(RVA = "0x8D56D8", Offset = "0x8D56D8", VA = "0x8D56D8")]
		public static extern ulong ovr_SystemPermissions_LaunchDeeplink(PermissionType permType);

		[Token(Token = "0x60006BF")]
		[Address(RVA = "0x8D57C0", Offset = "0x8D57C0", VA = "0x8D57C0")]
		public static ulong ovr_User_CancelRecordingForReportFlow(string recordingUUID)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x60006C0")]
		[Address(RVA = "0x8D5890", Offset = "0x8D5890", VA = "0x8D5890")]
		private static extern ulong ovr_User_CancelRecordingForReportFlow_Native(IntPtr recordingUUID);

		[PreserveSig]
		[Token(Token = "0x60006C1")]
		[Address(RVA = "0x8D5978", Offset = "0x8D5978", VA = "0x8D5978")]
		public static extern ulong ovr_User_Get(ulong userID);

		[PreserveSig]
		[Token(Token = "0x60006C2")]
		[Address(RVA = "0x8D5A80", Offset = "0x8D5A80", VA = "0x8D5A80")]
		public static extern ulong ovr_User_GetAccessToken();

		[PreserveSig]
		[Token(Token = "0x60006C3")]
		[Address(RVA = "0x8D5B88", Offset = "0x8D5B88", VA = "0x8D5B88")]
		public static extern ulong ovr_User_GetLinkedAccounts(IntPtr userOptions);

		[PreserveSig]
		[Token(Token = "0x60006C4")]
		[Address(RVA = "0x8D5C68", Offset = "0x8D5C68", VA = "0x8D5C68")]
		public static extern ulong ovr_User_GetLoggedInUser();

		[PreserveSig]
		[Token(Token = "0x60006C5")]
		[Address(RVA = "0x8D5D70", Offset = "0x8D5D70", VA = "0x8D5D70")]
		public static extern ulong ovr_User_GetLoggedInUserFriends();

		[PreserveSig]
		[Token(Token = "0x60006C6")]
		[Address(RVA = "0x8D5E48", Offset = "0x8D5E48", VA = "0x8D5E48")]
		public static extern ulong ovr_User_GetLoggedInUserFriendsAndRooms();

		[PreserveSig]
		[Token(Token = "0x60006C7")]
		[Address(RVA = "0x8D5F28", Offset = "0x8D5F28", VA = "0x8D5F28")]
		public static extern ulong ovr_User_GetLoggedInUserRecentlyMetUsersAndRooms(IntPtr userOptions);

		[PreserveSig]
		[Token(Token = "0x60006C8")]
		[Address(RVA = "0x8D6020", Offset = "0x8D6020", VA = "0x8D6020")]
		public static extern ulong ovr_User_GetOrgScopedID(ulong userID);

		[PreserveSig]
		[Token(Token = "0x60006C9")]
		[Address(RVA = "0x8D6140", Offset = "0x8D6140", VA = "0x8D6140")]
		public static extern ulong ovr_User_GetSdkAccounts();

		[PreserveSig]
		[Token(Token = "0x60006CA")]
		[Address(RVA = "0x8D6248", Offset = "0x8D6248", VA = "0x8D6248")]
		public static extern ulong ovr_User_GetUserProof();

		[PreserveSig]
		[Token(Token = "0x60006CB")]
		[Address(RVA = "0x8D6348", Offset = "0x8D6348", VA = "0x8D6348")]
		public static extern ulong ovr_User_LaunchBlockFlow(ulong userID);

		[PreserveSig]
		[Token(Token = "0x60006CC")]
		[Address(RVA = "0x8D6468", Offset = "0x8D6468", VA = "0x8D6468")]
		public static extern ulong ovr_User_LaunchFriendRequestFlow(ulong userID);

		[PreserveSig]
		[Token(Token = "0x60006CD")]
		[Address(RVA = "0x8D6558", Offset = "0x8D6558", VA = "0x8D6558")]
		public static extern ulong ovr_User_LaunchProfile(ulong userID);

		[PreserveSig]
		[Token(Token = "0x60006CE")]
		[Address(RVA = "0x8D6678", Offset = "0x8D6678", VA = "0x8D6678")]
		public static extern ulong ovr_User_LaunchReportFlow(ulong userID);

		[PreserveSig]
		[Token(Token = "0x60006CF")]
		[Address(RVA = "0x8D6798", Offset = "0x8D6798", VA = "0x8D6798")]
		public static extern ulong ovr_User_LaunchReportFlow2(ulong optionalUserID, IntPtr abuseReportOptions);

		[PreserveSig]
		[Token(Token = "0x60006D0")]
		[Address(RVA = "0x8D6888", Offset = "0x8D6888", VA = "0x8D6888")]
		public static extern ulong ovr_User_LaunchUnblockFlow(ulong userID);

		[PreserveSig]
		[Token(Token = "0x60006D1")]
		[Address(RVA = "0x8D6970", Offset = "0x8D6970", VA = "0x8D6970")]
		public static extern ulong ovr_User_NewEntitledTestUser();

		[PreserveSig]
		[Token(Token = "0x60006D2")]
		[Address(RVA = "0x8D6A48", Offset = "0x8D6A48", VA = "0x8D6A48")]
		public static extern ulong ovr_User_NewTestUser();

		[PreserveSig]
		[Token(Token = "0x60006D3")]
		[Address(RVA = "0x8D6B48", Offset = "0x8D6B48", VA = "0x8D6B48")]
		public static extern ulong ovr_User_NewTestUserFriends();

		[PreserveSig]
		[Token(Token = "0x60006D4")]
		[Address(RVA = "0x8D6C20", Offset = "0x8D6C20", VA = "0x8D6C20")]
		public static extern ulong ovr_User_StartRecordingForReportFlow();

		[Token(Token = "0x60006D5")]
		[Address(RVA = "0x8D6D00", Offset = "0x8D6D00", VA = "0x8D6D00")]
		public static ulong ovr_User_StopRecordingAndLaunchReportFlow(ulong optionalUserID, string optionalRecordingUUID)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x60006D6")]
		[Address(RVA = "0x8D6DE8", Offset = "0x8D6DE8", VA = "0x8D6DE8")]
		private static extern ulong ovr_User_StopRecordingAndLaunchReportFlow_Native(ulong optionalUserID, IntPtr optionalRecordingUUID);

		[Token(Token = "0x60006D7")]
		[Address(RVA = "0x8D6EE4", Offset = "0x8D6EE4", VA = "0x8D6EE4")]
		public static ulong ovr_User_StopRecordingAndLaunchReportFlow2(ulong optionalUserID, string optionalRecordingUUID, IntPtr abuseReportOptions)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x60006D8")]
		[Address(RVA = "0x8D6FD8", Offset = "0x8D6FD8", VA = "0x8D6FD8")]
		private static extern ulong ovr_User_StopRecordingAndLaunchReportFlow2_Native(ulong optionalUserID, IntPtr optionalRecordingUUID, IntPtr abuseReportOptions);

		[Token(Token = "0x60006D9")]
		[Address(RVA = "0x8D70DC", Offset = "0x8D70DC", VA = "0x8D70DC")]
		public static ulong ovr_User_TestUserCreateDeviceManifest(string deviceID, ulong[] appIDs, int numAppIDs)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x60006DA")]
		[Address(RVA = "0x8D71C0", Offset = "0x8D71C0", VA = "0x8D71C0")]
		private static extern ulong ovr_User_TestUserCreateDeviceManifest_Native(IntPtr deviceID, ulong[] appIDs, int numAppIDs);

		[PreserveSig]
		[Token(Token = "0x60006DB")]
		[Address(RVA = "0x8D72C0", Offset = "0x8D72C0", VA = "0x8D72C0")]
		public static extern ulong ovr_Voip_SetSystemVoipSuppressed(bool suppressed);

		[Token(Token = "0x60006DC")]
		[Address(RVA = "0x8D73A4", Offset = "0x8D73A4", VA = "0x8D73A4")]
		public static string ovr_AbuseReportRecording_GetRecordingUuid(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60006DD")]
		[Address(RVA = "0x8D7428", Offset = "0x8D7428", VA = "0x8D7428")]
		private static extern IntPtr ovr_AbuseReportRecording_GetRecordingUuid_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006DE")]
		[Address(RVA = "0x8D7518", Offset = "0x8D7518", VA = "0x8D7518")]
		public static extern uint ovr_AchievementDefinition_GetBitfieldLength(IntPtr obj);

		[Token(Token = "0x60006DF")]
		[Address(RVA = "0x8D7604", Offset = "0x8D7604", VA = "0x8D7604")]
		public static string ovr_AchievementDefinition_GetName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60006E0")]
		[Address(RVA = "0x8D7688", Offset = "0x8D7688", VA = "0x8D7688")]
		private static extern IntPtr ovr_AchievementDefinition_GetName_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006E1")]
		[Address(RVA = "0x8D7770", Offset = "0x8D7770", VA = "0x8D7770")]
		public static extern ulong ovr_AchievementDefinition_GetTarget(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006E2")]
		[Address(RVA = "0x8D7858", Offset = "0x8D7858", VA = "0x8D7858")]
		public static extern AchievementType ovr_AchievementDefinition_GetType(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006E3")]
		[Address(RVA = "0x8D7940", Offset = "0x8D7940", VA = "0x8D7940")]
		public static extern IntPtr ovr_AchievementDefinitionArray_GetElement(IntPtr obj, UIntPtr index);

		[Token(Token = "0x60006E4")]
		[Address(RVA = "0x8D7A34", Offset = "0x8D7A34", VA = "0x8D7A34")]
		public static string ovr_AchievementDefinitionArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60006E5")]
		[Address(RVA = "0x8D7AB8", Offset = "0x8D7AB8", VA = "0x8D7AB8")]
		private static extern IntPtr ovr_AchievementDefinitionArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006E6")]
		[Address(RVA = "0x8D7BA8", Offset = "0x8D7BA8", VA = "0x8D7BA8")]
		public static extern UIntPtr ovr_AchievementDefinitionArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006E7")]
		[Address(RVA = "0x8D7C90", Offset = "0x8D7C90", VA = "0x8D7C90")]
		public static extern bool ovr_AchievementDefinitionArray_HasNextPage(IntPtr obj);

		[Token(Token = "0x60006E8")]
		[Address(RVA = "0x8D7D84", Offset = "0x8D7D84", VA = "0x8D7D84")]
		public static string ovr_AchievementProgress_GetBitfield(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60006E9")]
		[Address(RVA = "0x8D7E08", Offset = "0x8D7E08", VA = "0x8D7E08")]
		private static extern IntPtr ovr_AchievementProgress_GetBitfield_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006EA")]
		[Address(RVA = "0x8D7EF0", Offset = "0x8D7EF0", VA = "0x8D7EF0")]
		public static extern ulong ovr_AchievementProgress_GetCount(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006EB")]
		[Address(RVA = "0x8D7FD8", Offset = "0x8D7FD8", VA = "0x8D7FD8")]
		public static extern bool ovr_AchievementProgress_GetIsUnlocked(IntPtr obj);

		[Token(Token = "0x60006EC")]
		[Address(RVA = "0x8D80C8", Offset = "0x8D80C8", VA = "0x8D80C8")]
		public static string ovr_AchievementProgress_GetName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60006ED")]
		[Address(RVA = "0x8D8150", Offset = "0x8D8150", VA = "0x8D8150")]
		private static extern IntPtr ovr_AchievementProgress_GetName_Native(IntPtr obj);

		[Token(Token = "0x60006EE")]
		[Address(RVA = "0x8D8230", Offset = "0x8D8230", VA = "0x8D8230")]
		public static DateTime ovr_AchievementProgress_GetUnlockTime(IntPtr obj)
		{
			return default(DateTime);
		}

		[PreserveSig]
		[Token(Token = "0x60006EF")]
		[Address(RVA = "0x8D82D0", Offset = "0x8D82D0", VA = "0x8D82D0")]
		private static extern ulong ovr_AchievementProgress_GetUnlockTime_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006F0")]
		[Address(RVA = "0x8D83B8", Offset = "0x8D83B8", VA = "0x8D83B8")]
		public static extern IntPtr ovr_AchievementProgressArray_GetElement(IntPtr obj, UIntPtr index);

		[Token(Token = "0x60006F1")]
		[Address(RVA = "0x8D84A8", Offset = "0x8D84A8", VA = "0x8D84A8")]
		public static string ovr_AchievementProgressArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60006F2")]
		[Address(RVA = "0x8D8530", Offset = "0x8D8530", VA = "0x8D8530")]
		private static extern IntPtr ovr_AchievementProgressArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006F3")]
		[Address(RVA = "0x8D8618", Offset = "0x8D8618", VA = "0x8D8618")]
		public static extern UIntPtr ovr_AchievementProgressArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006F4")]
		[Address(RVA = "0x8D8700", Offset = "0x8D8700", VA = "0x8D8700")]
		public static extern bool ovr_AchievementProgressArray_HasNextPage(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006F5")]
		[Address(RVA = "0x8D87F8", Offset = "0x8D87F8", VA = "0x8D87F8")]
		public static extern bool ovr_AchievementUpdate_GetJustUnlocked(IntPtr obj);

		[Token(Token = "0x60006F6")]
		[Address(RVA = "0x8D88E8", Offset = "0x8D88E8", VA = "0x8D88E8")]
		public static string ovr_AchievementUpdate_GetName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60006F7")]
		[Address(RVA = "0x8D8970", Offset = "0x8D8970", VA = "0x8D8970")]
		private static extern IntPtr ovr_AchievementUpdate_GetName_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006F8")]
		[Address(RVA = "0x8D8A50", Offset = "0x8D8A50", VA = "0x8D8A50")]
		public static extern ulong ovr_Application_GetID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006F9")]
		[Address(RVA = "0x8D8B60", Offset = "0x8D8B60", VA = "0x8D8B60")]
		public static extern int ovr_ApplicationVersion_GetCurrentCode(IntPtr obj);

		[Token(Token = "0x60006FA")]
		[Address(RVA = "0x8D8C48", Offset = "0x8D8C48", VA = "0x8D8C48")]
		public static string ovr_ApplicationVersion_GetCurrentName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60006FB")]
		[Address(RVA = "0x8D8CD0", Offset = "0x8D8CD0", VA = "0x8D8CD0")]
		private static extern IntPtr ovr_ApplicationVersion_GetCurrentName_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006FC")]
		[Address(RVA = "0x8D8DB8", Offset = "0x8D8DB8", VA = "0x8D8DB8")]
		public static extern int ovr_ApplicationVersion_GetLatestCode(IntPtr obj);

		[Token(Token = "0x60006FD")]
		[Address(RVA = "0x8D8EA0", Offset = "0x8D8EA0", VA = "0x8D8EA0")]
		public static string ovr_ApplicationVersion_GetLatestName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60006FE")]
		[Address(RVA = "0x8D8F28", Offset = "0x8D8F28", VA = "0x8D8F28")]
		private static extern IntPtr ovr_ApplicationVersion_GetLatestName_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006FF")]
		[Address(RVA = "0x8D9010", Offset = "0x8D9010", VA = "0x8D9010")]
		public static extern ulong ovr_AssetDetails_GetAssetId(IntPtr obj);

		[Token(Token = "0x6000700")]
		[Address(RVA = "0x8D90EC", Offset = "0x8D90EC", VA = "0x8D90EC")]
		public static string ovr_AssetDetails_GetAssetType(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000701")]
		[Address(RVA = "0x8D9170", Offset = "0x8D9170", VA = "0x8D9170")]
		private static extern IntPtr ovr_AssetDetails_GetAssetType_Native(IntPtr obj);

		[Token(Token = "0x6000702")]
		[Address(RVA = "0x8D9250", Offset = "0x8D9250", VA = "0x8D9250")]
		public static string ovr_AssetDetails_GetDownloadStatus(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000703")]
		[Address(RVA = "0x8D92D8", Offset = "0x8D92D8", VA = "0x8D92D8")]
		private static extern IntPtr ovr_AssetDetails_GetDownloadStatus_Native(IntPtr obj);

		[Token(Token = "0x6000704")]
		[Address(RVA = "0x8D93BC", Offset = "0x8D93BC", VA = "0x8D93BC")]
		public static string ovr_AssetDetails_GetFilepath(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000705")]
		[Address(RVA = "0x8D9440", Offset = "0x8D9440", VA = "0x8D9440")]
		private static extern IntPtr ovr_AssetDetails_GetFilepath_Native(IntPtr obj);

		[Token(Token = "0x6000706")]
		[Address(RVA = "0x8D9520", Offset = "0x8D9520", VA = "0x8D9520")]
		public static string ovr_AssetDetails_GetIapStatus(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000707")]
		[Address(RVA = "0x8D95A8", Offset = "0x8D95A8", VA = "0x8D95A8")]
		private static extern IntPtr ovr_AssetDetails_GetIapStatus_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000708")]
		[Address(RVA = "0x8D9688", Offset = "0x8D9688", VA = "0x8D9688")]
		public static extern IntPtr ovr_AssetDetails_GetLanguage(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000709")]
		[Address(RVA = "0x8D9768", Offset = "0x8D9768", VA = "0x8D9768")]
		public static extern IntPtr ovr_AssetDetailsArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Token(Token = "0x600070A")]
		[Address(RVA = "0x8D9858", Offset = "0x8D9858", VA = "0x8D9858")]
		public static extern UIntPtr ovr_AssetDetailsArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600070B")]
		[Address(RVA = "0x8D9938", Offset = "0x8D9938", VA = "0x8D9938")]
		public static extern ulong ovr_AssetFileDeleteResult_GetAssetFileId(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600070C")]
		[Address(RVA = "0x8D9A28", Offset = "0x8D9A28", VA = "0x8D9A28")]
		public static extern ulong ovr_AssetFileDeleteResult_GetAssetId(IntPtr obj);

		[Token(Token = "0x600070D")]
		[Address(RVA = "0x8D9B10", Offset = "0x8D9B10", VA = "0x8D9B10")]
		public static string ovr_AssetFileDeleteResult_GetFilepath(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600070E")]
		[Address(RVA = "0x8D9B98", Offset = "0x8D9B98", VA = "0x8D9B98")]
		private static extern IntPtr ovr_AssetFileDeleteResult_GetFilepath_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600070F")]
		[Address(RVA = "0x8D9C80", Offset = "0x8D9C80", VA = "0x8D9C80")]
		public static extern bool ovr_AssetFileDeleteResult_GetSuccess(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000710")]
		[Address(RVA = "0x8D9D70", Offset = "0x8D9D70", VA = "0x8D9D70")]
		public static extern ulong ovr_AssetFileDownloadCancelResult_GetAssetFileId(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000711")]
		[Address(RVA = "0x8D9E68", Offset = "0x8D9E68", VA = "0x8D9E68")]
		public static extern ulong ovr_AssetFileDownloadCancelResult_GetAssetId(IntPtr obj);

		[Token(Token = "0x6000712")]
		[Address(RVA = "0x8D9F58", Offset = "0x8D9F58", VA = "0x8D9F58")]
		public static string ovr_AssetFileDownloadCancelResult_GetFilepath(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000713")]
		[Address(RVA = "0x8D9FE0", Offset = "0x8D9FE0", VA = "0x8D9FE0")]
		private static extern IntPtr ovr_AssetFileDownloadCancelResult_GetFilepath_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000714")]
		[Address(RVA = "0x8DA0D0", Offset = "0x8DA0D0", VA = "0x8DA0D0")]
		public static extern bool ovr_AssetFileDownloadCancelResult_GetSuccess(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000715")]
		[Address(RVA = "0x8DA1C8", Offset = "0x8DA1C8", VA = "0x8DA1C8")]
		public static extern ulong ovr_AssetFileDownloadResult_GetAssetId(IntPtr obj);

		[Token(Token = "0x6000716")]
		[Address(RVA = "0x8DA2B0", Offset = "0x8DA2B0", VA = "0x8DA2B0")]
		public static string ovr_AssetFileDownloadResult_GetFilepath(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000717")]
		[Address(RVA = "0x8DA338", Offset = "0x8DA338", VA = "0x8DA338")]
		private static extern IntPtr ovr_AssetFileDownloadResult_GetFilepath_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000718")]
		[Address(RVA = "0x8DA420", Offset = "0x8DA420", VA = "0x8DA420")]
		public static extern ulong ovr_AssetFileDownloadUpdate_GetAssetFileId(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000719")]
		[Address(RVA = "0x8DA510", Offset = "0x8DA510", VA = "0x8DA510")]
		public static extern ulong ovr_AssetFileDownloadUpdate_GetAssetId(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600071A")]
		[Address(RVA = "0x8DA5F8", Offset = "0x8DA5F8", VA = "0x8DA5F8")]
		public static extern uint ovr_AssetFileDownloadUpdate_GetBytesTotal(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600071B")]
		[Address(RVA = "0x8DA6E8", Offset = "0x8DA6E8", VA = "0x8DA6E8")]
		public static extern int ovr_AssetFileDownloadUpdate_GetBytesTransferred(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600071C")]
		[Address(RVA = "0x8DA7D8", Offset = "0x8DA7D8", VA = "0x8DA7D8")]
		public static extern bool ovr_AssetFileDownloadUpdate_GetCompleted(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600071D")]
		[Address(RVA = "0x8DA8D0", Offset = "0x8DA8D0", VA = "0x8DA8D0")]
		public static extern int ovr_CalApplicationFinalized_GetCountdownMS(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600071E")]
		[Address(RVA = "0x8DA9C0", Offset = "0x8DA9C0", VA = "0x8DA9C0")]
		public static extern ulong ovr_CalApplicationFinalized_GetID(IntPtr obj);

		[Token(Token = "0x600071F")]
		[Address(RVA = "0x8DAAA4", Offset = "0x8DAAA4", VA = "0x8DAAA4")]
		public static string ovr_CalApplicationFinalized_GetLaunchDetails(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000720")]
		[Address(RVA = "0x8DAB28", Offset = "0x8DAB28", VA = "0x8DAB28")]
		private static extern IntPtr ovr_CalApplicationFinalized_GetLaunchDetails_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000721")]
		[Address(RVA = "0x8DAC18", Offset = "0x8DAC18", VA = "0x8DAC18")]
		public static extern ulong ovr_CalApplicationProposed_GetID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000722")]
		[Address(RVA = "0x8DAD00", Offset = "0x8DAD00", VA = "0x8DAD00")]
		public static extern ulong ovr_CalApplicationSuggestion_GetID(IntPtr obj);

		[Token(Token = "0x6000723")]
		[Address(RVA = "0x8DADE4", Offset = "0x8DADE4", VA = "0x8DADE4")]
		public static string ovr_CalApplicationSuggestion_GetSocialContext(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000724")]
		[Address(RVA = "0x8DAE68", Offset = "0x8DAE68", VA = "0x8DAE68")]
		private static extern IntPtr ovr_CalApplicationSuggestion_GetSocialContext_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000725")]
		[Address(RVA = "0x8DAF58", Offset = "0x8DAF58", VA = "0x8DAF58")]
		public static extern IntPtr ovr_CalApplicationSuggestionArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Token(Token = "0x6000726")]
		[Address(RVA = "0x8DB050", Offset = "0x8DB050", VA = "0x8DB050")]
		public static extern UIntPtr ovr_CalApplicationSuggestionArray_GetSize(IntPtr obj);

		[Token(Token = "0x6000727")]
		[Address(RVA = "0x8DB13C", Offset = "0x8DB13C", VA = "0x8DB13C")]
		public static string ovr_CloudStorage2UserDirectoryPathResponse_GetPath(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000728")]
		[Address(RVA = "0x8DB1C0", Offset = "0x8DB1C0", VA = "0x8DB1C0")]
		private static extern IntPtr ovr_CloudStorage2UserDirectoryPathResponse_GetPath_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000729")]
		[Address(RVA = "0x8DB2B8", Offset = "0x8DB2B8", VA = "0x8DB2B8")]
		public static extern IntPtr ovr_CloudStorageConflictMetadata_GetLocal(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600072A")]
		[Address(RVA = "0x8DB3A8", Offset = "0x8DB3A8", VA = "0x8DB3A8")]
		public static extern IntPtr ovr_CloudStorageConflictMetadata_GetRemote(IntPtr obj);

		[Token(Token = "0x600072B")]
		[Address(RVA = "0x8DB494", Offset = "0x8DB494", VA = "0x8DB494")]
		public static string ovr_CloudStorageData_GetBucket(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600072C")]
		[Address(RVA = "0x8DB518", Offset = "0x8DB518", VA = "0x8DB518")]
		private static extern IntPtr ovr_CloudStorageData_GetBucket_Native(IntPtr obj);

		[Token(Token = "0x600072D")]
		[Address(RVA = "0x8DB5F8", Offset = "0x8DB5F8", VA = "0x8DB5F8")]
		public static byte[] ovr_CloudStorageData_GetData(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600072E")]
		[Address(RVA = "0x8DB778", Offset = "0x8DB778", VA = "0x8DB778")]
		private static extern IntPtr ovr_CloudStorageData_GetData_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600072F")]
		[Address(RVA = "0x8DB690", Offset = "0x8DB690", VA = "0x8DB690")]
		public static extern uint ovr_CloudStorageData_GetDataSize(IntPtr obj);

		[Token(Token = "0x6000730")]
		[Address(RVA = "0x8DB858", Offset = "0x8DB858", VA = "0x8DB858")]
		public static string ovr_CloudStorageData_GetKey(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000731")]
		[Address(RVA = "0x8DB8E0", Offset = "0x8DB8E0", VA = "0x8DB8E0")]
		private static extern IntPtr ovr_CloudStorageData_GetKey_Native(IntPtr obj);

		[Token(Token = "0x6000732")]
		[Address(RVA = "0x8DB9BC", Offset = "0x8DB9BC", VA = "0x8DB9BC")]
		public static string ovr_CloudStorageMetadata_GetBucket(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000733")]
		[Address(RVA = "0x8DBA40", Offset = "0x8DBA40", VA = "0x8DBA40")]
		private static extern IntPtr ovr_CloudStorageMetadata_GetBucket_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000734")]
		[Address(RVA = "0x8DBB28", Offset = "0x8DBB28", VA = "0x8DBB28")]
		public static extern long ovr_CloudStorageMetadata_GetCounter(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000735")]
		[Address(RVA = "0x8DBC10", Offset = "0x8DBC10", VA = "0x8DBC10")]
		public static extern uint ovr_CloudStorageMetadata_GetDataSize(IntPtr obj);

		[Token(Token = "0x6000736")]
		[Address(RVA = "0x8DBCF8", Offset = "0x8DBCF8", VA = "0x8DBCF8")]
		public static string ovr_CloudStorageMetadata_GetExtraData(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000737")]
		[Address(RVA = "0x8DBD80", Offset = "0x8DBD80", VA = "0x8DBD80")]
		private static extern IntPtr ovr_CloudStorageMetadata_GetExtraData_Native(IntPtr obj);

		[Token(Token = "0x6000738")]
		[Address(RVA = "0x8DBE68", Offset = "0x8DBE68", VA = "0x8DBE68")]
		public static string ovr_CloudStorageMetadata_GetKey(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000739")]
		[Address(RVA = "0x8DBEF0", Offset = "0x8DBEF0", VA = "0x8DBEF0")]
		private static extern IntPtr ovr_CloudStorageMetadata_GetKey_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600073A")]
		[Address(RVA = "0x8DBFD0", Offset = "0x8DBFD0", VA = "0x8DBFD0")]
		public static extern ulong ovr_CloudStorageMetadata_GetSaveTime(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600073B")]
		[Address(RVA = "0x8DC0B8", Offset = "0x8DC0B8", VA = "0x8DC0B8")]
		public static extern CloudStorageDataStatus ovr_CloudStorageMetadata_GetStatus(IntPtr obj);

		[Token(Token = "0x600073C")]
		[Address(RVA = "0x8DC19C", Offset = "0x8DC19C", VA = "0x8DC19C")]
		public static string ovr_CloudStorageMetadata_GetVersionHandle(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600073D")]
		[Address(RVA = "0x8DC220", Offset = "0x8DC220", VA = "0x8DC220")]
		private static extern IntPtr ovr_CloudStorageMetadata_GetVersionHandle_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600073E")]
		[Address(RVA = "0x8DC310", Offset = "0x8DC310", VA = "0x8DC310")]
		public static extern IntPtr ovr_CloudStorageMetadataArray_GetElement(IntPtr obj, UIntPtr index);

		[Token(Token = "0x600073F")]
		[Address(RVA = "0x8DC404", Offset = "0x8DC404", VA = "0x8DC404")]
		public static string ovr_CloudStorageMetadataArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000740")]
		[Address(RVA = "0x8DC488", Offset = "0x8DC488", VA = "0x8DC488")]
		private static extern IntPtr ovr_CloudStorageMetadataArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000741")]
		[Address(RVA = "0x8DC578", Offset = "0x8DC578", VA = "0x8DC578")]
		public static extern UIntPtr ovr_CloudStorageMetadataArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000742")]
		[Address(RVA = "0x8DC660", Offset = "0x8DC660", VA = "0x8DC660")]
		public static extern bool ovr_CloudStorageMetadataArray_HasNextPage(IntPtr obj);

		[Token(Token = "0x6000743")]
		[Address(RVA = "0x8DC754", Offset = "0x8DC754", VA = "0x8DC754")]
		public static string ovr_CloudStorageUpdateResponse_GetBucket(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000744")]
		[Address(RVA = "0x8DC7D8", Offset = "0x8DC7D8", VA = "0x8DC7D8")]
		private static extern IntPtr ovr_CloudStorageUpdateResponse_GetBucket_Native(IntPtr obj);

		[Token(Token = "0x6000745")]
		[Address(RVA = "0x8DC8C4", Offset = "0x8DC8C4", VA = "0x8DC8C4")]
		public static string ovr_CloudStorageUpdateResponse_GetKey(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000746")]
		[Address(RVA = "0x8DC948", Offset = "0x8DC948", VA = "0x8DC948")]
		private static extern IntPtr ovr_CloudStorageUpdateResponse_GetKey_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000747")]
		[Address(RVA = "0x8DCA30", Offset = "0x8DCA30", VA = "0x8DCA30")]
		public static extern CloudStorageUpdateStatus ovr_CloudStorageUpdateResponse_GetStatus(IntPtr obj);

		[Token(Token = "0x6000748")]
		[Address(RVA = "0x8DCB1C", Offset = "0x8DCB1C", VA = "0x8DCB1C")]
		public static string ovr_CloudStorageUpdateResponse_GetVersionHandle(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000749")]
		[Address(RVA = "0x8DCBA0", Offset = "0x8DCBA0", VA = "0x8DCBA0")]
		private static extern IntPtr ovr_CloudStorageUpdateResponse_GetVersionHandle_Native(IntPtr obj);

		[Token(Token = "0x600074A")]
		[Address(RVA = "0x8DCC90", Offset = "0x8DCC90", VA = "0x8DCC90")]
		public static uint ovr_DataStore_Contains(IntPtr obj, string key)
		{
			return default(uint);
		}

		[PreserveSig]
		[Token(Token = "0x600074B")]
		[Address(RVA = "0x8DCD68", Offset = "0x8DCD68", VA = "0x8DCD68")]
		private static extern uint ovr_DataStore_Contains_Native(IntPtr obj, IntPtr key);

		[Token(Token = "0x600074C")]
		[Address(RVA = "0x8C8078", Offset = "0x8C8078", VA = "0x8C8078")]
		public static string ovr_DataStore_GetKey(IntPtr obj, int index)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600074D")]
		[Address(RVA = "0x8DCE48", Offset = "0x8DCE48", VA = "0x8DCE48")]
		private static extern IntPtr ovr_DataStore_GetKey_Native(IntPtr obj, int index);

		[PreserveSig]
		[Token(Token = "0x600074E")]
		[Address(RVA = "0x8C7F60", Offset = "0x8C7F60", VA = "0x8C7F60")]
		public static extern UIntPtr ovr_DataStore_GetNumKeys(IntPtr obj);

		[Token(Token = "0x600074F")]
		[Address(RVA = "0x8C8104", Offset = "0x8C8104", VA = "0x8C8104")]
		public static string ovr_DataStore_GetValue(IntPtr obj, string key)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000750")]
		[Address(RVA = "0x8DCF28", Offset = "0x8DCF28", VA = "0x8DCF28")]
		private static extern IntPtr ovr_DataStore_GetValue_Native(IntPtr obj, IntPtr key);

		[PreserveSig]
		[Token(Token = "0x6000751")]
		[Address(RVA = "0x8DD008", Offset = "0x8DD008", VA = "0x8DD008")]
		public static extern int ovr_Error_GetCode(IntPtr obj);

		[Token(Token = "0x6000752")]
		[Address(RVA = "0x8DD110", Offset = "0x8DD110", VA = "0x8DD110")]
		public static string ovr_Error_GetDisplayableMessage(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000753")]
		[Address(RVA = "0x8DD198", Offset = "0x8DD198", VA = "0x8DD198")]
		private static extern IntPtr ovr_Error_GetDisplayableMessage_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000754")]
		[Address(RVA = "0x8DD278", Offset = "0x8DD278", VA = "0x8DD278")]
		public static extern int ovr_Error_GetHttpCode(IntPtr obj);

		[Token(Token = "0x6000755")]
		[Address(RVA = "0x8DD388", Offset = "0x8DD388", VA = "0x8DD388")]
		public static string ovr_Error_GetMessage(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000756")]
		[Address(RVA = "0x8DD410", Offset = "0x8DD410", VA = "0x8DD410")]
		private static extern IntPtr ovr_Error_GetMessage_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000757")]
		[Address(RVA = "0x8DD4E8", Offset = "0x8DD4E8", VA = "0x8DD4E8")]
		public static extern IntPtr ovr_HttpTransferUpdate_GetBytes(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000758")]
		[Address(RVA = "0x8DD5C8", Offset = "0x8DD5C8", VA = "0x8DD5C8")]
		public static extern ulong ovr_HttpTransferUpdate_GetID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000759")]
		[Address(RVA = "0x8DD6A8", Offset = "0x8DD6A8", VA = "0x8DD6A8")]
		public static extern UIntPtr ovr_HttpTransferUpdate_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600075A")]
		[Address(RVA = "0x8DD788", Offset = "0x8DD788", VA = "0x8DD788")]
		public static extern bool ovr_HttpTransferUpdate_IsCompleted(IntPtr obj);

		[Token(Token = "0x600075B")]
		[Address(RVA = "0x8DD874", Offset = "0x8DD874", VA = "0x8DD874")]
		public static string ovr_InstalledApplication_GetApplicationId(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600075C")]
		[Address(RVA = "0x8DD8F8", Offset = "0x8DD8F8", VA = "0x8DD8F8")]
		private static extern IntPtr ovr_InstalledApplication_GetApplicationId_Native(IntPtr obj);

		[Token(Token = "0x600075D")]
		[Address(RVA = "0x8DD9E4", Offset = "0x8DD9E4", VA = "0x8DD9E4")]
		public static string ovr_InstalledApplication_GetPackageName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600075E")]
		[Address(RVA = "0x8DDA68", Offset = "0x8DDA68", VA = "0x8DDA68")]
		private static extern IntPtr ovr_InstalledApplication_GetPackageName_Native(IntPtr obj);

		[Token(Token = "0x600075F")]
		[Address(RVA = "0x8DDB50", Offset = "0x8DDB50", VA = "0x8DDB50")]
		public static string ovr_InstalledApplication_GetStatus(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000760")]
		[Address(RVA = "0x8DDBD8", Offset = "0x8DDBD8", VA = "0x8DDBD8")]
		private static extern IntPtr ovr_InstalledApplication_GetStatus_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000761")]
		[Address(RVA = "0x8DDCC0", Offset = "0x8DDCC0", VA = "0x8DDCC0")]
		public static extern int ovr_InstalledApplication_GetVersionCode(IntPtr obj);

		[Token(Token = "0x6000762")]
		[Address(RVA = "0x8DDDA8", Offset = "0x8DDDA8", VA = "0x8DDDA8")]
		public static string ovr_InstalledApplication_GetVersionName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000763")]
		[Address(RVA = "0x8DDE30", Offset = "0x8DDE30", VA = "0x8DDE30")]
		private static extern IntPtr ovr_InstalledApplication_GetVersionName_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000764")]
		[Address(RVA = "0x8DDF18", Offset = "0x8DDF18", VA = "0x8DDF18")]
		public static extern IntPtr ovr_InstalledApplicationArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Token(Token = "0x6000765")]
		[Address(RVA = "0x8DE010", Offset = "0x8DE010", VA = "0x8DE010")]
		public static extern UIntPtr ovr_InstalledApplicationArray_GetSize(IntPtr obj);

		[Token(Token = "0x6000766")]
		[Address(RVA = "0x8DE0F8", Offset = "0x8DE0F8", VA = "0x8DE0F8")]
		public static string ovr_LanguagePackInfo_GetEnglishName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000767")]
		[Address(RVA = "0x8DE180", Offset = "0x8DE180", VA = "0x8DE180")]
		private static extern IntPtr ovr_LanguagePackInfo_GetEnglishName_Native(IntPtr obj);

		[Token(Token = "0x6000768")]
		[Address(RVA = "0x8DE264", Offset = "0x8DE264", VA = "0x8DE264")]
		public static string ovr_LanguagePackInfo_GetNativeName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000769")]
		[Address(RVA = "0x8DE2E8", Offset = "0x8DE2E8", VA = "0x8DE2E8")]
		private static extern IntPtr ovr_LanguagePackInfo_GetNativeName_Native(IntPtr obj);

		[Token(Token = "0x600076A")]
		[Address(RVA = "0x8DE3CC", Offset = "0x8DE3CC", VA = "0x8DE3CC")]
		public static string ovr_LanguagePackInfo_GetTag(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600076B")]
		[Address(RVA = "0x8DE450", Offset = "0x8DE450", VA = "0x8DE450")]
		private static extern IntPtr ovr_LanguagePackInfo_GetTag_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600076C")]
		[Address(RVA = "0x8DE530", Offset = "0x8DE530", VA = "0x8DE530")]
		public static extern bool ovr_LaunchBlockFlowResult_GetDidBlock(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600076D")]
		[Address(RVA = "0x8DE620", Offset = "0x8DE620", VA = "0x8DE620")]
		public static extern bool ovr_LaunchBlockFlowResult_GetDidCancel(IntPtr obj);

		[Token(Token = "0x600076E")]
		[Address(RVA = "0x8DE710", Offset = "0x8DE710", VA = "0x8DE710")]
		public static string ovr_LaunchDetails_GetDeeplinkMessage(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600076F")]
		[Address(RVA = "0x8DE798", Offset = "0x8DE798", VA = "0x8DE798")]
		private static extern IntPtr ovr_LaunchDetails_GetDeeplinkMessage_Native(IntPtr obj);

		[Token(Token = "0x6000770")]
		[Address(RVA = "0x8DE880", Offset = "0x8DE880", VA = "0x8DE880")]
		public static string ovr_LaunchDetails_GetLaunchSource(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000771")]
		[Address(RVA = "0x8DE908", Offset = "0x8DE908", VA = "0x8DE908")]
		private static extern IntPtr ovr_LaunchDetails_GetLaunchSource_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000772")]
		[Address(RVA = "0x8DE9F0", Offset = "0x8DE9F0", VA = "0x8DE9F0")]
		public static extern LaunchType ovr_LaunchDetails_GetLaunchType(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000773")]
		[Address(RVA = "0x8DEAD0", Offset = "0x8DEAD0", VA = "0x8DEAD0")]
		public static extern ulong ovr_LaunchDetails_GetRoomID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000774")]
		[Address(RVA = "0x8DEBB0", Offset = "0x8DEBB0", VA = "0x8DEBB0")]
		public static extern IntPtr ovr_LaunchDetails_GetUsers(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000775")]
		[Address(RVA = "0x8DEC90", Offset = "0x8DEC90", VA = "0x8DEC90")]
		public static extern bool ovr_LaunchFriendRequestFlowResult_GetDidCancel(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000776")]
		[Address(RVA = "0x8DED88", Offset = "0x8DED88", VA = "0x8DED88")]
		public static extern bool ovr_LaunchFriendRequestFlowResult_GetDidSendRequest(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000777")]
		[Address(RVA = "0x8DEE88", Offset = "0x8DEE88", VA = "0x8DEE88")]
		public static extern bool ovr_LaunchReportFlowResult_GetDidCancel(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000778")]
		[Address(RVA = "0x8DEF78", Offset = "0x8DEF78", VA = "0x8DEF78")]
		public static extern ulong ovr_LaunchReportFlowResult_GetUserReportId(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000779")]
		[Address(RVA = "0x8DF068", Offset = "0x8DF068", VA = "0x8DF068")]
		public static extern bool ovr_LaunchUnblockFlowResult_GetDidCancel(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600077A")]
		[Address(RVA = "0x8DF160", Offset = "0x8DF160", VA = "0x8DF160")]
		public static extern bool ovr_LaunchUnblockFlowResult_GetDidUnblock(IntPtr obj);

		[Token(Token = "0x600077B")]
		[Address(RVA = "0x8DF254", Offset = "0x8DF254", VA = "0x8DF254")]
		public static byte[] ovr_LeaderboardEntry_GetExtraData(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600077C")]
		[Address(RVA = "0x8DF3D8", Offset = "0x8DF3D8", VA = "0x8DF3D8")]
		private static extern IntPtr ovr_LeaderboardEntry_GetExtraData_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600077D")]
		[Address(RVA = "0x8DF2F0", Offset = "0x8DF2F0", VA = "0x8DF2F0")]
		public static extern uint ovr_LeaderboardEntry_GetExtraDataLength(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600077E")]
		[Address(RVA = "0x8DF4C0", Offset = "0x8DF4C0", VA = "0x8DF4C0")]
		public static extern int ovr_LeaderboardEntry_GetRank(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600077F")]
		[Address(RVA = "0x8DF5A0", Offset = "0x8DF5A0", VA = "0x8DF5A0")]
		public static extern long ovr_LeaderboardEntry_GetScore(IntPtr obj);

		[Token(Token = "0x6000780")]
		[Address(RVA = "0x8DF680", Offset = "0x8DF680", VA = "0x8DF680")]
		public static DateTime ovr_LeaderboardEntry_GetTimestamp(IntPtr obj)
		{
			return default(DateTime);
		}

		[PreserveSig]
		[Token(Token = "0x6000781")]
		[Address(RVA = "0x8DF720", Offset = "0x8DF720", VA = "0x8DF720")]
		private static extern ulong ovr_LeaderboardEntry_GetTimestamp_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000782")]
		[Address(RVA = "0x8DF808", Offset = "0x8DF808", VA = "0x8DF808")]
		public static extern IntPtr ovr_LeaderboardEntry_GetUser(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000783")]
		[Address(RVA = "0x8DF8E8", Offset = "0x8DF8E8", VA = "0x8DF8E8")]
		public static extern IntPtr ovr_LeaderboardEntryArray_GetElement(IntPtr obj, UIntPtr index);

		[Token(Token = "0x6000784")]
		[Address(RVA = "0x8DF9D8", Offset = "0x8DF9D8", VA = "0x8DF9D8")]
		public static string ovr_LeaderboardEntryArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000785")]
		[Address(RVA = "0x8DFA60", Offset = "0x8DFA60", VA = "0x8DFA60")]
		private static extern IntPtr ovr_LeaderboardEntryArray_GetNextUrl_Native(IntPtr obj);

		[Token(Token = "0x6000786")]
		[Address(RVA = "0x8DFB48", Offset = "0x8DFB48", VA = "0x8DFB48")]
		public static string ovr_LeaderboardEntryArray_GetPreviousUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000787")]
		[Address(RVA = "0x8DFBD0", Offset = "0x8DFBD0", VA = "0x8DFBD0")]
		private static extern IntPtr ovr_LeaderboardEntryArray_GetPreviousUrl_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000788")]
		[Address(RVA = "0x8DFCC0", Offset = "0x8DFCC0", VA = "0x8DFCC0")]
		public static extern UIntPtr ovr_LeaderboardEntryArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000789")]
		[Address(RVA = "0x8DFDA8", Offset = "0x8DFDA8", VA = "0x8DFDA8")]
		public static extern ulong ovr_LeaderboardEntryArray_GetTotalCount(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600078A")]
		[Address(RVA = "0x8DFE90", Offset = "0x8DFE90", VA = "0x8DFE90")]
		public static extern bool ovr_LeaderboardEntryArray_HasNextPage(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600078B")]
		[Address(RVA = "0x8DFF80", Offset = "0x8DFF80", VA = "0x8DFF80")]
		public static extern bool ovr_LeaderboardEntryArray_HasPreviousPage(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600078C")]
		[Address(RVA = "0x8E0078", Offset = "0x8E0078", VA = "0x8E0078")]
		public static extern bool ovr_LeaderboardUpdateStatus_GetDidUpdate(IntPtr obj);

		[Token(Token = "0x600078D")]
		[Address(RVA = "0x8E016C", Offset = "0x8E016C", VA = "0x8E016C")]
		public static string ovr_LinkedAccount_GetAccessToken(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600078E")]
		[Address(RVA = "0x8E01F0", Offset = "0x8E01F0", VA = "0x8E01F0")]
		private static extern IntPtr ovr_LinkedAccount_GetAccessToken_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600078F")]
		[Address(RVA = "0x8E02D8", Offset = "0x8E02D8", VA = "0x8E02D8")]
		public static extern ServiceProvider ovr_LinkedAccount_GetServiceProvider(IntPtr obj);

		[Token(Token = "0x6000790")]
		[Address(RVA = "0x8E03C0", Offset = "0x8E03C0", VA = "0x8E03C0")]
		public static string ovr_LinkedAccount_GetUserId(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000791")]
		[Address(RVA = "0x8E0448", Offset = "0x8E0448", VA = "0x8E0448")]
		private static extern IntPtr ovr_LinkedAccount_GetUserId_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000792")]
		[Address(RVA = "0x8E0528", Offset = "0x8E0528", VA = "0x8E0528")]
		public static extern IntPtr ovr_LinkedAccountArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Token(Token = "0x6000793")]
		[Address(RVA = "0x8E0618", Offset = "0x8E0618", VA = "0x8E0618")]
		public static extern UIntPtr ovr_LinkedAccountArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000794")]
		[Address(RVA = "0x8E06F8", Offset = "0x8E06F8", VA = "0x8E06F8")]
		public static extern bool ovr_LivestreamingApplicationStatus_GetStreamingEnabled(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000795")]
		[Address(RVA = "0x8E07F8", Offset = "0x8E07F8", VA = "0x8E07F8")]
		public static extern LivestreamingStartStatus ovr_LivestreamingStartResult_GetStreamingResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000796")]
		[Address(RVA = "0x8E08E8", Offset = "0x8E08E8", VA = "0x8E08E8")]
		public static extern bool ovr_LivestreamingStatus_GetCommentsVisible(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000797")]
		[Address(RVA = "0x8E09E0", Offset = "0x8E09E0", VA = "0x8E09E0")]
		public static extern bool ovr_LivestreamingStatus_GetIsPaused(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000798")]
		[Address(RVA = "0x8E0AD0", Offset = "0x8E0AD0", VA = "0x8E0AD0")]
		public static extern bool ovr_LivestreamingStatus_GetLivestreamingEnabled(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000799")]
		[Address(RVA = "0x8E0BC8", Offset = "0x8E0BC8", VA = "0x8E0BC8")]
		public static extern int ovr_LivestreamingStatus_GetLivestreamingType(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600079A")]
		[Address(RVA = "0x8E0CB8", Offset = "0x8E0CB8", VA = "0x8E0CB8")]
		public static extern bool ovr_LivestreamingStatus_GetMicEnabled(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600079B")]
		[Address(RVA = "0x8E0DA8", Offset = "0x8E0DA8", VA = "0x8E0DA8")]
		public static extern int ovr_LivestreamingVideoStats_GetCommentCount(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600079C")]
		[Address(RVA = "0x8E0E98", Offset = "0x8E0E98", VA = "0x8E0E98")]
		public static extern int ovr_LivestreamingVideoStats_GetReactionCount(IntPtr obj);

		[Token(Token = "0x600079D")]
		[Address(RVA = "0x8E0F88", Offset = "0x8E0F88", VA = "0x8E0F88")]
		public static string ovr_LivestreamingVideoStats_GetTotalViews(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600079E")]
		[Address(RVA = "0x8E1010", Offset = "0x8E1010", VA = "0x8E1010")]
		private static extern IntPtr ovr_LivestreamingVideoStats_GetTotalViews_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600079F")]
		[Address(RVA = "0x8E1100", Offset = "0x8E1100", VA = "0x8E1100")]
		public static extern IntPtr ovr_MatchmakingAdminSnapshot_GetCandidates(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007A0")]
		[Address(RVA = "0x8E11F0", Offset = "0x8E11F0", VA = "0x8E11F0")]
		public static extern double ovr_MatchmakingAdminSnapshot_GetMyCurrentThreshold(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007A1")]
		[Address(RVA = "0x8E12E8", Offset = "0x8E12E8", VA = "0x8E12E8")]
		public static extern bool ovr_MatchmakingAdminSnapshotCandidate_GetCanMatch(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007A2")]
		[Address(RVA = "0x8E13E8", Offset = "0x8E13E8", VA = "0x8E13E8")]
		public static extern double ovr_MatchmakingAdminSnapshotCandidate_GetMyTotalScore(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007A3")]
		[Address(RVA = "0x8E14E0", Offset = "0x8E14E0", VA = "0x8E14E0")]
		public static extern double ovr_MatchmakingAdminSnapshotCandidate_GetTheirCurrentThreshold(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007A4")]
		[Address(RVA = "0x8E15E0", Offset = "0x8E15E0", VA = "0x8E15E0")]
		public static extern double ovr_MatchmakingAdminSnapshotCandidate_GetTheirTotalScore(IntPtr obj);

		[Token(Token = "0x60007A5")]
		[Address(RVA = "0x8E16DC", Offset = "0x8E16DC", VA = "0x8E16DC")]
		public static string ovr_MatchmakingAdminSnapshotCandidate_GetTraceId(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60007A6")]
		[Address(RVA = "0x8E1760", Offset = "0x8E1760", VA = "0x8E1760")]
		private static extern IntPtr ovr_MatchmakingAdminSnapshotCandidate_GetTraceId_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007A7")]
		[Address(RVA = "0x8E1858", Offset = "0x8E1858", VA = "0x8E1858")]
		public static extern IntPtr ovr_MatchmakingAdminSnapshotCandidateArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Token(Token = "0x60007A8")]
		[Address(RVA = "0x8E1958", Offset = "0x8E1958", VA = "0x8E1958")]
		public static extern UIntPtr ovr_MatchmakingAdminSnapshotCandidateArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007A9")]
		[Address(RVA = "0x8E1A50", Offset = "0x8E1A50", VA = "0x8E1A50")]
		public static extern IntPtr ovr_MatchmakingBrowseResult_GetEnqueueResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007AA")]
		[Address(RVA = "0x8E1B40", Offset = "0x8E1B40", VA = "0x8E1B40")]
		public static extern IntPtr ovr_MatchmakingBrowseResult_GetRooms(IntPtr obj);

		[Token(Token = "0x60007AB")]
		[Address(RVA = "0x8E1C28", Offset = "0x8E1C28", VA = "0x8E1C28")]
		public static string ovr_MatchmakingCandidate_GetEntryHash(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60007AC")]
		[Address(RVA = "0x8E1CB0", Offset = "0x8E1CB0", VA = "0x8E1CB0")]
		private static extern IntPtr ovr_MatchmakingCandidate_GetEntryHash_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007AD")]
		[Address(RVA = "0x8E1D98", Offset = "0x8E1D98", VA = "0x8E1D98")]
		public static extern ulong ovr_MatchmakingCandidate_GetUserId(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007AE")]
		[Address(RVA = "0x8E1E80", Offset = "0x8E1E80", VA = "0x8E1E80")]
		public static extern IntPtr ovr_MatchmakingCandidateArray_GetElement(IntPtr obj, UIntPtr index);

		[Token(Token = "0x60007AF")]
		[Address(RVA = "0x8E1F74", Offset = "0x8E1F74", VA = "0x8E1F74")]
		public static string ovr_MatchmakingCandidateArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60007B0")]
		[Address(RVA = "0x8E1FF8", Offset = "0x8E1FF8", VA = "0x8E1FF8")]
		private static extern IntPtr ovr_MatchmakingCandidateArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007B1")]
		[Address(RVA = "0x8E20E8", Offset = "0x8E20E8", VA = "0x8E20E8")]
		public static extern UIntPtr ovr_MatchmakingCandidateArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007B2")]
		[Address(RVA = "0x8E21D0", Offset = "0x8E21D0", VA = "0x8E21D0")]
		public static extern bool ovr_MatchmakingCandidateArray_HasNextPage(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007B3")]
		[Address(RVA = "0x8E22C8", Offset = "0x8E22C8", VA = "0x8E22C8")]
		public static extern IntPtr ovr_MatchmakingEnqueueResult_GetAdminSnapshot(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007B4")]
		[Address(RVA = "0x8E23B8", Offset = "0x8E23B8", VA = "0x8E23B8")]
		public static extern uint ovr_MatchmakingEnqueueResult_GetAverageWait(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007B5")]
		[Address(RVA = "0x8E24A8", Offset = "0x8E24A8", VA = "0x8E24A8")]
		public static extern uint ovr_MatchmakingEnqueueResult_GetMatchesInLastHourCount(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007B6")]
		[Address(RVA = "0x8E25A0", Offset = "0x8E25A0", VA = "0x8E25A0")]
		public static extern uint ovr_MatchmakingEnqueueResult_GetMaxExpectedWait(IntPtr obj);

		[Token(Token = "0x60007B7")]
		[Address(RVA = "0x8E2690", Offset = "0x8E2690", VA = "0x8E2690")]
		public static string ovr_MatchmakingEnqueueResult_GetPool(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60007B8")]
		[Address(RVA = "0x8E2718", Offset = "0x8E2718", VA = "0x8E2718")]
		private static extern IntPtr ovr_MatchmakingEnqueueResult_GetPool_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007B9")]
		[Address(RVA = "0x8E2800", Offset = "0x8E2800", VA = "0x8E2800")]
		public static extern uint ovr_MatchmakingEnqueueResult_GetRecentMatchPercentage(IntPtr obj);

		[Token(Token = "0x60007BA")]
		[Address(RVA = "0x8E28F8", Offset = "0x8E28F8", VA = "0x8E28F8")]
		public static string ovr_MatchmakingEnqueueResult_GetRequestHash(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60007BB")]
		[Address(RVA = "0x8E2980", Offset = "0x8E2980", VA = "0x8E2980")]
		private static extern IntPtr ovr_MatchmakingEnqueueResult_GetRequestHash_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007BC")]
		[Address(RVA = "0x8E2A70", Offset = "0x8E2A70", VA = "0x8E2A70")]
		public static extern IntPtr ovr_MatchmakingEnqueueResultAndRoom_GetMatchmakingEnqueueResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007BD")]
		[Address(RVA = "0x8E2B70", Offset = "0x8E2B70", VA = "0x8E2B70")]
		public static extern IntPtr ovr_MatchmakingEnqueueResultAndRoom_GetRoom(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007BE")]
		[Address(RVA = "0x8E2C60", Offset = "0x8E2C60", VA = "0x8E2C60")]
		public static extern ulong ovr_MatchmakingEnqueuedUser_GetAdditionalUserID(IntPtr obj, uint index);

		[PreserveSig]
		[Token(Token = "0x60007BF")]
		[Address(RVA = "0x8E2D58", Offset = "0x8E2D58", VA = "0x8E2D58")]
		public static extern uint ovr_MatchmakingEnqueuedUser_GetAdditionalUserIDsSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007C0")]
		[Address(RVA = "0x8E2E50", Offset = "0x8E2E50", VA = "0x8E2E50")]
		public static extern IntPtr ovr_MatchmakingEnqueuedUser_GetCustomData(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007C1")]
		[Address(RVA = "0x8E2F40", Offset = "0x8E2F40", VA = "0x8E2F40")]
		public static extern IntPtr ovr_MatchmakingEnqueuedUser_GetUser(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007C2")]
		[Address(RVA = "0x8E3028", Offset = "0x8E3028", VA = "0x8E3028")]
		public static extern IntPtr ovr_MatchmakingEnqueuedUserArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Token(Token = "0x60007C3")]
		[Address(RVA = "0x8E3120", Offset = "0x8E3120", VA = "0x8E3120")]
		public static extern UIntPtr ovr_MatchmakingEnqueuedUserArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007C4")]
		[Address(RVA = "0x8E3210", Offset = "0x8E3210", VA = "0x8E3210")]
		public static extern ulong ovr_MatchmakingNotification_GetAddedByUserId(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007C5")]
		[Address(RVA = "0x8E3300", Offset = "0x8E3300", VA = "0x8E3300")]
		public static extern IntPtr ovr_MatchmakingNotification_GetRoom(IntPtr obj);

		[Token(Token = "0x60007C6")]
		[Address(RVA = "0x8E33E4", Offset = "0x8E33E4", VA = "0x8E33E4")]
		public static string ovr_MatchmakingNotification_GetTraceId(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60007C7")]
		[Address(RVA = "0x8E3468", Offset = "0x8E3468", VA = "0x8E3468")]
		private static extern IntPtr ovr_MatchmakingNotification_GetTraceId_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007C8")]
		[Address(RVA = "0x8E3550", Offset = "0x8E3550", VA = "0x8E3550")]
		public static extern uint ovr_MatchmakingRoom_GetPingTime(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007C9")]
		[Address(RVA = "0x8E3630", Offset = "0x8E3630", VA = "0x8E3630")]
		public static extern IntPtr ovr_MatchmakingRoom_GetRoom(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007CA")]
		[Address(RVA = "0x8E3710", Offset = "0x8E3710", VA = "0x8E3710")]
		public static extern bool ovr_MatchmakingRoom_HasPingTime(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007CB")]
		[Address(RVA = "0x8E37F8", Offset = "0x8E37F8", VA = "0x8E37F8")]
		public static extern IntPtr ovr_MatchmakingRoomArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Token(Token = "0x60007CC")]
		[Address(RVA = "0x8E38E8", Offset = "0x8E38E8", VA = "0x8E38E8")]
		public static extern UIntPtr ovr_MatchmakingRoomArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007CD")]
		[Address(RVA = "0x8E39D0", Offset = "0x8E39D0", VA = "0x8E39D0")]
		public static extern uint ovr_MatchmakingStats_GetDrawCount(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007CE")]
		[Address(RVA = "0x8E3AB8", Offset = "0x8E3AB8", VA = "0x8E3AB8")]
		public static extern uint ovr_MatchmakingStats_GetLossCount(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007CF")]
		[Address(RVA = "0x8E3BA0", Offset = "0x8E3BA0", VA = "0x8E3BA0")]
		public static extern uint ovr_MatchmakingStats_GetSkillLevel(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007D0")]
		[Address(RVA = "0x8E3C88", Offset = "0x8E3C88", VA = "0x8E3C88")]
		public static extern uint ovr_MatchmakingStats_GetWinCount(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007D1")]
		[Address(RVA = "0x8E3D70", Offset = "0x8E3D70", VA = "0x8E3D70")]
		public static extern IntPtr ovr_Message_GetAbuseReportRecording(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007D2")]
		[Address(RVA = "0x8E3E58", Offset = "0x8E3E58", VA = "0x8E3E58")]
		public static extern IntPtr ovr_Message_GetAchievementDefinitionArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007D3")]
		[Address(RVA = "0x8E3F48", Offset = "0x8E3F48", VA = "0x8E3F48")]
		public static extern IntPtr ovr_Message_GetAchievementProgressArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007D4")]
		[Address(RVA = "0x8E4030", Offset = "0x8E4030", VA = "0x8E4030")]
		public static extern IntPtr ovr_Message_GetAchievementUpdate(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007D5")]
		[Address(RVA = "0x8E4118", Offset = "0x8E4118", VA = "0x8E4118")]
		public static extern IntPtr ovr_Message_GetApplicationVersion(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007D6")]
		[Address(RVA = "0x8E4200", Offset = "0x8E4200", VA = "0x8E4200")]
		public static extern IntPtr ovr_Message_GetAssetDetails(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007D7")]
		[Address(RVA = "0x8E42E0", Offset = "0x8E42E0", VA = "0x8E42E0")]
		public static extern IntPtr ovr_Message_GetAssetDetailsArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007D8")]
		[Address(RVA = "0x8E43C8", Offset = "0x8E43C8", VA = "0x8E43C8")]
		public static extern IntPtr ovr_Message_GetAssetFileDeleteResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007D9")]
		[Address(RVA = "0x8E44B0", Offset = "0x8E44B0", VA = "0x8E44B0")]
		public static extern IntPtr ovr_Message_GetAssetFileDownloadCancelResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007DA")]
		[Address(RVA = "0x8E45A0", Offset = "0x8E45A0", VA = "0x8E45A0")]
		public static extern IntPtr ovr_Message_GetAssetFileDownloadResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007DB")]
		[Address(RVA = "0x8E4688", Offset = "0x8E4688", VA = "0x8E4688")]
		public static extern IntPtr ovr_Message_GetAssetFileDownloadUpdate(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007DC")]
		[Address(RVA = "0x8E4770", Offset = "0x8E4770", VA = "0x8E4770")]
		public static extern IntPtr ovr_Message_GetCalApplicationFinalized(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007DD")]
		[Address(RVA = "0x8E4858", Offset = "0x8E4858", VA = "0x8E4858")]
		public static extern IntPtr ovr_Message_GetCalApplicationProposed(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007DE")]
		[Address(RVA = "0x8E4940", Offset = "0x8E4940", VA = "0x8E4940")]
		public static extern IntPtr ovr_Message_GetCalApplicationSuggestionArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007DF")]
		[Address(RVA = "0x8E4A30", Offset = "0x8E4A30", VA = "0x8E4A30")]
		public static extern IntPtr ovr_Message_GetCloudStorageConflictMetadata(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007E0")]
		[Address(RVA = "0x8E4B20", Offset = "0x8E4B20", VA = "0x8E4B20")]
		public static extern IntPtr ovr_Message_GetCloudStorageData(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007E1")]
		[Address(RVA = "0x8E4C00", Offset = "0x8E4C00", VA = "0x8E4C00")]
		public static extern IntPtr ovr_Message_GetCloudStorageMetadata(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007E2")]
		[Address(RVA = "0x8E4CE8", Offset = "0x8E4CE8", VA = "0x8E4CE8")]
		public static extern IntPtr ovr_Message_GetCloudStorageMetadataArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007E3")]
		[Address(RVA = "0x8E4DD8", Offset = "0x8E4DD8", VA = "0x8E4DD8")]
		public static extern IntPtr ovr_Message_GetCloudStorageUpdateResponse(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007E4")]
		[Address(RVA = "0x8E4EC8", Offset = "0x8E4EC8", VA = "0x8E4EC8")]
		public static extern IntPtr ovr_Message_GetError(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007E5")]
		[Address(RVA = "0x8E4FD8", Offset = "0x8E4FD8", VA = "0x8E4FD8")]
		public static extern IntPtr ovr_Message_GetHttpTransferUpdate(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007E6")]
		[Address(RVA = "0x8E50C0", Offset = "0x8E50C0", VA = "0x8E50C0")]
		public static extern IntPtr ovr_Message_GetInstalledApplicationArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007E7")]
		[Address(RVA = "0x8E51B0", Offset = "0x8E51B0", VA = "0x8E51B0")]
		public static extern IntPtr ovr_Message_GetLaunchBlockFlowResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007E8")]
		[Address(RVA = "0x8E5298", Offset = "0x8E5298", VA = "0x8E5298")]
		public static extern IntPtr ovr_Message_GetLaunchFriendRequestFlowResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007E9")]
		[Address(RVA = "0x8E5388", Offset = "0x8E5388", VA = "0x8E5388")]
		public static extern IntPtr ovr_Message_GetLaunchReportFlowResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007EA")]
		[Address(RVA = "0x8E5470", Offset = "0x8E5470", VA = "0x8E5470")]
		public static extern IntPtr ovr_Message_GetLaunchUnblockFlowResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007EB")]
		[Address(RVA = "0x8E5558", Offset = "0x8E5558", VA = "0x8E5558")]
		public static extern IntPtr ovr_Message_GetLeaderboardEntryArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007EC")]
		[Address(RVA = "0x8E5640", Offset = "0x8E5640", VA = "0x8E5640")]
		public static extern IntPtr ovr_Message_GetLeaderboardUpdateStatus(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007ED")]
		[Address(RVA = "0x8E5728", Offset = "0x8E5728", VA = "0x8E5728")]
		public static extern IntPtr ovr_Message_GetLinkedAccountArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007EE")]
		[Address(RVA = "0x8E5810", Offset = "0x8E5810", VA = "0x8E5810")]
		public static extern IntPtr ovr_Message_GetLivestreamingApplicationStatus(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007EF")]
		[Address(RVA = "0x8E5900", Offset = "0x8E5900", VA = "0x8E5900")]
		public static extern IntPtr ovr_Message_GetLivestreamingStartResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007F0")]
		[Address(RVA = "0x8E59E8", Offset = "0x8E59E8", VA = "0x8E59E8")]
		public static extern IntPtr ovr_Message_GetLivestreamingStatus(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007F1")]
		[Address(RVA = "0x8E5AD0", Offset = "0x8E5AD0", VA = "0x8E5AD0")]
		public static extern IntPtr ovr_Message_GetLivestreamingVideoStats(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007F2")]
		[Address(RVA = "0x8E5BB8", Offset = "0x8E5BB8", VA = "0x8E5BB8")]
		public static extern IntPtr ovr_Message_GetMatchmakingAdminSnapshot(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007F3")]
		[Address(RVA = "0x8E5CA0", Offset = "0x8E5CA0", VA = "0x8E5CA0")]
		public static extern IntPtr ovr_Message_GetMatchmakingBrowseResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007F4")]
		[Address(RVA = "0x8E5D88", Offset = "0x8E5D88", VA = "0x8E5D88")]
		public static extern IntPtr ovr_Message_GetMatchmakingEnqueueResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007F5")]
		[Address(RVA = "0x8E5E70", Offset = "0x8E5E70", VA = "0x8E5E70")]
		public static extern IntPtr ovr_Message_GetMatchmakingEnqueueResultAndRoom(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007F6")]
		[Address(RVA = "0x8E5F60", Offset = "0x8E5F60", VA = "0x8E5F60")]
		public static extern IntPtr ovr_Message_GetMatchmakingRoomArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007F7")]
		[Address(RVA = "0x8E6048", Offset = "0x8E6048", VA = "0x8E6048")]
		public static extern IntPtr ovr_Message_GetMatchmakingStats(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007F8")]
		[Address(RVA = "0x8E6128", Offset = "0x8E6128", VA = "0x8E6128")]
		public static extern IntPtr ovr_Message_GetNativeMessage(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007F9")]
		[Address(RVA = "0x8E6208", Offset = "0x8E6208", VA = "0x8E6208")]
		public static extern IntPtr ovr_Message_GetNetworkingPeer(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007FA")]
		[Address(RVA = "0x8E62E8", Offset = "0x8E62E8", VA = "0x8E62E8")]
		public static extern IntPtr ovr_Message_GetOrgScopedID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007FB")]
		[Address(RVA = "0x8E63C8", Offset = "0x8E63C8", VA = "0x8E63C8")]
		public static extern IntPtr ovr_Message_GetParty(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007FC")]
		[Address(RVA = "0x8E64D8", Offset = "0x8E64D8", VA = "0x8E64D8")]
		public static extern IntPtr ovr_Message_GetPartyID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007FD")]
		[Address(RVA = "0x8E65F0", Offset = "0x8E65F0", VA = "0x8E65F0")]
		public static extern IntPtr ovr_Message_GetPartyUpdateNotification(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007FE")]
		[Address(RVA = "0x8E66D8", Offset = "0x8E66D8", VA = "0x8E66D8")]
		public static extern IntPtr ovr_Message_GetPidArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60007FF")]
		[Address(RVA = "0x8E67F0", Offset = "0x8E67F0", VA = "0x8E67F0")]
		public static extern IntPtr ovr_Message_GetPingResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000800")]
		[Address(RVA = "0x8E6908", Offset = "0x8E6908", VA = "0x8E6908")]
		public static extern IntPtr ovr_Message_GetPlatformInitialize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000801")]
		[Address(RVA = "0x8E69F0", Offset = "0x8E69F0", VA = "0x8E69F0")]
		public static extern IntPtr ovr_Message_GetProductArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000802")]
		[Address(RVA = "0x8E6AD0", Offset = "0x8E6AD0", VA = "0x8E6AD0")]
		public static extern IntPtr ovr_Message_GetPurchase(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000803")]
		[Address(RVA = "0x8E6BE8", Offset = "0x8E6BE8", VA = "0x8E6BE8")]
		public static extern IntPtr ovr_Message_GetPurchaseArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000804")]
		[Address(RVA = "0x8E6CC8", Offset = "0x8E6CC8", VA = "0x8E6CC8")]
		public static extern ulong ovr_Message_GetRequestID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000805")]
		[Address(RVA = "0x8E6DE0", Offset = "0x8E6DE0", VA = "0x8E6DE0")]
		public static extern IntPtr ovr_Message_GetRoom(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000806")]
		[Address(RVA = "0x8E6EF0", Offset = "0x8E6EF0", VA = "0x8E6EF0")]
		public static extern IntPtr ovr_Message_GetRoomArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000807")]
		[Address(RVA = "0x8E7008", Offset = "0x8E7008", VA = "0x8E7008")]
		public static extern IntPtr ovr_Message_GetRoomInviteNotification(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000808")]
		[Address(RVA = "0x8E70F0", Offset = "0x8E70F0", VA = "0x8E70F0")]
		public static extern IntPtr ovr_Message_GetRoomInviteNotificationArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000809")]
		[Address(RVA = "0x8E71E0", Offset = "0x8E71E0", VA = "0x8E71E0")]
		public static extern IntPtr ovr_Message_GetSdkAccountArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600080A")]
		[Address(RVA = "0x8E72C0", Offset = "0x8E72C0", VA = "0x8E72C0")]
		public static extern IntPtr ovr_Message_GetShareMediaResult(IntPtr obj);

		[Token(Token = "0x600080B")]
		[Address(RVA = "0x8E73A0", Offset = "0x8E73A0", VA = "0x8E73A0")]
		public static string ovr_Message_GetString(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600080C")]
		[Address(RVA = "0x8E7428", Offset = "0x8E7428", VA = "0x8E7428")]
		private static extern IntPtr ovr_Message_GetString_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600080D")]
		[Address(RVA = "0x8E7500", Offset = "0x8E7500", VA = "0x8E7500")]
		public static extern IntPtr ovr_Message_GetSystemPermission(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600080E")]
		[Address(RVA = "0x8E75E0", Offset = "0x8E75E0", VA = "0x8E75E0")]
		public static extern IntPtr ovr_Message_GetSystemVoipState(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600080F")]
		[Address(RVA = "0x8E76C0", Offset = "0x8E76C0", VA = "0x8E76C0")]
		public static extern Message.MessageType ovr_Message_GetType(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000810")]
		[Address(RVA = "0x8E77D0", Offset = "0x8E77D0", VA = "0x8E77D0")]
		public static extern IntPtr ovr_Message_GetUser(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000811")]
		[Address(RVA = "0x8E78E0", Offset = "0x8E78E0", VA = "0x8E78E0")]
		public static extern IntPtr ovr_Message_GetUserAndRoomArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000812")]
		[Address(RVA = "0x8E79C0", Offset = "0x8E79C0", VA = "0x8E79C0")]
		public static extern IntPtr ovr_Message_GetUserArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000813")]
		[Address(RVA = "0x8E7AD8", Offset = "0x8E7AD8", VA = "0x8E7AD8")]
		public static extern IntPtr ovr_Message_GetUserProof(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000814")]
		[Address(RVA = "0x8E7BF0", Offset = "0x8E7BF0", VA = "0x8E7BF0")]
		public static extern IntPtr ovr_Message_GetUserReportID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000815")]
		[Address(RVA = "0x8E7CD0", Offset = "0x8E7CD0", VA = "0x8E7CD0")]
		public static extern bool ovr_Message_IsError(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000816")]
		[Address(RVA = "0x8E7DE8", Offset = "0x8E7DE8", VA = "0x8E7DE8")]
		public static extern UIntPtr ovr_Microphone_GetNumSamplesAvailable(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000817")]
		[Address(RVA = "0x8E7ED0", Offset = "0x8E7ED0", VA = "0x8E7ED0")]
		public static extern UIntPtr ovr_Microphone_GetOutputBufferMaxSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000818")]
		[Address(RVA = "0x8E7FB8", Offset = "0x8E7FB8", VA = "0x8E7FB8")]
		public static extern UIntPtr ovr_Microphone_GetPCM(IntPtr obj, short[] outputBuffer, UIntPtr outputBufferNumElements);

		[PreserveSig]
		[Token(Token = "0x6000819")]
		[Address(RVA = "0x8E80E0", Offset = "0x8E80E0", VA = "0x8E80E0")]
		public static extern UIntPtr ovr_Microphone_GetPCMFloat(IntPtr obj, float[] outputBuffer, UIntPtr outputBufferNumElements);

		[PreserveSig]
		[Token(Token = "0x600081A")]
		[Address(RVA = "0x8E81D8", Offset = "0x8E81D8", VA = "0x8E81D8")]
		public static extern UIntPtr ovr_Microphone_ReadData(IntPtr obj, float[] outputBuffer, UIntPtr outputBufferSize);

		[PreserveSig]
		[Token(Token = "0x600081B")]
		[Address(RVA = "0x8E8308", Offset = "0x8E8308", VA = "0x8E8308")]
		public static extern void ovr_Microphone_SetAcceptableRecordingDelayHint(IntPtr obj, UIntPtr delayMs);

		[PreserveSig]
		[Token(Token = "0x600081C")]
		[Address(RVA = "0x8E8400", Offset = "0x8E8400", VA = "0x8E8400")]
		public static extern void ovr_Microphone_Start(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600081D")]
		[Address(RVA = "0x8E8510", Offset = "0x8E8510", VA = "0x8E8510")]
		public static extern void ovr_Microphone_Stop(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600081E")]
		[Address(RVA = "0x8E8620", Offset = "0x8E8620", VA = "0x8E8620")]
		public static extern ulong ovr_NetworkingPeer_GetID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600081F")]
		[Address(RVA = "0x8E8738", Offset = "0x8E8738", VA = "0x8E8738")]
		public static extern PeerConnectionState ovr_NetworkingPeer_GetState(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000820")]
		[Address(RVA = "0x8E8818", Offset = "0x8E8818", VA = "0x8E8818")]
		public static extern ulong ovr_OrgScopedID_GetID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000821")]
		[Address(RVA = "0x8E8928", Offset = "0x8E8928", VA = "0x8E8928")]
		public static extern void ovr_Packet_Free(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000822")]
		[Address(RVA = "0x8E8A30", Offset = "0x8E8A30", VA = "0x8E8A30")]
		public static extern IntPtr ovr_Packet_GetBytes(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000823")]
		[Address(RVA = "0x8E8B40", Offset = "0x8E8B40", VA = "0x8E8B40")]
		public static extern SendPolicy ovr_Packet_GetSendPolicy(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000824")]
		[Address(RVA = "0x8E8C58", Offset = "0x8E8C58", VA = "0x8E8C58")]
		public static extern ulong ovr_Packet_GetSenderID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000825")]
		[Address(RVA = "0x8E8D70", Offset = "0x8E8D70", VA = "0x8E8D70")]
		public static extern UIntPtr ovr_Packet_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000826")]
		[Address(RVA = "0x8E8E80", Offset = "0x8E8E80", VA = "0x8E8E80")]
		public static extern ulong ovr_Party_GetID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000827")]
		[Address(RVA = "0x8E8F88", Offset = "0x8E8F88", VA = "0x8E8F88")]
		public static extern IntPtr ovr_Party_GetInvitedUsers(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000828")]
		[Address(RVA = "0x8E90A0", Offset = "0x8E90A0", VA = "0x8E90A0")]
		public static extern IntPtr ovr_Party_GetLeader(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000829")]
		[Address(RVA = "0x8E91B0", Offset = "0x8E91B0", VA = "0x8E91B0")]
		public static extern IntPtr ovr_Party_GetRoom(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600082A")]
		[Address(RVA = "0x8E92B8", Offset = "0x8E92B8", VA = "0x8E92B8")]
		public static extern IntPtr ovr_Party_GetUsers(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600082B")]
		[Address(RVA = "0x8E93C8", Offset = "0x8E93C8", VA = "0x8E93C8")]
		public static extern ulong ovr_PartyID_GetID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600082C")]
		[Address(RVA = "0x8E94D0", Offset = "0x8E94D0", VA = "0x8E94D0")]
		public static extern PartyUpdateAction ovr_PartyUpdateNotification_GetAction(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600082D")]
		[Address(RVA = "0x8E95B8", Offset = "0x8E95B8", VA = "0x8E95B8")]
		public static extern ulong ovr_PartyUpdateNotification_GetPartyId(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600082E")]
		[Address(RVA = "0x8E96A0", Offset = "0x8E96A0", VA = "0x8E96A0")]
		public static extern ulong ovr_PartyUpdateNotification_GetSenderId(IntPtr obj);

		[Token(Token = "0x600082F")]
		[Address(RVA = "0x8E9788", Offset = "0x8E9788", VA = "0x8E9788")]
		public static string ovr_PartyUpdateNotification_GetUpdateTimestamp(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000830")]
		[Address(RVA = "0x8E9810", Offset = "0x8E9810", VA = "0x8E9810")]
		private static extern IntPtr ovr_PartyUpdateNotification_GetUpdateTimestamp_Native(IntPtr obj);

		[Token(Token = "0x6000831")]
		[Address(RVA = "0x8E9900", Offset = "0x8E9900", VA = "0x8E9900")]
		public static string ovr_PartyUpdateNotification_GetUserAlias(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000832")]
		[Address(RVA = "0x8E9988", Offset = "0x8E9988", VA = "0x8E9988")]
		private static extern IntPtr ovr_PartyUpdateNotification_GetUserAlias_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000833")]
		[Address(RVA = "0x8E9A78", Offset = "0x8E9A78", VA = "0x8E9A78")]
		public static extern ulong ovr_PartyUpdateNotification_GetUserId(IntPtr obj);

		[Token(Token = "0x6000834")]
		[Address(RVA = "0x8E9B60", Offset = "0x8E9B60", VA = "0x8E9B60")]
		public static string ovr_PartyUpdateNotification_GetUserName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000835")]
		[Address(RVA = "0x8E9BE8", Offset = "0x8E9BE8", VA = "0x8E9BE8")]
		private static extern IntPtr ovr_PartyUpdateNotification_GetUserName_Native(IntPtr obj);

		[Token(Token = "0x6000836")]
		[Address(RVA = "0x8E9CD0", Offset = "0x8E9CD0", VA = "0x8E9CD0")]
		public static string ovr_Pid_GetId(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000837")]
		[Address(RVA = "0x8E9D58", Offset = "0x8E9D58", VA = "0x8E9D58")]
		private static extern IntPtr ovr_Pid_GetId_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000838")]
		[Address(RVA = "0x8E9E60", Offset = "0x8E9E60", VA = "0x8E9E60")]
		public static extern IntPtr ovr_PidArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Token(Token = "0x6000839")]
		[Address(RVA = "0x8E9F80", Offset = "0x8E9F80", VA = "0x8E9F80")]
		public static extern UIntPtr ovr_PidArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600083A")]
		[Address(RVA = "0x8EA090", Offset = "0x8EA090", VA = "0x8EA090")]
		public static extern ulong ovr_PingResult_GetID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600083B")]
		[Address(RVA = "0x8EA1A0", Offset = "0x8EA1A0", VA = "0x8EA1A0")]
		public static extern ulong ovr_PingResult_GetPingTimeUsec(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600083C")]
		[Address(RVA = "0x8EA280", Offset = "0x8EA280", VA = "0x8EA280")]
		public static extern bool ovr_PingResult_IsTimeout(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600083D")]
		[Address(RVA = "0x8EA3A0", Offset = "0x8EA3A0", VA = "0x8EA3A0")]
		public static extern PlatformInitializeResult ovr_PlatformInitialize_GetResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600083E")]
		[Address(RVA = "0x8EA488", Offset = "0x8EA488", VA = "0x8EA488")]
		public static extern uint ovr_Price_GetAmountInHundredths(IntPtr obj);

		[Token(Token = "0x600083F")]
		[Address(RVA = "0x8EA568", Offset = "0x8EA568", VA = "0x8EA568")]
		public static string ovr_Price_GetCurrency(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000840")]
		[Address(RVA = "0x8EA5F0", Offset = "0x8EA5F0", VA = "0x8EA5F0")]
		private static extern IntPtr ovr_Price_GetCurrency_Native(IntPtr obj);

		[Token(Token = "0x6000841")]
		[Address(RVA = "0x8EA6C8", Offset = "0x8EA6C8", VA = "0x8EA6C8")]
		public static string ovr_Price_GetFormatted(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000842")]
		[Address(RVA = "0x8EA750", Offset = "0x8EA750", VA = "0x8EA750")]
		private static extern IntPtr ovr_Price_GetFormatted_Native(IntPtr obj);

		[Token(Token = "0x6000843")]
		[Address(RVA = "0x8EA828", Offset = "0x8EA828", VA = "0x8EA828")]
		public static string ovr_Product_GetDescription(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000844")]
		[Address(RVA = "0x8EA8B0", Offset = "0x8EA8B0", VA = "0x8EA8B0")]
		private static extern IntPtr ovr_Product_GetDescription_Native(IntPtr obj);

		[Token(Token = "0x6000845")]
		[Address(RVA = "0x8EA98C", Offset = "0x8EA98C", VA = "0x8EA98C")]
		public static string ovr_Product_GetFormattedPrice(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000846")]
		[Address(RVA = "0x8EAA10", Offset = "0x8EAA10", VA = "0x8EAA10")]
		private static extern IntPtr ovr_Product_GetFormattedPrice_Native(IntPtr obj);

		[Token(Token = "0x6000847")]
		[Address(RVA = "0x8EAAF0", Offset = "0x8EAAF0", VA = "0x8EAAF0")]
		public static string ovr_Product_GetName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000848")]
		[Address(RVA = "0x8EAB78", Offset = "0x8EAB78", VA = "0x8EAB78")]
		private static extern IntPtr ovr_Product_GetName_Native(IntPtr obj);

		[Token(Token = "0x6000849")]
		[Address(RVA = "0x8EAC4C", Offset = "0x8EAC4C", VA = "0x8EAC4C")]
		public static string ovr_Product_GetSKU(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600084A")]
		[Address(RVA = "0x8EACD0", Offset = "0x8EACD0", VA = "0x8EACD0")]
		private static extern IntPtr ovr_Product_GetSKU_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600084B")]
		[Address(RVA = "0x8EADE0", Offset = "0x8EADE0", VA = "0x8EADE0")]
		public static extern IntPtr ovr_ProductArray_GetElement(IntPtr obj, UIntPtr index);

		[Token(Token = "0x600084C")]
		[Address(RVA = "0x8EAEC4", Offset = "0x8EAEC4", VA = "0x8EAEC4")]
		public static string ovr_ProductArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600084D")]
		[Address(RVA = "0x8EAF48", Offset = "0x8EAF48", VA = "0x8EAF48")]
		private static extern IntPtr ovr_ProductArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600084E")]
		[Address(RVA = "0x8EB028", Offset = "0x8EB028", VA = "0x8EB028")]
		public static extern UIntPtr ovr_ProductArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600084F")]
		[Address(RVA = "0x8EB140", Offset = "0x8EB140", VA = "0x8EB140")]
		public static extern bool ovr_ProductArray_HasNextPage(IntPtr obj);

		[Token(Token = "0x6000850")]
		[Address(RVA = "0x8EB228", Offset = "0x8EB228", VA = "0x8EB228")]
		public static DateTime ovr_Purchase_GetExpirationTime(IntPtr obj)
		{
			return default(DateTime);
		}

		[PreserveSig]
		[Token(Token = "0x6000851")]
		[Address(RVA = "0x8EB2C8", Offset = "0x8EB2C8", VA = "0x8EB2C8")]
		private static extern ulong ovr_Purchase_GetExpirationTime_Native(IntPtr obj);

		[Token(Token = "0x6000852")]
		[Address(RVA = "0x8EB3A8", Offset = "0x8EB3A8", VA = "0x8EB3A8")]
		public static DateTime ovr_Purchase_GetGrantTime(IntPtr obj)
		{
			return default(DateTime);
		}

		[PreserveSig]
		[Token(Token = "0x6000853")]
		[Address(RVA = "0x8EB448", Offset = "0x8EB448", VA = "0x8EB448")]
		private static extern ulong ovr_Purchase_GetGrantTime_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000854")]
		[Address(RVA = "0x8EB528", Offset = "0x8EB528", VA = "0x8EB528")]
		public static extern ulong ovr_Purchase_GetPurchaseID(IntPtr obj);

		[Token(Token = "0x6000855")]
		[Address(RVA = "0x8EB604", Offset = "0x8EB604", VA = "0x8EB604")]
		public static string ovr_Purchase_GetSKU(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000856")]
		[Address(RVA = "0x8EB688", Offset = "0x8EB688", VA = "0x8EB688")]
		private static extern IntPtr ovr_Purchase_GetSKU_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000857")]
		[Address(RVA = "0x8EB760", Offset = "0x8EB760", VA = "0x8EB760")]
		public static extern IntPtr ovr_PurchaseArray_GetElement(IntPtr obj, UIntPtr index);

		[Token(Token = "0x6000858")]
		[Address(RVA = "0x8EB848", Offset = "0x8EB848", VA = "0x8EB848")]
		public static string ovr_PurchaseArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000859")]
		[Address(RVA = "0x8EB8D0", Offset = "0x8EB8D0", VA = "0x8EB8D0")]
		private static extern IntPtr ovr_PurchaseArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600085A")]
		[Address(RVA = "0x8EB9B0", Offset = "0x8EB9B0", VA = "0x8EB9B0")]
		public static extern UIntPtr ovr_PurchaseArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600085B")]
		[Address(RVA = "0x8EBAC8", Offset = "0x8EBAC8", VA = "0x8EBAC8")]
		public static extern bool ovr_PurchaseArray_HasNextPage(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600085C")]
		[Address(RVA = "0x8EBBB0", Offset = "0x8EBBB0", VA = "0x8EBBB0")]
		public static extern ulong ovr_Room_GetApplicationID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600085D")]
		[Address(RVA = "0x8EBCC8", Offset = "0x8EBCC8", VA = "0x8EBCC8")]
		public static extern IntPtr ovr_Room_GetDataStore(IntPtr obj);

		[Token(Token = "0x600085E")]
		[Address(RVA = "0x8EBDD8", Offset = "0x8EBDD8", VA = "0x8EBDD8")]
		public static string ovr_Room_GetDescription(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600085F")]
		[Address(RVA = "0x8EBE60", Offset = "0x8EBE60", VA = "0x8EBE60")]
		private static extern IntPtr ovr_Room_GetDescription_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000860")]
		[Address(RVA = "0x8EBF38", Offset = "0x8EBF38", VA = "0x8EBF38")]
		public static extern ulong ovr_Room_GetID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000861")]
		[Address(RVA = "0x8EC040", Offset = "0x8EC040", VA = "0x8EC040")]
		public static extern IntPtr ovr_Room_GetInvitedUsers(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000862")]
		[Address(RVA = "0x8EC158", Offset = "0x8EC158", VA = "0x8EC158")]
		public static extern bool ovr_Room_GetIsMembershipLocked(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000863")]
		[Address(RVA = "0x8EC240", Offset = "0x8EC240", VA = "0x8EC240")]
		public static extern RoomJoinPolicy ovr_Room_GetJoinPolicy(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000864")]
		[Address(RVA = "0x8EC358", Offset = "0x8EC358", VA = "0x8EC358")]
		public static extern RoomJoinability ovr_Room_GetJoinability(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000865")]
		[Address(RVA = "0x8EC470", Offset = "0x8EC470", VA = "0x8EC470")]
		public static extern IntPtr ovr_Room_GetMatchedUsers(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000866")]
		[Address(RVA = "0x8EC588", Offset = "0x8EC588", VA = "0x8EC588")]
		public static extern uint ovr_Room_GetMaxUsers(IntPtr obj);

		[Token(Token = "0x6000867")]
		[Address(RVA = "0x8EC698", Offset = "0x8EC698", VA = "0x8EC698")]
		public static string ovr_Room_GetName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000868")]
		[Address(RVA = "0x8EC720", Offset = "0x8EC720", VA = "0x8EC720")]
		private static extern IntPtr ovr_Room_GetName_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000869")]
		[Address(RVA = "0x8EC830", Offset = "0x8EC830", VA = "0x8EC830")]
		public static extern IntPtr ovr_Room_GetOwner(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600086A")]
		[Address(RVA = "0x8EC938", Offset = "0x8EC938", VA = "0x8EC938")]
		public static extern RoomType ovr_Room_GetType(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600086B")]
		[Address(RVA = "0x8ECA40", Offset = "0x8ECA40", VA = "0x8ECA40")]
		public static extern IntPtr ovr_Room_GetUsers(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600086C")]
		[Address(RVA = "0x8ECB48", Offset = "0x8ECB48", VA = "0x8ECB48")]
		public static extern uint ovr_Room_GetVersion(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600086D")]
		[Address(RVA = "0x8ECC58", Offset = "0x8ECC58", VA = "0x8ECC58")]
		public static extern IntPtr ovr_RoomArray_GetElement(IntPtr obj, UIntPtr index);

		[Token(Token = "0x600086E")]
		[Address(RVA = "0x8ECD78", Offset = "0x8ECD78", VA = "0x8ECD78")]
		public static string ovr_RoomArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600086F")]
		[Address(RVA = "0x8ECE00", Offset = "0x8ECE00", VA = "0x8ECE00")]
		private static extern IntPtr ovr_RoomArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000870")]
		[Address(RVA = "0x8ECEE0", Offset = "0x8ECEE0", VA = "0x8ECEE0")]
		public static extern UIntPtr ovr_RoomArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000871")]
		[Address(RVA = "0x8ECFF0", Offset = "0x8ECFF0", VA = "0x8ECFF0")]
		public static extern bool ovr_RoomArray_HasNextPage(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000872")]
		[Address(RVA = "0x8ED110", Offset = "0x8ED110", VA = "0x8ED110")]
		public static extern ulong ovr_RoomInviteNotification_GetID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000873")]
		[Address(RVA = "0x8ED1F8", Offset = "0x8ED1F8", VA = "0x8ED1F8")]
		public static extern ulong ovr_RoomInviteNotification_GetRoomID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000874")]
		[Address(RVA = "0x8ED2E0", Offset = "0x8ED2E0", VA = "0x8ED2E0")]
		public static extern ulong ovr_RoomInviteNotification_GetSenderID(IntPtr obj);

		[Token(Token = "0x6000875")]
		[Address(RVA = "0x8ED3C8", Offset = "0x8ED3C8", VA = "0x8ED3C8")]
		public static DateTime ovr_RoomInviteNotification_GetSentTime(IntPtr obj)
		{
			return default(DateTime);
		}

		[PreserveSig]
		[Token(Token = "0x6000876")]
		[Address(RVA = "0x8ED468", Offset = "0x8ED468", VA = "0x8ED468")]
		private static extern ulong ovr_RoomInviteNotification_GetSentTime_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000877")]
		[Address(RVA = "0x8ED550", Offset = "0x8ED550", VA = "0x8ED550")]
		public static extern IntPtr ovr_RoomInviteNotificationArray_GetElement(IntPtr obj, UIntPtr index);

		[Token(Token = "0x6000878")]
		[Address(RVA = "0x8ED644", Offset = "0x8ED644", VA = "0x8ED644")]
		public static string ovr_RoomInviteNotificationArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000879")]
		[Address(RVA = "0x8ED6C8", Offset = "0x8ED6C8", VA = "0x8ED6C8")]
		private static extern IntPtr ovr_RoomInviteNotificationArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600087A")]
		[Address(RVA = "0x8ED7B8", Offset = "0x8ED7B8", VA = "0x8ED7B8")]
		public static extern UIntPtr ovr_RoomInviteNotificationArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600087B")]
		[Address(RVA = "0x8ED8A0", Offset = "0x8ED8A0", VA = "0x8ED8A0")]
		public static extern bool ovr_RoomInviteNotificationArray_HasNextPage(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600087C")]
		[Address(RVA = "0x8ED998", Offset = "0x8ED998", VA = "0x8ED998")]
		public static extern SdkAccountType ovr_SdkAccount_GetAccountType(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600087D")]
		[Address(RVA = "0x8EDA78", Offset = "0x8EDA78", VA = "0x8EDA78")]
		public static extern ulong ovr_SdkAccount_GetUserId(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600087E")]
		[Address(RVA = "0x8EDB90", Offset = "0x8EDB90", VA = "0x8EDB90")]
		public static extern IntPtr ovr_SdkAccountArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Token(Token = "0x600087F")]
		[Address(RVA = "0x8EDC78", Offset = "0x8EDC78", VA = "0x8EDC78")]
		public static extern UIntPtr ovr_SdkAccountArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000880")]
		[Address(RVA = "0x8EDD58", Offset = "0x8EDD58", VA = "0x8EDD58")]
		public static extern ShareMediaStatus ovr_ShareMediaResult_GetStatus(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000881")]
		[Address(RVA = "0x8EDE38", Offset = "0x8EDE38", VA = "0x8EDE38")]
		public static extern bool ovr_SystemPermission_GetHasPermission(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000882")]
		[Address(RVA = "0x8EDF28", Offset = "0x8EDF28", VA = "0x8EDF28")]
		public static extern PermissionGrantStatus ovr_SystemPermission_GetPermissionGrantStatus(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000883")]
		[Address(RVA = "0x8EE018", Offset = "0x8EE018", VA = "0x8EE018")]
		public static extern VoipMuteState ovr_SystemVoipState_GetMicrophoneMuted(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000884")]
		[Address(RVA = "0x8EE100", Offset = "0x8EE100", VA = "0x8EE100")]
		public static extern SystemVoipStatus ovr_SystemVoipState_GetStatus(IntPtr obj);

		[Token(Token = "0x6000885")]
		[Address(RVA = "0x8EE1E0", Offset = "0x8EE1E0", VA = "0x8EE1E0")]
		public static string ovr_TestUser_GetAccessToken(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000886")]
		[Address(RVA = "0x8EE268", Offset = "0x8EE268", VA = "0x8EE268")]
		private static extern IntPtr ovr_TestUser_GetAccessToken_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000887")]
		[Address(RVA = "0x8EE348", Offset = "0x8EE348", VA = "0x8EE348")]
		public static extern IntPtr ovr_TestUser_GetAppAccessArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000888")]
		[Address(RVA = "0x8EE428", Offset = "0x8EE428", VA = "0x8EE428")]
		public static extern IntPtr ovr_TestUser_GetFbAppAccessArray(IntPtr obj);

		[Token(Token = "0x6000889")]
		[Address(RVA = "0x8EE50C", Offset = "0x8EE50C", VA = "0x8EE50C")]
		public static string ovr_TestUser_GetFriendAccessToken(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600088A")]
		[Address(RVA = "0x8EE590", Offset = "0x8EE590", VA = "0x8EE590")]
		private static extern IntPtr ovr_TestUser_GetFriendAccessToken_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600088B")]
		[Address(RVA = "0x8EE678", Offset = "0x8EE678", VA = "0x8EE678")]
		public static extern IntPtr ovr_TestUser_GetFriendAppAccessArray(IntPtr obj);

		[Token(Token = "0x600088C")]
		[Address(RVA = "0x8EE760", Offset = "0x8EE760", VA = "0x8EE760")]
		public static string ovr_TestUser_GetUserAlias(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600088D")]
		[Address(RVA = "0x8EE7E8", Offset = "0x8EE7E8", VA = "0x8EE7E8")]
		private static extern IntPtr ovr_TestUser_GetUserAlias_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600088E")]
		[Address(RVA = "0x8EE8C8", Offset = "0x8EE8C8", VA = "0x8EE8C8")]
		public static extern ulong ovr_TestUser_GetUserFbid(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600088F")]
		[Address(RVA = "0x8EE9E0", Offset = "0x8EE9E0", VA = "0x8EE9E0")]
		public static extern ulong ovr_TestUser_GetUserId(IntPtr obj);

		[Token(Token = "0x6000890")]
		[Address(RVA = "0x8EEAF4", Offset = "0x8EEAF4", VA = "0x8EEAF4")]
		public static string ovr_TestUserAppAccess_GetAccessToken(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000891")]
		[Address(RVA = "0x8EEB78", Offset = "0x8EEB78", VA = "0x8EEB78")]
		private static extern IntPtr ovr_TestUserAppAccess_GetAccessToken_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000892")]
		[Address(RVA = "0x8EEC60", Offset = "0x8EEC60", VA = "0x8EEC60")]
		public static extern ulong ovr_TestUserAppAccess_GetAppId(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000893")]
		[Address(RVA = "0x8EED40", Offset = "0x8EED40", VA = "0x8EED40")]
		public static extern ulong ovr_TestUserAppAccess_GetUserId(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000894")]
		[Address(RVA = "0x8EEE20", Offset = "0x8EEE20", VA = "0x8EEE20")]
		public static extern IntPtr ovr_TestUserAppAccessArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Token(Token = "0x6000895")]
		[Address(RVA = "0x8EEF10", Offset = "0x8EEF10", VA = "0x8EEF10")]
		public static extern UIntPtr ovr_TestUserAppAccessArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000896")]
		[Address(RVA = "0x8EEFF8", Offset = "0x8EEFF8", VA = "0x8EEFF8")]
		public static extern ulong ovr_User_GetID(IntPtr obj);

		[Token(Token = "0x6000897")]
		[Address(RVA = "0x8EF0FC", Offset = "0x8EF0FC", VA = "0x8EF0FC")]
		public static string ovr_User_GetImageUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000898")]
		[Address(RVA = "0x8EF180", Offset = "0x8EF180", VA = "0x8EF180")]
		private static extern IntPtr ovr_User_GetImageUrl_Native(IntPtr obj);

		[Token(Token = "0x6000899")]
		[Address(RVA = "0x8EF258", Offset = "0x8EF258", VA = "0x8EF258")]
		public static string ovr_User_GetInviteToken(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600089A")]
		[Address(RVA = "0x8EF2E0", Offset = "0x8EF2E0", VA = "0x8EF2E0")]
		private static extern IntPtr ovr_User_GetInviteToken_Native(IntPtr obj);

		[Token(Token = "0x600089B")]
		[Address(RVA = "0x8EF3B8", Offset = "0x8EF3B8", VA = "0x8EF3B8")]
		public static string ovr_User_GetOculusID(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600089C")]
		[Address(RVA = "0x8EF440", Offset = "0x8EF440", VA = "0x8EF440")]
		private static extern IntPtr ovr_User_GetOculusID_Native(IntPtr obj);

		[Token(Token = "0x600089D")]
		[Address(RVA = "0x8EF518", Offset = "0x8EF518", VA = "0x8EF518")]
		public static string ovr_User_GetPresence(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600089E")]
		[Address(RVA = "0x8EF5A0", Offset = "0x8EF5A0", VA = "0x8EF5A0")]
		private static extern IntPtr ovr_User_GetPresence_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600089F")]
		[Address(RVA = "0x8EF678", Offset = "0x8EF678", VA = "0x8EF678")]
		public static extern UserPresenceStatus ovr_User_GetPresenceStatus(IntPtr obj);

		[Token(Token = "0x60008A0")]
		[Address(RVA = "0x8EF754", Offset = "0x8EF754", VA = "0x8EF754")]
		public static string ovr_User_GetSmallImageUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60008A1")]
		[Address(RVA = "0x8EF7D8", Offset = "0x8EF7D8", VA = "0x8EF7D8")]
		private static extern IntPtr ovr_User_GetSmallImageUrl_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60008A2")]
		[Address(RVA = "0x8EF8B8", Offset = "0x8EF8B8", VA = "0x8EF8B8")]
		public static extern IntPtr ovr_UserAndRoom_GetRoom(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60008A3")]
		[Address(RVA = "0x8EF9D0", Offset = "0x8EF9D0", VA = "0x8EF9D0")]
		public static extern IntPtr ovr_UserAndRoom_GetUser(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60008A4")]
		[Address(RVA = "0x8EFAE8", Offset = "0x8EFAE8", VA = "0x8EFAE8")]
		public static extern IntPtr ovr_UserAndRoomArray_GetElement(IntPtr obj, UIntPtr index);

		[Token(Token = "0x60008A5")]
		[Address(RVA = "0x8EFBD0", Offset = "0x8EFBD0", VA = "0x8EFBD0")]
		public static string ovr_UserAndRoomArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60008A6")]
		[Address(RVA = "0x8EFC58", Offset = "0x8EFC58", VA = "0x8EFC58")]
		private static extern IntPtr ovr_UserAndRoomArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60008A7")]
		[Address(RVA = "0x8EFD38", Offset = "0x8EFD38", VA = "0x8EFD38")]
		public static extern UIntPtr ovr_UserAndRoomArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60008A8")]
		[Address(RVA = "0x8EFE18", Offset = "0x8EFE18", VA = "0x8EFE18")]
		public static extern bool ovr_UserAndRoomArray_HasNextPage(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60008A9")]
		[Address(RVA = "0x8EFF08", Offset = "0x8EFF08", VA = "0x8EFF08")]
		public static extern IntPtr ovr_UserArray_GetElement(IntPtr obj, UIntPtr index);

		[Token(Token = "0x60008AA")]
		[Address(RVA = "0x8F0028", Offset = "0x8F0028", VA = "0x8F0028")]
		public static string ovr_UserArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60008AB")]
		[Address(RVA = "0x8F00B0", Offset = "0x8F00B0", VA = "0x8F00B0")]
		private static extern IntPtr ovr_UserArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60008AC")]
		[Address(RVA = "0x8F0190", Offset = "0x8F0190", VA = "0x8F0190")]
		public static extern UIntPtr ovr_UserArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60008AD")]
		[Address(RVA = "0x8F02A0", Offset = "0x8F02A0", VA = "0x8F02A0")]
		public static extern bool ovr_UserArray_HasNextPage(IntPtr obj);

		[Token(Token = "0x60008AE")]
		[Address(RVA = "0x8F03C0", Offset = "0x8F03C0", VA = "0x8F03C0")]
		public static string ovr_UserProof_GetNonce(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60008AF")]
		[Address(RVA = "0x8F0448", Offset = "0x8F0448", VA = "0x8F0448")]
		private static extern IntPtr ovr_UserProof_GetNonce_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60008B0")]
		[Address(RVA = "0x8F0520", Offset = "0x8F0520", VA = "0x8F0520")]
		public static extern bool ovr_UserReportID_GetDidCancel(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60008B1")]
		[Address(RVA = "0x8F0608", Offset = "0x8F0608", VA = "0x8F0608")]
		public static extern ulong ovr_UserReportID_GetID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60008B2")]
		[Address(RVA = "0x8F0720", Offset = "0x8F0720", VA = "0x8F0720")]
		public static extern void ovr_VoipDecoder_Decode(IntPtr obj, byte[] compressedData, UIntPtr compressedSize);

		[PreserveSig]
		[Token(Token = "0x60008B3")]
		[Address(RVA = "0x8F0808", Offset = "0x8F0808", VA = "0x8F0808")]
		public static extern UIntPtr ovr_VoipDecoder_GetDecodedPCM(IntPtr obj, float[] outputBuffer, UIntPtr outputBufferSize);

		[PreserveSig]
		[Token(Token = "0x60008B4")]
		[Address(RVA = "0x8F0900", Offset = "0x8F0900", VA = "0x8F0900")]
		public static extern void ovr_VoipEncoder_AddPCM(IntPtr obj, float[] inputData, uint inputSize);

		[PreserveSig]
		[Token(Token = "0x60008B5")]
		[Address(RVA = "0x8F0A30", Offset = "0x8F0A30", VA = "0x8F0A30")]
		public static extern UIntPtr ovr_VoipEncoder_GetCompressedData(IntPtr obj, byte[] outputBuffer, UIntPtr intputSize);

		[PreserveSig]
		[Token(Token = "0x60008B6")]
		[Address(RVA = "0x8F0B30", Offset = "0x8F0B30", VA = "0x8F0B30")]
		public static extern UIntPtr ovr_VoipEncoder_GetCompressedDataSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60008B7")]
		[Address(RVA = "0x8C2508", Offset = "0x8C2508", VA = "0x8C2508")]
		public static extern IntPtr ovr_AbuseReportOptions_Create();

		[PreserveSig]
		[Token(Token = "0x60008B8")]
		[Address(RVA = "0x8C2A18", Offset = "0x8C2A18", VA = "0x8C2A18")]
		public static extern void ovr_AbuseReportOptions_Destroy(IntPtr handle);

		[PreserveSig]
		[Token(Token = "0x60008B9")]
		[Address(RVA = "0x8C2670", Offset = "0x8C2670", VA = "0x8C2670")]
		public static extern void ovr_AbuseReportOptions_SetPreventPeopleChooser(IntPtr handle, bool value);

		[PreserveSig]
		[Token(Token = "0x60008BA")]
		[Address(RVA = "0x8C27F8", Offset = "0x8C27F8", VA = "0x8C27F8")]
		public static extern void ovr_AbuseReportOptions_SetReportType(IntPtr handle, AbuseReportType value);

		[PreserveSig]
		[Token(Token = "0x60008BB")]
		[Address(RVA = "0x8C4F38", Offset = "0x8C4F38", VA = "0x8C4F38")]
		public static extern IntPtr ovr_ApplicationOptions_Create();

		[PreserveSig]
		[Token(Token = "0x60008BC")]
		[Address(RVA = "0x8C5240", Offset = "0x8C5240", VA = "0x8C5240")]
		public static extern void ovr_ApplicationOptions_Destroy(IntPtr handle);

		[Token(Token = "0x60008BD")]
		[Address(RVA = "0x8C509C", Offset = "0x8C509C", VA = "0x8C509C")]
		public static void ovr_ApplicationOptions_SetDeeplinkMessage(IntPtr handle, string value)
		{
		}

		[PreserveSig]
		[Token(Token = "0x60008BE")]
		[Address(RVA = "0x8F0C18", Offset = "0x8F0C18", VA = "0x8F0C18")]
		private static extern void ovr_ApplicationOptions_SetDeeplinkMessage_Native(IntPtr handle, IntPtr value);

		[PreserveSig]
		[Token(Token = "0x60008BF")]
		[Address(RVA = "0x8F0D10", Offset = "0x8F0D10", VA = "0x8F0D10")]
		public static extern IntPtr ovr_MatchmakingOptions_Create();

		[PreserveSig]
		[Token(Token = "0x60008C0")]
		[Address(RVA = "0x8F0DE8", Offset = "0x8F0DE8", VA = "0x8F0DE8")]
		public static extern void ovr_MatchmakingOptions_Destroy(IntPtr handle);

		[Token(Token = "0x60008C1")]
		[Address(RVA = "0x8F0EC8", Offset = "0x8F0EC8", VA = "0x8F0EC8")]
		public static void ovr_MatchmakingOptions_SetCreateRoomDataStoreString(IntPtr handle, string key, string value)
		{
		}

		[PreserveSig]
		[Token(Token = "0x60008C2")]
		[Address(RVA = "0x8F0FB8", Offset = "0x8F0FB8", VA = "0x8F0FB8")]
		private static extern void ovr_MatchmakingOptions_SetCreateRoomDataStoreString_Native(IntPtr handle, IntPtr key, IntPtr value);

		[PreserveSig]
		[Token(Token = "0x60008C3")]
		[Address(RVA = "0x8F10C0", Offset = "0x8F10C0", VA = "0x8F10C0")]
		public static extern void ovr_MatchmakingOptions_ClearCreateRoomDataStore(IntPtr handle);

		[PreserveSig]
		[Token(Token = "0x60008C4")]
		[Address(RVA = "0x8F11B0", Offset = "0x8F11B0", VA = "0x8F11B0")]
		public static extern void ovr_MatchmakingOptions_SetCreateRoomJoinPolicy(IntPtr handle, RoomJoinPolicy value);

		[PreserveSig]
		[Token(Token = "0x60008C5")]
		[Address(RVA = "0x8F12A8", Offset = "0x8F12A8", VA = "0x8F12A8")]
		public static extern void ovr_MatchmakingOptions_SetCreateRoomMaxUsers(IntPtr handle, uint value);

		[PreserveSig]
		[Token(Token = "0x60008C6")]
		[Address(RVA = "0x8F13A0", Offset = "0x8F13A0", VA = "0x8F13A0")]
		public static extern void ovr_MatchmakingOptions_AddEnqueueAdditionalUser(IntPtr handle, ulong value);

		[PreserveSig]
		[Token(Token = "0x60008C7")]
		[Address(RVA = "0x8F14A0", Offset = "0x8F14A0", VA = "0x8F14A0")]
		public static extern void ovr_MatchmakingOptions_ClearEnqueueAdditionalUsers(IntPtr handle);

		[Token(Token = "0x60008C8")]
		[Address(RVA = "0x8F1594", Offset = "0x8F1594", VA = "0x8F1594")]
		public static void ovr_MatchmakingOptions_SetEnqueueDataSettingsInt(IntPtr handle, string key, int value)
		{
		}

		[PreserveSig]
		[Token(Token = "0x60008C9")]
		[Address(RVA = "0x8F1668", Offset = "0x8F1668", VA = "0x8F1668")]
		private static extern void ovr_MatchmakingOptions_SetEnqueueDataSettingsInt_Native(IntPtr handle, IntPtr key, int value);

		[Token(Token = "0x60008CA")]
		[Address(RVA = "0x8F176C", Offset = "0x8F176C", VA = "0x8F176C")]
		public static void ovr_MatchmakingOptions_SetEnqueueDataSettingsDouble(IntPtr handle, string key, double value)
		{
		}

		[PreserveSig]
		[Token(Token = "0x60008CB")]
		[Address(RVA = "0x8F1850", Offset = "0x8F1850", VA = "0x8F1850")]
		private static extern void ovr_MatchmakingOptions_SetEnqueueDataSettingsDouble_Native(IntPtr handle, IntPtr key, double value);

		[Token(Token = "0x60008CC")]
		[Address(RVA = "0x8F195C", Offset = "0x8F195C", VA = "0x8F195C")]
		public static void ovr_MatchmakingOptions_SetEnqueueDataSettingsString(IntPtr handle, string key, string value)
		{
		}

		[PreserveSig]
		[Token(Token = "0x60008CD")]
		[Address(RVA = "0x8F1A48", Offset = "0x8F1A48", VA = "0x8F1A48")]
		private static extern void ovr_MatchmakingOptions_SetEnqueueDataSettingsString_Native(IntPtr handle, IntPtr key, IntPtr value);

		[PreserveSig]
		[Token(Token = "0x60008CE")]
		[Address(RVA = "0x8F1B50", Offset = "0x8F1B50", VA = "0x8F1B50")]
		public static extern void ovr_MatchmakingOptions_ClearEnqueueDataSettings(IntPtr handle);

		[PreserveSig]
		[Token(Token = "0x60008CF")]
		[Address(RVA = "0x8F1C40", Offset = "0x8F1C40", VA = "0x8F1C40")]
		public static extern void ovr_MatchmakingOptions_SetEnqueueIsDebug(IntPtr handle, bool value);

		[Token(Token = "0x60008D0")]
		[Address(RVA = "0x8F1D34", Offset = "0x8F1D34", VA = "0x8F1D34")]
		public static void ovr_MatchmakingOptions_SetEnqueueQueryKey(IntPtr handle, string value)
		{
		}

		[PreserveSig]
		[Token(Token = "0x60008D1")]
		[Address(RVA = "0x8F1E00", Offset = "0x8F1E00", VA = "0x8F1E00")]
		private static extern void ovr_MatchmakingOptions_SetEnqueueQueryKey_Native(IntPtr handle, IntPtr value);

		[PreserveSig]
		[Token(Token = "0x60008D2")]
		[Address(RVA = "0x8F1EF8", Offset = "0x8F1EF8", VA = "0x8F1EF8")]
		public static extern IntPtr ovr_RoomOptions_Create();

		[PreserveSig]
		[Token(Token = "0x60008D3")]
		[Address(RVA = "0x8F2000", Offset = "0x8F2000", VA = "0x8F2000")]
		public static extern void ovr_RoomOptions_Destroy(IntPtr handle);

		[Token(Token = "0x60008D4")]
		[Address(RVA = "0x8F2114", Offset = "0x8F2114", VA = "0x8F2114")]
		public static void ovr_RoomOptions_SetDataStoreString(IntPtr handle, string key, string value)
		{
		}

		[PreserveSig]
		[Token(Token = "0x60008D5")]
		[Address(RVA = "0x8F2200", Offset = "0x8F2200", VA = "0x8F2200")]
		private static extern void ovr_RoomOptions_SetDataStoreString_Native(IntPtr handle, IntPtr key, IntPtr value);

		[PreserveSig]
		[Token(Token = "0x60008D6")]
		[Address(RVA = "0x8F22F8", Offset = "0x8F22F8", VA = "0x8F22F8")]
		public static extern void ovr_RoomOptions_ClearDataStore(IntPtr handle);

		[PreserveSig]
		[Token(Token = "0x60008D7")]
		[Address(RVA = "0x8F23D8", Offset = "0x8F23D8", VA = "0x8F23D8")]
		public static extern void ovr_RoomOptions_SetExcludeRecentlyMet(IntPtr handle, bool value);

		[PreserveSig]
		[Token(Token = "0x60008D8")]
		[Address(RVA = "0x8F24C8", Offset = "0x8F24C8", VA = "0x8F24C8")]
		public static extern void ovr_RoomOptions_SetMaxUserResults(IntPtr handle, uint value);

		[PreserveSig]
		[Token(Token = "0x60008D9")]
		[Address(RVA = "0x8F25B8", Offset = "0x8F25B8", VA = "0x8F25B8")]
		public static extern void ovr_RoomOptions_SetOrdering(IntPtr handle, UserOrdering value);

		[PreserveSig]
		[Token(Token = "0x60008DA")]
		[Address(RVA = "0x8F26A0", Offset = "0x8F26A0", VA = "0x8F26A0")]
		public static extern void ovr_RoomOptions_SetRecentlyMetTimeWindow(IntPtr handle, TimeWindow value);

		[PreserveSig]
		[Token(Token = "0x60008DB")]
		[Address(RVA = "0x8F2798", Offset = "0x8F2798", VA = "0x8F2798")]
		public static extern void ovr_RoomOptions_SetRoomId(IntPtr handle, ulong value);

		[PreserveSig]
		[Token(Token = "0x60008DC")]
		[Address(RVA = "0x8F28C0", Offset = "0x8F28C0", VA = "0x8F28C0")]
		public static extern void ovr_RoomOptions_SetTurnOffUpdates(IntPtr handle, bool value);

		[PreserveSig]
		[Token(Token = "0x60008DD")]
		[Address(RVA = "0x8F29B0", Offset = "0x8F29B0", VA = "0x8F29B0")]
		public static extern IntPtr ovr_UserOptions_Create();

		[PreserveSig]
		[Token(Token = "0x60008DE")]
		[Address(RVA = "0x8F2AB8", Offset = "0x8F2AB8", VA = "0x8F2AB8")]
		public static extern void ovr_UserOptions_Destroy(IntPtr handle);

		[PreserveSig]
		[Token(Token = "0x60008DF")]
		[Address(RVA = "0x8F2BD0", Offset = "0x8F2BD0", VA = "0x8F2BD0")]
		public static extern void ovr_UserOptions_SetMaxUsers(IntPtr handle, uint value);

		[PreserveSig]
		[Token(Token = "0x60008E0")]
		[Address(RVA = "0x8F2CB8", Offset = "0x8F2CB8", VA = "0x8F2CB8")]
		public static extern void ovr_UserOptions_AddServiceProvider(IntPtr handle, ServiceProvider value);

		[PreserveSig]
		[Token(Token = "0x60008E1")]
		[Address(RVA = "0x8F2DA8", Offset = "0x8F2DA8", VA = "0x8F2DA8")]
		public static extern void ovr_UserOptions_ClearServiceProviders(IntPtr handle);

		[PreserveSig]
		[Token(Token = "0x60008E2")]
		[Address(RVA = "0x8F2E90", Offset = "0x8F2E90", VA = "0x8F2E90")]
		public static extern void ovr_UserOptions_SetTimeWindow(IntPtr handle, TimeWindow value);

		[PreserveSig]
		[Token(Token = "0x60008E3")]
		[Address(RVA = "0x8F2F78", Offset = "0x8F2F78", VA = "0x8F2F78")]
		public static extern IntPtr ovr_VoipOptions_Create();

		[PreserveSig]
		[Token(Token = "0x60008E4")]
		[Address(RVA = "0x8F3080", Offset = "0x8F3080", VA = "0x8F3080")]
		public static extern void ovr_VoipOptions_Destroy(IntPtr handle);

		[PreserveSig]
		[Token(Token = "0x60008E5")]
		[Address(RVA = "0x8F3198", Offset = "0x8F3198", VA = "0x8F3198")]
		public static extern void ovr_VoipOptions_SetBitrateForNewConnections(IntPtr handle, VoipBitrate value);

		[PreserveSig]
		[Token(Token = "0x60008E6")]
		[Address(RVA = "0x8F3290", Offset = "0x8F3290", VA = "0x8F3290")]
		public static extern void ovr_VoipOptions_SetCreateNewConnectionUseDtx(IntPtr handle, VoipDtxState value);

		[Token(Token = "0x60008E7")]
		[Address(RVA = "0x8F3388", Offset = "0x8F3388", VA = "0x8F3388")]
		public CAPI()
		{
		}
	}
	[Token(Token = "0x20000BA")]
	public enum CloudStorageDataStatus
	{
		[Token(Token = "0x40003E7")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243398", Offset = "0x243398")]
		Unknown,
		[Token(Token = "0x40003E8")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2433CC", Offset = "0x2433CC")]
		InSync,
		[Token(Token = "0x40003E9")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243400", Offset = "0x243400")]
		NeedsDownload,
		[Token(Token = "0x40003EA")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x24343C", Offset = "0x24343C")]
		RemoteDownloading,
		[Token(Token = "0x40003EB")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x24347C", Offset = "0x24347C")]
		NeedsUpload,
		[Token(Token = "0x40003EC")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2434B8", Offset = "0x2434B8")]
		LocalUploading,
		[Token(Token = "0x40003ED")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2434F4", Offset = "0x2434F4")]
		InConflict
	}
	[Token(Token = "0x20000BB")]
	public enum CloudStorageUpdateStatus
	{
		[Token(Token = "0x40003EF")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x24352C", Offset = "0x24352C")]
		Unknown,
		[Token(Token = "0x40003F0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243560", Offset = "0x243560")]
		Ok,
		[Token(Token = "0x40003F1")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243590", Offset = "0x243590")]
		BetterVersionStored,
		[Token(Token = "0x40003F2")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2435D4", Offset = "0x2435D4")]
		ManualMergeRequired
	}
	[Token(Token = "0x20000BC")]
	public interface IMicrophone
	{
		[Token(Token = "0x60008E9")]
		void Start();

		[Token(Token = "0x60008EA")]
		void Stop();

		[Token(Token = "0x60008EB")]
		float[] Update();
	}
	[Token(Token = "0x20000BD")]
	public interface IVoipPCMSource
	{
		[Token(Token = "0x60008EC")]
		int GetPCM(float[] dest, int length);

		[Token(Token = "0x60008ED")]
		void SetSenderID(ulong senderID);

		[Token(Token = "0x60008EE")]
		void Update();

		[Token(Token = "0x60008EF")]
		int PeekSizeElements();
	}
	[Token(Token = "0x20000BE")]
	public enum KeyValuePairType
	{
		[Token(Token = "0x40003F4")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243618", Offset = "0x243618")]
		String,
		[Token(Token = "0x40003F5")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x24364C", Offset = "0x24364C")]
		Int,
		[Token(Token = "0x40003F6")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243680", Offset = "0x243680")]
		Double,
		[Token(Token = "0x40003F7")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2436B4", Offset = "0x2436B4")]
		Unknown
	}
	[Token(Token = "0x20000BF")]
	public enum LaunchType
	{
		[Token(Token = "0x40003F9")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2436E8", Offset = "0x2436E8")]
		Unknown,
		[Token(Token = "0x40003FA")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x24371C", Offset = "0x24371C")]
		Normal,
		[Token(Token = "0x40003FB")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243750", Offset = "0x243750")]
		Invite,
		[Token(Token = "0x40003FC")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243784", Offset = "0x243784")]
		Coordinated,
		[Token(Token = "0x40003FD")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2437BC", Offset = "0x2437BC")]
		Deeplink
	}
	[Token(Token = "0x20000C0")]
	public enum LeaderboardFilterType
	{
		[Token(Token = "0x40003FF")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2437F4", Offset = "0x2437F4")]
		None,
		[Token(Token = "0x4000400")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243828", Offset = "0x243828")]
		Friends,
		[Token(Token = "0x4000401")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x24385C", Offset = "0x24385C")]
		Unknown
	}
	[Token(Token = "0x20000C1")]
	public enum LeaderboardStartAt
	{
		[Token(Token = "0x4000403")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243890", Offset = "0x243890")]
		Top,
		[Token(Token = "0x4000404")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2438C0", Offset = "0x2438C0")]
		CenteredOnViewer,
		[Token(Token = "0x4000405")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243900", Offset = "0x243900")]
		CenteredOnViewerOrTop,
		[Token(Token = "0x4000406")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243948", Offset = "0x243948")]
		Unknown
	}
	[Token(Token = "0x20000C2")]
	public enum LivestreamingAudience
	{
		[Token(Token = "0x4000408")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x24397C", Offset = "0x24397C")]
		Unknown,
		[Token(Token = "0x4000409")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2439B0", Offset = "0x2439B0")]
		Public,
		[Token(Token = "0x400040A")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2439E4", Offset = "0x2439E4")]
		Friends,
		[Token(Token = "0x400040B")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243A18", Offset = "0x243A18")]
		OnlyMe
	}
	[Token(Token = "0x20000C3")]
	public enum LivestreamingMicrophoneStatus
	{
		[Token(Token = "0x400040D")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243A4C", Offset = "0x243A4C")]
		Unknown,
		[Token(Token = "0x400040E")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243A80", Offset = "0x243A80")]
		MicrophoneOn,
		[Token(Token = "0x400040F")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243ABC", Offset = "0x243ABC")]
		MicrophoneOff
	}
	[Token(Token = "0x20000C4")]
	public enum LivestreamingStartStatus
	{
		[Token(Token = "0x4000411")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243AF8", Offset = "0x243AF8")]
		Success = 1,
		[Token(Token = "0x4000412")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243B2C", Offset = "0x243B2C")]
		Unknown = 0,
		[Token(Token = "0x4000413")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243B60", Offset = "0x243B60")]
		NoPackageSet = -1,
		[Token(Token = "0x4000414")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243B9C", Offset = "0x243B9C")]
		NoFbConnect = -2,
		[Token(Token = "0x4000415")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243BD8", Offset = "0x243BD8")]
		NoSessionId = -3,
		[Token(Token = "0x4000416")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243C14", Offset = "0x243C14")]
		MissingParameters = -4
	}
	[Token(Token = "0x20000C5")]
	public enum MatchmakingCriterionImportance
	{
		[Token(Token = "0x4000418")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243C54", Offset = "0x243C54")]
		Required,
		[Token(Token = "0x4000419")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243C8C", Offset = "0x243C8C")]
		High,
		[Token(Token = "0x400041A")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243CC0", Offset = "0x243CC0")]
		Medium,
		[Token(Token = "0x400041B")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243CF4", Offset = "0x243CF4")]
		Low,
		[Token(Token = "0x400041C")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243D24", Offset = "0x243D24")]
		Unknown
	}
	[Token(Token = "0x20000C6")]
	public class MatchmakingOptions
	{
		[Token(Token = "0x400041D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IntPtr Handle;

		[Token(Token = "0x60008F0")]
		[Address(RVA = "0x5C702C", Offset = "0x5C702C", VA = "0x5C702C")]
		public MatchmakingOptions()
		{
		}

		[Token(Token = "0x60008F1")]
		[Address(RVA = "0x5C70BC", Offset = "0x5C70BC", VA = "0x5C70BC")]
		public void SetCreateRoomDataStore(string key, string value)
		{
		}

		[Token(Token = "0x60008F2")]
		[Address(RVA = "0x5C7154", Offset = "0x5C7154", VA = "0x5C7154")]
		public void ClearCreateRoomDataStore()
		{
		}

		[Token(Token = "0x60008F3")]
		[Address(RVA = "0x5C71DC", Offset = "0x5C71DC", VA = "0x5C71DC")]
		public void SetCreateRoomJoinPolicy(RoomJoinPolicy value)
		{
		}

		[Token(Token = "0x60008F4")]
		[Address(RVA = "0x5C726C", Offset = "0x5C726C", VA = "0x5C726C")]
		public void SetCreateRoomMaxUsers(uint value)
		{
		}

		[Token(Token = "0x60008F5")]
		[Address(RVA = "0x5C72FC", Offset = "0x5C72FC", VA = "0x5C72FC")]
		public void AddEnqueueAdditionalUser(ulong userID)
		{
		}

		[Token(Token = "0x60008F6")]
		[Address(RVA = "0x5C73A0", Offset = "0x5C73A0", VA = "0x5C73A0")]
		public void ClearEnqueueAdditionalUsers()
		{
		}

		[Token(Token = "0x60008F7")]
		[Address(RVA = "0x5C7428", Offset = "0x5C7428", VA = "0x5C7428")]
		public void SetEnqueueDataSettings(string key, int value)
		{
		}

		[Token(Token = "0x60008F8")]
		[Address(RVA = "0x5C74C0", Offset = "0x5C74C0", VA = "0x5C74C0")]
		public void SetEnqueueDataSettings(string key, double value)
		{
		}

		[Token(Token = "0x60008F9")]
		[Address(RVA = "0x5C756C", Offset = "0x5C756C", VA = "0x5C756C")]
		public void SetEnqueueDataSettings(string key, string value)
		{
		}

		[Token(Token = "0x60008FA")]
		[Address(RVA = "0x5C7604", Offset = "0x5C7604", VA = "0x5C7604")]
		public void ClearEnqueueDataSettings()
		{
		}

		[Token(Token = "0x60008FB")]
		[Address(RVA = "0x5C768C", Offset = "0x5C768C", VA = "0x5C768C")]
		public void SetEnqueueIsDebug(bool value)
		{
		}

		[Token(Token = "0x60008FC")]
		[Address(RVA = "0x5C771C", Offset = "0x5C771C", VA = "0x5C771C")]
		public void SetEnqueueQueryKey(string value)
		{
		}

		[Token(Token = "0x60008FD")]
		[Address(RVA = "0x5C597C", Offset = "0x5C597C", VA = "0x5C597C")]
		public static explicit operator IntPtr(MatchmakingOptions options)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60008FE")]
		[Address(RVA = "0x5C77AC", Offset = "0x5C77AC", VA = "0x5C77AC", Slot = "1")]
		~MatchmakingOptions()
		{
		}
	}
	[Token(Token = "0x20000C7")]
	public enum MatchmakingStatApproach
	{
		[Token(Token = "0x400041F")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243D58", Offset = "0x243D58")]
		Unknown,
		[Token(Token = "0x4000420")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243D8C", Offset = "0x243D8C")]
		Trailing,
		[Token(Token = "0x4000421")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243DC4", Offset = "0x243DC4")]
		Swingy
	}
	[Token(Token = "0x20000C8")]
	public enum MediaContentType
	{
		[Token(Token = "0x4000423")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243DF8", Offset = "0x243DF8")]
		Unknown,
		[Token(Token = "0x4000424")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243E2C", Offset = "0x243E2C")]
		Photo
	}
	[Token(Token = "0x20000C9")]
	public abstract class Message<T> : Message
	{
		[Token(Token = "0x20002AA")]
		public new delegate void Callback(Message<T> message);

		[Token(Token = "0x4000425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T data;

		[Token(Token = "0x170000C8")]
		public T Data
		{
			[Token(Token = "0x6000900")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x60008FF")]
		public Message(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000901")]
		protected abstract T GetDataFromMessage(IntPtr c_message);
	}
	[Token(Token = "0x20000CA")]
	public class Message
	{
		[Token(Token = "0x20002AB")]
		public delegate void Callback(Message message);

		[Token(Token = "0x20002AC")]
		public enum MessageType : uint
		{
			[Token(Token = "0x4000EFB")]
			Unknown = 0u,
			[Token(Token = "0x4000EFC")]
			Achievements_AddCount = 65495601u,
			[Token(Token = "0x4000EFD")]
			Achievements_AddFields = 346693929u,
			[Token(Token = "0x4000EFE")]
			Achievements_GetAllDefinitions = 64177549u,
			[Token(Token = "0x4000EFF")]
			Achievements_GetAllProgress = 1335877149u,
			[Token(Token = "0x4000F00")]
			Achievements_GetDefinitionsByName = 1653670332u,
			[Token(Token = "0x4000F01")]
			Achievements_GetNextAchievementDefinitionArrayPage = 712888917u,
			[Token(Token = "0x4000F02")]
			Achievements_GetNextAchievementProgressArrayPage = 792913703u,
			[Token(Token = "0x4000F03")]
			Achievements_GetProgressByName = 354837425u,
			[Token(Token = "0x4000F04")]
			Achievements_Unlock = 1497156573u,
			[Token(Token = "0x4000F05")]
			ApplicationLifecycle_GetRegisteredPIDs = 82169698u,
			[Token(Token = "0x4000F06")]
			ApplicationLifecycle_GetSessionKey = 984570141u,
			[Token(Token = "0x4000F07")]
			ApplicationLifecycle_RegisterSessionKey = 1303818232u,
			[Token(Token = "0x4000F08")]
			Application_GetVersion = 1751583246u,
			[Token(Token = "0x4000F09")]
			Application_LaunchOtherApp = 1424151032u,
			[Token(Token = "0x4000F0A")]
			AssetFile_Delete = 1834842246u,
			[Token(Token = "0x4000F0B")]
			AssetFile_DeleteById = 1525206354u,
			[Token(Token = "0x4000F0C")]
			AssetFile_DeleteByName = 1108001231u,
			[Token(Token = "0x4000F0D")]
			AssetFile_Download = 289710021u,
			[Token(Token = "0x4000F0E")]
			AssetFile_DownloadById = 755009938u,
			[Token(Token = "0x4000F0F")]
			AssetFile_DownloadByName = 1664536314u,
			[Token(Token = "0x4000F10")]
			AssetFile_DownloadCancel = 134927303u,
			[Token(Token = "0x4000F11")]
			AssetFile_DownloadCancelById = 1365611796u,
			[Token(Token = "0x4000F12")]
			AssetFile_DownloadCancelByName = 1147858170u,
			[Token(Token = "0x4000F13")]
			AssetFile_GetList = 1258057588u,
			[Token(Token = "0x4000F14")]
			AssetFile_Status = 47394656u,
			[Token(Token = "0x4000F15")]
			AssetFile_StatusById = 1570069816u,
			[Token(Token = "0x4000F16")]
			AssetFile_StatusByName = 1104140880u,
			[Token(Token = "0x4000F17")]
			CloudStorage_Delete = 685393261u,
			[Token(Token = "0x4000F18")]
			CloudStorage_GetNextCloudStorageMetadataArrayPage = 1544004335u,
			[Token(Token = "0x4000F19")]
			CloudStorage_Load = 1082420033u,
			[Token(Token = "0x4000F1A")]
			CloudStorage_LoadBucketMetadata = 1931977997u,
			[Token(Token = "0x4000F1B")]
			CloudStorage_LoadConflictMetadata = 1146770162u,
			[Token(Token = "0x4000F1C")]
			CloudStorage_LoadHandle = 845863478u,
			[Token(Token = "0x4000F1D")]
			CloudStorage_LoadMetadata = 65446546u,
			[Token(Token = "0x4000F1E")]
			CloudStorage_ResolveKeepLocal = 811109637u,
			[Token(Token = "0x4000F1F")]
			CloudStorage_ResolveKeepRemote = 1965400838u,
			[Token(Token = "0x4000F20")]
			CloudStorage_Save = 1270570030u,
			[Token(Token = "0x4000F21")]
			Entitlement_GetIsViewerEntitled = 409688241u,
			[Token(Token = "0x4000F22")]
			IAP_ConsumePurchase = 532378329u,
			[Token(Token = "0x4000F23")]
			IAP_GetNextProductArrayPage = 467225263u,
			[Token(Token = "0x4000F24")]
			IAP_GetNextPurchaseArrayPage = 1196886677u,
			[Token(Token = "0x4000F25")]
			IAP_GetProductsBySKU = 2124073717u,
			[Token(Token = "0x4000F26")]
			IAP_GetViewerPurchases = 974095385u,
			[Token(Token = "0x4000F27")]
			IAP_LaunchCheckoutFlow = 1067126029u,
			[Token(Token = "0x4000F28")]
			LanguagePack_GetCurrent = 529592533u,
			[Token(Token = "0x4000F29")]
			LanguagePack_SetCurrent = 1531952096u,
			[Token(Token = "0x4000F2A")]
			Leaderboard_GetEntries = 1572030284u,
			[Token(Token = "0x4000F2B")]
			Leaderboard_GetEntriesAfterRank = 406293487u,
			[Token(Token = "0x4000F2C")]
			Leaderboard_GetNextEntries = 1310751961u,
			[Token(Token = "0x4000F2D")]
			Leaderboard_GetPreviousEntries = 1224858304u,
			[Token(Token = "0x4000F2E")]
			Leaderboard_WriteEntry = 293587198u,
			[Token(Token = "0x4000F2F")]
			Livestreaming_GetStatus = 1218079125u,
			[Token(Token = "0x4000F30")]
			Livestreaming_PauseStream = 916223619u,
			[Token(Token = "0x4000F31")]
			Livestreaming_ResumeStream = 575827343u,
			[Token(Token = "0x4000F32")]
			Matchmaking_Browse = 509948616u,
			[Token(Token = "0x4000F33")]
			Matchmaking_Browse2 = 1715641947u,
			[Token(Token = "0x4000F34")]
			Matchmaking_Cancel = 543705519u,
			[Token(Token = "0x4000F35")]
			Matchmaking_Cancel2 = 285117908u,
			[Token(Token = "0x4000F36")]
			Matchmaking_CreateAndEnqueueRoom = 1615617480u,
			[Token(Token = "0x4000F37")]
			Matchmaking_CreateAndEnqueueRoom2 = 693889755u,
			[Token(Token = "0x4000F38")]
			Matchmaking_CreateRoom = 54203178u,
			[Token(Token = "0x4000F39")]
			Matchmaking_CreateRoom2 = 1231922052u,
			[Token(Token = "0x4000F3A")]
			Matchmaking_Enqueue = 1086418033u,
			[Token(Token = "0x4000F3B")]
			Matchmaking_Enqueue2 = 303174325u,
			[Token(Token = "0x4000F3C")]
			Matchmaking_EnqueueRoom = 1888108644u,
			[Token(Token = "0x4000F3D")]
			Matchmaking_EnqueueRoom2 = 1428741028u,
			[Token(Token = "0x4000F3E")]
			Matchmaking_GetAdminSnapshot = 1008820116u,
			[Token(Token = "0x4000F3F")]
			Matchmaking_GetStats = 1123849272u,
			[Token(Token = "0x4000F40")]
			Matchmaking_JoinRoom = 1295177725u,
			[Token(Token = "0x4000F41")]
			Matchmaking_ReportResultInsecure = 439800205u,
			[Token(Token = "0x4000F42")]
			Matchmaking_StartMatch = 1154746693u,
			[Token(Token = "0x4000F43")]
			Media_ShareToFacebook = 14912239u,
			[Token(Token = "0x4000F44")]
			Notification_GetNextRoomInviteNotificationArrayPage = 102890359u,
			[Token(Token = "0x4000F45")]
			Notification_GetRoomInvites = 1871801234u,
			[Token(Token = "0x4000F46")]
			Notification_MarkAsRead = 1903319523u,
			[Token(Token = "0x4000F47")]
			Party_GetCurrent = 1200830304u,
			[Token(Token = "0x4000F48")]
			Room_CreateAndJoinPrivate = 1977017207u,
			[Token(Token = "0x4000F49")]
			Room_CreateAndJoinPrivate2 = 1513775683u,
			[Token(Token = "0x4000F4A")]
			Room_Get = 1704628152u,
			[Token(Token = "0x4000F4B")]
			Room_GetCurrent = 161916164u,
			[Token(Token = "0x4000F4C")]
			Room_GetCurrentForUser = 234887141u,
			[Token(Token = "0x4000F4D")]
			Room_GetInvitableUsers = 506615698u,
			[Token(Token = "0x4000F4E")]
			Room_GetInvitableUsers2 = 1330899120u,
			[Token(Token = "0x4000F4F")]
			Room_GetModeratedRooms = 159645047u,
			[Token(Token = "0x4000F50")]
			Room_GetNextRoomArrayPage = 1317239238u,
			[Token(Token = "0x4000F51")]
			Room_InviteUser = 1093266451u,
			[Token(Token = "0x4000F52")]
			Room_Join = 382373641u,
			[Token(Token = "0x4000F53")]
			Room_Join2 = 1303059522u,
			[Token(Token = "0x4000F54")]
			Room_KickUser = 1233344310u,
			[Token(Token = "0x4000F55")]
			Room_LaunchInvitableUserFlow = 843047539u,
			[Token(Token = "0x4000F56")]
			Room_Leave = 1916281973u,
			[Token(Token = "0x4000F57")]
			Room_SetDescription = 809796911u,
			[Token(Token = "0x4000F58")]
			Room_UpdateDataStore = 40779816u,
			[Token(Token = "0x4000F59")]
			Room_UpdateMembershipLockStatus = 923514796u,
			[Token(Token = "0x4000F5A")]
			Room_UpdateOwner = 850803997u,
			[Token(Token = "0x4000F5B")]
			Room_UpdatePrivateRoomJoinPolicy = 289473179u,
			[Token(Token = "0x4000F5C")]
			User_Get = 1808768583u,
			[Token(Token = "0x4000F5D")]
			User_GetAccessToken = 111696574u,
			[Token(Token = "0x4000F5E")]
			User_GetLoggedInUser = 1131361373u,
			[Token(Token = "0x4000F5F")]
			User_GetLoggedInUserFriends = 1484532365u,
			[Token(Token = "0x4000F60")]
			User_GetLoggedInUserFriendsAndRooms = 1585908615u,
			[Token(Token = "0x4000F61")]
			User_GetLoggedInUserRecentlyMetUsersAndRooms = 694139440u,
			[Token(Token = "0x4000F62")]
			User_GetNextUserAndRoomArrayPage = 2143146719u,
			[Token(Token = "0x4000F63")]
			User_GetNextUserArrayPage = 645723971u,
			[Token(Token = "0x4000F64")]
			User_GetOrgScopedID = 418426907u,
			[Token(Token = "0x4000F65")]
			User_GetSdkAccounts = 1733454467u,
			[Token(Token = "0x4000F66")]
			User_GetUserProof = 578880643u,
			[Token(Token = "0x4000F67")]
			User_LaunchFriendRequestFlow = 151303576u,
			[Token(Token = "0x4000F68")]
			User_LaunchProfile = 171537047u,
			[Token(Token = "0x4000F69")]
			Voip_SetSystemVoipSuppressed = 1161808298u,
			[Token(Token = "0x4000F6A")]
			Notification_ApplicationLifecycle_LaunchIntentChanged = 78859427u,
			[Token(Token = "0x4000F6B")]
			Notification_AssetFile_DownloadUpdate = 803015885u,
			[Token(Token = "0x4000F6C")]
			Notification_Cal_FinalizeApplication = 1963741337u,
			[Token(Token = "0x4000F6D")]
			Notification_Cal_ProposeApplication = 779375093u,
			[Token(Token = "0x4000F6E")]
			Notification_HTTP_Transfer = 2111073839u,
			[Token(Token = "0x4000F6F")]
			Notification_Livestreaming_StatusChange = 575101294u,
			[Token(Token = "0x4000F70")]
			Notification_Matchmaking_MatchFound = 197393623u,
			[Token(Token = "0x4000F71")]
			Notification_Networking_ConnectionStateChange = 1577243802u,
			[Token(Token = "0x4000F72")]
			Notification_Networking_PeerConnectRequest = 1295114959u,
			[Token(Token = "0x4000F73")]
			Notification_Networking_PingResult = 1360343058u,
			[Token(Token = "0x4000F74")]
			Notification_Party_PartyUpdate = 487688882u,
			[Token(Token = "0x4000F75")]
			Notification_Room_InviteAccepted = 1829794225u,
			[Token(Token = "0x4000F76")]
			Notification_Room_InviteReceived = 1783209300u,
			[Token(Token = "0x4000F77")]
			Notification_Room_RoomUpdate = 1626094639u,
			[Token(Token = "0x4000F78")]
			Notification_Voip_ConnectRequest = 908343318u,
			[Token(Token = "0x4000F79")]
			Notification_Voip_StateChange = 888120928u,
			[Token(Token = "0x4000F7A")]
			Notification_Voip_SystemVoipState = 1490179237u,
			[Token(Token = "0x4000F7B")]
			Platform_InitializeWithAccessToken = 896085803u,
			[Token(Token = "0x4000F7C")]
			Platform_InitializeStandaloneOculus = 1375260172u,
			[Token(Token = "0x4000F7D")]
			Platform_InitializeAndroidAsynchronous = 450037684u,
			[Token(Token = "0x4000F7E")]
			Platform_InitializeWindowsAsynchronous = 1839708815u
		}

		[Token(Token = "0x20002AD")]
		internal delegate Message ExtraMessageTypesHandler(IntPtr messageHandle, MessageType message_type);

		[Token(Token = "0x4000426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private MessageType type;

		[Token(Token = "0x4000427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ulong requestID;

		[Token(Token = "0x4000428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Error error;

		[Token(Token = "0x4000429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x243E60", Offset = "0x243E60")]
		private static ExtraMessageTypesHandler <HandleExtraMessageTypes>k__BackingField;

		[Token(Token = "0x170000C9")]
		public MessageType Type
		{
			[Token(Token = "0x6000904")]
			[Address(RVA = "0x5C7D00", Offset = "0x5C7D00", VA = "0x5C7D00")]
			get
			{
				return default(MessageType);
			}
		}

		[Token(Token = "0x170000CA")]
		public bool IsError
		{
			[Token(Token = "0x6000905")]
			[Address(RVA = "0x5C7D08", Offset = "0x5C7D08", VA = "0x5C7D08")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000CB")]
		public ulong RequestID
		{
			[Token(Token = "0x6000906")]
			[Address(RVA = "0x5C7D18", Offset = "0x5C7D18", VA = "0x5C7D18")]
			get
			{
				return default(ulong);
			}
		}

		[Token(Token = "0x170000CC")]
		internal static ExtraMessageTypesHandler HandleExtraMessageTypes
		{
			[Token(Token = "0x6000949")]
			[Address(RVA = "0x5CAFD0", Offset = "0x5CAFD0", VA = "0x5CAFD0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248F4C", Offset = "0x248F4C")]
			private get
			{
				return null;
			}
			[Token(Token = "0x6000948")]
			[Address(RVA = "0x5CAF6C", Offset = "0x5CAF6C", VA = "0x5CAF6C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248F3C", Offset = "0x248F3C")]
			set
			{
			}
		}

		[Token(Token = "0x6000902")]
		[Address(RVA = "0x5C7A20", Offset = "0x5C7A20", VA = "0x5C7A20")]
		public Message(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000903")]
		[Address(RVA = "0x5C7CF8", Offset = "0x5C7CF8", VA = "0x5C7CF8", Slot = "1")]
		~Message()
		{
		}

		[Token(Token = "0x6000907")]
		[Address(RVA = "0x5C7D20", Offset = "0x5C7D20", VA = "0x5C7D20", Slot = "4")]
		public virtual Error GetError()
		{
			return null;
		}

		[Token(Token = "0x6000908")]
		[Address(RVA = "0x5C7D28", Offset = "0x5C7D28", VA = "0x5C7D28", Slot = "5")]
		public virtual PingResult GetPingResult()
		{
			return null;
		}

		[Token(Token = "0x6000909")]
		[Address(RVA = "0x5C7D30", Offset = "0x5C7D30", VA = "0x5C7D30", Slot = "6")]
		public virtual NetworkingPeer GetNetworkingPeer()
		{
			return null;
		}

		[Token(Token = "0x600090A")]
		[Address(RVA = "0x5C7D38", Offset = "0x5C7D38", VA = "0x5C7D38", Slot = "7")]
		public virtual HttpTransferUpdate GetHttpTransferUpdate()
		{
			return null;
		}

		[Token(Token = "0x600090B")]
		[Address(RVA = "0x5C7D40", Offset = "0x5C7D40", VA = "0x5C7D40", Slot = "8")]
		public virtual PlatformInitialize GetPlatformInitialize()
		{
			return null;
		}

		[Token(Token = "0x600090C")]
		[Address(RVA = "0x5C7D48", Offset = "0x5C7D48", VA = "0x5C7D48", Slot = "9")]
		public virtual AbuseReportRecording GetAbuseReportRecording()
		{
			return null;
		}

		[Token(Token = "0x600090D")]
		[Address(RVA = "0x5C7D50", Offset = "0x5C7D50", VA = "0x5C7D50", Slot = "10")]
		public virtual AchievementDefinitionList GetAchievementDefinitions()
		{
			return null;
		}

		[Token(Token = "0x600090E")]
		[Address(RVA = "0x5C7D58", Offset = "0x5C7D58", VA = "0x5C7D58", Slot = "11")]
		public virtual AchievementProgressList GetAchievementProgressList()
		{
			return null;
		}

		[Token(Token = "0x600090F")]
		[Address(RVA = "0x5C7D60", Offset = "0x5C7D60", VA = "0x5C7D60", Slot = "12")]
		public virtual AchievementUpdate GetAchievementUpdate()
		{
			return null;
		}

		[Token(Token = "0x6000910")]
		[Address(RVA = "0x5C7D68", Offset = "0x5C7D68", VA = "0x5C7D68", Slot = "13")]
		public virtual ApplicationVersion GetApplicationVersion()
		{
			return null;
		}

		[Token(Token = "0x6000911")]
		[Address(RVA = "0x5C7D70", Offset = "0x5C7D70", VA = "0x5C7D70", Slot = "14")]
		public virtual AssetDetails GetAssetDetails()
		{
			return null;
		}

		[Token(Token = "0x6000912")]
		[Address(RVA = "0x5C7D78", Offset = "0x5C7D78", VA = "0x5C7D78", Slot = "15")]
		public virtual AssetDetailsList GetAssetDetailsList()
		{
			return null;
		}

		[Token(Token = "0x6000913")]
		[Address(RVA = "0x5C7D80", Offset = "0x5C7D80", VA = "0x5C7D80", Slot = "16")]
		public virtual AssetFileDeleteResult GetAssetFileDeleteResult()
		{
			return null;
		}

		[Token(Token = "0x6000914")]
		[Address(RVA = "0x5C7D88", Offset = "0x5C7D88", VA = "0x5C7D88", Slot = "17")]
		public virtual AssetFileDownloadCancelResult GetAssetFileDownloadCancelResult()
		{
			return null;
		}

		[Token(Token = "0x6000915")]
		[Address(RVA = "0x5C7D90", Offset = "0x5C7D90", VA = "0x5C7D90", Slot = "18")]
		public virtual AssetFileDownloadResult GetAssetFileDownloadResult()
		{
			return null;
		}

		[Token(Token = "0x6000916")]
		[Address(RVA = "0x5C7D98", Offset = "0x5C7D98", VA = "0x5C7D98", Slot = "19")]
		public virtual AssetFileDownloadUpdate GetAssetFileDownloadUpdate()
		{
			return null;
		}

		[Token(Token = "0x6000917")]
		[Address(RVA = "0x5C7DA0", Offset = "0x5C7DA0", VA = "0x5C7DA0", Slot = "20")]
		public virtual CalApplicationFinalized GetCalApplicationFinalized()
		{
			return null;
		}

		[Token(Token = "0x6000918")]
		[Address(RVA = "0x5C7DA8", Offset = "0x5C7DA8", VA = "0x5C7DA8", Slot = "21")]
		public virtual CalApplicationProposed GetCalApplicationProposed()
		{
			return null;
		}

		[Token(Token = "0x6000919")]
		[Address(RVA = "0x5C7DB0", Offset = "0x5C7DB0", VA = "0x5C7DB0", Slot = "22")]
		public virtual CalApplicationSuggestionList GetCalApplicationSuggestionList()
		{
			return null;
		}

		[Token(Token = "0x600091A")]
		[Address(RVA = "0x5C7DB8", Offset = "0x5C7DB8", VA = "0x5C7DB8", Slot = "23")]
		public virtual CloudStorageConflictMetadata GetCloudStorageConflictMetadata()
		{
			return null;
		}

		[Token(Token = "0x600091B")]
		[Address(RVA = "0x5C7DC0", Offset = "0x5C7DC0", VA = "0x5C7DC0", Slot = "24")]
		public virtual CloudStorageData GetCloudStorageData()
		{
			return null;
		}

		[Token(Token = "0x600091C")]
		[Address(RVA = "0x5C7DC8", Offset = "0x5C7DC8", VA = "0x5C7DC8", Slot = "25")]
		public virtual CloudStorageMetadata GetCloudStorageMetadata()
		{
			return null;
		}

		[Token(Token = "0x600091D")]
		[Address(RVA = "0x5C7DD0", Offset = "0x5C7DD0", VA = "0x5C7DD0", Slot = "26")]
		public virtual CloudStorageMetadataList GetCloudStorageMetadataList()
		{
			return null;
		}

		[Token(Token = "0x600091E")]
		[Address(RVA = "0x5C7DD8", Offset = "0x5C7DD8", VA = "0x5C7DD8", Slot = "27")]
		public virtual CloudStorageUpdateResponse GetCloudStorageUpdateResponse()
		{
			return null;
		}

		[Token(Token = "0x600091F")]
		[Address(RVA = "0x5C7DE0", Offset = "0x5C7DE0", VA = "0x5C7DE0", Slot = "28")]
		public virtual InstalledApplicationList GetInstalledApplicationList()
		{
			return null;
		}

		[Token(Token = "0x6000920")]
		[Address(RVA = "0x5C7DE8", Offset = "0x5C7DE8", VA = "0x5C7DE8", Slot = "29")]
		public virtual LaunchBlockFlowResult GetLaunchBlockFlowResult()
		{
			return null;
		}

		[Token(Token = "0x6000921")]
		[Address(RVA = "0x5C7DF0", Offset = "0x5C7DF0", VA = "0x5C7DF0", Slot = "30")]
		public virtual LaunchFriendRequestFlowResult GetLaunchFriendRequestFlowResult()
		{
			return null;
		}

		[Token(Token = "0x6000922")]
		[Address(RVA = "0x5C7DF8", Offset = "0x5C7DF8", VA = "0x5C7DF8", Slot = "31")]
		public virtual LaunchReportFlowResult GetLaunchReportFlowResult()
		{
			return null;
		}

		[Token(Token = "0x6000923")]
		[Address(RVA = "0x5C7E00", Offset = "0x5C7E00", VA = "0x5C7E00", Slot = "32")]
		public virtual LaunchUnblockFlowResult GetLaunchUnblockFlowResult()
		{
			return null;
		}

		[Token(Token = "0x6000924")]
		[Address(RVA = "0x5C7E08", Offset = "0x5C7E08", VA = "0x5C7E08", Slot = "33")]
		public virtual bool GetLeaderboardDidUpdate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000925")]
		[Address(RVA = "0x5C7E10", Offset = "0x5C7E10", VA = "0x5C7E10", Slot = "34")]
		public virtual LeaderboardEntryList GetLeaderboardEntryList()
		{
			return null;
		}

		[Token(Token = "0x6000926")]
		[Address(RVA = "0x5C7E18", Offset = "0x5C7E18", VA = "0x5C7E18", Slot = "35")]
		public virtual LinkedAccountList GetLinkedAccountList()
		{
			return null;
		}

		[Token(Token = "0x6000927")]
		[Address(RVA = "0x5C7E20", Offset = "0x5C7E20", VA = "0x5C7E20", Slot = "36")]
		public virtual LivestreamingApplicationStatus GetLivestreamingApplicationStatus()
		{
			return null;
		}

		[Token(Token = "0x6000928")]
		[Address(RVA = "0x5C7E28", Offset = "0x5C7E28", VA = "0x5C7E28", Slot = "37")]
		public virtual LivestreamingStartResult GetLivestreamingStartResult()
		{
			return null;
		}

		[Token(Token = "0x6000929")]
		[Address(RVA = "0x5C7E30", Offset = "0x5C7E30", VA = "0x5C7E30", Slot = "38")]
		public virtual LivestreamingStatus GetLivestreamingStatus()
		{
			return null;
		}

		[Token(Token = "0x600092A")]
		[Address(RVA = "0x5C7E38", Offset = "0x5C7E38", VA = "0x5C7E38", Slot = "39")]
		public virtual LivestreamingVideoStats GetLivestreamingVideoStats()
		{
			return null;
		}

		[Token(Token = "0x600092B")]
		[Address(RVA = "0x5C7E40", Offset = "0x5C7E40", VA = "0x5C7E40", Slot = "40")]
		public virtual MatchmakingAdminSnapshot GetMatchmakingAdminSnapshot()
		{
			return null;
		}

		[Token(Token = "0x600092C")]
		[Address(RVA = "0x5C7E48", Offset = "0x5C7E48", VA = "0x5C7E48", Slot = "41")]
		public virtual MatchmakingBrowseResult GetMatchmakingBrowseResult()
		{
			return null;
		}

		[Token(Token = "0x600092D")]
		[Address(RVA = "0x5C7E50", Offset = "0x5C7E50", VA = "0x5C7E50", Slot = "42")]
		public virtual MatchmakingEnqueueResult GetMatchmakingEnqueueResult()
		{
			return null;
		}

		[Token(Token = "0x600092E")]
		[Address(RVA = "0x5C7E58", Offset = "0x5C7E58", VA = "0x5C7E58", Slot = "43")]
		public virtual MatchmakingEnqueueResultAndRoom GetMatchmakingEnqueueResultAndRoom()
		{
			return null;
		}

		[Token(Token = "0x600092F")]
		[Address(RVA = "0x5C7E60", Offset = "0x5C7E60", VA = "0x5C7E60", Slot = "44")]
		public virtual MatchmakingStats GetMatchmakingStats()
		{
			return null;
		}

		[Token(Token = "0x6000930")]
		[Address(RVA = "0x5C7E68", Offset = "0x5C7E68", VA = "0x5C7E68", Slot = "45")]
		public virtual OrgScopedID GetOrgScopedID()
		{
			return null;
		}

		[Token(Token = "0x6000931")]
		[Address(RVA = "0x5C7E70", Offset = "0x5C7E70", VA = "0x5C7E70", Slot = "46")]
		public virtual Party GetParty()
		{
			return null;
		}

		[Token(Token = "0x6000932")]
		[Address(RVA = "0x5C7E78", Offset = "0x5C7E78", VA = "0x5C7E78", Slot = "47")]
		public virtual PartyID GetPartyID()
		{
			return null;
		}

		[Token(Token = "0x6000933")]
		[Address(RVA = "0x5C7E80", Offset = "0x5C7E80", VA = "0x5C7E80", Slot = "48")]
		public virtual PartyUpdateNotification GetPartyUpdateNotification()
		{
			return null;
		}

		[Token(Token = "0x6000934")]
		[Address(RVA = "0x5C7E88", Offset = "0x5C7E88", VA = "0x5C7E88", Slot = "49")]
		public virtual PidList GetPidList()
		{
			return null;
		}

		[Token(Token = "0x6000935")]
		[Address(RVA = "0x5C7E90", Offset = "0x5C7E90", VA = "0x5C7E90", Slot = "50")]
		public virtual ProductList GetProductList()
		{
			return null;
		}

		[Token(Token = "0x6000936")]
		[Address(RVA = "0x5C7E98", Offset = "0x5C7E98", VA = "0x5C7E98", Slot = "51")]
		public virtual Purchase GetPurchase()
		{
			return null;
		}

		[Token(Token = "0x6000937")]
		[Address(RVA = "0x5C7EA0", Offset = "0x5C7EA0", VA = "0x5C7EA0", Slot = "52")]
		public virtual PurchaseList GetPurchaseList()
		{
			return null;
		}

		[Token(Token = "0x6000938")]
		[Address(RVA = "0x5C7EA8", Offset = "0x5C7EA8", VA = "0x5C7EA8", Slot = "53")]
		public virtual Room GetRoom()
		{
			return null;
		}

		[Token(Token = "0x6000939")]
		[Address(RVA = "0x5C7EB0", Offset = "0x5C7EB0", VA = "0x5C7EB0", Slot = "54")]
		public virtual RoomInviteNotification GetRoomInviteNotification()
		{
			return null;
		}

		[Token(Token = "0x600093A")]
		[Address(RVA = "0x5C7EB8", Offset = "0x5C7EB8", VA = "0x5C7EB8", Slot = "55")]
		public virtual RoomInviteNotificationList GetRoomInviteNotificationList()
		{
			return null;
		}

		[Token(Token = "0x600093B")]
		[Address(RVA = "0x5C7EC0", Offset = "0x5C7EC0", VA = "0x5C7EC0", Slot = "56")]
		public virtual RoomList GetRoomList()
		{
			return null;
		}

		[Token(Token = "0x600093C")]
		[Address(RVA = "0x5C7EC8", Offset = "0x5C7EC8", VA = "0x5C7EC8", Slot = "57")]
		public virtual SdkAccountList GetSdkAccountList()
		{
			return null;
		}

		[Token(Token = "0x600093D")]
		[Address(RVA = "0x5C7ED0", Offset = "0x5C7ED0", VA = "0x5C7ED0", Slot = "58")]
		public virtual ShareMediaResult GetShareMediaResult()
		{
			return null;
		}

		[Token(Token = "0x600093E")]
		[Address(RVA = "0x5C7ED8", Offset = "0x5C7ED8", VA = "0x5C7ED8", Slot = "59")]
		public virtual string GetString()
		{
			return null;
		}

		[Token(Token = "0x600093F")]
		[Address(RVA = "0x5C7EE0", Offset = "0x5C7EE0", VA = "0x5C7EE0", Slot = "60")]
		public virtual SystemPermission GetSystemPermission()
		{
			return null;
		}

		[Token(Token = "0x6000940")]
		[Address(RVA = "0x5C7EE8", Offset = "0x5C7EE8", VA = "0x5C7EE8", Slot = "61")]
		public virtual SystemVoipState GetSystemVoipState()
		{
			return null;
		}

		[Token(Token = "0x6000941")]
		[Address(RVA = "0x5C7EF0", Offset = "0x5C7EF0", VA = "0x5C7EF0", Slot = "62")]
		public virtual User GetUser()
		{
			return null;
		}

		[Token(Token = "0x6000942")]
		[Address(RVA = "0x5C7EF8", Offset = "0x5C7EF8", VA = "0x5C7EF8", Slot = "63")]
		public virtual UserAndRoomList GetUserAndRoomList()
		{
			return null;
		}

		[Token(Token = "0x6000943")]
		[Address(RVA = "0x5C7F00", Offset = "0x5C7F00", VA = "0x5C7F00", Slot = "64")]
		public virtual UserList GetUserList()
		{
			return null;
		}

		[Token(Token = "0x6000944")]
		[Address(RVA = "0x5C7F08", Offset = "0x5C7F08", VA = "0x5C7F08", Slot = "65")]
		public virtual UserProof GetUserProof()
		{
			return null;
		}

		[Token(Token = "0x6000945")]
		[Address(RVA = "0x5C7F10", Offset = "0x5C7F10", VA = "0x5C7F10", Slot = "66")]
		public virtual UserReportID GetUserReportID()
		{
			return null;
		}

		[Token(Token = "0x6000946")]
		[Address(RVA = "0x5C7F18", Offset = "0x5C7F18", VA = "0x5C7F18")]
		internal static Message ParseMessageHandle(IntPtr messageHandle)
		{
			return null;
		}

		[Token(Token = "0x6000947")]
		[Address(RVA = "0x5C044C", Offset = "0x5C044C", VA = "0x5C044C")]
		public static Message PopMessage()
		{
			return null;
		}
	}
	[Token(Token = "0x20000CB")]
	public class MessageWithAbuseReportRecording : Message<AbuseReportRecording>
	{
		[Token(Token = "0x600094A")]
		[Address(RVA = "0x5CB3E0", Offset = "0x5CB3E0", VA = "0x5CB3E0")]
		public MessageWithAbuseReportRecording(IntPtr c_message)
		{
		}

		[Token(Token = "0x600094B")]
		[Address(RVA = "0x5CB44C", Offset = "0x5CB44C", VA = "0x5CB44C", Slot = "9")]
		public override AbuseReportRecording GetAbuseReportRecording()
		{
			return null;
		}

		[Token(Token = "0x600094C")]
		[Address(RVA = "0x5CB49C", Offset = "0x5CB49C", VA = "0x5CB49C", Slot = "67")]
		protected override AbuseReportRecording GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000CC")]
	public class MessageWithAchievementDefinitions : Message<AchievementDefinitionList>
	{
		[Token(Token = "0x600094D")]
		[Address(RVA = "0x5C92CC", Offset = "0x5C92CC", VA = "0x5C92CC")]
		public MessageWithAchievementDefinitions(IntPtr c_message)
		{
		}

		[Token(Token = "0x600094E")]
		[Address(RVA = "0x5CB5E8", Offset = "0x5CB5E8", VA = "0x5CB5E8", Slot = "10")]
		public override AchievementDefinitionList GetAchievementDefinitions()
		{
			return null;
		}

		[Token(Token = "0x600094F")]
		[Address(RVA = "0x5CB638", Offset = "0x5CB638", VA = "0x5CB638", Slot = "67")]
		protected override AchievementDefinitionList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000CD")]
	public class MessageWithAchievementProgressList : Message<AchievementProgressList>
	{
		[Token(Token = "0x6000950")]
		[Address(RVA = "0x5C9338", Offset = "0x5C9338", VA = "0x5C9338")]
		public MessageWithAchievementProgressList(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000951")]
		[Address(RVA = "0x5CB954", Offset = "0x5CB954", VA = "0x5CB954", Slot = "11")]
		public override AchievementProgressList GetAchievementProgressList()
		{
			return null;
		}

		[Token(Token = "0x6000952")]
		[Address(RVA = "0x5CB9A4", Offset = "0x5CB9A4", VA = "0x5CB9A4", Slot = "67")]
		protected override AchievementProgressList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000CE")]
	public class MessageWithAchievementUpdate : Message<AchievementUpdate>
	{
		[Token(Token = "0x6000953")]
		[Address(RVA = "0x5C93A4", Offset = "0x5C93A4", VA = "0x5C93A4")]
		public MessageWithAchievementUpdate(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000954")]
		[Address(RVA = "0x5CBCC0", Offset = "0x5CBCC0", VA = "0x5CBCC0", Slot = "12")]
		public override AchievementUpdate GetAchievementUpdate()
		{
			return null;
		}

		[Token(Token = "0x6000955")]
		[Address(RVA = "0x5CBD10", Offset = "0x5CBD10", VA = "0x5CBD10", Slot = "67")]
		protected override AchievementUpdate GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000CF")]
	public class MessageWithApplicationVersion : Message<ApplicationVersion>
	{
		[Token(Token = "0x6000956")]
		[Address(RVA = "0x5C9410", Offset = "0x5C9410", VA = "0x5C9410")]
		public MessageWithApplicationVersion(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000957")]
		[Address(RVA = "0x5CBE6C", Offset = "0x5CBE6C", VA = "0x5CBE6C", Slot = "13")]
		public override ApplicationVersion GetApplicationVersion()
		{
			return null;
		}

		[Token(Token = "0x6000958")]
		[Address(RVA = "0x5CBEBC", Offset = "0x5CBEBC", VA = "0x5CBEBC", Slot = "67")]
		protected override ApplicationVersion GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000D0")]
	public class MessageWithAssetDetails : Message<AssetDetails>
	{
		[Token(Token = "0x6000959")]
		[Address(RVA = "0x5C947C", Offset = "0x5C947C", VA = "0x5C947C")]
		public MessageWithAssetDetails(IntPtr c_message)
		{
		}

		[Token(Token = "0x600095A")]
		[Address(RVA = "0x5CC038", Offset = "0x5CC038", VA = "0x5CC038", Slot = "14")]
		public override AssetDetails GetAssetDetails()
		{
			return null;
		}

		[Token(Token = "0x600095B")]
		[Address(RVA = "0x5CC088", Offset = "0x5CC088", VA = "0x5CC088", Slot = "67")]
		protected override AssetDetails GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000D1")]
	public class MessageWithAssetDetailsList : Message<AssetDetailsList>
	{
		[Token(Token = "0x600095C")]
		[Address(RVA = "0x5C94E8", Offset = "0x5C94E8", VA = "0x5C94E8")]
		public MessageWithAssetDetailsList(IntPtr c_message)
		{
		}

		[Token(Token = "0x600095D")]
		[Address(RVA = "0x5CC268", Offset = "0x5CC268", VA = "0x5CC268", Slot = "15")]
		public override AssetDetailsList GetAssetDetailsList()
		{
			return null;
		}

		[Token(Token = "0x600095E")]
		[Address(RVA = "0x5CC2B8", Offset = "0x5CC2B8", VA = "0x5CC2B8", Slot = "67")]
		protected override AssetDetailsList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000D2")]
	public class MessageWithAssetFileDeleteResult : Message<AssetFileDeleteResult>
	{
		[Token(Token = "0x600095F")]
		[Address(RVA = "0x5C9554", Offset = "0x5C9554", VA = "0x5C9554")]
		public MessageWithAssetFileDeleteResult(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000960")]
		[Address(RVA = "0x5CC594", Offset = "0x5CC594", VA = "0x5CC594", Slot = "16")]
		public override AssetFileDeleteResult GetAssetFileDeleteResult()
		{
			return null;
		}

		[Token(Token = "0x6000961")]
		[Address(RVA = "0x5CC5E4", Offset = "0x5CC5E4", VA = "0x5CC5E4", Slot = "67")]
		protected override AssetFileDeleteResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000D3")]
	public class MessageWithAssetFileDownloadCancelResult : Message<AssetFileDownloadCancelResult>
	{
		[Token(Token = "0x6000962")]
		[Address(RVA = "0x5C95C0", Offset = "0x5C95C0", VA = "0x5C95C0")]
		public MessageWithAssetFileDownloadCancelResult(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000963")]
		[Address(RVA = "0x5CC760", Offset = "0x5CC760", VA = "0x5CC760", Slot = "17")]
		public override AssetFileDownloadCancelResult GetAssetFileDownloadCancelResult()
		{
			return null;
		}

		[Token(Token = "0x6000964")]
		[Address(RVA = "0x5CC7B0", Offset = "0x5CC7B0", VA = "0x5CC7B0", Slot = "67")]
		protected override AssetFileDownloadCancelResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000D4")]
	public class MessageWithAssetFileDownloadResult : Message<AssetFileDownloadResult>
	{
		[Token(Token = "0x6000965")]
		[Address(RVA = "0x5C962C", Offset = "0x5C962C", VA = "0x5C962C")]
		public MessageWithAssetFileDownloadResult(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000966")]
		[Address(RVA = "0x5CC92C", Offset = "0x5CC92C", VA = "0x5CC92C", Slot = "18")]
		public override AssetFileDownloadResult GetAssetFileDownloadResult()
		{
			return null;
		}

		[Token(Token = "0x6000967")]
		[Address(RVA = "0x5CC97C", Offset = "0x5CC97C", VA = "0x5CC97C", Slot = "67")]
		protected override AssetFileDownloadResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000D5")]
	public class MessageWithAssetFileDownloadUpdate : Message<AssetFileDownloadUpdate>
	{
		[Token(Token = "0x6000968")]
		[Address(RVA = "0x5C9698", Offset = "0x5C9698", VA = "0x5C9698")]
		public MessageWithAssetFileDownloadUpdate(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000969")]
		[Address(RVA = "0x5CCAD8", Offset = "0x5CCAD8", VA = "0x5CCAD8", Slot = "19")]
		public override AssetFileDownloadUpdate GetAssetFileDownloadUpdate()
		{
			return null;
		}

		[Token(Token = "0x600096A")]
		[Address(RVA = "0x5CCB28", Offset = "0x5CCB28", VA = "0x5CCB28", Slot = "67")]
		protected override AssetFileDownloadUpdate GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000D6")]
	public class MessageWithCalApplicationFinalized : Message<CalApplicationFinalized>
	{
		[Token(Token = "0x600096B")]
		[Address(RVA = "0x5C9704", Offset = "0x5C9704", VA = "0x5C9704")]
		public MessageWithCalApplicationFinalized(IntPtr c_message)
		{
		}

		[Token(Token = "0x600096C")]
		[Address(RVA = "0x5CCCB4", Offset = "0x5CCCB4", VA = "0x5CCCB4", Slot = "20")]
		public override CalApplicationFinalized GetCalApplicationFinalized()
		{
			return null;
		}

		[Token(Token = "0x600096D")]
		[Address(RVA = "0x5CCD04", Offset = "0x5CCD04", VA = "0x5CCD04", Slot = "67")]
		protected override CalApplicationFinalized GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000D7")]
	public class MessageWithCalApplicationProposed : Message<CalApplicationProposed>
	{
		[Token(Token = "0x600096E")]
		[Address(RVA = "0x5C9770", Offset = "0x5C9770", VA = "0x5C9770")]
		public MessageWithCalApplicationProposed(IntPtr c_message)
		{
		}

		[Token(Token = "0x600096F")]
		[Address(RVA = "0x5CCE70", Offset = "0x5CCE70", VA = "0x5CCE70", Slot = "21")]
		public override CalApplicationProposed GetCalApplicationProposed()
		{
			return null;
		}

		[Token(Token = "0x6000970")]
		[Address(RVA = "0x5CCEC0", Offset = "0x5CCEC0", VA = "0x5CCEC0", Slot = "67")]
		protected override CalApplicationProposed GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000D8")]
	public class MessageWithCalApplicationSuggestionList : Message<CalApplicationSuggestionList>
	{
		[Token(Token = "0x6000971")]
		[Address(RVA = "0x5CD00C", Offset = "0x5CD00C", VA = "0x5CD00C")]
		public MessageWithCalApplicationSuggestionList(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000972")]
		[Address(RVA = "0x5CD078", Offset = "0x5CD078", VA = "0x5CD078", Slot = "22")]
		public override CalApplicationSuggestionList GetCalApplicationSuggestionList()
		{
			return null;
		}

		[Token(Token = "0x6000973")]
		[Address(RVA = "0x5CD0C8", Offset = "0x5CD0C8", VA = "0x5CD0C8", Slot = "67")]
		protected override CalApplicationSuggestionList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000D9")]
	public class MessageWithCloudStorageConflictMetadata : Message<CloudStorageConflictMetadata>
	{
		[Token(Token = "0x6000974")]
		[Address(RVA = "0x5C97DC", Offset = "0x5C97DC", VA = "0x5C97DC")]
		public MessageWithCloudStorageConflictMetadata(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000975")]
		[Address(RVA = "0x5CD3A4", Offset = "0x5CD3A4", VA = "0x5CD3A4", Slot = "23")]
		public override CloudStorageConflictMetadata GetCloudStorageConflictMetadata()
		{
			return null;
		}

		[Token(Token = "0x6000976")]
		[Address(RVA = "0x5CD3F4", Offset = "0x5CD3F4", VA = "0x5CD3F4", Slot = "67")]
		protected override CloudStorageConflictMetadata GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000DA")]
	public class MessageWithCloudStorageData : Message<CloudStorageData>
	{
		[Token(Token = "0x6000977")]
		[Address(RVA = "0x5C9848", Offset = "0x5C9848", VA = "0x5C9848")]
		public MessageWithCloudStorageData(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000978")]
		[Address(RVA = "0x5CD58C", Offset = "0x5CD58C", VA = "0x5CD58C", Slot = "24")]
		public override CloudStorageData GetCloudStorageData()
		{
			return null;
		}

		[Token(Token = "0x6000979")]
		[Address(RVA = "0x5CD5DC", Offset = "0x5CD5DC", VA = "0x5CD5DC", Slot = "67")]
		protected override CloudStorageData GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000DB")]
	public class MessageWithCloudStorageMetadataUnderLocal : Message<CloudStorageMetadata>
	{
		[Token(Token = "0x600097A")]
		[Address(RVA = "0x5C98B4", Offset = "0x5C98B4", VA = "0x5C98B4")]
		public MessageWithCloudStorageMetadataUnderLocal(IntPtr c_message)
		{
		}

		[Token(Token = "0x600097B")]
		[Address(RVA = "0x5CDAC4", Offset = "0x5CDAC4", VA = "0x5CDAC4", Slot = "25")]
		public override CloudStorageMetadata GetCloudStorageMetadata()
		{
			return null;
		}

		[Token(Token = "0x600097C")]
		[Address(RVA = "0x5CDB14", Offset = "0x5CDB14", VA = "0x5CDB14", Slot = "67")]
		protected override CloudStorageMetadata GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000DC")]
	public class MessageWithCloudStorageMetadataList : Message<CloudStorageMetadataList>
	{
		[Token(Token = "0x600097D")]
		[Address(RVA = "0x5C9920", Offset = "0x5C9920", VA = "0x5C9920")]
		public MessageWithCloudStorageMetadataList(IntPtr c_message)
		{
		}

		[Token(Token = "0x600097E")]
		[Address(RVA = "0x5CD758", Offset = "0x5CD758", VA = "0x5CD758", Slot = "26")]
		public override CloudStorageMetadataList GetCloudStorageMetadataList()
		{
			return null;
		}

		[Token(Token = "0x600097F")]
		[Address(RVA = "0x5CD7A8", Offset = "0x5CD7A8", VA = "0x5CD7A8", Slot = "67")]
		protected override CloudStorageMetadataList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000DD")]
	public class MessageWithCloudStorageUpdateResponse : Message<CloudStorageUpdateResponse>
	{
		[Token(Token = "0x6000980")]
		[Address(RVA = "0x5C998C", Offset = "0x5C998C", VA = "0x5C998C")]
		public MessageWithCloudStorageUpdateResponse(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000981")]
		[Address(RVA = "0x5CDCD0", Offset = "0x5CDCD0", VA = "0x5CDCD0", Slot = "27")]
		public override CloudStorageUpdateResponse GetCloudStorageUpdateResponse()
		{
			return null;
		}

		[Token(Token = "0x6000982")]
		[Address(RVA = "0x5CDD20", Offset = "0x5CDD20", VA = "0x5CDD20", Slot = "67")]
		protected override CloudStorageUpdateResponse GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000DE")]
	public class MessageWithInstalledApplicationList : Message<InstalledApplicationList>
	{
		[Token(Token = "0x6000983")]
		[Address(RVA = "0x5CE144", Offset = "0x5CE144", VA = "0x5CE144")]
		public MessageWithInstalledApplicationList(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000984")]
		[Address(RVA = "0x5CE1B0", Offset = "0x5CE1B0", VA = "0x5CE1B0", Slot = "28")]
		public override InstalledApplicationList GetInstalledApplicationList()
		{
			return null;
		}

		[Token(Token = "0x6000985")]
		[Address(RVA = "0x5CE200", Offset = "0x5CE200", VA = "0x5CE200", Slot = "67")]
		protected override InstalledApplicationList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000DF")]
	public class MessageWithLaunchBlockFlowResult : Message<LaunchBlockFlowResult>
	{
		[Token(Token = "0x6000986")]
		[Address(RVA = "0x5CE4DC", Offset = "0x5CE4DC", VA = "0x5CE4DC")]
		public MessageWithLaunchBlockFlowResult(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000987")]
		[Address(RVA = "0x5CE548", Offset = "0x5CE548", VA = "0x5CE548", Slot = "29")]
		public override LaunchBlockFlowResult GetLaunchBlockFlowResult()
		{
			return null;
		}

		[Token(Token = "0x6000988")]
		[Address(RVA = "0x5CE598", Offset = "0x5CE598", VA = "0x5CE598", Slot = "67")]
		protected override LaunchBlockFlowResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000E0")]
	public class MessageWithLaunchFriendRequestFlowResult : Message<LaunchFriendRequestFlowResult>
	{
		[Token(Token = "0x6000989")]
		[Address(RVA = "0x5C99F8", Offset = "0x5C99F8", VA = "0x5C99F8")]
		public MessageWithLaunchFriendRequestFlowResult(IntPtr c_message)
		{
		}

		[Token(Token = "0x600098A")]
		[Address(RVA = "0x5CE6F4", Offset = "0x5CE6F4", VA = "0x5CE6F4", Slot = "30")]
		public override LaunchFriendRequestFlowResult GetLaunchFriendRequestFlowResult()
		{
			return null;
		}

		[Token(Token = "0x600098B")]
		[Address(RVA = "0x5CE744", Offset = "0x5CE744", VA = "0x5CE744", Slot = "67")]
		protected override LaunchFriendRequestFlowResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000E1")]
	public class MessageWithLaunchReportFlowResult : Message<LaunchReportFlowResult>
	{
		[Token(Token = "0x600098C")]
		[Address(RVA = "0x5CE8A0", Offset = "0x5CE8A0", VA = "0x5CE8A0")]
		public MessageWithLaunchReportFlowResult(IntPtr c_message)
		{
		}

		[Token(Token = "0x600098D")]
		[Address(RVA = "0x5CE90C", Offset = "0x5CE90C", VA = "0x5CE90C", Slot = "31")]
		public override LaunchReportFlowResult GetLaunchReportFlowResult()
		{
			return null;
		}

		[Token(Token = "0x600098E")]
		[Address(RVA = "0x5CE95C", Offset = "0x5CE95C", VA = "0x5CE95C", Slot = "67")]
		protected override LaunchReportFlowResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000E2")]
	public class MessageWithLaunchUnblockFlowResult : Message<LaunchUnblockFlowResult>
	{
		[Token(Token = "0x600098F")]
		[Address(RVA = "0x5CEAB8", Offset = "0x5CEAB8", VA = "0x5CEAB8")]
		public MessageWithLaunchUnblockFlowResult(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000990")]
		[Address(RVA = "0x5CEB24", Offset = "0x5CEB24", VA = "0x5CEB24", Slot = "32")]
		public override LaunchUnblockFlowResult GetLaunchUnblockFlowResult()
		{
			return null;
		}

		[Token(Token = "0x6000991")]
		[Address(RVA = "0x5CEB74", Offset = "0x5CEB74", VA = "0x5CEB74", Slot = "67")]
		protected override LaunchUnblockFlowResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000E3")]
	public class MessageWithLeaderboardEntryList : Message<LeaderboardEntryList>
	{
		[Token(Token = "0x6000992")]
		[Address(RVA = "0x5C9A64", Offset = "0x5C9A64", VA = "0x5C9A64")]
		public MessageWithLeaderboardEntryList(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000993")]
		[Address(RVA = "0x5CEDB4", Offset = "0x5CEDB4", VA = "0x5CEDB4", Slot = "34")]
		public override LeaderboardEntryList GetLeaderboardEntryList()
		{
			return null;
		}

		[Token(Token = "0x6000994")]
		[Address(RVA = "0x5CEE04", Offset = "0x5CEE04", VA = "0x5CEE04", Slot = "67")]
		protected override LeaderboardEntryList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000E4")]
	public class MessageWithLinkedAccountList : Message<LinkedAccountList>
	{
		[Token(Token = "0x6000995")]
		[Address(RVA = "0x5CF144", Offset = "0x5CF144", VA = "0x5CF144")]
		public MessageWithLinkedAccountList(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000996")]
		[Address(RVA = "0x5CF1B0", Offset = "0x5CF1B0", VA = "0x5CF1B0", Slot = "35")]
		public override LinkedAccountList GetLinkedAccountList()
		{
			return null;
		}

		[Token(Token = "0x6000997")]
		[Address(RVA = "0x5CF200", Offset = "0x5CF200", VA = "0x5CF200", Slot = "67")]
		protected override LinkedAccountList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000E5")]
	public class MessageWithLivestreamingApplicationStatus : Message<LivestreamingApplicationStatus>
	{
		[Token(Token = "0x6000998")]
		[Address(RVA = "0x5CF4DC", Offset = "0x5CF4DC", VA = "0x5CF4DC")]
		public MessageWithLivestreamingApplicationStatus(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000999")]
		[Address(RVA = "0x5CF548", Offset = "0x5CF548", VA = "0x5CF548", Slot = "36")]
		public override LivestreamingApplicationStatus GetLivestreamingApplicationStatus()
		{
			return null;
		}

		[Token(Token = "0x600099A")]
		[Address(RVA = "0x5CF598", Offset = "0x5CF598", VA = "0x5CF598", Slot = "67")]
		protected override LivestreamingApplicationStatus GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000E6")]
	public class MessageWithLivestreamingStartResult : Message<LivestreamingStartResult>
	{
		[Token(Token = "0x600099B")]
		[Address(RVA = "0x5CF6E4", Offset = "0x5CF6E4", VA = "0x5CF6E4")]
		public MessageWithLivestreamingStartResult(IntPtr c_message)
		{
		}

		[Token(Token = "0x600099C")]
		[Address(RVA = "0x5CF750", Offset = "0x5CF750", VA = "0x5CF750", Slot = "37")]
		public override LivestreamingStartResult GetLivestreamingStartResult()
		{
			return null;
		}

		[Token(Token = "0x600099D")]
		[Address(RVA = "0x5CF7A0", Offset = "0x5CF7A0", VA = "0x5CF7A0", Slot = "67")]
		protected override LivestreamingStartResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000E7")]
	public class MessageWithLivestreamingStatus : Message<LivestreamingStatus>
	{
		[Token(Token = "0x600099E")]
		[Address(RVA = "0x5C9B3C", Offset = "0x5C9B3C", VA = "0x5C9B3C")]
		public MessageWithLivestreamingStatus(IntPtr c_message)
		{
		}

		[Token(Token = "0x600099F")]
		[Address(RVA = "0x5CF8EC", Offset = "0x5CF8EC", VA = "0x5CF8EC", Slot = "38")]
		public override LivestreamingStatus GetLivestreamingStatus()
		{
			return null;
		}

		[Token(Token = "0x60009A0")]
		[Address(RVA = "0x5CF93C", Offset = "0x5CF93C", VA = "0x5CF93C", Slot = "67")]
		protected override LivestreamingStatus GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000E8")]
	public class MessageWithLivestreamingVideoStats : Message<LivestreamingVideoStats>
	{
		[Token(Token = "0x60009A1")]
		[Address(RVA = "0x5CFAC8", Offset = "0x5CFAC8", VA = "0x5CFAC8")]
		public MessageWithLivestreamingVideoStats(IntPtr c_message)
		{
		}

		[Token(Token = "0x60009A2")]
		[Address(RVA = "0x5CFB34", Offset = "0x5CFB34", VA = "0x5CFB34", Slot = "39")]
		public override LivestreamingVideoStats GetLivestreamingVideoStats()
		{
			return null;
		}

		[Token(Token = "0x60009A3")]
		[Address(RVA = "0x5CFB84", Offset = "0x5CFB84", VA = "0x5CFB84", Slot = "67")]
		protected override LivestreamingVideoStats GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000E9")]
	public class MessageWithMatchmakingAdminSnapshot : Message<MatchmakingAdminSnapshot>
	{
		[Token(Token = "0x60009A4")]
		[Address(RVA = "0x5C9BA8", Offset = "0x5C9BA8", VA = "0x5C9BA8")]
		public MessageWithMatchmakingAdminSnapshot(IntPtr c_message)
		{
		}

		[Token(Token = "0x60009A5")]
		[Address(RVA = "0x5CFCF0", Offset = "0x5CFCF0", VA = "0x5CFCF0", Slot = "40")]
		public override MatchmakingAdminSnapshot GetMatchmakingAdminSnapshot()
		{
			return null;
		}

		[Token(Token = "0x60009A6")]
		[Address(RVA = "0x5CFD40", Offset = "0x5CFD40", VA = "0x5CFD40", Slot = "67")]
		protected override MatchmakingAdminSnapshot GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000EA")]
	public class MessageWithMatchmakingEnqueueResult : Message<MatchmakingEnqueueResult>
	{
		[Token(Token = "0x60009A7")]
		[Address(RVA = "0x5C9C80", Offset = "0x5C9C80", VA = "0x5C9C80")]
		public MessageWithMatchmakingEnqueueResult(IntPtr c_message)
		{
		}

		[Token(Token = "0x60009A8")]
		[Address(RVA = "0x5D012C", Offset = "0x5D012C", VA = "0x5D012C", Slot = "42")]
		public override MatchmakingEnqueueResult GetMatchmakingEnqueueResult()
		{
			return null;
		}

		[Token(Token = "0x60009A9")]
		[Address(RVA = "0x5D017C", Offset = "0x5D017C", VA = "0x5D017C", Slot = "67")]
		protected override MatchmakingEnqueueResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000EB")]
	public class MessageWithMatchmakingEnqueueResultAndRoom : Message<MatchmakingEnqueueResultAndRoom>
	{
		[Token(Token = "0x60009AA")]
		[Address(RVA = "0x5C9CEC", Offset = "0x5C9CEC", VA = "0x5C9CEC")]
		public MessageWithMatchmakingEnqueueResultAndRoom(IntPtr c_message)
		{
		}

		[Token(Token = "0x60009AB")]
		[Address(RVA = "0x5D0398", Offset = "0x5D0398", VA = "0x5D0398", Slot = "43")]
		public override MatchmakingEnqueueResultAndRoom GetMatchmakingEnqueueResultAndRoom()
		{
			return null;
		}

		[Token(Token = "0x60009AC")]
		[Address(RVA = "0x5D03E8", Offset = "0x5D03E8", VA = "0x5D03E8", Slot = "67")]
		protected override MatchmakingEnqueueResultAndRoom GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000EC")]
	public class MessageWithMatchmakingStatsUnderMatchmakingStats : Message<MatchmakingStats>
	{
		[Token(Token = "0x60009AD")]
		[Address(RVA = "0x5C9D58", Offset = "0x5C9D58", VA = "0x5C9D58")]
		public MessageWithMatchmakingStatsUnderMatchmakingStats(IntPtr c_message)
		{
		}

		[Token(Token = "0x60009AE")]
		[Address(RVA = "0x5D09D0", Offset = "0x5D09D0", VA = "0x5D09D0", Slot = "44")]
		public override MatchmakingStats GetMatchmakingStats()
		{
			return null;
		}

		[Token(Token = "0x60009AF")]
		[Address(RVA = "0x5D0A20", Offset = "0x5D0A20", VA = "0x5D0A20", Slot = "67")]
		protected override MatchmakingStats GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000ED")]
	public class MessageWithOrgScopedID : Message<OrgScopedID>
	{
		[Token(Token = "0x60009B0")]
		[Address(RVA = "0x5C9DC4", Offset = "0x5C9DC4", VA = "0x5C9DC4")]
		public MessageWithOrgScopedID(IntPtr c_message)
		{
		}

		[Token(Token = "0x60009B1")]
		[Address(RVA = "0x5D0CF4", Offset = "0x5D0CF4", VA = "0x5D0CF4", Slot = "45")]
		public override OrgScopedID GetOrgScopedID()
		{
			return null;
		}

		[Token(Token = "0x60009B2")]
		[Address(RVA = "0x5D0D44", Offset = "0x5D0D44", VA = "0x5D0D44", Slot = "67")]
		protected override OrgScopedID GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000EE")]
	public class MessageWithParty : Message<Party>
	{
		[Token(Token = "0x60009B3")]
		[Address(RVA = "0x5D0E90", Offset = "0x5D0E90", VA = "0x5D0E90")]
		public MessageWithParty(IntPtr c_message)
		{
		}

		[Token(Token = "0x60009B4")]
		[Address(RVA = "0x5D0EFC", Offset = "0x5D0EFC", VA = "0x5D0EFC", Slot = "46")]
		public override Party GetParty()
		{
			return null;
		}

		[Token(Token = "0x60009B5")]
		[Address(RVA = "0x5D0F4C", Offset = "0x5D0F4C", VA = "0x5D0F4C", Slot = "67")]
		protected override Party GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000EF")]
	public class MessageWithPartyUnderCurrentParty : Message<Party>
	{
		[Token(Token = "0x60009B6")]
		[Address(RVA = "0x5C9E30", Offset = "0x5C9E30", VA = "0x5C9E30")]
		public MessageWithPartyUnderCurrentParty(IntPtr c_message)
		{
		}

		[Token(Token = "0x60009B7")]
		[Address(RVA = "0x5D1474", Offset = "0x5D1474", VA = "0x5D1474", Slot = "46")]
		public override Party GetParty()
		{
			return null;
		}

		[Token(Token = "0x60009B8")]
		[Address(RVA = "0x5D14C4", Offset = "0x5D14C4", VA = "0x5D14C4", Slot = "67")]
		protected override Party GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000F0")]
	public class MessageWithPartyID : Message<PartyID>
	{
		[Token(Token = "0x60009B9")]
		[Address(RVA = "0x5D126C", Offset = "0x5D126C", VA = "0x5D126C")]
		public MessageWithPartyID(IntPtr c_message)
		{
		}

		[Token(Token = "0x60009BA")]
		[Address(RVA = "0x5D12D8", Offset = "0x5D12D8", VA = "0x5D12D8", Slot = "47")]
		public override PartyID GetPartyID()
		{
			return null;
		}

		[Token(Token = "0x60009BB")]
		[Address(RVA = "0x5D1328", Offset = "0x5D1328", VA = "0x5D1328", Slot = "67")]
		protected override PartyID GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000F1")]
	public class MessageWithPartyUpdateNotification : Message<PartyUpdateNotification>
	{
		[Token(Token = "0x60009BC")]
		[Address(RVA = "0x5C9E9C", Offset = "0x5C9E9C", VA = "0x5C9E9C")]
		public MessageWithPartyUpdateNotification(IntPtr c_message)
		{
		}

		[Token(Token = "0x60009BD")]
		[Address(RVA = "0x5D1578", Offset = "0x5D1578", VA = "0x5D1578", Slot = "48")]
		public override PartyUpdateNotification GetPartyUpdateNotification()
		{
			return null;
		}

		[Token(Token = "0x60009BE")]
		[Address(RVA = "0x5D15C8", Offset = "0x5D15C8", VA = "0x5D15C8", Slot = "67")]
		protected override PartyUpdateNotification GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000F2")]
	public class MessageWithPidList : Message<PidList>
	{
		[Token(Token = "0x60009BF")]
		[Address(RVA = "0x5C9F08", Offset = "0x5C9F08", VA = "0x5C9F08")]
		public MessageWithPidList(IntPtr c_message)
		{
		}

		[Token(Token = "0x60009C0")]
		[Address(RVA = "0x5D1774", Offset = "0x5D1774", VA = "0x5D1774", Slot = "49")]
		public override PidList GetPidList()
		{
			return null;
		}

		[Token(Token = "0x60009C1")]
		[Address(RVA = "0x5D17C4", Offset = "0x5D17C4", VA = "0x5D17C4", Slot = "67")]
		protected override PidList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000F3")]
	public class MessageWithProductList : Message<ProductList>
	{
		[Token(Token = "0x60009C2")]
		[Address(RVA = "0x5C9F74", Offset = "0x5C9F74", VA = "0x5C9F74")]
		public MessageWithProductList(IntPtr c_message)
		{
		}

		[Token(Token = "0x60009C3")]
		[Address(RVA = "0x5D1E38", Offset = "0x5D1E38", VA = "0x5D1E38", Slot = "50")]
		public override ProductList GetProductList()
		{
			return null;
		}

		[Token(Token = "0x60009C4")]
		[Address(RVA = "0x5D1E88", Offset = "0x5D1E88", VA = "0x5D1E88", Slot = "67")]
		protected override ProductList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000F4")]
	public class MessageWithPurchase : Message<Purchase>
	{
		[Token(Token = "0x60009C5")]
		[Address(RVA = "0x5C9FE0", Offset = "0x5C9FE0", VA = "0x5C9FE0")]
		public MessageWithPurchase(IntPtr c_message)
		{
		}

		[Token(Token = "0x60009C6")]
		[Address(RVA = "0x5D21A4", Offset = "0x5D21A4", VA = "0x5D21A4", Slot = "51")]
		public override Purchase GetPurchase()
		{
			return null;
		}

		[Token(Token = "0x60009C7")]
		[Address(RVA = "0x5D21F4", Offset = "0x5D21F4", VA = "0x5D21F4", Slot = "67")]
		protected override Purchase GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000F5")]
	public class MessageWithPurchaseList : Message<PurchaseList>
	{
		[Token(Token = "0x60009C8")]
		[Address(RVA = "0x5CA04C", Offset = "0x5CA04C", VA = "0x5CA04C")]
		public MessageWithPurchaseList(IntPtr c_message)
		{
		}

		[Token(Token = "0x60009C9")]
		[Address(RVA = "0x5D238C", Offset = "0x5D238C", VA = "0x5D238C", Slot = "52")]
		public override PurchaseList GetPurchaseList()
		{
			return null;
		}

		[Token(Token = "0x60009CA")]
		[Address(RVA = "0x5D23DC", Offset = "0x5D23DC", VA = "0x5D23DC", Slot = "67")]
		protected override PurchaseList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000F6")]
	public class MessageWithRoom : Message<Room>
	{
		[Token(Token = "0x60009CB")]
		[Address(RVA = "0x5CA0B8", Offset = "0x5CA0B8", VA = "0x5CA0B8")]
		public MessageWithRoom(IntPtr c_message)
		{
		}

		[Token(Token = "0x60009CC")]
		[Address(RVA = "0x5D26F8", Offset = "0x5D26F8", VA = "0x5D26F8", Slot = "53")]
		public override Room GetRoom()
		{
			return null;
		}

		[Token(Token = "0x60009CD")]
		[Address(RVA = "0x5D2748", Offset = "0x5D2748", VA = "0x5D2748", Slot = "67")]
		protected override Room GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000F7")]
	public class MessageWithRoomUnderCurrentRoom : Message<Room>
	{
		[Token(Token = "0x60009CE")]
		[Address(RVA = "0x5CA124", Offset = "0x5CA124", VA = "0x5CA124")]
		public MessageWithRoomUnderCurrentRoom(IntPtr c_message)
		{
		}

		[Token(Token = "0x60009CF")]
		[Address(RVA = "0x5D30B0", Offset = "0x5D30B0", VA = "0x5D30B0", Slot = "53")]
		public override Room GetRoom()
		{
			return null;
		}

		[Token(Token = "0x60009D0")]
		[Address(RVA = "0x5D3100", Offset = "0x5D3100", VA = "0x5D3100", Slot = "67")]
		protected override Room GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000F8")]
	public class MessageWithRoomUnderViewerRoom : Message<Room>
	{
		[Token(Token = "0x60009D1")]
		[Address(RVA = "0x5CA190", Offset = "0x5CA190", VA = "0x5CA190")]
		public MessageWithRoomUnderViewerRoom(IntPtr c_message)
		{
		}

		[Token(Token = "0x60009D2")]
		[Address(RVA = "0x5D31B4", Offset = "0x5D31B4", VA = "0x5D31B4", Slot = "53")]
		public override Room GetRoom()
		{
			return null;
		}

		[Token(Token = "0x60009D3")]
		[Address(RVA = "0x5D3204", Offset = "0x5D3204", VA = "0x5D3204", Slot = "67")]
		protected override Room GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000F9")]
	public class MessageWithRoomList : Message<RoomList>
	{
		[Token(Token = "0x60009D4")]
		[Address(RVA = "0x5CA1FC", Offset = "0x5CA1FC", VA = "0x5CA1FC")]
		public MessageWithRoomList(IntPtr c_message)
		{
		}

		[Token(Token = "0x60009D5")]
		[Address(RVA = "0x5D2D44", Offset = "0x5D2D44", VA = "0x5D2D44", Slot = "56")]
		public override RoomList GetRoomList()
		{
			return null;
		}

		[Token(Token = "0x60009D6")]
		[Address(RVA = "0x5D2D94", Offset = "0x5D2D94", VA = "0x5D2D94", Slot = "67")]
		protected override RoomList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000FA")]
	public class MessageWithRoomInviteNotification : Message<RoomInviteNotification>
	{
		[Token(Token = "0x60009D7")]
		[Address(RVA = "0x5CA268", Offset = "0x5CA268", VA = "0x5CA268")]
		public MessageWithRoomInviteNotification(IntPtr c_message)
		{
		}

		[Token(Token = "0x60009D8")]
		[Address(RVA = "0x5D27FC", Offset = "0x5D27FC", VA = "0x5D27FC", Slot = "54")]
		public override RoomInviteNotification GetRoomInviteNotification()
		{
			return null;
		}

		[Token(Token = "0x60009D9")]
		[Address(RVA = "0x5D284C", Offset = "0x5D284C", VA = "0x5D284C", Slot = "67")]
		protected override RoomInviteNotification GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000FB")]
	public class MessageWithRoomInviteNotificationList : Message<RoomInviteNotificationList>
	{
		[Token(Token = "0x60009DA")]
		[Address(RVA = "0x5CA2D4", Offset = "0x5CA2D4", VA = "0x5CA2D4")]
		public MessageWithRoomInviteNotificationList(IntPtr c_message)
		{
		}

		[Token(Token = "0x60009DB")]
		[Address(RVA = "0x5D29D8", Offset = "0x5D29D8", VA = "0x5D29D8", Slot = "55")]
		public override RoomInviteNotificationList GetRoomInviteNotificationList()
		{
			return null;
		}

		[Token(Token = "0x60009DC")]
		[Address(RVA = "0x5D2A28", Offset = "0x5D2A28", VA = "0x5D2A28", Slot = "67")]
		protected override RoomInviteNotificationList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000FC")]
	public class MessageWithSdkAccountList : Message<SdkAccountList>
	{
		[Token(Token = "0x60009DD")]
		[Address(RVA = "0x5CA340", Offset = "0x5CA340", VA = "0x5CA340")]
		public MessageWithSdkAccountList(IntPtr c_message)
		{
		}

		[Token(Token = "0x60009DE")]
		[Address(RVA = "0x5D32B8", Offset = "0x5D32B8", VA = "0x5D32B8", Slot = "57")]
		public override SdkAccountList GetSdkAccountList()
		{
			return null;
		}

		[Token(Token = "0x60009DF")]
		[Address(RVA = "0x5D3308", Offset = "0x5D3308", VA = "0x5D3308", Slot = "67")]
		protected override SdkAccountList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000FD")]
	public class MessageWithShareMediaResult : Message<ShareMediaResult>
	{
		[Token(Token = "0x60009E0")]
		[Address(RVA = "0x5CA3AC", Offset = "0x5CA3AC", VA = "0x5CA3AC")]
		public MessageWithShareMediaResult(IntPtr c_message)
		{
		}

		[Token(Token = "0x60009E1")]
		[Address(RVA = "0x5D35E4", Offset = "0x5D35E4", VA = "0x5D35E4", Slot = "58")]
		public override ShareMediaResult GetShareMediaResult()
		{
			return null;
		}

		[Token(Token = "0x60009E2")]
		[Address(RVA = "0x5D3634", Offset = "0x5D3634", VA = "0x5D3634", Slot = "67")]
		protected override ShareMediaResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000FE")]
	public class MessageWithString : Message<string>
	{
		[Token(Token = "0x60009E3")]
		[Address(RVA = "0x5CA418", Offset = "0x5CA418", VA = "0x5CA418")]
		public MessageWithString(IntPtr c_message)
		{
		}

		[Token(Token = "0x60009E4")]
		[Address(RVA = "0x5D3780", Offset = "0x5D3780", VA = "0x5D3780", Slot = "59")]
		public override string GetString()
		{
			return null;
		}

		[Token(Token = "0x60009E5")]
		[Address(RVA = "0x5D37D0", Offset = "0x5D37D0", VA = "0x5D37D0", Slot = "67")]
		protected override string GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000FF")]
	public class MessageWithSystemPermission : Message<SystemPermission>
	{
		[Token(Token = "0x60009E6")]
		[Address(RVA = "0x5D3854", Offset = "0x5D3854", VA = "0x5D3854")]
		public MessageWithSystemPermission(IntPtr c_message)
		{
		}

		[Token(Token = "0x60009E7")]
		[Address(RVA = "0x5D38C0", Offset = "0x5D38C0", VA = "0x5D38C0", Slot = "60")]
		public override SystemPermission GetSystemPermission()
		{
			return null;
		}

		[Token(Token = "0x60009E8")]
		[Address(RVA = "0x5D3910", Offset = "0x5D3910", VA = "0x5D3910", Slot = "67")]
		protected override SystemPermission GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x2000100")]
	public class MessageWithSystemVoipState : Message<SystemVoipState>
	{
		[Token(Token = "0x60009E9")]
		[Address(RVA = "0x5CA484", Offset = "0x5CA484", VA = "0x5CA484")]
		public MessageWithSystemVoipState(IntPtr c_message)
		{
		}

		[Token(Token = "0x60009EA")]
		[Address(RVA = "0x5D3A6C", Offset = "0x5D3A6C", VA = "0x5D3A6C", Slot = "61")]
		public override SystemVoipState GetSystemVoipState()
		{
			return null;
		}

		[Token(Token = "0x60009EB")]
		[Address(RVA = "0x5D3ABC", Offset = "0x5D3ABC", VA = "0x5D3ABC", Slot = "67")]
		protected override SystemVoipState GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x2000101")]
	public class MessageWithUser : Message<User>
	{
		[Token(Token = "0x60009EC")]
		[Address(RVA = "0x5CA4F0", Offset = "0x5CA4F0", VA = "0x5CA4F0")]
		public MessageWithUser(IntPtr c_message)
		{
		}

		[Token(Token = "0x60009ED")]
		[Address(RVA = "0x5D3C18", Offset = "0x5D3C18", VA = "0x5D3C18", Slot = "62")]
		public override User GetUser()
		{
			return null;
		}

		[Token(Token = "0x60009EE")]
		[Address(RVA = "0x5D3C68", Offset = "0x5D3C68", VA = "0x5D3C68", Slot = "67")]
		protected override User GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x2000102")]
	public class MessageWithUserAndRoomList : Message<UserAndRoomList>
	{
		[Token(Token = "0x60009EF")]
		[Address(RVA = "0x5CA55C", Offset = "0x5CA55C", VA = "0x5CA55C")]
		public MessageWithUserAndRoomList(IntPtr c_message)
		{
		}

		[Token(Token = "0x60009F0")]
		[Address(RVA = "0x5D3E14", Offset = "0x5D3E14", VA = "0x5D3E14", Slot = "63")]
		public override UserAndRoomList GetUserAndRoomList()
		{
			return null;
		}

		[Token(Token = "0x60009F1")]
		[Address(RVA = "0x5D3E64", Offset = "0x5D3E64", VA = "0x5D3E64", Slot = "67")]
		protected override UserAndRoomList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x2000103")]
	public class MessageWithUserList : Message<UserList>
	{
		[Token(Token = "0x60009F2")]
		[Address(RVA = "0x5CA5C8", Offset = "0x5CA5C8", VA = "0x5CA5C8")]
		public MessageWithUserList(IntPtr c_message)
		{
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0x5D4180", Offset = "0x5D4180", VA = "0x5D4180", Slot = "64")]
		public override UserList GetUserList()
		{
			return null;
		}

		[Token(Token = "0x60009F4")]
		[Address(RVA = "0x5D41D0", Offset = "0x5D41D0", VA = "0x5D41D0", Slot = "67")]
		protected override UserList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x2000104")]
	public class MessageWithUserProof : Message<UserProof>
	{
		[Token(Token = "0x60009F5")]
		[Address(RVA = "0x5CA634", Offset = "0x5CA634", VA = "0x5CA634")]
		public MessageWithUserProof(IntPtr c_message)
		{
		}

		[Token(Token = "0x60009F6")]
		[Address(RVA = "0x5D44EC", Offset = "0x5D44EC", VA = "0x5D44EC", Slot = "65")]
		public override UserProof GetUserProof()
		{
			return null;
		}

		[Token(Token = "0x60009F7")]
		[Address(RVA = "0x5D453C", Offset = "0x5D453C", VA = "0x5D453C", Slot = "67")]
		protected override UserProof GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x2000105")]
	public class MessageWithUserReportID : Message<UserReportID>
	{
		[Token(Token = "0x60009F8")]
		[Address(RVA = "0x5D4688", Offset = "0x5D4688", VA = "0x5D4688")]
		public MessageWithUserReportID(IntPtr c_message)
		{
		}

		[Token(Token = "0x60009F9")]
		[Address(RVA = "0x5D46F4", Offset = "0x5D46F4", VA = "0x5D46F4", Slot = "66")]
		public override UserReportID GetUserReportID()
		{
			return null;
		}

		[Token(Token = "0x60009FA")]
		[Address(RVA = "0x5D4744", Offset = "0x5D4744", VA = "0x5D4744", Slot = "67")]
		protected override UserReportID GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x2000106")]
	public class MessageWithNetworkingPeer : Message<NetworkingPeer>
	{
		[Token(Token = "0x60009FB")]
		[Address(RVA = "0x5CA6A0", Offset = "0x5CA6A0", VA = "0x5CA6A0")]
		public MessageWithNetworkingPeer(IntPtr c_message)
		{
		}

		[Token(Token = "0x60009FC")]
		[Address(RVA = "0x5D0B9C", Offset = "0x5D0B9C", VA = "0x5D0B9C", Slot = "6")]
		public override NetworkingPeer GetNetworkingPeer()
		{
			return null;
		}

		[Token(Token = "0x60009FD")]
		[Address(RVA = "0x5D0BEC", Offset = "0x5D0BEC", VA = "0x5D0BEC", Slot = "67")]
		protected override NetworkingPeer GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x2000107")]
	public class MessageWithPingResult : Message<PingResult>
	{
		[Token(Token = "0x60009FE")]
		[Address(RVA = "0x5CA70C", Offset = "0x5CA70C", VA = "0x5CA70C")]
		public MessageWithPingResult(IntPtr c_message)
		{
		}

		[Token(Token = "0x60009FF")]
		[Address(RVA = "0x5D1AA0", Offset = "0x5D1AA0", VA = "0x5D1AA0", Slot = "5")]
		public override PingResult GetPingResult()
		{
			return null;
		}

		[Token(Token = "0x6000A00")]
		[Address(RVA = "0x5D1AF0", Offset = "0x5D1AF0", VA = "0x5D1AF0", Slot = "67")]
		protected override PingResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x2000108")]
	public class MessageWithLeaderboardDidUpdate : Message<bool>
	{
		[Token(Token = "0x6000A01")]
		[Address(RVA = "0x5C9AD0", Offset = "0x5C9AD0", VA = "0x5C9AD0")]
		public MessageWithLeaderboardDidUpdate(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000A02")]
		[Address(RVA = "0x5CECD0", Offset = "0x5CECD0", VA = "0x5CECD0", Slot = "33")]
		public override bool GetLeaderboardDidUpdate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A03")]
		[Address(RVA = "0x5CED20", Offset = "0x5CED20", VA = "0x5CED20", Slot = "67")]
		protected override bool GetDataFromMessage(IntPtr c_message)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000109")]
	public class MessageWithMatchmakingNotification : Message<Room>
	{
		[Token(Token = "0x6000A04")]
		[Address(RVA = "0x5CA778", Offset = "0x5CA778", VA = "0x5CA778")]
		public MessageWithMatchmakingNotification(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0x5D058C", Offset = "0x5D058C", VA = "0x5D058C", Slot = "53")]
		public override Room GetRoom()
		{
			return null;
		}

		[Token(Token = "0x6000A06")]
		[Address(RVA = "0x5D05DC", Offset = "0x5D05DC", VA = "0x5D05DC", Slot = "67")]
		protected override Room GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x200010A")]
	public class MessageWithMatchmakingBrowseResult : Message<MatchmakingBrowseResult>
	{
		[Token(Token = "0x6000A07")]
		[Address(RVA = "0x5C9C14", Offset = "0x5C9C14", VA = "0x5C9C14")]
		public MessageWithMatchmakingBrowseResult(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000A08")]
		[Address(RVA = "0x5CFEC0", Offset = "0x5CFEC0", VA = "0x5CFEC0", Slot = "42")]
		public override MatchmakingEnqueueResult GetMatchmakingEnqueueResult()
		{
			return null;
		}

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0x5CFF24", Offset = "0x5CFF24", VA = "0x5CFF24", Slot = "56")]
		public override RoomList GetRoomList()
		{
			return null;
		}

		[Token(Token = "0x6000A0A")]
		[Address(RVA = "0x5CFF88", Offset = "0x5CFF88", VA = "0x5CFF88", Slot = "67")]
		protected override MatchmakingBrowseResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x200010B")]
	public class MessageWithHttpTransferUpdate : Message<HttpTransferUpdate>
	{
		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0x5CA7E4", Offset = "0x5CA7E4", VA = "0x5CA7E4")]
		public MessageWithHttpTransferUpdate(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0x5CDE9C", Offset = "0x5CDE9C", VA = "0x5CDE9C", Slot = "7")]
		public override HttpTransferUpdate GetHttpTransferUpdate()
		{
			return null;
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0x5CDEEC", Offset = "0x5CDEEC", VA = "0x5CDEEC", Slot = "67")]
		protected override HttpTransferUpdate GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x200010C")]
	public class MessageWithPlatformInitialize : Message<PlatformInitialize>
	{
		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0x5CA850", Offset = "0x5CA850", VA = "0x5CA850")]
		public MessageWithPlatformInitialize(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0x5D1C9C", Offset = "0x5D1C9C", VA = "0x5D1C9C", Slot = "8")]
		public override PlatformInitialize GetPlatformInitialize()
		{
			return null;
		}

		[Token(Token = "0x6000A10")]
		[Address(RVA = "0x5D1CEC", Offset = "0x5D1CEC", VA = "0x5D1CEC", Slot = "67")]
		protected override PlatformInitialize GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x200010D")]
	public sealed class Packet : IDisposable
	{
		[Token(Token = "0x400042A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private readonly ulong size;

		[Token(Token = "0x400042B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IntPtr packetHandle;

		[Token(Token = "0x170000CD")]
		public ulong SenderID
		{
			[Token(Token = "0x6000A13")]
			[Address(RVA = "0x5D70E4", Offset = "0x5D70E4", VA = "0x5D70E4")]
			get
			{
				return default(ulong);
			}
		}

		[Token(Token = "0x170000CE")]
		public ulong Size
		{
			[Token(Token = "0x6000A14")]
			[Address(RVA = "0x5D716C", Offset = "0x5D716C", VA = "0x5D716C")]
			get
			{
				return default(ulong);
			}
		}

		[Token(Token = "0x170000CF")]
		public SendPolicy Policy
		{
			[Token(Token = "0x6000A15")]
			[Address(RVA = "0x5D7174", Offset = "0x5D7174", VA = "0x5D7174")]
			get
			{
				return default(SendPolicy);
			}
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0x5D5B54", Offset = "0x5D5B54", VA = "0x5D5B54")]
		public Packet(IntPtr packetHandle)
		{
		}

		[Token(Token = "0x6000A12")]
		[Address(RVA = "0x5D6F48", Offset = "0x5D6F48", VA = "0x5D6F48")]
		public ulong ReadBytes(byte[] destination)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000A16")]
		[Address(RVA = "0x5D71FC", Offset = "0x5D71FC", VA = "0x5D71FC", Slot = "1")]
		~Packet()
		{
		}

		[Token(Token = "0x6000A17")]
		[Address(RVA = "0x5D7260", Offset = "0x5D7260", VA = "0x5D7260", Slot = "4")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x200010E")]
	public enum PartyUpdateAction
	{
		[Token(Token = "0x400042D")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243E70", Offset = "0x243E70")]
		Unknown,
		[Token(Token = "0x400042E")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243EA4", Offset = "0x243EA4")]
		Join,
		[Token(Token = "0x400042F")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243ED8", Offset = "0x243ED8")]
		Leave,
		[Token(Token = "0x4000430")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243F0C", Offset = "0x243F0C")]
		Invite,
		[Token(Token = "0x4000431")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243F40", Offset = "0x243F40")]
		Uninvite
	}
	[Token(Token = "0x200010F")]
	public enum PeerConnectionState
	{
		[Token(Token = "0x4000433")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243F78", Offset = "0x243F78")]
		Unknown,
		[Token(Token = "0x4000434")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243FAC", Offset = "0x243FAC")]
		Connected,
		[Token(Token = "0x4000435")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x243FE4", Offset = "0x243FE4")]
		Timeout,
		[Token(Token = "0x4000436")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244018", Offset = "0x244018")]
		Closed
	}
	[Token(Token = "0x2000110")]
	public enum PermissionGrantStatus
	{
		[Token(Token = "0x4000438")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x24404C", Offset = "0x24404C")]
		Unknown,
		[Token(Token = "0x4000439")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244080", Offset = "0x244080")]
		Granted,
		[Token(Token = "0x400043A")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2440B4", Offset = "0x2440B4")]
		Denied,
		[Token(Token = "0x400043B")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2440E8", Offset = "0x2440E8")]
		Blocked
	}
	[Token(Token = "0x2000111")]
	public enum PermissionType
	{
		[Token(Token = "0x400043D")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x24411C", Offset = "0x24411C")]
		Unknown,
		[Token(Token = "0x400043E")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244150", Offset = "0x244150")]
		Microphone,
		[Token(Token = "0x400043F")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244188", Offset = "0x244188")]
		WriteExternalStorage
	}
	[Token(Token = "0x2000112")]
	public sealed class Core
	{
		[Token(Token = "0x4000440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool IsPlatformInitialized;

		[Token(Token = "0x4000441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public static bool LogMessages;

		[Token(Token = "0x6000A18")]
		[Address(RVA = "0x5C2394", Offset = "0x5C2394", VA = "0x5C2394")]
		public static bool IsInitialized()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A19")]
		[Address(RVA = "0x5C2420", Offset = "0x5C2420", VA = "0x5C2420")]
		internal static void ForceInitialized()
		{
		}

		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0x5C24B0", Offset = "0x5C24B0", VA = "0x5C24B0")]
		private static string getAppID([Optional] string appId)
		{
			return null;
		}

		[Token(Token = "0x6000A1B")]
		[Address(RVA = "0x5C2700", Offset = "0x5C2700", VA = "0x5C2700")]
		public static Request<PlatformInitialize> AsyncInitialize([Optional] string appId)
		{
			return null;
		}

		[Token(Token = "0x6000A1C")]
		[Address(RVA = "0x5C2AAC", Offset = "0x5C2AAC", VA = "0x5C2AAC")]
		public static void Initialize([Optional] string appId)
		{
		}

		[Token(Token = "0x6000A1D")]
		[Address(RVA = "0x5C26D8", Offset = "0x5C26D8", VA = "0x5C26D8")]
		private static string GetAppIDFromConfig()
		{
			return null;
		}

		[Token(Token = "0x6000A1E")]
		[Address(RVA = "0x5C2F24", Offset = "0x5C2F24", VA = "0x5C2F24")]
		public Core()
		{
		}
	}
	[Token(Token = "0x2000113")]
	public static class ApplicationLifecycle
	{
		[Token(Token = "0x6000A20")]
		[Address(RVA = "0x8C4D20", Offset = "0x8C4D20", VA = "0x8C4D20")]
		public static LaunchDetails GetLaunchDetails()
		{
			return null;
		}
	}
	[Token(Token = "0x2000114")]
	public static class Rooms
	{
		[Token(Token = "0x6000A21")]
		[Address(RVA = "0x5D8070", Offset = "0x5D8070", VA = "0x5D8070")]
		public static Request<Room> UpdateDataStore(ulong roomID, Dictionary<string, string> data)
		{
			return null;
		}

		[Token(Token = "0x6000A22")]
		[Address(RVA = "0x5D83AC", Offset = "0x5D83AC", VA = "0x5D83AC")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x248F5C", Offset = "0x248F5C")]
		public static void SetRoomInviteNotificationCallback(Message<string>.Callback callback)
		{
		}

		[Token(Token = "0x6000A23")]
		[Address(RVA = "0x5D8448", Offset = "0x5D8448", VA = "0x5D8448")]
		public static Request<Room> CreateAndJoinPrivate(RoomJoinPolicy joinPolicy, uint maxUsers, bool subscribeToUpdates = false)
		{
			return null;
		}

		[Token(Token = "0x6000A24")]
		[Address(RVA = "0x5D85E4", Offset = "0x5D85E4", VA = "0x5D85E4")]
		public static Request<Room> CreateAndJoinPrivate2(RoomJoinPolicy joinPolicy, uint maxUsers, RoomOptions roomOptions)
		{
			return null;
		}

		[Token(Token = "0x6000A25")]
		[Address(RVA = "0x5D87C8", Offset = "0x5D87C8", VA = "0x5D87C8")]
		public static Request<Room> Get(ulong roomID)
		{
			return null;
		}

		[Token(Token = "0x6000A26")]
		[Address(RVA = "0x5D895C", Offset = "0x5D895C", VA = "0x5D895C")]
		public static Request<Room> GetCurrent()
		{
			return null;
		}

		[Token(Token = "0x6000A27")]
		[Address(RVA = "0x5D8AE0", Offset = "0x5D8AE0", VA = "0x5D8AE0")]
		public static Request<Room> GetCurrentForUser(ulong userID)
		{
			return null;
		}

		[Token(Token = "0x6000A28")]
		[Address(RVA = "0x5D8C74", Offset = "0x5D8C74", VA = "0x5D8C74")]
		public static Request<UserList> GetInvitableUsers()
		{
			return null;
		}

		[Token(Token = "0x6000A29")]
		[Address(RVA = "0x5D8DF8", Offset = "0x5D8DF8", VA = "0x5D8DF8")]
		public static Request<UserList> GetInvitableUsers2([Optional] RoomOptions roomOptions)
		{
			return null;
		}

		[Token(Token = "0x6000A2A")]
		[Address(RVA = "0x5D8FCC", Offset = "0x5D8FCC", VA = "0x5D8FCC")]
		public static Request<RoomList> GetModeratedRooms()
		{
			return null;
		}

		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0x5D9150", Offset = "0x5D9150", VA = "0x5D9150")]
		public static Request<Room> InviteUser(ulong roomID, string inviteToken)
		{
			return null;
		}

		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0x5D92EC", Offset = "0x5D92EC", VA = "0x5D92EC")]
		public static Request<Room> Join(ulong roomID, bool subscribeToUpdates = false)
		{
			return null;
		}

		[Token(Token = "0x6000A2D")]
		[Address(RVA = "0x5D9488", Offset = "0x5D9488", VA = "0x5D9488")]
		public static Request<Room> Join2(ulong roomID, RoomOptions roomOptions)
		{
			return null;
		}

		[Token(Token = "0x6000A2E")]
		[Address(RVA = "0x5D966C", Offset = "0x5D966C", VA = "0x5D966C")]
		public static Request<Room> KickUser(ulong roomID, ulong userID, int kickDurationSeconds)
		{
			return null;
		}

		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0x5D981C", Offset = "0x5D981C", VA = "0x5D981C")]
		public static Request LaunchInvitableUserFlow(ulong roomID)
		{
			return null;
		}

		[Token(Token = "0x6000A30")]
		[Address(RVA = "0x5D9990", Offset = "0x5D9990", VA = "0x5D9990")]
		public static Request<Room> Leave(ulong roomID)
		{
			return null;
		}

		[Token(Token = "0x6000A31")]
		[Address(RVA = "0x5D9B24", Offset = "0x5D9B24", VA = "0x5D9B24")]
		public static Request<Room> SetDescription(ulong roomID, string description)
		{
			return null;
		}

		[Token(Token = "0x6000A32")]
		[Address(RVA = "0x5D9CC0", Offset = "0x5D9CC0", VA = "0x5D9CC0")]
		public static Request<Room> UpdateMembershipLockStatus(ulong roomID, RoomMembershipLockStatus membershipLockStatus)
		{
			return null;
		}

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0x5D9E5C", Offset = "0x5D9E5C", VA = "0x5D9E5C")]
		public static Request UpdateOwner(ulong roomID, ulong userID)
		{
			return null;
		}

		[Token(Token = "0x6000A34")]
		[Address(RVA = "0x5D9FEC", Offset = "0x5D9FEC", VA = "0x5D9FEC")]
		public static Request<Room> UpdatePrivateRoomJoinPolicy(ulong roomID, RoomJoinPolicy newJoinPolicy)
		{
			return null;
		}

		[Token(Token = "0x6000A35")]
		[Address(RVA = "0x5D83B0", Offset = "0x5D83B0", VA = "0x5D83B0")]
		public static void SetRoomInviteAcceptedNotificationCallback(Message<string>.Callback callback)
		{
		}

		[Token(Token = "0x6000A36")]
		[Address(RVA = "0x5DA188", Offset = "0x5DA188", VA = "0x5DA188")]
		public static void SetRoomInviteReceivedNotificationCallback(Message<RoomInviteNotification>.Callback callback)
		{
		}

		[Token(Token = "0x6000A37")]
		[Address(RVA = "0x5DA220", Offset = "0x5DA220", VA = "0x5DA220")]
		public static void SetUpdateNotificationCallback(Message<Room>.Callback callback)
		{
		}

		[Token(Token = "0x6000A38")]
		[Address(RVA = "0x5DA2B8", Offset = "0x5DA2B8", VA = "0x5DA2B8")]
		public static Request<RoomList> GetNextRoomListPage(RoomList list)
		{
			return null;
		}
	}
	[Token(Token = "0x2000115")]
	public static class Matchmaking
	{
		[Token(Token = "0x20002AE")]
		public class CustomQuery
		{
			[Token(Token = "0x2000318")]
			public struct Criterion
			{
				[Token(Token = "0x400119A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public string key;

				[Token(Token = "0x400119B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
				public MatchmakingCriterionImportance importance;

				[Token(Token = "0x400119C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
				public Dictionary<string, object> parameters;

				[Token(Token = "0x6001576")]
				[Address(RVA = "0x2C2628", Offset = "0x2C2628", VA = "0x2C2628")]
				public Criterion(string key_, MatchmakingCriterionImportance importance_)
				{
				}
			}

			[Token(Token = "0x4000F7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Dictionary<string, object> data;

			[Token(Token = "0x4000F80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Criterion[] criteria;

			[Token(Token = "0x6001447")]
			[Address(RVA = "0x5C5280", Offset = "0x5C5280", VA = "0x5C5280")]
			public IntPtr ToUnmanaged()
			{
				return default(IntPtr);
			}

			[Token(Token = "0x6001448")]
			[Address(RVA = "0x5C7018", Offset = "0x5C7018", VA = "0x5C7018")]
			public CustomQuery()
			{
			}
		}

		[Token(Token = "0x6000A39")]
		[Address(RVA = "0x5C4C14", Offset = "0x5C4C14", VA = "0x5C4C14")]
		public static Request ReportResultsInsecure(ulong roomID, Dictionary<string, int> data)
		{
			return null;
		}

		[Token(Token = "0x6000A3A")]
		[Address(RVA = "0x5C4F34", Offset = "0x5C4F34", VA = "0x5C4F34")]
		public static Request<MatchmakingStats> GetStats(string pool, uint maxLevel, MatchmakingStatApproach approach = MatchmakingStatApproach.Trailing)
		{
			return null;
		}

		[Token(Token = "0x6000A3B")]
		[Address(RVA = "0x5C50D0", Offset = "0x5C50D0", VA = "0x5C50D0")]
		public static Request<MatchmakingBrowseResult> Browse(string pool, [Optional] CustomQuery customQueryData)
		{
			return null;
		}

		[Token(Token = "0x6000A3C")]
		[Address(RVA = "0x5C57A0", Offset = "0x5C57A0", VA = "0x5C57A0")]
		public static Request<MatchmakingBrowseResult> Browse2(string pool, [Optional] MatchmakingOptions matchmakingOptions)
		{
			return null;
		}

		[Token(Token = "0x6000A3D")]
		[Address(RVA = "0x5C59D4", Offset = "0x5C59D4", VA = "0x5C59D4")]
		public static Request Cancel(string pool, string requestHash)
		{
			return null;
		}

		[Token(Token = "0x6000A3E")]
		[Address(RVA = "0x5C5B48", Offset = "0x5C5B48", VA = "0x5C5B48")]
		public static Request Cancel()
		{
			return null;
		}

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0x5C5CAC", Offset = "0x5C5CAC", VA = "0x5C5CAC")]
		public static Request<MatchmakingEnqueueResultAndRoom> CreateAndEnqueueRoom(string pool, uint maxUsers, bool subscribeToUpdates = false, [Optional] CustomQuery customQueryData)
		{
			return null;
		}

		[Token(Token = "0x6000A40")]
		[Address(RVA = "0x5C5E70", Offset = "0x5C5E70", VA = "0x5C5E70")]
		public static Request<MatchmakingEnqueueResultAndRoom> CreateAndEnqueueRoom2(string pool, [Optional] MatchmakingOptions matchmakingOptions)
		{
			return null;
		}

		[Token(Token = "0x6000A41")]
		[Address(RVA = "0x5C604C", Offset = "0x5C604C", VA = "0x5C604C")]
		public static Request<Room> CreateRoom(string pool, uint maxUsers, bool subscribeToUpdates = false)
		{
			return null;
		}

		[Token(Token = "0x6000A42")]
		[Address(RVA = "0x5C61E8", Offset = "0x5C61E8", VA = "0x5C61E8")]
		public static Request<Room> CreateRoom2(string pool, [Optional] MatchmakingOptions matchmakingOptions)
		{
			return null;
		}

		[Token(Token = "0x6000A43")]
		[Address(RVA = "0x5C63C4", Offset = "0x5C63C4", VA = "0x5C63C4")]
		public static Request<MatchmakingEnqueueResult> Enqueue(string pool, [Optional] CustomQuery customQueryData)
		{
			return null;
		}

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0x5C6574", Offset = "0x5C6574", VA = "0x5C6574")]
		public static Request<MatchmakingEnqueueResult> Enqueue2(string pool, [Optional] MatchmakingOptions matchmakingOptions)
		{
			return null;
		}

		[Token(Token = "0x6000A45")]
		[Address(RVA = "0x5C6750", Offset = "0x5C6750", VA = "0x5C6750")]
		public static Request<MatchmakingEnqueueResult> EnqueueRoom(ulong roomID, [Optional] CustomQuery customQueryData)
		{
			return null;
		}

		[Token(Token = "0x6000A46")]
		[Address(RVA = "0x5C6908", Offset = "0x5C6908", VA = "0x5C6908")]
		public static Request<MatchmakingEnqueueResult> EnqueueRoom2(ulong roomID, [Optional] MatchmakingOptions matchmakingOptions)
		{
			return null;
		}

		[Token(Token = "0x6000A47")]
		[Address(RVA = "0x5C6AEC", Offset = "0x5C6AEC", VA = "0x5C6AEC")]
		public static Request<MatchmakingAdminSnapshot> GetAdminSnapshot()
		{
			return null;
		}

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0x5C6C70", Offset = "0x5C6C70", VA = "0x5C6C70")]
		public static Request<Room> JoinRoom(ulong roomID, bool subscribeToUpdates = false)
		{
			return null;
		}

		[Token(Token = "0x6000A49")]
		[Address(RVA = "0x5C6E0C", Offset = "0x5C6E0C", VA = "0x5C6E0C")]
		public static Request StartMatch(ulong roomID)
		{
			return null;
		}

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0x5C6F80", Offset = "0x5C6F80", VA = "0x5C6F80")]
		public static void SetMatchFoundNotificationCallback(Message<Room>.Callback callback)
		{
		}
	}
	[Token(Token = "0x2000116")]
	public static class Net
	{
		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0x5D59E0", Offset = "0x5D59E0", VA = "0x5D59E0")]
		public static Packet ReadPacket()
		{
			return null;
		}

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0x5D5C2C", Offset = "0x5D5C2C", VA = "0x5D5C2C")]
		public static bool SendPacket(ulong userID, byte[] bytes, SendPolicy policy)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0x5D5DE4", Offset = "0x5D5DE4", VA = "0x5D5DE4")]
		public static void Connect(ulong userID)
		{
		}

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0x5D5F20", Offset = "0x5D5F20", VA = "0x5D5F20")]
		public static void Accept(ulong userID)
		{
		}

		[Token(Token = "0x6000A4F")]
		[Address(RVA = "0x5D605C", Offset = "0x5D605C", VA = "0x5D605C")]
		public static void Close(ulong userID)
		{
		}

		[Token(Token = "0x6000A50")]
		[Address(RVA = "0x5D6198", Offset = "0x5D6198", VA = "0x5D6198")]
		public static bool IsConnected(ulong userID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0x5D62DC", Offset = "0x5D62DC", VA = "0x5D62DC")]
		public static bool SendPacketToCurrentRoom(byte[] bytes, SendPolicy policy)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0x5D6474", Offset = "0x5D6474", VA = "0x5D6474")]
		public static bool AcceptForCurrentRoom()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0x5D65A4", Offset = "0x5D65A4", VA = "0x5D65A4")]
		public static void CloseForCurrentRoom()
		{
		}

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0x5D66D0", Offset = "0x5D66D0", VA = "0x5D66D0")]
		public static Request<PingResult> Ping(ulong userID)
		{
			return null;
		}

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0x5D6864", Offset = "0x5D6864", VA = "0x5D6864")]
		public static void SetConnectionStateChangedCallback(Message<NetworkingPeer>.Callback callback)
		{
		}

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0x5D68FC", Offset = "0x5D68FC", VA = "0x5D68FC")]
		public static void SetPeerConnectRequestCallback(Message<NetworkingPeer>.Callback callback)
		{
		}

		[Token(Token = "0x6000A57")]
		[Address(RVA = "0x5D6994", Offset = "0x5D6994", VA = "0x5D6994")]
		public static void SetPingResultNotificationCallback(Message<PingResult>.Callback callback)
		{
		}
	}
	[Token(Token = "0x2000117")]
	public static class Leaderboards
	{
		[Token(Token = "0x6000A58")]
		[Address(RVA = "0x5C3E94", Offset = "0x5C3E94", VA = "0x5C3E94")]
		public static Request<LeaderboardEntryList> GetNextEntries(LeaderboardEntryList list)
		{
			return null;
		}

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0x5C403C", Offset = "0x5C403C", VA = "0x5C403C")]
		public static Request<LeaderboardEntryList> GetPreviousEntries(LeaderboardEntryList list)
		{
			return null;
		}

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0x5C41E4", Offset = "0x5C41E4", VA = "0x5C41E4")]
		public static Request<LeaderboardEntryList> GetEntries(string leaderboardName, int limit, LeaderboardFilterType filter, LeaderboardStartAt startAt)
		{
			return null;
		}

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0x5C438C", Offset = "0x5C438C", VA = "0x5C438C")]
		public static Request<LeaderboardEntryList> GetEntriesAfterRank(string leaderboardName, int limit, ulong afterRank)
		{
			return null;
		}

		[Token(Token = "0x6000A5C")]
		[Address(RVA = "0x5C4534", Offset = "0x5C4534", VA = "0x5C4534")]
		public static Request<bool> WriteEntry(string leaderboardName, long score, [Optional] byte[] extraData, bool forceUpdate = false)
		{
			return null;
		}
	}
	[Token(Token = "0x2000118")]
	public static class Voip
	{
		[Token(Token = "0x6000A5D")]
		[Address(RVA = "0x5B4528", Offset = "0x5B4528", VA = "0x5B4528")]
		public static void Start(ulong userID)
		{
		}

		[Token(Token = "0x6000A5E")]
		[Address(RVA = "0x5B49C8", Offset = "0x5B49C8", VA = "0x5B49C8")]
		public static void Accept(ulong userID)
		{
		}

		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0x5B4664", Offset = "0x5B4664", VA = "0x5B4664")]
		public static void Stop(ulong userID)
		{
		}

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0x5B6CAC", Offset = "0x5B6CAC", VA = "0x5B6CAC")]
		public static void SetMicrophoneFilterCallback(CAPI.FilterCallback callback)
		{
		}

		[Token(Token = "0x6000A61")]
		[Address(RVA = "0x5B6E24", Offset = "0x5B6E24", VA = "0x5B6E24")]
		public static void SetMicrophoneMuted(VoipMuteState state)
		{
		}

		[Token(Token = "0x6000A62")]
		[Address(RVA = "0x5B6F58", Offset = "0x5B6F58", VA = "0x5B6F58")]
		public static VoipMuteState GetSystemVoipMicrophoneMuted()
		{
			return default(VoipMuteState);
		}

		[Token(Token = "0x6000A63")]
		[Address(RVA = "0x5B7088", Offset = "0x5B7088", VA = "0x5B7088")]
		public static SystemVoipStatus GetSystemVoipStatus()
		{
			return default(SystemVoipStatus);
		}

		[Token(Token = "0x6000A64")]
		[Address(RVA = "0x5B71B8", Offset = "0x5B71B8", VA = "0x5B71B8")]
		public static VoipDtxState GetIsConnectionUsingDtx(ulong peerID)
		{
			return default(VoipDtxState);
		}

		[Token(Token = "0x6000A65")]
		[Address(RVA = "0x5B72FC", Offset = "0x5B72FC", VA = "0x5B72FC")]
		public static VoipBitrate GetLocalBitrate(ulong peerID)
		{
			return default(VoipBitrate);
		}

		[Token(Token = "0x6000A66")]
		[Address(RVA = "0x5B7440", Offset = "0x5B7440", VA = "0x5B7440")]
		public static VoipBitrate GetRemoteBitrate(ulong peerID)
		{
			return default(VoipBitrate);
		}

		[Token(Token = "0x6000A67")]
		[Address(RVA = "0x5B7584", Offset = "0x5B7584", VA = "0x5B7584")]
		public static void SetNewConnectionOptions(VoipOptions voipOptions)
		{
		}

		[Token(Token = "0x6000A68")]
		[Address(RVA = "0x5B7758", Offset = "0x5B7758", VA = "0x5B7758")]
		public static Request<SystemVoipState> SetSystemVoipSuppressed(bool suppressed)
		{
			return null;
		}

		[Token(Token = "0x6000A69")]
		[Address(RVA = "0x5B4304", Offset = "0x5B4304", VA = "0x5B4304")]
		public static void SetVoipConnectRequestCallback(Message<NetworkingPeer>.Callback callback)
		{
		}

		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0x5B439C", Offset = "0x5B439C", VA = "0x5B439C")]
		public static void SetVoipStateChangeCallback(Message<NetworkingPeer>.Callback callback)
		{
		}

		[Token(Token = "0x6000A6B")]
		[Address(RVA = "0x5B78E4", Offset = "0x5B78E4", VA = "0x5B78E4")]
		public static void SetSystemVoipStateNotificationCallback(Message<SystemVoipState>.Callback callback)
		{
		}
	}
	[Token(Token = "0x2000119")]
	public static class Achievements
	{
		[Token(Token = "0x6000A6C")]
		[Address(RVA = "0x8C2AF8", Offset = "0x8C2AF8", VA = "0x8C2AF8")]
		public static Request<AchievementUpdate> AddCount(string name, ulong count)
		{
			return null;
		}

		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0x8C2D78", Offset = "0x8C2D78", VA = "0x8C2D78")]
		public static Request<AchievementUpdate> AddFields(string name, string fields)
		{
			return null;
		}

		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0x8C2FFC", Offset = "0x8C2FFC", VA = "0x8C2FFC")]
		public static Request<AchievementDefinitionList> GetAllDefinitions()
		{
			return null;
		}

		[Token(Token = "0x6000A6F")]
		[Address(RVA = "0x8C325C", Offset = "0x8C325C", VA = "0x8C325C")]
		public static Request<AchievementProgressList> GetAllProgress()
		{
			return null;
		}

		[Token(Token = "0x6000A70")]
		[Address(RVA = "0x8C34B8", Offset = "0x8C34B8", VA = "0x8C34B8")]
		public static Request<AchievementDefinitionList> GetDefinitionsByName(string[] names)
		{
			return null;
		}

		[Token(Token = "0x6000A71")]
		[Address(RVA = "0x8C3818", Offset = "0x8C3818", VA = "0x8C3818")]
		public static Request<AchievementProgressList> GetProgressByName(string[] names)
		{
			return null;
		}

		[Token(Token = "0x6000A72")]
		[Address(RVA = "0x8C3B74", Offset = "0x8C3B74", VA = "0x8C3B74")]
		public static Request<AchievementUpdate> Unlock(string name)
		{
			return null;
		}

		[Token(Token = "0x6000A73")]
		[Address(RVA = "0x8C3DCC", Offset = "0x8C3DCC", VA = "0x8C3DCC")]
		public static Request<AchievementDefinitionList> GetNextAchievementDefinitionListPage(AchievementDefinitionList list)
		{
			return null;
		}

		[Token(Token = "0x6000A74")]
		[Address(RVA = "0x8C4100", Offset = "0x8C4100", VA = "0x8C4100")]
		public static Request<AchievementProgressList> GetNextAchievementProgressListPage(AchievementProgressList list)
		{
			return null;
		}
	}
	[Token(Token = "0x200011A")]
	public static class Application
	{
		[Token(Token = "0x6000A75")]
		[Address(RVA = "0x8C47A0", Offset = "0x8C47A0", VA = "0x8C47A0")]
		public static Request<ApplicationVersion> GetVersion()
		{
			return null;
		}

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0x8C49F4", Offset = "0x8C49F4", VA = "0x8C49F4")]
		public static Request<string> LaunchOtherApp(ulong appID, [Optional] ApplicationOptions deeplink_options)
		{
			return null;
		}
	}
	[Token(Token = "0x200011B")]
	public static class AssetFile
	{
		[Token(Token = "0x6000A77")]
		[Address(RVA = "0x8C5320", Offset = "0x8C5320", VA = "0x8C5320")]
		public static Request<AssetFileDeleteResult> Delete(ulong assetFileID)
		{
			return null;
		}

		[Token(Token = "0x6000A78")]
		[Address(RVA = "0x8C55C8", Offset = "0x8C55C8", VA = "0x8C55C8")]
		public static Request<AssetFileDeleteResult> DeleteById(ulong assetFileID)
		{
			return null;
		}

		[Token(Token = "0x6000A79")]
		[Address(RVA = "0x8C5878", Offset = "0x8C5878", VA = "0x8C5878")]
		public static Request<AssetFileDeleteResult> DeleteByName(string assetFileName)
		{
			return null;
		}

		[Token(Token = "0x6000A7A")]
		[Address(RVA = "0x8C5AD0", Offset = "0x8C5AD0", VA = "0x8C5AD0")]
		public static Request<AssetFileDownloadResult> Download(ulong assetFileID)
		{
			return null;
		}

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0x8C5D7C", Offset = "0x8C5D7C", VA = "0x8C5D7C")]
		public static Request<AssetFileDownloadResult> DownloadById(ulong assetFileID)
		{
			return null;
		}

		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0x8C5FF4", Offset = "0x8C5FF4", VA = "0x8C5FF4")]
		public static Request<AssetFileDownloadResult> DownloadByName(string assetFileName)
		{
			return null;
		}

		[Token(Token = "0x6000A7D")]
		[Address(RVA = "0x8C624C", Offset = "0x8C624C", VA = "0x8C624C")]
		public static Request<AssetFileDownloadCancelResult> DownloadCancel(ulong assetFileID)
		{
			return null;
		}

		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0x8C64C8", Offset = "0x8C64C8", VA = "0x8C64C8")]
		public static Request<AssetFileDownloadCancelResult> DownloadCancelById(ulong assetFileID)
		{
			return null;
		}

		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0x8C6744", Offset = "0x8C6744", VA = "0x8C6744")]
		public static Request<AssetFileDownloadCancelResult> DownloadCancelByName(string assetFileName)
		{
			return null;
		}

		[Token(Token = "0x6000A80")]
		[Address(RVA = "0x8C699C", Offset = "0x8C699C", VA = "0x8C699C")]
		public static Request<AssetDetailsList> GetList()
		{
			return null;
		}

		[Token(Token = "0x6000A81")]
		[Address(RVA = "0x8C6C20", Offset = "0x8C6C20", VA = "0x8C6C20")]
		public static Request<AssetDetails> Status(ulong assetFileID)
		{
			return null;
		}

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0x8C6EC8", Offset = "0x8C6EC8", VA = "0x8C6EC8")]
		public static Request<AssetDetails> StatusById(ulong assetFileID)
		{
			return null;
		}

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0x8C7178", Offset = "0x8C7178", VA = "0x8C7178")]
		public static Request<AssetDetails> StatusByName(string assetFileName)
		{
			return null;
		}

		[Token(Token = "0x6000A84")]
		[Address(RVA = "0x8C73D0", Offset = "0x8C73D0", VA = "0x8C73D0")]
		public static void SetDownloadUpdateNotificationCallback(Message<AssetFileDownloadUpdate>.Callback callback)
		{
		}
	}
	[Token(Token = "0x200011C")]
	public static class Avatar
	{
	}
	[Token(Token = "0x200011D")]
	public static class Cal
	{
	}
	[Token(Token = "0x200011E")]
	public static class CloudStorage
	{
		[Token(Token = "0x6000A85")]
		[Address(RVA = "0x5C130C", Offset = "0x5C130C", VA = "0x5C130C")]
		public static Request<CloudStorageUpdateResponse> Delete(string bucket, string key)
		{
			return null;
		}

		[Token(Token = "0x6000A86")]
		[Address(RVA = "0x5C14A0", Offset = "0x5C14A0", VA = "0x5C14A0")]
		public static Request<CloudStorageData> Load(string bucket, string key)
		{
			return null;
		}

		[Token(Token = "0x6000A87")]
		[Address(RVA = "0x5C1634", Offset = "0x5C1634", VA = "0x5C1634")]
		public static Request<CloudStorageMetadataList> LoadBucketMetadata(string bucket)
		{
			return null;
		}

		[Token(Token = "0x6000A88")]
		[Address(RVA = "0x5C17C0", Offset = "0x5C17C0", VA = "0x5C17C0")]
		public static Request<CloudStorageConflictMetadata> LoadConflictMetadata(string bucket, string key)
		{
			return null;
		}

		[Token(Token = "0x6000A89")]
		[Address(RVA = "0x5C1954", Offset = "0x5C1954", VA = "0x5C1954")]
		public static Request<CloudStorageData> LoadHandle(string handle)
		{
			return null;
		}

		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0x5C1AE0", Offset = "0x5C1AE0", VA = "0x5C1AE0")]
		public static Request<CloudStorageMetadata> LoadMetadata(string bucket, string key)
		{
			return null;
		}

		[Token(Token = "0x6000A8B")]
		[Address(RVA = "0x5C1C74", Offset = "0x5C1C74", VA = "0x5C1C74")]
		public static Request<CloudStorageUpdateResponse> ResolveKeepLocal(string bucket, string key, string remoteHandle)
		{
			return null;
		}

		[Token(Token = "0x6000A8C")]
		[Address(RVA = "0x5C1E10", Offset = "0x5C1E10", VA = "0x5C1E10")]
		public static Request<CloudStorageUpdateResponse> ResolveKeepRemote(string bucket, string key, string remoteHandle)
		{
			return null;
		}

		[Token(Token = "0x6000A8D")]
		[Address(RVA = "0x5C1FAC", Offset = "0x5C1FAC", VA = "0x5C1FAC")]
		public static Request<CloudStorageUpdateResponse> Save(string bucket, string key, byte[] data, long counter, string extraData)
		{
			return null;
		}

		[Token(Token = "0x6000A8E")]
		[Address(RVA = "0x5C2170", Offset = "0x5C2170", VA = "0x5C2170")]
		public static Request<CloudStorageMetadataList> GetNextCloudStorageMetadataListPage(CloudStorageMetadataList list)
		{
			return null;
		}
	}
	[Token(Token = "0x200011F")]
	public static class CloudStorage2
	{
	}
	[Token(Token = "0x2000120")]
	public static class Entitlements
	{
		[Token(Token = "0x6000A8F")]
		[Address(RVA = "0x5C2F30", Offset = "0x5C2F30", VA = "0x5C2F30")]
		public static Request IsUserEntitledToApplication()
		{
			return null;
		}
	}
	[Token(Token = "0x2000121")]
	public static class GraphAPI
	{
	}
	[Token(Token = "0x2000122")]
	public static class HTTP
	{
	}
	[Token(Token = "0x2000123")]
	public static class IAP
	{
		[Token(Token = "0x6000A90")]
		[Address(RVA = "0x5C30BC", Offset = "0x5C30BC", VA = "0x5C30BC")]
		public static Request ConsumePurchase(string sku)
		{
			return null;
		}

		[Token(Token = "0x6000A91")]
		[Address(RVA = "0x5C3228", Offset = "0x5C3228", VA = "0x5C3228")]
		public static Request<ProductList> GetProductsBySKU(string[] skus)
		{
			return null;
		}

		[Token(Token = "0x6000A92")]
		[Address(RVA = "0x5C33C4", Offset = "0x5C33C4", VA = "0x5C33C4")]
		public static Request<PurchaseList> GetViewerPurchases()
		{
			return null;
		}

		[Token(Token = "0x6000A93")]
		[Address(RVA = "0x5C3548", Offset = "0x5C3548", VA = "0x5C3548")]
		public static Request<Purchase> LaunchCheckoutFlow(string sku)
		{
			return null;
		}

		[Token(Token = "0x6000A94")]
		[Address(RVA = "0x5C373C", Offset = "0x5C373C", VA = "0x5C373C")]
		public static Request<ProductList> GetNextProductListPage(ProductList list)
		{
			return null;
		}

		[Token(Token = "0x6000A95")]
		[Address(RVA = "0x5C3960", Offset = "0x5C3960", VA = "0x5C3960")]
		public static Request<PurchaseList> GetNextPurchaseListPage(PurchaseList list)
		{
			return null;
		}
	}
	[Token(Token = "0x2000124")]
	public static class LanguagePack
	{
		[Token(Token = "0x6000A96")]
		[Address(RVA = "0x5C3B84", Offset = "0x5C3B84", VA = "0x5C3B84")]
		public static Request<AssetDetails> GetCurrent()
		{
			return null;
		}

		[Token(Token = "0x6000A97")]
		[Address(RVA = "0x5C3D08", Offset = "0x5C3D08", VA = "0x5C3D08")]
		public static Request<AssetFileDownloadResult> SetCurrent(string tag)
		{
			return null;
		}
	}
	[Token(Token = "0x2000125")]
	public static class Livestreaming
	{
		[Token(Token = "0x6000A98")]
		[Address(RVA = "0x5C46F0", Offset = "0x5C46F0", VA = "0x5C46F0")]
		public static Request<LivestreamingStatus> GetStatus()
		{
			return null;
		}

		[Token(Token = "0x6000A99")]
		[Address(RVA = "0x5C4874", Offset = "0x5C4874", VA = "0x5C4874")]
		public static Request<LivestreamingStatus> PauseStream()
		{
			return null;
		}

		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0x5C49F8", Offset = "0x5C49F8", VA = "0x5C49F8")]
		public static Request<LivestreamingStatus> ResumeStream()
		{
			return null;
		}

		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0x5C4B7C", Offset = "0x5C4B7C", VA = "0x5C4B7C")]
		public static void SetStatusUpdateNotificationCallback(Message<LivestreamingStatus>.Callback callback)
		{
		}
	}
	[Token(Token = "0x2000126")]
	public static class Media
	{
		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0x5C7884", Offset = "0x5C7884", VA = "0x5C7884")]
		public static Request<ShareMediaResult> ShareToFacebook(string postTextSuggestion, string filePath, MediaContentType contentType)
		{
			return null;
		}
	}
	[Token(Token = "0x2000127")]
	public static class Notifications
	{
		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0x5D6A2C", Offset = "0x5D6A2C", VA = "0x5D6A2C")]
		public static Request<RoomInviteNotificationList> GetRoomInviteNotifications()
		{
			return null;
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0x5D6BB0", Offset = "0x5D6BB0", VA = "0x5D6BB0")]
		public static Request MarkAsRead(ulong notificationID)
		{
			return null;
		}

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0x5D6D24", Offset = "0x5D6D24", VA = "0x5D6D24")]
		public static Request<RoomInviteNotificationList> GetNextRoomInviteNotificationListPage(RoomInviteNotificationList list)
		{
			return null;
		}
	}
	[Token(Token = "0x2000128")]
	public static class Parties
	{
		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0x5D7320", Offset = "0x5D7320", VA = "0x5D7320")]
		public static Request<Party> GetCurrent()
		{
			return null;
		}

		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0x5D74A4", Offset = "0x5D74A4", VA = "0x5D74A4")]
		public static void SetPartyUpdateNotificationCallback(Message<PartyUpdateNotification>.Callback callback)
		{
		}
	}
	[Token(Token = "0x2000129")]
	public static class Users
	{
		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0x5B58BC", Offset = "0x5B58BC", VA = "0x5B58BC")]
		public static Request<User> Get(ulong userID)
		{
			return null;
		}

		[Token(Token = "0x6000AA3")]
		[Address(RVA = "0x5B5A50", Offset = "0x5B5A50", VA = "0x5B5A50")]
		public static Request<string> GetAccessToken()
		{
			return null;
		}

		[Token(Token = "0x6000AA4")]
		[Address(RVA = "0x5A1AB4", Offset = "0x5A1AB4", VA = "0x5A1AB4")]
		public static Request<User> GetLoggedInUser()
		{
			return null;
		}

		[Token(Token = "0x6000AA5")]
		[Address(RVA = "0x5B5BD4", Offset = "0x5B5BD4", VA = "0x5B5BD4")]
		public static Request<UserList> GetLoggedInUserFriends()
		{
			return null;
		}

		[Token(Token = "0x6000AA6")]
		[Address(RVA = "0x5B5D58", Offset = "0x5B5D58", VA = "0x5B5D58")]
		public static Request<UserAndRoomList> GetLoggedInUserFriendsAndRooms()
		{
			return null;
		}

		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0x5B5EDC", Offset = "0x5B5EDC", VA = "0x5B5EDC")]
		public static Request<UserAndRoomList> GetLoggedInUserRecentlyMetUsersAndRooms([Optional] UserOptions userOptions)
		{
			return null;
		}

		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0x5B60B0", Offset = "0x5B60B0", VA = "0x5B60B0")]
		public static Request<OrgScopedID> GetOrgScopedID(ulong userID)
		{
			return null;
		}

		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0x5B6244", Offset = "0x5B6244", VA = "0x5B6244")]
		public static Request<SdkAccountList> GetSdkAccounts()
		{
			return null;
		}

		[Token(Token = "0x6000AAA")]
		[Address(RVA = "0x5B63C8", Offset = "0x5B63C8", VA = "0x5B63C8")]
		public static Request<UserProof> GetUserProof()
		{
			return null;
		}

		[Token(Token = "0x6000AAB")]
		[Address(RVA = "0x5B654C", Offset = "0x5B654C", VA = "0x5B654C")]
		public static Request<LaunchFriendRequestFlowResult> LaunchFriendRequestFlow(ulong userID)
		{
			return null;
		}

		[Token(Token = "0x6000AAC")]
		[Address(RVA = "0x5B66E0", Offset = "0x5B66E0", VA = "0x5B66E0")]
		public static Request LaunchProfile(ulong userID)
		{
			return null;
		}

		[Token(Token = "0x6000AAD")]
		[Address(RVA = "0x5B6864", Offset = "0x5B6864", VA = "0x5B6864")]
		public static Request<UserAndRoomList> GetNextUserAndRoomListPage(UserAndRoomList list)
		{
			return null;
		}

		[Token(Token = "0x6000AAE")]
		[Address(RVA = "0x5B6A88", Offset = "0x5B6A88", VA = "0x5B6A88")]
		public static Request<UserList> GetNextUserListPage(UserList list)
		{
			return null;
		}
	}
	[Token(Token = "0x200012A")]
	public enum PlatformInitializeResult
	{
		[Token(Token = "0x4000443")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2441CC", Offset = "0x2441CC")]
		Success = 0,
		[Token(Token = "0x4000444")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244200", Offset = "0x244200")]
		Uninitialized = -1,
		[Token(Token = "0x4000445")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x24423C", Offset = "0x24423C")]
		PreLoaded = -2,
		[Token(Token = "0x4000446")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244274", Offset = "0x244274")]
		FileInvalid = -3,
		[Token(Token = "0x4000447")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2442B0", Offset = "0x2442B0")]
		SignatureInvalid = -4,
		[Token(Token = "0x4000448")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2442F0", Offset = "0x2442F0")]
		UnableToVerify = -5,
		[Token(Token = "0x4000449")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244330", Offset = "0x244330")]
		VersionMismatch = -6,
		[Token(Token = "0x400044A")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244370", Offset = "0x244370")]
		Unknown = -7,
		[Token(Token = "0x400044B")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2443A4", Offset = "0x2443A4")]
		InvalidCredentials = -8,
		[Token(Token = "0x400044C")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2443E4", Offset = "0x2443E4")]
		NotEntitled = -9
	}
	[Token(Token = "0x200012B")]
	public static class PlatformInternal
	{
		[Token(Token = "0x20002AF")]
		public enum MessageTypeInternal : uint
		{
			[Token(Token = "0x4000F82")]
			Application_ExecuteCoordinatedLaunch = 645772532u,
			[Token(Token = "0x4000F83")]
			Application_GetInstalledApplications = 1376744524u,
			[Token(Token = "0x4000F84")]
			Avatar_UpdateMetaData = 2077219214u,
			[Token(Token = "0x4000F85")]
			Cal_FinalizeApplication = 497667029u,
			[Token(Token = "0x4000F86")]
			Cal_GetSuggestedApplications = 1450209301u,
			[Token(Token = "0x4000F87")]
			Cal_ProposeApplication = 1317270237u,
			[Token(Token = "0x4000F88")]
			CloudStorage2_GetUserDirectoryPath = 1990471406u,
			[Token(Token = "0x4000F89")]
			GraphAPI_Get = 822018158u,
			[Token(Token = "0x4000F8A")]
			GraphAPI_Post = 1990567876u,
			[Token(Token = "0x4000F8B")]
			HTTP_Get = 1874211363u,
			[Token(Token = "0x4000F8C")]
			HTTP_GetToFile = 1317133401u,
			[Token(Token = "0x4000F8D")]
			HTTP_MultiPartPost = 1480774160u,
			[Token(Token = "0x4000F8E")]
			HTTP_Post = 1798743375u,
			[Token(Token = "0x4000F8F")]
			Livestreaming_IsAllowedForApplication = 191729014u,
			[Token(Token = "0x4000F90")]
			Livestreaming_StartPartyStream = 2066701532u,
			[Token(Token = "0x4000F91")]
			Livestreaming_StartStream = 1343932350u,
			[Token(Token = "0x4000F92")]
			Livestreaming_StopPartyStream = 661065560u,
			[Token(Token = "0x4000F93")]
			Livestreaming_StopStream = 1155796426u,
			[Token(Token = "0x4000F94")]
			Livestreaming_UpdateCommentsOverlayVisibility = 528318516u,
			[Token(Token = "0x4000F95")]
			Livestreaming_UpdateMicStatus = 475495815u,
			[Token(Token = "0x4000F96")]
			Party_Create = 450042703u,
			[Token(Token = "0x4000F97")]
			Party_GatherInApplication = 1921499523u,
			[Token(Token = "0x4000F98")]
			Party_Get = 1586058173u,
			[Token(Token = "0x4000F99")]
			Party_GetCurrentForUser = 1489764138u,
			[Token(Token = "0x4000F9A")]
			Party_Invite = 901104867u,
			[Token(Token = "0x4000F9B")]
			Party_Join = 1744993395u,
			[Token(Token = "0x4000F9C")]
			Party_Leave = 848430801u,
			[Token(Token = "0x4000F9D")]
			Room_CreateOrUpdateAndJoinNamed = 2089683601u,
			[Token(Token = "0x4000F9E")]
			Room_GetNamedRooms = 125660812u,
			[Token(Token = "0x4000F9F")]
			Room_GetSocialRooms = 1636310390u,
			[Token(Token = "0x4000FA0")]
			SystemPermissions_GetStatus = 493497353u,
			[Token(Token = "0x4000FA1")]
			SystemPermissions_LaunchDeeplink = 442139697u,
			[Token(Token = "0x4000FA2")]
			User_CancelRecordingForReportFlow = 65065289u,
			[Token(Token = "0x4000FA3")]
			User_GetLinkedAccounts = 1469314134u,
			[Token(Token = "0x4000FA4")]
			User_LaunchBlockFlow = 1876305192u,
			[Token(Token = "0x4000FA5")]
			User_LaunchReportFlow = 1449304081u,
			[Token(Token = "0x4000FA6")]
			User_LaunchReportFlow2 = 2139314275u,
			[Token(Token = "0x4000FA7")]
			User_LaunchUnblockFlow = 346172055u,
			[Token(Token = "0x4000FA8")]
			User_NewEntitledTestUser = 292822787u,
			[Token(Token = "0x4000FA9")]
			User_NewTestUser = 921194380u,
			[Token(Token = "0x4000FAA")]
			User_NewTestUserFriends = 517416647u,
			[Token(Token = "0x4000FAB")]
			User_StartRecordingForReportFlow = 1819161571u,
			[Token(Token = "0x4000FAC")]
			User_StopRecordingAndLaunchReportFlow = 1618513035u,
			[Token(Token = "0x4000FAD")]
			User_StopRecordingAndLaunchReportFlow2 = 432190251u,
			[Token(Token = "0x4000FAE")]
			User_TestUserCreateDeviceManifest = 1701884605u
		}

		[Token(Token = "0x20002B0")]
		public static class HTTP
		{
			[Token(Token = "0x6001449")]
			[Address(RVA = "0x5D75B8", Offset = "0x5D75B8", VA = "0x5D75B8")]
			public static void SetHttpTransferUpdateCallback(Message<HttpTransferUpdate>.Callback callback)
			{
			}
		}

		[Token(Token = "0x6000AAF")]
		[Address(RVA = "0x5D753C", Offset = "0x5D753C", VA = "0x5D753C")]
		public static void CrashApplication()
		{
		}

		[Token(Token = "0x6000AB0")]
		[Address(RVA = "0x5CA8BC", Offset = "0x5CA8BC", VA = "0x5CA8BC")]
		internal static Message ParseMessageHandle(IntPtr messageHandle, Message.MessageType messageType)
		{
			return null;
		}
	}
	[Token(Token = "0x200012C")]
	public sealed class PlatformSettings : ScriptableObject
	{
		[Token(Token = "0x400044D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private string ovrAppID;

		[Token(Token = "0x400044E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private string ovrMobileAppID;

		[Token(Token = "0x400044F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private bool ovrUseStandalonePlatform;

		[Token(Token = "0x4000450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		[SerializeField]
		private bool ovrEnableARM64Support;

		[Token(Token = "0x4000451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static PlatformSettings instance;

		[Token(Token = "0x170000D0")]
		public static string AppID
		{
			[Token(Token = "0x6000AB1")]
			[Address(RVA = "0x5C2EFC", Offset = "0x5C2EFC", VA = "0x5C2EFC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AB2")]
			[Address(RVA = "0x5D77C4", Offset = "0x5D77C4", VA = "0x5D77C4")]
			set
			{
			}
		}

		[Token(Token = "0x170000D1")]
		public static string MobileAppID
		{
			[Token(Token = "0x6000AB3")]
			[Address(RVA = "0x5C2ED4", Offset = "0x5C2ED4", VA = "0x5C2ED4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AB4")]
			[Address(RVA = "0x5D77F0", Offset = "0x5D77F0", VA = "0x5D77F0")]
			set
			{
			}
		}

		[Token(Token = "0x170000D2")]
		public static bool UseStandalonePlatform
		{
			[Token(Token = "0x6000AB5")]
			[Address(RVA = "0x5C2A84", Offset = "0x5C2A84", VA = "0x5C2A84")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AB6")]
			[Address(RVA = "0x5D781C", Offset = "0x5D781C", VA = "0x5D781C")]
			set
			{
			}
		}

		[Token(Token = "0x170000D3")]
		public static bool EnableARM64Support
		{
			[Token(Token = "0x6000AB7")]
			[Address(RVA = "0x5D7848", Offset = "0x5D7848", VA = "0x5D7848")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AB8")]
			[Address(RVA = "0x5D7870", Offset = "0x5D7870", VA = "0x5D7870")]
			set
			{
			}
		}

		[Token(Token = "0x170000D4")]
		public static PlatformSettings Instance
		{
			[Token(Token = "0x6000AB9")]
			[Address(RVA = "0x5D7650", Offset = "0x5D7650", VA = "0x5D7650")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000ABA")]
			[Address(RVA = "0x5D789C", Offset = "0x5D789C", VA = "0x5D789C")]
			set
			{
			}
		}

		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0x5D7900", Offset = "0x5D7900", VA = "0x5D7900")]
		public PlatformSettings()
		{
		}
	}
	[Token(Token = "0x200012D")]
	public sealed class Request<T> : Request
	{
		[Token(Token = "0x6000ABC")]
		public Request(ulong requestID)
		{
		}

		[Token(Token = "0x6000ABD")]
		public Request<T> OnComplete(Message<T>.Callback callback)
		{
			return null;
		}
	}
	[Token(Token = "0x200012E")]
	public class Request
	{
		[Token(Token = "0x4000452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x244460", Offset = "0x244460")]
		private ulong <RequestID>k__BackingField;

		[Token(Token = "0x170000D5")]
		public ulong RequestID
		{
			[Token(Token = "0x6000ABF")]
			[Address(RVA = "0x5D7978", Offset = "0x5D7978", VA = "0x5D7978")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248F90", Offset = "0x248F90")]
			get
			{
				return default(ulong);
			}
			[Token(Token = "0x6000AC0")]
			[Address(RVA = "0x5D7980", Offset = "0x5D7980", VA = "0x5D7980")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248FA0", Offset = "0x248FA0")]
			set
			{
			}
		}

		[Token(Token = "0x6000ABE")]
		[Address(RVA = "0x5C3094", Offset = "0x5C3094", VA = "0x5C3094")]
		public Request(ulong requestID)
		{
		}

		[Token(Token = "0x6000AC1")]
		[Address(RVA = "0x5D7990", Offset = "0x5D7990", VA = "0x5D7990")]
		public Request OnComplete(Message.Callback callback)
		{
			return null;
		}

		[Token(Token = "0x6000AC2")]
		[Address(RVA = "0x5C124C", Offset = "0x5C124C", VA = "0x5C124C")]
		public static void RunCallbacks(uint limit = 0u)
		{
		}
	}
	[Token(Token = "0x200012F")]
	public enum RoomJoinability
	{
		[Token(Token = "0x4000454")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244470", Offset = "0x244470")]
		Unknown,
		[Token(Token = "0x4000455")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2444A4", Offset = "0x2444A4")]
		AreIn,
		[Token(Token = "0x4000456")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2444D8", Offset = "0x2444D8")]
		AreKicked,
		[Token(Token = "0x4000457")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244510", Offset = "0x244510")]
		CanJoin,
		[Token(Token = "0x4000458")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244548", Offset = "0x244548")]
		IsFull,
		[Token(Token = "0x4000459")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x24457C", Offset = "0x24457C")]
		NoViewer,
		[Token(Token = "0x400045A")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2445B4", Offset = "0x2445B4")]
		PolicyPrevents
	}
	[Token(Token = "0x2000130")]
	public enum RoomJoinPolicy
	{
		[Token(Token = "0x400045C")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2445F0", Offset = "0x2445F0")]
		None,
		[Token(Token = "0x400045D")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244624", Offset = "0x244624")]
		Everyone,
		[Token(Token = "0x400045E")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x24465C", Offset = "0x24465C")]
		FriendsOfMembers,
		[Token(Token = "0x400045F")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x24469C", Offset = "0x24469C")]
		FriendsOfOwner,
		[Token(Token = "0x4000460")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2446DC", Offset = "0x2446DC")]
		InvitedUsers,
		[Token(Token = "0x4000461")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244718", Offset = "0x244718")]
		Unknown
	}
	[Token(Token = "0x2000131")]
	public enum RoomMembershipLockStatus
	{
		[Token(Token = "0x4000463")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x24474C", Offset = "0x24474C")]
		Unknown,
		[Token(Token = "0x4000464")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244780", Offset = "0x244780")]
		Lock,
		[Token(Token = "0x4000465")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2447B4", Offset = "0x2447B4")]
		Unlock
	}
	[Token(Token = "0x2000132")]
	public class RoomOptions
	{
		[Token(Token = "0x4000466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IntPtr Handle;

		[Token(Token = "0x6000AC3")]
		[Address(RVA = "0x5D7A1C", Offset = "0x5D7A1C", VA = "0x5D7A1C")]
		public RoomOptions()
		{
		}

		[Token(Token = "0x6000AC4")]
		[Address(RVA = "0x5D7AAC", Offset = "0x5D7AAC", VA = "0x5D7AAC")]
		public void SetDataStore(string key, string value)
		{
		}

		[Token(Token = "0x6000AC5")]
		[Address(RVA = "0x5D7B44", Offset = "0x5D7B44", VA = "0x5D7B44")]
		public void ClearDataStore()
		{
		}

		[Token(Token = "0x6000AC6")]
		[Address(RVA = "0x5D7BCC", Offset = "0x5D7BCC", VA = "0x5D7BCC")]
		public void SetExcludeRecentlyMet(bool value)
		{
		}

		[Token(Token = "0x6000AC7")]
		[Address(RVA = "0x5D7C5C", Offset = "0x5D7C5C", VA = "0x5D7C5C")]
		public void SetMaxUserResults(uint value)
		{
		}

		[Token(Token = "0x6000AC8")]
		[Address(RVA = "0x5D7CEC", Offset = "0x5D7CEC", VA = "0x5D7CEC")]
		public void SetOrdering(UserOrdering value)
		{
		}

		[Token(Token = "0x6000AC9")]
		[Address(RVA = "0x5D7D7C", Offset = "0x5D7D7C", VA = "0x5D7D7C")]
		public void SetRecentlyMetTimeWindow(TimeWindow value)
		{
		}

		[Token(Token = "0x6000ACA")]
		[Address(RVA = "0x5D7E0C", Offset = "0x5D7E0C", VA = "0x5D7E0C")]
		public void SetRoomId(ulong value)
		{
		}

		[Token(Token = "0x6000ACB")]
		[Address(RVA = "0x5D7EB0", Offset = "0x5D7EB0", VA = "0x5D7EB0")]
		public void SetTurnOffUpdates(bool value)
		{
		}

		[Token(Token = "0x6000ACC")]
		[Address(RVA = "0x5D7F40", Offset = "0x5D7F40", VA = "0x5D7F40")]
		public static explicit operator IntPtr(RoomOptions options)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000ACD")]
		[Address(RVA = "0x5D7F98", Offset = "0x5D7F98", VA = "0x5D7F98", Slot = "1")]
		~RoomOptions()
		{
		}
	}
	[Token(Token = "0x2000133")]
	public enum RoomType
	{
		[Token(Token = "0x4000468")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2447E8", Offset = "0x2447E8")]
		Unknown,
		[Token(Token = "0x4000469")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x24481C", Offset = "0x24481C")]
		Matchmaking,
		[Token(Token = "0x400046A")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244854", Offset = "0x244854")]
		Moderated,
		[Token(Token = "0x400046B")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x24488C", Offset = "0x24488C")]
		Private,
		[Token(Token = "0x400046C")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2448C0", Offset = "0x2448C0")]
		Solo
	}
	[Token(Token = "0x2000134")]
	public enum SdkAccountType
	{
		[Token(Token = "0x400046E")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2448F4", Offset = "0x2448F4")]
		Unknown,
		[Token(Token = "0x400046F")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244928", Offset = "0x244928")]
		Oculus,
		[Token(Token = "0x4000470")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x24495C", Offset = "0x24495C")]
		FacebookGameroom
	}
	[Token(Token = "0x2000135")]
	public enum SendPolicy
	{
		[Token(Token = "0x4000472")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x24499C", Offset = "0x24499C")]
		Unreliable,
		[Token(Token = "0x4000473")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2449D4", Offset = "0x2449D4")]
		Reliable,
		[Token(Token = "0x4000474")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244A0C", Offset = "0x244A0C")]
		Unknown
	}
	[Token(Token = "0x2000136")]
	public enum ServiceProvider
	{
		[Token(Token = "0x4000476")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244A40", Offset = "0x244A40")]
		Unknown,
		[Token(Token = "0x4000477")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244A74", Offset = "0x244A74")]
		Dropbox,
		[Token(Token = "0x4000478")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244AA8", Offset = "0x244AA8")]
		Facebook,
		[Token(Token = "0x4000479")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244AE0", Offset = "0x244AE0")]
		Google,
		[Token(Token = "0x400047A")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244B14", Offset = "0x244B14")]
		Instagram,
		[Token(Token = "0x400047B")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244B4C", Offset = "0x244B4C")]
		RemoteMedia
	}
	[Token(Token = "0x2000137")]
	public enum ShareMediaStatus
	{
		[Token(Token = "0x400047D")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244B88", Offset = "0x244B88")]
		Unknown,
		[Token(Token = "0x400047E")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244BBC", Offset = "0x244BBC")]
		Shared,
		[Token(Token = "0x400047F")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244BF0", Offset = "0x244BF0")]
		Canceled
	}
	[Token(Token = "0x2000138")]
	public sealed class StandalonePlatform
	{
		[Token(Token = "0x20002B1")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x241884", Offset = "0x241884")]
		public delegate void UnityLogDelegate(IntPtr tag, IntPtr msg);

		[Token(Token = "0x6000ACE")]
		[Address(RVA = "0x5B4DC8", Offset = "0x5B4DC8", VA = "0x5B4DC8")]
		public Request<PlatformInitialize> InitializeInEditor()
		{
			return null;
		}

		[Token(Token = "0x6000ACF")]
		[Address(RVA = "0x5B5030", Offset = "0x5B5030", VA = "0x5B5030")]
		public StandalonePlatform()
		{
		}
	}
	[Token(Token = "0x2000139")]
	public sealed class StandalonePlatformSettings
	{
		[Token(Token = "0x170000D6")]
		public static string OculusPlatformTestUserEmail
		{
			[Token(Token = "0x6000AD0")]
			[Address(RVA = "0x5B5384", Offset = "0x5B5384", VA = "0x5B5384")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AD1")]
			[Address(RVA = "0x5B53E8", Offset = "0x5B53E8", VA = "0x5B53E8")]
			set
			{
			}
		}

		[Token(Token = "0x170000D7")]
		public static string OculusPlatformTestUserPassword
		{
			[Token(Token = "0x6000AD2")]
			[Address(RVA = "0x5B53EC", Offset = "0x5B53EC", VA = "0x5B53EC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AD3")]
			[Address(RVA = "0x5B5450", Offset = "0x5B5450", VA = "0x5B5450")]
			set
			{
			}
		}

		[Token(Token = "0x170000D8")]
		public static string OculusPlatformTestUserAccessToken
		{
			[Token(Token = "0x6000AD4")]
			[Address(RVA = "0x5B5454", Offset = "0x5B5454", VA = "0x5B5454")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AD5")]
			[Address(RVA = "0x5B54B8", Offset = "0x5B54B8", VA = "0x5B54B8")]
			set
			{
			}
		}

		[Token(Token = "0x6000AD6")]
		[Address(RVA = "0x5B54BC", Offset = "0x5B54BC", VA = "0x5B54BC")]
		public StandalonePlatformSettings()
		{
		}
	}
	[Token(Token = "0x200013A")]
	public enum SystemVoipStatus
	{
		[Token(Token = "0x4000481")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244C28", Offset = "0x244C28")]
		Unknown,
		[Token(Token = "0x4000482")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244C5C", Offset = "0x244C5C")]
		Unavailable,
		[Token(Token = "0x4000483")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244C94", Offset = "0x244C94")]
		Suppressed,
		[Token(Token = "0x4000484")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244CCC", Offset = "0x244CCC")]
		Active
	}
	[Token(Token = "0x200013B")]
	public enum TimeWindow
	{
		[Token(Token = "0x4000486")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244D00", Offset = "0x244D00")]
		Unknown,
		[Token(Token = "0x4000487")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244D34", Offset = "0x244D34")]
		OneHour,
		[Token(Token = "0x4000488")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244D6C", Offset = "0x244D6C")]
		OneDay,
		[Token(Token = "0x4000489")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244DA0", Offset = "0x244DA0")]
		OneWeek,
		[Token(Token = "0x400048A")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244DD8", Offset = "0x244DD8")]
		ThirtyDays,
		[Token(Token = "0x400048B")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244E10", Offset = "0x244E10")]
		NinetyDays
	}
	[Token(Token = "0x200013C")]
	public class UserOptions
	{
		[Token(Token = "0x400048C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IntPtr Handle;

		[Token(Token = "0x6000AD7")]
		[Address(RVA = "0x5B54C4", Offset = "0x5B54C4", VA = "0x5B54C4")]
		public UserOptions()
		{
		}

		[Token(Token = "0x6000AD8")]
		[Address(RVA = "0x5B5554", Offset = "0x5B5554", VA = "0x5B5554")]
		public void SetMaxUsers(uint value)
		{
		}

		[Token(Token = "0x6000AD9")]
		[Address(RVA = "0x5B55E4", Offset = "0x5B55E4", VA = "0x5B55E4")]
		public void AddServiceProvider(ServiceProvider value)
		{
		}

		[Token(Token = "0x6000ADA")]
		[Address(RVA = "0x5B5674", Offset = "0x5B5674", VA = "0x5B5674")]
		public void ClearServiceProviders()
		{
		}

		[Token(Token = "0x6000ADB")]
		[Address(RVA = "0x5B56FC", Offset = "0x5B56FC", VA = "0x5B56FC")]
		public void SetTimeWindow(TimeWindow value)
		{
		}

		[Token(Token = "0x6000ADC")]
		[Address(RVA = "0x5B578C", Offset = "0x5B578C", VA = "0x5B578C")]
		public static explicit operator IntPtr(UserOptions options)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000ADD")]
		[Address(RVA = "0x5B57E4", Offset = "0x5B57E4", VA = "0x5B57E4", Slot = "1")]
		~UserOptions()
		{
		}
	}
	[Token(Token = "0x200013D")]
	public enum UserOrdering
	{
		[Token(Token = "0x400048E")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244E48", Offset = "0x244E48")]
		Unknown,
		[Token(Token = "0x400048F")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244E7C", Offset = "0x244E7C")]
		None,
		[Token(Token = "0x4000490")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244EB0", Offset = "0x244EB0")]
		PresenceAlphabetical
	}
	[Token(Token = "0x200013E")]
	public enum UserPresenceStatus
	{
		[Token(Token = "0x4000492")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244EF4", Offset = "0x244EF4")]
		Unknown,
		[Token(Token = "0x4000493")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244F28", Offset = "0x244F28")]
		Online,
		[Token(Token = "0x4000494")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244F5C", Offset = "0x244F5C")]
		Offline
	}
	[Token(Token = "0x200013F")]
	public class VoipAudioSourceHiLevel : MonoBehaviour
	{
		[Token(Token = "0x20002B2")]
		public class FilterReadDelegate : MonoBehaviour
		{
			[Token(Token = "0x4000FAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public VoipAudioSourceHiLevel parent;

			[Token(Token = "0x4000FB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private float[] scratchBuffer;

			[Token(Token = "0x600144E")]
			[Address(RVA = "0x5B8290", Offset = "0x5B8290", VA = "0x5B8290")]
			private void Awake()
			{
			}

			[Token(Token = "0x600144F")]
			[Address(RVA = "0x5B8368", Offset = "0x5B8368", VA = "0x5B8368")]
			private void OnAudioFilterRead(float[] data, int channels)
			{
			}

			[Token(Token = "0x6001450")]
			[Address(RVA = "0x5B8A6C", Offset = "0x5B8A6C", VA = "0x5B8A6C")]
			public FilterReadDelegate()
			{
			}
		}

		[Token(Token = "0x4000495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private int initialPlaybackDelayMS;

		[Token(Token = "0x4000496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AudioSource audioSource;

		[Token(Token = "0x4000497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float peakAmplitude;

		[Token(Token = "0x4000498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected IVoipPCMSource pcmSource;

		[Token(Token = "0x4000499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int audioSystemPlaybackFrequency;

		[Token(Token = "0x400049A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static bool verboseLogging;

		[Token(Token = "0x170000D9")]
		public ulong senderID
		{
			[Token(Token = "0x6000ADE")]
			[Address(RVA = "0x5B4434", Offset = "0x5B4434", VA = "0x5B4434")]
			set
			{
			}
		}

		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0x5B797C", Offset = "0x5B797C", VA = "0x5B797C")]
		protected void Stop()
		{
		}

		[Token(Token = "0x6000AE0")]
		[Address(RVA = "0x5B7980", Offset = "0x5B7980", VA = "0x5B7980")]
		private VoipSampleRate SampleRateToEnum(int rate)
		{
			return default(VoipSampleRate);
		}

		[Token(Token = "0x6000AE1")]
		[Address(RVA = "0x5B79B4", Offset = "0x5B79B4", VA = "0x5B79B4")]
		protected void Awake()
		{
		}

		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0x5B7D80", Offset = "0x5B7D80", VA = "0x5B7D80")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0x5B7DAC", Offset = "0x5B7DAC", VA = "0x5B7DAC", Slot = "4")]
		protected virtual void CreatePCMSource()
		{
		}

		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0x5B7E24", Offset = "0x5B7E24", VA = "0x5B7E24")]
		protected static int MSToElements(int ms)
		{
			return default(int);
		}

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0x5B7ECC", Offset = "0x5B7ECC", VA = "0x5B7ECC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0x5B8284", Offset = "0x5B8284", VA = "0x5B8284")]
		public VoipAudioSourceHiLevel()
		{
		}
	}
	[Token(Token = "0x2000140")]
	public enum VoipBitrate
	{
		[Token(Token = "0x400049C")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244F90", Offset = "0x244F90")]
		Unknown,
		[Token(Token = "0x400049D")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244FC4", Offset = "0x244FC4")]
		B16000,
		[Token(Token = "0x400049E")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x244FF8", Offset = "0x244FF8")]
		B24000,
		[Token(Token = "0x400049F")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x24502C", Offset = "0x24502C")]
		B32000,
		[Token(Token = "0x40004A0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x245060", Offset = "0x245060")]
		B64000,
		[Token(Token = "0x40004A1")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x245094", Offset = "0x245094")]
		B96000,
		[Token(Token = "0x40004A2")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2450C8", Offset = "0x2450C8")]
		B128000
	}
	[Token(Token = "0x2000141")]
	public enum VoipDtxState
	{
		[Token(Token = "0x40004A4")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2450FC", Offset = "0x2450FC")]
		Unknown,
		[Token(Token = "0x40004A5")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x245130", Offset = "0x245130")]
		Enabled,
		[Token(Token = "0x40004A6")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x245164", Offset = "0x245164")]
		Disabled
	}
	[Token(Token = "0x2000142")]
	public enum VoipMuteState
	{
		[Token(Token = "0x40004A8")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x24519C", Offset = "0x24519C")]
		Unknown,
		[Token(Token = "0x40004A9")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2451D0", Offset = "0x2451D0")]
		Muted,
		[Token(Token = "0x40004AA")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x245204", Offset = "0x245204")]
		Unmuted
	}
	[Token(Token = "0x2000143")]
	public class VoipOptions
	{
		[Token(Token = "0x40004AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IntPtr Handle;

		[Token(Token = "0x6000AE8")]
		[Address(RVA = "0x5B8A74", Offset = "0x5B8A74", VA = "0x5B8A74")]
		public VoipOptions()
		{
		}

		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0x5B8B04", Offset = "0x5B8B04", VA = "0x5B8B04")]
		public void SetBitrateForNewConnections(VoipBitrate value)
		{
		}

		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0x5B8B94", Offset = "0x5B8B94", VA = "0x5B8B94")]
		public void SetCreateNewConnectionUseDtx(VoipDtxState value)
		{
		}

		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0x5B7700", Offset = "0x5B7700", VA = "0x5B7700")]
		public static explicit operator IntPtr(VoipOptions options)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000AEC")]
		[Address(RVA = "0x5B8C24", Offset = "0x5B8C24", VA = "0x5B8C24", Slot = "1")]
		~VoipOptions()
		{
		}
	}
	[Token(Token = "0x2000144")]
	public class VoipPCMSourceNative : IVoipPCMSource
	{
		[Token(Token = "0x40004AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private ulong senderID;

		[Token(Token = "0x6000AED")]
		[Address(RVA = "0x5B8CFC", Offset = "0x5B8CFC", VA = "0x5B8CFC", Slot = "4")]
		public int GetPCM(float[] dest, int length)
		{
			return default(int);
		}

		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0x5B8DEC", Offset = "0x5B8DEC", VA = "0x5B8DEC", Slot = "5")]
		public void SetSenderID(ulong senderID)
		{
		}

		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0x5B8DFC", Offset = "0x5B8DFC", VA = "0x5B8DFC", Slot = "7")]
		public int PeekSizeElements()
		{
			return default(int);
		}

		[Token(Token = "0x6000AF0")]
		[Address(RVA = "0x5B8EC4", Offset = "0x5B8EC4", VA = "0x5B8EC4", Slot = "6")]
		public void Update()
		{
		}

		[Token(Token = "0x6000AF1")]
		[Address(RVA = "0x5B7E1C", Offset = "0x5B7E1C", VA = "0x5B7E1C")]
		public VoipPCMSourceNative()
		{
		}
	}
	[Token(Token = "0x2000145")]
	public enum VoipSampleRate
	{
		[Token(Token = "0x40004AE")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x245238", Offset = "0x245238")]
		Unknown,
		[Token(Token = "0x40004AF")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x24526C", Offset = "0x24526C")]
		HZ24000,
		[Token(Token = "0x40004B0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2452A0", Offset = "0x2452A0")]
		HZ44100,
		[Token(Token = "0x40004B1")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2452D4", Offset = "0x2452D4")]
		HZ48000
	}
	[Token(Token = "0x2000146")]
	public class WindowsPlatform
	{
		[Token(Token = "0x20002B3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x241898", Offset = "0x241898")]
		public delegate void UnityLogDelegate(IntPtr tag, IntPtr msg);

		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0x5B8EC8", Offset = "0x5B8EC8", VA = "0x5B8EC8")]
		private void CPPLogCallback(IntPtr tag, IntPtr message)
		{
		}

		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0x5B8FBC", Offset = "0x5B8FBC", VA = "0x5B8FBC")]
		private IntPtr getCallbackPointer()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000AF4")]
		[Address(RVA = "0x5B900C", Offset = "0x5B900C", VA = "0x5B900C")]
		public bool Initialize(string appId)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF5")]
		[Address(RVA = "0x5B913C", Offset = "0x5B913C", VA = "0x5B913C")]
		public Request<PlatformInitialize> AsyncInitialize(string appId)
		{
			return null;
		}

		[Token(Token = "0x6000AF6")]
		[Address(RVA = "0x5B92B8", Offset = "0x5B92B8", VA = "0x5B92B8")]
		public WindowsPlatform()
		{
		}
	}
}
namespace Oculus.Platform.Models
{
	[Token(Token = "0x2000147")]
	public class AbuseReportRecording
	{
		[Token(Token = "0x40004B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string RecordingUuid;

		[Token(Token = "0x6000AF7")]
		[Address(RVA = "0x5CB550", Offset = "0x5CB550", VA = "0x5CB550")]
		public AbuseReportRecording(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000148")]
	public class AchievementDefinition
	{
		[Token(Token = "0x40004B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly AchievementType Type;

		[Token(Token = "0x40004B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly string Name;

		[Token(Token = "0x40004B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly uint BitfieldLength;

		[Token(Token = "0x40004B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ulong Target;

		[Token(Token = "0x6000AF8")]
		[Address(RVA = "0x5D48A0", Offset = "0x5D48A0", VA = "0x5D48A0")]
		public AchievementDefinition(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000149")]
	public class AchievementDefinitionList : DeserializableList<AchievementDefinition>
	{
		[Token(Token = "0x6000AF9")]
		[Address(RVA = "0x5CB6EC", Offset = "0x5CB6EC", VA = "0x5CB6EC")]
		public AchievementDefinitionList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x200014A")]
	public class AchievementProgress
	{
		[Token(Token = "0x40004B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string Bitfield;

		[Token(Token = "0x40004B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong Count;

		[Token(Token = "0x40004B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly bool IsUnlocked;

		[Token(Token = "0x40004BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly string Name;

		[Token(Token = "0x40004BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly DateTime UnlockTime;

		[Token(Token = "0x6000AFA")]
		[Address(RVA = "0x5D4968", Offset = "0x5D4968", VA = "0x5D4968")]
		public AchievementProgress(IntPtr o)
		{
		}
	}
	[Token(Token = "0x200014B")]
	public class AchievementProgressList : DeserializableList<AchievementProgress>
	{
		[Token(Token = "0x6000AFB")]
		[Address(RVA = "0x5CBA58", Offset = "0x5CBA58", VA = "0x5CBA58")]
		public AchievementProgressList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x200014C")]
	public class AchievementUpdate
	{
		[Token(Token = "0x40004BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly bool JustUnlocked;

		[Token(Token = "0x40004BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly string Name;

		[Token(Token = "0x6000AFC")]
		[Address(RVA = "0x5CBDC4", Offset = "0x5CBDC4", VA = "0x5CBDC4")]
		public AchievementUpdate(IntPtr o)
		{
		}
	}
	[Token(Token = "0x200014D")]
	public class ApplicationVersion
	{
		[Token(Token = "0x40004BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly int CurrentCode;

		[Token(Token = "0x40004BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly string CurrentName;

		[Token(Token = "0x40004C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly int LatestCode;

		[Token(Token = "0x40004C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly string LatestName;

		[Token(Token = "0x6000AFD")]
		[Address(RVA = "0x5CBF70", Offset = "0x5CBF70", VA = "0x5CBF70")]
		public ApplicationVersion(IntPtr o)
		{
		}
	}
	[Token(Token = "0x200014E")]
	public class AssetDetails
	{
		[Token(Token = "0x40004C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly ulong AssetId;

		[Token(Token = "0x40004C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string AssetType;

		[Token(Token = "0x40004C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly string DownloadStatus;

		[Token(Token = "0x40004C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string Filepath;

		[Token(Token = "0x40004C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly string IapStatus;

		[Token(Token = "0x40004C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly LanguagePackInfo LanguageOptional;

		[Token(Token = "0x40004C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x245308", Offset = "0x245308")]
		public readonly LanguagePackInfo Language;

		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0x5CC13C", Offset = "0x5CC13C", VA = "0x5CC13C")]
		public AssetDetails(IntPtr o)
		{
		}
	}
	[Token(Token = "0x200014F")]
	public class AssetDetailsList : DeserializableList<AssetDetails>
	{
		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0x5CC36C", Offset = "0x5CC36C", VA = "0x5CC36C")]
		public AssetDetailsList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x2000150")]
	public class AssetFileDeleteResult
	{
		[Token(Token = "0x40004C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly ulong AssetFileId;

		[Token(Token = "0x40004CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong AssetId;

		[Token(Token = "0x40004CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string Filepath;

		[Token(Token = "0x40004CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly bool Success;

		[Token(Token = "0x6000B00")]
		[Address(RVA = "0x5CC698", Offset = "0x5CC698", VA = "0x5CC698")]
		public AssetFileDeleteResult(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000151")]
	public class AssetFileDownloadCancelResult
	{
		[Token(Token = "0x40004CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly ulong AssetFileId;

		[Token(Token = "0x40004CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong AssetId;

		[Token(Token = "0x40004CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string Filepath;

		[Token(Token = "0x40004D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly bool Success;

		[Token(Token = "0x6000B01")]
		[Address(RVA = "0x5CC864", Offset = "0x5CC864", VA = "0x5CC864")]
		public AssetFileDownloadCancelResult(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000152")]
	public class AssetFileDownloadResult
	{
		[Token(Token = "0x40004D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly ulong AssetId;

		[Token(Token = "0x40004D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Filepath;

		[Token(Token = "0x6000B02")]
		[Address(RVA = "0x5CCA30", Offset = "0x5CCA30", VA = "0x5CCA30")]
		public AssetFileDownloadResult(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000153")]
	public class AssetFileDownloadUpdate
	{
		[Token(Token = "0x40004D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly ulong AssetFileId;

		[Token(Token = "0x40004D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong AssetId;

		[Token(Token = "0x40004D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly uint BytesTotal;

		[Token(Token = "0x40004D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly int BytesTransferred;

		[Token(Token = "0x40004D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly bool Completed;

		[Token(Token = "0x6000B03")]
		[Address(RVA = "0x5CCBDC", Offset = "0x5CCBDC", VA = "0x5CCBDC")]
		public AssetFileDownloadUpdate(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000154")]
	public class CalApplicationFinalized
	{
		[Token(Token = "0x40004D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly int CountdownMS;

		[Token(Token = "0x40004D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong ID;

		[Token(Token = "0x40004DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string LaunchDetails;

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0x5CCDB8", Offset = "0x5CCDB8", VA = "0x5CCDB8")]
		public CalApplicationFinalized(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000155")]
	public class CalApplicationProposed
	{
		[Token(Token = "0x40004DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly ulong ID;

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0x5CCF74", Offset = "0x5CCF74", VA = "0x5CCF74")]
		public CalApplicationProposed(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000156")]
	public class CalApplicationSuggestion
	{
		[Token(Token = "0x40004DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly ulong ID;

		[Token(Token = "0x40004DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string SocialContext;

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0x5D4B08", Offset = "0x5D4B08", VA = "0x5D4B08")]
		public CalApplicationSuggestion(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000157")]
	public class CalApplicationSuggestionList : DeserializableList<CalApplicationSuggestion>
	{
		[Token(Token = "0x6000B07")]
		[Address(RVA = "0x5CD17C", Offset = "0x5CD17C", VA = "0x5CD17C")]
		public CalApplicationSuggestionList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x2000158")]
	public class CloudStorageConflictMetadata
	{
		[Token(Token = "0x40004DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly CloudStorageMetadata Local;

		[Token(Token = "0x40004DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly CloudStorageMetadata Remote;

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0x5CD4A8", Offset = "0x5CD4A8", VA = "0x5CD4A8")]
		public CloudStorageConflictMetadata(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000159")]
	public class CloudStorageData
	{
		[Token(Token = "0x40004E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string Bucket;

		[Token(Token = "0x40004E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly byte[] Data;

		[Token(Token = "0x40004E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly uint DataSize;

		[Token(Token = "0x40004E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly string Key;

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0x5CD690", Offset = "0x5CD690", VA = "0x5CD690")]
		public CloudStorageData(IntPtr o)
		{
		}
	}
	[Token(Token = "0x200015A")]
	public class CloudStorageMetadata
	{
		[Token(Token = "0x40004E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string Bucket;

		[Token(Token = "0x40004E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly long Counter;

		[Token(Token = "0x40004E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly uint DataSize;

		[Token(Token = "0x40004E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly string ExtraData;

		[Token(Token = "0x40004E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string Key;

		[Token(Token = "0x40004E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly ulong SaveTime;

		[Token(Token = "0x40004EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly CloudStorageDataStatus Status;

		[Token(Token = "0x40004EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public readonly string VersionHandle;

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0x5CDBC8", Offset = "0x5CDBC8", VA = "0x5CDBC8")]
		public CloudStorageMetadata(IntPtr o)
		{
		}
	}
	[Token(Token = "0x200015B")]
	public class CloudStorageMetadataList : DeserializableList<CloudStorageMetadata>
	{
		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0x5CD85C", Offset = "0x5CD85C", VA = "0x5CD85C")]
		public CloudStorageMetadataList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x200015C")]
	public class CloudStorageUpdateResponse
	{
		[Token(Token = "0x40004EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string Bucket;

		[Token(Token = "0x40004ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly string Key;

		[Token(Token = "0x40004EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly CloudStorageUpdateStatus Status;

		[Token(Token = "0x40004EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly string VersionHandle;

		[Token(Token = "0x6000B0C")]
		[Address(RVA = "0x5CDDD4", Offset = "0x5CDDD4", VA = "0x5CDDD4")]
		public CloudStorageUpdateResponse(IntPtr o)
		{
		}
	}
	[Token(Token = "0x200015D")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x241410", Offset = "0x241410")]
	public class DeserializableList<T> : IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable
	{
		[Token(Token = "0x40004F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected List<T> _Data;

		[Token(Token = "0x40004F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected string _NextUrl;

		[Token(Token = "0x40004F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected string _PreviousUrl;

		[Token(Token = "0x170000DA")]
		public int Count
		{
			[Token(Token = "0x6000B0D")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000DB")]
		private bool System.Collections.Generic.ICollection<T>.IsReadOnly
		{
			[Token(Token = "0x6000B0E")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000DC")]
		public T Item
		{
			[Token(Token = "0x6000B10")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x6000B11")]
			set
			{
			}
		}

		[Token(Token = "0x170000DD")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x24AC64", Offset = "0x24AC64")]
		public List<T> Data
		{
			[Token(Token = "0x6000B1C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DE")]
		public bool HasNextPage
		{
			[Token(Token = "0x6000B1D")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000DF")]
		public bool HasPreviousPage
		{
			[Token(Token = "0x6000B1E")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E0")]
		public string NextUrl
		{
			[Token(Token = "0x6000B1F")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E1")]
		public string PreviousUrl
		{
			[Token(Token = "0x6000B20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B0F")]
		public int IndexOf(T obj)
		{
			return default(int);
		}

		[Token(Token = "0x6000B12")]
		public void Add(T item)
		{
		}

		[Token(Token = "0x6000B13")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000B14")]
		public bool Contains(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B15")]
		public void CopyTo(T[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6000B16")]
		public IEnumerator<T> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000B17")]
		public void Insert(int index, T item)
		{
		}

		[Token(Token = "0x6000B18")]
		public bool Remove(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B19")]
		public void RemoveAt(int index)
		{
		}

		[Token(Token = "0x6000B1A")]
		private IEnumerator GetEnumerator1()
		{
			return null;
		}

		[Token(Token = "0x6000B1B")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000B21")]
		public DeserializableList()
		{
		}
	}
	[Token(Token = "0x200015E")]
	public class Error
	{
		[Token(Token = "0x40004F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly int Code;

		[Token(Token = "0x40004F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly int HttpCode;

		[Token(Token = "0x40004F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Message;

		[Token(Token = "0x6000B22")]
		[Address(RVA = "0x5C7CC8", Offset = "0x5C7CC8", VA = "0x5C7CC8")]
		public Error(int code, string message, int httpCode)
		{
		}
	}
	[Token(Token = "0x200015F")]
	public class HttpTransferUpdate
	{
		[Token(Token = "0x40004F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly ulong ID;

		[Token(Token = "0x40004F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly byte[] Payload;

		[Token(Token = "0x40004F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly bool IsCompleted;

		[Token(Token = "0x6000B23")]
		[Address(RVA = "0x5CDFA0", Offset = "0x5CDFA0", VA = "0x5CDFA0")]
		public HttpTransferUpdate(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000160")]
	public class InstalledApplication
	{
		[Token(Token = "0x40004F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string ApplicationId;

		[Token(Token = "0x40004FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly string PackageName;

		[Token(Token = "0x40004FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Status;

		[Token(Token = "0x40004FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly int VersionCode;

		[Token(Token = "0x40004FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string VersionName;

		[Token(Token = "0x6000B24")]
		[Address(RVA = "0x5D4BB0", Offset = "0x5D4BB0", VA = "0x5D4BB0")]
		public InstalledApplication(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000161")]
	public class InstalledApplicationList : DeserializableList<InstalledApplication>
	{
		[Token(Token = "0x6000B25")]
		[Address(RVA = "0x5CE2B4", Offset = "0x5CE2B4", VA = "0x5CE2B4")]
		public InstalledApplicationList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x2000162")]
	public class LanguagePackInfo
	{
		[Token(Token = "0x40004FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string EnglishName;

		[Token(Token = "0x40004FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly string NativeName;

		[Token(Token = "0x4000500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Tag;

		[Token(Token = "0x6000B26")]
		[Address(RVA = "0x5D4A50", Offset = "0x5D4A50", VA = "0x5D4A50")]
		public LanguagePackInfo(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000163")]
	public class LaunchBlockFlowResult
	{
		[Token(Token = "0x4000501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly bool DidBlock;

		[Token(Token = "0x4000502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		public readonly bool DidCancel;

		[Token(Token = "0x6000B27")]
		[Address(RVA = "0x5CE64C", Offset = "0x5CE64C", VA = "0x5CE64C")]
		public LaunchBlockFlowResult(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000164")]
	public class LaunchDetails
	{
		[Token(Token = "0x4000503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string DeeplinkMessage;

		[Token(Token = "0x4000504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly string LaunchSource;

		[Token(Token = "0x4000505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly LaunchType LaunchType;

		[Token(Token = "0x4000506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ulong RoomID;

		[Token(Token = "0x4000507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly UserList UsersOptional;

		[Token(Token = "0x4000508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x24535C", Offset = "0x24535C")]
		public readonly UserList Users;

		[Token(Token = "0x6000B28")]
		[Address(RVA = "0x5D4C88", Offset = "0x5D4C88", VA = "0x5D4C88")]
		public LaunchDetails(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000165")]
	public class LaunchFriendRequestFlowResult
	{
		[Token(Token = "0x4000509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly bool DidCancel;

		[Token(Token = "0x400050A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		public readonly bool DidSendRequest;

		[Token(Token = "0x6000B29")]
		[Address(RVA = "0x5CE7F8", Offset = "0x5CE7F8", VA = "0x5CE7F8")]
		public LaunchFriendRequestFlowResult(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000166")]
	public class LaunchReportFlowResult
	{
		[Token(Token = "0x400050B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly bool DidCancel;

		[Token(Token = "0x400050C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong UserReportId;

		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0x5CEA10", Offset = "0x5CEA10", VA = "0x5CEA10")]
		public LaunchReportFlowResult(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000167")]
	public class LaunchUnblockFlowResult
	{
		[Token(Token = "0x400050D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly bool DidCancel;

		[Token(Token = "0x400050E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		public readonly bool DidUnblock;

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0x5CEC28", Offset = "0x5CEC28", VA = "0x5CEC28")]
		public LaunchUnblockFlowResult(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000168")]
	public class LeaderboardEntry
	{
		[Token(Token = "0x400050F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly byte[] ExtraData;

		[Token(Token = "0x4000510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly int Rank;

		[Token(Token = "0x4000511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly long Score;

		[Token(Token = "0x4000512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly DateTime Timestamp;

		[Token(Token = "0x4000513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly User User;

		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0x5D4DA4", Offset = "0x5D4DA4", VA = "0x5D4DA4")]
		public LeaderboardEntry(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000169")]
	public class LeaderboardEntryList : DeserializableList<LeaderboardEntry>
	{
		[Token(Token = "0x4000514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ulong TotalCount;

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0x5CEEB8", Offset = "0x5CEEB8", VA = "0x5CEEB8")]
		public LeaderboardEntryList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x200016A")]
	public class LinkedAccount
	{
		[Token(Token = "0x4000515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string AccessToken;

		[Token(Token = "0x4000516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly ServiceProvider ServiceProvider;

		[Token(Token = "0x4000517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string UserId;

		[Token(Token = "0x6000B2E")]
		[Address(RVA = "0x5D4EB0", Offset = "0x5D4EB0", VA = "0x5D4EB0")]
		public LinkedAccount(IntPtr o)
		{
		}
	}
	[Token(Token = "0x200016B")]
	public class LinkedAccountList : DeserializableList<LinkedAccount>
	{
		[Token(Token = "0x6000B2F")]
		[Address(RVA = "0x5CF2B4", Offset = "0x5CF2B4", VA = "0x5CF2B4")]
		public LinkedAccountList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x200016C")]
	public class LivestreamingApplicationStatus
	{
		[Token(Token = "0x4000518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly bool StreamingEnabled;

		[Token(Token = "0x6000B30")]
		[Address(RVA = "0x5CF64C", Offset = "0x5CF64C", VA = "0x5CF64C")]
		public LivestreamingApplicationStatus(IntPtr o)
		{
		}
	}
	[Token(Token = "0x200016D")]
	public class LivestreamingStartResult
	{
		[Token(Token = "0x4000519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly LivestreamingStartStatus StreamingResult;

		[Token(Token = "0x6000B31")]
		[Address(RVA = "0x5CF854", Offset = "0x5CF854", VA = "0x5CF854")]
		public LivestreamingStartResult(IntPtr o)
		{
		}
	}
	[Token(Token = "0x200016E")]
	public class LivestreamingStatus
	{
		[Token(Token = "0x400051A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly bool CommentsVisible;

		[Token(Token = "0x400051B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		public readonly bool IsPaused;

		[Token(Token = "0x400051C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		public readonly bool LivestreamingEnabled;

		[Token(Token = "0x400051D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly int LivestreamingType;

		[Token(Token = "0x400051E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly bool MicEnabled;

		[Token(Token = "0x6000B32")]
		[Address(RVA = "0x5CF9F0", Offset = "0x5CF9F0", VA = "0x5CF9F0")]
		public LivestreamingStatus(IntPtr o)
		{
		}
	}
	[Token(Token = "0x200016F")]
	public class LivestreamingVideoStats
	{
		[Token(Token = "0x400051F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly int CommentCount;

		[Token(Token = "0x4000520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly int ReactionCount;

		[Token(Token = "0x4000521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string TotalViews;

		[Token(Token = "0x6000B33")]
		[Address(RVA = "0x5CFC38", Offset = "0x5CFC38", VA = "0x5CFC38")]
		public LivestreamingVideoStats(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000170")]
	public class MatchmakingAdminSnapshot
	{
		[Token(Token = "0x4000522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly MatchmakingAdminSnapshotCandidateList Candidates;

		[Token(Token = "0x4000523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly double MyCurrentThreshold;

		[Token(Token = "0x6000B34")]
		[Address(RVA = "0x5CFDF4", Offset = "0x5CFDF4", VA = "0x5CFDF4")]
		public MatchmakingAdminSnapshot(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000171")]
	public class MatchmakingAdminSnapshotCandidate
	{
		[Token(Token = "0x4000524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly bool CanMatch;

		[Token(Token = "0x4000525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly double MyTotalScore;

		[Token(Token = "0x4000526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly double TheirCurrentThreshold;

		[Token(Token = "0x4000527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly double TheirTotalScore;

		[Token(Token = "0x4000528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly string TraceId;

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0x5D5190", Offset = "0x5D5190", VA = "0x5D5190")]
		public MatchmakingAdminSnapshotCandidate(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000172")]
	public class MatchmakingAdminSnapshotCandidateList : DeserializableList<MatchmakingAdminSnapshotCandidate>
	{
		[Token(Token = "0x6000B36")]
		[Address(RVA = "0x5D4F68", Offset = "0x5D4F68", VA = "0x5D4F68")]
		public MatchmakingAdminSnapshotCandidateList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x2000173")]
	public class MatchmakingBrowseResult
	{
		[Token(Token = "0x4000529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly MatchmakingEnqueueResult EnqueueResult;

		[Token(Token = "0x400052A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly RoomList Rooms;

		[Token(Token = "0x6000B37")]
		[Address(RVA = "0x5D003C", Offset = "0x5D003C", VA = "0x5D003C")]
		public MatchmakingBrowseResult(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000174")]
	public class MatchmakingEnqueuedUser
	{
		[Token(Token = "0x400052B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly Dictionary<string, string> CustomData;

		[Token(Token = "0x400052C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly User UserOptional;

		[Token(Token = "0x400052D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x245390", Offset = "0x245390")]
		public readonly User User;

		[Token(Token = "0x6000B38")]
		[Address(RVA = "0x5D5268", Offset = "0x5D5268", VA = "0x5D5268")]
		public MatchmakingEnqueuedUser(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000175")]
	public class MatchmakingEnqueuedUserList : DeserializableList<MatchmakingEnqueuedUser>
	{
		[Token(Token = "0x6000B39")]
		[Address(RVA = "0x5D535C", Offset = "0x5D535C", VA = "0x5D535C")]
		public MatchmakingEnqueuedUserList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x2000176")]
	public class MatchmakingEnqueueResult
	{
		[Token(Token = "0x400052E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly MatchmakingAdminSnapshot AdminSnapshotOptional;

		[Token(Token = "0x400052F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x2453E0", Offset = "0x2453E0")]
		public readonly MatchmakingAdminSnapshot AdminSnapshot;

		[Token(Token = "0x4000530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly uint AverageWait;

		[Token(Token = "0x4000531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly uint MatchesInLastHourCount;

		[Token(Token = "0x4000532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly uint MaxExpectedWait;

		[Token(Token = "0x4000533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly string Pool;

		[Token(Token = "0x4000534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly uint RecentMatchPercentage;

		[Token(Token = "0x4000535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public readonly string RequestHash;

		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0x5D0230", Offset = "0x5D0230", VA = "0x5D0230")]
		public MatchmakingEnqueueResult(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000177")]
	public class MatchmakingEnqueueResultAndRoom
	{
		[Token(Token = "0x4000536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly MatchmakingEnqueueResult MatchmakingEnqueueResult;

		[Token(Token = "0x4000537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly Room Room;

		[Token(Token = "0x6000B3B")]
		[Address(RVA = "0x5D049C", Offset = "0x5D049C", VA = "0x5D049C")]
		public MatchmakingEnqueueResultAndRoom(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000178")]
	public class MatchmakingStats
	{
		[Token(Token = "0x4000538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly uint DrawCount;

		[Token(Token = "0x4000539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly uint LossCount;

		[Token(Token = "0x400053A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly uint SkillLevel;

		[Token(Token = "0x400053B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly uint WinCount;

		[Token(Token = "0x6000B3C")]
		[Address(RVA = "0x5D0AD4", Offset = "0x5D0AD4", VA = "0x5D0AD4")]
		public MatchmakingStats(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000179")]
	public class NetworkingPeer
	{
		[Token(Token = "0x400053C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24543C", Offset = "0x24543C")]
		private ulong <ID>k__BackingField;

		[Token(Token = "0x400053D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24544C", Offset = "0x24544C")]
		private PeerConnectionState <State>k__BackingField;

		[Token(Token = "0x170000E2")]
		public ulong ID
		{
			[Token(Token = "0x6000B3E")]
			[Address(RVA = "0x5D5584", Offset = "0x5D5584", VA = "0x5D5584")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248FB0", Offset = "0x248FB0")]
			get
			{
				return default(ulong);
			}
			[Token(Token = "0x6000B3F")]
			[Address(RVA = "0x5D558C", Offset = "0x5D558C", VA = "0x5D558C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248FC0", Offset = "0x248FC0")]
			private set
			{
			}
		}

		[Token(Token = "0x170000E3")]
		public PeerConnectionState State
		{
			[Token(Token = "0x6000B40")]
			[Address(RVA = "0x5D559C", Offset = "0x5D559C", VA = "0x5D559C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248FD0", Offset = "0x248FD0")]
			get
			{
				return default(PeerConnectionState);
			}
			[Token(Token = "0x6000B41")]
			[Address(RVA = "0x5D55A4", Offset = "0x5D55A4", VA = "0x5D55A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248FE0", Offset = "0x248FE0")]
			private set
			{
			}
		}

		[Token(Token = "0x6000B3D")]
		[Address(RVA = "0x5D0CC4", Offset = "0x5D0CC4", VA = "0x5D0CC4")]
		public NetworkingPeer(ulong id, PeerConnectionState state)
		{
		}
	}
	[Token(Token = "0x200017A")]
	public class OrgScopedID
	{
		[Token(Token = "0x400053E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly ulong ID;

		[Token(Token = "0x6000B42")]
		[Address(RVA = "0x5D0DF8", Offset = "0x5D0DF8", VA = "0x5D0DF8")]
		public OrgScopedID(IntPtr o)
		{
		}
	}
	[Token(Token = "0x200017B")]
	public class Party
	{
		[Token(Token = "0x400053F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly ulong ID;

		[Token(Token = "0x4000540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly UserList InvitedUsersOptional;

		[Token(Token = "0x4000541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x24545C", Offset = "0x24545C")]
		public readonly UserList InvitedUsers;

		[Token(Token = "0x4000542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly User LeaderOptional;

		[Token(Token = "0x4000543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x245490", Offset = "0x245490")]
		public readonly User Leader;

		[Token(Token = "0x4000544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly Room RoomOptional;

		[Token(Token = "0x4000545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x2454E4", Offset = "0x2454E4")]
		public readonly Room Room;

		[Token(Token = "0x4000546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly UserList UsersOptional;

		[Token(Token = "0x4000547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x245518", Offset = "0x245518")]
		public readonly UserList Users;

		[Token(Token = "0x6000B43")]
		[Address(RVA = "0x5D1000", Offset = "0x5D1000", VA = "0x5D1000")]
		public Party(IntPtr o)
		{
		}
	}
	[Token(Token = "0x200017C")]
	public class PartyID
	{
		[Token(Token = "0x4000548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly ulong ID;

		[Token(Token = "0x6000B44")]
		[Address(RVA = "0x5D13DC", Offset = "0x5D13DC", VA = "0x5D13DC")]
		public PartyID(IntPtr o)
		{
		}
	}
	[Token(Token = "0x200017D")]
	public class PartyUpdateNotification
	{
		[Token(Token = "0x4000549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly PartyUpdateAction Action;

		[Token(Token = "0x400054A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong PartyId;

		[Token(Token = "0x400054B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ulong SenderId;

		[Token(Token = "0x400054C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string UpdateTimestamp;

		[Token(Token = "0x400054D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public readonly string UserAlias;

		[Token(Token = "0x400054E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly ulong UserId;

		[Token(Token = "0x400054F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly string UserName;

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0x5D167C", Offset = "0x5D167C", VA = "0x5D167C")]
		public PartyUpdateNotification(IntPtr o)
		{
		}
	}
	[Token(Token = "0x200017E")]
	public class Pid
	{
		[Token(Token = "0x4000550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string Id;

		[Token(Token = "0x6000B46")]
		[Address(RVA = "0x5D55AC", Offset = "0x5D55AC", VA = "0x5D55AC")]
		public Pid(IntPtr o)
		{
		}
	}
	[Token(Token = "0x200017F")]
	public class PidList : DeserializableList<Pid>
	{
		[Token(Token = "0x6000B47")]
		[Address(RVA = "0x5D1878", Offset = "0x5D1878", VA = "0x5D1878")]
		public PidList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x2000180")]
	public class PingResult
	{
		[Token(Token = "0x4000551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24554C", Offset = "0x24554C")]
		private ulong <ID>k__BackingField;

		[Token(Token = "0x4000552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ulong? pingTimeUsec;

		[Token(Token = "0x170000E4")]
		public ulong ID
		{
			[Token(Token = "0x6000B49")]
			[Address(RVA = "0x5D5644", Offset = "0x5D5644", VA = "0x5D5644")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248FF0", Offset = "0x248FF0")]
			get
			{
				return default(ulong);
			}
			[Token(Token = "0x6000B4A")]
			[Address(RVA = "0x5D564C", Offset = "0x5D564C", VA = "0x5D564C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249000", Offset = "0x249000")]
			private set
			{
			}
		}

		[Token(Token = "0x170000E5")]
		public ulong PingTimeUsec
		{
			[Token(Token = "0x6000B4B")]
			[Address(RVA = "0x5D565C", Offset = "0x5D565C", VA = "0x5D565C")]
			get
			{
				return default(ulong);
			}
		}

		[Token(Token = "0x170000E6")]
		public bool IsTimeout
		{
			[Token(Token = "0x6000B4C")]
			[Address(RVA = "0x5D56D8", Offset = "0x5D56D8", VA = "0x5D56D8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000B48")]
		[Address(RVA = "0x5D1C54", Offset = "0x5D1C54", VA = "0x5D1C54")]
		public PingResult(ulong id, ulong? pingTimeUsec)
		{
		}
	}
	[Token(Token = "0x2000181")]
	public class PlatformInitialize
	{
		[Token(Token = "0x4000553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly PlatformInitializeResult Result;

		[Token(Token = "0x6000B4D")]
		[Address(RVA = "0x5D1DA0", Offset = "0x5D1DA0", VA = "0x5D1DA0")]
		public PlatformInitialize(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000182")]
	public class Product
	{
		[Token(Token = "0x4000554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string Description;

		[Token(Token = "0x4000555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly string FormattedPrice;

		[Token(Token = "0x4000556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Name;

		[Token(Token = "0x4000557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly string Sku;

		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0x5D5734", Offset = "0x5D5734", VA = "0x5D5734")]
		public Product(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000183")]
	public class ProductList : DeserializableList<Product>
	{
		[Token(Token = "0x6000B4F")]
		[Address(RVA = "0x5D1F3C", Offset = "0x5D1F3C", VA = "0x5D1F3C")]
		public ProductList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x2000184")]
	public class Purchase
	{
		[Token(Token = "0x4000558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly DateTime ExpirationTime;

		[Token(Token = "0x4000559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly DateTime GrantTime;

		[Token(Token = "0x400055A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ulong ID;

		[Token(Token = "0x400055B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string Sku;

		[Token(Token = "0x6000B50")]
		[Address(RVA = "0x5D22A8", Offset = "0x5D22A8", VA = "0x5D22A8")]
		public Purchase(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000185")]
	public class PurchaseList : DeserializableList<Purchase>
	{
		[Token(Token = "0x6000B51")]
		[Address(RVA = "0x5D2490", Offset = "0x5D2490", VA = "0x5D2490")]
		public PurchaseList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x2000186")]
	public class Room
	{
		[Token(Token = "0x400055C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly ulong ApplicationID;

		[Token(Token = "0x400055D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Dictionary<string, string> DataStore;

		[Token(Token = "0x400055E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly string Description;

		[Token(Token = "0x400055F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ulong ID;

		[Token(Token = "0x4000560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly UserList InvitedUsersOptional;

		[Token(Token = "0x4000561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x24555C", Offset = "0x24555C")]
		public readonly UserList InvitedUsers;

		[Token(Token = "0x4000562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly bool IsMembershipLocked;

		[Token(Token = "0x4000563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public readonly RoomJoinPolicy JoinPolicy;

		[Token(Token = "0x4000564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly RoomJoinability Joinability;

		[Token(Token = "0x4000565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public readonly MatchmakingEnqueuedUserList MatchedUsersOptional;

		[Token(Token = "0x4000566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x245590", Offset = "0x245590")]
		public readonly MatchmakingEnqueuedUserList MatchedUsers;

		[Token(Token = "0x4000567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public readonly uint MaxUsers;

		[Token(Token = "0x4000568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public readonly string Name;

		[Token(Token = "0x4000569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public readonly User OwnerOptional;

		[Token(Token = "0x400056A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x2455E8", Offset = "0x2455E8")]
		public readonly User Owner;

		[Token(Token = "0x400056B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public readonly RoomType Type;

		[Token(Token = "0x400056C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public readonly UserList UsersOptional;

		[Token(Token = "0x400056D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x24563C", Offset = "0x24563C")]
		public readonly UserList Users;

		[Token(Token = "0x400056E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public readonly uint Version;

		[Token(Token = "0x6000B52")]
		[Address(RVA = "0x5D0690", Offset = "0x5D0690", VA = "0x5D0690")]
		public Room(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000187")]
	public class RoomList : DeserializableList<Room>
	{
		[Token(Token = "0x6000B53")]
		[Address(RVA = "0x5D2E48", Offset = "0x5D2E48", VA = "0x5D2E48")]
		public RoomList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x2000188")]
	public class RoomInviteNotification
	{
		[Token(Token = "0x400056F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly ulong ID;

		[Token(Token = "0x4000570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong RoomID;

		[Token(Token = "0x4000571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ulong SenderID;

		[Token(Token = "0x4000572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly DateTime SentTime;

		[Token(Token = "0x6000B54")]
		[Address(RVA = "0x5D2900", Offset = "0x5D2900", VA = "0x5D2900")]
		public RoomInviteNotification(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000189")]
	public class RoomInviteNotificationList : DeserializableList<RoomInviteNotification>
	{
		[Token(Token = "0x6000B55")]
		[Address(RVA = "0x5D2ADC", Offset = "0x5D2ADC", VA = "0x5D2ADC")]
		public RoomInviteNotificationList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x200018A")]
	public class SdkAccount
	{
		[Token(Token = "0x4000573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly SdkAccountType AccountType;

		[Token(Token = "0x4000574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong UserId;

		[Token(Token = "0x6000B56")]
		[Address(RVA = "0x5D57FC", Offset = "0x5D57FC", VA = "0x5D57FC")]
		public SdkAccount(IntPtr o)
		{
		}
	}
	[Token(Token = "0x200018B")]
	public class SdkAccountList : DeserializableList<SdkAccount>
	{
		[Token(Token = "0x6000B57")]
		[Address(RVA = "0x5D33BC", Offset = "0x5D33BC", VA = "0x5D33BC")]
		public SdkAccountList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x200018C")]
	public class ShareMediaResult
	{
		[Token(Token = "0x4000575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly ShareMediaStatus Status;

		[Token(Token = "0x6000B58")]
		[Address(RVA = "0x5D36E8", Offset = "0x5D36E8", VA = "0x5D36E8")]
		public ShareMediaResult(IntPtr o)
		{
		}
	}
	[Token(Token = "0x200018D")]
	public class SystemPermission
	{
		[Token(Token = "0x4000576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly bool HasPermission;

		[Token(Token = "0x4000577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly PermissionGrantStatus PermissionGrantStatus;

		[Token(Token = "0x6000B59")]
		[Address(RVA = "0x5D39C4", Offset = "0x5D39C4", VA = "0x5D39C4")]
		public SystemPermission(IntPtr o)
		{
		}
	}
	[Token(Token = "0x200018E")]
	public class SystemVoipState
	{
		[Token(Token = "0x4000578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly VoipMuteState MicrophoneMuted;

		[Token(Token = "0x4000579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly SystemVoipStatus Status;

		[Token(Token = "0x6000B5A")]
		[Address(RVA = "0x5D3B70", Offset = "0x5D3B70", VA = "0x5D3B70")]
		public SystemVoipState(IntPtr o)
		{
		}
	}
	[Token(Token = "0x200018F")]
	public class User
	{
		[Token(Token = "0x400057A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly ulong ID;

		[Token(Token = "0x400057B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string ImageURL;

		[Token(Token = "0x400057C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly string InviteToken;

		[Token(Token = "0x400057D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string OculusID;

		[Token(Token = "0x400057E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly string Presence;

		[Token(Token = "0x400057F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly UserPresenceStatus PresenceStatus;

		[Token(Token = "0x4000580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public readonly string SmallImageUrl;

		[Token(Token = "0x6000B5B")]
		[Address(RVA = "0x5D3D1C", Offset = "0x5D3D1C", VA = "0x5D3D1C")]
		public User(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000190")]
	public class UserList : DeserializableList<User>
	{
		[Token(Token = "0x6000B5C")]
		[Address(RVA = "0x5D4284", Offset = "0x5D4284", VA = "0x5D4284")]
		public UserList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x2000191")]
	public class UserAndRoom
	{
		[Token(Token = "0x4000581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly Room RoomOptional;

		[Token(Token = "0x4000582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x245670", Offset = "0x245670")]
		public readonly Room Room;

		[Token(Token = "0x4000583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly User User;

		[Token(Token = "0x6000B5D")]
		[Address(RVA = "0x5D58A4", Offset = "0x5D58A4", VA = "0x5D58A4")]
		public UserAndRoom(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000192")]
	public class UserAndRoomList : DeserializableList<UserAndRoom>
	{
		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0x5D3F18", Offset = "0x5D3F18", VA = "0x5D3F18")]
		public UserAndRoomList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x2000193")]
	public class UserProof
	{
		[Token(Token = "0x4000584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string Value;

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0x5D45F0", Offset = "0x5D45F0", VA = "0x5D45F0")]
		public UserProof(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000194")]
	public class UserReportID
	{
		[Token(Token = "0x4000585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly bool DidCancel;

		[Token(Token = "0x4000586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong ID;

		[Token(Token = "0x6000B60")]
		[Address(RVA = "0x5D47F8", Offset = "0x5D47F8", VA = "0x5D47F8")]
		public UserReportID(IntPtr o)
		{
		}
	}
}
namespace Oculus.Platform.Samples.VrVoiceChat
{
	[Token(Token = "0x2000195")]
	public class P2PManager
	{
		[Token(Token = "0x4000587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly float UPDATE_DELAY;

		[Token(Token = "0x4000588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private ulong m_remoteID;

		[Token(Token = "0x4000589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PeerConnectionState m_state;

		[Token(Token = "0x400058A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float m_timeForNextUpdate;

		[Token(Token = "0x400058B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly byte PACKET_SIZE;

		[Token(Token = "0x400058C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		private static readonly byte PACKET_FORMAT;

		[Token(Token = "0x400058D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly byte[] sendTransformBuffer;

		[Token(Token = "0x400058E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private readonly byte[] receiveTransformBuffer;

		[Token(Token = "0x400058F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 receivedPosition;

		[Token(Token = "0x4000590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 receivedPositionPrior;

		[Token(Token = "0x4000591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Quaternion receivedRotation;

		[Token(Token = "0x4000592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Quaternion receivedRotationPrior;

		[Token(Token = "0x4000593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float receivedTime;

		[Token(Token = "0x170000E7")]
		public bool Connected
		{
			[Token(Token = "0x6000B64")]
			[Address(RVA = "0x5AEEA4", Offset = "0x5AEEA4", VA = "0x5AEEA4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E8")]
		public bool ShouldSendHeadUpdate
		{
			[Token(Token = "0x6000B67")]
			[Address(RVA = "0x5AF780", Offset = "0x5AF780", VA = "0x5AF780")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000B61")]
		[Address(RVA = "0x5AEAB0", Offset = "0x5AEAB0", VA = "0x5AEAB0")]
		public P2PManager(Transform initialHeadTransform)
		{
		}

		[Token(Token = "0x6000B62")]
		[Address(RVA = "0x5AEC88", Offset = "0x5AEC88", VA = "0x5AEC88")]
		public void ConnectTo(ulong userID)
		{
		}

		[Token(Token = "0x6000B63")]
		[Address(RVA = "0x5AEE68", Offset = "0x5AEE68", VA = "0x5AEE68")]
		public void Disconnect()
		{
		}

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0x5AEEB4", Offset = "0x5AEEB4", VA = "0x5AEEB4")]
		private void PeerConnectRequestCallback(Message<NetworkingPeer> msg)
		{
		}

		[Token(Token = "0x6000B66")]
		[Address(RVA = "0x5AF0E0", Offset = "0x5AF0E0", VA = "0x5AF0E0")]
		private void ConnectionStateChangedCallback(Message<NetworkingPeer> msg)
		{
		}

		[Token(Token = "0x6000B68")]
		[Address(RVA = "0x5AF7C0", Offset = "0x5AF7C0", VA = "0x5AF7C0")]
		public void SendHeadTransform(Transform headTransform)
		{
		}

		[Token(Token = "0x6000B69")]
		[Address(RVA = "0x5AFA30", Offset = "0x5AFA30", VA = "0x5AFA30")]
		private void PackFloat(float f, byte[] buf, ref int offset)
		{
		}

		[Token(Token = "0x6000B6A")]
		[Address(RVA = "0x5AFAEC", Offset = "0x5AFAEC", VA = "0x5AFAEC")]
		public void GetRemoteHeadTransform(Transform headTransform)
		{
		}
	}
	[Token(Token = "0x2000196")]
	public class PlatformManager : MonoBehaviour
	{
		[Token(Token = "0x20002B4")]
		public enum State
		{
			[Token(Token = "0x4000FB2")]
			INITIALIZING,
			[Token(Token = "0x4000FB3")]
			WAITING_TO_CALL_OR_ANSWER,
			[Token(Token = "0x4000FB4")]
			WAITING_FOR_ANSWER,
			[Token(Token = "0x4000FB5")]
			CONNECTED_IN_A_ROOM,
			[Token(Token = "0x4000FB6")]
			HANGUP
		}

		[Token(Token = "0x20002B5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2418AC", Offset = "0x2418AC")]
		private sealed class <>c__DisplayClass31_0
		{
			[Token(Token = "0x4000FB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public RoomManager.Invite invite;

			[Token(Token = "0x6001455")]
			[Address(RVA = "0x5B2654", Offset = "0x5B2654", VA = "0x5B2654")]
			public <>c__DisplayClass31_0()
			{
			}

			[Token(Token = "0x6001456")]
			[Address(RVA = "0x5B2668", Offset = "0x5B2668", VA = "0x5B2668")]
			internal void <SetActiveInvites>b__0()
			{
			}
		}

		[Token(Token = "0x4000594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private GameObject m_invitesList;

		[Token(Token = "0x4000595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private GameObject m_invitePrefab;

		[Token(Token = "0x4000596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private Camera m_camera;

		[Token(Token = "0x4000597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject m_remoteHead;

		[Token(Token = "0x4000598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private State m_currentState;

		[Token(Token = "0x4000599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static PlatformManager s_instance;

		[Token(Token = "0x400059A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RoomManager m_roomManager;

		[Token(Token = "0x400059B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private P2PManager m_p2pManager;

		[Token(Token = "0x400059C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private VoipManager m_voipManager;

		[Token(Token = "0x400059D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ulong m_myID;

		[Token(Token = "0x400059E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string m_myOculusID;

		[Token(Token = "0x170000E9")]
		public static State CurrentState
		{
			[Token(Token = "0x6000B73")]
			[Address(RVA = "0x5B14B4", Offset = "0x5B14B4", VA = "0x5B14B4")]
			get
			{
				return default(State);
			}
		}

		[Token(Token = "0x170000EA")]
		public static ulong MyID
		{
			[Token(Token = "0x6000B74")]
			[Address(RVA = "0x5AED30", Offset = "0x5AED30", VA = "0x5AED30")]
			get
			{
				return default(ulong);
			}
		}

		[Token(Token = "0x170000EB")]
		public static string MyOculusID
		{
			[Token(Token = "0x6000B75")]
			[Address(RVA = "0x5B1554", Offset = "0x5B1554", VA = "0x5B1554")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B6C")]
		[Address(RVA = "0x5B0124", Offset = "0x5B0124", VA = "0x5B0124")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B6D")]
		[Address(RVA = "0x5B0428", Offset = "0x5B0428", VA = "0x5B0428")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B6E")]
		[Address(RVA = "0x5B0E54", Offset = "0x5B0E54", VA = "0x5B0E54")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B6F")]
		[Address(RVA = "0x5B0F04", Offset = "0x5B0F04", VA = "0x5B0F04")]
		private void IsEntitledCallback(Message msg)
		{
		}

		[Token(Token = "0x6000B70")]
		[Address(RVA = "0x5B110C", Offset = "0x5B110C", VA = "0x5B110C")]
		private void GetLoggedInUserCallback(Message<User> msg)
		{
		}

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0x5B12A0", Offset = "0x5B12A0", VA = "0x5B12A0")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000B72")]
		[Address(RVA = "0x5B1028", Offset = "0x5B1028", VA = "0x5B1028")]
		public static void TerminateWithError(Message msg)
		{
		}

		[Token(Token = "0x6000B76")]
		[Address(RVA = "0x5B16F8", Offset = "0x5B16F8", VA = "0x5B16F8")]
		public void CallFriendOnClick()
		{
		}

		[Token(Token = "0x6000B77")]
		[Address(RVA = "0x5B186C", Offset = "0x5B186C", VA = "0x5B186C")]
		public void HangupOnClick()
		{
		}

		[Token(Token = "0x6000B78")]
		[Address(RVA = "0x5B1894", Offset = "0x5B1894", VA = "0x5B1894")]
		public void QuitOnClick()
		{
		}

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0x5B189C", Offset = "0x5B189C", VA = "0x5B189C")]
		public static void AnswerCallOnClick(ulong roomID)
		{
		}

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0x5B06A4", Offset = "0x5B06A4", VA = "0x5B06A4")]
		public static void TransitionToState(State newState)
		{
		}

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0x5AF3A8", Offset = "0x5AF3A8", VA = "0x5AF3A8")]
		public static void SetBackgroundColorForState()
		{
		}

		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0x5B1BF8", Offset = "0x5B1BF8", VA = "0x5B1BF8")]
		public static void SetActiveInvites(List<RoomManager.Invite> invites)
		{
		}

		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0x5B265C", Offset = "0x5B265C", VA = "0x5B265C")]
		public PlatformManager()
		{
		}
	}
	[Token(Token = "0x2000197")]
	public class RoomManager
	{
		[Token(Token = "0x20002B6")]
		public struct Invite
		{
			[Token(Token = "0x4000FB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly ulong RoomID;

			[Token(Token = "0x4000FB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public readonly string OwnerID;

			[Token(Token = "0x6001457")]
			[Address(RVA = "0x2C2270", Offset = "0x2C2270", VA = "0x2C2270")]
			public Invite(ulong roomID, string owner)
			{
			}
		}

		[Token(Token = "0x400059F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private ulong m_roomID;

		[Token(Token = "0x40005A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private User m_remoteUser;

		[Token(Token = "0x40005A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly float INVITE_POLL_FREQ_SECONDS;

		[Token(Token = "0x40005A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float m_nextPollTime;

		[Token(Token = "0x40005A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private HashSet<ulong> m_pendingRoomRequests;

		[Token(Token = "0x40005A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private List<Invite> m_invites;

		[Token(Token = "0x170000EC")]
		public ulong RemoteUserID
		{
			[Token(Token = "0x6000B80")]
			[Address(RVA = "0x5B1ACC", Offset = "0x5B1ACC", VA = "0x5B1ACC")]
			get
			{
				return default(ulong);
			}
		}

		[Token(Token = "0x170000ED")]
		public string RemoteOculusID
		{
			[Token(Token = "0x6000B81")]
			[Address(RVA = "0x5B26F0", Offset = "0x5B26F0", VA = "0x5B26F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EE")]
		public bool ShouldPollInviteList
		{
			[Token(Token = "0x6000B87")]
			[Address(RVA = "0x5B0250", Offset = "0x5B0250", VA = "0x5B0250")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0x5B0C7C", Offset = "0x5B0C7C", VA = "0x5B0C7C")]
		public RoomManager()
		{
		}

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0x5B2768", Offset = "0x5B2768", VA = "0x5B2768")]
		private void LaunchedFromAcceptingInviteCallback(Message<string> msg)
		{
		}

		[Token(Token = "0x6000B83")]
		[Address(RVA = "0x5B126C", Offset = "0x5B126C", VA = "0x5B126C")]
		public bool CheckForLaunchInvite()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B84")]
		[Address(RVA = "0x5B1798", Offset = "0x5B1798", VA = "0x5B1798")]
		public void CreateRoomAndLaunchInviteMenu()
		{
		}

		[Token(Token = "0x6000B85")]
		[Address(RVA = "0x5B28D0", Offset = "0x5B28D0", VA = "0x5B28D0")]
		private void CreateAndJoinPrivateRoomCallback(Message<Room> msg)
		{
		}

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0x5B2A54", Offset = "0x5B2A54", VA = "0x5B2A54")]
		private void OnLaunchInviteWorkflowComplete(Message msg)
		{
		}

		[Token(Token = "0x6000B88")]
		[Address(RVA = "0x5B0294", Offset = "0x5B0294", VA = "0x5B0294")]
		public void UpdateActiveInvitesList()
		{
		}

		[Token(Token = "0x6000B89")]
		[Address(RVA = "0x5B2AF8", Offset = "0x5B2AF8", VA = "0x5B2AF8")]
		private void GetRoomInviteNotificationsCallback(Message msg_untyped)
		{
		}

		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0x5B2FDC", Offset = "0x5B2FDC", VA = "0x5B2FDC")]
		private void GetRoomInfoCallback(Message<Room> msg)
		{
		}

		[Token(Token = "0x6000B8B")]
		[Address(RVA = "0x5B19F0", Offset = "0x5B19F0", VA = "0x5B19F0")]
		public void JoinExistingRoom(ulong roomID)
		{
		}

		[Token(Token = "0x6000B8C")]
		[Address(RVA = "0x5B3274", Offset = "0x5B3274", VA = "0x5B3274")]
		private void JoinRoomCallback(Message<Room> msg)
		{
		}

		[Token(Token = "0x6000B8D")]
		[Address(RVA = "0x5B3924", Offset = "0x5B3924", VA = "0x5B3924")]
		private void RoomUpdateCallback(Message<Room> msg)
		{
		}

		[Token(Token = "0x6000B8E")]
		[Address(RVA = "0x5B1328", Offset = "0x5B1328", VA = "0x5B1328")]
		public void LeaveCurrentRoom()
		{
		}
	}
	[Token(Token = "0x2000198")]
	public class VoipManager
	{
		[Token(Token = "0x40005A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private ulong m_remoteID;

		[Token(Token = "0x40005A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PeerConnectionState m_state;

		[Token(Token = "0x40005A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private readonly GameObject m_remoteHead;

		[Token(Token = "0x170000EF")]
		public bool Connected
		{
			[Token(Token = "0x6000B93")]
			[Address(RVA = "0x5B1BE8", Offset = "0x5B1BE8", VA = "0x5B1BE8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000B90")]
		[Address(RVA = "0x5B0D74", Offset = "0x5B0D74", VA = "0x5B0D74")]
		public VoipManager(GameObject remoteHead)
		{
		}

		[Token(Token = "0x6000B91")]
		[Address(RVA = "0x5B1AE4", Offset = "0x5B1AE4", VA = "0x5B1AE4")]
		public void ConnectTo(ulong userID)
		{
		}

		[Token(Token = "0x6000B92")]
		[Address(RVA = "0x5B13D4", Offset = "0x5B13D4", VA = "0x5B13D4")]
		public void Disconnect()
		{
		}

		[Token(Token = "0x6000B94")]
		[Address(RVA = "0x5B47A0", Offset = "0x5B47A0", VA = "0x5B47A0")]
		private void VoipConnectRequestCallback(Message<NetworkingPeer> msg)
		{
		}

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0x5B4B04", Offset = "0x5B4B04", VA = "0x5B4B04")]
		private void VoipStateChangedCallback(Message<NetworkingPeer> msg)
		{
		}
	}
	[Token(Token = "0x2000199")]
	public class VREyeRaycaster : MonoBehaviour
	{
		[Token(Token = "0x40005A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private EventSystem m_eventSystem;

		[Token(Token = "0x40005A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Button m_currentButton;

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0x5B4050", Offset = "0x5B4050", VA = "0x5B4050")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0x5B42FC", Offset = "0x5B42FC", VA = "0x5B42FC")]
		public VREyeRaycaster()
		{
		}
	}
}
namespace Oculus.Platform.Samples.VrHoops
{
	[Token(Token = "0x200019A")]
	public class AchievementsManager
	{
		[Token(Token = "0x40005AA")]
		private const string LIKES_TO_WIN = "LIKES_TO_WIN";

		[Token(Token = "0x40005AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private bool m_likesToWinUnlocked;

		[Token(Token = "0x170000F0")]
		public bool LikesToWin
		{
			[Token(Token = "0x6000B98")]
			[Address(RVA = "0x5A21B8", Offset = "0x5A21B8", VA = "0x5A21B8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000B99")]
		[Address(RVA = "0x5A21C0", Offset = "0x5A21C0", VA = "0x5A21C0")]
		public void CheckForAchievmentUpdates()
		{
		}

		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0x5A2324", Offset = "0x5A2324", VA = "0x5A2324")]
		public void RecordWinForLocalUser()
		{
		}

		[Token(Token = "0x6000B9B")]
		[Address(RVA = "0x5A23A4", Offset = "0x5A23A4", VA = "0x5A23A4")]
		public AchievementsManager()
		{
		}

		[Token(Token = "0x6000B9C")]
		[Address(RVA = "0x5A23AC", Offset = "0x5A23AC", VA = "0x5A23AC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249010", Offset = "0x249010")]
		private void <CheckForAchievmentUpdates>b__4_0(Message<AchievementProgressList> msg)
		{
		}
	}
	[Token(Token = "0x200019B")]
	public class AIPlayer : Player
	{
		[Token(Token = "0x6000B9D")]
		[Address(RVA = "0x5A1D5C", Offset = "0x5A1D5C", VA = "0x5A1D5C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000B9E")]
		[Address(RVA = "0x5A2128", Offset = "0x5A2128", VA = "0x5A2128")]
		public AIPlayer()
		{
		}
	}
	[Token(Token = "0x200019C")]
	public class BallEjector : MonoBehaviour
	{
		[Token(Token = "0x6000B9F")]
		[Address(RVA = "0x5A2680", Offset = "0x5A2680", VA = "0x5A2680")]
		public BallEjector()
		{
		}
	}
	[Token(Token = "0x200019D")]
	public class Camera2DController : MonoBehaviour
	{
		[Token(Token = "0x6000BA0")]
		[Address(RVA = "0x5A2688", Offset = "0x5A2688", VA = "0x5A2688")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BA1")]
		[Address(RVA = "0x5A2974", Offset = "0x5A2974", VA = "0x5A2974")]
		public Camera2DController()
		{
		}
	}
	[Token(Token = "0x200019E")]
	public class DetectBasket : MonoBehaviour
	{
		[Token(Token = "0x20002B7")]
		private enum BasketPhase
		{
			[Token(Token = "0x4000FBB")]
			NONE,
			[Token(Token = "0x4000FBC")]
			TOP,
			[Token(Token = "0x4000FBD")]
			BOTH,
			[Token(Token = "0x4000FBE")]
			BOTTOM
		}

		[Token(Token = "0x40005AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private BasketPhase m_phase;

		[Token(Token = "0x40005AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Player m_owningPlayer;

		[Token(Token = "0x170000F1")]
		public Player Player
		{
			[Token(Token = "0x6000BA2")]
			[Address(RVA = "0x5A297C", Offset = "0x5A297C", VA = "0x5A297C")]
			set
			{
			}
		}

		[Token(Token = "0x6000BA3")]
		[Address(RVA = "0x5A2984", Offset = "0x5A2984", VA = "0x5A2984")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0x5A2ABC", Offset = "0x5A2ABC", VA = "0x5A2ABC")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000BA5")]
		[Address(RVA = "0x5A2D10", Offset = "0x5A2D10", VA = "0x5A2D10")]
		public DetectBasket()
		{
		}
	}
	[Token(Token = "0x200019F")]
	public class FlyText : MonoBehaviour
	{
		[Token(Token = "0x40005AE")]
		private const float LIFESPAN = 3f;

		[Token(Token = "0x40005AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private readonly Vector3 m_movePerFrame;

		[Token(Token = "0x40005B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float m_eol;

		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0x5A2D18", Offset = "0x5A2D18", VA = "0x5A2D18")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0x5A2DF0", Offset = "0x5A2DF0", VA = "0x5A2DF0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0x5A2F64", Offset = "0x5A2F64", VA = "0x5A2F64")]
		public FlyText()
		{
		}
	}
	[Token(Token = "0x20001A0")]
	public class GoalMover : MonoBehaviour
	{
		[Token(Token = "0x40005B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private float MAX_OFFSET;

		[Token(Token = "0x40005B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private float m_speed;

		[Token(Token = "0x40005B3")]
		private const float MOVE_TOLERANCE = 0.1f;

		[Token(Token = "0x40005B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Vector3 m_expectedPosition;

		[Token(Token = "0x40005B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 m_moveDirection;

		[Token(Token = "0x40005B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 m_nextMoveDirection;

		[Token(Token = "0x170000F2")]
		public Vector3 ExpectedPosition
		{
			[Token(Token = "0x6000BA9")]
			[Address(RVA = "0x5A302C", Offset = "0x5A302C", VA = "0x5A302C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000BAA")]
			[Address(RVA = "0x5A3040", Offset = "0x5A3040", VA = "0x5A3040")]
			set
			{
			}
		}

		[Token(Token = "0x170000F3")]
		public Vector3 MoveDirection
		{
			[Token(Token = "0x6000BAB")]
			[Address(RVA = "0x5A304C", Offset = "0x5A304C", VA = "0x5A304C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000BAC")]
			[Address(RVA = "0x5A3060", Offset = "0x5A3060", VA = "0x5A3060")]
			set
			{
			}
		}

		[Token(Token = "0x170000F4")]
		public Vector3 NextMoveDirection
		{
			[Token(Token = "0x6000BAD")]
			[Address(RVA = "0x5A306C", Offset = "0x5A306C", VA = "0x5A306C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000BAE")]
			[Address(RVA = "0x5A3080", Offset = "0x5A3080", VA = "0x5A3080")]
			set
			{
			}
		}

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0x5A308C", Offset = "0x5A308C", VA = "0x5A308C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0x5A3284", Offset = "0x5A3284", VA = "0x5A3284")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0x5A36FC", Offset = "0x5A36FC", VA = "0x5A36FC")]
		public GoalMover()
		{
		}
	}
	[Token(Token = "0x20001A1")]
	public class LeaderboardManager
	{
		[Token(Token = "0x20002B8")]
		public delegate void OnMostWinsLeaderboardUpdated(SortedDictionary<int, LeaderboardEntry> entries);

		[Token(Token = "0x20002B9")]
		public delegate void OnHighScoreLeaderboardUpdated(SortedDictionary<int, LeaderboardEntry> entries);

		[Token(Token = "0x40005B7")]
		private const string MOST_MATCHES_WON = "MOST_MATCHES_WON";

		[Token(Token = "0x40005B8")]
		private const string HIGHEST_MATCH_SCORE = "HIGHEST_MATCH_SCORE";

		[Token(Token = "0x40005B9")]
		private const int TOP_N_COUNT = 5;

		[Token(Token = "0x40005BA")]
		private const float LEADERBOARD_POLL_FREQ = 30f;

		[Token(Token = "0x40005BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private float m_nextCheckTime;

		[Token(Token = "0x40005BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private SortedDictionary<int, LeaderboardEntry> m_mostWins;

		[Token(Token = "0x40005BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool m_foundLocalUserMostWinsEntry;

		[Token(Token = "0x40005BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private long m_numWins;

		[Token(Token = "0x40005BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private OnMostWinsLeaderboardUpdated m_mostWinsCallback;

		[Token(Token = "0x40005C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private SortedDictionary<int, LeaderboardEntry> m_highScores;

		[Token(Token = "0x40005C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool m_foundLocalUserHighScore;

		[Token(Token = "0x40005C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private OnHighScoreLeaderboardUpdated m_highScoreCallback;

		[Token(Token = "0x170000F5")]
		public OnMostWinsLeaderboardUpdated MostWinsLeaderboardUpdatedCallback
		{
			[Token(Token = "0x6000BB3")]
			[Address(RVA = "0x5A39FC", Offset = "0x5A39FC", VA = "0x5A39FC")]
			set
			{
			}
		}

		[Token(Token = "0x170000F6")]
		public OnHighScoreLeaderboardUpdated HighScoreLeaderboardUpdatedCallback
		{
			[Token(Token = "0x6000BB6")]
			[Address(RVA = "0x5A43E4", Offset = "0x5A43E4", VA = "0x5A43E4")]
			set
			{
			}
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0x5A3718", Offset = "0x5A3718", VA = "0x5A3718")]
		public void CheckForUpdates()
		{
		}

		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0x5A377C", Offset = "0x5A377C", VA = "0x5A377C")]
		private void QueryMostWinsLeaderboard()
		{
		}

		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0x5A3A04", Offset = "0x5A3A04", VA = "0x5A3A04")]
		private void MostWinsGetEntriesCallback(Message<LeaderboardEntryList> msg)
		{
		}

		[Token(Token = "0x6000BB7")]
		[Address(RVA = "0x5A38BC", Offset = "0x5A38BC", VA = "0x5A38BC")]
		private void QueryHighScoreLeaderboard()
		{
		}

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0x5A43EC", Offset = "0x5A43EC", VA = "0x5A43EC")]
		private void HighestScoreGetEntriesCallback(Message<LeaderboardEntryList> msg)
		{
		}

		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0x5A4CD4", Offset = "0x5A4CD4", VA = "0x5A4CD4")]
		public void SubmitMatchScores(bool wonMatch, uint score)
		{
		}

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0x5A4DA0", Offset = "0x5A4DA0", VA = "0x5A4DA0")]
		public LeaderboardManager()
		{
		}
	}
	[Token(Token = "0x20001A2")]
	public class LocalPlayer : Player
	{
		[Token(Token = "0x170000F7")]
		public override uint Score
		{
			[Token(Token = "0x6000BBB")]
			[Address(RVA = "0x5A4E40", Offset = "0x5A4E40", VA = "0x5A4E40", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0x5A51C0", Offset = "0x5A51C0", VA = "0x5A51C0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0x5A53BC", Offset = "0x5A53BC", VA = "0x5A53BC")]
		public LocalPlayer()
		{
		}
	}
	[Token(Token = "0x20001A3")]
	public class MatchController : MonoBehaviour
	{
		[Token(Token = "0x20002BA")]
		private enum State
		{
			[Token(Token = "0x4000FC0")]
			UNKNOWN,
			[Token(Token = "0x4000FC1")]
			NONE,
			[Token(Token = "0x4000FC2")]
			WAITING_TO_START_PRACTICE,
			[Token(Token = "0x4000FC3")]
			PRACTICING,
			[Token(Token = "0x4000FC4")]
			VIEWING_RESULTS_PRACTICE,
			[Token(Token = "0x4000FC5")]
			WAITING_FOR_MATCH,
			[Token(Token = "0x4000FC6")]
			WAITING_TO_SETUP_MATCH,
			[Token(Token = "0x4000FC7")]
			PLAYING_MATCH,
			[Token(Token = "0x4000FC8")]
			VIEWING_MATCH_RESULTS
		}

		[Token(Token = "0x40005C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private Text m_timerText;

		[Token(Token = "0x40005C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private Camera m_camera;

		[Token(Token = "0x40005C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private Transform m_idleCameraTransform;

		[Token(Token = "0x40005C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Text m_matchmakeButtonText;

		[Token(Token = "0x40005C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private PlayerArea[] m_playerAreas;

		[Token(Token = "0x40005C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private uint PRACTICE_WARMUP_TIME;

		[Token(Token = "0x40005C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private uint MATCH_WARMUP_TIME;

		[Token(Token = "0x40005CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private uint MATCH_TIME;

		[Token(Token = "0x40005CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private uint MATCH_COOLDOWN_TIME;

		[Token(Token = "0x40005CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject m_mostWinsLeaderboard;

		[Token(Token = "0x40005CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private GameObject m_highestScoresLeaderboard;

		[Token(Token = "0x40005CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private GameObject m_leaderboardEntryPrefab;

		[Token(Token = "0x40005CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private GameObject m_flytext;

		[Token(Token = "0x40005D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private State m_currentState;

		[Token(Token = "0x40005D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float m_nextStateTransitionTime;

		[Token(Token = "0x40005D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int m_localSlot;

		[Token(Token = "0x170000F8")]
		public float MatchStartTime
		{
			[Token(Token = "0x6000BC0")]
			[Address(RVA = "0x5A5E14", Offset = "0x5A5E14", VA = "0x5A5E14")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BC1")]
			[Address(RVA = "0x5A5E34", Offset = "0x5A5E34", VA = "0x5A5E34")]
			private set
			{
			}
		}

		[Token(Token = "0x6000BBE")]
		[Address(RVA = "0x5A53C0", Offset = "0x5A53C0", VA = "0x5A53C0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BBF")]
		[Address(RVA = "0x5A5A98", Offset = "0x5A5A98", VA = "0x5A5A98")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BC2")]
		[Address(RVA = "0x5A56E0", Offset = "0x5A56E0", VA = "0x5A56E0")]
		private void TransitionToState(State newState)
		{
		}

		[Token(Token = "0x6000BC3")]
		[Address(RVA = "0x5A5AB4", Offset = "0x5A5AB4", VA = "0x5A5AB4")]
		private void UpdateCheckForNextTimedTransition()
		{
		}

		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0x5A5B98", Offset = "0x5A5B98", VA = "0x5A5B98")]
		private void UpdateMatchTimer()
		{
		}

		[Token(Token = "0x6000BC5")]
		[Address(RVA = "0x5A5E3C", Offset = "0x5A5E3C", VA = "0x5A5E3C")]
		private void SetupForIdle()
		{
		}

		[Token(Token = "0x6000BC6")]
		[Address(RVA = "0x5A61D8", Offset = "0x5A61D8", VA = "0x5A61D8")]
		private void SetupForPractice()
		{
		}

		[Token(Token = "0x6000BC7")]
		[Address(RVA = "0x5A6B7C", Offset = "0x5A6B7C", VA = "0x5A6B7C")]
		private Player MatchPlayerAddedCallback(int slot, User user)
		{
			return null;
		}

		[Token(Token = "0x6000BC8")]
		[Address(RVA = "0x5A5F24", Offset = "0x5A5F24", VA = "0x5A5F24")]
		private void MoveCameraToIdlePosition()
		{
		}

		[Token(Token = "0x6000BC9")]
		[Address(RVA = "0x5A6334", Offset = "0x5A6334", VA = "0x5A6334")]
		private void MoveCameraToMatchPosition()
		{
		}

		[Token(Token = "0x6000BCA")]
		[Address(RVA = "0x5A6F78", Offset = "0x5A6F78", VA = "0x5A6F78")]
		public void StartPracticeMatch()
		{
		}

		[Token(Token = "0x6000BCB")]
		[Address(RVA = "0x5A6F8C", Offset = "0x5A6F8C", VA = "0x5A6F8C")]
		public void PlayOnlineOrCancel()
		{
		}

		[Token(Token = "0x6000BCC")]
		[Address(RVA = "0x5A7190", Offset = "0x5A7190", VA = "0x5A7190")]
		private void OnMatchFoundCallback(bool success)
		{
		}

		[Token(Token = "0x6000BCD")]
		[Address(RVA = "0x5A71A0", Offset = "0x5A71A0", VA = "0x5A71A0")]
		private float StartTimeOfferCallback(float remoteTime)
		{
			return default(float);
		}

		[Token(Token = "0x6000BCE")]
		[Address(RVA = "0x5A72D4", Offset = "0x5A72D4", VA = "0x5A72D4")]
		private void MostWinsLeaderboardCallback(SortedDictionary<int, LeaderboardEntry> entries)
		{
		}

		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0x5A7A48", Offset = "0x5A7A48", VA = "0x5A7A48")]
		private void HighestScoreLeaderboardCallback(SortedDictionary<int, LeaderboardEntry> entries)
		{
		}

		[Token(Token = "0x6000BD0")]
		[Address(RVA = "0x5A6540", Offset = "0x5A6540", VA = "0x5A6540")]
		private void CalculateMatchResults()
		{
		}

		[Token(Token = "0x6000BD1")]
		[Address(RVA = "0x5A6D00", Offset = "0x5A6D00", VA = "0x5A6D00")]
		private void DisplayAchievementFlytext()
		{
		}

		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0x5A82A8", Offset = "0x5A82A8", VA = "0x5A82A8")]
		public MatchController()
		{
		}
	}
	[Token(Token = "0x20001A4")]
	public class MatchmakingManager
	{
		[Token(Token = "0x20002BB")]
		public delegate void OnEnqueueResult(bool successful);

		[Token(Token = "0x20002BC")]
		public delegate Player OnMatchPlayerAdded(int slot, User user);

		[Token(Token = "0x40005D3")]
		private const string NORMAL_POOL = "NORMAL_QUICKMATCH";

		[Token(Token = "0x40005D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private ulong m_matchRoom;

		[Token(Token = "0x40005D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Dictionary<ulong, User> m_remotePlayers;

		[Token(Token = "0x40005D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private OnEnqueueResult m_enqueueCallback;

		[Token(Token = "0x40005D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private OnMatchPlayerAdded m_playerCallback;

		[Token(Token = "0x170000F9")]
		public OnEnqueueResult EnqueueResultCallback
		{
			[Token(Token = "0x6000BD4")]
			[Address(RVA = "0x5A8454", Offset = "0x5A8454", VA = "0x5A8454")]
			private get
			{
				return null;
			}
			[Token(Token = "0x6000BD5")]
			[Address(RVA = "0x5A845C", Offset = "0x5A845C", VA = "0x5A845C")]
			set
			{
			}
		}

		[Token(Token = "0x170000FA")]
		public OnMatchPlayerAdded MatchPlayerAddedCallback
		{
			[Token(Token = "0x6000BD6")]
			[Address(RVA = "0x5A8464", Offset = "0x5A8464", VA = "0x5A8464")]
			private get
			{
				return null;
			}
			[Token(Token = "0x6000BD7")]
			[Address(RVA = "0x5A846C", Offset = "0x5A846C", VA = "0x5A846C")]
			set
			{
			}
		}

		[Token(Token = "0x6000BD3")]
		[Address(RVA = "0x5A8340", Offset = "0x5A8340", VA = "0x5A8340")]
		public MatchmakingManager()
		{
		}

		[Token(Token = "0x6000BD8")]
		[Address(RVA = "0x5A7094", Offset = "0x5A7094", VA = "0x5A7094")]
		public void QueueForMatch()
		{
		}

		[Token(Token = "0x6000BD9")]
		[Address(RVA = "0x5A8474", Offset = "0x5A8474", VA = "0x5A8474")]
		private void MatchmakingEnqueueCallback(Message msg)
		{
		}

		[Token(Token = "0x6000BDA")]
		[Address(RVA = "0x5A87E4", Offset = "0x5A87E4", VA = "0x5A87E4")]
		private void MatchFoundCallback(Message<Room> msg)
		{
		}

		[Token(Token = "0x6000BDB")]
		[Address(RVA = "0x5A88F8", Offset = "0x5A88F8", VA = "0x5A88F8")]
		private void MatchmakingJoinRoomCallback(Message<Room> msg)
		{
		}

		[Token(Token = "0x6000BDC")]
		[Address(RVA = "0x5A93D8", Offset = "0x5A93D8", VA = "0x5A93D8")]
		private void MatchmakingRoomUpdateCallback(Message<Room> msg)
		{
		}

		[Token(Token = "0x6000BDD")]
		[Address(RVA = "0x5A699C", Offset = "0x5A699C", VA = "0x5A699C")]
		public void EndMatch()
		{
		}

		[Token(Token = "0x6000BDE")]
		[Address(RVA = "0x5A7170", Offset = "0x5A7170", VA = "0x5A7170")]
		public void LeaveQueue()
		{
		}
	}
	[Token(Token = "0x20001A5")]
	public class P2PManager
	{
		[Token(Token = "0x20002BD")]
		private class RemotePlayerData
		{
			[Token(Token = "0x4000FC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public PeerConnectionState state;

			[Token(Token = "0x4000FCA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public RemotePlayer player;

			[Token(Token = "0x4000FCB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float remoteTimeOffset;

			[Token(Token = "0x4000FCC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float lastReceivedBallsTime;

			[Token(Token = "0x4000FCD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public readonly Dictionary<int, P2PNetworkBall> activeBalls;

			[Token(Token = "0x6001468")]
			[Address(RVA = "0x5AB7F0", Offset = "0x5AB7F0", VA = "0x5AB7F0")]
			public RemotePlayerData()
			{
			}
		}

		[Token(Token = "0x20002BE")]
		public delegate float StartTimeOffer(float remoteTime);

		[Token(Token = "0x40005D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private readonly Dictionary<ulong, RemotePlayerData> m_remotePlayers;

		[Token(Token = "0x40005D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private float m_timeForNextBallUpdate;

		[Token(Token = "0x40005DA")]
		private const byte TIME_SYNC_MESSAGE = 1;

		[Token(Token = "0x40005DB")]
		private const uint TIME_SYNC_MESSAGE_SIZE = 5u;

		[Token(Token = "0x40005DC")]
		private const int TIME_SYNC_MESSAGE_COUNT = 7;

		[Token(Token = "0x40005DD")]
		private const byte START_TIME_MESSAGE = 2;

		[Token(Token = "0x40005DE")]
		private const uint START_TIME_MESSAGE_SIZE = 5u;

		[Token(Token = "0x40005DF")]
		private const byte BACKBOARD_UPDATE_MESSAGE = 3;

		[Token(Token = "0x40005E0")]
		private const uint BACKBOARD_UPDATE_MESSAGE_SIZE = 41u;

		[Token(Token = "0x40005E1")]
		private const byte LOCAL_BALLS_UPDATE_MESSAGE = 4;

		[Token(Token = "0x40005E2")]
		private const uint LOCAL_BALLS_UPDATE_MESSATE_SIZE_MAX = 353u;

		[Token(Token = "0x40005E3")]
		private const float LOCAL_BALLS_UPDATE_DELAY = 0.1f;

		[Token(Token = "0x40005E4")]
		private const byte SCORE_UPDATE_MESSAGE = 5;

		[Token(Token = "0x40005E5")]
		private const uint SCORE_UPDATE_MESSAGE_SIZE = 5u;

		[Token(Token = "0x40005E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Dictionary<int, P2PNetworkBall> m_localBalls;

		[Token(Token = "0x40005E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private readonly byte[] readBuffer;

		[Token(Token = "0x40005E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Dictionary<ulong, List<float>> m_remoteSyncTimeCache;

		[Token(Token = "0x40005E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private readonly Dictionary<ulong, float> m_remoteSentTimeCache;

		[Token(Token = "0x40005EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private StartTimeOffer m_startTimeOfferCallback;

		[Token(Token = "0x170000FB")]
		public StartTimeOffer StartTimeOfferCallback
		{
			[Token(Token = "0x6000BE8")]
			[Address(RVA = "0x5AC5D8", Offset = "0x5AC5D8", VA = "0x5AC5D8")]
			private get
			{
				return null;
			}
			[Token(Token = "0x6000BE9")]
			[Address(RVA = "0x5AC5E0", Offset = "0x5AC5E0", VA = "0x5AC5E0")]
			set
			{
			}
		}

		[Token(Token = "0x6000BDF")]
		[Address(RVA = "0x5A9CA4", Offset = "0x5A9CA4", VA = "0x5A9CA4")]
		public P2PManager()
		{
		}

		[Token(Token = "0x6000BE0")]
		[Address(RVA = "0x5A9E70", Offset = "0x5A9E70", VA = "0x5A9E70")]
		public void UpdateNetwork()
		{
		}

		[Token(Token = "0x6000BE1")]
		[Address(RVA = "0x5A90EC", Offset = "0x5A90EC", VA = "0x5A90EC")]
		public void AddRemotePlayer(RemotePlayer player)
		{
		}

		[Token(Token = "0x6000BE2")]
		[Address(RVA = "0x5A99BC", Offset = "0x5A99BC", VA = "0x5A99BC")]
		public void DisconnectAll()
		{
		}

		[Token(Token = "0x6000BE3")]
		[Address(RVA = "0x5AB87C", Offset = "0x5AB87C", VA = "0x5AB87C")]
		private void PeerConnectRequestCallback(Message<NetworkingPeer> msg)
		{
		}

		[Token(Token = "0x6000BE4")]
		[Address(RVA = "0x5ABB30", Offset = "0x5ABB30", VA = "0x5ABB30")]
		private void ConnectionStateChangedCallback(Message<NetworkingPeer> msg)
		{
		}

		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0x5ABF2C", Offset = "0x5ABF2C", VA = "0x5ABF2C")]
		private void SendTimeSyncMessage(ulong remoteID)
		{
		}

		[Token(Token = "0x6000BE6")]
		[Address(RVA = "0x5AA11C", Offset = "0x5AA11C", VA = "0x5AA11C")]
		private void ReadTimeSyncMessage(ulong remoteID, byte[] msg)
		{
		}

		[Token(Token = "0x6000BE7")]
		[Address(RVA = "0x5AC4D8", Offset = "0x5AC4D8", VA = "0x5AC4D8")]
		private float ShiftRemoteTime(ulong remoteID, float remoteTime)
		{
			return default(float);
		}

		[Token(Token = "0x6000BEA")]
		[Address(RVA = "0x5AC268", Offset = "0x5AC268", VA = "0x5AC268")]
		private void OfferMatchStartTime()
		{
		}

		[Token(Token = "0x6000BEB")]
		[Address(RVA = "0x5AAABC", Offset = "0x5AAABC", VA = "0x5AAABC")]
		private void ReceiveMatchStartTimeOffer(ulong remoteID, byte[] msg)
		{
		}

		[Token(Token = "0x6000BEC")]
		[Address(RVA = "0x5AC8A4", Offset = "0x5AC8A4", VA = "0x5AC8A4")]
		public void SendBackboardUpdate(float time, Vector3 pos, Vector3 moveDir, Vector3 nextMoveDir)
		{
		}

		[Token(Token = "0x6000BED")]
		[Address(RVA = "0x5AAB28", Offset = "0x5AAB28", VA = "0x5AAB28")]
		private void ReceiveBackboardUpdate(ulong remoteID, byte[] msg)
		{
		}

		[Token(Token = "0x6000BEE")]
		[Address(RVA = "0x5A52E0", Offset = "0x5A52E0", VA = "0x5A52E0")]
		public void AddNetworkBall(GameObject ball)
		{
		}

		[Token(Token = "0x6000BEF")]
		[Address(RVA = "0x5ACDD4", Offset = "0x5ACDD4", VA = "0x5ACDD4")]
		public void RemoveNetworkBall(GameObject ball)
		{
		}

		[Token(Token = "0x6000BF0")]
		[Address(RVA = "0x5AB35C", Offset = "0x5AB35C", VA = "0x5AB35C")]
		private void SendLocalBallTransforms()
		{
		}

		[Token(Token = "0x6000BF1")]
		[Address(RVA = "0x5AACC0", Offset = "0x5AACC0", VA = "0x5AACC0")]
		private void ReceiveBallTransforms(ulong remoteID, byte[] msg, ulong msgLength)
		{
		}

		[Token(Token = "0x6000BF2")]
		[Address(RVA = "0x5A4FD4", Offset = "0x5A4FD4", VA = "0x5A4FD4")]
		public void SendScoreUpdate(uint score)
		{
		}

		[Token(Token = "0x6000BF3")]
		[Address(RVA = "0x5AB278", Offset = "0x5AB278", VA = "0x5AB278")]
		private void ReceiveScoredUpdate(ulong remoteID, byte[] msg)
		{
		}

		[Token(Token = "0x6000BF4")]
		[Address(RVA = "0x5ACAD4", Offset = "0x5ACAD4", VA = "0x5ACAD4")]
		private void PackVector3(Vector3 vec, byte[] buf, ref int offset)
		{
		}

		[Token(Token = "0x6000BF5")]
		[Address(RVA = "0x5ACB24", Offset = "0x5ACB24", VA = "0x5ACB24")]
		private Vector3 UnpackVector3(byte[] buf, ref int offset)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0x5AD700", Offset = "0x5AD700", VA = "0x5AD700")]
		private void PackQuaternion(Quaternion quat, byte[] buf, ref int offset)
		{
		}

		[Token(Token = "0x6000BF7")]
		[Address(RVA = "0x5AC110", Offset = "0x5AC110", VA = "0x5AC110")]
		private void PackFloat(float value, byte[] buf, ref int offset)
		{
		}

		[Token(Token = "0x6000BF8")]
		[Address(RVA = "0x5AC1CC", Offset = "0x5AC1CC", VA = "0x5AC1CC")]
		private float UnpackFloat(byte[] buf, ref int offset)
		{
			return default(float);
		}

		[Token(Token = "0x6000BF9")]
		[Address(RVA = "0x5AC864", Offset = "0x5AC864", VA = "0x5AC864")]
		private float UnpackTime(ulong remoteID, byte[] buf, ref int offset)
		{
			return default(float);
		}

		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0x5ACEF8", Offset = "0x5ACEF8", VA = "0x5ACEF8")]
		private void PackInt32(int value, byte[] buf, ref int offset)
		{
		}

		[Token(Token = "0x6000BFB")]
		[Address(RVA = "0x5AD040", Offset = "0x5AD040", VA = "0x5AD040")]
		private int UnpackInt32(byte[] buf, ref int offset)
		{
			return default(int);
		}

		[Token(Token = "0x6000BFC")]
		[Address(RVA = "0x5AD5A4", Offset = "0x5AD5A4", VA = "0x5AD5A4")]
		private void PackUint32(uint value, byte[] buf, ref int offset)
		{
		}

		[Token(Token = "0x6000BFD")]
		[Address(RVA = "0x5AD660", Offset = "0x5AD660", VA = "0x5AD660")]
		private uint UnpackUint32(byte[] buf, ref int offset)
		{
			return default(uint);
		}

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0x5ACEA4", Offset = "0x5ACEA4", VA = "0x5ACEA4")]
		private void PackBool(bool value, byte[] buf, ref int offset)
		{
		}

		[Token(Token = "0x6000BFF")]
		[Address(RVA = "0x5ACFE8", Offset = "0x5ACFE8", VA = "0x5ACFE8")]
		private bool UnpackBool(byte[] buf, ref int offset)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001A6")]
	public class P2PNetworkBall : MonoBehaviour
	{
		[Token(Token = "0x40005EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private float lastCollisionTime;

		[Token(Token = "0x40005EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Rigidbody rigidBody;

		[Token(Token = "0x170000FC")]
		public Vector3 velocity
		{
			[Token(Token = "0x6000C01")]
			[Address(RVA = "0x5ACFB4", Offset = "0x5ACFB4", VA = "0x5ACFB4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000C00")]
		[Address(RVA = "0x5AD834", Offset = "0x5AD834", VA = "0x5AD834")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000C02")]
		[Address(RVA = "0x5ACE74", Offset = "0x5ACE74", VA = "0x5ACE74")]
		public bool IsHeld()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C03")]
		[Address(RVA = "0x5AD400", Offset = "0x5AD400", VA = "0x5AD400")]
		public void ProcessRemoteUpdate(float remoteTime, bool isHeld, Vector3 pos, Vector3 vel)
		{
		}

		[Token(Token = "0x6000C04")]
		[Address(RVA = "0x5AD8BC", Offset = "0x5AD8BC", VA = "0x5AD8BC")]
		private Vector3 estimatePosition(Vector3 startPosition, Vector3 startVelocty, float time)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000C05")]
		[Address(RVA = "0x5ADA24", Offset = "0x5ADA24", VA = "0x5ADA24")]
		private Vector3 estimateVelocity(Vector3 startVelocity, float time)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000C06")]
		[Address(RVA = "0x5ADB8C", Offset = "0x5ADB8C", VA = "0x5ADB8C")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000C07")]
		[Address(RVA = "0x5ADBA8", Offset = "0x5ADBA8", VA = "0x5ADBA8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000C08")]
		[Address(RVA = "0x5ADBEC", Offset = "0x5ADBEC", VA = "0x5ADBEC")]
		public P2PNetworkBall()
		{
		}
	}
	[Token(Token = "0x20001A7")]
	public class P2PNetworkGoal : MonoBehaviour
	{
		[Token(Token = "0x40005ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private GoalMover m_goal;

		[Token(Token = "0x40005EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Vector3 m_lastSentMoveDirection;

		[Token(Token = "0x40005EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool m_sendUpdates;

		[Token(Token = "0x170000FD")]
		public bool SendUpdates
		{
			[Token(Token = "0x6000C09")]
			[Address(RVA = "0x5ADBF4", Offset = "0x5ADBF4", VA = "0x5ADBF4")]
			set
			{
			}
		}

		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0x5ADBFC", Offset = "0x5ADBFC", VA = "0x5ADBFC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000C0B")]
		[Address(RVA = "0x5ADC84", Offset = "0x5ADC84", VA = "0x5ADC84")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000C0C")]
		[Address(RVA = "0x5ADD74", Offset = "0x5ADD74", VA = "0x5ADD74")]
		public void SendBackboardUpdate()
		{
		}

		[Token(Token = "0x6000C0D")]
		[Address(RVA = "0x5ACB74", Offset = "0x5ACB74", VA = "0x5ACB74")]
		public void RemoteBackboardUpdate(float remoteTime, Vector3 pos, Vector3 moveDir, Vector3 nextMoveDir)
		{
		}

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0x5ADE70", Offset = "0x5ADE70", VA = "0x5ADE70")]
		public P2PNetworkGoal()
		{
		}
	}
	[Token(Token = "0x20001A8")]
	public class PlatformManager : MonoBehaviour
	{
		[Token(Token = "0x20002BF")]
		public enum State
		{
			[Token(Token = "0x4000FCF")]
			INITIALIZING,
			[Token(Token = "0x4000FD0")]
			WAITING_TO_PRACTICE_OR_MATCHMAKE,
			[Token(Token = "0x4000FD1")]
			MATCH_TRANSITION,
			[Token(Token = "0x4000FD2")]
			PLAYING_A_LOCAL_MATCH,
			[Token(Token = "0x4000FD3")]
			PLAYING_A_NETWORKED_MATCH
		}

		[Token(Token = "0x40005F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static PlatformManager s_instance;

		[Token(Token = "0x40005F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private MatchmakingManager m_matchmaking;

		[Token(Token = "0x40005F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private P2PManager m_p2p;

		[Token(Token = "0x40005F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private LeaderboardManager m_leaderboards;

		[Token(Token = "0x40005F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private AchievementsManager m_achievements;

		[Token(Token = "0x40005F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private State m_currentState;

		[Token(Token = "0x40005F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ulong m_myID;

		[Token(Token = "0x40005F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string m_myOculusID;

		[Token(Token = "0x170000FE")]
		public static MatchmakingManager Matchmaking
		{
			[Token(Token = "0x6000C17")]
			[Address(RVA = "0x5A55BC", Offset = "0x5A55BC", VA = "0x5A55BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FF")]
		public static P2PManager P2P
		{
			[Token(Token = "0x6000C18")]
			[Address(RVA = "0x5A4F60", Offset = "0x5A4F60", VA = "0x5A4F60")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000100")]
		public static LeaderboardManager Leaderboards
		{
			[Token(Token = "0x6000C19")]
			[Address(RVA = "0x5A566C", Offset = "0x5A566C", VA = "0x5A566C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000101")]
		public static AchievementsManager Achievements
		{
			[Token(Token = "0x6000C1A")]
			[Address(RVA = "0x5A8234", Offset = "0x5A8234", VA = "0x5A8234")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000102")]
		public static State CurrentState
		{
			[Token(Token = "0x6000C1B")]
			[Address(RVA = "0x5A2C9C", Offset = "0x5A2C9C", VA = "0x5A2C9C")]
			get
			{
				return default(State);
			}
		}

		[Token(Token = "0x17000103")]
		public static ulong MyID
		{
			[Token(Token = "0x6000C1C")]
			[Address(RVA = "0x5A3F04", Offset = "0x5A3F04", VA = "0x5A3F04")]
			get
			{
				return default(ulong);
			}
		}

		[Token(Token = "0x17000104")]
		public static string MyOculusID
		{
			[Token(Token = "0x6000C1D")]
			[Address(RVA = "0x5A6A5C", Offset = "0x5A6A5C", VA = "0x5A6A5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C0F")]
		[Address(RVA = "0x5ADE78", Offset = "0x5ADE78", VA = "0x5ADE78")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C10")]
		[Address(RVA = "0x5ADEC0", Offset = "0x5ADEC0", VA = "0x5ADEC0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000C11")]
		[Address(RVA = "0x5AE0D4", Offset = "0x5AE0D4", VA = "0x5AE0D4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C12")]
		[Address(RVA = "0x5AE184", Offset = "0x5AE184", VA = "0x5AE184")]
		private void IsEntitledCallback(Message msg)
		{
		}

		[Token(Token = "0x6000C13")]
		[Address(RVA = "0x5AE27C", Offset = "0x5AE27C", VA = "0x5AE27C")]
		private void GetLoggedInUserCallback(Message<User> msg)
		{
		}

		[Token(Token = "0x6000C14")]
		[Address(RVA = "0x5A98D8", Offset = "0x5A98D8", VA = "0x5A98D8")]
		public static void TerminateWithError(Message msg)
		{
		}

		[Token(Token = "0x6000C15")]
		[Address(RVA = "0x5AE36C", Offset = "0x5AE36C", VA = "0x5AE36C")]
		public void QuitButtonPressed()
		{
		}

		[Token(Token = "0x6000C16")]
		[Address(RVA = "0x5AE374", Offset = "0x5AE374", VA = "0x5AE374")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000C1E")]
		[Address(RVA = "0x5A60D4", Offset = "0x5A60D4", VA = "0x5A60D4")]
		public static void TransitionToState(State newState)
		{
		}

		[Token(Token = "0x6000C1F")]
		[Address(RVA = "0x5AE3A8", Offset = "0x5AE3A8", VA = "0x5AE3A8")]
		public PlatformManager()
		{
		}
	}
	[Token(Token = "0x20001A9")]
	public abstract class Player : MonoBehaviour
	{
		[Token(Token = "0x40005F8")]
		public const uint MAX_BALLS = 6u;

		[Token(Token = "0x40005F9")]
		private const float INITIAL_FORCE = 870f;

		[Token(Token = "0x40005FA")]
		private const float RESPAWN_SECONDS = 2f;

		[Token(Token = "0x40005FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private uint m_score;

		[Token(Token = "0x40005FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Text m_scoreUI;

		[Token(Token = "0x40005FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private GameObject m_ballPrefab;

		[Token(Token = "0x40005FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BallEjector m_ballEjector;

		[Token(Token = "0x40005FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Queue<GameObject> m_balls;

		[Token(Token = "0x4000600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GameObject m_heldBall;

		[Token(Token = "0x4000601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float m_nextSpawnTime;

		[Token(Token = "0x17000105")]
		public virtual uint Score
		{
			[Token(Token = "0x6000C20")]
			[Address(RVA = "0x5AE3B0", Offset = "0x5AE3B0", VA = "0x5AE3B0", Slot = "4")]
			get
			{
				return default(uint);
			}
			[Token(Token = "0x6000C21")]
			[Address(RVA = "0x5A4E88", Offset = "0x5A4E88", VA = "0x5A4E88", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x17000106")]
		public GameObject BallPrefab
		{
			[Token(Token = "0x6000C22")]
			[Address(RVA = "0x5AE3B8", Offset = "0x5AE3B8", VA = "0x5AE3B8")]
			set
			{
			}
		}

		[Token(Token = "0x17000107")]
		protected bool HasBall
		{
			[Token(Token = "0x6000C23")]
			[Address(RVA = "0x5A1DB4", Offset = "0x5A1DB4", VA = "0x5A1DB4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000C24")]
		[Address(RVA = "0x5AE3C0", Offset = "0x5AE3C0", VA = "0x5AE3C0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C25")]
		[Address(RVA = "0x5AD0DC", Offset = "0x5AD0DC", VA = "0x5AD0DC")]
		public GameObject CreateBall()
		{
			return null;
		}

		[Token(Token = "0x6000C26")]
		[Address(RVA = "0x5A20B4", Offset = "0x5A20B4", VA = "0x5A20B4")]
		protected GameObject CheckSpawnBall()
		{
			return null;
		}

		[Token(Token = "0x6000C27")]
		[Address(RVA = "0x5A1E40", Offset = "0x5A1E40", VA = "0x5A1E40")]
		protected GameObject ShootBall()
		{
			return null;
		}

		[Token(Token = "0x6000C28")]
		[Address(RVA = "0x5AE4DC", Offset = "0x5AE4DC", VA = "0x5AE4DC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000C29")]
		[Address(RVA = "0x5A212C", Offset = "0x5A212C", VA = "0x5A212C")]
		protected Player()
		{
		}
	}
	[Token(Token = "0x20001AA")]
	public class PlayerArea : MonoBehaviour
	{
		[Token(Token = "0x4000602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private GameObject m_ballPrefab;

		[Token(Token = "0x4000603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GameObject m_playerHead;

		[Token(Token = "0x4000604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Text m_nameText;

		[Token(Token = "0x4000605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private P2PNetworkGoal m_p2pGoal;

		[Token(Token = "0x17000108")]
		public Player Player
		{
			[Token(Token = "0x6000C2A")]
			[Address(RVA = "0x5A81BC", Offset = "0x5A81BC", VA = "0x5A81BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000109")]
		public Text NameText
		{
			[Token(Token = "0x6000C2B")]
			[Address(RVA = "0x5AE654", Offset = "0x5AE654", VA = "0x5AE654")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C2C")]
		[Address(RVA = "0x5AE65C", Offset = "0x5AE65C", VA = "0x5AE65C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000C2D")]
		public T SetupForPlayer<T>(string name) where T : Player
		{
			return null;
		}

		[Token(Token = "0x6000C2E")]
		[Address(RVA = "0x5AE7D4", Offset = "0x5AE7D4", VA = "0x5AE7D4")]
		public PlayerArea()
		{
		}
	}
	[Token(Token = "0x20001AB")]
	public class RemotePlayer : Player
	{
		[Token(Token = "0x4000606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private User m_user;

		[Token(Token = "0x4000607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private P2PNetworkGoal m_goal;

		[Token(Token = "0x1700010A")]
		public User User
		{
			[Token(Token = "0x6000C2F")]
			[Address(RVA = "0x5AE7DC", Offset = "0x5AE7DC", VA = "0x5AE7DC")]
			set
			{
			}
		}

		[Token(Token = "0x1700010B")]
		public ulong ID
		{
			[Token(Token = "0x6000C30")]
			[Address(RVA = "0x5AB7CC", Offset = "0x5AB7CC", VA = "0x5AB7CC")]
			get
			{
				return default(ulong);
			}
		}

		[Token(Token = "0x1700010C")]
		public P2PNetworkGoal Goal
		{
			[Token(Token = "0x6000C31")]
			[Address(RVA = "0x5AE7E4", Offset = "0x5AE7E4", VA = "0x5AE7E4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C32")]
			[Address(RVA = "0x5AE7EC", Offset = "0x5AE7EC", VA = "0x5AE7EC")]
			set
			{
			}
		}

		[Token(Token = "0x1700010D")]
		public override uint Score
		{
			[Token(Token = "0x6000C33")]
			[Address(RVA = "0x5AE7F4", Offset = "0x5AE7F4", VA = "0x5AE7F4", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x6000C34")]
		[Address(RVA = "0x5AD6FC", Offset = "0x5AD6FC", VA = "0x5AD6FC")]
		public void ReceiveRemoteScore(uint score)
		{
		}

		[Token(Token = "0x6000C35")]
		[Address(RVA = "0x5AE7F8", Offset = "0x5AE7F8", VA = "0x5AE7F8")]
		public RemotePlayer()
		{
		}
	}
	[Token(Token = "0x20001AC")]
	public class VREyeRaycaster : MonoBehaviour
	{
		[Token(Token = "0x4000608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private EventSystem m_eventSystem;

		[Token(Token = "0x4000609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Button m_currentButton;

		[Token(Token = "0x6000C36")]
		[Address(RVA = "0x5AE7FC", Offset = "0x5AE7FC", VA = "0x5AE7FC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C37")]
		[Address(RVA = "0x5AEAA8", Offset = "0x5AEAA8", VA = "0x5AEAA8")]
		public VREyeRaycaster()
		{
		}
	}
}
namespace Oculus.Platform.Samples.VrBoardGame
{
	[Token(Token = "0x20001AD")]
	public class BoardPosition : MonoBehaviour
	{
		[Token(Token = "0x400060A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x245804", Offset = "0x245804")]
		public int x;

		[Token(Token = "0x400060B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x24583C", Offset = "0x24583C")]
		public int y;

		[Token(Token = "0x6000C38")]
		[Address(RVA = "0x59A980", Offset = "0x59A980", VA = "0x59A980")]
		public BoardPosition()
		{
		}
	}
	[Token(Token = "0x20001AE")]
	public class EyeCamera : MonoBehaviour
	{
		[Token(Token = "0x400060C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private EventSystem m_eventSystem;

		[Token(Token = "0x400060D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private GameController m_gameController;

		[Token(Token = "0x400060E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private SphereCollider m_gazeTracker;

		[Token(Token = "0x400060F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Button m_currentButton;

		[Token(Token = "0x4000610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private GamePiece m_currentPiece;

		[Token(Token = "0x4000611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private BoardPosition m_boardPosition;

		[Token(Token = "0x6000C39")]
		[Address(RVA = "0x59A988", Offset = "0x59A988", VA = "0x59A988")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C3A")]
		[Address(RVA = "0x59B608", Offset = "0x59B608", VA = "0x59B608")]
		public EyeCamera()
		{
		}
	}
	[Token(Token = "0x20001AF")]
	public class GameBoard : MonoBehaviour
	{
		[Token(Token = "0x20002C0")]
		private struct PositionInfo
		{
			[Token(Token = "0x4000FD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public GameObject piece;

			[Token(Token = "0x4000FD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int pieceOwner;

			[Token(Token = "0x4000FD6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int powerPieceOwner;
		}

		[Token(Token = "0x4000612")]
		public const int LENGTH_X = 3;

		[Token(Token = "0x4000613")]
		public const int LENGTH_Y = 3;

		[Token(Token = "0x4000614")]
		public const int MAX_PLAYERS = 2;

		[Token(Token = "0x4000615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private Color[] m_playerColors;

		[Token(Token = "0x4000616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private Color m_proposedMoveColor;

		[Token(Token = "0x4000617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int[] m_scores;

		[Token(Token = "0x4000618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private BoardPosition[] m_positions;

		[Token(Token = "0x4000619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly PositionInfo[,] m_pieces;

		[Token(Token = "0x6000C3B")]
		[Address(RVA = "0x59B610", Offset = "0x59B610", VA = "0x59B610")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000C3C")]
		[Address(RVA = "0x59B908", Offset = "0x59B908", VA = "0x59B908")]
		public bool IsFull()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C3D")]
		[Address(RVA = "0x59BA30", Offset = "0x59BA30", VA = "0x59BA30")]
		public bool CanPlayerMoveToPostion(int x, int y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C3E")]
		[Address(RVA = "0x59BB24", Offset = "0x59BB24", VA = "0x59BB24")]
		public bool CanPlayerPowerUpPosition(int x, int y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C3F")]
		[Address(RVA = "0x59BC18", Offset = "0x59BC18", VA = "0x59BC18")]
		public void AddPiece(int player, GameObject prefab, int x, int y)
		{
		}

		[Token(Token = "0x6000C40")]
		[Address(RVA = "0x59C620", Offset = "0x59C620", VA = "0x59C620")]
		public GamePiece AddProposedPiece(GameObject prefab, BoardPosition pos)
		{
			return null;
		}

		[Token(Token = "0x6000C41")]
		[Address(RVA = "0x59C784", Offset = "0x59C784", VA = "0x59C784")]
		public void AddPowerPiece(int player, GameObject prefab, int x, int y)
		{
		}

		[Token(Token = "0x6000C42")]
		[Address(RVA = "0x59CA48", Offset = "0x59CA48", VA = "0x59CA48")]
		public GamePiece AddProposedPowerPiece(GameObject prefab, BoardPosition pos)
		{
			return null;
		}

		[Token(Token = "0x6000C43")]
		[Address(RVA = "0x59BF5C", Offset = "0x59BF5C", VA = "0x59BF5C")]
		private GamePiece Create(GameObject prefab, GameObject parent, BoardPosition pos, Vector3 off)
		{
			return null;
		}

		[Token(Token = "0x6000C44")]
		[Address(RVA = "0x59CC40", Offset = "0x59CC40", VA = "0x59CC40")]
		public int GetPlayerScore(int player)
		{
			return default(int);
		}

		[Token(Token = "0x6000C45")]
		[Address(RVA = "0x59C170", Offset = "0x59C170", VA = "0x59C170")]
		private void UpdateScores()
		{
		}

		[Token(Token = "0x6000C46")]
		[Address(RVA = "0x59CC88", Offset = "0x59CC88", VA = "0x59CC88")]
		public GameBoard()
		{
		}
	}
	[Token(Token = "0x20001B0")]
	public class GameController : MonoBehaviour
	{
		[Token(Token = "0x20002C1")]
		private enum GameState
		{
			[Token(Token = "0x4000FD8")]
			None,
			[Token(Token = "0x4000FD9")]
			PracticingMyTurn,
			[Token(Token = "0x4000FDA")]
			PracticingAiTurn,
			[Token(Token = "0x4000FDB")]
			OnlineMatchMyTurn,
			[Token(Token = "0x4000FDC")]
			OnlineMatchRemoteTurn
		}

		[Token(Token = "0x400061A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private MatchmakingManager m_matchmaking;

		[Token(Token = "0x400061B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private GameBoard m_board;

		[Token(Token = "0x400061C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private GamePiece m_pieceA;

		[Token(Token = "0x400061D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GamePiece m_pieceB;

		[Token(Token = "0x400061E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private GamePiece m_powerPiece;

		[Token(Token = "0x400061F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Color m_unusableColor;

		[Token(Token = "0x4000620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Color m_unselectedColor;

		[Token(Token = "0x4000621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Color m_selectedColor;

		[Token(Token = "0x4000622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Color m_highlightedColor;

		[Token(Token = "0x4000623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Text m_ballCountText;

		[Token(Token = "0x4000624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[SerializeField]
		private Text m_player0Text;

		[Token(Token = "0x4000625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private Text m_player1Text;

		[Token(Token = "0x4000626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private GameState m_state;

		[Token(Token = "0x4000627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GamePiece m_interestedPiece;

		[Token(Token = "0x4000628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private GamePiece m_selectedPiece;

		[Token(Token = "0x4000629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GamePiece m_proposedPiece;

		[Token(Token = "0x400062A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private uint m_powerBallcount;

		[Token(Token = "0x400062B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string m_opponentName;

		[Token(Token = "0x6000C47")]
		[Address(RVA = "0x59CD84", Offset = "0x59CD84", VA = "0x59CD84")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C48")]
		[Address(RVA = "0x59CF34", Offset = "0x59CF34", VA = "0x59CF34")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C49")]
		[Address(RVA = "0x59CDAC", Offset = "0x59CDAC", VA = "0x59CDAC")]
		private void TransitionToState(GameState state)
		{
		}

		[Token(Token = "0x6000C4A")]
		[Address(RVA = "0x59D69C", Offset = "0x59D69C", VA = "0x59D69C")]
		private void TransitionToNextState()
		{
		}

		[Token(Token = "0x6000C4B")]
		[Address(RVA = "0x59CF38", Offset = "0x59CF38", VA = "0x59CF38")]
		private void PerFrameStateUpdate()
		{
		}

		[Token(Token = "0x6000C4C")]
		[Address(RVA = "0x59E094", Offset = "0x59E094", VA = "0x59E094")]
		public void PracticeButtonPressed()
		{
		}

		[Token(Token = "0x6000C4D")]
		[Address(RVA = "0x59DA24", Offset = "0x59DA24", VA = "0x59DA24")]
		private void MakeAIMove(int player)
		{
		}

		[Token(Token = "0x6000C4E")]
		[Address(RVA = "0x59E1F4", Offset = "0x59E1F4", VA = "0x59E1F4")]
		public void StartOnlineMatch(string opponentName, bool localUserGoesFirst)
		{
		}

		[Token(Token = "0x6000C4F")]
		[Address(RVA = "0x59E24C", Offset = "0x59E24C", VA = "0x59E24C")]
		public void MakeRemoteMove(GamePiece.Piece piece, int x, int y)
		{
		}

		[Token(Token = "0x6000C50")]
		[Address(RVA = "0x59E320", Offset = "0x59E320", VA = "0x59E320")]
		public void MarkRemoteTurnComplete()
		{
		}

		[Token(Token = "0x6000C51")]
		[Address(RVA = "0x59E330", Offset = "0x59E330", VA = "0x59E330")]
		public void RemoteMatchEnded()
		{
		}

		[Token(Token = "0x6000C52")]
		[Address(RVA = "0x59B164", Offset = "0x59B164", VA = "0x59B164")]
		public void StartedLookingAtPiece(GamePiece piece)
		{
		}

		[Token(Token = "0x6000C53")]
		[Address(RVA = "0x59B158", Offset = "0x59B158", VA = "0x59B158")]
		public void StoppedLookingAtPiece()
		{
		}

		[Token(Token = "0x6000C54")]
		[Address(RVA = "0x59B16C", Offset = "0x59B16C", VA = "0x59B16C")]
		public void StartedLookingAtPosition(BoardPosition position)
		{
		}

		[Token(Token = "0x6000C55")]
		[Address(RVA = "0x59B518", Offset = "0x59B518", VA = "0x59B518")]
		public void ClearProposedMove()
		{
		}

		[Token(Token = "0x6000C56")]
		[Address(RVA = "0x59DC4C", Offset = "0x59DC4C", VA = "0x59DC4C")]
		public void TrySelectPiece()
		{
		}

		[Token(Token = "0x6000C57")]
		[Address(RVA = "0x59DDA4", Offset = "0x59DDA4", VA = "0x59DDA4")]
		public void TryPlacePiece()
		{
		}

		[Token(Token = "0x6000C58")]
		[Address(RVA = "0x59E670", Offset = "0x59E670", VA = "0x59E670")]
		public void QuitButtonPressed()
		{
		}

		[Token(Token = "0x6000C59")]
		[Address(RVA = "0x59E678", Offset = "0x59E678", VA = "0x59E678")]
		public void AddPowerballs(uint count)
		{
		}

		[Token(Token = "0x6000C5A")]
		[Address(RVA = "0x59CDB4", Offset = "0x59CDB4", VA = "0x59CDB4")]
		private void UpdateScores()
		{
		}

		[Token(Token = "0x6000C5B")]
		[Address(RVA = "0x59CFF8", Offset = "0x59CFF8", VA = "0x59CFF8")]
		private void UpdateGamePieceColors()
		{
		}

		[Token(Token = "0x6000C5C")]
		[Address(RVA = "0x59E84C", Offset = "0x59E84C", VA = "0x59E84C")]
		public GameController()
		{
		}
	}
	[Token(Token = "0x20001B1")]
	public class GamePiece : MonoBehaviour
	{
		[Token(Token = "0x20002C2")]
		public enum Piece
		{
			[Token(Token = "0x4000FDE")]
			A,
			[Token(Token = "0x4000FDF")]
			B,
			[Token(Token = "0x4000FE0")]
			PowerBall
		}

		[Token(Token = "0x400062C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private Piece m_type;

		[Token(Token = "0x400062D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private GameObject m_prefabA;

		[Token(Token = "0x400062E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private GameObject m_prefabB;

		[Token(Token = "0x400062F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject m_prefabPower;

		[Token(Token = "0x4000630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private BoardPosition m_position;

		[Token(Token = "0x1700010E")]
		public Piece Type
		{
			[Token(Token = "0x6000C5D")]
			[Address(RVA = "0x59E8E4", Offset = "0x59E8E4", VA = "0x59E8E4")]
			get
			{
				return default(Piece);
			}
		}

		[Token(Token = "0x1700010F")]
		public BoardPosition Position
		{
			[Token(Token = "0x6000C5E")]
			[Address(RVA = "0x59E8EC", Offset = "0x59E8EC", VA = "0x59E8EC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C5F")]
			[Address(RVA = "0x59E8F4", Offset = "0x59E8F4", VA = "0x59E8F4")]
			set
			{
			}
		}

		[Token(Token = "0x17000110")]
		public GameObject Prefab
		{
			[Token(Token = "0x6000C60")]
			[Address(RVA = "0x59E1CC", Offset = "0x59E1CC", VA = "0x59E1CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C61")]
		[Address(RVA = "0x59E2FC", Offset = "0x59E2FC", VA = "0x59E2FC")]
		public GameObject PrefabFor(Piece p)
		{
			return null;
		}

		[Token(Token = "0x6000C62")]
		[Address(RVA = "0x59E8FC", Offset = "0x59E8FC", VA = "0x59E8FC")]
		public GamePiece()
		{
		}
	}
	[Token(Token = "0x20001B2")]
	public class IAPManager : MonoBehaviour
	{
		[Token(Token = "0x4000631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private GameController m_gameController;

		[Token(Token = "0x4000632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private Text m_priceText;

		[Token(Token = "0x4000633")]
		private const string CONSUMABLE_1 = "PowerballPack1";

		[Token(Token = "0x6000C63")]
		[Address(RVA = "0x59E904", Offset = "0x59E904", VA = "0x59E904")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C64")]
		[Address(RVA = "0x59E920", Offset = "0x59E920", VA = "0x59E920")]
		public void FetchProductPrices()
		{
		}

		[Token(Token = "0x6000C65")]
		[Address(RVA = "0x59EB4C", Offset = "0x59EB4C", VA = "0x59EB4C")]
		private void GetProductsBySKUCallback(Message<ProductList> msg)
		{
		}

		[Token(Token = "0x6000C66")]
		[Address(RVA = "0x59EA84", Offset = "0x59EA84", VA = "0x59EA84")]
		public void FetchPurchasedProducts()
		{
		}

		[Token(Token = "0x6000C67")]
		[Address(RVA = "0x59F118", Offset = "0x59F118", VA = "0x59F118")]
		private void GetViewerPurchasesCallback(Message<PurchaseList> msg)
		{
		}

		[Token(Token = "0x6000C68")]
		[Address(RVA = "0x59F5F0", Offset = "0x59F5F0", VA = "0x59F5F0")]
		public void BuyPowerBallsPressed()
		{
		}

		[Token(Token = "0x6000C69")]
		[Address(RVA = "0x59F6C8", Offset = "0x59F6C8", VA = "0x59F6C8")]
		private void LaunchCheckoutFlowCallback(Message<Purchase> msg)
		{
		}

		[Token(Token = "0x6000C6A")]
		[Address(RVA = "0x59F7F8", Offset = "0x59F7F8", VA = "0x59F7F8")]
		public IAPManager()
		{
		}
	}
	[Token(Token = "0x20001B3")]
	public class MatchmakingManager : MonoBehaviour
	{
		[Token(Token = "0x20002C3")]
		private enum MatchRoomState
		{
			[Token(Token = "0x4000FE2")]
			None,
			[Token(Token = "0x4000FE3")]
			Queued,
			[Token(Token = "0x4000FE4")]
			Configuring,
			[Token(Token = "0x4000FE5")]
			MyTurn,
			[Token(Token = "0x4000FE6")]
			RemoteTurn
		}

		[Token(Token = "0x4000634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private GameController m_gameController;

		[Token(Token = "0x4000635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private Text m_matchButtonText;

		[Token(Token = "0x4000636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private Text m_infoText;

		[Token(Token = "0x4000637")]
		private const string POOL = "VR_BOARD_GAME_POOL";

		[Token(Token = "0x4000638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ulong m_matchRoom;

		[Token(Token = "0x4000639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private User m_remotePlayer;

		[Token(Token = "0x400063A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float m_lastUpdateTime;

		[Token(Token = "0x400063B")]
		private const float POLL_FREQUENCY = 30f;

		[Token(Token = "0x400063C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private MatchRoomState m_state;

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0x59F800", Offset = "0x59F800", VA = "0x59F800")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C6C")]
		[Address(RVA = "0x59FAF8", Offset = "0x59FAF8", VA = "0x59FAF8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C6D")]
		[Address(RVA = "0x59FC54", Offset = "0x59FC54", VA = "0x59FC54")]
		public void MatchButtonPressed()
		{
		}

		[Token(Token = "0x6000C6E")]
		[Address(RVA = "0x59D7AC", Offset = "0x59D7AC", VA = "0x59D7AC")]
		public void EndMatch(int localScore, int remoteScore)
		{
		}

		[Token(Token = "0x6000C6F")]
		[Address(RVA = "0x59FD48", Offset = "0x59FD48", VA = "0x59FD48")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000C70")]
		[Address(RVA = "0x59F8E0", Offset = "0x59F8E0", VA = "0x59F8E0")]
		private void TransitionToState(MatchRoomState state)
		{
		}

		[Token(Token = "0x6000C71")]
		[Address(RVA = "0x59FD74", Offset = "0x59FD74", VA = "0x59FD74")]
		private void MatchmakingEnqueueCallback(Message untyped_msg)
		{
		}

		[Token(Token = "0x6000C72")]
		[Address(RVA = "0x5A0168", Offset = "0x5A0168", VA = "0x5A0168")]
		private void MatchFoundCallback(Message<Room> msg)
		{
		}

		[Token(Token = "0x6000C73")]
		[Address(RVA = "0x5A0330", Offset = "0x5A0330", VA = "0x5A0330")]
		private void MatchmakingJoinRoomCallback(Message<Room> msg)
		{
		}

		[Token(Token = "0x6000C74")]
		[Address(RVA = "0x5A0DF8", Offset = "0x5A0DF8", VA = "0x5A0DF8")]
		private void MatchmakingRoomUpdateCallback(Message<Room> msg)
		{
		}

		[Token(Token = "0x6000C75")]
		[Address(RVA = "0x5A0770", Offset = "0x5A0770", VA = "0x5A0770")]
		private void ProcessRoomData(Room room)
		{
		}

		[Token(Token = "0x6000C76")]
		[Address(RVA = "0x5A1380", Offset = "0x5A1380", VA = "0x5A1380")]
		private void ProcessRemoteMove(string moveString)
		{
		}

		[Token(Token = "0x6000C77")]
		[Address(RVA = "0x59E3AC", Offset = "0x59E3AC", VA = "0x59E3AC")]
		public void SendLocalMove(GamePiece.Piece piece, int boardX, int boardY)
		{
		}

		[Token(Token = "0x6000C78")]
		[Address(RVA = "0x5A1634", Offset = "0x5A1634", VA = "0x5A1634")]
		private void UpdateDataStoreCallback(Message<Room> msg)
		{
		}

		[Token(Token = "0x6000C79")]
		[Address(RVA = "0x5A131C", Offset = "0x5A131C", VA = "0x5A131C")]
		private bool DoesLocalUserGoFirst()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0x5A1684", Offset = "0x5A1684", VA = "0x5A1684")]
		private void GenericErrorCheckCallback(Message msg)
		{
		}

		[Token(Token = "0x6000C7B")]
		[Address(RVA = "0x5A1778", Offset = "0x5A1778", VA = "0x5A1778")]
		public MatchmakingManager()
		{
		}
	}
	[Token(Token = "0x20001B4")]
	public class PlatformManager : MonoBehaviour
	{
		[Token(Token = "0x400063D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static PlatformManager s_instance;

		[Token(Token = "0x400063E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ulong m_myID;

		[Token(Token = "0x400063F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string m_myOculusID;

		[Token(Token = "0x17000111")]
		public static ulong MyID
		{
			[Token(Token = "0x6000C81")]
			[Address(RVA = "0x59FC68", Offset = "0x59FC68", VA = "0x59FC68")]
			get
			{
				return default(ulong);
			}
		}

		[Token(Token = "0x17000112")]
		public static string MyOculusID
		{
			[Token(Token = "0x6000C82")]
			[Address(RVA = "0x59E72C", Offset = "0x59E72C", VA = "0x59E72C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C7C")]
		[Address(RVA = "0x5A1780", Offset = "0x5A1780", VA = "0x5A1780")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000C7D")]
		[Address(RVA = "0x5A190C", Offset = "0x5A190C", VA = "0x5A190C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C7E")]
		[Address(RVA = "0x5A19BC", Offset = "0x5A19BC", VA = "0x5A19BC")]
		private void IsEntitledCallback(Message msg)
		{
		}

		[Token(Token = "0x6000C7F")]
		[Address(RVA = "0x5A1C38", Offset = "0x5A1C38", VA = "0x5A1C38")]
		private void GetLoggedInUserCallback(Message<User> msg)
		{
		}

		[Token(Token = "0x6000C80")]
		[Address(RVA = "0x59F034", Offset = "0x59F034", VA = "0x59F034")]
		public static void TerminateWithError(Message msg)
		{
		}

		[Token(Token = "0x6000C83")]
		[Address(RVA = "0x5A1D54", Offset = "0x5A1D54", VA = "0x5A1D54")]
		public PlatformManager()
		{
		}
	}
}
namespace Oculus.Platform.Samples.SimplePlatformSample
{
	[Token(Token = "0x20001B5")]
	public class DataEntry : MonoBehaviour
	{
		[Token(Token = "0x4000640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Text dataOutput;

		[Token(Token = "0x6000C84")]
		[Address(RVA = "0x5DE348", Offset = "0x5DE348", VA = "0x5DE348")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C85")]
		[Address(RVA = "0x5DE478", Offset = "0x5DE478", VA = "0x5DE478")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C86")]
		[Address(RVA = "0x5DE588", Offset = "0x5DE588", VA = "0x5DE588")]
		private void SubmitCommand(string command)
		{
		}

		[Token(Token = "0x6000C87")]
		[Address(RVA = "0x5E06C4", Offset = "0x5E06C4", VA = "0x5E06C4")]
		private void getLeaderboardEntries(string leaderboardName)
		{
		}

		[Token(Token = "0x6000C88")]
		[Address(RVA = "0x5E0568", Offset = "0x5E0568", VA = "0x5E0568")]
		private void writeLeaderboardEntry(string leaderboardName, string value)
		{
		}

		[Token(Token = "0x6000C89")]
		[Address(RVA = "0x5E0490", Offset = "0x5E0490", VA = "0x5E0490")]
		private void addFieldsAchievement(string achievementName, string fields)
		{
		}

		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0x5E0370", Offset = "0x5E0370", VA = "0x5E0370")]
		private void addCountAchievement(string achievementName, string count)
		{
		}

		[Token(Token = "0x6000C8B")]
		[Address(RVA = "0x5E02A0", Offset = "0x5E02A0", VA = "0x5E02A0")]
		private void unlockAchievement(string achievementName)
		{
		}

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0x5E0154", Offset = "0x5E0154", VA = "0x5E0154")]
		private void getAchievementProgress(string achievementName)
		{
		}

		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0x5E0008", Offset = "0x5E0008", VA = "0x5E0008")]
		private void getAchievementDefinition(string achievementName)
		{
		}

		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0x5DE3D0", Offset = "0x5DE3D0", VA = "0x5DE3D0")]
		private void checkEntitlement()
		{
		}

		[Token(Token = "0x6000C8F")]
		[Address(RVA = "0x5DFF28", Offset = "0x5DFF28", VA = "0x5DFF28")]
		private void getUserNonce()
		{
		}

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0x5DEDCC", Offset = "0x5DEDCC", VA = "0x5DEDCC")]
		private void createAndJoinPrivateRoom(string joinPolicy, string maxUsers)
		{
		}

		[Token(Token = "0x6000C91")]
		[Address(RVA = "0x5DEF04", Offset = "0x5DEF04", VA = "0x5DEF04")]
		private void getCurrentRoom()
		{
		}

		[Token(Token = "0x6000C92")]
		[Address(RVA = "0x5DEFE0", Offset = "0x5DEFE0", VA = "0x5DEFE0")]
		private void getRoom(string roomID)
		{
		}

		[Token(Token = "0x6000C93")]
		[Address(RVA = "0x5DF108", Offset = "0x5DF108", VA = "0x5DF108")]
		private void joinRoom(string roomID)
		{
		}

		[Token(Token = "0x6000C94")]
		[Address(RVA = "0x5DF234", Offset = "0x5DF234", VA = "0x5DF234")]
		private void leaveRoom(string roomID)
		{
		}

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0x5DF35C", Offset = "0x5DF35C", VA = "0x5DF35C")]
		private void kickUser(string roomID, string userID)
		{
		}

		[Token(Token = "0x6000C96")]
		[Address(RVA = "0x5DF4D4", Offset = "0x5DF4D4", VA = "0x5DF4D4")]
		private void getLoggedInUser()
		{
		}

		[Token(Token = "0x6000C97")]
		[Address(RVA = "0x5DF5B4", Offset = "0x5DF5B4", VA = "0x5DF5B4")]
		private void getUser(string userID)
		{
		}

		[Token(Token = "0x6000C98")]
		[Address(RVA = "0x5DF6E0", Offset = "0x5DF6E0", VA = "0x5DF6E0")]
		private void getLoggedInFriends()
		{
		}

		[Token(Token = "0x6000C99")]
		[Address(RVA = "0x5DF7C0", Offset = "0x5DF7C0", VA = "0x5DF7C0")]
		private void getInvitableUsers()
		{
		}

		[Token(Token = "0x6000C9A")]
		[Address(RVA = "0x5DF89C", Offset = "0x5DF89C", VA = "0x5DF89C")]
		private void inviteUser(string roomID, string inviteToken)
		{
		}

		[Token(Token = "0x6000C9B")]
		[Address(RVA = "0x5DF9EC", Offset = "0x5DF9EC", VA = "0x5DF9EC")]
		private void setRoomDescription(string roomID, string description)
		{
		}

		[Token(Token = "0x6000C9C")]
		[Address(RVA = "0x5DFB3C", Offset = "0x5DFB3C", VA = "0x5DFB3C")]
		private void updateRoomDataStore(string roomID, string key, string value)
		{
		}

		[Token(Token = "0x6000C9D")]
		[Address(RVA = "0x5E07A4", Offset = "0x5E07A4", VA = "0x5E07A4")]
		private void printOutputLine(string newLine)
		{
		}

		[Token(Token = "0x6000C9E")]
		[Address(RVA = "0x5E0888", Offset = "0x5E0888", VA = "0x5E0888")]
		private void outputRoomDetails(Room room)
		{
		}

		[Token(Token = "0x6000C9F")]
		[Address(RVA = "0x5E1130", Offset = "0x5E1130", VA = "0x5E1130")]
		private void outputUserArray(UserList users)
		{
		}

		[Token(Token = "0x6000CA0")]
		[Address(RVA = "0x5E179C", Offset = "0x5E179C", VA = "0x5E179C")]
		private void userProofCallback(Message<UserProof> msg)
		{
		}

		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0x5E18B0", Offset = "0x5E18B0", VA = "0x5E18B0")]
		private void getEntitlementCallback(Message msg)
		{
		}

		[Token(Token = "0x6000CA2")]
		[Address(RVA = "0x5E1944", Offset = "0x5E1944", VA = "0x5E1944")]
		private void leaderboardGetCallback(Message<LeaderboardEntryList> msg)
		{
		}

		[Token(Token = "0x6000CA3")]
		[Address(RVA = "0x5E2084", Offset = "0x5E2084", VA = "0x5E2084")]
		private void leaderboardWriteCallback(Message msg)
		{
		}

		[Token(Token = "0x6000CA4")]
		[Address(RVA = "0x5E2238", Offset = "0x5E2238", VA = "0x5E2238")]
		private void achievementFieldsCallback(Message msg)
		{
		}

		[Token(Token = "0x6000CA5")]
		[Address(RVA = "0x5E2320", Offset = "0x5E2320", VA = "0x5E2320")]
		private void achievementCountCallback(Message msg)
		{
		}

		[Token(Token = "0x6000CA6")]
		[Address(RVA = "0x5E2408", Offset = "0x5E2408", VA = "0x5E2408")]
		private void achievementUnlockCallback(Message msg)
		{
		}

		[Token(Token = "0x6000CA7")]
		[Address(RVA = "0x5E24F0", Offset = "0x5E24F0", VA = "0x5E24F0")]
		private void achievementProgressCallback(Message<AchievementProgressList> msg)
		{
		}

		[Token(Token = "0x6000CA8")]
		[Address(RVA = "0x5E296C", Offset = "0x5E296C", VA = "0x5E296C")]
		private void achievementDefinitionCallback(Message<AchievementDefinitionList> msg)
		{
		}

		[Token(Token = "0x6000CA9")]
		[Address(RVA = "0x5E2E84", Offset = "0x5E2E84", VA = "0x5E2E84")]
		private void createAndJoinPrivateRoomCallback(Message<Room> msg)
		{
		}

		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0x5E2F80", Offset = "0x5E2F80", VA = "0x5E2F80")]
		private void getCurrentRoomCallback(Message<Room> msg)
		{
		}

		[Token(Token = "0x6000CAB")]
		[Address(RVA = "0x5E307C", Offset = "0x5E307C", VA = "0x5E307C")]
		private void joinRoomCallback(Message<Room> msg)
		{
		}

		[Token(Token = "0x6000CAC")]
		[Address(RVA = "0x5E3178", Offset = "0x5E3178", VA = "0x5E3178")]
		private void leaveRoomCallback(Message<Room> msg)
		{
		}

		[Token(Token = "0x6000CAD")]
		[Address(RVA = "0x5E3274", Offset = "0x5E3274", VA = "0x5E3274")]
		private void getUserCallback(Message<User> msg)
		{
		}

		[Token(Token = "0x6000CAE")]
		[Address(RVA = "0x5E36E8", Offset = "0x5E36E8", VA = "0x5E36E8")]
		private void getFriendsCallback(Message<UserList> msg)
		{
		}

		[Token(Token = "0x6000CAF")]
		[Address(RVA = "0x5E37E4", Offset = "0x5E37E4", VA = "0x5E37E4")]
		private void getInvitableUsersCallback(Message<UserList> msg)
		{
		}

		[Token(Token = "0x6000CB0")]
		[Address(RVA = "0x5E38E0", Offset = "0x5E38E0", VA = "0x5E38E0")]
		private void inviteUserCallback(Message msg)
		{
		}

		[Token(Token = "0x6000CB1")]
		[Address(RVA = "0x5E39C8", Offset = "0x5E39C8", VA = "0x5E39C8")]
		public DataEntry()
		{
		}
	}
}
namespace Oculus.Platform.Samples.NetChat
{
	[Token(Token = "0x20001B6")]
	internal enum states
	{
		[Token(Token = "0x4000642")]
		NOT_INIT,
		[Token(Token = "0x4000643")]
		IDLE,
		[Token(Token = "0x4000644")]
		REQUEST_FIND,
		[Token(Token = "0x4000645")]
		FINDING_ROOM,
		[Token(Token = "0x4000646")]
		REQUEST_CREATE,
		[Token(Token = "0x4000647")]
		REQUEST_JOIN,
		[Token(Token = "0x4000648")]
		REQUEST_LEAVE,
		[Token(Token = "0x4000649")]
		IN_EMPTY_ROOM,
		[Token(Token = "0x400064A")]
		IN_FULL_ROOM
	}
	[Token(Token = "0x20001B7")]
	public static class Constants
	{
		[Token(Token = "0x400064B")]
		public const int BUFFER_SIZE = 512;

		[Token(Token = "0x400064C")]
		public const string BOUT_POOL = "bout_pool";

		[Token(Token = "0x400064D")]
		public const string FILTER_POOL = "filter_pool";
	}
	[Token(Token = "0x20001B8")]
	public class chatPacket
	{
		[Token(Token = "0x400064E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x245A24", Offset = "0x245A24")]
		private int <packetID>k__BackingField;

		[Token(Token = "0x400064F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x245A34", Offset = "0x245A34")]
		private string <textString>k__BackingField;

		[Token(Token = "0x17000113")]
		public int packetID
		{
			[Token(Token = "0x6000CB2")]
			[Address(RVA = "0x5DE328", Offset = "0x5DE328", VA = "0x5DE328")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249020", Offset = "0x249020")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000CB3")]
			[Address(RVA = "0x5DE330", Offset = "0x5DE330", VA = "0x5DE330")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249030", Offset = "0x249030")]
			set
			{
			}
		}

		[Token(Token = "0x17000114")]
		public string textString
		{
			[Token(Token = "0x6000CB4")]
			[Address(RVA = "0x5DE338", Offset = "0x5DE338", VA = "0x5DE338")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249040", Offset = "0x249040")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CB5")]
			[Address(RVA = "0x5DE340", Offset = "0x5DE340", VA = "0x5DE340")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249050", Offset = "0x249050")]
			set
			{
			}
		}

		[Token(Token = "0x6000CB6")]
		[Address(RVA = "0x5DD920", Offset = "0x5DD920", VA = "0x5DD920")]
		public byte[] Serialize()
		{
			return null;
		}

		[Token(Token = "0x6000CB7")]
		[Address(RVA = "0x5DDD08", Offset = "0x5DDD08", VA = "0x5DDD08")]
		public static chatPacket Deserialize(byte[] data)
		{
			return null;
		}

		[Token(Token = "0x6000CB8")]
		[Address(RVA = "0x5DD918", Offset = "0x5DD918", VA = "0x5DD918")]
		public chatPacket()
		{
		}
	}
	[Token(Token = "0x20001B9")]
	public class DataEntry : MonoBehaviour
	{
		[Token(Token = "0x4000650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Text dataOutput;

		[Token(Token = "0x4000651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private states currentState;

		[Token(Token = "0x4000652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private User localUser;

		[Token(Token = "0x4000653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private User remoteUser;

		[Token(Token = "0x4000654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Room currentRoom;

		[Token(Token = "0x4000655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int lastPacketID;

		[Token(Token = "0x4000656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool ratedMatchStarted;

		[Token(Token = "0x6000CB9")]
		[Address(RVA = "0x5DADA8", Offset = "0x5DADA8", VA = "0x5DADA8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CBA")]
		[Address(RVA = "0x5DAF70", Offset = "0x5DAF70", VA = "0x5DAF70")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CBB")]
		[Address(RVA = "0x5DB088", Offset = "0x5DB088", VA = "0x5DB088")]
		private void SubmitCommand(string command)
		{
		}

		[Token(Token = "0x6000CBC")]
		[Address(RVA = "0x5DC96C", Offset = "0x5DC96C", VA = "0x5DC96C")]
		private void printOutputLine(string newLine)
		{
		}

		[Token(Token = "0x6000CBD")]
		[Address(RVA = "0x5DAEC8", Offset = "0x5DAEC8", VA = "0x5DAEC8")]
		private void checkEntitlement()
		{
		}

		[Token(Token = "0x6000CBE")]
		[Address(RVA = "0x5DCA50", Offset = "0x5DCA50", VA = "0x5DCA50")]
		private void getEntitlementCallback(Message msg)
		{
		}

		[Token(Token = "0x6000CBF")]
		[Address(RVA = "0x5DCB6C", Offset = "0x5DCB6C", VA = "0x5DCB6C")]
		private void init(Message<User> msg)
		{
		}

		[Token(Token = "0x6000CC0")]
		[Address(RVA = "0x5DB5D0", Offset = "0x5DB5D0", VA = "0x5DB5D0")]
		private void requestCreateRoom()
		{
		}

		[Token(Token = "0x6000CC1")]
		[Address(RVA = "0x5DCCD4", Offset = "0x5DCCD4", VA = "0x5DCCD4")]
		private void createRoomResponse(Message<MatchmakingEnqueueResultAndRoom> msg)
		{
		}

		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0x5DB7B8", Offset = "0x5DB7B8", VA = "0x5DB7B8")]
		private void requestCreateFilterRoom()
		{
		}

		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0x5DBCB0", Offset = "0x5DBCB0", VA = "0x5DBCB0")]
		private void requestFindRoom()
		{
		}

		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0x5DBE84", Offset = "0x5DBE84", VA = "0x5DBE84")]
		private void requestFindFilteredRoom()
		{
		}

		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0x5DCE64", Offset = "0x5DCE64", VA = "0x5DCE64")]
		private void foundMatch(Message<Room> msg)
		{
		}

		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0x5DCFF4", Offset = "0x5DCFF4", VA = "0x5DCFF4")]
		private void joinRoomResponse(Message<Room> msg)
		{
		}

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0x5DBADC", Offset = "0x5DBADC", VA = "0x5DBADC")]
		private void requestFindMatch()
		{
		}

		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0x5DD3E0", Offset = "0x5DD3E0", VA = "0x5DD3E0")]
		private void searchingStarted(Message msg)
		{
		}

		[Token(Token = "0x6000CC9")]
		[Address(RVA = "0x5DD4D8", Offset = "0x5DD4D8", VA = "0x5DD4D8")]
		private void updateRoom(Message<Room> msg)
		{
		}

		[Token(Token = "0x6000CCA")]
		[Address(RVA = "0x5DC320", Offset = "0x5DC320", VA = "0x5DC320")]
		private void sendChat(string chatMessage)
		{
		}

		[Token(Token = "0x6000CCB")]
		[Address(RVA = "0x5DB3FC", Offset = "0x5DB3FC", VA = "0x5DB3FC")]
		private void processNetPackets()
		{
		}

		[Token(Token = "0x6000CCC")]
		[Address(RVA = "0x5DC464", Offset = "0x5DC464", VA = "0x5DC464")]
		private void requestLeaveRoom()
		{
		}

		[Token(Token = "0x6000CCD")]
		[Address(RVA = "0x5DE03C", Offset = "0x5DE03C", VA = "0x5DE03C")]
		private void leaveRoomResponse(Message<Room> msg)
		{
		}

		[Token(Token = "0x6000CCE")]
		[Address(RVA = "0x5DC5E4", Offset = "0x5DC5E4", VA = "0x5DC5E4")]
		private void requestStartRatedMatch()
		{
		}

		[Token(Token = "0x6000CCF")]
		[Address(RVA = "0x5DE140", Offset = "0x5DE140", VA = "0x5DE140")]
		private void startRatedMatchResponse(Message msg)
		{
		}

		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0x5DC718", Offset = "0x5DC718", VA = "0x5DC718")]
		private void requestReportResults()
		{
		}

		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0x5DE238", Offset = "0x5DE238", VA = "0x5DE238")]
		private void reportResultsResponse(Message msg)
		{
		}

		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0x5DE320", Offset = "0x5DE320", VA = "0x5DE320")]
		public DataEntry()
		{
		}
	}
}
namespace Oculus.Platform.Samples.EntitlementCheck
{
	[Token(Token = "0x20001BA")]
	public class EntitlementCheck : MonoBehaviour
	{
		[Token(Token = "0x4000657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool exitAppOnFailure;

		[Token(Token = "0x14000002")]
		public static event Action UserFailedEntitlementCheck
		{
			[Token(Token = "0x6000CD3")]
			[Address(RVA = "0x5DA4DC", Offset = "0x5DA4DC", VA = "0x5DA4DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249060", Offset = "0x249060")]
			add
			{
			}
			[Token(Token = "0x6000CD4")]
			[Address(RVA = "0x5DA5B4", Offset = "0x5DA5B4", VA = "0x5DA5B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249070", Offset = "0x249070")]
			remove
			{
			}
		}

		[Token(Token = "0x14000003")]
		public static event Action UserPassedEntitlementCheck
		{
			[Token(Token = "0x6000CD5")]
			[Address(RVA = "0x5DA68C", Offset = "0x5DA68C", VA = "0x5DA68C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249080", Offset = "0x249080")]
			add
			{
			}
			[Token(Token = "0x6000CD6")]
			[Address(RVA = "0x5DA768", Offset = "0x5DA768", VA = "0x5DA768")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249090", Offset = "0x249090")]
			remove
			{
			}
		}

		[Token(Token = "0x6000CD7")]
		[Address(RVA = "0x5DA844", Offset = "0x5DA844", VA = "0x5DA844")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CD8")]
		[Address(RVA = "0x5DAD5C", Offset = "0x5DAD5C", VA = "0x5DAD5C")]
		private void EntitlementCheckCallback(Message msg)
		{
		}

		[Token(Token = "0x6000CD9")]
		[Address(RVA = "0x5DAA5C", Offset = "0x5DAA5C", VA = "0x5DAA5C")]
		private void HandleEntitlementCheckResult(bool result)
		{
		}

		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0x5DAD98", Offset = "0x5DAD98", VA = "0x5DAD98")]
		public EntitlementCheck()
		{
		}
	}
}
namespace FSG.MeshAnimator
{
	[Token(Token = "0x20001BB")]
	[AttributeAttribute(Name = "ExecuteInEditMode", RVA = "0x241444", Offset = "0x241444")]
	public class AttachObjectToFace : MonoBehaviour
	{
		[Token(Token = "0x400065A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public MeshAnimator meshAnimator;

		[Token(Token = "0x400065B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int faceIndex;

		[Token(Token = "0x400065C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector3 offset;

		[Token(Token = "0x400065D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 rotationOffset;

		[Token(Token = "0x400065E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool drawFaceDebugInfo;

		[Token(Token = "0x400065F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color debugColor;

		[Token(Token = "0x4000660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform mTransform;

		[Token(Token = "0x4000661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Transform mMeshAnimatorTransform;

		[Token(Token = "0x4000662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int[] triangles;

		[Token(Token = "0x4000663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3[] vertices;

		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0x5001F8", Offset = "0x5001F8", VA = "0x5001F8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000CDC")]
		[Address(RVA = "0x50039C", Offset = "0x50039C", VA = "0x50039C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0x501484", Offset = "0x501484", VA = "0x501484")]
		public AttachObjectToFace()
		{
		}
	}
	[Token(Token = "0x20001BC")]
	public class MecanimMeshAnimatorController : MonoBehaviour
	{
		[Token(Token = "0x4000664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Animator animator;

		[Token(Token = "0x4000665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MeshAnimator meshAnimator;

		[Token(Token = "0x4000666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool crossFade;

		[Token(Token = "0x4000667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<int, string> animHashes;

		[Token(Token = "0x4000668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private string cAnim;

		[Token(Token = "0x6000CDE")]
		[Address(RVA = "0x5037C0", Offset = "0x5037C0", VA = "0x5037C0", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000CDF")]
		[Address(RVA = "0x503A24", Offset = "0x503A24", VA = "0x503A24", Slot = "5")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6000CE0")]
		[Address(RVA = "0x503CCC", Offset = "0x503CCC", VA = "0x503CCC")]
		public MecanimMeshAnimatorController()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001BD")]
	public class MeshAnimation : ScriptableObject
	{
		[Token(Token = "0x20002C4")]
		public enum RootMotionMode
		{
			[Token(Token = "0x4000FE8")]
			None,
			[Token(Token = "0x4000FE9")]
			Baked,
			[Token(Token = "0x4000FEA")]
			AppliedToTransform
		}

		[Token(Token = "0x20002C5")]
		private sealed class VertexEntry
		{
			[Token(Token = "0x4000FEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int _reserved;

			[Token(Token = "0x4000FEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int[] TriangleIndex;

			[Token(Token = "0x4000FED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int[] VertexIndex;

			[Token(Token = "0x4000FEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private int _count;

			[Token(Token = "0x170001CF")]
			public int Count
			{
				[Token(Token = "0x600146D")]
				[Address(RVA = "0x507CB0", Offset = "0x507CB0", VA = "0x507CB0")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x600146E")]
			[Address(RVA = "0x507CB8", Offset = "0x507CB8", VA = "0x507CB8")]
			public VertexEntry()
			{
			}

			[Token(Token = "0x600146F")]
			[Address(RVA = "0x507598", Offset = "0x507598", VA = "0x507598")]
			public void Add(int vertIndex, int triIndex)
			{
			}

			[Token(Token = "0x6001470")]
			[Address(RVA = "0x5074EC", Offset = "0x5074EC", VA = "0x5074EC")]
			public void PopulateArrays()
			{
			}

			[Token(Token = "0x6001471")]
			[Address(RVA = "0x5076BC", Offset = "0x5076BC", VA = "0x5076BC")]
			public void Clear()
			{
			}
		}

		[Token(Token = "0x20002C6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2418BC", Offset = "0x2418BC")]
		private sealed class <>c__DisplayClass37_0
		{
			[Token(Token = "0x4000FEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public MeshAnimation <>4__this;

			[Token(Token = "0x4000FF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Mesh mesh;

			[Token(Token = "0x4000FF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float angle;

			[Token(Token = "0x6001472")]
			[Address(RVA = "0x5074D4", Offset = "0x5074D4", VA = "0x5074D4")]
			public <>c__DisplayClass37_0()
			{
			}
		}

		[Token(Token = "0x20002C7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2418CC", Offset = "0x2418CC")]
		private sealed class <>c__DisplayClass37_1
		{
			[Token(Token = "0x4000FF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int[] triangles;

			[Token(Token = "0x4000FF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3[] vertices;

			[Token(Token = "0x4000FF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public <>c__DisplayClass37_0 CS$<>8__locals1;

			[Token(Token = "0x6001473")]
			[Address(RVA = "0x5074DC", Offset = "0x5074DC", VA = "0x5074DC")]
			public <>c__DisplayClass37_1()
			{
			}

			[Token(Token = "0x6001474")]
			[Address(RVA = "0x507AC8", Offset = "0x507AC8", VA = "0x507AC8")]
			internal void <RecalculateNormals>b__0(object <p0>)
			{
			}
		}

		[Token(Token = "0x20002C8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2418DC", Offset = "0x2418DC")]
		private sealed class <>c__DisplayClass38_0
		{
			[Token(Token = "0x4000FF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Mesh mesh;

			[Token(Token = "0x4000FF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3[] normals;

			[Token(Token = "0x6001475")]
			[Address(RVA = "0x5074E4", Offset = "0x5074E4", VA = "0x5074E4")]
			public <>c__DisplayClass38_0()
			{
			}

			[Token(Token = "0x6001476")]
			[Address(RVA = "0x507BA4", Offset = "0x507BA4", VA = "0x507BA4")]
			internal void <RecalculateNormals>b__0()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002C9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2418EC", Offset = "0x2418EC")]
		private sealed class <>c
		{
			[Token(Token = "0x4000FF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x6001478")]
			[Address(RVA = "0x507A48", Offset = "0x507A48", VA = "0x507A48")]
			public <>c()
			{
			}

			[Token(Token = "0x6001479")]
			[Address(RVA = "0x507A50", Offset = "0x507A50", VA = "0x507A50")]
			internal bool <.cctor>b__42_0(Vector3 x, Vector3 y)
			{
				return default(bool);
			}

			[Token(Token = "0x600147A")]
			[Address(RVA = "0x507AA4", Offset = "0x507AA4", VA = "0x507AA4")]
			internal int <.cctor>b__42_1(Vector3 x)
			{
				return default(int);
			}
		}

		[Token(Token = "0x4000669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static Dictionary<Mesh, Dictionary<MeshAnimation, Mesh[]>> generatedFrames;

		[Token(Token = "0x400066A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string animationName;

		[Token(Token = "0x400066B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool preGenerateFrames;

		[Token(Token = "0x400066C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float playbackSpeed;

		[Token(Token = "0x400066D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int smoothNormalsAngle;

		[Token(Token = "0x400066E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool instantNormalCalculation;

		[Token(Token = "0x400066F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool recalculateNormalsOnRotation;

		[Token(Token = "0x4000670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WrapMode wrapMode;

		[Token(Token = "0x4000671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x245A64", Offset = "0x245A64")]
		public RootMotionMode rootMotionMode;

		[Token(Token = "0x4000672")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x245A74", Offset = "0x245A74")]
		public DeltaCompressedFrameData compressedFrameData;

		[Token(Token = "0x4000673")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x245A84", Offset = "0x245A84")]
		public string[] exposedTransforms;

		[Token(Token = "0x4000674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public MeshAnimationEvent[] events;

		[Token(Token = "0x4000675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float length;

		[Token(Token = "0x4000676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x245A94", Offset = "0x245A94")]
		public int frameSkip;

		[NonSerialized]
		[Token(Token = "0x4000677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Mesh[] frames;

		[NonSerialized]
		[Token(Token = "0x4000678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int totalFrames;

		[NonSerialized]
		[Token(Token = "0x4000679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool[] generatedMeshes;

		[NonSerialized]
		[Token(Token = "0x400067A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool completelyGenerated;

		[NonSerialized]
		[Token(Token = "0x400067B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private MeshFrameData[] decompressedFrameData;

		[NonSerialized]
		[Token(Token = "0x400067C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion lastRotation;

		[Token(Token = "0x400067D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Queue<Action> mainThreadActions;

		[Token(Token = "0x400067E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Dictionary<Mesh, KeyValuePair<int[], Vector3[]>> meshInfoCache;

		[Token(Token = "0x400067F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static IEqualityComparer<Vector3> VectorComparer;

		[Token(Token = "0x17000115")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x24ACD4", Offset = "0x24ACD4")]
		public MeshFrameData[] frameData
		{
			[Token(Token = "0x6000CE1")]
			[Address(RVA = "0x503D74", Offset = "0x503D74", VA = "0x503D74")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CE2")]
		[Address(RVA = "0x503E34", Offset = "0x503E34", VA = "0x503E34")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0x503EEC", Offset = "0x503EEC", VA = "0x503EEC")]
		public void GenerateFrames(Mesh baseMesh)
		{
		}

		[Token(Token = "0x6000CE4")]
		[Address(RVA = "0x504A38", Offset = "0x504A38", VA = "0x504A38")]
		public void GenerateFrameIfNeeded(Mesh baseMesh, int frame)
		{
		}

		[Token(Token = "0x6000CE5")]
		[Address(RVA = "0x500F00", Offset = "0x500F00", VA = "0x500F00")]
		public Vector3[] GetFrame(int frame)
		{
			return null;
		}

		[Token(Token = "0x6000CE6")]
		[Address(RVA = "0x505170", Offset = "0x505170", VA = "0x505170")]
		public float GetInterpolatingFrames(int frame, out MeshFrameData previousFrame, out MeshFrameData nextFrame)
		{
			return default(float);
		}

		[Token(Token = "0x6000CE7")]
		[Address(RVA = "0x50550C", Offset = "0x50550C", VA = "0x50550C")]
		public MeshFrameData GetNearestFrame(int frame)
		{
			return null;
		}

		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0x50568C", Offset = "0x50568C", VA = "0x50568C")]
		public void DisplayFrame(MeshFilter meshFilter, int frame, int previousFrame)
		{
		}

		[Token(Token = "0x6000CE9")]
		[Address(RVA = "0x506CC8", Offset = "0x506CC8", VA = "0x506CC8")]
		public void FireEvents(GameObject eventReciever, int frame)
		{
		}

		[Token(Token = "0x6000CEA")]
		[Address(RVA = "0x506ED0", Offset = "0x506ED0", VA = "0x506ED0")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000CEB")]
		[Address(RVA = "0x50708C", Offset = "0x50708C", VA = "0x50708C")]
		public bool IsName(string animationName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CEC")]
		[Address(RVA = "0x5050A0", Offset = "0x5050A0", VA = "0x5050A0")]
		private void CheckFullGeneration(int newFrame)
		{
		}

		[Token(Token = "0x6000CED")]
		[Address(RVA = "0x50432C", Offset = "0x50432C", VA = "0x50432C")]
		private Mesh GenerateFrame(Mesh baseMesh, int frame)
		{
			return null;
		}

		[Token(Token = "0x6000CEE")]
		[Address(RVA = "0x5070F8", Offset = "0x5070F8", VA = "0x5070F8")]
		private void RecalculateNormals(Mesh mesh, float angle)
		{
		}

		[Token(Token = "0x6000CEF")]
		[Address(RVA = "0x505894", Offset = "0x505894", VA = "0x505894")]
		private void RecalculateNormals(Mesh mesh, float angle, int[] triangles, Vector3[] vertices, bool instant = false)
		{
		}

		[Token(Token = "0x6000CF0")]
		[Address(RVA = "0x507774", Offset = "0x507774", VA = "0x507774")]
		public MeshAnimation()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001BE")]
	public class MeshAnimationEvent
	{
		[Token(Token = "0x20002CA")]
		public enum Mode : byte
		{
			[Token(Token = "0x4000FF9")]
			Data,
			[Token(Token = "0x4000FFA")]
			String,
			[Token(Token = "0x4000FFB")]
			Float
		}

		[Token(Token = "0x4000680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string methodName;

		[Token(Token = "0x4000681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int frame;

		[Token(Token = "0x4000682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Mode eventType;

		[Token(Token = "0x4000683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public string stringValue;

		[Token(Token = "0x4000684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float floatValue;

		[Token(Token = "0x4000685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public UnityEngine.Object data;

		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0x506DB0", Offset = "0x506DB0", VA = "0x506DB0")]
		public void FireEvent(GameObject eventReciever)
		{
		}

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0x507CC8", Offset = "0x507CC8", VA = "0x507CC8")]
		public MeshAnimationEvent()
		{
		}
	}
	[Token(Token = "0x20001BF")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x241454", Offset = "0x241454")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x241454", Offset = "0x241454")]
	public class MeshAnimator : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20002CB")]
		public class MeshAnimatorLODLevel
		{
			[Token(Token = "0x4000FFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int fps;

			[Token(Token = "0x4000FFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public float distance;

			[Token(Token = "0x4000FFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float distanceSquared;

			[Token(Token = "0x600147B")]
			[Address(RVA = "0x50DF2C", Offset = "0x50DF2C", VA = "0x50DF2C")]
			public MeshAnimatorLODLevel()
			{
			}
		}

		[Token(Token = "0x20002CC")]
		private struct CurrentCrossFade
		{
			[Token(Token = "0x4000FFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public MeshFrameData fromFrame;

			[Token(Token = "0x4001000")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public MeshFrameData toFrame;

			[Token(Token = "0x4001001")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int framesNeeded;

			[Token(Token = "0x4001002")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int currentFrame;

			[Token(Token = "0x4001003")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int generatedFrame;

			[Token(Token = "0x4001004")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public bool isFading;

			[Token(Token = "0x4001005")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float endTime;

			[Token(Token = "0x4001006")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public CrossFadeFrameData frame;

			[Token(Token = "0x600147C")]
			[Address(RVA = "0x2C1760", Offset = "0x2C1760", VA = "0x2C1760")]
			public void Reset()
			{
			}

			[Token(Token = "0x600147D")]
			[Address(RVA = "0x2C1788", Offset = "0x2C1788", VA = "0x2C1788")]
			public void PopulateFrame(int length)
			{
			}

			[Token(Token = "0x600147E")]
			[Address(RVA = "0x2C1790", Offset = "0x2C1790", VA = "0x2C1790")]
			public void ReturnFrame()
			{
			}
		}

		[Token(Token = "0x20002CD")]
		private class CrossFadeFrameData
		{
			[Token(Token = "0x4001007")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Vector3[] positions;

			[Token(Token = "0x4001008")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3[] normals;

			[Token(Token = "0x4001009")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Bounds bounds;

			[Token(Token = "0x600147F")]
			[Address(RVA = "0x50DF24", Offset = "0x50DF24", VA = "0x50DF24")]
			public CrossFadeFrameData()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002CE")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2418FC", Offset = "0x2418FC")]
		private sealed class <>c
		{
			[Token(Token = "0x400100A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400100B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public static Action<string> <>9__80_0;

			[Token(Token = "0x400100C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Action <>9__80_1;

			[Token(Token = "0x400100D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public static Action<bool> <>9__80_2;

			[Token(Token = "0x6001481")]
			[Address(RVA = "0x50DF10", Offset = "0x50DF10", VA = "0x50DF10")]
			public <>c()
			{
			}

			[Token(Token = "0x6001482")]
			[Address(RVA = "0x50DF18", Offset = "0x50DF18", VA = "0x50DF18")]
			internal void <.ctor>b__80_0(string <p0>)
			{
			}

			[Token(Token = "0x6001483")]
			[Address(RVA = "0x50DF1C", Offset = "0x50DF1C", VA = "0x50DF1C")]
			internal void <.ctor>b__80_1()
			{
			}

			[Token(Token = "0x6001484")]
			[Address(RVA = "0x50DF20", Offset = "0x50DF20", VA = "0x50DF20")]
			internal void <.ctor>b__80_2(bool <p0>)
			{
			}
		}

		[Token(Token = "0x4000686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<Mesh, int> s_meshCount;

		[Token(Token = "0x4000687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static List<Thread> s_crossfadeThreads;

		[Token(Token = "0x4000688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static bool s_shutDownThreads;

		[Token(Token = "0x4000689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static Queue<MeshAnimator> s_crossfadeAnimators;

		[Token(Token = "0x400068A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static List<Stack<Mesh>> s_crossFadePool;

		[Token(Token = "0x400068B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static Dictionary<Mesh, int> s_crossFadeIndex;

		[Token(Token = "0x400068C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Mesh baseMesh;

		[Token(Token = "0x400068D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MeshAnimation defaultAnimation;

		[Token(Token = "0x400068E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public MeshAnimation[] animations;

		[Token(Token = "0x400068F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float speed;

		[Token(Token = "0x4000690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool updateWhenOffscreen;

		[Token(Token = "0x4000691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool playAutomatically;

		[Token(Token = "0x4000692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public bool resetOnEnable;

		[Token(Token = "0x4000693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject eventReciever;

		[Token(Token = "0x4000694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int FPS;

		[Token(Token = "0x4000695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool skipLastLoopFrame;

		[Token(Token = "0x4000696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool recalculateCrossfadeNormals;

		[Token(Token = "0x4000697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Action<string> OnAnimationFinished;

		[Token(Token = "0x4000698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action OnFrameUpdated;

		[Token(Token = "0x4000699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Action<bool> OnVisibilityChanged;

		[Token(Token = "0x400069A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int currentFrame;

		[Token(Token = "0x400069B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Transform LODCamera;

		[Token(Token = "0x400069C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public MeshAnimatorLODLevel[] LODLevels;

		[Token(Token = "0x400069D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x245AA4", Offset = "0x245AA4")]
		public float nextTick;

		[Token(Token = "0x400069E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x245AB4", Offset = "0x245AB4")]
		public MeshFilter meshFilter;

		[Token(Token = "0x400069F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x245AC4", Offset = "0x245AC4")]
		public MeshAnimation currentAnimation;

		[Token(Token = "0x40006A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x245AD4", Offset = "0x245AD4")]
		public MeshTriangleData[] meshTriangleData;

		[Token(Token = "0x40006A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x245AE4", Offset = "0x245AE4")]
		public Vector2[] uv1Data;

		[Token(Token = "0x40006A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x245AF4", Offset = "0x245AF4")]
		public Vector2[] uv2Data;

		[Token(Token = "0x40006A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x245B04", Offset = "0x245B04")]
		public Vector2[] uv3Data;

		[Token(Token = "0x40006A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x245B14", Offset = "0x245B14")]
		public Vector2[] uv4Data;

		[Token(Token = "0x40006A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int currentAnimIndex;

		[Token(Token = "0x40006A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool isVisible;

		[Token(Token = "0x40006A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float lastFrameTime;

		[Token(Token = "0x40006A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool pingPong;

		[Token(Token = "0x40006A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool isPaused;

		[Token(Token = "0x40006AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float currentAnimTime;

		[Token(Token = "0x40006AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Mesh crossFadeMesh;

		[Token(Token = "0x40006AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Queue<string> queuedAnims;

		[Token(Token = "0x40006AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private CurrentCrossFade currentCrossFade;

		[Token(Token = "0x40006AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int currentLodLevel;

		[Token(Token = "0x40006AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Transform mTransform;

		[Token(Token = "0x40006B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Dictionary<string, Transform> childMap;

		[Token(Token = "0x40006B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private bool initialized;

		[Token(Token = "0x40006B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private int previousEventFrame;

		[Token(Token = "0x40006B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private bool hasExposedTransforms;

		[Token(Token = "0x40006B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private int crossFadePoolIndex;

		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0x507CD0", Offset = "0x507CD0", VA = "0x507CD0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0x508700", Offset = "0x508700", VA = "0x508700")]
		private void OnBecameVisible()
		{
		}

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0x508784", Offset = "0x508784", VA = "0x508784")]
		private void OnBecameInvisible()
		{
		}

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0x508808", Offset = "0x508808", VA = "0x508808")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0x508B14", Offset = "0x508B14", VA = "0x508B14")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0x508CCC", Offset = "0x508CCC", VA = "0x508CCC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000CFA")]
		[Address(RVA = "0x509B54", Offset = "0x509B54", VA = "0x509B54")]
		private void FireAnimationEvents(MeshAnimation cAnim, float totalSpeed, bool finished)
		{
		}

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0x509D40", Offset = "0x509D40", VA = "0x509D40")]
		private Mesh GetCrossfadeFromPool()
		{
			return null;
		}

		[Token(Token = "0x6000CFC")]
		[Address(RVA = "0x5096EC", Offset = "0x5096EC", VA = "0x5096EC")]
		private void ReturnCrossfadeToPool()
		{
		}

		[Token(Token = "0x6000CFD")]
		[Address(RVA = "0x509FC0", Offset = "0x509FC0", VA = "0x509FC0")]
		private void GenerateCrossfadeFrame()
		{
		}

		[Token(Token = "0x6000CFE")]
		[Address(RVA = "0x50A62C", Offset = "0x50A62C", VA = "0x50A62C")]
		private static void EnqueueAnimatorForCrossfade(MeshAnimator animator)
		{
		}

		[Token(Token = "0x6000CFF")]
		[Address(RVA = "0x50A7B8", Offset = "0x50A7B8", VA = "0x50A7B8")]
		private static MeshAnimator DequeueAnimatorForCrossfade()
		{
			return null;
		}

		[Token(Token = "0x6000D00")]
		[Address(RVA = "0x50A9F0", Offset = "0x50A9F0", VA = "0x50A9F0")]
		private static Matrix4x4 MatrixLerp(Matrix4x4 from, Matrix4x4 to, float time)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6000D01")]
		[Address(RVA = "0x50AC10", Offset = "0x50AC10", VA = "0x50AC10")]
		private static void GenerateThreadedCrossfade()
		{
		}

		[Token(Token = "0x6000D02")]
		[Address(RVA = "0x50AFA0", Offset = "0x50AFA0", VA = "0x50AFA0")]
		public void UpdateTick(float time)
		{
		}

		[Token(Token = "0x6000D03")]
		[Address(RVA = "0x50CEC0", Offset = "0x50CEC0", VA = "0x50CEC0")]
		public void Crossfade(int index)
		{
		}

		[Token(Token = "0x6000D04")]
		[Address(RVA = "0x503C14", Offset = "0x503C14", VA = "0x503C14")]
		public void Crossfade(string animationName)
		{
		}

		[Token(Token = "0x6000D05")]
		[Address(RVA = "0x50CECC", Offset = "0x50CECC", VA = "0x50CECC")]
		public void Crossfade(int index, float speed)
		{
		}

		[Token(Token = "0x6000D06")]
		[Address(RVA = "0x50D0BC", Offset = "0x50D0BC", VA = "0x50D0BC")]
		public void Crossfade(string animationName, float speed)
		{
		}

		[Token(Token = "0x6000D07")]
		[Address(RVA = "0x50D170", Offset = "0x50D170", VA = "0x50D170")]
		public void Play()
		{
		}

		[Token(Token = "0x6000D08")]
		[Address(RVA = "0x503C20", Offset = "0x503C20", VA = "0x503C20")]
		public void Play(string animationName)
		{
		}

		[Token(Token = "0x6000D09")]
		[Address(RVA = "0x50CC54", Offset = "0x50CC54", VA = "0x50CC54")]
		public void Play(int index)
		{
		}

		[Token(Token = "0x6000D0A")]
		[Address(RVA = "0x50D17C", Offset = "0x50D17C", VA = "0x50D17C")]
		public void PlayRandom(params string[] animationNames)
		{
		}

		[Token(Token = "0x6000D0B")]
		[Address(RVA = "0x50D298", Offset = "0x50D298", VA = "0x50D298")]
		public void PlayQueued(string animationName)
		{
		}

		[Token(Token = "0x6000D0C")]
		[Address(RVA = "0x50D358", Offset = "0x50D358", VA = "0x50D358")]
		public void Pause()
		{
		}

		[Token(Token = "0x6000D0D")]
		[Address(RVA = "0x50D364", Offset = "0x50D364", VA = "0x50D364")]
		public void RestartAnim()
		{
		}

		[Token(Token = "0x6000D0E")]
		[Address(RVA = "0x50D370", Offset = "0x50D370", VA = "0x50D370")]
		public void SetTime(float time, bool instantUpdate = false)
		{
		}

		[Token(Token = "0x6000D0F")]
		[Address(RVA = "0x50D490", Offset = "0x50D490", VA = "0x50D490")]
		public void SetTimeNormalized(float time, bool instantUpdate = false)
		{
		}

		[Token(Token = "0x6000D10")]
		[Address(RVA = "0x50D5B0", Offset = "0x50D5B0", VA = "0x50D5B0")]
		public MeshAnimation GetClip(string animationName)
		{
			return null;
		}

		[Token(Token = "0x6000D11")]
		[Address(RVA = "0x50D688", Offset = "0x50D688", VA = "0x50D688")]
		public void PrepopulateCrossfadePool(int count)
		{
		}

		[Token(Token = "0x6000D12")]
		[Address(RVA = "0x50DA0C", Offset = "0x50DA0C", VA = "0x50DA0C")]
		public MeshAnimator()
		{
		}
	}
	[Token(Token = "0x20001C0")]
	public class MeshAnimatorManager : MonoBehaviour
	{
		[Token(Token = "0x20002CF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24190C", Offset = "0x24190C")]
		private sealed class <UnscaledUpdate>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400100E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x400100F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private object <>2__current;

			[Token(Token = "0x4001010")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public MeshAnimatorManager <>4__this;

			[Token(Token = "0x170001D0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001488")]
				[Address(RVA = "0x50EA04", Offset = "0x50EA04", VA = "0x50EA04", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600148A")]
				[Address(RVA = "0x50EA94", Offset = "0x50EA94", VA = "0x50EA94", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001485")]
			[Address(RVA = "0x50E480", Offset = "0x50E480", VA = "0x50E480")]
			[DebuggerHidden]
			public <UnscaledUpdate>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x6001486")]
			[Address(RVA = "0x50E8EC", Offset = "0x50E8EC", VA = "0x50E8EC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001487")]
			[Address(RVA = "0x50E8F0", Offset = "0x50E8F0", VA = "0x50E8F0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001489")]
			[Address(RVA = "0x50EA0C", Offset = "0x50EA0C", VA = "0x50EA0C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40006B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static AnimatorUpdateMode mode;

		[Token(Token = "0x40006B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static MeshAnimatorManager mInstance;

		[Token(Token = "0x40006B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static List<MeshAnimator> mAnimators;

		[Token(Token = "0x17000116")]
		public static int AnimatorCount
		{
			[Token(Token = "0x6000D14")]
			[Address(RVA = "0x5085E4", Offset = "0x5085E4", VA = "0x5085E4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000117")]
		public static MeshAnimatorManager Instance
		{
			[Token(Token = "0x6000D15")]
			[Address(RVA = "0x50DF34", Offset = "0x50DF34", VA = "0x50DF34")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D16")]
		[Address(RVA = "0x5089E4", Offset = "0x5089E4", VA = "0x5089E4")]
		public static void AddAnimator(MeshAnimator animator)
		{
		}

		[Token(Token = "0x6000D17")]
		[Address(RVA = "0x508BE8", Offset = "0x508BE8", VA = "0x508BE8")]
		public static void RemoveAnimator(MeshAnimator animator)
		{
		}

		[Token(Token = "0x6000D18")]
		[Address(RVA = "0x50E190", Offset = "0x50E190", VA = "0x50E190")]
		public static void SetUpdateMode(AnimatorUpdateMode updateMode)
		{
		}

		[Token(Token = "0x6000D19")]
		[Address(RVA = "0x50E3D0", Offset = "0x50E3D0", VA = "0x50E3D0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0x50E344", Offset = "0x50E344", VA = "0x50E344")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2490A0", Offset = "0x2490A0")]
		private IEnumerator UnscaledUpdate()
		{
			return null;
		}

		[Token(Token = "0x6000D1B")]
		[Address(RVA = "0x50E4A0", Offset = "0x50E4A0", VA = "0x50E4A0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D1C")]
		[Address(RVA = "0x50E790", Offset = "0x50E790", VA = "0x50E790")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000D1D")]
		[Address(RVA = "0x50E544", Offset = "0x50E544", VA = "0x50E544")]
		private void UpdateTick(float time)
		{
		}

		[Token(Token = "0x6000D1E")]
		[Address(RVA = "0x50E834", Offset = "0x50E834", VA = "0x50E834")]
		public MeshAnimatorManager()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001C1")]
	public class MeshFrameData
	{
		[NonSerialized]
		[Token(Token = "0x40006B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private Vector3[] decompressed;

		[NonSerialized]
		[Token(Token = "0x40006B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Matrix4x4[] exposedTransforms;

		[NonSerialized]
		[Token(Token = "0x40006BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 rootMotionPosition;

		[NonSerialized]
		[Token(Token = "0x40006BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion rootMotionRotation;

		[Token(Token = "0x17000118")]
		public Vector3[] verts
		{
			[Token(Token = "0x6000D20")]
			[Address(RVA = "0x50EA9C", Offset = "0x50EA9C", VA = "0x50EA9C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D21")]
		[Address(RVA = "0x50EAA4", Offset = "0x50EAA4", VA = "0x50EAA4")]
		public void SetVerts(Vector3[] v)
		{
		}

		[Token(Token = "0x6000D22")]
		[Address(RVA = "0x50EAAC", Offset = "0x50EAAC", VA = "0x50EAAC", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D23")]
		[Address(RVA = "0x50ECC8", Offset = "0x50ECC8", VA = "0x50ECC8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000D24")]
		[Address(RVA = "0x501E54", Offset = "0x501E54", VA = "0x501E54")]
		public MeshFrameData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001C2")]
	public class MeshTriangleData
	{
		[Token(Token = "0x40006BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int submesh;

		[Token(Token = "0x40006BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int[] triangles;

		[Token(Token = "0x6000D25")]
		[Address(RVA = "0x50ECD0", Offset = "0x50ECD0", VA = "0x50ECD0")]
		public MeshTriangleData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001C3")]
	public class DeltaCompressedFrameData
	{
		[Token(Token = "0x40006BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float compressionAccuracy;

		[Token(Token = "0x40006BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float accuracy;

		[Token(Token = "0x40006C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int sizeOffset;

		[Token(Token = "0x40006C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int vertLength;

		[Token(Token = "0x40006C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int exposedLength;

		[Token(Token = "0x40006C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x245B24", Offset = "0x245B24")]
		public short[] positionsUShort;

		[Token(Token = "0x40006C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x245B34", Offset = "0x245B34")]
		public int[] positions;

		[Token(Token = "0x40006C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x245B44", Offset = "0x245B44")]
		public int[] frameIndexes;

		[Token(Token = "0x40006C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x245B54", Offset = "0x245B54")]
		public Matrix4x4[] exposedTransforms;

		[Token(Token = "0x40006C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x245B64", Offset = "0x245B64")]
		public Vector3[] rootMotionPositions;

		[Token(Token = "0x40006C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x245B74", Offset = "0x245B74")]
		public Quaternion[] rootMotionRotations;

		[Token(Token = "0x6000D26")]
		[Address(RVA = "0x50173C", Offset = "0x50173C", VA = "0x50173C")]
		public static implicit operator MeshFrameData[](DeltaCompressedFrameData s)
		{
			return null;
		}

		[Token(Token = "0x6000D27")]
		[Address(RVA = "0x501E5C", Offset = "0x501E5C", VA = "0x501E5C")]
		public static implicit operator DeltaCompressedFrameData(MeshFrameData[] frames)
		{
			return null;
		}

		[Token(Token = "0x6000D28")]
		[Address(RVA = "0x50309C", Offset = "0x50309C", VA = "0x50309C")]
		public DeltaCompressedFrameData()
		{
		}
	}
	[Token(Token = "0x20001C4")]
	public static class AllocatedArray<T>
	{
		[Token(Token = "0x40006C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T defaultValue;

		[Token(Token = "0x40006CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<T[]> allocatedArrays;

		[Token(Token = "0x6000D2A")]
		private static T[] AllocateArray(int size)
		{
			return null;
		}

		[Token(Token = "0x6000D2B")]
		public static T[] Get(int size)
		{
			return null;
		}

		[Token(Token = "0x6000D2C")]
		public static void Return(T[] array, bool resetValues = true)
		{
		}
	}
	[Token(Token = "0x20001C5")]
	public static class Comparers
	{
		[Serializable]
		[Token(Token = "0x20002D0")]
		public class StringComparer : IEqualityComparer<string>
		{
			[Token(Token = "0x600148B")]
			[Address(RVA = "0x5016F8", Offset = "0x5016F8", VA = "0x5016F8", Slot = "4")]
			private bool System.Collections.Generic.IEqualityComparer<System.String>.Equals(string x, string y)
			{
				return default(bool);
			}

			[Token(Token = "0x600148C")]
			[Address(RVA = "0x501708", Offset = "0x501708", VA = "0x501708", Slot = "5")]
			private int System.Collections.Generic.IEqualityComparer<System.String>.GetHashCode(string obj)
			{
				return default(int);
			}

			[Token(Token = "0x600148D")]
			[Address(RVA = "0x5015F8", Offset = "0x5015F8", VA = "0x5015F8")]
			public StringComparer()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002D1")]
		public class FloatComparer : IEqualityComparer<float>
		{
			[Token(Token = "0x600148E")]
			[Address(RVA = "0x501684", Offset = "0x501684", VA = "0x501684", Slot = "4")]
			private bool System.Collections.Generic.IEqualityComparer<System.Single>.Equals(float x, float y)
			{
				return default(bool);
			}

			[Token(Token = "0x600148F")]
			[Address(RVA = "0x5016A0", Offset = "0x5016A0", VA = "0x5016A0", Slot = "5")]
			private int System.Collections.Generic.IEqualityComparer<System.Single>.GetHashCode(float obj)
			{
				return default(int);
			}

			[Token(Token = "0x6001490")]
			[Address(RVA = "0x501600", Offset = "0x501600", VA = "0x501600")]
			public FloatComparer()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002D2")]
		public class IntComparer : IEqualityComparer<int>
		{
			[Token(Token = "0x6001491")]
			[Address(RVA = "0x5016C4", Offset = "0x5016C4", VA = "0x5016C4", Slot = "4")]
			private bool System.Collections.Generic.IEqualityComparer<System.Int32>.Equals(int x, int y)
			{
				return default(bool);
			}

			[Token(Token = "0x6001492")]
			[Address(RVA = "0x5016D4", Offset = "0x5016D4", VA = "0x5016D4", Slot = "5")]
			private int System.Collections.Generic.IEqualityComparer<System.Int32>.GetHashCode(int obj)
			{
				return default(int);
			}

			[Token(Token = "0x6001493")]
			[Address(RVA = "0x501608", Offset = "0x501608", VA = "0x501608")]
			public IntComparer()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002D3")]
		public class ByteComparer : IEqualityComparer<byte>
		{
			[Token(Token = "0x6001494")]
			[Address(RVA = "0x501650", Offset = "0x501650", VA = "0x501650", Slot = "4")]
			private bool System.Collections.Generic.IEqualityComparer<System.Byte>.Equals(byte x, byte y)
			{
				return default(bool);
			}

			[Token(Token = "0x6001495")]
			[Address(RVA = "0x501660", Offset = "0x501660", VA = "0x501660", Slot = "5")]
			private int System.Collections.Generic.IEqualityComparer<System.Byte>.GetHashCode(byte obj)
			{
				return default(int);
			}

			[Token(Token = "0x6001496")]
			[Address(RVA = "0x501610", Offset = "0x501610", VA = "0x501610")]
			public ByteComparer()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002D4")]
		public class BoolComparer : IEqualityComparer<bool>
		{
			[Token(Token = "0x6001497")]
			[Address(RVA = "0x501620", Offset = "0x501620", VA = "0x501620", Slot = "4")]
			private bool System.Collections.Generic.IEqualityComparer<System.Boolean>.Equals(bool x, bool y)
			{
				return default(bool);
			}

			[Token(Token = "0x6001498")]
			[Address(RVA = "0x50162C", Offset = "0x50162C", VA = "0x50162C", Slot = "5")]
			private int System.Collections.Generic.IEqualityComparer<System.Boolean>.GetHashCode(bool obj)
			{
				return default(int);
			}

			[Token(Token = "0x6001499")]
			[Address(RVA = "0x501618", Offset = "0x501618", VA = "0x501618")]
			public BoolComparer()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002D5")]
		private class FuncEqualityComparer<T> : EqualityComparer<T>
		{
			[Token(Token = "0x4001011")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Func<T, T, bool> equals;

			[Token(Token = "0x4001012")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Func<T, int> hash;

			[Token(Token = "0x600149A")]
			public FuncEqualityComparer(Func<T, T, bool> equals, Func<T, int> hash)
			{
			}

			[Token(Token = "0x600149B")]
			public override bool Equals(T a, T b)
			{
				return default(bool);
			}

			[Token(Token = "0x600149C")]
			public override int GetHashCode(T obj)
			{
				return default(int);
			}
		}

		[Serializable]
		[Token(Token = "0x20002D6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24191C", Offset = "0x24191C")]
		private sealed class <>c__10<T>
		{
			[Token(Token = "0x4001013")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__10<T> <>9;

			[Token(Token = "0x4001014")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<T, int> <>9__10_0;

			[Token(Token = "0x600149E")]
			public <>c__10()
			{
			}

			[Token(Token = "0x600149F")]
			internal int <Create>b__10_0(T t)
			{
				return default(int);
			}
		}

		[Token(Token = "0x40006CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly StringComparer String;

		[Token(Token = "0x40006CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static readonly FloatComparer Float;

		[Token(Token = "0x40006CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly IntComparer Int;

		[Token(Token = "0x40006CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static readonly ByteComparer Byte;

		[Token(Token = "0x40006CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly BoolComparer Bool;

		[Token(Token = "0x6000D2E")]
		public static IEqualityComparer<T> Create<T>(Func<T, T, bool> equals, [Optional] Func<T, int> hash)
		{
			return null;
		}
	}
	[Token(Token = "0x20001C6")]
	public static class GenericObjectPool<T>
	{
		[Token(Token = "0x40006D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Stack<T> pool;

		[Token(Token = "0x17000119")]
		public static int Count
		{
			[Token(Token = "0x6000D30")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000D31")]
		public static void InitPool(int count)
		{
		}

		[Token(Token = "0x6000D32")]
		public static T Get()
		{
			return (T)null;
		}

		[Token(Token = "0x6000D33")]
		public static void Return(T obj)
		{
		}
	}
	[Token(Token = "0x20001C7")]
	public static class MatrixUtils
	{
		[Token(Token = "0x6000D35")]
		[Address(RVA = "0x503124", Offset = "0x503124", VA = "0x503124")]
		public static void FromMatrix4x4(Transform transform, Matrix4x4 matrix)
		{
		}

		[Token(Token = "0x6000D36")]
		[Address(RVA = "0x503438", Offset = "0x503438", VA = "0x503438")]
		public static Quaternion GetRotation(Matrix4x4 matrix)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000D37")]
		[Address(RVA = "0x503324", Offset = "0x503324", VA = "0x503324")]
		public static Vector3 GetPosition(Matrix4x4 matrix)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D38")]
		[Address(RVA = "0x50367C", Offset = "0x50367C", VA = "0x50367C")]
		public static Vector3 GetScale(Matrix4x4 m)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x20001C8")]
	public class PooledDictionary<T, T2> : Dictionary<T, T2>
	{
		[Token(Token = "0x40006D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Stack<PooledDictionary<T, T2>> stack;

		[Token(Token = "0x40006D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static uint checkedOut;

		[Token(Token = "0x40006D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static uint returned;

		[Token(Token = "0x40006D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x245B84", Offset = "0x245B84")]
		private bool <recycleable>k__BackingField;

		[Token(Token = "0x1700011A")]
		public bool recycleable
		{
			[Token(Token = "0x6000D39")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249118", Offset = "0x249118")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D3A")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249128", Offset = "0x249128")]
			set
			{
			}
		}

		[Token(Token = "0x6000D3B")]
		public static void Init(int initialPoolSize = 10)
		{
		}

		[Token(Token = "0x6000D3C")]
		public static PooledDictionary<T, T2> Get(int capacity, [Optional] IEqualityComparer<T> comparer)
		{
			return null;
		}

		[Token(Token = "0x6000D3D")]
		public static PooledDictionary<T, T2> Get()
		{
			return null;
		}

		[Token(Token = "0x6000D3E")]
		public static PooledDictionary<T, T2> Get(IEqualityComparer<T> comparer)
		{
			return null;
		}

		[Token(Token = "0x6000D3F")]
		public PooledDictionary()
		{
		}

		[Token(Token = "0x6000D40")]
		public PooledDictionary(int capacity)
		{
		}

		[Token(Token = "0x6000D41")]
		public PooledDictionary(int capacity, IEqualityComparer<T> comparer)
		{
		}

		[Token(Token = "0x6000D42")]
		public void ReturnToPool(bool force = false)
		{
		}
	}
}
namespace TotF
{
	[Token(Token = "0x20001C9")]
	public class GhostEnemyController : EnemyController
	{
		[Token(Token = "0x40006D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E0")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x245B94", Offset = "0x245B94")]
		public Renderer[] ghostRenderers;

		[Token(Token = "0x40006D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E4")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x245BC8", Offset = "0x245BC8")]
		public float corporealValue;

		[Token(Token = "0x40006D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E8")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x245BFC", Offset = "0x245BFC")]
		public float incorporealValue;

		[Token(Token = "0x40006D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4EC")]
		private Collider[] ghostColliders;

		[Token(Token = "0x6000D44")]
		[Address(RVA = "0x4D2D94", Offset = "0x4D2D94", VA = "0x4D2D94", Slot = "5")]
		public override void Start()
		{
		}

		[Token(Token = "0x6000D45")]
		[Address(RVA = "0x4D2FE8", Offset = "0x4D2FE8", VA = "0x4D2FE8", Slot = "53")]
		public override void StartPunch(string value = "", float predictedContactTime = 0f)
		{
		}

		[Token(Token = "0x6000D46")]
		[Address(RVA = "0x4D31DC", Offset = "0x4D31DC", VA = "0x4D31DC", Slot = "54")]
		public override void PunchEnded(bool pauseOffense = true)
		{
		}

		[Token(Token = "0x6000D47")]
		[Address(RVA = "0x4D3018", Offset = "0x4D3018", VA = "0x4D3018")]
		private void Corporeal()
		{
		}

		[Token(Token = "0x6000D48")]
		[Address(RVA = "0x4D2E24", Offset = "0x4D2E24", VA = "0x4D2E24")]
		private void Incorporeal()
		{
		}

		[Token(Token = "0x6000D49")]
		[Address(RVA = "0x4D3200", Offset = "0x4D3200", VA = "0x4D3200")]
		private void EnableAllColliders()
		{
		}

		[Token(Token = "0x6000D4A")]
		[Address(RVA = "0x4D3294", Offset = "0x4D3294", VA = "0x4D3294")]
		private void DisableAllColliders()
		{
		}

		[Token(Token = "0x6000D4B")]
		[Address(RVA = "0x4D3328", Offset = "0x4D3328", VA = "0x4D3328")]
		public GhostEnemyController()
		{
		}
	}
	[Token(Token = "0x20001CA")]
	public class TrainerController : MonoBehaviour
	{
		[Token(Token = "0x40006D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float scowlRange;

		[Token(Token = "0x40006DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float cheerChance;

		[Token(Token = "0x40006DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float cheerTime;

		[Token(Token = "0x40006DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float gettingLookedAtReactionTime;

		[Token(Token = "0x40006DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float reactionAnimationTime;

		[Token(Token = "0x40006DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float reactionCooldownTime;

		[Token(Token = "0x40006DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float playerLookAngleForReaction;

		[Token(Token = "0x40006E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform head;

		[Token(Token = "0x40006E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private LookAtIK lik;

		[Token(Token = "0x40006E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private PlayerController player;

		[Token(Token = "0x40006E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Animator animator;

		[Token(Token = "0x40006E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int hitLayerIndex;

		[Token(Token = "0x40006E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int hitLayerIndex1;

		[Token(Token = "0x40006E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int hitLayerIndex2;

		[Token(Token = "0x40006E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool doBlinkCycle;

		[Token(Token = "0x40006E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		private bool blinking;

		[Token(Token = "0x40006E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float blinkTimer;

		[Token(Token = "0x40006EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		protected float expressPainTarget;

		[Token(Token = "0x40006EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected float expressPainLevel;

		[Token(Token = "0x40006EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		protected float expressConcernTarget;

		[Token(Token = "0x40006ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected float expressConcernLevel;

		[Token(Token = "0x40006EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public SkinnedMeshRenderer bodyMesh;

		[Token(Token = "0x40006EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public EnemyBlendshapes blendshapes;

		[Token(Token = "0x40006F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public string[] cheers;

		[Token(Token = "0x40006F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string[] reactions;

		[Token(Token = "0x40006F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool cheering;

		[Token(Token = "0x40006F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float cheerTimer;

		[Token(Token = "0x40006F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private bool foundPlayer;

		[Token(Token = "0x40006F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
		private bool isReacting;

		[Token(Token = "0x40006F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x76")]
		private bool isReactingCooldown;

		[Token(Token = "0x40006F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float gettingLookedAtTimer;

		[Token(Token = "0x40006F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float reactionTimer;

		[Token(Token = "0x40006F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float reactionCooldownTimer;

		[Token(Token = "0x40006FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static TrainerController instance;

		[Token(Token = "0x6000D4C")]
		[Address(RVA = "0x3AD0A8", Offset = "0x3AD0A8", VA = "0x3AD0A8")]
		public static void Cheer()
		{
		}

		[Token(Token = "0x6000D4D")]
		[Address(RVA = "0x3AD268", Offset = "0x3AD268", VA = "0x3AD268")]
		public static void CheerSometimes()
		{
		}

		[Token(Token = "0x6000D4E")]
		[Address(RVA = "0x3AD3A0", Offset = "0x3AD3A0", VA = "0x3AD3A0")]
		public static void Hide()
		{
		}

		[Token(Token = "0x6000D4F")]
		[Address(RVA = "0x3AD4AC", Offset = "0x3AD4AC", VA = "0x3AD4AC")]
		public static void Show()
		{
		}

		[Token(Token = "0x6000D50")]
		[Address(RVA = "0x3AD178", Offset = "0x3AD178", VA = "0x3AD178")]
		private void CheerLocal()
		{
		}

		[Token(Token = "0x6000D51")]
		[Address(RVA = "0x3AD34C", Offset = "0x3AD34C", VA = "0x3AD34C")]
		private void CheerSometimesLocal()
		{
		}

		[Token(Token = "0x6000D52")]
		[Address(RVA = "0x3AD5A4", Offset = "0x3AD5A4", VA = "0x3AD5A4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000D53")]
		[Address(RVA = "0x3AD60C", Offset = "0x3AD60C", VA = "0x3AD60C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D54")]
		[Address(RVA = "0x3AD710", Offset = "0x3AD710", VA = "0x3AD710")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D55")]
		[Address(RVA = "0x3AD988", Offset = "0x3AD988", VA = "0x3AD988")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D56")]
		[Address(RVA = "0x3ADDBC", Offset = "0x3ADDBC", VA = "0x3ADDBC")]
		private void React()
		{
		}

		[Token(Token = "0x6000D57")]
		[Address(RVA = "0x3AE404", Offset = "0x3AE404", VA = "0x3AE404", Slot = "4")]
		protected virtual void StartBlinkCycle()
		{
		}

		[Token(Token = "0x6000D58")]
		[Address(RVA = "0x3AE434", Offset = "0x3AE434", VA = "0x3AE434", Slot = "5")]
		protected virtual void StopBlinkCycle()
		{
		}

		[Token(Token = "0x6000D59")]
		[Address(RVA = "0x3ADEBC", Offset = "0x3ADEBC", VA = "0x3ADEBC")]
		protected void HandleBlink()
		{
		}

		[Token(Token = "0x6000D5A")]
		[Address(RVA = "0x3AE44C", Offset = "0x3AE44C", VA = "0x3AE44C", Slot = "6")]
		protected virtual void MakeBlink()
		{
		}

		[Token(Token = "0x6000D5B")]
		[Address(RVA = "0x3AE588", Offset = "0x3AE588", VA = "0x3AE588", Slot = "7")]
		protected virtual void StopBlink()
		{
		}

		[Token(Token = "0x6000D5C")]
		[Address(RVA = "0x3AE598", Offset = "0x3AE598", VA = "0x3AE598")]
		public void ExpressPain(float targetLevel)
		{
		}

		[Token(Token = "0x6000D5D")]
		[Address(RVA = "0x3AE5A0", Offset = "0x3AE5A0", VA = "0x3AE5A0")]
		public void ExpressConcern(float targetLevel)
		{
		}

		[Token(Token = "0x6000D5E")]
		[Address(RVA = "0x3ADF58", Offset = "0x3ADF58", VA = "0x3ADF58")]
		public void UpdateExpressions()
		{
		}

		[Token(Token = "0x6000D5F")]
		[Address(RVA = "0x3AD738", Offset = "0x3AD738", VA = "0x3AD738")]
		private void LoadBlendshapeIndexes()
		{
		}

		[Token(Token = "0x6000D60")]
		[Address(RVA = "0x3AE800", Offset = "0x3AE800", VA = "0x3AE800")]
		private void FindBlendshapeIndexes(ref BlendshapeDefinition[] blendshapeDefinitions)
		{
		}

		[Token(Token = "0x6000D61")]
		[Address(RVA = "0x3AEA74", Offset = "0x3AEA74", VA = "0x3AEA74")]
		public void ReceiveHurtboxCollision(float force, Hurtbox hurtbox, Hitbox hitbox, Collision collision)
		{
		}

		[Token(Token = "0x6000D62")]
		[Address(RVA = "0x3AF188", Offset = "0x3AF188", VA = "0x3AF188")]
		protected void HurtboxCollisionAudioResult(float force, Hurtbox hurtbox, Collision collision)
		{
		}

		[Token(Token = "0x6000D63")]
		[Address(RVA = "0x3AEAC0", Offset = "0x3AEAC0", VA = "0x3AEAC0")]
		protected void HurtboxCollisionVisualResult(float force, Hurtbox hurtbox, Hitbox hitbox, Collision collision)
		{
		}

		[Token(Token = "0x6000D64")]
		[Address(RVA = "0x3AE5A8", Offset = "0x3AE5A8", VA = "0x3AE5A8")]
		private void SetPainBlendshape(float value)
		{
		}

		[Token(Token = "0x6000D65")]
		[Address(RVA = "0x3AF27C", Offset = "0x3AF27C", VA = "0x3AF27C")]
		private void SetBlendShapeWeight(int index, float value)
		{
		}

		[Token(Token = "0x6000D66")]
		[Address(RVA = "0x3AE45C", Offset = "0x3AE45C", VA = "0x3AE45C")]
		private void SetBlinkBlendshape(float value)
		{
		}

		[Token(Token = "0x6000D67")]
		[Address(RVA = "0x3AE6D4", Offset = "0x3AE6D4", VA = "0x3AE6D4")]
		private void SetFlinchBlendshape(float value)
		{
		}

		[Token(Token = "0x6000D68")]
		[Address(RVA = "0x3AE154", Offset = "0x3AE154", VA = "0x3AE154")]
		public void HandleFlinch()
		{
		}

		[Token(Token = "0x6000D69")]
		[Address(RVA = "0x3AF2B8", Offset = "0x3AF2B8", VA = "0x3AF2B8")]
		public TrainerController()
		{
		}
	}
	[Token(Token = "0x20001CB")]
	public class ZombieEnemyController : EnemyController
	{
		[Token(Token = "0x40006FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E0")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x245C30", Offset = "0x245C30")]
		public float shakeoffDamageThreshold;

		[Token(Token = "0x40006FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E4")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x245C64", Offset = "0x245C64")]
		public float shakeoffDamageMax;

		[Token(Token = "0x40006FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E8")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x245C98", Offset = "0x245C98")]
		public float biteDamage;

		[Token(Token = "0x40006FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4EC")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x245CCC", Offset = "0x245CCC")]
		public float kdLightsOutDamageThresholdOverride;

		[Token(Token = "0x40006FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F0")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x245D00", Offset = "0x245D00")]
		public float swingRange;

		[Token(Token = "0x4000700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F4")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x245D34", Offset = "0x245D34")]
		public float biteStartRange;

		[Token(Token = "0x4000701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F8")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x245D68", Offset = "0x245D68")]
		public float biteStopRange;

		[Token(Token = "0x4000702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4FC")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x245D9C", Offset = "0x245D9C")]
		public float biteDistance;

		[Token(Token = "0x4000703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x500")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x245DD0", Offset = "0x245DD0")]
		public int hitpoints;

		[Token(Token = "0x4000704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x504")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x245E04", Offset = "0x245E04")]
		public LipSyncData[] biteSounds;

		[Token(Token = "0x4000705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x508")]
		private bool isBeingKnockedBack;

		[Token(Token = "0x4000706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x509")]
		private bool isAttacking;

		[Token(Token = "0x4000707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50A")]
		private bool isBiting;

		[Token(Token = "0x4000708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50C")]
		private float knockbackTimer;

		[Token(Token = "0x4000709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x510")]
		private float biteTimer;

		[Token(Token = "0x400070A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x514")]
		private float biteTime;

		[Token(Token = "0x400070B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x518")]
		private float actualBiteTimer;

		[Token(Token = "0x400070C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51C")]
		private bool isActuallyBiting;

		[Token(Token = "0x400070D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x520")]
		private float biteTransitionTime;

		[Token(Token = "0x400070E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x524")]
		private float outOfRangeTimer;

		[Token(Token = "0x400070F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x528")]
		private float outOfRangeTime;

		[Token(Token = "0x6000D6A")]
		[Address(RVA = "0x3B3BCC", Offset = "0x3B3BCC", VA = "0x3B3BCC", Slot = "4")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6000D6B")]
		[Address(RVA = "0x3B3BF4", Offset = "0x3B3BF4", VA = "0x3B3BF4", Slot = "15")]
		protected override void HurtboxCollisionVisualResult(float damage, float force, bool wasKnockedDown, Hurtbox hurtbox, Hitbox hitbox, Collision collision)
		{
		}

		[Token(Token = "0x6000D6C")]
		[Address(RVA = "0x3B4080", Offset = "0x3B4080", VA = "0x3B4080", Slot = "20")]
		protected override void Knockdown(Hurtbox hurtbox, Hitbox hitbox)
		{
		}

		[Token(Token = "0x6000D6D")]
		[Address(RVA = "0x3B4214", Offset = "0x3B4214", VA = "0x3B4214")]
		public void OnDeath()
		{
		}

		[Token(Token = "0x6000D6E")]
		[Address(RVA = "0x3B4244", Offset = "0x3B4244", VA = "0x3B4244")]
		public void StartBiteSound()
		{
		}

		[Token(Token = "0x6000D6F")]
		[Address(RVA = "0x3B4314", Offset = "0x3B4314", VA = "0x3B4314")]
		public void StopBiteSound()
		{
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0x3B4364", Offset = "0x3B4364", VA = "0x3B4364")]
		public void StartBiting()
		{
		}

		[Token(Token = "0x6000D71")]
		[Address(RVA = "0x3B41F8", Offset = "0x3B41F8", VA = "0x3B41F8")]
		public void StopBiting()
		{
		}

		[Token(Token = "0x6000D72")]
		[Address(RVA = "0x3B4434", Offset = "0x3B4434", VA = "0x3B4434", Slot = "62")]
		protected override void HandleAttackBehavior()
		{
		}

		[Token(Token = "0x6000D73")]
		[Address(RVA = "0x3B46B4", Offset = "0x3B46B4", VA = "0x3B46B4", Slot = "59")]
		protected override void HandlePursueBehavior()
		{
		}

		[Token(Token = "0x6000D74")]
		[Address(RVA = "0x3B49A4", Offset = "0x3B49A4", VA = "0x3B49A4")]
		private bool DoAttack()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D75")]
		[Address(RVA = "0x3B4908", Offset = "0x3B4908", VA = "0x3B4908")]
		private void StopZombieAttack()
		{
		}

		[Token(Token = "0x6000D76")]
		[Address(RVA = "0x3B49F8", Offset = "0x3B49F8", VA = "0x3B49F8")]
		private void ZombieAttack()
		{
		}

		[Token(Token = "0x6000D77")]
		[Address(RVA = "0x3B4B7C", Offset = "0x3B4B7C", VA = "0x3B4B7C")]
		public void RefreshPunch(string value = "")
		{
		}

		[Token(Token = "0x6000D78")]
		[Address(RVA = "0x3B4B90", Offset = "0x3B4B90", VA = "0x3B4B90", Slot = "60")]
		protected override void HandleKeepAwayBehavior()
		{
		}

		[Token(Token = "0x6000D79")]
		[Address(RVA = "0x3B4BA4", Offset = "0x3B4BA4", VA = "0x3B4BA4", Slot = "61")]
		protected override void HandleRetreatBehavior()
		{
		}

		[Token(Token = "0x6000D7A")]
		[Address(RVA = "0x3B4BB8", Offset = "0x3B4BB8", VA = "0x3B4BB8", Slot = "58")]
		protected override void SetBehavior(BehaviorMode newMode)
		{
		}

		[Token(Token = "0x6000D7B")]
		[Address(RVA = "0x3B4D00", Offset = "0x3B4D00", VA = "0x3B4D00", Slot = "55")]
		public override void PunchEnded(string endedPunchName)
		{
		}

		[Token(Token = "0x6000D7C")]
		[Address(RVA = "0x3B48BC", Offset = "0x3B48BC", VA = "0x3B48BC")]
		public bool IsInSwingRange()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D7D")]
		[Address(RVA = "0x3B4688", Offset = "0x3B4688", VA = "0x3B4688")]
		public bool IsInBiteRange()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D7E")]
		[Address(RVA = "0x3B465C", Offset = "0x3B465C", VA = "0x3B465C")]
		public bool IsOutsideBiteRange()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D7F")]
		[Address(RVA = "0x3B4D20", Offset = "0x3B4D20", VA = "0x3B4D20")]
		public ZombieEnemyController()
		{
		}
	}
	[Token(Token = "0x20001CC")]
	public class AnnouncerController : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20002D7")]
		public struct ClipGroup
		{
			[Token(Token = "0x4001015")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public LipSyncData[] clips;
		}

		[Token(Token = "0x20002D8")]
		private enum ClipAction
		{
			[Token(Token = "0x4001017")]
			NoAction,
			[Token(Token = "0x4001018")]
			BlueWin,
			[Token(Token = "0x4001019")]
			RedWin,
			[Token(Token = "0x400101A")]
			Draw
		}

		[Token(Token = "0x20002D9")]
		private struct ClipQueueItem
		{
			[Token(Token = "0x400101B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public LipSyncData clip;

			[Token(Token = "0x400101C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float delay;

			[Token(Token = "0x400101D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public ClipAction clipAction;

			[Token(Token = "0x60014A0")]
			[Address(RVA = "0x2C06BC", Offset = "0x2C06BC", VA = "0x2C06BC")]
			public ClipQueueItem(LipSyncData setClip, float setDelay = 0f, ClipAction setClipAction = ClipAction.NoAction)
			{
			}
		}

		[Token(Token = "0x4000710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public LipSyncData[] introClips;

		[Token(Token = "0x4000711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LipSyncData[] judgementUnanimousClips;

		[Token(Token = "0x4000712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public LipSyncData[] judgementMajorityClips;

		[Token(Token = "0x4000713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LipSyncData[] judgementSplitClips;

		[Token(Token = "0x4000714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public LipSyncData[] judgementDrawClips;

		[Token(Token = "0x4000715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LipSyncData[] judgementBlueClips;

		[Token(Token = "0x4000716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public LipSyncData[] judgementRedClips;

		[Token(Token = "0x4000717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ClipGroup[] endAtRoundClips;

		[Token(Token = "0x4000718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LipSyncData[] koClips;

		[Token(Token = "0x4000719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public LipSyncData[] tkoClips;

		[Token(Token = "0x400071A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public LipSyncData[] koRedClips;

		[Token(Token = "0x400071B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public LipSyncData[] koBlueClips;

		[Token(Token = "0x400071C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Animator animator;

		[Token(Token = "0x400071D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private LipSync mouth;

		[Token(Token = "0x400071E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public AudioSource mouthAudioSource;

		[Token(Token = "0x400071F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool playQueue;

		[Token(Token = "0x4000720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float delayTimer;

		[Token(Token = "0x4000721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static AnnouncerController instance;

		[Token(Token = "0x4000722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<ClipQueueItem> clipQueue;

		[Token(Token = "0x4000723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int clipQueueIndex;

		[Token(Token = "0x1700011B")]
		public static AnnouncerController Instance
		{
			[Token(Token = "0x6000D80")]
			[Address(RVA = "0x3DB5DC", Offset = "0x3DB5DC", VA = "0x3DB5DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D81")]
		[Address(RVA = "0x3DB640", Offset = "0x3DB640", VA = "0x3DB640")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000D82")]
		[Address(RVA = "0x3DB710", Offset = "0x3DB710", VA = "0x3DB710")]
		public void StopTalking()
		{
		}

		[Token(Token = "0x6000D83")]
		[Address(RVA = "0x3DB740", Offset = "0x3DB740", VA = "0x3DB740")]
		public void StartWinnerAnnouncement()
		{
		}

		[Token(Token = "0x6000D84")]
		[Address(RVA = "0x3DC2B4", Offset = "0x3DC2B4", VA = "0x3DC2B4")]
		private void PlayNextClipInQueue()
		{
		}

		[Token(Token = "0x6000D85")]
		[Address(RVA = "0x3DC420", Offset = "0x3DC420", VA = "0x3DC420")]
		public void Update()
		{
		}

		[Token(Token = "0x6000D86")]
		[Address(RVA = "0x3DC4A0", Offset = "0x3DC4A0", VA = "0x3DC4A0")]
		public void GestureRight()
		{
		}

		[Token(Token = "0x6000D87")]
		[Address(RVA = "0x3DC51C", Offset = "0x3DC51C", VA = "0x3DC51C")]
		public void GestureRightActions()
		{
		}

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0x3DC7C0", Offset = "0x3DC7C0", VA = "0x3DC7C0")]
		public void GestureLeft()
		{
		}

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0x3DC83C", Offset = "0x3DC83C", VA = "0x3DC83C")]
		public void GestureLeftActions()
		{
		}

		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0x3DC8B8", Offset = "0x3DC8B8", VA = "0x3DC8B8")]
		public AnnouncerController()
		{
		}
	}
	[Token(Token = "0x20001CD")]
	public class AudienceBakeResult : MonoBehaviour
	{
		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0x3DC8C0", Offset = "0x3DC8C0", VA = "0x3DC8C0")]
		public AudienceBakeResult()
		{
		}
	}
	[Token(Token = "0x20001CE")]
	public class AudienceController : MonoBehaviour
	{
		[Token(Token = "0x4000724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string[] cheers;

		[Token(Token = "0x6000D8C")]
		[Address(RVA = "0x3DC8C8", Offset = "0x3DC8C8", VA = "0x3DC8C8", Slot = "4")]
		public virtual void Cheer()
		{
		}

		[Token(Token = "0x6000D8D")]
		[Address(RVA = "0x3DC8CC", Offset = "0x3DC8CC", VA = "0x3DC8CC")]
		public AudienceController()
		{
		}
	}
	[Token(Token = "0x20001CF")]
	public class AudienceGenerator : MonoBehaviour
	{
		[Token(Token = "0x20002DA")]
		public enum Style
		{
			[Token(Token = "0x400101F")]
			MaleAll,
			[Token(Token = "0x4001020")]
			FemaleAll
		}

		[Token(Token = "0x4000725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x245E38", Offset = "0x245E38")]
		public int varietyCount;

		[Token(Token = "0x4000726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform[] prefabs;

		[Token(Token = "0x4000727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Style[] styles;

		[Token(Token = "0x4000728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x245E54", Offset = "0x245E54")]
		private Mesh[] <bakedMeshes>k__BackingField;

		[Token(Token = "0x4000729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x245E64", Offset = "0x245E64")]
		private SkinnedMeshRenderer[] <templates>k__BackingField;

		[Token(Token = "0x400072A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x245E74", Offset = "0x245E74")]
		private int <audienceLayer>k__BackingField;

		[Token(Token = "0x400072B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x245E84", Offset = "0x245E84")]
		private static bool <drawAudience>k__BackingField;

		[Token(Token = "0x1700011C")]
		public Mesh[] bakedMeshes
		{
			[Token(Token = "0x6000D8E")]
			[Address(RVA = "0x3DC8D4", Offset = "0x3DC8D4", VA = "0x3DC8D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249138", Offset = "0x249138")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D8F")]
			[Address(RVA = "0x3DC8DC", Offset = "0x3DC8DC", VA = "0x3DC8DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249148", Offset = "0x249148")]
			private set
			{
			}
		}

		[Token(Token = "0x1700011D")]
		public SkinnedMeshRenderer[] templates
		{
			[Token(Token = "0x6000D90")]
			[Address(RVA = "0x3DC8E4", Offset = "0x3DC8E4", VA = "0x3DC8E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249158", Offset = "0x249158")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D91")]
			[Address(RVA = "0x3DC8EC", Offset = "0x3DC8EC", VA = "0x3DC8EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249168", Offset = "0x249168")]
			private set
			{
			}
		}

		[Token(Token = "0x1700011E")]
		public int audienceLayer
		{
			[Token(Token = "0x6000D92")]
			[Address(RVA = "0x3DC8F4", Offset = "0x3DC8F4", VA = "0x3DC8F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249178", Offset = "0x249178")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D93")]
			[Address(RVA = "0x3DC8FC", Offset = "0x3DC8FC", VA = "0x3DC8FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249188", Offset = "0x249188")]
			private set
			{
			}
		}

		[Token(Token = "0x1700011F")]
		public static bool drawAudience
		{
			[Token(Token = "0x6000D94")]
			[Address(RVA = "0x3DC904", Offset = "0x3DC904", VA = "0x3DC904")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249198", Offset = "0x249198")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D95")]
			[Address(RVA = "0x3DC968", Offset = "0x3DC968", VA = "0x3DC968")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2491A8", Offset = "0x2491A8")]
			private set
			{
			}
		}

		[Token(Token = "0x6000D96")]
		[Address(RVA = "0x3DC9CC", Offset = "0x3DC9CC", VA = "0x3DC9CC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D97")]
		[Address(RVA = "0x3DCF40", Offset = "0x3DCF40", VA = "0x3DCF40")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000D98")]
		[Address(RVA = "0x3DD060", Offset = "0x3DD060", VA = "0x3DD060")]
		public AudienceGenerator()
		{
		}
	}
	[Token(Token = "0x20001D0")]
	public class AudienceGroup : MonoBehaviour
	{
		[Token(Token = "0x400072C")]
		protected const bool forceDrawAll = false;

		[Token(Token = "0x400072D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<AudienceGroup> _groups;

		[Token(Token = "0x400072E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float visibilityRadius;

		[Token(Token = "0x400072F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int limit;

		[Token(Token = "0x4000730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		protected Matrix4x4[][] matrices;

		[Token(Token = "0x4000731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool init;

		[Token(Token = "0x4000732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x245E94", Offset = "0x245E94")]
		private AudienceGenerator <parent>k__BackingField;

		[Token(Token = "0x17000120")]
		public static List<AudienceGroup> groups
		{
			[Token(Token = "0x6000D99")]
			[Address(RVA = "0x3DD070", Offset = "0x3DD070", VA = "0x3DD070")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000121")]
		public AudienceGenerator parent
		{
			[Token(Token = "0x6000D9A")]
			[Address(RVA = "0x3DD12C", Offset = "0x3DD12C", VA = "0x3DD12C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2491B8", Offset = "0x2491B8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D9B")]
			[Address(RVA = "0x3DD134", Offset = "0x3DD134", VA = "0x3DD134")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2491C8", Offset = "0x2491C8")]
			set
			{
			}
		}

		[Token(Token = "0x6000D9C")]
		[Address(RVA = "0x3DD13C", Offset = "0x3DD13C", VA = "0x3DD13C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000D9D")]
		[Address(RVA = "0x3DD1AC", Offset = "0x3DD1AC", VA = "0x3DD1AC", Slot = "4")]
		public virtual void Initialize(AudienceGenerator generator)
		{
		}

		[Token(Token = "0x6000D9E")]
		[Address(RVA = "0x3DD438", Offset = "0x3DD438", VA = "0x3DD438", Slot = "5")]
		protected virtual void CreateMatrixSorter(ref List<Matrix4x4>[] matrixSorter)
		{
		}

		[Token(Token = "0x6000D9F")]
		[Address(RVA = "0x3DD830", Offset = "0x3DD830", VA = "0x3DD830", Slot = "6")]
		public virtual void Draw(Camera camera)
		{
		}

		[Token(Token = "0x6000DA0")]
		[Address(RVA = "0x3DDAE0", Offset = "0x3DDAE0", VA = "0x3DDAE0")]
		public AudienceGroup()
		{
		}
	}
	[Token(Token = "0x20001D1")]
	public class AudioManager : MonoBehaviour
	{
		[Token(Token = "0x4000733")]
		private const float QuietSoundCutoffForce = 1584f;

		[Token(Token = "0x4000734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static AudioManager instance;

		[Token(Token = "0x4000735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public AudioMixerGroup ambientSound;

		[Token(Token = "0x4000736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AudioMixerGroup externalSound;

		[Token(Token = "0x4000737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public AudioMixerGroup playerEcho;

		[Token(Token = "0x4000738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioMixerGroup ringing;

		[Token(Token = "0x4000739")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AudioClip[] headHitSounds;

		[Token(Token = "0x400073A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioClip[] bodyHitSounds;

		[Token(Token = "0x400073B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public AudioClip[] blockHitSounds;

		[Token(Token = "0x400073C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip[] blockLightHitSounds;

		[Token(Token = "0x400073D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public AudioClip[] knockdownSounds;

		[Token(Token = "0x400073E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<AudioSource> pooledObjects;

		[Token(Token = "0x400073F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int pooledAmount;

		[Token(Token = "0x6000DA1")]
		[Address(RVA = "0x3DDAF0", Offset = "0x3DDAF0", VA = "0x3DDAF0")]
		public static void SetEchoLevel(float intensity)
		{
		}

		[Token(Token = "0x6000DA2")]
		[Address(RVA = "0x3DDCE8", Offset = "0x3DDCE8", VA = "0x3DDCE8")]
		public static void SetPlayerHearingLevel(float intensity)
		{
		}

		[Token(Token = "0x6000DA3")]
		[Address(RVA = "0x3DDEA4", Offset = "0x3DDEA4", VA = "0x3DDEA4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000DA4")]
		[Address(RVA = "0x3DE010", Offset = "0x3DE010", VA = "0x3DE010")]
		public static void PlayClipAtPoint(AudioClip clip, Vector3 position, float volume, float pitch = 1f)
		{
		}

		[Token(Token = "0x6000DA5")]
		[Address(RVA = "0x3DE5C0", Offset = "0x3DE5C0", VA = "0x3DE5C0")]
		public static void PlayClipAtPoint(AudioClip clip, Vector3 position, float volume, float pitchMinimum, float pitchMaximum)
		{
		}

		[Token(Token = "0x6000DA6")]
		[Address(RVA = "0x3DE750", Offset = "0x3DE750", VA = "0x3DE750")]
		public static void PlayKnockdownClipAtPoint(Vector3 position)
		{
		}

		[Token(Token = "0x6000DA7")]
		[Address(RVA = "0x3DE938", Offset = "0x3DE938", VA = "0x3DE938")]
		public static void PlayHeadHitAtPoint(Vector3 position, float volume)
		{
		}

		[Token(Token = "0x6000DA8")]
		[Address(RVA = "0x3DEB74", Offset = "0x3DEB74", VA = "0x3DEB74")]
		public static void PlayBodyHitAtPoint(Vector3 position, float volume)
		{
		}

		[Token(Token = "0x6000DA9")]
		[Address(RVA = "0x3DEDB0", Offset = "0x3DEDB0", VA = "0x3DEDB0")]
		public static void PlayBlockHitAtPoint(Vector3 position, float force, bool isMajorHit)
		{
		}

		[Token(Token = "0x6000DAA")]
		[Address(RVA = "0x3DE11C", Offset = "0x3DE11C", VA = "0x3DE11C")]
		public void GOPlayClipAtPoint(AudioClip clip, Vector3 position, float volume, float pitch = 1f)
		{
		}

		[Token(Token = "0x6000DAB")]
		[Address(RVA = "0x3DE6DC", Offset = "0x3DE6DC", VA = "0x3DE6DC")]
		public void GOPlayClipAtPoint(AudioClip clip, Vector3 position, float volume, float pitchMinimum, float pitchMaximum)
		{
		}

		[Token(Token = "0x6000DAC")]
		[Address(RVA = "0x3DF170", Offset = "0x3DF170", VA = "0x3DF170")]
		private void InitAudioSource(AudioSource audioSource)
		{
		}

		[Token(Token = "0x6000DAD")]
		[Address(RVA = "0x3DF220", Offset = "0x3DF220", VA = "0x3DF220")]
		public static AudioMixerGroup GetAmbientSoundMixer()
		{
			return null;
		}

		[Token(Token = "0x6000DAE")]
		[Address(RVA = "0x3DF294", Offset = "0x3DF294", VA = "0x3DF294")]
		public static AudioMixerGroup GetExternalSoundMixer()
		{
			return null;
		}

		[Token(Token = "0x6000DAF")]
		[Address(RVA = "0x3DF308", Offset = "0x3DF308", VA = "0x3DF308")]
		public AudioManager()
		{
		}
	}
	[Token(Token = "0x20001D2")]
	public class BlobShadow : MonoBehaviour
	{
		[Token(Token = "0x4000740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float yOffset;

		[Token(Token = "0x4000741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float overshoot;

		[Token(Token = "0x4000742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Transform[] shadowBaseTargets;

		[Token(Token = "0x4000743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform shadowStretchTarget;

		[Token(Token = "0x4000744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Transform yPositionTarget;

		[Token(Token = "0x6000DB0")]
		[Address(RVA = "0x3DF328", Offset = "0x3DF328", VA = "0x3DF328")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DB1")]
		[Address(RVA = "0x3DF394", Offset = "0x3DF394", VA = "0x3DF394")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DB2")]
		[Address(RVA = "0x3DF88C", Offset = "0x3DF88C", VA = "0x3DF88C")]
		public BlobShadow()
		{
		}
	}
	[Token(Token = "0x20001D3")]
	public class Blockbox : MonoBehaviour
	{
		[Token(Token = "0x4000745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x245EA4", Offset = "0x245EA4")]
		private BoxerController <owner>k__BackingField;

		[Token(Token = "0x4000746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Hitbox hitbox;

		[Token(Token = "0x4000747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		protected Rigidbody rb;

		[Token(Token = "0x4000748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected float rbMass;

		[Token(Token = "0x17000122")]
		public BoxerController owner
		{
			[Token(Token = "0x6000DB3")]
			[Address(RVA = "0x3DF8A8", Offset = "0x3DF8A8", VA = "0x3DF8A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2491D8", Offset = "0x2491D8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DB4")]
			[Address(RVA = "0x3DF8B0", Offset = "0x3DF8B0", VA = "0x3DF8B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2491E8", Offset = "0x2491E8")]
			set
			{
			}
		}

		[Token(Token = "0x6000DB5")]
		[Address(RVA = "0x3DF8B8", Offset = "0x3DF8B8", VA = "0x3DF8B8", Slot = "4")]
		public virtual void Start()
		{
		}

		[Token(Token = "0x6000DB6")]
		[Address(RVA = "0x3DF9A8", Offset = "0x3DF9A8", VA = "0x3DF9A8")]
		public void SetOwner(BoxerController newOwner)
		{
		}

		[Token(Token = "0x6000DB7")]
		[Address(RVA = "0x3DF9B0", Offset = "0x3DF9B0", VA = "0x3DF9B0", Slot = "5")]
		public virtual void ReceiveHitboxCollision(float force, Hitbox hitbox, Collision collision, bool isMajorHit)
		{
		}

		[Token(Token = "0x6000DB8")]
		[Address(RVA = "0x3DFADC", Offset = "0x3DFADC", VA = "0x3DFADC", Slot = "6")]
		public virtual void ReceiveParryboxCollision(float force, Hitbox hitbox, Blockbox otherParrybox, Collision collision, bool isMajorHit)
		{
		}

		[Token(Token = "0x6000DB9")]
		[Address(RVA = "0x3DFB7C", Offset = "0x3DFB7C", VA = "0x3DFB7C", Slot = "7")]
		public virtual void ReceiveForce(float force, bool playVisualEffect = false)
		{
		}

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0x3DFB80", Offset = "0x3DFB80", VA = "0x3DFB80", Slot = "8")]
		public virtual void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000DBB")]
		[Address(RVA = "0x3E0094", Offset = "0x3E0094", VA = "0x3E0094", Slot = "9")]
		public virtual void ClearVelocity()
		{
		}

		[Token(Token = "0x6000DBC")]
		[Address(RVA = "0x3E0098", Offset = "0x3E0098", VA = "0x3E0098", Slot = "10")]
		public virtual Vector3 GetVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DBD")]
		[Address(RVA = "0x3E011C", Offset = "0x3E011C", VA = "0x3E011C", Slot = "11")]
		public virtual float GetRigidbodyMass()
		{
			return default(float);
		}

		[Token(Token = "0x6000DBE")]
		[Address(RVA = "0x3E0124", Offset = "0x3E0124", VA = "0x3E0124", Slot = "12")]
		public virtual bool IsBlocking()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DBF")]
		[Address(RVA = "0x3E0158", Offset = "0x3E0158", VA = "0x3E0158")]
		public Blockbox()
		{
		}
	}
	[Token(Token = "0x20001D4")]
	public class BoutController : MonoBehaviour
	{
		[Token(Token = "0x20002DB")]
		public delegate void TimerUpdateEvent(bool startCounting, bool isRound, float duration, int onRound, int numberOfRounds);

		[Token(Token = "0x20002DC")]
		private delegate void ActionDelegate();

		[Token(Token = "0x20002DD")]
		public enum Corner
		{
			[Token(Token = "0x4001022")]
			Red,
			[Token(Token = "0x4001023")]
			Blue
		}

		[Token(Token = "0x20002DE")]
		public enum Judge
		{
			[Token(Token = "0x4001025")]
			First,
			[Token(Token = "0x4001026")]
			Second,
			[Token(Token = "0x4001027")]
			Third
		}

		[Token(Token = "0x20002DF")]
		public enum PunchType
		{
			[Token(Token = "0x4001029")]
			Jab,
			[Token(Token = "0x400102A")]
			Power
		}

		[Token(Token = "0x20002E0")]
		public enum PunchStatus
		{
			[Token(Token = "0x400102C")]
			Miss,
			[Token(Token = "0x400102D")]
			Hit
		}

		[Token(Token = "0x4000749")]
		private const float defaultDamageDifferenceToWin = 4000f;

		[Token(Token = "0x400074A")]
		private const float defaultJudgeDecisionFuzziness = 8000f;

		[Token(Token = "0x400074B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Texture2D opponentCutout;

		[Token(Token = "0x400074C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static bool boutInit;

		[Token(Token = "0x400074D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static BoutController instance;

		[Token(Token = "0x400074E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public TimerUpdateEvent OnTimerUpdate;

		[Token(Token = "0x400074F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform redStart;

		[Token(Token = "0x4000750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Transform blueStart;

		[Token(Token = "0x4000751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject enemyPrefab;

		[Token(Token = "0x4000752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public GameObject playerPrefab;

		[Token(Token = "0x4000753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private EnemyController enemyObject;

		[Token(Token = "0x4000754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private CrowdController soundsObject;

		[Token(Token = "0x4000755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x245EB4", Offset = "0x245EB4")]
		private BoxerController[] <boxers>k__BackingField;

		[Token(Token = "0x4000756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int onRound;

		[Token(Token = "0x4000757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool roundActive;

		[Token(Token = "0x4000758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool breakActive;

		[Token(Token = "0x4000759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool roundTimerCountingDown;

		[Token(Token = "0x400075A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		private bool breakTimerCountingDown;

		[Token(Token = "0x400075B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool roundTimerBelowTen;

		[Token(Token = "0x400075C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool roundTimerBelowZero;

		[Token(Token = "0x400075D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		private bool breakTimerBelowTen;

		[Token(Token = "0x400075E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float roundTimer;

		[Token(Token = "0x400075F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float breakTimer;

		[Token(Token = "0x4000760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float damageDifferenceToWin;

		[Token(Token = "0x4000761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float judgeDecisionFuzziness;

		[Token(Token = "0x4000762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float roundTime;

		[Token(Token = "0x4000763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int numberOfRounds;

		[Token(Token = "0x4000764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float breakTime;

		[Token(Token = "0x4000765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int knockdownLimit;

		[Token(Token = "0x4000766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float judgeStrictness;

		[Token(Token = "0x4000767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int[][][] scores;

		[Token(Token = "0x4000768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float[] roundDamage;

		[Token(Token = "0x4000769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int[] knockdownsThisRound;

		[Token(Token = "0x400076A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int[][] knockdowns;

		[Token(Token = "0x400076B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int[][] punchesLanded;

		[Token(Token = "0x400076C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int[][] punchesTotal;

		[Token(Token = "0x400076D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int[][] damagingPunchesLanded;

		[Token(Token = "0x400076E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int[][] damageTaken;

		[Token(Token = "0x400076F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int[][] jabsLanded;

		[Token(Token = "0x4000770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int[][] jabsTotal;

		[Token(Token = "0x4000771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private int[][] powerPunchesLanded;

		[Token(Token = "0x4000772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int[][] powerPunchesTotal;

		[Token(Token = "0x4000773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float[] playerMultiplier;

		[Token(Token = "0x4000774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float[] playerHookMultiplier;

		[Token(Token = "0x4000775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool isCountingDown;

		[Token(Token = "0x4000776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float knockdownTimer;

		[Token(Token = "0x4000777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private bool boutActive;

		[Token(Token = "0x4000778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
		private bool boutOverByKO;

		[Token(Token = "0x4000779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9E")]
		private bool boutOverByTKO;

		[Token(Token = "0x400077A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private bool[] boxerDown;

		[Token(Token = "0x400077B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private ActionDelegate DelayedEvent;

		[Token(Token = "0x400077C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private bool isDelayedEvent;

		[Token(Token = "0x400077D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float delayTimer;

		[Token(Token = "0x400077E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private int[] scoreHolder;

		[Token(Token = "0x17000123")]
		public static BoxerController[] allBoxers
		{
			[Token(Token = "0x6000DC0")]
			[Address(RVA = "0x3E0160", Offset = "0x3E0160", VA = "0x3E0160")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000124")]
		private BoxerController[] boxers
		{
			[Token(Token = "0x6000DC1")]
			[Address(RVA = "0x3E0200", Offset = "0x3E0200", VA = "0x3E0200")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2491F8", Offset = "0x2491F8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DC2")]
			[Address(RVA = "0x3E0208", Offset = "0x3E0208", VA = "0x3E0208")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249208", Offset = "0x249208")]
			set
			{
			}
		}

		[Token(Token = "0x17000125")]
		private AnnouncerController announcer
		{
			[Token(Token = "0x6000DC3")]
			[Address(RVA = "0x3E0210", Offset = "0x3E0210", VA = "0x3E0210")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000126")]
		private RefereeController referee
		{
			[Token(Token = "0x6000DC4")]
			[Address(RVA = "0x3E0270", Offset = "0x3E0270", VA = "0x3E0270")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DC5")]
		[Address(RVA = "0x3E02D0", Offset = "0x3E02D0", VA = "0x3E02D0")]
		public static float GetBreakTime()
		{
			return default(float);
		}

		[Token(Token = "0x6000DC6")]
		[Address(RVA = "0x3E0370", Offset = "0x3E0370", VA = "0x3E0370")]
		public static float GetRound()
		{
			return default(float);
		}

		[Token(Token = "0x6000DC7")]
		[Address(RVA = "0x3E0418", Offset = "0x3E0418", VA = "0x3E0418")]
		public static void AddDamage(Corner corner, float damage, float painThreshold)
		{
		}

		[Token(Token = "0x6000DC8")]
		[Address(RVA = "0x3E06C0", Offset = "0x3E06C0", VA = "0x3E06C0")]
		public static void AddDamageToRed(float damage, float painThreshold)
		{
		}

		[Token(Token = "0x6000DC9")]
		[Address(RVA = "0x3E074C", Offset = "0x3E074C", VA = "0x3E074C")]
		public static void AddDamageToBlue(float damage, float painThreshold)
		{
		}

		[Token(Token = "0x6000DCA")]
		[Address(RVA = "0x3E07D8", Offset = "0x3E07D8", VA = "0x3E07D8")]
		public static void Continue()
		{
		}

		[Token(Token = "0x6000DCB")]
		[Address(RVA = "0x3E0DC8", Offset = "0x3E0DC8", VA = "0x3E0DC8")]
		public static void BoxerKnockedDown(Corner corner)
		{
		}

		[Token(Token = "0x6000DCC")]
		[Address(RVA = "0x3E19DC", Offset = "0x3E19DC", VA = "0x3E19DC")]
		public static void RedKnockedDown()
		{
		}

		[Token(Token = "0x6000DCD")]
		[Address(RVA = "0x3E1A58", Offset = "0x3E1A58", VA = "0x3E1A58")]
		public static void BlueKnockedDown()
		{
		}

		[Token(Token = "0x6000DCE")]
		[Address(RVA = "0x3E1AD4", Offset = "0x3E1AD4", VA = "0x3E1AD4")]
		public void RedSwingTaken(bool isJab)
		{
		}

		[Token(Token = "0x6000DCF")]
		[Address(RVA = "0x3E1C84", Offset = "0x3E1C84", VA = "0x3E1C84")]
		public void BlueSwingTaken(bool isJab)
		{
		}

		[Token(Token = "0x6000DD0")]
		[Address(RVA = "0x3E1ADC", Offset = "0x3E1ADC", VA = "0x3E1ADC")]
		public void BoxerSwingTaken(bool isJab, Corner corner)
		{
		}

		[Token(Token = "0x6000DD1")]
		[Address(RVA = "0x3E1C8C", Offset = "0x3E1C8C", VA = "0x3E1C8C")]
		public void RedSwingLanded(bool isJab, float damage, float targetPainThreshold)
		{
		}

		[Token(Token = "0x6000DD2")]
		[Address(RVA = "0x3E1F00", Offset = "0x3E1F00", VA = "0x3E1F00")]
		public void BlueSwingLanded(bool isJab, float damage, float targetPainThreshold)
		{
		}

		[Token(Token = "0x6000DD3")]
		[Address(RVA = "0x3E1CB4", Offset = "0x3E1CB4", VA = "0x3E1CB4")]
		public void BoxerSwingLanded(bool isJab, Corner corner, float damage, float targetPainThreshold)
		{
		}

		[Token(Token = "0x6000DD4")]
		[Address(RVA = "0x3E1F28", Offset = "0x3E1F28", VA = "0x3E1F28")]
		public static void RedKnockedDownMovement()
		{
		}

		[Token(Token = "0x6000DD5")]
		[Address(RVA = "0x3E2054", Offset = "0x3E2054", VA = "0x3E2054")]
		public static void BlueKnockedDownMovement()
		{
		}

		[Token(Token = "0x6000DD6")]
		[Address(RVA = "0x3E14D4", Offset = "0x3E14D4", VA = "0x3E14D4")]
		private static Transform FindFarthestNeutralCorner(Vector3 farthestFromPoint)
		{
			return null;
		}

		[Token(Token = "0x6000DD7")]
		[Address(RVA = "0x3E2180", Offset = "0x3E2180", VA = "0x3E2180")]
		public static void Retire()
		{
		}

		[Token(Token = "0x6000DD8")]
		[Address(RVA = "0x3E2B68", Offset = "0x3E2B68", VA = "0x3E2B68")]
		public static bool IsFightHappening()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DD9")]
		[Address(RVA = "0x3E2CB4", Offset = "0x3E2CB4", VA = "0x3E2CB4")]
		public static void DisqualifyPlayer()
		{
		}

		[Token(Token = "0x6000DDA")]
		[Address(RVA = "0x3E2314", Offset = "0x3E2314", VA = "0x3E2314")]
		public void PauseBout()
		{
		}

		[Token(Token = "0x6000DDB")]
		[Address(RVA = "0x3E0AD0", Offset = "0x3E0AD0", VA = "0x3E0AD0")]
		public void StartBout()
		{
		}

		[Token(Token = "0x6000DDC")]
		[Address(RVA = "0x3E3AEC", Offset = "0x3E3AEC", VA = "0x3E3AEC")]
		public void EndBout()
		{
		}

		[Token(Token = "0x6000DDD")]
		[Address(RVA = "0x3E2A38", Offset = "0x3E2A38", VA = "0x3E2A38")]
		public static void ExitBout()
		{
		}

		[Token(Token = "0x6000DDE")]
		[Address(RVA = "0x3E2320", Offset = "0x3E2320", VA = "0x3E2320")]
		public void EndBoutByRetirement()
		{
		}

		[Token(Token = "0x6000DDF")]
		[Address(RVA = "0x3E3D90", Offset = "0x3E3D90", VA = "0x3E3D90")]
		public void EndBoutByDecision()
		{
		}

		[Token(Token = "0x6000DE0")]
		[Address(RVA = "0x3E4E5C", Offset = "0x3E4E5C", VA = "0x3E4E5C")]
		private void EndBoutByKnockout(Corner loser)
		{
		}

		[Token(Token = "0x6000DE1")]
		[Address(RVA = "0x3E2F1C", Offset = "0x3E2F1C", VA = "0x3E2F1C")]
		private void EndBoutByTKO(Corner loser)
		{
		}

		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0x3E5AE0", Offset = "0x3E5AE0", VA = "0x3E5AE0")]
		public void StartBreak()
		{
		}

		[Token(Token = "0x6000DE3")]
		[Address(RVA = "0x3E5CA0", Offset = "0x3E5CA0", VA = "0x3E5CA0")]
		public void StartBreakMovement()
		{
		}

		[Token(Token = "0x6000DE4")]
		[Address(RVA = "0x3E0B80", Offset = "0x3E0B80", VA = "0x3E0B80")]
		public void EndBreak()
		{
		}

		[Token(Token = "0x6000DE5")]
		[Address(RVA = "0x3E0B90", Offset = "0x3E0B90", VA = "0x3E0B90")]
		public void StartRound()
		{
		}

		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0x3E5F08", Offset = "0x3E5F08", VA = "0x3E5F08")]
		public void RefStartRound()
		{
		}

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0x3E61D4", Offset = "0x3E61D4", VA = "0x3E61D4")]
		public void StartRoundMovement()
		{
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0x3E626C", Offset = "0x3E626C", VA = "0x3E626C")]
		public void EndRound()
		{
		}

		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0x3E6740", Offset = "0x3E6740", VA = "0x3E6740")]
		private void CalculateRoundScore()
		{
		}

		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0x3E6BE8", Offset = "0x3E6BE8", VA = "0x3E6BE8")]
		private int[] CalculateRoundScoreForJudge()
		{
			return null;
		}

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0x3E6EAC", Offset = "0x3E6EAC", VA = "0x3E6EAC")]
		public static BoutResults.Winner GetCurrentWinner()
		{
			return default(BoutResults.Winner);
		}

		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0x3E6FE0", Offset = "0x3E6FE0", VA = "0x3E6FE0")]
		public BoutResults.Winner GetCurrentWinnerInstance(bool debug = false)
		{
			return default(BoutResults.Winner);
		}

		[Token(Token = "0x6000DED")]
		[Address(RVA = "0x3E4BB0", Offset = "0x3E4BB0", VA = "0x3E4BB0")]
		private void CalculateBoutScoreForJudge(ref int[] score, int judge)
		{
		}

		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0x3E4DBC", Offset = "0x3E4DBC", VA = "0x3E4DBC")]
		private void PostMatchSetup()
		{
		}

		[Token(Token = "0x6000DEF")]
		[Address(RVA = "0x3E7378", Offset = "0x3E7378", VA = "0x3E7378")]
		public void PostMatchSetupAction()
		{
		}

		[Token(Token = "0x6000DF0")]
		[Address(RVA = "0x3E77D0", Offset = "0x3E77D0", VA = "0x3E77D0")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000DF1")]
		[Address(RVA = "0x3E96C8", Offset = "0x3E96C8", VA = "0x3E96C8")]
		public void Start()
		{
		}

		[Token(Token = "0x6000DF2")]
		[Address(RVA = "0x3E1718", Offset = "0x3E1718", VA = "0x3E1718")]
		private void PrepareDelayedEvent(ActionDelegate eventFunction, float delay = 0f, bool prepareBoxers = true)
		{
		}

		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0x3E9B28", Offset = "0x3E9B28", VA = "0x3E9B28")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0x3E9BC0", Offset = "0x3E9BC0", VA = "0x3E9BC0")]
		public void Update()
		{
		}

		[Token(Token = "0x6000DF5")]
		[Address(RVA = "0x3EA898", Offset = "0x3EA898", VA = "0x3EA898")]
		private void PrepareGetUpMovement(Corner cornerGettingUp)
		{
		}

		[Token(Token = "0x6000DF6")]
		[Address(RVA = "0x3EAAAC", Offset = "0x3EAAAC", VA = "0x3EAAAC")]
		private void RefPrepareGetUpHoldBack()
		{
		}

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0x3EAB24", Offset = "0x3EAB24", VA = "0x3EAB24")]
		private void RefPrepareGetUpRedHoldBack()
		{
		}

		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0x3EAC00", Offset = "0x3EAC00", VA = "0x3EAC00")]
		private void RefPrepareGetUpBlueHoldBack()
		{
		}

		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0x3EACDC", Offset = "0x3EACDC", VA = "0x3EACDC")]
		private void RefPrepareGetUp()
		{
		}

		[Token(Token = "0x6000DFA")]
		[Address(RVA = "0x3EAE0C", Offset = "0x3EAE0C", VA = "0x3EAE0C")]
		private void RefPrepareGetUpRed()
		{
		}

		[Token(Token = "0x6000DFB")]
		[Address(RVA = "0x3EAEB4", Offset = "0x3EAEB4", VA = "0x3EAEB4")]
		private void RefPrepareGetUpBlue()
		{
		}

		[Token(Token = "0x6000DFC")]
		[Address(RVA = "0x3EAF5C", Offset = "0x3EAF5C", VA = "0x3EAF5C")]
		private void RedGettingUpMovement()
		{
		}

		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0x3EB01C", Offset = "0x3EB01C", VA = "0x3EB01C")]
		private void BlueGettingUpMovement()
		{
		}

		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0x3DC598", Offset = "0x3DC598", VA = "0x3DC598")]
		public static void WinnerAnnounced(Corner corner)
		{
		}

		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0x3EB0DC", Offset = "0x3EB0DC", VA = "0x3EB0DC")]
		public static bool InBoutScene()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0x3EB1A4", Offset = "0x3EB1A4", VA = "0x3EB1A4")]
		public BoutController()
		{
		}
	}
	[Token(Token = "0x20001D5")]
	public class BoutResults
	{
		[Token(Token = "0x20002E1")]
		public enum WinCondition
		{
			[Token(Token = "0x400102F")]
			Decision,
			[Token(Token = "0x4001030")]
			Knockout,
			[Token(Token = "0x4001031")]
			TKO,
			[Token(Token = "0x4001032")]
			Retirement
		}

		[Token(Token = "0x20002E2")]
		public enum Winner
		{
			[Token(Token = "0x4001034")]
			Draw,
			[Token(Token = "0x4001035")]
			Red,
			[Token(Token = "0x4001036")]
			Blue
		}

		[Token(Token = "0x400077F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool customizedBattle;

		[Token(Token = "0x4000780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public static bool extraBattle;

		[Token(Token = "0x4000781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static int wentToRound;

		[Token(Token = "0x4000782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static int roundsFought;

		[Token(Token = "0x4000783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static int redScoredCount;

		[Token(Token = "0x4000784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static int blueScoredCount;

		[Token(Token = "0x4000785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static int drawScoredCount;

		[Token(Token = "0x4000786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static WinCondition winCondition;

		[Token(Token = "0x4000787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public static Winner winner;

		[Token(Token = "0x4000788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static int[][][] scores;

		[Token(Token = "0x4000789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public static bool showScore;

		[Token(Token = "0x400078A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public static bool justFinishedBout;

		[Token(Token = "0x400078B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static int[][] scoreTally;

		[Token(Token = "0x400078C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public static string defeatedBoxer;

		[Token(Token = "0x400078D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static int[][] punchesLanded;

		[Token(Token = "0x400078E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public static int[][] punchesTotal;

		[Token(Token = "0x400078F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static int[][] damagingPunchesLanded;

		[Token(Token = "0x4000790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public static int[][] damageTaken;

		[Token(Token = "0x4000791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static int[][] knockdowns;

		[Token(Token = "0x4000792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public static int[][] jabsLanded;

		[Token(Token = "0x4000793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static int[][] jabsTotal;

		[Token(Token = "0x4000794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public static int[][] powerPunchesLanded;

		[Token(Token = "0x4000795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static int[][] powerPunchesTotal;

		[Token(Token = "0x4000796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public static float[] playerMultiplier;

		[Token(Token = "0x4000797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static float[] playerHookMultiplier;

		[Token(Token = "0x4000798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public static string redCornerName;

		[Token(Token = "0x4000799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static string blueCornerName;

		[Token(Token = "0x6000E02")]
		[Address(RVA = "0x3EB338", Offset = "0x3EB338", VA = "0x3EB338")]
		public BoutResults()
		{
		}
	}
	[Token(Token = "0x20001D6")]
	public class BoutRules
	{
		[Token(Token = "0x400079A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string boxerResourceName;

		[Token(Token = "0x400079B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static int numberOfRounds;

		[Token(Token = "0x400079C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static float roundTime;

		[Token(Token = "0x400079D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static float breakTime;

		[Token(Token = "0x400079E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static int knockdownLimit;

		[Token(Token = "0x400079F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static float damageDifferenceToWin;

		[Token(Token = "0x40007A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static float judgeDecisionFuzziness;

		[Token(Token = "0x40007A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public static bool overrideBoxerStats;

		[Token(Token = "0x40007A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static float chin;

		[Token(Token = "0x40007A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public static float power;

		[Token(Token = "0x40007A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static float fistSpeed;

		[Token(Token = "0x40007A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public static float dodgeSpeed;

		[Token(Token = "0x40007A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static float blockSpeed;

		[Token(Token = "0x40007A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public static float aggression;

		[Token(Token = "0x40007A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static float traumaGainRate;

		[Token(Token = "0x40007A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public static float judgeStrictness;

		[Token(Token = "0x40007AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static float bodyRate;

		[Token(Token = "0x40007AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public static float jabRate;

		[Token(Token = "0x40007AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static float leftCrossRate;

		[Token(Token = "0x40007AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public static float rightCrossRate;

		[Token(Token = "0x40007AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static float leftHookRate;

		[Token(Token = "0x40007AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public static float rightHookRate;

		[Token(Token = "0x40007B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static float leftUppercutRate;

		[Token(Token = "0x40007B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public static float rightUppercutRate;

		[Token(Token = "0x40007B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static FightMenuManager.SelectedDifficulty difficulty;

		[Token(Token = "0x40007B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public static bool extraBattle;

		[Token(Token = "0x6000E04")]
		[Address(RVA = "0x3EB3C8", Offset = "0x3EB3C8", VA = "0x3EB3C8")]
		public BoutRules()
		{
		}
	}
	[Token(Token = "0x20001D7")]
	public class BoxerController : MonoBehaviour
	{
		[Token(Token = "0x20002E3")]
		public delegate void SwingTakenEvent(bool isJab);

		[Token(Token = "0x20002E4")]
		public delegate void SwingLandedEvent(bool isJab, float damage, float targetPainThreshold);

		[Token(Token = "0x20002E5")]
		public delegate void KnockedDownEvent();

		[Token(Token = "0x20002E6")]
		public delegate void TakeDamageEvent(float damage, float victimPainThreshold);

		[Serializable]
		[Token(Token = "0x20002E7")]
		public class DamageThreshold
		{
			[Token(Token = "0x4001037")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float damage;

			[Token(Token = "0x4001038")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public bool canRock;

			[Token(Token = "0x4001039")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float chanceToFloor;

			[Token(Token = "0x400103A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float minimumFloorTime;

			[Token(Token = "0x60014B9")]
			[Address(RVA = "0x3EECA0", Offset = "0x3EECA0", VA = "0x3EECA0")]
			public DamageThreshold()
			{
			}
		}

		[Token(Token = "0x40007B4")]
		public const float MaxExpectedPunchForce = 3600f;

		[Token(Token = "0x40007B5")]
		public const float MaxExpectedPunchDamage = 4680f;

		[Token(Token = "0x40007B6")]
		public const float BaseEffectiveMass = 3.636f;

		[Token(Token = "0x40007B7")]
		public const float clinchRange = 0.35f;

		[Token(Token = "0x40007B8")]
		public const float bodyHitModifier = 1f;

		[Token(Token = "0x40007B9")]
		public const float otherHitModifier = 0.75f;

		[Token(Token = "0x40007BA")]
		public const float DefaultPainThreshold = 2700f;

		[Token(Token = "0x40007BB")]
		public const float DefaultLightsOutThreshold = 4280f;

		[Token(Token = "0x40007BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public SwingTakenEvent OnSwingTaken;

		[Token(Token = "0x40007BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SwingLandedEvent OnSwingLanded;

		[Token(Token = "0x40007BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x245EC4", Offset = "0x245EC4")]
		private string <boxerName>k__BackingField;

		[Token(Token = "0x40007BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Texture2D cutoutPhoto;

		[Token(Token = "0x40007C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Transform head;

		[Token(Token = "0x40007C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform eyes;

		[Token(Token = "0x40007C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public KnockedDownEvent OnKnockdown;

		[Token(Token = "0x40007C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform headRotationPoint;

		[Token(Token = "0x40007C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		protected float kdLightsOutDamageThreshold;

		[Token(Token = "0x40007C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected float painThreshold;

		[Token(Token = "0x40007C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		protected float outColdThreshold;

		[Token(Token = "0x40007C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float minimumTimeOnFloor;

		[Token(Token = "0x40007C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static float baseLightsOutTimeOnFloor;

		[Token(Token = "0x40007C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static float extraTimeOnFloorPerDamage;

		[Token(Token = "0x40007CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static float maxAdditionalTimeOnFloorFromTrauma;

		[Token(Token = "0x40007CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static float outColdTimeOnFloor;

		[Token(Token = "0x40007CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected bool isBlocking;

		[Token(Token = "0x40007CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public TakeDamageEvent OnTakeDamage;

		[Token(Token = "0x40007CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x245ED4", Offset = "0x245ED4")]
		private int <collisionLayerMask>k__BackingField;

		[Token(Token = "0x40007CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x245EE4", Offset = "0x245EE4")]
		private int <blockboxLayerMask>k__BackingField;

		[Token(Token = "0x40007D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float maxTimeBeforeKnockdownMovement;

		[Token(Token = "0x40007D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		protected bool isFighting;

		[Token(Token = "0x40007D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected float chinModifier;

		[Token(Token = "0x40007D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		protected float powerModifier;

		[Token(Token = "0x40007D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected float fistSpeedModifier;

		[Token(Token = "0x40007D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		protected float dodgeSpeedModifier;

		[Token(Token = "0x40007D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected float blockSpeedModifier;

		[Token(Token = "0x40007D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		protected float aggressionModifier;

		[Token(Token = "0x40007D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x245EF4", Offset = "0x245EF4")]
		private BoutController.Corner <corner>k__BackingField;

		[Token(Token = "0x40007D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static float PunchImpulseTime;

		[Token(Token = "0x40007DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Transform rootParent;

		[Token(Token = "0x40007DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x245F04", Offset = "0x245F04")]
		public bool canDizzy;

		[Token(Token = "0x40007DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x245F38", Offset = "0x245F38")]
		private float <dizzyLevel>k__BackingField;

		[Token(Token = "0x40007DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected float slightlyDizzyThreshold;

		[Token(Token = "0x40007DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		protected float veryDizzyThreshold;

		[Token(Token = "0x40007DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x245F48", Offset = "0x245F48")]
		protected float dizzyMax;

		[Token(Token = "0x40007E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected float dizzyRegen;

		[Token(Token = "0x40007E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected float dizzyHitThreshold;

		[Token(Token = "0x40007E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		protected float roundMultiplier;

		[Token(Token = "0x40007E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x245FA4", Offset = "0x245FA4")]
		public float headTraumaMultiplier;

		[Token(Token = "0x40007E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected float traumaDamage;

		[Token(Token = "0x40007E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected float traumaCoefficient;

		[Token(Token = "0x40007E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x245FD8", Offset = "0x245FD8")]
		public float bodyPainMultiplier;

		[Token(Token = "0x40007E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected float painDamage;

		[Token(Token = "0x40007E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected float painCoefficient;

		[Token(Token = "0x40007E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public GameObject[] colliderIgnoreList;

		[Token(Token = "0x40007EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private HitZone[] hitZones;

		[Token(Token = "0x40007EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Hitbox[] hitboxes;

		[Token(Token = "0x40007EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private Hurtbox[] hurtboxes;

		[Token(Token = "0x40007ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Blockbox[] blockboxes;

		[Token(Token = "0x40007EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Collider[] colliders;

		[Token(Token = "0x40007EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int[] colliderLayers;

		[Token(Token = "0x40007F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24600C", Offset = "0x24600C")]
		private float <knockdownTimer>k__BackingField;

		[Token(Token = "0x40007F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24601C", Offset = "0x24601C")]
		private bool <isDown>k__BackingField;

		[Token(Token = "0x40007F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24602C", Offset = "0x24602C")]
		private bool <stayDown>k__BackingField;

		[Token(Token = "0x40007F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24603C", Offset = "0x24603C")]
		private Transform <farthestNeutralCorner>k__BackingField;

		[Token(Token = "0x17000127")]
		public string boxerName
		{
			[Token(Token = "0x6000E06")]
			[Address(RVA = "0x3EB514", Offset = "0x3EB514", VA = "0x3EB514")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249218", Offset = "0x249218")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E07")]
			[Address(RVA = "0x3EB51C", Offset = "0x3EB51C", VA = "0x3EB51C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249228", Offset = "0x249228")]
			set
			{
			}
		}

		[Token(Token = "0x17000128")]
		public int collisionLayerMask
		{
			[Token(Token = "0x6000E08")]
			[Address(RVA = "0x3EB524", Offset = "0x3EB524", VA = "0x3EB524")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249238", Offset = "0x249238")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E09")]
			[Address(RVA = "0x3EB52C", Offset = "0x3EB52C", VA = "0x3EB52C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249248", Offset = "0x249248")]
			set
			{
			}
		}

		[Token(Token = "0x17000129")]
		public int blockboxLayerMask
		{
			[Token(Token = "0x6000E0A")]
			[Address(RVA = "0x3EB534", Offset = "0x3EB534", VA = "0x3EB534")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249258", Offset = "0x249258")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E0B")]
			[Address(RVA = "0x3EB53C", Offset = "0x3EB53C", VA = "0x3EB53C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249268", Offset = "0x249268")]
			set
			{
			}
		}

		[Token(Token = "0x1700012A")]
		public BoutController.Corner corner
		{
			[Token(Token = "0x6000E0C")]
			[Address(RVA = "0x3EB544", Offset = "0x3EB544", VA = "0x3EB544")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249278", Offset = "0x249278")]
			get
			{
				return default(BoutController.Corner);
			}
			[Token(Token = "0x6000E0D")]
			[Address(RVA = "0x3EB54C", Offset = "0x3EB54C", VA = "0x3EB54C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249288", Offset = "0x249288")]
			set
			{
			}
		}

		[Token(Token = "0x1700012B")]
		public float dizzyLevel
		{
			[Token(Token = "0x6000E0E")]
			[Address(RVA = "0x3EB554", Offset = "0x3EB554", VA = "0x3EB554")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249298", Offset = "0x249298")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E0F")]
			[Address(RVA = "0x3EB55C", Offset = "0x3EB55C", VA = "0x3EB55C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2492A8", Offset = "0x2492A8")]
			set
			{
			}
		}

		[Token(Token = "0x1700012C")]
		public float knockdownTimer
		{
			[Token(Token = "0x6000E10")]
			[Address(RVA = "0x3EB564", Offset = "0x3EB564", VA = "0x3EB564")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2492B8", Offset = "0x2492B8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E11")]
			[Address(RVA = "0x3EB56C", Offset = "0x3EB56C", VA = "0x3EB56C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2492C8", Offset = "0x2492C8")]
			set
			{
			}
		}

		[Token(Token = "0x1700012D")]
		public bool isDown
		{
			[Token(Token = "0x6000E12")]
			[Address(RVA = "0x3EB574", Offset = "0x3EB574", VA = "0x3EB574")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2492D8", Offset = "0x2492D8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E13")]
			[Address(RVA = "0x3EB57C", Offset = "0x3EB57C", VA = "0x3EB57C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2492E8", Offset = "0x2492E8")]
			set
			{
			}
		}

		[Token(Token = "0x1700012E")]
		public bool stayDown
		{
			[Token(Token = "0x6000E14")]
			[Address(RVA = "0x3EB584", Offset = "0x3EB584", VA = "0x3EB584")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2492F8", Offset = "0x2492F8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E15")]
			[Address(RVA = "0x3EB58C", Offset = "0x3EB58C", VA = "0x3EB58C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249308", Offset = "0x249308")]
			set
			{
			}
		}

		[Token(Token = "0x1700012F")]
		public Transform farthestNeutralCorner
		{
			[Token(Token = "0x6000E16")]
			[Address(RVA = "0x3EB594", Offset = "0x3EB594", VA = "0x3EB594")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249318", Offset = "0x249318")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E17")]
			[Address(RVA = "0x3EB59C", Offset = "0x3EB59C", VA = "0x3EB59C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249328", Offset = "0x249328")]
			set
			{
			}
		}

		[Token(Token = "0x6000E18")]
		[Address(RVA = "0x3EB5A4", Offset = "0x3EB5A4", VA = "0x3EB5A4")]
		[AttributeAttribute(Name = "InspectAttribute", RVA = "0x249338", Offset = "0x249338")]
		public void DizzyMe()
		{
		}

		[Token(Token = "0x6000E19")]
		[Address(RVA = "0x3EB5B0", Offset = "0x3EB5B0", VA = "0x3EB5B0")]
		[AttributeAttribute(Name = "InspectAttribute", RVA = "0x249348", Offset = "0x249348")]
		public void TraumatizeMe()
		{
		}

		[Token(Token = "0x6000E1A")]
		[Address(RVA = "0x3EB5C0", Offset = "0x3EB5C0", VA = "0x3EB5C0")]
		public void ClearVelocities()
		{
		}

		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0x3EB768", Offset = "0x3EB768", VA = "0x3EB768", Slot = "4")]
		public virtual void Awake()
		{
		}

		[Token(Token = "0x6000E1C")]
		[Address(RVA = "0x3EBCDC", Offset = "0x3EBCDC", VA = "0x3EBCDC", Slot = "5")]
		public virtual void Start()
		{
		}

		[Token(Token = "0x6000E1D")]
		[Address(RVA = "0x3EBCEC", Offset = "0x3EBCEC", VA = "0x3EBCEC", Slot = "6")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0x3EBDAC", Offset = "0x3EBDAC", VA = "0x3EBDAC", Slot = "7")]
		protected virtual void InitializeBoxes()
		{
		}

		[Token(Token = "0x6000E1F")]
		[Address(RVA = "0x3EBDB4", Offset = "0x3EBDB4", VA = "0x3EBDB4")]
		protected void IgnoreInternalColliders([Optional] GameObject[] ignoreList)
		{
		}

		[Token(Token = "0x6000E20")]
		[Address(RVA = "0x3EC010", Offset = "0x3EC010", VA = "0x3EC010")]
		public void RunBoxVelocityUpdates()
		{
		}

		[Token(Token = "0x6000E21")]
		[Address(RVA = "0x3EC130", Offset = "0x3EC130", VA = "0x3EC130", Slot = "8")]
		public virtual float CalculateMultiplierCorrection(Hitbox.PunchType punchType)
		{
			return default(float);
		}

		[Token(Token = "0x6000E22")]
		[Address(RVA = "0x3EC138", Offset = "0x3EC138", VA = "0x3EC138")]
		public void HandleHitboxCollision(Hitbox hitbox, Hurtbox hurtbox, Collision collision)
		{
		}

		[Token(Token = "0x6000E23")]
		[Address(RVA = "0x3EC8D4", Offset = "0x3EC8D4", VA = "0x3EC8D4")]
		public void HandleHitboxCollision(Hitbox hitbox, Blockbox blockbox, Collision collision)
		{
		}

		[Token(Token = "0x6000E24")]
		[Address(RVA = "0x3ECCCC", Offset = "0x3ECCCC", VA = "0x3ECCCC")]
		public void HandleHitboxCollision(Hitbox hitbox, Hitbox otherHitbox, Collision collision)
		{
		}

		[Token(Token = "0x6000E25")]
		[Address(RVA = "0x3ED230", Offset = "0x3ED230", VA = "0x3ED230")]
		public void HandleHitboxParryCollision(Hitbox hitbox, Blockbox parrybox, Collision collision)
		{
		}

		[Token(Token = "0x6000E26")]
		[Address(RVA = "0x3DFCDC", Offset = "0x3DFCDC", VA = "0x3DFCDC")]
		public void HandleParryboxCollision(Blockbox parrybox, Blockbox otherParrybox, Collision collision)
		{
		}

		[Token(Token = "0x6000E27")]
		[Address(RVA = "0x3ED7A0", Offset = "0x3ED7A0", VA = "0x3ED7A0")]
		public void ReceiveHurtboxCollision(float force, Hurtbox hurtbox, Hitbox hitbox, Collision collision)
		{
		}

		[Token(Token = "0x6000E28")]
		[Address(RVA = "0x3DFA6C", Offset = "0x3DFA6C", VA = "0x3DFA6C")]
		public void ReceiveBlock(float force, Hitbox hitbox, Collision collision, bool isMajorHit)
		{
		}

		[Token(Token = "0x6000E29")]
		[Address(RVA = "0x3EDB78", Offset = "0x3EDB78", VA = "0x3EDB78")]
		public void TakeDamage(float damage, Hurtbox.HurtboxType type, bool hitWeakSpot)
		{
		}

		[Token(Token = "0x6000E2A")]
		[Address(RVA = "0x3EDBE8", Offset = "0x3EDBE8", VA = "0x3EDBE8", Slot = "9")]
		public virtual void DirectDamageExternalResults(float damage, bool hitWeakSpot, Hurtbox.HurtboxType type, bool wasKnockedDown)
		{
		}

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0x3ED910", Offset = "0x3ED910", VA = "0x3ED910")]
		private float CalculateHitZoneMultiplier(Hurtbox hurtbox, Hitbox hitbox)
		{
			return default(float);
		}

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0x3EC654", Offset = "0x3EC654", VA = "0x3EC654")]
		private static float CalculateForce(Vector3 hitboxVelocity, float hitboxMass, Vector3 targetVelocity, float targetMass, float multiplierCorrection = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0x3EDB64", Offset = "0x3EDB64", VA = "0x3EDB64")]
		private float CalculateDamage(float force, float multiplier)
		{
			return default(float);
		}

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0x3EDBEC", Offset = "0x3EDBEC", VA = "0x3EDBEC", Slot = "10")]
		protected virtual bool ReceiveDamage(float damage, Hurtbox.HurtboxType hurtboxType, [Optional] Hurtbox hurtbox, [Optional] Hitbox hitbox)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0x3EE200", Offset = "0x3EE200", VA = "0x3EE200")]
		public bool IsBehindOnScore()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0x3EE298", Offset = "0x3EE298", VA = "0x3EE298")]
		public bool IsDizzy()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0x3EE2B0", Offset = "0x3EE2B0", VA = "0x3EE2B0")]
		public bool IsSlightlyDizzy()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0x3EE2D4", Offset = "0x3EE2D4", VA = "0x3EE2D4")]
		public bool IsVeryDizzy()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0x3EE2F8", Offset = "0x3EE2F8", VA = "0x3EE2F8")]
		public void EnableColliders()
		{
		}

		[Token(Token = "0x6000E34")]
		[Address(RVA = "0x3EE3E0", Offset = "0x3EE3E0", VA = "0x3EE3E0")]
		public void DisableColliders()
		{
		}

		[Token(Token = "0x6000E35")]
		[Address(RVA = "0x3EE494", Offset = "0x3EE494", VA = "0x3EE494")]
		public Transform GetLookTarget()
		{
			return null;
		}

		[Token(Token = "0x6000E36")]
		[Address(RVA = "0x3EE530", Offset = "0x3EE530", VA = "0x3EE530", Slot = "11")]
		public virtual Transform GetPositionTransform()
		{
			return null;
		}

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0x3EE538", Offset = "0x3EE538", VA = "0x3EE538")]
		public HitZone[] GetHitZones()
		{
			return null;
		}

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0x3EE540", Offset = "0x3EE540", VA = "0x3EE540", Slot = "12")]
		public virtual string GetName()
		{
			return null;
		}

		[Token(Token = "0x6000E39")]
		[Address(RVA = "0x3EE574", Offset = "0x3EE574", VA = "0x3EE574", Slot = "13")]
		public virtual string GetDefeatName()
		{
			return null;
		}

		[Token(Token = "0x6000E3A")]
		[Address(RVA = "0x3EE5D0", Offset = "0x3EE5D0", VA = "0x3EE5D0", Slot = "14")]
		public virtual bool CanTakeDamage()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E3B")]
		[Address(RVA = "0x3EE5F4", Offset = "0x3EE5F4", VA = "0x3EE5F4", Slot = "15")]
		protected virtual void HurtboxCollisionVisualResult(float damage, float force, bool wasKnockedDown, Hurtbox hurtbox, Hitbox hitbox, Collision collision)
		{
		}

		[Token(Token = "0x6000E3C")]
		[Address(RVA = "0x3EE5F8", Offset = "0x3EE5F8", VA = "0x3EE5F8", Slot = "16")]
		protected virtual void HurtboxCollisionAudioResult(float damage, float force, bool wasKnockedDown, Hurtbox hurtbox, Hitbox hitbox, Collision collision, bool hitWeakSpot = false)
		{
		}

		[Token(Token = "0x6000E3D")]
		[Address(RVA = "0x3EE6DC", Offset = "0x3EE6DC", VA = "0x3EE6DC", Slot = "17")]
		protected virtual void BlockVisualResult(float force, Hitbox hitbox, Collision collision, bool isMajorHit)
		{
		}

		[Token(Token = "0x6000E3E")]
		[Address(RVA = "0x3EE6E0", Offset = "0x3EE6E0", VA = "0x3EE6E0", Slot = "18")]
		protected virtual void BlockAudioResult(float force, Collision collision, bool isMajorHit)
		{
		}

		[Token(Token = "0x6000E3F")]
		[Address(RVA = "0x3EE770", Offset = "0x3EE770", VA = "0x3EE770")]
		public void Footfall()
		{
		}

		[Token(Token = "0x6000E40")]
		[Address(RVA = "0x3EE774", Offset = "0x3EE774", VA = "0x3EE774", Slot = "19")]
		public virtual void PlayKnockdownSound()
		{
		}

		[Token(Token = "0x6000E41")]
		[Address(RVA = "0x3EE7BC", Offset = "0x3EE7BC", VA = "0x3EE7BC", Slot = "20")]
		protected virtual void Knockdown(Hurtbox hurtbox, Hitbox hitbox)
		{
		}

		[Token(Token = "0x6000E42")]
		[Address(RVA = "0x3EEA10", Offset = "0x3EEA10", VA = "0x3EEA10", Slot = "21")]
		public virtual void PrepareForEvent(float delay)
		{
		}

		[Token(Token = "0x6000E43")]
		[Address(RVA = "0x3EEA14", Offset = "0x3EEA14", VA = "0x3EEA14", Slot = "22")]
		public virtual void PreMatchSetup()
		{
		}

		[Token(Token = "0x6000E44")]
		[Address(RVA = "0x3EEA18", Offset = "0x3EEA18", VA = "0x3EEA18", Slot = "23")]
		public virtual void PrepareToStartRound()
		{
		}

		[Token(Token = "0x6000E45")]
		[Address(RVA = "0x3EEA1C", Offset = "0x3EEA1C", VA = "0x3EEA1C", Slot = "24")]
		public virtual void StartRound()
		{
		}

		[Token(Token = "0x6000E46")]
		[Address(RVA = "0x3EEA20", Offset = "0x3EEA20", VA = "0x3EEA20", Slot = "25")]
		public virtual void StartRoundMovement()
		{
		}

		[Token(Token = "0x6000E47")]
		[Address(RVA = "0x3EEA24", Offset = "0x3EEA24", VA = "0x3EEA24", Slot = "26")]
		public virtual void EndRound()
		{
		}

		[Token(Token = "0x6000E48")]
		[Address(RVA = "0x3EEA28", Offset = "0x3EEA28", VA = "0x3EEA28", Slot = "27")]
		public virtual void StartBreakMovement()
		{
		}

		[Token(Token = "0x6000E49")]
		[Address(RVA = "0x3EEA2C", Offset = "0x3EEA2C", VA = "0x3EEA2C", Slot = "28")]
		public virtual void ScoredKnockdownAction()
		{
		}

		[Token(Token = "0x6000E4A")]
		[Address(RVA = "0x3EEA30", Offset = "0x3EEA30", VA = "0x3EEA30", Slot = "29")]
		public virtual void KnockedDownMovement()
		{
		}

		[Token(Token = "0x6000E4B")]
		[Address(RVA = "0x3EEA34", Offset = "0x3EEA34", VA = "0x3EEA34", Slot = "30")]
		public virtual void GoToFarthestNeutralCorner()
		{
		}

		[Token(Token = "0x6000E4C")]
		[Address(RVA = "0x3EEA38", Offset = "0x3EEA38", VA = "0x3EEA38", Slot = "31")]
		public virtual void GetUpMovement()
		{
		}

		[Token(Token = "0x6000E4D")]
		[Address(RVA = "0x3EEA3C", Offset = "0x3EEA3C", VA = "0x3EEA3C", Slot = "32")]
		public virtual void ResumeFighting()
		{
		}

		[Token(Token = "0x6000E4E")]
		[Address(RVA = "0x3EEA40", Offset = "0x3EEA40", VA = "0x3EEA40", Slot = "33")]
		public virtual void ResumeFightingMovement()
		{
		}

		[Token(Token = "0x6000E4F")]
		[Address(RVA = "0x3EEA44", Offset = "0x3EEA44", VA = "0x3EEA44", Slot = "34")]
		public virtual void PostMatchMovement()
		{
		}

		[Token(Token = "0x6000E50")]
		[Address(RVA = "0x3EEA48", Offset = "0x3EEA48", VA = "0x3EEA48", Slot = "35")]
		public virtual void ReportMatchResults(bool isAWin, bool isADraw, string opponentDefeatName, FightMenuManager.SelectedDifficulty difficulty)
		{
		}

		[Token(Token = "0x6000E51")]
		[Address(RVA = "0x3EEA4C", Offset = "0x3EEA4C", VA = "0x3EEA4C", Slot = "36")]
		public virtual void CelebrateWin()
		{
		}

		[Token(Token = "0x6000E52")]
		[Address(RVA = "0x3EEA50", Offset = "0x3EEA50", VA = "0x3EEA50", Slot = "37")]
		public virtual void MournLoss()
		{
		}

		[Token(Token = "0x6000E53")]
		[Address(RVA = "0x3EEA54", Offset = "0x3EEA54", VA = "0x3EEA54", Slot = "38")]
		public virtual Vector3 PredictHitZoneMovement(float afterSeconds)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E54")]
		[Address(RVA = "0x3EEAD8", Offset = "0x3EEAD8", VA = "0x3EEAD8", Slot = "39")]
		public virtual void HitTheRopes()
		{
		}

		[Token(Token = "0x6000E55")]
		[Address(RVA = "0x3EEADC", Offset = "0x3EEADC", VA = "0x3EEADC", Slot = "40")]
		public virtual bool IsBlocking()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E56")]
		[Address(RVA = "0x3EEAE4", Offset = "0x3EEAE4", VA = "0x3EEAE4", Slot = "41")]
		public virtual void SetHandicapValues(float chinValue, float powerValue, float fistSpeedValue, float dodgeSpeedValue, float blockSpeedValue, float aggressionValue)
		{
		}

		[Token(Token = "0x6000E57")]
		[Address(RVA = "0x3EEB28", Offset = "0x3EEB28", VA = "0x3EEB28", Slot = "42")]
		public virtual void SetPunchRatioValues(float bodyRate, float jabRate, float leftCrossRate, float rightCrossRate, float leftHookRate, float rightHookRate, float leftUppercutRate, float rightUppercutRate)
		{
		}

		[Token(Token = "0x6000E58")]
		[Address(RVA = "0x3EEB2C", Offset = "0x3EEB2C", VA = "0x3EEB2C")]
		public void PunchThrown()
		{
		}

		[Token(Token = "0x6000E59")]
		[Address(RVA = "0x3EEB30", Offset = "0x3EEB30", VA = "0x3EEB30")]
		public void PunchLanded()
		{
		}

		[Token(Token = "0x6000E5A")]
		[Address(RVA = "0x3EEB34", Offset = "0x3EEB34", VA = "0x3EEB34", Slot = "43")]
		public virtual float GetClosestAllowedDistance(Vector3 startPosition, Vector3 endPosition, float extraDistance)
		{
			return default(float);
		}

		[Token(Token = "0x6000E5B")]
		[Address(RVA = "0x3EEB3C", Offset = "0x3EEB3C", VA = "0x3EEB3C", Slot = "44")]
		public virtual void RecoverFatigue(float recoveryTime)
		{
		}

		[Token(Token = "0x6000E5C")]
		[Address(RVA = "0x3EEB40", Offset = "0x3EEB40", VA = "0x3EEB40")]
		public void SetRoundMultiplier(float newMultiplier)
		{
		}

		[Token(Token = "0x6000E5D")]
		[Address(RVA = "0x3EEB48", Offset = "0x3EEB48", VA = "0x3EEB48")]
		public BoxerController()
		{
		}
	}
	[Token(Token = "0x20001D8")]
	public class BoxingDummyCollider : Equipment, IFixedUpdateable
	{
		[Token(Token = "0x40007F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public BoxingDummyController controller;

		[Token(Token = "0x40007F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24604C", Offset = "0x24604C")]
		private DummyHitZone[] <hitZones>k__BackingField;

		[Token(Token = "0x40007F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform model;

		[Token(Token = "0x40007F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24605C", Offset = "0x24605C")]
		private Vector3 <lastFixedUpdatePosition>k__BackingField;

		[Token(Token = "0x40007F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24606C", Offset = "0x24606C")]
		private Quaternion <lastFixedUpdateRotation>k__BackingField;

		[Token(Token = "0x17000130")]
		public DummyHitZone[] hitZones
		{
			[Token(Token = "0x6000E5F")]
			[Address(RVA = "0x3EF3FC", Offset = "0x3EF3FC", VA = "0x3EF3FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249358", Offset = "0x249358")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E60")]
			[Address(RVA = "0x3EF404", Offset = "0x3EF404", VA = "0x3EF404")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249368", Offset = "0x249368")]
			set
			{
			}
		}

		[Token(Token = "0x17000131")]
		public Vector3 lastFixedUpdatePosition
		{
			[Token(Token = "0x6000E61")]
			[Address(RVA = "0x3EF40C", Offset = "0x3EF40C", VA = "0x3EF40C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249378", Offset = "0x249378")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000E62")]
			[Address(RVA = "0x3EF420", Offset = "0x3EF420", VA = "0x3EF420")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249388", Offset = "0x249388")]
			set
			{
			}
		}

		[Token(Token = "0x17000132")]
		public Quaternion lastFixedUpdateRotation
		{
			[Token(Token = "0x6000E63")]
			[Address(RVA = "0x3EF42C", Offset = "0x3EF42C", VA = "0x3EF42C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249398", Offset = "0x249398")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6000E64")]
			[Address(RVA = "0x3EF43C", Offset = "0x3EF43C", VA = "0x3EF43C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2493A8", Offset = "0x2493A8")]
			set
			{
			}
		}

		[Token(Token = "0x6000E65")]
		[Address(RVA = "0x3EF44C", Offset = "0x3EF44C", VA = "0x3EF44C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E66")]
		[Address(RVA = "0x3EF454", Offset = "0x3EF454", VA = "0x3EF454")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000E67")]
		[Address(RVA = "0x3EF45C", Offset = "0x3EF45C", VA = "0x3EF45C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000E68")]
		[Address(RVA = "0x3EF544", Offset = "0x3EF544", VA = "0x3EF544", Slot = "5")]
		public void CustomFixedUpdate()
		{
		}

		[Token(Token = "0x6000E69")]
		[Address(RVA = "0x3EF5C8", Offset = "0x3EF5C8", VA = "0x3EF5C8")]
		public void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000E6A")]
		[Address(RVA = "0x3F0028", Offset = "0x3F0028", VA = "0x3F0028")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E6B")]
		[Address(RVA = "0x3F0290", Offset = "0x3F0290", VA = "0x3F0290")]
		public BoxingDummyCollider()
		{
		}
	}
	[Token(Token = "0x20001D9")]
	public class BoxingDummyController : MonoBehaviour
	{
		[Token(Token = "0x40007F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static BoxingDummyController instance;

		[Token(Token = "0x40007FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Transform trainer;

		[Token(Token = "0x40007FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public BoxingDummyCollider colliderParent;

		[Token(Token = "0x40007FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public AudioSource audioSource;

		[Token(Token = "0x40007FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SpectatorCamera spectatorCamera;

		[Token(Token = "0x40007FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public GameObject uiCanvas;

		[Token(Token = "0x40007FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HitRecapUI lastHitUI;

		[Token(Token = "0x4000800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public HitRecapUI bestHitUI;

		[Token(Token = "0x4000801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool initialized;

		[Token(Token = "0x4000802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Transform trainerSmallSpacePosition;

		[Token(Token = "0x4000803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform trainerLargeSpacePosition;

		[Token(Token = "0x4000804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float trainerSmallPositionWidth;

		[Token(Token = "0x4000805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float trainerSmallPositionDepth;

		[Token(Token = "0x4000806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float bestDamage;

		[Token(Token = "0x4000807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool eventOn;

		[Token(Token = "0x6000E6C")]
		[Address(RVA = "0x3F0298", Offset = "0x3F0298", VA = "0x3F0298")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000E6D")]
		[Address(RVA = "0x3F03BC", Offset = "0x3F03BC", VA = "0x3F03BC")]
		public static void InitializeDummy()
		{
		}

		[Token(Token = "0x6000E6E")]
		[Address(RVA = "0x3F06FC", Offset = "0x3F06FC", VA = "0x3F06FC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E6F")]
		[Address(RVA = "0x3F0490", Offset = "0x3F0490", VA = "0x3F0490")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6000E70")]
		[Address(RVA = "0x3F0C98", Offset = "0x3F0C98", VA = "0x3F0C98")]
		public void DeinitializeDummy()
		{
		}

		[Token(Token = "0x6000E71")]
		[Address(RVA = "0x3F0EAC", Offset = "0x3F0EAC", VA = "0x3F0EAC")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000E72")]
		[Address(RVA = "0x3F0F34", Offset = "0x3F0F34", VA = "0x3F0F34")]
		public void ResetBestHit()
		{
		}

		[Token(Token = "0x6000E73")]
		[Address(RVA = "0x3EF708", Offset = "0x3EF708", VA = "0x3EF708")]
		public void ColliderHit(Collision collision, PlayerFist hitbox, BoxingDummyCollider dummyCollider)
		{
		}

		[Token(Token = "0x6000E74")]
		[Address(RVA = "0x3F119C", Offset = "0x3F119C", VA = "0x3F119C")]
		public void Exit()
		{
		}

		[Token(Token = "0x6000E75")]
		[Address(RVA = "0x3F11A0", Offset = "0x3F11A0", VA = "0x3F11A0")]
		public void CloseButtonPressed()
		{
		}

		[Token(Token = "0x6000E76")]
		[Address(RVA = "0x3F12F8", Offset = "0x3F12F8", VA = "0x3F12F8")]
		public void PlaySpaceUpdated()
		{
		}

		[Token(Token = "0x6000E77")]
		[Address(RVA = "0x3F0848", Offset = "0x3F0848", VA = "0x3F0848")]
		public void MovePlayer()
		{
		}

		[Token(Token = "0x6000E78")]
		[Address(RVA = "0x3F12FC", Offset = "0x3F12FC", VA = "0x3F12FC")]
		public BoxingDummyController()
		{
		}
	}
	[Token(Token = "0x20001DA")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x241508", Offset = "0x241508")]
	public class CameraController : MonoBehaviour
	{
		[Token(Token = "0x20002E8")]
		private struct PositionStorage
		{
			[Token(Token = "0x400103B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 positionDelta;

			[Token(Token = "0x400103C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public float time;

			[Token(Token = "0x60014BA")]
			[Address(RVA = "0x2C0758", Offset = "0x2C0758", VA = "0x2C0758")]
			public PositionStorage(Vector3 newPositionDelta, float newTime)
			{
			}
		}

		[Token(Token = "0x20002E9")]
		private struct RotationStorage
		{
			[Token(Token = "0x400103D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float rotation;

			[Token(Token = "0x400103E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float time;

			[Token(Token = "0x60014BB")]
			[Address(RVA = "0x2C076C", Offset = "0x2C076C", VA = "0x2C076C")]
			public RotationStorage(float newRotation, float newTime)
			{
			}
		}

		[Token(Token = "0x4000808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private TotfImageEffects effects;

		[Token(Token = "0x4000809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool fading;

		[Token(Token = "0x400080A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool fadingOut;

		[Token(Token = "0x400080B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int fadeBounceCount;

		[Token(Token = "0x400080C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float targetBlink;

		[Token(Token = "0x400080D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool fadingBlack;

		[Token(Token = "0x400080E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		private bool fadingOutBlack;

		[Token(Token = "0x400080F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int fadeBlackBounceCount;

		[Token(Token = "0x4000810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float targetBlack;

		[Token(Token = "0x4000811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool fadingWhite;

		[Token(Token = "0x4000812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool fadingOutWhite;

		[Token(Token = "0x4000813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int fadeBounceCountWhite;

		[Token(Token = "0x4000814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float targetWhite;

		[Token(Token = "0x4000815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool fadingWhiteVignette;

		[Token(Token = "0x4000816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool fadingOutWhiteVignette;

		[Token(Token = "0x4000817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int fadeBounceCountWhiteVignette;

		[Token(Token = "0x4000818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float targetWhiteVignette;

		[Token(Token = "0x4000819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool shaking;

		[Token(Token = "0x400081A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		private bool shakingOut;

		[Token(Token = "0x400081B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int shakeBounceCount;

		[Token(Token = "0x400081C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float targetShake;

		[Token(Token = "0x400081D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 velocity;

		[Token(Token = "0x400081E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 positionLastUpdate;

		[Token(Token = "0x400081F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool isViewBlocked;

		[Token(Token = "0x4000820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		private bool wasViewBlocked;

		[Token(Token = "0x4000821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float positionStorageTime;

		[Token(Token = "0x4000822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<PositionStorage> positionStorage;

		[Token(Token = "0x4000823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static float rotationStorageTime;

		[Token(Token = "0x4000824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private List<RotationStorage> rotationStorage;

		[Token(Token = "0x6000E79")]
		[Address(RVA = "0x3F1310", Offset = "0x3F1310", VA = "0x3F1310")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E7A")]
		[Address(RVA = "0x3F13E0", Offset = "0x3F13E0", VA = "0x3F13E0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E7B")]
		[Address(RVA = "0x3F14FC", Offset = "0x3F14FC", VA = "0x3F14FC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E7C")]
		[Address(RVA = "0x3F1DEC", Offset = "0x3F1DEC", VA = "0x3F1DEC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000E7D")]
		[Address(RVA = "0x3F1EC4", Offset = "0x3F1EC4", VA = "0x3F1EC4")]
		public Vector3 GetVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E7E")]
		[Address(RVA = "0x3F1ED8", Offset = "0x3F1ED8", VA = "0x3F1ED8")]
		public void UpdateVelocity()
		{
		}

		[Token(Token = "0x6000E7F")]
		[Address(RVA = "0x3F236C", Offset = "0x3F236C", VA = "0x3F236C")]
		public Vector3 RecentMovementAdjustment(float afterSeconds)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E80")]
		[Address(RVA = "0x3F29A0", Offset = "0x3F29A0", VA = "0x3F29A0")]
		public float GetRecentRotationDelta()
		{
			return default(float);
		}

		[Token(Token = "0x6000E81")]
		[Address(RVA = "0x3F2B1C", Offset = "0x3F2B1C", VA = "0x3F2B1C")]
		public void SetBWLevel(float level)
		{
		}

		[Token(Token = "0x6000E82")]
		[Address(RVA = "0x3F2BC8", Offset = "0x3F2BC8", VA = "0x3F2BC8")]
		public void SetVignetteLevel(float level)
		{
		}

		[Token(Token = "0x6000E83")]
		[Address(RVA = "0x3F2C74", Offset = "0x3F2C74", VA = "0x3F2C74")]
		public void SetBlurLevel(float level)
		{
		}

		[Token(Token = "0x6000E84")]
		[Address(RVA = "0x3F2D20", Offset = "0x3F2D20", VA = "0x3F2D20")]
		public void SetDizzyLevel(float level)
		{
		}

		[Token(Token = "0x6000E85")]
		[Address(RVA = "0x3F2DCC", Offset = "0x3F2DCC", VA = "0x3F2DCC")]
		private void updateBlur()
		{
		}

		[Token(Token = "0x6000E86")]
		[Address(RVA = "0x3F2E64", Offset = "0x3F2E64", VA = "0x3F2E64")]
		public void Blackout()
		{
		}

		[Token(Token = "0x6000E87")]
		[Address(RVA = "0x3F2E94", Offset = "0x3F2E94", VA = "0x3F2E94")]
		public void FadeOut()
		{
		}

		[Token(Token = "0x6000E88")]
		[Address(RVA = "0x3F2EA8", Offset = "0x3F2EA8", VA = "0x3F2EA8")]
		public void FadeIn()
		{
		}

		[Token(Token = "0x6000E89")]
		[Address(RVA = "0x3F2EBC", Offset = "0x3F2EBC", VA = "0x3F2EBC")]
		public void FadeOutIn()
		{
		}

		[Token(Token = "0x6000E8A")]
		[Address(RVA = "0x3F1530", Offset = "0x3F1530", VA = "0x3F1530")]
		private void handleFade()
		{
		}

		[Token(Token = "0x6000E8B")]
		[Address(RVA = "0x3F2ED8", Offset = "0x3F2ED8", VA = "0x3F2ED8")]
		public void FadeOutBlack()
		{
		}

		[Token(Token = "0x6000E8C")]
		[Address(RVA = "0x3F2EEC", Offset = "0x3F2EEC", VA = "0x3F2EEC")]
		public void FadeInBlack()
		{
		}

		[Token(Token = "0x6000E8D")]
		[Address(RVA = "0x3F2F00", Offset = "0x3F2F00", VA = "0x3F2F00")]
		public void FadeOutInBlack()
		{
		}

		[Token(Token = "0x6000E8E")]
		[Address(RVA = "0x3F18A4", Offset = "0x3F18A4", VA = "0x3F18A4")]
		private void handleFadeBlack()
		{
		}

		[Token(Token = "0x6000E8F")]
		[Address(RVA = "0x3F2F1C", Offset = "0x3F2F1C", VA = "0x3F2F1C")]
		public void FadeOutWhite(float intensity = 1f)
		{
		}

		[Token(Token = "0x6000E90")]
		[Address(RVA = "0x3F2FC8", Offset = "0x3F2FC8", VA = "0x3F2FC8")]
		public void FadeInWhite()
		{
		}

		[Token(Token = "0x6000E91")]
		[Address(RVA = "0x3F2FDC", Offset = "0x3F2FDC", VA = "0x3F2FDC")]
		public void FadeOutInWhite(float intensity = 1f)
		{
		}

		[Token(Token = "0x6000E92")]
		[Address(RVA = "0x3F16E0", Offset = "0x3F16E0", VA = "0x3F16E0")]
		private void handleFadeWhite()
		{
		}

		[Token(Token = "0x6000E93")]
		[Address(RVA = "0x3F2FE8", Offset = "0x3F2FE8", VA = "0x3F2FE8")]
		public void FadeOutWhiteVignette(float intensity = 1f)
		{
		}

		[Token(Token = "0x6000E94")]
		[Address(RVA = "0x3F3094", Offset = "0x3F3094", VA = "0x3F3094")]
		public void FadeInWhiteVignette()
		{
		}

		[Token(Token = "0x6000E95")]
		[Address(RVA = "0x3F30A8", Offset = "0x3F30A8", VA = "0x3F30A8")]
		public void FadeOutInWhiteVignette(float intensity = 1f)
		{
		}

		[Token(Token = "0x6000E96")]
		[Address(RVA = "0x3F1A60", Offset = "0x3F1A60", VA = "0x3F1A60")]
		private void handleFadeWhiteVignette()
		{
		}

		[Token(Token = "0x6000E97")]
		[Address(RVA = "0x3F30B4", Offset = "0x3F30B4", VA = "0x3F30B4")]
		public void Shake(float intensity = 1f)
		{
		}

		[Token(Token = "0x6000E98")]
		[Address(RVA = "0x3F1C28", Offset = "0x3F1C28", VA = "0x3F1C28")]
		private void handleShake()
		{
		}

		[Token(Token = "0x6000E99")]
		[Address(RVA = "0x3F30C0", Offset = "0x3F30C0", VA = "0x3F30C0")]
		public void ShakeOut(float intensity = 1f)
		{
		}

		[Token(Token = "0x6000E9A")]
		[Address(RVA = "0x3F3164", Offset = "0x3F3164", VA = "0x3F3164")]
		public void ShakeIn()
		{
		}

		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0x3F3178", Offset = "0x3F3178", VA = "0x3F3178")]
		public CameraController()
		{
		}
	}
	[Token(Token = "0x20001DB")]
	public class CameraFlash : MonoBehaviour
	{
		[Token(Token = "0x20002EA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24192C", Offset = "0x24192C")]
		private sealed class <DoCameraFlash>d__1 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400103F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x4001040")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private object <>2__current;

			[Token(Token = "0x4001041")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public CameraFlash <>4__this;

			[Token(Token = "0x4001042")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <counter>5__2;

			[Token(Token = "0x170001D2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014BF")]
				[Address(RVA = "0x3F343C", Offset = "0x3F343C", VA = "0x3F343C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014C1")]
				[Address(RVA = "0x3F34CC", Offset = "0x3F34CC", VA = "0x3F34CC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014BC")]
			[Address(RVA = "0x3F32F0", Offset = "0x3F32F0", VA = "0x3F32F0")]
			[DebuggerHidden]
			public <DoCameraFlash>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x60014BD")]
			[Address(RVA = "0x3F3318", Offset = "0x3F3318", VA = "0x3F3318", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014BE")]
			[Address(RVA = "0x3F331C", Offset = "0x3F331C", VA = "0x3F331C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014C0")]
			[Address(RVA = "0x3F3444", Offset = "0x3F3444", VA = "0x3F3444", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0x3F31FC", Offset = "0x3F31FC", VA = "0x3F31FC")]
		public void Camera()
		{
		}

		[Token(Token = "0x6000E9E")]
		[Address(RVA = "0x3F3264", Offset = "0x3F3264", VA = "0x3F3264")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2493B8", Offset = "0x2493B8")]
		public IEnumerator DoCameraFlash()
		{
			return null;
		}

		[Token(Token = "0x6000E9F")]
		[Address(RVA = "0x3F3310", Offset = "0x3F3310", VA = "0x3F3310")]
		public CameraFlash()
		{
		}
	}
	[Token(Token = "0x20001DC")]
	public class CharacterOutfitPicker : MonoBehaviour
	{
		[Token(Token = "0x4000825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public GameObject[] faces;

		[Token(Token = "0x4000826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject[] hairs;

		[Token(Token = "0x6000EA0")]
		[Address(RVA = "0x3F34D4", Offset = "0x3F34D4", VA = "0x3F34D4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EA1")]
		[Address(RVA = "0x3F3754", Offset = "0x3F3754", VA = "0x3F3754")]
		public CharacterOutfitPicker()
		{
		}
	}
	[Token(Token = "0x20001DD")]
	public class ChildMenuManager : MonoBehaviour
	{
		[Token(Token = "0x4000827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24607C", Offset = "0x24607C")]
		private MenuManager <manager>k__BackingField;

		[Token(Token = "0x17000133")]
		public MenuManager manager
		{
			[Token(Token = "0x6000EA2")]
			[Address(RVA = "0x3F375C", Offset = "0x3F375C", VA = "0x3F375C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249430", Offset = "0x249430")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EA3")]
			[Address(RVA = "0x3F3764", Offset = "0x3F3764", VA = "0x3F3764")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249440", Offset = "0x249440")]
			set
			{
			}
		}

		[Token(Token = "0x6000EA4")]
		[Address(RVA = "0x3F376C", Offset = "0x3F376C", VA = "0x3F376C", Slot = "4")]
		public virtual void OpenMenu()
		{
		}

		[Token(Token = "0x6000EA5")]
		[Address(RVA = "0x3F37A4", Offset = "0x3F37A4", VA = "0x3F37A4", Slot = "5")]
		public virtual void CloseMenu()
		{
		}

		[Token(Token = "0x6000EA6")]
		[Address(RVA = "0x3F37DC", Offset = "0x3F37DC", VA = "0x3F37DC")]
		public ChildMenuManager()
		{
		}
	}
	[Token(Token = "0x20001DE")]
	[AttributeAttribute(Name = "AdvancedInspectorAttribute", RVA = "0x241580", Offset = "0x241580")]
	public class ContinueTrigger : MonoBehaviour
	{
		[Token(Token = "0x4000828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ProgressRadialBehaviour ProgressBar;

		[Token(Token = "0x4000829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool isCounting;

		[Token(Token = "0x400082A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float count;

		[Token(Token = "0x400082B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float triggerTime;

		[Token(Token = "0x400082C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool isTriggered;

		[Token(Token = "0x400082D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool triggerState;

		[Token(Token = "0x6000EA7")]
		[Address(RVA = "0x3F37E4", Offset = "0x3F37E4", VA = "0x3F37E4")]
		private void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x6000EA8")]
		[Address(RVA = "0x3F386C", Offset = "0x3F386C", VA = "0x3F386C")]
		private void OnTriggerExit(Collider collider)
		{
		}

		[Token(Token = "0x6000EA9")]
		[Address(RVA = "0x3F38F4", Offset = "0x3F38F4", VA = "0x3F38F4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0x3F393C", Offset = "0x3F393C", VA = "0x3F393C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EAB")]
		[Address(RVA = "0x3F3B18", Offset = "0x3F3B18", VA = "0x3F3B18")]
		private void StartTimer()
		{
		}

		[Token(Token = "0x6000EAC")]
		[Address(RVA = "0x3F38F8", Offset = "0x3F38F8", VA = "0x3F38F8")]
		private void ResetTimer()
		{
		}

		[Token(Token = "0x6000EAD")]
		[Address(RVA = "0x3F3B2C", Offset = "0x3F3B2C", VA = "0x3F3B2C")]
		[AttributeAttribute(Name = "InspectAttribute", RVA = "0x249450", Offset = "0x249450")]
		public void ContinueBout()
		{
		}

		[Token(Token = "0x6000EAE")]
		[Address(RVA = "0x3F3BA4", Offset = "0x3F3BA4", VA = "0x3F3BA4")]
		public ContinueTrigger()
		{
		}
	}
	[Token(Token = "0x20001DF")]
	public class CornerPositionMarker : MonoBehaviour, IFixedUpdateable
	{
		[Token(Token = "0x400082E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public GameObject menu;

		[Token(Token = "0x400082F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Renderer marker;

		[Token(Token = "0x4000830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float markerFadeRate;

		[Token(Token = "0x4000831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Material markerMaterial;

		[Token(Token = "0x4000832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TMP_Text messageText;

		[Token(Token = "0x4000833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool playerIsInTrigger;

		[Token(Token = "0x4000834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private bool playerWasInTrigger;

		[Token(Token = "0x4000835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float currentMarkerTransparency;

		[Token(Token = "0x4000836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float targetMarkerTransparency;

		[Token(Token = "0x6000EB0")]
		[Address(RVA = "0x3F3C14", Offset = "0x3F3C14", VA = "0x3F3C14")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000EB1")]
		[Address(RVA = "0x3F3D20", Offset = "0x3F3D20", VA = "0x3F3D20")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000EB2")]
		[Address(RVA = "0x3F3D28", Offset = "0x3F3D28", VA = "0x3F3D28")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EB3")]
		[Address(RVA = "0x3F3D5C", Offset = "0x3F3D5C", VA = "0x3F3D5C", Slot = "4")]
		public void CustomFixedUpdate()
		{
		}

		[Token(Token = "0x6000EB4")]
		[Address(RVA = "0x3F3D68", Offset = "0x3F3D68", VA = "0x3F3D68")]
		private void OnTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x6000EB5")]
		[Address(RVA = "0x3F3E88", Offset = "0x3F3E88", VA = "0x3F3E88")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EB6")]
		[Address(RVA = "0x3F3EE8", Offset = "0x3F3EE8", VA = "0x3F3EE8")]
		private void PlayerEnteredTrigger()
		{
		}

		[Token(Token = "0x6000EB7")]
		[Address(RVA = "0x3F3F24", Offset = "0x3F3F24", VA = "0x3F3F24")]
		private void PlayerExitedTrigger()
		{
		}

		[Token(Token = "0x6000EB8")]
		[Address(RVA = "0x3F3F60", Offset = "0x3F3F60", VA = "0x3F3F60")]
		private void HandleMarkerFade()
		{
		}

		[Token(Token = "0x6000EB9")]
		[Address(RVA = "0x3F409C", Offset = "0x3F409C", VA = "0x3F409C")]
		public CornerPositionMarker()
		{
		}
	}
	[Token(Token = "0x20001E0")]
	public class CrowdController : MonoBehaviour
	{
		[Token(Token = "0x20002EB")]
		private enum CrowdState
		{
			[Token(Token = "0x4001044")]
			Init,
			[Token(Token = "0x4001045")]
			Walla,
			[Token(Token = "0x4001046")]
			Watch,
			[Token(Token = "0x4001047")]
			Cheer
		}

		[Token(Token = "0x4000837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private CrowdState crowdState;

		[Token(Token = "0x4000838")]
		private const float cheerTransitionTime = 1.5f;

		[Token(Token = "0x4000839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static CrowdController instance;

		[Token(Token = "0x400083A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool canCheer;

		[Token(Token = "0x400083B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool ambisonicSound;

		[Token(Token = "0x400083C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private AudienceController[] audience;

		[Token(Token = "0x400083D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float cheerCounter;

		[Token(Token = "0x400083E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float cheerFactor;

		[Token(Token = "0x400083F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int waitFramesBeforeStarting;

		[Token(Token = "0x4000840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int framesToWait;

		[Token(Token = "0x4000841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform soundParent;

		[Token(Token = "0x4000842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float maxWallaVolume;

		[Token(Token = "0x4000843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioClip wallaClip;

		[Token(Token = "0x4000844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float maxWatchVolume;

		[Token(Token = "0x4000845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioClip watchClip;

		[Token(Token = "0x4000846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float maxCheerVolume;

		[Token(Token = "0x4000847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AudioClip cheerClip;

		[Token(Token = "0x4000848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float maxReactionVolume;

		[Token(Token = "0x4000849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AudioClip[] reactionClips;

		[Token(Token = "0x400084A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private AudioSource wallaSource;

		[Token(Token = "0x400084B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private AudioSource watchSource;

		[Token(Token = "0x400084C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private AudioSource cheerSource;

		[Token(Token = "0x400084D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private AudioSource reactionSource;

		[Token(Token = "0x400084E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private bool isPlayingWalla;

		[Token(Token = "0x400084F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
		private bool isPlayingWatch;

		[Token(Token = "0x4000850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
		private bool isPlayingCheer;

		[Token(Token = "0x4000851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float wallaVolume;

		[Token(Token = "0x4000852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float watchVolume;

		[Token(Token = "0x4000853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float cheerVolume;

		[Token(Token = "0x4000854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float cheerOverride;

		[Token(Token = "0x4000855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool useAudienceSounds;

		[Token(Token = "0x6000EBA")]
		[Address(RVA = "0x3E5BCC", Offset = "0x3E5BCC", VA = "0x3E5BCC")]
		public static void Walla()
		{
		}

		[Token(Token = "0x6000EBB")]
		[Address(RVA = "0x3E6100", Offset = "0x3E6100", VA = "0x3E6100")]
		public static void Watch()
		{
		}

		[Token(Token = "0x6000EBC")]
		[Address(RVA = "0x3EA9D8", Offset = "0x3EA9D8", VA = "0x3EA9D8")]
		public static void Cheer()
		{
		}

		[Token(Token = "0x6000EBD")]
		[Address(RVA = "0x3E05EC", Offset = "0x3E05EC", VA = "0x3E05EC")]
		public static void React()
		{
		}

		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0x3F4630", Offset = "0x3F4630", VA = "0x3F4630")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EBF")]
		[Address(RVA = "0x3F4694", Offset = "0x3F4694", VA = "0x3F4694")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EC0")]
		[Address(RVA = "0x3F5670", Offset = "0x3F5670", VA = "0x3F5670")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0x3F56D8", Offset = "0x3F56D8", VA = "0x3F56D8")]
		public void Update()
		{
		}

		[Token(Token = "0x6000EC2")]
		[Address(RVA = "0x3F548C", Offset = "0x3F548C", VA = "0x3F548C")]
		private AudienceController[] findAudience()
		{
			return null;
		}

		[Token(Token = "0x6000EC3")]
		[Address(RVA = "0x3F571C", Offset = "0x3F571C", VA = "0x3F571C")]
		private void PlaySomeCheerAnimations()
		{
		}

		[Token(Token = "0x6000EC4")]
		[Address(RVA = "0x3F5D80", Offset = "0x3F5D80", VA = "0x3F5D80")]
		private void AllPlayCheerAnimations()
		{
		}

		[Token(Token = "0x6000EC5")]
		[Address(RVA = "0x3F40B0", Offset = "0x3F40B0", VA = "0x3F40B0")]
		private void StartWallaLoop()
		{
		}

		[Token(Token = "0x6000EC6")]
		[Address(RVA = "0x3F4224", Offset = "0x3F4224", VA = "0x3F4224")]
		private void StartWatchLoop()
		{
		}

		[Token(Token = "0x6000EC7")]
		[Address(RVA = "0x3F439C", Offset = "0x3F439C", VA = "0x3F439C")]
		private void StartCheerLoop()
		{
		}

		[Token(Token = "0x6000EC8")]
		[Address(RVA = "0x3F4514", Offset = "0x3F4514", VA = "0x3F4514")]
		private void PlayReactionClip()
		{
		}

		[Token(Token = "0x6000EC9")]
		[Address(RVA = "0x3F5870", Offset = "0x3F5870", VA = "0x3F5870")]
		private void UpdateCrowdSounds()
		{
		}

		[Token(Token = "0x6000ECA")]
		[Address(RVA = "0x3F5E44", Offset = "0x3F5E44", VA = "0x3F5E44")]
		public CrowdController()
		{
		}
	}
	[Token(Token = "0x20001E1")]
	public class CrowdGroupController : MonoBehaviour
	{
		[Token(Token = "0x4000856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float holdTime;

		[Token(Token = "0x4000857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static float maxDelayTime;

		[Token(Token = "0x4000858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool onlyCrossFadeAcrossTiers;

		[Token(Token = "0x4000859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24608C", Offset = "0x24608C")]
		private float <crossFadeTime>k__BackingField;

		[Token(Token = "0x400085A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24609C", Offset = "0x24609C")]
		private float <spatialBlend>k__BackingField;

		[Token(Token = "0x400085B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2460AC", Offset = "0x2460AC")]
		private float <maxVolume>k__BackingField;

		[Token(Token = "0x400085C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2460BC", Offset = "0x2460BC")]
		private float <maxDistance>k__BackingField;

		[Token(Token = "0x400085D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AudioClip[] crowdLoops;

		[Token(Token = "0x400085E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int excitementTier;

		[Token(Token = "0x400085F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int excitementTierLastFrame;

		[Token(Token = "0x4000860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private AudienceController[] audience;

		[Token(Token = "0x4000861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool crossfading;

		[Token(Token = "0x4000862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private AudioSource oldSource;

		[Token(Token = "0x4000863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AudioSource newSource;

		[Token(Token = "0x4000864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool delaying;

		[Token(Token = "0x4000865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float delayTimer;

		[Token(Token = "0x17000134")]
		public float crossFadeTime
		{
			[Token(Token = "0x6000ECB")]
			[Address(RVA = "0x3F5E6C", Offset = "0x3F5E6C", VA = "0x3F5E6C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249460", Offset = "0x249460")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000ECC")]
			[Address(RVA = "0x3F5E74", Offset = "0x3F5E74", VA = "0x3F5E74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249470", Offset = "0x249470")]
			set
			{
			}
		}

		[Token(Token = "0x17000135")]
		public float spatialBlend
		{
			[Token(Token = "0x6000ECD")]
			[Address(RVA = "0x3F5E7C", Offset = "0x3F5E7C", VA = "0x3F5E7C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249480", Offset = "0x249480")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000ECE")]
			[Address(RVA = "0x3F5E84", Offset = "0x3F5E84", VA = "0x3F5E84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249490", Offset = "0x249490")]
			set
			{
			}
		}

		[Token(Token = "0x17000136")]
		public float maxVolume
		{
			[Token(Token = "0x6000ECF")]
			[Address(RVA = "0x3F5E8C", Offset = "0x3F5E8C", VA = "0x3F5E8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2494A0", Offset = "0x2494A0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000ED0")]
			[Address(RVA = "0x3F5E94", Offset = "0x3F5E94", VA = "0x3F5E94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2494B0", Offset = "0x2494B0")]
			set
			{
			}
		}

		[Token(Token = "0x17000137")]
		public float maxDistance
		{
			[Token(Token = "0x6000ED1")]
			[Address(RVA = "0x3F5E9C", Offset = "0x3F5E9C", VA = "0x3F5E9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2494C0", Offset = "0x2494C0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000ED2")]
			[Address(RVA = "0x3F5EA4", Offset = "0x3F5EA4", VA = "0x3F5EA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2494D0", Offset = "0x2494D0")]
			set
			{
			}
		}

		[Token(Token = "0x6000ED3")]
		[Address(RVA = "0x3F5EAC", Offset = "0x3F5EAC", VA = "0x3F5EAC")]
		public void Start()
		{
		}

		[Token(Token = "0x6000ED4")]
		[Address(RVA = "0x3F61C4", Offset = "0x3F61C4", VA = "0x3F61C4")]
		public void Update()
		{
		}

		[Token(Token = "0x6000ED5")]
		[Address(RVA = "0x3F607C", Offset = "0x3F607C", VA = "0x3F607C")]
		private void InitAudioSource(AudioSource source, float volume = 0f)
		{
		}

		[Token(Token = "0x6000ED6")]
		[Address(RVA = "0x3F66D4", Offset = "0x3F66D4", VA = "0x3F66D4")]
		public void AssignAudioClips(AudioClip[] clips)
		{
		}

		[Token(Token = "0x6000ED7")]
		[Address(RVA = "0x3F66DC", Offset = "0x3F66DC", VA = "0x3F66DC")]
		public void SetExcitementTier(int tier)
		{
		}

		[Token(Token = "0x6000ED8")]
		[Address(RVA = "0x3F6640", Offset = "0x3F6640", VA = "0x3F6640")]
		public void ClipSwitched()
		{
		}

		[Token(Token = "0x6000ED9")]
		[Address(RVA = "0x3F66E4", Offset = "0x3F66E4", VA = "0x3F66E4")]
		public CrowdGroupController()
		{
		}
	}
	[Token(Token = "0x20001E2")]
	public class CustomizeBoutMenu : ChildMenuManager
	{
		[Token(Token = "0x4000866")]
		private const string venuePref = "venuePref";

		[Token(Token = "0x4000867")]
		private const string roundCountPref = "roundCountPref";

		[Token(Token = "0x4000868")]
		private const string roundTimePref = "roundTimePref";

		[Token(Token = "0x4000869")]
		private const string breakTimePref = "breakTimePref";

		[Token(Token = "0x400086A")]
		private const string chinPref = "chinPref";

		[Token(Token = "0x400086B")]
		private const string powerPref = "powerPref";

		[Token(Token = "0x400086C")]
		private const string fistSpeedPref = "fistSpeedPref";

		[Token(Token = "0x400086D")]
		private const string dodgeSpeedPref = "dodgeSpeedPref";

		[Token(Token = "0x400086E")]
		private const string blockSpeedPref = "blockSpeedPref";

		[Token(Token = "0x400086F")]
		private const string judgeStrictnessPref = "judgeStrictnessPref";

		[Token(Token = "0x4000870")]
		private const string aggressionPref = "aggressionPref";

		[Token(Token = "0x4000871")]
		private const string knockdownLimitPref = "knockdownLimitPref";

		[Token(Token = "0x4000872")]
		private const string traumaGainPref = "traumaGainPref";

		[Token(Token = "0x4000873")]
		private const string bodyRatePref = "bodyRatePref";

		[Token(Token = "0x4000874")]
		private const string jabRatePref = "jabRatePref";

		[Token(Token = "0x4000875")]
		private const string leftCrossRatePref = "leftCrossRatePref";

		[Token(Token = "0x4000876")]
		private const string rightCrossRatePref = "rightCrossRatePref";

		[Token(Token = "0x4000877")]
		private const string leftHookRatePref = "leftHookRatePref";

		[Token(Token = "0x4000878")]
		private const string rightHookRatePref = "rightHookRatePref";

		[Token(Token = "0x4000879")]
		private const string leftUppercutRatePref = "leftUppercutRatePref";

		[Token(Token = "0x400087A")]
		private const string rightUppercutRatePref = "rightUppercutRatePref";

		[Token(Token = "0x400087B")]
		private const int venueDefault = 1;

		[Token(Token = "0x400087C")]
		private const int roundCountDefault = 3;

		[Token(Token = "0x400087D")]
		private const int roundTimeDefault = 180;

		[Token(Token = "0x400087E")]
		private const int breakTimeDefault = 60;

		[Token(Token = "0x400087F")]
		private const int chinDefault = 100;

		[Token(Token = "0x4000880")]
		private const int powerDefault = 100;

		[Token(Token = "0x4000881")]
		private const int fistSpeedDefault = 100;

		[Token(Token = "0x4000882")]
		private const int dodgeSpeedDefault = 100;

		[Token(Token = "0x4000883")]
		private const int blockSpeedDefault = 100;

		[Token(Token = "0x4000884")]
		private const int judgeStrictnessDefault = 100;

		[Token(Token = "0x4000885")]
		private const int knockdownLimitDefault = 3;

		[Token(Token = "0x4000886")]
		private const int traumaGainDefault = 0;

		[Token(Token = "0x4000887")]
		private const int aggressionDefault = 100;

		[Token(Token = "0x4000888")]
		private const int bodyRateDefault = 100;

		[Token(Token = "0x4000889")]
		private const int jabRateDefault = 100;

		[Token(Token = "0x400088A")]
		private const int leftCrossRateDefault = 100;

		[Token(Token = "0x400088B")]
		private const int rightCrossRateDefault = 100;

		[Token(Token = "0x400088C")]
		private const int leftHookRateDefault = 100;

		[Token(Token = "0x400088D")]
		private const int rightHookRateDefault = 100;

		[Token(Token = "0x400088E")]
		private const int leftUppercutRateDefault = 100;

		[Token(Token = "0x400088F")]
		private const int rightUppercutRateDefault = 100;

		[Token(Token = "0x4000890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2460CC", Offset = "0x2460CC")]
		private bool <isOpen>k__BackingField;

		[Token(Token = "0x4000891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public GameObject difficultyMenu;

		[Token(Token = "0x4000892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TotFSlider venueSlider;

		[Token(Token = "0x4000893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TotFSlider roundCountSlider;

		[Token(Token = "0x4000894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TotFSlider roundTimeSlider;

		[Token(Token = "0x4000895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public TotFSlider breakTimeSlider;

		[Token(Token = "0x4000896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TotFSlider chinSlider;

		[Token(Token = "0x4000897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public TotFSlider powerSlider;

		[Token(Token = "0x4000898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TotFSlider fistSpeedSlider;

		[Token(Token = "0x4000899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public TotFSlider dodgeSpeedSlider;

		[Token(Token = "0x400089A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TotFSlider blockSpeedSlider;

		[Token(Token = "0x400089B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public TotFSlider aggressionSlider;

		[Token(Token = "0x400089C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public TotFSlider knockdownLimitSlider;

		[Token(Token = "0x400089D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public TotFSlider judgeStrictnessSlider;

		[Token(Token = "0x400089E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public TotFSlider traumaGainSlider;

		[Token(Token = "0x400089F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public TotFSlider bodyRateSlider;

		[Token(Token = "0x40008A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public TotFSlider jabRateSlider;

		[Token(Token = "0x40008A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public TotFSlider leftCrossRateSlider;

		[Token(Token = "0x40008A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public TotFSlider rightCrossRateSlider;

		[Token(Token = "0x40008A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public TotFSlider leftHookRateSlider;

		[Token(Token = "0x40008A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public TotFSlider rightHookRateSlider;

		[Token(Token = "0x40008A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public TotFSlider leftUppercutRateSlider;

		[Token(Token = "0x40008A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public TotFSlider rightUppercutRateSlider;

		[Token(Token = "0x40008A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2460DC", Offset = "0x2460DC")]
		private FightMenuManager <fightMenu>k__BackingField;

		[Token(Token = "0x40008A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2460EC", Offset = "0x2460EC")]
		private int <venue>k__BackingField;

		[Token(Token = "0x40008A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2460FC", Offset = "0x2460FC")]
		private int <roundCount>k__BackingField;

		[Token(Token = "0x40008AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24610C", Offset = "0x24610C")]
		private int <roundTime>k__BackingField;

		[Token(Token = "0x40008AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24611C", Offset = "0x24611C")]
		private int <breakTime>k__BackingField;

		[Token(Token = "0x40008AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24612C", Offset = "0x24612C")]
		private int <chin>k__BackingField;

		[Token(Token = "0x40008AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24613C", Offset = "0x24613C")]
		private int <power>k__BackingField;

		[Token(Token = "0x40008AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24614C", Offset = "0x24614C")]
		private int <fistSpeed>k__BackingField;

		[Token(Token = "0x40008AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24615C", Offset = "0x24615C")]
		private int <dodgeSpeed>k__BackingField;

		[Token(Token = "0x40008B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24616C", Offset = "0x24616C")]
		private int <blockSpeed>k__BackingField;

		[Token(Token = "0x40008B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24617C", Offset = "0x24617C")]
		private int <judgeStrictness>k__BackingField;

		[Token(Token = "0x40008B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24618C", Offset = "0x24618C")]
		private int <knockdownLimit>k__BackingField;

		[Token(Token = "0x40008B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24619C", Offset = "0x24619C")]
		private int <aggression>k__BackingField;

		[Token(Token = "0x40008B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2461AC", Offset = "0x2461AC")]
		private float <traumaGainRate>k__BackingField;

		[Token(Token = "0x40008B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2461BC", Offset = "0x2461BC")]
		private int <bodyRate>k__BackingField;

		[Token(Token = "0x40008B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2461CC", Offset = "0x2461CC")]
		private int <jabRate>k__BackingField;

		[Token(Token = "0x40008B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2461DC", Offset = "0x2461DC")]
		private int <leftCrossRate>k__BackingField;

		[Token(Token = "0x40008B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2461EC", Offset = "0x2461EC")]
		private int <rightCrossRate>k__BackingField;

		[Token(Token = "0x40008B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2461FC", Offset = "0x2461FC")]
		private int <leftHookRate>k__BackingField;

		[Token(Token = "0x40008BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24620C", Offset = "0x24620C")]
		private int <rightHookRate>k__BackingField;

		[Token(Token = "0x40008BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24621C", Offset = "0x24621C")]
		private int <leftUppercutRate>k__BackingField;

		[Token(Token = "0x40008BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24622C", Offset = "0x24622C")]
		private int <rightUppercutRate>k__BackingField;

		[Token(Token = "0x40008BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private string[] venueNames;

		[Token(Token = "0x40008BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24623C", Offset = "0x24623C")]
		private bool <initialized>k__BackingField;

		[Token(Token = "0x17000138")]
		public bool isOpen
		{
			[Token(Token = "0x6000EDB")]
			[Address(RVA = "0x3F6764", Offset = "0x3F6764", VA = "0x3F6764")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2494E0", Offset = "0x2494E0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000EDC")]
			[Address(RVA = "0x3F676C", Offset = "0x3F676C", VA = "0x3F676C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2494F0", Offset = "0x2494F0")]
			set
			{
			}
		}

		[Token(Token = "0x17000139")]
		public FightMenuManager fightMenu
		{
			[Token(Token = "0x6000EDD")]
			[Address(RVA = "0x3F6774", Offset = "0x3F6774", VA = "0x3F6774")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249500", Offset = "0x249500")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EDE")]
			[Address(RVA = "0x3F677C", Offset = "0x3F677C", VA = "0x3F677C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249510", Offset = "0x249510")]
			set
			{
			}
		}

		[Token(Token = "0x1700013A")]
		public string venueName
		{
			[Token(Token = "0x6000EDF")]
			[Address(RVA = "0x3F6784", Offset = "0x3F6784", VA = "0x3F6784")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013B")]
		public int venue
		{
			[Token(Token = "0x6000EE0")]
			[Address(RVA = "0x3F67CC", Offset = "0x3F67CC", VA = "0x3F67CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249520", Offset = "0x249520")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000EE1")]
			[Address(RVA = "0x3F67D4", Offset = "0x3F67D4", VA = "0x3F67D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249530", Offset = "0x249530")]
			set
			{
			}
		}

		[Token(Token = "0x1700013C")]
		public int roundCount
		{
			[Token(Token = "0x6000EE2")]
			[Address(RVA = "0x3F67DC", Offset = "0x3F67DC", VA = "0x3F67DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249540", Offset = "0x249540")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000EE3")]
			[Address(RVA = "0x3F67E4", Offset = "0x3F67E4", VA = "0x3F67E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249550", Offset = "0x249550")]
			set
			{
			}
		}

		[Token(Token = "0x1700013D")]
		public int roundTime
		{
			[Token(Token = "0x6000EE4")]
			[Address(RVA = "0x3F67EC", Offset = "0x3F67EC", VA = "0x3F67EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249560", Offset = "0x249560")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000EE5")]
			[Address(RVA = "0x3F67F4", Offset = "0x3F67F4", VA = "0x3F67F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249570", Offset = "0x249570")]
			set
			{
			}
		}

		[Token(Token = "0x1700013E")]
		public int breakTime
		{
			[Token(Token = "0x6000EE6")]
			[Address(RVA = "0x3F67FC", Offset = "0x3F67FC", VA = "0x3F67FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249580", Offset = "0x249580")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000EE7")]
			[Address(RVA = "0x3F6804", Offset = "0x3F6804", VA = "0x3F6804")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249590", Offset = "0x249590")]
			set
			{
			}
		}

		[Token(Token = "0x1700013F")]
		public int chin
		{
			[Token(Token = "0x6000EE8")]
			[Address(RVA = "0x3F680C", Offset = "0x3F680C", VA = "0x3F680C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2495A0", Offset = "0x2495A0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000EE9")]
			[Address(RVA = "0x3F6814", Offset = "0x3F6814", VA = "0x3F6814")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2495B0", Offset = "0x2495B0")]
			set
			{
			}
		}

		[Token(Token = "0x17000140")]
		public int power
		{
			[Token(Token = "0x6000EEA")]
			[Address(RVA = "0x3F681C", Offset = "0x3F681C", VA = "0x3F681C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2495C0", Offset = "0x2495C0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000EEB")]
			[Address(RVA = "0x3F6824", Offset = "0x3F6824", VA = "0x3F6824")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2495D0", Offset = "0x2495D0")]
			set
			{
			}
		}

		[Token(Token = "0x17000141")]
		public int fistSpeed
		{
			[Token(Token = "0x6000EEC")]
			[Address(RVA = "0x3F682C", Offset = "0x3F682C", VA = "0x3F682C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2495E0", Offset = "0x2495E0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000EED")]
			[Address(RVA = "0x3F6834", Offset = "0x3F6834", VA = "0x3F6834")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2495F0", Offset = "0x2495F0")]
			set
			{
			}
		}

		[Token(Token = "0x17000142")]
		public int dodgeSpeed
		{
			[Token(Token = "0x6000EEE")]
			[Address(RVA = "0x3F683C", Offset = "0x3F683C", VA = "0x3F683C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249600", Offset = "0x249600")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000EEF")]
			[Address(RVA = "0x3F6844", Offset = "0x3F6844", VA = "0x3F6844")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249610", Offset = "0x249610")]
			set
			{
			}
		}

		[Token(Token = "0x17000143")]
		public int blockSpeed
		{
			[Token(Token = "0x6000EF0")]
			[Address(RVA = "0x3F684C", Offset = "0x3F684C", VA = "0x3F684C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249620", Offset = "0x249620")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000EF1")]
			[Address(RVA = "0x3F6854", Offset = "0x3F6854", VA = "0x3F6854")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249630", Offset = "0x249630")]
			set
			{
			}
		}

		[Token(Token = "0x17000144")]
		public int judgeStrictness
		{
			[Token(Token = "0x6000EF2")]
			[Address(RVA = "0x3F685C", Offset = "0x3F685C", VA = "0x3F685C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249640", Offset = "0x249640")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000EF3")]
			[Address(RVA = "0x3F6864", Offset = "0x3F6864", VA = "0x3F6864")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249650", Offset = "0x249650")]
			set
			{
			}
		}

		[Token(Token = "0x17000145")]
		public int knockdownLimit
		{
			[Token(Token = "0x6000EF4")]
			[Address(RVA = "0x3F686C", Offset = "0x3F686C", VA = "0x3F686C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249660", Offset = "0x249660")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000EF5")]
			[Address(RVA = "0x3F6874", Offset = "0x3F6874", VA = "0x3F6874")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249670", Offset = "0x249670")]
			set
			{
			}
		}

		[Token(Token = "0x17000146")]
		public int aggression
		{
			[Token(Token = "0x6000EF6")]
			[Address(RVA = "0x3F687C", Offset = "0x3F687C", VA = "0x3F687C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249680", Offset = "0x249680")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000EF7")]
			[Address(RVA = "0x3F6884", Offset = "0x3F6884", VA = "0x3F6884")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249690", Offset = "0x249690")]
			set
			{
			}
		}

		[Token(Token = "0x17000147")]
		public float traumaGainRate
		{
			[Token(Token = "0x6000EF8")]
			[Address(RVA = "0x3F688C", Offset = "0x3F688C", VA = "0x3F688C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2496A0", Offset = "0x2496A0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EF9")]
			[Address(RVA = "0x3F6894", Offset = "0x3F6894", VA = "0x3F6894")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2496B0", Offset = "0x2496B0")]
			set
			{
			}
		}

		[Token(Token = "0x17000148")]
		public int bodyRate
		{
			[Token(Token = "0x6000EFA")]
			[Address(RVA = "0x3F689C", Offset = "0x3F689C", VA = "0x3F689C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2496C0", Offset = "0x2496C0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000EFB")]
			[Address(RVA = "0x3F68A4", Offset = "0x3F68A4", VA = "0x3F68A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2496D0", Offset = "0x2496D0")]
			set
			{
			}
		}

		[Token(Token = "0x17000149")]
		public int jabRate
		{
			[Token(Token = "0x6000EFC")]
			[Address(RVA = "0x3F68AC", Offset = "0x3F68AC", VA = "0x3F68AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2496E0", Offset = "0x2496E0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000EFD")]
			[Address(RVA = "0x3F68B4", Offset = "0x3F68B4", VA = "0x3F68B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2496F0", Offset = "0x2496F0")]
			set
			{
			}
		}

		[Token(Token = "0x1700014A")]
		public int leftCrossRate
		{
			[Token(Token = "0x6000EFE")]
			[Address(RVA = "0x3F68BC", Offset = "0x3F68BC", VA = "0x3F68BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249700", Offset = "0x249700")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000EFF")]
			[Address(RVA = "0x3F68C4", Offset = "0x3F68C4", VA = "0x3F68C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249710", Offset = "0x249710")]
			set
			{
			}
		}

		[Token(Token = "0x1700014B")]
		public int rightCrossRate
		{
			[Token(Token = "0x6000F00")]
			[Address(RVA = "0x3F68CC", Offset = "0x3F68CC", VA = "0x3F68CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249720", Offset = "0x249720")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000F01")]
			[Address(RVA = "0x3F68D4", Offset = "0x3F68D4", VA = "0x3F68D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249730", Offset = "0x249730")]
			set
			{
			}
		}

		[Token(Token = "0x1700014C")]
		public int leftHookRate
		{
			[Token(Token = "0x6000F02")]
			[Address(RVA = "0x3F68DC", Offset = "0x3F68DC", VA = "0x3F68DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249740", Offset = "0x249740")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000F03")]
			[Address(RVA = "0x3F68E4", Offset = "0x3F68E4", VA = "0x3F68E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249750", Offset = "0x249750")]
			set
			{
			}
		}

		[Token(Token = "0x1700014D")]
		public int rightHookRate
		{
			[Token(Token = "0x6000F04")]
			[Address(RVA = "0x3F68EC", Offset = "0x3F68EC", VA = "0x3F68EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249760", Offset = "0x249760")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000F05")]
			[Address(RVA = "0x3F68F4", Offset = "0x3F68F4", VA = "0x3F68F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249770", Offset = "0x249770")]
			set
			{
			}
		}

		[Token(Token = "0x1700014E")]
		public int leftUppercutRate
		{
			[Token(Token = "0x6000F06")]
			[Address(RVA = "0x3F68FC", Offset = "0x3F68FC", VA = "0x3F68FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249780", Offset = "0x249780")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000F07")]
			[Address(RVA = "0x3F6904", Offset = "0x3F6904", VA = "0x3F6904")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249790", Offset = "0x249790")]
			set
			{
			}
		}

		[Token(Token = "0x1700014F")]
		public int rightUppercutRate
		{
			[Token(Token = "0x6000F08")]
			[Address(RVA = "0x3F690C", Offset = "0x3F690C", VA = "0x3F690C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2497A0", Offset = "0x2497A0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000F09")]
			[Address(RVA = "0x3F6914", Offset = "0x3F6914", VA = "0x3F6914")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2497B0", Offset = "0x2497B0")]
			set
			{
			}
		}

		[Token(Token = "0x17000150")]
		public bool initialized
		{
			[Token(Token = "0x6000F0A")]
			[Address(RVA = "0x3F691C", Offset = "0x3F691C", VA = "0x3F691C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2497C0", Offset = "0x2497C0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F0B")]
			[Address(RVA = "0x3F6924", Offset = "0x3F6924", VA = "0x3F6924")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2497D0", Offset = "0x2497D0")]
			set
			{
			}
		}

		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0x3F692C", Offset = "0x3F692C", VA = "0x3F692C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F0D")]
		[Address(RVA = "0x3F6C14", Offset = "0x3F6C14", VA = "0x3F6C14")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0x3F6C18", Offset = "0x3F6C18", VA = "0x3F6C18")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6000F0F")]
		[Address(RVA = "0x3F6FC0", Offset = "0x3F6FC0", VA = "0x3F6FC0")]
		public void SetVenueSlider(int value)
		{
		}

		[Token(Token = "0x6000F10")]
		[Address(RVA = "0x3F7740", Offset = "0x3F7740", VA = "0x3F7740")]
		public void SetVenueValue(float floatValue)
		{
		}

		[Token(Token = "0x6000F11")]
		[Address(RVA = "0x3F7010", Offset = "0x3F7010", VA = "0x3F7010")]
		public void SetRoundCountSlider(int value)
		{
		}

		[Token(Token = "0x6000F12")]
		[Address(RVA = "0x3F78A4", Offset = "0x3F78A4", VA = "0x3F78A4")]
		public void SetRoundCountValue(float floatValue)
		{
		}

		[Token(Token = "0x6000F13")]
		[Address(RVA = "0x3F7060", Offset = "0x3F7060", VA = "0x3F7060")]
		public void SetRoundTimeSlider(int value)
		{
		}

		[Token(Token = "0x6000F14")]
		[Address(RVA = "0x3F79B8", Offset = "0x3F79B8", VA = "0x3F79B8")]
		public void SetRoundTimeValue(float floatValue)
		{
		}

		[Token(Token = "0x6000F15")]
		[Address(RVA = "0x3F70C0", Offset = "0x3F70C0", VA = "0x3F70C0")]
		public void SetBreakTimeSlider(int value)
		{
		}

		[Token(Token = "0x6000F16")]
		[Address(RVA = "0x3F7B04", Offset = "0x3F7B04", VA = "0x3F7B04")]
		public void SetBreakTimeValue(float floatValue)
		{
		}

		[Token(Token = "0x6000F17")]
		[Address(RVA = "0x3F7120", Offset = "0x3F7120", VA = "0x3F7120")]
		public void SetChinSlider(int value)
		{
		}

		[Token(Token = "0x6000F18")]
		[Address(RVA = "0x3F7C50", Offset = "0x3F7C50", VA = "0x3F7C50")]
		public void SetChinValue(float floatValue)
		{
		}

		[Token(Token = "0x6000F19")]
		[Address(RVA = "0x3F7170", Offset = "0x3F7170", VA = "0x3F7170")]
		public void SetPowerSlider(int value)
		{
		}

		[Token(Token = "0x6000F1A")]
		[Address(RVA = "0x3F7D74", Offset = "0x3F7D74", VA = "0x3F7D74")]
		public void SetPowerValue(float floatValue)
		{
		}

		[Token(Token = "0x6000F1B")]
		[Address(RVA = "0x3F71C0", Offset = "0x3F71C0", VA = "0x3F71C0")]
		public void SetFistSpeedSlider(int value)
		{
		}

		[Token(Token = "0x6000F1C")]
		[Address(RVA = "0x3F7E98", Offset = "0x3F7E98", VA = "0x3F7E98")]
		public void SetFistSpeedValue(float floatValue)
		{
		}

		[Token(Token = "0x6000F1D")]
		[Address(RVA = "0x3F7220", Offset = "0x3F7220", VA = "0x3F7220")]
		public void SetDodgeSpeedSlider(int value)
		{
		}

		[Token(Token = "0x6000F1E")]
		[Address(RVA = "0x3F7FC0", Offset = "0x3F7FC0", VA = "0x3F7FC0")]
		public void SetDodgeSpeedValue(float floatValue)
		{
		}

		[Token(Token = "0x6000F1F")]
		[Address(RVA = "0x3F7280", Offset = "0x3F7280", VA = "0x3F7280")]
		public void SetBlockSpeedSlider(int value)
		{
		}

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0x3F80E8", Offset = "0x3F80E8", VA = "0x3F80E8")]
		public void SetBlockSpeedValue(float floatValue)
		{
		}

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0x3F72E0", Offset = "0x3F72E0", VA = "0x3F72E0")]
		public void SetAggressionSlider(int value)
		{
		}

		[Token(Token = "0x6000F22")]
		[Address(RVA = "0x3F8210", Offset = "0x3F8210", VA = "0x3F8210")]
		public void SetAggressionValue(float floatValue)
		{
		}

		[Token(Token = "0x6000F23")]
		[Address(RVA = "0x3F7390", Offset = "0x3F7390", VA = "0x3F7390")]
		public void SetJudgeStrictnessSlider(int value)
		{
		}

		[Token(Token = "0x6000F24")]
		[Address(RVA = "0x3F8338", Offset = "0x3F8338", VA = "0x3F8338")]
		public void SetJudgeStrictnessValue(float floatValue)
		{
		}

		[Token(Token = "0x6000F25")]
		[Address(RVA = "0x3F7340", Offset = "0x3F7340", VA = "0x3F7340")]
		public void SetKnockdownLimitSlider(int value)
		{
		}

		[Token(Token = "0x6000F26")]
		[Address(RVA = "0x3F8460", Offset = "0x3F8460", VA = "0x3F8460")]
		public void SetKnockdownLimitValue(float floatValue)
		{
		}

		[Token(Token = "0x6000F27")]
		[Address(RVA = "0x3F73F0", Offset = "0x3F73F0", VA = "0x3F73F0")]
		public void SetTraumaGainSlider(int value)
		{
		}

		[Token(Token = "0x6000F28")]
		[Address(RVA = "0x3F8584", Offset = "0x3F8584", VA = "0x3F8584")]
		public void SetTraumaGainValue(float floatValue)
		{
		}

		[Token(Token = "0x6000F29")]
		[Address(RVA = "0x3F7440", Offset = "0x3F7440", VA = "0x3F7440")]
		public void SetBodyRateSlider(int prefValue)
		{
		}

		[Token(Token = "0x6000F2A")]
		[Address(RVA = "0x3F8814", Offset = "0x3F8814", VA = "0x3F8814")]
		public void SetBodyRateValue(float sliderValue)
		{
		}

		[Token(Token = "0x6000F2B")]
		[Address(RVA = "0x3F74A0", Offset = "0x3F74A0", VA = "0x3F74A0")]
		public void SetJabRateSlider(int prefValue)
		{
		}

		[Token(Token = "0x6000F2C")]
		[Address(RVA = "0x3F8AE8", Offset = "0x3F8AE8", VA = "0x3F8AE8")]
		public void SetJabRateValue(float sliderValue)
		{
		}

		[Token(Token = "0x6000F2D")]
		[Address(RVA = "0x3F7500", Offset = "0x3F7500", VA = "0x3F7500")]
		public void SetLeftCrossRateSlider(int value)
		{
		}

		[Token(Token = "0x6000F2E")]
		[Address(RVA = "0x3F8C10", Offset = "0x3F8C10", VA = "0x3F8C10")]
		public void SetLeftCrossRateValue(float floatValue)
		{
		}

		[Token(Token = "0x6000F2F")]
		[Address(RVA = "0x3F7560", Offset = "0x3F7560", VA = "0x3F7560")]
		public void SetRightCrossRateSlider(int value)
		{
		}

		[Token(Token = "0x6000F30")]
		[Address(RVA = "0x3F8D38", Offset = "0x3F8D38", VA = "0x3F8D38")]
		public void SetRightCrossRateValue(float floatValue)
		{
		}

		[Token(Token = "0x6000F31")]
		[Address(RVA = "0x3F75C0", Offset = "0x3F75C0", VA = "0x3F75C0")]
		public void SetLeftHookRateSlider(int value)
		{
		}

		[Token(Token = "0x6000F32")]
		[Address(RVA = "0x3F8E60", Offset = "0x3F8E60", VA = "0x3F8E60")]
		public void SetLeftHookRateValue(float floatValue)
		{
		}

		[Token(Token = "0x6000F33")]
		[Address(RVA = "0x3F7620", Offset = "0x3F7620", VA = "0x3F7620")]
		public void SetRightHookRateSlider(int value)
		{
		}

		[Token(Token = "0x6000F34")]
		[Address(RVA = "0x3F8F88", Offset = "0x3F8F88", VA = "0x3F8F88")]
		public void SetRightHookRateValue(float floatValue)
		{
		}

		[Token(Token = "0x6000F35")]
		[Address(RVA = "0x3F7680", Offset = "0x3F7680", VA = "0x3F7680")]
		public void SetLeftUppercutRateSlider(int value)
		{
		}

		[Token(Token = "0x6000F36")]
		[Address(RVA = "0x3F90B0", Offset = "0x3F90B0", VA = "0x3F90B0")]
		public void SetLeftUppercutRateValue(float floatValue)
		{
		}

		[Token(Token = "0x6000F37")]
		[Address(RVA = "0x3F76E0", Offset = "0x3F76E0", VA = "0x3F76E0")]
		public void SetRightUppercutRateSlider(int value)
		{
		}

		[Token(Token = "0x6000F38")]
		[Address(RVA = "0x3F91D8", Offset = "0x3F91D8", VA = "0x3F91D8")]
		public void SetRightUppercutRateValue(float floatValue)
		{
		}

		[Token(Token = "0x6000F39")]
		[Address(RVA = "0x3F9300", Offset = "0x3F9300", VA = "0x3F9300", Slot = "4")]
		public override void OpenMenu()
		{
		}

		[Token(Token = "0x6000F3A")]
		[Address(RVA = "0x3F936C", Offset = "0x3F936C", VA = "0x3F936C", Slot = "5")]
		public override void CloseMenu()
		{
		}

		[Token(Token = "0x6000F3B")]
		[Address(RVA = "0x3F9458", Offset = "0x3F9458", VA = "0x3F9458")]
		public void JumpStartInit()
		{
		}

		[Token(Token = "0x6000F3C")]
		[Address(RVA = "0x3F94CC", Offset = "0x3F94CC", VA = "0x3F94CC")]
		public void CloseButtonPressed()
		{
		}

		[Token(Token = "0x6000F3D")]
		[Address(RVA = "0x3F964C", Offset = "0x3F964C", VA = "0x3F964C")]
		public void ResetNonstatOptions()
		{
		}

		[Token(Token = "0x6000F3E")]
		[Address(RVA = "0x3F96DC", Offset = "0x3F96DC", VA = "0x3F96DC")]
		public void ResetOpponentOptionsButtonPressed()
		{
		}

		[Token(Token = "0x6000F3F")]
		[Address(RVA = "0x3F9874", Offset = "0x3F9874", VA = "0x3F9874")]
		public void ResetOpponentOptionsButtonPressedEasy()
		{
		}

		[Token(Token = "0x6000F40")]
		[Address(RVA = "0x3F9A98", Offset = "0x3F9A98", VA = "0x3F9A98")]
		public void ResetOpponentOptionsButtonPressedMedium()
		{
		}

		[Token(Token = "0x6000F41")]
		[Address(RVA = "0x3F9CAC", Offset = "0x3F9CAC", VA = "0x3F9CAC")]
		public void ResetOpponentOptionsButtonPressedHard()
		{
		}

		[Token(Token = "0x6000F42")]
		[Address(RVA = "0x3F9ECC", Offset = "0x3F9ECC", VA = "0x3F9ECC")]
		public void ResetOpponentOptionsButtonPressedExtraHard()
		{
		}

		[Token(Token = "0x6000F43")]
		[Address(RVA = "0x3FA0EC", Offset = "0x3FA0EC", VA = "0x3FA0EC")]
		public CustomizeBoutMenu()
		{
		}
	}
	[Token(Token = "0x20001E3")]
	public class DecalController : MonoBehaviour
	{
		[Token(Token = "0x6000F44")]
		[Address(RVA = "0x3FA0F4", Offset = "0x3FA0F4", VA = "0x3FA0F4")]
		public void ApplyDecal(Texture[] applyTo, Texture decal, Vector3 location, Mesh mesh)
		{
		}

		[Token(Token = "0x6000F45")]
		[Address(RVA = "0x3FA0F8", Offset = "0x3FA0F8", VA = "0x3FA0F8")]
		public DecalController()
		{
		}
	}
	[Token(Token = "0x20001E4")]
	public class DefaultHapticsSystem : IHapticsSystem
	{
		[Token(Token = "0x40008BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static DefaultHapticsSystem _instance;

		[Token(Token = "0x17000151")]
		public static DefaultHapticsSystem instance
		{
			[Token(Token = "0x6000F46")]
			[Address(RVA = "0x3FA100", Offset = "0x3FA100", VA = "0x3FA100")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F47")]
		[Address(RVA = "0x3FA1A0", Offset = "0x3FA1A0", VA = "0x3FA1A0")]
		public DefaultHapticsSystem()
		{
		}

		[Token(Token = "0x6000F48")]
		[Address(RVA = "0x3FA1A8", Offset = "0x3FA1A8", VA = "0x3FA1A8", Slot = "4")]
		public override bool IsActive()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F49")]
		[Address(RVA = "0x3FA1B0", Offset = "0x3FA1B0", VA = "0x3FA1B0", Slot = "5")]
		public override void Initialize()
		{
		}

		[Token(Token = "0x6000F4A")]
		[Address(RVA = "0x3FA1B4", Offset = "0x3FA1B4", VA = "0x3FA1B4", Slot = "6")]
		public override void Unload()
		{
		}

		[Token(Token = "0x6000F4B")]
		[Address(RVA = "0x3FA1B8", Offset = "0x3FA1B8", VA = "0x3FA1B8", Slot = "7")]
		public override void Rumble(float strength, BodyArea area)
		{
		}
	}
	[Token(Token = "0x20001E5")]
	public class DesktopCameraButton : MonoBehaviour
	{
		[Token(Token = "0x40008C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int type;

		[Token(Token = "0x40008C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Button button;

		[Token(Token = "0x40008C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Text text;

		[Token(Token = "0x40008C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject desktopCamera;

		[Token(Token = "0x40008C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private DesktopCameraButton[] buttons;

		[Token(Token = "0x6000F4C")]
		[Address(RVA = "0x3FA2EC", Offset = "0x3FA2EC", VA = "0x3FA2EC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F4D")]
		[Address(RVA = "0x3FA3CC", Offset = "0x3FA3CC", VA = "0x3FA3CC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F4E")]
		[Address(RVA = "0x3FA57C", Offset = "0x3FA57C", VA = "0x3FA57C")]
		private void OnTriggerEnter()
		{
		}

		[Token(Token = "0x6000F4F")]
		[Address(RVA = "0x3FA47C", Offset = "0x3FA47C", VA = "0x3FA47C")]
		public void Press()
		{
		}

		[Token(Token = "0x6000F50")]
		[Address(RVA = "0x3FA6CC", Offset = "0x3FA6CC", VA = "0x3FA6CC")]
		public void Depress()
		{
		}

		[Token(Token = "0x6000F51")]
		[Address(RVA = "0x3FA7BC", Offset = "0x3FA7BC", VA = "0x3FA7BC")]
		public DesktopCameraButton()
		{
		}
	}
	[Token(Token = "0x20001E6")]
	public class DifficultyButton : MonoBehaviour
	{
		[Token(Token = "0x6000F52")]
		[Address(RVA = "0x3FA7C4", Offset = "0x3FA7C4", VA = "0x3FA7C4")]
		public DifficultyButton()
		{
		}
	}
	[Token(Token = "0x20001E7")]
	public class DisplayScreen : MonoBehaviour
	{
		[Token(Token = "0x40008C5")]
		private const int textureWidth = 1280;

		[Token(Token = "0x40008C6")]
		private const int textureHeight = 720;

		[Token(Token = "0x40008C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static RenderTexture renderTexture;

		[Token(Token = "0x40008C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Renderer r;

		[Token(Token = "0x6000F53")]
		[Address(RVA = "0x3FA7CC", Offset = "0x3FA7CC", VA = "0x3FA7CC")]
		public static RenderTexture GetRenderTexture()
		{
			return null;
		}

		[Token(Token = "0x6000F54")]
		[Address(RVA = "0x3FA8D8", Offset = "0x3FA8D8", VA = "0x3FA8D8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F55")]
		[Address(RVA = "0x3FA98C", Offset = "0x3FA98C", VA = "0x3FA98C")]
		public DisplayScreen()
		{
		}
	}
	[Token(Token = "0x20001E8")]
	public class DrawAudience : MonoBehaviour
	{
		[Token(Token = "0x40008C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static BoundingSphere[] boundingSpheres;

		[Token(Token = "0x40008CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Camera cam;

		[Token(Token = "0x40008CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<AudienceGroup> groups;

		[Token(Token = "0x40008CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private CullingGroup cullingData;

		[Token(Token = "0x6000F56")]
		[Address(RVA = "0x3FA994", Offset = "0x3FA994", VA = "0x3FA994")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F57")]
		[Address(RVA = "0x3FA9FC", Offset = "0x3FA9FC", VA = "0x3FA9FC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F58")]
		[Address(RVA = "0x3FACBC", Offset = "0x3FACBC", VA = "0x3FACBC")]
		private void OnPreCull()
		{
		}

		[Token(Token = "0x6000F59")]
		[Address(RVA = "0x3FADD4", Offset = "0x3FADD4", VA = "0x3FADD4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F5A")]
		[Address(RVA = "0x3FAE60", Offset = "0x3FAE60", VA = "0x3FAE60")]
		public DrawAudience()
		{
		}
	}
	[Token(Token = "0x20001E9")]
	public class DummyHitZone : HitZone
	{
		[Token(Token = "0x40008CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public MeshRenderer lightRenderer;

		[Token(Token = "0x40008CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private MaterialPropertyBlock properties;

		[Token(Token = "0x40008CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int emissionPropertyID;

		[Token(Token = "0x40008D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool flashing;

		[Token(Token = "0x40008D1")]
		private const float flashTime = 1f;

		[Token(Token = "0x40008D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float flashTimer;

		[Token(Token = "0x40008D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool hasLight;

		[Token(Token = "0x6000F5B")]
		[Address(RVA = "0x3FAE68", Offset = "0x3FAE68", VA = "0x3FAE68", Slot = "4")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6000F5C")]
		[Address(RVA = "0x3FAF4C", Offset = "0x3FAF4C", VA = "0x3FAF4C")]
		public void Update()
		{
		}

		[Token(Token = "0x6000F5D")]
		[Address(RVA = "0x3F0C04", Offset = "0x3F0C04", VA = "0x3F0C04")]
		public void TurnOnLight()
		{
		}

		[Token(Token = "0x6000F5E")]
		[Address(RVA = "0x3F07B0", Offset = "0x3F07B0", VA = "0x3F07B0")]
		public void TurnOffLight()
		{
		}

		[Token(Token = "0x6000F5F")]
		[Address(RVA = "0x3F10A4", Offset = "0x3F10A4", VA = "0x3F10A4")]
		public void FlashLight(float bonus)
		{
		}

		[Token(Token = "0x6000F60")]
		[Address(RVA = "0x3FB018", Offset = "0x3FB018", VA = "0x3FB018")]
		public DummyHitZone()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001EA")]
	public class BlendshapeDefinition
	{
		[Token(Token = "0x40008D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string name;

		[Token(Token = "0x40008D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float maxValue;

		[Token(Token = "0x40008D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24624C", Offset = "0x24624C")]
		private int <index>k__BackingField;

		[Token(Token = "0x17000152")]
		public int index
		{
			[Token(Token = "0x6000F61")]
			[Address(RVA = "0x3DF310", Offset = "0x3DF310", VA = "0x3DF310")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2497E0", Offset = "0x2497E0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000F62")]
			[Address(RVA = "0x3DF318", Offset = "0x3DF318", VA = "0x3DF318")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2497F0", Offset = "0x2497F0")]
			set
			{
			}
		}

		[Token(Token = "0x6000F63")]
		[Address(RVA = "0x3DF320", Offset = "0x3DF320", VA = "0x3DF320")]
		public BlendshapeDefinition()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001EB")]
	public class EnemyBlendshapes
	{
		[Token(Token = "0x40008D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public BlendshapeDefinition[] bs_damage_eyeL;

		[Token(Token = "0x40008D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public BlendshapeDefinition[] bs_damage_eyeR;

		[Token(Token = "0x40008D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public BlendshapeDefinition[] bs_damage_lipL;

		[Token(Token = "0x40008DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public BlendshapeDefinition[] bs_damage_lipR;

		[Token(Token = "0x40008DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BlendshapeDefinition[] bs_damage_lipC;

		[Token(Token = "0x40008DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public BlendshapeDefinition[] bs_damage_headL;

		[Token(Token = "0x40008DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BlendshapeDefinition[] bs_damage_headR;

		[Token(Token = "0x40008DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public BlendshapeDefinition[] bs_damage_headC;

		[Token(Token = "0x40008DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BlendshapeDefinition[] bs_damage_cheekL;

		[Token(Token = "0x40008E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public BlendshapeDefinition[] bs_damage_cheekR;

		[Token(Token = "0x40008E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BlendshapeDefinition[] bs_damage_chinC;

		[Token(Token = "0x40008E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public BlendshapeDefinition[] bs_damage_nose;

		[Token(Token = "0x40008E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BlendshapeDefinition[] bs_reaction_pain;

		[Token(Token = "0x40008E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public BlendshapeDefinition[] bs_reaction_blink;

		[Token(Token = "0x40008E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public BlendshapeDefinition[] bs_reaction_dazed;

		[Token(Token = "0x40008E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public BlendshapeDefinition[] bs_reaction_flinch;

		[Token(Token = "0x40008E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public BlendshapeDefinition[] bs_reaction_effort;

		[Token(Token = "0x40008E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public BlendshapeDefinition[] bs_reaction_tired;

		[Token(Token = "0x6000F64")]
		[Address(RVA = "0x3FB020", Offset = "0x3FB020", VA = "0x3FB020")]
		public EnemyBlendshapes()
		{
		}
	}
	[Token(Token = "0x20001EC")]
	public enum DodgeAction
	{
		[Token(Token = "0x40008EA")]
		None,
		[Token(Token = "0x40008EB")]
		SlipBack,
		[Token(Token = "0x40008EC")]
		SlipLeft,
		[Token(Token = "0x40008ED")]
		SlipRight,
		[Token(Token = "0x40008EE")]
		DuckDown,
		[Token(Token = "0x40008EF")]
		DuckLeft,
		[Token(Token = "0x40008F0")]
		DuckRight
	}
	[Token(Token = "0x20001ED")]
	public class EnemyController : BoxerController
	{
		[Token(Token = "0x20002EC")]
		public enum BehaviorMode
		{
			[Token(Token = "0x4001049")]
			Idle,
			[Token(Token = "0x400104A")]
			Pursue,
			[Token(Token = "0x400104B")]
			KeepAway,
			[Token(Token = "0x400104C")]
			Attack,
			[Token(Token = "0x400104D")]
			Retreat,
			[Token(Token = "0x400104E")]
			PostMatch
		}

		[Token(Token = "0x20002ED")]
		public enum PunchStaminaLevel
		{
			[Token(Token = "0x4001050")]
			StepIn,
			[Token(Token = "0x4001051")]
			Punch,
			[Token(Token = "0x4001052")]
			Combo
		}

		[Token(Token = "0x20002EE")]
		protected enum HandRestriction
		{
			[Token(Token = "0x4001054")]
			None,
			[Token(Token = "0x4001055")]
			NoLead,
			[Token(Token = "0x4001056")]
			NoRear
		}

		[Token(Token = "0x20002EF")]
		public struct PunchAction
		{
			[Token(Token = "0x4001057")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string punchName;

			[Token(Token = "0x4001058")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public HitZone target;

			[Token(Token = "0x4001059")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float weight;

			[Token(Token = "0x60014C2")]
			[Address(RVA = "0x2C15AC", Offset = "0x2C15AC", VA = "0x2C15AC")]
			public PunchAction(string setPunchName = "", [Optional] HitZone setTarget, float setWeight = 0f)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002F0")]
		public class BlockPositions
		{
			[Token(Token = "0x400105A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x247918", Offset = "0x247918")]
			public Vector3 leftHandFront;

			[Token(Token = "0x400105B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 leftHandFrontRotation;

			[Token(Token = "0x400105C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 leftElbowFront;

			[Token(Token = "0x400105D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 rightHandFront;

			[Token(Token = "0x400105E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Vector3 rightHandFrontRotation;

			[Token(Token = "0x400105F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public Vector3 rightElbowFront;

			[Token(Token = "0x4001060")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x247950", Offset = "0x247950")]
			public Vector3 leftHandSide;

			[Token(Token = "0x4001061")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Vector3 leftHandSideRotation;

			[Token(Token = "0x4001062")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Vector3 leftElbowSide;

			[Token(Token = "0x4001063")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			public Vector3 rightHandSide;

			[Token(Token = "0x4001064")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public Vector3 rightHandSideRotation;

			[Token(Token = "0x4001065")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			public Vector3 rightElbowSide;

			[Token(Token = "0x4001066")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x247988", Offset = "0x247988")]
			public Vector3 leftHandBody;

			[Token(Token = "0x4001067")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			public Vector3 leftHandBodyRotation;

			[Token(Token = "0x4001068")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			public Vector3 leftElbowBody;

			[Token(Token = "0x4001069")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			public Vector3 rightHandBody;

			[Token(Token = "0x400106A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			public Vector3 rightHandBodyRotation;

			[Token(Token = "0x400106B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
			public Vector3 rightElbowBody;

			[Token(Token = "0x400106C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x2479C0", Offset = "0x2479C0")]
			public Vector3 leftHandBodyChinLeft;

			[Token(Token = "0x400106D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
			public Vector3 leftHandBodyChinLeftRotation;

			[Token(Token = "0x400106E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			public Vector3 leftElbowBodyChinLeft;

			[Token(Token = "0x400106F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
			public Vector3 rightHandBodyChinLeft;

			[Token(Token = "0x4001070")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
			public Vector3 rightHandBodyChinLeftRotation;

			[Token(Token = "0x4001071")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
			public Vector3 rightElbowBodyChinLeft;

			[Token(Token = "0x4001072")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
			[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x247A04", Offset = "0x247A04")]
			public Vector3 leftHandBodyChinRight;

			[Token(Token = "0x4001073")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
			public Vector3 leftHandBodyChinRightRotation;

			[Token(Token = "0x4001074")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
			public Vector3 leftElbowBodyChinRight;

			[Token(Token = "0x4001075")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
			public Vector3 rightHandBodyChinRight;

			[Token(Token = "0x4001076")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
			public Vector3 rightHandBodyChinRightRotation;

			[Token(Token = "0x4001077")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
			public Vector3 rightElbowBodyChinRight;

			[Token(Token = "0x60014C3")]
			[Address(RVA = "0x4CA3D0", Offset = "0x4CA3D0", VA = "0x4CA3D0")]
			public BlockPositions()
			{
			}
		}

		[Token(Token = "0x20002F1")]
		private enum BlockLocation
		{
			[Token(Token = "0x4001079")]
			Front,
			[Token(Token = "0x400107A")]
			Sides,
			[Token(Token = "0x400107B")]
			Body,
			[Token(Token = "0x400107C")]
			BodyChinLeft,
			[Token(Token = "0x400107D")]
			BodyChinRight
		}

		[Token(Token = "0x20002F2")]
		private struct OpponentPositionHistory
		{
			[Token(Token = "0x400107E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 position;

			[Token(Token = "0x400107F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public float time;

			[Token(Token = "0x60014C4")]
			[Address(RVA = "0x2C153C", Offset = "0x2C153C", VA = "0x2C153C")]
			public OpponentPositionHistory(Vector3 setPosition, float setTime)
			{
			}
		}

		[Token(Token = "0x20002F3")]
		public enum Arm
		{
			[Token(Token = "0x4001081")]
			Left,
			[Token(Token = "0x4001082")]
			Right,
			[Token(Token = "0x4001083")]
			Both
		}

		[Token(Token = "0x40008F1")]
		private const float roundStartRetreatTime = 1f;

		[Token(Token = "0x40008F2")]
		private const float dodgeStaminaVariance = 0.1f;

		[Token(Token = "0x40008F3")]
		private const float punchStaminaVariance = 0.25f;

		[Token(Token = "0x40008F4")]
		private const float painReactionBlockChance = 0.85f;

		[Token(Token = "0x40008F5")]
		public const float forceRequiredForSweat = 2000f;

		[Token(Token = "0x40008F6")]
		private const float maxNegativeZSpeed = -0.08f;

		[Token(Token = "0x40008F7")]
		public const float movementAccelerationMin = 2f;

		[Token(Token = "0x40008F8")]
		public const float movementAccelerationMax = 2f;

		[Token(Token = "0x40008F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public bool isLeftHanded;

		[Token(Token = "0x40008FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public int bodyMaterialSlot;

		[Token(Token = "0x40008FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Muscle[] leftArmMuscles;

		[Token(Token = "0x40008FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private Muscle[] rightArmMuscles;

		[Token(Token = "0x40008FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public float reachModifier;

		[Token(Token = "0x40008FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public bool canBeHeldBack;

		[Token(Token = "0x40008FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE5")]
		public bool canBlock;

		[Token(Token = "0x4000900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE6")]
		public bool canRetreat;

		[Token(Token = "0x4000901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE7")]
		public bool canDodge;

		[Token(Token = "0x4000902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public bool expertDodge;

		[Token(Token = "0x4000903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public BehaviorMode behaviorMode;

		[Token(Token = "0x4000904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Vector3 opponentPosition;

		[Token(Token = "0x4000905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		protected Vector3 distanceFromOpponentVector;

		[Token(Token = "0x4000906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		protected float distanceFromOpponentMagnitude;

		[Token(Token = "0x4000907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private Vector3 trueOpponentPosition;

		[Token(Token = "0x4000908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		protected Vector3 trueDistanceFromOpponentVector;

		[Token(Token = "0x4000909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		protected float trueDistanceFromOpponentMagnitude;

		[Token(Token = "0x400090A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private float movementReactionTime;

		[Token(Token = "0x400090B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		public float baseMovementReactionTime;

		[Token(Token = "0x400090C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private float targetObservationTime;

		[Token(Token = "0x400090D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		public float baseTargetObservationTime;

		[Token(Token = "0x400090E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private float targetSpeed;

		[Token(Token = "0x400090F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private float targetSpeedZ;

		[Token(Token = "0x4000910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private float targetSpeedX;

		[Token(Token = "0x4000911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		public float closestDistance;

		[Token(Token = "0x4000912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public float farthestDistance;

		[Token(Token = "0x4000913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private float minDistance;

		[Token(Token = "0x4000914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		protected float closeDistance;

		[Token(Token = "0x4000915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		private float closeRange;

		[Token(Token = "0x4000916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private float jabDistance;

		[Token(Token = "0x4000917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		private float jabRange;

		[Token(Token = "0x4000918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private float attackRange;

		[Token(Token = "0x4000919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private float stopAttackRange;

		[Token(Token = "0x400091A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private float stepInRange;

		[Token(Token = "0x400091B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private float stepInDistance;

		[Token(Token = "0x400091C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private float opponentRange;

		[Token(Token = "0x400091D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private float distanceOutsideOpponentsRange;

		[Token(Token = "0x400091E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private float retreatTimer;

		[Token(Token = "0x400091F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		protected bool adjustPunchX;

		[Token(Token = "0x4000920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17D")]
		protected bool adjustPunchY;

		[Token(Token = "0x4000921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17E")]
		protected bool adjustPunchZ;

		[Token(Token = "0x4000922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17F")]
		protected bool homePunchX;

		[Token(Token = "0x4000923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		protected bool homePunchY;

		[Token(Token = "0x4000924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x181")]
		protected bool homePunchZ;

		[Token(Token = "0x4000925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x182")]
		protected bool isGettingUp;

		[Token(Token = "0x4000926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x183")]
		protected bool isRagdoll;

		[Token(Token = "0x4000927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		protected bool isKneeling;

		[Token(Token = "0x4000928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x185")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24625C", Offset = "0x24625C")]
		private bool <isSteppingIn>k__BackingField;

		[Token(Token = "0x4000929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x186")]
		protected bool leadHandPunching;

		[Token(Token = "0x400092A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x187")]
		protected bool rearHandPunching;

		[Token(Token = "0x400092B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		protected bool punchMatchedTarget;

		[Token(Token = "0x400092C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24626C", Offset = "0x24626C")]
		private string <currentPunchName>k__BackingField;

		[Token(Token = "0x400092D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private bool autoLook;

		[Token(Token = "0x400092E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		public float throwFakeTendency;

		[Token(Token = "0x400092F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public float stepInTendency;

		[Token(Token = "0x4000930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		public float offenseTendency;

		[Token(Token = "0x4000931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public float offenseTendencyWhenOpponentIsDizzy;

		[Token(Token = "0x4000932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		private float cautionWhenDizzyTendency;

		[Token(Token = "0x4000933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private float pursueDizzyTendency;

		[Token(Token = "0x4000934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		public float punchStaminaCostModifier;

		[Token(Token = "0x4000935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public float dodgeStaminaCostModifier;

		[Token(Token = "0x4000936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		public float dodgeSpeedMultiplier;

		[Token(Token = "0x4000937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private float dodgeStaminaCost;

		[Token(Token = "0x4000938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		private float punchStaminaCost;

		[Token(Token = "0x4000939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private float stepInStaminaCost;

		[Token(Token = "0x400093A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		private float staminaNeededToStepIn;

		[Token(Token = "0x400093B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private float staminaNeededToPunch;

		[Token(Token = "0x400093C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		private float staminaNeededToCombo;

		[Token(Token = "0x400093D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private float staminaNeededToDodge;

		[Token(Token = "0x400093E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		private float staminaNeededToStepInWhenRallying;

		[Token(Token = "0x400093F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private float staminaNeededToPunchWhenRallying;

		[Token(Token = "0x4000940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		private float staminaNeededToComboWhenRallying;

		[Token(Token = "0x4000941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private float staminaNeededToComboWhenDizzy;

		[Token(Token = "0x4000942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		private float staminaNeededToPunchWhenDizzy;

		[Token(Token = "0x4000943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private float staminaNeededToStepInWhenDizzy;

		[Token(Token = "0x4000944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		private float staminaDrainForNextPunch;

		[Token(Token = "0x4000945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private List<PunchAction> storedPunchActions;

		[Token(Token = "0x4000946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
		protected HitZone punchTarget;

		[Token(Token = "0x4000947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24627C", Offset = "0x24627C")]
		private float <punchTypeMassModifier>k__BackingField;

		[Token(Token = "0x4000948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24628C", Offset = "0x24628C")]
		private float <punchTypeVelocity>k__BackingField;

		[Token(Token = "0x4000949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public string enemyName;

		[Token(Token = "0x400094A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		public string enemyDefeatName;

		[Token(Token = "0x400094B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private float dontAttackDodgeTimer;

		[Token(Token = "0x400094C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
		private float dontAttackHitTimer;

		[Token(Token = "0x400094D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private float dontAttackSwingTimer;

		[Token(Token = "0x400094E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x24629C", Offset = "0x24629C")]
		public Material bruiseMaterial;

		[Token(Token = "0x400094F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x2462D0", Offset = "0x2462D0")]
		public Material decalMaterial;

		[Token(Token = "0x4000950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
		private Material[] materials;

		[Token(Token = "0x4000951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private Material[] bruiseMaterials;

		[Token(Token = "0x4000952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
		private RenderTexture cutsTexture;

		[Token(Token = "0x4000953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private RenderTexture bleedingTexture;

		[Token(Token = "0x4000954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22C")]
		private RenderTexture bruiseTexture;

		[Token(Token = "0x4000955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private RenderTexture targetTex;

		[Token(Token = "0x4000956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x234")]
		private int BruiseRenderLayer;

		[Token(Token = "0x4000957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		private int BruiseRenderLayerMask;

		[Token(Token = "0x4000958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23C")]
		private int groundLayers;

		[Token(Token = "0x4000959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		public Transform belly;

		[Token(Token = "0x400095A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float turnSpeed;

		[Token(Token = "0x400095B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		protected static float maxAngleDifferenceFromOpponent;

		[Token(Token = "0x400095C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x244")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x246304", Offset = "0x246304")]
		public bool forceBlockHigh;

		[Token(Token = "0x400095D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x245")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x246338", Offset = "0x246338")]
		public bool forceBlockSides;

		[Token(Token = "0x400095E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x246")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x24636C", Offset = "0x24636C")]
		public bool forceBlockBody;

		[Token(Token = "0x400095F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x247")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x2463A0", Offset = "0x2463A0")]
		public bool forceBlockBodyChinLeft;

		[Token(Token = "0x4000960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x2463D4", Offset = "0x2463D4")]
		public bool forceBlockBodyChinRight;

		[Token(Token = "0x4000961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24C")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x246408", Offset = "0x246408")]
		public BlockPositions blockPositions;

		[Token(Token = "0x4000962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		private float blockSpeed;

		[Token(Token = "0x4000963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x254")]
		private float effectiveBlockSpeed;

		[Token(Token = "0x4000964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		private float dodgeLevel;

		[Token(Token = "0x4000965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25C")]
		private float dodgeRate;

		[Token(Token = "0x4000966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		private float dodgeSuperFastAcceleration;

		[Token(Token = "0x4000967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x264")]
		private float dodgeFastAcceleration;

		[Token(Token = "0x4000968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		private float dodgeSlowAcceleration;

		[Token(Token = "0x4000969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26C")]
		private float dodgeMaxSpeed;

		[Token(Token = "0x400096A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		[AttributeAttribute(Name = "InspectAttribute", RVA = "0x24643C", Offset = "0x24643C")]
		private bool dodging;

		[Token(Token = "0x400096B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x274")]
		private int dodgeDirection;

		[Token(Token = "0x400096C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		private BlockLocation blockLocation;

		[Token(Token = "0x400096D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27C")]
		private float blockTimer;

		[Token(Token = "0x400096E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		protected Vector3 oldLeftHandPosition;

		[Token(Token = "0x400096F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28C")]
		protected Vector3 oldRightHandPosition;

		[Token(Token = "0x4000970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		protected float leftHandIKVelocity;

		[Token(Token = "0x4000971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29C")]
		protected float leftHandIKVelocityWeight;

		[Token(Token = "0x4000972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		protected float rightHandIKVelocity;

		[Token(Token = "0x4000973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A4")]
		protected float rightHandIKVelocityWeight;

		[Token(Token = "0x4000974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24644C", Offset = "0x24644C")]
		private BoxerController <opponent>k__BackingField;

		[Token(Token = "0x4000975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2AC")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x24645C", Offset = "0x24645C")]
		public bool canBruise;

		[Token(Token = "0x4000976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2AD")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x246490", Offset = "0x246490")]
		public bool canBump;

		[Token(Token = "0x4000977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2AE")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x2464C4", Offset = "0x2464C4")]
		public bool canBleed;

		[Token(Token = "0x4000978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Color[] bruiseColors;

		[Token(Token = "0x4000979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		private float leadHookTendency;

		[Token(Token = "0x400097A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B4")]
		private float rearHookTendency;

		[Token(Token = "0x400097B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		private float leadUppercutTendency;

		[Token(Token = "0x400097C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2BC")]
		private float rearUppercutTendency;

		[Token(Token = "0x400097D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		private float rearCrossTendency;

		[Token(Token = "0x400097E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C4")]
		private float leadCrossTendency;

		[Token(Token = "0x400097F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		private float jabTendency;

		[Token(Token = "0x4000980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2CC")]
		private float headTendency;

		[Token(Token = "0x4000981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		private float bodyTendency;

		[Token(Token = "0x4000982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D4")]
		private float stepLeadHookTendency;

		[Token(Token = "0x4000983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
		private float stepRearHookTendency;

		[Token(Token = "0x4000984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2DC")]
		private float stepLeadUppercutTendency;

		[Token(Token = "0x4000985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		private float stepRearUppercutTendency;

		[Token(Token = "0x4000986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E4")]
		private float stepRearCrossTendency;

		[Token(Token = "0x4000987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		private float stepJabTendency;

		[Token(Token = "0x4000988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2EC")]
		public float attackSpeed;

		[Token(Token = "0x4000989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2464F8", Offset = "0x2464F8")]
		private float <effectiveAttackSpeed>k__BackingField;

		[Token(Token = "0x400098A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F4")]
		public float effectiveMassModifier;

		[Token(Token = "0x400098B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		public float defenseModifier;

		[Token(Token = "0x400098C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2FC")]
		protected bool canBackUp;

		[Token(Token = "0x400098D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x246508", Offset = "0x246508")]
		private EnemyFist <leftFist>k__BackingField;

		[Token(Token = "0x400098E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x304")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x246518", Offset = "0x246518")]
		private EnemyFist <rightFist>k__BackingField;

		[Token(Token = "0x400098F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x246528", Offset = "0x246528")]
		private Animator <bodyAnimation>k__BackingField;

		[Token(Token = "0x4000990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x246538", Offset = "0x246538")]
		private FullBodyBipedIK <ik>k__BackingField;

		[Token(Token = "0x4000991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x246548", Offset = "0x246548")]
		private LookAtIK <lik>k__BackingField;

		[Token(Token = "0x4000992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x314")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x246558", Offset = "0x246558")]
		public int readySoundChance;

		[Token(Token = "0x4000993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x24658C", Offset = "0x24658C")]
		public LipSyncData[] attackSounds;

		[Token(Token = "0x4000994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31C")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x2465C0", Offset = "0x2465C0")]
		public LipSyncData[] readySounds;

		[Token(Token = "0x4000995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x2465F4", Offset = "0x2465F4")]
		public LipSyncData[] getHitSounds;

		[Token(Token = "0x4000996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x324")]
		private Vector3 lookAtPosition;

		[Token(Token = "0x4000997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
		private float lookAtPositionWeight;

		[Token(Token = "0x4000998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x334")]
		private Vector3 leftHandIKPosition;

		[Token(Token = "0x4000999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
		private float leftHandIKPositionWeight;

		[Token(Token = "0x400099A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x344")]
		private Vector3 rightHandIKPosition;

		[Token(Token = "0x400099B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
		private float rightHandIKPositionWeight;

		[Token(Token = "0x400099C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x354")]
		protected bool sweating;

		[Token(Token = "0x400099D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
		protected float damageForehead;

		[Token(Token = "0x400099E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35C")]
		protected float damageNose;

		[Token(Token = "0x400099F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x360")]
		protected float damageLipCenter;

		[Token(Token = "0x40009A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x364")]
		protected float damageForeheadL;

		[Token(Token = "0x40009A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x368")]
		protected float damageEyeL;

		[Token(Token = "0x40009A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36C")]
		protected float damageCheekL;

		[Token(Token = "0x40009A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x370")]
		protected float damageMouthL;

		[Token(Token = "0x40009A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x374")]
		protected float damageForeheadR;

		[Token(Token = "0x40009A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x378")]
		protected float damageEyeR;

		[Token(Token = "0x40009A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x37C")]
		protected float damageCheekR;

		[Token(Token = "0x40009A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x380")]
		protected float damageMouthR;

		[Token(Token = "0x40009A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x384")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x246628", Offset = "0x246628")]
		public float bumpLocationFrontZ;

		[Token(Token = "0x40009A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x388")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x24665C", Offset = "0x24665C")]
		public float bumpLocationRightX;

		[Token(Token = "0x40009AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38C")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x246690", Offset = "0x246690")]
		public float bumpLocationLeftX;

		[Token(Token = "0x40009AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x390")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x2466C4", Offset = "0x2466C4")]
		public float bumpLocationLipMinY;

		[Token(Token = "0x40009AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x394")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x2466F8", Offset = "0x2466F8")]
		public float bumpLocationCheekMinY;

		[Token(Token = "0x40009AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x398")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x24672C", Offset = "0x24672C")]
		public float bumpLocationEyeMinY;

		[Token(Token = "0x40009AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39C")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x246760", Offset = "0x246760")]
		public float bumpLocationBrowMinY;

		[Token(Token = "0x40009AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A0")]
		protected float cutChance;

		[Token(Token = "0x40009B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A4")]
		protected float cutReopenChance;

		[Token(Token = "0x40009B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A8")]
		protected bool cutNose;

		[Token(Token = "0x40009B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A9")]
		protected bool cutLipCenter;

		[Token(Token = "0x40009B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3AA")]
		protected bool cutForeheadL;

		[Token(Token = "0x40009B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3AB")]
		protected bool cutEyeL;

		[Token(Token = "0x40009B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3AC")]
		protected bool cutCheekL;

		[Token(Token = "0x40009B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3AD")]
		protected bool cutForeheadR;

		[Token(Token = "0x40009B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3AE")]
		protected bool cutEyeR;

		[Token(Token = "0x40009B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3AF")]
		protected bool cutCheekR;

		[Token(Token = "0x40009B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B0")]
		protected bool bleedingNose;

		[Token(Token = "0x40009BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B1")]
		protected bool bleedingLipCenter;

		[Token(Token = "0x40009BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B2")]
		protected bool bleedingForeheadL;

		[Token(Token = "0x40009BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B3")]
		protected bool bleedingEyeL;

		[Token(Token = "0x40009BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B4")]
		protected bool bleedingCheekL;

		[Token(Token = "0x40009BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B5")]
		protected bool bleedingForeheadR;

		[Token(Token = "0x40009BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B6")]
		protected bool bleedingEyeR;

		[Token(Token = "0x40009C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B7")]
		protected bool bleedingCheekR;

		[Token(Token = "0x40009C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B8")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x246794", Offset = "0x246794")]
		public Texture bleedingLipCenterTexture;

		[Token(Token = "0x40009C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3BC")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x2467C8", Offset = "0x2467C8")]
		public Texture bleedingCheekRTexture;

		[Token(Token = "0x40009C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C0")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x2467FC", Offset = "0x2467FC")]
		public Texture bleedingCheekLTexture;

		[Token(Token = "0x40009C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C4")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x246830", Offset = "0x246830")]
		public Texture bleedingEyeRTexture;

		[Token(Token = "0x40009C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C8")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x246864", Offset = "0x246864")]
		public Texture bleedingEyeLTexture;

		[Token(Token = "0x40009C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3CC")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x246898", Offset = "0x246898")]
		public Texture bleedingForeheadRTexture;

		[Token(Token = "0x40009C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D0")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x2468CC", Offset = "0x2468CC")]
		public Texture bleedingForeheadLTexture;

		[Token(Token = "0x40009C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D4")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x246900", Offset = "0x246900")]
		public Texture bleedingNoseTexture;

		[Token(Token = "0x40009C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D8")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x246934", Offset = "0x246934")]
		public Texture cutLipCenterTexture;

		[Token(Token = "0x40009CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3DC")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x246968", Offset = "0x246968")]
		public Texture cutCheekRTexture;

		[Token(Token = "0x40009CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E0")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x24699C", Offset = "0x24699C")]
		public Texture cutCheekLTexture;

		[Token(Token = "0x40009CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E4")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x2469D0", Offset = "0x2469D0")]
		public Texture cutEyeRTexture;

		[Token(Token = "0x40009CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E8")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x246A04", Offset = "0x246A04")]
		public Texture cutEyeLTexture;

		[Token(Token = "0x40009CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3EC")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x246A38", Offset = "0x246A38")]
		public Texture cutForeheadRTexture;

		[Token(Token = "0x40009CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F0")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x246A6C", Offset = "0x246A6C")]
		public Texture cutForeheadLTexture;

		[Token(Token = "0x40009D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F4")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x246AA0", Offset = "0x246AA0")]
		public Texture cutNoseTexture;

		[Token(Token = "0x40009D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F8")]
		protected float expressPainTarget;

		[Token(Token = "0x40009D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3FC")]
		protected float expressPainLevel;

		[Token(Token = "0x40009D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x400")]
		protected float expressConcernTarget;

		[Token(Token = "0x40009D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x404")]
		protected float expressConcernLevel;

		[Token(Token = "0x40009D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x408")]
		protected float expressEffortTarget;

		[Token(Token = "0x40009D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40C")]
		protected float expressEffortLevel;

		[Token(Token = "0x40009D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x410")]
		protected float facialVarianceTarget;

		[Token(Token = "0x40009D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x414")]
		protected float facialVarianceLevel;

		[Token(Token = "0x40009D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x418")]
		protected float facialVarianceDeltaSpeed;

		[Token(Token = "0x40009DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41C")]
		protected float dizzyLayerTarget;

		[Token(Token = "0x40009DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x420")]
		protected float dizzyLayerLevel;

		[Token(Token = "0x40009DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		protected static float minThreatVelocity;

		[Token(Token = "0x40009DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x424")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x246AD4", Offset = "0x246AD4")]
		public EnemyBlendshapes blendshapes;

		[Token(Token = "0x40009DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x428")]
		public SkinnedMeshRenderer bodyMesh;

		[Token(Token = "0x40009DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x246B0C", Offset = "0x246B0C")]
		private LipSync <mouth>k__BackingField;

		[Token(Token = "0x40009E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x430")]
		public GameObject body;

		[Token(Token = "0x40009E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x434")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x246B1C", Offset = "0x246B1C")]
		public bool canSweat;

		[Token(Token = "0x40009E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x435")]
		public bool useArmIK;

		[Token(Token = "0x40009E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x436")]
		public bool forceLook;

		[Token(Token = "0x40009E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x438")]
		public Transform lookAt;

		[Token(Token = "0x40009E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x43C")]
		private bool initIK;

		[Token(Token = "0x40009E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x440")]
		protected PuppetMaster pm;

		[Token(Token = "0x40009E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x444")]
		private Vector3 hipsForward;

		[Token(Token = "0x40009E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x450")]
		private Vector3 hipsUp;

		[Token(Token = "0x40009E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45C")]
		private Vector3 bodyPositionLastFrame;

		[Token(Token = "0x40009EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x468")]
		private Quaternion bodyRotationLastFrame;

		[Token(Token = "0x40009EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x478")]
		private bool restrictedMovement;

		[Token(Token = "0x40009EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x479")]
		private bool doBlinkCycle;

		[Token(Token = "0x40009ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47A")]
		private bool blinking;

		[Token(Token = "0x40009EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47C")]
		private float blinkTimer;

		[Token(Token = "0x40009EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x480")]
		private int hitLayerIndex;

		[Token(Token = "0x40009F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x484")]
		private int hitLayerIndex1;

		[Token(Token = "0x40009F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x488")]
		private int hitLayerIndex2;

		[Token(Token = "0x40009F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48C")]
		protected bool isStunned;

		[Token(Token = "0x40009F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x490")]
		private float staminaLevel;

		[Token(Token = "0x40009F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x494")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x246B58", Offset = "0x246B58")]
		private float staminaMax;

		[Token(Token = "0x40009F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x498")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x246BB4", Offset = "0x246BB4")]
		private float staminaRegen;

		[Token(Token = "0x40009F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49C")]
		private float fatigueLevel;

		[Token(Token = "0x40009F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x246C14", Offset = "0x246C14")]
		private float fatigueMax;

		[Token(Token = "0x40009F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x246C70", Offset = "0x246C70")]
		private float fatigueThreshold;

		[Token(Token = "0x40009F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A8")]
		private float fatigueModifier;

		[Token(Token = "0x40009FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4AC")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x246CD8", Offset = "0x246CD8")]
		public bool sb_sides;

		[Token(Token = "0x40009FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4AD")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x246D0C", Offset = "0x246D0C")]
		public bool sb_front;

		[Token(Token = "0x40009FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4AE")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x246D40", Offset = "0x246D40")]
		public bool sb_body;

		[Token(Token = "0x40009FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4AF")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x246D74", Offset = "0x246D74")]
		public bool sb_body_left;

		[Token(Token = "0x40009FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B0")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x246DA8", Offset = "0x246DA8")]
		public bool sb_body_right;

		[Token(Token = "0x40009FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B4")]
		private int sb_choice;

		[Token(Token = "0x4000A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B8")]
		private bool wasSetBlockPositions;

		[Token(Token = "0x4000A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4BC")]
		private Transform sb_leftHandEffector;

		[Token(Token = "0x4000A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C0")]
		private Transform sb_rightHandEffector;

		[Token(Token = "0x4000A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C4")]
		private Transform sb_leftElbowEffector;

		[Token(Token = "0x4000A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C8")]
		private Transform sb_rightElbowEffector;

		[Token(Token = "0x4000A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4CC")]
		private Camera bruiseCamera;

		[Token(Token = "0x4000A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D0")]
		private bool isComboing;

		[Token(Token = "0x4000A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D4")]
		private HitZone[] targets;

		[Token(Token = "0x4000A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D8")]
		private float[] targetObservationTimes;

		[Token(Token = "0x4000A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4DC")]
		private List<OpponentPositionHistory> opponentPositionHistory;

		[Token(Token = "0x4000A0A")]
		private const float maxHistoryTime = 0.5f;

		[Token(Token = "0x17000153")]
		public bool isSteppingIn
		{
			[Token(Token = "0x6000F65")]
			[Address(RVA = "0x3FB028", Offset = "0x3FB028", VA = "0x3FB028")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249800", Offset = "0x249800")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F66")]
			[Address(RVA = "0x3FB030", Offset = "0x3FB030", VA = "0x3FB030")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249810", Offset = "0x249810")]
			set
			{
			}
		}

		[Token(Token = "0x17000154")]
		public string currentPunchName
		{
			[Token(Token = "0x6000F67")]
			[Address(RVA = "0x3FB038", Offset = "0x3FB038", VA = "0x3FB038")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249820", Offset = "0x249820")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F68")]
			[Address(RVA = "0x3FB040", Offset = "0x3FB040", VA = "0x3FB040")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249830", Offset = "0x249830")]
			set
			{
			}
		}

		[Token(Token = "0x17000155")]
		public float punchTypeMassModifier
		{
			[Token(Token = "0x6000F69")]
			[Address(RVA = "0x3FB048", Offset = "0x3FB048", VA = "0x3FB048")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249840", Offset = "0x249840")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F6A")]
			[Address(RVA = "0x3FB050", Offset = "0x3FB050", VA = "0x3FB050")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249850", Offset = "0x249850")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000156")]
		public float punchTypeVelocity
		{
			[Token(Token = "0x6000F6B")]
			[Address(RVA = "0x3FB058", Offset = "0x3FB058", VA = "0x3FB058")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249860", Offset = "0x249860")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F6C")]
			[Address(RVA = "0x3FB060", Offset = "0x3FB060", VA = "0x3FB060")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249870", Offset = "0x249870")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000157")]
		private float dontAttackTimer
		{
			[Token(Token = "0x6000F6D")]
			[Address(RVA = "0x3FB068", Offset = "0x3FB068", VA = "0x3FB068")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000158")]
		public BoxerController opponent
		{
			[Token(Token = "0x6000F6E")]
			[Address(RVA = "0x3FB114", Offset = "0x3FB114", VA = "0x3FB114")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249880", Offset = "0x249880")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F6F")]
			[Address(RVA = "0x3FB11C", Offset = "0x3FB11C", VA = "0x3FB11C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249890", Offset = "0x249890")]
			set
			{
			}
		}

		[Token(Token = "0x17000159")]
		public float effectiveAttackSpeed
		{
			[Token(Token = "0x6000F70")]
			[Address(RVA = "0x3FB124", Offset = "0x3FB124", VA = "0x3FB124")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2498A0", Offset = "0x2498A0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F71")]
			[Address(RVA = "0x3FB12C", Offset = "0x3FB12C", VA = "0x3FB12C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2498B0", Offset = "0x2498B0")]
			protected set
			{
			}
		}

		[Token(Token = "0x1700015A")]
		public EnemyFist leftFist
		{
			[Token(Token = "0x6000F72")]
			[Address(RVA = "0x3FB134", Offset = "0x3FB134", VA = "0x3FB134")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2498C0", Offset = "0x2498C0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F73")]
			[Address(RVA = "0x3FB13C", Offset = "0x3FB13C", VA = "0x3FB13C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2498D0", Offset = "0x2498D0")]
			set
			{
			}
		}

		[Token(Token = "0x1700015B")]
		public EnemyFist rightFist
		{
			[Token(Token = "0x6000F74")]
			[Address(RVA = "0x3FB144", Offset = "0x3FB144", VA = "0x3FB144")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2498E0", Offset = "0x2498E0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F75")]
			[Address(RVA = "0x3FB14C", Offset = "0x3FB14C", VA = "0x3FB14C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2498F0", Offset = "0x2498F0")]
			set
			{
			}
		}

		[Token(Token = "0x1700015C")]
		public Animator bodyAnimation
		{
			[Token(Token = "0x6000F76")]
			[Address(RVA = "0x3FB154", Offset = "0x3FB154", VA = "0x3FB154")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249900", Offset = "0x249900")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F77")]
			[Address(RVA = "0x3FB15C", Offset = "0x3FB15C", VA = "0x3FB15C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249910", Offset = "0x249910")]
			set
			{
			}
		}

		[Token(Token = "0x1700015D")]
		public FullBodyBipedIK ik
		{
			[Token(Token = "0x6000F78")]
			[Address(RVA = "0x3FB164", Offset = "0x3FB164", VA = "0x3FB164")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249920", Offset = "0x249920")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F79")]
			[Address(RVA = "0x3FB16C", Offset = "0x3FB16C", VA = "0x3FB16C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249930", Offset = "0x249930")]
			set
			{
			}
		}

		[Token(Token = "0x1700015E")]
		public LookAtIK lik
		{
			[Token(Token = "0x6000F7A")]
			[Address(RVA = "0x3FB174", Offset = "0x3FB174", VA = "0x3FB174")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249940", Offset = "0x249940")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F7B")]
			[Address(RVA = "0x3FB17C", Offset = "0x3FB17C", VA = "0x3FB17C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249950", Offset = "0x249950")]
			set
			{
			}
		}

		[Token(Token = "0x1700015F")]
		public LipSync mouth
		{
			[Token(Token = "0x6000F7C")]
			[Address(RVA = "0x3FB184", Offset = "0x3FB184", VA = "0x3FB184")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249960", Offset = "0x249960")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F7D")]
			[Address(RVA = "0x3FB18C", Offset = "0x3FB18C", VA = "0x3FB18C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249970", Offset = "0x249970")]
			set
			{
			}
		}

		[Token(Token = "0x6000F7E")]
		[Address(RVA = "0x3FB194", Offset = "0x3FB194", VA = "0x3FB194", Slot = "4")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6000F7F")]
		[Address(RVA = "0x3FB6C8", Offset = "0x3FB6C8", VA = "0x3FB6C8")]
		private void SetBlendShapeWeight(int index, float value)
		{
		}

		[Token(Token = "0x6000F80")]
		[Address(RVA = "0x3FB704", Offset = "0x3FB704", VA = "0x3FB704")]
		private void FindBlendshapeIndexes(ref BlendshapeDefinition[] blendshapeDefinitions)
		{
		}

		[Token(Token = "0x6000F81")]
		[Address(RVA = "0x3FB978", Offset = "0x3FB978", VA = "0x3FB978")]
		private void LoadBlendshapeIndexes()
		{
		}

		[Token(Token = "0x6000F82")]
		[Address(RVA = "0x3FBBC8", Offset = "0x3FBBC8", VA = "0x3FBBC8", Slot = "5")]
		public override void Start()
		{
		}

		[Token(Token = "0x6000F83")]
		[Address(RVA = "0x3FCC1C", Offset = "0x3FCC1C", VA = "0x3FCC1C", Slot = "6")]
		public override void Update()
		{
		}

		[Token(Token = "0x6000F84")]
		[Address(RVA = "0x3FD88C", Offset = "0x3FD88C", VA = "0x3FD88C")]
		private void SetDizzyBlendshape(float value)
		{
		}

		[Token(Token = "0x6000F85")]
		[Address(RVA = "0x3FDEB8", Offset = "0x3FDEB8", VA = "0x3FDEB8")]
		private void SetTiredBlendshape(float value)
		{
		}

		[Token(Token = "0x6000F86")]
		[Address(RVA = "0x3FE908", Offset = "0x3FE908", VA = "0x3FE908")]
		public void SolveIK()
		{
		}

		[Token(Token = "0x6000F87")]
		[Address(RVA = "0x405528", Offset = "0x405528", VA = "0x405528")]
		private void ExpendStamina(float staminaCost, float variance = 0f)
		{
		}

		[Token(Token = "0x6000F88")]
		[Address(RVA = "0x405620", Offset = "0x405620", VA = "0x405620")]
		private void SetFatigue(float newFatigueLevel)
		{
		}

		[Token(Token = "0x6000F89")]
		[Address(RVA = "0x4056F0", Offset = "0x4056F0", VA = "0x4056F0", Slot = "44")]
		public override void RecoverFatigue(float recoveryTime)
		{
		}

		[Token(Token = "0x6000F8A")]
		[Address(RVA = "0x405738", Offset = "0x405738", VA = "0x405738", Slot = "45")]
		protected virtual void startBlinkCycle()
		{
		}

		[Token(Token = "0x6000F8B")]
		[Address(RVA = "0x405768", Offset = "0x405768", VA = "0x405768", Slot = "46")]
		protected virtual void StopBlinkCycle()
		{
		}

		[Token(Token = "0x6000F8C")]
		[Address(RVA = "0x3FCF9C", Offset = "0x3FCF9C", VA = "0x3FCF9C")]
		protected void HandleBlink()
		{
		}

		[Token(Token = "0x6000F8D")]
		[Address(RVA = "0x405780", Offset = "0x405780", VA = "0x405780", Slot = "47")]
		protected virtual void setActiveFists()
		{
		}

		[Token(Token = "0x6000F8E")]
		[Address(RVA = "0x405940", Offset = "0x405940", VA = "0x405940", Slot = "48")]
		protected virtual void MakeBlink()
		{
		}

		[Token(Token = "0x6000F8F")]
		[Address(RVA = "0x405A7C", Offset = "0x405A7C", VA = "0x405A7C", Slot = "49")]
		protected virtual void StopBlink()
		{
		}

		[Token(Token = "0x6000F90")]
		[Address(RVA = "0x405950", Offset = "0x405950", VA = "0x405950")]
		private void SetBlinkBlendshape(float value)
		{
		}

		[Token(Token = "0x6000F91")]
		[Address(RVA = "0x405A8C", Offset = "0x405A8C", VA = "0x405A8C")]
		public void ExpressPain(float targetLevel)
		{
		}

		[Token(Token = "0x6000F92")]
		[Address(RVA = "0x405A94", Offset = "0x405A94", VA = "0x405A94")]
		public void ExpressConcern(float targetLevel)
		{
		}

		[Token(Token = "0x6000F93")]
		[Address(RVA = "0x405A9C", Offset = "0x405A9C", VA = "0x405A9C")]
		public void ExpressEffort(float targetLevel)
		{
		}

		[Token(Token = "0x6000F94")]
		[Address(RVA = "0x3FD9B8", Offset = "0x3FD9B8", VA = "0x3FD9B8")]
		public void UpdateExpressions()
		{
		}

		[Token(Token = "0x6000F95")]
		[Address(RVA = "0x405CFC", Offset = "0x405CFC", VA = "0x405CFC")]
		private void SetEffortBlendshape(float value)
		{
		}

		[Token(Token = "0x6000F96")]
		[Address(RVA = "0x405AA4", Offset = "0x405AA4", VA = "0x405AA4")]
		private void SetPainBlendshape(float value)
		{
		}

		[Token(Token = "0x6000F97")]
		[Address(RVA = "0x405BD0", Offset = "0x405BD0", VA = "0x405BD0")]
		private void SetFlinchBlendshape(float value)
		{
		}

		[Token(Token = "0x6000F98")]
		[Address(RVA = "0x3FFB70", Offset = "0x3FFB70", VA = "0x3FFB70")]
		public bool PrepareDodgeIKTargets()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F99")]
		[Address(RVA = "0x3FF734", Offset = "0x3FF734", VA = "0x3FF734")]
		public bool PreparePunchIKTargets()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F9A")]
		[Address(RVA = "0x3FFD0C", Offset = "0x3FFD0C", VA = "0x3FFD0C")]
		public bool PrepareLookIKTargets()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F9B")]
		[Address(RVA = "0x4000E8", Offset = "0x4000E8", VA = "0x4000E8")]
		public bool PrepareBlockIKTargets(Vector3 bodyMovementSinceLastFrame, Quaternion bodyAngleSinceLastFrame)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F9C")]
		[Address(RVA = "0x405E88", Offset = "0x405E88", VA = "0x405E88")]
		private void LookAtOpponent()
		{
		}

		[Token(Token = "0x6000F9D")]
		[Address(RVA = "0x405FC8", Offset = "0x405FC8", VA = "0x405FC8")]
		protected bool IsFacingOpponent()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F9E")]
		[Address(RVA = "0x406108", Offset = "0x406108", VA = "0x406108")]
		protected void HandleTurning()
		{
		}

		[Token(Token = "0x6000F9F")]
		[Address(RVA = "0x4062C0", Offset = "0x4062C0", VA = "0x4062C0")]
		protected void HandleMovement(float targetDistance)
		{
		}

		[Token(Token = "0x6000FA0")]
		[Address(RVA = "0x406D74", Offset = "0x406D74", VA = "0x406D74")]
		public void ResetMovement()
		{
		}

		[Token(Token = "0x6000FA1")]
		[Address(RVA = "0x406D88", Offset = "0x406D88", VA = "0x406D88", Slot = "50")]
		public virtual void TookASwing()
		{
		}

		[Token(Token = "0x6000FA2")]
		[Address(RVA = "0x408AEC", Offset = "0x408AEC", VA = "0x408AEC", Slot = "51")]
		protected virtual bool AddBattleDamage(float force, bool hitOnHead, Vector3 hitLocation, Vector3 globalHitLocation)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FA3")]
		[Address(RVA = "0x40A11C", Offset = "0x40A11C", VA = "0x40A11C")]
		private void AddBloodTexture(Texture bloodDecal, Texture cutDecal)
		{
		}

		[Token(Token = "0x6000FA4")]
		[Address(RVA = "0x40A298", Offset = "0x40A298", VA = "0x40A298")]
		private void CleanUpCuts()
		{
		}

		[Token(Token = "0x6000FA5")]
		[Address(RVA = "0x409D98", Offset = "0x409D98", VA = "0x409D98")]
		private void SetForeheadDamageBlendshape(float value)
		{
		}

		[Token(Token = "0x6000FA6")]
		[Address(RVA = "0x409EC4", Offset = "0x409EC4", VA = "0x409EC4")]
		private void SetNoseDamageBlendshape(float value)
		{
		}

		[Token(Token = "0x6000FA7")]
		[Address(RVA = "0x409FF0", Offset = "0x409FF0", VA = "0x409FF0")]
		private void SetLipCenterDamageBlendshape(float value)
		{
		}

		[Token(Token = "0x6000FA8")]
		[Address(RVA = "0x4098E8", Offset = "0x4098E8", VA = "0x4098E8")]
		private void SetTempleLDamageBlendshape(float value)
		{
		}

		[Token(Token = "0x6000FA9")]
		[Address(RVA = "0x409A14", Offset = "0x409A14", VA = "0x409A14")]
		private void SetEyeLDamageBlendshape(float value)
		{
		}

		[Token(Token = "0x6000FAA")]
		[Address(RVA = "0x409B40", Offset = "0x409B40", VA = "0x409B40")]
		private void SetCheekLDamageBlendshape(float value)
		{
		}

		[Token(Token = "0x6000FAB")]
		[Address(RVA = "0x409C6C", Offset = "0x409C6C", VA = "0x409C6C")]
		private void SetMouthLDamageBlendshape(float value)
		{
		}

		[Token(Token = "0x6000FAC")]
		[Address(RVA = "0x40A340", Offset = "0x40A340", VA = "0x40A340")]
		private void SetTempleRDamageBlendshape(float value)
		{
		}

		[Token(Token = "0x6000FAD")]
		[Address(RVA = "0x40A46C", Offset = "0x40A46C", VA = "0x40A46C")]
		private void SetEyeRDamageBlendshape(float value)
		{
		}

		[Token(Token = "0x6000FAE")]
		[Address(RVA = "0x40A598", Offset = "0x40A598", VA = "0x40A598")]
		private void SetCheekRDamageBlendshape(float value)
		{
		}

		[Token(Token = "0x6000FAF")]
		[Address(RVA = "0x40A6C4", Offset = "0x40A6C4", VA = "0x40A6C4")]
		private void SetMouthRDamageBlendshape(float value)
		{
		}

		[Token(Token = "0x6000FB0")]
		[Address(RVA = "0x40A7F0", Offset = "0x40A7F0", VA = "0x40A7F0", Slot = "20")]
		protected override void Knockdown(Hurtbox hurtbox, Hitbox hitbox)
		{
		}

		[Token(Token = "0x6000FB1")]
		[Address(RVA = "0x40ABE8", Offset = "0x40ABE8", VA = "0x40ABE8", Slot = "39")]
		public override void HitTheRopes()
		{
		}

		[Token(Token = "0x6000FB2")]
		[Address(RVA = "0x3FE020", Offset = "0x3FE020", VA = "0x3FE020")]
		public void StartGettingUp()
		{
		}

		[Token(Token = "0x6000FB3")]
		[Address(RVA = "0x40B10C", Offset = "0x40B10C", VA = "0x40B10C")]
		public void GetUp(bool fromKO = false)
		{
		}

		[Token(Token = "0x6000FB4")]
		[Address(RVA = "0x40B160", Offset = "0x40B160", VA = "0x40B160")]
		public void AnimationGetUp()
		{
		}

		[Token(Token = "0x6000FB5")]
		[Address(RVA = "0x40B184", Offset = "0x40B184", VA = "0x40B184", Slot = "52")]
		public virtual void Knockout()
		{
		}

		[Token(Token = "0x6000FB6")]
		[Address(RVA = "0x40B218", Offset = "0x40B218", VA = "0x40B218")]
		private bool CanDodge()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FB7")]
		[Address(RVA = "0x405E28", Offset = "0x405E28", VA = "0x405E28")]
		private bool CanBlockLeft()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FB8")]
		[Address(RVA = "0x405E58", Offset = "0x405E58", VA = "0x405E58")]
		private bool CanBlockRight()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FB9")]
		[Address(RVA = "0x40B25C", Offset = "0x40B25C", VA = "0x40B25C", Slot = "53")]
		public virtual void StartPunch(string hand = "", float predictedContactTime = 0f)
		{
		}

		[Token(Token = "0x6000FBA")]
		[Address(RVA = "0x40B6B4", Offset = "0x40B6B4", VA = "0x40B6B4")]
		public void UpdatePunchTarget()
		{
		}

		[Token(Token = "0x6000FBB")]
		[Address(RVA = "0x40B8BC", Offset = "0x40B8BC", VA = "0x40B8BC")]
		public void PlayGetHitSound(float intensity = 1f)
		{
		}

		[Token(Token = "0x6000FBC")]
		[Address(RVA = "0x40BAA0", Offset = "0x40BAA0", VA = "0x40BAA0")]
		public void PlayAttackSound()
		{
		}

		[Token(Token = "0x6000FBD")]
		[Address(RVA = "0x40BC14", Offset = "0x40BC14", VA = "0x40BC14")]
		public void PlayReadySound()
		{
		}

		[Token(Token = "0x6000FBE")]
		[Address(RVA = "0x40B5C0", Offset = "0x40B5C0", VA = "0x40B5C0")]
		public void SometimesPlayAttackSound()
		{
		}

		[Token(Token = "0x6000FBF")]
		[Address(RVA = "0x40BD88", Offset = "0x40BD88", VA = "0x40BD88")]
		public void SometimesPlayReadySound()
		{
		}

		[Token(Token = "0x6000FC0")]
		[Address(RVA = "0x40BEB0", Offset = "0x40BEB0", VA = "0x40BEB0")]
		public void SendToCorner()
		{
		}

		[Token(Token = "0x6000FC1")]
		[Address(RVA = "0x40C0AC", Offset = "0x40C0AC", VA = "0x40C0AC")]
		public void SendToNeutralCorner()
		{
		}

		[Token(Token = "0x6000FC2")]
		[Address(RVA = "0x40C1C4", Offset = "0x40C1C4", VA = "0x40C1C4")]
		public void HandleDefenseBehavior()
		{
		}

		[Token(Token = "0x6000FC3")]
		[Address(RVA = "0x40CDB4", Offset = "0x40CDB4", VA = "0x40CDB4")]
		private void TriggerPunch(string punchName, bool isCombo = false)
		{
		}

		[Token(Token = "0x6000FC4")]
		[Address(RVA = "0x40D588", Offset = "0x40D588", VA = "0x40D588", Slot = "54")]
		public virtual void PunchEnded(bool pauseOffense = true)
		{
		}

		[Token(Token = "0x6000FC5")]
		[Address(RVA = "0x40D6AC", Offset = "0x40D6AC", VA = "0x40D6AC", Slot = "55")]
		public virtual void PunchEnded(string endedPunchName)
		{
		}

		[Token(Token = "0x6000FC6")]
		[Address(RVA = "0x40D6E8", Offset = "0x40D6E8", VA = "0x40D6E8")]
		protected HitZone[] GetOpponentHitZones()
		{
			return null;
		}

		[Token(Token = "0x6000FC7")]
		[Address(RVA = "0x4070A8", Offset = "0x4070A8", VA = "0x4070A8")]
		private bool FoundAnOpening(PunchStaminaLevel punchType = PunchStaminaLevel.Punch, HandRestriction handRestriction = HandRestriction.None)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FC8")]
		[Address(RVA = "0x40D70C", Offset = "0x40D70C", VA = "0x40D70C", Slot = "56")]
		public virtual void DodgeEvent()
		{
		}

		[Token(Token = "0x6000FC9")]
		[Address(RVA = "0x40D710", Offset = "0x40D710", VA = "0x40D710", Slot = "36")]
		public override void CelebrateWin()
		{
		}

		[Token(Token = "0x6000FCA")]
		[Address(RVA = "0x40D78C", Offset = "0x40D78C", VA = "0x40D78C", Slot = "37")]
		public override void MournLoss()
		{
		}

		[Token(Token = "0x6000FCB")]
		[Address(RVA = "0x40CD68", Offset = "0x40CD68", VA = "0x40CD68")]
		private void StartBlocking(BlockLocation setBlockLocation, bool canBeLockedOut = false)
		{
		}

		[Token(Token = "0x6000FCC")]
		[Address(RVA = "0x40ABB8", Offset = "0x40ABB8", VA = "0x40ABB8")]
		public void StopBlocking(bool checkTimer = false)
		{
		}

		[Token(Token = "0x6000FCD")]
		[Address(RVA = "0x3FDFE4", Offset = "0x3FDFE4", VA = "0x3FDFE4")]
		private void UpdateBlock()
		{
		}

		[Token(Token = "0x6000FCE")]
		[Address(RVA = "0x3FE550", Offset = "0x3FE550", VA = "0x3FE550")]
		private void UpdateDodge()
		{
		}

		[Token(Token = "0x6000FCF")]
		[Address(RVA = "0x40D694", Offset = "0x40D694", VA = "0x40D694")]
		private void PauseOffenseSwing(float time)
		{
		}

		[Token(Token = "0x6000FD0")]
		[Address(RVA = "0x40D80C", Offset = "0x40D80C", VA = "0x40D80C")]
		private void PauseOffenseHit(float time)
		{
		}

		[Token(Token = "0x6000FD1")]
		[Address(RVA = "0x40D824", Offset = "0x40D824", VA = "0x40D824")]
		private void PauseOffenseDodge(float time)
		{
		}

		[Token(Token = "0x6000FD2")]
		[Address(RVA = "0x40BFC8", Offset = "0x40BFC8", VA = "0x40BFC8")]
		public void Move(Vector3 newPosition, Quaternion newRotation)
		{
		}

		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0x40D83C", Offset = "0x40D83C", VA = "0x40D83C")]
		public void Move(Vector3 newPosition, bool lookAtPlayer = true)
		{
		}

		[Token(Token = "0x6000FD4")]
		[Address(RVA = "0x40DABC", Offset = "0x40DABC", VA = "0x40DABC")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x6000FD5")]
		[Address(RVA = "0x40DC08", Offset = "0x40DC08", VA = "0x40DC08", Slot = "10")]
		protected override bool ReceiveDamage(float damage, Hurtbox.HurtboxType hurtboxType, [Optional] Hurtbox hurtbox, [Optional] Hitbox hitbox)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FD6")]
		[Address(RVA = "0x40DD6C", Offset = "0x40DD6C", VA = "0x40DD6C", Slot = "17")]
		protected override void BlockVisualResult(float force, Hitbox hitbox, Collision collision, bool isMajorHit)
		{
		}

		[Token(Token = "0x6000FD7")]
		[Address(RVA = "0x40E274", Offset = "0x40E274", VA = "0x40E274", Slot = "15")]
		protected override void HurtboxCollisionVisualResult(float damage, float force, bool wasKnockedDown, Hurtbox hurtbox, Hitbox hitbox, Collision collision)
		{
		}

		[Token(Token = "0x6000FD8")]
		[Address(RVA = "0x40EE58", Offset = "0x40EE58", VA = "0x40EE58", Slot = "57")]
		public virtual void LookForOpponents()
		{
		}

		[Token(Token = "0x6000FD9")]
		[Address(RVA = "0x40F154", Offset = "0x40F154", VA = "0x40F154", Slot = "12")]
		public override string GetName()
		{
			return null;
		}

		[Token(Token = "0x6000FDA")]
		[Address(RVA = "0x40F15C", Offset = "0x40F15C", VA = "0x40F15C", Slot = "13")]
		public override string GetDefeatName()
		{
			return null;
		}

		[Token(Token = "0x6000FDB")]
		[Address(RVA = "0x40F164", Offset = "0x40F164", VA = "0x40F164")]
		private void HandleIdleBehavior()
		{
		}

		[Token(Token = "0x6000FDC")]
		[Address(RVA = "0x40F174", Offset = "0x40F174", VA = "0x40F174", Slot = "58")]
		protected virtual void SetBehavior(BehaviorMode newMode)
		{
		}

		[Token(Token = "0x6000FDD")]
		[Address(RVA = "0x40F3D4", Offset = "0x40F3D4", VA = "0x40F3D4", Slot = "59")]
		protected virtual void HandlePursueBehavior()
		{
		}

		[Token(Token = "0x6000FDE")]
		[Address(RVA = "0x40F680", Offset = "0x40F680", VA = "0x40F680", Slot = "60")]
		protected virtual void HandleKeepAwayBehavior()
		{
		}

		[Token(Token = "0x6000FDF")]
		[Address(RVA = "0x40F9B4", Offset = "0x40F9B4", VA = "0x40F9B4", Slot = "61")]
		protected virtual void HandleRetreatBehavior()
		{
		}

		[Token(Token = "0x6000FE0")]
		[Address(RVA = "0x40FC00", Offset = "0x40FC00", VA = "0x40FC00", Slot = "62")]
		protected virtual void HandleAttackBehavior()
		{
		}

		[Token(Token = "0x6000FE1")]
		[Address(RVA = "0x4088FC", Offset = "0x4088FC", VA = "0x4088FC")]
		private void SwingAtOpening(bool isCombo = false)
		{
		}

		[Token(Token = "0x6000FE2")]
		[Address(RVA = "0x40F35C", Offset = "0x40F35C", VA = "0x40F35C")]
		private bool IsWillingToSwing()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FE3")]
		[Address(RVA = "0x406F5C", Offset = "0x406F5C", VA = "0x406F5C")]
		private bool IsWillingToCombo()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FE4")]
		[Address(RVA = "0x40CD2C", Offset = "0x40CD2C", VA = "0x40CD2C")]
		private bool IsInOpponentsRange()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FE5")]
		[Address(RVA = "0x40FF8C", Offset = "0x40FF8C", VA = "0x40FF8C")]
		protected bool IsInStepInRange()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FE6")]
		[Address(RVA = "0x40FF68", Offset = "0x40FF68", VA = "0x40FF68")]
		private bool IsTooClose()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FE7")]
		[Address(RVA = "0x40F65C", Offset = "0x40F65C", VA = "0x40F65C")]
		protected bool IsInAttackRange()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FE8")]
		[Address(RVA = "0x40FEB0", Offset = "0x40FEB0", VA = "0x40FEB0")]
		protected bool IsOutsideAttackRange()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FE9")]
		[Address(RVA = "0x406FBC", Offset = "0x406FBC", VA = "0x406FBC")]
		private bool HasStaminaForPunch(PunchStaminaLevel punchStaminaLevel)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FEA")]
		[Address(RVA = "0x40CD48", Offset = "0x40CD48", VA = "0x40CD48")]
		private bool HasStaminaForDodge()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FEB")]
		[Address(RVA = "0x40FFB0", Offset = "0x40FFB0", VA = "0x40FFB0")]
		private float GetEffectiveStaminaLevel()
		{
			return default(float);
		}

		[Token(Token = "0x6000FEC")]
		[Address(RVA = "0x3FD040", Offset = "0x3FD040", VA = "0x3FD040")]
		private void UpdateReactionInformation()
		{
		}

		[Token(Token = "0x6000FED")]
		[Address(RVA = "0x3FE144", Offset = "0x3FE144", VA = "0x3FE144")]
		private void HandleBehavior()
		{
		}

		[Token(Token = "0x6000FEE")]
		[Address(RVA = "0x40FFB8", Offset = "0x40FFB8", VA = "0x40FFB8")]
		public void StepInStart(string punchName, float startTime, float endTime, int layerIndex)
		{
		}

		[Token(Token = "0x6000FEF")]
		[Address(RVA = "0x41031C", Offset = "0x41031C", VA = "0x41031C", Slot = "22")]
		public override void PreMatchSetup()
		{
		}

		[Token(Token = "0x6000FF0")]
		[Address(RVA = "0x410320", Offset = "0x410320", VA = "0x410320", Slot = "24")]
		public override void StartRound()
		{
		}

		[Token(Token = "0x6000FF1")]
		[Address(RVA = "0x41033C", Offset = "0x41033C", VA = "0x41033C", Slot = "25")]
		public override void StartRoundMovement()
		{
		}

		[Token(Token = "0x6000FF2")]
		[Address(RVA = "0x4103F8", Offset = "0x4103F8", VA = "0x4103F8", Slot = "27")]
		public override void StartBreakMovement()
		{
		}

		[Token(Token = "0x6000FF3")]
		[Address(RVA = "0x410414", Offset = "0x410414", VA = "0x410414", Slot = "26")]
		public override void EndRound()
		{
		}

		[Token(Token = "0x6000FF4")]
		[Address(RVA = "0x410438", Offset = "0x410438", VA = "0x410438", Slot = "28")]
		public override void ScoredKnockdownAction()
		{
		}

		[Token(Token = "0x6000FF5")]
		[Address(RVA = "0x41044C", Offset = "0x41044C", VA = "0x41044C", Slot = "29")]
		public override void KnockedDownMovement()
		{
		}

		[Token(Token = "0x6000FF6")]
		[Address(RVA = "0x410450", Offset = "0x410450", VA = "0x410450", Slot = "30")]
		public override void GoToFarthestNeutralCorner()
		{
		}

		[Token(Token = "0x6000FF7")]
		[Address(RVA = "0x410454", Offset = "0x410454", VA = "0x410454", Slot = "31")]
		public override void GetUpMovement()
		{
		}

		[Token(Token = "0x6000FF8")]
		[Address(RVA = "0x410510", Offset = "0x410510", VA = "0x410510", Slot = "32")]
		public override void ResumeFighting()
		{
		}

		[Token(Token = "0x6000FF9")]
		[Address(RVA = "0x410524", Offset = "0x410524", VA = "0x410524", Slot = "33")]
		public override void ResumeFightingMovement()
		{
		}

		[Token(Token = "0x6000FFA")]
		[Address(RVA = "0x4105E0", Offset = "0x4105E0", VA = "0x4105E0", Slot = "34")]
		public override void PostMatchMovement()
		{
		}

		[Token(Token = "0x6000FFB")]
		[Address(RVA = "0x4107D0", Offset = "0x4107D0", VA = "0x4107D0")]
		public void UnpinArms(Arm arm)
		{
		}

		[Token(Token = "0x6000FFC")]
		[Address(RVA = "0x40B47C", Offset = "0x40B47C", VA = "0x40B47C")]
		public void RepinArms(Arm arm = Arm.Both)
		{
		}

		[Token(Token = "0x6000FFD")]
		[Address(RVA = "0x3FF420", Offset = "0x3FF420", VA = "0x3FF420")]
		protected Vector3 AdjustPunchTarget(Vector3 basePosition, Vector3 targetPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FFE")]
		[Address(RVA = "0x410900", Offset = "0x410900", VA = "0x410900", Slot = "16")]
		protected override void HurtboxCollisionAudioResult(float damage, float force, bool wasKnockedDown, Hurtbox hurtbox, Hitbox hitbox, Collision collision, bool hitWeakSpot = false)
		{
		}

		[Token(Token = "0x6000FFF")]
		[Address(RVA = "0x410A38", Offset = "0x410A38", VA = "0x410A38", Slot = "41")]
		public override void SetHandicapValues(float chinValue, float powerValue, float fistSpeedValue, float dodgeSpeedValue, float blockSpeedValue, float aggressionValue)
		{
		}

		[Token(Token = "0x6001000")]
		[Address(RVA = "0x410A94", Offset = "0x410A94", VA = "0x410A94", Slot = "42")]
		public override void SetPunchRatioValues(float bodyRate, float jabRate, float leftCrossRate, float rightCrossRate, float leftHookRate, float rightHookRate, float leftUppercutRate, float rightUppercutRate)
		{
		}

		[Token(Token = "0x6001001")]
		[Address(RVA = "0x40AC90", Offset = "0x40AC90", VA = "0x40AC90")]
		protected bool Unragdoll()
		{
			return default(bool);
		}

		[Token(Token = "0x6001002")]
		[Address(RVA = "0x410B3C", Offset = "0x410B3C", VA = "0x410B3C")]
		protected bool IsProne()
		{
			return default(bool);
		}

		[Token(Token = "0x6001003")]
		[Address(RVA = "0x410D08", Offset = "0x410D08", VA = "0x410D08")]
		protected void RotateTarget(Quaternion rotation)
		{
		}

		[Token(Token = "0x6001004")]
		[Address(RVA = "0x410D74", Offset = "0x410D74", VA = "0x410D74")]
		protected void MoveTarget(Vector3 position)
		{
		}

		[Token(Token = "0x6001005")]
		[Address(RVA = "0x410DD8", Offset = "0x410DD8", VA = "0x410DD8")]
		protected void GroundTarget(LayerMask layers)
		{
		}

		[Token(Token = "0x6001006")]
		[Address(RVA = "0x411030", Offset = "0x411030", VA = "0x411030")]
		public EnemyController()
		{
		}
	}
	[Token(Token = "0x20001EE")]
	public class EnemyFist : Hitbox
	{
		[Token(Token = "0x4000A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool leftHand;

		[Token(Token = "0x4000A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private EnemyController enemy;

		[Token(Token = "0x4000A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x246DDC", Offset = "0x246DDC")]
		private bool <attacking>k__BackingField;

		[Token(Token = "0x4000A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x246DEC", Offset = "0x246DEC")]
		private bool <active>k__BackingField;

		[Token(Token = "0x4000A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x246DFC", Offset = "0x246DFC")]
		private bool <blocked>k__BackingField;

		[Token(Token = "0x4000A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x246E0C", Offset = "0x246E0C")]
		private Vector3 <targetPosition>k__BackingField;

		[Token(Token = "0x17000160")]
		public bool attacking
		{
			[Token(Token = "0x6001008")]
			[Address(RVA = "0x4CA3F0", Offset = "0x4CA3F0", VA = "0x4CA3F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249980", Offset = "0x249980")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001009")]
			[Address(RVA = "0x4CA3F8", Offset = "0x4CA3F8", VA = "0x4CA3F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249990", Offset = "0x249990")]
			set
			{
			}
		}

		[Token(Token = "0x17000161")]
		public bool active
		{
			[Token(Token = "0x600100A")]
			[Address(RVA = "0x4CA400", Offset = "0x4CA400", VA = "0x4CA400")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2499A0", Offset = "0x2499A0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600100B")]
			[Address(RVA = "0x4CA408", Offset = "0x4CA408", VA = "0x4CA408")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2499B0", Offset = "0x2499B0")]
			set
			{
			}
		}

		[Token(Token = "0x17000162")]
		public bool blocked
		{
			[Token(Token = "0x600100C")]
			[Address(RVA = "0x4CA410", Offset = "0x4CA410", VA = "0x4CA410")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2499C0", Offset = "0x2499C0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600100D")]
			[Address(RVA = "0x4CA418", Offset = "0x4CA418", VA = "0x4CA418")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2499D0", Offset = "0x2499D0")]
			set
			{
			}
		}

		[Token(Token = "0x17000163")]
		public Vector3 targetPosition
		{
			[Token(Token = "0x600100E")]
			[Address(RVA = "0x4CA420", Offset = "0x4CA420", VA = "0x4CA420")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2499E0", Offset = "0x2499E0")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600100F")]
			[Address(RVA = "0x4CA434", Offset = "0x4CA434", VA = "0x4CA434")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2499F0", Offset = "0x2499F0")]
			set
			{
			}
		}

		[Token(Token = "0x6001010")]
		[Address(RVA = "0x4CA440", Offset = "0x4CA440", VA = "0x4CA440")]
		public void Start()
		{
		}

		[Token(Token = "0x6001011")]
		[Address(RVA = "0x4CA4BC", Offset = "0x4CA4BC", VA = "0x4CA4BC", Slot = "13")]
		public override bool IsActive(bool isMajorHit)
		{
			return default(bool);
		}

		[Token(Token = "0x6001012")]
		[Address(RVA = "0x4CA4DC", Offset = "0x4CA4DC", VA = "0x4CA4DC")]
		public bool IsActive()
		{
			return default(bool);
		}

		[Token(Token = "0x6001013")]
		[Address(RVA = "0x4CA4FC", Offset = "0x4CA4FC", VA = "0x4CA4FC", Slot = "9")]
		public override Vector3 GetVelocity(bool allowSmoothing = true)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001014")]
		[Address(RVA = "0x4CA610", Offset = "0x4CA610", VA = "0x4CA610", Slot = "11")]
		public override float GetEffectiveMass(Vector3 collisionPoint, bool calibrationHit = false, bool returnUnmodifiedForce = false)
		{
			return default(float);
		}

		[Token(Token = "0x6001015")]
		[Address(RVA = "0x4CA77C", Offset = "0x4CA77C", VA = "0x4CA77C", Slot = "5")]
		public override void LandedHit(PunchType punchType, float damage, float targetPainThreshold)
		{
		}

		[Token(Token = "0x6001016")]
		[Address(RVA = "0x4CA8A8", Offset = "0x4CA8A8", VA = "0x4CA8A8", Slot = "14")]
		public override void Deactivate(bool isMajorHit)
		{
		}

		[Token(Token = "0x6001017")]
		[Address(RVA = "0x4CA958", Offset = "0x4CA958", VA = "0x4CA958", Slot = "17")]
		public override bool IsBlocking()
		{
			return default(bool);
		}

		[Token(Token = "0x6001018")]
		[Address(RVA = "0x4CA9B0", Offset = "0x4CA9B0", VA = "0x4CA9B0")]
		public EnemyFist()
		{
		}
	}
	[Token(Token = "0x20001EF")]
	public class Equipment : MonoBehaviour
	{
		[Token(Token = "0x4000A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		protected Rigidbody rb;

		[Token(Token = "0x6001019")]
		[Address(RVA = "0x4CA9C0", Offset = "0x4CA9C0", VA = "0x4CA9C0", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600101A")]
		[Address(RVA = "0x4CAA28", Offset = "0x4CAA28", VA = "0x4CAA28")]
		public Equipment()
		{
		}
	}
	[Token(Token = "0x20001F0")]
	public class FightCamera : SpectatorCamera
	{
		[Token(Token = "0x4000A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float acceleration;

		[Token(Token = "0x4000A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float heightOffset;

		[Token(Token = "0x4000A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float minFOV;

		[Token(Token = "0x4000A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float targetSpacingToZoomRatio;

		[Token(Token = "0x4000A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float lookAngleDeadzone;

		[Token(Token = "0x4000A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fovDifferenceDeadzone;

		[Token(Token = "0x4000A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float maxBadCameraPositionTime;

		[Token(Token = "0x4000A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3[] cameraPositions;

		[Token(Token = "0x4000A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Transform firstTarget;

		[Token(Token = "0x4000A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static Transform secondTarget;

		[Token(Token = "0x4000A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Transform refereeTarget;

		[Token(Token = "0x4000A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static bool initTargets;

		[Token(Token = "0x4000A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float turnSpeed;

		[Token(Token = "0x4000A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int positionIndex;

		[Token(Token = "0x4000A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float badCameraPositionTimer;

		[Token(Token = "0x600101B")]
		[Address(RVA = "0x4CAA30", Offset = "0x4CAA30", VA = "0x4CAA30")]
		public static void SetTargets(Transform targetOne, Transform targetTwo, Transform refPosition)
		{
		}

		[Token(Token = "0x600101C")]
		[Address(RVA = "0x4CAA34", Offset = "0x4CAA34", VA = "0x4CAA34", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x600101D")]
		[Address(RVA = "0x4CAA3C", Offset = "0x4CAA3C", VA = "0x4CAA3C", Slot = "5")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x600101E")]
		[Address(RVA = "0x4CAAF4", Offset = "0x4CAAF4", VA = "0x4CAAF4")]
		private void Update()
		{
		}

		[Token(Token = "0x600101F")]
		[Address(RVA = "0x4CBA20", Offset = "0x4CBA20", VA = "0x4CBA20")]
		private void SwitchPositions(int index)
		{
		}

		[Token(Token = "0x6001020")]
		[Address(RVA = "0x4CBAC0", Offset = "0x4CBAC0", VA = "0x4CBAC0")]
		public FightCamera()
		{
		}
	}
	[Token(Token = "0x20001F1")]
	public class FightMenuManager : ChildMenuManager
	{
		[Token(Token = "0x20002F4")]
		public enum SelectedDifficulty
		{
			[Token(Token = "0x4001085")]
			Custom,
			[Token(Token = "0x4001086")]
			Easy,
			[Token(Token = "0x4001087")]
			Medium,
			[Token(Token = "0x4001088")]
			Hard,
			[Token(Token = "0x4001089")]
			ExtraHard
		}

		[Serializable]
		[Token(Token = "0x20002F5")]
		public class OpponentDetails
		{
			[Token(Token = "0x400108A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string boxerName;

			[Token(Token = "0x400108B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public string boxerBio;

			[Token(Token = "0x400108C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string boutRules;

			[Token(Token = "0x400108D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Texture boxerImage;

			[Token(Token = "0x400108E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string sceneName;

			[Token(Token = "0x400108F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public string boxerResourceName;

			[Token(Token = "0x4001090")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string unlockCondition;

			[Token(Token = "0x4001091")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public string customizeCondition;

			[Token(Token = "0x4001092")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int numberOfRounds;

			[Token(Token = "0x4001093")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public int roundTime;

			[Token(Token = "0x4001094")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public int breakTime;

			[Token(Token = "0x4001095")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public int knockdownLimit;

			[Token(Token = "0x4001096")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float damageDifferenceToWin;

			[Token(Token = "0x4001097")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float judgeDecisionFuzziness;

			[Token(Token = "0x60014C5")]
			[Address(RVA = "0x4CBD78", Offset = "0x4CBD78", VA = "0x4CBD78")]
			public bool IsUnlocked()
			{
				return default(bool);
			}

			[Token(Token = "0x60014C6")]
			[Address(RVA = "0x4CEB90", Offset = "0x4CEB90", VA = "0x4CEB90")]
			public bool HasDefeatedEasy()
			{
				return default(bool);
			}

			[Token(Token = "0x60014C7")]
			[Address(RVA = "0x4CEC88", Offset = "0x4CEC88", VA = "0x4CEC88")]
			public bool HasDefeatedMedium()
			{
				return default(bool);
			}

			[Token(Token = "0x60014C8")]
			[Address(RVA = "0x4CED80", Offset = "0x4CED80", VA = "0x4CED80")]
			public bool HasDefeatedHard()
			{
				return default(bool);
			}

			[Token(Token = "0x60014C9")]
			[Address(RVA = "0x4CEE78", Offset = "0x4CEE78", VA = "0x4CEE78")]
			public bool HasDefeatedExtraHard()
			{
				return default(bool);
			}

			[Token(Token = "0x60014CA")]
			[Address(RVA = "0x4CEA98", Offset = "0x4CEA98", VA = "0x4CEA98")]
			public bool IsCustomizable()
			{
				return default(bool);
			}

			[Token(Token = "0x60014CB")]
			[Address(RVA = "0x4D0088", Offset = "0x4D0088", VA = "0x4D0088")]
			public OpponentDetails()
			{
			}
		}

		[Token(Token = "0x4000A21")]
		public const float defaultChinEasy = 0.9524f;

		[Token(Token = "0x4000A22")]
		public const float defaultPowerEasy = 0.95f;

		[Token(Token = "0x4000A23")]
		public const float defaultFistSpeedEasy = 0.6f;

		[Token(Token = "0x4000A24")]
		public const float defaultDodgeSpeedEasy = 1f;

		[Token(Token = "0x4000A25")]
		public const float defaultBlockSpeedEasy = 1f;

		[Token(Token = "0x4000A26")]
		public const float defaultAggressionEasy = 0.9f;

		[Token(Token = "0x4000A27")]
		public const float defaultChinMedium = 1f;

		[Token(Token = "0x4000A28")]
		public const float defaultPowerMedium = 1f;

		[Token(Token = "0x4000A29")]
		public const float defaultFistSpeedMedium = 1f;

		[Token(Token = "0x4000A2A")]
		public const float defaultDodgeSpeedMedium = 1f;

		[Token(Token = "0x4000A2B")]
		public const float defaultBlockSpeedMedium = 1f;

		[Token(Token = "0x4000A2C")]
		public const float defaultAggressionMedium = 1f;

		[Token(Token = "0x4000A2D")]
		public const float defaultChinHard = 1.05f;

		[Token(Token = "0x4000A2E")]
		public const float defaultPowerHard = 1.05f;

		[Token(Token = "0x4000A2F")]
		public const float defaultFistSpeedHard = 1f;

		[Token(Token = "0x4000A30")]
		public const float defaultDodgeSpeedHard = 1f;

		[Token(Token = "0x4000A31")]
		public const float defaultBlockSpeedHard = 1f;

		[Token(Token = "0x4000A32")]
		public const float defaultAggressionHard = 1.1f;

		[Token(Token = "0x4000A33")]
		public const float defaultChinExtraHard = 1.1f;

		[Token(Token = "0x4000A34")]
		public const float defaultPowerExtraHard = 1.1f;

		[Token(Token = "0x4000A35")]
		public const float defaultFistSpeedExtraHard = 1.15f;

		[Token(Token = "0x4000A36")]
		public const float defaultDodgeSpeedExtraHard = 1.15f;

		[Token(Token = "0x4000A37")]
		public const float defaultBlockSpeedExtraHard = 1.15f;

		[Token(Token = "0x4000A38")]
		public const float defaultAggressionExtraHard = 1.25f;

		[Token(Token = "0x4000A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject leftArrow;

		[Token(Token = "0x4000A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public GameObject rightArrow;

		[Token(Token = "0x4000A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RawImage posterUI;

		[Token(Token = "0x4000A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TextMeshProUGUI nameUI;

		[Token(Token = "0x4000A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI bioUI;

		[Token(Token = "0x4000A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public TextMeshProUGUI boutRulesUI;

		[Token(Token = "0x4000A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x246E1C", Offset = "0x246E1C")]
		private HomeMenuManager <homeManager>k__BackingField;

		[Token(Token = "0x4000A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool opponentLoaded;

		[Token(Token = "0x4000A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int index;

		[Token(Token = "0x4000A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public CustomizeBoutMenu customizeMenu;

		[Token(Token = "0x4000A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject customizeMessage;

		[Token(Token = "0x4000A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public GameObject difficultyMenu;

		[Token(Token = "0x4000A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Color disabledColor;

		[Token(Token = "0x4000A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Color selectedColor;

		[Token(Token = "0x4000A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Color defaultColor;

		[Token(Token = "0x4000A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Sprite undefeatedIcon;

		[Token(Token = "0x4000A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Sprite defeatedIcon;

		[Token(Token = "0x4000A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Sprite lockedIcon;

		[Token(Token = "0x4000A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public Image customizeButton;

		[Token(Token = "0x4000A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public TextMeshProUGUI customizeButtonText;

		[Token(Token = "0x4000A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public TextMeshProUGUI customizeButtonDescription;

		[Token(Token = "0x4000A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Image customizeButtonIcon;

		[Token(Token = "0x4000A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public Image easyButton;

		[Token(Token = "0x4000A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public TextMeshProUGUI easyButtonText;

		[Token(Token = "0x4000A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public TextMeshProUGUI easyButtonDescription;

		[Token(Token = "0x4000A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Image easyButtonIcon;

		[Token(Token = "0x4000A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public Image mediumButton;

		[Token(Token = "0x4000A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public TextMeshProUGUI mediumButtonText;

		[Token(Token = "0x4000A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public TextMeshProUGUI mediumButtonDescription;

		[Token(Token = "0x4000A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Image mediumButtonIcon;

		[Token(Token = "0x4000A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public Image hardButton;

		[Token(Token = "0x4000A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public TextMeshProUGUI hardButtonText;

		[Token(Token = "0x4000A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public TextMeshProUGUI hardButtonDescription;

		[Token(Token = "0x4000A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Image hardButtonIcon;

		[Token(Token = "0x4000A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public Image extraHardButton;

		[Token(Token = "0x4000A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public TextMeshProUGUI extraHardButtonText;

		[Token(Token = "0x4000A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public TextMeshProUGUI extraHardButtonDescription;

		[Token(Token = "0x4000A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Image extraHardButtonIcon;

		[Token(Token = "0x4000A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private SelectedDifficulty currentDifficulty;

		[Token(Token = "0x4000A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private SelectedDifficulty defaultDifficulty;

		[Token(Token = "0x4000A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private bool easyUnlocked;

		[Token(Token = "0x4000A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD5")]
		private bool mediumUnlocked;

		[Token(Token = "0x4000A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD6")]
		private bool hardUnlocked;

		[Token(Token = "0x4000A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD7")]
		private bool extraHardUnlocked;

		[Token(Token = "0x4000A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool customizeUnlocked;

		[Token(Token = "0x4000A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD9")]
		public bool extraBattle;

		[Token(Token = "0x4000A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public OpponentDetails[] opponents;

		[Token(Token = "0x4000A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private List<OpponentDetails> unlockedOpponents;

		[Token(Token = "0x17000164")]
		public HomeMenuManager homeManager
		{
			[Token(Token = "0x6001022")]
			[Address(RVA = "0x4CBB74", Offset = "0x4CBB74", VA = "0x4CBB74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249A00", Offset = "0x249A00")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001023")]
			[Address(RVA = "0x4CBB7C", Offset = "0x4CBB7C", VA = "0x4CBB7C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249A10", Offset = "0x249A10")]
			set
			{
			}
		}

		[Token(Token = "0x6001024")]
		[Address(RVA = "0x4CBB84", Offset = "0x4CBB84", VA = "0x4CBB84")]
		public void Awake()
		{
		}

		[Token(Token = "0x6001025")]
		[Address(RVA = "0x4CBE70", Offset = "0x4CBE70", VA = "0x4CBE70")]
		public void Start()
		{
		}

		[Token(Token = "0x6001026")]
		[Address(RVA = "0x4CC52C", Offset = "0x4CC52C", VA = "0x4CC52C")]
		public void LoadMainMenu(GameObject menuToFadeIn)
		{
		}

		[Token(Token = "0x6001027")]
		[Address(RVA = "0x4CC77C", Offset = "0x4CC77C", VA = "0x4CC77C")]
		public bool LoadOpponentByUnlockString(string unlockCondition)
		{
			return default(bool);
		}

		[Token(Token = "0x6001028")]
		[Address(RVA = "0x4CC8A8", Offset = "0x4CC8A8", VA = "0x4CC8A8")]
		public void LoadOpponent(string boxerName)
		{
		}

		[Token(Token = "0x6001029")]
		[Address(RVA = "0x4CC990", Offset = "0x4CC990", VA = "0x4CC990")]
		public void OpenCustomizeMenu()
		{
		}

		[Token(Token = "0x600102A")]
		[Address(RVA = "0x4CD6D4", Offset = "0x4CD6D4", VA = "0x4CD6D4")]
		public void SelectDifficultyButton(int difficulty)
		{
		}

		[Token(Token = "0x600102B")]
		[Address(RVA = "0x4CD82C", Offset = "0x4CD82C", VA = "0x4CD82C")]
		public void UpdateRulesText()
		{
		}

		[Token(Token = "0x600102C")]
		[Address(RVA = "0x4CCB30", Offset = "0x4CCB30", VA = "0x4CCB30")]
		private void SelectDifficulty(SelectedDifficulty difficulty, bool updatePlayerPref = false)
		{
		}

		[Token(Token = "0x600102D")]
		[Address(RVA = "0x4CDB88", Offset = "0x4CDB88", VA = "0x4CDB88")]
		private void EnableDifficultyButton(SelectedDifficulty difficulty, bool hasDefeatedDifficulty)
		{
		}

		[Token(Token = "0x600102E")]
		[Address(RVA = "0x4CE380", Offset = "0x4CE380", VA = "0x4CE380")]
		private void DisableDifficultyButton(SelectedDifficulty difficulty)
		{
		}

		[Token(Token = "0x600102F")]
		[Address(RVA = "0x4CBEC4", Offset = "0x4CBEC4", VA = "0x4CBEC4")]
		public void LoadOpponent(int newIndex = 0)
		{
		}

		[Token(Token = "0x6001030")]
		[Address(RVA = "0x4CEF70", Offset = "0x4CEF70", VA = "0x4CEF70")]
		private void ScrollNext()
		{
		}

		[Token(Token = "0x6001031")]
		[Address(RVA = "0x4CF020", Offset = "0x4CF020", VA = "0x4CF020")]
		private void ScrollPrevious()
		{
		}

		[Token(Token = "0x6001032")]
		[Address(RVA = "0x4CF0B8", Offset = "0x4CF0B8", VA = "0x4CF0B8")]
		public void ButtonNext()
		{
		}

		[Token(Token = "0x6001033")]
		[Address(RVA = "0x4CF204", Offset = "0x4CF204", VA = "0x4CF204")]
		public void ButtonPrevious()
		{
		}

		[Token(Token = "0x6001034")]
		[Address(RVA = "0x4CF350", Offset = "0x4CF350", VA = "0x4CF350")]
		public void LoadFight()
		{
		}

		[Token(Token = "0x6001035")]
		[Address(RVA = "0x4CFFA4", Offset = "0x4CFFA4", VA = "0x4CFFA4", Slot = "4")]
		public override void OpenMenu()
		{
		}

		[Token(Token = "0x6001036")]
		[Address(RVA = "0x4CFFEC", Offset = "0x4CFFEC", VA = "0x4CFFEC", Slot = "5")]
		public override void CloseMenu()
		{
		}

		[Token(Token = "0x6001037")]
		[Address(RVA = "0x4D0070", Offset = "0x4D0070", VA = "0x4D0070")]
		public FightMenuManager()
		{
		}
	}
	[Token(Token = "0x20001F2")]
	public class Fist : MonoBehaviour
	{
		[Token(Token = "0x6001038")]
		[Address(RVA = "0x4D0180", Offset = "0x4D0180", VA = "0x4D0180")]
		public Fist()
		{
		}
	}
	[Token(Token = "0x20001F3")]
	public class FloorManager : MonoBehaviour
	{
		[Token(Token = "0x4000A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public AudioClip[] footfallSounds;

		[Token(Token = "0x4000A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float volume;

		[Token(Token = "0x6001039")]
		[Address(RVA = "0x4D0188", Offset = "0x4D0188", VA = "0x4D0188")]
		public void PlayFloorSound()
		{
		}

		[Token(Token = "0x600103A")]
		[Address(RVA = "0x4D0274", Offset = "0x4D0274", VA = "0x4D0274")]
		public FloorManager()
		{
		}
	}
	[Token(Token = "0x20001F4")]
	public class FocusBallCollider : Equipment, IFixedUpdateable
	{
		[Token(Token = "0x4000A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FocusBallController controller;

		[Token(Token = "0x4000A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Vector3 lastFixedUpdatePosition;

		[Token(Token = "0x4000A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Quaternion lastFixedUpdateRotation;

		[Token(Token = "0x600103B")]
		[Address(RVA = "0x4D0284", Offset = "0x4D0284", VA = "0x4D0284")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600103C")]
		[Address(RVA = "0x4D028C", Offset = "0x4D028C", VA = "0x4D028C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600103D")]
		[Address(RVA = "0x4D0294", Offset = "0x4D0294", VA = "0x4D0294", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x600103E")]
		[Address(RVA = "0x4D031C", Offset = "0x4D031C", VA = "0x4D031C", Slot = "5")]
		public void CustomFixedUpdate()
		{
		}

		[Token(Token = "0x600103F")]
		[Address(RVA = "0x4D03A0", Offset = "0x4D03A0", VA = "0x4D03A0")]
		public void Update()
		{
		}

		[Token(Token = "0x6001040")]
		[Address(RVA = "0x4D0634", Offset = "0x4D0634", VA = "0x4D0634")]
		public void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001041")]
		[Address(RVA = "0x4D0F6C", Offset = "0x4D0F6C", VA = "0x4D0F6C")]
		public FocusBallCollider()
		{
		}
	}
	[Token(Token = "0x20001F5")]
	public class FocusBallController : MonoBehaviour
	{
		[Token(Token = "0x4000A6E")]
		public const float MaxExpectedBallForce = 400f;

		[Token(Token = "0x4000A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static FocusBallController instance;

		[Token(Token = "0x4000A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Transform trainer;

		[Token(Token = "0x4000A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SpectatorCamera spectatorCamera;

		[Token(Token = "0x4000A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public GameObject uiCanvas;

		[Token(Token = "0x4000A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody ballRb;

		[Token(Token = "0x4000A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Transform ballModel;

		[Token(Token = "0x4000A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool initialized;

		[Token(Token = "0x4000A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Transform trainerSmallSpacePosition;

		[Token(Token = "0x4000A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform trainerLargeSpacePosition;

		[Token(Token = "0x4000A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float trainerSmallPositionWidth;

		[Token(Token = "0x4000A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float trainerSmallPositionDepth;

		[Token(Token = "0x4000A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float hitRefreshTime;

		[Token(Token = "0x4000A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioClip[] hitSounds;

		[Token(Token = "0x4000A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public LineRenderer topRope;

		[Token(Token = "0x4000A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 ballTopRopeLocation;

		[Token(Token = "0x4000A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public LineRenderer bottomRope;

		[Token(Token = "0x4000A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3 ballBottomRopeLocation;

		[Token(Token = "0x4000A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3[] topRopePositions;

		[Token(Token = "0x4000A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3[] bottomRopePositions;

		[Token(Token = "0x4000A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool watchForDodge;

		[Token(Token = "0x4000A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		private bool approachingHead;

		[Token(Token = "0x4000A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int dodgeCount;

		[Token(Token = "0x4000A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int bestDodgeCount;

		[Token(Token = "0x4000A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int hitCount;

		[Token(Token = "0x4000A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int bestHitCount;

		[Token(Token = "0x4000A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float hitTimer;

		[Token(Token = "0x4000A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public TextMeshProUGUI dodgeCountText;

		[Token(Token = "0x4000A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public TextMeshProUGUI bestDodgeCountText;

		[Token(Token = "0x4000A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public TextMeshProUGUI hitCountText;

		[Token(Token = "0x4000A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public TextMeshProUGUI bestHitCountText;

		[Token(Token = "0x4000A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private bool eventOn;

		[Token(Token = "0x4000A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 ballCenterPoint;

		[Token(Token = "0x6001042")]
		[Address(RVA = "0x4D0F74", Offset = "0x4D0F74", VA = "0x4D0F74")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001043")]
		[Address(RVA = "0x4D10A8", Offset = "0x4D10A8", VA = "0x4D10A8")]
		public static void InitializeFocusBall()
		{
		}

		[Token(Token = "0x6001044")]
		[Address(RVA = "0x4D117C", Offset = "0x4D117C", VA = "0x4D117C")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6001045")]
		[Address(RVA = "0x4D1904", Offset = "0x4D1904", VA = "0x4D1904")]
		public void DeinitializeFocusBall()
		{
		}

		[Token(Token = "0x6001046")]
		[Address(RVA = "0x4D1A70", Offset = "0x4D1A70", VA = "0x4D1A70")]
		public void Awake()
		{
		}

		[Token(Token = "0x6001047")]
		[Address(RVA = "0x4D1BC8", Offset = "0x4D1BC8", VA = "0x4D1BC8")]
		public void PostSimulation()
		{
		}

		[Token(Token = "0x6001048")]
		[Address(RVA = "0x4D1BCC", Offset = "0x4D1BCC", VA = "0x4D1BCC")]
		public void Update()
		{
		}

		[Token(Token = "0x6001049")]
		[Address(RVA = "0x4D21A0", Offset = "0x4D21A0", VA = "0x4D21A0")]
		public void ResetBestHit()
		{
		}

		[Token(Token = "0x600104A")]
		[Address(RVA = "0x4D083C", Offset = "0x4D083C", VA = "0x4D083C")]
		public void ColliderHit(Collision collision, PlayerFist hitbox)
		{
		}

		[Token(Token = "0x600104B")]
		[Address(RVA = "0x4D0D94", Offset = "0x4D0D94", VA = "0x4D0D94")]
		public void ColliderHit(Collision collision, Hurtbox hurtbox)
		{
		}

		[Token(Token = "0x600104C")]
		[Address(RVA = "0x4D2420", Offset = "0x4D2420", VA = "0x4D2420")]
		public void Exit()
		{
		}

		[Token(Token = "0x600104D")]
		[Address(RVA = "0x4D2424", Offset = "0x4D2424", VA = "0x4D2424")]
		public void CloseButtonPressed()
		{
		}

		[Token(Token = "0x600104E")]
		[Address(RVA = "0x4D2644", Offset = "0x4D2644", VA = "0x4D2644")]
		public void PlaySpaceUpdated()
		{
		}

		[Token(Token = "0x600104F")]
		[Address(RVA = "0x4D1564", Offset = "0x4D1564", VA = "0x4D1564")]
		public void MovePlayer()
		{
		}

		[Token(Token = "0x6001050")]
		[Address(RVA = "0x4D2B7C", Offset = "0x4D2B7C", VA = "0x4D2B7C")]
		public void ResetBestButton()
		{
		}

		[Token(Token = "0x6001051")]
		[Address(RVA = "0x4D216C", Offset = "0x4D216C", VA = "0x4D216C")]
		private void SetText(TextMeshProUGUI ui, string val)
		{
		}

		[Token(Token = "0x6001052")]
		[Address(RVA = "0x4D13E4", Offset = "0x4D13E4", VA = "0x4D13E4")]
		private void ResetCount()
		{
		}

		[Token(Token = "0x6001053")]
		[Address(RVA = "0x4D14A4", Offset = "0x4D14A4", VA = "0x4D14A4")]
		private void ResetBestCount()
		{
		}

		[Token(Token = "0x6001054")]
		[Address(RVA = "0x4D2CD0", Offset = "0x4D2CD0", VA = "0x4D2CD0")]
		public FocusBallController()
		{
		}
	}
	[Token(Token = "0x20001F6")]
	public class GetUpStateBehavior : StateMachineBehaviour
	{
		[Token(Token = "0x6001055")]
		[Address(RVA = "0x4D2CE8", Offset = "0x4D2CE8", VA = "0x4D2CE8", Slot = "6")]
		public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6001056")]
		[Address(RVA = "0x4D2D8C", Offset = "0x4D2D8C", VA = "0x4D2D8C")]
		public GetUpStateBehavior()
		{
		}
	}
	[Token(Token = "0x20001F7")]
	public class GlobalShaderEffectTester : MonoBehaviour
	{
		[Token(Token = "0x4000A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x246E2C", Offset = "0x246E2C")]
		public float desaturationLevel;

		[Token(Token = "0x4000A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x246E44", Offset = "0x246E44")]
		public float whiteFlashLevel;

		[Token(Token = "0x4000A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x246E5C", Offset = "0x246E5C")]
		public float vignetteLevel;

		[Token(Token = "0x4000A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x246E74", Offset = "0x246E74")]
		public float whiteVignetteLevel;

		[Token(Token = "0x4000A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x246E8C", Offset = "0x246E8C")]
		public float blinkLevel;

		[Token(Token = "0x4000A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x246EA4", Offset = "0x246EA4")]
		public float fadeToBlackLevel;

		[Token(Token = "0x6001057")]
		[Address(RVA = "0x4D33C0", Offset = "0x4D33C0", VA = "0x4D33C0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001058")]
		[Address(RVA = "0x4D34B4", Offset = "0x4D34B4", VA = "0x4D34B4")]
		public GlobalShaderEffectTester()
		{
		}
	}
	[Token(Token = "0x20001F8")]
	public class GloveCalibration : MonoBehaviour
	{
		[Token(Token = "0x4000A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool isLeft;

		[Token(Token = "0x4000A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GameObject Target;

		[Token(Token = "0x4000A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private GameObject GloveModel;

		[Token(Token = "0x4000A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GameObject ControllerPosition;

		[Token(Token = "0x4000A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public GameObject TargetPlaceholder;

		[Token(Token = "0x4000A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ProgressRadialBehaviour ProgressBar;

		[Token(Token = "0x4000A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public GloveCalibrationController controller;

		[Token(Token = "0x4000A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool entered;

		[Token(Token = "0x4000A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float timer;

		[Token(Token = "0x4000A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float timeout;

		[Token(Token = "0x4000A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private PlayerController player;

		[Token(Token = "0x4000AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool init;

		[Token(Token = "0x6001059")]
		[Address(RVA = "0x4D34BC", Offset = "0x4D34BC", VA = "0x4D34BC")]
		public void Start()
		{
		}

		[Token(Token = "0x600105A")]
		[Address(RVA = "0x4D34C0", Offset = "0x4D34C0", VA = "0x4D34C0")]
		private void Init()
		{
		}

		[Token(Token = "0x600105B")]
		[Address(RVA = "0x4D3678", Offset = "0x4D3678", VA = "0x4D3678")]
		public void Reset()
		{
		}

		[Token(Token = "0x600105C")]
		[Address(RVA = "0x4D36B0", Offset = "0x4D36B0", VA = "0x4D36B0")]
		private void Update()
		{
		}

		[Token(Token = "0x600105D")]
		[Address(RVA = "0x4D3E20", Offset = "0x4D3E20", VA = "0x4D3E20")]
		public void TriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600105E")]
		[Address(RVA = "0x4D3F60", Offset = "0x4D3F60", VA = "0x4D3F60")]
		public void TriggerExit(Collider other)
		{
		}

		[Token(Token = "0x600105F")]
		[Address(RVA = "0x4D40D0", Offset = "0x4D40D0", VA = "0x4D40D0")]
		public void CalibrationComplete()
		{
		}

		[Token(Token = "0x6001060")]
		[Address(RVA = "0x4D4134", Offset = "0x4D4134", VA = "0x4D4134")]
		public GloveCalibration()
		{
		}
	}
	[Token(Token = "0x20001F9")]
	public class GloveCalibrationButton : MonoBehaviour
	{
		[Token(Token = "0x6001061")]
		[Address(RVA = "0x4D4144", Offset = "0x4D4144", VA = "0x4D4144")]
		public GloveCalibrationButton()
		{
		}
	}
	[Token(Token = "0x20001FA")]
	public class GloveCalibrationController : MonoBehaviour
	{
		[Token(Token = "0x4000AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public GloveCalibration[] calibrators;

		[Token(Token = "0x4000AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x246EBC", Offset = "0x246EBC")]
		private HomeMenuManager <homeManager>k__BackingField;

		[Token(Token = "0x4000AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private PlayerController _player;

		[Token(Token = "0x17000165")]
		public HomeMenuManager homeManager
		{
			[Token(Token = "0x6001062")]
			[Address(RVA = "0x4D414C", Offset = "0x4D414C", VA = "0x4D414C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249A20", Offset = "0x249A20")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001063")]
			[Address(RVA = "0x4D4154", Offset = "0x4D4154", VA = "0x4D4154")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249A30", Offset = "0x249A30")]
			set
			{
			}
		}

		[Token(Token = "0x17000166")]
		private PlayerController player
		{
			[Token(Token = "0x6001064")]
			[Address(RVA = "0x4D415C", Offset = "0x4D415C", VA = "0x4D415C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001065")]
		[Address(RVA = "0x4D3AA8", Offset = "0x4D3AA8", VA = "0x4D3AA8")]
		public void GloveCalibrated(bool isLeft, float posX, float posY, float posZ, float rotX, float rotY, float rotZ)
		{
		}

		[Token(Token = "0x6001066")]
		[Address(RVA = "0x4D4DA4", Offset = "0x4D4DA4", VA = "0x4D4DA4")]
		public void ActivateCalibration()
		{
		}

		[Token(Token = "0x6001067")]
		[Address(RVA = "0x4D4CB8", Offset = "0x4D4CB8", VA = "0x4D4CB8")]
		private void DeactivateCalibration()
		{
		}

		[Token(Token = "0x6001068")]
		[Address(RVA = "0x4D5104", Offset = "0x4D5104", VA = "0x4D5104")]
		public void SetControlType(int type)
		{
		}

		[Token(Token = "0x6001069")]
		[Address(RVA = "0x4D51E0", Offset = "0x4D51E0", VA = "0x4D51E0")]
		public GloveCalibrationController()
		{
		}
	}
	[Token(Token = "0x20001FB")]
	public class GloveCalibrationReset : MonoBehaviour
	{
		[Token(Token = "0x600106A")]
		[Address(RVA = "0x4D51E8", Offset = "0x4D51E8", VA = "0x4D51E8")]
		public GloveCalibrationReset()
		{
		}
	}
	[Token(Token = "0x20001FC")]
	public class GloveCalibrationTrigger : MonoBehaviour
	{
		[Token(Token = "0x4000AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public GloveCalibration calibrator;

		[Token(Token = "0x600106B")]
		[Address(RVA = "0x4D51F0", Offset = "0x4D51F0", VA = "0x4D51F0")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600106C")]
		[Address(RVA = "0x4D5220", Offset = "0x4D5220", VA = "0x4D5220")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x600106D")]
		[Address(RVA = "0x4D5250", Offset = "0x4D5250", VA = "0x4D5250")]
		public GloveCalibrationTrigger()
		{
		}
	}
	[Token(Token = "0x20001FD")]
	public class GymPlayerPositioner : MonoBehaviour
	{
		[Token(Token = "0x4000AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static GymPlayerPositioner instance;

		[Token(Token = "0x4000AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Transform trainer;

		[Token(Token = "0x4000AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform trainerSmallSpacePosition;

		[Token(Token = "0x4000AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Transform trainerLargeSpacePosition;

		[Token(Token = "0x4000AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float trainerSmallPositionWidth;

		[Token(Token = "0x4000AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float trainerSmallPositionDepth;

		[Token(Token = "0x4000AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SpectatorCamera spectatorCamera;

		[Token(Token = "0x4000AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public HomeMenuManager homeMenu;

		[Token(Token = "0x4000AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool eventOn;

		[Token(Token = "0x600106E")]
		[Address(RVA = "0x4D5258", Offset = "0x4D5258", VA = "0x4D5258")]
		private void Awake()
		{
		}

		[Token(Token = "0x600106F")]
		[Address(RVA = "0x4D52BC", Offset = "0x4D52BC", VA = "0x4D52BC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001070")]
		[Address(RVA = "0x4D5468", Offset = "0x4D5468", VA = "0x4D5468")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001071")]
		[Address(RVA = "0x4D2574", Offset = "0x4D2574", VA = "0x4D2574")]
		public static void InitializeBoard()
		{
		}

		[Token(Token = "0x6001072")]
		[Address(RVA = "0x4D52C0", Offset = "0x4D52C0", VA = "0x4D52C0")]
		private void InitializeBoardLocal()
		{
		}

		[Token(Token = "0x6001073")]
		[Address(RVA = "0x4D1314", Offset = "0x4D1314", VA = "0x4D1314")]
		public static void DeinitializeBoard()
		{
		}

		[Token(Token = "0x6001074")]
		[Address(RVA = "0x4D5950", Offset = "0x4D5950", VA = "0x4D5950")]
		private void DeinitializeBoardLocal()
		{
		}

		[Token(Token = "0x6001075")]
		[Address(RVA = "0x4D5A90", Offset = "0x4D5A90", VA = "0x4D5A90")]
		public void PlaySpaceUpdated()
		{
		}

		[Token(Token = "0x6001076")]
		[Address(RVA = "0x4D55B0", Offset = "0x4D55B0", VA = "0x4D55B0")]
		public void MovePlayer()
		{
		}

		[Token(Token = "0x6001077")]
		[Address(RVA = "0x4D5AC4", Offset = "0x4D5AC4", VA = "0x4D5AC4")]
		public GymPlayerPositioner()
		{
		}
	}
	[Token(Token = "0x20001FE")]
	public class HapticsController
	{
		[Token(Token = "0x4000AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool keepCheckingNS;

		[Token(Token = "0x4000AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		private static bool loaded;

		[Token(Token = "0x4000AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static IHapticsSystem haptics;

		[Token(Token = "0x4000AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static PlayerController _player;

		[Token(Token = "0x4000AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static bool hardlightConnected;

		[Token(Token = "0x17000167")]
		public static PlayerController player
		{
			[Token(Token = "0x6001078")]
			[Address(RVA = "0x4D5AD8", Offset = "0x4D5AD8", VA = "0x4D5AD8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001079")]
		[Address(RVA = "0x4D5C78", Offset = "0x4D5C78", VA = "0x4D5C78")]
		public static void Initialize()
		{
		}

		[Token(Token = "0x600107A")]
		[Address(RVA = "0x4D5E30", Offset = "0x4D5E30", VA = "0x4D5E30")]
		public static void CheckStatus()
		{
		}

		[Token(Token = "0x600107B")]
		[Address(RVA = "0x4D5D6C", Offset = "0x4D5D6C", VA = "0x4D5D6C")]
		public static void LoadDefault()
		{
		}

		[Token(Token = "0x600107C")]
		[Address(RVA = "0x4D5F24", Offset = "0x4D5F24", VA = "0x4D5F24")]
		public static void Rumble(float strength, IHapticsSystem.BodyArea area)
		{
		}

		[Token(Token = "0x600107D")]
		[Address(RVA = "0x4D6020", Offset = "0x4D6020", VA = "0x4D6020")]
		public HapticsController()
		{
		}
	}
	[Token(Token = "0x20001FF")]
	public class HeavyBagCollider : Equipment, IFixedUpdateable
	{
		[Token(Token = "0x4000AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public HeavyBagController controller;

		[Token(Token = "0x4000AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Vector3 lastFixedUpdatePosition;

		[Token(Token = "0x4000AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Quaternion lastFixedUpdateRotation;

		[Token(Token = "0x600107F")]
		[Address(RVA = "0x4D60AC", Offset = "0x4D60AC", VA = "0x4D60AC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001080")]
		[Address(RVA = "0x4D60B4", Offset = "0x4D60B4", VA = "0x4D60B4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001081")]
		[Address(RVA = "0x4D60BC", Offset = "0x4D60BC", VA = "0x4D60BC", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001082")]
		[Address(RVA = "0x4D6144", Offset = "0x4D6144", VA = "0x4D6144", Slot = "5")]
		public void CustomFixedUpdate()
		{
		}

		[Token(Token = "0x6001083")]
		[Address(RVA = "0x4D62D0", Offset = "0x4D62D0", VA = "0x4D62D0")]
		public void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001084")]
		[Address(RVA = "0x4D6BBC", Offset = "0x4D6BBC", VA = "0x4D6BBC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001085")]
		[Address(RVA = "0x4D6E80", Offset = "0x4D6E80", VA = "0x4D6E80")]
		public HeavyBagCollider()
		{
		}
	}
	[Token(Token = "0x2000200")]
	public class HeavyBagController : MonoBehaviour
	{
		[Token(Token = "0x4000AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static HeavyBagController instance;

		[Token(Token = "0x4000AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float chainJingleForce;

		[Token(Token = "0x4000AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform trainer;

		[Token(Token = "0x4000AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public SpectatorCamera spectatorCamera;

		[Token(Token = "0x4000ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody bagRb;

		[Token(Token = "0x4000ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Transform bagModel;

		[Token(Token = "0x4000ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Rigidbody bagFollowRb;

		[Token(Token = "0x4000ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public GameObject uiCanvas;

		[Token(Token = "0x4000ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maxSpeed;

		[Token(Token = "0x4000ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public HitRecapUI lastHitUI;

		[Token(Token = "0x4000AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HitRecapUI bestHitUI;

		[Token(Token = "0x4000AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public AudioClip[] hitSounds;

		[Token(Token = "0x4000AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioClip[] chainSounds;

		[Token(Token = "0x4000AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public AudioSource chainAudioSource;

		[Token(Token = "0x4000AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool initialized;

		[Token(Token = "0x4000AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Transform trainerSmallSpacePosition;

		[Token(Token = "0x4000AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform trainerLargeSpacePosition;

		[Token(Token = "0x4000AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float trainerSmallPositionWidth;

		[Token(Token = "0x4000AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float trainerSmallPositionDepth;

		[Token(Token = "0x4000AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float bestDamage;

		[Token(Token = "0x4000ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool eventOn;

		[Token(Token = "0x6001086")]
		[Address(RVA = "0x4D6E88", Offset = "0x4D6E88", VA = "0x4D6E88")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001087")]
		[Address(RVA = "0x4D6FA8", Offset = "0x4D6FA8", VA = "0x4D6FA8")]
		public static void InitializeHeavyBag()
		{
		}

		[Token(Token = "0x6001088")]
		[Address(RVA = "0x4D707C", Offset = "0x4D707C", VA = "0x4D707C")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6001089")]
		[Address(RVA = "0x4D7850", Offset = "0x4D7850", VA = "0x4D7850")]
		public void DeinitializeHeavyBag()
		{
		}

		[Token(Token = "0x600108A")]
		[Address(RVA = "0x4D79BC", Offset = "0x4D79BC", VA = "0x4D79BC")]
		public void Awake()
		{
		}

		[Token(Token = "0x600108B")]
		[Address(RVA = "0x4D7A44", Offset = "0x4D7A44", VA = "0x4D7A44")]
		public void ResetBestHit()
		{
		}

		[Token(Token = "0x600108C")]
		[Address(RVA = "0x4D6404", Offset = "0x4D6404", VA = "0x4D6404")]
		public void ColliderHit(Collision collision, PlayerFist hitbox)
		{
		}

		[Token(Token = "0x600108D")]
		[Address(RVA = "0x4D8500", Offset = "0x4D8500", VA = "0x4D8500")]
		public void Exit()
		{
		}

		[Token(Token = "0x600108E")]
		[Address(RVA = "0x4D7BAC", Offset = "0x4D7BAC", VA = "0x4D7BAC")]
		private void ReceiveForceFromCollision(Vector3 force, Vector3 position)
		{
		}

		[Token(Token = "0x600108F")]
		[Address(RVA = "0x4D8504", Offset = "0x4D8504", VA = "0x4D8504")]
		public void CloseButtonPressed()
		{
		}

		[Token(Token = "0x6001090")]
		[Address(RVA = "0x4D8654", Offset = "0x4D8654", VA = "0x4D8654")]
		public void PlaySpaceUpdated()
		{
		}

		[Token(Token = "0x6001091")]
		[Address(RVA = "0x4D74B0", Offset = "0x4D74B0", VA = "0x4D74B0")]
		public void MovePlayer()
		{
		}

		[Token(Token = "0x6001092")]
		[Address(RVA = "0x4D8658", Offset = "0x4D8658", VA = "0x4D8658")]
		public HeavyBagController()
		{
		}
	}
	[Token(Token = "0x2000201")]
	public class HeavyBagExitButton : MonoBehaviour
	{
		[Token(Token = "0x4000ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public HeavyBagController controller;

		[Token(Token = "0x6001093")]
		[Address(RVA = "0x4D8680", Offset = "0x4D8680", VA = "0x4D8680")]
		public void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x6001094")]
		[Address(RVA = "0x4D884C", Offset = "0x4D884C", VA = "0x4D884C")]
		public void MoveToBoard()
		{
		}

		[Token(Token = "0x6001095")]
		[Address(RVA = "0x4D8878", Offset = "0x4D8878", VA = "0x4D8878")]
		public HeavyBagExitButton()
		{
		}
	}
	[Token(Token = "0x2000202")]
	public class HeavyBagPoster : MonoBehaviour
	{
		[Token(Token = "0x6001096")]
		[Address(RVA = "0x4D8880", Offset = "0x4D8880", VA = "0x4D8880")]
		private void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x6001097")]
		[Address(RVA = "0x4D8994", Offset = "0x4D8994", VA = "0x4D8994")]
		public void MoveToHeavyBag()
		{
		}

		[Token(Token = "0x6001098")]
		[Address(RVA = "0x4D8998", Offset = "0x4D8998", VA = "0x4D8998")]
		public HeavyBagPoster()
		{
		}
	}
	[Token(Token = "0x2000203")]
	public class HeightCalibrationController : MonoBehaviour
	{
		[Token(Token = "0x4000ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public GameObject message;

		[Token(Token = "0x4000ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public WeighInController calibrator;

		[Token(Token = "0x6001099")]
		[Address(RVA = "0x4D89A0", Offset = "0x4D89A0", VA = "0x4D89A0")]
		public void ActivateCalibration()
		{
		}

		[Token(Token = "0x600109A")]
		[Address(RVA = "0x4D89F0", Offset = "0x4D89F0", VA = "0x4D89F0")]
		public void DeactivateCalibration()
		{
		}

		[Token(Token = "0x600109B")]
		[Address(RVA = "0x4D8A40", Offset = "0x4D8A40", VA = "0x4D8A40")]
		public HeightCalibrationController()
		{
		}
	}
	[Token(Token = "0x2000204")]
	public class Hitbox : MonoBehaviour
	{
		[Token(Token = "0x20002F6")]
		public enum PunchType
		{
			[Token(Token = "0x4001099")]
			None,
			[Token(Token = "0x400109A")]
			Jab,
			[Token(Token = "0x400109B")]
			LeftCross,
			[Token(Token = "0x400109C")]
			RightCross,
			[Token(Token = "0x400109D")]
			RightHook,
			[Token(Token = "0x400109E")]
			LeftHook,
			[Token(Token = "0x400109F")]
			RightUpper,
			[Token(Token = "0x40010A0")]
			LeftUpper
		}

		[Token(Token = "0x4000ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<Hitbox> _hitboxesInScene;

		[Token(Token = "0x4000ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x246ECC", Offset = "0x246ECC")]
		private BoxerController <owner>k__BackingField;

		[Token(Token = "0x4000AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected Vector3 velocity;

		[Token(Token = "0x4000AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x246EDC", Offset = "0x246EDC")]
		private Vector3 <positionLastUpdate>k__BackingField;

		[Token(Token = "0x4000AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Rigidbody rb;

		[Token(Token = "0x4000AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		protected float rbMass;

		[Token(Token = "0x4000AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x246EEC", Offset = "0x246EEC")]
		private PunchType <lastPunchType>k__BackingField;

		[Token(Token = "0x17000168")]
		private static List<Hitbox> hitboxesInScene
		{
			[Token(Token = "0x600109C")]
			[Address(RVA = "0x4D9378", Offset = "0x4D9378", VA = "0x4D9378")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000169")]
		public BoxerController owner
		{
			[Token(Token = "0x600109D")]
			[Address(RVA = "0x4D9438", Offset = "0x4D9438", VA = "0x4D9438")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249A40", Offset = "0x249A40")]
			get
			{
				return null;
			}
			[Token(Token = "0x600109E")]
			[Address(RVA = "0x4D9440", Offset = "0x4D9440", VA = "0x4D9440")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249A50", Offset = "0x249A50")]
			set
			{
			}
		}

		[Token(Token = "0x1700016A")]
		public Vector3 positionLastUpdate
		{
			[Token(Token = "0x600109F")]
			[Address(RVA = "0x4D9448", Offset = "0x4D9448", VA = "0x4D9448")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249A60", Offset = "0x249A60")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60010A0")]
			[Address(RVA = "0x4D945C", Offset = "0x4D945C", VA = "0x4D945C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249A70", Offset = "0x249A70")]
			set
			{
			}
		}

		[Token(Token = "0x1700016B")]
		public PunchType lastPunchType
		{
			[Token(Token = "0x60010A1")]
			[Address(RVA = "0x4D9468", Offset = "0x4D9468", VA = "0x4D9468")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249A80", Offset = "0x249A80")]
			get
			{
				return default(PunchType);
			}
			[Token(Token = "0x60010A2")]
			[Address(RVA = "0x4D9470", Offset = "0x4D9470", VA = "0x4D9470")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249A90", Offset = "0x249A90")]
			set
			{
			}
		}

		[Token(Token = "0x60010A3")]
		[Address(RVA = "0x4D9478", Offset = "0x4D9478", VA = "0x4D9478")]
		public static List<Hitbox> GetHitboxesInScene()
		{
			return null;
		}

		[Token(Token = "0x60010A4")]
		[Address(RVA = "0x4D947C", Offset = "0x4D947C", VA = "0x4D947C")]
		private void RegisterHitbox()
		{
		}

		[Token(Token = "0x60010A5")]
		[Address(RVA = "0x4D94FC", Offset = "0x4D94FC", VA = "0x4D94FC", Slot = "4")]
		public virtual void Awake()
		{
		}

		[Token(Token = "0x60010A6")]
		[Address(RVA = "0x4D9590", Offset = "0x4D9590", VA = "0x4D9590")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x60010A7")]
		[Address(RVA = "0x4D9600", Offset = "0x4D9600", VA = "0x4D9600")]
		public void SetOwner(BoxerController newOwner)
		{
		}

		[Token(Token = "0x60010A8")]
		[Address(RVA = "0x4D9608", Offset = "0x4D9608", VA = "0x4D9608")]
		public bool IsOwner(BoxerController candidateOwner)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A9")]
		[Address(RVA = "0x4D9698", Offset = "0x4D9698", VA = "0x4D9698", Slot = "5")]
		public virtual void LandedHit(PunchType punchType, float damage, float targetPainThreshold)
		{
		}

		[Token(Token = "0x60010AA")]
		[Address(RVA = "0x4D969C", Offset = "0x4D969C", VA = "0x4D969C")]
		public void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60010AB")]
		[Address(RVA = "0x4D9AA4", Offset = "0x4D9AA4", VA = "0x4D9AA4", Slot = "6")]
		public virtual void ReceiveHitboxCollision(float force, Hitbox otherHitbox, Collision collision, bool isMajorHit)
		{
		}

		[Token(Token = "0x60010AC")]
		[Address(RVA = "0x4D9B38", Offset = "0x4D9B38", VA = "0x4D9B38", Slot = "7")]
		public virtual bool CausedMajorCollision(Collider other)
		{
			return default(bool);
		}

		[Token(Token = "0x60010AD")]
		[Address(RVA = "0x4D9B40", Offset = "0x4D9B40", VA = "0x4D9B40", Slot = "8")]
		public virtual void ReceiveForce(float force, bool isMajorHit, Collision collision)
		{
		}

		[Token(Token = "0x60010AE")]
		[Address(RVA = "0x4D9B44", Offset = "0x4D9B44", VA = "0x4D9B44", Slot = "9")]
		public virtual Vector3 GetVelocity(bool allowSmoothing = true)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010AF")]
		[Address(RVA = "0x4D9B58", Offset = "0x4D9B58", VA = "0x4D9B58", Slot = "10")]
		public virtual void UpdateVelocity()
		{
		}

		[Token(Token = "0x60010B0")]
		[Address(RVA = "0x4D9CA0", Offset = "0x4D9CA0", VA = "0x4D9CA0", Slot = "11")]
		public virtual float GetEffectiveMass(Vector3 collisionPoint, bool calibrationHit = false, bool returnUnmodifiedForce = false)
		{
			return default(float);
		}

		[Token(Token = "0x60010B1")]
		[Address(RVA = "0x4D9CA8", Offset = "0x4D9CA8", VA = "0x4D9CA8", Slot = "12")]
		public virtual float GetRigidbodyMass()
		{
			return default(float);
		}

		[Token(Token = "0x60010B2")]
		[Address(RVA = "0x4D9CB0", Offset = "0x4D9CB0", VA = "0x4D9CB0", Slot = "13")]
		public virtual bool IsActive(bool majorHit)
		{
			return default(bool);
		}

		[Token(Token = "0x60010B3")]
		[Address(RVA = "0x4D9CB8", Offset = "0x4D9CB8", VA = "0x4D9CB8", Slot = "14")]
		public virtual void Deactivate(bool majorHit)
		{
		}

		[Token(Token = "0x60010B4")]
		[Address(RVA = "0x4D9CBC", Offset = "0x4D9CBC", VA = "0x4D9CBC", Slot = "15")]
		public virtual void ClearVelocity()
		{
		}

		[Token(Token = "0x60010B5")]
		[Address(RVA = "0x4D9D94", Offset = "0x4D9D94", VA = "0x4D9D94", Slot = "16")]
		public virtual void DeactivateIfInactive(bool majorHit = true)
		{
		}

		[Token(Token = "0x60010B6")]
		[Address(RVA = "0x4D9DDC", Offset = "0x4D9DDC", VA = "0x4D9DDC", Slot = "17")]
		public virtual bool IsBlocking()
		{
			return default(bool);
		}

		[Token(Token = "0x60010B7")]
		[Address(RVA = "0x4CA9B8", Offset = "0x4CA9B8", VA = "0x4CA9B8")]
		public Hitbox()
		{
		}
	}
	[Token(Token = "0x2000205")]
	public class HitRecapUI : MonoBehaviour
	{
		[Token(Token = "0x4000AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public TextMeshProUGUI rawForceText;

		[Token(Token = "0x4000AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TextMeshProUGUI velocityText;

		[Token(Token = "0x4000AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public TextMeshProUGUI massTransferText;

		[Token(Token = "0x4000AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshProUGUI bonusText;

		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TextMeshProUGUI punchTypeText;

		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string defaultVal;

		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private string punchTypeJabVal;

		[Token(Token = "0x4000ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string punchTypeRightCrossVal;

		[Token(Token = "0x4000ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private string punchTypeLeftCrossVal;

		[Token(Token = "0x4000ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string punchTypeRightHookVal;

		[Token(Token = "0x4000ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private string punchTypeLeftHookVal;

		[Token(Token = "0x4000AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string punchTypeRightUpperVal;

		[Token(Token = "0x4000AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private string punchTypeLeftUpperVal;

		[Token(Token = "0x60010B8")]
		[Address(RVA = "0x4D8A48", Offset = "0x4D8A48", VA = "0x4D8A48")]
		private void Start()
		{
		}

		[Token(Token = "0x60010B9")]
		[Address(RVA = "0x4D7234", Offset = "0x4D7234", VA = "0x4D7234")]
		public void ResetText()
		{
		}

		[Token(Token = "0x60010BA")]
		[Address(RVA = "0x4D7C14", Offset = "0x4D7C14", VA = "0x4D7C14")]
		public void UpdateText(bool isDamage, float rawForce, float velocity, float massTransfer, Hitbox.PunchType punchType, float bonus = -200f)
		{
		}

		[Token(Token = "0x60010BB")]
		[Address(RVA = "0x4D8A4C", Offset = "0x4D8A4C", VA = "0x4D8A4C")]
		public HitRecapUI()
		{
		}
	}
	[Token(Token = "0x2000206")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x241590", Offset = "0x241590")]
	public class HitZone : MonoBehaviour
	{
		[Token(Token = "0x20002F7")]
		public enum HitZoneType
		{
			[Token(Token = "0x40010A2")]
			Chin,
			[Token(Token = "0x40010A3")]
			Temple,
			[Token(Token = "0x40010A4")]
			Uppercut,
			[Token(Token = "0x40010A5")]
			Crown,
			[Token(Token = "0x40010A6")]
			Liver,
			[Token(Token = "0x40010A7")]
			SolarPlexus,
			[Token(Token = "0x40010A8")]
			Custom
		}

		[Token(Token = "0x4000AE2")]
		private const float blockCheckDistance = 0.46f;

		[Token(Token = "0x4000AE3")]
		private const float blockCheckRadius = 0.1f;

		[Token(Token = "0x4000AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x246EFC", Offset = "0x246EFC")]
		private BoxerController <owner>k__BackingField;

		[Token(Token = "0x4000AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float modifier;

		[Token(Token = "0x4000AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float angleNeededToHit;

		[Token(Token = "0x4000AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float leniency;

		[Token(Token = "0x4000AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public HitZoneType type;

		[Token(Token = "0x4000AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Hurtbox.HurtboxType forHurtboxType;

		[Token(Token = "0x4000AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 checkBoxExtents;

		[Token(Token = "0x4000AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private BoxCollider boxCollider;

		[Token(Token = "0x4000AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Collider[] colliderCheckArray;

		[Token(Token = "0x4000AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform blockCheckOverride;

		[Token(Token = "0x4000AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x246F0C", Offset = "0x246F0C")]
		private int <hitboxLayerMask>k__BackingField;

		[Token(Token = "0x1700016C")]
		public BoxerController owner
		{
			[Token(Token = "0x60010BC")]
			[Address(RVA = "0x4D8B44", Offset = "0x4D8B44", VA = "0x4D8B44")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249AA0", Offset = "0x249AA0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60010BD")]
			[Address(RVA = "0x4D8B4C", Offset = "0x4D8B4C", VA = "0x4D8B4C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249AB0", Offset = "0x249AB0")]
			set
			{
			}
		}

		[Token(Token = "0x1700016D")]
		public int hitboxLayerMask
		{
			[Token(Token = "0x60010BE")]
			[Address(RVA = "0x4D8B54", Offset = "0x4D8B54", VA = "0x4D8B54")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249AC0", Offset = "0x249AC0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60010BF")]
			[Address(RVA = "0x4D8B5C", Offset = "0x4D8B5C", VA = "0x4D8B5C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249AD0", Offset = "0x249AD0")]
			set
			{
			}
		}

		[Token(Token = "0x60010C0")]
		[Address(RVA = "0x4D8B64", Offset = "0x4D8B64", VA = "0x4D8B64", Slot = "4")]
		public virtual void Awake()
		{
		}

		[Token(Token = "0x60010C1")]
		[Address(RVA = "0x4D8D30", Offset = "0x4D8D30", VA = "0x4D8D30")]
		public float CalculateAlignment(Vector3 angleOfAttack)
		{
			return default(float);
		}

		[Token(Token = "0x60010C2")]
		[Address(RVA = "0x4D8EA4", Offset = "0x4D8EA4", VA = "0x4D8EA4")]
		public float CalculateEffectiveMultiplier(float alignment)
		{
			return default(float);
		}

		[Token(Token = "0x60010C3")]
		[Address(RVA = "0x4D8EC0", Offset = "0x4D8EC0", VA = "0x4D8EC0")]
		public bool IsBeingStruckBy(Hitbox hitbox, Hurtbox.HurtboxType hurtboxType)
		{
			return default(bool);
		}

		[Token(Token = "0x60010C4")]
		[Address(RVA = "0x4D919C", Offset = "0x4D919C", VA = "0x4D919C")]
		public bool IsBlocked()
		{
			return default(bool);
		}

		[Token(Token = "0x60010C5")]
		[Address(RVA = "0x4D91A4", Offset = "0x4D91A4", VA = "0x4D91A4")]
		public void SetOwner(BoxerController newOwner)
		{
		}

		[Token(Token = "0x60010C6")]
		[Address(RVA = "0x4D91AC", Offset = "0x4D91AC", VA = "0x4D91AC")]
		public Vector3 PredictPosition(float afterSeconds)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010C7")]
		[Address(RVA = "0x4D92C0", Offset = "0x4D92C0", VA = "0x4D92C0")]
		public HitZone()
		{
		}
	}
	[Token(Token = "0x2000207")]
	public class HomeMenuManager : MenuManager
	{
		[Token(Token = "0x4000AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool arcadeMode;

		[Token(Token = "0x4000AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public MainMenuManager mainMenu;

		[Token(Token = "0x4000AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FightMenuManager opponentSelectMenu;

		[Token(Token = "0x4000AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public FightMenuManager extraBattleMenu;

		[Token(Token = "0x4000AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ScoreCardGenerator scorecard;

		[Token(Token = "0x4000AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public SettingsMenu settingsMenu;

		[Token(Token = "0x4000AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GloveCalibrationController gloveCalibration;

		[Token(Token = "0x4000AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public CustomizeBoutMenu customizeMenu;

		[Token(Token = "0x60010C8")]
		[Address(RVA = "0x4D9DE4", Offset = "0x4D9DE4", VA = "0x4D9DE4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60010C9")]
		[Address(RVA = "0x4DA010", Offset = "0x4DA010", VA = "0x4DA010")]
		private void Start()
		{
		}

		[Token(Token = "0x60010CA")]
		[Address(RVA = "0x4DA3BC", Offset = "0x4DA3BC", VA = "0x4DA3BC")]
		public void CloseAllMenus()
		{
		}

		[Token(Token = "0x60010CB")]
		[Address(RVA = "0x4CC740", Offset = "0x4CC740", VA = "0x4CC740")]
		public void OpenMainMenu()
		{
		}

		[Token(Token = "0x60010CC")]
		[Address(RVA = "0x4DA344", Offset = "0x4DA344", VA = "0x4DA344")]
		public void OpenFightMenu()
		{
		}

		[Token(Token = "0x60010CD")]
		[Address(RVA = "0x4DA380", Offset = "0x4DA380", VA = "0x4DA380")]
		public void OpenExtraBattleMenu()
		{
		}

		[Token(Token = "0x60010CE")]
		[Address(RVA = "0x4D5014", Offset = "0x4D5014", VA = "0x4D5014")]
		public void OpenSettingsMenu()
		{
		}

		[Token(Token = "0x60010CF")]
		[Address(RVA = "0x4D4F08", Offset = "0x4D4F08", VA = "0x4D4F08")]
		public void OpenGloveCalibration()
		{
		}

		[Token(Token = "0x60010D0")]
		[Address(RVA = "0x4D5588", Offset = "0x4D5588", VA = "0x4D5588")]
		public void UpdateMainMenuStats()
		{
		}

		[Token(Token = "0x60010D1")]
		[Address(RVA = "0x4DAFA0", Offset = "0x4DAFA0", VA = "0x4DAFA0")]
		public HomeMenuManager()
		{
		}
	}
	[Token(Token = "0x2000208")]
	public class Hurtbox : MonoBehaviour
	{
		[Token(Token = "0x20002F8")]
		public enum HurtboxType
		{
			[Token(Token = "0x40010AA")]
			Head,
			[Token(Token = "0x40010AB")]
			Body,
			[Token(Token = "0x40010AC")]
			Other
		}

		[Token(Token = "0x4000AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float MaximumHurtboxVelocity;

		[Token(Token = "0x4000AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public HurtboxType type;

		[Token(Token = "0x4000AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x246F1C", Offset = "0x246F1C")]
		private BoxerController <owner>k__BackingField;

		[Token(Token = "0x4000AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		protected Vector3 velocity;

		[Token(Token = "0x4000AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Rigidbody rb;

		[Token(Token = "0x4000AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		protected float rbMass;

		[Token(Token = "0x4000AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Vector3 position;

		[Token(Token = "0x4000AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		protected Vector3 positionLastUpdate;

		[Token(Token = "0x4000AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Quaternion rotation;

		[Token(Token = "0x4000B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Quaternion rotationLastUpdate;

		[Token(Token = "0x4000B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected float deltaTimeLastUpdate;

		[Token(Token = "0x1700016E")]
		public BoxerController owner
		{
			[Token(Token = "0x60010D3")]
			[Address(RVA = "0x4DB030", Offset = "0x4DB030", VA = "0x4DB030")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249AE0", Offset = "0x249AE0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60010D4")]
			[Address(RVA = "0x4DB038", Offset = "0x4DB038", VA = "0x4DB038")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249AF0", Offset = "0x249AF0")]
			private set
			{
			}
		}

		[Token(Token = "0x60010D5")]
		[Address(RVA = "0x4DB040", Offset = "0x4DB040", VA = "0x4DB040", Slot = "4")]
		public virtual void Start()
		{
		}

		[Token(Token = "0x60010D6")]
		[Address(RVA = "0x4DB158", Offset = "0x4DB158", VA = "0x4DB158", Slot = "5")]
		public virtual void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60010D7")]
		[Address(RVA = "0x4DB304", Offset = "0x4DB304", VA = "0x4DB304")]
		public void SetOwner(BoxerController newOwner)
		{
		}

		[Token(Token = "0x60010D8")]
		[Address(RVA = "0x4DB30C", Offset = "0x4DB30C", VA = "0x4DB30C", Slot = "6")]
		public virtual void ReceiveHitboxCollision(float force, Hitbox hitbox, Collision collision)
		{
		}

		[Token(Token = "0x60010D9")]
		[Address(RVA = "0x4DB364", Offset = "0x4DB364", VA = "0x4DB364", Slot = "7")]
		public virtual Vector3 GetVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010DA")]
		[Address(RVA = "0x4DB378", Offset = "0x4DB378", VA = "0x4DB378", Slot = "8")]
		public virtual Vector3 GetVelocity(Vector3 atPoint)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010DB")]
		[Address(RVA = "0x4DB6B8", Offset = "0x4DB6B8", VA = "0x4DB6B8", Slot = "9")]
		public virtual float GetRigidbodyMass()
		{
			return default(float);
		}

		[Token(Token = "0x60010DC")]
		[Address(RVA = "0x4DB6C0", Offset = "0x4DB6C0", VA = "0x4DB6C0", Slot = "10")]
		public virtual bool CanTakeDamage()
		{
			return default(bool);
		}

		[Token(Token = "0x60010DD")]
		[Address(RVA = "0x4DB780", Offset = "0x4DB780", VA = "0x4DB780", Slot = "11")]
		public virtual void ClearVelocity()
		{
		}

		[Token(Token = "0x60010DE")]
		[Address(RVA = "0x4DB91C", Offset = "0x4DB91C", VA = "0x4DB91C", Slot = "12")]
		public virtual void UpdateVelocity()
		{
		}

		[Token(Token = "0x60010DF")]
		[Address(RVA = "0x4DBACC", Offset = "0x4DBACC", VA = "0x4DBACC")]
		public Hurtbox()
		{
		}
	}
	[Token(Token = "0x2000209")]
	public abstract class IHapticsSystem
	{
		[Token(Token = "0x20002F9")]
		public enum BodyArea
		{
			[Token(Token = "0x40010AE")]
			GetHitHead,
			[Token(Token = "0x40010AF")]
			GetHitLeftHand,
			[Token(Token = "0x40010B0")]
			GetHitLeftArm,
			[Token(Token = "0x40010B1")]
			GetHitLeftShoulder,
			[Token(Token = "0x40010B2")]
			GetHitRightHand,
			[Token(Token = "0x40010B3")]
			GetHitRightArm,
			[Token(Token = "0x40010B4")]
			GetHitRightShoulder,
			[Token(Token = "0x40010B5")]
			GetHitChest,
			[Token(Token = "0x40010B6")]
			GetHitStomach,
			[Token(Token = "0x40010B7")]
			PunchLeftHand,
			[Token(Token = "0x40010B8")]
			PunchRightHand,
			[Token(Token = "0x40010B9")]
			HitTheMat,
			[Token(Token = "0x40010BA")]
			HeartBeat,
			[Token(Token = "0x40010BB")]
			HeartBeatHeavy
		}

		[Token(Token = "0x4000B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool loaded;

		[Token(Token = "0x60010E1")]
		public abstract bool IsActive();

		[Token(Token = "0x60010E2")]
		public abstract void Initialize();

		[Token(Token = "0x60010E3")]
		public abstract void Unload();

		[Token(Token = "0x60010E4")]
		public abstract void Rumble(float strength, BodyArea area);

		[Token(Token = "0x60010E5")]
		[Address(RVA = "0x4DBBD8", Offset = "0x4DBBD8", VA = "0x4DBBD8")]
		protected IHapticsSystem()
		{
		}
	}
	[Token(Token = "0x200020A")]
	[AttributeAttribute(Name = "ExecuteInEditMode", RVA = "0x241608", Offset = "0x241608")]
	public class TotfImageEffects : MonoBehaviour
	{
		[Token(Token = "0x4000B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static TotfImageEffects instance;

		[Token(Token = "0x4000B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Shader shader;

		[Token(Token = "0x4000B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x246F2C", Offset = "0x246F2C")]
		public float shakeLevel;

		[Token(Token = "0x4000B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x246F44", Offset = "0x246F44")]
		public float whiteFlashLevel;

		[Token(Token = "0x4000B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x246F5C", Offset = "0x246F5C")]
		public float whiteVignetteLevel;

		[Token(Token = "0x4000B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x246F74", Offset = "0x246F74")]
		public float fadeToBlackLevel;

		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x246F8C", Offset = "0x246F8C")]
		public float doubleVisionLevel;

		[Token(Token = "0x4000B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x246FA4", Offset = "0x246FA4")]
		public float desaturationLevel;

		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x246FBC", Offset = "0x246FBC")]
		public float vignetteLevel;

		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x246FD4", Offset = "0x246FD4")]
		public float blurLevel;

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x246FEC", Offset = "0x246FEC")]
		public float blinkLevel;

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x247004", Offset = "0x247004")]
		public float brightnessLevel;

		[Token(Token = "0x60010E6")]
		[Address(RVA = "0x3A7F68", Offset = "0x3A7F68", VA = "0x3A7F68")]
		public static void SetBrightness(float val)
		{
		}

		[Token(Token = "0x60010E7")]
		[Address(RVA = "0x3ACE18", Offset = "0x3ACE18", VA = "0x3ACE18")]
		private void Awake()
		{
		}

		[Token(Token = "0x60010E8")]
		[Address(RVA = "0x3ACF0C", Offset = "0x3ACF0C", VA = "0x3ACF0C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60010E9")]
		[Address(RVA = "0x3AD02C", Offset = "0x3AD02C", VA = "0x3AD02C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60010EA")]
		[Address(RVA = "0x3AD094", Offset = "0x3AD094", VA = "0x3AD094")]
		public TotfImageEffects()
		{
		}
	}
	[Token(Token = "0x200020B")]
	public class LightClusterAudienceGroup : AudienceGroup
	{
		[Token(Token = "0x4000B0F")]
		private const float patchRadius = 4f;

		[Token(Token = "0x4000B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int audienceCountX;

		[Token(Token = "0x4000B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int audienceCountZ;

		[Token(Token = "0x4000B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float colliderHalfSizeX;

		[Token(Token = "0x4000B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float colliderHalfSizeZ;

		[Token(Token = "0x4000B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int[] templateCounts;

		[Token(Token = "0x4000B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float audienceSizeX;

		[Token(Token = "0x4000B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float audienceSizeZ;

		[Token(Token = "0x4000B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int patchHalfSizeX;

		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int patchHalfSizeZ;

		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Matrix4x4[,] audienceMatrices;

		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3[,] audiencePositions;

		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int[,] audienceTemplateIndex;

		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float[,] lightIntensity;

		[Token(Token = "0x4000B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool[,] shouldRenderAudiencePosition;

		[Token(Token = "0x4000B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float[][] propsIntensityArray;

		[Token(Token = "0x4000B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector4[][] propsPositionArray;

		[Token(Token = "0x4000B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int activeCount;

		[Token(Token = "0x4000B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int[] activeCol;

		[Token(Token = "0x4000B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int[] activeRow;

		[Token(Token = "0x4000B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3[] activeSpotlightPosition;

		[Token(Token = "0x4000B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int positionNameID;

		[Token(Token = "0x4000B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		protected MaterialPropertyBlock props;

		[Token(Token = "0x60010EB")]
		[Address(RVA = "0x4DBBE0", Offset = "0x4DBBE0", VA = "0x4DBBE0", Slot = "4")]
		public override void Initialize(AudienceGenerator generator)
		{
		}

		[Token(Token = "0x60010EC")]
		[Address(RVA = "0x4DC5D8", Offset = "0x4DC5D8", VA = "0x4DC5D8")]
		public void Update()
		{
		}

		[Token(Token = "0x60010ED")]
		[Address(RVA = "0x4DC5E4", Offset = "0x4DC5E4", VA = "0x4DC5E4", Slot = "6")]
		public override void Draw(Camera camera)
		{
		}

		[Token(Token = "0x60010EE")]
		[Address(RVA = "0x4DCEC0", Offset = "0x4DCEC0", VA = "0x4DCEC0")]
		public void RegisterLightHit(Vector3 worldPoint)
		{
		}

		[Token(Token = "0x60010EF")]
		[Address(RVA = "0x4DD154", Offset = "0x4DD154", VA = "0x4DD154")]
		public LightClusterAudienceGroup()
		{
		}
	}
	[Token(Token = "0x200020C")]
	[AttributeAttribute(Name = "ExecuteInEditMode", RVA = "0x241618", Offset = "0x241618")]
	public class LightingController : MonoBehaviour
	{
		[Token(Token = "0x4000B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float globalVerticalLightAngle1;

		[Token(Token = "0x4000B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float globalLightAngle1;

		[Token(Token = "0x4000B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float globalLightIntensity1;

		[Token(Token = "0x4000B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color globalLightColor1;

		[Token(Token = "0x60010F0")]
		[Address(RVA = "0x4DD190", Offset = "0x4DD190", VA = "0x4DD190")]
		private void Start()
		{
		}

		[Token(Token = "0x60010F1")]
		[Address(RVA = "0x4DD194", Offset = "0x4DD194", VA = "0x4DD194")]
		private void Initialize()
		{
		}

		[Token(Token = "0x60010F2")]
		[Address(RVA = "0x4DD3B4", Offset = "0x4DD3B4", VA = "0x4DD3B4")]
		public LightingController()
		{
		}
	}
	[Token(Token = "0x200020D")]
	public class MainMenuManager : ChildMenuManager
	{
		[Token(Token = "0x4000B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24701C", Offset = "0x24701C")]
		private HomeMenuManager <homeManager>k__BackingField;

		[Token(Token = "0x4000B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public GameObject settingsButton;

		[Token(Token = "0x4000B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform setHeightButton;

		[Token(Token = "0x4000B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float exitButtonTime;

		[Token(Token = "0x4000B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI requiredAreaText;

		[Token(Token = "0x4000B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public TextMeshProUGUI availableAreaText;

		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI turnDirectionText;

		[Token(Token = "0x4000B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public TextMeshProUGUI massMultiplierText;

		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextMeshProUGUI hookMultiplierText;

		[Token(Token = "0x4000B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public TextMeshProUGUI automaticMassAdjustmentText;

		[Token(Token = "0x4000B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TextMeshProUGUI controllerPositionText;

		[Token(Token = "0x4000B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public TextMeshProUGUI controllerOutlineText;

		[Token(Token = "0x4000B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public TextMeshProUGUI gloveSizeText;

		[Token(Token = "0x4000B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public TextMeshProUGUI hitEffectsText;

		[Token(Token = "0x4000B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ProgressRadialBehaviour exitProgressBar;

		[Token(Token = "0x4000B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public TextMeshProUGUI trackingLimitText;

		[Token(Token = "0x4000B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool exitButtonDown;

		[Token(Token = "0x4000B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		private bool exitButtonHeldDown;

		[Token(Token = "0x4000B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float exitButtonTimer;

		[Token(Token = "0x1700016F")]
		public HomeMenuManager homeManager
		{
			[Token(Token = "0x60010F3")]
			[Address(RVA = "0x4DD418", Offset = "0x4DD418", VA = "0x4DD418")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249B00", Offset = "0x249B00")]
			get
			{
				return null;
			}
			[Token(Token = "0x60010F4")]
			[Address(RVA = "0x4DD420", Offset = "0x4DD420", VA = "0x4DD420")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249B10", Offset = "0x249B10")]
			set
			{
			}
		}

		[Token(Token = "0x60010F5")]
		[Address(RVA = "0x4DD428", Offset = "0x4DD428", VA = "0x4DD428")]
		public void Start()
		{
		}

		[Token(Token = "0x60010F6")]
		[Address(RVA = "0x4DD4E4", Offset = "0x4DD4E4", VA = "0x4DD4E4")]
		public void LoadFightMenu()
		{
		}

		[Token(Token = "0x60010F7")]
		[Address(RVA = "0x4DD644", Offset = "0x4DD644", VA = "0x4DD644")]
		public void LoadExtraBattleMenu()
		{
		}

		[Token(Token = "0x60010F8")]
		[Address(RVA = "0x4DD7A4", Offset = "0x4DD7A4", VA = "0x4DD7A4")]
		public void InitializeHeavyBag()
		{
		}

		[Token(Token = "0x60010F9")]
		[Address(RVA = "0x4DD930", Offset = "0x4DD930", VA = "0x4DD930")]
		public void InitializeSpeedBag()
		{
		}

		[Token(Token = "0x60010FA")]
		[Address(RVA = "0x4DDAC0", Offset = "0x4DDAC0", VA = "0x4DDAC0")]
		public void InitializeBoxingDummy()
		{
		}

		[Token(Token = "0x60010FB")]
		[Address(RVA = "0x4DDC50", Offset = "0x4DDC50", VA = "0x4DDC50")]
		public void InitializeFocusBall()
		{
		}

		[Token(Token = "0x60010FC")]
		[Address(RVA = "0x4DDDDC", Offset = "0x4DDDDC", VA = "0x4DDDDC")]
		public void LoadSettings()
		{
		}

		[Token(Token = "0x60010FD")]
		[Address(RVA = "0x4DDF3C", Offset = "0x4DDF3C", VA = "0x4DDF3C")]
		public void LoadHeightCalibration()
		{
		}

		[Token(Token = "0x60010FE")]
		[Address(RVA = "0x4DE094", Offset = "0x4DE094", VA = "0x4DE094")]
		public void ExitGame()
		{
		}

		[Token(Token = "0x60010FF")]
		[Address(RVA = "0x4DE274", Offset = "0x4DE274", VA = "0x4DE274")]
		public void ExitGameUp()
		{
		}

		[Token(Token = "0x6001100")]
		[Address(RVA = "0x4DE280", Offset = "0x4DE280", VA = "0x4DE280")]
		private void Update()
		{
		}

		[Token(Token = "0x6001101")]
		[Address(RVA = "0x4DA4F4", Offset = "0x4DA4F4", VA = "0x4DA4F4")]
		public void UpdateStats()
		{
		}

		[Token(Token = "0x6001102")]
		[Address(RVA = "0x4DE4A4", Offset = "0x4DE4A4", VA = "0x4DE4A4")]
		public MainMenuManager()
		{
		}
	}
	[Token(Token = "0x200020E")]
	public class MenuManager : MonoBehaviour
	{
		[Token(Token = "0x20002FA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24193C", Offset = "0x24193C")]
		private sealed class <FadeMenuIn>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x40010BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private object <>2__current;

			[Token(Token = "0x40010BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public CanvasGroup menu;

			[Token(Token = "0x170001D4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014CF")]
				[Address(RVA = "0x4DED74", Offset = "0x4DED74", VA = "0x4DED74", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014D1")]
				[Address(RVA = "0x4DEE04", Offset = "0x4DEE04", VA = "0x4DEE04", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014CC")]
			[Address(RVA = "0x4DEB68", Offset = "0x4DEB68", VA = "0x4DEB68")]
			[DebuggerHidden]
			public <FadeMenuIn>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x60014CD")]
			[Address(RVA = "0x4DEC14", Offset = "0x4DEC14", VA = "0x4DEC14", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014CE")]
			[Address(RVA = "0x4DEC18", Offset = "0x4DEC18", VA = "0x4DEC18", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014D0")]
			[Address(RVA = "0x4DED7C", Offset = "0x4DED7C", VA = "0x4DED7C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002FB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24194C", Offset = "0x24194C")]
		private sealed class <FadeMenuOut>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x40010C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private object <>2__current;

			[Token(Token = "0x40010C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public CanvasGroup menu;

			[Token(Token = "0x170001D6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014D5")]
				[Address(RVA = "0x4DEF9C", Offset = "0x4DEF9C", VA = "0x4DEF9C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014D7")]
				[Address(RVA = "0x4DF02C", Offset = "0x4DF02C", VA = "0x4DF02C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014D2")]
			[Address(RVA = "0x4DEB88", Offset = "0x4DEB88", VA = "0x4DEB88")]
			[DebuggerHidden]
			public <FadeMenuOut>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x60014D3")]
			[Address(RVA = "0x4DEE0C", Offset = "0x4DEE0C", VA = "0x4DEE0C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014D4")]
			[Address(RVA = "0x4DEE10", Offset = "0x4DEE10", VA = "0x4DEE10", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014D6")]
			[Address(RVA = "0x4DEFA4", Offset = "0x4DEFA4", VA = "0x4DEFA4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float transitionTime;

		[Token(Token = "0x4000B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		protected static MenuManager instance;

		[Token(Token = "0x17000170")]
		public static PlayerUISelector lastHand
		{
			[Token(Token = "0x6001103")]
			[Address(RVA = "0x4DE4B4", Offset = "0x4DE4B4", VA = "0x4DE4B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001104")]
		[Address(RVA = "0x4DE540", Offset = "0x4DE540", VA = "0x4DE540")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x6001105")]
		[Address(RVA = "0x4CC68C", Offset = "0x4CC68C", VA = "0x4CC68C")]
		public static void ButtonPressFeedback(bool deactivatePointer = true)
		{
		}

		[Token(Token = "0x6001106")]
		[Address(RVA = "0x4DE5D0", Offset = "0x4DE5D0", VA = "0x4DE5D0")]
		public static void PlayUISound()
		{
		}

		[Token(Token = "0x6001107")]
		[Address(RVA = "0x4DE80C", Offset = "0x4DE80C", VA = "0x4DE80C")]
		public void LoadMenu(GameObject menuToLoad, [Optional] GameObject menuToUnload)
		{
		}

		[Token(Token = "0x6001108")]
		[Address(RVA = "0x4DEA50", Offset = "0x4DEA50", VA = "0x4DEA50")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x249B20", Offset = "0x249B20")]
		private IEnumerator FadeMenuIn(CanvasGroup menu)
		{
			return null;
		}

		[Token(Token = "0x6001109")]
		[Address(RVA = "0x4DEADC", Offset = "0x4DEADC", VA = "0x4DEADC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x249B98", Offset = "0x249B98")]
		private IEnumerator FadeMenuOut(CanvasGroup menu)
		{
			return null;
		}

		[Token(Token = "0x600110A")]
		[Address(RVA = "0x4DB024", Offset = "0x4DB024", VA = "0x4DB024")]
		public MenuManager()
		{
		}
	}
	[Token(Token = "0x200020F")]
	public class MonitorUIController : MonoBehaviour
	{
		[Token(Token = "0x4000B3F")]
		private const int charOffset = 48;

		[Token(Token = "0x4000B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Canvas canvas;

		[Token(Token = "0x4000B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Text minutesText;

		[Token(Token = "0x4000B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Text secondsText;

		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text onRoundText;

		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Text totalRoundsText;

		[Token(Token = "0x4000B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float timer;

		[Token(Token = "0x4000B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool countdown;

		[Token(Token = "0x4000B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int storedMinutes;

		[Token(Token = "0x4000B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int storedSeconds;

		[Token(Token = "0x4000B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool registeredEventInAwake;

		[Token(Token = "0x4000B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool countUp;

		[Token(Token = "0x600110C")]
		[Address(RVA = "0x4DF034", Offset = "0x4DF034", VA = "0x4DF034")]
		private void Awake()
		{
		}

		[Token(Token = "0x600110D")]
		[Address(RVA = "0x4DF0C8", Offset = "0x4DF0C8", VA = "0x4DF0C8")]
		private void Start()
		{
		}

		[Token(Token = "0x600110E")]
		[Address(RVA = "0x4DF294", Offset = "0x4DF294", VA = "0x4DF294")]
		private void Update()
		{
		}

		[Token(Token = "0x600110F")]
		[Address(RVA = "0x4DF304", Offset = "0x4DF304", VA = "0x4DF304")]
		public void UpdateTimeValue()
		{
		}

		[Token(Token = "0x6001110")]
		[Address(RVA = "0x4DFA14", Offset = "0x4DFA14", VA = "0x4DFA14")]
		public void TimerUpdate(bool startCounting, bool isRound, float duration, int onRound, int numberOfRounds)
		{
		}

		[Token(Token = "0x6001111")]
		[Address(RVA = "0x4DF44C", Offset = "0x4DF44C", VA = "0x4DF44C")]
		private static string IntToString(int intVal, bool pad = false)
		{
			return null;
		}

		[Token(Token = "0x6001112")]
		[Address(RVA = "0x4DFAE4", Offset = "0x4DFAE4", VA = "0x4DFAE4")]
		public MonitorUIController()
		{
		}
	}
	[Token(Token = "0x2000210")]
	public class OpponentInfoUI : MonoBehaviour
	{
		[Token(Token = "0x6001113")]
		[Address(RVA = "0x4DFAF8", Offset = "0x4DFAF8", VA = "0x4DFAF8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001114")]
		[Address(RVA = "0x4DFAFC", Offset = "0x4DFAFC", VA = "0x4DFAFC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001115")]
		[Address(RVA = "0x4DFB00", Offset = "0x4DFB00", VA = "0x4DFB00")]
		public OpponentInfoUI()
		{
		}
	}
	[Token(Token = "0x2000211")]
	public class ParticleManager : MonoBehaviour
	{
		[Token(Token = "0x4000B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static ParticleManager instance;

		[Token(Token = "0x4000B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public GameObject sweatPrefab;

		[Token(Token = "0x4000B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<ParticleSystem> pooledSweatObjects;

		[Token(Token = "0x4000B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int pooledSweatAmount;

		[Token(Token = "0x4000B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject bloodPrefab;

		[Token(Token = "0x4000B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private List<ParticleSystem> pooledBloodObjects;

		[Token(Token = "0x4000B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int pooledBloodAmount;

		[Token(Token = "0x4000B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public GameObject dustPrefab;

		[Token(Token = "0x4000B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<ParticleSystem> pooledDustObjects;

		[Token(Token = "0x4000B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int pooledDustAmount;

		[Token(Token = "0x4000B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int allowDustEffect;

		[Token(Token = "0x6001116")]
		[Address(RVA = "0x4DFB08", Offset = "0x4DFB08", VA = "0x4DFB08")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001117")]
		[Address(RVA = "0x4DFC58", Offset = "0x4DFC58", VA = "0x4DFC58")]
		public static void PlaySweatAtPoint(Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x6001118")]
		[Address(RVA = "0x4E00D0", Offset = "0x4E00D0", VA = "0x4E00D0")]
		public static void PlayBloodAtPoint(Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x6001119")]
		[Address(RVA = "0x4D22E0", Offset = "0x4D22E0", VA = "0x4D22E0")]
		public static void PlayDustAtPoint(Vector3 position, Quaternion rotation, float intensity, Transform parent, float damage = -1f)
		{
		}

		[Token(Token = "0x600111A")]
		[Address(RVA = "0x4E0D10", Offset = "0x4E0D10", VA = "0x4E0D10")]
		public static void SetDustEffect(int value)
		{
		}

		[Token(Token = "0x600111B")]
		[Address(RVA = "0x4DFD68", Offset = "0x4DFD68", VA = "0x4DFD68")]
		public void GOPlaySweatAtPoint(Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x600111C")]
		[Address(RVA = "0x4E01E0", Offset = "0x4E01E0", VA = "0x4E01E0")]
		public void GOPlayBloodAtPoint(Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x600111D")]
		[Address(RVA = "0x4E0548", Offset = "0x4E0548", VA = "0x4E0548")]
		public void GOPlayDustAtPoint(Vector3 position, Quaternion rotation, float intensity, Transform parent, float damage = -1f)
		{
		}

		[Token(Token = "0x600111E")]
		[Address(RVA = "0x4E0DE4", Offset = "0x4E0DE4", VA = "0x4E0DE4")]
		public ParticleManager()
		{
		}
	}
	[Token(Token = "0x2000212")]
	public class PlatformSwitcher : MonoBehaviour
	{
		[Token(Token = "0x4000B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public GameObject steamObject;

		[Token(Token = "0x4000B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject oculusObject;

		[Token(Token = "0x600111F")]
		[Address(RVA = "0x4E0DF4", Offset = "0x4E0DF4", VA = "0x4E0DF4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001120")]
		[Address(RVA = "0x4E0E4C", Offset = "0x4E0E4C", VA = "0x4E0E4C")]
		public PlatformSwitcher()
		{
		}
	}
	[Token(Token = "0x2000213")]
	public class PlayAreaController : MonoBehaviour
	{
		[Token(Token = "0x20002FC")]
		public delegate void PlayAreaUpdateEvent();

		[Token(Token = "0x20002FD")]
		public enum PlayAreaEdge
		{
			[Token(Token = "0x40010C3")]
			Center,
			[Token(Token = "0x40010C4")]
			Left,
			[Token(Token = "0x40010C5")]
			Right,
			[Token(Token = "0x40010C6")]
			Front,
			[Token(Token = "0x40010C7")]
			Back
		}

		[Token(Token = "0x20002FE")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24195C", Offset = "0x24195C")]
		private sealed class <UpdateBounds>d__82 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x40010C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private object <>2__current;

			[Token(Token = "0x40010CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public PlayAreaController <>4__this;

			[Token(Token = "0x170001D8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014DF")]
				[Address(RVA = "0x4E4978", Offset = "0x4E4978", VA = "0x4E4978", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014E1")]
				[Address(RVA = "0x4E4A08", Offset = "0x4E4A08", VA = "0x4E4A08", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014DC")]
			[Address(RVA = "0x4E39CC", Offset = "0x4E39CC", VA = "0x4E39CC")]
			[DebuggerHidden]
			public <UpdateBounds>d__82(int <>1__state)
			{
			}

			[Token(Token = "0x60014DD")]
			[Address(RVA = "0x4E48C0", Offset = "0x4E48C0", VA = "0x4E48C0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014DE")]
			[Address(RVA = "0x4E48C4", Offset = "0x4E48C4", VA = "0x4E48C4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014E0")]
			[Address(RVA = "0x4E4980", Offset = "0x4E4980", VA = "0x4E4980", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static PlayAreaUpdateEvent OnPlayAreaUpdate;

		[Token(Token = "0x4000B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Material material;

		[Token(Token = "0x4000B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float borderThickness;

		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float targetHeight;

		[Token(Token = "0x4000B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool playAreaTurned;

		[Token(Token = "0x4000B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Transform playerParent;

		[Token(Token = "0x4000B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool loadedHeightRatio;

		[Token(Token = "0x4000B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float heightRatio;

		[Token(Token = "0x4000B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float playAreaScale;

		[Token(Token = "0x4000B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float maxHeightRatio;

		[Token(Token = "0x4000B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float minHeightRatio;

		[Token(Token = "0x4000B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static PlayAreaController instance;

		[Token(Token = "0x4000B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24702C", Offset = "0x24702C")]
		private float <FixedSafeDepth>k__BackingField;

		[Token(Token = "0x4000B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24703C", Offset = "0x24703C")]
		private float <FixedSafeWidth>k__BackingField;

		[Token(Token = "0x4000B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24704C", Offset = "0x24704C")]
		private float <TrueDepth>k__BackingField;

		[Token(Token = "0x4000B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24705C", Offset = "0x24705C")]
		private float <TrueWidth>k__BackingField;

		[Token(Token = "0x4000B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24706C", Offset = "0x24706C")]
		private float <SafeDepth>k__BackingField;

		[Token(Token = "0x4000B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24707C", Offset = "0x24707C")]
		private float <SafeWidth>k__BackingField;

		[Token(Token = "0x4000B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Transform headCamera;

		[Token(Token = "0x4000B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float maxSafeZone;

		[Token(Token = "0x4000B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float minSafeZone;

		[Token(Token = "0x4000B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public PlayerController player;

		[Token(Token = "0x4000B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private bool movePlayer;

		[Token(Token = "0x4000B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private PlayAreaEdge targetEdgeX;

		[Token(Token = "0x4000B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private PlayAreaEdge targetEdgeY;

		[Token(Token = "0x4000B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 targetPosition;

		[Token(Token = "0x4000B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 targetFacing;

		[Token(Token = "0x4000B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool gotSize;

		[Token(Token = "0x4000B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static float minComfortableDepth;

		[Token(Token = "0x4000B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static float minComfortableWidth;

		[Token(Token = "0x17000171")]
		public static float depth
		{
			[Token(Token = "0x6001121")]
			[Address(RVA = "0x4D2914", Offset = "0x4D2914", VA = "0x4D2914")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000172")]
		public static float width
		{
			[Token(Token = "0x6001122")]
			[Address(RVA = "0x4D2A48", Offset = "0x4D2A48", VA = "0x4D2A48")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000173")]
		public static float scale
		{
			[Token(Token = "0x6001123")]
			[Address(RVA = "0x4E0E54", Offset = "0x4E0E54", VA = "0x4E0E54")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000174")]
		public float FixedSafeDepth
		{
			[Token(Token = "0x6001124")]
			[Address(RVA = "0x4E0F84", Offset = "0x4E0F84", VA = "0x4E0F84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249C10", Offset = "0x249C10")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001125")]
			[Address(RVA = "0x4E0F8C", Offset = "0x4E0F8C", VA = "0x4E0F8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249C20", Offset = "0x249C20")]
			set
			{
			}
		}

		[Token(Token = "0x17000175")]
		public float FixedSafeWidth
		{
			[Token(Token = "0x6001126")]
			[Address(RVA = "0x4E0F94", Offset = "0x4E0F94", VA = "0x4E0F94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249C30", Offset = "0x249C30")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001127")]
			[Address(RVA = "0x4E0F9C", Offset = "0x4E0F9C", VA = "0x4E0F9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249C40", Offset = "0x249C40")]
			set
			{
			}
		}

		[Token(Token = "0x17000176")]
		public float TrueDepth
		{
			[Token(Token = "0x6001128")]
			[Address(RVA = "0x4E0FA4", Offset = "0x4E0FA4", VA = "0x4E0FA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249C50", Offset = "0x249C50")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001129")]
			[Address(RVA = "0x4E0FAC", Offset = "0x4E0FAC", VA = "0x4E0FAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249C60", Offset = "0x249C60")]
			set
			{
			}
		}

		[Token(Token = "0x17000177")]
		public float TrueWidth
		{
			[Token(Token = "0x600112A")]
			[Address(RVA = "0x4E0FB4", Offset = "0x4E0FB4", VA = "0x4E0FB4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249C70", Offset = "0x249C70")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600112B")]
			[Address(RVA = "0x4E0FBC", Offset = "0x4E0FBC", VA = "0x4E0FBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249C80", Offset = "0x249C80")]
			set
			{
			}
		}

		[Token(Token = "0x17000178")]
		public float SafeDepth
		{
			[Token(Token = "0x600112C")]
			[Address(RVA = "0x4E0FC4", Offset = "0x4E0FC4", VA = "0x4E0FC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249C90", Offset = "0x249C90")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600112D")]
			[Address(RVA = "0x4E0FCC", Offset = "0x4E0FCC", VA = "0x4E0FCC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249CA0", Offset = "0x249CA0")]
			set
			{
			}
		}

		[Token(Token = "0x17000179")]
		public float SafeWidth
		{
			[Token(Token = "0x600112E")]
			[Address(RVA = "0x4E0FD4", Offset = "0x4E0FD4", VA = "0x4E0FD4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249CB0", Offset = "0x249CB0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600112F")]
			[Address(RVA = "0x4E0FDC", Offset = "0x4E0FDC", VA = "0x4E0FDC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249CC0", Offset = "0x249CC0")]
			set
			{
			}
		}

		[Token(Token = "0x1700017A")]
		public static bool Initialized
		{
			[Token(Token = "0x6001130")]
			[Address(RVA = "0x4E0FE4", Offset = "0x4E0FE4", VA = "0x4E0FE4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700017B")]
		public bool GotSize
		{
			[Token(Token = "0x6001131")]
			[Address(RVA = "0x4E1120", Offset = "0x4E1120", VA = "0x4E1120")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001132")]
		[Address(RVA = "0x4E1128", Offset = "0x4E1128", VA = "0x4E1128")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001133")]
		[Address(RVA = "0x4E11B8", Offset = "0x4E11B8", VA = "0x4E11B8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001134")]
		[Address(RVA = "0x4E16B0", Offset = "0x4E16B0", VA = "0x4E16B0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001135")]
		[Address(RVA = "0x4E18F0", Offset = "0x4E18F0", VA = "0x4E18F0")]
		public void HandleRecenterRequest()
		{
		}

		[Token(Token = "0x6001136")]
		[Address(RVA = "0x4E1CE4", Offset = "0x4E1CE4", VA = "0x4E1CE4")]
		public void HandleResizeRequest()
		{
		}

		[Token(Token = "0x6001137")]
		[Address(RVA = "0x4E1478", Offset = "0x4E1478", VA = "0x4E1478")]
		public void CalculateRotation()
		{
		}

		[Token(Token = "0x6001138")]
		[Address(RVA = "0x4E15A8", Offset = "0x4E15A8", VA = "0x4E15A8")]
		public void CalculateSize()
		{
		}

		[Token(Token = "0x6001139")]
		[Address(RVA = "0x4E2238", Offset = "0x4E2238", VA = "0x4E2238")]
		private void Update()
		{
		}

		[Token(Token = "0x600113A")]
		[Address(RVA = "0x4E1CE8", Offset = "0x4E1CE8", VA = "0x4E1CE8")]
		private void SetSpaceRotation(int newRotation)
		{
		}

		[Token(Token = "0x600113B")]
		[Address(RVA = "0x4E28B0", Offset = "0x4E28B0", VA = "0x4E28B0")]
		private void RescalePlayer()
		{
		}

		[Token(Token = "0x600113C")]
		[Address(RVA = "0x4E2934", Offset = "0x4E2934", VA = "0x4E2934")]
		public static void SetPlayerScaleWithCurrentHeight()
		{
		}

		[Token(Token = "0x600113D")]
		[Address(RVA = "0x4E2A9C", Offset = "0x4E2A9C", VA = "0x4E2A9C")]
		private void SetPlayerScale(float newHeightRatio)
		{
		}

		[Token(Token = "0x600113E")]
		[Address(RVA = "0x4E1348", Offset = "0x4E1348", VA = "0x4E1348")]
		private float GetHeightRatio()
		{
			return default(float);
		}

		[Token(Token = "0x600113F")]
		[Address(RVA = "0x4E13F8", Offset = "0x4E13F8", VA = "0x4E13F8")]
		private void CalculateScale()
		{
		}

		[Token(Token = "0x6001140")]
		[Address(RVA = "0x4E2B5C", Offset = "0x4E2B5C", VA = "0x4E2B5C")]
		public static void SendPlayerToPosition(Vector3 position, PlayAreaEdge edgeY = PlayAreaEdge.Center, PlayAreaEdge edgeX = PlayAreaEdge.Center)
		{
		}

		[Token(Token = "0x6001141")]
		[Address(RVA = "0x4D2794", Offset = "0x4D2794", VA = "0x4D2794")]
		public static void SendPlayerToPosition(Vector3 position, Vector3 facing, PlayAreaEdge edgeY = PlayAreaEdge.Center, PlayAreaEdge edgeX = PlayAreaEdge.Center)
		{
		}

		[Token(Token = "0x6001142")]
		[Address(RVA = "0x4E2D2C", Offset = "0x4E2D2C", VA = "0x4E2D2C")]
		public void SendPlayerToPositionInstance(Vector3 position, Vector3 facing, PlayAreaEdge edgeY = PlayAreaEdge.Center, PlayAreaEdge edgeX = PlayAreaEdge.Center)
		{
		}

		[Token(Token = "0x6001143")]
		[Address(RVA = "0x4E226C", Offset = "0x4E226C", VA = "0x4E226C")]
		private void SendPlayerToPositionNow()
		{
		}

		[Token(Token = "0x6001144")]
		[Address(RVA = "0x4E2E6C", Offset = "0x4E2E6C", VA = "0x4E2E6C")]
		public static Vector3 GetEdgePosition(PlayAreaEdge edgeY = PlayAreaEdge.Center, PlayAreaEdge edgeX = PlayAreaEdge.Center, float extraDistanceY = 0f, float extraDistanceX = 0f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001145")]
		[Address(RVA = "0x4E2FF0", Offset = "0x4E2FF0", VA = "0x4E2FF0")]
		public Vector3 GetEdgePositionInstance(PlayAreaEdge edgeY = PlayAreaEdge.Center, PlayAreaEdge edgeX = PlayAreaEdge.Center, float extraDistanceY = 0f, float extraDistanceX = 0f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001146")]
		[Address(RVA = "0x4E33F0", Offset = "0x4E33F0", VA = "0x4E33F0")]
		public static Vector3 GetPosition(PlayAreaEdge edgeY = PlayAreaEdge.Center, PlayAreaEdge edgeX = PlayAreaEdge.Center)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001147")]
		[Address(RVA = "0x4E3558", Offset = "0x4E3558", VA = "0x4E3558")]
		public Vector3 GetPositionInstance(PlayAreaEdge edgeY = PlayAreaEdge.Center, PlayAreaEdge edgeX = PlayAreaEdge.Center)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001148")]
		[Address(RVA = "0x4E3940", Offset = "0x4E3940", VA = "0x4E3940")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x249CD0", Offset = "0x249CD0")]
		private IEnumerator UpdateBounds()
		{
			return null;
		}

		[Token(Token = "0x6001149")]
		[Address(RVA = "0x4E1DEC", Offset = "0x4E1DEC", VA = "0x4E1DEC")]
		public void SetPlayAreaSize(Vector3 playAreaSize, Vector3 centerOffset)
		{
		}

		[Token(Token = "0x600114A")]
		[Address(RVA = "0x4E39EC", Offset = "0x4E39EC", VA = "0x4E39EC")]
		private void BuildMesh(float width, float depth)
		{
		}

		[Token(Token = "0x600114B")]
		[Address(RVA = "0x4D2648", Offset = "0x4D2648", VA = "0x4D2648")]
		public static bool IsCenterMode()
		{
			return default(bool);
		}

		[Token(Token = "0x600114C")]
		[Address(RVA = "0x4E47F8", Offset = "0x4E47F8", VA = "0x4E47F8")]
		public PlayAreaController()
		{
		}
	}
	[Token(Token = "0x2000214")]
	public class PlayerBlockbox : Blockbox
	{
		[Token(Token = "0x4000B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public IHapticsSystem.BodyArea area;

		[Token(Token = "0x4000B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private PlayerController player;

		[Token(Token = "0x600114E")]
		[Address(RVA = "0x4E4A58", Offset = "0x4E4A58", VA = "0x4E4A58", Slot = "4")]
		public override void Start()
		{
		}

		[Token(Token = "0x600114F")]
		[Address(RVA = "0x4E4AE0", Offset = "0x4E4AE0", VA = "0x4E4AE0", Slot = "7")]
		public override void ReceiveForce(float force, bool playVisualEffect = false)
		{
		}

		[Token(Token = "0x6001150")]
		[Address(RVA = "0x4E4BC0", Offset = "0x4E4BC0", VA = "0x4E4BC0", Slot = "12")]
		public override bool IsBlocking()
		{
			return default(bool);
		}

		[Token(Token = "0x6001151")]
		[Address(RVA = "0x4E4BC8", Offset = "0x4E4BC8", VA = "0x4E4BC8")]
		public PlayerBlockbox()
		{
		}
	}
	[Token(Token = "0x2000215")]
	public class PlayerController : BoxerController, IFixedUpdateable
	{
		[Token(Token = "0x20002FF")]
		public enum DriftProtectionMode
		{
			[Token(Token = "0x40010CC")]
			Off,
			[Token(Token = "0x40010CD")]
			SimulateWrappedWrist,
			[Token(Token = "0x40010CE")]
			On
		}

		[Token(Token = "0x4000B78")]
		private const float defaultCalibrationLevel = 1500f;

		[Token(Token = "0x4000B79")]
		private const int punchesNeededToResetForceCeiling = 10;

		[Token(Token = "0x4000B7A")]
		private const int punchesNeededToIncreaseMultiplier = 5;

		[Token(Token = "0x4000B7B")]
		public const float maxVelocityForCalibration = 10f;

		[Token(Token = "0x4000B7C")]
		public const float maxHookVelocityForCalibration = 14f;

		[Token(Token = "0x4000B7D")]
		private const float minVelocityForCalibration = 3f;

		[Token(Token = "0x4000B7E")]
		private const float maxAutomaticMultiplier = 2.4f;

		[Token(Token = "0x4000B7F")]
		private const float minAutomaticMultiplier = 1f;

		[Token(Token = "0x4000B80")]
		private const float forearmLength = 0.28f;

		[Token(Token = "0x4000B81")]
		private const float upperArmLength = 0.28f;

		[Token(Token = "0x4000B82")]
		private const float maxShoulderHeight = 0.1f;

		[Token(Token = "0x4000B83")]
		private const float smallGloveScale = 1f;

		[Token(Token = "0x4000B84")]
		private const float mediumGloveScale = 1.1f;

		[Token(Token = "0x4000B85")]
		private const float largeGloveScale = 1.2f;

		[Token(Token = "0x4000B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static PlayerController instance;

		[Token(Token = "0x4000B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public GameObject exitMenu;

		[Token(Token = "0x4000B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public AudioClip[] headHitSounds;

		[Token(Token = "0x4000B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public AudioClip[] gruntSounds;

		[Token(Token = "0x4000B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public AudioClip[] knockdownSounds;

		[Token(Token = "0x4000B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public AudioClip[] uiSounds;

		[Token(Token = "0x4000B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24708C", Offset = "0x24708C")]
		private bool <automaticallyCalibratePunchForce>k__BackingField;

		[Token(Token = "0x4000B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float maximumRecordedForceForCalibration;

		[Token(Token = "0x4000B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float maximumRecordedTemporaryForce;

		[Token(Token = "0x4000B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float calibrationForce;

		[Token(Token = "0x4000B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private float temporaryCalibrationForce;

		[Token(Token = "0x4000B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private int calibrationPunchCount;

		[Token(Token = "0x4000B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private int temporaryPunchCount;

		[Token(Token = "0x4000B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private int punchCountThisRound;

		[Token(Token = "0x4000B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private float maximumRecordedHookForceForCalibration;

		[Token(Token = "0x4000B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private float maximumRecordedTemporaryHookForce;

		[Token(Token = "0x4000B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private float calibrationHookForce;

		[Token(Token = "0x4000B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private float temporaryCalibrationHookForce;

		[Token(Token = "0x4000B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private int calibrationHookCount;

		[Token(Token = "0x4000B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private int temporaryHookCount;

		[Token(Token = "0x4000B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private int hookCountThisRound;

		[Token(Token = "0x4000B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private bool falling;

		[Token(Token = "0x4000B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private float hitTheMatTimer;

		[Token(Token = "0x4000B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24709C", Offset = "0x24709C")]
		private float <effectiveMassModifier>k__BackingField;

		[Token(Token = "0x4000B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2470AC", Offset = "0x2470AC")]
		private float <effectiveHookMassModifier>k__BackingField;

		[Token(Token = "0x4000B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2470BC", Offset = "0x2470BC")]
		private bool <centerMode>k__BackingField;

		[Token(Token = "0x4000BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x131")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2470CC", Offset = "0x2470CC")]
		private bool <openLeftFront>k__BackingField;

		[Token(Token = "0x4000BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x132")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2470DC", Offset = "0x2470DC")]
		private bool <openRightFront>k__BackingField;

		[Token(Token = "0x4000BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x133")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2470EC", Offset = "0x2470EC")]
		private bool <openLeftSide>k__BackingField;

		[Token(Token = "0x4000BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2470FC", Offset = "0x2470FC")]
		private bool <openRightSide>k__BackingField;

		[Token(Token = "0x4000BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x135")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24710C", Offset = "0x24710C")]
		private bool <openLeftBottom>k__BackingField;

		[Token(Token = "0x4000BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x136")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24711C", Offset = "0x24711C")]
		private bool <openRightBottom>k__BackingField;

		[Token(Token = "0x4000BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x137")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24712C", Offset = "0x24712C")]
		private bool <openLeftBody>k__BackingField;

		[Token(Token = "0x4000BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24713C", Offset = "0x24713C")]
		private bool <openRightBody>k__BackingField;

		[Token(Token = "0x4000BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24714C", Offset = "0x24714C")]
		private int <blockJawLeftCount>k__BackingField;

		[Token(Token = "0x4000BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24715C", Offset = "0x24715C")]
		private int <blockJawRightCount>k__BackingField;

		[Token(Token = "0x4000BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24716C", Offset = "0x24716C")]
		private int <blockTempleLeftCount>k__BackingField;

		[Token(Token = "0x4000BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24717C", Offset = "0x24717C")]
		private int <blockTempleRightCount>k__BackingField;

		[Token(Token = "0x4000BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24718C", Offset = "0x24718C")]
		private int <blockJawBottomCount>k__BackingField;

		[Token(Token = "0x4000BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24719C", Offset = "0x24719C")]
		private int <blockJawFrontCount>k__BackingField;

		[Token(Token = "0x4000BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2471AC", Offset = "0x2471AC")]
		private int <blockFaceFrontCount>k__BackingField;

		[Token(Token = "0x4000BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2471BC", Offset = "0x2471BC")]
		private int <blockHeadLeftCount>k__BackingField;

		[Token(Token = "0x4000BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2471CC", Offset = "0x2471CC")]
		private int <blockHeadRightCount>k__BackingField;

		[Token(Token = "0x4000BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2471DC", Offset = "0x2471DC")]
		private int <blockFrontCount>k__BackingField;

		[Token(Token = "0x4000BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2471EC", Offset = "0x2471EC")]
		private int <blockSideCount>k__BackingField;

		[Token(Token = "0x4000BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public GameObject shortsModel;

		[Token(Token = "0x4000BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		public GameObject headgearModel;

		[Token(Token = "0x4000BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public PlayerHandTracker LeftHandTarget;

		[Token(Token = "0x4000BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		public PlayerHandTracker RightHandTarget;

		[Token(Token = "0x4000BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public Transform forearmLeft;

		[Token(Token = "0x4000BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		public Transform forearmRight;

		[Token(Token = "0x4000BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public Transform upperArmLeft;

		[Token(Token = "0x4000BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		public Transform upperArmLeftTarget;

		[Token(Token = "0x4000BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public Transform upperArmRight;

		[Token(Token = "0x4000BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		public Transform upperArmRightTarget;

		[Token(Token = "0x4000BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public CapsuleCollider upperArmLeftCollider;

		[Token(Token = "0x4000BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		public CapsuleCollider upperArmRightCollider;

		[Token(Token = "0x4000BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public Transform LeftHandIKTarget;

		[Token(Token = "0x4000BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		public Transform RightHandIKTarget;

		[Token(Token = "0x4000BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public GameObject LeftHandGloveModel;

		[Token(Token = "0x4000BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		public GameObject RightHandGloveModel;

		[Token(Token = "0x4000BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public Transform leftHandScaler;

		[Token(Token = "0x4000BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		public Transform leftHandColliderScaler;

		[Token(Token = "0x4000BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public Transform rightHandScaler;

		[Token(Token = "0x4000BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		public Transform rightHandColliderScaler;

		[Token(Token = "0x4000BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2471FC", Offset = "0x2471FC")]
		private BoxerIK <ik>k__BackingField;

		[Token(Token = "0x4000BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		public PlayerHead headHitbox;

		[Token(Token = "0x4000BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public Transform headTarget;

		[Token(Token = "0x4000BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		public CameraController cameraEffects;

		[Token(Token = "0x4000BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private bool doDizzyHaptics;

		[Token(Token = "0x4000BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		private float dizzyHapticsTimer;

		[Token(Token = "0x4000BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24720C", Offset = "0x24720C")]
		private PlayerFist <leftFist>k__BackingField;

		[Token(Token = "0x4000BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24721C", Offset = "0x24721C")]
		private PlayerFist <rightFist>k__BackingField;

		[Token(Token = "0x4000BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private AudioSource hitAudioSource;

		[Token(Token = "0x4000BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		private AudioSource gruntAudioSource;

		[Token(Token = "0x4000BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private float blinkDelayTimer;

		[Token(Token = "0x4000BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static float blinkTime;

		[Token(Token = "0x4000BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		private bool blinkActivated;

		[Token(Token = "0x4000BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E5")]
		private bool blinking;

		[Token(Token = "0x4000BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24722C", Offset = "0x24722C")]
		private float <gloveScale>k__BackingField;

		[Token(Token = "0x4000BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		private PlayerCorner playerCornerObject;

		[Token(Token = "0x4000BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private float dizzyEffectMax;

		[Token(Token = "0x4000BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
		private float dizzyEffectsLevel;

		[Token(Token = "0x4000BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24723C", Offset = "0x24723C")]
		private float <dizzyEffectsTarget>k__BackingField;

		[Token(Token = "0x4000BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24724C", Offset = "0x24724C")]
		private DriftProtectionMode <driftProtection>k__BackingField;

		[Token(Token = "0x1700017C")]
		public bool automaticallyCalibratePunchForce
		{
			[Token(Token = "0x6001152")]
			[Address(RVA = "0x4E4BD0", Offset = "0x4E4BD0", VA = "0x4E4BD0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249D48", Offset = "0x249D48")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001153")]
			[Address(RVA = "0x4E4BD8", Offset = "0x4E4BD8", VA = "0x4E4BD8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249D58", Offset = "0x249D58")]
			set
			{
			}
		}

		[Token(Token = "0x1700017D")]
		public float effectiveMassModifier
		{
			[Token(Token = "0x6001154")]
			[Address(RVA = "0x4E4BE0", Offset = "0x4E4BE0", VA = "0x4E4BE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249D68", Offset = "0x249D68")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001155")]
			[Address(RVA = "0x4E4BE8", Offset = "0x4E4BE8", VA = "0x4E4BE8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249D78", Offset = "0x249D78")]
			set
			{
			}
		}

		[Token(Token = "0x1700017E")]
		public float effectiveHookMassModifier
		{
			[Token(Token = "0x6001156")]
			[Address(RVA = "0x4E4BF0", Offset = "0x4E4BF0", VA = "0x4E4BF0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249D88", Offset = "0x249D88")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001157")]
			[Address(RVA = "0x4E4BF8", Offset = "0x4E4BF8", VA = "0x4E4BF8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249D98", Offset = "0x249D98")]
			set
			{
			}
		}

		[Token(Token = "0x1700017F")]
		public bool centerMode
		{
			[Token(Token = "0x6001158")]
			[Address(RVA = "0x4E4C00", Offset = "0x4E4C00", VA = "0x4E4C00")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249DA8", Offset = "0x249DA8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001159")]
			[Address(RVA = "0x4E4C08", Offset = "0x4E4C08", VA = "0x4E4C08")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249DB8", Offset = "0x249DB8")]
			set
			{
			}
		}

		[Token(Token = "0x17000180")]
		public bool openLeftFront
		{
			[Token(Token = "0x600115A")]
			[Address(RVA = "0x4E4C10", Offset = "0x4E4C10", VA = "0x4E4C10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249DC8", Offset = "0x249DC8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600115B")]
			[Address(RVA = "0x4E4C18", Offset = "0x4E4C18", VA = "0x4E4C18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249DD8", Offset = "0x249DD8")]
			set
			{
			}
		}

		[Token(Token = "0x17000181")]
		public bool openRightFront
		{
			[Token(Token = "0x600115C")]
			[Address(RVA = "0x4E4C20", Offset = "0x4E4C20", VA = "0x4E4C20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249DE8", Offset = "0x249DE8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600115D")]
			[Address(RVA = "0x4E4C28", Offset = "0x4E4C28", VA = "0x4E4C28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249DF8", Offset = "0x249DF8")]
			set
			{
			}
		}

		[Token(Token = "0x17000182")]
		public bool openLeftSide
		{
			[Token(Token = "0x600115E")]
			[Address(RVA = "0x4E4C30", Offset = "0x4E4C30", VA = "0x4E4C30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249E08", Offset = "0x249E08")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600115F")]
			[Address(RVA = "0x4E4C38", Offset = "0x4E4C38", VA = "0x4E4C38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249E18", Offset = "0x249E18")]
			set
			{
			}
		}

		[Token(Token = "0x17000183")]
		public bool openRightSide
		{
			[Token(Token = "0x6001160")]
			[Address(RVA = "0x4E4C40", Offset = "0x4E4C40", VA = "0x4E4C40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249E28", Offset = "0x249E28")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001161")]
			[Address(RVA = "0x4E4C48", Offset = "0x4E4C48", VA = "0x4E4C48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249E38", Offset = "0x249E38")]
			set
			{
			}
		}

		[Token(Token = "0x17000184")]
		public bool openLeftBottom
		{
			[Token(Token = "0x6001162")]
			[Address(RVA = "0x4E4C50", Offset = "0x4E4C50", VA = "0x4E4C50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249E48", Offset = "0x249E48")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001163")]
			[Address(RVA = "0x4E4C58", Offset = "0x4E4C58", VA = "0x4E4C58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249E58", Offset = "0x249E58")]
			set
			{
			}
		}

		[Token(Token = "0x17000185")]
		public bool openRightBottom
		{
			[Token(Token = "0x6001164")]
			[Address(RVA = "0x4E4C60", Offset = "0x4E4C60", VA = "0x4E4C60")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249E68", Offset = "0x249E68")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001165")]
			[Address(RVA = "0x4E4C68", Offset = "0x4E4C68", VA = "0x4E4C68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249E78", Offset = "0x249E78")]
			set
			{
			}
		}

		[Token(Token = "0x17000186")]
		public bool openLeftBody
		{
			[Token(Token = "0x6001166")]
			[Address(RVA = "0x4E4C70", Offset = "0x4E4C70", VA = "0x4E4C70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249E88", Offset = "0x249E88")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001167")]
			[Address(RVA = "0x4E4C78", Offset = "0x4E4C78", VA = "0x4E4C78")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249E98", Offset = "0x249E98")]
			set
			{
			}
		}

		[Token(Token = "0x17000187")]
		public bool openRightBody
		{
			[Token(Token = "0x6001168")]
			[Address(RVA = "0x4E4C80", Offset = "0x4E4C80", VA = "0x4E4C80")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249EA8", Offset = "0x249EA8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001169")]
			[Address(RVA = "0x4E4C88", Offset = "0x4E4C88", VA = "0x4E4C88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249EB8", Offset = "0x249EB8")]
			set
			{
			}
		}

		[Token(Token = "0x17000188")]
		public int blockJawLeftCount
		{
			[Token(Token = "0x600116A")]
			[Address(RVA = "0x4E4C90", Offset = "0x4E4C90", VA = "0x4E4C90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249EC8", Offset = "0x249EC8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600116B")]
			[Address(RVA = "0x4E4C98", Offset = "0x4E4C98", VA = "0x4E4C98")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249ED8", Offset = "0x249ED8")]
			set
			{
			}
		}

		[Token(Token = "0x17000189")]
		public int blockJawRightCount
		{
			[Token(Token = "0x600116C")]
			[Address(RVA = "0x4E4CA0", Offset = "0x4E4CA0", VA = "0x4E4CA0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249EE8", Offset = "0x249EE8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600116D")]
			[Address(RVA = "0x4E4CA8", Offset = "0x4E4CA8", VA = "0x4E4CA8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249EF8", Offset = "0x249EF8")]
			set
			{
			}
		}

		[Token(Token = "0x1700018A")]
		public int blockTempleLeftCount
		{
			[Token(Token = "0x600116E")]
			[Address(RVA = "0x4E4CB0", Offset = "0x4E4CB0", VA = "0x4E4CB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249F08", Offset = "0x249F08")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600116F")]
			[Address(RVA = "0x4E4CB8", Offset = "0x4E4CB8", VA = "0x4E4CB8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249F18", Offset = "0x249F18")]
			set
			{
			}
		}

		[Token(Token = "0x1700018B")]
		public int blockTempleRightCount
		{
			[Token(Token = "0x6001170")]
			[Address(RVA = "0x4E4CC0", Offset = "0x4E4CC0", VA = "0x4E4CC0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249F28", Offset = "0x249F28")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001171")]
			[Address(RVA = "0x4E4CC8", Offset = "0x4E4CC8", VA = "0x4E4CC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249F38", Offset = "0x249F38")]
			set
			{
			}
		}

		[Token(Token = "0x1700018C")]
		public int blockJawBottomCount
		{
			[Token(Token = "0x6001172")]
			[Address(RVA = "0x4E4CD0", Offset = "0x4E4CD0", VA = "0x4E4CD0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249F48", Offset = "0x249F48")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001173")]
			[Address(RVA = "0x4E4CD8", Offset = "0x4E4CD8", VA = "0x4E4CD8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249F58", Offset = "0x249F58")]
			set
			{
			}
		}

		[Token(Token = "0x1700018D")]
		public int blockJawFrontCount
		{
			[Token(Token = "0x6001174")]
			[Address(RVA = "0x4E4CE0", Offset = "0x4E4CE0", VA = "0x4E4CE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249F68", Offset = "0x249F68")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001175")]
			[Address(RVA = "0x4E4CE8", Offset = "0x4E4CE8", VA = "0x4E4CE8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249F78", Offset = "0x249F78")]
			set
			{
			}
		}

		[Token(Token = "0x1700018E")]
		public int blockFaceFrontCount
		{
			[Token(Token = "0x6001176")]
			[Address(RVA = "0x4E4CF0", Offset = "0x4E4CF0", VA = "0x4E4CF0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249F88", Offset = "0x249F88")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001177")]
			[Address(RVA = "0x4E4CF8", Offset = "0x4E4CF8", VA = "0x4E4CF8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249F98", Offset = "0x249F98")]
			set
			{
			}
		}

		[Token(Token = "0x1700018F")]
		public int blockHeadLeftCount
		{
			[Token(Token = "0x6001178")]
			[Address(RVA = "0x4E4D00", Offset = "0x4E4D00", VA = "0x4E4D00")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249FA8", Offset = "0x249FA8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001179")]
			[Address(RVA = "0x4E4D08", Offset = "0x4E4D08", VA = "0x4E4D08")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249FB8", Offset = "0x249FB8")]
			set
			{
			}
		}

		[Token(Token = "0x17000190")]
		public int blockHeadRightCount
		{
			[Token(Token = "0x600117A")]
			[Address(RVA = "0x4E4D10", Offset = "0x4E4D10", VA = "0x4E4D10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249FC8", Offset = "0x249FC8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600117B")]
			[Address(RVA = "0x4E4D18", Offset = "0x4E4D18", VA = "0x4E4D18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249FD8", Offset = "0x249FD8")]
			set
			{
			}
		}

		[Token(Token = "0x17000191")]
		public int blockFrontCount
		{
			[Token(Token = "0x600117C")]
			[Address(RVA = "0x4E4D20", Offset = "0x4E4D20", VA = "0x4E4D20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249FE8", Offset = "0x249FE8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600117D")]
			[Address(RVA = "0x4E4D28", Offset = "0x4E4D28", VA = "0x4E4D28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x249FF8", Offset = "0x249FF8")]
			set
			{
			}
		}

		[Token(Token = "0x17000192")]
		public int blockSideCount
		{
			[Token(Token = "0x600117E")]
			[Address(RVA = "0x4E4D30", Offset = "0x4E4D30", VA = "0x4E4D30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A008", Offset = "0x24A008")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600117F")]
			[Address(RVA = "0x4E4D38", Offset = "0x4E4D38", VA = "0x4E4D38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A018", Offset = "0x24A018")]
			set
			{
			}
		}

		[Token(Token = "0x17000193")]
		public BoxerIK ik
		{
			[Token(Token = "0x6001180")]
			[Address(RVA = "0x4E4D40", Offset = "0x4E4D40", VA = "0x4E4D40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A028", Offset = "0x24A028")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001181")]
			[Address(RVA = "0x4E4D48", Offset = "0x4E4D48", VA = "0x4E4D48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A038", Offset = "0x24A038")]
			set
			{
			}
		}

		[Token(Token = "0x17000194")]
		public CameraController hmd
		{
			[Token(Token = "0x6001182")]
			[Address(RVA = "0x4E4D50", Offset = "0x4E4D50", VA = "0x4E4D50")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000195")]
		public PlayerFist leftFist
		{
			[Token(Token = "0x6001183")]
			[Address(RVA = "0x4E4D58", Offset = "0x4E4D58", VA = "0x4E4D58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A048", Offset = "0x24A048")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001184")]
			[Address(RVA = "0x4E4D60", Offset = "0x4E4D60", VA = "0x4E4D60")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A058", Offset = "0x24A058")]
			set
			{
			}
		}

		[Token(Token = "0x17000196")]
		public PlayerFist rightFist
		{
			[Token(Token = "0x6001185")]
			[Address(RVA = "0x4E4D68", Offset = "0x4E4D68", VA = "0x4E4D68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A068", Offset = "0x24A068")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001186")]
			[Address(RVA = "0x4E4D70", Offset = "0x4E4D70", VA = "0x4E4D70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A078", Offset = "0x24A078")]
			set
			{
			}
		}

		[Token(Token = "0x17000197")]
		public float gloveScale
		{
			[Token(Token = "0x6001187")]
			[Address(RVA = "0x4E4D78", Offset = "0x4E4D78", VA = "0x4E4D78")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A088", Offset = "0x24A088")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001188")]
			[Address(RVA = "0x4E4D80", Offset = "0x4E4D80", VA = "0x4E4D80")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A098", Offset = "0x24A098")]
			private set
			{
			}
		}

		[Token(Token = "0x17000198")]
		private PlayerCorner playerCorner
		{
			[Token(Token = "0x6001189")]
			[Address(RVA = "0x4E4D88", Offset = "0x4E4D88", VA = "0x4E4D88")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000199")]
		public float dizzyEffectsTarget
		{
			[Token(Token = "0x600118A")]
			[Address(RVA = "0x4E4FC0", Offset = "0x4E4FC0", VA = "0x4E4FC0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A0A8", Offset = "0x24A0A8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600118B")]
			[Address(RVA = "0x4E4FC8", Offset = "0x4E4FC8", VA = "0x4E4FC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A0B8", Offset = "0x24A0B8")]
			set
			{
			}
		}

		[Token(Token = "0x1700019A")]
		public DriftProtectionMode driftProtection
		{
			[Token(Token = "0x600118C")]
			[Address(RVA = "0x4E4FD0", Offset = "0x4E4FD0", VA = "0x4E4FD0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A0C8", Offset = "0x24A0C8")]
			get
			{
				return default(DriftProtectionMode);
			}
			[Token(Token = "0x600118D")]
			[Address(RVA = "0x4E4FD8", Offset = "0x4E4FD8", VA = "0x4E4FD8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A0D8", Offset = "0x24A0D8")]
			private set
			{
			}
		}

		[Token(Token = "0x600118E")]
		[Address(RVA = "0x4E4FE0", Offset = "0x4E4FE0", VA = "0x4E4FE0")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x600118F")]
		[Address(RVA = "0x4E4FE8", Offset = "0x4E4FE8", VA = "0x4E4FE8")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6001190")]
		[Address(RVA = "0x4E4FF0", Offset = "0x4E4FF0", VA = "0x4E4FF0", Slot = "4")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6001191")]
		[Address(RVA = "0x4E56D4", Offset = "0x4E56D4", VA = "0x4E56D4", Slot = "5")]
		public override void Start()
		{
		}

		[Token(Token = "0x6001192")]
		[Address(RVA = "0x4E58D8", Offset = "0x4E58D8", VA = "0x4E58D8")]
		public static void ShowRenderers()
		{
		}

		[Token(Token = "0x6001193")]
		[Address(RVA = "0x4E5AE4", Offset = "0x4E5AE4", VA = "0x4E5AE4")]
		public static void HideRenderers()
		{
		}

		[Token(Token = "0x6001194")]
		[Address(RVA = "0x4E5A04", Offset = "0x4E5A04", VA = "0x4E5A04")]
		private void ShowRenderersLocal()
		{
		}

		[Token(Token = "0x6001195")]
		[Address(RVA = "0x4E5C10", Offset = "0x4E5C10", VA = "0x4E5C10")]
		private void HideRenderersLocal()
		{
		}

		[Token(Token = "0x6001196")]
		[Address(RVA = "0x4D4F60", Offset = "0x4D4F60", VA = "0x4D4F60")]
		public void ShowControllerOutlines(bool updatePref = false)
		{
		}

		[Token(Token = "0x6001197")]
		[Address(RVA = "0x4D5050", Offset = "0x4D5050", VA = "0x4D5050")]
		public void HideControllerOutlines(bool updatePref = false)
		{
		}

		[Token(Token = "0x6001198")]
		[Address(RVA = "0x4E5CF0", Offset = "0x4E5CF0", VA = "0x4E5CF0")]
		public void ShowShorts()
		{
		}

		[Token(Token = "0x6001199")]
		[Address(RVA = "0x4E584C", Offset = "0x4E584C", VA = "0x4E584C")]
		public void HideShorts()
		{
		}

		[Token(Token = "0x600119A")]
		[Address(RVA = "0x4E5D7C", Offset = "0x4E5D7C", VA = "0x4E5D7C")]
		public void SetDriftProtection(int value)
		{
		}

		[Token(Token = "0x600119B")]
		[Address(RVA = "0x4E5D84", Offset = "0x4E5D84", VA = "0x4E5D84")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x600119C")]
		[Address(RVA = "0x4E53DC", Offset = "0x4E53DC", VA = "0x4E53DC")]
		private void LoadForceMultiplier()
		{
		}

		[Token(Token = "0x600119D")]
		[Address(RVA = "0x4E5E14", Offset = "0x4E5E14", VA = "0x4E5E14")]
		private void SetForceMultiplierByForce(float force, bool updatePlayerPref = false)
		{
		}

		[Token(Token = "0x600119E")]
		[Address(RVA = "0x4E5F38", Offset = "0x4E5F38", VA = "0x4E5F38")]
		private void SetHookForceMultiplierByForce(float force, bool updatePlayerPref = false)
		{
		}

		[Token(Token = "0x600119F")]
		[Address(RVA = "0x4E605C", Offset = "0x4E605C", VA = "0x4E605C")]
		public void SetForceMultiplierByValue(float value, bool updatePlayerPref = false)
		{
		}

		[Token(Token = "0x60011A0")]
		[Address(RVA = "0x4E6160", Offset = "0x4E6160", VA = "0x4E6160")]
		public void SetHookForceMultiplierByValue(float value, bool updatePlayerPref = false)
		{
		}

		[Token(Token = "0x60011A1")]
		[Address(RVA = "0x4E6264", Offset = "0x4E6264", VA = "0x4E6264")]
		private void StoreCalibrationForce(float force)
		{
		}

		[Token(Token = "0x60011A2")]
		[Address(RVA = "0x4E6304", Offset = "0x4E6304", VA = "0x4E6304")]
		private void StoreCalibrationHookForce(float force)
		{
		}

		[Token(Token = "0x60011A3")]
		[Address(RVA = "0x4E63A4", Offset = "0x4E63A4", VA = "0x4E63A4")]
		public void CheckIfForceMultiplierShouldIncrease()
		{
		}

		[Token(Token = "0x60011A4")]
		[Address(RVA = "0x4E6458", Offset = "0x4E6458", VA = "0x4E6458", Slot = "8")]
		public override float CalculateMultiplierCorrection(Hitbox.PunchType punchType)
		{
			return default(float);
		}

		[Token(Token = "0x60011A5")]
		[Address(RVA = "0x4E6470", Offset = "0x4E6470", VA = "0x4E6470")]
		public void ReportHurtboxHitForCalibration(Vector3 collisionPoint, Vector3 fistVelocity, float punchTypeCalibrationAdjustment, bool isArmWhip)
		{
		}

		[Token(Token = "0x60011A6")]
		[Address(RVA = "0x4E6778", Offset = "0x4E6778", VA = "0x4E6778")]
		public void ReportHurtboxHookHitForCalibration(Vector3 collisionPoint, Vector3 fistVelocity, float punchTypeCalibrationAdjustment, bool isArmWhip)
		{
		}

		[Token(Token = "0x60011A7")]
		[Address(RVA = "0x4D423C", Offset = "0x4D423C", VA = "0x4D423C")]
		public void LoadHandCalibration()
		{
		}

		[Token(Token = "0x60011A8")]
		[Address(RVA = "0x4E57D8", Offset = "0x4E57D8", VA = "0x4E57D8")]
		public void LoadGloveSize()
		{
		}

		[Token(Token = "0x60011A9")]
		[Address(RVA = "0x4E6A80", Offset = "0x4E6A80", VA = "0x4E6A80")]
		public void SetGloveScale(int size)
		{
		}

		[Token(Token = "0x60011AA")]
		[Address(RVA = "0x4E6C58", Offset = "0x4E6C58", VA = "0x4E6C58", Slot = "45")]
		public void CustomFixedUpdate()
		{
		}

		[Token(Token = "0x60011AB")]
		[Address(RVA = "0x4E7340", Offset = "0x4E7340", VA = "0x4E7340")]
		public void PostSimulation()
		{
		}

		[Token(Token = "0x60011AC")]
		[Address(RVA = "0x4E7344", Offset = "0x4E7344", VA = "0x4E7344", Slot = "6")]
		public override void Update()
		{
		}

		[Token(Token = "0x60011AD")]
		[Address(RVA = "0x4E81F0", Offset = "0x4E81F0", VA = "0x4E81F0")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x60011AE")]
		[Address(RVA = "0x4E2D7C", Offset = "0x4E2D7C", VA = "0x4E2D7C")]
		public void AddPlatformMotion(Vector3 deltaPosition, Quaternion deltaRotation, Vector3 pivot)
		{
		}

		[Token(Token = "0x60011AF")]
		[Address(RVA = "0x4E8244", Offset = "0x4E8244", VA = "0x4E8244", Slot = "21")]
		public override void PrepareForEvent(float delay)
		{
		}

		[Token(Token = "0x60011B0")]
		[Address(RVA = "0x4E8300", Offset = "0x4E8300", VA = "0x4E8300")]
		public void FadeToWhite(float intensity = 1f)
		{
		}

		[Token(Token = "0x60011B1")]
		[Address(RVA = "0x4E8334", Offset = "0x4E8334", VA = "0x4E8334", Slot = "9")]
		public override void DirectDamageExternalResults(float damage, bool hitWeakSpot, Hurtbox.HurtboxType type, bool wasKnockedDown)
		{
		}

		[Token(Token = "0x60011B2")]
		[Address(RVA = "0x4E8630", Offset = "0x4E8630", VA = "0x4E8630", Slot = "15")]
		protected override void HurtboxCollisionVisualResult(float damage, float force, bool wasKnockedDown, Hurtbox hurtbox, Hitbox hitbox, Collision collision)
		{
		}

		[Token(Token = "0x60011B3")]
		[Address(RVA = "0x4E87DC", Offset = "0x4E87DC", VA = "0x4E87DC", Slot = "16")]
		protected override void HurtboxCollisionAudioResult(float damage, float force, bool wasKnockedDown, Hurtbox hurtbox, Hitbox hitbox, Collision collision, bool hitWeakSpot = false)
		{
		}

		[Token(Token = "0x60011B4")]
		[Address(RVA = "0x4E8820", Offset = "0x4E8820", VA = "0x4E8820")]
		private void playGruntSound(float damage)
		{
		}

		[Token(Token = "0x60011B5")]
		[Address(RVA = "0x4E8468", Offset = "0x4E8468", VA = "0x4E8468")]
		private void playHeadHitSound(float damage)
		{
		}

		[Token(Token = "0x60011B6")]
		[Address(RVA = "0x4DE6FC", Offset = "0x4DE6FC", VA = "0x4DE6FC")]
		public void PlayUISound()
		{
		}

		[Token(Token = "0x60011B7")]
		[Address(RVA = "0x4E89EC", Offset = "0x4E89EC", VA = "0x4E89EC", Slot = "20")]
		protected override void Knockdown(Hurtbox hurtbox, Hitbox hitbox)
		{
		}

		[Token(Token = "0x60011B8")]
		[Address(RVA = "0x4E8A44", Offset = "0x4E8A44", VA = "0x4E8A44")]
		private void WaitToHitTheMat()
		{
		}

		[Token(Token = "0x60011B9")]
		[Address(RVA = "0x4E8A58", Offset = "0x4E8A58", VA = "0x4E8A58")]
		private void HandleFalling()
		{
		}

		[Token(Token = "0x60011BA")]
		[Address(RVA = "0x4E8AB8", Offset = "0x4E8AB8", VA = "0x4E8AB8")]
		private void HitTheMat()
		{
		}

		[Token(Token = "0x60011BB")]
		[Address(RVA = "0x4E7CA8", Offset = "0x4E7CA8", VA = "0x4E7CA8")]
		public void GetUp(bool fromKO = false)
		{
		}

		[Token(Token = "0x60011BC")]
		[Address(RVA = "0x4E8C24", Offset = "0x4E8C24", VA = "0x4E8C24")]
		public bool CanAct()
		{
			return default(bool);
		}

		[Token(Token = "0x60011BD")]
		[Address(RVA = "0x4E8C38", Offset = "0x4E8C38", VA = "0x4E8C38")]
		public void Blink()
		{
		}

		[Token(Token = "0x60011BE")]
		[Address(RVA = "0x4E8C64", Offset = "0x4E8C64", VA = "0x4E8C64")]
		public bool CanAttack()
		{
			return default(bool);
		}

		[Token(Token = "0x60011BF")]
		[Address(RVA = "0x4E8C78", Offset = "0x4E8C78", VA = "0x4E8C78")]
		public void Undizzy()
		{
		}

		[Token(Token = "0x60011C0")]
		[Address(RVA = "0x4E8C84", Offset = "0x4E8C84", VA = "0x4E8C84", Slot = "22")]
		public override void PreMatchSetup()
		{
		}

		[Token(Token = "0x60011C1")]
		[Address(RVA = "0x4E8DE8", Offset = "0x4E8DE8", VA = "0x4E8DE8", Slot = "24")]
		public override void StartRound()
		{
		}

		[Token(Token = "0x60011C2")]
		[Address(RVA = "0x4E8DF4", Offset = "0x4E8DF4", VA = "0x4E8DF4", Slot = "23")]
		public override void PrepareToStartRound()
		{
		}

		[Token(Token = "0x60011C3")]
		[Address(RVA = "0x4E8EC0", Offset = "0x4E8EC0", VA = "0x4E8EC0", Slot = "25")]
		public override void StartRoundMovement()
		{
		}

		[Token(Token = "0x60011C4")]
		[Address(RVA = "0x4E8FE0", Offset = "0x4E8FE0", VA = "0x4E8FE0", Slot = "26")]
		public override void EndRound()
		{
		}

		[Token(Token = "0x60011C5")]
		[Address(RVA = "0x4E8FF4", Offset = "0x4E8FF4", VA = "0x4E8FF4", Slot = "27")]
		public override void StartBreakMovement()
		{
		}

		[Token(Token = "0x60011C6")]
		[Address(RVA = "0x4E90D0", Offset = "0x4E90D0", VA = "0x4E90D0", Slot = "29")]
		public override void KnockedDownMovement()
		{
		}

		[Token(Token = "0x60011C7")]
		[Address(RVA = "0x4E930C", Offset = "0x4E930C", VA = "0x4E930C", Slot = "30")]
		public override void GoToFarthestNeutralCorner()
		{
		}

		[Token(Token = "0x60011C8")]
		[Address(RVA = "0x4E94A4", Offset = "0x4E94A4", VA = "0x4E94A4", Slot = "31")]
		public override void GetUpMovement()
		{
		}

		[Token(Token = "0x60011C9")]
		[Address(RVA = "0x4E94A8", Offset = "0x4E94A8", VA = "0x4E94A8", Slot = "32")]
		public override void ResumeFighting()
		{
		}

		[Token(Token = "0x60011CA")]
		[Address(RVA = "0x4E94AC", Offset = "0x4E94AC", VA = "0x4E94AC", Slot = "33")]
		public override void ResumeFightingMovement()
		{
		}

		[Token(Token = "0x60011CB")]
		[Address(RVA = "0x4E94D0", Offset = "0x4E94D0", VA = "0x4E94D0", Slot = "34")]
		public override void PostMatchMovement()
		{
		}

		[Token(Token = "0x60011CC")]
		[Address(RVA = "0x4E99FC", Offset = "0x4E99FC", VA = "0x4E99FC", Slot = "35")]
		public override void ReportMatchResults(bool isAWin, bool isADraw, string opponentDefeatName, FightMenuManager.SelectedDifficulty difficulty)
		{
		}

		[Token(Token = "0x60011CD")]
		[Address(RVA = "0x4E9C74", Offset = "0x4E9C74", VA = "0x4E9C74", Slot = "38")]
		public override Vector3 PredictHitZoneMovement(float afterSeconds)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60011CE")]
		[Address(RVA = "0x4E9CB0", Offset = "0x4E9CB0", VA = "0x4E9CB0", Slot = "11")]
		public override Transform GetPositionTransform()
		{
			return null;
		}

		[Token(Token = "0x60011CF")]
		[Address(RVA = "0x4E9CDC", Offset = "0x4E9CDC", VA = "0x4E9CDC", Slot = "43")]
		public override float GetClosestAllowedDistance(Vector3 startPosition, Vector3 endPosition, float extraDistance)
		{
			return default(float);
		}

		[Token(Token = "0x60011D0")]
		[Address(RVA = "0x4E2E24", Offset = "0x4E2E24", VA = "0x4E2E24")]
		public void MoveFistsToTargets()
		{
		}

		[Token(Token = "0x60011D1")]
		[Address(RVA = "0x4EA150", Offset = "0x4EA150", VA = "0x4EA150")]
		public PlayerController()
		{
		}
	}
	[Token(Token = "0x2000216")]
	public class PlayerFist : Hitbox, IFixedUpdateable
	{
		[Token(Token = "0x4000BDB")]
		public const float ControllerExtendedFloorDistance = 0.3f;

		[Token(Token = "0x4000BDC")]
		public const float ControllerFullExtensionFloorDistance = 0.6f;

		[Token(Token = "0x4000BDD")]
		private const float smoothTime = 1f / 15f;

		[Token(Token = "0x4000BDE")]
		private const float minimumPunchingSpeed = 1.5f;

		[Token(Token = "0x4000BDF")]
		private const float minimumMovingSpeed = 0.2f;

		[Token(Token = "0x4000BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24725C", Offset = "0x24725C")]
		private Transform <handTarget>k__BackingField;

		[Token(Token = "0x4000BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24726C", Offset = "0x24726C")]
		private Transform <controllerTarget>k__BackingField;

		[Token(Token = "0x4000BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24727C", Offset = "0x24727C")]
		private PlayerHandTracker <controller>k__BackingField;

		[Token(Token = "0x4000BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform fistCenter;

		[Token(Token = "0x4000BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Transform interpolator;

		[Token(Token = "0x4000BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool isFrozen;

		[Token(Token = "0x4000BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool wasFrozen;

		[Token(Token = "0x4000BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion frozenRotation;

		[Token(Token = "0x4000BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private ConfigurableJoint axisLockJoint;

		[Token(Token = "0x4000BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool leftHand;

		[Token(Token = "0x4000BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24728C", Offset = "0x24728C")]
		private bool <isLeadingHand>k__BackingField;

		[Token(Token = "0x4000BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24729C", Offset = "0x24729C")]
		private bool <isPunching>k__BackingField;

		[Token(Token = "0x4000BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2472AC", Offset = "0x2472AC")]
		private bool <didLandHit>k__BackingField;

		[Token(Token = "0x4000BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2472BC", Offset = "0x2472BC")]
		private bool <handWasExtended>k__BackingField;

		[Token(Token = "0x4000BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2472CC", Offset = "0x2472CC")]
		private float <punchTime>k__BackingField;

		[Token(Token = "0x4000BEF")]
		private const float teleportTime = 0.2f;

		[Token(Token = "0x4000BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float teleportTimer;

		[Token(Token = "0x4000BF1")]
		private const float collisionCooldown = 0.075f;

		[Token(Token = "0x4000BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float collisionCooldownCounter;

		[Token(Token = "0x4000BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float minorCollisionCooldownCounter;

		[Token(Token = "0x4000BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2472DC", Offset = "0x2472DC")]
		private float <lastRotate>k__BackingField;

		[Token(Token = "0x4000BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2472EC", Offset = "0x2472EC")]
		private float <lastAngle>k__BackingField;

		[Token(Token = "0x4000BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2472FC", Offset = "0x2472FC")]
		private float <lastLean>k__BackingField;

		[Token(Token = "0x4000BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24730C", Offset = "0x24730C")]
		private float <lastSquareHit>k__BackingField;

		[Token(Token = "0x4000BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24731C", Offset = "0x24731C")]
		private float <lastJab>k__BackingField;

		[Token(Token = "0x4000BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24732C", Offset = "0x24732C")]
		private float <lastWhip>k__BackingField;

		[Token(Token = "0x4000BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24733C", Offset = "0x24733C")]
		private float <punchStartPalmAngle>k__BackingField;

		[Token(Token = "0x4000BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24734C", Offset = "0x24734C")]
		private float <punchStartForwardAngle>k__BackingField;

		[Token(Token = "0x4000BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int pathHitsCount;

		[Token(Token = "0x4000BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Collider[] pathHits;

		[Token(Token = "0x4000BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Collider[] gcAvoidCollider;

		[Token(Token = "0x4000BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public Vector3 localTopDirection;

		[Token(Token = "0x4000C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Vector3 localForwardDirection;

		[Token(Token = "0x4000C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public Vector3 localPalmDirection;

		[Token(Token = "0x4000C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Vector3[] previousFixedPositions;

		[Token(Token = "0x4000C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private int currentFixedPositionIndex;

		[Token(Token = "0x4000C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private bool isJabbing;

		[Token(Token = "0x4000C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Vector3 latestFixedUpdatePosition;

		[Token(Token = "0x4000C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Quaternion lastHandTargetRotation;

		[Token(Token = "0x4000C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private bool velocityCachedThisFrame;

		[Token(Token = "0x4000C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private Vector3 cachedVelocity;

		[Token(Token = "0x4000C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Vector3 cachedUnsmoothedVelocity;

		[Token(Token = "0x4000C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private bool isGhosting;

		[Token(Token = "0x4000C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Vector3 ghostStartPosition;

		[Token(Token = "0x4000C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private Quaternion ghostStartRotation;

		[Token(Token = "0x4000C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private float ghostTimer;

		[Token(Token = "0x4000C0E")]
		private const float ghostTime = 0.0625f;

		[Token(Token = "0x4000C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24735C", Offset = "0x24735C")]
		private PlayerController <player>k__BackingField;

		[Token(Token = "0x1700019B")]
		public Transform handTarget
		{
			[Token(Token = "0x60011D3")]
			[Address(RVA = "0x4EA3DC", Offset = "0x4EA3DC", VA = "0x4EA3DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A0E8", Offset = "0x24A0E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011D4")]
			[Address(RVA = "0x4EA3E4", Offset = "0x4EA3E4", VA = "0x4EA3E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A0F8", Offset = "0x24A0F8")]
			set
			{
			}
		}

		[Token(Token = "0x1700019C")]
		public Transform controllerTarget
		{
			[Token(Token = "0x60011D5")]
			[Address(RVA = "0x4EA3EC", Offset = "0x4EA3EC", VA = "0x4EA3EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A108", Offset = "0x24A108")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011D6")]
			[Address(RVA = "0x4EA3F4", Offset = "0x4EA3F4", VA = "0x4EA3F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A118", Offset = "0x24A118")]
			set
			{
			}
		}

		[Token(Token = "0x1700019D")]
		public PlayerHandTracker controller
		{
			[Token(Token = "0x60011D7")]
			[Address(RVA = "0x4EA3FC", Offset = "0x4EA3FC", VA = "0x4EA3FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A128", Offset = "0x24A128")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011D8")]
			[Address(RVA = "0x4EA404", Offset = "0x4EA404", VA = "0x4EA404")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A138", Offset = "0x24A138")]
			set
			{
			}
		}

		[Token(Token = "0x1700019E")]
		public bool isLeadingHand
		{
			[Token(Token = "0x60011D9")]
			[Address(RVA = "0x4EA40C", Offset = "0x4EA40C", VA = "0x4EA40C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A148", Offset = "0x24A148")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60011DA")]
			[Address(RVA = "0x4EA414", Offset = "0x4EA414", VA = "0x4EA414")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A158", Offset = "0x24A158")]
			set
			{
			}
		}

		[Token(Token = "0x1700019F")]
		public bool isPunching
		{
			[Token(Token = "0x60011DB")]
			[Address(RVA = "0x4EA41C", Offset = "0x4EA41C", VA = "0x4EA41C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A168", Offset = "0x24A168")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60011DC")]
			[Address(RVA = "0x4EA424", Offset = "0x4EA424", VA = "0x4EA424")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A178", Offset = "0x24A178")]
			set
			{
			}
		}

		[Token(Token = "0x170001A0")]
		public bool didLandHit
		{
			[Token(Token = "0x60011DD")]
			[Address(RVA = "0x4EA42C", Offset = "0x4EA42C", VA = "0x4EA42C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A188", Offset = "0x24A188")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60011DE")]
			[Address(RVA = "0x4EA434", Offset = "0x4EA434", VA = "0x4EA434")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A198", Offset = "0x24A198")]
			set
			{
			}
		}

		[Token(Token = "0x170001A1")]
		public bool handWasExtended
		{
			[Token(Token = "0x60011DF")]
			[Address(RVA = "0x4EA43C", Offset = "0x4EA43C", VA = "0x4EA43C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A1A8", Offset = "0x24A1A8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60011E0")]
			[Address(RVA = "0x4EA444", Offset = "0x4EA444", VA = "0x4EA444")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A1B8", Offset = "0x24A1B8")]
			set
			{
			}
		}

		[Token(Token = "0x170001A2")]
		public float punchTime
		{
			[Token(Token = "0x60011E1")]
			[Address(RVA = "0x4EA44C", Offset = "0x4EA44C", VA = "0x4EA44C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A1C8", Offset = "0x24A1C8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60011E2")]
			[Address(RVA = "0x4EA454", Offset = "0x4EA454", VA = "0x4EA454")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A1D8", Offset = "0x24A1D8")]
			set
			{
			}
		}

		[Token(Token = "0x170001A3")]
		public float lastRotate
		{
			[Token(Token = "0x60011E3")]
			[Address(RVA = "0x4EA45C", Offset = "0x4EA45C", VA = "0x4EA45C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A1E8", Offset = "0x24A1E8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60011E4")]
			[Address(RVA = "0x4EA464", Offset = "0x4EA464", VA = "0x4EA464")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A1F8", Offset = "0x24A1F8")]
			set
			{
			}
		}

		[Token(Token = "0x170001A4")]
		public float lastAngle
		{
			[Token(Token = "0x60011E5")]
			[Address(RVA = "0x4EA46C", Offset = "0x4EA46C", VA = "0x4EA46C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A208", Offset = "0x24A208")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60011E6")]
			[Address(RVA = "0x4EA474", Offset = "0x4EA474", VA = "0x4EA474")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A218", Offset = "0x24A218")]
			set
			{
			}
		}

		[Token(Token = "0x170001A5")]
		public float lastLean
		{
			[Token(Token = "0x60011E7")]
			[Address(RVA = "0x4EA47C", Offset = "0x4EA47C", VA = "0x4EA47C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A228", Offset = "0x24A228")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60011E8")]
			[Address(RVA = "0x4EA484", Offset = "0x4EA484", VA = "0x4EA484")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A238", Offset = "0x24A238")]
			set
			{
			}
		}

		[Token(Token = "0x170001A6")]
		public float lastSquareHit
		{
			[Token(Token = "0x60011E9")]
			[Address(RVA = "0x4EA48C", Offset = "0x4EA48C", VA = "0x4EA48C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A248", Offset = "0x24A248")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60011EA")]
			[Address(RVA = "0x4EA494", Offset = "0x4EA494", VA = "0x4EA494")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A258", Offset = "0x24A258")]
			set
			{
			}
		}

		[Token(Token = "0x170001A7")]
		public float lastJab
		{
			[Token(Token = "0x60011EB")]
			[Address(RVA = "0x4EA49C", Offset = "0x4EA49C", VA = "0x4EA49C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A268", Offset = "0x24A268")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60011EC")]
			[Address(RVA = "0x4EA4A4", Offset = "0x4EA4A4", VA = "0x4EA4A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A278", Offset = "0x24A278")]
			set
			{
			}
		}

		[Token(Token = "0x170001A8")]
		public float lastWhip
		{
			[Token(Token = "0x60011ED")]
			[Address(RVA = "0x4EA4AC", Offset = "0x4EA4AC", VA = "0x4EA4AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A288", Offset = "0x24A288")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60011EE")]
			[Address(RVA = "0x4EA4B4", Offset = "0x4EA4B4", VA = "0x4EA4B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A298", Offset = "0x24A298")]
			set
			{
			}
		}

		[Token(Token = "0x170001A9")]
		public float punchStartPalmAngle
		{
			[Token(Token = "0x60011EF")]
			[Address(RVA = "0x4EA4BC", Offset = "0x4EA4BC", VA = "0x4EA4BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A2A8", Offset = "0x24A2A8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60011F0")]
			[Address(RVA = "0x4EA4C4", Offset = "0x4EA4C4", VA = "0x4EA4C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A2B8", Offset = "0x24A2B8")]
			set
			{
			}
		}

		[Token(Token = "0x170001AA")]
		public float punchStartForwardAngle
		{
			[Token(Token = "0x60011F1")]
			[Address(RVA = "0x4EA4CC", Offset = "0x4EA4CC", VA = "0x4EA4CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A2C8", Offset = "0x24A2C8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60011F2")]
			[Address(RVA = "0x4EA4D4", Offset = "0x4EA4D4", VA = "0x4EA4D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A2D8", Offset = "0x24A2D8")]
			set
			{
			}
		}

		[Token(Token = "0x170001AB")]
		public Vector3 topDirection
		{
			[Token(Token = "0x60011F3")]
			[Address(RVA = "0x4EA4DC", Offset = "0x4EA4DC", VA = "0x4EA4DC")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170001AC")]
		public Vector3 forwardDirection
		{
			[Token(Token = "0x60011F4")]
			[Address(RVA = "0x4EA604", Offset = "0x4EA604", VA = "0x4EA604")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170001AD")]
		public Vector3 palmDirection
		{
			[Token(Token = "0x60011F5")]
			[Address(RVA = "0x4EA72C", Offset = "0x4EA72C", VA = "0x4EA72C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170001AE")]
		public bool isActive
		{
			[Token(Token = "0x60011F6")]
			[Address(RVA = "0x4EA854", Offset = "0x4EA854", VA = "0x4EA854")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60011F7")]
			[Address(RVA = "0x4EA8A0", Offset = "0x4EA8A0", VA = "0x4EA8A0")]
			set
			{
			}
		}

		[Token(Token = "0x170001AF")]
		public bool isActiveMinor
		{
			[Token(Token = "0x60011F8")]
			[Address(RVA = "0x4EA8BC", Offset = "0x4EA8BC", VA = "0x4EA8BC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60011F9")]
			[Address(RVA = "0x4EA918", Offset = "0x4EA918", VA = "0x4EA918")]
			set
			{
			}
		}

		[Token(Token = "0x170001B0")]
		public PlayerController player
		{
			[Token(Token = "0x60011FA")]
			[Address(RVA = "0x4EA934", Offset = "0x4EA934", VA = "0x4EA934")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A2E8", Offset = "0x24A2E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011FB")]
			[Address(RVA = "0x4EA93C", Offset = "0x4EA93C", VA = "0x4EA93C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A2F8", Offset = "0x24A2F8")]
			set
			{
			}
		}

		[Token(Token = "0x60011FC")]
		[Address(RVA = "0x4EA944", Offset = "0x4EA944", VA = "0x4EA944")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60011FD")]
		[Address(RVA = "0x4EA94C", Offset = "0x4EA94C", VA = "0x4EA94C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60011FE")]
		[Address(RVA = "0x4EA954", Offset = "0x4EA954", VA = "0x4EA954", Slot = "4")]
		public override void Awake()
		{
		}

		[Token(Token = "0x60011FF")]
		[Address(RVA = "0x4EAB24", Offset = "0x4EAB24", VA = "0x4EAB24")]
		public void Start()
		{
		}

		[Token(Token = "0x6001200")]
		[Address(RVA = "0x4EABA0", Offset = "0x4EABA0", VA = "0x4EABA0")]
		private void CheckForImpactFreeze()
		{
		}

		[Token(Token = "0x6001201")]
		[Address(RVA = "0x4EBAC4", Offset = "0x4EBAC4", VA = "0x4EBAC4")]
		private void CalculateRigidbodyVelocities()
		{
		}

		[Token(Token = "0x6001202")]
		[Address(RVA = "0x4EBD0C", Offset = "0x4EBD0C", VA = "0x4EBD0C")]
		private void UpdateControllerTarget(Vector3 newControllerTargetPosition, Quaternion newControllerTargetRotation)
		{
		}

		[Token(Token = "0x6001203")]
		[Address(RVA = "0x4EC3DC", Offset = "0x4EC3DC", VA = "0x4EC3DC")]
		protected void OnCollisionStay()
		{
		}

		[Token(Token = "0x6001204")]
		[Address(RVA = "0x4EC3F0", Offset = "0x4EC3F0", VA = "0x4EC3F0")]
		protected void OnCollisionExit()
		{
		}

		[Token(Token = "0x6001205")]
		[Address(RVA = "0x4EC404", Offset = "0x4EC404", VA = "0x4EC404", Slot = "18")]
		public void CustomFixedUpdate()
		{
		}

		[Token(Token = "0x6001206")]
		[Address(RVA = "0x4EC514", Offset = "0x4EC514", VA = "0x4EC514")]
		public void PostSimulation()
		{
		}

		[Token(Token = "0x6001207")]
		[Address(RVA = "0x4EC518", Offset = "0x4EC518", VA = "0x4EC518")]
		private void Update()
		{
		}

		[Token(Token = "0x6001208")]
		[Address(RVA = "0x4EC96C", Offset = "0x4EC96C", VA = "0x4EC96C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001209")]
		[Address(RVA = "0x4E7CE8", Offset = "0x4E7CE8", VA = "0x4E7CE8")]
		public void UpdateLeadingHand(bool isFarthestFromPlayer, bool handExtended, bool handFullyExtented)
		{
		}

		[Token(Token = "0x600120A")]
		[Address(RVA = "0x4ECA40", Offset = "0x4ECA40", VA = "0x4ECA40")]
		public void Vibrate(float intensity)
		{
		}

		[Token(Token = "0x600120B")]
		[Address(RVA = "0x4ECA14", Offset = "0x4ECA14", VA = "0x4ECA14")]
		private void StartPunching()
		{
		}

		[Token(Token = "0x600120C")]
		[Address(RVA = "0x4EC978", Offset = "0x4EC978", VA = "0x4EC978")]
		private void StopPunching()
		{
		}

		[Token(Token = "0x600120D")]
		[Address(RVA = "0x4ECAFC", Offset = "0x4ECAFC", VA = "0x4ECAFC", Slot = "5")]
		public override void LandedHit(PunchType punchType, float damage, float targetPainThreshold)
		{
		}

		[Token(Token = "0x600120E")]
		[Address(RVA = "0x4ECC08", Offset = "0x4ECC08", VA = "0x4ECC08", Slot = "9")]
		public override Vector3 GetVelocity(bool allowSmoothing = true)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600120F")]
		[Address(RVA = "0x4ED29C", Offset = "0x4ED29C", VA = "0x4ED29C", Slot = "15")]
		public override void ClearVelocity()
		{
		}

		[Token(Token = "0x6001210")]
		[Address(RVA = "0x4E9FD8", Offset = "0x4E9FD8", VA = "0x4E9FD8")]
		public void MoveToTarget()
		{
		}

		[Token(Token = "0x6001211")]
		[Address(RVA = "0x4ED228", Offset = "0x4ED228", VA = "0x4ED228")]
		private Vector3 GetPreviousFixedPosition(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001212")]
		[Address(RVA = "0x4ED45C", Offset = "0x4ED45C", VA = "0x4ED45C", Slot = "11")]
		public override float GetEffectiveMass(Vector3 collisionPoint, bool calibrationHit = false, bool returnUnmodifiedForce = false)
		{
			return default(float);
		}

		[Token(Token = "0x6001213")]
		[Address(RVA = "0x4EE0CC", Offset = "0x4EE0CC", VA = "0x4EE0CC", Slot = "8")]
		public override void ReceiveForce(float force, bool isMajorHit, Collision collision)
		{
		}

		[Token(Token = "0x6001214")]
		[Address(RVA = "0x4EE270", Offset = "0x4EE270", VA = "0x4EE270", Slot = "13")]
		public override bool IsActive(bool majorHit)
		{
			return default(bool);
		}

		[Token(Token = "0x6001215")]
		[Address(RVA = "0x4EE2C8", Offset = "0x4EE2C8", VA = "0x4EE2C8", Slot = "14")]
		public override void Deactivate(bool majorHit)
		{
		}

		[Token(Token = "0x6001216")]
		[Address(RVA = "0x4EE2E4", Offset = "0x4EE2E4", VA = "0x4EE2E4", Slot = "7")]
		public override bool CausedMajorCollision(Collider other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001217")]
		[Address(RVA = "0x4EE3D4", Offset = "0x4EE3D4", VA = "0x4EE3D4")]
		public PlayerFist()
		{
		}
	}
	[Token(Token = "0x2000217")]
	public class PlayerHandTracker : MonoBehaviour
	{
		[Token(Token = "0x4000C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public GameObject controllerModel;

		[Token(Token = "0x4000C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private VRInputDevice device;

		[Token(Token = "0x4000C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Vector3 currentPosition;

		[Token(Token = "0x4000C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 previousPosition;

		[Token(Token = "0x4000C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion currentRotation;

		[Token(Token = "0x4000C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion previousRotation;

		[Token(Token = "0x6001218")]
		[Address(RVA = "0x395B28", Offset = "0x395B28", VA = "0x395B28")]
		public void Start()
		{
		}

		[Token(Token = "0x6001219")]
		[Address(RVA = "0x395B90", Offset = "0x395B90", VA = "0x395B90")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600121A")]
		[Address(RVA = "0x395C68", Offset = "0x395C68", VA = "0x395C68")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600121B")]
		[Address(RVA = "0x395D40", Offset = "0x395D40", VA = "0x395D40")]
		public void UpdatePosition()
		{
		}

		[Token(Token = "0x600121C")]
		[Address(RVA = "0x395E8C", Offset = "0x395E8C", VA = "0x395E8C")]
		public Vector3 GetPhysicsPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600121D")]
		[Address(RVA = "0x396058", Offset = "0x396058", VA = "0x396058")]
		public Quaternion GetPhysicsRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600121E")]
		[Address(RVA = "0x3961A0", Offset = "0x3961A0", VA = "0x3961A0")]
		public void Vibrate(float intensity)
		{
		}

		[Token(Token = "0x600121F")]
		[Address(RVA = "0x396264", Offset = "0x396264", VA = "0x396264")]
		public void ShowModel()
		{
		}

		[Token(Token = "0x6001220")]
		[Address(RVA = "0x396298", Offset = "0x396298", VA = "0x396298")]
		public void HideModel()
		{
		}

		[Token(Token = "0x6001221")]
		[Address(RVA = "0x3962CC", Offset = "0x3962CC", VA = "0x3962CC")]
		public PlayerHandTracker()
		{
		}
	}
	[Token(Token = "0x2000218")]
	[AttributeAttribute(Name = "AdvancedInspectorAttribute", RVA = "0x241628", Offset = "0x241628")]
	public class PlayerHead : PlayerHurtbox
	{
		[Token(Token = "0x4000C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private PlayerController player;

		[Token(Token = "0x170001B1")]
		public float recentRotation
		{
			[Token(Token = "0x6001222")]
			[Address(RVA = "0x396394", Offset = "0x396394", VA = "0x396394")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001223")]
		[Address(RVA = "0x3963D4", Offset = "0x3963D4", VA = "0x3963D4", Slot = "4")]
		public override void Start()
		{
		}

		[Token(Token = "0x6001224")]
		[Address(RVA = "0x39645C", Offset = "0x39645C", VA = "0x39645C")]
		public Vector3 PredictMovement(float afterSeconds)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001225")]
		[Address(RVA = "0x3964AC", Offset = "0x3964AC", VA = "0x3964AC")]
		public PlayerHead()
		{
		}
	}
	[Token(Token = "0x2000219")]
	public class PlayerBlockOpeningPositioner : MonoBehaviour
	{
		[Token(Token = "0x6001226")]
		[Address(RVA = "0x4E4A50", Offset = "0x4E4A50", VA = "0x4E4A50")]
		public PlayerBlockOpeningPositioner()
		{
		}
	}
	[Token(Token = "0x200021A")]
	public class PlayerCorner : MonoBehaviour
	{
		[Token(Token = "0x4000C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private PlayerController player;

		[Token(Token = "0x4000C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool foundPlayer;

		[Token(Token = "0x4000C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public GameObject roundMenu;

		[Token(Token = "0x4000C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject positionMarker;

		[Token(Token = "0x4000C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public GameObject cornerMessage;

		[Token(Token = "0x4000C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject stool;

		[Token(Token = "0x4000C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public GameObject breakMessage;

		[Token(Token = "0x4000C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text breakTitleText;

		[Token(Token = "0x4000C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Text breakMessageText;

		[Token(Token = "0x6001227")]
		[Address(RVA = "0x4EA24C", Offset = "0x4EA24C", VA = "0x4EA24C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001228")]
		[Address(RVA = "0x4E8E20", Offset = "0x4E8E20", VA = "0x4E8E20")]
		public void HideCornerUI()
		{
		}

		[Token(Token = "0x6001229")]
		[Address(RVA = "0x4E9054", Offset = "0x4E9054", VA = "0x4E9054")]
		public void StartBreak()
		{
		}

		[Token(Token = "0x600122A")]
		[Address(RVA = "0x4E8EF4", Offset = "0x4E8EF4", VA = "0x4E8EF4")]
		public void SendPlayerToFightPosition()
		{
		}

		[Token(Token = "0x600122B")]
		[Address(RVA = "0x4E8CB0", Offset = "0x4E8CB0", VA = "0x4E8CB0")]
		public void SendPlayerToCorner()
		{
		}

		[Token(Token = "0x600122C")]
		[Address(RVA = "0x4E97A8", Offset = "0x4E97A8", VA = "0x4E97A8")]
		public void SendPlayerToWinPosition()
		{
		}

		[Token(Token = "0x600122D")]
		[Address(RVA = "0x4E933C", Offset = "0x4E933C", VA = "0x4E933C")]
		public void SendPlayerToNeutralCorner(Transform farthestNeutralCorner)
		{
		}

		[Token(Token = "0x600122E")]
		[Address(RVA = "0x4EA334", Offset = "0x4EA334", VA = "0x4EA334")]
		public void EndRound()
		{
		}

		[Token(Token = "0x600122F")]
		[Address(RVA = "0x4E4E28", Offset = "0x4E4E28", VA = "0x4E4E28")]
		public static PlayerCorner find()
		{
			return null;
		}

		[Token(Token = "0x6001230")]
		[Address(RVA = "0x4EA3D4", Offset = "0x4EA3D4", VA = "0x4EA3D4")]
		public PlayerCorner()
		{
		}
	}
	[Token(Token = "0x200021B")]
	public class PlayerHurtbox : Hurtbox
	{
		[Token(Token = "0x4000C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public IHapticsSystem.BodyArea area;

		[Token(Token = "0x6001231")]
		[Address(RVA = "0x396534", Offset = "0x396534", VA = "0x396534", Slot = "6")]
		public override void ReceiveHitboxCollision(float force, Hitbox hitbox, Collision collision)
		{
		}

		[Token(Token = "0x6001232")]
		[Address(RVA = "0x3964B0", Offset = "0x3964B0", VA = "0x3964B0")]
		public PlayerHurtbox()
		{
		}
	}
	[Token(Token = "0x200021C")]
	public class PlayerUISelector : MonoBehaviour
	{
		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool isLeftHand;

		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24736C", Offset = "0x24736C")]
		private bool <active>k__BackingField;

		[Token(Token = "0x170001B2")]
		public bool active
		{
			[Token(Token = "0x6001233")]
			[Address(RVA = "0x396644", Offset = "0x396644", VA = "0x396644")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A308", Offset = "0x24A308")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001234")]
			[Address(RVA = "0x39664C", Offset = "0x39664C", VA = "0x39664C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A318", Offset = "0x24A318")]
			set
			{
			}
		}

		[Token(Token = "0x6001235")]
		[Address(RVA = "0x396654", Offset = "0x396654", VA = "0x396654")]
		public void Awake()
		{
		}

		[Token(Token = "0x6001236")]
		[Address(RVA = "0x396660", Offset = "0x396660", VA = "0x396660")]
		public void Rumble(float strength)
		{
		}

		[Token(Token = "0x6001237")]
		[Address(RVA = "0x396720", Offset = "0x396720", VA = "0x396720")]
		public bool IsClicking()
		{
			return default(bool);
		}

		[Token(Token = "0x6001238")]
		[Address(RVA = "0x396728", Offset = "0x396728", VA = "0x396728")]
		public PlayerUISelector()
		{
		}
	}
	[Token(Token = "0x200021D")]
	public class PlaySpaceRotator : MonoBehaviour
	{
		[Token(Token = "0x6001239")]
		[Address(RVA = "0x4E4A48", Offset = "0x4E4A48", VA = "0x4E4A48")]
		public PlaySpaceRotator()
		{
		}
	}
	[Token(Token = "0x200021E")]
	public class PunchStateMachineBehavior : StateMachineBehaviour
	{
		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string punchName;

		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool stepIn;

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float startTime;

		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float endTime;

		[Token(Token = "0x600123A")]
		[Address(RVA = "0x396730", Offset = "0x396730", VA = "0x396730", Slot = "5")]
		public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x600123B")]
		[Address(RVA = "0x396808", Offset = "0x396808", VA = "0x396808", Slot = "6")]
		public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x600123C")]
		[Address(RVA = "0x3968B0", Offset = "0x3968B0", VA = "0x3968B0")]
		public PunchStateMachineBehavior()
		{
		}
	}
	[Token(Token = "0x200021F")]
	public class PunchStatsGenerator : MonoBehaviour
	{
		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public TextMeshProUGUI redCornerName;

		[Token(Token = "0x4000C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TextMeshProUGUI blueCornerName;

		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public TextMeshProUGUI[] redLanded;

		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshProUGUI[] redTotal;

		[Token(Token = "0x4000C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TextMeshProUGUI[] redHitPercent;

		[Token(Token = "0x4000C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI[] redJabsLanded;

		[Token(Token = "0x4000C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public TextMeshProUGUI[] redJabsTotal;

		[Token(Token = "0x4000C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI[] redJabsPercent;

		[Token(Token = "0x4000C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public TextMeshProUGUI[] redPowerLanded;

		[Token(Token = "0x4000C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextMeshProUGUI[] redPowerTotal;

		[Token(Token = "0x4000C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public TextMeshProUGUI[] redPowerPercent;

		[Token(Token = "0x4000C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TextMeshProUGUI[] blueLanded;

		[Token(Token = "0x4000C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public TextMeshProUGUI[] blueTotal;

		[Token(Token = "0x4000C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public TextMeshProUGUI[] blueHitPercent;

		[Token(Token = "0x4000C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public TextMeshProUGUI[] blueJabsLanded;

		[Token(Token = "0x4000C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public TextMeshProUGUI[] blueJabsTotal;

		[Token(Token = "0x4000C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public TextMeshProUGUI[] blueJabsPercent;

		[Token(Token = "0x4000C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public TextMeshProUGUI[] bluePowerLanded;

		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public TextMeshProUGUI[] bluePowerTotal;

		[Token(Token = "0x4000C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public TextMeshProUGUI[] bluePowerPercent;

		[Token(Token = "0x600123D")]
		[Address(RVA = "0x3968B8", Offset = "0x3968B8", VA = "0x3968B8")]
		public void ShowBoutResults()
		{
		}

		[Token(Token = "0x600123E")]
		[Address(RVA = "0x39AAA8", Offset = "0x39AAA8", VA = "0x39AAA8")]
		public PunchStatsGenerator()
		{
		}
	}
	[Token(Token = "0x2000220")]
	public class QuitPoster : MonoBehaviour
	{
		[Token(Token = "0x600123F")]
		[Address(RVA = "0x39AAB0", Offset = "0x39AAB0", VA = "0x39AAB0")]
		private void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x6001240")]
		[Address(RVA = "0x39ABC8", Offset = "0x39ABC8", VA = "0x39ABC8")]
		public QuitPoster()
		{
		}
	}
	[Token(Token = "0x2000221")]
	public class QuitTrigger : MonoBehaviour
	{
		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ProgressRadialBehaviour ProgressBar;

		[Token(Token = "0x4000C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool isCounting;

		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float count;

		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float triggerTime;

		[Token(Token = "0x4000C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool isTriggered;

		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool triggerState;

		[Token(Token = "0x6001241")]
		[Address(RVA = "0x39ABD0", Offset = "0x39ABD0", VA = "0x39ABD0")]
		private void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x6001242")]
		[Address(RVA = "0x39AC58", Offset = "0x39AC58", VA = "0x39AC58")]
		private void OnTriggerExit(Collider collider)
		{
		}

		[Token(Token = "0x6001243")]
		[Address(RVA = "0x39ACE0", Offset = "0x39ACE0", VA = "0x39ACE0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001244")]
		[Address(RVA = "0x39AD28", Offset = "0x39AD28", VA = "0x39AD28")]
		private void Update()
		{
		}

		[Token(Token = "0x6001245")]
		[Address(RVA = "0x39AEE8", Offset = "0x39AEE8", VA = "0x39AEE8")]
		private void StartTimer()
		{
		}

		[Token(Token = "0x6001246")]
		[Address(RVA = "0x39ACE4", Offset = "0x39ACE4", VA = "0x39ACE4")]
		private void ResetTimer()
		{
		}

		[Token(Token = "0x6001247")]
		[Address(RVA = "0x39AEFC", Offset = "0x39AEFC", VA = "0x39AEFC")]
		public void QuitBout()
		{
		}

		[Token(Token = "0x6001248")]
		[Address(RVA = "0x39AF78", Offset = "0x39AF78", VA = "0x39AF78")]
		public QuitTrigger()
		{
		}
	}
	[Token(Token = "0x2000222")]
	public class RadioController : MonoBehaviour
	{
		[Token(Token = "0x2000300")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24196C", Offset = "0x24196C")]
		private sealed class <StreamMusic>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x40010D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private object <>2__current;

			[Token(Token = "0x40010D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string fileName;

			[Token(Token = "0x40010D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public RadioController <>4__this;

			[Token(Token = "0x40010D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private WWW <www>5__2;

			[Token(Token = "0x170001DA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014E6")]
				[Address(RVA = "0x39B94C", Offset = "0x39B94C", VA = "0x39B94C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001DB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014E8")]
				[Address(RVA = "0x39B9DC", Offset = "0x39B9DC", VA = "0x39B9DC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014E2")]
			[Address(RVA = "0x39B420", Offset = "0x39B420", VA = "0x39B420")]
			[DebuggerHidden]
			public <StreamMusic>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x60014E3")]
			[Address(RVA = "0x39B50C", Offset = "0x39B50C", VA = "0x39B50C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014E4")]
			[Address(RVA = "0x39B60C", Offset = "0x39B60C", VA = "0x39B60C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014E5")]
			[Address(RVA = "0x39B534", Offset = "0x39B534", VA = "0x39B534")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60014E7")]
			[Address(RVA = "0x39B954", Offset = "0x39B954", VA = "0x39B954", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public AudioClip[] songs;

		[Token(Token = "0x4000C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int waitFramesBeforeStarting;

		[Token(Token = "0x4000C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int framesToWait;

		[Token(Token = "0x4000C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private AudioSource source;

		[Token(Token = "0x4000C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool useRadio;

		[Token(Token = "0x4000C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int songIndex;

		[Token(Token = "0x4000C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int playlistCount;

		[Token(Token = "0x4000C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool foundSongs;

		[Token(Token = "0x4000C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool attemptingToPlay;

		[Token(Token = "0x4000C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static RadioController instance;

		[Token(Token = "0x600124A")]
		[Address(RVA = "0x39AFE8", Offset = "0x39AFE8", VA = "0x39AFE8")]
		public static void SetRadioVolume(float volume)
		{
		}

		[Token(Token = "0x600124B")]
		[Address(RVA = "0x39B108", Offset = "0x39B108", VA = "0x39B108")]
		private void Start()
		{
		}

		[Token(Token = "0x600124C")]
		[Address(RVA = "0x39B248", Offset = "0x39B248", VA = "0x39B248")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600124D")]
		[Address(RVA = "0x39B2B0", Offset = "0x39B2B0", VA = "0x39B2B0")]
		private void PlaySong(int index)
		{
		}

		[Token(Token = "0x600124E")]
		[Address(RVA = "0x39B2B8", Offset = "0x39B2B8", VA = "0x39B2B8")]
		private void PlaySong()
		{
		}

		[Token(Token = "0x600124F")]
		[Address(RVA = "0x39B378", Offset = "0x39B378", VA = "0x39B378")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x24A328", Offset = "0x24A328")]
		public IEnumerator StreamMusic(string fileName)
		{
			return null;
		}

		[Token(Token = "0x6001250")]
		[Address(RVA = "0x39B440", Offset = "0x39B440", VA = "0x39B440")]
		private void PlayNextSong()
		{
		}

		[Token(Token = "0x6001251")]
		[Address(RVA = "0x39B468", Offset = "0x39B468", VA = "0x39B468")]
		private void Update()
		{
		}

		[Token(Token = "0x6001252")]
		[Address(RVA = "0x39B4FC", Offset = "0x39B4FC", VA = "0x39B4FC")]
		public RadioController()
		{
		}
	}
	[Token(Token = "0x2000223")]
	public class RefereeController : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000301")]
		public struct ClipGroup
		{
			[Token(Token = "0x40010D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public LipSyncData[] clips;
		}

		[Token(Token = "0x2000302")]
		private enum Mode
		{
			[Token(Token = "0x40010D6")]
			Idle,
			[Token(Token = "0x40010D7")]
			Watching,
			[Token(Token = "0x40010D8")]
			Counting
		}

		[Token(Token = "0x4000C4B")]
		private const float clinchDisqualificationTime = 5f;

		[Token(Token = "0x4000C4C")]
		private const float movementAcceleration = 2f;

		[Token(Token = "0x4000C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float scowlRange;

		[Token(Token = "0x4000C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static RefereeController instance;

		[Token(Token = "0x4000C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24737C", Offset = "0x24737C")]
		private bool <isCounting>k__BackingField;

		[Token(Token = "0x4000C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float countdownTimer;

		[Token(Token = "0x4000C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int onSecond;

		[Token(Token = "0x4000C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Transform head;

		[Token(Token = "0x4000C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Quaternion targetFacing;

		[Token(Token = "0x4000C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 targetPosition;

		[Token(Token = "0x4000C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool moveToSpecifiedPosition;

		[Token(Token = "0x4000C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 turnToFacing;

		[Token(Token = "0x4000C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Vector3 moveToPosition;

		[Token(Token = "0x4000C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private BoutController.Corner lookingAtCorner;

		[Token(Token = "0x4000C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private LookAtIK lik;

		[Token(Token = "0x4000C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Animator animator;

		[Token(Token = "0x4000C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int hitLayerIndex;

		[Token(Token = "0x4000C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int hitLayerIndex1;

		[Token(Token = "0x4000C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int hitLayerIndex2;

		[Token(Token = "0x4000C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private LipSync mouth;

		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Transform lookTarget;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool looking;

		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int numberIndex;

		[Token(Token = "0x4000C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float backOffCooldown;

		[Token(Token = "0x4000C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private bool doBlinkCycle;

		[Token(Token = "0x4000C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
		private bool blinking;

		[Token(Token = "0x4000C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float blinkTimer;

		[Token(Token = "0x4000C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public int waitFramesBeforeStarting;

		[Token(Token = "0x4000C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int framesToWait;

		[Token(Token = "0x4000C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected float expressPainTarget;

		[Token(Token = "0x4000C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected float expressPainLevel;

		[Token(Token = "0x4000C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		protected float expressConcernTarget;

		[Token(Token = "0x4000C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected float expressConcernLevel;

		[Token(Token = "0x4000C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected float playerClinchCounter;

		[Token(Token = "0x4000C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public SkinnedMeshRenderer bodyMesh;

		[Token(Token = "0x4000C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public ClipGroup[] countClips;

		[Token(Token = "0x4000C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public LipSyncData[] instructionClips;

		[Token(Token = "0x4000C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public LipSyncData[] backOffClips;

		[Token(Token = "0x4000C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Mode mode;

		[Token(Token = "0x4000C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public EnemyBlendshapes blendshapes;

		[Token(Token = "0x170001B3")]
		public static RefereeController Instance
		{
			[Token(Token = "0x6001253")]
			[Address(RVA = "0x39B9E4", Offset = "0x39B9E4", VA = "0x39B9E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B4")]
		public bool isCounting
		{
			[Token(Token = "0x6001254")]
			[Address(RVA = "0x39BA48", Offset = "0x39BA48", VA = "0x39BA48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A3A0", Offset = "0x24A3A0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001255")]
			[Address(RVA = "0x39BA50", Offset = "0x39BA50", VA = "0x39BA50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A3B0", Offset = "0x24A3B0")]
			set
			{
			}
		}

		[Token(Token = "0x6001256")]
		[Address(RVA = "0x39BA58", Offset = "0x39BA58", VA = "0x39BA58")]
		public static RefereeController Find()
		{
			return null;
		}

		[Token(Token = "0x6001257")]
		[Address(RVA = "0x39BBF0", Offset = "0x39BBF0", VA = "0x39BBF0")]
		public void PlayBackOffClip()
		{
		}

		[Token(Token = "0x6001258")]
		[Address(RVA = "0x39BD78", Offset = "0x39BD78", VA = "0x39BD78")]
		public void Awake()
		{
		}

		[Token(Token = "0x6001259")]
		[Address(RVA = "0x39BF10", Offset = "0x39BF10", VA = "0x39BF10")]
		public void Start()
		{
		}

		[Token(Token = "0x600125A")]
		[Address(RVA = "0x39C308", Offset = "0x39C308", VA = "0x39C308")]
		public void Update()
		{
		}

		[Token(Token = "0x600125B")]
		[Address(RVA = "0x39DFB4", Offset = "0x39DFB4", VA = "0x39DFB4")]
		public void StartCounting()
		{
		}

		[Token(Token = "0x600125C")]
		[Address(RVA = "0x39E0A4", Offset = "0x39E0A4", VA = "0x39E0A4")]
		public void LookAtBoxer(BoutController.Corner corner)
		{
		}

		[Token(Token = "0x600125D")]
		[Address(RVA = "0x39E200", Offset = "0x39E200", VA = "0x39E200")]
		public void LookAtNobody()
		{
		}

		[Token(Token = "0x600125E")]
		[Address(RVA = "0x39D950", Offset = "0x39D950", VA = "0x39D950")]
		public void UpdateLook()
		{
		}

		[Token(Token = "0x600125F")]
		[Address(RVA = "0x39C388", Offset = "0x39C388", VA = "0x39C388")]
		public void UpdateCount()
		{
		}

		[Token(Token = "0x6001260")]
		[Address(RVA = "0x39E434", Offset = "0x39E434", VA = "0x39E434")]
		public void WaveFightEnd()
		{
		}

		[Token(Token = "0x6001261")]
		[Address(RVA = "0x39E388", Offset = "0x39E388", VA = "0x39E388")]
		public void StopCounting(bool startWatching = true)
		{
		}

		[Token(Token = "0x6001262")]
		[Address(RVA = "0x39BD48", Offset = "0x39BD48", VA = "0x39BD48")]
		public void StopTalking()
		{
		}

		[Token(Token = "0x6001263")]
		[Address(RVA = "0x39E244", Offset = "0x39E244", VA = "0x39E244")]
		public void PlayCountClip(int onSecond)
		{
		}

		[Token(Token = "0x6001264")]
		[Address(RVA = "0x39C1BC", Offset = "0x39C1BC", VA = "0x39C1BC")]
		public void PlayInstructions()
		{
		}

		[Token(Token = "0x6001265")]
		[Address(RVA = "0x39E4CC", Offset = "0x39E4CC", VA = "0x39E4CC")]
		public void FocusOnBoxer(BoutController.Corner corner)
		{
		}

		[Token(Token = "0x6001266")]
		[Address(RVA = "0x39E4B8", Offset = "0x39E4B8", VA = "0x39E4B8")]
		public void FocusOnMatch()
		{
		}

		[Token(Token = "0x6001267")]
		[Address(RVA = "0x39E4F4", Offset = "0x39E4F4", VA = "0x39E4F4")]
		public void HoldBack()
		{
		}

		[Token(Token = "0x6001268")]
		[Address(RVA = "0x39E574", Offset = "0x39E574", VA = "0x39E574")]
		public void WaveStart()
		{
		}

		[Token(Token = "0x6001269")]
		[Address(RVA = "0x39E5F8", Offset = "0x39E5F8", VA = "0x39E5F8")]
		public void MoveToNearestNeutralCorner()
		{
		}

		[Token(Token = "0x600126A")]
		[Address(RVA = "0x39E920", Offset = "0x39E920", VA = "0x39E920")]
		public void MoveToRoundStartPosition()
		{
		}

		[Token(Token = "0x600126B")]
		[Address(RVA = "0x39C1AC", Offset = "0x39C1AC", VA = "0x39C1AC")]
		public void GoIdle()
		{
		}

		[Token(Token = "0x600126C")]
		[Address(RVA = "0x39C474", Offset = "0x39C474", VA = "0x39C474")]
		public void UpdateMovement()
		{
		}

		[Token(Token = "0x600126D")]
		[Address(RVA = "0x39EC48", Offset = "0x39EC48", VA = "0x39EC48")]
		public void ReceiveHurtboxCollision(float force, Hurtbox hurtbox, Hitbox hitbox, Collision collision)
		{
		}

		[Token(Token = "0x600126E")]
		[Address(RVA = "0x39F348", Offset = "0x39F348", VA = "0x39F348")]
		protected void HurtboxCollisionAudioResult(float force, Hurtbox hurtbox, Collision collision)
		{
		}

		[Token(Token = "0x600126F")]
		[Address(RVA = "0x39EC80", Offset = "0x39EC80", VA = "0x39EC80")]
		protected void HurtboxCollisionVisualResult(float force, Hurtbox hurtbox, Hitbox hitbox, Collision collision)
		{
		}

		[Token(Token = "0x6001270")]
		[Address(RVA = "0x39F43C", Offset = "0x39F43C", VA = "0x39F43C", Slot = "4")]
		protected virtual void StartBlinkCycle()
		{
		}

		[Token(Token = "0x6001271")]
		[Address(RVA = "0x39F46C", Offset = "0x39F46C", VA = "0x39F46C", Slot = "5")]
		protected virtual void StopBlinkCycle()
		{
		}

		[Token(Token = "0x6001272")]
		[Address(RVA = "0x39F484", Offset = "0x39F484", VA = "0x39F484")]
		protected void HandleBlink()
		{
		}

		[Token(Token = "0x6001273")]
		[Address(RVA = "0x39F520", Offset = "0x39F520", VA = "0x39F520", Slot = "6")]
		protected virtual void MakeBlink()
		{
		}

		[Token(Token = "0x6001274")]
		[Address(RVA = "0x39F65C", Offset = "0x39F65C", VA = "0x39F65C", Slot = "7")]
		protected virtual void StopBlink()
		{
		}

		[Token(Token = "0x6001275")]
		[Address(RVA = "0x39F66C", Offset = "0x39F66C", VA = "0x39F66C")]
		public void ExpressPain(float targetLevel)
		{
		}

		[Token(Token = "0x6001276")]
		[Address(RVA = "0x39F674", Offset = "0x39F674", VA = "0x39F674")]
		public void ExpressConcern(float targetLevel)
		{
		}

		[Token(Token = "0x6001277")]
		[Address(RVA = "0x39DB28", Offset = "0x39DB28", VA = "0x39DB28")]
		public void UpdateExpressions()
		{
		}

		[Token(Token = "0x6001278")]
		[Address(RVA = "0x39BF5C", Offset = "0x39BF5C", VA = "0x39BF5C")]
		private void LoadBlendshapeIndexes()
		{
		}

		[Token(Token = "0x6001279")]
		[Address(RVA = "0x39F8D4", Offset = "0x39F8D4", VA = "0x39F8D4")]
		private void FindBlendshapeIndexes(ref BlendshapeDefinition[] blendshapeDefinitions)
		{
		}

		[Token(Token = "0x600127A")]
		[Address(RVA = "0x39F67C", Offset = "0x39F67C", VA = "0x39F67C")]
		private void SetPainBlendshape(float value)
		{
		}

		[Token(Token = "0x600127B")]
		[Address(RVA = "0x39FB48", Offset = "0x39FB48", VA = "0x39FB48")]
		private void SetBlendShapeWeight(int index, float value)
		{
		}

		[Token(Token = "0x600127C")]
		[Address(RVA = "0x39F530", Offset = "0x39F530", VA = "0x39F530")]
		private void SetBlinkBlendshape(float value)
		{
		}

		[Token(Token = "0x600127D")]
		[Address(RVA = "0x39F7A8", Offset = "0x39F7A8", VA = "0x39F7A8")]
		private void SetFlinchBlendshape(float value)
		{
		}

		[Token(Token = "0x600127E")]
		[Address(RVA = "0x39DD24", Offset = "0x39DD24", VA = "0x39DD24")]
		public void HandleFlinch()
		{
		}

		[Token(Token = "0x600127F")]
		[Address(RVA = "0x39FB84", Offset = "0x39FB84", VA = "0x39FB84")]
		public RefereeController()
		{
		}
	}
	[Token(Token = "0x2000224")]
	public class RefereeHurtbox : Hurtbox
	{
		[Token(Token = "0x4000C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24738C", Offset = "0x24738C")]
		private RefereeController <referee>k__BackingField;

		[Token(Token = "0x170001B5")]
		public RefereeController referee
		{
			[Token(Token = "0x6001280")]
			[Address(RVA = "0x39FBA0", Offset = "0x39FBA0", VA = "0x39FBA0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A3C0", Offset = "0x24A3C0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001281")]
			[Address(RVA = "0x39FBA8", Offset = "0x39FBA8", VA = "0x39FBA8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A3D0", Offset = "0x24A3D0")]
			set
			{
			}
		}

		[Token(Token = "0x6001282")]
		[Address(RVA = "0x39FBB0", Offset = "0x39FBB0", VA = "0x39FBB0", Slot = "6")]
		public override void ReceiveHitboxCollision(float force, Hitbox hitbox, Collision collision)
		{
		}

		[Token(Token = "0x6001283")]
		[Address(RVA = "0x39FC10", Offset = "0x39FC10", VA = "0x39FC10")]
		public RefereeHurtbox()
		{
		}
	}
	[Token(Token = "0x2000225")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x241638", Offset = "0x241638")]
	public class RoundBellController : MonoBehaviour
	{
		[Token(Token = "0x4000C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static RoundBellController instance;

		[Token(Token = "0x4000C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private AudioSource audioSource;

		[Token(Token = "0x4000C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool spatialize;

		[Token(Token = "0x4000C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public AudioClip roundBellClip;

		[Token(Token = "0x4000C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip tenSecondClip;

		[Token(Token = "0x4000C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AudioClip roundEndClip;

		[Token(Token = "0x6001284")]
		[Address(RVA = "0x39FC94", Offset = "0x39FC94", VA = "0x39FC94")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001285")]
		[Address(RVA = "0x39FDAC", Offset = "0x39FDAC", VA = "0x39FDAC")]
		public static void PlayRoundStartClip()
		{
		}

		[Token(Token = "0x6001286")]
		[Address(RVA = "0x3A0008", Offset = "0x3A0008", VA = "0x3A0008")]
		public static void PlayRoundEndClip()
		{
		}

		[Token(Token = "0x6001287")]
		[Address(RVA = "0x3A0264", Offset = "0x3A0264", VA = "0x3A0264")]
		public static void PlayTenSecondClip()
		{
		}

		[Token(Token = "0x6001288")]
		[Address(RVA = "0x3A04C0", Offset = "0x3A04C0", VA = "0x3A04C0")]
		public RoundBellController()
		{
		}
	}
	[Token(Token = "0x2000226")]
	public class RoundScoreUI : MonoBehaviour
	{
		[Token(Token = "0x4000C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Text[] rounds;

		[Token(Token = "0x4000C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Text[] redScores;

		[Token(Token = "0x4000C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Text[] blueScores;

		[Token(Token = "0x6001289")]
		[Address(RVA = "0x3A04D0", Offset = "0x3A04D0", VA = "0x3A04D0")]
		public void UpdateScores(int[][] scores, int round)
		{
		}

		[Token(Token = "0x600128A")]
		[Address(RVA = "0x3A072C", Offset = "0x3A072C", VA = "0x3A072C")]
		public RoundScoreUI()
		{
		}
	}
	[Token(Token = "0x2000227")]
	public class RoundTimerController : MonoBehaviour
	{
		[Token(Token = "0x4000C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public TextMeshProUGUI timerText;

		[Token(Token = "0x4000C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TextMeshProUGUI roundText;

		[Token(Token = "0x4000C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public char padder;

		[Token(Token = "0x4000C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float timer;

		[Token(Token = "0x4000C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool countdown;

		[Token(Token = "0x4000C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		private bool isEnabled;

		[Token(Token = "0x4000C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int storedMinutes;

		[Token(Token = "0x4000C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int storedSeconds;

		[Token(Token = "0x4000C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool registeredEventInAwake;

		[Token(Token = "0x4000C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool countUp;

		[Token(Token = "0x600128B")]
		[Address(RVA = "0x3A0734", Offset = "0x3A0734", VA = "0x3A0734")]
		private void Awake()
		{
		}

		[Token(Token = "0x600128C")]
		[Address(RVA = "0x3A0958", Offset = "0x3A0958", VA = "0x3A0958")]
		private void Start()
		{
		}

		[Token(Token = "0x600128D")]
		[Address(RVA = "0x3A0B24", Offset = "0x3A0B24", VA = "0x3A0B24")]
		private void Update()
		{
		}

		[Token(Token = "0x600128E")]
		[Address(RVA = "0x3A0B94", Offset = "0x3A0B94", VA = "0x3A0B94")]
		public void UpdateTimeValue()
		{
		}

		[Token(Token = "0x600128F")]
		[Address(RVA = "0x3A0D34", Offset = "0x3A0D34", VA = "0x3A0D34")]
		public void TimerUpdate(bool startCounting, bool isRound, float duration, int onRound, int numberOfRounds)
		{
		}

		[Token(Token = "0x6001290")]
		[Address(RVA = "0x3A0DE4", Offset = "0x3A0DE4", VA = "0x3A0DE4")]
		public RoundTimerController()
		{
		}
	}
	[Token(Token = "0x2000228")]
	public class ScoreCardGenerator : MonoBehaviour
	{
		[Token(Token = "0x4000C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public TextMeshProUGUI redCornerName;

		[Token(Token = "0x4000C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TextMeshProUGUI blueCornerName;

		[Token(Token = "0x4000C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public GameObject[] scoreColumns;

		[Token(Token = "0x4000C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshProUGUI[] redTotalColumns;

		[Token(Token = "0x4000C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TextMeshProUGUI[] blueTotalColumns;

		[Token(Token = "0x4000C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI winnerText;

		[Token(Token = "0x4000C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public TextMeshProUGUI winReasonText;

		[Token(Token = "0x4000C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color highScoreColor;

		[Token(Token = "0x4000C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color defaultScoreColor;

		[Token(Token = "0x4000C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Color redCornerColor;

		[Token(Token = "0x4000C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Color blueCornerColor;

		[Token(Token = "0x4000C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject scorecard;

		[Token(Token = "0x4000C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public ScoreDetailsGenerator detailsCard;

		[Token(Token = "0x4000C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public PunchStatsGenerator statCard;

		[Token(Token = "0x4000C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Color selectedColor;

		[Token(Token = "0x4000C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Color defaultColor;

		[Token(Token = "0x4000C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public Image scoreButton;

		[Token(Token = "0x4000C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public TextMeshProUGUI scoreButtonText;

		[Token(Token = "0x4000C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public Image scoreButtonTextIcon;

		[Token(Token = "0x4000C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Image detailsButton;

		[Token(Token = "0x4000C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public TextMeshProUGUI detailsButtonText;

		[Token(Token = "0x4000C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Image detailsButtonTextIcon;

		[Token(Token = "0x4000C9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public Image punchesButton;

		[Token(Token = "0x4000C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public TextMeshProUGUI punchesButtonText;

		[Token(Token = "0x4000C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public Image punchesButtonTextIcon;

		[Token(Token = "0x4000CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private int showingCard;

		[Token(Token = "0x6001291")]
		[Address(RVA = "0x3A0E08", Offset = "0x3A0E08", VA = "0x3A0E08")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6001292")]
		[Address(RVA = "0x3A4CFC", Offset = "0x3A4CFC", VA = "0x3A4CFC")]
		public void ToggleCardsButton(int card)
		{
		}

		[Token(Token = "0x6001293")]
		[Address(RVA = "0x3A4E54", Offset = "0x3A4E54", VA = "0x3A4E54")]
		public void SwitchCard(int card)
		{
		}

		[Token(Token = "0x6001294")]
		[Address(RVA = "0x3A4984", Offset = "0x3A4984", VA = "0x3A4984")]
		private void ShowScorecard()
		{
		}

		[Token(Token = "0x6001295")]
		[Address(RVA = "0x3A4E88", Offset = "0x3A4E88", VA = "0x3A4E88")]
		private void ShowScoreDetails()
		{
		}

		[Token(Token = "0x6001296")]
		[Address(RVA = "0x3A5200", Offset = "0x3A5200", VA = "0x3A5200")]
		private void ShowPunchStats()
		{
		}

		[Token(Token = "0x6001297")]
		[Address(RVA = "0x3A0E8C", Offset = "0x3A0E8C", VA = "0x3A0E8C")]
		public void ShowBoutResults()
		{
		}

		[Token(Token = "0x6001298")]
		[Address(RVA = "0x3A5578", Offset = "0x3A5578", VA = "0x3A5578")]
		public ScoreCardGenerator()
		{
		}
	}
	[Token(Token = "0x2000229")]
	public class ScoreDetailsGenerator : MonoBehaviour
	{
		[Token(Token = "0x4000CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public TextMeshProUGUI redCornerName;

		[Token(Token = "0x4000CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TextMeshProUGUI blueCornerName;

		[Token(Token = "0x4000CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Color highScoreColor;

		[Token(Token = "0x4000CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Color defaultScoreColor;

		[Token(Token = "0x4000CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public TextMeshProUGUI[] redKnockdownsScored;

		[Token(Token = "0x4000CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TextMeshProUGUI[] redDamageTotal;

		[Token(Token = "0x4000CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public TextMeshProUGUI[] redDamagingCount;

		[Token(Token = "0x4000CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public TextMeshProUGUI[] redDamagingTotal;

		[Token(Token = "0x4000CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public TextMeshProUGUI[] redDamagingPercent;

		[Token(Token = "0x4000CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public TextMeshProUGUI[] blueKnockdownsScored;

		[Token(Token = "0x4000CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public TextMeshProUGUI[] blueDamageTotal;

		[Token(Token = "0x4000CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public TextMeshProUGUI[] blueDamagingCount;

		[Token(Token = "0x4000CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public TextMeshProUGUI[] blueDamagingTotal;

		[Token(Token = "0x4000CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public TextMeshProUGUI[] blueDamagingPercent;

		[Token(Token = "0x4000CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public TextMeshProUGUI[] playerMultiplier;

		[Token(Token = "0x4000CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public TextMeshProUGUI[] playerHookMultiplier;

		[Token(Token = "0x6001299")]
		[Address(RVA = "0x3A1EA0", Offset = "0x3A1EA0", VA = "0x3A1EA0")]
		public void ShowBoutResults()
		{
		}

		[Token(Token = "0x600129A")]
		[Address(RVA = "0x3A5580", Offset = "0x3A5580", VA = "0x3A5580")]
		public ScoreDetailsGenerator()
		{
		}
	}
	[Token(Token = "0x200022A")]
	public class ScoreDisplay : MonoBehaviour
	{
		[Token(Token = "0x4000CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public RoundScoreUI roundScorePrefab;

		[Token(Token = "0x4000CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject judgeHeadings;

		[Token(Token = "0x4000CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public GameObject scores;

		[Token(Token = "0x4000CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TotalScoreUI totals;

		[Token(Token = "0x4000CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public GameObject winReason;

		[Token(Token = "0x4000CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text winReasonText;

		[Token(Token = "0x600129B")]
		[Address(RVA = "0x3A5588", Offset = "0x3A5588", VA = "0x3A5588")]
		public ScoreDisplay()
		{
		}
	}
	[Token(Token = "0x200022B")]
	public class ScreenGrabber : MonoBehaviour
	{
		[Token(Token = "0x4000CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Texture2D screenGrabTexture;

		[Token(Token = "0x600129C")]
		[Address(RVA = "0x3A5590", Offset = "0x3A5590", VA = "0x3A5590")]
		private void Awake()
		{
		}

		[Token(Token = "0x600129D")]
		[Address(RVA = "0x3A55F8", Offset = "0x3A55F8", VA = "0x3A55F8")]
		public ScreenGrabber()
		{
		}
	}
	[Token(Token = "0x200022C")]
	public class ScreenUIController : MonoBehaviour
	{
		[Token(Token = "0x4000CB8")]
		private const int charOffset = 48;

		[Token(Token = "0x4000CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public GameObject toggler;

		[Token(Token = "0x4000CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TextMeshProUGUI minutesText;

		[Token(Token = "0x4000CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public TextMeshProUGUI secondsText;

		[Token(Token = "0x4000CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshProUGUI onRoundText;

		[Token(Token = "0x4000CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TextMeshProUGUI totalRoundsText;

		[Token(Token = "0x4000CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RawImage cutoutPhoto;

		[Token(Token = "0x4000CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float timer;

		[Token(Token = "0x4000CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool countdown;

		[Token(Token = "0x4000CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int storedMinutes;

		[Token(Token = "0x4000CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int storedSeconds;

		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool registeredEventInAwake;

		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool countUp;

		[Token(Token = "0x600129E")]
		[Address(RVA = "0x3A5600", Offset = "0x3A5600", VA = "0x3A5600")]
		public static void Enable()
		{
		}

		[Token(Token = "0x600129F")]
		[Address(RVA = "0x3A5604", Offset = "0x3A5604", VA = "0x3A5604")]
		public static void Disable()
		{
		}

		[Token(Token = "0x60012A0")]
		[Address(RVA = "0x3A5608", Offset = "0x3A5608", VA = "0x3A5608")]
		private void Awake()
		{
		}

		[Token(Token = "0x60012A1")]
		[Address(RVA = "0x3A5908", Offset = "0x3A5908", VA = "0x3A5908")]
		private void Start()
		{
		}

		[Token(Token = "0x60012A2")]
		[Address(RVA = "0x3A5C0C", Offset = "0x3A5C0C", VA = "0x3A5C0C")]
		private void Update()
		{
		}

		[Token(Token = "0x60012A3")]
		[Address(RVA = "0x3A5C7C", Offset = "0x3A5C7C", VA = "0x3A5C7C")]
		public void UpdateTimeValue()
		{
		}

		[Token(Token = "0x60012A4")]
		[Address(RVA = "0x3A637C", Offset = "0x3A637C", VA = "0x3A637C")]
		public void TimerUpdate(bool startCounting, bool isRound, float duration, int onRound, int numberOfRounds)
		{
		}

		[Token(Token = "0x60012A5")]
		[Address(RVA = "0x3A5DB4", Offset = "0x3A5DB4", VA = "0x3A5DB4")]
		private static string IntToString(int intVal, bool pad = false)
		{
			return null;
		}

		[Token(Token = "0x60012A6")]
		[Address(RVA = "0x3A64C0", Offset = "0x3A64C0", VA = "0x3A64C0")]
		public ScreenUIController()
		{
		}
	}
	[Token(Token = "0x200022D")]
	public class SensorPlacementButton : MonoBehaviour
	{
		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int type;

		[Token(Token = "0x4000CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Button button;

		[Token(Token = "0x4000CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Text text;

		[Token(Token = "0x4000CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject turnMenu;

		[Token(Token = "0x4000CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private SensorPlacementButton[] buttons;

		[Token(Token = "0x60012A7")]
		[Address(RVA = "0x3A64D4", Offset = "0x3A64D4", VA = "0x3A64D4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60012A8")]
		[Address(RVA = "0x3A65B4", Offset = "0x3A65B4", VA = "0x3A65B4")]
		private void Start()
		{
		}

		[Token(Token = "0x60012A9")]
		[Address(RVA = "0x3A6760", Offset = "0x3A6760", VA = "0x3A6760")]
		private void OnTriggerEnter()
		{
		}

		[Token(Token = "0x60012AA")]
		[Address(RVA = "0x3A6630", Offset = "0x3A6630", VA = "0x3A6630")]
		public void Press()
		{
		}

		[Token(Token = "0x60012AB")]
		[Address(RVA = "0x3A684C", Offset = "0x3A684C", VA = "0x3A684C")]
		public void Depress()
		{
		}

		[Token(Token = "0x60012AC")]
		[Address(RVA = "0x3A693C", Offset = "0x3A693C", VA = "0x3A693C")]
		public SensorPlacementButton()
		{
		}
	}
	[Token(Token = "0x200022E")]
	public class SettingsMenu : ChildMenuManager
	{
		[Token(Token = "0x2000303")]
		public enum AAValue
		{
			[Token(Token = "0x40010DA")]
			Auto,
			[Token(Token = "0x40010DB")]
			None,
			[Token(Token = "0x40010DC")]
			MSAA2x,
			[Token(Token = "0x40010DD")]
			MSAA4x,
			[Token(Token = "0x40010DE")]
			MSAA8x
		}

		[Token(Token = "0x4000CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24739C", Offset = "0x24739C")]
		private HomeMenuManager <homeManager>k__BackingField;

		[Token(Token = "0x4000CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public GameObject calibrateControllerButton;

		[Token(Token = "0x4000CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject turnInOption;

		[Token(Token = "0x4000CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public GameObject turnOutOption;

		[Token(Token = "0x4000CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject punchForceSliderParent;

		[Token(Token = "0x4000CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Slider punchForceSlider;

		[Token(Token = "0x4000CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI multiplierText;

		[Token(Token = "0x4000CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Slider hookForceSlider;

		[Token(Token = "0x4000CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextMeshProUGUI hookMultiplierText;

		[Token(Token = "0x4000CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public SettingsToggleGroup controllerPositionToggle;

		[Token(Token = "0x4000CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SettingsToggleGroup controllerOutlineToggle;

		[Token(Token = "0x4000CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public SettingsToggleGroup cameraToggle;

		[Token(Token = "0x4000CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SettingsToggleGroup forwardToggle;

		[Token(Token = "0x4000CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public SettingsToggleGroup turnToggle;

		[Token(Token = "0x4000CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public SettingsToggleGroup shortsToggle;

		[Token(Token = "0x4000CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public SettingsToggleGroup driftProtectionToggle;

		[Token(Token = "0x4000CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SettingsToggleGroup impactEffectToggle;

		[Token(Token = "0x4000CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public SettingsToggleGroup audienceToggle;

		[Token(Token = "0x4000CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public SettingsToggleGroup shadowToggle;

		[Token(Token = "0x4000CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public TotFSlider aaSlider;

		[Token(Token = "0x4000CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public TotFSlider radioSlider;

		[Token(Token = "0x4000CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public TotFSlider crowdVolumeSlider;

		[Token(Token = "0x4000CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public TotFSlider brightnessSlider;

		[Token(Token = "0x4000CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public TotFSlider gloveSizeSlider;

		[Token(Token = "0x4000CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Toggle autoPunchForceToggle;

		[Token(Token = "0x4000CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private bool showCameraValue;

		[Token(Token = "0x170001B6")]
		public HomeMenuManager homeManager
		{
			[Token(Token = "0x60012AD")]
			[Address(RVA = "0x3A6944", Offset = "0x3A6944", VA = "0x3A6944")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A3E0", Offset = "0x24A3E0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012AE")]
			[Address(RVA = "0x3A694C", Offset = "0x3A694C", VA = "0x3A694C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A3F0", Offset = "0x24A3F0")]
			set
			{
			}
		}

		[Token(Token = "0x60012AF")]
		[Address(RVA = "0x3A6954", Offset = "0x3A6954", VA = "0x3A6954", Slot = "4")]
		public override void OpenMenu()
		{
		}

		[Token(Token = "0x60012B0")]
		[Address(RVA = "0x3A6C28", Offset = "0x3A6C28", VA = "0x3A6C28")]
		private void Update()
		{
		}

		[Token(Token = "0x60012B1")]
		[Address(RVA = "0x3A6974", Offset = "0x3A6974", VA = "0x3A6974")]
		public void Initialize()
		{
		}

		[Token(Token = "0x60012B2")]
		[Address(RVA = "0x3A72A8", Offset = "0x3A72A8", VA = "0x3A72A8")]
		public void SetControllerPosition(int value)
		{
		}

		[Token(Token = "0x60012B3")]
		[Address(RVA = "0x3A6E7C", Offset = "0x3A6E7C", VA = "0x3A6E7C")]
		public void ShowCalibrateButton(int value)
		{
		}

		[Token(Token = "0x60012B4")]
		[Address(RVA = "0x3A7300", Offset = "0x3A7300", VA = "0x3A7300")]
		public void SetControllerOutline(int value)
		{
		}

		[Token(Token = "0x60012B5")]
		[Address(RVA = "0x3A7410", Offset = "0x3A7410", VA = "0x3A7410")]
		public void SetShowShorts(int value)
		{
		}

		[Token(Token = "0x60012B6")]
		[Address(RVA = "0x3A7534", Offset = "0x3A7534", VA = "0x3A7534")]
		public void SetImpactEffect(int value)
		{
		}

		[Token(Token = "0x60012B7")]
		[Address(RVA = "0x3A75A8", Offset = "0x3A75A8", VA = "0x3A75A8")]
		public void SetDisplayAudience(int value)
		{
		}

		[Token(Token = "0x60012B8")]
		[Address(RVA = "0x3A7610", Offset = "0x3A7610", VA = "0x3A7610")]
		public void SetDriftProtection(int value)
		{
		}

		[Token(Token = "0x60012B9")]
		[Address(RVA = "0x3A76DC", Offset = "0x3A76DC", VA = "0x3A76DC")]
		public void SetThirdPersonCamera(int value)
		{
		}

		[Token(Token = "0x60012BA")]
		[Address(RVA = "0x3A712C", Offset = "0x3A712C", VA = "0x3A712C")]
		public void SetRadioVolumeSlider(int value)
		{
		}

		[Token(Token = "0x60012BB")]
		[Address(RVA = "0x3A7B18", Offset = "0x3A7B18", VA = "0x3A7B18")]
		public void SetRadioVolumeValue(float floatValue)
		{
		}

		[Token(Token = "0x60012BC")]
		[Address(RVA = "0x3A71B0", Offset = "0x3A71B0", VA = "0x3A71B0")]
		public void SetCrowdVolumeSlider(int prefValue)
		{
		}

		[Token(Token = "0x60012BD")]
		[Address(RVA = "0x3A7C8C", Offset = "0x3A7C8C", VA = "0x3A7C8C")]
		public void SetCrowdVolumeValue(float sliderValue)
		{
		}

		[Token(Token = "0x60012BE")]
		[Address(RVA = "0x3A7DAC", Offset = "0x3A7DAC", VA = "0x3A7DAC")]
		public void SetBrightnessSlider(int prefValue)
		{
		}

		[Token(Token = "0x60012BF")]
		[Address(RVA = "0x3A7E30", Offset = "0x3A7E30", VA = "0x3A7E30")]
		public void SetBrightnessValue(float sliderValue)
		{
		}

		[Token(Token = "0x60012C0")]
		[Address(RVA = "0x3A7234", Offset = "0x3A7234", VA = "0x3A7234")]
		public void SetGloveSizeSlider(int value)
		{
		}

		[Token(Token = "0x60012C1")]
		[Address(RVA = "0x3A7FEC", Offset = "0x3A7FEC", VA = "0x3A7FEC")]
		public void SetGloveSizeValue(float floatValue)
		{
		}

		[Token(Token = "0x60012C2")]
		[Address(RVA = "0x3A8148", Offset = "0x3A8148", VA = "0x3A8148")]
		public void SetForceForwardFacing(int value)
		{
		}

		[Token(Token = "0x60012C3")]
		[Address(RVA = "0x3A81C0", Offset = "0x3A81C0", VA = "0x3A81C0")]
		public void ShowTurnOptions(int value)
		{
		}

		[Token(Token = "0x60012C4")]
		[Address(RVA = "0x3A821C", Offset = "0x3A821C", VA = "0x3A821C")]
		public void SetTurnDirection(int value)
		{
		}

		[Token(Token = "0x60012C5")]
		[Address(RVA = "0x3A8284", Offset = "0x3A8284", VA = "0x3A8284")]
		public void SetPunchForceAutomatic()
		{
		}

		[Token(Token = "0x60012C6")]
		[Address(RVA = "0x3A6EB8", Offset = "0x3A6EB8", VA = "0x3A6EB8")]
		public void ShowForceSlider(int value)
		{
		}

		[Token(Token = "0x60012C7")]
		[Address(RVA = "0x3A84C4", Offset = "0x3A84C4", VA = "0x3A84C4")]
		public void SetManualPunchForceValue(float floatValue)
		{
		}

		[Token(Token = "0x60012C8")]
		[Address(RVA = "0x3A8804", Offset = "0x3A8804", VA = "0x3A8804")]
		public void SetManualHookForceValue(float floatValue)
		{
		}

		[Token(Token = "0x60012C9")]
		[Address(RVA = "0x3A8B44", Offset = "0x3A8B44", VA = "0x3A8B44")]
		public void CloseButtonPressed()
		{
		}

		[Token(Token = "0x60012CA")]
		[Address(RVA = "0x3A8CCC", Offset = "0x3A8CCC", VA = "0x3A8CCC")]
		public void StartCalibration()
		{
		}

		[Token(Token = "0x60012CB")]
		[Address(RVA = "0x3A8E48", Offset = "0x3A8E48", VA = "0x3A8E48")]
		public SettingsMenu()
		{
		}
	}
	[Token(Token = "0x200022F")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x2416B0", Offset = "0x2416B0")]
	public class SettingsToggle : MonoBehaviour
	{
		[Token(Token = "0x4000CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int value;

		[Token(Token = "0x4000CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Toggle _toggle;

		[Token(Token = "0x4000CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2473AC", Offset = "0x2473AC")]
		private SettingsToggleGroup <toggleGroup>k__BackingField;

		[Token(Token = "0x170001B7")]
		public Toggle toggle
		{
			[Token(Token = "0x60012CC")]
			[Address(RVA = "0x3A8E50", Offset = "0x3A8E50", VA = "0x3A8E50")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B8")]
		public SettingsToggleGroup toggleGroup
		{
			[Token(Token = "0x60012CD")]
			[Address(RVA = "0x3A8F04", Offset = "0x3A8F04", VA = "0x3A8F04")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A400", Offset = "0x24A400")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012CE")]
			[Address(RVA = "0x3A8F0C", Offset = "0x3A8F0C", VA = "0x3A8F0C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A410", Offset = "0x24A410")]
			set
			{
			}
		}

		[Token(Token = "0x60012CF")]
		[Address(RVA = "0x3A8F14", Offset = "0x3A8F14", VA = "0x3A8F14")]
		public void Awake()
		{
		}

		[Token(Token = "0x60012D0")]
		[Address(RVA = "0x3A90C8", Offset = "0x3A90C8", VA = "0x3A90C8")]
		public void FakePointerDownAsClick(PointerEventData data)
		{
		}

		[Token(Token = "0x60012D1")]
		[Address(RVA = "0x3A9270", Offset = "0x3A9270", VA = "0x3A9270")]
		public void ReportToToggleGroup()
		{
		}

		[Token(Token = "0x60012D2")]
		[Address(RVA = "0x3A9304", Offset = "0x3A9304", VA = "0x3A9304")]
		public SettingsToggle()
		{
		}

		[Token(Token = "0x60012D3")]
		[Address(RVA = "0x3A930C", Offset = "0x3A930C", VA = "0x3A930C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A420", Offset = "0x24A420")]
		private void <Awake>b__8_0(BaseEventData data)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000230")]
	public class SettingsToggleEvent : UnityEvent<int>
	{
		[Token(Token = "0x60012D4")]
		[Address(RVA = "0x3A93AC", Offset = "0x3A93AC", VA = "0x3A93AC")]
		public SettingsToggleEvent()
		{
		}
	}
	[Token(Token = "0x2000231")]
	public class SettingsToggleGroup : MonoBehaviour
	{
		[Token(Token = "0x4000CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public SettingsToggleEvent action;

		[Token(Token = "0x4000CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private SettingsToggle[] toggles;

		[Token(Token = "0x60012D5")]
		[Address(RVA = "0x3A9410", Offset = "0x3A9410", VA = "0x3A9410")]
		public void Awake()
		{
		}

		[Token(Token = "0x60012D6")]
		[Address(RVA = "0x3A6D30", Offset = "0x3A6D30", VA = "0x3A6D30")]
		public void SetValue(int value)
		{
		}

		[Token(Token = "0x60012D7")]
		[Address(RVA = "0x3A94F4", Offset = "0x3A94F4", VA = "0x3A94F4")]
		public SettingsToggleGroup()
		{
		}
	}
	[Token(Token = "0x2000232")]
	public class SkinnedAudienceController : AudienceController
	{
		[Token(Token = "0x4000CE9")]
		private const float speedMin = 0.8f;

		[Token(Token = "0x4000CEA")]
		private const float speedMax = 1.2f;

		[Token(Token = "0x4000CEB")]
		private const float cheerTime = 2.5f;

		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Animator animator;

		[Token(Token = "0x4000CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool cheering;

		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float cheerTimer;

		[Token(Token = "0x60012D8")]
		[Address(RVA = "0x3A94FC", Offset = "0x3A94FC", VA = "0x3A94FC")]
		public void Awake()
		{
		}

		[Token(Token = "0x60012D9")]
		[Address(RVA = "0x3A95B4", Offset = "0x3A95B4", VA = "0x3A95B4")]
		private void Update()
		{
		}

		[Token(Token = "0x60012DA")]
		[Address(RVA = "0x3A9604", Offset = "0x3A9604", VA = "0x3A9604", Slot = "4")]
		public override void Cheer()
		{
		}

		[Token(Token = "0x60012DB")]
		[Address(RVA = "0x3A96EC", Offset = "0x3A96EC", VA = "0x3A96EC")]
		public SkinnedAudienceController()
		{
		}
	}
	[Token(Token = "0x2000233")]
	public class SliderScrollbar : MonoBehaviour
	{
		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ScrollRect scrollRect;

		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool vertical;

		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Slider slider;

		[Token(Token = "0x60012DC")]
		[Address(RVA = "0x3A96F4", Offset = "0x3A96F4", VA = "0x3A96F4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60012DD")]
		[Address(RVA = "0x3A975C", Offset = "0x3A975C", VA = "0x3A975C")]
		public void ChangeScrollPos()
		{
		}

		[Token(Token = "0x60012DE")]
		[Address(RVA = "0x3A99AC", Offset = "0x3A99AC", VA = "0x3A99AC")]
		public SliderScrollbar()
		{
		}
	}
	[Token(Token = "0x2000234")]
	public class SpectatorCamera : MonoBehaviour
	{
		[Token(Token = "0x4000CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string prefLabel;

		[Token(Token = "0x4000CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static List<SpectatorCamera> cameras;

		[Token(Token = "0x4000CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static bool init;

		[Token(Token = "0x4000CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		public static bool camerasEnabled;

		[Token(Token = "0x4000CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private bool localInit;

		[Token(Token = "0x4000CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected Camera cameraComponent;

		[Token(Token = "0x60012DF")]
		[Address(RVA = "0x3A99BC", Offset = "0x3A99BC", VA = "0x3A99BC")]
		public static void Initialize()
		{
		}

		[Token(Token = "0x60012E0")]
		[Address(RVA = "0x3A7798", Offset = "0x3A7798", VA = "0x3A7798")]
		public static void Enable()
		{
		}

		[Token(Token = "0x60012E1")]
		[Address(RVA = "0x3A793C", Offset = "0x3A793C", VA = "0x3A793C")]
		public static void Disable()
		{
		}

		[Token(Token = "0x60012E2")]
		[Address(RVA = "0x3A9B58", Offset = "0x3A9B58", VA = "0x3A9B58")]
		public static void Toggle()
		{
		}

		[Token(Token = "0x60012E3")]
		[Address(RVA = "0x3A9C50", Offset = "0x3A9C50", VA = "0x3A9C50", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60012E4")]
		[Address(RVA = "0x3A9D74", Offset = "0x3A9D74", VA = "0x3A9D74", Slot = "5")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x60012E5")]
		[Address(RVA = "0x3A9E3C", Offset = "0x3A9E3C", VA = "0x3A9E3C")]
		public void TurnOn()
		{
		}

		[Token(Token = "0x60012E6")]
		[Address(RVA = "0x3A9E74", Offset = "0x3A9E74", VA = "0x3A9E74")]
		public void TurnOff()
		{
		}

		[Token(Token = "0x60012E7")]
		[Address(RVA = "0x3A9AF8", Offset = "0x3A9AF8", VA = "0x3A9AF8")]
		public void EnableInstance()
		{
		}

		[Token(Token = "0x60012E8")]
		[Address(RVA = "0x3A9B28", Offset = "0x3A9B28", VA = "0x3A9B28")]
		public void DisableInstance()
		{
		}

		[Token(Token = "0x60012E9")]
		[Address(RVA = "0x3A9EAC", Offset = "0x3A9EAC", VA = "0x3A9EAC")]
		public SpectatorCamera()
		{
		}
	}
	[Token(Token = "0x2000235")]
	public class SpeedBagCollider : Equipment
	{
		[Token(Token = "0x4000CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SpeedBagController controller;

		[Token(Token = "0x60012EB")]
		[Address(RVA = "0x3A9F40", Offset = "0x3A9F40", VA = "0x3A9F40")]
		public void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60012EC")]
		[Address(RVA = "0x3AA78C", Offset = "0x3AA78C", VA = "0x3AA78C")]
		public SpeedBagCollider()
		{
		}
	}
	[Token(Token = "0x2000236")]
	public class SpeedBagController : MonoBehaviour, IFixedUpdateable
	{
		[Token(Token = "0x4000CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static SpeedBagController instance;

		[Token(Token = "0x4000CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Transform trainer;

		[Token(Token = "0x4000CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SpectatorCamera spectatorCamera;

		[Token(Token = "0x4000CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public GameObject uiCanvas;

		[Token(Token = "0x4000CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool initialized;

		[Token(Token = "0x4000CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private string defaultVal;

		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform trainerSmallSpacePosition;

		[Token(Token = "0x4000D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Transform trainerLargeSpacePosition;

		[Token(Token = "0x4000D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float trainerSmallPositionWidth;

		[Token(Token = "0x4000D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float trainerSmallPositionDepth;

		[Token(Token = "0x4000D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioClip fistImpactClip;

		[Token(Token = "0x4000D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public AudioClip backstopImpactClip;

		[Token(Token = "0x4000D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Rigidbody bagRb;

		[Token(Token = "0x4000D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Transform bagModel;

		[Token(Token = "0x4000D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool hitFistThisUpdate;

		[Token(Token = "0x4000D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float timeSinceLastHit;

		[Token(Token = "0x4000D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool countTimeSinceLastHit;

		[Token(Token = "0x4000D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int bestHpm1;

		[Token(Token = "0x4000D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int bestHpm2;

		[Token(Token = "0x4000D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float forceNeededForMaxVolume;

		[Token(Token = "0x4000D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float bagRotation;

		[Token(Token = "0x4000D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float bagVelocity;

		[Token(Token = "0x4000D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float bagAngleLimit;

		[Token(Token = "0x4000D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float bagVelocityWindResistance;

		[Token(Token = "0x4000D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float bagKickVelocity;

		[Token(Token = "0x4000D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float fistBounceEnergy;

		[Token(Token = "0x4000D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float backstopBounceEnergy;

		[Token(Token = "0x4000D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float fistEnergyMultiplier;

		[Token(Token = "0x4000D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float bagMpsToDps;

		[Token(Token = "0x4000D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float timeLengthOne;

		[Token(Token = "0x4000D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float timeLengthTwo;

		[Token(Token = "0x4000D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public TextMeshProUGUI timeOneText;

		[Token(Token = "0x4000D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public TextMeshProUGUI timeTwoText;

		[Token(Token = "0x4000D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public TextMeshProUGUI bestTimeOneText;

		[Token(Token = "0x4000D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public TextMeshProUGUI bestTimeTwoText;

		[Token(Token = "0x4000D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private List<float> hitTimes1List;

		[Token(Token = "0x4000D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private List<float> hitTimes2List;

		[Token(Token = "0x4000D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private bool eventOn;

		[Token(Token = "0x4000D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float lastFixedUpdateRotation;

		[Token(Token = "0x60012ED")]
		[Address(RVA = "0x3AA794", Offset = "0x3AA794", VA = "0x3AA794")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60012EE")]
		[Address(RVA = "0x3AA8B8", Offset = "0x3AA8B8", VA = "0x3AA8B8")]
		public static void InitializeSpeedBag()
		{
		}

		[Token(Token = "0x60012EF")]
		[Address(RVA = "0x3AA98C", Offset = "0x3AA98C", VA = "0x3AA98C")]
		public void Initialize()
		{
		}

		[Token(Token = "0x60012F0")]
		[Address(RVA = "0x3AAFE0", Offset = "0x3AAFE0", VA = "0x3AAFE0")]
		public void DeinitializeSpeedBag()
		{
		}

		[Token(Token = "0x60012F1")]
		[Address(RVA = "0x3AB150", Offset = "0x3AB150", VA = "0x3AB150")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x60012F2")]
		[Address(RVA = "0x3AB158", Offset = "0x3AB158", VA = "0x3AB158")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x60012F3")]
		[Address(RVA = "0x3AB160", Offset = "0x3AB160", VA = "0x3AB160")]
		public void Awake()
		{
		}

		[Token(Token = "0x60012F4")]
		[Address(RVA = "0x3AB234", Offset = "0x3AB234", VA = "0x3AB234")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x60012F5")]
		[Address(RVA = "0x3AB240", Offset = "0x3AB240", VA = "0x3AB240")]
		[AttributeAttribute(Name = "InspectAttribute", RVA = "0x24A430", Offset = "0x24A430")]
		public void KickBag()
		{
		}

		[Token(Token = "0x60012F6")]
		[Address(RVA = "0x3AB24C", Offset = "0x3AB24C", VA = "0x3AB24C")]
		[AttributeAttribute(Name = "InspectAttribute", RVA = "0x24A440", Offset = "0x24A440")]
		public void KickBagBack()
		{
		}

		[Token(Token = "0x60012F7")]
		[Address(RVA = "0x3AB25C", Offset = "0x3AB25C", VA = "0x3AB25C", Slot = "4")]
		public void CustomFixedUpdate()
		{
		}

		[Token(Token = "0x60012F8")]
		[Address(RVA = "0x3ABC28", Offset = "0x3ABC28", VA = "0x3ABC28")]
		public void PostSimulation()
		{
		}

		[Token(Token = "0x60012F9")]
		[Address(RVA = "0x3ABC2C", Offset = "0x3ABC2C", VA = "0x3ABC2C")]
		private void Update()
		{
		}

		[Token(Token = "0x60012FA")]
		[Address(RVA = "0x3AB734", Offset = "0x3AB734", VA = "0x3AB734")]
		private void BackstopHit(float intensity)
		{
		}

		[Token(Token = "0x60012FB")]
		[Address(RVA = "0x3ABF30", Offset = "0x3ABF30", VA = "0x3ABF30")]
		public void ResetBestHpmButton()
		{
		}

		[Token(Token = "0x60012FC")]
		[Address(RVA = "0x3AA074", Offset = "0x3AA074", VA = "0x3AA074")]
		public void ColliderHit(Collision collision, PlayerFist hitbox)
		{
		}

		[Token(Token = "0x60012FD")]
		[Address(RVA = "0x3ABE48", Offset = "0x3ABE48", VA = "0x3ABE48")]
		private void SetText(TextMeshProUGUI ui, int val)
		{
		}

		[Token(Token = "0x60012FE")]
		[Address(RVA = "0x3AAB24", Offset = "0x3AAB24", VA = "0x3AAB24")]
		private void ResetHpm()
		{
		}

		[Token(Token = "0x60012FF")]
		[Address(RVA = "0x3AABE8", Offset = "0x3AABE8", VA = "0x3AABE8")]
		private void ResetBestHpm()
		{
		}

		[Token(Token = "0x6001300")]
		[Address(RVA = "0x3AC080", Offset = "0x3AC080", VA = "0x3AC080")]
		public void Exit()
		{
		}

		[Token(Token = "0x6001301")]
		[Address(RVA = "0x3AC084", Offset = "0x3AC084", VA = "0x3AC084")]
		public void CloseButtonPressed()
		{
		}

		[Token(Token = "0x6001302")]
		[Address(RVA = "0x3AC1DC", Offset = "0x3AC1DC", VA = "0x3AC1DC")]
		public void PlaySpaceUpdated()
		{
		}

		[Token(Token = "0x6001303")]
		[Address(RVA = "0x3AAC24", Offset = "0x3AAC24", VA = "0x3AAC24")]
		public void MovePlayer()
		{
		}

		[Token(Token = "0x6001304")]
		[Address(RVA = "0x3AC1E0", Offset = "0x3AC1E0", VA = "0x3AC1E0")]
		public SpeedBagController()
		{
		}
	}
	[Token(Token = "0x2000237")]
	public class SpeedBagFistCollider : MonoBehaviour
	{
		[Token(Token = "0x6001305")]
		[Address(RVA = "0x3AC2B0", Offset = "0x3AC2B0", VA = "0x3AC2B0")]
		public SpeedBagFistCollider()
		{
		}
	}
	[Token(Token = "0x2000238")]
	public class SpotlightMover : MonoBehaviour
	{
		[Token(Token = "0x4000D20")]
		private const float lightDistance = 20f;

		[Token(Token = "0x4000D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Transform lightBeam;

		[Token(Token = "0x4000D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float xRange;

		[Token(Token = "0x4000D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float yRange;

		[Token(Token = "0x4000D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float zRange;

		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float frequency;

		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float verticalFrequency;

		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float counter;

		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float verticalCounter;

		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private RaycastHit[] results;

		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int audienceLayerMask;

		[Token(Token = "0x6001306")]
		[Address(RVA = "0x3AC2B8", Offset = "0x3AC2B8", VA = "0x3AC2B8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001307")]
		[Address(RVA = "0x3AC348", Offset = "0x3AC348", VA = "0x3AC348")]
		private void Update()
		{
		}

		[Token(Token = "0x6001308")]
		[Address(RVA = "0x3AC568", Offset = "0x3AC568", VA = "0x3AC568")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001309")]
		[Address(RVA = "0x3AC87C", Offset = "0x3AC87C", VA = "0x3AC87C")]
		public SpotlightMover()
		{
		}
	}
	[Token(Token = "0x2000239")]
	public class TextureScroller : MonoBehaviour
	{
		[Token(Token = "0x4000D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float scrollRate;

		[Token(Token = "0x4000D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string textureName;

		[Token(Token = "0x4000D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Material material;

		[Token(Token = "0x4000D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float xOffset;

		[Token(Token = "0x600130A")]
		[Address(RVA = "0x3AC890", Offset = "0x3AC890", VA = "0x3AC890")]
		private void Start()
		{
		}

		[Token(Token = "0x600130B")]
		[Address(RVA = "0x3AC918", Offset = "0x3AC918", VA = "0x3AC918")]
		private void Update()
		{
		}

		[Token(Token = "0x600130C")]
		[Address(RVA = "0x3AC9C0", Offset = "0x3AC9C0", VA = "0x3AC9C0")]
		public TextureScroller()
		{
		}
	}
	[Token(Token = "0x200023A")]
	public class TotalScoreUI : MonoBehaviour
	{
		[Token(Token = "0x4000D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Text[] redScores;

		[Token(Token = "0x4000D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Text[] blueScores;

		[Token(Token = "0x600130D")]
		[Address(RVA = "0x3ACB50", Offset = "0x3ACB50", VA = "0x3ACB50")]
		public void UpdateScores(int[] redTotals, int[] blueTotals)
		{
		}

		[Token(Token = "0x600130E")]
		[Address(RVA = "0x3ACE10", Offset = "0x3ACE10", VA = "0x3ACE10")]
		public TotalScoreUI()
		{
		}
	}
	[Token(Token = "0x200023B")]
	public class TotfSettings
	{
		[Token(Token = "0x2000304")]
		public enum Platform
		{
			[Token(Token = "0x40010E0")]
			Steam,
			[Token(Token = "0x40010E1")]
			Oculus,
			[Token(Token = "0x40010E2")]
			SynthesisVR
		}

		[Token(Token = "0x4000D31")]
		public const bool IsBetaBuild = false;

		[Token(Token = "0x4000D32")]
		public const Platform BuildPlatform = Platform.Oculus;

		[Token(Token = "0x4000D33")]
		public const string OculusAppID = "3008315795852749";

		[Token(Token = "0x4000D34")]
		public const bool DoEntitlementCheck = true;

		[Token(Token = "0x4000D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool didCheckEntitlement;

		[Token(Token = "0x600130F")]
		[Address(RVA = "0x3AD09C", Offset = "0x3AD09C", VA = "0x3AD09C")]
		public TotfSettings()
		{
		}
	}
	[Token(Token = "0x200023C")]
	public class TotFSlider : MonoBehaviour
	{
		[Token(Token = "0x4000D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private TextMeshProUGUI label;

		[Token(Token = "0x4000D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Slider slider;

		[Token(Token = "0x6001311")]
		[Address(RVA = "0x3ACA2C", Offset = "0x3ACA2C", VA = "0x3ACA2C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001312")]
		[Address(RVA = "0x3A7C58", Offset = "0x3A7C58", VA = "0x3A7C58")]
		public void SetLabel(string text)
		{
		}

		[Token(Token = "0x6001313")]
		[Address(RVA = "0x3A7ADC", Offset = "0x3A7ADC", VA = "0x3A7ADC")]
		public void SetValue(float value)
		{
		}

		[Token(Token = "0x6001314")]
		[Address(RVA = "0x3ACB40", Offset = "0x3ACB40", VA = "0x3ACB40")]
		public TotFSlider()
		{
		}
	}
	[Token(Token = "0x200023D")]
	public class TotFTween : MonoBehaviour
	{
		[Token(Token = "0x4000D38")]
		public const int controlNodeCount = 2;

		[Token(Token = "0x6001315")]
		[Address(RVA = "0x3ACB48", Offset = "0x3ACB48", VA = "0x3ACB48")]
		public TotFTween()
		{
		}
	}
	[Token(Token = "0x200023E")]
	public class TrainerHurtbox : Hurtbox
	{
		[Token(Token = "0x4000D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public TrainerController trainer;

		[Token(Token = "0x6001316")]
		[Address(RVA = "0x3AF2F8", Offset = "0x3AF2F8", VA = "0x3AF2F8", Slot = "6")]
		public override void ReceiveHitboxCollision(float force, Hitbox hitbox, Collision collision)
		{
		}

		[Token(Token = "0x6001317")]
		[Address(RVA = "0x3AF368", Offset = "0x3AF368", VA = "0x3AF368")]
		public TrainerHurtbox()
		{
		}
	}
	[Token(Token = "0x200023F")]
	public class UICamera : MonoBehaviour
	{
		[Token(Token = "0x4000D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private RenderTexture renderCopyTo;

		[Token(Token = "0x4000D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Camera cam;

		[Token(Token = "0x4000D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool renderToScreen;

		[Token(Token = "0x6001318")]
		[Address(RVA = "0x3AF3EC", Offset = "0x3AF3EC", VA = "0x3AF3EC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001319")]
		[Address(RVA = "0x3AF494", Offset = "0x3AF494", VA = "0x3AF494")]
		private void OnPostRender()
		{
		}

		[Token(Token = "0x600131A")]
		[Address(RVA = "0x3AF64C", Offset = "0x3AF64C", VA = "0x3AF64C")]
		public UICamera()
		{
		}
	}
	[Token(Token = "0x2000240")]
	public class UIPointerController : MonoBehaviour
	{
		[Token(Token = "0x4000D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float readyTime;

		[Token(Token = "0x4000D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static PlayerUISelector lastHand;

		[Token(Token = "0x4000D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private float readyTimer;

		[Token(Token = "0x600131B")]
		[Address(RVA = "0x3AF65C", Offset = "0x3AF65C", VA = "0x3AF65C")]
		public void Update()
		{
		}

		[Token(Token = "0x600131C")]
		[Address(RVA = "0x3AF698", Offset = "0x3AF698", VA = "0x3AF698")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x600131D")]
		[Address(RVA = "0x3AF728", Offset = "0x3AF728", VA = "0x3AF728")]
		public void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x600131E")]
		[Address(RVA = "0x3AF9B0", Offset = "0x3AF9B0", VA = "0x3AF9B0")]
		public void OnTriggerStay(Collider collider)
		{
		}

		[Token(Token = "0x600131F")]
		[Address(RVA = "0x3AFC20", Offset = "0x3AFC20", VA = "0x3AFC20")]
		public void OnTriggerExit(Collider collider)
		{
		}

		[Token(Token = "0x6001320")]
		[Address(RVA = "0x3AF998", Offset = "0x3AF998", VA = "0x3AF998")]
		public bool IsReady()
		{
			return default(bool);
		}

		[Token(Token = "0x6001321")]
		[Address(RVA = "0x3AFE7C", Offset = "0x3AFE7C", VA = "0x3AFE7C")]
		public static void ButtonPressFeedback(bool deactivatePointer = true)
		{
		}

		[Token(Token = "0x6001322")]
		[Address(RVA = "0x3AFF64", Offset = "0x3AFF64", VA = "0x3AFF64")]
		public UIPointerController()
		{
		}
	}
	[Token(Token = "0x2000241")]
	public class UnlockLevel : MonoBehaviour
	{
		[Token(Token = "0x4000D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string[] unlockConditions;

		[Token(Token = "0x6001324")]
		[Address(RVA = "0x3AFFD8", Offset = "0x3AFFD8", VA = "0x3AFFD8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001325")]
		[Address(RVA = "0x3B0150", Offset = "0x3B0150", VA = "0x3B0150")]
		public UnlockLevel()
		{
		}
	}
	[Token(Token = "0x2000242")]
	public class VariableAudienceGroup : AudienceGroup
	{
		[Token(Token = "0x4000D41")]
		private const float textureScale = 0.5f;

		[Token(Token = "0x4000D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected MaterialPropertyBlock[] props;

		[Token(Token = "0x4000D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float[][] textureOffsetX;

		[Token(Token = "0x4000D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float[][] textureOffsetY;

		[Token(Token = "0x4000D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector4[][] clothesColor;

		[Token(Token = "0x4000D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector4[][] skinColor;

		[Token(Token = "0x4000D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector4[][] hairColor;

		[Token(Token = "0x6001326")]
		[Address(RVA = "0x3B0D20", Offset = "0x3B0D20", VA = "0x3B0D20")]
		private void GenerateStyleMaleAll(int i)
		{
		}

		[Token(Token = "0x6001327")]
		[Address(RVA = "0x3B1CAC", Offset = "0x3B1CAC", VA = "0x3B1CAC")]
		private void GenerateStyleFemaleAll(int i)
		{
		}

		[Token(Token = "0x6001328")]
		[Address(RVA = "0x3B1868", Offset = "0x3B1868", VA = "0x3B1868")]
		private void GenerateColorsForSkinAndHair(out Vector4 skinColor, out Vector4 hairColor)
		{
		}

		[Token(Token = "0x6001329")]
		[Address(RVA = "0x3B1BC8", Offset = "0x3B1BC8", VA = "0x3B1BC8")]
		private Vector4 GenerateColorMasculineColorful()
		{
			return default(Vector4);
		}

		[Token(Token = "0x600132A")]
		[Address(RVA = "0x3B25F4", Offset = "0x3B25F4", VA = "0x3B25F4")]
		private Vector4 GenerateColorFeminineColorful()
		{
			return default(Vector4);
		}

		[Token(Token = "0x600132B")]
		[Address(RVA = "0x3B1B60", Offset = "0x3B1B60", VA = "0x3B1B60")]
		private Vector4 GenerateColorSuit()
		{
			return default(Vector4);
		}

		[Token(Token = "0x600132C")]
		[Address(RVA = "0x3B26F4", Offset = "0x3B26F4", VA = "0x3B26F4", Slot = "4")]
		public override void Initialize(AudienceGenerator generator)
		{
		}

		[Token(Token = "0x600132D")]
		[Address(RVA = "0x3B2E28", Offset = "0x3B2E28", VA = "0x3B2E28", Slot = "6")]
		public override void Draw(Camera camera)
		{
		}

		[Token(Token = "0x600132E")]
		[Address(RVA = "0x3B310C", Offset = "0x3B310C", VA = "0x3B310C")]
		public VariableAudienceGroup()
		{
		}
	}
	[Token(Token = "0x2000243")]
	public class VRController : MonoBehaviour
	{
		[Token(Token = "0x600132F")]
		[Address(RVA = "0x3B0158", Offset = "0x3B0158", VA = "0x3B0158")]
		public VRController()
		{
		}
	}
	[Token(Token = "0x2000244")]
	public class VREventSystem : EventSystem
	{
		[Token(Token = "0x6001330")]
		[Address(RVA = "0x3B0160", Offset = "0x3B0160", VA = "0x3B0160", Slot = "17")]
		protected override void OnApplicationFocus(bool hasFocus)
		{
		}

		[Token(Token = "0x6001331")]
		[Address(RVA = "0x3B016C", Offset = "0x3B016C", VA = "0x3B016C")]
		public VREventSystem()
		{
		}
	}
	[Token(Token = "0x2000245")]
	public class VRGraphicRaycaster : GraphicRaycaster
	{
		[Token(Token = "0x4000D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Collider canvasCollider;

		[Token(Token = "0x4000D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Canvas myCanvas;

		[Token(Token = "0x6001332")]
		[Address(RVA = "0x3B01F0", Offset = "0x3B01F0", VA = "0x3B01F0", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001333")]
		[Address(RVA = "0x3B0350", Offset = "0x3B0350", VA = "0x3B0350", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001334")]
		[Address(RVA = "0x3B0354", Offset = "0x3B0354", VA = "0x3B0354", Slot = "17")]
		public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList)
		{
		}

		[Token(Token = "0x6001335")]
		[Address(RVA = "0x3B0898", Offset = "0x3B0898", VA = "0x3B0898")]
		private LayerMask GetLayerMaskForMyLayer()
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6001336")]
		[Address(RVA = "0x3B08A4", Offset = "0x3B08A4", VA = "0x3B08A4", Slot = "22")]
		public virtual bool RaycastToCanvas(Ray ray3D, out Vector2 o_canvasPos)
		{
			return default(bool);
		}

		[Token(Token = "0x6001337")]
		[Address(RVA = "0x3B04E4", Offset = "0x3B04E4", VA = "0x3B04E4")]
		protected void UpdateSelectedObjects(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001338")]
		[Address(RVA = "0x3B0C9C", Offset = "0x3B0C9C", VA = "0x3B0C9C")]
		public VRGraphicRaycaster()
		{
		}
	}
	[Token(Token = "0x2000246")]
	public class WeighInController : MonoBehaviour
	{
		[Token(Token = "0x4000D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Display display;

		[Token(Token = "0x4000D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject cameraObject;

		[Token(Token = "0x4000D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public AudioSource audioSource;

		[Token(Token = "0x4000D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LayerMask cameraLookMask;

		[Token(Token = "0x4000D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ProgressRadialBehaviour progressBar;

		[Token(Token = "0x4000D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float maxWeight;

		[Token(Token = "0x4000D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float cameraLookTime;

		[Token(Token = "0x4000D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float weightValue;

		[Token(Token = "0x4000D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool exiting;

		[Token(Token = "0x4000D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		private bool inWeighStation;

		[Token(Token = "0x4000D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
		private bool playerLookingAtCamera;

		[Token(Token = "0x4000D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private PlayerController player;

		[Token(Token = "0x4000D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float timer;

		[Token(Token = "0x4000D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool isActive;

		[Token(Token = "0x6001339")]
		[Address(RVA = "0x3B3114", Offset = "0x3B3114", VA = "0x3B3114")]
		private void Start()
		{
		}

		[Token(Token = "0x600133A")]
		[Address(RVA = "0x3B31A8", Offset = "0x3B31A8", VA = "0x3B31A8")]
		private void Update()
		{
		}

		[Token(Token = "0x600133B")]
		[Address(RVA = "0x3B3834", Offset = "0x3B3834", VA = "0x3B3834")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600133C")]
		[Address(RVA = "0x3B3954", Offset = "0x3B3954", VA = "0x3B3954")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x600133D")]
		[Address(RVA = "0x3B3A74", Offset = "0x3B3A74", VA = "0x3B3A74")]
		public void SetActive(bool active)
		{
		}

		[Token(Token = "0x600133E")]
		[Address(RVA = "0x3B3A7C", Offset = "0x3B3A7C", VA = "0x3B3A7C")]
		public WeighInController()
		{
		}
	}
	[Token(Token = "0x2000247")]
	public class WeighInMenuPositioner : MonoBehaviour
	{
		[Token(Token = "0x4000D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private bool tryToPlaceMenu;

		[Token(Token = "0x600133F")]
		[Address(RVA = "0x3B3AA0", Offset = "0x3B3AA0", VA = "0x3B3AA0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001340")]
		[Address(RVA = "0x3B3AAC", Offset = "0x3B3AAC", VA = "0x3B3AAC")]
		public void Update()
		{
		}

		[Token(Token = "0x6001341")]
		[Address(RVA = "0x3B3BC4", Offset = "0x3B3BC4", VA = "0x3B3BC4")]
		public WeighInMenuPositioner()
		{
		}
	}
}
namespace RootMotion.FinalIK
{
	[Token(Token = "0x2000248")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x241728", Offset = "0x241728")]
	public class BoxerIK : IK
	{
		[Serializable]
		[Token(Token = "0x2000305")]
		public class References
		{
			[Token(Token = "0x40010E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Transform root;

			[Token(Token = "0x40010E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Transform pelvis;

			[Token(Token = "0x40010E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform spine;

			[Token(Token = "0x40010E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Transform chest;

			[Token(Token = "0x40010E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform neck;

			[Token(Token = "0x40010E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Transform head;

			[Token(Token = "0x40010E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform leftShoulder;

			[Token(Token = "0x40010EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Transform leftUpperArm;

			[Token(Token = "0x40010EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Transform leftForearm;

			[Token(Token = "0x40010EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Transform leftHand;

			[Token(Token = "0x40010ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Transform rightShoulder;

			[Token(Token = "0x40010EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Transform rightUpperArm;

			[Token(Token = "0x40010EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Transform rightForearm;

			[Token(Token = "0x40010F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Transform rightHand;

			[Token(Token = "0x40010F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x247A48", Offset = "0x247A48")]
			public Transform leftThigh;

			[Token(Token = "0x40010F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x247A7C", Offset = "0x247A7C")]
			public Transform leftCalf;

			[Token(Token = "0x40010F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x247AB0", Offset = "0x247AB0")]
			public Transform leftFoot;

			[Token(Token = "0x40010F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x247AE4", Offset = "0x247AE4")]
			public Transform leftToes;

			[Token(Token = "0x40010F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x247B18", Offset = "0x247B18")]
			public Transform rightThigh;

			[Token(Token = "0x40010F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x247B4C", Offset = "0x247B4C")]
			public Transform rightCalf;

			[Token(Token = "0x40010F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x247B80", Offset = "0x247B80")]
			public Transform rightFoot;

			[Token(Token = "0x40010F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x247BB4", Offset = "0x247BB4")]
			public Transform rightToes;

			[Token(Token = "0x170001DC")]
			public bool isFilled
			{
				[Token(Token = "0x60014EA")]
				[Address(RVA = "0xC52230", Offset = "0xC52230", VA = "0xC52230")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170001DD")]
			public bool isEmpty
			{
				[Token(Token = "0x60014EB")]
				[Address(RVA = "0xC51BB0", Offset = "0xC51BB0", VA = "0xC51BB0")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60014E9")]
			[Address(RVA = "0xC530FC", Offset = "0xC530FC", VA = "0xC530FC")]
			public Transform[] GetTransforms()
			{
				return null;
			}

			[Token(Token = "0x60014EC")]
			[Address(RVA = "0xC50A9C", Offset = "0xC50A9C", VA = "0xC50A9C")]
			public static bool AutoDetectReferences(Transform root, out References references)
			{
				return default(bool);
			}

			[Token(Token = "0x60014ED")]
			[Address(RVA = "0xC52F28", Offset = "0xC52F28", VA = "0xC52F28")]
			public References()
			{
			}
		}

		[Token(Token = "0x4000D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "ContextMenuItemAttribute", RVA = "0x2473BC", Offset = "0x2473BC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2473BC", Offset = "0x2473BC")]
		public References references;

		[Token(Token = "0x4000D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x247434", Offset = "0x247434")]
		public IKSolverBoxer solver;

		[Token(Token = "0x6001342")]
		[Address(RVA = "0xC50904", Offset = "0xC50904", VA = "0xC50904", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x24A450", Offset = "0x24A450")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6001343")]
		[Address(RVA = "0xC50990", Offset = "0xC50990", VA = "0xC50990", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x24A484", Offset = "0x24A484")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6001344")]
		[Address(RVA = "0xC50A1C", Offset = "0xC50A1C", VA = "0xC50A1C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x24A4B8", Offset = "0x24A4B8")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x6001345")]
		[Address(RVA = "0xC50A7C", Offset = "0xC50A7C", VA = "0xC50A7C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x24A4EC", Offset = "0x24A4EC")]
		public void AutoDetectReferences()
		{
		}

		[Token(Token = "0x6001346")]
		[Address(RVA = "0xC510FC", Offset = "0xC510FC", VA = "0xC510FC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x24A520", Offset = "0x24A520")]
		public void GuessHandOrientations()
		{
		}

		[Token(Token = "0x6001347")]
		[Address(RVA = "0xC5159C", Offset = "0xC5159C", VA = "0xC5159C")]
		public void InitiateByHumanDescription(HumanDescription humanDescription)
		{
		}

		[Token(Token = "0x6001348")]
		[Address(RVA = "0xC51B08", Offset = "0xC51B08", VA = "0xC51B08", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6001349")]
		[Address(RVA = "0xC51B10", Offset = "0xC51B10", VA = "0xC51B10", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x600134A")]
		[Address(RVA = "0xC52CD0", Offset = "0xC52CD0", VA = "0xC52CD0", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x600134B")]
		[Address(RVA = "0xC52E8C", Offset = "0xC52E8C", VA = "0xC52E8C")]
		public BoxerIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000249")]
	public class IKSolverBoxer : IKSolver
	{
		[Serializable]
		[Token(Token = "0x2000306")]
		public class Arm : BodyPart
		{
			[Serializable]
			[Token(Token = "0x2000319")]
			public enum ShoulderRotationMode
			{
				[Token(Token = "0x400119E")]
				YawPitch,
				[Token(Token = "0x400119F")]
				FromTo
			}

			[Token(Token = "0x40010F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x247BE8", Offset = "0x247BE8")]
			public Transform target;

			[Token(Token = "0x40010FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x247C1C", Offset = "0x247C1C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x247C1C", Offset = "0x247C1C")]
			public float positionWeight;

			[Token(Token = "0x40010FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x247C6C", Offset = "0x247C6C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x247C6C", Offset = "0x247C6C")]
			public float rotationWeight;

			[Token(Token = "0x40010FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x247CBC", Offset = "0x247CBC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x247CBC", Offset = "0x247CBC")]
			public float swivelOffset;

			[Token(Token = "0x40010FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x247D14", Offset = "0x247D14")]
			public Vector3 wristToPalmAxis;

			[Token(Token = "0x40010FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x247D48", Offset = "0x247D48")]
			public Vector3 palmToThumbAxis;

			[NonSerialized]
			[Token(Token = "0x40010FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[AttributeAttribute(Name = "HideInInspector", RVA = "0x247D7C", Offset = "0x247D7C")]
			public Vector3 IKPosition;

			[NonSerialized]
			[Token(Token = "0x4001100")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[AttributeAttribute(Name = "HideInInspector", RVA = "0x247D8C", Offset = "0x247D8C")]
			public Quaternion IKRotation;

			[NonSerialized]
			[Token(Token = "0x4001101")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[AttributeAttribute(Name = "HideInInspector", RVA = "0x247D9C", Offset = "0x247D9C")]
			public Vector3 bendDirection;

			[NonSerialized]
			[Token(Token = "0x4001102")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			[AttributeAttribute(Name = "HideInInspector", RVA = "0x247DAC", Offset = "0x247DAC")]
			public Vector3 handPositionOffset;

			[Token(Token = "0x4001103")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x247DBC", Offset = "0x247DBC")]
			private Vector3 <position>k__BackingField;

			[Token(Token = "0x4001104")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x247DCC", Offset = "0x247DCC")]
			private Quaternion <rotation>k__BackingField;

			[Token(Token = "0x4001105")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x247DDC", Offset = "0x247DDC")]
			private Vector3 <forearmTargetPosition>k__BackingField;

			[Token(Token = "0x4001106")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x247DEC", Offset = "0x247DEC")]
			private Quaternion <forearmTargetRotation>k__BackingField;

			[Token(Token = "0x4001107")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			private Vector3 chestForwardAxis;

			[Token(Token = "0x4001108")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
			private Vector3 chestUpAxis;

			[Token(Token = "0x4001109")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			private Quaternion chestRotation;

			[Token(Token = "0x400110A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			private Vector3 chestForward;

			[Token(Token = "0x400110B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
			private Vector3 chestUp;

			[Token(Token = "0x400110C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			private Quaternion forearmRelToUpperArm;

			[Token(Token = "0x400110D")]
			private const float yawOffsetAngle = 45f;

			[Token(Token = "0x400110E")]
			private const float pitchOffsetAngle = -30f;

			[Token(Token = "0x170001DE")]
			public Vector3 position
			{
				[Token(Token = "0x60014EE")]
				[Address(RVA = "0xC5DD74", Offset = "0xC5DD74", VA = "0xC5DD74")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24AAC4", Offset = "0x24AAC4")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x60014EF")]
				[Address(RVA = "0xC5DD88", Offset = "0xC5DD88", VA = "0xC5DD88")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24AAD4", Offset = "0x24AAD4")]
				private set
				{
				}
			}

			[Token(Token = "0x170001DF")]
			public Quaternion rotation
			{
				[Token(Token = "0x60014F0")]
				[Address(RVA = "0xC5DD94", Offset = "0xC5DD94", VA = "0xC5DD94")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24AAE4", Offset = "0x24AAE4")]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x60014F1")]
				[Address(RVA = "0xC5DDA4", Offset = "0xC5DDA4", VA = "0xC5DDA4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24AAF4", Offset = "0x24AAF4")]
				private set
				{
				}
			}

			[Token(Token = "0x170001E0")]
			public Vector3 forearmTargetPosition
			{
				[Token(Token = "0x60014F2")]
				[Address(RVA = "0xC5DDB4", Offset = "0xC5DDB4", VA = "0xC5DDB4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24AB04", Offset = "0x24AB04")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x60014F3")]
				[Address(RVA = "0xC5DDC8", Offset = "0xC5DDC8", VA = "0xC5DDC8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24AB14", Offset = "0x24AB14")]
				private set
				{
				}
			}

			[Token(Token = "0x170001E1")]
			public Quaternion forearmTargetRotation
			{
				[Token(Token = "0x60014F4")]
				[Address(RVA = "0xC5DDD4", Offset = "0xC5DDD4", VA = "0xC5DDD4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24AB24", Offset = "0x24AB24")]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x60014F5")]
				[Address(RVA = "0xC5DDE4", Offset = "0xC5DDE4", VA = "0xC5DDE4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24AB34", Offset = "0x24AB34")]
				private set
				{
				}
			}

			[Token(Token = "0x170001E2")]
			private VirtualBone shoulder
			{
				[Token(Token = "0x60014F6")]
				[Address(RVA = "0xC5DDF4", Offset = "0xC5DDF4", VA = "0xC5DDF4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001E3")]
			private VirtualBone upperArm
			{
				[Token(Token = "0x60014F7")]
				[Address(RVA = "0xC5DE34", Offset = "0xC5DE34", VA = "0xC5DE34")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001E4")]
			private VirtualBone forearm
			{
				[Token(Token = "0x60014F8")]
				[Address(RVA = "0xC5DE74", Offset = "0xC5DE74", VA = "0xC5DE74")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001E5")]
			private VirtualBone hand
			{
				[Token(Token = "0x60014F9")]
				[Address(RVA = "0xC5DEB4", Offset = "0xC5DEB4", VA = "0xC5DEB4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014FA")]
			[Address(RVA = "0xC5DEF4", Offset = "0xC5DEF4", VA = "0xC5DEF4", Slot = "6")]
			protected override void LoadBoneLengthsFromHumanDescription(HumanDescription humanDescription, bool isLeft)
			{
			}

			[Token(Token = "0x60014FB")]
			[Address(RVA = "0xC5EA28", Offset = "0xC5EA28", VA = "0xC5EA28", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x60014FC")]
			[Address(RVA = "0xC5F3DC", Offset = "0xC5F3DC", VA = "0xC5F3DC", Slot = "5")]
			public override void PreSolve()
			{
			}

			[Token(Token = "0x60014FD")]
			[Address(RVA = "0xC5F744", Offset = "0xC5F744", VA = "0xC5F744", Slot = "8")]
			public override void ApplyOffsets()
			{
			}

			[Token(Token = "0x60014FE")]
			[Address(RVA = "0xC5F7FC", Offset = "0xC5F7FC", VA = "0xC5F7FC")]
			public void Solve(bool isLeft)
			{
			}

			[Token(Token = "0x60014FF")]
			[Address(RVA = "0xC60CC4", Offset = "0xC60CC4", VA = "0xC60CC4", Slot = "9")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x6001500")]
			[Address(RVA = "0xC60D5C", Offset = "0xC60D5C", VA = "0xC60D5C", Slot = "7")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x6001501")]
			[Address(RVA = "0xC610F8", Offset = "0xC610F8", VA = "0xC610F8")]
			private float DamperValue(float value, float min, float max, float weight = 1f)
			{
				return default(float);
			}

			[Token(Token = "0x6001502")]
			[Address(RVA = "0xC611F8", Offset = "0xC611F8", VA = "0xC611F8")]
			private Vector3 GetBendNormal(Vector3 dir)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001503")]
			[Address(RVA = "0xC617EC", Offset = "0xC617EC", VA = "0xC617EC")]
			private void Visualize(VirtualBone bone1, VirtualBone bone2, VirtualBone bone3, Color color)
			{
			}

			[Token(Token = "0x6001504")]
			[Address(RVA = "0xC5D9C0", Offset = "0xC5D9C0", VA = "0xC5D9C0")]
			public Arm()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000307")]
		public abstract class BodyPart
		{
			[Token(Token = "0x400110F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x247DFC", Offset = "0x247DFC")]
			private float <mag>k__BackingField;

			[Token(Token = "0x4001110")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "HideInInspector", RVA = "0x247E0C", Offset = "0x247E0C")]
			public VirtualBone[] bones;

			[Token(Token = "0x4001111")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			protected bool initiated;

			[Token(Token = "0x4001112")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			protected Vector3 rootPosition;

			[Token(Token = "0x4001113")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			protected Quaternion rootRotation;

			[Token(Token = "0x4001114")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			protected int index;

			[Token(Token = "0x170001E6")]
			public float mag
			{
				[Token(Token = "0x600150B")]
				[Address(RVA = "0xC61A44", Offset = "0xC61A44", VA = "0xC61A44")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24AB44", Offset = "0x24AB44")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x600150C")]
				[Address(RVA = "0xC61A4C", Offset = "0xC61A4C", VA = "0xC61A4C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24AB54", Offset = "0x24AB54")]
				protected set
				{
				}
			}

			[Token(Token = "0x6001505")]
			protected abstract void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasToes, bool hasLegs, int rootIndex, int index);

			[Token(Token = "0x6001506")]
			public abstract void PreSolve();

			[Token(Token = "0x6001507")]
			protected abstract void LoadBoneLengthsFromHumanDescription(HumanDescription humanDescription, bool isLeft);

			[Token(Token = "0x6001508")]
			public abstract void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations);

			[Token(Token = "0x6001509")]
			public abstract void ApplyOffsets();

			[Token(Token = "0x600150A")]
			public abstract void ResetOffsets();

			[Token(Token = "0x600150D")]
			[Address(RVA = "0xC61A54", Offset = "0xC61A54", VA = "0xC61A54")]
			public float CalculateBodyPartLength(int boneCountLimit = 0)
			{
				return default(float);
			}

			[Token(Token = "0x600150E")]
			[Address(RVA = "0xC59518", Offset = "0xC59518", VA = "0xC59518")]
			public void Read(Vector3[] positions, Quaternion[] rotations, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x600150F")]
			[Address(RVA = "0xC62704", Offset = "0xC62704", VA = "0xC62704", Slot = "10")]
			public virtual void InitiateByHumanDescription(HumanDescription humanDescription, bool isLeft = false)
			{
			}

			[Token(Token = "0x6001510")]
			[Address(RVA = "0xC62790", Offset = "0xC62790", VA = "0xC62790")]
			public void MovePosition(Vector3 position)
			{
			}

			[Token(Token = "0x6001511")]
			[Address(RVA = "0xC62984", Offset = "0xC62984", VA = "0xC62984")]
			public void MoveRotation(Quaternion rotation)
			{
			}

			[Token(Token = "0x6001512")]
			[Address(RVA = "0xC62A8C", Offset = "0xC62A8C", VA = "0xC62A8C")]
			public void Translate(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x6001513")]
			[Address(RVA = "0xC5C798", Offset = "0xC5C798", VA = "0xC5C798")]
			public void TranslateRoot(Vector3 newRootPos, Quaternion newRootRot)
			{
			}

			[Token(Token = "0x6001514")]
			[Address(RVA = "0xC60A6C", Offset = "0xC60A6C", VA = "0xC60A6C")]
			public void RotateTo(VirtualBone bone, Quaternion rotation, float weight = 1f)
			{
			}

			[Token(Token = "0x6001515")]
			[Address(RVA = "0xC62AC0", Offset = "0xC62AC0", VA = "0xC62AC0")]
			public void Visualize(Color color)
			{
			}

			[Token(Token = "0x6001516")]
			[Address(RVA = "0xC62C74", Offset = "0xC62C74", VA = "0xC62C74")]
			public void Visualize()
			{
			}

			[Token(Token = "0x6001517")]
			[Address(RVA = "0xC61974", Offset = "0xC61974", VA = "0xC61974")]
			protected BodyPart()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000308")]
		public class Footstep
		{
			[Token(Token = "0x4001115")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float stepSpeed;

			[Token(Token = "0x4001116")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 characterSpaceOffset;

			[Token(Token = "0x4001117")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 position;

			[Token(Token = "0x4001118")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Quaternion rotation;

			[Token(Token = "0x4001119")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Quaternion stepToRootRot;

			[Token(Token = "0x400111A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public bool isSupportLeg;

			[Token(Token = "0x400111B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x247E1C", Offset = "0x247E1C")]
			private float <stepProgress>k__BackingField;

			[Token(Token = "0x400111C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public Vector3 stepFrom;

			[Token(Token = "0x400111D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Vector3 stepTo;

			[Token(Token = "0x400111E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			public Quaternion stepFromRot;

			[Token(Token = "0x400111F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			public Quaternion stepToRot;

			[Token(Token = "0x4001120")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			private Quaternion footRelativeToRoot;

			[Token(Token = "0x4001121")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			private float supportLegW;

			[Token(Token = "0x4001122")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			private float supportLegWV;

			[Token(Token = "0x170001E7")]
			public bool isStepping
			{
				[Token(Token = "0x6001518")]
				[Address(RVA = "0xC62CB0", Offset = "0xC62CB0", VA = "0xC62CB0")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170001E8")]
			public float stepProgress
			{
				[Token(Token = "0x6001519")]
				[Address(RVA = "0xC62CCC", Offset = "0xC62CCC", VA = "0xC62CCC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24AB64", Offset = "0x24AB64")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x600151A")]
				[Address(RVA = "0xC62CD4", Offset = "0xC62CD4", VA = "0xC62CD4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24AB74", Offset = "0x24AB74")]
				private set
				{
				}
			}

			[Token(Token = "0x600151B")]
			[Address(RVA = "0xC62CDC", Offset = "0xC62CDC", VA = "0xC62CDC")]
			public Footstep(Quaternion rootRotation, Vector3 footPosition, Quaternion footRotation, Vector3 characterSpaceOffset)
			{
			}

			[Token(Token = "0x600151C")]
			[Address(RVA = "0xC62EDC", Offset = "0xC62EDC", VA = "0xC62EDC")]
			public void Reset(Quaternion rootRotation, Vector3 footPosition, Quaternion footRotation)
			{
			}

			[Token(Token = "0x600151D")]
			[Address(RVA = "0xC62F5C", Offset = "0xC62F5C", VA = "0xC62F5C")]
			public void StepTo(Vector3 p, Quaternion rootRotation)
			{
			}

			[Token(Token = "0x600151E")]
			[Address(RVA = "0xC630AC", Offset = "0xC630AC", VA = "0xC630AC")]
			public void UpdateStepping(Vector3 p, Quaternion rootRotation, float speed)
			{
			}

			[Token(Token = "0x600151F")]
			[Address(RVA = "0xC632BC", Offset = "0xC632BC", VA = "0xC632BC")]
			public void UpdateStanding(Quaternion rootRotation, float minAngle, float speed)
			{
			}

			[Token(Token = "0x6001520")]
			[Address(RVA = "0xC634E0", Offset = "0xC634E0", VA = "0xC634E0")]
			public void Update(InterpolationMode interpolation, UnityEvent onStep)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000309")]
		public class Leg : BodyPart
		{
			[Token(Token = "0x4001123")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x247E2C", Offset = "0x247E2C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x247E2C", Offset = "0x247E2C")]
			public float swivelOffset;

			[NonSerialized]
			[Token(Token = "0x4001124")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "HideInInspector", RVA = "0x247E84", Offset = "0x247E84")]
			public Vector3 IKPosition;

			[NonSerialized]
			[Token(Token = "0x4001125")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			[AttributeAttribute(Name = "HideInInspector", RVA = "0x247E94", Offset = "0x247E94")]
			public Quaternion IKRotation;

			[NonSerialized]
			[Token(Token = "0x4001126")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[AttributeAttribute(Name = "HideInInspector", RVA = "0x247EA4", Offset = "0x247EA4")]
			public Vector3 footPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4001127")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[AttributeAttribute(Name = "HideInInspector", RVA = "0x247EB4", Offset = "0x247EB4")]
			public Vector3 heelPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4001128")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[AttributeAttribute(Name = "HideInInspector", RVA = "0x247EC4", Offset = "0x247EC4")]
			public Quaternion footRotationOffset;

			[NonSerialized]
			[Token(Token = "0x4001129")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			[AttributeAttribute(Name = "HideInInspector", RVA = "0x247ED4", Offset = "0x247ED4")]
			public float currentMag;

			[Token(Token = "0x400112A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x247EE4", Offset = "0x247EE4")]
			private Vector3 <position>k__BackingField;

			[Token(Token = "0x400112B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x247EF4", Offset = "0x247EF4")]
			private Quaternion <rotation>k__BackingField;

			[Token(Token = "0x400112C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x247F04", Offset = "0x247F04")]
			private bool <hasToes>k__BackingField;

			[Token(Token = "0x400112D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x247F14", Offset = "0x247F14")]
			private Vector3 <thighRelativeToPelvis>k__BackingField;

			[Token(Token = "0x400112E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			private Vector3 footPosition;

			[Token(Token = "0x400112F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			private Quaternion footRotation;

			[Token(Token = "0x4001130")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			private Vector3 bendNormal;

			[Token(Token = "0x4001131")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
			private Quaternion calfRelToThigh;

			[Token(Token = "0x4001132")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
			private Quaternion thighRelToFoot;

			[Token(Token = "0x4001133")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
			private Vector3 bendNormalRelToPelvis;

			[Token(Token = "0x4001134")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
			private Vector3 bendNormalRelToTarget;

			[Token(Token = "0x170001E9")]
			public Vector3 position
			{
				[Token(Token = "0x6001521")]
				[Address(RVA = "0xC63788", Offset = "0xC63788", VA = "0xC63788")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24AB84", Offset = "0x24AB84")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001522")]
				[Address(RVA = "0xC6379C", Offset = "0xC6379C", VA = "0xC6379C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24AB94", Offset = "0x24AB94")]
				private set
				{
				}
			}

			[Token(Token = "0x170001EA")]
			public Quaternion rotation
			{
				[Token(Token = "0x6001523")]
				[Address(RVA = "0xC637A8", Offset = "0xC637A8", VA = "0xC637A8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24ABA4", Offset = "0x24ABA4")]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6001524")]
				[Address(RVA = "0xC637B8", Offset = "0xC637B8", VA = "0xC637B8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24ABB4", Offset = "0x24ABB4")]
				private set
				{
				}
			}

			[Token(Token = "0x170001EB")]
			public bool hasToes
			{
				[Token(Token = "0x6001525")]
				[Address(RVA = "0xC637C8", Offset = "0xC637C8", VA = "0xC637C8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24ABC4", Offset = "0x24ABC4")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001526")]
				[Address(RVA = "0xC637D0", Offset = "0xC637D0", VA = "0xC637D0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24ABD4", Offset = "0x24ABD4")]
				private set
				{
				}
			}

			[Token(Token = "0x170001EC")]
			public VirtualBone thigh
			{
				[Token(Token = "0x6001527")]
				[Address(RVA = "0xC637D8", Offset = "0xC637D8", VA = "0xC637D8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001ED")]
			private VirtualBone calf
			{
				[Token(Token = "0x6001528")]
				[Address(RVA = "0xC63818", Offset = "0xC63818", VA = "0xC63818")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001EE")]
			private VirtualBone foot
			{
				[Token(Token = "0x6001529")]
				[Address(RVA = "0xC63858", Offset = "0xC63858", VA = "0xC63858")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001EF")]
			private VirtualBone toes
			{
				[Token(Token = "0x600152A")]
				[Address(RVA = "0xC63898", Offset = "0xC63898", VA = "0xC63898")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001F0")]
			public VirtualBone lastBone
			{
				[Token(Token = "0x600152B")]
				[Address(RVA = "0xC5C568", Offset = "0xC5C568", VA = "0xC5C568")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001F1")]
			public Vector3 thighRelativeToPelvis
			{
				[Token(Token = "0x600152C")]
				[Address(RVA = "0xC638D8", Offset = "0xC638D8", VA = "0xC638D8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24ABE4", Offset = "0x24ABE4")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x600152D")]
				[Address(RVA = "0xC638EC", Offset = "0xC638EC", VA = "0xC638EC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24ABF4", Offset = "0x24ABF4")]
				private set
				{
				}
			}

			[Token(Token = "0x600152E")]
			[Address(RVA = "0xC638F8", Offset = "0xC638F8", VA = "0xC638F8", Slot = "6")]
			protected override void LoadBoneLengthsFromHumanDescription(HumanDescription humanDescription, bool isLeft)
			{
			}

			[Token(Token = "0x600152F")]
			[Address(RVA = "0xC64578", Offset = "0xC64578", VA = "0xC64578", Slot = "10")]
			public override void InitiateByHumanDescription(HumanDescription humanDescription, bool isLeft = false)
			{
			}

			[Token(Token = "0x6001530")]
			[Address(RVA = "0xC64604", Offset = "0xC64604", VA = "0xC64604", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6001531")]
			[Address(RVA = "0xC64FD8", Offset = "0xC64FD8", VA = "0xC64FD8", Slot = "5")]
			public override void PreSolve()
			{
			}

			[Token(Token = "0x6001532")]
			[Address(RVA = "0xC65374", Offset = "0xC65374", VA = "0xC65374", Slot = "8")]
			public override void ApplyOffsets()
			{
			}

			[Token(Token = "0x6001533")]
			[Address(RVA = "0xC6585C", Offset = "0xC6585C", VA = "0xC6585C")]
			private void ApplyPositionOffset(Vector3 offset, float weight)
			{
			}

			[Token(Token = "0x6001534")]
			[Address(RVA = "0xC6598C", Offset = "0xC6598C", VA = "0xC6598C")]
			private void ApplyRotationOffset(Quaternion offset, float weight)
			{
			}

			[Token(Token = "0x6001535")]
			[Address(RVA = "0xC5C9EC", Offset = "0xC5C9EC", VA = "0xC5C9EC")]
			public void Solve()
			{
			}

			[Token(Token = "0x6001536")]
			[Address(RVA = "0xC66520", Offset = "0xC66520", VA = "0xC66520", Slot = "7")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x6001537")]
			[Address(RVA = "0xC668D0", Offset = "0xC668D0", VA = "0xC668D0", Slot = "9")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x6001538")]
			[Address(RVA = "0xC5DB2C", Offset = "0xC5DB2C", VA = "0xC5DB2C")]
			public Leg()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200030A")]
		public class Locomotion
		{
			[Token(Token = "0x4001135")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x247F24", Offset = "0x247F24")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x247F24", Offset = "0x247F24")]
			public float weight;

			[Token(Token = "0x4001136")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x247F74", Offset = "0x247F74")]
			public float footDistance;

			[Token(Token = "0x4001137")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x247FA8", Offset = "0x247FA8")]
			public float stepThreshold;

			[Token(Token = "0x4001138")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x247FDC", Offset = "0x247FDC")]
			public float angleThreshold;

			[Token(Token = "0x4001139")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x248010", Offset = "0x248010")]
			public float comAngleMlp;

			[Token(Token = "0x400113A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x248044", Offset = "0x248044")]
			public float maxVelocity;

			[Token(Token = "0x400113B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x248078", Offset = "0x248078")]
			public float velocityFactor;

			[Token(Token = "0x400113C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2480AC", Offset = "0x2480AC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2480AC", Offset = "0x2480AC")]
			public float maxLegStretch;

			[Token(Token = "0x400113D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x248100", Offset = "0x248100")]
			public float rootSpeed;

			[Token(Token = "0x400113E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x248134", Offset = "0x248134")]
			public float stepSpeed;

			[Token(Token = "0x400113F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x248168", Offset = "0x248168")]
			public AnimationCurve stepHeight;

			[Token(Token = "0x4001140")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x24819C", Offset = "0x24819C")]
			public AnimationCurve heelHeight;

			[Token(Token = "0x4001141")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2481D0", Offset = "0x2481D0")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2481D0", Offset = "0x2481D0")]
			public float relaxLegTwistMinAngle;

			[Token(Token = "0x4001142")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x248224", Offset = "0x248224")]
			public float relaxLegTwistSpeed;

			[Token(Token = "0x4001143")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x248258", Offset = "0x248258")]
			public InterpolationMode stepInterpolation;

			[Token(Token = "0x4001144")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x24828C", Offset = "0x24828C")]
			public Vector3 offset;

			[Token(Token = "0x4001145")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "HideInInspector", RVA = "0x2482C0", Offset = "0x2482C0")]
			public bool blockingEnabled;

			[Token(Token = "0x4001146")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[AttributeAttribute(Name = "HideInInspector", RVA = "0x2482D0", Offset = "0x2482D0")]
			public LayerMask blockingLayers;

			[Token(Token = "0x4001147")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "HideInInspector", RVA = "0x2482E0", Offset = "0x2482E0")]
			public float raycastRadius;

			[Token(Token = "0x4001148")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[AttributeAttribute(Name = "HideInInspector", RVA = "0x2482F0", Offset = "0x2482F0")]
			public float raycastHeight;

			[Token(Token = "0x4001149")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x248300", Offset = "0x248300")]
			public UnityEvent onLeftFootstep;

			[Token(Token = "0x400114A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x248334", Offset = "0x248334")]
			public UnityEvent onRightFootstep;

			[Token(Token = "0x400114B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248368", Offset = "0x248368")]
			private Vector3 <centerOfMass>k__BackingField;

			[Token(Token = "0x400114C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			private Footstep[] footsteps;

			[Token(Token = "0x400114D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			private Vector3 lastComPosition;

			[Token(Token = "0x400114E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			private Vector3 comVelocity;

			[Token(Token = "0x400114F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			private int leftFootIndex;

			[Token(Token = "0x4001150")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			private int rightFootIndex;

			[Token(Token = "0x170001F2")]
			public Vector3 centerOfMass
			{
				[Token(Token = "0x6001539")]
				[Address(RVA = "0xC669D0", Offset = "0xC669D0", VA = "0xC669D0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24AC04", Offset = "0x24AC04")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x600153A")]
				[Address(RVA = "0xC669E4", Offset = "0xC669E4", VA = "0xC669E4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24AC14", Offset = "0x24AC14")]
				private set
				{
				}
			}

			[Token(Token = "0x170001F3")]
			public Vector3 leftFootstepPosition
			{
				[Token(Token = "0x6001540")]
				[Address(RVA = "0xC66ED4", Offset = "0xC66ED4", VA = "0xC66ED4")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170001F4")]
			public Vector3 rightFootstepPosition
			{
				[Token(Token = "0x6001541")]
				[Address(RVA = "0xC66F38", Offset = "0xC66F38", VA = "0xC66F38")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170001F5")]
			public Quaternion leftFootstepRotation
			{
				[Token(Token = "0x6001542")]
				[Address(RVA = "0xC66F9C", Offset = "0xC66F9C", VA = "0xC66F9C")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x170001F6")]
			public Quaternion rightFootstepRotation
			{
				[Token(Token = "0x6001543")]
				[Address(RVA = "0xC66FFC", Offset = "0xC66FFC", VA = "0xC66FFC")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x600153B")]
			[Address(RVA = "0xC596D8", Offset = "0xC596D8", VA = "0xC596D8")]
			public void Initiate(Vector3[] positions, Quaternion[] rotations, bool hasToes)
			{
			}

			[Token(Token = "0x600153C")]
			[Address(RVA = "0xC56298", Offset = "0xC56298", VA = "0xC56298")]
			public void Reset(Vector3[] positions, Quaternion[] rotations)
			{
			}

			[Token(Token = "0x600153D")]
			[Address(RVA = "0xC54F18", Offset = "0xC54F18", VA = "0xC54F18")]
			public void AddDeltaRotation(Quaternion delta, Vector3 pivot)
			{
			}

			[Token(Token = "0x600153E")]
			[Address(RVA = "0xC54CDC", Offset = "0xC54CDC", VA = "0xC54CDC")]
			public void AddDeltaPosition(Vector3 delta)
			{
			}

			[Token(Token = "0x600153F")]
			[Address(RVA = "0xC5A2A4", Offset = "0xC5A2A4", VA = "0xC5A2A4")]
			public void Solve(VirtualBone rootBone, Spine spine, Leg leftLeg, Leg rightLeg, Arm leftArm, Arm rightArm, int supportLegIndex, out Vector3 leftFootPosition, out Vector3 rightFootPosition, out Quaternion leftFootRotation, out Quaternion rightFootRotation, out float leftFootOffset, out float rightFootOffset, out float leftHeelOffset, out float rightHeelOffset)
			{
			}

			[Token(Token = "0x6001544")]
			[Address(RVA = "0xC66A38", Offset = "0xC66A38", VA = "0xC66A38")]
			private bool StepBlocked(Vector3 fromPosition, Vector3 toPosition, Vector3 rootPosition)
			{
				return default(bool);
			}

			[Token(Token = "0x6001545")]
			[Address(RVA = "0xC66C10", Offset = "0xC66C10", VA = "0xC66C10")]
			private bool CanStep()
			{
				return default(bool);
			}

			[Token(Token = "0x6001546")]
			[Address(RVA = "0xC66CAC", Offset = "0xC66CAC", VA = "0xC66CAC")]
			private static bool GetLineSphereCollision(Vector3 lineStart, Vector3 lineEnd, Vector3 sphereCenter, float sphereRadius)
			{
				return default(bool);
			}

			[Token(Token = "0x6001547")]
			[Address(RVA = "0xC5DC48", Offset = "0xC5DC48", VA = "0xC5DC48")]
			public Locomotion()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200030B")]
		public class Spine : BodyPart
		{
			[Token(Token = "0x4001151")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x248378", Offset = "0x248378")]
			public Transform headTarget;

			[Token(Token = "0x4001152")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2483AC", Offset = "0x2483AC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2483AC", Offset = "0x2483AC")]
			public float positionWeight;

			[Token(Token = "0x4001153")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2483FC", Offset = "0x2483FC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2483FC", Offset = "0x2483FC")]
			public float rotationWeight;

			[Token(Token = "0x4001154")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x24844C", Offset = "0x24844C")]
			public float minHeadHeightPercentage;

			[Token(Token = "0x4001155")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float minHeadHeight;

			[NonSerialized]
			[Token(Token = "0x4001156")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "HideInInspector", RVA = "0x248480", Offset = "0x248480")]
			public Vector3 IKPositionHead;

			[NonSerialized]
			[Token(Token = "0x4001157")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[AttributeAttribute(Name = "HideInInspector", RVA = "0x248490", Offset = "0x248490")]
			public Quaternion IKRotationHead;

			[NonSerialized]
			[Token(Token = "0x4001158")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[AttributeAttribute(Name = "HideInInspector", RVA = "0x2484A0", Offset = "0x2484A0")]
			public Vector3 IKPositionPelvis;

			[NonSerialized]
			[Token(Token = "0x4001159")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[AttributeAttribute(Name = "HideInInspector", RVA = "0x2484B0", Offset = "0x2484B0")]
			public Quaternion IKRotationPelvis;

			[NonSerialized]
			[Token(Token = "0x400115A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[AttributeAttribute(Name = "HideInInspector", RVA = "0x2484C0", Offset = "0x2484C0")]
			public Vector3 goalPositionChest;

			[NonSerialized]
			[Token(Token = "0x400115B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			[AttributeAttribute(Name = "HideInInspector", RVA = "0x2484D0", Offset = "0x2484D0")]
			public Vector3 pelvisPositionOffset;

			[NonSerialized]
			[Token(Token = "0x400115C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[AttributeAttribute(Name = "HideInInspector", RVA = "0x2484E0", Offset = "0x2484E0")]
			public Vector3 chestPositionOffset;

			[NonSerialized]
			[Token(Token = "0x400115D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			[AttributeAttribute(Name = "HideInInspector", RVA = "0x2484F0", Offset = "0x2484F0")]
			public Vector3 headPositionOffset;

			[NonSerialized]
			[Token(Token = "0x400115E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			[AttributeAttribute(Name = "HideInInspector", RVA = "0x248500", Offset = "0x248500")]
			public Quaternion pelvisRotationOffset;

			[NonSerialized]
			[Token(Token = "0x400115F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			[AttributeAttribute(Name = "HideInInspector", RVA = "0x248510", Offset = "0x248510")]
			public Quaternion chestRotationOffset;

			[NonSerialized]
			[Token(Token = "0x4001160")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			[AttributeAttribute(Name = "HideInInspector", RVA = "0x248520", Offset = "0x248520")]
			public Quaternion headRotationOffset;

			[NonSerialized]
			[Token(Token = "0x4001161")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			[AttributeAttribute(Name = "HideInInspector", RVA = "0x248530", Offset = "0x248530")]
			public Vector3 faceDirection;

			[NonSerialized]
			[Token(Token = "0x4001162")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
			[AttributeAttribute(Name = "HideInInspector", RVA = "0x248540", Offset = "0x248540")]
			public Vector3 locomotionHeadPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4001163")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			[AttributeAttribute(Name = "HideInInspector", RVA = "0x248550", Offset = "0x248550")]
			public Vector3 headPosition;

			[Token(Token = "0x4001164")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x248560", Offset = "0x248560")]
			private Quaternion <anchorRotation>k__BackingField;

			[Token(Token = "0x4001165")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
			private Quaternion headRotation;

			[Token(Token = "0x4001166")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
			private Quaternion pelvisRotation;

			[Token(Token = "0x4001167")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
			private Quaternion anchorRelativeToHead;

			[Token(Token = "0x4001168")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
			private Quaternion anchorRelativeToPelvis;

			[Token(Token = "0x4001169")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
			private Quaternion pelvisRelativeRotation;

			[Token(Token = "0x400116A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
			private Quaternion chestRelativeRotation;

			[Token(Token = "0x400116B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
			private Vector3 headDeltaPosition;

			[Token(Token = "0x400116C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
			private Quaternion pelvisDeltaRotation;

			[Token(Token = "0x400116D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
			private int pelvisIndex;

			[Token(Token = "0x400116E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
			private int spineIndex;

			[Token(Token = "0x400116F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
			private int chestIndex;

			[Token(Token = "0x4001170")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
			private int neckIndex;

			[Token(Token = "0x4001171")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
			private int headIndex;

			[Token(Token = "0x4001172")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
			private float length;

			[Token(Token = "0x4001173")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
			private bool hasLegs;

			[Token(Token = "0x4001174")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
			private float headHeight;

			[Token(Token = "0x4001175")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
			private float sizeMlp;

			[Token(Token = "0x4001176")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
			private Vector3 chestForward;

			[Token(Token = "0x170001F7")]
			public VirtualBone pelvis
			{
				[Token(Token = "0x6001548")]
				[Address(RVA = "0xC56708", Offset = "0xC56708", VA = "0xC56708")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001F8")]
			public VirtualBone firstSpineBone
			{
				[Token(Token = "0x6001549")]
				[Address(RVA = "0xC6705C", Offset = "0xC6705C", VA = "0xC6705C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001F9")]
			public VirtualBone chest
			{
				[Token(Token = "0x600154A")]
				[Address(RVA = "0xC5CE50", Offset = "0xC5CE50", VA = "0xC5CE50")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001FA")]
			private VirtualBone neck
			{
				[Token(Token = "0x600154B")]
				[Address(RVA = "0xC670A4", Offset = "0xC670A4", VA = "0xC670A4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001FB")]
			public VirtualBone head
			{
				[Token(Token = "0x600154C")]
				[Address(RVA = "0xC669F0", Offset = "0xC669F0", VA = "0xC669F0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001FC")]
			public Quaternion anchorRotation
			{
				[Token(Token = "0x600154D")]
				[Address(RVA = "0xC670EC", Offset = "0xC670EC", VA = "0xC670EC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24AC24", Offset = "0x24AC24")]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x600154E")]
				[Address(RVA = "0xC670FC", Offset = "0xC670FC", VA = "0xC670FC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24AC34", Offset = "0x24AC34")]
				private set
				{
				}
			}

			[Token(Token = "0x600154F")]
			[Address(RVA = "0xC6710C", Offset = "0xC6710C", VA = "0xC6710C", Slot = "6")]
			protected override void LoadBoneLengthsFromHumanDescription(HumanDescription humanDescription, bool isLeft)
			{
			}

			[Token(Token = "0x6001550")]
			[Address(RVA = "0xC67D64", Offset = "0xC67D64", VA = "0xC67D64", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6001551")]
			[Address(RVA = "0xC68D60", Offset = "0xC68D60", VA = "0xC68D60", Slot = "5")]
			public override void PreSolve()
			{
			}

			[Token(Token = "0x6001552")]
			[Address(RVA = "0xC68F24", Offset = "0xC68F24", VA = "0xC68F24", Slot = "8")]
			public override void ApplyOffsets()
			{
			}

			[Token(Token = "0x6001553")]
			[Address(RVA = "0xC59B48", Offset = "0xC59B48", VA = "0xC59B48")]
			public void Solve(VirtualBone rootBone, Leg[] legs, Arm[] arms)
			{
			}

			[Token(Token = "0x6001554")]
			[Address(RVA = "0xC695E0", Offset = "0xC695E0", VA = "0xC695E0")]
			private float CalculateHeadWorldYaw()
			{
				return default(float);
			}

			[Token(Token = "0x6001555")]
			[Address(RVA = "0xC6AA30", Offset = "0xC6AA30", VA = "0xC6AA30")]
			private float CalculateChestWorldYaw()
			{
				return default(float);
			}

			[Token(Token = "0x6001556")]
			[Address(RVA = "0xC69B54", Offset = "0xC69B54", VA = "0xC69B54")]
			private void SolveChestPitch()
			{
			}

			[Token(Token = "0x6001557")]
			[Address(RVA = "0xC69E80", Offset = "0xC69E80", VA = "0xC69E80")]
			private void SolveChestPullMethod(Arm[] arms)
			{
			}

			[Token(Token = "0x6001558")]
			[Address(RVA = "0xC6AFA8", Offset = "0xC6AFA8", VA = "0xC6AFA8")]
			private Quaternion SolveChestYaw(Arm[] arms)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6001559")]
			[Address(RVA = "0xC6B5D4", Offset = "0xC6B5D4", VA = "0xC6B5D4", Slot = "7")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x600155A")]
			[Address(RVA = "0xC6BC14", Offset = "0xC6BC14", VA = "0xC6BC14", Slot = "9")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x600155B")]
			[Address(RVA = "0xC5C5B8", Offset = "0xC5C5B8", VA = "0xC5C5B8")]
			public void InverseTranslateToHead(Leg[] legs, bool limited, bool useCurrentLegMag, Vector3 offset, float w)
			{
			}

			[Token(Token = "0x600155C")]
			[Address(RVA = "0xC6BD6C", Offset = "0xC6BD6C", VA = "0xC6BD6C")]
			private Vector3 LimitPelvisPosition(Leg[] legs, Vector3 pelvisPosition, bool useCurrentLegMag, int it = 2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x600155D")]
			[Address(RVA = "0xC6C240", Offset = "0xC6C240", VA = "0xC6C240")]
			private void Bend(VirtualBone[] bones, int firstIndex, int lastIndex, Quaternion targetRotation, float clampWeight, bool uniformWeight, float w)
			{
			}

			[Token(Token = "0x600155E")]
			[Address(RVA = "0xC6C564", Offset = "0xC6C564", VA = "0xC6C564")]
			private void Bend(VirtualBone[] bones, int firstIndex, int lastIndex, Quaternion targetRotation, Quaternion rotationOffset, float clampWeight, bool uniformWeight, float w)
			{
			}

			[Token(Token = "0x600155F")]
			[Address(RVA = "0xC6ABBC", Offset = "0xC6ABBC", VA = "0xC6ABBC")]
			private void ReverseBend(VirtualBone[] bones, int rootIndex, int leafIndex, Quaternion to, Quaternion from)
			{
			}

			[Token(Token = "0x6001560")]
			[Address(RVA = "0xC5D7A0", Offset = "0xC5D7A0", VA = "0xC5D7A0")]
			public Spine()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200030C")]
		public enum PositionOffset
		{
			[Token(Token = "0x4001178")]
			Pelvis,
			[Token(Token = "0x4001179")]
			Chest,
			[Token(Token = "0x400117A")]
			Head,
			[Token(Token = "0x400117B")]
			LeftHand,
			[Token(Token = "0x400117C")]
			RightHand,
			[Token(Token = "0x400117D")]
			LeftFoot,
			[Token(Token = "0x400117E")]
			RightFoot,
			[Token(Token = "0x400117F")]
			LeftHeel,
			[Token(Token = "0x4001180")]
			RightHeel
		}

		[Serializable]
		[Token(Token = "0x200030D")]
		public enum RotationOffset
		{
			[Token(Token = "0x4001182")]
			Pelvis,
			[Token(Token = "0x4001183")]
			Chest,
			[Token(Token = "0x4001184")]
			Head
		}

		[Serializable]
		[Token(Token = "0x200030E")]
		public class VirtualBone
		{
			[Token(Token = "0x4001185")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Transform transform;

			[Token(Token = "0x4001186")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public float baseLength;

			[Token(Token = "0x4001187")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Quaternion orientationOffset;

			[Token(Token = "0x4001188")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 readPosition;

			[Token(Token = "0x4001189")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Quaternion readRotation;

			[Token(Token = "0x400118A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector3 solverPosition;

			[Token(Token = "0x400118B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Quaternion solverRotation;

			[Token(Token = "0x400118C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float length;

			[Token(Token = "0x400118D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public float sqrMag;

			[Token(Token = "0x400118E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 axis;

			[Token(Token = "0x400118F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public Vector3 offset;

			[Token(Token = "0x4001190")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public Quaternion defaultOrientation;

			[Token(Token = "0x6001561")]
			[Address(RVA = "0xC5945C", Offset = "0xC5945C", VA = "0xC5945C")]
			public VirtualBone(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x6001562")]
			[Address(RVA = "0xC594C4", Offset = "0xC594C4", VA = "0xC594C4")]
			public void Read(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x6001563")]
			[Address(RVA = "0xC57078", Offset = "0xC57078", VA = "0xC57078")]
			public static SkeletonBone GetSkeletonBone(string humanName, HumanDescription humanDescription)
			{
				return default(SkeletonBone);
			}

			[Token(Token = "0x6001564")]
			[Address(RVA = "0xC61B9C", Offset = "0xC61B9C", VA = "0xC61B9C")]
			public static void PreSolve(ref VirtualBone[] bones, Quaternion rotationCorrection)
			{
			}

			[Token(Token = "0x6001565")]
			[Address(RVA = "0xC6079C", Offset = "0xC6079C", VA = "0xC6079C")]
			public static void RotateAroundPoint(VirtualBone[] bones, int index, Vector3 point, Quaternion rotation)
			{
			}

			[Token(Token = "0x6001566")]
			[Address(RVA = "0xC6C8E0", Offset = "0xC6C8E0", VA = "0xC6C8E0")]
			public static void RotateBy(VirtualBone[] bones, int index, Quaternion rotation)
			{
			}

			[Token(Token = "0x6001567")]
			[Address(RVA = "0xC6CC54", Offset = "0xC6CC54", VA = "0xC6CC54")]
			public static void RotateBy(VirtualBone[] bones, Quaternion rotation)
			{
			}

			[Token(Token = "0x6001568")]
			[Address(RVA = "0xC6D004", Offset = "0xC6D004", VA = "0xC6D004")]
			public static void RotateTo(VirtualBone[] bones, int index, Quaternion rotation)
			{
			}

			[Token(Token = "0x6001569")]
			[Address(RVA = "0xC65C68", Offset = "0xC65C68", VA = "0xC65C68")]
			public static void SolveTrigonometric(VirtualBone[] bones, int first, int second, int third, Vector3 targetPosition, Vector3 bendNormal, float weight)
			{
			}

			[Token(Token = "0x600156A")]
			[Address(RVA = "0xC6D0FC", Offset = "0xC6D0FC", VA = "0xC6D0FC")]
			private static Vector3 GetDirectionToBendPoint(Vector3 direction, float directionMag, Vector3 bendDirection, float sqrMag1, float sqrMag2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x600156B")]
			[Address(RVA = "0xC6D378", Offset = "0xC6D378", VA = "0xC6D378")]
			public static void SolveCCD(VirtualBone[] bones, Vector3 targetPosition, float weight, int iterations)
			{
			}
		}

		[Token(Token = "0x4000D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Transform[] solverTransforms;

		[Token(Token = "0x4000D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool hasToes;

		[Token(Token = "0x4000D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool hasLegs;

		[Token(Token = "0x4000D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3[] readPositions;

		[Token(Token = "0x4000D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Quaternion[] readRotations;

		[Token(Token = "0x4000D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3[] solvedPositions;

		[Token(Token = "0x4000D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Quaternion[] solvedRotations;

		[Token(Token = "0x4000D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion[] defaultLocalRotations;

		[Token(Token = "0x4000D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3[] defaultLocalPositions;

		[Token(Token = "0x4000D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 rootV;

		[Token(Token = "0x4000D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 rootVelocity;

		[Token(Token = "0x4000D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 bodyOffset;

		[Token(Token = "0x4000D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int supportLegIndex;

		[Token(Token = "0x4000D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x247468", Offset = "0x247468")]
		private VirtualBone <rootBone>k__BackingField;

		[Token(Token = "0x4000D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x247478", Offset = "0x247478")]
		public Spine spine;

		[Token(Token = "0x4000D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2474AC", Offset = "0x2474AC")]
		public Arm leftArm;

		[Token(Token = "0x4000D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2474E0", Offset = "0x2474E0")]
		public Arm rightArm;

		[Token(Token = "0x4000D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x247514", Offset = "0x247514")]
		public Leg leftLeg;

		[Token(Token = "0x4000D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x247548", Offset = "0x247548")]
		public Leg rightLeg;

		[Token(Token = "0x4000D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x24757C", Offset = "0x24757C")]
		public Locomotion locomotion;

		[Token(Token = "0x4000D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Leg[] legs;

		[Token(Token = "0x4000D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Arm[] arms;

		[Token(Token = "0x4000D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 headPosition;

		[Token(Token = "0x4000D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Vector3 headDeltaPosition;

		[Token(Token = "0x4000D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 raycastOriginPelvis;

		[Token(Token = "0x4000D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Vector3 lastOffset;

		[Token(Token = "0x4000D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Vector3 debugPos1;

		[Token(Token = "0x4000D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private Vector3 debugPos2;

		[Token(Token = "0x4000D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Vector3 debugPos3;

		[Token(Token = "0x4000D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private Vector3 debugPos4;

		[Token(Token = "0x170001B9")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x24ACE4", Offset = "0x24ACE4")]
		public VirtualBone rootBone
		{
			[Token(Token = "0x6001366")]
			[Address(RVA = "0xC5D78C", Offset = "0xC5D78C", VA = "0xC5D78C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A554", Offset = "0x24A554")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001367")]
			[Address(RVA = "0xC5D794", Offset = "0xC5D794", VA = "0xC5D794")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A564", Offset = "0x24A564")]
			private set
			{
			}
		}

		[Token(Token = "0x600134C")]
		[Address(RVA = "0xC52A1C", Offset = "0xC52A1C", VA = "0xC52A1C")]
		public void SetToReferences(BoxerIK.References references)
		{
		}

		[Token(Token = "0x600134D")]
		[Address(RVA = "0xC51130", Offset = "0xC51130", VA = "0xC51130")]
		public void GuessHandOrientations(BoxerIK.References references, bool onlyIfZero)
		{
		}

		[Token(Token = "0x600134E")]
		[Address(RVA = "0xC538B0", Offset = "0xC538B0", VA = "0xC538B0")]
		public void DefaultAnimationCurves()
		{
		}

		[Token(Token = "0x600134F")]
		[Address(RVA = "0xC54434", Offset = "0xC54434", VA = "0xC54434")]
		public void AddPositionOffset(PositionOffset positionOffset, Vector3 value)
		{
		}

		[Token(Token = "0x6001350")]
		[Address(RVA = "0xC5485C", Offset = "0xC5485C", VA = "0xC5485C")]
		public void AddRotationOffset(RotationOffset rotationOffset, Vector3 value)
		{
		}

		[Token(Token = "0x6001351")]
		[Address(RVA = "0xC54928", Offset = "0xC54928", VA = "0xC54928")]
		public void AddRotationOffset(RotationOffset rotationOffset, Quaternion value)
		{
		}

		[Token(Token = "0x6001352")]
		[Address(RVA = "0xC54B08", Offset = "0xC54B08", VA = "0xC54B08")]
		public void AddPlatformMotion(Vector3 deltaPosition, Quaternion deltaRotation, Vector3 platformPivot)
		{
		}

		[Token(Token = "0x6001353")]
		[Address(RVA = "0xC55440", Offset = "0xC55440", VA = "0xC55440")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001354")]
		[Address(RVA = "0xC56750", Offset = "0xC56750", VA = "0xC56750", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6001355")]
		[Address(RVA = "0xC569DC", Offset = "0xC569DC", VA = "0xC569DC", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6001356")]
		[Address(RVA = "0xC56C74", Offset = "0xC56C74", VA = "0xC56C74", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6001357")]
		[Address(RVA = "0xC56D04", Offset = "0xC56D04", VA = "0xC56D04", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6001358")]
		[Address(RVA = "0xC56D94", Offset = "0xC56D94", VA = "0xC56D94", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001359")]
		[Address(RVA = "0xC5164C", Offset = "0xC5164C", VA = "0xC5164C")]
		public void InitiateByHumanDescription(HumanDescription humanDescription)
		{
		}

		[Token(Token = "0x600135A")]
		[Address(RVA = "0xC57254", Offset = "0xC57254", VA = "0xC57254")]
		private Vector3 GetNormal(Transform[] transforms)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600135B")]
		[Address(RVA = "0xC53AE4", Offset = "0xC53AE4", VA = "0xC53AE4")]
		private Vector3 GuessWristToPalmAxis(Transform hand, Transform forearm)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600135C")]
		[Address(RVA = "0xC53D18", Offset = "0xC53D18", VA = "0xC53D18")]
		private Vector3 GuessPalmToThumbAxis(Transform hand, Transform forearm)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600135D")]
		[Address(RVA = "0xC542A4", Offset = "0xC542A4", VA = "0xC542A4")]
		private static Keyframe[] GetSineKeyframes(float mag)
		{
			return null;
		}

		[Token(Token = "0x600135E")]
		[Address(RVA = "0xC55610", Offset = "0xC55610", VA = "0xC55610")]
		private void UpdateSolverTransforms()
		{
		}

		[Token(Token = "0x600135F")]
		[Address(RVA = "0xC5762C", Offset = "0xC5762C", VA = "0xC5762C", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6001360")]
		[Address(RVA = "0xC57664", Offset = "0xC57664", VA = "0xC57664", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6001361")]
		[Address(RVA = "0xC590A4", Offset = "0xC590A4", VA = "0xC590A4")]
		private void WriteTransforms()
		{
		}

		[Token(Token = "0x6001362")]
		[Address(RVA = "0xC55884", Offset = "0xC55884", VA = "0xC55884")]
		private void Read(Vector3[] positions, Quaternion[] rotations, bool hasToes, bool hasLegs)
		{
		}

		[Token(Token = "0x6001363")]
		[Address(RVA = "0xC576CC", Offset = "0xC576CC", VA = "0xC576CC")]
		private void Solve()
		{
		}

		[Token(Token = "0x6001364")]
		[Address(RVA = "0xC59400", Offset = "0xC59400", VA = "0xC59400")]
		private Vector3 GetPosition(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001365")]
		[Address(RVA = "0xC593AC", Offset = "0xC593AC", VA = "0xC593AC")]
		private Quaternion GetRotation(int index)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001368")]
		[Address(RVA = "0xC58E8C", Offset = "0xC58E8C", VA = "0xC58E8C")]
		private void Write()
		{
		}

		[Token(Token = "0x6001369")]
		[Address(RVA = "0xC5CE98", Offset = "0xC5CE98", VA = "0xC5CE98")]
		private Vector3 GetPelvisOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600136A")]
		[Address(RVA = "0xC52F30", Offset = "0xC52F30", VA = "0xC52F30")]
		public IKSolverBoxer()
		{
		}
	}
}
namespace Battlehub.MeshTools
{
	[Token(Token = "0x200024A")]
	public class MeshTransform
	{
		[Token(Token = "0x4000D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Mesh Mesh;

		[Token(Token = "0x4000D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Matrix4x4 Transform;

		[Token(Token = "0x600136B")]
		[Address(RVA = "0x4EFE14", Offset = "0x4EFE14", VA = "0x4EFE14")]
		public MeshTransform(Mesh mesh, Matrix4x4 transform)
		{
		}
	}
	[Token(Token = "0x200024B")]
	public class CombineResult
	{
		[Token(Token = "0x4000D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public GameObject GameObject;

		[Token(Token = "0x4000D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Mesh Mesh;

		[Token(Token = "0x600136C")]
		[Address(RVA = "0x4EFDEC", Offset = "0x4EFDEC", VA = "0x4EFDEC")]
		public CombineResult(GameObject gameObject, Mesh mesh)
		{
		}
	}
	[Token(Token = "0x200024C")]
	public static class MeshUtils
	{
		[Token(Token = "0x600136D")]
		[Address(RVA = "0x4EFEA4", Offset = "0x4EFEA4", VA = "0x4EFEA4")]
		public static CombineResult Combine(GameObject[] gameObjects, [Optional] GameObject target)
		{
			return null;
		}

		[Token(Token = "0x600136E")]
		[Address(RVA = "0x4F2CA4", Offset = "0x4F2CA4", VA = "0x4F2CA4")]
		private static Mesh RemoveRotation(Mesh mesh, Matrix4x4 targetRotationMatrix, bool merge)
		{
			return null;
		}

		[Token(Token = "0x600136F")]
		[Address(RVA = "0x4F20B8", Offset = "0x4F20B8", VA = "0x4F20B8")]
		private static bool BuildCombineInstance(Matrix4x4 targetToLocal, List<MeshFilter> allMeshFilters, List<SkinnedMeshRenderer> allSkinned, out CombineInstance[] combineInstances, out Material[] materials)
		{
			return default(bool);
		}

		[Token(Token = "0x6001370")]
		[Address(RVA = "0x4F30F0", Offset = "0x4F30F0", VA = "0x4F30F0")]
		private static void PopulateMeshGroups(Dictionary<Material, List<MeshTransform>> meshGroups, GameObject go, Mesh mesh)
		{
		}

		[Token(Token = "0x6001371")]
		[Address(RVA = "0x4F1548", Offset = "0x4F1548", VA = "0x4F1548")]
		private static void DestroyChildren(GameObject gameObject)
		{
		}

		[Token(Token = "0x6001372")]
		[Address(RVA = "0x4F1D7C", Offset = "0x4F1D7C", VA = "0x4F1D7C")]
		private static List<Mesh> GetColliderMeshes(GameObject obj)
		{
			return null;
		}

		[Token(Token = "0x6001373")]
		[Address(RVA = "0x4F3510", Offset = "0x4F3510", VA = "0x4F3510")]
		public static Vector3 CenterOfMass(GameObject gameObject)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001374")]
		[Address(RVA = "0x4F3614", Offset = "0x4F3614", VA = "0x4F3614")]
		public static Vector3 CenterOfMass(Mesh mesh)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001375")]
		[Address(RVA = "0x4F3910", Offset = "0x4F3910", VA = "0x4F3910")]
		public static Vector3 BoundsCenter(GameObject gameObject)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001376")]
		[Address(RVA = "0x4F3A14", Offset = "0x4F3A14", VA = "0x4F3A14")]
		public static Vector3 BoundsCenter(Mesh mesh)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001377")]
		[Address(RVA = "0x4F3AB8", Offset = "0x4F3AB8", VA = "0x4F3AB8")]
		public static Mesh SetPivot(Mesh mesh, Vector3 position)
		{
			return null;
		}

		[Token(Token = "0x6001378")]
		[Address(RVA = "0x4F3F84", Offset = "0x4F3F84", VA = "0x4F3F84")]
		public static Mesh SetPivot(Transform transform, Mesh mesh, Vector3 position)
		{
			return null;
		}

		[Token(Token = "0x6001379")]
		[Address(RVA = "0x4F3BE0", Offset = "0x4F3BE0", VA = "0x4F3BE0")]
		public static Mesh EditPivot(Mesh mesh, Vector3 offset)
		{
			return null;
		}

		[Token(Token = "0x600137A")]
		[Address(RVA = "0x4F4120", Offset = "0x4F4120", VA = "0x4F4120")]
		public static Mesh EditPivot(Transform transform, Vector3 worldOffset, Collider[] colliders)
		{
			return null;
		}

		[Token(Token = "0x600137B")]
		[Address(RVA = "0x4F2F20", Offset = "0x4F2F20", VA = "0x4F2F20")]
		public static Mesh[] Separate(Mesh mesh)
		{
			return null;
		}

		[Token(Token = "0x600137C")]
		[Address(RVA = "0x4F45D0", Offset = "0x4F45D0", VA = "0x4F45D0")]
		public static Mesh ExtractSubmesh(Mesh mesh, int submeshIndex)
		{
			return null;
		}
	}
	[Token(Token = "0x200024D")]
	[AttributeAttribute(Name = "ExecuteInEditMode", RVA = "0x24177C", Offset = "0x24177C")]
	public class Pivot : MonoBehaviour
	{
		[Token(Token = "0x4000D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x2475B0", Offset = "0x2475B0")]
		public Transform Target;

		[Token(Token = "0x600137D")]
		[Address(RVA = "0x4F61E4", Offset = "0x4F61E4", VA = "0x4F61E4")]
		private void Start()
		{
		}

		[Token(Token = "0x600137E")]
		[Address(RVA = "0x4F63C8", Offset = "0x4F63C8", VA = "0x4F63C8")]
		public Pivot()
		{
		}
	}
	[Token(Token = "0x200024E")]
	[AttributeAttribute(Name = "ExecuteInEditMode", RVA = "0x24178C", Offset = "0x24178C")]
	public class PivotDesignTime : MonoBehaviour
	{
		[Token(Token = "0x4000D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Vector3 m_prevPosition;

		[Token(Token = "0x4000D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector3 m_prevTargetPosition;

		[Token(Token = "0x4000D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Pivot m_origin;

		[Token(Token = "0x4000D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Collider[] m_colliders;

		[Token(Token = "0x600137F")]
		[Address(RVA = "0x4F63D0", Offset = "0x4F63D0", VA = "0x4F63D0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001380")]
		[Address(RVA = "0x4F6584", Offset = "0x4F6584", VA = "0x4F6584")]
		public void ToBoundsCenter()
		{
		}

		[Token(Token = "0x6001381")]
		[Address(RVA = "0x4F660C", Offset = "0x4F660C", VA = "0x4F660C")]
		public void ToCenterOffMass()
		{
		}

		[Token(Token = "0x6001382")]
		[Address(RVA = "0x4F6694", Offset = "0x4F6694", VA = "0x4F6694")]
		private void Update()
		{
		}

		[Token(Token = "0x6001383")]
		[Address(RVA = "0x4F6CA8", Offset = "0x4F6CA8", VA = "0x4F6CA8")]
		public PivotDesignTime()
		{
		}
	}
}
namespace Battlehub.Integration
{
	[Token(Token = "0x200024F")]
	public class IntegrationArgs
	{
		[Token(Token = "0x4000D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public GameObject GameObject;

		[Token(Token = "0x4000D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Mesh Mesh;

		[Token(Token = "0x4000D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool Cancel;

		[Token(Token = "0x6001384")]
		[Address(RVA = "0x4EECAC", Offset = "0x4EECAC", VA = "0x4EECAC")]
		public IntegrationArgs()
		{
		}

		[Token(Token = "0x6001385")]
		[Address(RVA = "0x4EECB4", Offset = "0x4EECB4", VA = "0x4EECB4")]
		public IntegrationArgs(GameObject gameObject)
		{
		}

		[Token(Token = "0x6001386")]
		[Address(RVA = "0x4EECD4", Offset = "0x4EECD4", VA = "0x4EECD4")]
		public IntegrationArgs(GameObject gameObject, Mesh mesh)
		{
		}
	}
	[Token(Token = "0x2000250")]
	public delegate void IntegrationHandler(IntegrationArgs args);
	[Token(Token = "0x2000251")]
	public static class MeshCombinerIntegration
	{
		[Token(Token = "0x14000004")]
		public static event IntegrationHandler Combined
		{
			[Token(Token = "0x600138B")]
			[Address(RVA = "0x4EF148", Offset = "0x4EF148", VA = "0x4EF148")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A574", Offset = "0x24A574")]
			add
			{
			}
			[Token(Token = "0x600138C")]
			[Address(RVA = "0x4EF220", Offset = "0x4EF220", VA = "0x4EF220")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A584", Offset = "0x24A584")]
			remove
			{
			}
		}

		[Token(Token = "0x14000005")]
		public static event IntegrationHandler BeginEditPivot
		{
			[Token(Token = "0x600138D")]
			[Address(RVA = "0x4EF2F8", Offset = "0x4EF2F8", VA = "0x4EF2F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A594", Offset = "0x24A594")]
			add
			{
			}
			[Token(Token = "0x600138E")]
			[Address(RVA = "0x4EF3D4", Offset = "0x4EF3D4", VA = "0x4EF3D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A5A4", Offset = "0x24A5A4")]
			remove
			{
			}
		}

		[Token(Token = "0x600138F")]
		[Address(RVA = "0x4EF4B0", Offset = "0x4EF4B0", VA = "0x4EF4B0")]
		public static void RaiseCombined(GameObject go, Mesh mesh)
		{
		}

		[Token(Token = "0x6001390")]
		[Address(RVA = "0x4EF554", Offset = "0x4EF554", VA = "0x4EF554")]
		public static bool RaiseBeginEditPivot(GameObject go, Mesh mesh)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000252")]
	public static class MeshDeformerIntegration
	{
		[Token(Token = "0x14000006")]
		public static event IntegrationHandler BeforeDeform
		{
			[Token(Token = "0x6001391")]
			[Address(RVA = "0x4EF648", Offset = "0x4EF648", VA = "0x4EF648")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A5B4", Offset = "0x24A5B4")]
			add
			{
			}
			[Token(Token = "0x6001392")]
			[Address(RVA = "0x4EF720", Offset = "0x4EF720", VA = "0x4EF720")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A5C4", Offset = "0x24A5C4")]
			remove
			{
			}
		}

		[Token(Token = "0x6001393")]
		[Address(RVA = "0x4EF7F8", Offset = "0x4EF7F8", VA = "0x4EF7F8")]
		public static bool RaiseBeforeDeform(GameObject gameObject, Mesh mesh)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000253")]
	public static class WiresIntegration
	{
		[Token(Token = "0x14000007")]
		public static event IntegrationHandler WireParamsChanged
		{
			[Token(Token = "0x6001394")]
			[Address(RVA = "0x4EF8EC", Offset = "0x4EF8EC", VA = "0x4EF8EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A5D4", Offset = "0x24A5D4")]
			add
			{
			}
			[Token(Token = "0x6001395")]
			[Address(RVA = "0x4EF9C4", Offset = "0x4EF9C4", VA = "0x4EF9C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A5E4", Offset = "0x24A5E4")]
			remove
			{
			}
		}

		[Token(Token = "0x14000008")]
		public static event IntegrationHandler BeforeWireCreated
		{
			[Token(Token = "0x6001396")]
			[Address(RVA = "0x4EFA9C", Offset = "0x4EFA9C", VA = "0x4EFA9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A5F4", Offset = "0x24A5F4")]
			add
			{
			}
			[Token(Token = "0x6001397")]
			[Address(RVA = "0x4EFB78", Offset = "0x4EFB78", VA = "0x4EFB78")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x24A604", Offset = "0x24A604")]
			remove
			{
			}
		}

		[Token(Token = "0x6001398")]
		[Address(RVA = "0x4EFC54", Offset = "0x4EFC54", VA = "0x4EFC54")]
		public static bool RaiseBeforeWireCreated(GameObject gameObject, Mesh mesh)
		{
			return default(bool);
		}

		[Token(Token = "0x6001399")]
		[Address(RVA = "0x4EFD48", Offset = "0x4EFD48", VA = "0x4EFD48")]
		public static void RaiseWireParamsChanged(GameObject gameObject, Mesh mesh)
		{
		}
	}
}
