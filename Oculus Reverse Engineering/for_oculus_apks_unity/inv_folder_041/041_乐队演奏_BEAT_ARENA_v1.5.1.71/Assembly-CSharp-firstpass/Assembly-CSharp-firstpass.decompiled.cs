using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using CriMana;
using CriMana.Detail;
using CriWare;
using Il2CppDummyDll;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Events;
using UnityEngine.Playables;
using UnityEngine.Rendering;
using UnityEngine.UI;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
public static class CriAtomPlugin
{
	[Token(Token = "0x20000D7")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x9A4AF0", Offset = "0x9A4AF0")]
	public delegate ulong CallbackFromNativeDelegate(IntPtr ptr1);

	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int initializationCount;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static List<IntPtr> effectInterfaceList;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static bool isConfigured;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private static float timeSinceStartup;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static Common.CpuUsage cpuUsage;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private static int CRIATOMUNITY_PARAMETER_ID_LOOP_COUNT;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static ushort CRIATOMPARAMETER2_ID_INVALID;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static ulong temporalStorage;

	[Token(Token = "0x17000001")]
	public static bool isInitialized
	{
		[Token(Token = "0x6000002")]
		[Address(RVA = "0xF6C888", Offset = "0xF6C888", VA = "0xF6C888")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000001")]
	[Address(RVA = "0xF6C884", Offset = "0xF6C884", VA = "0xF6C884")]
	public static void Log(string log)
	{
	}

	[Token(Token = "0x6000003")]
	[Address(RVA = "0xF6C8F8", Offset = "0xF6C8F8", VA = "0xF6C8F8")]
	public static bool GetAudioEffectInterfaceList(out List<IntPtr> effect_interface_list)
	{
		return default(bool);
	}

	[Token(Token = "0x6000004")]
	[Address(RVA = "0xF6CA0C", Offset = "0xF6CA0C", VA = "0xF6CA0C")]
	private static IntPtr GetSpatializerCoreInterfaceFromAtomOculusAudioBridge()
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0xF6CC38", Offset = "0xF6CC38", VA = "0xF6CC38")]
	public static void SetConfigParameters(int max_virtual_voices, int max_voice_limit_groups, int max_categories, int max_sequence_events_per_frame, int max_beatsync_callbacks_per_frame, int max_cuelink_callbacks_per_frame, int num_standard_memory_voices, int num_standard_streaming_voices, int num_hca_mx_memory_voices, int num_hca_mx_streaming_voices, int output_sampling_rate, int num_asr_output_channels, bool uses_in_game_preview, float server_frequency, int max_parameter_blocks, int categories_per_playback, int num_buses, bool vr_mode)
	{
	}

	[Token(Token = "0x6000006")]
	[Address(RVA = "0xF6CF0C", Offset = "0xF6CF0C", VA = "0xF6CF0C")]
	public static void SetConfigMonitorParametes(int max_preview_objects, int communication_buffer_size, int playback_position_update_interval)
	{
	}

	[Token(Token = "0x6000007")]
	[Address(RVA = "0xF6D020", Offset = "0xF6D020", VA = "0xF6D020")]
	public static void SetConfigAdditionalParameters_PC(long buffering_time_pc)
	{
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0xF6D104", Offset = "0xF6D104", VA = "0xF6D104")]
	public static void SetConfigAdditionalParameters_LINUX(CriAtomConfig.LinuxOutput output, int pulse_latency_usec)
	{
	}

	[Token(Token = "0x6000009")]
	[Address(RVA = "0xF6D208", Offset = "0xF6D208", VA = "0xF6D208")]
	public static void SetConfigAdditionalParameters_IOS(bool enable_sonicsync, uint buffering_time_ios, bool override_ipod_music_ios)
	{
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0xF6D31C", Offset = "0xF6D31C", VA = "0xF6D31C")]
	public static void SetConfigAdditionalParameters_ANDROID(bool enable_sonicsync, int num_low_delay_memory_voices, int num_low_delay_streaming_voices, int sound_buffering_time, int sound_start_buffering_time, bool use_fast_mixer, bool use_aaudio)
	{
	}

	[Token(Token = "0x600000B")]
	[Address(RVA = "0xF6D79C", Offset = "0xF6D79C", VA = "0xF6D79C")]
	public static void SetConfigAdditionalParameters_VITA(int num_atrac9_memory_voices, int num_atrac9_streaming_voices, int num_mana_decoders)
	{
	}

	[Token(Token = "0x600000C")]
	[Address(RVA = "0xF6D7A0", Offset = "0xF6D7A0", VA = "0xF6D7A0")]
	public static void SetConfigAdditionalParameters_PS4(int num_atrac9_memory_voices, int num_atrac9_streaming_voices, bool use_audio3d, int num_audio3d_memory_voices, int num_audio3d_streaming_voices)
	{
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0xF6D7A4", Offset = "0xF6D7A4", VA = "0xF6D7A4")]
	public static void SetConfigAdditionalParameters_SWITCH(int num_opus_memory_voices, int num_opus_streaming_voices, bool init_socket)
	{
	}

	[Token(Token = "0x600000E")]
	[Address(RVA = "0xF6D7A8", Offset = "0xF6D7A8", VA = "0xF6D7A8")]
	public static void SetConfigAdditionalParameters_WEBGL(int num_webaudio_voices)
	{
	}

	[Token(Token = "0x600000F")]
	[Address(RVA = "0xF6D7AC", Offset = "0xF6D7AC", VA = "0xF6D7AC")]
	public static void SetMaxSamplingRateForStandardVoicePool(int sampling_rate_for_memory, int sampling_rate_for_streaming)
	{
	}

	[Token(Token = "0x6000010")]
	[Address(RVA = "0xF6D8B0", Offset = "0xF6D8B0", VA = "0xF6D8B0")]
	public static int GetRequiredMaxVirtualVoices(CriAtomConfig atomConfig)
	{
		return default(int);
	}

	[Token(Token = "0x6000011")]
	[Address(RVA = "0xF6D900", Offset = "0xF6D900", VA = "0xF6D900")]
	public static void InitializeLibrary()
	{
	}

	[Token(Token = "0x6000012")]
	[Address(RVA = "0xF62754", Offset = "0xF62754", VA = "0xF62754")]
	public static bool IsLibraryInitialized()
	{
		return default(bool);
	}

	[Token(Token = "0x6000013")]
	[Address(RVA = "0xF6DB64", Offset = "0xF6DB64", VA = "0xF6DB64")]
	public static void FinalizeLibrary()
	{
	}

	[Token(Token = "0x6000014")]
	[Address(RVA = "0xF6E0A4", Offset = "0xF6E0A4", VA = "0xF6E0A4")]
	public static void Pause(bool pause)
	{
	}

	[Token(Token = "0x6000015")]
	[Address(RVA = "0xF6E1B4", Offset = "0xF6E1B4", VA = "0xF6E1B4")]
	public static Common.CpuUsage GetCpuUsage()
	{
		return default(Common.CpuUsage);
	}

	[Token(Token = "0x6000016")]
	[Address(RVA = "0xF67FEC", Offset = "0xF67FEC", VA = "0xF67FEC")]
	public static ushort GetLoopCountParameterId()
	{
		return default(ushort);
	}

	[Token(Token = "0x6000017")]
	[Address(RVA = "0xF6E3C8", Offset = "0xF6E3C8", VA = "0xF6E3C8")]
	public static void DecryptAcb(IntPtr acb_hn, ulong key, ulong nonce)
	{
	}

	[Token(Token = "0x6000018")]
	[Address(RVA = "0xF6E548", Offset = "0xF6E548", VA = "0xF6E548")]
	[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x9AC434", Offset = "0x9AC434")]
	private static ulong CallbackFromNative(IntPtr ptr1)
	{
		return default(ulong);
	}

	[PreserveSig]
	[Token(Token = "0x6000019")]
	[Address(RVA = "0xF6CDB8", Offset = "0xF6CDB8", VA = "0xF6CDB8")]
	private static extern void CRIWARE496A3B2F(int max_virtual_voices, int max_voice_limit_groups, int max_categories, int max_sequence_events_per_frame, int max_beatsync_callbacks_per_frame, int max_cuelink_callbacks_per_frame, int num_standard_memory_voices, int num_standard_streaming_voices, int num_hca_mx_memory_voices, int num_hca_mx_streaming_voices, int output_sampling_rate, int num_asr_output_channels, bool uses_in_game_preview, float server_frequency, int max_parameter_blocks, int categories_per_playback, int num_buses, bool use_ambisonics, IntPtr spatializer_core_interface);

	[PreserveSig]
	[Token(Token = "0x600001A")]
	[Address(RVA = "0xF6CF88", Offset = "0xF6CF88", VA = "0xF6CF88")]
	private static extern void CRIWARE5486CB0C(uint max_preivew_objects, uint communication_buffer_size, int playback_position_update_interval);

	[PreserveSig]
	[Token(Token = "0x600001B")]
	[Address(RVA = "0xF6D084", Offset = "0xF6D084", VA = "0xF6D084")]
	private static extern void CRIWARE986A7557(long buffering_time_pc);

	[PreserveSig]
	[Token(Token = "0x600001C")]
	[Address(RVA = "0xF6D178", Offset = "0xF6D178", VA = "0xF6D178")]
	private static extern void CRIWARE1EF773FF(int output, int pulse_latency_usec);

	[PreserveSig]
	[Token(Token = "0x600001D")]
	[Address(RVA = "0xF6D284", Offset = "0xF6D284", VA = "0xF6D284")]
	private static extern void CRIWAREA8DDE932(bool enable_sonicsync, uint buffering_time_ios, bool override_ipod_music_ios);

	[PreserveSig]
	[Token(Token = "0x600001E")]
	[Address(RVA = "0xF6D5DC", Offset = "0xF6D5DC", VA = "0xF6D5DC")]
	private static extern void CRIWARE7300EC66(bool enable_sonicsync, int num_low_delay_memory_voices, int num_low_delay_streaming_voices, int sound_buffering_time, int sound_start_buffering_time, bool apply_hw_property);

	[PreserveSig]
	[Token(Token = "0x600001F")]
	[Address(RVA = "0xF6D69C", Offset = "0xF6D69C", VA = "0xF6D69C")]
	private static extern void CRIWAREB80BEF9C(IntPtr android_context);

	[PreserveSig]
	[Token(Token = "0x6000020")]
	[Address(RVA = "0xF6D71C", Offset = "0xF6D71C", VA = "0xF6D71C")]
	private static extern void CRIWARE1DC61BE9(bool flag);

	[PreserveSig]
	[Token(Token = "0x6000021")]
	[Address(RVA = "0xF6DD60", Offset = "0xF6DD60", VA = "0xF6DD60")]
	private static extern void CRIWARE6B0DCA88();

	[PreserveSig]
	[Token(Token = "0x6000022")]
	[Address(RVA = "0xF6DEB8", Offset = "0xF6DEB8", VA = "0xF6DEB8")]
	public static extern bool CRIWARE73A63785();

	[PreserveSig]
	[Token(Token = "0x6000023")]
	[Address(RVA = "0xF6E034", Offset = "0xF6E034", VA = "0xF6E034")]
	private static extern void CRIWARE111A4C56();

	[PreserveSig]
	[Token(Token = "0x6000024")]
	[Address(RVA = "0xF6E134", Offset = "0xF6E134", VA = "0xF6E134")]
	private static extern void CRIWARE59269F98(bool pause);

	[PreserveSig]
	[Token(Token = "0x6000025")]
	[Address(RVA = "0xF6E5B0", Offset = "0xF6E5B0", VA = "0xF6E5B0")]
	public static extern uint CRIWARE5C7A47BE();

	[PreserveSig]
	[Token(Token = "0x6000026")]
	[Address(RVA = "0xF6E624", Offset = "0xF6E624", VA = "0xF6E624")]
	public static extern void CRIWAREDD99CEC5(int code);

	[PreserveSig]
	[Token(Token = "0x6000027")]
	[Address(RVA = "0xF6E6A4", Offset = "0xF6E6A4", VA = "0xF6E6A4")]
	public static extern void CRIWAREA2F80582(IntPtr cbfunc, string separator_string);

	[PreserveSig]
	[Token(Token = "0x6000028")]
	[Address(RVA = "0xF6E748", Offset = "0xF6E748", VA = "0xF6E748")]
	public static extern void CRIWAREC42CD834(IntPtr cbfunc);

	[PreserveSig]
	[Token(Token = "0x6000029")]
	[Address(RVA = "0xF6E7C8", Offset = "0xF6E7C8", VA = "0xF6E7C8")]
	public static extern void CRIWARE148BE2F8();

	[PreserveSig]
	[Token(Token = "0x600002A")]
	[Address(RVA = "0xF6E838", Offset = "0xF6E838", VA = "0xF6E838")]
	public static extern void CRIWARE2DDFB51C(IntPtr cbfunc);

	[PreserveSig]
	[Token(Token = "0x600002B")]
	[Address(RVA = "0xF6E8B8", Offset = "0xF6E8B8", VA = "0xF6E8B8")]
	public static extern void CRIWARE75F073A2();

	[PreserveSig]
	[Token(Token = "0x600002C")]
	[Address(RVA = "0xF6E928", Offset = "0xF6E928", VA = "0xF6E928")]
	public static extern void criAtomUnity_SetCueLinkCallback(IntPtr cbfunc);

	[PreserveSig]
	[Token(Token = "0x600002D")]
	[Address(RVA = "0xF6E9A8", Offset = "0xF6E9A8", VA = "0xF6E9A8")]
	public static extern void criAtomUnity_ExecuteQueuedCueLinkCallbacks();

	[PreserveSig]
	[Token(Token = "0x600002E")]
	[Address(RVA = "0xF6D820", Offset = "0xF6D820", VA = "0xF6D820")]
	private static extern void CRIWAREBF5EE548(int sampling_rate_for_memory, int sampling_rate_for_streaming);

	[PreserveSig]
	[Token(Token = "0x600002F")]
	[Address(RVA = "0xF6EA18", Offset = "0xF6EA18", VA = "0xF6EA18")]
	public static extern void CRIWAREB02E50B1();

	[PreserveSig]
	[Token(Token = "0x6000030")]
	[Address(RVA = "0xF6EA88", Offset = "0xF6EA88", VA = "0xF6EA88")]
	public static extern void CRIWARE3EE7B6BD();

	[PreserveSig]
	[Token(Token = "0x6000031")]
	[Address(RVA = "0xF6E4A8", Offset = "0xF6E4A8", VA = "0xF6E4A8")]
	public static extern void CRIWARE3284CFDB(IntPtr acb_hn, CallbackFromNativeDelegate func, IntPtr obj);

	[PreserveSig]
	[Token(Token = "0x6000032")]
	[Address(RVA = "0xF6E348", Offset = "0xF6E348", VA = "0xF6E348")]
	public static extern ushort CRIWARE2178C0A8(int id);
}
[Serializable]
[Token(Token = "0x2000003")]
public class CriAtomCueSheet
{
	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string name;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string acbFile;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string awbFile;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public CriAtomExAcb acb;

	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public CriAtomExAcbLoader.Status loaderStatus;

	[Token(Token = "0x17000002")]
	public bool IsLoading
	{
		[Token(Token = "0x6000034")]
		[Address(RVA = "0xFA37B0", Offset = "0xFA37B0", VA = "0xFA37B0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000003")]
	public bool IsError
	{
		[Token(Token = "0x6000035")]
		[Address(RVA = "0xFA6798", Offset = "0xFA6798", VA = "0xFA6798")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000036")]
	[Address(RVA = "0xFA4AAC", Offset = "0xFA4AAC", VA = "0xFA4AAC")]
	public CriAtomCueSheet()
	{
	}
}
[Token(Token = "0x2000004")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A3DE8", Offset = "0x9A3DE8")]
public class CriAtom : CriMonoBehaviour
{
	[Token(Token = "0x20000D8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A4B04", Offset = "0x9A4B04")]
	private sealed class <>c__DisplayClass58_0
	{
		[Token(Token = "0x40005A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int i;

		[Token(Token = "0x40005A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CriAtom <>4__this;

		[Token(Token = "0x6000C23")]
		[Address(RVA = "0xFA4B08", Offset = "0xFA4B08", VA = "0xFA4B08")]
		public <>c__DisplayClass58_0()
		{
		}

		[Token(Token = "0x6000C24")]
		[Address(RVA = "0xFA53EC", Offset = "0xFA53EC", VA = "0xFA53EC")]
		internal bool <MargeCueSheet>b__0(CriAtomCueSheet sheet)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x20000D9")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A4B14", Offset = "0x9A4B14")]
	private sealed class <LoadAcbFileCoroutine>d__62 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CriAtomCueSheet cueSheet;

		[Token(Token = "0x40005A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CriFsBinder binder;

		[Token(Token = "0x40005AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string acbPath;

		[Token(Token = "0x40005AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string awbPath;

		[Token(Token = "0x40005AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public CriAtom <>4__this;

		[Token(Token = "0x40005AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool loadAwbOnMemory;

		[Token(Token = "0x40005AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CriAtomExAcbLoader <asyncLoader>5__2;

		[Token(Token = "0x170000EC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C29")]
			[Address(RVA = "0xFA5F60", Offset = "0xFA5F60", VA = "0xFA5F60", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000ED")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C2B")]
			[Address(RVA = "0xFA5FC8", Offset = "0xFA5FC8", VA = "0xFA5FC8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C25")]
		[Address(RVA = "0xFA4DCC", Offset = "0xFA4DCC", VA = "0xFA4DCC")]
		[DebuggerHidden]
		public <LoadAcbFileCoroutine>d__62(int <>1__state)
		{
		}

		[Token(Token = "0x6000C26")]
		[Address(RVA = "0xFA5A2C", Offset = "0xFA5A2C", VA = "0xFA5A2C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C27")]
		[Address(RVA = "0xFA5B08", Offset = "0xFA5B08", VA = "0xFA5B08", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C28")]
		[Address(RVA = "0xFA5A48", Offset = "0xFA5A48", VA = "0xFA5A48")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6000C2A")]
		[Address(RVA = "0xFA5F68", Offset = "0xFA5F68", VA = "0xFA5F68", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000DA")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A4B24", Offset = "0x9A4B24")]
	private sealed class <LoadAcbDataCoroutine>d__64 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CriAtomCueSheet cueSheet;

		[Token(Token = "0x40005B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string awbPath;

		[Token(Token = "0x40005B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public CriFsBinder awbBinder;

		[Token(Token = "0x40005B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public CriAtom <>4__this;

		[Token(Token = "0x40005B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public byte[] acbData;

		[Token(Token = "0x40005B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool loadAwbOnMemory;

		[Token(Token = "0x40005B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CriAtomExAcbLoader <asyncLoader>5__2;

		[Token(Token = "0x170000EE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C30")]
			[Address(RVA = "0xFA59BC", Offset = "0xFA59BC", VA = "0xFA59BC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C32")]
			[Address(RVA = "0xFA5A24", Offset = "0xFA5A24", VA = "0xFA5A24", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C2C")]
		[Address(RVA = "0xFA4EA4", Offset = "0xFA4EA4", VA = "0xFA4EA4")]
		[DebuggerHidden]
		public <LoadAcbDataCoroutine>d__64(int <>1__state)
		{
		}

		[Token(Token = "0x6000C2D")]
		[Address(RVA = "0xFA5448", Offset = "0xFA5448", VA = "0xFA5448", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C2E")]
		[Address(RVA = "0xFA5524", Offset = "0xFA5524", VA = "0xFA5524", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C2F")]
		[Address(RVA = "0xFA5464", Offset = "0xFA5464", VA = "0xFA5464")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6000C31")]
		[Address(RVA = "0xFA59C4", Offset = "0xFA59C4", VA = "0xFA59C4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string acfFile;

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool acfIsLoading;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public CriAtomCueSheet[] cueSheets;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string dspBusSetting;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool dontDestroyOnLoad;

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static CriAtomExSequencer.EventCallback eventUserCallback;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static CriAtomExSequencer.EventCbFunc eventUserCbFunc;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static CriAtomExBeatSync.CbFunc obsoleteBeatSyncFunc;

	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A4E1C", Offset = "0x9A4E1C")]
	private static CriAtom <instance>k__BackingField;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private GCHandle acfRegisterGCHandle;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool dontRemoveExistsCueSheet;

	[Token(Token = "0x17000004")]
	private static CriAtom instance
	{
		[Token(Token = "0x6000041")]
		[Address(RVA = "0xFA23B4", Offset = "0xFA23B4", VA = "0xFA23B4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AC4D8", Offset = "0x9AC4D8")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000042")]
		[Address(RVA = "0xFA241C", Offset = "0xFA241C", VA = "0xFA241C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AC4E8", Offset = "0x9AC4E8")]
		set
		{
		}
	}

	[Token(Token = "0x17000005")]
	public static bool CueSheetsAreLoading
	{
		[Token(Token = "0x600004B")]
		[Address(RVA = "0xFA360C", Offset = "0xFA360C", VA = "0xFA360C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x14000001")]
	internal static event CriAtomExSequencer.EventCallback OnEventSequencerCallback
	{
		[Token(Token = "0x6000037")]
		[Address(RVA = "0xFA17A4", Offset = "0xFA17A4", VA = "0xFA17A4")]
		add
		{
		}
		[Token(Token = "0x6000038")]
		[Address(RVA = "0xFA1970", Offset = "0xFA1970", VA = "0xFA1970")]
		remove
		{
		}
	}

	[Token(Token = "0x14000002")]
	private static event CriAtomExBeatSync.CbFunc beatsyncUserCbFunc
	{
		[Token(Token = "0x6000039")]
		[Address(RVA = "0xFA1ABC", Offset = "0xFA1ABC", VA = "0xFA1ABC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AC498", Offset = "0x9AC498")]
		add
		{
		}
		[Token(Token = "0x600003A")]
		[Address(RVA = "0xFA1BAC", Offset = "0xFA1BAC", VA = "0xFA1BAC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AC4A8", Offset = "0x9AC4A8")]
		remove
		{
		}
	}

	[Token(Token = "0x14000003")]
	internal static event CriAtomExBeatSync.CbFunc OnBeatSyncCallback
	{
		[Token(Token = "0x600003B")]
		[Address(RVA = "0xFA1C9C", Offset = "0xFA1C9C", VA = "0xFA1C9C")]
		add
		{
		}
		[Token(Token = "0x600003C")]
		[Address(RVA = "0xFA1E28", Offset = "0xFA1E28", VA = "0xFA1E28")]
		remove
		{
		}
	}

	[Token(Token = "0x14000004")]
	private static event CriAtomEx.CueLinkCbFunc cueLinkUserCbFunc
	{
		[Token(Token = "0x600003D")]
		[Address(RVA = "0xFA1F38", Offset = "0xFA1F38", VA = "0xFA1F38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AC4B8", Offset = "0x9AC4B8")]
		add
		{
		}
		[Token(Token = "0x600003E")]
		[Address(RVA = "0xFA2028", Offset = "0xFA2028", VA = "0xFA2028")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AC4C8", Offset = "0x9AC4C8")]
		remove
		{
		}
	}

	[Token(Token = "0x14000005")]
	internal static event CriAtomEx.CueLinkCbFunc OnCueLinkCallback
	{
		[Token(Token = "0x600003F")]
		[Address(RVA = "0xFA2118", Offset = "0xFA2118", VA = "0xFA2118")]
		add
		{
		}
		[Token(Token = "0x6000040")]
		[Address(RVA = "0xFA22A4", Offset = "0xFA22A4", VA = "0xFA22A4")]
		remove
		{
		}
	}

	[Token(Token = "0x6000043")]
	[Address(RVA = "0xFA2488", Offset = "0xFA2488", VA = "0xFA2488")]
	public static void AttachDspBusSetting(string settingName)
	{
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0xFA2668", Offset = "0xFA2668", VA = "0xFA2668")]
	public static void DetachDspBusSetting()
	{
	}

	[Token(Token = "0x6000045")]
	[Address(RVA = "0xFA2744", Offset = "0xFA2744", VA = "0xFA2744")]
	public static CriAtomCueSheet GetCueSheet(string name)
	{
		return null;
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0xFA288C", Offset = "0xFA288C", VA = "0xFA288C")]
	public static CriAtomCueSheet AddCueSheet(string name, string acbFile, string awbFile, [Optional] CriFsBinder binder)
	{
		return null;
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0xFA2D18", Offset = "0xFA2D18", VA = "0xFA2D18")]
	public static CriAtomCueSheet AddCueSheetAsync(string name, string acbFile, string awbFile, [Optional] CriFsBinder binder, bool loadAwbOnMemory = false)
	{
		return null;
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0xFA2F18", Offset = "0xFA2F18", VA = "0xFA2F18")]
	public static CriAtomCueSheet AddCueSheet(string name, byte[] acbData, string awbFile, [Optional] CriFsBinder awbBinder)
	{
		return null;
	}

	[Token(Token = "0x6000049")]
	[Address(RVA = "0xFA319C", Offset = "0xFA319C", VA = "0xFA319C")]
	public static CriAtomCueSheet AddCueSheetAsync(string name, byte[] acbData, string awbFile, [Optional] CriFsBinder awbBinder, bool loadAwbOnMemory = false)
	{
		return null;
	}

	[Token(Token = "0x600004A")]
	[Address(RVA = "0xFA335C", Offset = "0xFA335C", VA = "0xFA335C")]
	public static void RemoveCueSheet(string name)
	{
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0xFA37C0", Offset = "0xFA37C0", VA = "0xFA37C0")]
	public static CriAtomExAcb GetAcb(string cueSheetName)
	{
		return null;
	}

	[Token(Token = "0x600004D")]
	[Address(RVA = "0xFA392C", Offset = "0xFA392C", VA = "0xFA392C")]
	public static void SetCategoryVolume(string name, float volume)
	{
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0xFA3934", Offset = "0xFA3934", VA = "0xFA3934")]
	public static void SetCategoryVolume(int id, float volume)
	{
	}

	[Token(Token = "0x600004F")]
	[Address(RVA = "0xFA393C", Offset = "0xFA393C", VA = "0xFA393C")]
	public static float GetCategoryVolume(string name)
	{
		return default(float);
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0xFA3944", Offset = "0xFA3944", VA = "0xFA3944")]
	public static float GetCategoryVolume(int id)
	{
		return default(float);
	}

	[Token(Token = "0x6000051")]
	[Address(RVA = "0xFA394C", Offset = "0xFA394C", VA = "0xFA394C")]
	public static void SetBusAnalyzer(string busName, bool sw)
	{
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0xFA3968", Offset = "0xFA3968", VA = "0xFA3968")]
	public static void SetBusAnalyzer(bool sw)
	{
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0xFA3984", Offset = "0xFA3984", VA = "0xFA3984")]
	public static CriAtomExAsr.BusAnalyzerInfo GetBusAnalyzerInfo(string busName)
	{
		return default(CriAtomExAsr.BusAnalyzerInfo);
	}

	[Token(Token = "0x6000054")]
	[Address(RVA = "0xFA39C4", Offset = "0xFA39C4", VA = "0xFA39C4")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9AC4F8", Offset = "0x9AC4F8")]
	public static CriAtomExAsr.BusAnalyzerInfo GetBusAnalyzerInfo(int busId)
	{
		return default(CriAtomExAsr.BusAnalyzerInfo);
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0xFA3A04", Offset = "0xFA3A04", VA = "0xFA3A04")]
	public void Setup()
	{
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0xFA3E90", Offset = "0xFA3E90", VA = "0xFA3E90")]
	public void Shutdown()
	{
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0xFA4144", Offset = "0xFA4144", VA = "0xFA4144")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0xFA4778", Offset = "0xFA4778", VA = "0xFA4778", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x6000059")]
	[Address(RVA = "0xFA4880", Offset = "0xFA4880", VA = "0xFA4880")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0xFA4A38", Offset = "0xFA4A38", VA = "0xFA4A38", Slot = "6")]
	public override void CriInternalUpdate()
	{
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0xFA4AA8", Offset = "0xFA4AA8", VA = "0xFA4AA8", Slot = "7")]
	public override void CriInternalLateUpdate()
	{
	}

	[Token(Token = "0x600005C")]
	[Address(RVA = "0xFA2800", Offset = "0xFA2800", VA = "0xFA2800")]
	public CriAtomCueSheet GetCueSheetInternal(string name)
	{
		return null;
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0xFA29F4", Offset = "0xFA29F4", VA = "0xFA29F4")]
	public CriAtomCueSheet AddCueSheetInternal(string name, string acbFile, string awbFile, CriFsBinder binder)
	{
		return null;
	}

	[Token(Token = "0x600005E")]
	[Address(RVA = "0xFA34BC", Offset = "0xFA34BC", VA = "0xFA34BC")]
	public void RemoveCueSheetInternal(string name)
	{
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0xFA4578", Offset = "0xFA4578", VA = "0xFA4578")]
	private void MargeCueSheet(CriAtomCueSheet[] newCueSheets, bool newDontRemoveExistsCueSheet)
	{
	}

	[Token(Token = "0x6000060")]
	[Address(RVA = "0xFA2B58", Offset = "0xFA2B58", VA = "0xFA2B58")]
	private CriAtomExAcb LoadAcbFile(CriFsBinder binder, string acbFile, string awbFile)
	{
		return null;
	}

	[Token(Token = "0x6000061")]
	[Address(RVA = "0xFA3088", Offset = "0xFA3088", VA = "0xFA3088")]
	private CriAtomExAcb LoadAcbData(byte[] acbData, CriFsBinder binder, string awbFile)
	{
		return null;
	}

	[Token(Token = "0x6000062")]
	[Address(RVA = "0xFA2E8C", Offset = "0xFA2E8C", VA = "0xFA2E8C")]
	private void LoadAcbFileAsync(CriAtomCueSheet cueSheet, CriFsBinder binder, string acbFile, string awbFile, bool loadAwbOnMemory)
	{
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0xFA4D20", Offset = "0xFA4D20", VA = "0xFA4D20")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x9AC530", Offset = "0x9AC530")]
	private IEnumerator LoadAcbFileCoroutine(CriAtomCueSheet cueSheet, CriFsBinder binder, string acbPath, string awbPath, bool loadAwbOnMemory)
	{
		return null;
	}

	[Token(Token = "0x6000064")]
	[Address(RVA = "0xFA332C", Offset = "0xFA332C", VA = "0xFA332C")]
	private void LoadAcbDataAsync(CriAtomCueSheet cueSheet, byte[] acbData, CriFsBinder awbBinder, string awbFile, bool loadAwbOnMemory)
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0xFA4DF8", Offset = "0xFA4DF8", VA = "0xFA4DF8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x9AC594", Offset = "0x9AC594")]
	private IEnumerator LoadAcbDataCoroutine(CriAtomCueSheet cueSheet, byte[] acbData, CriFsBinder awbBinder, string awbPath, bool loadAwbOnMemory)
	{
		return null;
	}

	[Token(Token = "0x6000066")]
	[Address(RVA = "0xFA14E8", Offset = "0xFA14E8", VA = "0xFA14E8")]
	[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x9AC5F8", Offset = "0x9AC5F8")]
	public static void SequenceEventCallbackFromNative(string eventString)
	{
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0xFA1598", Offset = "0xFA1598", VA = "0xFA1598")]
	[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x9AC65C", Offset = "0x9AC65C")]
	private static void SequenceCallbackFromNative(ref CriAtomExSequencer.CriAtomExSequenceEventInfo criAtomExSequenceInfo)
	{
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0xFA1648", Offset = "0xFA1648", VA = "0xFA1648")]
	[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x9AC6C0", Offset = "0x9AC6C0")]
	public static void BeatSyncCallbackFromNative(ref CriAtomExBeatSync.Info info)
	{
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0xFA16F8", Offset = "0xFA16F8", VA = "0xFA16F8")]
	[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x9AC724", Offset = "0x9AC724")]
	public static void CueLinkCallbackFromNative(ref CriAtomEx.CueLinkInfo info)
	{
	}

	[Token(Token = "0x600006A")]
	[Address(RVA = "0xFA5124", Offset = "0xFA5124", VA = "0xFA5124")]
	public static void SetEventCallback(CriAtomExSequencer.EventCbFunc func, string separator)
	{
	}

	[Token(Token = "0x600006B")]
	[Address(RVA = "0xFA1808", Offset = "0xFA1808", VA = "0xFA1808")]
	private static void RegisterEventCallbackChain(CriAtomExSequencer.EventCallback func)
	{
	}

	[Token(Token = "0x600006C")]
	[Address(RVA = "0xFA19D4", Offset = "0xFA19D4", VA = "0xFA19D4")]
	private static void UnregisterEventCallbackChain(CriAtomExSequencer.EventCallback func)
	{
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0xFA5230", Offset = "0xFA5230", VA = "0xFA5230")]
	public static void SetBeatSyncCallback(CriAtomExBeatSync.CbFunc func)
	{
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0xFA1D00", Offset = "0xFA1D00", VA = "0xFA1D00")]
	private static void RegisterBeatSyncCallbackChain(CriAtomExBeatSync.CbFunc func)
	{
	}

	[Token(Token = "0x600006F")]
	[Address(RVA = "0xFA1E8C", Offset = "0xFA1E8C", VA = "0xFA1E8C")]
	private static void UnregisterBeatSyncCallbackChain(CriAtomExBeatSync.CbFunc func)
	{
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0xFA217C", Offset = "0xFA217C", VA = "0xFA217C")]
	private static void RegisterCueLinkCallbackChain(CriAtomEx.CueLinkCbFunc func)
	{
	}

	[Token(Token = "0x6000071")]
	[Address(RVA = "0xFA2308", Offset = "0xFA2308", VA = "0xFA2308")]
	private static void UnregisterCueLinkCallbackChain(CriAtomEx.CueLinkCbFunc func)
	{
	}

	[Token(Token = "0x6000072")]
	[Address(RVA = "0xFA5374", Offset = "0xFA5374", VA = "0xFA5374")]
	public CriAtom()
	{
	}
}
[Token(Token = "0x2000005")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A3E20", Offset = "0x9A3E20")]
public class CriAtomListener : CriMonoBehaviour
{
	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A4E2C", Offset = "0x9A4E2C")]
	private CriAtomEx3dListener <nativeListener>k__BackingField;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private CriAtomRegion regionOnStart;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool activateListenerOnEnable;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<CriAtomListener> listenersList;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static CriAtomEx3dListener dummyNativeListener;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 lastPosition;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private CriAtomRegion currentRegion;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool _isActive;

	[Token(Token = "0x17000006")]
	public CriAtomEx3dListener nativeListener
	{
		[Token(Token = "0x6000076")]
		[Address(RVA = "0xF6AC24", Offset = "0xF6AC24", VA = "0xF6AC24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AC788", Offset = "0x9AC788")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000077")]
		[Address(RVA = "0xF6AC2C", Offset = "0xF6AC2C", VA = "0xF6AC2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AC798", Offset = "0x9AC798")]
		protected set
		{
		}
	}

	[Token(Token = "0x17000007")]
	public bool isActive
	{
		[Token(Token = "0x6000078")]
		[Address(RVA = "0xF6AC34", Offset = "0xF6AC34", VA = "0xF6AC34")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000079")]
		[Address(RVA = "0xF6AC3C", Offset = "0xF6AC3C", VA = "0xF6AC3C")]
		set
		{
		}
	}

	[Token(Token = "0x17000008")]
	public CriAtomRegion region3d
	{
		[Token(Token = "0x600007A")]
		[Address(RVA = "0xF6AEAC", Offset = "0xF6AEAC", VA = "0xF6AEAC")]
		get
		{
			return null;
		}
		[Token(Token = "0x600007B")]
		[Address(RVA = "0xF6AEB4", Offset = "0xF6AEB4", VA = "0xF6AEB4")]
		set
		{
		}
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0xF6AAC8", Offset = "0xF6AAC8", VA = "0xF6AAC8")]
	public static void CreateDummyNativeListener()
	{
	}

	[Token(Token = "0x6000075")]
	[Address(RVA = "0xF6AB74", Offset = "0xF6AB74", VA = "0xF6AB74")]
	public static void DestroyDummyNativeListener()
	{
	}

	[Token(Token = "0x600007C")]
	[Address(RVA = "0xF6AFA4", Offset = "0xF6AFA4", VA = "0xF6AFA4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600007D")]
	[Address(RVA = "0xF6B0BC", Offset = "0xF6B0BC", VA = "0xF6B0BC")]
	private void Start()
	{
	}

	[Token(Token = "0x600007E")]
	[Address(RVA = "0xF6B148", Offset = "0xF6B148", VA = "0xF6B148", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0xF6B2FC", Offset = "0xF6B2FC", VA = "0xF6B2FC", Slot = "5")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x6000080")]
	[Address(RVA = "0xF6B328", Offset = "0xF6B328", VA = "0xF6B328")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0xF6B408", Offset = "0xF6B408", VA = "0xF6B408", Slot = "6")]
	public override void CriInternalUpdate()
	{
	}

	[Token(Token = "0x6000082")]
	[Address(RVA = "0xF6B40C", Offset = "0xF6B40C", VA = "0xF6B40C", Slot = "7")]
	public override void CriInternalLateUpdate()
	{
	}

	[Token(Token = "0x6000083")]
	[Address(RVA = "0xF6ACC4", Offset = "0xF6ACC4", VA = "0xF6ACC4")]
	private void UpdatePosition()
	{
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0xF6B174", Offset = "0xF6B174", VA = "0xF6B174")]
	public void ActivateListener(bool exclusive = true)
	{
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0xF6B41C", Offset = "0xF6B41C", VA = "0xF6B41C")]
	public CriAtomListener()
	{
	}
}
[Token(Token = "0x2000006")]
public class CriAtomOutputDeviceObserver : CriMonoBehaviour
{
	[Token(Token = "0x20000DB")]
	public enum OutputDeviceType
	{
		[Token(Token = "0x40005B9")]
		BuiltinSpeaker,
		[Token(Token = "0x40005BA")]
		WiredDevice,
		[Token(Token = "0x40005BB")]
		WirelessDevice
	}

	[Token(Token = "0x20000DC")]
	public delegate void DeviceConnectionChangeCallback(bool isConnected, OutputDeviceType deviceType);

	[Token(Token = "0x20000DD")]
	private static class UnsafeNativeMethods
	{
	}

	[Token(Token = "0x20000DE")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A4B34", Offset = "0x9A4B34")]
	private sealed class <CoroutineForCheck_ANDROID>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CriAtomOutputDeviceObserver <>4__this;

		[Token(Token = "0x40005BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <time>5__2;

		[Token(Token = "0x170000F0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C3A")]
			[Address(RVA = "0xF6C748", Offset = "0xF6C748", VA = "0xF6C748", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C3C")]
			[Address(RVA = "0xF6C7B0", Offset = "0xF6C7B0", VA = "0xF6C7B0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C37")]
		[Address(RVA = "0xF6C678", Offset = "0xF6C678", VA = "0xF6C678")]
		[DebuggerHidden]
		public <CoroutineForCheck_ANDROID>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x6000C38")]
		[Address(RVA = "0xF6C6B0", Offset = "0xF6C6B0", VA = "0xF6C6B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C39")]
		[Address(RVA = "0xF6C6B4", Offset = "0xF6C6B4", VA = "0xF6C6B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C3B")]
		[Address(RVA = "0xF6C750", Offset = "0xF6C750", VA = "0xF6C750", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool dontDestroyOnLoad;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool lastIsConnected;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	private bool isConnected;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private OutputDeviceType lastDeviceType;

	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private OutputDeviceType deviceType;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static CriAtomOutputDeviceObserver instance;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static AndroidJavaObject checker;

	[Token(Token = "0x17000009")]
	public static bool IsDeviceConnected
	{
		[Token(Token = "0x6000089")]
		[Address(RVA = "0xF6B684", Offset = "0xF6B684", VA = "0xF6B684")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700000A")]
	public static OutputDeviceType DeviceType
	{
		[Token(Token = "0x600008A")]
		[Address(RVA = "0xF6B764", Offset = "0xF6B764", VA = "0xF6B764")]
		get
		{
			return default(OutputDeviceType);
		}
	}

	[Token(Token = "0x14000006")]
	public static event DeviceConnectionChangeCallback OnDeviceConnectionChanged
	{
		[Token(Token = "0x6000087")]
		[Address(RVA = "0xF6B4A0", Offset = "0xF6B4A0", VA = "0xF6B4A0")]
		add
		{
		}
		[Token(Token = "0x6000088")]
		[Address(RVA = "0xF6BAC8", Offset = "0xF6BAC8", VA = "0xF6BAC8")]
		remove
		{
		}
	}

	[Token(Token = "0x14000007")]
	private static event DeviceConnectionChangeCallback _onDeviceConnectionChanged
	{
		[Token(Token = "0x600008B")]
		[Address(RVA = "0xF6B594", Offset = "0xF6B594", VA = "0xF6B594")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AC7A8", Offset = "0x9AC7A8")]
		add
		{
		}
		[Token(Token = "0x600008C")]
		[Address(RVA = "0xF6BB2C", Offset = "0xF6BB2C", VA = "0xF6BB2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AC7B8", Offset = "0x9AC7B8")]
		remove
		{
		}
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0xF6BC1C", Offset = "0xF6BC1C", VA = "0xF6BC1C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0xF6C228", Offset = "0xF6C228", VA = "0xF6C228")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0xF6C430", Offset = "0xF6C430", VA = "0xF6C430", Slot = "6")]
	public override void CriInternalUpdate()
	{
	}

	[Token(Token = "0x6000090")]
	[Address(RVA = "0xF6C540", Offset = "0xF6C540", VA = "0xF6C540", Slot = "7")]
	public override void CriInternalLateUpdate()
	{
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0xF6C544", Offset = "0xF6C544", VA = "0xF6C544")]
	private void CallbackFromObserver_ANDROID(string message)
	{
	}

	[Token(Token = "0x6000092")]
	[Address(RVA = "0xF6C0A4", Offset = "0xF6C0A4", VA = "0xF6C0A4")]
	private void CheckOutputDevice_ANDROID()
	{
	}

	[Token(Token = "0x6000093")]
	[Address(RVA = "0xF6C608", Offset = "0xF6C608", VA = "0xF6C608")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x9AC7C8", Offset = "0x9AC7C8")]
	private IEnumerator CoroutineForCheck_ANDROID()
	{
		return null;
	}

	[Token(Token = "0x6000094")]
	[Address(RVA = "0xF6C6A4", Offset = "0xF6C6A4", VA = "0xF6C6A4")]
	public CriAtomOutputDeviceObserver()
	{
	}
}
[Token(Token = "0x2000007")]
[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9A3E58", Offset = "0x9A3E58")]
public class CriAtomAcfInfo
{
	[Serializable]
	[Token(Token = "0x20000DF")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9A4B44", Offset = "0x9A4B44")]
	public class InfoBase
	{
		[Token(Token = "0x40005C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x40005C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int id;

		[Token(Token = "0x40005C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string comment;

		[Token(Token = "0x6000C3D")]
		[Address(RVA = "0xFA63D4", Offset = "0xFA63D4", VA = "0xFA63D4")]
		public InfoBase()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000E0")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9A4B7C", Offset = "0x9A4B7C")]
	public class AcfInfo : InfoBase
	{
		[Token(Token = "0x40005C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string acfPath;

		[Token(Token = "0x40005C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string atomGuid;

		[Token(Token = "0x40005C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string dspBusSetting;

		[Token(Token = "0x40005C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<string> aisacControlNameList;

		[Token(Token = "0x40005C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string acfFilePath;

		[Token(Token = "0x6000C3E")]
		[Address(RVA = "0xFA61FC", Offset = "0xFA61FC", VA = "0xFA61FC")]
		public AcfInfo(string n, int inId, string com, string inAcfPath, string _guid, string _dspBusSetting)
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000E1")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9A4BB4", Offset = "0x9A4BB4")]
	public class AcbInfo : InfoBase
	{
		[Token(Token = "0x40005C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string acbPath;

		[Token(Token = "0x40005C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string awbPath;

		[Token(Token = "0x40005CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string atomGuid;

		[Token(Token = "0x40005CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<CueInfo> cueInfoList;

		[Token(Token = "0x6000C3F")]
		[Address(RVA = "0xFA62F4", Offset = "0xFA62F4", VA = "0xFA62F4")]
		public AcbInfo(string n, int inId, string com, string inAcbPath, string inAwbPath, string _guid)
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000E2")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9A4BEC", Offset = "0x9A4BEC")]
	public class CueInfo : InfoBase
	{
		[Token(Token = "0x6000C40")]
		[Address(RVA = "0xFA643C", Offset = "0xFA643C", VA = "0xFA643C")]
		public CueInfo(string n, int inId, string com)
		{
		}
	}

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static AcfInfo acfInfo;

	[Token(Token = "0x6000096")]
	[Address(RVA = "0xFA5FD0", Offset = "0xFA5FD0", VA = "0xFA5FD0")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9AC82C", Offset = "0x9AC82C")]
	public static bool GetCueInfo(ref AcfInfo acfInfo, bool forceReload, string searchPath)
	{
		return default(bool);
	}

	[Token(Token = "0x6000097")]
	[Address(RVA = "0xFA62E8", Offset = "0xFA62E8", VA = "0xFA62E8")]
	public CriAtomAcfInfo()
	{
	}
}
[Token(Token = "0x2000008")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A3E90", Offset = "0x9A3E90")]
[DisallowMultipleComponent]
public class CriAtomRegion : CriMonoBehaviour
{
	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A4E6C", Offset = "0x9A4E6C")]
	private CriAtomEx3dRegion <region3dHn>k__BackingField;

	[Token(Token = "0x1700000B")]
	public CriAtomEx3dRegion region3dHn
	{
		[Token(Token = "0x6000099")]
		[Address(RVA = "0xF6EEA8", Offset = "0xF6EEA8", VA = "0xF6EEA8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AC864", Offset = "0x9AC864")]
		get
		{
			return null;
		}
		[Token(Token = "0x600009A")]
		[Address(RVA = "0xF6EEB0", Offset = "0xF6EEB0", VA = "0xF6EEB0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AC874", Offset = "0x9AC874")]
		protected set
		{
		}
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0xF6EEB8", Offset = "0xF6EEB8", VA = "0xF6EEB8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0xF6EEC4", Offset = "0xF6EEC4", VA = "0xF6EEC4", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x600009D")]
	[Address(RVA = "0xF6EEF4", Offset = "0xF6EEF4", VA = "0xF6EEF4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0xF6EF00", Offset = "0xF6EF00", VA = "0xF6EF00", Slot = "8")]
	protected virtual void InternalInitialize()
	{
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0xF6EF84", Offset = "0xF6EF84", VA = "0xF6EF84", Slot = "9")]
	protected virtual void InternalFinalize()
	{
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0xF6F000", Offset = "0xF6F000", VA = "0xF6F000", Slot = "10")]
	protected virtual void InitializeParameters()
	{
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0xF6F088", Offset = "0xF6F088", VA = "0xF6F088", Slot = "6")]
	public override void CriInternalUpdate()
	{
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0xF6F08C", Offset = "0xF6F08C", VA = "0xF6F08C", Slot = "7")]
	public override void CriInternalLateUpdate()
	{
	}

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0xF6F090", Offset = "0xF6F090", VA = "0xF6F090")]
	public CriAtomRegion()
	{
	}
}
[Token(Token = "0x2000009")]
public class CriAtomServer : CriMonoBehaviour
{
	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static CriAtomServer _instance;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Action<bool> onApplicationPausePreProcess;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Action<bool> onApplicationPausePostProcess;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static bool KeepPlayingSoundOnPause;

	[Token(Token = "0x1700000C")]
	public static CriAtomServer instance
	{
		[Token(Token = "0x60000A4")]
		[Address(RVA = "0xF6F098", Offset = "0xF6F098", VA = "0xF6F098")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0xF6DDD0", Offset = "0xF6DDD0", VA = "0xF6DDD0")]
	public static void CreateInstance()
	{
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0xF6DF34", Offset = "0xF6DF34", VA = "0xF6DF34")]
	public static void DestroyInstance()
	{
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0xF6F104", Offset = "0xF6F104", VA = "0xF6F104")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0xF6F204", Offset = "0xF6F204", VA = "0xF6F204", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0xF6F20C", Offset = "0xF6F20C", VA = "0xF6F20C", Slot = "5")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0xF6F2E8", Offset = "0xF6F2E8", VA = "0xF6F2E8", Slot = "6")]
	public override void CriInternalUpdate()
	{
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0xF6F2EC", Offset = "0xF6F2EC", VA = "0xF6F2EC", Slot = "7")]
	public override void CriInternalLateUpdate()
	{
	}

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0xF6F2F0", Offset = "0xF6F2F0", VA = "0xF6F2F0")]
	private void OnApplicationPause(bool appPause)
	{
	}

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0xF6F2F8", Offset = "0xF6F2F8", VA = "0xF6F2F8")]
	private void ProcessApplicationPause(bool appPause)
	{
	}

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0xF6F3B4", Offset = "0xF6F3B4", VA = "0xF6F3B4")]
	public CriAtomServer()
	{
	}
}
[Token(Token = "0x200000A")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A3EDC", Offset = "0x9A3EDC")]
public class CriAtomSource : CriMonoBehaviour
{
	[Token(Token = "0x20000E3")]
	public enum Status
	{
		[Token(Token = "0x40005CD")]
		Stop,
		[Token(Token = "0x40005CE")]
		Prep,
		[Token(Token = "0x40005CF")]
		Playing,
		[Token(Token = "0x40005D0")]
		PlayEnd,
		[Token(Token = "0x40005D1")]
		Error
	}

	[Token(Token = "0x20000E4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A4C24", Offset = "0x9A4C24")]
	private sealed class <PlayAsync>d__106 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CriAtomSource <>4__this;

		[Token(Token = "0x40005D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string cueName;

		[Token(Token = "0x40005D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CriAtomExAcb <acb>5__2;

		[Token(Token = "0x170000F2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C44")]
			[Address(RVA = "0xF708CC", Offset = "0xF708CC", VA = "0xF708CC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C46")]
			[Address(RVA = "0xF70934", Offset = "0xF70934", VA = "0xF70934", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C41")]
		[Address(RVA = "0xF706F4", Offset = "0xF706F4", VA = "0xF706F4")]
		[DebuggerHidden]
		public <PlayAsync>d__106(int <>1__state)
		{
		}

		[Token(Token = "0x6000C42")]
		[Address(RVA = "0xF70720", Offset = "0xF70720", VA = "0xF70720", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C43")]
		[Address(RVA = "0xF70724", Offset = "0xF70724", VA = "0xF70724", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C45")]
		[Address(RVA = "0xF708D4", Offset = "0xF708D4", VA = "0xF708D4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A4E7C", Offset = "0x9A4E7C")]
	private CriAtomExPlayer <player>k__BackingField;

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A4E8C", Offset = "0x9A4E8C")]
	private CriAtomEx3dSource <source>k__BackingField;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool initialized;

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 lastPosition;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool hasValidPosition;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private CriAtomRegion currentRegion;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private CriAtomListener currentListener;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private bool _playOnStart;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private string _cueName;

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private string _cueSheet;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private CriAtomRegion _regionOnStart;

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private CriAtomListener _listenerOnStart;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private bool _use3dPositioning;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
	[SerializeField]
	private bool _freezeOrientation;

	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8A")]
	[SerializeField]
	private bool _loop;

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[SerializeField]
	private float _volume;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private float _pitch;

	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[SerializeField]
	private bool _androidUseLowLatencyVoicePool;

	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
	[SerializeField]
	private bool need_to_player_update_all;

	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x96")]
	[SerializeField]
	private bool _use3dRandomization;

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private uint _randomPositionListMaxLength;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private CriAtomEx.Randomize3dConfig randomize3dConfig;

	[Token(Token = "0x1700000D")]
	public CriAtomExPlayer player
	{
		[Token(Token = "0x60000B1")]
		[Address(RVA = "0xF6F424", Offset = "0xF6F424", VA = "0xF6F424")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AC894", Offset = "0x9AC894")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000B0")]
		[Address(RVA = "0xF6F41C", Offset = "0xF6F41C", VA = "0xF6F41C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AC884", Offset = "0x9AC884")]
		protected set
		{
		}
	}

	[Token(Token = "0x1700000E")]
	public CriAtomEx3dSource source
	{
		[Token(Token = "0x60000B3")]
		[Address(RVA = "0xF6F434", Offset = "0xF6F434", VA = "0xF6F434")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AC8B4", Offset = "0x9AC8B4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000B2")]
		[Address(RVA = "0xF6F42C", Offset = "0xF6F42C", VA = "0xF6F42C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AC8A4", Offset = "0x9AC8A4")]
		protected set
		{
		}
	}

	[Token(Token = "0x1700000F")]
	public bool playOnStart
	{
		[Token(Token = "0x60000B4")]
		[Address(RVA = "0xF6F43C", Offset = "0xF6F43C", VA = "0xF6F43C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000B5")]
		[Address(RVA = "0xF6F444", Offset = "0xF6F444", VA = "0xF6F444")]
		set
		{
		}
	}

	[Token(Token = "0x17000010")]
	public string cueName
	{
		[Token(Token = "0x60000B6")]
		[Address(RVA = "0xF6F450", Offset = "0xF6F450", VA = "0xF6F450")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000B7")]
		[Address(RVA = "0xF6F458", Offset = "0xF6F458", VA = "0xF6F458")]
		set
		{
		}
	}

	[Token(Token = "0x17000011")]
	public string cueSheet
	{
		[Token(Token = "0x60000B8")]
		[Address(RVA = "0xF6F460", Offset = "0xF6F460", VA = "0xF6F460")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000B9")]
		[Address(RVA = "0xF6F468", Offset = "0xF6F468", VA = "0xF6F468")]
		set
		{
		}
	}

	[Token(Token = "0x17000012")]
	public bool use3dPositioning
	{
		[Token(Token = "0x60000BB")]
		[Address(RVA = "0xF6F4C4", Offset = "0xF6F4C4", VA = "0xF6F4C4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000BA")]
		[Address(RVA = "0xF6F470", Offset = "0xF6F470", VA = "0xF6F470")]
		set
		{
		}
	}

	[Token(Token = "0x17000013")]
	public bool freezeOrientation
	{
		[Token(Token = "0x60000BC")]
		[Address(RVA = "0xF6F4CC", Offset = "0xF6F4CC", VA = "0xF6F4CC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000BD")]
		[Address(RVA = "0xF6F4D4", Offset = "0xF6F4D4", VA = "0xF6F4D4")]
		set
		{
		}
	}

	[Token(Token = "0x17000014")]
	public bool use3dRandomization
	{
		[Token(Token = "0x60000BF")]
		[Address(RVA = "0xF6F598", Offset = "0xF6F598", VA = "0xF6F598")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000BE")]
		[Address(RVA = "0xF6F4E0", Offset = "0xF6F4E0", VA = "0xF6F4E0")]
		set
		{
		}
	}

	[Token(Token = "0x17000015")]
	public uint randomPositionListMaxLength
	{
		[Token(Token = "0x60000C1")]
		[Address(RVA = "0xF6F63C", Offset = "0xF6F63C", VA = "0xF6F63C")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60000C0")]
		[Address(RVA = "0xF6F5A0", Offset = "0xF6F5A0", VA = "0xF6F5A0")]
		set
		{
		}
	}

	[Token(Token = "0x17000016")]
	public CriAtomRegion region3d
	{
		[Token(Token = "0x60000C2")]
		[Address(RVA = "0xF6F644", Offset = "0xF6F644", VA = "0xF6F644")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000C3")]
		[Address(RVA = "0xF6F64C", Offset = "0xF6F64C", VA = "0xF6F64C")]
		set
		{
		}
	}

	[Token(Token = "0x17000017")]
	public CriAtomListener listener
	{
		[Token(Token = "0x60000C4")]
		[Address(RVA = "0xF6F784", Offset = "0xF6F784", VA = "0xF6F784")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000C5")]
		[Address(RVA = "0xF6F78C", Offset = "0xF6F78C", VA = "0xF6F78C")]
		set
		{
		}
	}

	[Token(Token = "0x17000018")]
	public CriAtomRegion regionOnStart
	{
		[Token(Token = "0x60000C6")]
		[Address(RVA = "0xF6F874", Offset = "0xF6F874", VA = "0xF6F874")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000C7")]
		[Address(RVA = "0xF6F87C", Offset = "0xF6F87C", VA = "0xF6F87C")]
		set
		{
		}
	}

	[Token(Token = "0x17000019")]
	public CriAtomListener listenerOnStart
	{
		[Token(Token = "0x60000C8")]
		[Address(RVA = "0xF6F884", Offset = "0xF6F884", VA = "0xF6F884")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000C9")]
		[Address(RVA = "0xF6F88C", Offset = "0xF6F88C", VA = "0xF6F88C")]
		set
		{
		}
	}

	[Token(Token = "0x1700001A")]
	public bool loop
	{
		[Token(Token = "0x60000CB")]
		[Address(RVA = "0xF6F8A0", Offset = "0xF6F8A0", VA = "0xF6F8A0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000CA")]
		[Address(RVA = "0xF6F894", Offset = "0xF6F894", VA = "0xF6F894")]
		set
		{
		}
	}

	[Token(Token = "0x1700001B")]
	public float volume
	{
		[Token(Token = "0x60000CD")]
		[Address(RVA = "0xF6F8E0", Offset = "0xF6F8E0", VA = "0xF6F8E0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60000CC")]
		[Address(RVA = "0xF6F8A8", Offset = "0xF6F8A8", VA = "0xF6F8A8")]
		set
		{
		}
	}

	[Token(Token = "0x1700001C")]
	public float pitch
	{
		[Token(Token = "0x60000CF")]
		[Address(RVA = "0xF6F920", Offset = "0xF6F920", VA = "0xF6F920")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60000CE")]
		[Address(RVA = "0xF6F8E8", Offset = "0xF6F8E8", VA = "0xF6F8E8")]
		set
		{
		}
	}

	[Token(Token = "0x1700001D")]
	public float pan3dAngle
	{
		[Token(Token = "0x60000D1")]
		[Address(RVA = "0xF6F95C", Offset = "0xF6F95C", VA = "0xF6F95C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60000D0")]
		[Address(RVA = "0xF6F928", Offset = "0xF6F928", VA = "0xF6F928")]
		set
		{
		}
	}

	[Token(Token = "0x1700001E")]
	public float pan3dDistance
	{
		[Token(Token = "0x60000D3")]
		[Address(RVA = "0xF6F9AC", Offset = "0xF6F9AC", VA = "0xF6F9AC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60000D2")]
		[Address(RVA = "0xF6F978", Offset = "0xF6F978", VA = "0xF6F978")]
		set
		{
		}
	}

	[Token(Token = "0x1700001F")]
	public int startTime
	{
		[Token(Token = "0x60000D5")]
		[Address(RVA = "0xF6FA00", Offset = "0xF6FA00", VA = "0xF6FA00")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60000D4")]
		[Address(RVA = "0xF6F9C8", Offset = "0xF6F9C8", VA = "0xF6F9C8")]
		set
		{
		}
	}

	[Token(Token = "0x17000020")]
	public long time
	{
		[Token(Token = "0x60000D6")]
		[Address(RVA = "0xF6FA1C", Offset = "0xF6FA1C", VA = "0xF6FA1C")]
		get
		{
			return default(long);
		}
	}

	[Token(Token = "0x17000021")]
	public Status status
	{
		[Token(Token = "0x60000D7")]
		[Address(RVA = "0xF6FA34", Offset = "0xF6FA34", VA = "0xF6FA34")]
		get
		{
			return default(Status);
		}
	}

	[Token(Token = "0x17000022")]
	public bool attenuationDistanceSetting
	{
		[Token(Token = "0x60000D9")]
		[Address(RVA = "0xF6FA98", Offset = "0xF6FA98", VA = "0xF6FA98")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000D8")]
		[Address(RVA = "0xF6FA4C", Offset = "0xF6FA4C", VA = "0xF6FA4C")]
		set
		{
		}
	}

	[Token(Token = "0x17000023")]
	public bool androidUseLowLatencyVoicePool
	{
		[Token(Token = "0x60000DA")]
		[Address(RVA = "0xF6FAAC", Offset = "0xF6FAAC", VA = "0xF6FAAC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000DB")]
		[Address(RVA = "0xF6FAB4", Offset = "0xF6FAB4", VA = "0xF6FAB4")]
		set
		{
		}
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0xF6F4B8", Offset = "0xF6F4B8", VA = "0xF6F4B8")]
	protected void SetNeedToPlayerUpdateAll()
	{
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0xF6FAC0", Offset = "0xF6FAC0", VA = "0xF6FAC0", Slot = "8")]
	protected virtual void InternalInitialize()
	{
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0xF6FB7C", Offset = "0xF6FB7C", VA = "0xF6FB7C", Slot = "9")]
	protected virtual void InternalFinalize()
	{
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0xF6FC14", Offset = "0xF6FC14", VA = "0xF6FC14")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0xF6FC20", Offset = "0xF6FC20", VA = "0xF6FC20", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0xF6FC60", Offset = "0xF6FC60", VA = "0xF6FC60")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0xF6FC6C", Offset = "0xF6FC6C", VA = "0xF6FC6C")]
	protected bool SetInitialSourcePosition()
	{
		return default(bool);
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0xF6FCCC", Offset = "0xF6FCCC", VA = "0xF6FCCC", Slot = "10")]
	protected virtual void SetInitialParameters()
	{
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0xF6FDAC", Offset = "0xF6FDAC", VA = "0xF6FDAC", Slot = "11")]
	protected virtual void UpdatePosition()
	{
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0xF6FF58", Offset = "0xF6FF58", VA = "0xF6FF58")]
	private void Start()
	{
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0xF7008C", Offset = "0xF7008C", VA = "0xF7008C", Slot = "6")]
	public override void CriInternalUpdate()
	{
	}

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0xF70090", Offset = "0xF70090", VA = "0xF70090", Slot = "7")]
	public override void CriInternalLateUpdate()
	{
	}

	[Token(Token = "0x60000E8")]
	[Address(RVA = "0xF700E4", Offset = "0xF700E4", VA = "0xF700E4")]
	public CriAtomExPlayback Play()
	{
		return default(CriAtomExPlayback);
	}

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0xF70100", Offset = "0xF70100", VA = "0xF70100")]
	public CriAtomExPlayback Play(string cueName)
	{
		return default(CriAtomExPlayback);
	}

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0xF7025C", Offset = "0xF7025C", VA = "0xF7025C")]
	public CriAtomExPlayback Play(int cueId)
	{
		return default(CriAtomExPlayback);
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0xF70034", Offset = "0xF70034", VA = "0xF70034")]
	private void PlayOnStart()
	{
	}

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0xF703B8", Offset = "0xF703B8", VA = "0xF703B8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x9AC8C4", Offset = "0x9AC8C4")]
	private IEnumerator PlayAsync(string cueName)
	{
		return null;
	}

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0xF70434", Offset = "0xF70434", VA = "0xF70434")]
	public void Stop()
	{
	}

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0xF70444", Offset = "0xF70444", VA = "0xF70444")]
	public void Pause(bool sw)
	{
	}

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0xF70468", Offset = "0xF70468", VA = "0xF70468")]
	public bool IsPaused()
	{
		return default(bool);
	}

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0xF70480", Offset = "0xF70480", VA = "0xF70480")]
	public void SetBusSendLevel(string busName, float level)
	{
	}

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0xF704B4", Offset = "0xF704B4", VA = "0xF704B4")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9AC928", Offset = "0x9AC928")]
	public void SetBusSendLevel(int busId, float level)
	{
	}

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0xF704E8", Offset = "0xF704E8", VA = "0xF704E8")]
	public void SetBusSendLevelOffset(string busName, float levelOffset)
	{
	}

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0xF7051C", Offset = "0xF7051C", VA = "0xF7051C")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9AC960", Offset = "0x9AC960")]
	public void SetBusSendLevelOffset(int busId, float levelOffset)
	{
	}

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0xF70550", Offset = "0xF70550", VA = "0xF70550")]
	public void SetAisacControl(string controlName, float value)
	{
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0xF70584", Offset = "0xF70584", VA = "0xF70584")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9AC998", Offset = "0x9AC998")]
	public void SetAisac(string controlName, float value)
	{
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0xF705B8", Offset = "0xF705B8", VA = "0xF705B8")]
	public void SetAisacControl(uint controlId, float value)
	{
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0xF705EC", Offset = "0xF705EC", VA = "0xF705EC")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9AC9D0", Offset = "0x9AC9D0")]
	public void SetAisac(uint controlId, float value)
	{
	}

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0xF70620", Offset = "0xF70620", VA = "0xF70620")]
	public void AttachToAnalyzer(CriAtomExOutputAnalyzer analyzer)
	{
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0xF70648", Offset = "0xF70648", VA = "0xF70648")]
	public void DetachFromAnalyzer(CriAtomExOutputAnalyzer analyzer)
	{
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0xF70660", Offset = "0xF70660", VA = "0xF70660")]
	public CriAtomSource()
	{
	}
}
[Token(Token = "0x200000B")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A3F14", Offset = "0x9A3F14")]
[DisallowMultipleComponent]
public class CriAtomTransceiver : CriMonoBehaviour
{
	[Token(Token = "0x20000E5")]
	private delegate void SetControlIdMethod(ushort id);

	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A4F8C", Offset = "0x9A4F8C")]
	private CriAtomEx3dTransceiver <transceiverHn>k__BackingField;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A4F9C", Offset = "0x9A4F9C")]
	private Vector3 <inputPos>k__BackingField;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A4FAC", Offset = "0x9A4FAC")]
	private Vector3 <inputFront>k__BackingField;

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A4FBC", Offset = "0x9A4FBC")]
	private Vector3 <inputUp>k__BackingField;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private CriAtomRegion regionOnStart;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private bool useDedicatedInput;

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private GameObject dedicatedInput;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A4FFC", Offset = "0x9A4FFC")]
	private float outputVolume;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[SerializeField]
	private float directAudioRadius;

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private float crossFadeDistance;

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[SerializeField]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A505C", Offset = "0x9A505C")]
	private float coneInsideAngle;

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A50A0", Offset = "0x9A50A0")]
	private float coneOutsideAngle;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[SerializeField]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A50E4", Offset = "0x9A50E4")]
	private float coneOutsideVolume;

	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private float transceiverRadius;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[SerializeField]
	private float interiorDistance;

	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	public float minAttenuation;

	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[SerializeField]
	public float maxAttenuation;

	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private string globalAisacName;

	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private float maxAngleAisacDelta;

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private string distanceAisacControlId;

	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private string listenerAzimuthAisacControlId;

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private string listenerElevationAisacControlId;

	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private string outputAzimuthAisacControlId;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	private string outputElevationAisacControlId;

	[NonSerialized]
	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public bool inspectorAisacSettingFoldout;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
	private bool isInitialized;

	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD2")]
	private bool dedicatedInputNotSetWarned;

	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private CriAtomRegion currentRegion;

	[Token(Token = "0x17000024")]
	public CriAtomEx3dTransceiver transceiverHn
	{
		[Token(Token = "0x60000FB")]
		[Address(RVA = "0xF7093C", Offset = "0xF7093C", VA = "0xF7093C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ACA08", Offset = "0x9ACA08")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000FC")]
		[Address(RVA = "0xF70944", Offset = "0xF70944", VA = "0xF70944")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ACA18", Offset = "0x9ACA18")]
		protected set
		{
		}
	}

	[Token(Token = "0x17000025")]
	public Vector3 inputPos
	{
		[Token(Token = "0x60000FD")]
		[Address(RVA = "0xF7094C", Offset = "0xF7094C", VA = "0xF7094C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ACA28", Offset = "0x9ACA28")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x60000FE")]
		[Address(RVA = "0xF70958", Offset = "0xF70958", VA = "0xF70958")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ACA38", Offset = "0x9ACA38")]
		private set
		{
		}
	}

	[Token(Token = "0x17000026")]
	public Vector3 inputFront
	{
		[Token(Token = "0x60000FF")]
		[Address(RVA = "0xF70964", Offset = "0xF70964", VA = "0xF70964")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ACA48", Offset = "0x9ACA48")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000100")]
		[Address(RVA = "0xF70970", Offset = "0xF70970", VA = "0xF70970")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ACA58", Offset = "0x9ACA58")]
		private set
		{
		}
	}

	[Token(Token = "0x17000027")]
	public Vector3 inputUp
	{
		[Token(Token = "0x6000101")]
		[Address(RVA = "0xF7097C", Offset = "0xF7097C", VA = "0xF7097C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ACA68", Offset = "0x9ACA68")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000102")]
		[Address(RVA = "0xF70988", Offset = "0xF70988", VA = "0xF70988")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ACA78", Offset = "0x9ACA78")]
		private set
		{
		}
	}

	[Token(Token = "0x17000028")]
	public CriAtomRegion region3d
	{
		[Token(Token = "0x6000103")]
		[Address(RVA = "0xF70994", Offset = "0xF70994", VA = "0xF70994")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000104")]
		[Address(RVA = "0xF7099C", Offset = "0xF7099C", VA = "0xF7099C")]
		set
		{
		}
	}

	[Token(Token = "0x6000105")]
	[Address(RVA = "0xF70A8C", Offset = "0xF70A8C", VA = "0xF70A8C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0xF70A98", Offset = "0xF70A98", VA = "0xF70A98")]
	private void Start()
	{
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0xF70B24", Offset = "0xF70B24", VA = "0xF70B24", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x6000108")]
	[Address(RVA = "0xF70B54", Offset = "0xF70B54", VA = "0xF70B54")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000109")]
	[Address(RVA = "0xF70B60", Offset = "0xF70B60", VA = "0xF70B60", Slot = "8")]
	protected virtual void InternalInitialize()
	{
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0xF70BF0", Offset = "0xF70BF0", VA = "0xF70BF0", Slot = "9")]
	protected virtual void InternalFinalize()
	{
	}

	[Token(Token = "0x600010B")]
	[Address(RVA = "0xF70C74", Offset = "0xF70C74", VA = "0xF70C74", Slot = "10")]
	protected virtual void InitializeParameters()
	{
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0xF71234", Offset = "0xF71234", VA = "0xF71234", Slot = "6")]
	public override void CriInternalUpdate()
	{
	}

	[Token(Token = "0x600010D")]
	[Address(RVA = "0xF71238", Offset = "0xF71238", VA = "0xF71238", Slot = "7")]
	public override void CriInternalLateUpdate()
	{
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0xF70D08", Offset = "0xF70D08", VA = "0xF70D08")]
	private void ApplyCurrentPosition()
	{
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0xF71004", Offset = "0xF71004", VA = "0xF71004")]
	private void ApplyParameters()
	{
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0xF7124C", Offset = "0xF7124C", VA = "0xF7124C")]
	private void TrySetAisacControlId(string strId, SetControlIdMethod callback)
	{
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0xF715C0", Offset = "0xF715C0", VA = "0xF715C0")]
	public CriAtomTransceiver()
	{
	}
}
[Token(Token = "0x200000C")]
public class CriStructMemory<Type> : IDisposable
{
	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A51D4", Offset = "0x9A51D4")]
	private byte[] <bytes>k__BackingField;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private GCHandle gch;

	[Token(Token = "0x17000029")]
	public byte[] bytes
	{
		[Token(Token = "0x6000112")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ACA88", Offset = "0x9ACA88")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000113")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ACA98", Offset = "0x9ACA98")]
		private set
		{
		}
	}

	[Token(Token = "0x1700002A")]
	public IntPtr ptr
	{
		[Token(Token = "0x6000114")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x6000115")]
	public CriStructMemory()
	{
	}

	[Token(Token = "0x6000116")]
	public CriStructMemory(int num)
	{
	}

	[Token(Token = "0x6000117")]
	public void Dispose()
	{
	}
}
[Token(Token = "0x200000D")]
public static class CriAtomEx
{
	[Token(Token = "0x20000E6")]
	public enum CharacterEncoding
	{
		[Token(Token = "0x40005D8")]
		Utf8,
		[Token(Token = "0x40005D9")]
		Sjis
	}

	[Token(Token = "0x20000E7")]
	public enum SoundRendererType
	{
		[Token(Token = "0x40005DB")]
		Default = 0,
		[Token(Token = "0x40005DC")]
		Native = 1,
		[Token(Token = "0x40005DD")]
		Asr = 2,
		[Token(Token = "0x40005DE")]
		Hw1 = 1,
		[Token(Token = "0x40005DF")]
		Hw2 = 9
	}

	[Token(Token = "0x20000E8")]
	public enum VoiceAllocationMethod
	{
		[Token(Token = "0x40005E1")]
		Once,
		[Token(Token = "0x40005E2")]
		Retry
	}

	[Token(Token = "0x20000E9")]
	public enum BiquadFilterType
	{
		[Token(Token = "0x40005E4")]
		Off,
		[Token(Token = "0x40005E5")]
		LowPass,
		[Token(Token = "0x40005E6")]
		HighPass,
		[Token(Token = "0x40005E7")]
		Notch,
		[Token(Token = "0x40005E8")]
		LowShelf,
		[Token(Token = "0x40005E9")]
		HighShelf,
		[Token(Token = "0x40005EA")]
		Peaking
	}

	[Token(Token = "0x20000EA")]
	public enum ResumeMode
	{
		[Token(Token = "0x40005EC")]
		AllPlayback,
		[Token(Token = "0x40005ED")]
		PausedPlayback,
		[Token(Token = "0x40005EE")]
		PreparedPlayback
	}

	[Token(Token = "0x20000EB")]
	public enum PanType
	{
		[Token(Token = "0x40005F0")]
		Unknown = -1,
		[Token(Token = "0x40005F1")]
		Pan3d,
		[Token(Token = "0x40005F2")]
		Pos3d,
		[Token(Token = "0x40005F3")]
		Auto
	}

	[Token(Token = "0x20000EC")]
	public enum VoiceControlMethod
	{
		[Token(Token = "0x40005F5")]
		PreferLast,
		[Token(Token = "0x40005F6")]
		PreferFirst
	}

	[Token(Token = "0x20000ED")]
	public enum Parameter
	{
		[Token(Token = "0x40005F8")]
		Volume = 0,
		[Token(Token = "0x40005F9")]
		Pitch = 1,
		[Token(Token = "0x40005FA")]
		Pan3dAngle = 2,
		[Token(Token = "0x40005FB")]
		Pan3dDistance = 3,
		[Token(Token = "0x40005FC")]
		Pan3dVolume = 4,
		[Token(Token = "0x40005FD")]
		BusSendLevel0 = 9,
		[Token(Token = "0x40005FE")]
		BusSendLevel1 = 10,
		[Token(Token = "0x40005FF")]
		BusSendLevel2 = 11,
		[Token(Token = "0x4000600")]
		BusSendLevel3 = 12,
		[Token(Token = "0x4000601")]
		BusSendLevel4 = 13,
		[Token(Token = "0x4000602")]
		BusSendLevel5 = 14,
		[Token(Token = "0x4000603")]
		BusSendLevel6 = 15,
		[Token(Token = "0x4000604")]
		BusSendLevel7 = 16,
		[Token(Token = "0x4000605")]
		BandPassFilterCofLow = 17,
		[Token(Token = "0x4000606")]
		BandPassFilterCofHigh = 18,
		[Token(Token = "0x4000607")]
		BiquadFilterType = 19,
		[Token(Token = "0x4000608")]
		BiquadFilterFreq = 20,
		[Token(Token = "0x4000609")]
		BiquadFIlterQ = 21,
		[Token(Token = "0x400060A")]
		BiquadFilterGain = 22,
		[Token(Token = "0x400060B")]
		EnvelopeAttackTime = 23,
		[Token(Token = "0x400060C")]
		EnvelopeHoldTime = 24,
		[Token(Token = "0x400060D")]
		EnvelopeDecayTime = 25,
		[Token(Token = "0x400060E")]
		EnvelopeReleaseTime = 26,
		[Token(Token = "0x400060F")]
		EnvelopeSustainLevel = 27,
		[Token(Token = "0x4000610")]
		StartTime = 28,
		[Token(Token = "0x4000611")]
		Priority = 31
	}

	[Token(Token = "0x20000EE")]
	public enum Speaker
	{
		[Token(Token = "0x4000613")]
		FrontLeft,
		[Token(Token = "0x4000614")]
		FrontRight,
		[Token(Token = "0x4000615")]
		FrontCenter,
		[Token(Token = "0x4000616")]
		LowFrequency,
		[Token(Token = "0x4000617")]
		SurroundLeft,
		[Token(Token = "0x4000618")]
		SurroundRight,
		[Token(Token = "0x4000619")]
		SurroundBackLeft,
		[Token(Token = "0x400061A")]
		SurroundBackRight
	}

	[Token(Token = "0x20000EF")]
	public enum Format : uint
	{
		[Token(Token = "0x400061C")]
		ADX = 1u,
		[Token(Token = "0x400061D")]
		HCA = 3u,
		[Token(Token = "0x400061E")]
		HCA_MX = 4u,
		[Token(Token = "0x400061F")]
		WAVE = 5u,
		[Token(Token = "0x4000620")]
		RAW_PCM = 6u
	}

	[Token(Token = "0x20000F0")]
	private enum SpeakerSystem : uint
	{
		[Token(Token = "0x4000622")]
		Surround_5_1,
		[Token(Token = "0x4000623")]
		Surround_7_1
	}

	[Token(Token = "0x20000F1")]
	public struct SpeakerAngles6ch
	{
		[Token(Token = "0x4000624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float frontLeft;

		[Token(Token = "0x4000625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float frontRight;

		[Token(Token = "0x4000626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float frontCenter;

		[Token(Token = "0x4000627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float lowFrequency;

		[Token(Token = "0x4000628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float surroundLeft;

		[Token(Token = "0x4000629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float surroundRight;

		[Token(Token = "0x6000C4B")]
		[Address(RVA = "0xFA9ABC", Offset = "0xFA9ABC", VA = "0xFA9ABC")]
		public static SpeakerAngles6ch Default()
		{
			return default(SpeakerAngles6ch);
		}
	}

	[Token(Token = "0x20000F2")]
	public struct SpeakerAngles8ch
	{
		[Token(Token = "0x400062A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float frontLeft;

		[Token(Token = "0x400062B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float frontRight;

		[Token(Token = "0x400062C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float frontCenter;

		[Token(Token = "0x400062D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float lowFrequency;

		[Token(Token = "0x400062E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float surroundLeft;

		[Token(Token = "0x400062F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float surroundRight;

		[Token(Token = "0x4000630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float surroundBackLeft;

		[Token(Token = "0x4000631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float surroundBackRight;

		[Token(Token = "0x6000C4C")]
		[Address(RVA = "0xFA9AD8", Offset = "0xFA9AD8", VA = "0xFA9AD8")]
		public static SpeakerAngles8ch Default()
		{
			return default(SpeakerAngles8ch);
		}
	}

	[Token(Token = "0x20000F3")]
	public struct FormatInfo
	{
		[Token(Token = "0x4000632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Format format;

		[Token(Token = "0x4000633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int samplingRate;

		[Token(Token = "0x4000634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public long numSamples;

		[Token(Token = "0x4000635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public long loopOffset;

		[Token(Token = "0x4000636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public long loopLength;

		[Token(Token = "0x4000637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int numChannels;

		[Token(Token = "0x4000638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint reserved;
	}

	[Token(Token = "0x20000F4")]
	public struct AisacControlInfo
	{
		[Token(Token = "0x4000639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly string name;

		[Token(Token = "0x400063A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint id;

		[Token(Token = "0x6000C4D")]
		[Address(RVA = "0x8AA0B8", Offset = "0x8AA0B8", VA = "0x8AA0B8")]
		public AisacControlInfo(byte[] data, int startIndex)
		{
		}
	}

	[Token(Token = "0x20000F5")]
	public enum Randomize3dCalcType
	{
		[Token(Token = "0x400063C")]
		None = -1,
		[Token(Token = "0x400063D")]
		Rectangle = 0,
		[Token(Token = "0x400063E")]
		Cuboid = 1,
		[Token(Token = "0x400063F")]
		Circle = 2,
		[Token(Token = "0x4000640")]
		Cylinder = 3,
		[Token(Token = "0x4000641")]
		Sphere = 4,
		[Token(Token = "0x4000642")]
		List = 6
	}

	[Token(Token = "0x20000F6")]
	public enum Randomize3dParamType
	{
		[Token(Token = "0x4000644")]
		None,
		[Token(Token = "0x4000645")]
		Width,
		[Token(Token = "0x4000646")]
		Depth,
		[Token(Token = "0x4000647")]
		Height,
		[Token(Token = "0x4000648")]
		Radius
	}

	[Serializable]
	[Token(Token = "0x20000F7")]
	public struct Randomize3dConfig
	{
		[Token(Token = "0x4000649")]
		public const int NumOfCalcParams = 3;

		[Token(Token = "0x400064A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private bool followsOriginalSource;

		[Token(Token = "0x400064B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[SerializeField]
		private Randomize3dCalcType calculationType;

		[Token(Token = "0x400064C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[SerializeField]
		private float[] calculationParameters;

		[Token(Token = "0x170000F4")]
		public bool FollowsOriginalSource
		{
			[Token(Token = "0x6000C4E")]
			[Address(RVA = "0x8AA820", Offset = "0x8AA820", VA = "0x8AA820")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000F5")]
		public Randomize3dCalcType CalculationType
		{
			[Token(Token = "0x6000C4F")]
			[Address(RVA = "0x8AA828", Offset = "0x8AA828", VA = "0x8AA828")]
			get
			{
				return default(Randomize3dCalcType);
			}
		}

		[Token(Token = "0x170000F6")]
		public float CalculationParameter1
		{
			[Token(Token = "0x6000C50")]
			[Address(RVA = "0x8AA830", Offset = "0x8AA830", VA = "0x8AA830")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000F7")]
		public float CalculationParameter2
		{
			[Token(Token = "0x6000C51")]
			[Address(RVA = "0x8AA838", Offset = "0x8AA838", VA = "0x8AA838")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000F8")]
		public float CalculationParameter3
		{
			[Token(Token = "0x6000C52")]
			[Address(RVA = "0x8AA840", Offset = "0x8AA840", VA = "0x8AA840")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000C53")]
		[Address(RVA = "0x8AA848", Offset = "0x8AA848", VA = "0x8AA848")]
		internal Randomize3dConfig(byte[] data, int startIndex)
		{
		}

		[Token(Token = "0x6000C54")]
		[Address(RVA = "0x8AA850", Offset = "0x8AA850", VA = "0x8AA850")]
		public Randomize3dConfig(bool followsOriginalSource, Randomize3dCalcType calculationType, float param1 = 0f, float param2 = 0f, float param3 = 0f)
		{
		}

		[Token(Token = "0x6000C55")]
		[Address(RVA = "0x8AA85C", Offset = "0x8AA85C", VA = "0x8AA85C")]
		public Randomize3dConfig(int dummy)
		{
		}

		[Token(Token = "0x6000C56")]
		[Address(RVA = "0x8AA864", Offset = "0x8AA864", VA = "0x8AA864")]
		public void ClearCalcParams(float initVal = 0f)
		{
		}

		[Token(Token = "0x6000C57")]
		[Address(RVA = "0x8AA86C", Offset = "0x8AA86C", VA = "0x8AA86C")]
		public bool GetParamByType(Randomize3dParamType paramType, ref float paramVal)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C58")]
		[Address(RVA = "0x8AA874", Offset = "0x8AA874", VA = "0x8AA874")]
		public bool SetParamByType(Randomize3dParamType paramType, float paramVal)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x20000F8")]
	public struct CuePos3dInfo
	{
		[Token(Token = "0x400064D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float coneInsideAngle;

		[Token(Token = "0x400064E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float coneOutsideAngle;

		[Token(Token = "0x400064F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float minAttenuationDistance;

		[Token(Token = "0x4000650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float maxAttenuationDistance;

		[Token(Token = "0x4000651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float sourceRadius;

		[Token(Token = "0x4000652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float interiorDistance;

		[Token(Token = "0x4000653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float dopplerFactor;

		[Token(Token = "0x4000654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Randomize3dConfig randomPos;

		[Token(Token = "0x4000655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ushort distanceAisacControl;

		[Token(Token = "0x4000656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public ushort listenerBaseAngleAisacControl;

		[Token(Token = "0x4000657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public ushort sourceBaseAngleAisacControl;

		[Token(Token = "0x4000658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		public ushort listenerBaseElevationAisacControl;

		[Token(Token = "0x4000659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ushort sourceBaseElevationAisacControl;

		[Token(Token = "0x400065A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ushort[] reserved;

		[Token(Token = "0x6000C59")]
		[Address(RVA = "0x8AA7E8", Offset = "0x8AA7E8", VA = "0x8AA7E8")]
		public CuePos3dInfo(byte[] data, int startIndex)
		{
		}
	}

	[Token(Token = "0x20000F9")]
	public struct GameVariableInfo
	{
		[Token(Token = "0x400065B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly string name;

		[Token(Token = "0x400065C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint id;

		[Token(Token = "0x400065D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float gameValue;

		[Token(Token = "0x6000C5A")]
		[Address(RVA = "0x8AA7F0", Offset = "0x8AA7F0", VA = "0x8AA7F0")]
		public GameVariableInfo(byte[] data, int startIndex)
		{
		}

		[Token(Token = "0x6000C5B")]
		[Address(RVA = "0x8AA7F8", Offset = "0x8AA7F8", VA = "0x8AA7F8")]
		public GameVariableInfo(string name, uint id, float gameValue)
		{
		}
	}

	[Token(Token = "0x20000FA")]
	public enum CueType
	{
		[Token(Token = "0x400065F")]
		Polyphonic,
		[Token(Token = "0x4000660")]
		Sequential,
		[Token(Token = "0x4000661")]
		Shuffle,
		[Token(Token = "0x4000662")]
		Random,
		[Token(Token = "0x4000663")]
		RandomNoRepeat,
		[Token(Token = "0x4000664")]
		SwitchGameVariable,
		[Token(Token = "0x4000665")]
		ComboSequential,
		[Token(Token = "0x4000666")]
		SwitchSelector,
		[Token(Token = "0x4000667")]
		TrackTransitionBySelector
	}

	[Token(Token = "0x20000FB")]
	public struct CueInfo
	{
		[Token(Token = "0x4000668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int id;

		[Token(Token = "0x4000669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CueType type;

		[Token(Token = "0x400066A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string name;

		[Token(Token = "0x400066B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string userData;

		[Token(Token = "0x400066C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public long length;

		[Token(Token = "0x400066D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ushort[] categories;

		[Token(Token = "0x400066E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public short numLimits;

		[Token(Token = "0x400066F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public ushort numBlocks;

		[Token(Token = "0x4000670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public ushort numTracks;

		[Token(Token = "0x4000671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
		public ushort numRelatedWaveForms;

		[Token(Token = "0x4000672")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public byte priority;

		[Token(Token = "0x4000673")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public byte headerVisibility;

		[Token(Token = "0x4000674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public byte ignore_player_parameter;

		[Token(Token = "0x4000675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		public byte probability;

		[Token(Token = "0x4000676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public PanType panType;

		[Token(Token = "0x4000677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public CuePos3dInfo pos3dInfo;

		[Token(Token = "0x4000678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public GameVariableInfo gameVariableInfo;

		[Token(Token = "0x6000C5C")]
		[Address(RVA = "0x8AA6AC", Offset = "0x8AA6AC", VA = "0x8AA6AC")]
		public CueInfo(byte[] data, int startIndex)
		{
		}
	}

	[Token(Token = "0x20000FC")]
	public struct WaveformInfo
	{
		[Token(Token = "0x4000679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int waveId;

		[Token(Token = "0x400067A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint format;

		[Token(Token = "0x400067B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int samplingRate;

		[Token(Token = "0x400067C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int numChannels;

		[Token(Token = "0x400067D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public long numSamples;

		[Token(Token = "0x400067E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool streamingFlag;

		[Token(Token = "0x400067F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint[] reserved;

		[Token(Token = "0x6000C5D")]
		[Address(RVA = "0x8AA994", Offset = "0x8AA994", VA = "0x8AA994")]
		public WaveformInfo(byte[] data, int startIndex)
		{
		}
	}

	[Token(Token = "0x20000FD")]
	public struct AisacInfo
	{
		[Token(Token = "0x4000680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly string name;

		[Token(Token = "0x4000681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool defaultControlFlag;

		[Token(Token = "0x4000682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float defaultControlValue;

		[Token(Token = "0x4000683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint controlId;

		[Token(Token = "0x4000684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string controlName;

		[Token(Token = "0x6000C5E")]
		[Address(RVA = "0x8AA19C", Offset = "0x8AA19C", VA = "0x8AA19C")]
		public AisacInfo(byte[] data, int startIndex)
		{
		}
	}

	[Token(Token = "0x20000FE")]
	public struct PerformanceInfo
	{
		[Token(Token = "0x4000685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint serverProcessCount;

		[Token(Token = "0x4000686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint lastServerTime;

		[Token(Token = "0x4000687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint maxServerTime;

		[Token(Token = "0x4000688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint averageServerTime;

		[Token(Token = "0x4000689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint lastServerInterval;

		[Token(Token = "0x400068A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint maxServerInterval;

		[Token(Token = "0x400068B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint averageServerInterval;
	}

	[Token(Token = "0x20000FF")]
	public struct ResourceUsage
	{
		[Token(Token = "0x400068C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint useCount;

		[Token(Token = "0x400068D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint limit;
	}

	[Token(Token = "0x2000100")]
	public struct NativeVector
	{
		[Token(Token = "0x400068E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x400068F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x4000690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;

		[Token(Token = "0x6000C5F")]
		[Address(RVA = "0x8AA808", Offset = "0x8AA808", VA = "0x8AA808")]
		public NativeVector(float x, float y, float z)
		{
		}

		[Token(Token = "0x6000C60")]
		[Address(RVA = "0x8AA814", Offset = "0x8AA814", VA = "0x8AA814")]
		public NativeVector(Vector3 vector)
		{
		}
	}

	[Token(Token = "0x2000101")]
	public struct CueLinkInfo
	{
		[Token(Token = "0x4000691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr nativePlayerHn;

		[Token(Token = "0x4000692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint basePlaybackId;

		[Token(Token = "0x4000693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint targetPlaybackId;

		[Token(Token = "0x4000694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int cueLinkType;
	}

	[Token(Token = "0x2000102")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x9A4C34", Offset = "0x9A4C34")]
	public delegate void CueLinkCbFunc(ref CueLinkInfo info);

	[Token(Token = "0x4000065")]
	public const uint InvalidAisacControlId = 65535u;

	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly Dictionary<Randomize3dCalcType, Randomize3dParamType[]> randomize3dParamTable;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static SoundRendererType androidDefaultSoundRendererType;

	[Token(Token = "0x14000008")]
	public static event CueLinkCbFunc OnCueLinkCallback
	{
		[Token(Token = "0x600011D")]
		[Address(RVA = "0xFA6D24", Offset = "0xFA6D24", VA = "0xFA6D24")]
		add
		{
		}
		[Token(Token = "0x600011E")]
		[Address(RVA = "0xFA6D88", Offset = "0xFA6D88", VA = "0xFA6D88")]
		remove
		{
		}
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0xFA6860", Offset = "0xFA6860", VA = "0xFA6860")]
	public static void SetSpeakerAngle(SpeakerAngles6ch speakerAngle)
	{
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0xFA6958", Offset = "0xFA6958", VA = "0xFA6958")]
	public static void SetSpeakerAngle(SpeakerAngles8ch speakerAngle)
	{
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0xFA6A50", Offset = "0xFA6A50", VA = "0xFA6A50")]
	public static void SetVirtualSpeakerAngle(SpeakerAngles6ch speakerAngle)
	{
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0xFA6B48", Offset = "0xFA6B48", VA = "0xFA6B48")]
	public static void SetVirtualSpeakerAngle(SpeakerAngles8ch speakerAngle)
	{
	}

	[Token(Token = "0x600011C")]
	[Address(RVA = "0xFA6C40", Offset = "0xFA6C40", VA = "0xFA6C40")]
	public static void ControlVirtualSpeakerSetting(bool sw)
	{
	}

	[Token(Token = "0x600011F")]
	[Address(RVA = "0xFA40C0", Offset = "0xFA40C0", VA = "0xFA40C0")]
	public static void RegisterAcf(CriFsBinder binder, string acfPath)
	{
	}

	[Token(Token = "0x6000120")]
	[Address(RVA = "0xFA6EB4", Offset = "0xFA6EB4", VA = "0xFA6EB4")]
	public static void RegisterAcf(IntPtr acfData, int dataSize)
	{
	}

	[Token(Token = "0x6000121")]
	[Address(RVA = "0xFA6FD8", Offset = "0xFA6FD8", VA = "0xFA6FD8")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9ACAA8", Offset = "0x9ACAA8")]
	public static void RegisterAcf(byte[] acfData)
	{
	}

	[Token(Token = "0x6000122")]
	[Address(RVA = "0xFA4064", Offset = "0xFA4064", VA = "0xFA4064")]
	public static void UnregisterAcf()
	{
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0xFA7170", Offset = "0xFA7170", VA = "0xFA7170")]
	public static string GetAppliedDspBusSnapshotName()
	{
		return null;
	}

	[Token(Token = "0x6000124")]
	[Address(RVA = "0xFA25A0", Offset = "0xFA25A0", VA = "0xFA25A0")]
	public static void AttachDspBusSetting(string settingName)
	{
	}

	[Token(Token = "0x6000125")]
	[Address(RVA = "0xFA260C", Offset = "0xFA260C", VA = "0xFA260C")]
	public static void DetachDspBusSetting()
	{
	}

	[Token(Token = "0x6000126")]
	[Address(RVA = "0xFA73A8", Offset = "0xFA73A8", VA = "0xFA73A8")]
	public static void ApplyDspBusSnapshot(string snapshot_name, int time_ms)
	{
	}

	[Token(Token = "0x6000127")]
	[Address(RVA = "0xFA74BC", Offset = "0xFA74BC", VA = "0xFA74BC")]
	public static int GetNumGameVariables()
	{
		return default(int);
	}

	[Token(Token = "0x6000128")]
	[Address(RVA = "0xFA758C", Offset = "0xFA758C", VA = "0xFA758C")]
	public static bool GetGameVariableInfo(ushort index, out GameVariableInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0xFA795C", Offset = "0xFA795C", VA = "0xFA795C")]
	public static float GetGameVariable(uint game_variable_id)
	{
		return default(float);
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0xFA7A40", Offset = "0xFA7A40", VA = "0xFA7A40")]
	public static float GetGameVariable(string game_variable_name)
	{
		return default(float);
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0xFA7B44", Offset = "0xFA7B44", VA = "0xFA7B44")]
	public static void SetGameVariable(uint game_variable_id, float game_variable_value)
	{
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0xFA7C48", Offset = "0xFA7C48", VA = "0xFA7C48")]
	public static void SetGameVariable(string game_variable_name, float game_variable_value)
	{
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0xFA7D5C", Offset = "0xFA7D5C", VA = "0xFA7D5C")]
	public static void SetRandomSeed(uint seed)
	{
	}

	[Token(Token = "0x600012E")]
	[Address(RVA = "0xFA7E40", Offset = "0xFA7E40", VA = "0xFA7E40")]
	public static void ResetPerformanceMonitor()
	{
	}

	[Token(Token = "0x600012F")]
	[Address(RVA = "0xFA7F0C", Offset = "0xFA7F0C", VA = "0xFA7F0C")]
	public static void GetPerformanceInfo(out PerformanceInfo info)
	{
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0xFA7FF0", Offset = "0xFA7FF0", VA = "0xFA7FF0")]
	public static void SetGlobalLabelToSelectorByIndex(ushort selector_index, ushort label_index)
	{
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0xFA80F4", Offset = "0xFA80F4", VA = "0xFA80F4")]
	public static void SetGlobalLabelToSelectorByName(string selector_name, string label_name)
	{
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0xFA8220", Offset = "0xFA8220", VA = "0xFA8220")]
	public static void Lock()
	{
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0xFA82E8", Offset = "0xFA82E8", VA = "0xFA82E8")]
	public static void Unlock()
	{
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0xFA83B4", Offset = "0xFA83B4", VA = "0xFA83B4")]
	public static void SetOutputAudioDevice_PC(string deviceId)
	{
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0xFA83B8", Offset = "0xFA83B8", VA = "0xFA83B8")]
	public static bool LoadAudioDeviceList_PC()
	{
		return default(bool);
	}

	[Token(Token = "0x6000136")]
	[Address(RVA = "0xFA83C0", Offset = "0xFA83C0", VA = "0xFA83C0")]
	public static int GetNumAudioDevices_PC()
	{
		return default(int);
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0xFA83C8", Offset = "0xFA83C8", VA = "0xFA83C8")]
	public static string GetAudioDeviceName_PC(int index)
	{
		return null;
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0xFA83D0", Offset = "0xFA83D0", VA = "0xFA83D0")]
	public static void SetOutputAudioDevice_PC(int index)
	{
	}

	[Token(Token = "0x6000139")]
	[Address(RVA = "0xFA83D4", Offset = "0xFA83D4", VA = "0xFA83D4")]
	public static void SetOutputVolume_VITA(float volume)
	{
	}

	[Token(Token = "0x600013A")]
	[Address(RVA = "0xFA83D8", Offset = "0xFA83D8", VA = "0xFA83D8")]
	public static bool IsBgmPortAcquired_VITA()
	{
		return default(bool);
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0xFA83E0", Offset = "0xFA83E0", VA = "0xFA83E0")]
	public static bool IsSoundStopped_IOS()
	{
		return default(bool);
	}

	[Token(Token = "0x600013C")]
	[Address(RVA = "0xFA83E8", Offset = "0xFA83E8", VA = "0xFA83E8")]
	public static void EnableAudioSessionRestoration_IOS(bool flag)
	{
	}

	[PreserveSig]
	[Token(Token = "0x600013D")]
	[Address(RVA = "0xFA6DEC", Offset = "0xFA6DEC", VA = "0xFA6DEC")]
	private static extern bool criAtomEx_RegisterAcfFile(IntPtr binder, string path, IntPtr work, int workSize);

	[PreserveSig]
	[Token(Token = "0x600013E")]
	[Address(RVA = "0xFA6F30", Offset = "0xFA6F30", VA = "0xFA6F30")]
	private static extern void criAtomEx_RegisterAcfData(IntPtr acfData, int acfDataSize, IntPtr work, int workSize);

	[PreserveSig]
	[Token(Token = "0x600013F")]
	[Address(RVA = "0xFA7050", Offset = "0xFA7050", VA = "0xFA7050")]
	private static extern void criAtomEx_RegisterAcfData(byte[] acfData, int acfDataSize, IntPtr work, int workSize);

	[PreserveSig]
	[Token(Token = "0x6000140")]
	[Address(RVA = "0xFA7100", Offset = "0xFA7100", VA = "0xFA7100")]
	private static extern void criAtomEx_UnregisterAcf();

	[PreserveSig]
	[Token(Token = "0x6000141")]
	[Address(RVA = "0xFA7290", Offset = "0xFA7290", VA = "0xFA7290")]
	private static extern void criAtomEx_AttachDspBusSetting(string settingName, IntPtr work, int workSize);

	[PreserveSig]
	[Token(Token = "0x6000142")]
	[Address(RVA = "0xFA7338", Offset = "0xFA7338", VA = "0xFA7338")]
	private static extern void criAtomEx_DetachDspBusSetting();

	[PreserveSig]
	[Token(Token = "0x6000143")]
	[Address(RVA = "0xFA741C", Offset = "0xFA741C", VA = "0xFA741C")]
	private static extern void criAtomEx_ApplyDspBusSnapshot(string snapshot_name, int time_ms);

	[PreserveSig]
	[Token(Token = "0x6000144")]
	[Address(RVA = "0xFA721C", Offset = "0xFA721C", VA = "0xFA721C")]
	private static extern IntPtr criAtomEx_GetAppliedDspBusSnapshotName();

	[PreserveSig]
	[Token(Token = "0x6000145")]
	[Address(RVA = "0xFA7518", Offset = "0xFA7518", VA = "0xFA7518")]
	private static extern int criAtomEx_GetNumGameVariables();

	[PreserveSig]
	[Token(Token = "0x6000146")]
	[Address(RVA = "0xFA7738", Offset = "0xFA7738", VA = "0xFA7738")]
	private static extern bool criAtomEx_GetGameVariableInfo(ushort index, IntPtr game_variable_info);

	[PreserveSig]
	[Token(Token = "0x6000147")]
	[Address(RVA = "0xFA79C0", Offset = "0xFA79C0", VA = "0xFA79C0")]
	private static extern float criAtomEx_GetGameVariableById(uint game_variable_id);

	[PreserveSig]
	[Token(Token = "0x6000148")]
	[Address(RVA = "0xFA7AA4", Offset = "0xFA7AA4", VA = "0xFA7AA4")]
	private static extern float criAtomEx_GetGameVariableByName(string game_variable_name);

	[PreserveSig]
	[Token(Token = "0x6000149")]
	[Address(RVA = "0xFA7BB8", Offset = "0xFA7BB8", VA = "0xFA7BB8")]
	private static extern void criAtomEx_SetGameVariableById(uint game_variable_id, float game_variable_value);

	[PreserveSig]
	[Token(Token = "0x600014A")]
	[Address(RVA = "0xFA7CBC", Offset = "0xFA7CBC", VA = "0xFA7CBC")]
	private static extern void criAtomEx_SetGameVariableByName(string game_variable_name, float game_variable_value);

	[PreserveSig]
	[Token(Token = "0x600014B")]
	[Address(RVA = "0xFA7DC0", Offset = "0xFA7DC0", VA = "0xFA7DC0")]
	private static extern void criAtomEx_SetRandomSeed(uint seed);

	[PreserveSig]
	[Token(Token = "0x600014C")]
	[Address(RVA = "0xFA827C", Offset = "0xFA827C", VA = "0xFA827C")]
	private static extern void criAtomEx_Lock();

	[PreserveSig]
	[Token(Token = "0x600014D")]
	[Address(RVA = "0xFA8344", Offset = "0xFA8344", VA = "0xFA8344")]
	private static extern void criAtomEx_Unlock();

	[PreserveSig]
	[Token(Token = "0x600014E")]
	[Address(RVA = "0xFA7E9C", Offset = "0xFA7E9C", VA = "0xFA7E9C")]
	private static extern void criAtom_ResetPerformanceMonitor();

	[PreserveSig]
	[Token(Token = "0x600014F")]
	[Address(RVA = "0xFA7F70", Offset = "0xFA7F70", VA = "0xFA7F70")]
	private static extern void criAtom_GetPerformanceInfo(out PerformanceInfo info);

	[PreserveSig]
	[Token(Token = "0x6000150")]
	[Address(RVA = "0xFA8064", Offset = "0xFA8064", VA = "0xFA8064")]
	private static extern void criAtomExAcf_SetGlobalLabelToSelectorByIndex(ushort selector_index, ushort label_index);

	[PreserveSig]
	[Token(Token = "0x6000151")]
	[Address(RVA = "0xFA8168", Offset = "0xFA8168", VA = "0xFA8168")]
	private static extern void criAtomExAcf_SetGlobalLabelToSelectorByName(string selector_name, string label_name);

	[PreserveSig]
	[Token(Token = "0x6000152")]
	[Address(RVA = "0xFA68C8", Offset = "0xFA68C8", VA = "0xFA68C8")]
	private static extern void criAtomEx_SetSpeakerAngleArray(SpeakerSystem speaker_system, ref SpeakerAngles6ch angle_array);

	[PreserveSig]
	[Token(Token = "0x6000153")]
	[Address(RVA = "0xFA69C0", Offset = "0xFA69C0", VA = "0xFA69C0")]
	private static extern void criAtomEx_SetSpeakerAngleArray(SpeakerSystem speaker_system, ref SpeakerAngles8ch angle_array);

	[PreserveSig]
	[Token(Token = "0x6000154")]
	[Address(RVA = "0xFA6AB8", Offset = "0xFA6AB8", VA = "0xFA6AB8")]
	private static extern void criAtomEx_SetVirtualSpeakerAngleArray(SpeakerSystem speaker_system, ref SpeakerAngles6ch angle_array);

	[PreserveSig]
	[Token(Token = "0x6000155")]
	[Address(RVA = "0xFA6BB0", Offset = "0xFA6BB0", VA = "0xFA6BB0")]
	private static extern void criAtomEx_SetVirtualSpeakerAngleArray(SpeakerSystem speaker_system, ref SpeakerAngles8ch angle_array);

	[PreserveSig]
	[Token(Token = "0x6000156")]
	[Address(RVA = "0xFA6CA4", Offset = "0xFA6CA4", VA = "0xFA6CA4")]
	private static extern void criAtomEx_ControlVirtualSpeakerSetting(bool sw);

	[PreserveSig]
	[Token(Token = "0x6000157")]
	[Address(RVA = "0xFA83EC", Offset = "0xFA83EC", VA = "0xFA83EC")]
	public static extern void criAtom_EnableSlLatencyCheck_ANDROID(bool sw);

	[PreserveSig]
	[Token(Token = "0x6000158")]
	[Address(RVA = "0xFA846C", Offset = "0xFA846C", VA = "0xFA846C")]
	public static extern int criAtom_GetSlBufferConsumptionLatency_ANDROID();
}
[Token(Token = "0x200000E")]
public static class CriAtomExCategory
{
	[Token(Token = "0x2000103")]
	public enum ReactType
	{
		[Token(Token = "0x4000696")]
		Ducker,
		[Token(Token = "0x4000697")]
		AisacModulationTrigger
	}

	[Token(Token = "0x2000104")]
	public enum ReactDuckerTargetType
	{
		[Token(Token = "0x4000699")]
		Volume,
		[Token(Token = "0x400069A")]
		AisacControlValue
	}

	[Token(Token = "0x2000105")]
	public enum ReactDuckerCurveType
	{
		[Token(Token = "0x400069C")]
		Linear,
		[Token(Token = "0x400069D")]
		Square,
		[Token(Token = "0x400069E")]
		SquareReverse,
		[Token(Token = "0x400069F")]
		SCurve,
		[Token(Token = "0x40006A0")]
		FlatAtHalf
	}

	[Token(Token = "0x2000106")]
	public struct ReactFadeParameter
	{
		[Token(Token = "0x40006A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ReactDuckerCurveType curveType;

		[Token(Token = "0x40006A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float curveStrength;

		[Token(Token = "0x40006A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ushort fadeTimeMs;
	}

	[Token(Token = "0x2000107")]
	public enum ReactHoldType
	{
		[Token(Token = "0x40006A5")]
		WhilePlaying,
		[Token(Token = "0x40006A6")]
		FixedTime
	}

	[StructLayout(2)]
	[Token(Token = "0x2000108")]
	public struct ReactDuckerParameter
	{
		[Token(Token = "0x20001E9")]
		public struct Volume
		{
			[Token(Token = "0x4000B05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float level;
		}

		[Token(Token = "0x20001EA")]
		public struct AisacControl
		{
			[Token(Token = "0x4000B06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ushort id;

			[Token(Token = "0x4000B07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float value;
		}

		[StructLayout(2)]
		[Token(Token = "0x20001EB")]
		public struct Target
		{
			[Token(Token = "0x4000B08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Volume volume;

			[Token(Token = "0x4000B09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public AisacControl aisacControl;
		}

		[Token(Token = "0x40006A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Target target;

		[Token(Token = "0x40006A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ReactDuckerTargetType targetType;

		[Token(Token = "0x40006A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ReactFadeParameter entry;

		[Token(Token = "0x40006AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ReactFadeParameter exit;

		[Token(Token = "0x40006AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public ReactHoldType holdType;

		[Token(Token = "0x40006AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ushort holdTimeMs;
	}

	[Token(Token = "0x2000109")]
	public struct ReactAisacModulationParameter
	{
		[Token(Token = "0x40006AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _enableDecrementAisacModulationKey;

		[Token(Token = "0x40006AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint decrementAisacModulationKey;

		[Token(Token = "0x40006AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int _enableIncrementAisacModulationKey;

		[Token(Token = "0x40006B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint incrementAisacModulationKey;

		[Token(Token = "0x170000F9")]
		public bool enableDecrementAisacModulationKey
		{
			[Token(Token = "0x6000C65")]
			[Address(RVA = "0x8A9038", Offset = "0x8A9038", VA = "0x8A9038")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000FA")]
		public bool enableIncrementAisacModulationKey
		{
			[Token(Token = "0x6000C66")]
			[Address(RVA = "0x8A9048", Offset = "0x8A9048", VA = "0x8A9048")]
			get
			{
				return default(bool);
			}
		}
	}

	[StructLayout(2)]
	[Token(Token = "0x200010A")]
	public struct ReactParameter
	{
		[StructLayout(2)]
		[Token(Token = "0x20001EC")]
		public struct Parameter
		{
			[Token(Token = "0x4000B0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ReactDuckerParameter ducker;

			[Token(Token = "0x4000B0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ReactAisacModulationParameter aisacModulation;
		}

		[Token(Token = "0x40006B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Parameter parameter;

		[Token(Token = "0x40006B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public ReactType type;

		[Token(Token = "0x40006B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool enablePausingCue;
	}

	[Token(Token = "0x600015A")]
	[Address(RVA = "0xF5CD00", Offset = "0xF5CD00", VA = "0xF5CD00")]
	public static void SetVolume(string name, float volume)
	{
	}

	[Token(Token = "0x600015B")]
	[Address(RVA = "0xF5CDA4", Offset = "0xF5CDA4", VA = "0xF5CDA4")]
	public static void SetVolume(int id, float volume)
	{
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0xF5CE38", Offset = "0xF5CE38", VA = "0xF5CE38")]
	public static float GetVolume(string name)
	{
		return default(float);
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0xF5CEDC", Offset = "0xF5CEDC", VA = "0xF5CEDC")]
	public static float GetVolume(int id)
	{
		return default(float);
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0xF5CF60", Offset = "0xF5CF60", VA = "0xF5CF60")]
	public static void Mute(string name, bool mute)
	{
	}

	[Token(Token = "0x600015F")]
	[Address(RVA = "0xF5D008", Offset = "0xF5D008", VA = "0xF5D008")]
	public static void Mute(int id, bool mute)
	{
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0xF5D0A0", Offset = "0xF5D0A0", VA = "0xF5D0A0")]
	public static bool IsMuted(string name)
	{
		return default(bool);
	}

	[Token(Token = "0x6000161")]
	[Address(RVA = "0xF5D140", Offset = "0xF5D140", VA = "0xF5D140")]
	public static bool IsMuted(int id)
	{
		return default(bool);
	}

	[Token(Token = "0x6000162")]
	[Address(RVA = "0xF5D1CC", Offset = "0xF5D1CC", VA = "0xF5D1CC")]
	public static void Solo(string name, bool solo, float muteVolume)
	{
	}

	[Token(Token = "0x6000163")]
	[Address(RVA = "0xF5D284", Offset = "0xF5D284", VA = "0xF5D284")]
	public static void Solo(int id, bool solo, float muteVolume)
	{
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0xF5D32C", Offset = "0xF5D32C", VA = "0xF5D32C")]
	public static bool IsSoloed(string name)
	{
		return default(bool);
	}

	[Token(Token = "0x6000165")]
	[Address(RVA = "0xF5D3CC", Offset = "0xF5D3CC", VA = "0xF5D3CC")]
	public static bool IsSoloed(int id)
	{
		return default(bool);
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0xF5D458", Offset = "0xF5D458", VA = "0xF5D458")]
	public static void Pause(string name, bool pause)
	{
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0xF5D500", Offset = "0xF5D500", VA = "0xF5D500")]
	public static void Pause(int id, bool pause)
	{
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0xF5D598", Offset = "0xF5D598", VA = "0xF5D598")]
	public static bool IsPaused(string name)
	{
		return default(bool);
	}

	[Token(Token = "0x6000169")]
	[Address(RVA = "0xF5D638", Offset = "0xF5D638", VA = "0xF5D638")]
	public static bool IsPaused(int id)
	{
		return default(bool);
	}

	[Token(Token = "0x600016A")]
	[Address(RVA = "0xF5D6C4", Offset = "0xF5D6C4", VA = "0xF5D6C4")]
	public static void SetAisacControl(string name, string controlName, float value)
	{
	}

	[Token(Token = "0x600016B")]
	[Address(RVA = "0xF5D790", Offset = "0xF5D790", VA = "0xF5D790")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9ACAE0", Offset = "0x9ACAE0")]
	public static void SetAisac(string name, string controlName, float value)
	{
	}

	[Token(Token = "0x600016C")]
	[Address(RVA = "0xF5D794", Offset = "0xF5D794", VA = "0xF5D794")]
	public static void SetAisacControl(int id, int controlId, float value)
	{
	}

	[Token(Token = "0x600016D")]
	[Address(RVA = "0xF5D838", Offset = "0xF5D838", VA = "0xF5D838")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9ACB18", Offset = "0x9ACB18")]
	public static void SetAisac(int id, int controlId, float value)
	{
	}

	[Token(Token = "0x600016E")]
	[Address(RVA = "0xF5D83C", Offset = "0xF5D83C", VA = "0xF5D83C")]
	public static void SetReactParameter(string name, ReactParameter parameter)
	{
	}

	[Token(Token = "0x600016F")]
	[Address(RVA = "0xF5D92C", Offset = "0xF5D92C", VA = "0xF5D92C")]
	public static bool GetReactParameter(string name, out ReactParameter parameter)
	{
		return default(bool);
	}

	[Token(Token = "0x6000170")]
	[Address(RVA = "0xF5DA20", Offset = "0xF5DA20", VA = "0xF5DA20")]
	public static bool GetAttachedAisacInfoById(uint id, int aisacAttachedIndex, out CriAtomEx.AisacInfo aisacInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x6000171")]
	[Address(RVA = "0xF5DC74", Offset = "0xF5DC74", VA = "0xF5DC74")]
	public static bool GetAttachedAisacInfoByName(string name, int aisacAttachedIndex, out CriAtomEx.AisacInfo aisacInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x6000172")]
	[Address(RVA = "0xF5DEDC", Offset = "0xF5DEDC", VA = "0xF5DEDC")]
	public static bool GetCurrentAisacControlValue(string categoryName, string aisacControlName, out float controlValue)
	{
		return default(bool);
	}

	[PreserveSig]
	[Token(Token = "0x6000173")]
	[Address(RVA = "0xF5CD04", Offset = "0xF5CD04", VA = "0xF5CD04")]
	private static extern void criAtomExCategory_SetVolumeByName(string name, float volume);

	[PreserveSig]
	[Token(Token = "0x6000174")]
	[Address(RVA = "0xF5CE3C", Offset = "0xF5CE3C", VA = "0xF5CE3C")]
	private static extern float criAtomExCategory_GetVolumeByName(string name);

	[PreserveSig]
	[Token(Token = "0x6000175")]
	[Address(RVA = "0xF5CDA8", Offset = "0xF5CDA8", VA = "0xF5CDA8")]
	private static extern void criAtomExCategory_SetVolumeById(int id, float volume);

	[PreserveSig]
	[Token(Token = "0x6000176")]
	[Address(RVA = "0xF5CEE0", Offset = "0xF5CEE0", VA = "0xF5CEE0")]
	private static extern float criAtomExCategory_GetVolumeById(int id);

	[PreserveSig]
	[Token(Token = "0x6000177")]
	[Address(RVA = "0xF5D010", Offset = "0xF5D010", VA = "0xF5D010")]
	private static extern void criAtomExCategory_MuteById(int id, bool mute);

	[PreserveSig]
	[Token(Token = "0x6000178")]
	[Address(RVA = "0xF5D144", Offset = "0xF5D144", VA = "0xF5D144")]
	private static extern bool criAtomExCategory_IsMutedById(int id);

	[PreserveSig]
	[Token(Token = "0x6000179")]
	[Address(RVA = "0xF5CF68", Offset = "0xF5CF68", VA = "0xF5CF68")]
	private static extern void criAtomExCategory_MuteByName(string name, bool mute);

	[PreserveSig]
	[Token(Token = "0x600017A")]
	[Address(RVA = "0xF5D0A4", Offset = "0xF5D0A4", VA = "0xF5D0A4")]
	private static extern bool criAtomExCategory_IsMutedByName(string name);

	[PreserveSig]
	[Token(Token = "0x600017B")]
	[Address(RVA = "0xF5D28C", Offset = "0xF5D28C", VA = "0xF5D28C")]
	private static extern void criAtomExCategory_SoloById(int id, bool solo, float volume);

	[PreserveSig]
	[Token(Token = "0x600017C")]
	[Address(RVA = "0xF5D3D0", Offset = "0xF5D3D0", VA = "0xF5D3D0")]
	private static extern bool criAtomExCategory_IsSoloedById(int id);

	[PreserveSig]
	[Token(Token = "0x600017D")]
	[Address(RVA = "0xF5D1D4", Offset = "0xF5D1D4", VA = "0xF5D1D4")]
	private static extern void criAtomExCategory_SoloByName(string name, bool solo, float volume);

	[PreserveSig]
	[Token(Token = "0x600017E")]
	[Address(RVA = "0xF5D330", Offset = "0xF5D330", VA = "0xF5D330")]
	private static extern bool criAtomExCategory_IsSoloedByName(string name);

	[PreserveSig]
	[Token(Token = "0x600017F")]
	[Address(RVA = "0xF5D508", Offset = "0xF5D508", VA = "0xF5D508")]
	private static extern void criAtomExCategory_PauseById(int id, bool pause);

	[PreserveSig]
	[Token(Token = "0x6000180")]
	[Address(RVA = "0xF5D63C", Offset = "0xF5D63C", VA = "0xF5D63C")]
	private static extern bool criAtomExCategory_IsPausedById(int id);

	[PreserveSig]
	[Token(Token = "0x6000181")]
	[Address(RVA = "0xF5D460", Offset = "0xF5D460", VA = "0xF5D460")]
	private static extern void criAtomExCategory_PauseByName(string name, bool pause);

	[PreserveSig]
	[Token(Token = "0x6000182")]
	[Address(RVA = "0xF5D59C", Offset = "0xF5D59C", VA = "0xF5D59C")]
	private static extern bool criAtomExCategory_IsPausedByName(string name);

	[PreserveSig]
	[Token(Token = "0x6000183")]
	[Address(RVA = "0xF5D798", Offset = "0xF5D798", VA = "0xF5D798")]
	private static extern void criAtomExCategory_SetAisacControlById(int id, ushort controlId, float value);

	[PreserveSig]
	[Token(Token = "0x6000184")]
	[Address(RVA = "0xF5D6C8", Offset = "0xF5D6C8", VA = "0xF5D6C8")]
	private static extern void criAtomExCategory_SetAisacControlByName(string name, string controlName, float value);

	[PreserveSig]
	[Token(Token = "0x6000185")]
	[Address(RVA = "0xF5D840", Offset = "0xF5D840", VA = "0xF5D840")]
	private static extern void criAtomExCategory_SetReactParameter(string react_name, ref ReactParameter parameter);

	[PreserveSig]
	[Token(Token = "0x6000186")]
	[Address(RVA = "0xF5D930", Offset = "0xF5D930", VA = "0xF5D930")]
	private static extern bool criAtomExCategory_GetReactParameter(string react_name, out ReactParameter parameter);

	[PreserveSig]
	[Token(Token = "0x6000187")]
	[Address(RVA = "0xF5DBD4", Offset = "0xF5DBD4", VA = "0xF5DBD4")]
	private static extern bool criAtomExCategory_GetAttachedAisacInfoById(uint id, int aisacAttachedIndex, IntPtr aisacInfo);

	[PreserveSig]
	[Token(Token = "0x6000188")]
	[Address(RVA = "0xF5DE28", Offset = "0xF5DE28", VA = "0xF5DE28")]
	private static extern bool criAtomExCategory_GetAttachedAisacInfoByName(string name, int aisacAttachedIndex, IntPtr aisacInfo);

	[PreserveSig]
	[Token(Token = "0x6000189")]
	[Address(RVA = "0xF5DEE0", Offset = "0xF5DEE0", VA = "0xF5DEE0")]
	private static extern bool criAtomExCategory_GetCurrentAisacControlValueByName(string category_name, string aisac_control_name, out float control_value);
}
[Token(Token = "0x200000F")]
public static class CriAtomExSequencer
{
	[Token(Token = "0x200010B")]
	public struct CriAtomExSequenceEventInfo
	{
		[Token(Token = "0x40006B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong position;

		[Token(Token = "0x40006B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr playerHn;

		[Token(Token = "0x40006B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string tag;

		[Token(Token = "0x40006B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint playbackId;

		[Token(Token = "0x40006B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int type;

		[Token(Token = "0x40006B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint id;

		[Token(Token = "0x40006BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private uint reserved;
	}

	[Token(Token = "0x200010C")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x9A4C48", Offset = "0x9A4C48")]
	public delegate void EventCbFunc(string eventParamsString);

	[Token(Token = "0x200010D")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x9A4C5C", Offset = "0x9A4C5C")]
	public delegate void EventCallback(ref CriAtomExSequenceEventInfo criAtomExSequenceInfo);

	[Token(Token = "0x14000009")]
	public static event EventCallback OnCallback
	{
		[Token(Token = "0x600018A")]
		[Address(RVA = "0xF639A8", Offset = "0xF639A8", VA = "0xF639A8")]
		add
		{
		}
		[Token(Token = "0x600018B")]
		[Address(RVA = "0xF63AA8", Offset = "0xF63AA8", VA = "0xF63AA8")]
		remove
		{
		}
	}

	[Token(Token = "0x600018C")]
	[Address(RVA = "0xF68E38", Offset = "0xF68E38", VA = "0xF68E38")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9ACB50", Offset = "0x9ACB50")]
	public static void SetEventCallback(EventCbFunc func, string separator = "\t")
	{
	}
}
[Token(Token = "0x2000010")]
public static class CriAtomExBeatSync
{
	[Token(Token = "0x200010E")]
	public struct Info
	{
		[Token(Token = "0x40006BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr playerHn;

		[Token(Token = "0x40006BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint playbackId;

		[Token(Token = "0x40006BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint barCount;

		[Token(Token = "0x40006BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint beatCount;

		[Token(Token = "0x40006BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float beatProgress;

		[Token(Token = "0x40006C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float bpm;

		[Token(Token = "0x40006C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int offset;

		[Token(Token = "0x40006C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint numBeats;
	}

	[Token(Token = "0x200010F")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x9A4C70", Offset = "0x9A4C70")]
	public delegate void CbFunc(ref Info info);

	[Token(Token = "0x1400000A")]
	public static event CbFunc OnCallback
	{
		[Token(Token = "0x600018D")]
		[Address(RVA = "0xF5C8A8", Offset = "0xF5C8A8", VA = "0xF5C8A8")]
		add
		{
		}
		[Token(Token = "0x600018E")]
		[Address(RVA = "0xF5C910", Offset = "0xF5C910", VA = "0xF5C910")]
		remove
		{
		}
	}

	[Token(Token = "0x600018F")]
	[Address(RVA = "0xF5C978", Offset = "0xF5C978", VA = "0xF5C978")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9ACB8C", Offset = "0x9ACB8C")]
	public static void SetCallback(CbFunc func)
	{
	}
}
[Token(Token = "0x2000011")]
public class CriAtomExAsr
{
	[Token(Token = "0x2000110")]
	private struct BusAnalyzerConfig
	{
		[Token(Token = "0x40006C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int interval;

		[Token(Token = "0x40006C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int peakHoldTime;
	}

	[Token(Token = "0x2000111")]
	public struct BusAnalyzerInfo
	{
		[Token(Token = "0x40006C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int numChannels;

		[Token(Token = "0x40006C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float[] rmsLevels;

		[Token(Token = "0x40006C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float[] peakLevels;

		[Token(Token = "0x40006C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float[] peakHoldLevels;

		[Token(Token = "0x6000C73")]
		[Address(RVA = "0x8A8FBC", Offset = "0x8A8FBC", VA = "0x8A8FBC")]
		public BusAnalyzerInfo(byte[] data)
		{
		}
	}

	[Token(Token = "0x6000190")]
	[Address(RVA = "0xF5A5B4", Offset = "0xF5A5B4", VA = "0xF5A5B4")]
	public static void AttachBusAnalyzer(string busName, int interval, int peakHoldTime)
	{
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0xF5A678", Offset = "0xF5A678", VA = "0xF5A678")]
	public static void AttachBusAnalyzer(int interval, int peakHoldTime)
	{
	}

	[Token(Token = "0x6000192")]
	[Address(RVA = "0xF5A740", Offset = "0xF5A740", VA = "0xF5A740")]
	public static void DetachBusAnalyzer(string busName)
	{
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0xF5A7D4", Offset = "0xF5A7D4", VA = "0xF5A7D4")]
	public static void DetachBusAnalyzer()
	{
	}

	[Token(Token = "0x6000194")]
	[Address(RVA = "0xF5A884", Offset = "0xF5A884", VA = "0xF5A884")]
	public static void GetBusAnalyzerInfo(string busName, out BusAnalyzerInfo info)
	{
	}

	[Token(Token = "0x6000195")]
	[Address(RVA = "0xF5ACDC", Offset = "0xF5ACDC", VA = "0xF5ACDC")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9ACBC8", Offset = "0x9ACBC8")]
	public static void GetBusAnalyzerInfo(int busId, out BusAnalyzerInfo info)
	{
	}

	[Token(Token = "0x6000196")]
	[Address(RVA = "0xF5AEDC", Offset = "0xF5AEDC", VA = "0xF5AEDC")]
	public static void SetBusVolume(string busName, float volume)
	{
	}

	[Token(Token = "0x6000197")]
	[Address(RVA = "0xF5AF80", Offset = "0xF5AF80", VA = "0xF5AF80")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9ACC00", Offset = "0x9ACC00")]
	public static void SetBusVolume(int busId, float volume)
	{
	}

	[Token(Token = "0x6000198")]
	[Address(RVA = "0xF5B014", Offset = "0xF5B014", VA = "0xF5B014")]
	public static void SetBusSendLevel(string busName, string sendTo, float level)
	{
	}

	[Token(Token = "0x6000199")]
	[Address(RVA = "0xF5B0E0", Offset = "0xF5B0E0", VA = "0xF5B0E0")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9ACC38", Offset = "0x9ACC38")]
	public static void SetBusSendLevel(int busId, int sendTo, float level)
	{
	}

	[Token(Token = "0x600019A")]
	[Address(RVA = "0xF5B184", Offset = "0xF5B184", VA = "0xF5B184")]
	public static void SetBusMatrix(string busName, int inputChannels, int outputChannels, float[] matrix)
	{
	}

	[Token(Token = "0x600019B")]
	[Address(RVA = "0xF5B248", Offset = "0xF5B248", VA = "0xF5B248")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9ACC70", Offset = "0x9ACC70")]
	public static void SetBusMatrix(int busId, int inputChannels, int outputChannels, float[] matrix)
	{
	}

	[Token(Token = "0x600019C")]
	[Address(RVA = "0xF5B2FC", Offset = "0xF5B2FC", VA = "0xF5B2FC")]
	public static void SetEffectBypass(string busName, string effectName, bool bypass)
	{
	}

	[Token(Token = "0x600019D")]
	[Address(RVA = "0xF5B3C4", Offset = "0xF5B3C4", VA = "0xF5B3C4")]
	public static void SetEffectParameter(string busName, string effectName, uint parameterIndex, float parameterValue)
	{
	}

	[Token(Token = "0x600019E")]
	[Address(RVA = "0xF5B578", Offset = "0xF5B578", VA = "0xF5B578")]
	public static float GetEffectParameter(string busName, string effectName, uint parameterIndex)
	{
		return default(float);
	}

	[Token(Token = "0x600019F")]
	[Address(RVA = "0xF5B64C", Offset = "0xF5B64C", VA = "0xF5B64C")]
	public static bool RegisterEffectInterface(IntPtr afx_interface)
	{
		return default(bool);
	}

	[Token(Token = "0x60001A0")]
	[Address(RVA = "0xF5B6D8", Offset = "0xF5B6D8", VA = "0xF5B6D8")]
	public static void UnregisterEffectInterface(IntPtr afx_interface)
	{
	}

	[Token(Token = "0x60001A1")]
	[Address(RVA = "0xF5B75C", Offset = "0xF5B75C", VA = "0xF5B75C")]
	public static void GetBusVolume(string busName, out float volume)
	{
	}

	[PreserveSig]
	[Token(Token = "0x60001A2")]
	[Address(RVA = "0xF5A5D8", Offset = "0xF5A5D8", VA = "0xF5A5D8")]
	private static extern void criAtomExAsr_AttachBusAnalyzerByName(string busName, ref BusAnalyzerConfig config);

	[PreserveSig]
	[Token(Token = "0x60001A3")]
	[Address(RVA = "0xF5A6B0", Offset = "0xF5A6B0", VA = "0xF5A6B0")]
	private static extern void criAtomExAsr_AttachBusAnalyzer(int busNo, ref BusAnalyzerConfig config);

	[PreserveSig]
	[Token(Token = "0x60001A4")]
	[Address(RVA = "0xF5A744", Offset = "0xF5A744", VA = "0xF5A744")]
	private static extern void criAtomExAsr_DetachBusAnalyzerByName(string busName);

	[PreserveSig]
	[Token(Token = "0x60001A5")]
	[Address(RVA = "0xF5A804", Offset = "0xF5A804", VA = "0xF5A804")]
	private static extern void criAtomExAsr_DetachBusAnalyzer(int busNo);

	[PreserveSig]
	[Token(Token = "0x60001A6")]
	[Address(RVA = "0xF5A9F4", Offset = "0xF5A9F4", VA = "0xF5A9F4")]
	private static extern void criAtomExAsr_GetBusAnalyzerInfoByName(string busName, IntPtr info);

	[PreserveSig]
	[Token(Token = "0x60001A7")]
	[Address(RVA = "0xF5AE4C", Offset = "0xF5AE4C", VA = "0xF5AE4C")]
	private static extern void criAtomExAsr_GetBusAnalyzerInfo(int busNo, IntPtr info);

	[PreserveSig]
	[Token(Token = "0x60001A8")]
	[Address(RVA = "0xF5AEE0", Offset = "0xF5AEE0", VA = "0xF5AEE0")]
	private static extern void criAtomExAsr_SetBusVolumeByName(string busName, float volume);

	[PreserveSig]
	[Token(Token = "0x60001A9")]
	[Address(RVA = "0xF5AF84", Offset = "0xF5AF84", VA = "0xF5AF84")]
	private static extern void criAtomExAsr_SetBusVolume(int busNo, float volume);

	[PreserveSig]
	[Token(Token = "0x60001AA")]
	[Address(RVA = "0xF5B018", Offset = "0xF5B018", VA = "0xF5B018")]
	private static extern void criAtomExAsr_SetBusSendLevelByName(string busName, string sendtoName, float level);

	[PreserveSig]
	[Token(Token = "0x60001AB")]
	[Address(RVA = "0xF5B0E4", Offset = "0xF5B0E4", VA = "0xF5B0E4")]
	private static extern void criAtomExAsr_SetBusSendLevel(int busNo, int sendtoNo, float level);

	[PreserveSig]
	[Token(Token = "0x60001AC")]
	[Address(RVA = "0xF5B188", Offset = "0xF5B188", VA = "0xF5B188")]
	private static extern void criAtomExAsr_SetBusMatrixByName(string busName, int inputChannels, int outputChannels, float[] matrix);

	[PreserveSig]
	[Token(Token = "0x60001AD")]
	[Address(RVA = "0xF5B24C", Offset = "0xF5B24C", VA = "0xF5B24C")]
	private static extern void criAtomExAsr_SetBusMatrix(int busNo, int inputChannels, int outputChannels, float[] matrix);

	[PreserveSig]
	[Token(Token = "0x60001AE")]
	[Address(RVA = "0xF5B304", Offset = "0xF5B304", VA = "0xF5B304")]
	private static extern void criAtomExAsr_SetEffectBypass(string busName, string effectName, bool bypass);

	[PreserveSig]
	[Token(Token = "0x60001AF")]
	[Address(RVA = "0xF5B4C0", Offset = "0xF5B4C0", VA = "0xF5B4C0")]
	private static extern void criAtomExAsr_UpdateEffectParameters(string busName, string effectName);

	[PreserveSig]
	[Token(Token = "0x60001B0")]
	[Address(RVA = "0xF5B3F0", Offset = "0xF5B3F0", VA = "0xF5B3F0")]
	private static extern void criAtomExAsr_SetEffectParameter(string busName, string effectName, uint parameterIndex, float parameterValue);

	[PreserveSig]
	[Token(Token = "0x60001B1")]
	[Address(RVA = "0xF5B57C", Offset = "0xF5B57C", VA = "0xF5B57C")]
	private static extern float criAtomExAsr_GetEffectParameter(string busName, string effectName, uint parameterIndex);

	[PreserveSig]
	[Token(Token = "0x60001B2")]
	[Address(RVA = "0xF5B650", Offset = "0xF5B650", VA = "0xF5B650")]
	private static extern bool criAtomExAsr_RegisterEffectInterface(IntPtr afx_interface);

	[PreserveSig]
	[Token(Token = "0x60001B3")]
	[Address(RVA = "0xF5B6DC", Offset = "0xF5B6DC", VA = "0xF5B6DC")]
	private static extern void criAtomExAsr_UnregisterEffectInterface(IntPtr afx_interface);

	[PreserveSig]
	[Token(Token = "0x60001B4")]
	[Address(RVA = "0xF5B760", Offset = "0xF5B760", VA = "0xF5B760")]
	private static extern void criAtomExAsr_GetBusVolumeByName(string busName, out float volume);

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0xF5B800", Offset = "0xF5B800", VA = "0xF5B800")]
	public CriAtomExAsr()
	{
	}
}
[Token(Token = "0x2000012")]
public static class CriAtomExLatencyEstimator
{
	[Token(Token = "0x2000112")]
	public enum Status
	{
		[Token(Token = "0x40006CA")]
		Stop,
		[Token(Token = "0x40006CB")]
		Processing,
		[Token(Token = "0x40006CC")]
		Done,
		[Token(Token = "0x40006CD")]
		Error
	}

	[Token(Token = "0x2000113")]
	public struct EstimatorInfo
	{
		[Token(Token = "0x40006CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Status status;

		[Token(Token = "0x40006CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint estimated_latency;
	}

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0xF5E050", Offset = "0xF5E050", VA = "0xF5E050")]
	public static void InitializeModule()
	{
	}

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0xF5E0C4", Offset = "0xF5E0C4", VA = "0xF5E0C4")]
	public static void FinalizeModule()
	{
	}

	[Token(Token = "0x60001B8")]
	[Address(RVA = "0xF5E138", Offset = "0xF5E138", VA = "0xF5E138")]
	public static EstimatorInfo GetCurrentInfo()
	{
		return default(EstimatorInfo);
	}

	[PreserveSig]
	[Token(Token = "0x60001B9")]
	[Address(RVA = "0xF5E054", Offset = "0xF5E054", VA = "0xF5E054")]
	private static extern void criAtomLatencyEstimator_Initialize_ANDROID();

	[PreserveSig]
	[Token(Token = "0x60001BA")]
	[Address(RVA = "0xF5E0C8", Offset = "0xF5E0C8", VA = "0xF5E0C8")]
	private static extern void criAtomLatencyEstimator_Finalize_ANDROID();

	[PreserveSig]
	[Token(Token = "0x60001BB")]
	[Address(RVA = "0xF5E13C", Offset = "0xF5E13C", VA = "0xF5E13C")]
	private static extern EstimatorInfo criAtomLatencyEstimator_GetCurrentInfo_ANDROID();
}
[Token(Token = "0x2000013")]
public class CriAtomEx3dListener : CriDisposable
{
	[Token(Token = "0x2000114")]
	public struct Config
	{
		[Token(Token = "0x40006D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int reserved;
	}

	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private IntPtr handle;

	[Token(Token = "0x1700002B")]
	public IntPtr nativeHandle
	{
		[Token(Token = "0x60001BF")]
		[Address(RVA = "0xFA9EE4", Offset = "0xFA9EE4", VA = "0xFA9EE4")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x60001BC")]
	[Address(RVA = "0xFA9C50", Offset = "0xFA9C50", VA = "0xFA9C50")]
	public CriAtomEx3dListener()
	{
	}

	[Token(Token = "0x60001BD")]
	[Address(RVA = "0xFA9D88", Offset = "0xFA9D88", VA = "0xFA9D88", Slot = "5")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x60001BE")]
	[Address(RVA = "0xFA9D90", Offset = "0xFA9D90", VA = "0xFA9D90")]
	private void Dispose(bool disposing)
	{
	}

	[Token(Token = "0x60001C0")]
	[Address(RVA = "0xFA9EEC", Offset = "0xFA9EEC", VA = "0xFA9EEC")]
	public void Update()
	{
	}

	[Token(Token = "0x60001C1")]
	[Address(RVA = "0xFA9FD0", Offset = "0xFA9FD0", VA = "0xFA9FD0")]
	public void ResetParameters()
	{
	}

	[Token(Token = "0x60001C2")]
	[Address(RVA = "0xFAA0B4", Offset = "0xFAA0B4", VA = "0xFAA0B4")]
	public void SetPosition(float x, float y, float z)
	{
	}

	[Token(Token = "0x60001C3")]
	[Address(RVA = "0xFAA1D8", Offset = "0xFAA1D8", VA = "0xFAA1D8")]
	public void SetVelocity(float x, float y, float z)
	{
	}

	[Token(Token = "0x60001C4")]
	[Address(RVA = "0xFAA2FC", Offset = "0xFAA2FC", VA = "0xFAA2FC")]
	public void SetOrientation(float fx, float fy, float fz, float ux, float uy, float uz)
	{
	}

	[Token(Token = "0x60001C5")]
	[Address(RVA = "0xFAA450", Offset = "0xFAA450", VA = "0xFAA450")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9ACCA8", Offset = "0x9ACCA8")]
	public void SetDistanceFactor(float distanceFactor)
	{
	}

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0xFAA5B0", Offset = "0xFAA5B0", VA = "0xFAA5B0")]
	public void SetDopplerMultiplier(float dopplerMultiplier)
	{
	}

	[Token(Token = "0x60001C7")]
	[Address(RVA = "0xFAA670", Offset = "0xFAA670", VA = "0xFAA670")]
	public void SetFocusPoint(float x, float y, float z)
	{
	}

	[Token(Token = "0x60001C8")]
	[Address(RVA = "0xFAA794", Offset = "0xFAA794", VA = "0xFAA794")]
	public void SetDistanceFocusLevel(float distanceFocusLevel)
	{
	}

	[Token(Token = "0x60001C9")]
	[Address(RVA = "0xFAA89C", Offset = "0xFAA89C", VA = "0xFAA89C")]
	public void SetDirectionFocusLevel(float directionFocusLevel)
	{
	}

	[Token(Token = "0x60001CA")]
	[Address(RVA = "0xFAA9A4", Offset = "0xFAA9A4", VA = "0xFAA9A4")]
	public void Set3dRegion(CriAtomEx3dRegion region3d)
	{
	}

	[Token(Token = "0x60001CB")]
	[Address(RVA = "0xFAAAB8", Offset = "0xFAAAB8", VA = "0xFAAAB8", Slot = "1")]
	~CriAtomEx3dListener()
	{
	}

	[PreserveSig]
	[Token(Token = "0x60001CC")]
	[Address(RVA = "0xFA9CF0", Offset = "0xFA9CF0", VA = "0xFA9CF0")]
	private static extern IntPtr criAtomEx3dListener_Create(ref Config config, IntPtr work, int work_size);

	[PreserveSig]
	[Token(Token = "0x60001CD")]
	[Address(RVA = "0xFA9E64", Offset = "0xFA9E64", VA = "0xFA9E64")]
	private static extern void criAtomEx3dListener_Destroy(IntPtr ex_3d_listener);

	[PreserveSig]
	[Token(Token = "0x60001CE")]
	[Address(RVA = "0xFA9F50", Offset = "0xFA9F50", VA = "0xFA9F50")]
	private static extern void criAtomEx3dListener_Update(IntPtr ex_3d_listener);

	[PreserveSig]
	[Token(Token = "0x60001CF")]
	[Address(RVA = "0xFAA034", Offset = "0xFAA034", VA = "0xFAA034")]
	private static extern void criAtomEx3dListener_ResetParameters(IntPtr ex_3d_listener);

	[PreserveSig]
	[Token(Token = "0x60001D0")]
	[Address(RVA = "0xFAA148", Offset = "0xFAA148", VA = "0xFAA148")]
	private static extern void criAtomEx3dListener_SetPosition(IntPtr ex_3d_listener, ref CriAtomEx.NativeVector position);

	[PreserveSig]
	[Token(Token = "0x60001D1")]
	[Address(RVA = "0xFAA26C", Offset = "0xFAA26C", VA = "0xFAA26C")]
	private static extern void criAtomEx3dListener_SetVelocity(IntPtr ex_3d_listener, ref CriAtomEx.NativeVector velocity);

	[PreserveSig]
	[Token(Token = "0x60001D2")]
	[Address(RVA = "0xFAA3B8", Offset = "0xFAA3B8", VA = "0xFAA3B8")]
	private static extern void criAtomEx3dListener_SetOrientation(IntPtr ex_3d_listener, ref CriAtomEx.NativeVector front, ref CriAtomEx.NativeVector top);

	[PreserveSig]
	[Token(Token = "0x60001D3")]
	[Address(RVA = "0xFAAB24", Offset = "0xFAAB24", VA = "0xFAAB24")]
	private static extern void criAtomEx3dListener_SetDistanceFactor(IntPtr ex_3d_listener, float distance_factor);

	[PreserveSig]
	[Token(Token = "0x60001D4")]
	[Address(RVA = "0xFAA520", Offset = "0xFAA520", VA = "0xFAA520")]
	private static extern void criAtomEx3dListener_SetDopplerMultiplier(IntPtr ex_3d_listener, float doppler_multiplier);

	[PreserveSig]
	[Token(Token = "0x60001D5")]
	[Address(RVA = "0xFAA704", Offset = "0xFAA704", VA = "0xFAA704")]
	private static extern void criAtomEx3dListener_SetFocusPoint(IntPtr ex_3d_listener, ref CriAtomEx.NativeVector focus_point);

	[PreserveSig]
	[Token(Token = "0x60001D6")]
	[Address(RVA = "0xFAA80C", Offset = "0xFAA80C", VA = "0xFAA80C")]
	private static extern void criAtomEx3dListener_SetDistanceFocusLevel(IntPtr ex_3d_listener, float distance_focus_level);

	[PreserveSig]
	[Token(Token = "0x60001D7")]
	[Address(RVA = "0xFAA914", Offset = "0xFAA914", VA = "0xFAA914")]
	private static extern void criAtomEx3dListener_SetDirectionFocusLevel(IntPtr ex_3d_listener, float direction_focus_level);

	[PreserveSig]
	[Token(Token = "0x60001D8")]
	[Address(RVA = "0xFAAA28", Offset = "0xFAAA28", VA = "0xFAAA28")]
	private static extern void criAtomEx3dListener_Set3dRegionHn(IntPtr ex_3d_listener, IntPtr ex_3d_region);
}
[Token(Token = "0x2000014")]
public class CriAtomEx3dSource : CriDisposable
{
	[Token(Token = "0x2000115")]
	public struct Config
	{
		[Token(Token = "0x40006D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool enableVoicePriorityDecay;

		[Token(Token = "0x40006D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint randomPositionListMaxLength;

		[Token(Token = "0x6000C74")]
		[Address(RVA = "0x8AA9D0", Offset = "0x8AA9D0", VA = "0x8AA9D0")]
		public Config(bool enableVoicePriorityDecay, uint randomPositionListMaxLength)
		{
		}
	}

	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private uint currentRandomPositionListMaxLength;

	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IntPtr handle;

	[Token(Token = "0x1700002C")]
	public IntPtr nativeHandle
	{
		[Token(Token = "0x60001DC")]
		[Address(RVA = "0xFAB1A4", Offset = "0xFAB1A4", VA = "0xFAB1A4")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0xFAAEBC", Offset = "0xFAAEBC", VA = "0xFAAEBC")]
	public CriAtomEx3dSource(bool enableVoicePriorityDecay = false, uint randomPositionListMaxLength = 0u)
	{
	}

	[Token(Token = "0x60001DA")]
	[Address(RVA = "0xFAB048", Offset = "0xFAB048", VA = "0xFAB048", Slot = "5")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x60001DB")]
	[Address(RVA = "0xFAB050", Offset = "0xFAB050", VA = "0xFAB050")]
	private void Dispose(bool disposing)
	{
	}

	[Token(Token = "0x60001DD")]
	[Address(RVA = "0xFAB1AC", Offset = "0xFAB1AC", VA = "0xFAB1AC")]
	public void Update()
	{
	}

	[Token(Token = "0x60001DE")]
	[Address(RVA = "0xFAB234", Offset = "0xFAB234", VA = "0xFAB234")]
	public void ResetParameters()
	{
	}

	[Token(Token = "0x60001DF")]
	[Address(RVA = "0xFAB2BC", Offset = "0xFAB2BC", VA = "0xFAB2BC")]
	public void SetPosition(float x, float y, float z)
	{
	}

	[Token(Token = "0x60001E0")]
	[Address(RVA = "0xFAB378", Offset = "0xFAB378", VA = "0xFAB378")]
	public void SetVelocity(float x, float y, float z)
	{
	}

	[Token(Token = "0x60001E1")]
	[Address(RVA = "0xFAB434", Offset = "0xFAB434", VA = "0xFAB434")]
	public void SetOrientation(Vector3 front, Vector3 top)
	{
	}

	[Token(Token = "0x60001E2")]
	[Address(RVA = "0xFAB504", Offset = "0xFAB504", VA = "0xFAB504")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9ACCE0", Offset = "0x9ACCE0")]
	public void SetConeOrientation(float x, float y, float z)
	{
	}

	[Token(Token = "0x60001E3")]
	[Address(RVA = "0xFAB5C0", Offset = "0xFAB5C0", VA = "0xFAB5C0")]
	public void SetConeParameter(float insideAngle, float outsideAngle, float outsideVolume)
	{
	}

	[Token(Token = "0x60001E4")]
	[Address(RVA = "0xFAB670", Offset = "0xFAB670", VA = "0xFAB670")]
	public void SetMinMaxDistance(float minDistance, float maxDistance)
	{
	}

	[Token(Token = "0x60001E5")]
	[Address(RVA = "0xFAB710", Offset = "0xFAB710", VA = "0xFAB710")]
	public void SetInteriorPanField(float sourceRadius, float interiorDistance)
	{
	}

	[Token(Token = "0x60001E6")]
	[Address(RVA = "0xFAB7B0", Offset = "0xFAB7B0", VA = "0xFAB7B0")]
	public void SetDopplerFactor(float dopplerFactor)
	{
	}

	[Token(Token = "0x60001E7")]
	[Address(RVA = "0xFAB848", Offset = "0xFAB848", VA = "0xFAB848")]
	public void SetVolume(float volume)
	{
	}

	[Token(Token = "0x60001E8")]
	[Address(RVA = "0xFAB8E0", Offset = "0xFAB8E0", VA = "0xFAB8E0")]
	public void SetMaxAngleAisacDelta(float maxDelta)
	{
	}

	[Token(Token = "0x60001E9")]
	[Address(RVA = "0xFAB978", Offset = "0xFAB978", VA = "0xFAB978")]
	public void SetAttenuationDistanceSetting(bool flag)
	{
	}

	[Token(Token = "0x60001EA")]
	[Address(RVA = "0xFABA14", Offset = "0xFABA14", VA = "0xFABA14")]
	public bool GetAttenuationDistanceSetting()
	{
		return default(bool);
	}

	[Token(Token = "0x60001EB")]
	[Address(RVA = "0xFABAA4", Offset = "0xFABAA4", VA = "0xFABAA4")]
	public void SetRandomPositionConfig(CriAtomEx.Randomize3dConfig? config)
	{
	}

	[Token(Token = "0x60001EC")]
	[Address(RVA = "0xFABC9C", Offset = "0xFABC9C", VA = "0xFABC9C")]
	public void SetRandomPositionList(Vector3[] positionList)
	{
	}

	[Token(Token = "0x60001ED")]
	[Address(RVA = "0xFABE8C", Offset = "0xFABE8C", VA = "0xFABE8C")]
	public void Set3dRegion(CriAtomEx3dRegion region3d)
	{
	}

	[Token(Token = "0x60001EE")]
	[Address(RVA = "0xFABF7C", Offset = "0xFABF7C", VA = "0xFABF7C")]
	public void SetListenerBasedElevationAngleAisacControlId(ushort aisacControlId)
	{
	}

	[Token(Token = "0x60001EF")]
	[Address(RVA = "0xFAC014", Offset = "0xFAC014", VA = "0xFAC014")]
	public void SetSourceBasedElevationAngleAisacControlId(ushort aisacControlId)
	{
	}

	[Token(Token = "0x60001F0")]
	[Address(RVA = "0xFAC0AC", Offset = "0xFAC0AC", VA = "0xFAC0AC", Slot = "1")]
	~CriAtomEx3dSource()
	{
	}

	[PreserveSig]
	[Token(Token = "0x60001F1")]
	[Address(RVA = "0xFAAF8C", Offset = "0xFAAF8C", VA = "0xFAAF8C")]
	private static extern IntPtr criAtomEx3dSource_Create(ref Config config, IntPtr work, int work_size);

	[PreserveSig]
	[Token(Token = "0x60001F2")]
	[Address(RVA = "0xFAB124", Offset = "0xFAB124", VA = "0xFAB124")]
	private static extern void criAtomEx3dSource_Destroy(IntPtr ex_3d_source);

	[PreserveSig]
	[Token(Token = "0x60001F3")]
	[Address(RVA = "0xFAB1B4", Offset = "0xFAB1B4", VA = "0xFAB1B4")]
	private static extern void criAtomEx3dSource_Update(IntPtr ex_3d_source);

	[PreserveSig]
	[Token(Token = "0x60001F4")]
	[Address(RVA = "0xFAB23C", Offset = "0xFAB23C", VA = "0xFAB23C")]
	private static extern void criAtomEx3dSource_ResetParameters(IntPtr ex_3d_source);

	[PreserveSig]
	[Token(Token = "0x60001F5")]
	[Address(RVA = "0xFAB2E8", Offset = "0xFAB2E8", VA = "0xFAB2E8")]
	private static extern void criAtomEx3dSource_SetPosition(IntPtr ex_3d_source, ref CriAtomEx.NativeVector position);

	[PreserveSig]
	[Token(Token = "0x60001F6")]
	[Address(RVA = "0xFAB3A4", Offset = "0xFAB3A4", VA = "0xFAB3A4")]
	private static extern void criAtomEx3dSource_SetVelocity(IntPtr ex_3d_source, ref CriAtomEx.NativeVector velocity);

	[PreserveSig]
	[Token(Token = "0x60001F7")]
	[Address(RVA = "0xFAB46C", Offset = "0xFAB46C", VA = "0xFAB46C")]
	private static extern void criAtomEx3dSource_SetOrientation(IntPtr ex_3d_source, ref CriAtomEx.NativeVector front, ref CriAtomEx.NativeVector top);

	[PreserveSig]
	[Token(Token = "0x60001F8")]
	[Address(RVA = "0xFAB530", Offset = "0xFAB530", VA = "0xFAB530")]
	private static extern void criAtomEx3dSource_SetConeOrientation(IntPtr ex_3d_source, ref CriAtomEx.NativeVector cone_orient);

	[PreserveSig]
	[Token(Token = "0x60001F9")]
	[Address(RVA = "0xFAB5C8", Offset = "0xFAB5C8", VA = "0xFAB5C8")]
	private static extern void criAtomEx3dSource_SetConeParameter(IntPtr ex_3d_source, float inside_angle, float outside_angle, float outside_volume);

	[PreserveSig]
	[Token(Token = "0x60001FA")]
	[Address(RVA = "0xFAB678", Offset = "0xFAB678", VA = "0xFAB678")]
	private static extern void criAtomEx3dSource_SetMinMaxAttenuationDistance(IntPtr ex_3d_source, float min_distance, float max_distance);

	[PreserveSig]
	[Token(Token = "0x60001FB")]
	[Address(RVA = "0xFAB718", Offset = "0xFAB718", VA = "0xFAB718")]
	private static extern void criAtomEx3dSource_SetInteriorPanField(IntPtr ex_3d_source, float source_radius, float interior_distance);

	[PreserveSig]
	[Token(Token = "0x60001FC")]
	[Address(RVA = "0xFAB7B8", Offset = "0xFAB7B8", VA = "0xFAB7B8")]
	private static extern void criAtomEx3dSource_SetDopplerFactor(IntPtr ex_3d_source, float doppler_factor);

	[PreserveSig]
	[Token(Token = "0x60001FD")]
	[Address(RVA = "0xFAB850", Offset = "0xFAB850", VA = "0xFAB850")]
	private static extern void criAtomEx3dSource_SetVolume(IntPtr ex_3d_source, float volume);

	[PreserveSig]
	[Token(Token = "0x60001FE")]
	[Address(RVA = "0xFAB8E8", Offset = "0xFAB8E8", VA = "0xFAB8E8")]
	private static extern void criAtomEx3dSource_SetMaxAngleAisacDelta(IntPtr ex_3d_source, float max_delta);

	[PreserveSig]
	[Token(Token = "0x60001FF")]
	[Address(RVA = "0xFAB984", Offset = "0xFAB984", VA = "0xFAB984")]
	private static extern void criAtomEx3dSource_SetAttenuationDistanceSetting(IntPtr ex_3d_source, bool flag);

	[PreserveSig]
	[Token(Token = "0x6000200")]
	[Address(RVA = "0xFABA1C", Offset = "0xFABA1C", VA = "0xFABA1C")]
	private static extern bool criAtomEx3dSource_GetAttenuationDistanceSetting(IntPtr ex_3d_source);

	[PreserveSig]
	[Token(Token = "0x6000201")]
	[Address(RVA = "0xFABBE0", Offset = "0xFABBE0", VA = "0xFABBE0")]
	private static extern void criAtomEx3dSource_SetRandomPositionConfig(IntPtr ex_3d_source, ref CriAtomEx.Randomize3dConfig config);

	[PreserveSig]
	[Token(Token = "0x6000202")]
	[Address(RVA = "0xFABB50", Offset = "0xFABB50", VA = "0xFABB50")]
	private static extern void criAtomEx3dSource_SetRandomPositionConfig(IntPtr ex_3d_source, IntPtr config);

	[PreserveSig]
	[Token(Token = "0x6000203")]
	[Address(RVA = "0xFABDEC", Offset = "0xFABDEC", VA = "0xFABDEC")]
	private static extern void criAtomEx3dSource_SetRandomPositionList(IntPtr ex_3d_source, CriAtomEx.NativeVector[] position_list, uint length);

	[PreserveSig]
	[Token(Token = "0x6000204")]
	[Address(RVA = "0xFABEEC", Offset = "0xFABEEC", VA = "0xFABEEC")]
	private static extern void criAtomEx3dSource_Set3dRegionHn(IntPtr ex_3d_source, IntPtr ex_3d_region);

	[PreserveSig]
	[Token(Token = "0x6000205")]
	[Address(RVA = "0xFABF84", Offset = "0xFABF84", VA = "0xFABF84")]
	private static extern void criAtomEx3dSource_SetListenerBasedElevationAngleAisacControlId(IntPtr ex_3d_source, ushort aisac_control_id);

	[PreserveSig]
	[Token(Token = "0x6000206")]
	[Address(RVA = "0xFAC01C", Offset = "0xFAC01C", VA = "0xFAC01C")]
	private static extern void criAtomEx3dSource_SetSourceBasedElevationAngleAisacControlId(IntPtr ex_3d_source, ushort aisac_control_id);
}
[Token(Token = "0x2000015")]
public class CriAtomEx3dTransceiver : CriDisposable
{
	[Token(Token = "0x2000116")]
	public struct Config
	{
		[Token(Token = "0x40006D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int reserved;
	}

	[Token(Token = "0x2000117")]
	private static class UnsafeNativeMethods
	{
		[PreserveSig]
		[Token(Token = "0x6000C75")]
		[Address(RVA = "0xFAC1B8", Offset = "0xFAC1B8", VA = "0xFAC1B8")]
		internal static extern IntPtr criAtomEx3dTransceiver_Create(ref Config config, IntPtr work, int work_size);

		[PreserveSig]
		[Token(Token = "0x6000C76")]
		[Address(RVA = "0xFAC32C", Offset = "0xFAC32C", VA = "0xFAC32C")]
		internal static extern void criAtomEx3dTransceiver_Destroy(IntPtr ex_3d_transceiver);

		[PreserveSig]
		[Token(Token = "0x6000C77")]
		[Address(RVA = "0xFAC3BC", Offset = "0xFAC3BC", VA = "0xFAC3BC")]
		internal static extern void criAtomEx3dTransceiver_Update(IntPtr ex_3d_transceiver);

		[PreserveSig]
		[Token(Token = "0x6000C78")]
		[Address(RVA = "0xFAC468", Offset = "0xFAC468", VA = "0xFAC468")]
		internal static extern void criAtomEx3dTransceiver_SetInputPosition(IntPtr ex_3d_transceiver, ref CriAtomEx.NativeVector position);

		[PreserveSig]
		[Token(Token = "0x6000C79")]
		[Address(RVA = "0xFAC524", Offset = "0xFAC524", VA = "0xFAC524")]
		internal static extern void criAtomEx3dTransceiver_SetOutputPosition(IntPtr ex_3d_transceiver, ref CriAtomEx.NativeVector position);

		[PreserveSig]
		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0xFAC5EC", Offset = "0xFAC5EC", VA = "0xFAC5EC")]
		internal static extern void criAtomEx3dTransceiver_SetInputOrientation(IntPtr ex_3d_transceiver, ref CriAtomEx.NativeVector front, ref CriAtomEx.NativeVector top);

		[PreserveSig]
		[Token(Token = "0x6000C7B")]
		[Address(RVA = "0xFAC6BC", Offset = "0xFAC6BC", VA = "0xFAC6BC")]
		internal static extern void criAtomEx3dTransceiver_SetOutputOrientation(IntPtr ex_3d_transceiver, ref CriAtomEx.NativeVector front, ref CriAtomEx.NativeVector top);

		[PreserveSig]
		[Token(Token = "0x6000C7C")]
		[Address(RVA = "0xFAC75C", Offset = "0xFAC75C", VA = "0xFAC75C")]
		internal static extern void criAtomEx3dTransceiver_SetOutputConeParameter(IntPtr ex_3d_transceiver, float inside_angle, float outside_angle, float outside_volume);

		[PreserveSig]
		[Token(Token = "0x6000C7D")]
		[Address(RVA = "0xFAC80C", Offset = "0xFAC80C", VA = "0xFAC80C")]
		internal static extern void criAtomEx3dTransceiver_SetOutputMinMaxAttenuationDistance(IntPtr ex_3d_transceiver, float min_attenuation_distance, float max_attenuation_distance);

		[PreserveSig]
		[Token(Token = "0x6000C7E")]
		[Address(RVA = "0xFAC8AC", Offset = "0xFAC8AC", VA = "0xFAC8AC")]
		internal static extern void criAtomEx3dTransceiver_SetOutputInteriorPanField(IntPtr ex_3d_transceiver, float transceiver_radius, float interior_distance);

		[PreserveSig]
		[Token(Token = "0x6000C7F")]
		[Address(RVA = "0xFAC94C", Offset = "0xFAC94C", VA = "0xFAC94C")]
		internal static extern void criAtomEx3dTransceiver_SetInputCrossFadeField(IntPtr ex_3d_transceiver, float direct_audio_radius, float crossfade_distance);

		[PreserveSig]
		[Token(Token = "0x6000C80")]
		[Address(RVA = "0xFAC9EC", Offset = "0xFAC9EC", VA = "0xFAC9EC")]
		internal static extern void criAtomEx3dTransceiver_SetOutputVolume(IntPtr ex_3d_transceiver, float volume);

		[PreserveSig]
		[Token(Token = "0x6000C81")]
		[Address(RVA = "0xFACA84", Offset = "0xFACA84", VA = "0xFACA84")]
		internal static extern void criAtomEx3dTransceiver_AttachAisac(IntPtr ex_3d_transceiver, string global_aisac_name);

		[PreserveSig]
		[Token(Token = "0x6000C82")]
		[Address(RVA = "0xFACB30", Offset = "0xFACB30", VA = "0xFACB30")]
		internal static extern void criAtomEx3dTransceiver_DetachAisac(IntPtr ex_3d_transceiver, string global_aisac_name);

		[PreserveSig]
		[Token(Token = "0x6000C83")]
		[Address(RVA = "0xFACBDC", Offset = "0xFACBDC", VA = "0xFACBDC")]
		internal static extern void criAtomEx3dTransceiver_SetMaxAngleAisacDelta(IntPtr ex_3d_transceiver, float max_delta);

		[PreserveSig]
		[Token(Token = "0x6000C84")]
		[Address(RVA = "0xFACC74", Offset = "0xFACC74", VA = "0xFACC74")]
		internal static extern void criAtomEx3dTransceiver_SetDistanceAisacControlId(IntPtr ex_3d_transceiver, ushort aisac_control_id);

		[PreserveSig]
		[Token(Token = "0x6000C85")]
		[Address(RVA = "0xFACD0C", Offset = "0xFACD0C", VA = "0xFACD0C")]
		internal static extern void criAtomEx3dTransceiver_SetListenerBasedAzimuthAngleAisacControlId(IntPtr ex_3d_transceiver, ushort aisac_control_id);

		[PreserveSig]
		[Token(Token = "0x6000C86")]
		[Address(RVA = "0xFACDA4", Offset = "0xFACDA4", VA = "0xFACDA4")]
		internal static extern void criAtomEx3dTransceiver_SetListenerBasedElevationAngleAisacControlId(IntPtr ex_3d_transceiver, ushort aisac_control_id);

		[PreserveSig]
		[Token(Token = "0x6000C87")]
		[Address(RVA = "0xFACE3C", Offset = "0xFACE3C", VA = "0xFACE3C")]
		internal static extern void criAtomEx3dTransceiver_SetTransceiverOutputBasedAzimuthAngleAisacControlId(IntPtr ex_3d_transceiver, ushort aisac_control_id);

		[PreserveSig]
		[Token(Token = "0x6000C88")]
		[Address(RVA = "0xFACED4", Offset = "0xFACED4", VA = "0xFACED4")]
		internal static extern void criAtomEx3dTransceiver_SetTransceiverOutputBasedElevationAngleAisacControlId(IntPtr ex_3d_transceiver, ushort aisac_control_id);

		[PreserveSig]
		[Token(Token = "0x6000C89")]
		[Address(RVA = "0xFACFC4", Offset = "0xFACFC4", VA = "0xFACFC4")]
		internal static extern void criAtomEx3dTransceiver_Set3dRegionHn(IntPtr ex_3d_transceiver, IntPtr ex_3d_region);
	}

	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private IntPtr handle;

	[Token(Token = "0x1700002D")]
	public IntPtr nativeHandle
	{
		[Token(Token = "0x600020A")]
		[Address(RVA = "0xFAC3AC", Offset = "0xFAC3AC", VA = "0xFAC3AC")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x6000207")]
	[Address(RVA = "0xFAC118", Offset = "0xFAC118", VA = "0xFAC118")]
	public CriAtomEx3dTransceiver()
	{
	}

	[Token(Token = "0x6000208")]
	[Address(RVA = "0xFAC250", Offset = "0xFAC250", VA = "0xFAC250", Slot = "5")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x6000209")]
	[Address(RVA = "0xFAC258", Offset = "0xFAC258", VA = "0xFAC258")]
	private void Dispose(bool disposing)
	{
	}

	[Token(Token = "0x600020B")]
	[Address(RVA = "0xFAC3B4", Offset = "0xFAC3B4", VA = "0xFAC3B4")]
	public void Update()
	{
	}

	[Token(Token = "0x600020C")]
	[Address(RVA = "0xFAC43C", Offset = "0xFAC43C", VA = "0xFAC43C")]
	public void SetInputPosition(Vector3 position)
	{
	}

	[Token(Token = "0x600020D")]
	[Address(RVA = "0xFAC4F8", Offset = "0xFAC4F8", VA = "0xFAC4F8")]
	public void SetOutputPosition(Vector3 position)
	{
	}

	[Token(Token = "0x600020E")]
	[Address(RVA = "0xFAC5B4", Offset = "0xFAC5B4", VA = "0xFAC5B4")]
	public void SetInputOrientation(Vector3 front, Vector3 top)
	{
	}

	[Token(Token = "0x600020F")]
	[Address(RVA = "0xFAC684", Offset = "0xFAC684", VA = "0xFAC684")]
	public void SetOutputOrientation(Vector3 front, Vector3 top)
	{
	}

	[Token(Token = "0x6000210")]
	[Address(RVA = "0xFAC754", Offset = "0xFAC754", VA = "0xFAC754")]
	public void SetOutputConeParameter(float insideAngle, float outsideAngle, float outsideVolume)
	{
	}

	[Token(Token = "0x6000211")]
	[Address(RVA = "0xFAC804", Offset = "0xFAC804", VA = "0xFAC804")]
	public void SetOutputMinMaxDistance(float minDistance, float maxDistance)
	{
	}

	[Token(Token = "0x6000212")]
	[Address(RVA = "0xFAC8A4", Offset = "0xFAC8A4", VA = "0xFAC8A4")]
	public void SetOutputInteriorPanField(float radius, float interiorDistance)
	{
	}

	[Token(Token = "0x6000213")]
	[Address(RVA = "0xFAC944", Offset = "0xFAC944", VA = "0xFAC944")]
	public void SetInputCrossFadeField(float directAudioRadius, float crossfadeDistance)
	{
	}

	[Token(Token = "0x6000214")]
	[Address(RVA = "0xFAC9E4", Offset = "0xFAC9E4", VA = "0xFAC9E4")]
	public void SetOutputVolume(float volume)
	{
	}

	[Token(Token = "0x6000215")]
	[Address(RVA = "0xFACA7C", Offset = "0xFACA7C", VA = "0xFACA7C")]
	public void AttachAisac(string globalAisacName)
	{
	}

	[Token(Token = "0x6000216")]
	[Address(RVA = "0xFACB28", Offset = "0xFACB28", VA = "0xFACB28")]
	public void DetachAisac(string globalAisacName)
	{
	}

	[Token(Token = "0x6000217")]
	[Address(RVA = "0xFACBD4", Offset = "0xFACBD4", VA = "0xFACBD4")]
	public void SetMaxAngleAisacDelta(float maxDelta)
	{
	}

	[Token(Token = "0x6000218")]
	[Address(RVA = "0xFACC6C", Offset = "0xFACC6C", VA = "0xFACC6C")]
	public void SetDistanceAisacControlId(ushort aisacControlId)
	{
	}

	[Token(Token = "0x6000219")]
	[Address(RVA = "0xFACD04", Offset = "0xFACD04", VA = "0xFACD04")]
	public void SetListenerBasedAzimuthAngleAisacControlId(ushort aisacControlId)
	{
	}

	[Token(Token = "0x600021A")]
	[Address(RVA = "0xFACD9C", Offset = "0xFACD9C", VA = "0xFACD9C")]
	public void SetListenerBasedElevationAngleAisacControlId(ushort aisacControlId)
	{
	}

	[Token(Token = "0x600021B")]
	[Address(RVA = "0xFACE34", Offset = "0xFACE34", VA = "0xFACE34")]
	public void SetTransceiverOutputBasedAzimuthAngleAisacControlId(ushort aisacControlId)
	{
	}

	[Token(Token = "0x600021C")]
	[Address(RVA = "0xFACECC", Offset = "0xFACECC", VA = "0xFACECC")]
	public void SetTransceiverOutputBasedElevationAngleAisacControlId(ushort aisacControlId)
	{
	}

	[Token(Token = "0x600021D")]
	[Address(RVA = "0xFACF64", Offset = "0xFACF64", VA = "0xFACF64")]
	public void Set3dRegion(CriAtomEx3dRegion region3d)
	{
	}

	[Token(Token = "0x600021E")]
	[Address(RVA = "0xFAD054", Offset = "0xFAD054", VA = "0xFAD054", Slot = "1")]
	~CriAtomEx3dTransceiver()
	{
	}
}
[Token(Token = "0x2000016")]
public class CriAtomEx3dRegion : CriDisposable
{
	[Token(Token = "0x2000118")]
	public struct Config
	{
		[Token(Token = "0x40006D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int reserved;
	}

	[Token(Token = "0x2000119")]
	private static class UnsafeNativeMethods
	{
		[PreserveSig]
		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0xFAAC54", Offset = "0xFAAC54", VA = "0xFAAC54")]
		internal static extern IntPtr criAtomEx3dRegion_Create(ref Config config, IntPtr work, int work_size);

		[PreserveSig]
		[Token(Token = "0x6000C8B")]
		[Address(RVA = "0xFAADC8", Offset = "0xFAADC8", VA = "0xFAADC8")]
		internal static extern void criAtomEx3dRegion_Destroy(IntPtr ex_3d_region);
	}

	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private IntPtr handle;

	[Token(Token = "0x1700002E")]
	public IntPtr nativeHandle
	{
		[Token(Token = "0x6000223")]
		[Address(RVA = "0xFAAEB4", Offset = "0xFAAEB4", VA = "0xFAAEB4")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x600021F")]
	[Address(RVA = "0xFAABB4", Offset = "0xFAABB4", VA = "0xFAABB4")]
	public CriAtomEx3dRegion()
	{
	}

	[Token(Token = "0x6000220")]
	[Address(RVA = "0xFAACEC", Offset = "0xFAACEC", VA = "0xFAACEC", Slot = "5")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x6000221")]
	[Address(RVA = "0xFAACF4", Offset = "0xFAACF4", VA = "0xFAACF4")]
	private void Dispose(bool disposing)
	{
	}

	[Token(Token = "0x6000222")]
	[Address(RVA = "0xFAAE48", Offset = "0xFAAE48", VA = "0xFAAE48", Slot = "1")]
	~CriAtomEx3dRegion()
	{
	}
}
[Token(Token = "0x2000017")]
public class CriAtomExAcb : CriDisposable
{
	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private IntPtr handle;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GCHandle dataHandle;

	[Token(Token = "0x1700002F")]
	public IntPtr nativeHandle
	{
		[Token(Token = "0x6000224")]
		[Address(RVA = "0xFAD0C0", Offset = "0xFAD0C0", VA = "0xFAD0C0")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x17000030")]
	public bool isAvailable
	{
		[Token(Token = "0x6000225")]
		[Address(RVA = "0xFAD0C8", Offset = "0xFAD0C8", VA = "0xFAD0C8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000226")]
	[Address(RVA = "0xFA4B10", Offset = "0xFA4B10", VA = "0xFA4B10")]
	public static CriAtomExAcb LoadAcbFile(CriFsBinder binder, string acbPath, string awbPath)
	{
		return null;
	}

	[Token(Token = "0x6000227")]
	[Address(RVA = "0xFA4BF4", Offset = "0xFA4BF4", VA = "0xFA4BF4")]
	public static CriAtomExAcb LoadAcbData(byte[] acbData, CriFsBinder awbBinder, string awbPath)
	{
		return null;
	}

	[Token(Token = "0x6000228")]
	[Address(RVA = "0xFAD3A0", Offset = "0xFAD3A0", VA = "0xFAD3A0", Slot = "5")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x6000229")]
	[Address(RVA = "0xFAD414", Offset = "0xFAD414", VA = "0xFAD414")]
	private void Dispose(bool disposing)
	{
	}

	[Token(Token = "0x600022A")]
	[Address(RVA = "0xFAD55C", Offset = "0xFAD55C", VA = "0xFAD55C")]
	public bool Exists(string cueName)
	{
		return default(bool);
	}

	[Token(Token = "0x600022B")]
	[Address(RVA = "0xFAD614", Offset = "0xFAD614", VA = "0xFAD614")]
	public bool Exists(int cueId)
	{
		return default(bool);
	}

	[Token(Token = "0x600022C")]
	[Address(RVA = "0xFAD6B4", Offset = "0xFAD6B4", VA = "0xFAD6B4")]
	public bool GetCueInfo(string cueName, out CriAtomEx.CueInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x600022D")]
	[Address(RVA = "0xFAD910", Offset = "0xFAD910", VA = "0xFAD910")]
	public bool GetCueInfo(int cueId, out CriAtomEx.CueInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x600022E")]
	[Address(RVA = "0xFADB54", Offset = "0xFADB54", VA = "0xFADB54")]
	public bool GetCueInfoByIndex(int index, out CriAtomEx.CueInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x600022F")]
	[Address(RVA = "0xFADD98", Offset = "0xFADD98", VA = "0xFADD98")]
	public CriAtomEx.CueInfo[] GetCueInfoList()
	{
		return null;
	}

	[Token(Token = "0x6000230")]
	[Address(RVA = "0xFADEE8", Offset = "0xFADEE8", VA = "0xFADEE8")]
	public bool GetWaveFormInfo(string cueName, out CriAtomEx.WaveformInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x6000231")]
	[Address(RVA = "0xFAE14C", Offset = "0xFAE14C", VA = "0xFAE14C")]
	public bool GetWaveFormInfo(int cueId, out CriAtomEx.WaveformInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x6000232")]
	[Address(RVA = "0xFAE398", Offset = "0xFAE398", VA = "0xFAE398")]
	public int GetNumCuePlaying(string name)
	{
		return default(int);
	}

	[Token(Token = "0x6000233")]
	[Address(RVA = "0xFAE44C", Offset = "0xFAE44C", VA = "0xFAE44C")]
	public int GetNumCuePlaying(int id)
	{
		return default(int);
	}

	[Token(Token = "0x6000234")]
	[Address(RVA = "0xFAE4E4", Offset = "0xFAE4E4", VA = "0xFAE4E4")]
	public int GetBlockIndex(string cueName, string blockName)
	{
		return default(int);
	}

	[Token(Token = "0x6000235")]
	[Address(RVA = "0xFAE5B4", Offset = "0xFAE5B4", VA = "0xFAE5B4")]
	public int GetBlockIndex(int cueId, string blockName)
	{
		return default(int);
	}

	[Token(Token = "0x6000236")]
	[Address(RVA = "0xFAE670", Offset = "0xFAE670", VA = "0xFAE670")]
	public int GetNumUsableAisacControls(string cueName)
	{
		return default(int);
	}

	[Token(Token = "0x6000237")]
	[Address(RVA = "0xFAE724", Offset = "0xFAE724", VA = "0xFAE724")]
	public int GetNumUsableAisacControls(int cueId)
	{
		return default(int);
	}

	[Token(Token = "0x6000238")]
	[Address(RVA = "0xFAE7BC", Offset = "0xFAE7BC", VA = "0xFAE7BC")]
	public bool GetUsableAisacControl(string cueName, int index, out CriAtomEx.AisacControlInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x6000239")]
	[Address(RVA = "0xFAEA20", Offset = "0xFAEA20", VA = "0xFAEA20")]
	public bool GetUsableAisacControl(int cueId, int index, out CriAtomEx.AisacControlInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x600023A")]
	[Address(RVA = "0xFAEC6C", Offset = "0xFAEC6C", VA = "0xFAEC6C")]
	public CriAtomEx.AisacControlInfo[] GetUsableAisacControlList(string cueName)
	{
		return null;
	}

	[Token(Token = "0x600023B")]
	[Address(RVA = "0xFAED48", Offset = "0xFAED48", VA = "0xFAED48")]
	public CriAtomEx.AisacControlInfo[] GetUsableAisacControlList(int cueId)
	{
		return null;
	}

	[Token(Token = "0x600023C")]
	[Address(RVA = "0xFAEE24", Offset = "0xFAEE24", VA = "0xFAEE24")]
	public void ResetCueTypeState(string cueName)
	{
	}

	[Token(Token = "0x600023D")]
	[Address(RVA = "0xFAEED0", Offset = "0xFAEED0", VA = "0xFAEED0")]
	public void ResetCueTypeState(int cueId)
	{
	}

	[Token(Token = "0x600023E")]
	[Address(RVA = "0xFAEF68", Offset = "0xFAEF68", VA = "0xFAEF68")]
	public void AttachAwbFile(CriFsBinder awb_binder, string awb_path, string awb_name)
	{
	}

	[Token(Token = "0x600023F")]
	[Address(RVA = "0xFAF0F0", Offset = "0xFAF0F0", VA = "0xFAF0F0")]
	public void DetachAwbFile(string awb_name)
	{
	}

	[Token(Token = "0x6000240")]
	[Address(RVA = "0xFAF1D0", Offset = "0xFAF1D0", VA = "0xFAF1D0")]
	public bool IsReadyToRelease()
	{
		return default(bool);
	}

	[Token(Token = "0x6000241")]
	[Address(RVA = "0xFAF290", Offset = "0xFAF290", VA = "0xFAF290")]
	public float GetLoadProgress()
	{
		return default(float);
	}

	[Token(Token = "0x6000242")]
	[Address(RVA = "0xFAF298", Offset = "0xFAF298", VA = "0xFAF298")]
	public void Decrypt(ulong key, ulong nonce)
	{
	}

	[Token(Token = "0x6000243")]
	[Address(RVA = "0xFAD204", Offset = "0xFAD204", VA = "0xFAD204")]
	internal CriAtomExAcb(IntPtr handle, GCHandle? dataHandle)
	{
	}

	[Token(Token = "0x6000244")]
	[Address(RVA = "0xFAF338", Offset = "0xFAF338", VA = "0xFAF338", Slot = "1")]
	~CriAtomExAcb()
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000245")]
	[Address(RVA = "0xFAD114", Offset = "0xFAD114", VA = "0xFAD114")]
	private static extern IntPtr criAtomExAcb_LoadAcbFile(IntPtr acb_binder, string acb_path, IntPtr awb_binder, string awb_path, IntPtr work, int work_size);

	[PreserveSig]
	[Token(Token = "0x6000246")]
	[Address(RVA = "0xFAD2C4", Offset = "0xFAD2C4", VA = "0xFAD2C4")]
	private static extern IntPtr criAtomExAcb_LoadAcbData(IntPtr acb_data, int acb_data_size, IntPtr awb_binder, string awb_path, IntPtr work, int work_size);

	[PreserveSig]
	[Token(Token = "0x6000247")]
	[Address(RVA = "0xFAD4DC", Offset = "0xFAD4DC", VA = "0xFAD4DC")]
	private static extern void criAtomExAcb_Release(IntPtr acb_hn);

	[PreserveSig]
	[Token(Token = "0x6000248")]
	[Address(RVA = "0xFADE68", Offset = "0xFADE68", VA = "0xFADE68")]
	private static extern int criAtomExAcb_GetNumCues(IntPtr acb_hn);

	[PreserveSig]
	[Token(Token = "0x6000249")]
	[Address(RVA = "0xFAD61C", Offset = "0xFAD61C", VA = "0xFAD61C")]
	private static extern bool criAtomExAcb_ExistsId(IntPtr acb_hn, int id);

	[PreserveSig]
	[Token(Token = "0x600024A")]
	[Address(RVA = "0xFAD564", Offset = "0xFAD564", VA = "0xFAD564")]
	private static extern bool criAtomExAcb_ExistsName(IntPtr acb_hn, string name);

	[PreserveSig]
	[Token(Token = "0x600024B")]
	[Address(RVA = "0xFAE72C", Offset = "0xFAE72C", VA = "0xFAE72C")]
	private static extern int criAtomExAcb_GetNumUsableAisacControlsById(IntPtr acb_hn, int id);

	[PreserveSig]
	[Token(Token = "0x600024C")]
	[Address(RVA = "0xFAE678", Offset = "0xFAE678", VA = "0xFAE678")]
	private static extern int criAtomExAcb_GetNumUsableAisacControlsByName(IntPtr acb_hn, string name);

	[PreserveSig]
	[Token(Token = "0x600024D")]
	[Address(RVA = "0xFAEBBC", Offset = "0xFAEBBC", VA = "0xFAEBBC")]
	private static extern bool criAtomExAcb_GetUsableAisacControlById(IntPtr acb_hn, int id, ushort index, IntPtr info);

	[PreserveSig]
	[Token(Token = "0x600024E")]
	[Address(RVA = "0xFAE958", Offset = "0xFAE958", VA = "0xFAE958")]
	private static extern bool criAtomExAcb_GetUsableAisacControlByName(IntPtr acb_hn, string name, ushort index, IntPtr info);

	[PreserveSig]
	[Token(Token = "0x600024F")]
	[Address(RVA = "0xFAE2F8", Offset = "0xFAE2F8", VA = "0xFAE2F8")]
	private static extern bool criAtomExAcb_GetWaveformInfoById(IntPtr acb_hn, int id, IntPtr waveform_info);

	[PreserveSig]
	[Token(Token = "0x6000250")]
	[Address(RVA = "0xFAE094", Offset = "0xFAE094", VA = "0xFAE094")]
	private static extern bool criAtomExAcb_GetWaveformInfoByName(IntPtr acb_hn, string name, IntPtr waveform_info);

	[PreserveSig]
	[Token(Token = "0x6000251")]
	[Address(RVA = "0xFAD858", Offset = "0xFAD858", VA = "0xFAD858")]
	private static extern bool criAtomExAcb_GetCueInfoByName(IntPtr acb_hn, string name, IntPtr info);

	[PreserveSig]
	[Token(Token = "0x6000252")]
	[Address(RVA = "0xFADAB4", Offset = "0xFADAB4", VA = "0xFADAB4")]
	private static extern bool criAtomExAcb_GetCueInfoById(IntPtr acb_hn, int id, IntPtr info);

	[PreserveSig]
	[Token(Token = "0x6000253")]
	[Address(RVA = "0xFADCF8", Offset = "0xFADCF8", VA = "0xFADCF8")]
	private static extern bool criAtomExAcb_GetCueInfoByIndex(IntPtr acb_hn, int index, IntPtr info);

	[PreserveSig]
	[Token(Token = "0x6000254")]
	[Address(RVA = "0xFAE3A0", Offset = "0xFAE3A0", VA = "0xFAE3A0")]
	private static extern int criAtomExAcb_GetNumCuePlayingCountByName(IntPtr acb_hn, string name);

	[PreserveSig]
	[Token(Token = "0x6000255")]
	[Address(RVA = "0xFAE454", Offset = "0xFAE454", VA = "0xFAE454")]
	private static extern int criAtomExAcb_GetNumCuePlayingCountById(IntPtr acb_hn, int id);

	[PreserveSig]
	[Token(Token = "0x6000256")]
	[Address(RVA = "0xFAE5BC", Offset = "0xFAE5BC", VA = "0xFAE5BC")]
	private static extern int criAtomExAcb_GetBlockIndexById(IntPtr acb_hn, int id, string block_name);

	[PreserveSig]
	[Token(Token = "0x6000257")]
	[Address(RVA = "0xFAE4EC", Offset = "0xFAE4EC", VA = "0xFAE4EC")]
	private static extern int criAtomExAcb_GetBlockIndexByName(IntPtr acb_hn, string name, string block_name);

	[PreserveSig]
	[Token(Token = "0x6000258")]
	[Address(RVA = "0xFAEE2C", Offset = "0xFAEE2C", VA = "0xFAEE2C")]
	private static extern void criAtomExAcb_ResetCueTypeStateByName(IntPtr acb_hn, string name);

	[PreserveSig]
	[Token(Token = "0x6000259")]
	[Address(RVA = "0xFAEED8", Offset = "0xFAEED8", VA = "0xFAEED8")]
	private static extern void criAtomExAcb_ResetCueTypeStateById(IntPtr acb_hn, int id);

	[PreserveSig]
	[Token(Token = "0x600025A")]
	[Address(RVA = "0xFAF008", Offset = "0xFAF008", VA = "0xFAF008")]
	private static extern void criAtomExAcb_AttachAwbFile(IntPtr acb_hn, IntPtr awb_binder, string awb_path, string awb_name, IntPtr work, int work_size);

	[PreserveSig]
	[Token(Token = "0x600025B")]
	[Address(RVA = "0xFAF12C", Offset = "0xFAF12C", VA = "0xFAF12C")]
	private static extern void criAtomExAcb_DetachAwbFile(IntPtr acb_hn, string awb_name);

	[PreserveSig]
	[Token(Token = "0x600025C")]
	[Address(RVA = "0xFAF208", Offset = "0xFAF208", VA = "0xFAF208")]
	private static extern bool criAtomExAcb_IsReadyToRelease(IntPtr acb_hn);
}
[Token(Token = "0x2000018")]
public class CriAtomExAcbLoader : CriDisposable
{
	[Token(Token = "0x200011A")]
	public enum Status
	{
		[Token(Token = "0x40006D6")]
		Stop,
		[Token(Token = "0x40006D7")]
		Loading,
		[Token(Token = "0x40006D8")]
		Complete,
		[Token(Token = "0x40006D9")]
		Error
	}

	[Token(Token = "0x200011B")]
	private struct LoaderConfig
	{
		[Token(Token = "0x40006DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool shouldLoadAwbOnMemory;
	}

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private IntPtr handle;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GCHandle? gch;

	[Token(Token = "0x600025D")]
	[Address(RVA = "0xFA5E58", Offset = "0xFA5E58", VA = "0xFA5E58")]
	public static CriAtomExAcbLoader LoadAcbFileAsync(CriFsBinder binder, string acbPath, string awbPath, bool loadAwbOnMemory = false)
	{
		return null;
	}

	[Token(Token = "0x600025E")]
	[Address(RVA = "0xFA57C8", Offset = "0xFA57C8", VA = "0xFA57C8")]
	public static CriAtomExAcbLoader LoadAcbDataAsync(byte[] acbData, CriFsBinder awbBinder, string awbPath, bool loadAwbOnMemory = false)
	{
		return null;
	}

	[Token(Token = "0x600025F")]
	[Address(RVA = "0xFA5920", Offset = "0xFA5920", VA = "0xFA5920")]
	public Status GetStatus()
	{
		return default(Status);
	}

	[Token(Token = "0x6000260")]
	[Address(RVA = "0xFA5928", Offset = "0xFA5928", VA = "0xFA5928")]
	public CriAtomExAcb MoveAcb()
	{
		return null;
	}

	[Token(Token = "0x6000261")]
	[Address(RVA = "0xFAF910", Offset = "0xFAF910", VA = "0xFAF910", Slot = "5")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x6000262")]
	[Address(RVA = "0xFAF984", Offset = "0xFAF984", VA = "0xFAF984")]
	private void Dispose(bool disposing)
	{
	}

	[Token(Token = "0x6000263")]
	[Address(RVA = "0xFAF660", Offset = "0xFAF660", VA = "0xFAF660")]
	private CriAtomExAcbLoader(IntPtr handle, GCHandle? dataHandle)
	{
	}

	[Token(Token = "0x6000264")]
	[Address(RVA = "0xFAFAF4", Offset = "0xFAFAF4", VA = "0xFAFAF4", Slot = "1")]
	~CriAtomExAcbLoader()
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000265")]
	[Address(RVA = "0xFAF4F4", Offset = "0xFAF4F4", VA = "0xFAF4F4")]
	private static extern IntPtr criAtomExAcbLoader_Create([In] ref LoaderConfig config);

	[PreserveSig]
	[Token(Token = "0x6000266")]
	[Address(RVA = "0xFAFA74", Offset = "0xFAFA74", VA = "0xFAFA74")]
	private static extern void criAtomExAcbLoader_Destroy(IntPtr acb_loader);

	[PreserveSig]
	[Token(Token = "0x6000267")]
	[Address(RVA = "0xFAF57C", Offset = "0xFAF57C", VA = "0xFAF57C")]
	private static extern bool criAtomExAcbLoader_LoadAcbFileAsync(IntPtr acb_loader, IntPtr acb_binder, string acb_path, IntPtr awb_binder, string awb_path);

	[PreserveSig]
	[Token(Token = "0x6000268")]
	[Address(RVA = "0xFAF740", Offset = "0xFAF740", VA = "0xFAF740")]
	private static extern bool criAtomExAcbLoader_LoadAcbDataAsync(IntPtr acb_loader, IntPtr acb_data, int acb_size, IntPtr awb_binder, string awb_path);

	[PreserveSig]
	[Token(Token = "0x6000269")]
	[Address(RVA = "0xFAF810", Offset = "0xFAF810", VA = "0xFAF810")]
	private static extern Status criAtomExAcbLoader_GetStatus(IntPtr acb_loader);

	[PreserveSig]
	[Token(Token = "0x600026A")]
	[Address(RVA = "0xFAFB60", Offset = "0xFAFB60", VA = "0xFAFB60")]
	private static extern bool criAtomExAcbLoader_WaitForCompletion(IntPtr acb_loader);

	[PreserveSig]
	[Token(Token = "0x600026B")]
	[Address(RVA = "0xFAF890", Offset = "0xFAF890", VA = "0xFAF890")]
	private static extern IntPtr criAtomExAcbLoader_MoveAcbHandle(IntPtr acb_loader);
}
[Token(Token = "0x2000019")]
public class CriAtomExAcf
{
	[Token(Token = "0x200011C")]
	public struct AcfDspSettingInfo
	{
		[Token(Token = "0x40006DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string name;

		[Token(Token = "0x40006DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ushort[] busIndexes;

		[Token(Token = "0x40006DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ushort[] extendBusIndexes;

		[Token(Token = "0x40006DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ushort snapshotStartIndex;

		[Token(Token = "0x40006DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public byte numBuses;

		[Token(Token = "0x40006E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public byte numExtendBuses;

		[Token(Token = "0x40006E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ushort numSnapshots;

		[Token(Token = "0x40006E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public ushort snapshotWorkSize;

		[Token(Token = "0x40006E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ushort numMixerAisacs;

		[Token(Token = "0x40006E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public ushort mixerAisacStartIndex;

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0x8AAFB8", Offset = "0x8AAFB8", VA = "0x8AAFB8")]
		public AcfDspSettingInfo(byte[] data, int startIndex)
		{
		}
	}

	[Token(Token = "0x200011D")]
	public struct AcfDspSettingSnapshotInfo
	{
		[Token(Token = "0x40006E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string name;

		[Token(Token = "0x40006E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public byte numBuses;

		[Token(Token = "0x40006E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		public byte numExtendBuses;

		[Token(Token = "0x40006E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte[] reserved;

		[Token(Token = "0x40006E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ushort[] busIndexes;

		[Token(Token = "0x40006EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ushort[] extendBusIndexes;

		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0x8AB22C", Offset = "0x8AB22C", VA = "0x8AB22C")]
		public AcfDspSettingSnapshotInfo(byte[] data, int startIndex)
		{
		}
	}

	[Token(Token = "0x200011E")]
	public struct AcfDspBusInfo
	{
		[Token(Token = "0x40006EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string name;

		[Token(Token = "0x40006EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float volume;

		[Token(Token = "0x40006ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float pan3dVolume;

		[Token(Token = "0x40006EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float pan3dAngle;

		[Token(Token = "0x40006EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float pan3dDistance;

		[Token(Token = "0x40006F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float pan3dSpread;

		[Token(Token = "0x40006F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ushort[] fxIndexes;

		[Token(Token = "0x40006F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ushort[] busLinkIndexes;

		[Token(Token = "0x40006F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ushort busNo;

		[Token(Token = "0x40006F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public byte numFxes;

		[Token(Token = "0x40006F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		public byte numBusLinks;

		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0x8AAD70", Offset = "0x8AAD70", VA = "0x8AAD70")]
		public AcfDspBusInfo(byte[] data, int startIndex)
		{
		}
	}

	[Token(Token = "0x200011F")]
	public enum AcfDspBusLinkType : uint
	{
		[Token(Token = "0x40006F7")]
		preVolume,
		[Token(Token = "0x40006F8")]
		postVolume,
		[Token(Token = "0x40006F9")]
		postPan
	}

	[Token(Token = "0x2000120")]
	public struct AcfDspBusLinkInfo
	{
		[Token(Token = "0x40006FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AcfDspBusLinkType type;

		[Token(Token = "0x40006FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float sendLevel;

		[Token(Token = "0x40006FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ushort busNo;

		[Token(Token = "0x40006FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		public ushort busId;

		[Token(Token = "0x6000C8F")]
		[Address(RVA = "0x8AAD78", Offset = "0x8AAD78", VA = "0x8AAD78")]
		public AcfDspBusLinkInfo(byte[] data, int startIndex)
		{
		}
	}

	[Token(Token = "0x2000121")]
	public struct CategoryInfo
	{
		[Token(Token = "0x40006FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint groupNo;

		[Token(Token = "0x40006FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint id;

		[Token(Token = "0x4000700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string name;

		[Token(Token = "0x4000701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint numCueLimits;

		[Token(Token = "0x4000702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float volume;

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0x8AB454", Offset = "0x8AB454", VA = "0x8AB454")]
		public CategoryInfo(byte[] data, int startIndex)
		{
		}
	}

	[Token(Token = "0x2000122")]
	public enum AcfAisacType : uint
	{
		[Token(Token = "0x4000704")]
		normal,
		[Token(Token = "0x4000705")]
		autoModulation
	}

	[Token(Token = "0x2000123")]
	public struct GlobalAisacInfo
	{
		[Token(Token = "0x4000706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string name;

		[Token(Token = "0x4000707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ushort index;

		[Token(Token = "0x4000708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		public ushort numGraphs;

		[Token(Token = "0x4000709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public AcfAisacType type;

		[Token(Token = "0x400070A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float randomRange;

		[Token(Token = "0x400070B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ushort controlId;

		[Token(Token = "0x400070C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
		public ushort dummy;

		[Token(Token = "0x6000C91")]
		[Address(RVA = "0x8AB53C", Offset = "0x8AB53C", VA = "0x8AB53C")]
		public GlobalAisacInfo(byte[] data, int startIndex)
		{
		}
	}

	[Token(Token = "0x2000124")]
	public enum AisacGraphType
	{
		[Token(Token = "0x400070E")]
		none,
		[Token(Token = "0x400070F")]
		volume,
		[Token(Token = "0x4000710")]
		pitch,
		[Token(Token = "0x4000711")]
		bandpassHigh,
		[Token(Token = "0x4000712")]
		bandpassLow,
		[Token(Token = "0x4000713")]
		biquadFreq,
		[Token(Token = "0x4000714")]
		biquadQ,
		[Token(Token = "0x4000715")]
		busSend0,
		[Token(Token = "0x4000716")]
		busSend1,
		[Token(Token = "0x4000717")]
		busSend2,
		[Token(Token = "0x4000718")]
		busSend3,
		[Token(Token = "0x4000719")]
		busSend4,
		[Token(Token = "0x400071A")]
		busSend5,
		[Token(Token = "0x400071B")]
		busSend6,
		[Token(Token = "0x400071C")]
		busSend7,
		[Token(Token = "0x400071D")]
		pan3dAngel,
		[Token(Token = "0x400071E")]
		pan3dVolume,
		[Token(Token = "0x400071F")]
		pan3dInteriorDistance,
		[Token(Token = "0x4000720")]
		pan3dCenter,
		[Token(Token = "0x4000721")]
		pan3dLfe,
		[Token(Token = "0x4000722")]
		aisac0,
		[Token(Token = "0x4000723")]
		aisac1,
		[Token(Token = "0x4000724")]
		aisac2,
		[Token(Token = "0x4000725")]
		aisac3,
		[Token(Token = "0x4000726")]
		aisac4,
		[Token(Token = "0x4000727")]
		aisac5,
		[Token(Token = "0x4000728")]
		aisac6,
		[Token(Token = "0x4000729")]
		aisac7,
		[Token(Token = "0x400072A")]
		aisac8,
		[Token(Token = "0x400072B")]
		aisac9,
		[Token(Token = "0x400072C")]
		aisac10,
		[Token(Token = "0x400072D")]
		aisac11,
		[Token(Token = "0x400072E")]
		aisac12,
		[Token(Token = "0x400072F")]
		aisac13,
		[Token(Token = "0x4000730")]
		aisac14,
		[Token(Token = "0x4000731")]
		aisac15,
		[Token(Token = "0x4000732")]
		priority,
		[Token(Token = "0x4000733")]
		preDelayTime,
		[Token(Token = "0x4000734")]
		biquadGain,
		[Token(Token = "0x4000735")]
		pan3dMixdownCenter,
		[Token(Token = "0x4000736")]
		pan3dMixdownLfe,
		[Token(Token = "0x4000737")]
		egAttack,
		[Token(Token = "0x4000738")]
		egRelease,
		[Token(Token = "0x4000739")]
		playbackRatio,
		[Token(Token = "0x400073A")]
		drySendL,
		[Token(Token = "0x400073B")]
		drySendR,
		[Token(Token = "0x400073C")]
		drySendCenter,
		[Token(Token = "0x400073D")]
		drySendLfe,
		[Token(Token = "0x400073E")]
		drySendSl,
		[Token(Token = "0x400073F")]
		drySendSr,
		[Token(Token = "0x4000740")]
		drySendEx1,
		[Token(Token = "0x4000741")]
		drySendEx2,
		[Token(Token = "0x4000742")]
		panSpread
	}

	[Token(Token = "0x2000125")]
	public struct AisacGraphInfo
	{
		[Token(Token = "0x4000743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AisacGraphType type;

		[Token(Token = "0x6000C92")]
		[Address(RVA = "0x8AB38C", Offset = "0x8AB38C", VA = "0x8AB38C")]
		public AisacGraphInfo(byte[] data, int startIndex)
		{
		}
	}

	[Token(Token = "0x2000126")]
	public enum CharacterEncoding : uint
	{
		[Token(Token = "0x4000745")]
		utf8,
		[Token(Token = "0x4000746")]
		sjis
	}

	[Token(Token = "0x2000127")]
	public struct AcfInfo
	{
		[Token(Token = "0x4000747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string name;

		[Token(Token = "0x4000748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint size;

		[Token(Token = "0x4000749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint version;

		[Token(Token = "0x400074A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CharacterEncoding characterEncoding;

		[Token(Token = "0x400074B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int numDspSettings;

		[Token(Token = "0x400074C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int numCategories;

		[Token(Token = "0x400074D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int numCategoriesPerPlayback;

		[Token(Token = "0x400074E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int numReacts;

		[Token(Token = "0x400074F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int numAisacControls;

		[Token(Token = "0x4000750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int numGlobalAisacs;

		[Token(Token = "0x4000751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int numGameVariables;

		[Token(Token = "0x4000752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int maxBusesOfDspBusSettings;

		[Token(Token = "0x4000753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int numBuses;

		[Token(Token = "0x4000754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int numVoiceLimitGroups;

		[Token(Token = "0x6000C93")]
		[Address(RVA = "0x8AB384", Offset = "0x8AB384", VA = "0x8AB384")]
		public AcfInfo(byte[] data, int startIndex)
		{
		}
	}

	[Token(Token = "0x2000128")]
	public struct SelectorInfo
	{
		[Token(Token = "0x4000755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string name;

		[Token(Token = "0x4000756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ushort index;

		[Token(Token = "0x4000757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		public ushort numLabels;

		[Token(Token = "0x4000758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ushort globalLabelIndex;

		[Token(Token = "0x6000C94")]
		[Address(RVA = "0x8AB5F4", Offset = "0x8AB5F4", VA = "0x8AB5F4")]
		public SelectorInfo(byte[] data, int startIndex)
		{
		}
	}

	[Token(Token = "0x2000129")]
	public struct SelectorLabelInfo
	{
		[Token(Token = "0x4000759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string selectorName;

		[Token(Token = "0x400075A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string labelName;

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0x8AB6A0", Offset = "0x8AB6A0", VA = "0x8AB6A0")]
		public SelectorLabelInfo(byte[] data, int startIndex)
		{
		}
	}

	[Token(Token = "0x600026C")]
	[Address(RVA = "0xFAFBE8", Offset = "0xFAFBE8", VA = "0xFAFBE8")]
	public static int GetNumAisacControls()
	{
		return default(int);
	}

	[Token(Token = "0x600026D")]
	[Address(RVA = "0xFAFC60", Offset = "0xFAFC60", VA = "0xFAFC60")]
	public static bool GetAisacControlInfo(ushort index, out CriAtomEx.AisacControlInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x600026E")]
	[Address(RVA = "0xFAFE80", Offset = "0xFAFE80", VA = "0xFAFE80")]
	public static int GetNumDspSettings()
	{
		return default(int);
	}

	[Token(Token = "0x600026F")]
	[Address(RVA = "0xFAFEF8", Offset = "0xFAFEF8", VA = "0xFAFEF8")]
	public static bool GetDspSettingInformation(string name, out AcfDspSettingInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x6000270")]
	[Address(RVA = "0xFB05C4", Offset = "0xFB05C4", VA = "0xFB05C4")]
	public static bool GetDspSettingSnapshotInformation(ushort index, out AcfDspSettingSnapshotInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x6000271")]
	[Address(RVA = "0xFB0CA0", Offset = "0xFB0CA0", VA = "0xFB0CA0")]
	public static bool GetDspBusInformation(ushort index, out AcfDspBusInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x6000272")]
	[Address(RVA = "0xFB13B4", Offset = "0xFB13B4", VA = "0xFB13B4")]
	public static bool GetDspBusLinkInformation(ushort index, out AcfDspBusLinkInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x6000273")]
	[Address(RVA = "0xFB1754", Offset = "0xFB1754", VA = "0xFB1754")]
	public static int GetNumCategories()
	{
		return default(int);
	}

	[Token(Token = "0x6000274")]
	[Address(RVA = "0xFB17CC", Offset = "0xFB17CC", VA = "0xFB17CC")]
	public static int GetNumCategoriesPerPlayback()
	{
		return default(int);
	}

	[Token(Token = "0x6000275")]
	[Address(RVA = "0xFB1844", Offset = "0xFB1844", VA = "0xFB1844")]
	public static bool GetCategoryInfoByIndex(ushort index, out CategoryInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x6000276")]
	[Address(RVA = "0xFB1C64", Offset = "0xFB1C64", VA = "0xFB1C64")]
	public static bool GetCategoryInfoByName(string name, out CategoryInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x6000277")]
	[Address(RVA = "0xFB1EA4", Offset = "0xFB1EA4", VA = "0xFB1EA4")]
	public static bool GetCategoryInfoById(uint id, out CategoryInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x6000278")]
	[Address(RVA = "0xFB20D0", Offset = "0xFB20D0", VA = "0xFB20D0")]
	public static int GetNumGlobalAisacs()
	{
		return default(int);
	}

	[Token(Token = "0x6000279")]
	[Address(RVA = "0xFB2148", Offset = "0xFB2148", VA = "0xFB2148")]
	public static bool GetGlobalAisacInfoByIndex(ushort index, out GlobalAisacInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x600027A")]
	[Address(RVA = "0xFB26E8", Offset = "0xFB26E8", VA = "0xFB26E8")]
	public static bool GetGlobalAisacInfoByName(string name, out GlobalAisacInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x600027B")]
	[Address(RVA = "0xFB2928", Offset = "0xFB2928", VA = "0xFB2928")]
	public static bool GetGlobalAisacGraphInfo(GlobalAisacInfo aisacInfo, ushort graphIndex, out AisacGraphInfo graphInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x600027C")]
	[Address(RVA = "0xFB2D64", Offset = "0xFB2D64", VA = "0xFB2D64")]
	public static bool GetGlobalAisacValue(GlobalAisacInfo aisacInfo, float control, AisacGraphType type, out float value)
	{
		return default(bool);
	}

	[Token(Token = "0x600027D")]
	[Address(RVA = "0xFB2F50", Offset = "0xFB2F50", VA = "0xFB2F50")]
	public static bool GetAcfInfo(out AcfInfo acfInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x600027E")]
	[Address(RVA = "0xFB35F0", Offset = "0xFB35F0", VA = "0xFB35F0")]
	public static int GetNumSelectors()
	{
		return default(int);
	}

	[Token(Token = "0x600027F")]
	[Address(RVA = "0xFB3668", Offset = "0xFB3668", VA = "0xFB3668")]
	public static bool GetSelectorInfoByIndex(ushort index, out SelectorInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x6000280")]
	[Address(RVA = "0xFB3A3C", Offset = "0xFB3A3C", VA = "0xFB3A3C")]
	public static bool GetSelectorInfoByName(string name, out SelectorInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x6000281")]
	[Address(RVA = "0xFB3C70", Offset = "0xFB3C70", VA = "0xFB3C70")]
	public static bool GetSelectorLabelInfo(SelectorInfo selectorInfo, ushort labelIndex, out SelectorLabelInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x6000282")]
	[Address(RVA = "0xFB410C", Offset = "0xFB410C", VA = "0xFB410C")]
	public static int GetNumBuses()
	{
		return default(int);
	}

	[Token(Token = "0x6000283")]
	[Address(RVA = "0xFB4184", Offset = "0xFB4184", VA = "0xFB4184")]
	public static int GetMaxBusesOfDspBusSettings()
	{
		return default(int);
	}

	[Token(Token = "0x6000284")]
	[Address(RVA = "0xFB41FC", Offset = "0xFB41FC", VA = "0xFB41FC")]
	public static string FindBusName(string busName)
	{
		return null;
	}

	[PreserveSig]
	[Token(Token = "0x6000285")]
	[Address(RVA = "0xFAFBEC", Offset = "0xFAFBEC", VA = "0xFAFBEC")]
	private static extern int criAtomExAcf_GetNumAisacControls();

	[PreserveSig]
	[Token(Token = "0x6000286")]
	[Address(RVA = "0xFAFDE8", Offset = "0xFAFDE8", VA = "0xFAFDE8")]
	private static extern bool criAtomExAcf_GetAisacControlInfo(ushort index, IntPtr info);

	[PreserveSig]
	[Token(Token = "0x6000287")]
	[Address(RVA = "0xFB42B0", Offset = "0xFB42B0", VA = "0xFB42B0")]
	private static extern uint criAtomExAcf_GetAisacControlIdByName(string name);

	[PreserveSig]
	[Token(Token = "0x6000288")]
	[Address(RVA = "0xFB4348", Offset = "0xFB4348", VA = "0xFB4348")]
	private static extern string criAtomExAcf_GetAisacControlNameById(uint id);

	[PreserveSig]
	[Token(Token = "0x6000289")]
	[Address(RVA = "0xFAFE84", Offset = "0xFAFE84", VA = "0xFAFE84")]
	private static extern int criAtomExAcf_GetNumDspSettings();

	[PreserveSig]
	[Token(Token = "0x600028A")]
	[Address(RVA = "0xFB43E0", Offset = "0xFB43E0", VA = "0xFB43E0")]
	private static extern int criAtomExAcf_GetNumDspSettingsFromAcfData(IntPtr acf_data, int acf_data_size);

	[PreserveSig]
	[Token(Token = "0x600028B")]
	[Address(RVA = "0xFB4470", Offset = "0xFB4470", VA = "0xFB4470")]
	private static extern string criAtomExAcf_GetDspSettingNameByIndex(ushort index);

	[PreserveSig]
	[Token(Token = "0x600028C")]
	[Address(RVA = "0xFB4508", Offset = "0xFB4508", VA = "0xFB4508")]
	private static extern string criAtomExAcf_GetDspSettingNameByIndexFromAcfData(IntPtr acf_data, int acf_data_size, ushort index);

	[PreserveSig]
	[Token(Token = "0x600028D")]
	[Address(RVA = "0xFB0098", Offset = "0xFB0098", VA = "0xFB0098")]
	private static extern bool criAtomExAcf_GetDspSettingInformation(string name, IntPtr info);

	[PreserveSig]
	[Token(Token = "0x600028E")]
	[Address(RVA = "0xFB0764", Offset = "0xFB0764", VA = "0xFB0764")]
	private static extern bool criAtomExAcf_GetDspSettingSnapshotInformation(ushort index, IntPtr info);

	[PreserveSig]
	[Token(Token = "0x600028F")]
	[Address(RVA = "0xFB0E4C", Offset = "0xFB0E4C", VA = "0xFB0E4C")]
	private static extern bool criAtomExAcf_GetDspBusInformation(ushort index, IntPtr info);

	[PreserveSig]
	[Token(Token = "0x6000290")]
	[Address(RVA = "0xFB45B8", Offset = "0xFB45B8", VA = "0xFB45B8")]
	private static extern int criAtomExAcf_GetDspFxType(ushort index);

	[PreserveSig]
	[Token(Token = "0x6000291")]
	[Address(RVA = "0xFB4638", Offset = "0xFB4638", VA = "0xFB4638")]
	private static extern string criAtomExAcf_GetDspFxName(ushort index);

	[PreserveSig]
	[Token(Token = "0x6000292")]
	[Address(RVA = "0xFB46D0", Offset = "0xFB46D0", VA = "0xFB46D0")]
	private static extern bool criAtomExAcf_GetDspFxParameters(ushort index, IntPtr parameters, int size);

	[PreserveSig]
	[Token(Token = "0x6000293")]
	[Address(RVA = "0xFB1548", Offset = "0xFB1548", VA = "0xFB1548")]
	private static extern bool criAtomExAcf_GetDspBusLinkInformation(ushort index, IntPtr info);

	[PreserveSig]
	[Token(Token = "0x6000294")]
	[Address(RVA = "0xFB4770", Offset = "0xFB4770", VA = "0xFB4770")]
	private static extern int criAtomExAcf_GetNumCategoriesFromAcfData(IntPtr acf_data, int acf_data_size);

	[PreserveSig]
	[Token(Token = "0x6000295")]
	[Address(RVA = "0xFB1758", Offset = "0xFB1758", VA = "0xFB1758")]
	private static extern int criAtomExAcf_GetNumCategories();

	[PreserveSig]
	[Token(Token = "0x6000296")]
	[Address(RVA = "0xFB4800", Offset = "0xFB4800", VA = "0xFB4800")]
	private static extern int criAtomExAcf_GetNumCategoriesPerPlaybackFromAcfData(IntPtr acf_data, int acf_data_size);

	[PreserveSig]
	[Token(Token = "0x6000297")]
	[Address(RVA = "0xFB17D0", Offset = "0xFB17D0", VA = "0xFB17D0")]
	private static extern int criAtomExAcf_GetNumCategoriesPerPlayback();

	[PreserveSig]
	[Token(Token = "0x6000298")]
	[Address(RVA = "0xFB19D8", Offset = "0xFB19D8", VA = "0xFB19D8")]
	private static extern bool criAtomExAcf_GetCategoryInfo(ushort index, IntPtr info);

	[PreserveSig]
	[Token(Token = "0x6000299")]
	[Address(RVA = "0xFB1DF8", Offset = "0xFB1DF8", VA = "0xFB1DF8")]
	private static extern bool criAtomExAcf_GetCategoryInfoByName(string name, IntPtr info);

	[PreserveSig]
	[Token(Token = "0x600029A")]
	[Address(RVA = "0xFB2038", Offset = "0xFB2038", VA = "0xFB2038")]
	private static extern bool criAtomExAcf_GetCategoryInfoById(uint id, IntPtr info);

	[PreserveSig]
	[Token(Token = "0x600029B")]
	[Address(RVA = "0xFB20D4", Offset = "0xFB20D4", VA = "0xFB20D4")]
	private static extern int criAtomExAcf_GetNumGlobalAisacs();

	[PreserveSig]
	[Token(Token = "0x600029C")]
	[Address(RVA = "0xFB22DC", Offset = "0xFB22DC", VA = "0xFB22DC")]
	private static extern bool criAtomExAcf_GetGlobalAisacInfo(ushort index, IntPtr info);

	[PreserveSig]
	[Token(Token = "0x600029D")]
	[Address(RVA = "0xFB287C", Offset = "0xFB287C", VA = "0xFB287C")]
	private static extern bool criAtomExAcf_GetGlobalAisacInfoByName(string name, IntPtr info);

	[PreserveSig]
	[Token(Token = "0x600029E")]
	[Address(RVA = "0xFB2B94", Offset = "0xFB2B94", VA = "0xFB2B94")]
	private static extern bool criAtomExAcf_GetGlobalAisacGraphInfo(IntPtr aisac_info, ushort graph_index, IntPtr graph_info);

	[PreserveSig]
	[Token(Token = "0x600029F")]
	[Address(RVA = "0xFB2EA0", Offset = "0xFB2EA0", VA = "0xFB2EA0")]
	private static extern bool criAtomExAcf_GetGlobalAisacValue(IntPtr aisac_info, float control, AisacGraphType type, out float value);

	[PreserveSig]
	[Token(Token = "0x60002A0")]
	[Address(RVA = "0xFB30DC", Offset = "0xFB30DC", VA = "0xFB30DC")]
	private static extern bool criAtomExAcf_GetAcfInfo(IntPtr acf_info);

	[PreserveSig]
	[Token(Token = "0x60002A1")]
	[Address(RVA = "0xFB4890", Offset = "0xFB4890", VA = "0xFB4890")]
	private static extern bool criAtomExAcf_GetAcfInfoFromAcfData(IntPtr acf_data, int acf_data_size, IntPtr acf_info);

	[PreserveSig]
	[Token(Token = "0x60002A2")]
	[Address(RVA = "0xFB35F4", Offset = "0xFB35F4", VA = "0xFB35F4")]
	private static extern int criAtomExAcf_GetNumSelectors();

	[PreserveSig]
	[Token(Token = "0x60002A3")]
	[Address(RVA = "0xFB37F0", Offset = "0xFB37F0", VA = "0xFB37F0")]
	private static extern bool criAtomExAcf_GetSelectorInfoByIndex(ushort index, IntPtr info);

	[PreserveSig]
	[Token(Token = "0x60002A4")]
	[Address(RVA = "0xFB3BC4", Offset = "0xFB3BC4", VA = "0xFB3BC4")]
	private static extern bool criAtomExAcf_GetSelectorInfoByName(string name, IntPtr info);

	[PreserveSig]
	[Token(Token = "0x60002A5")]
	[Address(RVA = "0xFB3EC8", Offset = "0xFB3EC8", VA = "0xFB3EC8")]
	private static extern bool criAtomExAcf_GetSelectorLabelInfo(IntPtr selector_info, ushort label_index, IntPtr info);

	[PreserveSig]
	[Token(Token = "0x60002A6")]
	[Address(RVA = "0xFB4930", Offset = "0xFB4930", VA = "0xFB4930")]
	private static extern int criAtomExAcf_GetNumBusesFromAcfData(IntPtr acf_data, int acf_data_size);

	[PreserveSig]
	[Token(Token = "0x60002A7")]
	[Address(RVA = "0xFB4110", Offset = "0xFB4110", VA = "0xFB4110")]
	private static extern int criAtomExAcf_GetNumBuses();

	[PreserveSig]
	[Token(Token = "0x60002A8")]
	[Address(RVA = "0xFB49C0", Offset = "0xFB49C0", VA = "0xFB49C0")]
	private static extern int criAtomExAcf_GetMaxBusesOfDspBusSettingsFromAcfData(IntPtr acf_data, int acf_data_size);

	[PreserveSig]
	[Token(Token = "0x60002A9")]
	[Address(RVA = "0xFB4188", Offset = "0xFB4188", VA = "0xFB4188")]
	private static extern int criAtomExAcf_GetMaxBusesOfDspBusSettings();

	[PreserveSig]
	[Token(Token = "0x60002AA")]
	[Address(RVA = "0xFB4200", Offset = "0xFB4200", VA = "0xFB4200")]
	private static extern string criAtomExAcf_FindBusName(string bus_name);

	[Token(Token = "0x60002AB")]
	[Address(RVA = "0xFB4A50", Offset = "0xFB4A50", VA = "0xFB4A50")]
	public CriAtomExAcf()
	{
	}
}
[Token(Token = "0x200001A")]
public class CriAtomExAsrRack : CriDisposable
{
	[Token(Token = "0x200012A")]
	public struct Config
	{
		[Token(Token = "0x400075B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float serverFrequency;

		[Token(Token = "0x400075C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int numBuses;

		[Token(Token = "0x400075D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int outputChannels;

		[Token(Token = "0x400075E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int outputSamplingRate;

		[Token(Token = "0x400075F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CriAtomEx.SoundRendererType soundRendererType;

		[Token(Token = "0x4000760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int outputRackId;

		[Token(Token = "0x4000761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IntPtr context;
	}

	[Token(Token = "0x200012B")]
	public struct PlatformConfig
	{
		[Token(Token = "0x4000762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte reserved;
	}

	[Token(Token = "0x200012C")]
	public struct PerformanceInfo
	{
		[Token(Token = "0x4000763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint processCount;

		[Token(Token = "0x4000764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint lastProcessTime;

		[Token(Token = "0x4000765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint maxProcessTime;

		[Token(Token = "0x4000766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint averageProcessTime;

		[Token(Token = "0x4000767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint lastProcessInterval;

		[Token(Token = "0x4000768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint maxProcessInterval;

		[Token(Token = "0x4000769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint averageProcessInterval;

		[Token(Token = "0x400076A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint lastProcessSamples;

		[Token(Token = "0x400076B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint maxProcessSamples;

		[Token(Token = "0x400076C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint averageProcessSamples;
	}

	[Token(Token = "0x4000071")]
	public const int defaultRackId = 0;

	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int _rackId;

	[Token(Token = "0x17000031")]
	public int rackId
	{
		[Token(Token = "0x60002B3")]
		[Address(RVA = "0xF5BE30", Offset = "0xF5BE30", VA = "0xF5BE30")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000032")]
	public static Config defaultConfig
	{
		[Token(Token = "0x60002B4")]
		[Address(RVA = "0xF5BE38", Offset = "0xF5BE38", VA = "0xF5BE38")]
		get
		{
			return default(Config);
		}
	}

	[Token(Token = "0x60002AC")]
	[Address(RVA = "0xF5B808", Offset = "0xF5B808", VA = "0xF5B808")]
	public CriAtomExAsrRack(Config config, PlatformConfig platformConfig)
	{
	}

	[Token(Token = "0x60002AD")]
	[Address(RVA = "0xF5B9C8", Offset = "0xF5B9C8", VA = "0xF5B9C8")]
	public static string GetAppliedDspBusSnapshotName(int rackId)
	{
		return null;
	}

	[Token(Token = "0x60002AE")]
	[Address(RVA = "0xF5BADC", Offset = "0xF5BADC", VA = "0xF5BADC")]
	public PerformanceInfo GetPerformanceInfo()
	{
		return default(PerformanceInfo);
	}

	[Token(Token = "0x60002AF")]
	[Address(RVA = "0xF5BC2C", Offset = "0xF5BC2C", VA = "0xF5BC2C")]
	public static PerformanceInfo GetPerformanceInfoByRackId(int rackId = 0)
	{
		return default(PerformanceInfo);
	}

	[Token(Token = "0x60002B0")]
	[Address(RVA = "0xF5BC78", Offset = "0xF5BC78", VA = "0xF5BC78")]
	public void ResetPerformanceMonitor()
	{
	}

	[Token(Token = "0x60002B1")]
	[Address(RVA = "0xF5BD00", Offset = "0xF5BD00", VA = "0xF5BD00")]
	public static void ResetPerformanceMonitorByRackId(int rackId = 0)
	{
	}

	[Token(Token = "0x60002B2")]
	[Address(RVA = "0xF5BD04", Offset = "0xF5BD04", VA = "0xF5BD04", Slot = "5")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x60002B5")]
	[Address(RVA = "0xF5BE94", Offset = "0xF5BE94", VA = "0xF5BE94", Slot = "1")]
	~CriAtomExAsrRack()
	{
	}

	[PreserveSig]
	[Token(Token = "0x60002B6")]
	[Address(RVA = "0xF5B938", Offset = "0xF5B938", VA = "0xF5B938")]
	private static extern int CRIWAREE210EEA8([In] ref Config config, [In] ref PlatformConfig platformConfig);

	[PreserveSig]
	[Token(Token = "0x60002B7")]
	[Address(RVA = "0xF5BDB0", Offset = "0xF5BDB0", VA = "0xF5BDB0")]
	private static extern void criAtomExAsrRack_Destroy(int rackId);

	[PreserveSig]
	[Token(Token = "0x60002B8")]
	[Address(RVA = "0xF5BF04", Offset = "0xF5BF04", VA = "0xF5BF04")]
	private static extern void criAtomExAsrRack_AttachDspBusSetting(int rackId, string setting, IntPtr work, int workSize);

	[PreserveSig]
	[Token(Token = "0x60002B9")]
	[Address(RVA = "0xF5BFC0", Offset = "0xF5BFC0", VA = "0xF5BFC0")]
	private static extern void criAtomExAsrRack_DetachDspBusSetting(int rackId);

	[PreserveSig]
	[Token(Token = "0x60002BA")]
	[Address(RVA = "0xF5BA5C", Offset = "0xF5BA5C", VA = "0xF5BA5C")]
	private static extern IntPtr criAtomExAsrRack_GetAppliedDspBusSnapshotName(int rackId);

	[PreserveSig]
	[Token(Token = "0x60002BB")]
	[Address(RVA = "0xF5C040", Offset = "0xF5C040", VA = "0xF5C040")]
	private static extern void criAtomExAsrRack_ApplyDspBusSnapshot(int rackId, string snapshotName, int timeMs);

	[PreserveSig]
	[Token(Token = "0x60002BC")]
	[Address(RVA = "0xF5BB9C", Offset = "0xF5BB9C", VA = "0xF5BB9C")]
	private static extern void criAtomExAsrRack_GetPerformanceInfo(int rackId, out PerformanceInfo perfInfo);

	[PreserveSig]
	[Token(Token = "0x60002BD")]
	[Address(RVA = "0xF5BC80", Offset = "0xF5BC80", VA = "0xF5BC80")]
	private static extern void criAtomExAsrRack_ResetPerformanceMonitor(int rackId);
}
[Token(Token = "0x200001B")]
public class CriAtomExAuxIn : CriDisposable
{
	[Token(Token = "0x200012D")]
	public struct Config
	{
		[Token(Token = "0x400076D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int maxChannels;

		[Token(Token = "0x400076E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int maxSamplingRate;

		[Token(Token = "0x400076F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CriAtomEx.SoundRendererType soundRendererType;

		[Token(Token = "0x170000FB")]
		public static Config Default
		{
			[Token(Token = "0x6000C96")]
			[Address(RVA = "0xF5C1D4", Offset = "0xF5C1D4", VA = "0xF5C1D4")]
			get
			{
				return default(Config);
			}
		}
	}

	[Token(Token = "0x4000073")]
	private const string errorInvalidHandle = "[CRIWARE] Invalid native handle of CriAtomExAuxIn.";

	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private IntPtr handle;

	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private CriAudioReadStream inputReadStream;

	[Token(Token = "0x60002BE")]
	[Address(RVA = "0xF5C0EC", Offset = "0xF5C0EC", VA = "0xF5C0EC")]
	public CriAtomExAuxIn([Optional] Config? config)
	{
	}

	[Token(Token = "0x60002BF")]
	[Address(RVA = "0xF5C27C", Offset = "0xF5C27C", VA = "0xF5C27C", Slot = "5")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x60002C0")]
	[Address(RVA = "0xF5C3B0", Offset = "0xF5C3B0", VA = "0xF5C3B0")]
	public void Start()
	{
	}

	[Token(Token = "0x60002C1")]
	[Address(RVA = "0xF5C438", Offset = "0xF5C438", VA = "0xF5C438")]
	public void Stop()
	{
	}

	[Token(Token = "0x60002C2")]
	[Address(RVA = "0xF5C4C0", Offset = "0xF5C4C0", VA = "0xF5C4C0")]
	public void SetFormat(int numChannels, int samplingRate)
	{
	}

	[Token(Token = "0x60002C3")]
	[Address(RVA = "0xF5C560", Offset = "0xF5C560", VA = "0xF5C560")]
	public void GetFormat(out int numChannels, out int samplingRate)
	{
	}

	[Token(Token = "0x60002C4")]
	[Address(RVA = "0xF5C600", Offset = "0xF5C600", VA = "0xF5C600")]
	public void SetVolume(float volume)
	{
	}

	[Token(Token = "0x60002C5")]
	[Address(RVA = "0xF5C698", Offset = "0xF5C698", VA = "0xF5C698")]
	public void SetFrequencyRatio(float frequencyRatio)
	{
	}

	[Token(Token = "0x60002C6")]
	[Address(RVA = "0xF5C730", Offset = "0xF5C730", VA = "0xF5C730")]
	public void SetBusSendLevel(string busName, float level)
	{
	}

	[Token(Token = "0x60002C7")]
	[Address(RVA = "0xF5C7EC", Offset = "0xF5C7EC", VA = "0xF5C7EC")]
	public void SetInputReadStream(CriAudioReadStream stream)
	{
	}

	[PreserveSig]
	[Token(Token = "0x60002C8")]
	[Address(RVA = "0xF5C1E4", Offset = "0xF5C1E4", VA = "0xF5C1E4")]
	private static extern IntPtr criAtomAuxIn_Create([In] ref Config config, IntPtr work, int work_size);

	[PreserveSig]
	[Token(Token = "0x60002C9")]
	[Address(RVA = "0xF5C330", Offset = "0xF5C330", VA = "0xF5C330")]
	private static extern void criAtomAuxIn_Destroy(IntPtr aux_in);

	[PreserveSig]
	[Token(Token = "0x60002CA")]
	[Address(RVA = "0xF5C3B8", Offset = "0xF5C3B8", VA = "0xF5C3B8")]
	private static extern void criAtomAuxIn_Start(IntPtr aux_in);

	[PreserveSig]
	[Token(Token = "0x60002CB")]
	[Address(RVA = "0xF5C440", Offset = "0xF5C440", VA = "0xF5C440")]
	private static extern void criAtomAuxIn_Stop(IntPtr aux_in);

	[PreserveSig]
	[Token(Token = "0x60002CC")]
	[Address(RVA = "0xF5C608", Offset = "0xF5C608", VA = "0xF5C608")]
	private static extern void criAtomAuxIn_SetVolume(IntPtr aux_in, float volume);

	[PreserveSig]
	[Token(Token = "0x60002CD")]
	[Address(RVA = "0xF5C6A0", Offset = "0xF5C6A0", VA = "0xF5C6A0")]
	private static extern void criAtomAuxIn_SetFrequencyRatio(IntPtr aux_in, float ratio);

	[PreserveSig]
	[Token(Token = "0x60002CE")]
	[Address(RVA = "0xF5C738", Offset = "0xF5C738", VA = "0xF5C738")]
	private static extern void criAtomAuxIn_SetBusSendLevelByName(IntPtr aux_in, string bus_name, float level);

	[PreserveSig]
	[Token(Token = "0x60002CF")]
	[Address(RVA = "0xF5C4C8", Offset = "0xF5C4C8", VA = "0xF5C4C8")]
	private static extern void criAtomAuxIn_SetFormat(IntPtr aux_in, int num_channels, int sampling_rate);

	[PreserveSig]
	[Token(Token = "0x60002D0")]
	[Address(RVA = "0xF5C568", Offset = "0xF5C568", VA = "0xF5C568")]
	private static extern void criAtomAuxIn_GetFormat(IntPtr aux_in, out int num_channels, out int sampling_rate);

	[PreserveSig]
	[Token(Token = "0x60002D1")]
	[Address(RVA = "0xF5C810", Offset = "0xF5C810", VA = "0xF5C810")]
	private static extern void criAtomAuxIn_SetInputReadStream(IntPtr aux_in, IntPtr stream_cbfunc, IntPtr stream_ptr);
}
[Token(Token = "0x200001C")]
public class CriAtomExMic : CriDisposable
{
	[Token(Token = "0x200012E")]
	public struct DeviceInfo
	{
		[Token(Token = "0x4000770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string deviceId;

		[Token(Token = "0x4000771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string deviceName;

		[Token(Token = "0x4000772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint deviceFlags;

		[Token(Token = "0x4000773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int maxChannels;

		[Token(Token = "0x4000774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int maxSamplingRate;
	}

	[Token(Token = "0x200012F")]
	public struct Config
	{
		[Token(Token = "0x4000775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string deviceId;

		[Token(Token = "0x4000776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint flags;

		[Token(Token = "0x4000777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int numChannels;

		[Token(Token = "0x4000778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int samplingRate;

		[Token(Token = "0x4000779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint frameSize;

		[Token(Token = "0x400077A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint bufferingTime;

		[Token(Token = "0x400077B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IntPtr context;

		[Token(Token = "0x170000FC")]
		public static Config Default
		{
			[Token(Token = "0x6000C97")]
			[Address(RVA = "0xF5EF8C", Offset = "0xF5EF8C", VA = "0xF5EF8C")]
			get
			{
				return default(Config);
			}
		}
	}

	[Token(Token = "0x2000130")]
	public class Effect
	{
		[Token(Token = "0x400077C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8FD4", Offset = "0x9A8FD4")]
		private IntPtr <handle>k__BackingField;

		[Token(Token = "0x400077D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8FE4", Offset = "0x9A8FE4")]
		private IntPtr <afxInstance>k__BackingField;

		[Token(Token = "0x170000FD")]
		public IntPtr handle
		{
			[Token(Token = "0x6000C98")]
			[Address(RVA = "0xF609B8", Offset = "0xF609B8", VA = "0xF609B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF66C", Offset = "0x9AF66C")]
			get
			{
				return default(IntPtr);
			}
			[Token(Token = "0x6000C99")]
			[Address(RVA = "0xF609C0", Offset = "0xF609C0", VA = "0xF609C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF67C", Offset = "0x9AF67C")]
			private set
			{
			}
		}

		[Token(Token = "0x170000FE")]
		public IntPtr afxInstance
		{
			[Token(Token = "0x6000C9A")]
			[Address(RVA = "0xF609C8", Offset = "0xF609C8", VA = "0xF609C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF68C", Offset = "0x9AF68C")]
			get
			{
				return default(IntPtr);
			}
			[Token(Token = "0x6000C9B")]
			[Address(RVA = "0xF609D0", Offset = "0xF609D0", VA = "0xF609D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF69C", Offset = "0x9AF69C")]
			private set
			{
			}
		}

		[Token(Token = "0x6000C9C")]
		[Address(RVA = "0xF60278", Offset = "0xF60278", VA = "0xF60278")]
		public Effect(IntPtr handle, IntPtr afxInstance)
		{
		}
	}

	[Token(Token = "0x4000076")]
	private const string errorInvalidHandle = "[CRIWARE] Invalid native handle of CriAtomMic.";

	[Token(Token = "0x4000077")]
	private const string errorInvalidBufferLength = "[CRIWARE] Invalid buffer length for CriAtomMic.ReadData.";

	[Token(Token = "0x4000078")]
	private const string errorInvalidNumBuffers = "[CRIWARE] Number of buffers are not same with channels of CriAtomMic.";

	[Token(Token = "0x4000079")]
	private const string errorAlreadyInitialized = "[CRIWARE] CriAtomMic module is already initialized.";

	[Token(Token = "0x400007A")]
	private const string errorNotInitialized = "[CRIWARE] CriAtomMic module is not initialized.";

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A51E4", Offset = "0x9A51E4")]
	private static bool <isInitialized>k__BackingField;

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private IntPtr handle;

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IntPtr[] bufferPointers;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GCHandle[] gcHandles;

	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private CriAudioWriteStream outputWriteStream;

	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static int _initializationCount;

	[Token(Token = "0x17000033")]
	public static bool isInitialized
	{
		[Token(Token = "0x60002D2")]
		[Address(RVA = "0xF5E1B0", Offset = "0xF5E1B0", VA = "0xF5E1B0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ACD18", Offset = "0x9ACD18")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60002D3")]
		[Address(RVA = "0xF5E218", Offset = "0xF5E218", VA = "0xF5E218")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ACD28", Offset = "0x9ACD28")]
		private set
		{
		}
	}

	[Token(Token = "0x60002D4")]
	[Address(RVA = "0xF5E288", Offset = "0xF5E288", VA = "0xF5E288")]
	public static void InitializeModule()
	{
	}

	[Token(Token = "0x60002D5")]
	[Address(RVA = "0xF5E47C", Offset = "0xF5E47C", VA = "0xF5E47C")]
	public static void FinalizeModule()
	{
	}

	[Token(Token = "0x60002D6")]
	[Address(RVA = "0xF5E6E8", Offset = "0xF5E6E8", VA = "0xF5E6E8")]
	public static DeviceInfo[] GetDevices()
	{
		return null;
	}

	[Token(Token = "0x60002D7")]
	[Address(RVA = "0xF5E9D4", Offset = "0xF5E9D4", VA = "0xF5E9D4")]
	public static int GetNumDevices()
	{
		return default(int);
	}

	[Token(Token = "0x60002D8")]
	[Address(RVA = "0xF5EA30", Offset = "0xF5EA30", VA = "0xF5EA30")]
	public static DeviceInfo? GetDefaultDevice()
	{
		return null;
	}

	[Token(Token = "0x60002D9")]
	[Address(RVA = "0xF5EC64", Offset = "0xF5EC64", VA = "0xF5EC64")]
	public static bool IsFormatSupported(Config config)
	{
		return default(bool);
	}

	[Token(Token = "0x60002DA")]
	[Address(RVA = "0xF5ED7C", Offset = "0xF5ED7C", VA = "0xF5ED7C")]
	public static CriAtomExMic Create([Optional] Config? config)
	{
		return null;
	}

	[Token(Token = "0x60002DB")]
	[Address(RVA = "0xF5F074", Offset = "0xF5F074", VA = "0xF5F074")]
	private CriAtomExMic(IntPtr handle)
	{
	}

	[Token(Token = "0x60002DC")]
	[Address(RVA = "0xF5F1A8", Offset = "0xF5F1A8", VA = "0xF5F1A8", Slot = "5")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x60002DD")]
	[Address(RVA = "0xF5F21C", Offset = "0xF5F21C", VA = "0xF5F21C")]
	private void Dispose(bool disposing)
	{
	}

	[Token(Token = "0x60002DE")]
	[Address(RVA = "0xF5F34C", Offset = "0xF5F34C", VA = "0xF5F34C")]
	public void Start()
	{
	}

	[Token(Token = "0x60002DF")]
	[Address(RVA = "0xF5F434", Offset = "0xF5F434", VA = "0xF5F434")]
	public void Stop()
	{
	}

	[Token(Token = "0x60002E0")]
	[Address(RVA = "0xF5F140", Offset = "0xF5F140", VA = "0xF5F140")]
	public int GetNumChannels()
	{
		return default(int);
	}

	[Token(Token = "0x60002E1")]
	[Address(RVA = "0xF5F59C", Offset = "0xF5F59C", VA = "0xF5F59C")]
	public int GetSamplingRate()
	{
		return default(int);
	}

	[Token(Token = "0x60002E2")]
	[Address(RVA = "0xF5F684", Offset = "0xF5F684", VA = "0xF5F684")]
	public uint GetNumBufferredSamples()
	{
		return default(uint);
	}

	[Token(Token = "0x60002E3")]
	[Address(RVA = "0xF5F76C", Offset = "0xF5F76C", VA = "0xF5F76C")]
	public bool IsAvailable()
	{
		return default(bool);
	}

	[Token(Token = "0x60002E4")]
	[Address(RVA = "0xF5F880", Offset = "0xF5F880", VA = "0xF5F880")]
	public uint ReadData(float[] bufferMono)
	{
		return default(uint);
	}

	[Token(Token = "0x60002E5")]
	[Address(RVA = "0xF5F898", Offset = "0xF5F898", VA = "0xF5F898")]
	public uint ReadData(float[] bufferMono, uint numToRead)
	{
		return default(uint);
	}

	[Token(Token = "0x60002E6")]
	[Address(RVA = "0xF5FA94", Offset = "0xF5FA94", VA = "0xF5FA94")]
	public uint ReadData(float[] bufferL, float[] bufferR)
	{
		return default(uint);
	}

	[Token(Token = "0x60002E7")]
	[Address(RVA = "0xF5FAAC", Offset = "0xF5FAAC", VA = "0xF5FAAC")]
	public uint ReadData(float[] bufferL, float[] bufferR, uint numToRead)
	{
		return default(uint);
	}

	[Token(Token = "0x60002E8")]
	[Address(RVA = "0xF5FC2C", Offset = "0xF5FC2C", VA = "0xF5FC2C")]
	public uint ReadData(float[][] buffers)
	{
		return default(uint);
	}

	[Token(Token = "0x60002E9")]
	[Address(RVA = "0xF5FC80", Offset = "0xF5FC80", VA = "0xF5FC80")]
	public uint ReadData(float[][] buffers, uint numToRead)
	{
		return default(uint);
	}

	[Token(Token = "0x60002EA")]
	[Address(RVA = "0xF5FDB8", Offset = "0xF5FDB8", VA = "0xF5FDB8")]
	public void SetOutputWriteStream(CriAudioWriteStream stream)
	{
	}

	[Token(Token = "0x60002EB")]
	[Address(RVA = "0xF5FF00", Offset = "0xF5FF00", VA = "0xF5FF00")]
	public CriAudioReadStream GetOutputReadStream()
	{
		return null;
	}

	[Token(Token = "0x60002EC")]
	[Address(RVA = "0xF60014", Offset = "0xF60014", VA = "0xF60014")]
	public Effect AttachEffect(IntPtr afxInterface, float[] configParameters)
	{
		return null;
	}

	[Token(Token = "0x60002ED")]
	[Address(RVA = "0xF602B0", Offset = "0xF602B0", VA = "0xF602B0")]
	public void DetachEffect(Effect effect)
	{
	}

	[Token(Token = "0x60002EE")]
	[Address(RVA = "0xF603C4", Offset = "0xF603C4", VA = "0xF603C4")]
	public void SetEffectParameter(Effect effect, int parameterIndex, float parameterValue)
	{
	}

	[Token(Token = "0x60002EF")]
	[Address(RVA = "0xF60508", Offset = "0xF60508", VA = "0xF60508")]
	public float GetEffectParameter(Effect effect, int parameterIndex)
	{
		return default(float);
	}

	[Token(Token = "0x60002F0")]
	[Address(RVA = "0xF6062C", Offset = "0xF6062C", VA = "0xF6062C")]
	public void SetEffectBypass(Effect effect, bool bypass)
	{
	}

	[Token(Token = "0x60002F1")]
	[Address(RVA = "0xF60750", Offset = "0xF60750", VA = "0xF60750")]
	public void UpdateEffectParameters(Effect effect)
	{
	}

	[Token(Token = "0x60002F2")]
	[Address(RVA = "0xF5F934", Offset = "0xF5F934", VA = "0xF5F934")]
	private uint InternalReadDataFromBufferPointers(uint numToRead)
	{
		return default(uint);
	}

	[Token(Token = "0x60002F3")]
	[Address(RVA = "0xF5F9B0", Offset = "0xF5F9B0", VA = "0xF5F9B0")]
	private void InternalClearBuffers()
	{
	}

	[PreserveSig]
	[Token(Token = "0x60002F4")]
	[Address(RVA = "0xF5E40C", Offset = "0xF5E40C", VA = "0xF5E40C")]
	private static extern void criAtomMicUnity_Initialize();

	[PreserveSig]
	[Token(Token = "0x60002F5")]
	[Address(RVA = "0xF5E678", Offset = "0xF5E678", VA = "0xF5E678")]
	private static extern void criAtomMicUnity_Finalize();

	[PreserveSig]
	[Token(Token = "0x60002F6")]
	[Address(RVA = "0xF5E880", Offset = "0xF5E880", VA = "0xF5E880")]
	private static extern int criAtomMic_GetNumDevices();

	[PreserveSig]
	[Token(Token = "0x60002F7")]
	[Address(RVA = "0xF5E8F4", Offset = "0xF5E8F4", VA = "0xF5E8F4")]
	private static extern bool criAtomMic_GetDevice(int index, out DeviceInfo info);

	[PreserveSig]
	[Token(Token = "0x60002F8")]
	[Address(RVA = "0xF5EB8C", Offset = "0xF5EB8C", VA = "0xF5EB8C")]
	private static extern bool criAtomMic_GetDefaultDevice(out DeviceInfo info);

	[PreserveSig]
	[Token(Token = "0x60002F9")]
	[Address(RVA = "0xF5ECC8", Offset = "0xF5ECC8", VA = "0xF5ECC8")]
	private static extern bool criAtomMic_IsFormatSupported([In] ref Config config);

	[PreserveSig]
	[Token(Token = "0x60002FA")]
	[Address(RVA = "0xF5EFB0", Offset = "0xF5EFB0", VA = "0xF5EFB0")]
	private static extern IntPtr criAtomMic_Create([In] ref Config config, IntPtr work, int work_size);

	[PreserveSig]
	[Token(Token = "0x60002FB")]
	[Address(RVA = "0xF5F2CC", Offset = "0xF5F2CC", VA = "0xF5F2CC")]
	private static extern void criAtomMic_Destroy(IntPtr mic);

	[PreserveSig]
	[Token(Token = "0x60002FC")]
	[Address(RVA = "0xF5F3B4", Offset = "0xF5F3B4", VA = "0xF5F3B4")]
	private static extern void criAtomMic_Start(IntPtr mic);

	[PreserveSig]
	[Token(Token = "0x60002FD")]
	[Address(RVA = "0xF5F49C", Offset = "0xF5F49C", VA = "0xF5F49C")]
	private static extern void criAtomMic_Stop(IntPtr mic);

	[PreserveSig]
	[Token(Token = "0x60002FE")]
	[Address(RVA = "0xF5F51C", Offset = "0xF5F51C", VA = "0xF5F51C")]
	private static extern int criAtomMic_GetNumChannels(IntPtr mic);

	[PreserveSig]
	[Token(Token = "0x60002FF")]
	[Address(RVA = "0xF5F604", Offset = "0xF5F604", VA = "0xF5F604")]
	private static extern int criAtomMic_GetSamplingRate(IntPtr mic);

	[PreserveSig]
	[Token(Token = "0x6000300")]
	[Address(RVA = "0xF5F6EC", Offset = "0xF5F6EC", VA = "0xF5F6EC")]
	private static extern uint criAtomMic_GetNumBufferredSamples(IntPtr mic);

	[PreserveSig]
	[Token(Token = "0x6000301")]
	[Address(RVA = "0xF5F7F8", Offset = "0xF5F7F8", VA = "0xF5F7F8")]
	private static extern bool criAtomMic_IsAvailable(IntPtr mic);

	[PreserveSig]
	[Token(Token = "0x6000302")]
	[Address(RVA = "0xF60864", Offset = "0xF60864", VA = "0xF60864")]
	private static extern uint criAtomMic_ReadData(IntPtr mic, IntPtr[] data, uint num_samples);

	[PreserveSig]
	[Token(Token = "0x6000303")]
	[Address(RVA = "0xF5FE68", Offset = "0xF5FE68", VA = "0xF5FE68")]
	private static extern void criAtomMic_SetOutputWriteStream(IntPtr mic, IntPtr stream_cbfunc, IntPtr stream_ptr);

	[PreserveSig]
	[Token(Token = "0x6000304")]
	[Address(RVA = "0xF5FFA0", Offset = "0xF5FFA0", VA = "0xF5FFA0")]
	private static extern IntPtr criAtomMic_GetOutputReadStream();

	[PreserveSig]
	[Token(Token = "0x6000305")]
	[Address(RVA = "0xF60904", Offset = "0xF60904", VA = "0xF60904")]
	private static extern int criAtomMic_CalculateWorkSizeForEffect(IntPtr mic, IntPtr afx_interface, float[] config_parameters, uint num_config_parameters);

	[PreserveSig]
	[Token(Token = "0x6000306")]
	[Address(RVA = "0xF60120", Offset = "0xF60120", VA = "0xF60120")]
	private static extern IntPtr criAtomMic_AttachEffect(IntPtr mic, IntPtr afx_interface, float[] config_parameters, uint num_config_parameters, IntPtr work, int work_size);

	[PreserveSig]
	[Token(Token = "0x6000307")]
	[Address(RVA = "0xF60334", Offset = "0xF60334", VA = "0xF60334")]
	private static extern void criAtomMic_DetachEffect(IntPtr mic, IntPtr effect);

	[PreserveSig]
	[Token(Token = "0x6000308")]
	[Address(RVA = "0xF601E8", Offset = "0xF601E8", VA = "0xF601E8")]
	private static extern IntPtr criAtomMic_GetEffectInstance(IntPtr mic, IntPtr effect);

	[PreserveSig]
	[Token(Token = "0x6000309")]
	[Address(RVA = "0xF606B8", Offset = "0xF606B8", VA = "0xF606B8")]
	private static extern void criAtomMic_SetEffectBypass(IntPtr mic, IntPtr effect, bool bypass);

	[PreserveSig]
	[Token(Token = "0x600030A")]
	[Address(RVA = "0xF60460", Offset = "0xF60460", VA = "0xF60460")]
	private static extern void criAtomMic_SetEffectParameter(IntPtr mic, IntPtr effect, uint parameter_index, float parameter_value);

	[PreserveSig]
	[Token(Token = "0x600030B")]
	[Address(RVA = "0xF60594", Offset = "0xF60594", VA = "0xF60594")]
	private static extern float criAtomMic_GetEffectParameter(IntPtr mic, IntPtr effect, uint parameter_index);

	[PreserveSig]
	[Token(Token = "0x600030C")]
	[Address(RVA = "0xF607D4", Offset = "0xF607D4", VA = "0xF607D4")]
	private static extern void criAtomMic_UpdateEffectParameters(IntPtr mic, IntPtr effect);
}
[Token(Token = "0x200001D")]
public class CriAtomExOutputAnalyzer : CriDisposable
{
	[Token(Token = "0x2000131")]
	public delegate void PcmCaptureCallback(float[] dataL, float[] dataR, int numChannels, int numData);

	[Token(Token = "0x2000132")]
	public struct Config
	{
		[Token(Token = "0x400077E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool enableLevelmeter;

		[Token(Token = "0x400077F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public bool enableSpectrumAnalyzer;

		[Token(Token = "0x4000780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public bool enablePcmCapture;

		[Token(Token = "0x4000781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
		public bool enablePcmCaptureCallback;

		[Token(Token = "0x4000782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int numSpectrumAnalyzerBands;

		[Token(Token = "0x4000783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int numCapturedPcmSamples;
	}

	[Token(Token = "0x2000133")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x9A4C84", Offset = "0x9A4C84")]
	protected delegate void InternalPcmCaptureCallback(IntPtr dataL, IntPtr dataR, int numChannels, int numData);

	[Token(Token = "0x4000081")]
	public const int MaximumSpectrumBands = 512;

	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected IntPtr handle;

	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected CriAtomExPlayer player;

	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected string busName;

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected int numBands;

	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	protected int numCapturedPcmSamples;

	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected PcmCaptureCallback userPcmCaptureCallback;

	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected float[] dataL;

	[Token(Token = "0x4000089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected float[] dataR;

	[Token(Token = "0x400008A")]
	protected const int pcmCapturerNumMaxData = 512;

	[Token(Token = "0x400008B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static IntPtr InternalCallbackFunctionPointer;

	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	protected static InternalPcmCaptureCallback DelegateObject;

	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	protected static float[] DataL;

	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected static float[] DataR;

	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected static PcmCaptureCallback UserPcmCaptureCallback;

	[Token(Token = "0x17000034")]
	public IntPtr nativeHandle
	{
		[Token(Token = "0x600030E")]
		[Address(RVA = "0xF60B9C", Offset = "0xF60B9C", VA = "0xF60B9C")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x600030F")]
	[Address(RVA = "0xF60BA4", Offset = "0xF60BA4", VA = "0xF60BA4")]
	public CriAtomExOutputAnalyzer(Config config)
	{
	}

	[Token(Token = "0x6000310")]
	[Address(RVA = "0xF60D64", Offset = "0xF60D64", VA = "0xF60D64", Slot = "5")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x6000311")]
	[Address(RVA = "0xF60D6C", Offset = "0xF60D6C", VA = "0xF60D6C")]
	protected void Dispose(bool disposing)
	{
	}

	[Token(Token = "0x6000312")]
	[Address(RVA = "0xF61094", Offset = "0xF61094", VA = "0xF61094")]
	public bool AttachExPlayer(CriAtomExPlayer player)
	{
		return default(bool);
	}

	[Token(Token = "0x6000313")]
	[Address(RVA = "0xF60E74", Offset = "0xF60E74", VA = "0xF60E74")]
	public void DetachExPlayer()
	{
	}

	[Token(Token = "0x6000314")]
	[Address(RVA = "0xF61314", Offset = "0xF61314", VA = "0xF61314")]
	public bool AttachDspBus(string busName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000315")]
	[Address(RVA = "0xF60F78", Offset = "0xF60F78", VA = "0xF60F78")]
	public void DetachDspBus()
	{
	}

	[Token(Token = "0x6000316")]
	[Address(RVA = "0xF61510", Offset = "0xF61510", VA = "0xF61510")]
	public float GetRms(int channel)
	{
		return default(float);
	}

	[Token(Token = "0x6000317")]
	[Address(RVA = "0xF61684", Offset = "0xF61684", VA = "0xF61684")]
	public void GetSpectrumLevels(ref float[] levels)
	{
	}

	[Token(Token = "0x6000318")]
	[Address(RVA = "0xF61820", Offset = "0xF61820", VA = "0xF61820")]
	public void GetPcmData(ref float[] data, int ch)
	{
	}

	[Token(Token = "0x6000319")]
	[Address(RVA = "0xF619E0", Offset = "0xF619E0", VA = "0xF619E0")]
	public void SetPcmCaptureCallback(PcmCaptureCallback callback)
	{
	}

	[Token(Token = "0x600031A")]
	[Address(RVA = "0xF619E8", Offset = "0xF619E8", VA = "0xF619E8")]
	public void ExecutePcmCaptureCallback()
	{
	}

	[Token(Token = "0x600031B")]
	[Address(RVA = "0xF61C14", Offset = "0xF61C14", VA = "0xF61C14")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9ACD38", Offset = "0x9ACD38")]
	public void ExecutePcmCaptureCallback(PcmCaptureCallback callback)
	{
	}

	[Token(Token = "0x600031C")]
	[Address(RVA = "0xF61C1C", Offset = "0xF61C1C", VA = "0xF61C1C")]
	protected CriAtomExOutputAnalyzer()
	{
	}

	[Token(Token = "0x600031D")]
	[Address(RVA = "0xF61CA4", Offset = "0xF61CA4", VA = "0xF61CA4", Slot = "1")]
	~CriAtomExOutputAnalyzer()
	{
	}

	[Token(Token = "0x600031E")]
	[Address(RVA = "0xF60C4C", Offset = "0xF60C4C", VA = "0xF60C4C")]
	protected void InitializeWithConfig(Config config)
	{
	}

	[Token(Token = "0x600031F")]
	[Address(RVA = "0xF609D8", Offset = "0xF609D8", VA = "0xF609D8")]
	[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x9ACD70", Offset = "0x9ACD70")]
	private static void Callback(IntPtr ptrL, IntPtr ptrR, int numChannels, int numData)
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000320")]
	[Address(RVA = "0xF61D10", Offset = "0xF61D10", VA = "0xF61D10")]
	protected static extern IntPtr criAtomExOutputAnalyzer_Create([In] ref Config config);

	[PreserveSig]
	[Token(Token = "0x6000321")]
	[Address(RVA = "0xF61014", Offset = "0xF61014", VA = "0xF61014")]
	protected static extern void criAtomExOutputAnalyzer_Destroy(IntPtr analyzer);

	[PreserveSig]
	[Token(Token = "0x6000322")]
	[Address(RVA = "0xF611B8", Offset = "0xF611B8", VA = "0xF611B8")]
	protected static extern void criAtomExOutputAnalyzer_AttachExPlayer(IntPtr analyzer, IntPtr player);

	[PreserveSig]
	[Token(Token = "0x6000323")]
	[Address(RVA = "0xF61284", Offset = "0xF61284", VA = "0xF61284")]
	protected static extern void criAtomExOutputAnalyzer_DetachExPlayer(IntPtr analyzer, IntPtr player);

	[PreserveSig]
	[Token(Token = "0x6000324")]
	[Address(RVA = "0xF613C8", Offset = "0xF613C8", VA = "0xF613C8")]
	protected static extern void criAtomExOutputAnalyzer_AttachDspBusByName(IntPtr analyzer, string busName);

	[PreserveSig]
	[Token(Token = "0x6000325")]
	[Address(RVA = "0xF6146C", Offset = "0xF6146C", VA = "0xF6146C")]
	protected static extern void criAtomExOutputAnalyzer_DetachDspBusByName(IntPtr analyzer, string busName);

	[PreserveSig]
	[Token(Token = "0x6000326")]
	[Address(RVA = "0xF615F4", Offset = "0xF615F4", VA = "0xF615F4")]
	protected static extern float criAtomExOutputAnalyzer_GetRms(IntPtr analyzer, int channel);

	[PreserveSig]
	[Token(Token = "0x6000327")]
	[Address(RVA = "0xF617A0", Offset = "0xF617A0", VA = "0xF617A0")]
	protected static extern IntPtr criAtomExOutputAnalyzer_GetSpectrumLevels(IntPtr analyzer);

	[PreserveSig]
	[Token(Token = "0x6000328")]
	[Address(RVA = "0xF61950", Offset = "0xF61950", VA = "0xF61950")]
	protected static extern IntPtr criAtomExOutputAnalyzer_GetPcmData(IntPtr analyzer, int ch);

	[PreserveSig]
	[Token(Token = "0x6000329")]
	[Address(RVA = "0xF61B84", Offset = "0xF61B84", VA = "0xF61B84")]
	protected static extern void criAtomExOutputAnalyzer_ExecuteQueuedPcmCapturerCallbacks(IntPtr analyzer, IntPtr callback);
}
[Token(Token = "0x200001E")]
public struct CriAtomExPlayback
{
	[Token(Token = "0x2000134")]
	public enum Status
	{
		[Token(Token = "0x4000785")]
		Prep = 1,
		[Token(Token = "0x4000786")]
		Playing,
		[Token(Token = "0x4000787")]
		Removed
	}

	[Token(Token = "0x2000135")]
	public struct TrackInfo
	{
		[Token(Token = "0x4000788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint id;

		[Token(Token = "0x4000789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CriAtomEx.CueType sequenceType;

		[Token(Token = "0x400078A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr playerHn;

		[Token(Token = "0x400078B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ushort trackNo;

		[Token(Token = "0x400078C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public ushort reserved;
	}

	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A51F4", Offset = "0x9A51F4")]
	private uint <id>k__BackingField;

	[Token(Token = "0x4000091")]
	public const uint invalidId = uint.MaxValue;

	[Token(Token = "0x17000035")]
	public uint id
	{
		[Token(Token = "0x600033A")]
		[Address(RVA = "0x8A93A0", Offset = "0x8A93A0", VA = "0x8A93A0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ACDD4", Offset = "0x9ACDD4")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x600033B")]
		[Address(RVA = "0x8A93A8", Offset = "0x8A93A8", VA = "0x8A93A8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ACDE4", Offset = "0x9ACDE4")]
		private set
		{
		}
	}

	[Token(Token = "0x17000036")]
	public Status status
	{
		[Token(Token = "0x600033C")]
		[Address(RVA = "0x8A93B0", Offset = "0x8A93B0", VA = "0x8A93B0")]
		get
		{
			return default(Status);
		}
	}

	[Token(Token = "0x17000037")]
	public long time
	{
		[Token(Token = "0x600033D")]
		[Address(RVA = "0x8A93B8", Offset = "0x8A93B8", VA = "0x8A93B8")]
		get
		{
			return default(long);
		}
	}

	[Token(Token = "0x17000038")]
	public long timeSyncedWithAudio
	{
		[Token(Token = "0x600033E")]
		[Address(RVA = "0x8A93C0", Offset = "0x8A93C0", VA = "0x8A93C0")]
		get
		{
			return default(long);
		}
	}

	[Token(Token = "0x600032B")]
	[Address(RVA = "0x8A9320", Offset = "0x8A9320", VA = "0x8A9320")]
	public CriAtomExPlayback(uint id)
	{
	}

	[Token(Token = "0x600032C")]
	[Address(RVA = "0x8A9328", Offset = "0x8A9328", VA = "0x8A9328")]
	public void Stop(bool ignoresReleaseTime)
	{
	}

	[Token(Token = "0x600032D")]
	[Address(RVA = "0x8A9334", Offset = "0x8A9334", VA = "0x8A9334")]
	public void Pause()
	{
	}

	[Token(Token = "0x600032E")]
	[Address(RVA = "0x8A9340", Offset = "0x8A9340", VA = "0x8A9340")]
	public void Resume(CriAtomEx.ResumeMode mode)
	{
	}

	[Token(Token = "0x600032F")]
	[Address(RVA = "0x8A9348", Offset = "0x8A9348", VA = "0x8A9348")]
	public bool IsPaused()
	{
		return default(bool);
	}

	[Token(Token = "0x6000330")]
	[Address(RVA = "0x8A9350", Offset = "0x8A9350", VA = "0x8A9350")]
	public bool GetFormatInfo(out CriAtomEx.FormatInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x6000331")]
	[Address(RVA = "0x8A9358", Offset = "0x8A9358", VA = "0x8A9358")]
	public Status GetStatus()
	{
		return default(Status);
	}

	[Token(Token = "0x6000332")]
	[Address(RVA = "0x8A9360", Offset = "0x8A9360", VA = "0x8A9360")]
	public long GetTime()
	{
		return default(long);
	}

	[Token(Token = "0x6000333")]
	[Address(RVA = "0x8A9368", Offset = "0x8A9368", VA = "0x8A9368")]
	public long GetTimeSyncedWithAudio()
	{
		return default(long);
	}

	[Token(Token = "0x6000334")]
	[Address(RVA = "0x8A9370", Offset = "0x8A9370", VA = "0x8A9370")]
	public bool GetNumPlayedSamples(out long numSamples, out int samplingRate)
	{
		return default(bool);
	}

	[Token(Token = "0x6000335")]
	[Address(RVA = "0x8A9378", Offset = "0x8A9378", VA = "0x8A9378")]
	public long GetSequencePosition()
	{
		return default(long);
	}

	[Token(Token = "0x6000336")]
	[Address(RVA = "0x8A9380", Offset = "0x8A9380", VA = "0x8A9380")]
	public int GetCurrentBlockIndex()
	{
		return default(int);
	}

	[Token(Token = "0x6000337")]
	[Address(RVA = "0x8A9388", Offset = "0x8A9388", VA = "0x8A9388")]
	public bool GetTrackInfo(out TrackInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x6000338")]
	[Address(RVA = "0x8A9390", Offset = "0x8A9390", VA = "0x8A9390")]
	public bool GetBeatSyncInfo(out CriAtomExBeatSync.Info info)
	{
		return default(bool);
	}

	[Token(Token = "0x6000339")]
	[Address(RVA = "0x8A9398", Offset = "0x8A9398", VA = "0x8A9398")]
	public void SetNextBlockIndex(int index)
	{
	}

	[Token(Token = "0x600033F")]
	[Address(RVA = "0x8A93C8", Offset = "0x8A93C8", VA = "0x8A93C8")]
	public void Stop()
	{
	}

	[Token(Token = "0x6000340")]
	[Address(RVA = "0x8A93D0", Offset = "0x8A93D0", VA = "0x8A93D0")]
	public void StopWithoutReleaseTime()
	{
	}

	[Token(Token = "0x6000341")]
	[Address(RVA = "0x8A93D8", Offset = "0x8A93D8", VA = "0x8A93D8")]
	public void Pause(bool sw)
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000342")]
	[Address(RVA = "0xF627B0", Offset = "0xF627B0", VA = "0xF627B0")]
	private static extern void criAtomExPlayback_Stop(uint id);

	[PreserveSig]
	[Token(Token = "0x6000343")]
	[Address(RVA = "0xF62830", Offset = "0xF62830", VA = "0xF62830")]
	private static extern void criAtomExPlayback_StopWithoutReleaseTime(uint id);

	[PreserveSig]
	[Token(Token = "0x6000344")]
	[Address(RVA = "0xF628BC", Offset = "0xF628BC", VA = "0xF628BC")]
	private static extern void criAtomExPlayback_Pause(uint id, bool sw);

	[PreserveSig]
	[Token(Token = "0x6000345")]
	[Address(RVA = "0xF62954", Offset = "0xF62954", VA = "0xF62954")]
	private static extern void criAtomExPlayback_Resume(uint id, CriAtomEx.ResumeMode mode);

	[PreserveSig]
	[Token(Token = "0x6000346")]
	[Address(RVA = "0xF629EC", Offset = "0xF629EC", VA = "0xF629EC")]
	private static extern bool criAtomExPlayback_IsPaused(uint id);

	[PreserveSig]
	[Token(Token = "0x6000347")]
	[Address(RVA = "0xF62B1C", Offset = "0xF62B1C", VA = "0xF62B1C")]
	private static extern Status criAtomExPlayback_GetStatus(uint id);

	[PreserveSig]
	[Token(Token = "0x6000348")]
	[Address(RVA = "0xF62A7C", Offset = "0xF62A7C", VA = "0xF62A7C")]
	private static extern bool criAtomExPlayback_GetFormatInfo(uint id, out CriAtomEx.FormatInfo info);

	[PreserveSig]
	[Token(Token = "0x6000349")]
	[Address(RVA = "0xF62BA4", Offset = "0xF62BA4", VA = "0xF62BA4")]
	private static extern long criAtomExPlayback_GetTime(uint id);

	[PreserveSig]
	[Token(Token = "0x600034A")]
	[Address(RVA = "0xF62C2C", Offset = "0xF62C2C", VA = "0xF62C2C")]
	private static extern long criAtomExPlayback_GetTimeSyncedWithAudio(uint id);

	[PreserveSig]
	[Token(Token = "0x600034B")]
	[Address(RVA = "0xF62CB4", Offset = "0xF62CB4", VA = "0xF62CB4")]
	private static extern bool criAtomExPlayback_GetNumPlayedSamples(uint id, out long num_samples, out int sampling_rate);

	[PreserveSig]
	[Token(Token = "0x600034C")]
	[Address(RVA = "0xF62D5C", Offset = "0xF62D5C", VA = "0xF62D5C")]
	private static extern long criAtomExPlayback_GetSequencePosition(uint id);

	[PreserveSig]
	[Token(Token = "0x600034D")]
	[Address(RVA = "0xF62FAC", Offset = "0xF62FAC", VA = "0xF62FAC")]
	private static extern void criAtomExPlayback_SetNextBlockIndex(uint id, int index);

	[PreserveSig]
	[Token(Token = "0x600034E")]
	[Address(RVA = "0xF62DE4", Offset = "0xF62DE4", VA = "0xF62DE4")]
	private static extern int criAtomExPlayback_GetCurrentBlockIndex(uint id);

	[PreserveSig]
	[Token(Token = "0x600034F")]
	[Address(RVA = "0xF62E6C", Offset = "0xF62E6C", VA = "0xF62E6C")]
	private static extern bool criAtomExPlayback_GetPlaybackTrackInfo(uint id, out TrackInfo info);

	[PreserveSig]
	[Token(Token = "0x6000350")]
	[Address(RVA = "0xF62F0C", Offset = "0xF62F0C", VA = "0xF62F0C")]
	private static extern bool criAtomExPlayback_GetBeatSyncInfo(uint id, out CriAtomExBeatSync.Info info);
}
[Token(Token = "0x200001F")]
public class CriAtomExPlayer : CriDisposable
{
	[Token(Token = "0x2000136")]
	public enum Status
	{
		[Token(Token = "0x400078E")]
		Stop,
		[Token(Token = "0x400078F")]
		Prep,
		[Token(Token = "0x4000790")]
		Playing,
		[Token(Token = "0x4000791")]
		PlayEnd,
		[Token(Token = "0x4000792")]
		Error
	}

	[Token(Token = "0x2000137")]
	private struct Config
	{
		[Token(Token = "0x4000793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CriAtomEx.VoiceAllocationMethod voiceAllocationMethod;

		[Token(Token = "0x4000794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int maxPathStrings;

		[Token(Token = "0x4000795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int maxPath;

		[Token(Token = "0x4000796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int maxAisacs;

		[Token(Token = "0x4000797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool updatesTime;

		[Token(Token = "0x4000798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool enableAudioSyncedTimer;
	}

	[Token(Token = "0x2000138")]
	public enum TimeStretchParameterId
	{
		[Token(Token = "0x400079A")]
		Ratio,
		[Token(Token = "0x400079B")]
		FrameTime,
		[Token(Token = "0x400079C")]
		Quality
	}

	[Token(Token = "0x2000139")]
	public enum PitchShifterParameterId
	{
		[Token(Token = "0x400079E")]
		Pitch,
		[Token(Token = "0x400079F")]
		Formant,
		[Token(Token = "0x40007A0")]
		Mode
	}

	[Token(Token = "0x4000094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool hasExistingNativeHandle;

	[Token(Token = "0x4000095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private IntPtr entryPoolHandle;

	[Token(Token = "0x4000096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int _entryPoolCapacity;

	[Token(Token = "0x4000097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int max_path;

	[Token(Token = "0x4000098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private IntPtr handle;

	[Token(Token = "0x17000039")]
	public IntPtr nativeHandle
	{
		[Token(Token = "0x6000351")]
		[Address(RVA = "0xF63500", Offset = "0xF63500", VA = "0xF63500")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x1700003A")]
	public bool isAvailable
	{
		[Token(Token = "0x6000352")]
		[Address(RVA = "0xF61164", Offset = "0xF61164", VA = "0xF61164")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700003B")]
	public int entryPoolCapacity
	{
		[Token(Token = "0x600036E")]
		[Address(RVA = "0xF64BAC", Offset = "0xF64BAC", VA = "0xF64BAC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1400000B")]
	private event CriAtomExBeatSync.CbFunc _onBeatSyncCallback
	{
		[Token(Token = "0x6000353")]
		[Address(RVA = "0xF63508", Offset = "0xF63508", VA = "0xF63508")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ACDF4", Offset = "0x9ACDF4")]
		add
		{
		}
		[Token(Token = "0x6000354")]
		[Address(RVA = "0xF635AC", Offset = "0xF635AC", VA = "0xF635AC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ACE04", Offset = "0x9ACE04")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000C")]
	public event CriAtomExBeatSync.CbFunc OnBeatSyncCallback
	{
		[Token(Token = "0x6000355")]
		[Address(RVA = "0xF63650", Offset = "0xF63650", VA = "0xF63650")]
		add
		{
		}
		[Token(Token = "0x6000356")]
		[Address(RVA = "0xF63704", Offset = "0xF63704", VA = "0xF63704")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000D")]
	private event CriAtomExSequencer.EventCallback _onSequenceCallback
	{
		[Token(Token = "0x6000357")]
		[Address(RVA = "0xF637C8", Offset = "0xF637C8", VA = "0xF637C8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ACE14", Offset = "0x9ACE14")]
		add
		{
		}
		[Token(Token = "0x6000358")]
		[Address(RVA = "0xF6386C", Offset = "0xF6386C", VA = "0xF6386C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ACE24", Offset = "0x9ACE24")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000E")]
	public event CriAtomExSequencer.EventCallback OnSequenceCallback
	{
		[Token(Token = "0x6000359")]
		[Address(RVA = "0xF63910", Offset = "0xF63910", VA = "0xF63910")]
		add
		{
		}
		[Token(Token = "0x600035A")]
		[Address(RVA = "0xF63A10", Offset = "0xF63A10", VA = "0xF63A10")]
		remove
		{
		}
	}

	[Token(Token = "0x600035B")]
	[Address(RVA = "0xF63B10", Offset = "0xF63B10", VA = "0xF63B10")]
	public CriAtomExPlayer()
	{
	}

	[Token(Token = "0x600035C")]
	[Address(RVA = "0xF63CD8", Offset = "0xF63CD8", VA = "0xF63CD8")]
	public CriAtomExPlayer(int maxPath, int maxPathStrings)
	{
	}

	[Token(Token = "0x600035D")]
	[Address(RVA = "0xF63D3C", Offset = "0xF63D3C", VA = "0xF63D3C")]
	public CriAtomExPlayer(bool enableAudioSyncedTimer)
	{
	}

	[Token(Token = "0x600035E")]
	[Address(RVA = "0xF63D9C", Offset = "0xF63D9C", VA = "0xF63D9C")]
	public CriAtomExPlayer(int maxPath, int maxPathStrings, bool enableAudioSyncedTimer)
	{
	}

	[Token(Token = "0x600035F")]
	[Address(RVA = "0xF63E0C", Offset = "0xF63E0C", VA = "0xF63E0C")]
	public CriAtomExPlayer(IntPtr existingNativeHandle)
	{
	}

	[Token(Token = "0x6000360")]
	[Address(RVA = "0xF63B64", Offset = "0xF63B64", VA = "0xF63B64")]
	public CriAtomExPlayer(int maxPath, int maxPathStrings, bool enableAudioSyncedTimer, IntPtr existingNativeHandle)
	{
	}

	[Token(Token = "0x6000361")]
	[Address(RVA = "0xF63EF8", Offset = "0xF63EF8", VA = "0xF63EF8", Slot = "5")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x6000362")]
	[Address(RVA = "0xF6413C", Offset = "0xF6413C", VA = "0xF6413C")]
	public void SetCue(CriAtomExAcb acb, string name)
	{
	}

	[Token(Token = "0x6000363")]
	[Address(RVA = "0xF64250", Offset = "0xF64250", VA = "0xF64250")]
	public void SetCue(CriAtomExAcb acb, int id)
	{
	}

	[Token(Token = "0x6000364")]
	[Address(RVA = "0xF64350", Offset = "0xF64350", VA = "0xF64350")]
	public void SetCueIndex(CriAtomExAcb acb, int index)
	{
	}

	[Token(Token = "0x6000365")]
	[Address(RVA = "0xF64450", Offset = "0xF64450", VA = "0xF64450")]
	public void SetContentId(CriFsBinder binder, int contentId)
	{
	}

	[Token(Token = "0x6000366")]
	[Address(RVA = "0xF64550", Offset = "0xF64550", VA = "0xF64550")]
	public void SetFile(CriFsBinder binder, string path)
	{
	}

	[Token(Token = "0x6000367")]
	[Address(RVA = "0xF64664", Offset = "0xF64664", VA = "0xF64664")]
	public void SetData(byte[] buffer, int size)
	{
	}

	[Token(Token = "0x6000368")]
	[Address(RVA = "0xF6470C", Offset = "0xF6470C", VA = "0xF6470C")]
	public void SetData(IntPtr buffer, int size)
	{
	}

	[Token(Token = "0x6000369")]
	[Address(RVA = "0xF647AC", Offset = "0xF647AC", VA = "0xF647AC")]
	public void SetFormat(CriAtomEx.Format format)
	{
	}

	[Token(Token = "0x600036A")]
	[Address(RVA = "0xF64844", Offset = "0xF64844", VA = "0xF64844")]
	public void SetNumChannels(int numChannels)
	{
	}

	[Token(Token = "0x600036B")]
	[Address(RVA = "0xF648DC", Offset = "0xF648DC", VA = "0xF648DC")]
	public void SetSamplingRate(int samplingRate)
	{
	}

	[Token(Token = "0x600036C")]
	[Address(RVA = "0xF64974", Offset = "0xF64974", VA = "0xF64974")]
	public void PrepareEntryPool(int capacity, bool stopOnEmpty)
	{
	}

	[Token(Token = "0x600036D")]
	[Address(RVA = "0xF64AC4", Offset = "0xF64AC4", VA = "0xF64AC4")]
	public int GetNumEntries()
	{
		return default(int);
	}

	[Token(Token = "0x600036F")]
	[Address(RVA = "0xF64BB4", Offset = "0xF64BB4", VA = "0xF64BB4")]
	public bool EntryFile(CriFsBinder binder, string path, bool repeat)
	{
		return default(bool);
	}

	[Token(Token = "0x6000370")]
	[Address(RVA = "0xF64D2C", Offset = "0xF64D2C", VA = "0xF64D2C")]
	public bool EntryContentId(CriFsBinder binder, int contentId, bool repeat)
	{
		return default(bool);
	}

	[Token(Token = "0x6000371")]
	[Address(RVA = "0xF64E80", Offset = "0xF64E80", VA = "0xF64E80")]
	public bool EntryData(byte[] buffer, int size, bool repeat)
	{
		return default(bool);
	}

	[Token(Token = "0x6000372")]
	[Address(RVA = "0xF64FD0", Offset = "0xF64FD0", VA = "0xF64FD0")]
	public bool EntryData(IntPtr buffer, int size, bool repeat)
	{
		return default(bool);
	}

	[Token(Token = "0x6000373")]
	[Address(RVA = "0xF65118", Offset = "0xF65118", VA = "0xF65118")]
	public bool EntryCue(CriAtomExAcb acb, string name, bool repeat)
	{
		return default(bool);
	}

	[Token(Token = "0x6000374")]
	[Address(RVA = "0xF65284", Offset = "0xF65284", VA = "0xF65284")]
	public CriAtomExPlayback Start()
	{
		return default(CriAtomExPlayback);
	}

	[Token(Token = "0x6000375")]
	[Address(RVA = "0xF65320", Offset = "0xF65320", VA = "0xF65320")]
	public CriAtomExPlayback Prepare()
	{
		return default(CriAtomExPlayback);
	}

	[Token(Token = "0x6000376")]
	[Address(RVA = "0xF653BC", Offset = "0xF653BC", VA = "0xF653BC")]
	public void Stop(bool ignoresReleaseTime)
	{
	}

	[Token(Token = "0x6000377")]
	[Address(RVA = "0xF655D0", Offset = "0xF655D0", VA = "0xF655D0")]
	public void Pause()
	{
	}

	[Token(Token = "0x6000378")]
	[Address(RVA = "0xF6566C", Offset = "0xF6566C", VA = "0xF6566C")]
	public void Resume(CriAtomEx.ResumeMode mode)
	{
	}

	[Token(Token = "0x6000379")]
	[Address(RVA = "0xF65704", Offset = "0xF65704", VA = "0xF65704")]
	public bool IsPaused()
	{
		return default(bool);
	}

	[Token(Token = "0x600037A")]
	[Address(RVA = "0xF65794", Offset = "0xF65794", VA = "0xF65794")]
	public void SetVolume(float volume)
	{
	}

	[Token(Token = "0x600037B")]
	[Address(RVA = "0xF6582C", Offset = "0xF6582C", VA = "0xF6582C")]
	public void SetPitch(float pitch)
	{
	}

	[Token(Token = "0x600037C")]
	[Address(RVA = "0xF658C4", Offset = "0xF658C4", VA = "0xF658C4")]
	public void SetPlaybackRatio(float ratio)
	{
	}

	[Token(Token = "0x600037D")]
	[Address(RVA = "0xF6595C", Offset = "0xF6595C", VA = "0xF6595C")]
	public void SetPan3dAngle(float angle)
	{
	}

	[Token(Token = "0x600037E")]
	[Address(RVA = "0xF659F4", Offset = "0xF659F4", VA = "0xF659F4")]
	public void SetPan3dInteriorDistance(float distance)
	{
	}

	[Token(Token = "0x600037F")]
	[Address(RVA = "0xF65A8C", Offset = "0xF65A8C", VA = "0xF65A8C")]
	public void SetPan3dVolume(float volume)
	{
	}

	[Token(Token = "0x6000380")]
	[Address(RVA = "0xF65B24", Offset = "0xF65B24", VA = "0xF65B24")]
	public void SetPanType(CriAtomEx.PanType panType)
	{
	}

	[Token(Token = "0x6000381")]
	[Address(RVA = "0xF65BBC", Offset = "0xF65BBC", VA = "0xF65BBC")]
	public void SetSendLevel(int channel, CriAtomEx.Speaker id, float level)
	{
	}

	[Token(Token = "0x6000382")]
	[Address(RVA = "0xF65C6C", Offset = "0xF65C6C", VA = "0xF65C6C")]
	public void SetBiquadFilterParameters(CriAtomEx.BiquadFilterType type, float frequency, float gain, float q)
	{
	}

	[Token(Token = "0x6000383")]
	[Address(RVA = "0xF65D2C", Offset = "0xF65D2C", VA = "0xF65D2C")]
	public void SetBandpassFilterParameters(float cofLow, float cofHigh)
	{
	}

	[Token(Token = "0x6000384")]
	[Address(RVA = "0xF65DCC", Offset = "0xF65DCC", VA = "0xF65DCC")]
	public void SetBusSendLevel(string busName, float level)
	{
	}

	[Token(Token = "0x6000385")]
	[Address(RVA = "0xF65E88", Offset = "0xF65E88", VA = "0xF65E88")]
	public bool GetBusSendLevel(string busName, out float level)
	{
		return default(bool);
	}

	[Token(Token = "0x6000386")]
	[Address(RVA = "0xF65F48", Offset = "0xF65F48", VA = "0xF65F48")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9ACE34", Offset = "0x9ACE34")]
	public void SetBusSendLevel(int busId, float level)
	{
	}

	[Token(Token = "0x6000387")]
	[Address(RVA = "0xF65FF0", Offset = "0xF65FF0", VA = "0xF65FF0")]
	public void SetBusSendLevelOffset(string busName, float levelOffset)
	{
	}

	[Token(Token = "0x6000388")]
	[Address(RVA = "0xF660AC", Offset = "0xF660AC", VA = "0xF660AC")]
	public bool GetBusSendLevelOffset(string busName, out float level)
	{
		return default(bool);
	}

	[Token(Token = "0x6000389")]
	[Address(RVA = "0xF6616C", Offset = "0xF6616C", VA = "0xF6616C")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9ACE6C", Offset = "0x9ACE6C")]
	public void SetBusSendLevelOffset(int busId, float levelOffset)
	{
	}

	[Token(Token = "0x600038A")]
	[Address(RVA = "0xF66214", Offset = "0xF66214", VA = "0xF66214")]
	public void AttachAisac(string globalAisacName)
	{
	}

	[Token(Token = "0x600038B")]
	[Address(RVA = "0xF662C0", Offset = "0xF662C0", VA = "0xF662C0")]
	public void DetachAisac(string globalAisacName)
	{
	}

	[Token(Token = "0x600038C")]
	[Address(RVA = "0xF6636C", Offset = "0xF6636C", VA = "0xF6636C")]
	public void SetAisacControl(string controlName, float value)
	{
	}

	[Token(Token = "0x600038D")]
	[Address(RVA = "0xF66428", Offset = "0xF66428", VA = "0xF66428")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9ACEA4", Offset = "0x9ACEA4")]
	public void SetAisac(string controlName, float value)
	{
	}

	[Token(Token = "0x600038E")]
	[Address(RVA = "0xF66430", Offset = "0xF66430", VA = "0xF66430")]
	public void SetAisacControl(uint controlId, float value)
	{
	}

	[Token(Token = "0x600038F")]
	[Address(RVA = "0xF664D8", Offset = "0xF664D8", VA = "0xF664D8")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9ACEDC", Offset = "0x9ACEDC")]
	public void SetAisac(uint controlId, float value)
	{
	}

	[Token(Token = "0x6000390")]
	[Address(RVA = "0xF664E0", Offset = "0xF664E0", VA = "0xF664E0")]
	public bool GetAttachedAisacInfo(int aisacAttachedIndex, out CriAtomEx.AisacInfo aisacInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x6000391")]
	[Address(RVA = "0xF66738", Offset = "0xF66738", VA = "0xF66738")]
	public void Set3dSource(CriAtomEx3dSource source)
	{
	}

	[Token(Token = "0x6000392")]
	[Address(RVA = "0xF66828", Offset = "0xF66828", VA = "0xF66828")]
	public void Set3dListener(CriAtomEx3dListener listener)
	{
	}

	[Token(Token = "0x6000393")]
	[Address(RVA = "0xF66918", Offset = "0xF66918", VA = "0xF66918")]
	public void SetStartTime(long startTimeMs)
	{
	}

	[Token(Token = "0x6000394")]
	[Address(RVA = "0xF669B0", Offset = "0xF669B0", VA = "0xF669B0")]
	public void SetFirstBlockIndex(int index)
	{
	}

	[Token(Token = "0x6000395")]
	[Address(RVA = "0xF66A48", Offset = "0xF66A48", VA = "0xF66A48")]
	public void SetSelectorLabel(string selector, string label)
	{
	}

	[Token(Token = "0x6000396")]
	[Address(RVA = "0xF66B10", Offset = "0xF66B10", VA = "0xF66B10")]
	public void UnsetSelectorLabel(string selector, string label)
	{
	}

	[Token(Token = "0x6000397")]
	[Address(RVA = "0xF66BD8", Offset = "0xF66BD8", VA = "0xF66BD8")]
	public void ClearSelectorLabels()
	{
	}

	[Token(Token = "0x6000398")]
	[Address(RVA = "0xF66C60", Offset = "0xF66C60", VA = "0xF66C60")]
	public void SetCategory(int categoryId)
	{
	}

	[Token(Token = "0x6000399")]
	[Address(RVA = "0xF66CF8", Offset = "0xF66CF8", VA = "0xF66CF8")]
	public void SetCategory(string categoryName)
	{
	}

	[Token(Token = "0x600039A")]
	[Address(RVA = "0xF66DA4", Offset = "0xF66DA4", VA = "0xF66DA4")]
	public void UnsetCategory()
	{
	}

	[Token(Token = "0x600039B")]
	[Address(RVA = "0xF66E2C", Offset = "0xF66E2C", VA = "0xF66E2C")]
	public void SetCuePriority(int priority)
	{
	}

	[Token(Token = "0x600039C")]
	[Address(RVA = "0xF66EC4", Offset = "0xF66EC4", VA = "0xF66EC4")]
	public void SetVoicePriority(int priority)
	{
	}

	[Token(Token = "0x600039D")]
	[Address(RVA = "0xF66F5C", Offset = "0xF66F5C", VA = "0xF66F5C")]
	public void SetVoiceControlMethod(CriAtomEx.VoiceControlMethod method)
	{
	}

	[Token(Token = "0x600039E")]
	[Address(RVA = "0xF66FF4", Offset = "0xF66FF4", VA = "0xF66FF4")]
	public void SetPreDelayTime(float time)
	{
	}

	[Token(Token = "0x600039F")]
	[Address(RVA = "0xF6708C", Offset = "0xF6708C", VA = "0xF6708C")]
	public void SetEnvelopeAttackTime(float time)
	{
	}

	[Token(Token = "0x60003A0")]
	[Address(RVA = "0xF67124", Offset = "0xF67124", VA = "0xF67124")]
	public void SetEnvelopeHoldTime(float time)
	{
	}

	[Token(Token = "0x60003A1")]
	[Address(RVA = "0xF671BC", Offset = "0xF671BC", VA = "0xF671BC")]
	public void SetEnvelopeDecayTime(float time)
	{
	}

	[Token(Token = "0x60003A2")]
	[Address(RVA = "0xF67254", Offset = "0xF67254", VA = "0xF67254")]
	public void SetEnvelopeReleaseTime(float time)
	{
	}

	[Token(Token = "0x60003A3")]
	[Address(RVA = "0xF672EC", Offset = "0xF672EC", VA = "0xF672EC")]
	public void SetEnvelopeSustainLevel(float level)
	{
	}

	[Token(Token = "0x60003A4")]
	[Address(RVA = "0xF67384", Offset = "0xF67384", VA = "0xF67384")]
	public void AttachFader()
	{
	}

	[Token(Token = "0x60003A5")]
	[Address(RVA = "0xF6747C", Offset = "0xF6747C", VA = "0xF6747C")]
	public void DetachFader()
	{
	}

	[Token(Token = "0x60003A6")]
	[Address(RVA = "0xF67504", Offset = "0xF67504", VA = "0xF67504")]
	public void SetFadeOutTime(int ms)
	{
	}

	[Token(Token = "0x60003A7")]
	[Address(RVA = "0xF6759C", Offset = "0xF6759C", VA = "0xF6759C")]
	public void SetFadeInTime(int ms)
	{
	}

	[Token(Token = "0x60003A8")]
	[Address(RVA = "0xF67634", Offset = "0xF67634", VA = "0xF67634")]
	public void SetFadeInStartOffset(int ms)
	{
	}

	[Token(Token = "0x60003A9")]
	[Address(RVA = "0xF676CC", Offset = "0xF676CC", VA = "0xF676CC")]
	public void SetFadeOutEndDelay(int ms)
	{
	}

	[Token(Token = "0x60003AA")]
	[Address(RVA = "0xF67764", Offset = "0xF67764", VA = "0xF67764")]
	public bool IsFading()
	{
		return default(bool);
	}

	[Token(Token = "0x60003AB")]
	[Address(RVA = "0xF677F4", Offset = "0xF677F4", VA = "0xF677F4")]
	public void ResetFaderParameters()
	{
	}

	[Token(Token = "0x60003AC")]
	[Address(RVA = "0xF6787C", Offset = "0xF6787C", VA = "0xF6787C")]
	public void SetGroupNumber(int group_no)
	{
	}

	[Token(Token = "0x60003AD")]
	[Address(RVA = "0xF67914", Offset = "0xF67914", VA = "0xF67914")]
	public void Update(CriAtomExPlayback playback)
	{
	}

	[Token(Token = "0x60003AE")]
	[Address(RVA = "0xF679AC", Offset = "0xF679AC", VA = "0xF679AC")]
	public void UpdateAll()
	{
	}

	[Token(Token = "0x60003AF")]
	[Address(RVA = "0xF67A34", Offset = "0xF67A34", VA = "0xF67A34")]
	public void ResetParameters()
	{
	}

	[Token(Token = "0x60003B0")]
	[Address(RVA = "0xF67ABC", Offset = "0xF67ABC", VA = "0xF67ABC")]
	public long GetTime()
	{
		return default(long);
	}

	[Token(Token = "0x60003B1")]
	[Address(RVA = "0xF611B0", Offset = "0xF611B0", VA = "0xF611B0")]
	public Status GetStatus()
	{
		return default(Status);
	}

	[Token(Token = "0x60003B2")]
	[Address(RVA = "0xF67BC4", Offset = "0xF67BC4", VA = "0xF67BC4")]
	public float GetParameterFloat32(CriAtomEx.Parameter id)
	{
		return default(float);
	}

	[Token(Token = "0x60003B3")]
	[Address(RVA = "0xF67C5C", Offset = "0xF67C5C", VA = "0xF67C5C")]
	public uint GetParameterUint32(CriAtomEx.Parameter id)
	{
		return default(uint);
	}

	[Token(Token = "0x60003B4")]
	[Address(RVA = "0xF67CF4", Offset = "0xF67CF4", VA = "0xF67CF4")]
	public int GetParameterSint32(CriAtomEx.Parameter id)
	{
		return default(int);
	}

	[Token(Token = "0x60003B5")]
	[Address(RVA = "0xF67D8C", Offset = "0xF67D8C", VA = "0xF67D8C")]
	public void SetSoundRendererType(CriAtomEx.SoundRendererType type)
	{
	}

	[Token(Token = "0x60003B6")]
	[Address(RVA = "0xF67E24", Offset = "0xF67E24", VA = "0xF67E24")]
	public void SetRandomSeed(uint seed)
	{
	}

	[Token(Token = "0x60003B7")]
	[Address(RVA = "0xF67EBC", Offset = "0xF67EBC", VA = "0xF67EBC")]
	public void Loop(bool sw)
	{
	}

	[Token(Token = "0x60003B8")]
	[Address(RVA = "0xF681BC", Offset = "0xF681BC", VA = "0xF681BC")]
	public void SetAsrRackId(int asr_rack_id)
	{
	}

	[Token(Token = "0x60003B9")]
	[Address(RVA = "0xF68254", Offset = "0xF68254", VA = "0xF68254")]
	public void SetVoicePoolIdentifier(uint identifier)
	{
	}

	[Token(Token = "0x60003BA")]
	[Address(RVA = "0xF682EC", Offset = "0xF682EC", VA = "0xF682EC")]
	public void SetDspTimeStretchRatio(float ratio)
	{
	}

	[Token(Token = "0x60003BB")]
	[Address(RVA = "0xF68300", Offset = "0xF68300", VA = "0xF68300")]
	public void SetDspPitchShifterPitch(float pitch)
	{
	}

	[Token(Token = "0x60003BC")]
	[Address(RVA = "0xF682F8", Offset = "0xF682F8", VA = "0xF682F8")]
	public void SetDspParameter(int id, float value)
	{
	}

	[Token(Token = "0x60003BD")]
	[Address(RVA = "0xF683C0", Offset = "0xF683C0", VA = "0xF683C0")]
	public void SetSequencePrepareTime(uint ms)
	{
	}

	[Token(Token = "0x60003BE")]
	[Address(RVA = "0xF68458", Offset = "0xF68458", VA = "0xF68458")]
	public void AttachTween(CriAtomExTween tween)
	{
	}

	[Token(Token = "0x60003BF")]
	[Address(RVA = "0xF68504", Offset = "0xF68504", VA = "0xF68504")]
	public void DetachTween(CriAtomExTween tween)
	{
	}

	[Token(Token = "0x60003C0")]
	[Address(RVA = "0xF685B0", Offset = "0xF685B0", VA = "0xF685B0")]
	public void DetachTweenAll()
	{
	}

	[Token(Token = "0x60003C1")]
	[Address(RVA = "0xF68638", Offset = "0xF68638", VA = "0xF68638")]
	public void Stop()
	{
	}

	[Token(Token = "0x60003C2")]
	[Address(RVA = "0xF61248", Offset = "0xF61248", VA = "0xF61248")]
	public void StopWithoutReleaseTime()
	{
	}

	[Token(Token = "0x60003C3")]
	[Address(RVA = "0xF68674", Offset = "0xF68674", VA = "0xF68674")]
	public void Pause(bool sw)
	{
	}

	[Token(Token = "0x60003C4")]
	[Address(RVA = "0xF68680", Offset = "0xF68680", VA = "0xF68680", Slot = "1")]
	~CriAtomExPlayer()
	{
	}

	[Token(Token = "0x60003C5")]
	[Address(RVA = "0xF686F0", Offset = "0xF686F0", VA = "0xF686F0")]
	private void OnBeatSyncCallbackChainInternal(ref CriAtomExBeatSync.Info info)
	{
	}

	[Token(Token = "0x60003C6")]
	[Address(RVA = "0xF68740", Offset = "0xF68740", VA = "0xF68740")]
	private void OnSequenceCallbackChainInternal(ref CriAtomExSequencer.CriAtomExSequenceEventInfo info)
	{
	}

	[PreserveSig]
	[Token(Token = "0x60003C7")]
	[Address(RVA = "0xF63E20", Offset = "0xF63E20", VA = "0xF63E20")]
	private static extern IntPtr criAtomExPlayer_Create(ref Config config, IntPtr work, int work_size);

	[PreserveSig]
	[Token(Token = "0x60003C8")]
	[Address(RVA = "0xF640BC", Offset = "0xF640BC", VA = "0xF640BC")]
	private static extern void criAtomExPlayer_Destroy(IntPtr player);

	[PreserveSig]
	[Token(Token = "0x60003C9")]
	[Address(RVA = "0xF642B8", Offset = "0xF642B8", VA = "0xF642B8")]
	private static extern void criAtomExPlayer_SetCueId(IntPtr player, IntPtr acb_hn, int id);

	[PreserveSig]
	[Token(Token = "0x60003CA")]
	[Address(RVA = "0xF641A4", Offset = "0xF641A4", VA = "0xF641A4")]
	private static extern void criAtomExPlayer_SetCueName(IntPtr player, IntPtr acb_hn, string cue_name);

	[PreserveSig]
	[Token(Token = "0x60003CB")]
	[Address(RVA = "0xF643B8", Offset = "0xF643B8", VA = "0xF643B8")]
	private static extern void criAtomExPlayer_SetCueIndex(IntPtr player, IntPtr acb_hn, int index);

	[PreserveSig]
	[Token(Token = "0x60003CC")]
	[Address(RVA = "0xF645B8", Offset = "0xF645B8", VA = "0xF645B8")]
	private static extern void criAtomExPlayer_SetFile(IntPtr player, IntPtr binder, string path);

	[PreserveSig]
	[Token(Token = "0x60003CD")]
	[Address(RVA = "0xF6466C", Offset = "0xF6466C", VA = "0xF6466C")]
	private static extern void criAtomExPlayer_SetData(IntPtr player, byte[] buffer, int size);

	[PreserveSig]
	[Token(Token = "0x60003CE")]
	[Address(RVA = "0xF64714", Offset = "0xF64714", VA = "0xF64714")]
	private static extern void criAtomExPlayer_SetData(IntPtr player, IntPtr buffer, int size);

	[PreserveSig]
	[Token(Token = "0x60003CF")]
	[Address(RVA = "0xF644B8", Offset = "0xF644B8", VA = "0xF644B8")]
	private static extern void criAtomExPlayer_SetContentId(IntPtr player, IntPtr binder, int id);

	[PreserveSig]
	[Token(Token = "0x60003D0")]
	[Address(RVA = "0xF6825C", Offset = "0xF6825C", VA = "0xF6825C")]
	private static extern void criAtomExPlayer_SetVoicePoolIdentifier(IntPtr player, uint identifier);

	[PreserveSig]
	[Token(Token = "0x60003D1")]
	[Address(RVA = "0xF652A0", Offset = "0xF652A0", VA = "0xF652A0")]
	private static extern uint criAtomExPlayer_Start(IntPtr player);

	[PreserveSig]
	[Token(Token = "0x60003D2")]
	[Address(RVA = "0xF6533C", Offset = "0xF6533C", VA = "0xF6533C")]
	private static extern uint criAtomExPlayer_Prepare(IntPtr player);

	[PreserveSig]
	[Token(Token = "0x60003D3")]
	[Address(RVA = "0xF65450", Offset = "0xF65450", VA = "0xF65450")]
	private static extern void criAtomExPlayer_Stop(IntPtr player);

	[PreserveSig]
	[Token(Token = "0x60003D4")]
	[Address(RVA = "0xF654D0", Offset = "0xF654D0", VA = "0xF654D0")]
	private static extern void criAtomExPlayer_StopWithoutReleaseTime(IntPtr player);

	[PreserveSig]
	[Token(Token = "0x60003D5")]
	[Address(RVA = "0xF655DC", Offset = "0xF655DC", VA = "0xF655DC")]
	private static extern void criAtomExPlayer_Pause(IntPtr player, bool sw);

	[PreserveSig]
	[Token(Token = "0x60003D6")]
	[Address(RVA = "0xF65674", Offset = "0xF65674", VA = "0xF65674")]
	private static extern void criAtomExPlayer_Resume(IntPtr player, CriAtomEx.ResumeMode mode);

	[PreserveSig]
	[Token(Token = "0x60003D7")]
	[Address(RVA = "0xF6570C", Offset = "0xF6570C", VA = "0xF6570C")]
	private static extern bool criAtomExPlayer_IsPaused(IntPtr player);

	[PreserveSig]
	[Token(Token = "0x60003D8")]
	[Address(RVA = "0xF67B44", Offset = "0xF67B44", VA = "0xF67B44")]
	private static extern Status criAtomExPlayer_GetStatus(IntPtr player);

	[PreserveSig]
	[Token(Token = "0x60003D9")]
	[Address(RVA = "0xF67AC4", Offset = "0xF67AC4", VA = "0xF67AC4")]
	private static extern long criAtomExPlayer_GetTime(IntPtr player);

	[PreserveSig]
	[Token(Token = "0x60003DA")]
	[Address(RVA = "0xF647B4", Offset = "0xF647B4", VA = "0xF647B4")]
	private static extern void criAtomExPlayer_SetFormat(IntPtr player, CriAtomEx.Format format);

	[PreserveSig]
	[Token(Token = "0x60003DB")]
	[Address(RVA = "0xF6484C", Offset = "0xF6484C", VA = "0xF6484C")]
	private static extern void criAtomExPlayer_SetNumChannels(IntPtr player, int num_channels);

	[PreserveSig]
	[Token(Token = "0x60003DC")]
	[Address(RVA = "0xF648E4", Offset = "0xF648E4", VA = "0xF648E4")]
	private static extern void criAtomExPlayer_SetSamplingRate(IntPtr player, int sampling_rate);

	[PreserveSig]
	[Token(Token = "0x60003DD")]
	[Address(RVA = "0xF64A1C", Offset = "0xF64A1C", VA = "0xF64A1C")]
	private static extern IntPtr CRIWARE22E9B625(IntPtr player, int capacity, int max_path, bool stopOnEmpty);

	[PreserveSig]
	[Token(Token = "0x60003DE")]
	[Address(RVA = "0xF6403C", Offset = "0xF6403C", VA = "0xF6403C")]
	private static extern void CRIWARE693E0CA2(IntPtr pool);

	[PreserveSig]
	[Token(Token = "0x60003DF")]
	[Address(RVA = "0xF64B2C", Offset = "0xF64B2C", VA = "0xF64B2C")]
	private static extern int CRIWARE9D24E4DD(IntPtr pool);

	[PreserveSig]
	[Token(Token = "0x60003E0")]
	[Address(RVA = "0xF64C5C", Offset = "0xF64C5C", VA = "0xF64C5C")]
	private static extern bool CRIWAREBDB22DA2(IntPtr pool, IntPtr binder, string path, bool repeat, int max_path);

	[PreserveSig]
	[Token(Token = "0x60003E1")]
	[Address(RVA = "0xF64DD0", Offset = "0xF64DD0", VA = "0xF64DD0")]
	private static extern bool CRIWARED285FCAF(IntPtr pool, IntPtr binder, int id, bool repeat);

	[PreserveSig]
	[Token(Token = "0x60003E2")]
	[Address(RVA = "0xF64F18", Offset = "0xF64F18", VA = "0xF64F18")]
	private static extern bool CRIWARE4B47A141(IntPtr pool, byte[] buffer, int size, bool repeat);

	[PreserveSig]
	[Token(Token = "0x60003E3")]
	[Address(RVA = "0xF65068", Offset = "0xF65068", VA = "0xF65068")]
	private static extern bool CRIWARE4B47A141(IntPtr pool, IntPtr buffer, int size, bool repeat);

	[PreserveSig]
	[Token(Token = "0x60003E4")]
	[Address(RVA = "0xF651BC", Offset = "0xF651BC", VA = "0xF651BC")]
	private static extern bool CRIWAREB1D71078(IntPtr pool, IntPtr acbhn, string name, bool repeat);

	[PreserveSig]
	[Token(Token = "0x60003E5")]
	[Address(RVA = "0xF65550", Offset = "0xF65550", VA = "0xF65550")]
	private static extern void CRIWARE0C3ECA83(IntPtr pool);

	[PreserveSig]
	[Token(Token = "0x60003E6")]
	[Address(RVA = "0xF66920", Offset = "0xF66920", VA = "0xF66920")]
	private static extern void criAtomExPlayer_SetStartTime(IntPtr player, long start_time_ms);

	[PreserveSig]
	[Token(Token = "0x60003E7")]
	[Address(RVA = "0xF683C8", Offset = "0xF683C8", VA = "0xF683C8")]
	private static extern void criAtomExPlayer_SetSequencePrepareTime(IntPtr player, uint seq_prep_time_ms);

	[PreserveSig]
	[Token(Token = "0x60003E8")]
	[Address(RVA = "0xF67F5C", Offset = "0xF67F5C", VA = "0xF67F5C")]
	private static extern void criAtomExPlayer_LimitLoopCount(IntPtr player, int count);

	[PreserveSig]
	[Token(Token = "0x60003E9")]
	[Address(RVA = "0xF6791C", Offset = "0xF6791C", VA = "0xF6791C")]
	private static extern void criAtomExPlayer_Update(IntPtr player, uint id);

	[PreserveSig]
	[Token(Token = "0x60003EA")]
	[Address(RVA = "0xF679B4", Offset = "0xF679B4", VA = "0xF679B4")]
	private static extern void criAtomExPlayer_UpdateAll(IntPtr player);

	[PreserveSig]
	[Token(Token = "0x60003EB")]
	[Address(RVA = "0xF67A3C", Offset = "0xF67A3C", VA = "0xF67A3C")]
	private static extern void criAtomExPlayer_ResetParameters(IntPtr player);

	[PreserveSig]
	[Token(Token = "0x60003EC")]
	[Address(RVA = "0xF67BCC", Offset = "0xF67BCC", VA = "0xF67BCC")]
	private static extern float criAtomExPlayer_GetParameterFloat32(IntPtr player, CriAtomEx.Parameter id);

	[PreserveSig]
	[Token(Token = "0x60003ED")]
	[Address(RVA = "0xF67C64", Offset = "0xF67C64", VA = "0xF67C64")]
	private static extern uint criAtomExPlayer_GetParameterUint32(IntPtr player, CriAtomEx.Parameter id);

	[PreserveSig]
	[Token(Token = "0x60003EE")]
	[Address(RVA = "0xF67CFC", Offset = "0xF67CFC", VA = "0xF67CFC")]
	private static extern int criAtomExPlayer_GetParameterSint32(IntPtr player, CriAtomEx.Parameter id);

	[PreserveSig]
	[Token(Token = "0x60003EF")]
	[Address(RVA = "0xF680AC", Offset = "0xF680AC", VA = "0xF680AC")]
	private static extern IntPtr criAtomExPlayer_GetPlayerParameter(IntPtr player);

	[PreserveSig]
	[Token(Token = "0x60003F0")]
	[Address(RVA = "0xF6812C", Offset = "0xF6812C", VA = "0xF6812C")]
	private static extern void criAtomExPlayerParameter_RemoveParameter(IntPtr player_parameter, ushort id);

	[PreserveSig]
	[Token(Token = "0x60003F1")]
	[Address(RVA = "0xF6579C", Offset = "0xF6579C", VA = "0xF6579C")]
	private static extern void criAtomExPlayer_SetVolume(IntPtr player, float volume);

	[PreserveSig]
	[Token(Token = "0x60003F2")]
	[Address(RVA = "0xF65834", Offset = "0xF65834", VA = "0xF65834")]
	private static extern void criAtomExPlayer_SetPitch(IntPtr player, float pitch);

	[PreserveSig]
	[Token(Token = "0x60003F3")]
	[Address(RVA = "0xF658CC", Offset = "0xF658CC", VA = "0xF658CC")]
	private static extern void criAtomExPlayer_SetPlaybackRatio(IntPtr player, float playback_ratio);

	[PreserveSig]
	[Token(Token = "0x60003F4")]
	[Address(RVA = "0xF65964", Offset = "0xF65964", VA = "0xF65964")]
	private static extern void criAtomExPlayer_SetPan3dAngle(IntPtr player, float pan3d_angle);

	[PreserveSig]
	[Token(Token = "0x60003F5")]
	[Address(RVA = "0xF659FC", Offset = "0xF659FC", VA = "0xF659FC")]
	private static extern void criAtomExPlayer_SetPan3dInteriorDistance(IntPtr player, float pan3d_interior_distance);

	[PreserveSig]
	[Token(Token = "0x60003F6")]
	[Address(RVA = "0xF65A94", Offset = "0xF65A94", VA = "0xF65A94")]
	private static extern void criAtomExPlayer_SetPan3dVolume(IntPtr player, float pan3d_volume);

	[PreserveSig]
	[Token(Token = "0x60003F7")]
	[Address(RVA = "0xF65B2C", Offset = "0xF65B2C", VA = "0xF65B2C")]
	private static extern void criAtomExPlayer_SetPanType(IntPtr player, CriAtomEx.PanType panType);

	[PreserveSig]
	[Token(Token = "0x60003F8")]
	[Address(RVA = "0xF65BC4", Offset = "0xF65BC4", VA = "0xF65BC4")]
	private static extern void criAtomExPlayer_SetSendLevel(IntPtr player, int channel, CriAtomEx.Speaker id, float level);

	[PreserveSig]
	[Token(Token = "0x60003F9")]
	[Address(RVA = "0xF65F50", Offset = "0xF65F50", VA = "0xF65F50")]
	private static extern void criAtomExPlayer_SetBusSendLevel(IntPtr player, int bus_id, float level);

	[PreserveSig]
	[Token(Token = "0x60003FA")]
	[Address(RVA = "0xF65DD4", Offset = "0xF65DD4", VA = "0xF65DD4")]
	private static extern void criAtomExPlayer_SetBusSendLevelByName(IntPtr player, string bus_name, float level);

	[PreserveSig]
	[Token(Token = "0x60003FB")]
	[Address(RVA = "0xF65E90", Offset = "0xF65E90", VA = "0xF65E90")]
	private static extern bool criAtomExPlayer_GetBusSendLevelByName(IntPtr player, string bus_name, out float level);

	[PreserveSig]
	[Token(Token = "0x60003FC")]
	[Address(RVA = "0xF66174", Offset = "0xF66174", VA = "0xF66174")]
	private static extern void criAtomExPlayer_SetBusSendLevelOffset(IntPtr player, int bus_id, float level_offset);

	[PreserveSig]
	[Token(Token = "0x60003FD")]
	[Address(RVA = "0xF65FF8", Offset = "0xF65FF8", VA = "0xF65FF8")]
	private static extern void criAtomExPlayer_SetBusSendLevelOffsetByName(IntPtr player, string bus_name, float level_offset);

	[PreserveSig]
	[Token(Token = "0x60003FE")]
	[Address(RVA = "0xF660B4", Offset = "0xF660B4", VA = "0xF660B4")]
	private static extern bool criAtomExPlayer_GetBusSendLevelOffsetByName(IntPtr player, string bus_name, out float level_offset);

	[PreserveSig]
	[Token(Token = "0x60003FF")]
	[Address(RVA = "0xF65D34", Offset = "0xF65D34", VA = "0xF65D34")]
	private static extern void criAtomExPlayer_SetBandpassFilterParameters(IntPtr player, float cof_low, float cof_high);

	[PreserveSig]
	[Token(Token = "0x6000400")]
	[Address(RVA = "0xF65C74", Offset = "0xF65C74", VA = "0xF65C74")]
	private static extern void criAtomExPlayer_SetBiquadFilterParameters(IntPtr player, CriAtomEx.BiquadFilterType type, float frequency, float gain, float q);

	[PreserveSig]
	[Token(Token = "0x6000401")]
	[Address(RVA = "0xF66ECC", Offset = "0xF66ECC", VA = "0xF66ECC")]
	private static extern void criAtomExPlayer_SetVoicePriority(IntPtr player, int priority);

	[PreserveSig]
	[Token(Token = "0x6000402")]
	[Address(RVA = "0xF66F64", Offset = "0xF66F64", VA = "0xF66F64")]
	private static extern void criAtomExPlayer_SetVoiceControlMethod(IntPtr player, CriAtomEx.VoiceControlMethod method);

	[PreserveSig]
	[Token(Token = "0x6000403")]
	[Address(RVA = "0xF66438", Offset = "0xF66438", VA = "0xF66438")]
	private static extern void criAtomExPlayer_SetAisacControlById(IntPtr player, ushort control_id, float control_value);

	[PreserveSig]
	[Token(Token = "0x6000404")]
	[Address(RVA = "0xF66374", Offset = "0xF66374", VA = "0xF66374")]
	private static extern void criAtomExPlayer_SetAisacControlByName(IntPtr player, string control_name, float control_value);

	[PreserveSig]
	[Token(Token = "0x6000405")]
	[Address(RVA = "0xF66798", Offset = "0xF66798", VA = "0xF66798")]
	private static extern void criAtomExPlayer_Set3dSourceHn(IntPtr player, IntPtr source);

	[PreserveSig]
	[Token(Token = "0x6000406")]
	[Address(RVA = "0xF66888", Offset = "0xF66888", VA = "0xF66888")]
	private static extern void criAtomExPlayer_Set3dListenerHn(IntPtr player, IntPtr listener);

	[PreserveSig]
	[Token(Token = "0x6000407")]
	[Address(RVA = "0xF66C68", Offset = "0xF66C68", VA = "0xF66C68")]
	private static extern void criAtomExPlayer_SetCategoryById(IntPtr player, uint category_id);

	[PreserveSig]
	[Token(Token = "0x6000408")]
	[Address(RVA = "0xF66D00", Offset = "0xF66D00", VA = "0xF66D00")]
	private static extern void criAtomExPlayer_SetCategoryByName(IntPtr player, string category_name);

	[PreserveSig]
	[Token(Token = "0x6000409")]
	[Address(RVA = "0xF66DAC", Offset = "0xF66DAC", VA = "0xF66DAC")]
	private static extern void criAtomExPlayer_UnsetCategory(IntPtr player);

	[PreserveSig]
	[Token(Token = "0x600040A")]
	[Address(RVA = "0xF66E34", Offset = "0xF66E34", VA = "0xF66E34")]
	private static extern void criAtomExPlayer_SetCuePriority(IntPtr player, int cue_priority);

	[PreserveSig]
	[Token(Token = "0x600040B")]
	[Address(RVA = "0xF66FFC", Offset = "0xF66FFC", VA = "0xF66FFC")]
	private static extern void criAtomExPlayer_SetPreDelayTime(IntPtr player, float predelay_time_ms);

	[PreserveSig]
	[Token(Token = "0x600040C")]
	[Address(RVA = "0xF67094", Offset = "0xF67094", VA = "0xF67094")]
	private static extern void criAtomExPlayer_SetEnvelopeAttackTime(IntPtr player, float attack_time_ms);

	[PreserveSig]
	[Token(Token = "0x600040D")]
	[Address(RVA = "0xF6712C", Offset = "0xF6712C", VA = "0xF6712C")]
	private static extern void criAtomExPlayer_SetEnvelopeHoldTime(IntPtr player, float hold_time_ms);

	[PreserveSig]
	[Token(Token = "0x600040E")]
	[Address(RVA = "0xF671C4", Offset = "0xF671C4", VA = "0xF671C4")]
	private static extern void criAtomExPlayer_SetEnvelopeDecayTime(IntPtr player, float decay_time_ms);

	[PreserveSig]
	[Token(Token = "0x600040F")]
	[Address(RVA = "0xF6725C", Offset = "0xF6725C", VA = "0xF6725C")]
	private static extern void criAtomExPlayer_SetEnvelopeReleaseTime(IntPtr player, float release_time_ms);

	[PreserveSig]
	[Token(Token = "0x6000410")]
	[Address(RVA = "0xF672F4", Offset = "0xF672F4", VA = "0xF672F4")]
	private static extern void criAtomExPlayer_SetEnvelopeSustainLevel(IntPtr player, float susutain_level);

	[PreserveSig]
	[Token(Token = "0x6000411")]
	[Address(RVA = "0xF673D4", Offset = "0xF673D4", VA = "0xF673D4")]
	private static extern void criAtomExPlayer_AttachFader(IntPtr player, IntPtr config, IntPtr work, int work_size);

	[PreserveSig]
	[Token(Token = "0x6000412")]
	[Address(RVA = "0xF6621C", Offset = "0xF6621C", VA = "0xF6621C")]
	private static extern void criAtomExPlayer_AttachAisac(IntPtr player, string globalAisacName);

	[PreserveSig]
	[Token(Token = "0x6000413")]
	[Address(RVA = "0xF662C8", Offset = "0xF662C8", VA = "0xF662C8")]
	private static extern void criAtomExPlayer_DetachAisac(IntPtr player, string globalAisacName);

	[PreserveSig]
	[Token(Token = "0x6000414")]
	[Address(RVA = "0xF67484", Offset = "0xF67484", VA = "0xF67484")]
	private static extern void criAtomExPlayer_DetachFader(IntPtr player);

	[PreserveSig]
	[Token(Token = "0x6000415")]
	[Address(RVA = "0xF6750C", Offset = "0xF6750C", VA = "0xF6750C")]
	private static extern void criAtomExPlayer_SetFadeOutTime(IntPtr player, int ms);

	[PreserveSig]
	[Token(Token = "0x6000416")]
	[Address(RVA = "0xF675A4", Offset = "0xF675A4", VA = "0xF675A4")]
	private static extern void criAtomExPlayer_SetFadeInTime(IntPtr player, int ms);

	[PreserveSig]
	[Token(Token = "0x6000417")]
	[Address(RVA = "0xF6763C", Offset = "0xF6763C", VA = "0xF6763C")]
	private static extern void criAtomExPlayer_SetFadeInStartOffset(IntPtr player, int ms);

	[PreserveSig]
	[Token(Token = "0x6000418")]
	[Address(RVA = "0xF676D4", Offset = "0xF676D4", VA = "0xF676D4")]
	private static extern void criAtomExPlayer_SetFadeOutEndDelay(IntPtr player, int ms);

	[PreserveSig]
	[Token(Token = "0x6000419")]
	[Address(RVA = "0xF6776C", Offset = "0xF6776C", VA = "0xF6776C")]
	private static extern bool criAtomExPlayer_IsFading(IntPtr player);

	[PreserveSig]
	[Token(Token = "0x600041A")]
	[Address(RVA = "0xF677FC", Offset = "0xF677FC", VA = "0xF677FC")]
	private static extern void criAtomExPlayer_ResetFaderParameters(IntPtr player);

	[PreserveSig]
	[Token(Token = "0x600041B")]
	[Address(RVA = "0xF67884", Offset = "0xF67884", VA = "0xF67884")]
	private static extern void criAtomExPlayer_SetGroupNumber(IntPtr player, int group_no);

	[PreserveSig]
	[Token(Token = "0x600041C")]
	[Address(RVA = "0xF66698", Offset = "0xF66698", VA = "0xF66698")]
	private static extern bool criAtomExPlayer_GetAttachedAisacInfo(IntPtr player, int aisac_attached_index, IntPtr aisac_info);

	[PreserveSig]
	[Token(Token = "0x600041D")]
	[Address(RVA = "0xF669B8", Offset = "0xF669B8", VA = "0xF669B8")]
	private static extern void criAtomExPlayer_SetFirstBlockIndex(IntPtr player, int index);

	[PreserveSig]
	[Token(Token = "0x600041E")]
	[Address(RVA = "0xF66A50", Offset = "0xF66A50", VA = "0xF66A50")]
	private static extern void criAtomExPlayer_SetSelectorLabel(IntPtr player, string selector, string label);

	[PreserveSig]
	[Token(Token = "0x600041F")]
	[Address(RVA = "0xF66B18", Offset = "0xF66B18", VA = "0xF66B18")]
	private static extern void criAtomExPlayer_UnsetSelectorLabel(IntPtr player, string selector, string label);

	[PreserveSig]
	[Token(Token = "0x6000420")]
	[Address(RVA = "0xF66BE0", Offset = "0xF66BE0", VA = "0xF66BE0")]
	private static extern void criAtomExPlayer_ClearSelectorLabels(IntPtr player);

	[PreserveSig]
	[Token(Token = "0x6000421")]
	[Address(RVA = "0xF67D94", Offset = "0xF67D94", VA = "0xF67D94")]
	private static extern void criAtomExPlayer_SetSoundRendererType(IntPtr player, CriAtomEx.SoundRendererType type);

	[PreserveSig]
	[Token(Token = "0x6000422")]
	[Address(RVA = "0xF67E2C", Offset = "0xF67E2C", VA = "0xF67E2C")]
	private static extern void criAtomExPlayer_SetRandomSeed(IntPtr player, uint seed);

	[PreserveSig]
	[Token(Token = "0x6000423")]
	[Address(RVA = "0xF689E4", Offset = "0xF689E4", VA = "0xF689E4")]
	private static extern void CRIWARE80A6337D(IntPtr player, bool sw);

	[PreserveSig]
	[Token(Token = "0x6000424")]
	[Address(RVA = "0xF681C4", Offset = "0xF681C4", VA = "0xF681C4")]
	private static extern void criAtomExPlayer_SetAsrRackId(IntPtr player, int asr_rack_id);

	[PreserveSig]
	[Token(Token = "0x6000425")]
	[Address(RVA = "0xF68320", Offset = "0xF68320", VA = "0xF68320")]
	private static extern void criAtomExPlayer_SetDspParameter(IntPtr player, int id, float value);

	[PreserveSig]
	[Token(Token = "0x6000426")]
	[Address(RVA = "0xF68474", Offset = "0xF68474", VA = "0xF68474")]
	private static extern void criAtomExPlayer_AttachTween(IntPtr player, IntPtr tween);

	[PreserveSig]
	[Token(Token = "0x6000427")]
	[Address(RVA = "0xF68520", Offset = "0xF68520", VA = "0xF68520")]
	private static extern void criAtomExPlayer_DetachTween(IntPtr player, IntPtr tween);

	[PreserveSig]
	[Token(Token = "0x6000428")]
	[Address(RVA = "0xF685B8", Offset = "0xF685B8", VA = "0xF685B8")]
	private static extern void criAtomExPlayer_DetachTweenAll(IntPtr player);
}
[Token(Token = "0x2000020")]
[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9A3F60", Offset = "0x9A3F60")]
public class CriAtomExPlayerOutputAnalyzer : CriAtomExOutputAnalyzer
{
	[Token(Token = "0x200013A")]
	public enum Type
	{
		[Token(Token = "0x40007A2")]
		LevelMeter,
		[Token(Token = "0x40007A3")]
		SpectrumAnalyzer,
		[Token(Token = "0x40007A4")]
		PcmCapture
	}

	[Token(Token = "0x200013B")]
	public new struct Config
	{
		[Token(Token = "0x40007A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int num_spectrum_analyzer_bands;

		[Token(Token = "0x40007A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int num_stored_output_data;

		[Token(Token = "0x6000CA5")]
		[Address(RVA = "0x8A9460", Offset = "0x8A9460", VA = "0x8A9460")]
		public Config(int num_spectrum_analyzer_bands = 8, int num_stored_output_data = 4096)
		{
		}
	}

	[Token(Token = "0x6000429")]
	[Address(RVA = "0xF68A74", Offset = "0xF68A74", VA = "0xF68A74")]
	public CriAtomExPlayerOutputAnalyzer(Type[] types, [Optional] Config[] configs)
	{
	}
}
[Token(Token = "0x2000021")]
public class CriAtomExSoundObject : CriDisposable
{
	[Token(Token = "0x200013C")]
	private struct Config
	{
		[Token(Token = "0x40007A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool enableVoiceLimitScope;

		[Token(Token = "0x40007A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public bool enableCategoryCueLimitScope;
	}

	[Token(Token = "0x4000099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private IntPtr handle;

	[Token(Token = "0x1700003C")]
	public IntPtr nativeHandle
	{
		[Token(Token = "0x600042A")]
		[Address(RVA = "0xF69340", Offset = "0xF69340", VA = "0xF69340")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x600042B")]
	[Address(RVA = "0xF69348", Offset = "0xF69348", VA = "0xF69348")]
	public CriAtomExSoundObject(bool enableVoiceLimitScope, bool enableCategoryCueLimitScope)
	{
	}

	[Token(Token = "0x600042C")]
	[Address(RVA = "0xF69530", Offset = "0xF69530", VA = "0xF69530", Slot = "5")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x600042D")]
	[Address(RVA = "0xF69664", Offset = "0xF69664", VA = "0xF69664")]
	public void AddPlayer(CriAtomExPlayer player)
	{
	}

	[Token(Token = "0x600042E")]
	[Address(RVA = "0xF69710", Offset = "0xF69710", VA = "0xF69710")]
	public void DeletePlayer(CriAtomExPlayer player)
	{
	}

	[Token(Token = "0x600042F")]
	[Address(RVA = "0xF697BC", Offset = "0xF697BC", VA = "0xF697BC")]
	public void DeleteAllPlayers()
	{
	}

	[Token(Token = "0x6000430")]
	[Address(RVA = "0xF69844", Offset = "0xF69844", VA = "0xF69844", Slot = "1")]
	~CriAtomExSoundObject()
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000431")]
	[Address(RVA = "0xF6946C", Offset = "0xF6946C", VA = "0xF6946C")]
	private static extern IntPtr criAtomExSoundObject_Create(ref Config config, IntPtr work, int work_size);

	[PreserveSig]
	[Token(Token = "0x6000432")]
	[Address(RVA = "0xF695E4", Offset = "0xF695E4", VA = "0xF695E4")]
	private static extern void criAtomExSoundObject_Destroy(IntPtr soundObject);

	[PreserveSig]
	[Token(Token = "0x6000433")]
	[Address(RVA = "0xF69680", Offset = "0xF69680", VA = "0xF69680")]
	private static extern void criAtomExSoundObject_AddPlayer(IntPtr soundObject, IntPtr player);

	[PreserveSig]
	[Token(Token = "0x6000434")]
	[Address(RVA = "0xF6972C", Offset = "0xF6972C", VA = "0xF6972C")]
	private static extern void criAtomExSoundObject_DeletePlayer(IntPtr soundObject, IntPtr player);

	[PreserveSig]
	[Token(Token = "0x6000435")]
	[Address(RVA = "0xF697C4", Offset = "0xF697C4", VA = "0xF697C4")]
	private static extern void criAtomExSoundObject_DeleteAllPlayers(IntPtr soundObject);
}
[Token(Token = "0x2000022")]
public class CriAtomExTween : CriDisposable
{
	[Token(Token = "0x200013D")]
	public enum ParameterType
	{
		[Token(Token = "0x40007AA")]
		Basic,
		[Token(Token = "0x40007AB")]
		Aisac
	}

	[Token(Token = "0x200013E")]
	private struct Config
	{
		[StructLayout(2)]
		[Token(Token = "0x20001ED")]
		public struct Target
		{
			[Token(Token = "0x4000B0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public CriAtomEx.Parameter parameterId;

			[Token(Token = "0x4000B0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public uint aisacIds;
		}

		[Token(Token = "0x40007AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Target target;

		[Token(Token = "0x40007AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ParameterType parameterType;
	}

	[Token(Token = "0x400009A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private IntPtr handle;

	[Token(Token = "0x1700003D")]
	internal IntPtr nativeHandle
	{
		[Token(Token = "0x6000436")]
		[Address(RVA = "0xF69AC4", Offset = "0xF69AC4", VA = "0xF69AC4")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x1700003E")]
	public float Value
	{
		[Token(Token = "0x600043C")]
		[Address(RVA = "0xF69DC0", Offset = "0xF69DC0", VA = "0xF69DC0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700003F")]
	public bool IsActive
	{
		[Token(Token = "0x600043D")]
		[Address(RVA = "0xF69E48", Offset = "0xF69E48", VA = "0xF69E48")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000437")]
	[Address(RVA = "0xF69ACC", Offset = "0xF69ACC", VA = "0xF69ACC")]
	public CriAtomExTween()
	{
	}

	[Token(Token = "0x6000438")]
	[Address(RVA = "0xF69AD8", Offset = "0xF69AD8", VA = "0xF69AD8")]
	public CriAtomExTween(CriAtomEx.Parameter parameterId)
	{
	}

	[Token(Token = "0x6000439")]
	[Address(RVA = "0xF69BFC", Offset = "0xF69BFC", VA = "0xF69BFC")]
	public CriAtomExTween(uint aisacId)
	{
	}

	[Token(Token = "0x600043A")]
	[Address(RVA = "0xF69AE4", Offset = "0xF69AE4", VA = "0xF69AE4")]
	public CriAtomExTween(ParameterType parameterType, uint targetId)
	{
	}

	[Token(Token = "0x600043B")]
	[Address(RVA = "0xF69CA0", Offset = "0xF69CA0", VA = "0xF69CA0", Slot = "5")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x600043E")]
	[Address(RVA = "0xF69ED8", Offset = "0xF69ED8", VA = "0xF69ED8")]
	public void MoveTo(ushort durationMs, float value)
	{
	}

	[Token(Token = "0x600043F")]
	[Address(RVA = "0xF69F80", Offset = "0xF69F80", VA = "0xF69F80")]
	public void MoveFrom(ushort durationMs, float value)
	{
	}

	[Token(Token = "0x6000440")]
	[Address(RVA = "0xF6A028", Offset = "0xF6A028", VA = "0xF6A028")]
	public void Stop()
	{
	}

	[Token(Token = "0x6000441")]
	[Address(RVA = "0xF6A0B0", Offset = "0xF6A0B0", VA = "0xF6A0B0")]
	public void Reset()
	{
	}

	[Token(Token = "0x6000442")]
	[Address(RVA = "0xF6A138", Offset = "0xF6A138", VA = "0xF6A138", Slot = "1")]
	~CriAtomExTween()
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000443")]
	[Address(RVA = "0xF69C08", Offset = "0xF69C08", VA = "0xF69C08")]
	private static extern IntPtr criAtomExTween_Create(ref Config config, IntPtr work, int work_size);

	[PreserveSig]
	[Token(Token = "0x6000444")]
	[Address(RVA = "0xF69D40", Offset = "0xF69D40", VA = "0xF69D40")]
	private static extern void criAtomExTween_Destroy(IntPtr tween);

	[PreserveSig]
	[Token(Token = "0x6000445")]
	[Address(RVA = "0xF69DC8", Offset = "0xF69DC8", VA = "0xF69DC8")]
	private static extern float criAtomExTween_GetValue(IntPtr tween);

	[PreserveSig]
	[Token(Token = "0x6000446")]
	[Address(RVA = "0xF69EE0", Offset = "0xF69EE0", VA = "0xF69EE0")]
	private static extern void criAtomExTween_MoveTo(IntPtr tween, ushort time_ms, float value);

	[PreserveSig]
	[Token(Token = "0x6000447")]
	[Address(RVA = "0xF69F88", Offset = "0xF69F88", VA = "0xF69F88")]
	private static extern void criAtomExTween_MoveFrom(IntPtr tween, ushort time_ms, float value);

	[PreserveSig]
	[Token(Token = "0x6000448")]
	[Address(RVA = "0xF6A030", Offset = "0xF6A030", VA = "0xF6A030")]
	private static extern void criAtomExTween_Stop(IntPtr tween);

	[PreserveSig]
	[Token(Token = "0x6000449")]
	[Address(RVA = "0xF6A0B8", Offset = "0xF6A0B8", VA = "0xF6A0B8")]
	private static extern void criAtomExTween_Reset(IntPtr tween);

	[PreserveSig]
	[Token(Token = "0x600044A")]
	[Address(RVA = "0xF69E50", Offset = "0xF69E50", VA = "0xF69E50")]
	private static extern bool criAtomExTween_IsActive(IntPtr tween);
}
[Token(Token = "0x2000023")]
public abstract class CriAtomExVoicePool : CriDisposable
{
	[Token(Token = "0x200013F")]
	public enum VoicePoolId
	{
		[Token(Token = "0x40007AF")]
		StandardMemory = 0,
		[Token(Token = "0x40007B0")]
		StandardStreaming = 1,
		[Token(Token = "0x40007B1")]
		HcaMxMemory = 4,
		[Token(Token = "0x40007B2")]
		HcaMxStreaming = 5,
		[Token(Token = "0x40007B3")]
		LowLatencyMemory = 2,
		[Token(Token = "0x40007B4")]
		LowLatencyStreaming = 3
	}

	[Token(Token = "0x2000140")]
	public enum PitchShifterMode
	{
		[Token(Token = "0x40007B6")]
		Music,
		[Token(Token = "0x40007B7")]
		Vocal,
		[Token(Token = "0x40007B8")]
		SoundEffect,
		[Token(Token = "0x40007B9")]
		Speech
	}

	[Token(Token = "0x2000141")]
	public struct UsedVoicesInfo
	{
		[Token(Token = "0x40007BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int numUsedVoices;

		[Token(Token = "0x40007BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int numPoolVoices;
	}

	[Token(Token = "0x2000142")]
	protected struct PlayerConfig
	{
		[Token(Token = "0x40007BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int maxChannels;

		[Token(Token = "0x40007BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int maxSamplingRate;

		[Token(Token = "0x40007BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool streamingFlag;

		[Token(Token = "0x40007BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int soundRendererType;

		[Token(Token = "0x40007C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int decodeLatency;
	}

	[Token(Token = "0x2000143")]
	protected struct VoicePoolConfig
	{
		[Token(Token = "0x40007C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint identifier;

		[Token(Token = "0x40007C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int numVoices;

		[Token(Token = "0x40007C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PlayerConfig playerConfig;
	}

	[Token(Token = "0x2000144")]
	private struct PitchShifterConfig
	{
		[Token(Token = "0x40007C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int mode;

		[Token(Token = "0x40007C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int windowSize;

		[Token(Token = "0x40007C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int overlapTimes;
	}

	[Token(Token = "0x2000145")]
	private struct ExPitchShifterConfig
	{
		[Token(Token = "0x40007C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int numDsp;

		[Token(Token = "0x40007C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int maxChannels;

		[Token(Token = "0x40007C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int maxSamplingRate;

		[Token(Token = "0x40007CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public PitchShifterConfig config;
	}

	[Token(Token = "0x2000146")]
	private struct TimeStretchConfig
	{
		[Token(Token = "0x40007CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int reserved;
	}

	[Token(Token = "0x2000147")]
	private struct ExTimeStretchConfig
	{
		[Token(Token = "0x40007CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int numDsp;

		[Token(Token = "0x40007CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int maxChannels;

		[Token(Token = "0x40007CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int maxSamplingRate;

		[Token(Token = "0x40007CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public TimeStretchConfig config;
	}

	[Token(Token = "0x400009B")]
	public const int StandardMemoryAsrVoicePoolId = 0;

	[Token(Token = "0x400009C")]
	public const int StandardStreamingAsrVoicePoolId = 1;

	[Token(Token = "0x400009D")]
	public const int StandardMemoryNsrVoicePoolId = 2;

	[Token(Token = "0x400009E")]
	public const int StandardStreamingNsrVoicePoolId = 3;

	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected IntPtr _handle;

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected uint _identifier;

	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	protected int _numVoices;

	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected int _maxChannels;

	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	protected int _maxSamplingRate;

	[Token(Token = "0x17000040")]
	public IntPtr nativeHandle
	{
		[Token(Token = "0x600044C")]
		[Address(RVA = "0xF6A270", Offset = "0xF6A270", VA = "0xF6A270")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x17000041")]
	public uint identifier
	{
		[Token(Token = "0x600044D")]
		[Address(RVA = "0xF6A278", Offset = "0xF6A278", VA = "0xF6A278")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x17000042")]
	public int numVoices
	{
		[Token(Token = "0x600044E")]
		[Address(RVA = "0xF6A280", Offset = "0xF6A280", VA = "0xF6A280")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000043")]
	public int maxChannels
	{
		[Token(Token = "0x600044F")]
		[Address(RVA = "0xF6A288", Offset = "0xF6A288", VA = "0xF6A288")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000044")]
	public int maxSamplingRate
	{
		[Token(Token = "0x6000450")]
		[Address(RVA = "0xF6A290", Offset = "0xF6A290", VA = "0xF6A290")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x600044B")]
	[Address(RVA = "0xF6A1A8", Offset = "0xF6A1A8", VA = "0xF6A1A8")]
	public static UsedVoicesInfo GetNumUsedVoices(VoicePoolId voicePoolId)
	{
		return default(UsedVoicesInfo);
	}

	[Token(Token = "0x6000451")]
	[Address(RVA = "0xF6A298", Offset = "0xF6A298", VA = "0xF6A298", Slot = "5")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x6000452")]
	[Address(RVA = "0xF6A3CC", Offset = "0xF6A3CC", VA = "0xF6A3CC")]
	public UsedVoicesInfo GetNumUsedVoices()
	{
		return default(UsedVoicesInfo);
	}

	[Token(Token = "0x6000453")]
	[Address(RVA = "0xF6A4E8", Offset = "0xF6A4E8", VA = "0xF6A4E8")]
	public void AttachDspTimeStretch()
	{
	}

	[Token(Token = "0x6000454")]
	[Address(RVA = "0xF6A614", Offset = "0xF6A614", VA = "0xF6A614")]
	public void AttachDspPitchShifter(PitchShifterMode mode = PitchShifterMode.Music, int windosSize = 1024, int overlapTimes = 4)
	{
	}

	[Token(Token = "0x6000455")]
	[Address(RVA = "0xF6A764", Offset = "0xF6A764", VA = "0xF6A764")]
	public void DetachDsp()
	{
	}

	[Token(Token = "0x6000456")]
	[Address(RVA = "0xF6A848", Offset = "0xF6A848", VA = "0xF6A848", Slot = "1")]
	~CriAtomExVoicePool()
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000457")]
	[Address(RVA = "0xF6A1D8", Offset = "0xF6A1D8", VA = "0xF6A1D8")]
	private static extern void CRIWARE1E2249AB(int voice_pool_id, out int num_used_voices, out int num_pool_voices);

	[PreserveSig]
	[Token(Token = "0x6000458")]
	[Address(RVA = "0xF6A450", Offset = "0xF6A450", VA = "0xF6A450")]
	private static extern void criAtomExVoicePool_GetNumUsedVoices(IntPtr pool, out int num_used_voices, out int num_pool_voices);

	[PreserveSig]
	[Token(Token = "0x6000459")]
	[Address(RVA = "0xF6A34C", Offset = "0xF6A34C", VA = "0xF6A34C")]
	public static extern void criAtomExVoicePool_Free(IntPtr pool);

	[PreserveSig]
	[Token(Token = "0x600045A")]
	[Address(RVA = "0xF6A56C", Offset = "0xF6A56C", VA = "0xF6A56C")]
	private static extern void criAtomExVoicePool_AttachDspTimeStretch(IntPtr pool, ref ExTimeStretchConfig config, IntPtr work, int work_size);

	[PreserveSig]
	[Token(Token = "0x600045B")]
	[Address(RVA = "0xF6A6BC", Offset = "0xF6A6BC", VA = "0xF6A6BC")]
	private static extern void criAtomExVoicePool_AttachDspPitchShifter(IntPtr pool, ref ExPitchShifterConfig config, IntPtr work, int work_size);

	[PreserveSig]
	[Token(Token = "0x600045C")]
	[Address(RVA = "0xF6A7C8", Offset = "0xF6A7C8", VA = "0xF6A7C8")]
	private static extern void criAtomExVoicePool_DetachDsp(IntPtr pool);

	[Token(Token = "0x600045D")]
	[Address(RVA = "0xF68D54", Offset = "0xF68D54", VA = "0xF68D54")]
	protected CriAtomExVoicePool()
	{
	}
}
[Token(Token = "0x2000024")]
public class CriAtomExStandardVoicePool : CriAtomExVoicePool
{
	[Token(Token = "0x600045E")]
	[Address(RVA = "0xF698B4", Offset = "0xF698B4", VA = "0xF698B4")]
	public CriAtomExStandardVoicePool(int numVoices, int maxChannels, int maxSamplingRate, bool streamingFlag, uint identifier = 0u)
	{
	}

	[PreserveSig]
	[Token(Token = "0x600045F")]
	[Address(RVA = "0xF699EC", Offset = "0xF699EC", VA = "0xF699EC")]
	private static extern IntPtr criAtomExVoicePool_AllocateStandardVoicePool(ref VoicePoolConfig config, IntPtr work, int work_size);
}
[Token(Token = "0x2000025")]
public class CriAtomExWaveVoicePool : CriAtomExVoicePool
{
	[Token(Token = "0x6000460")]
	[Address(RVA = "0xF6A8B8", Offset = "0xF6A8B8", VA = "0xF6A8B8")]
	public CriAtomExWaveVoicePool(int numVoices, int maxChannels, int maxSamplingRate, bool streamingFlag, uint identifier = 0u)
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000461")]
	[Address(RVA = "0xF6A9F0", Offset = "0xF6A9F0", VA = "0xF6A9F0")]
	private static extern IntPtr criAtomExVoicePool_AllocateWaveVoicePool(ref VoicePoolConfig config, IntPtr work, int work_size);
}
[Token(Token = "0x2000026")]
public class CriAtomExRawPcmVoicePool : CriAtomExVoicePool
{
	[Token(Token = "0x2000148")]
	public enum RawPcmFormat
	{
		[Token(Token = "0x40007D1")]
		Sint16,
		[Token(Token = "0x40007D2")]
		Float32
	}

	[Token(Token = "0x2000149")]
	protected struct RawPcmPlayerConfig
	{
		[Token(Token = "0x40007D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public RawPcmFormat format;

		[Token(Token = "0x40007D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int maxChannels;

		[Token(Token = "0x40007D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int maxSamplingRate;

		[Token(Token = "0x40007D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int soundRendererType;

		[Token(Token = "0x40007D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int decodeLatency;
	}

	[Token(Token = "0x200014A")]
	protected struct RawPcmVoicePoolConfig
	{
		[Token(Token = "0x40007D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint identifier;

		[Token(Token = "0x40007D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int numVoices;

		[Token(Token = "0x40007DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public RawPcmPlayerConfig playerConfig;
	}

	[Token(Token = "0x6000462")]
	[Address(RVA = "0xF68C28", Offset = "0xF68C28", VA = "0xF68C28")]
	public CriAtomExRawPcmVoicePool(int numVoices, int maxChannels, int maxSamplingRate, RawPcmFormat format, uint identifier = 0u)
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000463")]
	[Address(RVA = "0xF68DA0", Offset = "0xF68DA0", VA = "0xF68DA0")]
	private static extern IntPtr criAtomExVoicePool_AllocateRawPcmVoicePool(ref RawPcmVoicePoolConfig config, IntPtr work, int work_size);
}
[Token(Token = "0x2000027")]
public class CriAudioReadStream
{
	[Token(Token = "0x200014B")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x9A4C98", Offset = "0x9A4C98")]
	private delegate uint InternalDelegate(IntPtr cbobj, IntPtr data, uint numSamples);

	[Token(Token = "0x200014C")]
	public delegate uint Delegate(float[][] buffer, uint numSamples);

	[Token(Token = "0x200014D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A4CAC", Offset = "0x9A4CAC")]
	private sealed class <>c__DisplayClass12_0
	{
		[Token(Token = "0x40007DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int bufferSize;

		[Token(Token = "0x40007DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Delegate callback;

		[Token(Token = "0x40007DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int numChannels;

		[Token(Token = "0x6000CAE")]
		[Address(RVA = "0xF7193C", Offset = "0xF7193C", VA = "0xF7193C")]
		public <>c__DisplayClass12_0()
		{
		}
	}

	[Token(Token = "0x200014E")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A4CBC", Offset = "0x9A4CBC")]
	private sealed class <>c__DisplayClass12_1
	{
		[Token(Token = "0x40007DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float[][] buffer;

		[Token(Token = "0x40007DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public <>c__DisplayClass12_0 CS$<>8__locals1;

		[Token(Token = "0x6000CAF")]
		[Address(RVA = "0xF71944", Offset = "0xF71944", VA = "0xF71944")]
		public <>c__DisplayClass12_1()
		{
		}

		[Token(Token = "0x6000CB0")]
		[Address(RVA = "0xF7195C", Offset = "0xF7195C", VA = "0xF7195C")]
		internal uint <.ctor>b__0(IntPtr cbobj, IntPtr data, uint numSamples)
		{
			return default(uint);
		}
	}

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private InternalDelegate internalDelegate;

	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A5224", Offset = "0x9A5224")]
	private IntPtr <callbackFunction>k__BackingField;

	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A5234", Offset = "0x9A5234")]
	private IntPtr <callbackPointer>k__BackingField;

	[Token(Token = "0x17000045")]
	public IntPtr callbackFunction
	{
		[Token(Token = "0x6000464")]
		[Address(RVA = "0xF71720", Offset = "0xF71720", VA = "0xF71720")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ACF14", Offset = "0x9ACF14")]
		get
		{
			return default(IntPtr);
		}
		[Token(Token = "0x6000465")]
		[Address(RVA = "0xF71728", Offset = "0xF71728", VA = "0xF71728")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ACF24", Offset = "0x9ACF24")]
		private set
		{
		}
	}

	[Token(Token = "0x17000046")]
	public IntPtr callbackPointer
	{
		[Token(Token = "0x6000466")]
		[Address(RVA = "0xF71730", Offset = "0xF71730", VA = "0xF71730")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ACF34", Offset = "0x9ACF34")]
		get
		{
			return default(IntPtr);
		}
		[Token(Token = "0x6000467")]
		[Address(RVA = "0xF71738", Offset = "0xF71738", VA = "0xF71738")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ACF44", Offset = "0x9ACF44")]
		private set
		{
		}
	}

	[Token(Token = "0x6000468")]
	[Address(RVA = "0xF71740", Offset = "0xF71740", VA = "0xF71740")]
	public CriAudioReadStream(IntPtr callbackFunction, IntPtr callbackPointer)
	{
	}

	[Token(Token = "0x6000469")]
	[Address(RVA = "0xF71778", Offset = "0xF71778", VA = "0xF71778")]
	public CriAudioReadStream(Delegate callback, int numChannels, int bufferSize = 256)
	{
	}
}
[Token(Token = "0x2000028")]
public class CriAudioWriteStream
{
	[Token(Token = "0x200014F")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x9A4CCC", Offset = "0x9A4CCC")]
	private delegate uint InternalDelegate(IntPtr cbobj, IntPtr data, uint numSamples);

	[Token(Token = "0x2000150")]
	public delegate uint Delegate(float[][] buffer, uint numSamples);

	[Token(Token = "0x2000151")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A4CE0", Offset = "0x9A4CE0")]
	private sealed class <>c__DisplayClass12_0
	{
		[Token(Token = "0x40007E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int bufferSize;

		[Token(Token = "0x40007E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int numChannels;

		[Token(Token = "0x40007E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Delegate callback;

		[Token(Token = "0x6000CB9")]
		[Address(RVA = "0xF72524", Offset = "0xF72524", VA = "0xF72524")]
		public <>c__DisplayClass12_0()
		{
		}
	}

	[Token(Token = "0x2000152")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A4CF0", Offset = "0x9A4CF0")]
	private sealed class <>c__DisplayClass12_1
	{
		[Token(Token = "0x40007E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float[][] buffer;

		[Token(Token = "0x40007E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public <>c__DisplayClass12_0 CS$<>8__locals1;

		[Token(Token = "0x6000CBA")]
		[Address(RVA = "0xF7252C", Offset = "0xF7252C", VA = "0xF7252C")]
		public <>c__DisplayClass12_1()
		{
		}

		[Token(Token = "0x6000CBB")]
		[Address(RVA = "0xF72544", Offset = "0xF72544", VA = "0xF72544")]
		internal uint <.ctor>b__0(IntPtr cbobj, IntPtr data, uint numSamples)
		{
			return default(uint);
		}
	}

	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private InternalDelegate internalDelegate;

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A5244", Offset = "0x9A5244")]
	private IntPtr <callbackFunction>k__BackingField;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A5254", Offset = "0x9A5254")]
	private IntPtr <callbackPointer>k__BackingField;

	[Token(Token = "0x17000047")]
	public IntPtr callbackFunction
	{
		[Token(Token = "0x600046A")]
		[Address(RVA = "0xF7230C", Offset = "0xF7230C", VA = "0xF7230C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ACF54", Offset = "0x9ACF54")]
		get
		{
			return default(IntPtr);
		}
		[Token(Token = "0x600046B")]
		[Address(RVA = "0xF72314", Offset = "0xF72314", VA = "0xF72314")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ACF64", Offset = "0x9ACF64")]
		private set
		{
		}
	}

	[Token(Token = "0x17000048")]
	public IntPtr callbackPointer
	{
		[Token(Token = "0x600046C")]
		[Address(RVA = "0xF7231C", Offset = "0xF7231C", VA = "0xF7231C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ACF74", Offset = "0x9ACF74")]
		get
		{
			return default(IntPtr);
		}
		[Token(Token = "0x600046D")]
		[Address(RVA = "0xF72324", Offset = "0xF72324", VA = "0xF72324")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ACF84", Offset = "0x9ACF84")]
		private set
		{
		}
	}

	[Token(Token = "0x600046E")]
	[Address(RVA = "0xF7232C", Offset = "0xF7232C", VA = "0xF7232C")]
	public CriAudioWriteStream(IntPtr callbackFunction, IntPtr callbackPointer)
	{
	}

	[Token(Token = "0x600046F")]
	[Address(RVA = "0xF72364", Offset = "0xF72364", VA = "0xF72364")]
	public CriAudioWriteStream(Delegate callback, int numChannels, int bufferSize = 256)
	{
	}
}
[Token(Token = "0x2000029")]
public class CriFsLoader : CriDisposable
{
	[Token(Token = "0x2000153")]
	public enum Status
	{
		[Token(Token = "0x40007E6")]
		Stop,
		[Token(Token = "0x40007E7")]
		Loading,
		[Token(Token = "0x40007E8")]
		Complete,
		[Token(Token = "0x40007E9")]
		Error
	}

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private IntPtr handle;

	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GCHandle dstGch;

	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private GCHandle srcGch;

	[Token(Token = "0x6000470")]
	[Address(RVA = "0xF76B8C", Offset = "0xF76B8C", VA = "0xF76B8C")]
	public CriFsLoader()
	{
	}

	[Token(Token = "0x6000471")]
	[Address(RVA = "0xF76F10", Offset = "0xF76F10", VA = "0xF76F10", Slot = "5")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x6000472")]
	[Address(RVA = "0xF76F84", Offset = "0xF76F84", VA = "0xF76F84")]
	private void Dispose(bool disposing)
	{
	}

	[Token(Token = "0x6000473")]
	[Address(RVA = "0xF76D18", Offset = "0xF76D18", VA = "0xF76D18")]
	public void Load(CriFsBinder binder, string path, long fileOffset, long loadSize, byte[] buffer)
	{
	}

	[Token(Token = "0x6000474")]
	[Address(RVA = "0xF771D4", Offset = "0xF771D4", VA = "0xF771D4")]
	public void LoadById(CriFsBinder binder, int id, long fileOffset, long loadSize, byte[] buffer)
	{
	}

	[Token(Token = "0x6000475")]
	[Address(RVA = "0xF77358", Offset = "0xF77358", VA = "0xF77358")]
	public void LoadWithoutDecompression(CriFsBinder binder, string path, long fileOffset, long loadSize, byte[] buffer)
	{
	}

	[Token(Token = "0x6000476")]
	[Address(RVA = "0xF774F8", Offset = "0xF774F8", VA = "0xF774F8")]
	public void LoadWithoutDecompressionById(CriFsBinder binder, int id, long fileOffset, long loadSize, byte[] buffer)
	{
	}

	[Token(Token = "0x6000477")]
	[Address(RVA = "0xF7767C", Offset = "0xF7767C", VA = "0xF7767C")]
	public void DecompressData(long srcSize, byte[] srcBuffer, long dstSize, byte[] dstBuffer)
	{
	}

	[Token(Token = "0x6000478")]
	[Address(RVA = "0xF76870", Offset = "0xF76870", VA = "0xF76870")]
	public void Stop()
	{
	}

	[Token(Token = "0x6000479")]
	[Address(RVA = "0xF76DD4", Offset = "0xF76DD4", VA = "0xF76DD4")]
	public Status GetStatus()
	{
		return default(Status);
	}

	[Token(Token = "0x600047A")]
	[Address(RVA = "0xF76CA0", Offset = "0xF76CA0", VA = "0xF76CA0")]
	public void SetReadUnitSize(int unit_size)
	{
	}

	[Token(Token = "0x600047B")]
	[Address(RVA = "0xF77964", Offset = "0xF77964", VA = "0xF77964", Slot = "1")]
	~CriFsLoader()
	{
	}

	[PreserveSig]
	[Token(Token = "0x600047C")]
	[Address(RVA = "0xF76E90", Offset = "0xF76E90", VA = "0xF76E90")]
	private static extern int criFsLoader_Create(out IntPtr loader);

	[PreserveSig]
	[Token(Token = "0x600047D")]
	[Address(RVA = "0xF77070", Offset = "0xF77070", VA = "0xF77070")]
	private static extern int criFsLoader_Destroy(IntPtr loader);

	[PreserveSig]
	[Token(Token = "0x600047E")]
	[Address(RVA = "0xF770F0", Offset = "0xF770F0", VA = "0xF770F0")]
	private static extern int criFsLoader_Load(IntPtr loader, IntPtr binder, string path, long offset, long load_size, IntPtr buffer, long buffer_size);

	[PreserveSig]
	[Token(Token = "0x600047F")]
	[Address(RVA = "0xF77290", Offset = "0xF77290", VA = "0xF77290")]
	private static extern int criFsLoader_LoadById(IntPtr loader, IntPtr binder, int id, long offset, long load_size, IntPtr buffer, long buffer_size);

	[PreserveSig]
	[Token(Token = "0x6000480")]
	[Address(RVA = "0xF777C4", Offset = "0xF777C4", VA = "0xF777C4")]
	private static extern int criFsLoader_Stop(IntPtr loader);

	[PreserveSig]
	[Token(Token = "0x6000481")]
	[Address(RVA = "0xF77844", Offset = "0xF77844", VA = "0xF77844")]
	private static extern int criFsLoader_GetStatus(IntPtr loader, out Status status);

	[PreserveSig]
	[Token(Token = "0x6000482")]
	[Address(RVA = "0xF778D4", Offset = "0xF778D4", VA = "0xF778D4")]
	private static extern int criFsLoader_SetReadUnitSize(IntPtr loader, long unit_size);

	[PreserveSig]
	[Token(Token = "0x6000483")]
	[Address(RVA = "0xF77414", Offset = "0xF77414", VA = "0xF77414")]
	private static extern int criFsLoader_LoadWithoutDecompression(IntPtr loader, IntPtr binder, string path, long offset, long load_size, IntPtr buffer, long buffer_size);

	[PreserveSig]
	[Token(Token = "0x6000484")]
	[Address(RVA = "0xF775B4", Offset = "0xF775B4", VA = "0xF775B4")]
	private static extern int criFsLoader_LoadWithoutDecompressionById(IntPtr loader, IntPtr binder, int id, long offset, long load_size, IntPtr buffer, long buffer_size);

	[PreserveSig]
	[Token(Token = "0x6000485")]
	[Address(RVA = "0xF77714", Offset = "0xF77714", VA = "0xF77714")]
	private static extern int criFsLoader_DecompressData(IntPtr loader, IntPtr src, long src_size, IntPtr dst, long dst_size);
}
[Token(Token = "0x200002A")]
public class CriFsInstaller : CriDisposable
{
	[Token(Token = "0x2000154")]
	public enum Status
	{
		[Token(Token = "0x40007EB")]
		Stop,
		[Token(Token = "0x40007EC")]
		Busy,
		[Token(Token = "0x40007ED")]
		Complete,
		[Token(Token = "0x40007EE")]
		Error
	}

	[Token(Token = "0x2000155")]
	private enum CopyPolicy
	{
		[Token(Token = "0x40007F0")]
		Always
	}

	[Token(Token = "0x40000AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private byte[] installBuffer;

	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GCHandle installBufferGch;

	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private IntPtr handle;

	[Token(Token = "0x6000486")]
	[Address(RVA = "0xF75998", Offset = "0xF75998", VA = "0xF75998")]
	public CriFsInstaller()
	{
	}

	[Token(Token = "0x6000487")]
	[Address(RVA = "0xF75EB8", Offset = "0xF75EB8", VA = "0xF75EB8", Slot = "5")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x6000488")]
	[Address(RVA = "0xF75F2C", Offset = "0xF75F2C", VA = "0xF75F2C")]
	private void Dispose(bool disposing)
	{
	}

	[Token(Token = "0x6000489")]
	[Address(RVA = "0xF75AB0", Offset = "0xF75AB0", VA = "0xF75AB0")]
	public void Copy(CriFsBinder binder, string srcPath, string dstPath, int installBufferSize)
	{
	}

	[Token(Token = "0x600048A")]
	[Address(RVA = "0xF75850", Offset = "0xF75850", VA = "0xF75850")]
	public void Stop()
	{
	}

	[Token(Token = "0x600048B")]
	[Address(RVA = "0xF75D30", Offset = "0xF75D30", VA = "0xF75D30")]
	public Status GetStatus()
	{
		return default(Status);
	}

	[Token(Token = "0x600048C")]
	[Address(RVA = "0xF75CBC", Offset = "0xF75CBC", VA = "0xF75CBC")]
	public float GetProgress()
	{
		return default(float);
	}

	[Token(Token = "0x600048D")]
	[Address(RVA = "0xF762EC", Offset = "0xF762EC", VA = "0xF762EC")]
	public static void ExecuteMain()
	{
	}

	[Token(Token = "0x600048E")]
	[Address(RVA = "0xF76364", Offset = "0xF76364", VA = "0xF76364", Slot = "1")]
	~CriFsInstaller()
	{
	}

	[PreserveSig]
	[Token(Token = "0x600048F")]
	[Address(RVA = "0xF762F0", Offset = "0xF762F0", VA = "0xF762F0")]
	private static extern int criFsInstaller_ExecuteMain();

	[PreserveSig]
	[Token(Token = "0x6000490")]
	[Address(RVA = "0xF75E28", Offset = "0xF75E28", VA = "0xF75E28")]
	private static extern int criFsInstaller_Create(out IntPtr installer, CopyPolicy option);

	[PreserveSig]
	[Token(Token = "0x6000491")]
	[Address(RVA = "0xF75FDC", Offset = "0xF75FDC", VA = "0xF75FDC")]
	private static extern int criFsInstaller_Destroy(IntPtr installer);

	[PreserveSig]
	[Token(Token = "0x6000492")]
	[Address(RVA = "0xF7605C", Offset = "0xF7605C", VA = "0xF7605C")]
	private static extern int criFsInstaller_Copy(IntPtr installer, IntPtr binder, string src_path, string dst_path, IntPtr buffer, long buffer_size);

	[PreserveSig]
	[Token(Token = "0x6000493")]
	[Address(RVA = "0xF7614C", Offset = "0xF7614C", VA = "0xF7614C")]
	private static extern int criFsInstaller_Stop(IntPtr installer);

	[PreserveSig]
	[Token(Token = "0x6000494")]
	[Address(RVA = "0xF761CC", Offset = "0xF761CC", VA = "0xF761CC")]
	private static extern int criFsInstaller_GetStatus(IntPtr installer, out Status status);

	[PreserveSig]
	[Token(Token = "0x6000495")]
	[Address(RVA = "0xF7625C", Offset = "0xF7625C", VA = "0xF7625C")]
	private static extern int criFsInstaller_GetProgress(IntPtr installer, out float progress);
}
[Token(Token = "0x200002B")]
public class CriFsBinder : CriDisposable
{
	[Token(Token = "0x2000156")]
	public enum Status
	{
		[Token(Token = "0x40007F2")]
		None,
		[Token(Token = "0x40007F3")]
		Analyze,
		[Token(Token = "0x40007F4")]
		Complete,
		[Token(Token = "0x40007F5")]
		Unbind,
		[Token(Token = "0x40007F6")]
		Removed,
		[Token(Token = "0x40007F7")]
		Invalid,
		[Token(Token = "0x40007F8")]
		Error
	}

	[Token(Token = "0x2000157")]
	public struct ContentsFileInfo
	{
		[Token(Token = "0x40007F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly string directory;

		[Token(Token = "0x40007FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string fileName;

		[Token(Token = "0x40007FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint readSize;

		[Token(Token = "0x40007FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint extractSize;

		[Token(Token = "0x40007FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ulong offset;

		[Token(Token = "0x40007FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int fileId;

		[Token(Token = "0x40007FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string userStr;

		[Token(Token = "0x6000CBC")]
		[Address(RVA = "0x8A995C", Offset = "0x8A995C", VA = "0x8A995C")]
		public ContentsFileInfo(byte[] data, int startIndex)
		{
		}
	}

	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private IntPtr handle;

	[Token(Token = "0x17000049")]
	public IntPtr nativeHandle
	{
		[Token(Token = "0x60004A6")]
		[Address(RVA = "0xF756DC", Offset = "0xF756DC", VA = "0xF756DC")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x6000496")]
	[Address(RVA = "0xF73EE0", Offset = "0xF73EE0", VA = "0xF73EE0")]
	public CriFsBinder()
	{
	}

	[Token(Token = "0x6000497")]
	[Address(RVA = "0xF740D0", Offset = "0xF740D0", VA = "0xF740D0", Slot = "5")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x6000498")]
	[Address(RVA = "0xF74144", Offset = "0xF74144", VA = "0xF74144")]
	private void Dispose(bool disposing)
	{
	}

	[Token(Token = "0x6000499")]
	[Address(RVA = "0xF73B6C", Offset = "0xF73B6C", VA = "0xF73B6C")]
	public uint BindCpk(CriFsBinder srcBinder, string path)
	{
		return default(uint);
	}

	[Token(Token = "0x600049A")]
	[Address(RVA = "0xF73C10", Offset = "0xF73C10", VA = "0xF73C10")]
	public uint BindDirectory(CriFsBinder srcBinder, string path)
	{
		return default(uint);
	}

	[Token(Token = "0x600049B")]
	[Address(RVA = "0xF73CB4", Offset = "0xF73CB4", VA = "0xF73CB4")]
	public uint BindFile(CriFsBinder srcBinder, string path)
	{
		return default(uint);
	}

	[Token(Token = "0x600049C")]
	[Address(RVA = "0xF744E0", Offset = "0xF744E0", VA = "0xF744E0")]
	public uint BindFileSection(CriFsBinder srcBinder, string path, ulong offset, int size, string sectionName)
	{
		return default(uint);
	}

	[Token(Token = "0x600049D")]
	[Address(RVA = "0xF746C0", Offset = "0xF746C0", VA = "0xF746C0")]
	public static void Unbind(uint bindId)
	{
	}

	[Token(Token = "0x600049E")]
	[Address(RVA = "0xF73DD0", Offset = "0xF73DD0", VA = "0xF73DD0")]
	public static Status GetStatus(uint bindId)
	{
		return default(Status);
	}

	[Token(Token = "0x600049F")]
	[Address(RVA = "0xF74848", Offset = "0xF74848", VA = "0xF74848")]
	public long GetFileSize(string path)
	{
		return default(long);
	}

	[Token(Token = "0x60004A0")]
	[Address(RVA = "0xF74984", Offset = "0xF74984", VA = "0xF74984")]
	public long GetFileSize(int id)
	{
		return default(long);
	}

	[Token(Token = "0x60004A1")]
	[Address(RVA = "0xF74AA4", Offset = "0xF74AA4", VA = "0xF74AA4")]
	public bool GetContentsFileInfo(string path, out ContentsFileInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x60004A2")]
	[Address(RVA = "0xF74F4C", Offset = "0xF74F4C", VA = "0xF74F4C")]
	public bool GetContentsFileInfo(int id, out ContentsFileInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x60004A3")]
	[Address(RVA = "0xF75190", Offset = "0xF75190", VA = "0xF75190")]
	public static bool GetContentsFileInfoByIndex(uint bindId, int index, int numFiles, out ContentsFileInfo[] info)
	{
		return default(bool);
	}

	[Token(Token = "0x60004A4")]
	[Address(RVA = "0xF7553C", Offset = "0xF7553C", VA = "0xF7553C")]
	public static int GetNumContentsFiles(uint bindId)
	{
		return default(int);
	}

	[Token(Token = "0x60004A5")]
	[Address(RVA = "0xF755C0", Offset = "0xF755C0", VA = "0xF755C0")]
	public static void SetPriority(uint bindId, int priority)
	{
	}

	[Token(Token = "0x60004A7")]
	[Address(RVA = "0xF756E4", Offset = "0xF756E4", VA = "0xF756E4", Slot = "1")]
	~CriFsBinder()
	{
	}

	[PreserveSig]
	[Token(Token = "0x60004A8")]
	[Address(RVA = "0xF74050", Offset = "0xF74050", VA = "0xF74050")]
	private static extern uint criFsBinder_Create(out IntPtr binder);

	[PreserveSig]
	[Token(Token = "0x60004A9")]
	[Address(RVA = "0xF741CC", Offset = "0xF741CC", VA = "0xF741CC")]
	private static extern uint criFsBinder_Destroy(IntPtr binder);

	[PreserveSig]
	[Token(Token = "0x60004AA")]
	[Address(RVA = "0xF7424C", Offset = "0xF7424C", VA = "0xF7424C")]
	private static extern uint criFsBinder_BindCpk(IntPtr binder, IntPtr srcBinder, string path, IntPtr work, int worksize, out uint bindId);

	[PreserveSig]
	[Token(Token = "0x60004AB")]
	[Address(RVA = "0xF74328", Offset = "0xF74328", VA = "0xF74328")]
	private static extern uint criFsBinder_BindDirectory(IntPtr binder, IntPtr srcBinder, string path, IntPtr work, int worksize, out uint bindId);

	[PreserveSig]
	[Token(Token = "0x60004AC")]
	[Address(RVA = "0xF74404", Offset = "0xF74404", VA = "0xF74404")]
	private static extern uint criFsBinder_BindFile(IntPtr binder, IntPtr srcBinder, string path, IntPtr work, int worksize, out uint bindId);

	[PreserveSig]
	[Token(Token = "0x60004AD")]
	[Address(RVA = "0xF745B0", Offset = "0xF745B0", VA = "0xF745B0")]
	private static extern uint criFsBinder_BindFileSection(IntPtr binder, IntPtr srcBinder, string path, ulong offset, int size, string sectionName, IntPtr work, int worksize, out uint bindId);

	[PreserveSig]
	[Token(Token = "0x60004AE")]
	[Address(RVA = "0xF74738", Offset = "0xF74738", VA = "0xF74738")]
	private static extern int criFsBinder_Unbind(uint bindId);

	[PreserveSig]
	[Token(Token = "0x60004AF")]
	[Address(RVA = "0xF747B8", Offset = "0xF747B8", VA = "0xF747B8")]
	private static extern int criFsBinder_GetStatus(uint bindId, out Status status);

	[PreserveSig]
	[Token(Token = "0x60004B0")]
	[Address(RVA = "0xF748D0", Offset = "0xF748D0", VA = "0xF748D0")]
	private static extern int criFsBinder_GetFileSize(IntPtr binder, string path, out long size);

	[PreserveSig]
	[Token(Token = "0x60004B1")]
	[Address(RVA = "0xF74A0C", Offset = "0xF74A0C", VA = "0xF74A0C")]
	private static extern int criFsBinder_GetFileSizeById(IntPtr binder, int id, out long size);

	[PreserveSig]
	[Token(Token = "0x60004B2")]
	[Address(RVA = "0xF7564C", Offset = "0xF7564C", VA = "0xF7564C")]
	private static extern int criFsBinder_SetPriority(uint bindId, int priority);

	[PreserveSig]
	[Token(Token = "0x60004B3")]
	[Address(RVA = "0xF74C50", Offset = "0xF74C50", VA = "0xF74C50")]
	private static extern int criFsBinder_GetContentsFileInfo(IntPtr binder, string path, IntPtr info);

	[PreserveSig]
	[Token(Token = "0x60004B4")]
	[Address(RVA = "0xF750F8", Offset = "0xF750F8", VA = "0xF750F8")]
	private static extern int criFsBinder_GetContentsFileInfoById(IntPtr binder, int id, IntPtr info);

	[PreserveSig]
	[Token(Token = "0x60004B5")]
	[Address(RVA = "0xF75494", Offset = "0xF75494", VA = "0xF75494")]
	private static extern int criFsBinder_GetContentsFileInfoByIndex(uint id, int index, IntPtr info, int num);

	[PreserveSig]
	[Token(Token = "0x60004B6")]
	[Address(RVA = "0xF75540", Offset = "0xF75540", VA = "0xF75540")]
	private static extern int CRIWARE254CAE54(uint id);
}
[Token(Token = "0x200002C")]
public class CriFsRequest : CriDisposable
{
	[Token(Token = "0x2000158")]
	public delegate void DoneDelegate(CriFsRequest request);

	[Token(Token = "0x2000159")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A4D00", Offset = "0x9A4D00")]
	private sealed class <CheckDone>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CriFsRequest <>4__this;

		[Token(Token = "0x170000FF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000CC4")]
			[Address(RVA = "0xF78E04", Offset = "0xF78E04", VA = "0xF78E04", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000100")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CC6")]
			[Address(RVA = "0xF78E6C", Offset = "0xF78E6C", VA = "0xF78E6C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CC1")]
		[Address(RVA = "0xF78D00", Offset = "0xF78D00", VA = "0xF78D00")]
		[DebuggerHidden]
		public <CheckDone>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0xF78DB4", Offset = "0xF78DB4", VA = "0xF78DB4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0xF78DB8", Offset = "0xF78DB8", VA = "0xF78DB8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0xF78E0C", Offset = "0xF78E0C", VA = "0xF78E0C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A5264", Offset = "0x9A5264")]
	private DoneDelegate <doneDelegate>k__BackingField;

	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A5274", Offset = "0x9A5274")]
	private bool <isDone>k__BackingField;

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A5284", Offset = "0x9A5284")]
	private string <error>k__BackingField;

	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A5294", Offset = "0x9A5294")]
	private bool <isDisposed>k__BackingField;

	[Token(Token = "0x1700004A")]
	public DoneDelegate doneDelegate
	{
		[Token(Token = "0x60004B7")]
		[Address(RVA = "0xF787DC", Offset = "0xF787DC", VA = "0xF787DC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ACF94", Offset = "0x9ACF94")]
		get
		{
			return null;
		}
		[Token(Token = "0x60004B8")]
		[Address(RVA = "0xF787E4", Offset = "0xF787E4", VA = "0xF787E4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ACFA4", Offset = "0x9ACFA4")]
		protected set
		{
		}
	}

	[Token(Token = "0x1700004B")]
	public bool isDone
	{
		[Token(Token = "0x60004B9")]
		[Address(RVA = "0xF787EC", Offset = "0xF787EC", VA = "0xF787EC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ACFB4", Offset = "0x9ACFB4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60004BA")]
		[Address(RVA = "0xF787F4", Offset = "0xF787F4", VA = "0xF787F4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ACFC4", Offset = "0x9ACFC4")]
		private set
		{
		}
	}

	[Token(Token = "0x1700004C")]
	public string error
	{
		[Token(Token = "0x60004BB")]
		[Address(RVA = "0xF78800", Offset = "0xF78800", VA = "0xF78800")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ACFD4", Offset = "0x9ACFD4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60004BC")]
		[Address(RVA = "0xF78808", Offset = "0xF78808", VA = "0xF78808")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ACFE4", Offset = "0x9ACFE4")]
		protected set
		{
		}
	}

	[Token(Token = "0x1700004D")]
	public bool isDisposed
	{
		[Token(Token = "0x60004BD")]
		[Address(RVA = "0xF78810", Offset = "0xF78810", VA = "0xF78810")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ACFF4", Offset = "0x9ACFF4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60004BE")]
		[Address(RVA = "0xF78818", Offset = "0xF78818", VA = "0xF78818")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD004", Offset = "0x9AD004")]
		protected set
		{
		}
	}

	[Token(Token = "0x60004BF")]
	[Address(RVA = "0xF78824", Offset = "0xF78824", VA = "0xF78824", Slot = "5")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x60004C0")]
	[Address(RVA = "0xF788BC", Offset = "0xF788BC", VA = "0xF788BC", Slot = "6")]
	public virtual void Stop()
	{
	}

	[Token(Token = "0x60004C1")]
	[Address(RVA = "0xF788C0", Offset = "0xF788C0", VA = "0xF788C0")]
	public YieldInstruction WaitForDone(MonoBehaviour mb)
	{
		return null;
	}

	[Token(Token = "0x60004C2")]
	[Address(RVA = "0xF78964", Offset = "0xF78964", VA = "0xF78964", Slot = "7")]
	protected virtual void Dispose(bool disposing)
	{
	}

	[Token(Token = "0x60004C3")]
	[Address(RVA = "0xF78968", Offset = "0xF78968", VA = "0xF78968", Slot = "8")]
	public virtual void Update()
	{
	}

	[Token(Token = "0x60004C4")]
	[Address(RVA = "0xF73E60", Offset = "0xF73E60", VA = "0xF73E60")]
	protected void Done()
	{
	}

	[Token(Token = "0x60004C5")]
	[Address(RVA = "0xF788F4", Offset = "0xF788F4", VA = "0xF788F4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x9AD014", Offset = "0x9AD014")]
	private IEnumerator CheckDone()
	{
		return null;
	}

	[Token(Token = "0x60004C6")]
	[Address(RVA = "0xF78D2C", Offset = "0xF78D2C", VA = "0xF78D2C", Slot = "1")]
	~CriFsRequest()
	{
	}

	[Token(Token = "0x60004C7")]
	[Address(RVA = "0xF73B68", Offset = "0xF73B68", VA = "0xF73B68")]
	public CriFsRequest()
	{
	}
}
[Token(Token = "0x200002D")]
public class CriFsLoadFileRequest : CriFsRequest
{
	[Token(Token = "0x200015A")]
	private enum Phase
	{
		[Token(Token = "0x4000804")]
		Stop,
		[Token(Token = "0x4000805")]
		Bind,
		[Token(Token = "0x4000806")]
		Load,
		[Token(Token = "0x4000807")]
		Done,
		[Token(Token = "0x4000808")]
		Error
	}

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A52A4", Offset = "0x9A52A4")]
	private string <path>k__BackingField;

	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A52B4", Offset = "0x9A52B4")]
	private byte[] <bytes>k__BackingField;

	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Phase phase;

	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private CriFsBinder refBinder;

	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private CriFsBinder newBinder;

	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private uint bindId;

	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private CriFsLoader loader;

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private int readUnitSize;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private long fileSize;

	[Token(Token = "0x1700004E")]
	public string path
	{
		[Token(Token = "0x60004C8")]
		[Address(RVA = "0xF76690", Offset = "0xF76690", VA = "0xF76690")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD078", Offset = "0x9AD078")]
		get
		{
			return null;
		}
		[Token(Token = "0x60004C9")]
		[Address(RVA = "0xF76698", Offset = "0xF76698", VA = "0xF76698")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD088", Offset = "0x9AD088")]
		private set
		{
		}
	}

	[Token(Token = "0x1700004F")]
	public byte[] bytes
	{
		[Token(Token = "0x60004CA")]
		[Address(RVA = "0xF766A0", Offset = "0xF766A0", VA = "0xF766A0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD098", Offset = "0x9AD098")]
		get
		{
			return null;
		}
		[Token(Token = "0x60004CB")]
		[Address(RVA = "0xF766A8", Offset = "0xF766A8", VA = "0xF766A8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD0A8", Offset = "0x9AD0A8")]
		private set
		{
		}
	}

	[Token(Token = "0x60004CC")]
	[Address(RVA = "0xF766B0", Offset = "0xF766B0", VA = "0xF766B0")]
	public CriFsLoadFileRequest(CriFsBinder srcBinder, string path, DoneDelegate doneDelegate, int readUnitSize)
	{
	}

	[Token(Token = "0x60004CD")]
	[Address(RVA = "0xF767B8", Offset = "0xF767B8", VA = "0xF767B8", Slot = "7")]
	protected override void Dispose(bool disposing)
	{
	}

	[Token(Token = "0x60004CE")]
	[Address(RVA = "0xF76854", Offset = "0xF76854", VA = "0xF76854", Slot = "6")]
	public override void Stop()
	{
	}

	[Token(Token = "0x60004CF")]
	[Address(RVA = "0xF768D4", Offset = "0xF768D4", VA = "0xF768D4", Slot = "8")]
	public override void Update()
	{
	}

	[Token(Token = "0x60004D0")]
	[Address(RVA = "0xF76934", Offset = "0xF76934", VA = "0xF76934")]
	private void UpdateBinder()
	{
	}

	[Token(Token = "0x60004D1")]
	[Address(RVA = "0xF769A4", Offset = "0xF769A4", VA = "0xF769A4")]
	private void UpdateLoader()
	{
	}

	[Token(Token = "0x60004D2")]
	[Address(RVA = "0xF76ADC", Offset = "0xF76ADC", VA = "0xF76ADC")]
	private void OnError()
	{
	}
}
[Token(Token = "0x200002E")]
public class CriFsLoadAssetBundleRequest : CriFsRequest
{
	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A52C4", Offset = "0x9A52C4")]
	private string <path>k__BackingField;

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A52D4", Offset = "0x9A52D4")]
	private AssetBundle <assetBundle>k__BackingField;

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private CriFsLoadFileRequest loadFileReq;

	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private AssetBundleCreateRequest assetBundleReq;

	[Token(Token = "0x17000050")]
	public string path
	{
		[Token(Token = "0x60004D3")]
		[Address(RVA = "0xF763D0", Offset = "0xF763D0", VA = "0xF763D0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD0B8", Offset = "0x9AD0B8")]
		get
		{
			return null;
		}
		[Token(Token = "0x60004D4")]
		[Address(RVA = "0xF763D8", Offset = "0xF763D8", VA = "0xF763D8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD0C8", Offset = "0x9AD0C8")]
		private set
		{
		}
	}

	[Token(Token = "0x17000051")]
	public AssetBundle assetBundle
	{
		[Token(Token = "0x60004D5")]
		[Address(RVA = "0xF763E0", Offset = "0xF763E0", VA = "0xF763E0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD0D8", Offset = "0x9AD0D8")]
		get
		{
			return null;
		}
		[Token(Token = "0x60004D6")]
		[Address(RVA = "0xF763E8", Offset = "0xF763E8", VA = "0xF763E8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD0E8", Offset = "0x9AD0E8")]
		private set
		{
		}
	}

	[Token(Token = "0x60004D7")]
	[Address(RVA = "0xF763F0", Offset = "0xF763F0", VA = "0xF763F0")]
	public CriFsLoadAssetBundleRequest(CriFsBinder binder, string path, int readUnitSize)
	{
	}

	[Token(Token = "0x60004D8")]
	[Address(RVA = "0xF76520", Offset = "0xF76520", VA = "0xF76520", Slot = "8")]
	public override void Update()
	{
	}

	[Token(Token = "0x60004D9")]
	[Address(RVA = "0xF76610", Offset = "0xF76610", VA = "0xF76610", Slot = "7")]
	protected override void Dispose(bool disposing)
	{
	}
}
[Token(Token = "0x200002F")]
public class CriFsInstallRequest : CriFsRequest
{
	[Token(Token = "0x40000C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A52E4", Offset = "0x9A52E4")]
	private string <sourcePath>k__BackingField;

	[Token(Token = "0x40000C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A52F4", Offset = "0x9A52F4")]
	private string <destinationPath>k__BackingField;

	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A5304", Offset = "0x9A5304")]
	private float <progress>k__BackingField;

	[Token(Token = "0x17000052")]
	public string sourcePath
	{
		[Token(Token = "0x60004DA")]
		[Address(RVA = "0xF7580C", Offset = "0xF7580C", VA = "0xF7580C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD0F8", Offset = "0x9AD0F8")]
		get
		{
			return null;
		}
		[Token(Token = "0x60004DB")]
		[Address(RVA = "0xF75814", Offset = "0xF75814", VA = "0xF75814")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD108", Offset = "0x9AD108")]
		protected set
		{
		}
	}

	[Token(Token = "0x17000053")]
	public string destinationPath
	{
		[Token(Token = "0x60004DC")]
		[Address(RVA = "0xF7581C", Offset = "0xF7581C", VA = "0xF7581C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD118", Offset = "0x9AD118")]
		get
		{
			return null;
		}
		[Token(Token = "0x60004DD")]
		[Address(RVA = "0xF75824", Offset = "0xF75824", VA = "0xF75824")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD128", Offset = "0x9AD128")]
		protected set
		{
		}
	}

	[Token(Token = "0x17000054")]
	public float progress
	{
		[Token(Token = "0x60004DE")]
		[Address(RVA = "0xF7582C", Offset = "0xF7582C", VA = "0xF7582C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD138", Offset = "0x9AD138")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60004DF")]
		[Address(RVA = "0xF75834", Offset = "0xF75834", VA = "0xF75834")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD148", Offset = "0x9AD148")]
		protected set
		{
		}
	}

	[Token(Token = "0x60004E0")]
	[Address(RVA = "0xF7583C", Offset = "0xF7583C", VA = "0xF7583C")]
	public CriFsInstallRequest()
	{
	}
}
[Token(Token = "0x2000030")]
public class CriFsInstallRequestLegacy : CriFsInstallRequest
{
	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private CriFsInstaller installer;

	[Token(Token = "0x60004E1")]
	[Address(RVA = "0xF75840", Offset = "0xF75840", VA = "0xF75840", Slot = "6")]
	public override void Stop()
	{
	}

	[Token(Token = "0x60004E2")]
	[Address(RVA = "0xF758B4", Offset = "0xF758B4", VA = "0xF758B4")]
	public CriFsInstallRequestLegacy(CriFsBinder srcBinder, string srcPath, string dstPath, DoneDelegate doneDelegate, int installBufferSize)
	{
	}

	[Token(Token = "0x60004E3")]
	[Address(RVA = "0xF75BFC", Offset = "0xF75BFC", VA = "0xF75BFC", Slot = "8")]
	public override void Update()
	{
	}

	[Token(Token = "0x60004E4")]
	[Address(RVA = "0xF75DA8", Offset = "0xF75DA8", VA = "0xF75DA8", Slot = "7")]
	protected override void Dispose(bool disposing)
	{
	}
}
[Token(Token = "0x2000031")]
public class CriFsWebInstallRequest : CriFsInstallRequest
{
	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private CriFsWebInstaller installer;

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private uint crc32;

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private bool crc32_set;

	[Token(Token = "0x60004E5")]
	[Address(RVA = "0xF7A2D4", Offset = "0xF7A2D4", VA = "0xF7A2D4", Slot = "6")]
	public override void Stop()
	{
	}

	[Token(Token = "0x60004E6")]
	[Address(RVA = "0xF7A348", Offset = "0xF7A348", VA = "0xF7A348")]
	public bool GetCRC32(out uint ret_val)
	{
		return default(bool);
	}

	[Token(Token = "0x60004E7")]
	[Address(RVA = "0xF79814", Offset = "0xF79814", VA = "0xF79814")]
	public CriFsWebInstallRequest(string srcPath, string dstPath, DoneDelegate doneDelegate)
	{
	}

	[Token(Token = "0x60004E8")]
	[Address(RVA = "0xF7A430", Offset = "0xF7A430", VA = "0xF7A430", Slot = "8")]
	public override void Update()
	{
	}

	[Token(Token = "0x60004E9")]
	[Address(RVA = "0xF7A69C", Offset = "0xF7A69C", VA = "0xF7A69C", Slot = "7")]
	protected override void Dispose(bool disposing)
	{
	}
}
[Token(Token = "0x2000032")]
public class CriFsBindRequest : CriFsRequest
{
	[Token(Token = "0x200015B")]
	public enum BindType
	{
		[Token(Token = "0x400080A")]
		Cpk,
		[Token(Token = "0x400080B")]
		Directory,
		[Token(Token = "0x400080C")]
		File
	}

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A5314", Offset = "0x9A5314")]
	private string <path>k__BackingField;

	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A5324", Offset = "0x9A5324")]
	private uint <bindId>k__BackingField;

	[Token(Token = "0x17000055")]
	public string path
	{
		[Token(Token = "0x60004EA")]
		[Address(RVA = "0xF73A18", Offset = "0xF73A18", VA = "0xF73A18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD158", Offset = "0x9AD158")]
		get
		{
			return null;
		}
		[Token(Token = "0x60004EB")]
		[Address(RVA = "0xF73A20", Offset = "0xF73A20", VA = "0xF73A20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD168", Offset = "0x9AD168")]
		private set
		{
		}
	}

	[Token(Token = "0x17000056")]
	public uint bindId
	{
		[Token(Token = "0x60004EC")]
		[Address(RVA = "0xF73A28", Offset = "0xF73A28", VA = "0xF73A28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD178", Offset = "0x9AD178")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60004ED")]
		[Address(RVA = "0xF73A30", Offset = "0xF73A30", VA = "0xF73A30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD188", Offset = "0x9AD188")]
		private set
		{
		}
	}

	[Token(Token = "0x60004EE")]
	[Address(RVA = "0xF73A38", Offset = "0xF73A38", VA = "0xF73A38")]
	public CriFsBindRequest(BindType type, CriFsBinder targetBinder, CriFsBinder srcBinder, string path)
	{
	}

	[Token(Token = "0x60004EF")]
	[Address(RVA = "0xF73D3C", Offset = "0xF73D3C", VA = "0xF73D3C", Slot = "6")]
	public override void Stop()
	{
	}

	[Token(Token = "0x60004F0")]
	[Address(RVA = "0xF73D40", Offset = "0xF73D40", VA = "0xF73D40", Slot = "8")]
	public override void Update()
	{
	}

	[Token(Token = "0x60004F1")]
	[Address(RVA = "0xF73E7C", Offset = "0xF73E7C", VA = "0xF73E7C", Slot = "7")]
	protected override void Dispose(bool disposing)
	{
	}
}
[Token(Token = "0x2000033")]
public static class CriFsUtility
{
	[Token(Token = "0x40000CB")]
	public const int DefaultReadUnitSize = 1048576;

	[Token(Token = "0x60004F2")]
	[Address(RVA = "0xF79AB8", Offset = "0xF79AB8", VA = "0xF79AB8")]
	public static CriFsLoadFileRequest LoadFile(string path, int readUnitSize = 1048576)
	{
		return null;
	}

	[Token(Token = "0x60004F3")]
	[Address(RVA = "0xF79B40", Offset = "0xF79B40", VA = "0xF79B40")]
	public static CriFsLoadFileRequest LoadFile(string path, CriFsRequest.DoneDelegate doneDelegate, int readUnitSize = 1048576)
	{
		return null;
	}

	[Token(Token = "0x60004F4")]
	[Address(RVA = "0xF76494", Offset = "0xF76494", VA = "0xF76494")]
	public static CriFsLoadFileRequest LoadFile(CriFsBinder binder, string path, int readUnitSize = 1048576)
	{
		return null;
	}

	[Token(Token = "0x60004F5")]
	[Address(RVA = "0xF79BCC", Offset = "0xF79BCC", VA = "0xF79BCC")]
	public static CriFsLoadAssetBundleRequest LoadAssetBundle(string path, int readUnitSize = 1048576)
	{
		return null;
	}

	[Token(Token = "0x60004F6")]
	[Address(RVA = "0xF79BDC", Offset = "0xF79BDC", VA = "0xF79BDC")]
	public static CriFsLoadAssetBundleRequest LoadAssetBundle(CriFsBinder binder, string path, int readUnitSize = 1048576)
	{
		return null;
	}

	[Token(Token = "0x60004F7")]
	[Address(RVA = "0xF79C64", Offset = "0xF79C64", VA = "0xF79C64")]
	public static CriFsInstallRequest Install(string srcPath, string dstPath)
	{
		return null;
	}

	[Token(Token = "0x60004F8")]
	[Address(RVA = "0xF79D10", Offset = "0xF79D10", VA = "0xF79D10")]
	public static CriFsInstallRequest Install(string srcPath, string dstPath, CriFsRequest.DoneDelegate doneDeleagate)
	{
		return null;
	}

	[Token(Token = "0x60004F9")]
	[Address(RVA = "0xF79D24", Offset = "0xF79D24", VA = "0xF79D24")]
	public static CriFsInstallRequest Install(CriFsBinder srcBinder, string srcPath, string dstPath)
	{
		return null;
	}

	[Token(Token = "0x60004FA")]
	[Address(RVA = "0xF79C78", Offset = "0xF79C78", VA = "0xF79C78")]
	public static CriFsInstallRequest Install(CriFsBinder srcBinder, string srcPath, string dstPath, CriFsRequest.DoneDelegate doneDeleagate)
	{
		return null;
	}

	[Token(Token = "0x60004FB")]
	[Address(RVA = "0xF79DB0", Offset = "0xF79DB0", VA = "0xF79DB0")]
	public static CriFsInstallRequest WebInstall(string srcPath, string dstPath, CriFsRequest.DoneDelegate doneDeleagate)
	{
		return null;
	}

	[Token(Token = "0x60004FC")]
	[Address(RVA = "0xF79E38", Offset = "0xF79E38", VA = "0xF79E38")]
	public static CriFsBindRequest BindCpk(CriFsBinder targetBinder, string srcPath)
	{
		return null;
	}

	[Token(Token = "0x60004FD")]
	[Address(RVA = "0xF79E44", Offset = "0xF79E44", VA = "0xF79E44")]
	public static CriFsBindRequest BindCpk(CriFsBinder targetBinder, CriFsBinder srcBinder, string srcPath)
	{
		return null;
	}

	[Token(Token = "0x60004FE")]
	[Address(RVA = "0xF79ECC", Offset = "0xF79ECC", VA = "0xF79ECC")]
	public static CriFsBindRequest BindDirectory(CriFsBinder targetBinder, string srcPath)
	{
		return null;
	}

	[Token(Token = "0x60004FF")]
	[Address(RVA = "0xF79F50", Offset = "0xF79F50", VA = "0xF79F50")]
	public static CriFsBindRequest BindDirectory(CriFsBinder targetBinder, CriFsBinder srcBinder, string srcPath)
	{
		return null;
	}

	[Token(Token = "0x6000500")]
	[Address(RVA = "0xF79FD8", Offset = "0xF79FD8", VA = "0xF79FD8")]
	public static CriFsBindRequest BindFile(CriFsBinder targetBinder, string srcPath)
	{
		return null;
	}

	[Token(Token = "0x6000501")]
	[Address(RVA = "0xF7A05C", Offset = "0xF7A05C", VA = "0xF7A05C")]
	public static CriFsBindRequest BindFile(CriFsBinder targetBinder, CriFsBinder srcBinder, string srcPath)
	{
		return null;
	}

	[Token(Token = "0x6000502")]
	[Address(RVA = "0xF7A0E4", Offset = "0xF7A0E4", VA = "0xF7A0E4")]
	public static void SetUserAgentString(string userAgentString)
	{
	}

	[Token(Token = "0x6000503")]
	[Address(RVA = "0xF7A184", Offset = "0xF7A184", VA = "0xF7A184")]
	public static void SetProxyServer(string proxyPath, ushort proxyPort)
	{
	}

	[Token(Token = "0x6000504")]
	[Address(RVA = "0xF7A234", Offset = "0xF7A234", VA = "0xF7A234")]
	public static void SetPathSeparator(string filter)
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000505")]
	[Address(RVA = "0xF7A0E8", Offset = "0xF7A0E8", VA = "0xF7A0E8")]
	private static extern bool CRIWARE0CB20901(string userAgentString);

	[PreserveSig]
	[Token(Token = "0x6000506")]
	[Address(RVA = "0xF7A188", Offset = "0xF7A188", VA = "0xF7A188")]
	private static extern bool CRIWAREE867EC97(string proxyPath, ushort proxyPort);

	[PreserveSig]
	[Token(Token = "0x6000507")]
	[Address(RVA = "0xF7A238", Offset = "0xF7A238", VA = "0xF7A238")]
	private static extern bool CRIWARE761999EC(string filter);
}
[Token(Token = "0x2000034")]
public static class CriFsPlugin
{
	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int initializationCount;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static bool isConfigured;

	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int defaultInstallBufferSize;

	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static int installBufferSize;

	[Token(Token = "0x17000057")]
	public static bool isInitialized
	{
		[Token(Token = "0x6000508")]
		[Address(RVA = "0xF779D0", Offset = "0xF779D0", VA = "0xF779D0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000509")]
	[Address(RVA = "0xF77A40", Offset = "0xF77A40", VA = "0xF77A40")]
	public static void SetConfigParameters(int num_loaders, int num_binders, int num_installers, int argInstallBufferSize, int max_path, bool minimize_file_descriptor_usage, bool enable_crc_check)
	{
	}

	[Token(Token = "0x600050A")]
	[Address(RVA = "0xF77BC4", Offset = "0xF77BC4", VA = "0xF77BC4")]
	public static void SetReadDeviceEnabled(int deviceId, bool enabled)
	{
	}

	[Token(Token = "0x600050B")]
	[Address(RVA = "0xF77D10", Offset = "0xF77D10", VA = "0xF77D10")]
	public static void SetConfigAdditionalParameters_ANDROID(int device_read_bps)
	{
	}

	[Token(Token = "0x600050C")]
	[Address(RVA = "0xF77DF4", Offset = "0xF77DF4", VA = "0xF77DF4")]
	public static void SetMemoryFileSystemThreadPriorityExperimentalAndroid(int prio)
	{
	}

	[Token(Token = "0x600050D")]
	[Address(RVA = "0xF77ED8", Offset = "0xF77ED8", VA = "0xF77ED8")]
	public static void SetDataDecompressionThreadPriorityExperimentalAndroid(int prio)
	{
	}

	[Token(Token = "0x600050E")]
	[Address(RVA = "0xF77FBC", Offset = "0xF77FBC", VA = "0xF77FBC")]
	public static void InitializeLibrary()
	{
	}

	[Token(Token = "0x600050F")]
	[Address(RVA = "0xF73FF4", Offset = "0xF73FF4", VA = "0xF73FF4")]
	public static bool IsLibraryInitialized()
	{
		return default(bool);
	}

	[Token(Token = "0x6000510")]
	[Address(RVA = "0xF78108", Offset = "0xF78108", VA = "0xF78108")]
	public static void FinalizeLibrary()
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000511")]
	[Address(RVA = "0xF77B04", Offset = "0xF77B04", VA = "0xF77B04")]
	private static extern void CRIWARE60B91352(int num_loaders, int num_binders, int num_installers, int max_path, bool minimize_file_descriptor_usage, bool enable_crc_check);

	[PreserveSig]
	[Token(Token = "0x6000512")]
	[Address(RVA = "0xF78258", Offset = "0xF78258", VA = "0xF78258")]
	private static extern void CRIWARE1682FBAD();

	[PreserveSig]
	[Token(Token = "0x6000513")]
	[Address(RVA = "0xF782C8", Offset = "0xF782C8", VA = "0xF782C8")]
	public static extern bool CRIWARE1FDF7DD5();

	[PreserveSig]
	[Token(Token = "0x6000514")]
	[Address(RVA = "0xF78444", Offset = "0xF78444", VA = "0xF78444")]
	private static extern void CRIWAREA56770FF();

	[PreserveSig]
	[Token(Token = "0x6000515")]
	[Address(RVA = "0xF784B4", Offset = "0xF784B4", VA = "0xF784B4")]
	public static extern uint CRIWARE0DECC482();

	[PreserveSig]
	[Token(Token = "0x6000516")]
	[Address(RVA = "0xF78528", Offset = "0xF78528", VA = "0xF78528")]
	public static extern uint criFsLoader_GetRetryCount();

	[PreserveSig]
	[Token(Token = "0x6000517")]
	[Address(RVA = "0xF7859C", Offset = "0xF7859C", VA = "0xF7859C")]
	public static extern int criFs_GetNumBinds(ref int cur, ref int max, ref int limit);

	[PreserveSig]
	[Token(Token = "0x6000518")]
	[Address(RVA = "0xF78634", Offset = "0xF78634", VA = "0xF78634")]
	public static extern int criFs_GetNumUsedLoaders(ref int cur, ref int max, ref int limit);

	[PreserveSig]
	[Token(Token = "0x6000519")]
	[Address(RVA = "0xF786CC", Offset = "0xF786CC", VA = "0xF786CC")]
	public static extern int criFs_GetNumUsedInstallers(ref int cur, ref int max, ref int limit);

	[PreserveSig]
	[Token(Token = "0x600051A")]
	[Address(RVA = "0xF77C80", Offset = "0xF77C80", VA = "0xF77C80")]
	private static extern int criFs_SetReadDeviceEnabled(int device_id, bool enabled);

	[PreserveSig]
	[Token(Token = "0x600051B")]
	[Address(RVA = "0xF77D74", Offset = "0xF77D74", VA = "0xF77D74")]
	private static extern void criFsUnity_SetConfigAdditionalParameters_ANDROID(int device_read_bps);

	[PreserveSig]
	[Token(Token = "0x600051C")]
	[Address(RVA = "0xF77E58", Offset = "0xF77E58", VA = "0xF77E58")]
	public static extern void criFsUnity_SetMemoryFileSystemThreadPriority_ANDROID(int prio);

	[PreserveSig]
	[Token(Token = "0x600051D")]
	[Address(RVA = "0xF77F3C", Offset = "0xF77F3C", VA = "0xF77F3C")]
	public static extern void criFsUnity_SetDataDecompressionThreadPriority_ANDROID(int prio);
}
[Token(Token = "0x2000035")]
public class CriFsServer : CriMonoBehaviour
{
	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static CriFsServer _instance;

	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<CriFsRequest> requestList;

	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A5334", Offset = "0x9A5334")]
	private int <installBufferSize>k__BackingField;

	[Token(Token = "0x17000058")]
	public static CriFsServer instance
	{
		[Token(Token = "0x600051F")]
		[Address(RVA = "0xF78EB4", Offset = "0xF78EB4", VA = "0xF78EB4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000059")]
	public int installBufferSize
	{
		[Token(Token = "0x6000520")]
		[Address(RVA = "0xF7905C", Offset = "0xF7905C", VA = "0xF7905C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD198", Offset = "0x9AD198")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000521")]
		[Address(RVA = "0xF79064", Offset = "0xF79064", VA = "0xF79064")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD1A8", Offset = "0x9AD1A8")]
		private set
		{
		}
	}

	[Token(Token = "0x6000522")]
	[Address(RVA = "0xF78F20", Offset = "0xF78F20", VA = "0xF78F20")]
	public static void CreateInstance()
	{
	}

	[Token(Token = "0x6000523")]
	[Address(RVA = "0xF78344", Offset = "0xF78344", VA = "0xF78344")]
	public static void DestroyInstance()
	{
	}

	[Token(Token = "0x6000524")]
	[Address(RVA = "0xF7906C", Offset = "0xF7906C", VA = "0xF7906C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000525")]
	[Address(RVA = "0xF791E4", Offset = "0xF791E4", VA = "0xF791E4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000526")]
	[Address(RVA = "0xF79370", Offset = "0xF79370", VA = "0xF79370", Slot = "6")]
	public override void CriInternalUpdate()
	{
	}

	[Token(Token = "0x6000527")]
	[Address(RVA = "0xF79520", Offset = "0xF79520", VA = "0xF79520", Slot = "7")]
	public override void CriInternalLateUpdate()
	{
	}

	[Token(Token = "0x6000528")]
	[Address(RVA = "0xF79524", Offset = "0xF79524", VA = "0xF79524")]
	public void AddRequest(CriFsRequest request)
	{
	}

	[Token(Token = "0x6000529")]
	[Address(RVA = "0xF7958C", Offset = "0xF7958C", VA = "0xF7958C")]
	public CriFsLoadFileRequest LoadFile(CriFsBinder binder, string path, CriFsRequest.DoneDelegate doneDelegate, int readUnitSize)
	{
		return null;
	}

	[Token(Token = "0x600052A")]
	[Address(RVA = "0xF79624", Offset = "0xF79624", VA = "0xF79624")]
	public CriFsLoadAssetBundleRequest LoadAssetBundle(CriFsBinder binder, string path, int readUnitSize)
	{
		return null;
	}

	[Token(Token = "0x600052B")]
	[Address(RVA = "0xF796B4", Offset = "0xF796B4", VA = "0xF796B4")]
	public CriFsInstallRequest Install(CriFsBinder srcBinder, string srcPath, string dstPath, CriFsRequest.DoneDelegate doneDelegate)
	{
		return null;
	}

	[Token(Token = "0x600052C")]
	[Address(RVA = "0xF79770", Offset = "0xF79770", VA = "0xF79770")]
	public CriFsInstallRequest WebInstall(string srcPath, string dstPath, CriFsRequest.DoneDelegate doneDelegate)
	{
		return null;
	}

	[Token(Token = "0x600052D")]
	[Address(RVA = "0xF798F0", Offset = "0xF798F0", VA = "0xF798F0")]
	public CriFsBindRequest BindCpk(CriFsBinder targetBinder, CriFsBinder srcBinder, string path)
	{
		return null;
	}

	[Token(Token = "0x600052E")]
	[Address(RVA = "0xF79984", Offset = "0xF79984", VA = "0xF79984")]
	public CriFsBindRequest BindDirectory(CriFsBinder targetBinder, CriFsBinder srcBinder, string path)
	{
		return null;
	}

	[Token(Token = "0x600052F")]
	[Address(RVA = "0xF79A18", Offset = "0xF79A18", VA = "0xF79A18")]
	public CriFsBindRequest BindFile(CriFsBinder targetBinder, CriFsBinder srcBinder, string path)
	{
		return null;
	}

	[Token(Token = "0x6000530")]
	[Address(RVA = "0xF79AAC", Offset = "0xF79AAC", VA = "0xF79AAC")]
	public CriFsServer()
	{
	}
}
[Token(Token = "0x2000036")]
public class CriFsWebInstaller : CriDisposable
{
	[Token(Token = "0x200015C")]
	public enum Status
	{
		[Token(Token = "0x400080E")]
		Stop,
		[Token(Token = "0x400080F")]
		Busy,
		[Token(Token = "0x4000810")]
		Complete,
		[Token(Token = "0x4000811")]
		Error
	}

	[Token(Token = "0x200015D")]
	public enum Error
	{
		[Token(Token = "0x4000813")]
		None,
		[Token(Token = "0x4000814")]
		Timeout,
		[Token(Token = "0x4000815")]
		Memory,
		[Token(Token = "0x4000816")]
		LocalFs,
		[Token(Token = "0x4000817")]
		DNS,
		[Token(Token = "0x4000818")]
		Connection,
		[Token(Token = "0x4000819")]
		SSL,
		[Token(Token = "0x400081A")]
		HTTP,
		[Token(Token = "0x400081B")]
		Internal
	}

	[Token(Token = "0x200015E")]
	public struct StatusInfo
	{
		[Token(Token = "0x400081C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Status status;

		[Token(Token = "0x400081D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Error error;

		[Token(Token = "0x400081E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int httpStatusCode;

		[Token(Token = "0x400081F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public long contentsSize;

		[Token(Token = "0x4000820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public long receivedSize;
	}

	[Token(Token = "0x200015F")]
	public struct ModuleConfig
	{
		[Token(Token = "0x4000821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint numInstallers;

		[Token(Token = "0x4000822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string proxyHost;

		[Token(Token = "0x4000823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ushort proxyPort;

		[Token(Token = "0x4000824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string userAgent;

		[Token(Token = "0x4000825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint inactiveTimeoutSec;

		[Token(Token = "0x4000826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool allowInsecureSSL;

		[Token(Token = "0x4000827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool crcEnabled;

		[Token(Token = "0x4000828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		public ModulePlatformConfig platformConfig;
	}

	[Token(Token = "0x2000160")]
	public struct ModulePlatformConfig
	{
		[Token(Token = "0x4000829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte reserved;

		[Token(Token = "0x17000101")]
		public static ModulePlatformConfig defaultConfig
		{
			[Token(Token = "0x6000CC7")]
			[Address(RVA = "0xF7A894", Offset = "0xF7A894", VA = "0xF7A894")]
			get
			{
				return default(ModulePlatformConfig);
			}
		}
	}

	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A5344", Offset = "0x9A5344")]
	private static bool <isInitialized>k__BackingField;

	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A5354", Offset = "0x9A5354")]
	private static bool <isCrcEnabled>k__BackingField;

	[Token(Token = "0x40000D5")]
	public const int InvalidHttpStatusCode = -1;

	[Token(Token = "0x40000D6")]
	public const long InvalidContentsSize = -1L;

	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private IntPtr handle;

	[Token(Token = "0x1700005A")]
	public static bool isInitialized
	{
		[Token(Token = "0x6000532")]
		[Address(RVA = "0xF7A71C", Offset = "0xF7A71C", VA = "0xF7A71C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD1B8", Offset = "0x9AD1B8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000533")]
		[Address(RVA = "0xF7A76C", Offset = "0xF7A76C", VA = "0xF7A76C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD1C8", Offset = "0x9AD1C8")]
		private set
		{
		}
	}

	[Token(Token = "0x1700005B")]
	public static bool isCrcEnabled
	{
		[Token(Token = "0x6000534")]
		[Address(RVA = "0xF7A7C4", Offset = "0xF7A7C4", VA = "0xF7A7C4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD1D8", Offset = "0x9AD1D8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000535")]
		[Address(RVA = "0xF7A814", Offset = "0xF7A814", VA = "0xF7A814")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD1E8", Offset = "0x9AD1E8")]
		private set
		{
		}
	}

	[Token(Token = "0x1700005C")]
	public static ModuleConfig defaultModuleConfig
	{
		[Token(Token = "0x6000536")]
		[Address(RVA = "0xF7A86C", Offset = "0xF7A86C", VA = "0xF7A86C")]
		get
		{
			return default(ModuleConfig);
		}
	}

	[Token(Token = "0x6000537")]
	[Address(RVA = "0xF7A358", Offset = "0xF7A358", VA = "0xF7A358")]
	public CriFsWebInstaller()
	{
	}

	[Token(Token = "0x6000538")]
	[Address(RVA = "0xF7A91C", Offset = "0xF7A91C", VA = "0xF7A91C", Slot = "1")]
	~CriFsWebInstaller()
	{
	}

	[Token(Token = "0x6000539")]
	[Address(RVA = "0xF7AA5C", Offset = "0xF7AA5C", VA = "0xF7AA5C", Slot = "5")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x600053A")]
	[Address(RVA = "0xF7A428", Offset = "0xF7A428", VA = "0xF7A428")]
	public void Copy(string url, string dstPath)
	{
	}

	[Token(Token = "0x600053B")]
	[Address(RVA = "0xF7A2E4", Offset = "0xF7A2E4", VA = "0xF7A2E4")]
	public void Stop()
	{
	}

	[Token(Token = "0x600053C")]
	[Address(RVA = "0xF7A5D4", Offset = "0xF7A5D4", VA = "0xF7A5D4")]
	public StatusInfo GetStatusInfo()
	{
		return default(StatusInfo);
	}

	[Token(Token = "0x600053D")]
	[Address(RVA = "0xF7A67C", Offset = "0xF7A67C", VA = "0xF7A67C")]
	public bool GetCRC32(out uint ret_val)
	{
		return default(bool);
	}

	[Token(Token = "0x600053E")]
	[Address(RVA = "0xF7AD38", Offset = "0xF7AD38", VA = "0xF7AD38")]
	public static void InitializeModule(ModuleConfig config)
	{
	}

	[Token(Token = "0x600053F")]
	[Address(RVA = "0xF7AF6C", Offset = "0xF7AF6C", VA = "0xF7AF6C")]
	public static void FinalizeModule()
	{
	}

	[Token(Token = "0x6000540")]
	[Address(RVA = "0xF7951C", Offset = "0xF7951C", VA = "0xF7951C")]
	public static void ExecuteMain()
	{
	}

	[Token(Token = "0x6000541")]
	[Address(RVA = "0xF7B188", Offset = "0xF7B188", VA = "0xF7B188")]
	public static bool SetRequestHeader(string field, string value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000542")]
	[Address(RVA = "0xF7A988", Offset = "0xF7A988", VA = "0xF7A988")]
	private void Dispose(bool disposing)
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000543")]
	[Address(RVA = "0xF7AE98", Offset = "0xF7AE98", VA = "0xF7AE98")]
	private static extern int criFsWebInstaller_Initialize([In] ref ModuleConfig config);

	[PreserveSig]
	[Token(Token = "0x6000544")]
	[Address(RVA = "0xF7B0A0", Offset = "0xF7B0A0", VA = "0xF7B0A0")]
	private static extern int criFsWebInstaller_Finalize();

	[PreserveSig]
	[Token(Token = "0x6000545")]
	[Address(RVA = "0xF7B114", Offset = "0xF7B114", VA = "0xF7B114")]
	private static extern int criFsWebInstaller_ExecuteMain();

	[PreserveSig]
	[Token(Token = "0x6000546")]
	[Address(RVA = "0xF7A89C", Offset = "0xF7A89C", VA = "0xF7A89C")]
	private static extern int criFsWebInstaller_Create(out IntPtr installer);

	[PreserveSig]
	[Token(Token = "0x6000547")]
	[Address(RVA = "0xF7B264", Offset = "0xF7B264", VA = "0xF7B264")]
	private static extern int criFsWebInstaller_Destroy(IntPtr installer);

	[PreserveSig]
	[Token(Token = "0x6000548")]
	[Address(RVA = "0xF7AAD0", Offset = "0xF7AAD0", VA = "0xF7AAD0")]
	private static extern int criFsWebInstaller_Copy(IntPtr installer, string url, string dstPath);

	[PreserveSig]
	[Token(Token = "0x6000549")]
	[Address(RVA = "0xF7AB98", Offset = "0xF7AB98", VA = "0xF7AB98")]
	private static extern int criFsWebInstaller_Stop(IntPtr installer);

	[PreserveSig]
	[Token(Token = "0x600054A")]
	[Address(RVA = "0xF7AC18", Offset = "0xF7AC18", VA = "0xF7AC18")]
	private static extern int criFsWebInstaller_GetStatusInfo(IntPtr installer, out StatusInfo status);

	[PreserveSig]
	[Token(Token = "0x600054B")]
	[Address(RVA = "0xF7ACA8", Offset = "0xF7ACA8", VA = "0xF7ACA8")]
	private static extern int criFsWebInstaller_GetCRC32(IntPtr installer, out uint crc32);

	[PreserveSig]
	[Token(Token = "0x600054C")]
	[Address(RVA = "0xF7B1A4", Offset = "0xF7B1A4", VA = "0xF7B1A4")]
	private static extern int criFsWebInstaller_SetRequestHeader(string field, string value);
}
[Token(Token = "0x2000037")]
public class CriManaPlugin
{
	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int initializationCount;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static bool isConfigured;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
	private static bool enabledMultithreadedRendering;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int renderingEventOffset;

	[Token(Token = "0x1700005D")]
	public static bool isInitialized
	{
		[Token(Token = "0x600054D")]
		[Address(RVA = "0xEA9938", Offset = "0xEA9938", VA = "0xEA9938")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700005E")]
	public static bool isMultithreadedRenderingEnabled
	{
		[Token(Token = "0x600054E")]
		[Address(RVA = "0xEA99A8", Offset = "0xEA99A8", VA = "0xEA99A8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600054F")]
	[Address(RVA = "0xEA9A10", Offset = "0xEA9A10", VA = "0xEA9A10")]
	public static void SetConfigParameters(bool graphicsMultiThreaded, int num_decoders, int max_num_of_entries)
	{
	}

	[Token(Token = "0x6000550")]
	[Address(RVA = "0xEA9C30", Offset = "0xEA9C30", VA = "0xEA9C30")]
	private static void SetupVp9()
	{
	}

	[Token(Token = "0x6000551")]
	[Address(RVA = "0xEA9E34", Offset = "0xEA9E34", VA = "0xEA9E34")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9AD1F8", Offset = "0x9AD1F8")]
	public static void SetConfigAdditonalParameters_VITA(bool use_h264_playback, int width, int height)
	{
	}

	[Token(Token = "0x6000552")]
	[Address(RVA = "0xEA9E38", Offset = "0xEA9E38", VA = "0xEA9E38")]
	public static void SetConfigAdditonalParameters_PC(bool use_h264_playback)
	{
	}

	[Token(Token = "0x6000553")]
	[Address(RVA = "0xEA9E3C", Offset = "0xEA9E3C", VA = "0xEA9E3C")]
	public static void SetConfigAdditonalParameters_ANDROID(bool use_h264_playback)
	{
	}

	[Token(Token = "0x6000554")]
	[Address(RVA = "0xEAA038", Offset = "0xEAA038", VA = "0xEAA038")]
	public static void SetConfigAdditonalParameters_WEBGL(string webworkerPath, uint heapSize)
	{
	}

	[Token(Token = "0x6000555")]
	[Address(RVA = "0xEAA03C", Offset = "0xEAA03C", VA = "0xEAA03C")]
	public static void InitializeLibrary()
	{
	}

	[Token(Token = "0x6000556")]
	[Address(RVA = "0xEAA1E4", Offset = "0xEAA1E4", VA = "0xEAA1E4")]
	public static bool IsLibraryInitialized()
	{
		return default(bool);
	}

	[Token(Token = "0x6000557")]
	[Address(RVA = "0xEAA240", Offset = "0xEAA240", VA = "0xEAA240")]
	public static void FinalizeLibrary()
	{
	}

	[Token(Token = "0x6000558")]
	[Address(RVA = "0xEAA534", Offset = "0xEAA534", VA = "0xEAA534")]
	public static void SetDecodeThreadPriorityAndroidExperimental(int prio)
	{
	}

	[Token(Token = "0x6000559")]
	[Address(RVA = "0xEAA618", Offset = "0xEAA618", VA = "0xEAA618")]
	public static bool ShouldSampleRed(GraphicsDeviceType type, IntPtr tex_ptr)
	{
		return default(bool);
	}

	[Token(Token = "0x600055A")]
	[Address(RVA = "0xEAA72C", Offset = "0xEAA72C", VA = "0xEAA72C")]
	public static void Lock()
	{
	}

	[Token(Token = "0x600055B")]
	[Address(RVA = "0xEAA7F8", Offset = "0xEAA7F8", VA = "0xEAA7F8")]
	public static void Unlock()
	{
	}

	[PreserveSig]
	[Token(Token = "0x600055C")]
	[Address(RVA = "0xEA9B88", Offset = "0xEA9B88", VA = "0xEA9B88")]
	private static extern void CRIWARE476CEB30(int graphics_api, bool graphics_multi_threaded, int num_decoders, int num_of_max_entries);

	[PreserveSig]
	[Token(Token = "0x600055D")]
	[Address(RVA = "0xEAA3D8", Offset = "0xEAA3D8", VA = "0xEAA3D8")]
	private static extern void CRIWARE9CF52E96();

	[PreserveSig]
	[Token(Token = "0x600055E")]
	[Address(RVA = "0xEAA448", Offset = "0xEAA448", VA = "0xEAA448")]
	public static extern bool CRIWARE50D2CE6F();

	[PreserveSig]
	[Token(Token = "0x600055F")]
	[Address(RVA = "0xEAA4C4", Offset = "0xEAA4C4", VA = "0xEAA4C4")]
	private static extern void CRIWAREDC8B0D52();

	[PreserveSig]
	[Token(Token = "0x6000560")]
	[Address(RVA = "0xEA6ED0", Offset = "0xEA6ED0", VA = "0xEA6ED0")]
	public static extern void CRIWARE3AF940D2(bool flag);

	[PreserveSig]
	[Token(Token = "0x6000561")]
	[Address(RVA = "0xEAA788", Offset = "0xEAA788", VA = "0xEAA788")]
	public static extern void CRIWARE0F4D5885();

	[PreserveSig]
	[Token(Token = "0x6000562")]
	[Address(RVA = "0xEAA854", Offset = "0xEAA854", VA = "0xEAA854")]
	public static extern void CRIWARE8B2825A3();

	[PreserveSig]
	[Token(Token = "0x6000563")]
	[Address(RVA = "0xEAA8C4", Offset = "0xEAA8C4", VA = "0xEAA8C4")]
	public static extern void criMana_UseStreamerManager(bool flag);

	[PreserveSig]
	[Token(Token = "0x6000564")]
	[Address(RVA = "0xEAA944", Offset = "0xEAA944", VA = "0xEAA944")]
	public static extern bool criMana_IsStreamerManagerUsed();

	[PreserveSig]
	[Token(Token = "0x6000565")]
	[Address(RVA = "0xEAA9C0", Offset = "0xEAA9C0", VA = "0xEAA9C0")]
	public static extern uint CRIWAREFC9E4898();

	[PreserveSig]
	[Token(Token = "0x6000566")]
	[Address(RVA = "0xEAA598", Offset = "0xEAA598", VA = "0xEAA598")]
	public static extern void criManaUnity_SetDecodeThreadPriority_ANDROID(int prio);

	[PreserveSig]
	[Token(Token = "0x6000567")]
	[Address(RVA = "0xEA9FB8", Offset = "0xEA9FB8", VA = "0xEA9FB8")]
	private static extern void criManaUnity_SetConfigAdditionalParameters_ANDROID(bool enable_h264_playback);

	[PreserveSig]
	[Token(Token = "0x6000568")]
	[Address(RVA = "0xEAAA34", Offset = "0xEAAA34", VA = "0xEAAA34")]
	public static extern void criManaUnity_EnableSwitchTextureSampleColorGLES30_ANDROID();

	[PreserveSig]
	[Token(Token = "0x6000569")]
	[Address(RVA = "0xEAA6A4", Offset = "0xEAA6A4", VA = "0xEAA6A4")]
	private static extern bool criManaUnity_ShouldSwitchTextureSampleColorToRedGLES30_ANDROID(IntPtr tex_ptr);

	[Token(Token = "0x600056A")]
	[Address(RVA = "0xEAAAA4", Offset = "0xEAAAA4", VA = "0xEAAAA4")]
	public CriManaPlugin()
	{
	}
}
[Token(Token = "0x2000038")]
public class CriManaAmbisonicSource : CriMonoBehaviour
{
	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private CriAtomEx3dSource atomEx3DsourceForAmbisonics;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 ambisonicSourceOrientationFront;

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 ambisonicSourceOrientationTop;

	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 lastEulerOfAmbisonicSource;

	[Token(Token = "0x600056C")]
	[Address(RVA = "0xEA6F50", Offset = "0xEA6F50", VA = "0xEA6F50", Slot = "6")]
	public override void CriInternalUpdate()
	{
	}

	[Token(Token = "0x600056D")]
	[Address(RVA = "0xEA703C", Offset = "0xEA703C", VA = "0xEA703C", Slot = "7")]
	public override void CriInternalLateUpdate()
	{
	}

	[Token(Token = "0x600056E")]
	[Address(RVA = "0xEA7040", Offset = "0xEA7040", VA = "0xEA7040", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x600056F")]
	[Address(RVA = "0xEA718C", Offset = "0xEA718C", VA = "0xEA718C")]
	private void ForceUpdateAmbisonicSourceOrientation()
	{
	}

	[Token(Token = "0x6000570")]
	[Address(RVA = "0xEA6F54", Offset = "0xEA6F54", VA = "0xEA6F54")]
	private void UpdateAmbisonicSourceOrientation()
	{
	}

	[Token(Token = "0x6000571")]
	[Address(RVA = "0xEA71FC", Offset = "0xEA71FC", VA = "0xEA71FC")]
	private void RoatateAmbisonicSourceOrientationByTransformOfChild(ref Vector3 input_euler)
	{
	}

	[Token(Token = "0x6000572")]
	[Address(RVA = "0xEA7584", Offset = "0xEA7584", VA = "0xEA7584")]
	public CriManaAmbisonicSource()
	{
	}
}
[Token(Token = "0x2000039")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A3F98", Offset = "0x9A3F98")]
public class CriManaMovieController : CriManaMovieMaterial
{
	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Renderer target;

	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public bool useOriginalMaterial;

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Material originalMaterial;

	[Token(Token = "0x6000573")]
	[Address(RVA = "0xEA7754", Offset = "0xEA7754", VA = "0xEA7754", Slot = "6")]
	public override void CriInternalUpdate()
	{
	}

	[Token(Token = "0x6000574")]
	[Address(RVA = "0xEA7820", Offset = "0xEA7820", VA = "0xEA7820", Slot = "10")]
	public override bool RenderTargetManualSetup()
	{
		return default(bool);
	}

	[Token(Token = "0x6000575")]
	[Address(RVA = "0xEA7970", Offset = "0xEA7970", VA = "0xEA7970", Slot = "11")]
	public override void RenderTargetManualFinalize()
	{
	}

	[Token(Token = "0x6000576")]
	[Address(RVA = "0xEA7A2C", Offset = "0xEA7A2C", VA = "0xEA7A2C", Slot = "8")]
	protected override void OnMaterialAvailableChanged()
	{
	}

	[Token(Token = "0x6000577")]
	[Address(RVA = "0xEA7B08", Offset = "0xEA7B08", VA = "0xEA7B08")]
	public CriManaMovieController()
	{
	}
}
[Token(Token = "0x200003A")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A3FD0", Offset = "0x9A3FD0")]
public class CriManaMovieControllerForUI : CriManaMovieMaterial
{
	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Graphic target;

	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public bool useOriginalMaterial;

	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Material originalMaterial;

	[Token(Token = "0x6000578")]
	[Address(RVA = "0xEA7B78", Offset = "0xEA7B78", VA = "0xEA7B78", Slot = "12")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000579")]
	[Address(RVA = "0xEA7C40", Offset = "0xEA7C40", VA = "0xEA7C40", Slot = "6")]
	public override void CriInternalUpdate()
	{
	}

	[Token(Token = "0x600057A")]
	[Address(RVA = "0xEA7D0C", Offset = "0xEA7D0C", VA = "0xEA7D0C", Slot = "10")]
	public override bool RenderTargetManualSetup()
	{
		return default(bool);
	}

	[Token(Token = "0x600057B")]
	[Address(RVA = "0xEA7E64", Offset = "0xEA7E64", VA = "0xEA7E64", Slot = "11")]
	public override void RenderTargetManualFinalize()
	{
	}

	[Token(Token = "0x600057C")]
	[Address(RVA = "0xEA7F28", Offset = "0xEA7F28", VA = "0xEA7F28", Slot = "8")]
	protected override void OnMaterialAvailableChanged()
	{
	}

	[Token(Token = "0x600057D")]
	[Address(RVA = "0xEA8014", Offset = "0xEA8014", VA = "0xEA8014")]
	public CriManaMovieControllerForUI()
	{
	}
}
[Token(Token = "0x200003B")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4008", Offset = "0x9A4008")]
public class CriManaMovieMaterial : CriMonoBehaviour
{
	[Token(Token = "0x2000161")]
	public enum MaxFrameDrop
	{
		[Token(Token = "0x400082B")]
		Disabled = 0,
		[Token(Token = "0x400082C")]
		One = 1,
		[Token(Token = "0x400082D")]
		Two = 2,
		[Token(Token = "0x400082E")]
		Three = 3,
		[Token(Token = "0x400082F")]
		Four = 4,
		[Token(Token = "0x4000830")]
		Five = 5,
		[Token(Token = "0x4000831")]
		Six = 6,
		[Token(Token = "0x4000832")]
		Seven = 7,
		[Token(Token = "0x4000833")]
		Eight = 8,
		[Token(Token = "0x4000834")]
		Nine = 9,
		[Token(Token = "0x4000835")]
		Ten = 10,
		[Token(Token = "0x4000836")]
		Infinite = -1
	}

	[Token(Token = "0x2000162")]
	public enum RenderMode
	{
		[Token(Token = "0x4000838")]
		Always,
		[Token(Token = "0x4000839")]
		OnVisibility,
		[Token(Token = "0x400083A")]
		Never
	}

	[Token(Token = "0x2000163")]
	public delegate void OnApplicationPauseCallback(CriManaMovieMaterial manaMovieMaterial, bool appPause);

	[Token(Token = "0x2000164")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A4D10", Offset = "0x9A4D10")]
	private sealed class <RestartPlayerRoutine>d__80 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400083B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400083C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400083D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CriManaMovieMaterial <>4__this;

		[Token(Token = "0x17000102")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000CCF")]
			[Address(RVA = "0xEA978C", Offset = "0xEA978C", VA = "0xEA978C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000103")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CD1")]
			[Address(RVA = "0xEA97F4", Offset = "0xEA97F4", VA = "0xEA97F4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CCC")]
		[Address(RVA = "0xEA8F94", Offset = "0xEA8F94", VA = "0xEA8F94")]
		[DebuggerHidden]
		public <RestartPlayerRoutine>d__80(int <>1__state)
		{
		}

		[Token(Token = "0x6000CCD")]
		[Address(RVA = "0xEA96A0", Offset = "0xEA96A0", VA = "0xEA96A0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CCE")]
		[Address(RVA = "0xEA96A4", Offset = "0xEA96A4", VA = "0xEA96A4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0xEA9794", Offset = "0xEA9794", VA = "0xEA9794", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool playOnStart;

	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool restartOnEnable;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A5364", Offset = "0x9A5364")]
	private bool <isMaterialAvailable>k__BackingField;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A5374", Offset = "0x9A5374")]
	private Player <player>k__BackingField;

	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public RenderMode renderMode;

	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public OnApplicationPauseCallback onApplicationPauseCallback;

	[Token(Token = "0x40000EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Player.TimerType _timerType;

	[Token(Token = "0x40000ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Material _material;

	[Token(Token = "0x40000EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private string _moviePath;

	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private bool _loop;

	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	private MaxFrameDrop _maxFrameDrop;

	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private bool _additiveMode;

	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	[SerializeField]
	private bool _advancedAudio;

	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
	[SerializeField]
	private bool _ambisonics;

	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
	[SerializeField]
	private bool _applyTargetAlpha;

	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[SerializeField]
	private bool _uiRenderMode;

	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
	private bool materialOwn;

	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6E")]
	private bool isMonoBehaviourStartCalled;

	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private GameObject ambisonicSource;

	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool wasDisabled;

	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
	private bool wasPausedOnDisable;

	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private WaitForEndOfFrame frameEnd;

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool unpauseOnApplicationUnpause;

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A5414", Offset = "0x9A5414")]
	private bool <HaveRendererOwner>k__BackingField;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private CriManaMoviePlayerHolder playerHolder;

	[Token(Token = "0x1700005F")]
	public string moviePath
	{
		[Token(Token = "0x600057E")]
		[Address(RVA = "0xEA8018", Offset = "0xEA8018", VA = "0xEA8018")]
		get
		{
			return null;
		}
		[Token(Token = "0x600057F")]
		[Address(RVA = "0xEA8020", Offset = "0xEA8020", VA = "0xEA8020")]
		set
		{
		}
	}

	[Token(Token = "0x17000060")]
	public bool loop
	{
		[Token(Token = "0x6000580")]
		[Address(RVA = "0xEA80B8", Offset = "0xEA80B8", VA = "0xEA80B8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000581")]
		[Address(RVA = "0xEA80C0", Offset = "0xEA80C0", VA = "0xEA80C0")]
		set
		{
		}
	}

	[Token(Token = "0x17000061")]
	public MaxFrameDrop maxFrameDrop
	{
		[Token(Token = "0x6000582")]
		[Address(RVA = "0xEA815C", Offset = "0xEA815C", VA = "0xEA815C")]
		get
		{
			return default(MaxFrameDrop);
		}
		[Token(Token = "0x6000583")]
		[Address(RVA = "0xEA8164", Offset = "0xEA8164", VA = "0xEA8164")]
		set
		{
		}
	}

	[Token(Token = "0x17000062")]
	public bool advancedAudio
	{
		[Token(Token = "0x6000584")]
		[Address(RVA = "0xEA8178", Offset = "0xEA8178", VA = "0xEA8178")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000585")]
		[Address(RVA = "0xEA8180", Offset = "0xEA8180", VA = "0xEA8180")]
		set
		{
		}
	}

	[Token(Token = "0x17000063")]
	public bool ambisonics
	{
		[Token(Token = "0x6000586")]
		[Address(RVA = "0xEA85A8", Offset = "0xEA85A8", VA = "0xEA85A8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000587")]
		[Address(RVA = "0xEA822C", Offset = "0xEA822C", VA = "0xEA822C")]
		set
		{
		}
	}

	[Token(Token = "0x17000064")]
	public bool additiveMode
	{
		[Token(Token = "0x6000588")]
		[Address(RVA = "0xEA85B0", Offset = "0xEA85B0", VA = "0xEA85B0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000589")]
		[Address(RVA = "0xEA85B8", Offset = "0xEA85B8", VA = "0xEA85B8")]
		set
		{
		}
	}

	[Token(Token = "0x17000065")]
	public bool applyTargetAlpha
	{
		[Token(Token = "0x600058A")]
		[Address(RVA = "0xEA8654", Offset = "0xEA8654", VA = "0xEA8654")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600058B")]
		[Address(RVA = "0xEA865C", Offset = "0xEA865C", VA = "0xEA865C")]
		set
		{
		}
	}

	[Token(Token = "0x17000066")]
	public bool uiRenderMode
	{
		[Token(Token = "0x600058C")]
		[Address(RVA = "0xEA86F8", Offset = "0xEA86F8", VA = "0xEA86F8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600058D")]
		[Address(RVA = "0xEA7BA0", Offset = "0xEA7BA0", VA = "0xEA7BA0")]
		set
		{
		}
	}

	[Token(Token = "0x17000067")]
	public bool isMaterialAvailable
	{
		[Token(Token = "0x600058E")]
		[Address(RVA = "0xEA8700", Offset = "0xEA8700", VA = "0xEA8700")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD230", Offset = "0x9AD230")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600058F")]
		[Address(RVA = "0xEA8708", Offset = "0xEA8708", VA = "0xEA8708")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD240", Offset = "0x9AD240")]
		private set
		{
		}
	}

	[Token(Token = "0x17000068")]
	public Player player
	{
		[Token(Token = "0x6000590")]
		[Address(RVA = "0xEA8714", Offset = "0xEA8714", VA = "0xEA8714")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD250", Offset = "0x9AD250")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000591")]
		[Address(RVA = "0xEA871C", Offset = "0xEA871C", VA = "0xEA871C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD260", Offset = "0x9AD260")]
		private set
		{
		}
	}

	[Token(Token = "0x17000069")]
	public Material material
	{
		[Token(Token = "0x6000592")]
		[Address(RVA = "0xEA8724", Offset = "0xEA8724", VA = "0xEA8724")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000593")]
		[Address(RVA = "0xEA872C", Offset = "0xEA872C", VA = "0xEA872C")]
		set
		{
		}
	}

	[Token(Token = "0x1700006A")]
	public Player.TimerType timerType
	{
		[Token(Token = "0x6000594")]
		[Address(RVA = "0xEA87EC", Offset = "0xEA87EC", VA = "0xEA87EC")]
		get
		{
			return default(Player.TimerType);
		}
		[Token(Token = "0x6000595")]
		[Address(RVA = "0xEA87F4", Offset = "0xEA87F4", VA = "0xEA87F4")]
		set
		{
		}
	}

	[Token(Token = "0x1700006B")]
	protected bool HaveRendererOwner
	{
		[Token(Token = "0x6000596")]
		[Address(RVA = "0xEA8810", Offset = "0xEA8810", VA = "0xEA8810")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD270", Offset = "0x9AD270")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000597")]
		[Address(RVA = "0xEA8818", Offset = "0xEA8818", VA = "0xEA8818")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD280", Offset = "0x9AD280")]
		private set
		{
		}
	}

	[Token(Token = "0x6000598")]
	[Address(RVA = "0xEA8824", Offset = "0xEA8824", VA = "0xEA8824")]
	public void Play()
	{
	}

	[Token(Token = "0x6000599")]
	[Address(RVA = "0xEA8860", Offset = "0xEA8860", VA = "0xEA8860")]
	public void Stop()
	{
	}

	[Token(Token = "0x600059A")]
	[Address(RVA = "0xEA88B4", Offset = "0xEA88B4", VA = "0xEA88B4")]
	public void Pause(bool sw)
	{
	}

	[Token(Token = "0x600059B")]
	[Address(RVA = "0xEA88E8", Offset = "0xEA88E8", VA = "0xEA88E8", Slot = "8")]
	protected virtual void OnMaterialAvailableChanged()
	{
	}

	[Token(Token = "0x600059C")]
	[Address(RVA = "0xEA88EC", Offset = "0xEA88EC", VA = "0xEA88EC", Slot = "9")]
	protected virtual void OnMaterialUpdated()
	{
	}

	[Token(Token = "0x600059D")]
	[Address(RVA = "0xEA88F0", Offset = "0xEA88F0", VA = "0xEA88F0")]
	public void PlayerManualInitialize()
	{
	}

	[Token(Token = "0x600059E")]
	[Address(RVA = "0xEA8B80", Offset = "0xEA8B80", VA = "0xEA8B80")]
	public void PlayerManualFinalize()
	{
	}

	[Token(Token = "0x600059F")]
	[Address(RVA = "0xEA8BC8", Offset = "0xEA8BC8", VA = "0xEA8BC8")]
	public void PlayerManualSetup()
	{
	}

	[Token(Token = "0x60005A0")]
	[Address(RVA = "0xEA8DD0", Offset = "0xEA8DD0", VA = "0xEA8DD0", Slot = "10")]
	public virtual bool RenderTargetManualSetup()
	{
		return default(bool);
	}

	[Token(Token = "0x60005A1")]
	[Address(RVA = "0xEA8DD8", Offset = "0xEA8DD8", VA = "0xEA8DD8", Slot = "11")]
	public virtual void RenderTargetManualFinalize()
	{
	}

	[Token(Token = "0x60005A2")]
	[Address(RVA = "0xEA8DDC", Offset = "0xEA8DDC", VA = "0xEA8DDC")]
	public void PlayerManualUpdate()
	{
	}

	[Token(Token = "0x60005A3")]
	[Address(RVA = "0xEA7C3C", Offset = "0xEA7C3C", VA = "0xEA7C3C", Slot = "12")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x60005A4")]
	[Address(RVA = "0xEA8EAC", Offset = "0xEA8EAC", VA = "0xEA8EAC", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x60005A5")]
	[Address(RVA = "0xEA8F24", Offset = "0xEA8F24", VA = "0xEA8F24")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x9AD290", Offset = "0x9AD290")]
	private IEnumerator RestartPlayerRoutine()
	{
		return null;
	}

	[Token(Token = "0x60005A6")]
	[Address(RVA = "0xEA8FC0", Offset = "0xEA8FC0", VA = "0xEA8FC0", Slot = "5")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x60005A7")]
	[Address(RVA = "0xEA9094", Offset = "0xEA9094", VA = "0xEA9094", Slot = "13")]
	protected virtual void OnDestroy()
	{
	}

	[Token(Token = "0x60005A8")]
	[Address(RVA = "0xEA90C0", Offset = "0xEA90C0", VA = "0xEA90C0", Slot = "14")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x60005A9")]
	[Address(RVA = "0xEA781C", Offset = "0xEA781C", VA = "0xEA781C", Slot = "6")]
	public override void CriInternalUpdate()
	{
	}

	[Token(Token = "0x60005AA")]
	[Address(RVA = "0xEA9158", Offset = "0xEA9158", VA = "0xEA9158", Slot = "15")]
	public virtual void RenderMovie()
	{
	}

	[Token(Token = "0x60005AB")]
	[Address(RVA = "0xEA9178", Offset = "0xEA9178", VA = "0xEA9178", Slot = "7")]
	public override void CriInternalLateUpdate()
	{
	}

	[Token(Token = "0x60005AC")]
	[Address(RVA = "0xEA91A4", Offset = "0xEA91A4", VA = "0xEA91A4", Slot = "16")]
	protected virtual void OnWillRenderObject()
	{
	}

	[Token(Token = "0x60005AD")]
	[Address(RVA = "0xEA91D4", Offset = "0xEA91D4", VA = "0xEA91D4")]
	private void OnApplicationPause(bool appPause)
	{
	}

	[Token(Token = "0x60005AE")]
	[Address(RVA = "0xEA91DC", Offset = "0xEA91DC", VA = "0xEA91DC")]
	private void ProcessApplicationPause(bool appPause)
	{
	}

	[Token(Token = "0x60005AF")]
	[Address(RVA = "0xEA8D20", Offset = "0xEA8D20", VA = "0xEA8D20")]
	private void CreateMaterial()
	{
	}

	[Token(Token = "0x60005B0")]
	[Address(RVA = "0xEA7B0C", Offset = "0xEA7B0C", VA = "0xEA7B0C")]
	public CriManaMovieMaterial()
	{
	}
}
[Token(Token = "0x200003C")]
public class CriManaMoviePlayerHolder : CriMonoBehaviour
{
	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Player _player;

	[Token(Token = "0x1700006C")]
	public Player player
	{
		[Token(Token = "0x60005B1")]
		[Address(RVA = "0xEA98B8", Offset = "0xEA98B8", VA = "0xEA98B8")]
		set
		{
		}
	}

	[Token(Token = "0x60005B2")]
	[Address(RVA = "0xEA98C0", Offset = "0xEA98C0", VA = "0xEA98C0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005B3")]
	[Address(RVA = "0xEA9928", Offset = "0xEA9928", VA = "0xEA9928", Slot = "6")]
	public override void CriInternalUpdate()
	{
	}

	[Token(Token = "0x60005B4")]
	[Address(RVA = "0xEA992C", Offset = "0xEA992C", VA = "0xEA992C", Slot = "7")]
	public override void CriInternalLateUpdate()
	{
	}

	[Token(Token = "0x60005B5")]
	[Address(RVA = "0xEA9930", Offset = "0xEA9930", VA = "0xEA9930")]
	private void Start()
	{
	}

	[Token(Token = "0x60005B6")]
	[Address(RVA = "0xEA9934", Offset = "0xEA9934", VA = "0xEA9934")]
	public CriManaMoviePlayerHolder()
	{
	}
}
[Token(Token = "0x200003D")]
public static class CriWareDecrypter
{
	[Token(Token = "0x2000165")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x9A4D20", Offset = "0x9A4D20")]
	public delegate ulong CallbackFromNativeDelegate(IntPtr ptr1);

	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ulong temporalStorage;

	[Token(Token = "0x60005B7")]
	[Address(RVA = "0xEABB24", Offset = "0xEABB24", VA = "0xEABB24")]
	public static bool Initialize(CriWareDecrypterConfig config)
	{
		return default(bool);
	}

	[Token(Token = "0x60005B8")]
	[Address(RVA = "0xEABBB8", Offset = "0xEABBB8", VA = "0xEABBB8")]
	public static bool Initialize(string key, string authenticationFile, bool enableAtomDecryption, bool enableManaDecryption)
	{
		return default(bool);
	}

	[Token(Token = "0x60005B9")]
	[Address(RVA = "0xEABE70", Offset = "0xEABE70", VA = "0xEABE70")]
	[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x9AD2F4", Offset = "0x9AD2F4")]
	private static ulong CallbackFromNative(IntPtr ptr1)
	{
		return default(ulong);
	}

	[PreserveSig]
	[Token(Token = "0x60005BA")]
	[Address(RVA = "0xEABDC0", Offset = "0xEABDC0", VA = "0xEABDC0")]
	public static extern int CRIWARE385C9322(bool enable_atom_decryption, bool enable_mana_decryption, CallbackFromNativeDelegate func, IntPtr obj);
}
[Token(Token = "0x200003E")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4040", Offset = "0x9A4040")]
public class CriWareErrorHandler : CriMonoBehaviour
{
	[Token(Token = "0x2000166")]
	public delegate void Callback(string message);

	[Token(Token = "0x2000167")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x9A4D34", Offset = "0x9A4D34")]
	public delegate void ErrorCallbackFunc(string errmsg);

	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool enableDebugPrintOnTerminal;

	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool enableForceCrashOnError;

	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	public bool dontDestroyOnLoad;

	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A5424", Offset = "0x9A5424")]
	private static string <errorMessage>k__BackingField;

	[Token(Token = "0x4000106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9A5444", Offset = "0x9A5444")]
	public static Callback callback;

	[Token(Token = "0x4000107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public uint messageBufferCounts;

	[Token(Token = "0x4000108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static int initializationCount;

	[Token(Token = "0x1700006D")]
	public static string errorMessage
	{
		[Token(Token = "0x60005BC")]
		[Address(RVA = "0xEAC2BC", Offset = "0xEAC2BC", VA = "0xEAC2BC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD358", Offset = "0x9AD358")]
		get
		{
			return null;
		}
		[Token(Token = "0x60005BD")]
		[Address(RVA = "0xEAC324", Offset = "0xEAC324", VA = "0xEAC324")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD368", Offset = "0x9AD368")]
		set
		{
		}
	}

	[Token(Token = "0x1400000F")]
	public static event Callback OnCallback
	{
		[Token(Token = "0x60005BE")]
		[Address(RVA = "0xEAC390", Offset = "0xEAC390", VA = "0xEAC390")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD378", Offset = "0x9AD378")]
		add
		{
		}
		[Token(Token = "0x60005BF")]
		[Address(RVA = "0xEAC480", Offset = "0xEAC480", VA = "0xEAC480")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD388", Offset = "0x9AD388")]
		remove
		{
		}
	}

	[Token(Token = "0x60005C0")]
	[Address(RVA = "0xEAC570", Offset = "0xEAC570", VA = "0xEAC570")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005C1")]
	[Address(RVA = "0xEAC968", Offset = "0xEAC968", VA = "0xEAC968", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x60005C2")]
	[Address(RVA = "0xEACA00", Offset = "0xEACA00", VA = "0xEACA00", Slot = "5")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x60005C3")]
	[Address(RVA = "0xEACA6C", Offset = "0xEACA6C", VA = "0xEACA6C")]
	private void Start()
	{
	}

	[Token(Token = "0x60005C4")]
	[Address(RVA = "0xEACA70", Offset = "0xEACA70", VA = "0xEACA70", Slot = "6")]
	public override void CriInternalUpdate()
	{
	}

	[Token(Token = "0x60005C5")]
	[Address(RVA = "0xEACD30", Offset = "0xEACD30", VA = "0xEACD30", Slot = "7")]
	public override void CriInternalLateUpdate()
	{
	}

	[Token(Token = "0x60005C6")]
	[Address(RVA = "0xEACD34", Offset = "0xEACD34", VA = "0xEACD34")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60005C7")]
	[Address(RVA = "0xEACA80", Offset = "0xEACA80", VA = "0xEACA80")]
	private void DequeueErrorMessages()
	{
	}

	[Token(Token = "0x60005C8")]
	[Address(RVA = "0xEACF30", Offset = "0xEACF30", VA = "0xEACF30")]
	private static void HandleMessage(string errmsg)
	{
	}

	[Token(Token = "0x60005C9")]
	[Address(RVA = "0xEAD0A4", Offset = "0xEAD0A4", VA = "0xEAD0A4")]
	private static void OutputDefaultLog(string errmsg)
	{
	}

	[Token(Token = "0x60005CA")]
	[Address(RVA = "0xEAC258", Offset = "0xEAC258", VA = "0xEAC258")]
	[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x9AD398", Offset = "0x9AD398")]
	private static void ErrorCallbackFromNative(string errmsg)
	{
	}

	[PreserveSig]
	[Token(Token = "0x60005CB")]
	[Address(RVA = "0xEAC7D4", Offset = "0xEAC7D4", VA = "0xEAC7D4")]
	private static extern void CRIWARE2944E024(uint length);

	[PreserveSig]
	[Token(Token = "0x60005CC")]
	[Address(RVA = "0xEAC6E4", Offset = "0xEAC6E4", VA = "0xEAC6E4")]
	private static extern void CRIWARE2DABE6AD();

	[PreserveSig]
	[Token(Token = "0x60005CD")]
	[Address(RVA = "0xEACE4C", Offset = "0xEACE4C", VA = "0xEACE4C")]
	private static extern void CRIWARE992B1A7A();

	[PreserveSig]
	[Token(Token = "0x60005CE")]
	[Address(RVA = "0xEAC854", Offset = "0xEAC854", VA = "0xEAC854")]
	private static extern void CRIWAREE5C6ECB6(bool sw);

	[PreserveSig]
	[Token(Token = "0x60005CF")]
	[Address(RVA = "0xEACDDC", Offset = "0xEACDDC", VA = "0xEACDDC")]
	private static extern void CRIWARE972AEE70();

	[PreserveSig]
	[Token(Token = "0x60005D0")]
	[Address(RVA = "0xEACEBC", Offset = "0xEACEBC", VA = "0xEACEBC")]
	private static extern IntPtr CRIWARE24FFC2BE();

	[PreserveSig]
	[Token(Token = "0x60005D1")]
	[Address(RVA = "0xEAC754", Offset = "0xEAC754", VA = "0xEAC754")]
	private static extern void CRIWARE2AB443C5(bool sw);

	[PreserveSig]
	[Token(Token = "0x60005D2")]
	[Address(RVA = "0xEAC8E4", Offset = "0xEAC8E4", VA = "0xEAC8E4")]
	private static extern void CRIWAREEA2D718D(ErrorCallbackFunc callback);

	[Token(Token = "0x60005D3")]
	[Address(RVA = "0xEAD5A8", Offset = "0xEAD5A8", VA = "0xEAD5A8")]
	public CriWareErrorHandler()
	{
	}
}
[Serializable]
[Token(Token = "0x200003F")]
public class CriFsConfig
{
	[Token(Token = "0x4000109")]
	public const int defaultAndroidDeviceReadBitrate = 50000000;

	[Token(Token = "0x400010A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int numberOfLoaders;

	[Token(Token = "0x400010B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int numberOfBinders;

	[Token(Token = "0x400010C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int numberOfInstallers;

	[Token(Token = "0x400010D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int installBufferSize;

	[Token(Token = "0x400010E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int maxPath;

	[Token(Token = "0x400010F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string userAgentString;

	[Token(Token = "0x4000110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool minimizeFileDescriptorUsage;

	[Token(Token = "0x4000111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool enableCrcCheck;

	[Token(Token = "0x4000112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int androidDeviceReadBitrate;

	[Token(Token = "0x60005D5")]
	[Address(RVA = "0xF75750", Offset = "0xF75750", VA = "0xF75750")]
	public CriFsConfig()
	{
	}
}
[Serializable]
[Token(Token = "0x2000040")]
public class CriAtomConfig
{
	[Serializable]
	[Token(Token = "0x2000168")]
	public class StandardVoicePoolConfig
	{
		[Token(Token = "0x400083E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int memoryVoices;

		[Token(Token = "0x400083F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int streamingVoices;

		[Token(Token = "0x6000CDE")]
		[Address(RVA = "0xFA66B0", Offset = "0xFA66B0", VA = "0xFA66B0")]
		public StandardVoicePoolConfig()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000169")]
	public class HcaMxVoicePoolConfig
	{
		[Token(Token = "0x4000840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int memoryVoices;

		[Token(Token = "0x4000841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int streamingVoices;

		[Token(Token = "0x6000CDF")]
		[Address(RVA = "0xFA66C4", Offset = "0xFA66C4", VA = "0xFA66C4")]
		public HcaMxVoicePoolConfig()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x200016A")]
	public enum InGamePreviewSwitchMode
	{
		[Token(Token = "0x4000843")]
		Disable,
		[Token(Token = "0x4000844")]
		Enable,
		[Token(Token = "0x4000845")]
		FollowBuildSetting,
		[Token(Token = "0x4000846")]
		Default
	}

	[Serializable]
	[Token(Token = "0x200016B")]
	public class InGamePreviewConfig
	{
		[Token(Token = "0x4000847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int maxPreviewObjects;

		[Token(Token = "0x4000848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int communicationBufferSize;

		[Token(Token = "0x4000849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int playbackPositionUpdateInterval;

		[Token(Token = "0x6000CE0")]
		[Address(RVA = "0xFA66CC", Offset = "0xFA66CC", VA = "0xFA66CC")]
		public InGamePreviewConfig()
		{
		}
	}

	[Token(Token = "0x200016C")]
	public enum LinuxOutput
	{
		[Token(Token = "0x400084B")]
		Default,
		[Token(Token = "0x400084C")]
		PulseAudio,
		[Token(Token = "0x400084D")]
		ALSA
	}

	[Serializable]
	[Token(Token = "0x200016D")]
	public class AndroidLowLatencyStandardVoicePoolConfig
	{
		[Token(Token = "0x400084E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int memoryVoices;

		[Token(Token = "0x400084F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int streamingVoices;

		[Token(Token = "0x6000CE1")]
		[Address(RVA = "0xFA66E8", Offset = "0xFA66E8", VA = "0xFA66E8")]
		public AndroidLowLatencyStandardVoicePoolConfig()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x200016E")]
	public class VitaManaVoicePoolConfig
	{
		[Token(Token = "0x4000850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int numberOfManaDecoders;

		[Token(Token = "0x6000CE2")]
		[Address(RVA = "0xFA66F0", Offset = "0xFA66F0", VA = "0xFA66F0")]
		public VitaManaVoicePoolConfig()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x200016F")]
	public class VitaAtrac9VoicePoolConfig
	{
		[Token(Token = "0x4000851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int memoryVoices;

		[Token(Token = "0x4000852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int streamingVoices;

		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0xFA6700", Offset = "0xFA6700", VA = "0xFA6700")]
		public VitaAtrac9VoicePoolConfig()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000170")]
	public class Ps4Atrac9VoicePoolConfig
	{
		[Token(Token = "0x4000853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int memoryVoices;

		[Token(Token = "0x4000854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int streamingVoices;

		[Token(Token = "0x6000CE4")]
		[Address(RVA = "0xFA6708", Offset = "0xFA6708", VA = "0xFA6708")]
		public Ps4Atrac9VoicePoolConfig()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000171")]
	public class SwitchOpusVoicePoolConfig
	{
		[Token(Token = "0x4000855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int memoryVoices;

		[Token(Token = "0x4000856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int streamingVoices;

		[Token(Token = "0x6000CE5")]
		[Address(RVA = "0xFA6710", Offset = "0xFA6710", VA = "0xFA6710")]
		public SwitchOpusVoicePoolConfig()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000172")]
	public class Ps4Audio3dConfig
	{
		[Serializable]
		[Token(Token = "0x20001EE")]
		public class VoicePoolConfig
		{
			[Token(Token = "0x4000B0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int memoryVoices;

			[Token(Token = "0x4000B0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int streamingVoices;

			[Token(Token = "0x6000EC6")]
			[Address(RVA = "0xFA6790", Offset = "0xFA6790", VA = "0xFA6790")]
			public VoicePoolConfig()
			{
			}
		}

		[Token(Token = "0x4000857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool useAudio3D;

		[Token(Token = "0x4000858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VoicePoolConfig voicePoolConfig;

		[Token(Token = "0x6000CE6")]
		[Address(RVA = "0xFA6718", Offset = "0xFA6718", VA = "0xFA6718")]
		public Ps4Audio3dConfig()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000173")]
	public class WebGLWebAudioVoicePoolConfig
	{
		[Token(Token = "0x4000859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int voices;

		[Token(Token = "0x6000CE7")]
		[Address(RVA = "0xFA6780", Offset = "0xFA6780", VA = "0xFA6780")]
		public WebGLWebAudioVoicePoolConfig()
		{
		}
	}

	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string acfFileName;

	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int maxVirtualVoices;

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int maxVoiceLimitGroups;

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int maxCategories;

	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int maxSequenceEventsPerFrame;

	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int maxBeatSyncCallbacksPerFrame;

	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int maxCueLinkCallbacksPerFrame;

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public StandardVoicePoolConfig standardVoicePoolConfig;

	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public HcaMxVoicePoolConfig hcaMxVoicePoolConfig;

	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int outputSamplingRate;

	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool usesInGamePreview;

	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public InGamePreviewSwitchMode inGamePreviewMode;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool switchInitializeSocket;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public InGamePreviewConfig inGamePreviewConfig;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float serverFrequency;

	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public int asrOutputChannels;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool useRandomSeedWithTime;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public int categoriesPerPlayback;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public int maxBuses;

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public int maxParameterBlocks;

	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool vrMode;

	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	public bool keepPlayingSoundOnPause;

	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public int pcBufferingTime;

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public LinuxOutput linuxOutput;

	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public int linuxPulseLatencyUsec;

	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public bool iosEnableSonicSync;

	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public int iosBufferingTime;

	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public bool iosOverrideIPodMusic;

	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
	public bool androidEnableSonicSync;

	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public int androidBufferingTime;

	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public int androidStartBufferingTime;

	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public AndroidLowLatencyStandardVoicePoolConfig androidLowLatencyStandardVoicePoolConfig;

	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public bool androidUsesAndroidFastMixer;

	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
	public bool androidForceToUseAsrForDefaultPlayback;

	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA2")]
	public bool androidUsesAAudio;

	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public VitaManaVoicePoolConfig vitaManaVoicePoolConfig;

	[Token(Token = "0x4000137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public VitaAtrac9VoicePoolConfig vitaAtrac9VoicePoolConfig;

	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Ps4Atrac9VoicePoolConfig ps4Atrac9VoicePoolConfig;

	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public SwitchOpusVoicePoolConfig switchOpusVoicePoolConfig;

	[Token(Token = "0x400013A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Ps4Audio3dConfig ps4Audio3dConfig;

	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public WebGLWebAudioVoicePoolConfig webglWebAudioVoicePoolConfig;

	[Token(Token = "0x60005D6")]
	[Address(RVA = "0xFA647C", Offset = "0xFA647C", VA = "0xFA647C")]
	public CriAtomConfig()
	{
	}
}
[Serializable]
[Token(Token = "0x2000041")]
public class CriManaConfig
{
	[Serializable]
	[Token(Token = "0x2000174")]
	public class PCH264PlaybackConfig
	{
		[Token(Token = "0x400085A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool useH264Playback;

		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0xEA76D0", Offset = "0xEA76D0", VA = "0xEA76D0")]
		public PCH264PlaybackConfig()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000175")]
	public class VitaH264PlaybackConfig
	{
		[Token(Token = "0x400085B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool useH264Playback;

		[Token(Token = "0x400085C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int maxWidth;

		[Token(Token = "0x400085D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int maxHeight;

		[Token(Token = "0x400085E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool getMemoryFromTexture;

		[Token(Token = "0x6000CE9")]
		[Address(RVA = "0xEA76E0", Offset = "0xEA76E0", VA = "0xEA76E0")]
		public VitaH264PlaybackConfig()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000176")]
	public class WebGLConfig
	{
		[Token(Token = "0x400085F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string webworkerPath;

		[Token(Token = "0x4000860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int heapSize;

		[Token(Token = "0x6000CEA")]
		[Address(RVA = "0xEA76F4", Offset = "0xEA76F4", VA = "0xEA76F4")]
		public WebGLConfig()
		{
		}
	}

	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int numberOfDecoders;

	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int numberOfMaxEntries;

	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public readonly bool graphicsMultiThreaded;

	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PCH264PlaybackConfig pcH264PlaybackConfig;

	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public VitaH264PlaybackConfig vitaH264PlaybackConfig;

	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public WebGLConfig webglConfig;

	[Token(Token = "0x60005D7")]
	[Address(RVA = "0xEA7600", Offset = "0xEA7600", VA = "0xEA7600")]
	public CriManaConfig()
	{
	}
}
[Serializable]
[Token(Token = "0x2000042")]
public class CriWareDecrypterConfig
{
	[Token(Token = "0x4000142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string key;

	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string authenticationFile;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool enableAtomDecryption;

	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool enableManaDecryption;

	[Token(Token = "0x60005D8")]
	[Address(RVA = "0xEAC1F8", Offset = "0xEAC1F8", VA = "0xEAC1F8")]
	public CriWareDecrypterConfig()
	{
	}
}
[Token(Token = "0x2000043")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4078", Offset = "0x9A4078")]
public class CriWareInitializer : CriMonoBehaviour
{
	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool initializesFileSystem;

	[Token(Token = "0x4000147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public CriFsConfig fileSystemConfig;

	[Token(Token = "0x4000148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool initializesAtom;

	[Token(Token = "0x4000149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public CriAtomConfig atomConfig;

	[Token(Token = "0x400014A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool initializesMana;

	[Token(Token = "0x400014B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public CriManaConfig manaConfig;

	[Token(Token = "0x400014C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool useDecrypter;

	[Token(Token = "0x400014D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public CriWareDecrypterConfig decrypterConfig;

	[Token(Token = "0x400014E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool dontInitializeOnAwake;

	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	public bool dontDestroyOnLoad;

	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int initializationCount;

	[Token(Token = "0x60005D9")]
	[Address(RVA = "0xEAD9C4", Offset = "0xEAD9C4", VA = "0xEAD9C4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005DA")]
	[Address(RVA = "0xEADEF8", Offset = "0xEADEF8", VA = "0xEADEF8", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x60005DB")]
	[Address(RVA = "0xEADEFC", Offset = "0xEADEFC", VA = "0xEADEFC")]
	private void Start()
	{
	}

	[Token(Token = "0x60005DC")]
	[Address(RVA = "0xEADF00", Offset = "0xEADF00", VA = "0xEADF00")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60005DD")]
	[Address(RVA = "0xEAE0B0", Offset = "0xEAE0B0", VA = "0xEAE0B0", Slot = "6")]
	public override void CriInternalUpdate()
	{
	}

	[Token(Token = "0x60005DE")]
	[Address(RVA = "0xEAE0B4", Offset = "0xEAE0B4", VA = "0xEAE0B4", Slot = "7")]
	public override void CriInternalLateUpdate()
	{
	}

	[Token(Token = "0x60005DF")]
	[Address(RVA = "0xEADA40", Offset = "0xEADA40", VA = "0xEADA40")]
	public void Initialize()
	{
	}

	[Token(Token = "0x60005E0")]
	[Address(RVA = "0xEADF04", Offset = "0xEADF04", VA = "0xEADF04")]
	public void Shutdown()
	{
	}

	[Token(Token = "0x60005E1")]
	[Address(RVA = "0xEAE7A0", Offset = "0xEAE7A0", VA = "0xEAE7A0")]
	public static bool IsInitialized()
	{
		return default(bool);
	}

	[Token(Token = "0x60005E2")]
	[Address(RVA = "0xEAE840", Offset = "0xEAE840", VA = "0xEAE840")]
	public static void AddAudioEffectInterface(IntPtr effect_interface)
	{
	}

	[Token(Token = "0x60005E3")]
	[Address(RVA = "0xEAE0B8", Offset = "0xEAE0B8", VA = "0xEAE0B8")]
	public static bool InitializeFileSystem(CriFsConfig config)
	{
		return default(bool);
	}

	[Token(Token = "0x60005E4")]
	[Address(RVA = "0xEAE208", Offset = "0xEAE208", VA = "0xEAE208")]
	public static bool InitializeAtom(CriAtomConfig config)
	{
		return default(bool);
	}

	[Token(Token = "0x60005E5")]
	[Address(RVA = "0xEAE6B0", Offset = "0xEAE6B0", VA = "0xEAE6B0")]
	public static bool InitializeMana(CriManaConfig config)
	{
		return default(bool);
	}

	[Token(Token = "0x60005E6")]
	[Address(RVA = "0xEAE8DC", Offset = "0xEAE8DC", VA = "0xEAE8DC")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9AD3FC", Offset = "0x9AD3FC")]
	public static bool InitializeDecrypter(CriWareDecrypterConfig config)
	{
		return default(bool);
	}

	[Token(Token = "0x60005E7")]
	[Address(RVA = "0xEAE940", Offset = "0xEAE940", VA = "0xEAE940")]
	public CriWareInitializer()
	{
	}
}
[Token(Token = "0x2000044")]
public static class CriAtomExDebug
{
	[Token(Token = "0x2000177")]
	public struct ResourcesInfo
	{
		[Token(Token = "0x4000861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CriAtomEx.ResourceUsage virtualVoiceUsage;

		[Token(Token = "0x4000862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CriAtomEx.ResourceUsage sequenceUsage;

		[Token(Token = "0x4000863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CriAtomEx.ResourceUsage sequenceTrackUsage;

		[Token(Token = "0x4000864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CriAtomEx.ResourceUsage sequenceTrackItemUsage;
	}

	[Token(Token = "0x60005E9")]
	[Address(RVA = "0xF5DFCC", Offset = "0xF5DFCC", VA = "0xF5DFCC")]
	public static void GetResourcesInfo(out ResourcesInfo resourcesInfo)
	{
	}

	[PreserveSig]
	[Token(Token = "0x60005EA")]
	[Address(RVA = "0xF5DFD0", Offset = "0xF5DFD0", VA = "0xF5DFD0")]
	private static extern void criAtomExDebug_GetResourcesInfo(out ResourcesInfo resourcesInfo);
}
[Token(Token = "0x2000045")]
public static class CriAtomExAcfDebug
{
	[Token(Token = "0x2000178")]
	public struct CategoryInfo
	{
		[Token(Token = "0x4000865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint groupNo;

		[Token(Token = "0x4000866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint id;

		[Token(Token = "0x4000867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string name;

		[Token(Token = "0x4000868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint numCueLimits;

		[Token(Token = "0x4000869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float volume;
	}

	[Token(Token = "0x2000179")]
	public struct DspBusInfo
	{
		[Token(Token = "0x400086A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string name;

		[Token(Token = "0x400086B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float volume;

		[Token(Token = "0x400086C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float pan3dVolume;

		[Token(Token = "0x400086D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float pan3dAngle;

		[Token(Token = "0x400086E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float pan3dDistance;

		[Token(Token = "0x400086F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ushort[] fxIndexes;

		[Token(Token = "0x4000870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ushort[] busLinkIndexes;

		[Token(Token = "0x4000871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ushort busNo;

		[Token(Token = "0x4000872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public byte numFxes;

		[Token(Token = "0x4000873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		public byte numBusLinks;
	}

	[Token(Token = "0x200017A")]
	public struct AisacControlInfo
	{
		[Token(Token = "0x4000874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string name;

		[Token(Token = "0x4000875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint id;
	}

	[Token(Token = "0x200017B")]
	public enum AisacType
	{
		[Token(Token = "0x4000877")]
		Normal,
		[Token(Token = "0x4000878")]
		AutoModulation
	}

	[Token(Token = "0x200017C")]
	public struct GlobalAisacInfo
	{
		[Token(Token = "0x4000879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string name;

		[Token(Token = "0x400087A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ushort index;

		[Token(Token = "0x400087B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		public ushort numGraphs;

		[Token(Token = "0x400087C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public AisacType type;

		[Token(Token = "0x400087D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float randomRange;

		[Token(Token = "0x400087E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ushort controlId;
	}

	[Token(Token = "0x200017D")]
	public struct SelectorInfo
	{
		[Token(Token = "0x400087F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string name;

		[Token(Token = "0x4000880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ushort index;

		[Token(Token = "0x4000881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		public ushort numLabels;

		[Token(Token = "0x4000882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ushort globalLabelIndex;
	}

	[Token(Token = "0x200017E")]
	public struct SelectorLabelInfo
	{
		[Token(Token = "0x4000883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string selectorName;

		[Token(Token = "0x4000884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string labelName;
	}

	[Token(Token = "0x200017F")]
	private struct CategoryInfoForMarshaling
	{
		[Token(Token = "0x4000885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint groupNo;

		[Token(Token = "0x4000886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint id;

		[Token(Token = "0x4000887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr namePtr;

		[Token(Token = "0x4000888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint numCueLimits;

		[Token(Token = "0x4000889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float volume;

		[Token(Token = "0x6000CEB")]
		[Address(RVA = "0x8AB93C", Offset = "0x8AB93C", VA = "0x8AB93C")]
		public void Convert(out CategoryInfo x)
		{
		}
	}

	[Token(Token = "0x2000180")]
	private struct DspBusInfoForMarshaling
	{
		[Token(Token = "0x400088A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr namePtr;

		[Token(Token = "0x400088B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float volume;

		[Token(Token = "0x400088C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float pan3dVolume;

		[Token(Token = "0x400088D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float pan3dAngle;

		[Token(Token = "0x400088E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float pan3dDistance;

		[Token(Token = "0x400088F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ushort[] fxIndexes;

		[Token(Token = "0x4000890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ushort[] busLinkIndexes;

		[Token(Token = "0x4000891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ushort busNo;

		[Token(Token = "0x4000892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public byte numFxes;

		[Token(Token = "0x4000893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		public byte numBusLinks;

		[Token(Token = "0x6000CEC")]
		[Address(RVA = "0x8ABCAC", Offset = "0x8ABCAC", VA = "0x8ABCAC")]
		public void Convert(out DspBusInfo x)
		{
		}
	}

	[Token(Token = "0x2000181")]
	private struct AisacControlInfoForMarshaling
	{
		[Token(Token = "0x4000894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr namePtr;

		[Token(Token = "0x4000895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint id;

		[Token(Token = "0x6000CED")]
		[Address(RVA = "0x8AB848", Offset = "0x8AB848", VA = "0x8AB848")]
		public void Convert(out AisacControlInfo x)
		{
		}
	}

	[Token(Token = "0x2000182")]
	private struct GlobalAisacInfoForMarshaling
	{
		[Token(Token = "0x4000896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr namePtr;

		[Token(Token = "0x4000897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ushort index;

		[Token(Token = "0x4000898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		public ushort numGraphs;

		[Token(Token = "0x4000899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint type;

		[Token(Token = "0x400089A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float randomRange;

		[Token(Token = "0x400089B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ushort controlId;

		[Token(Token = "0x400089C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
		public ushort dummy;

		[Token(Token = "0x6000CEE")]
		[Address(RVA = "0x8A8B80", Offset = "0x8A8B80", VA = "0x8A8B80")]
		public void Convert(out GlobalAisacInfo x)
		{
		}
	}

	[Token(Token = "0x2000183")]
	private struct SelectorInfoForMarshaling
	{
		[Token(Token = "0x400089D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr namePtr;

		[Token(Token = "0x400089E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ushort index;

		[Token(Token = "0x400089F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		public ushort numLabels;

		[Token(Token = "0x40008A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ushort globalLabelIndex;

		[Token(Token = "0x6000CEF")]
		[Address(RVA = "0x8A8C88", Offset = "0x8A8C88", VA = "0x8A8C88")]
		public void Convert(out SelectorInfo x)
		{
		}
	}

	[Token(Token = "0x2000184")]
	private struct SelectorLabelInfoForMarshaling
	{
		[Token(Token = "0x40008A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr selectorNamePtr;

		[Token(Token = "0x40008A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr labelNamePtr;

		[Token(Token = "0x6000CF0")]
		[Address(RVA = "0x8A8D74", Offset = "0x8A8D74", VA = "0x8A8D74")]
		public void Convert(out SelectorLabelInfo x)
		{
		}
	}

	[Token(Token = "0x60005EB")]
	[Address(RVA = "0xFB4A58", Offset = "0xFB4A58", VA = "0xFB4A58")]
	public static int GetNumCategories()
	{
		return default(int);
	}

	[Token(Token = "0x60005EC")]
	[Address(RVA = "0xFB4AD0", Offset = "0xFB4AD0", VA = "0xFB4AD0")]
	public static bool GetCategoryInfoByIndex(ushort index, out CategoryInfo categoryInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x60005ED")]
	[Address(RVA = "0xFB4C0C", Offset = "0xFB4C0C", VA = "0xFB4C0C")]
	public static bool GetCategoryInfoByName(string name, out CategoryInfo categoryInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x60005EE")]
	[Address(RVA = "0xFB4D14", Offset = "0xFB4D14", VA = "0xFB4D14")]
	public static bool GetCategoryInfoById(uint id, out CategoryInfo categoryInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x60005EF")]
	[Address(RVA = "0xFB4E04", Offset = "0xFB4E04", VA = "0xFB4E04")]
	public static int GetNumBuses()
	{
		return default(int);
	}

	[Token(Token = "0x60005F0")]
	[Address(RVA = "0xFB4E7C", Offset = "0xFB4E7C", VA = "0xFB4E7C")]
	public static bool GetDspBusInformation(ushort index, out DspBusInfo dspBusInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x60005F1")]
	[Address(RVA = "0xFB5044", Offset = "0xFB5044", VA = "0xFB5044")]
	public static int GetNumAisacControls()
	{
		return default(int);
	}

	[Token(Token = "0x60005F2")]
	[Address(RVA = "0xFB50BC", Offset = "0xFB50BC", VA = "0xFB50BC")]
	public static bool GetAisacControlInfo(ushort index, out AisacControlInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x60005F3")]
	[Address(RVA = "0xFB51D4", Offset = "0xFB51D4", VA = "0xFB51D4")]
	public static uint GetAisacControlIdByName(string name)
	{
		return default(uint);
	}

	[Token(Token = "0x60005F4")]
	[Address(RVA = "0xFB5270", Offset = "0xFB5270", VA = "0xFB5270")]
	public static string GetAisacControlNameById(uint id)
	{
		return null;
	}

	[Token(Token = "0x60005F5")]
	[Address(RVA = "0xFB5304", Offset = "0xFB5304", VA = "0xFB5304")]
	public static int GetNumGlobalAisacs()
	{
		return default(int);
	}

	[Token(Token = "0x60005F6")]
	[Address(RVA = "0xFB537C", Offset = "0xFB537C", VA = "0xFB537C")]
	public static bool GetGlobalAisacInfo(ushort index, out GlobalAisacInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x60005F7")]
	[Address(RVA = "0xFB545C", Offset = "0xFB545C", VA = "0xFB545C")]
	public static bool GetGlobalAisacInfoByName(string name, out GlobalAisacInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x60005F8")]
	[Address(RVA = "0xFB5554", Offset = "0xFB5554", VA = "0xFB5554")]
	public static int GetNumSelectors()
	{
		return default(int);
	}

	[Token(Token = "0x60005F9")]
	[Address(RVA = "0xFB55CC", Offset = "0xFB55CC", VA = "0xFB55CC")]
	public static bool GetSelectorInfoByIndex(ushort index, out SelectorInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x60005FA")]
	[Address(RVA = "0xFB56A8", Offset = "0xFB56A8", VA = "0xFB56A8")]
	public static bool GetSelectorInfoByName(string name, out SelectorInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x60005FB")]
	[Address(RVA = "0xFB579C", Offset = "0xFB579C", VA = "0xFB579C")]
	public static bool GetSelectorLabelInfo(ref SelectorInfo selectorInfo, ushort index, out SelectorLabelInfo labelInfo)
	{
		return default(bool);
	}

	[PreserveSig]
	[Token(Token = "0x60005FC")]
	[Address(RVA = "0xFB4A5C", Offset = "0xFB4A5C", VA = "0xFB4A5C")]
	private static extern int criAtomExAcf_GetNumCategories();

	[PreserveSig]
	[Token(Token = "0x60005FD")]
	[Address(RVA = "0xFB4B30", Offset = "0xFB4B30", VA = "0xFB4B30")]
	private static extern int criAtomExAcf_GetCategoryInfo(ushort index, out CategoryInfoForMarshaling categoryInfo);

	[PreserveSig]
	[Token(Token = "0x60005FE")]
	[Address(RVA = "0xFB4C6C", Offset = "0xFB4C6C", VA = "0xFB4C6C")]
	private static extern int criAtomExAcf_GetCategoryInfoByName(string name, out CategoryInfoForMarshaling categoryInfo);

	[PreserveSig]
	[Token(Token = "0x60005FF")]
	[Address(RVA = "0xFB4D74", Offset = "0xFB4D74", VA = "0xFB4D74")]
	private static extern int criAtomExAcf_GetCategoryInfoById(uint id, out CategoryInfoForMarshaling categoryInfo);

	[PreserveSig]
	[Token(Token = "0x6000600")]
	[Address(RVA = "0xFB4E08", Offset = "0xFB4E08", VA = "0xFB4E08")]
	private static extern int criAtomExAcf_GetNumBuses();

	[PreserveSig]
	[Token(Token = "0x6000601")]
	[Address(RVA = "0xFB4EF8", Offset = "0xFB4EF8", VA = "0xFB4EF8")]
	private static extern int criAtomExAcf_GetDspBusInformation(ushort index, out DspBusInfoForMarshaling dspBusInfo);

	[PreserveSig]
	[Token(Token = "0x6000602")]
	[Address(RVA = "0xFB5048", Offset = "0xFB5048", VA = "0xFB5048")]
	private static extern int criAtomExAcf_GetNumAisacControls();

	[PreserveSig]
	[Token(Token = "0x6000603")]
	[Address(RVA = "0xFB5110", Offset = "0xFB5110", VA = "0xFB5110")]
	private static extern int criAtomExAcf_GetAisacControlInfo(ushort index, out AisacControlInfoForMarshaling info);

	[PreserveSig]
	[Token(Token = "0x6000604")]
	[Address(RVA = "0xFB51D8", Offset = "0xFB51D8", VA = "0xFB51D8")]
	private static extern uint criAtomExAcf_GetAisacControlIdByName(string name);

	[PreserveSig]
	[Token(Token = "0x6000605")]
	[Address(RVA = "0xFB5284", Offset = "0xFB5284", VA = "0xFB5284")]
	private static extern IntPtr criAtomExAcf_GetAisacControlNameById(uint id);

	[PreserveSig]
	[Token(Token = "0x6000606")]
	[Address(RVA = "0xFB5308", Offset = "0xFB5308", VA = "0xFB5308")]
	private static extern int criAtomExAcf_GetNumGlobalAisacs();

	[PreserveSig]
	[Token(Token = "0x6000607")]
	[Address(RVA = "0xFB53CC", Offset = "0xFB53CC", VA = "0xFB53CC")]
	private static extern int criAtomExAcf_GetGlobalAisacInfo(ushort index, out GlobalAisacInfoForMarshaling info);

	[PreserveSig]
	[Token(Token = "0x6000608")]
	[Address(RVA = "0xFB54AC", Offset = "0xFB54AC", VA = "0xFB54AC")]
	private static extern int criAtomExAcf_GetGlobalAisacInfoByName(string name, out GlobalAisacInfoForMarshaling info);

	[PreserveSig]
	[Token(Token = "0x6000609")]
	[Address(RVA = "0xFB5558", Offset = "0xFB5558", VA = "0xFB5558")]
	private static extern int criAtomExAcf_GetNumSelectors();

	[PreserveSig]
	[Token(Token = "0x600060A")]
	[Address(RVA = "0xFB5618", Offset = "0xFB5618", VA = "0xFB5618")]
	private static extern int criAtomExAcf_GetSelectorInfoByIndex(ushort index, out SelectorInfoForMarshaling info);

	[PreserveSig]
	[Token(Token = "0x600060B")]
	[Address(RVA = "0xFB56F4", Offset = "0xFB56F4", VA = "0xFB56F4")]
	private static extern int criAtomExAcf_GetSelectorInfoByName(string name, out SelectorInfoForMarshaling info);

	[PreserveSig]
	[Token(Token = "0x600060C")]
	[Address(RVA = "0xFB5800", Offset = "0xFB5800", VA = "0xFB5800")]
	private static extern int criAtomExAcf_GetSelectorLabelInfo(ref SelectorInfoForMarshaling info, ushort labelIndex, out SelectorLabelInfoForMarshaling label_info);
}
[Token(Token = "0x2000046")]
public static class CriAtomExAcbDebug
{
	[Token(Token = "0x2000185")]
	public struct AcbInfo
	{
		[Token(Token = "0x40008A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string name;

		[Token(Token = "0x40008A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint size;

		[Token(Token = "0x40008A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint version;

		[Token(Token = "0x40008A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CriAtomEx.CharacterEncoding characterEncoding;

		[Token(Token = "0x40008A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float volume;

		[Token(Token = "0x40008A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int numCues;
	}

	[Token(Token = "0x2000186")]
	private struct AcbInfoForMarshaling
	{
		[Token(Token = "0x40008A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr namePtr;

		[Token(Token = "0x40008AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint size;

		[Token(Token = "0x40008AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint version;

		[Token(Token = "0x40008AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CriAtomEx.CharacterEncoding characterEncoding;

		[Token(Token = "0x40008AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float volume;

		[Token(Token = "0x40008AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int numCues;

		[Token(Token = "0x6000CF1")]
		[Address(RVA = "0x8AAAB0", Offset = "0x8AAAB0", VA = "0x8AAAB0")]
		public void Convert(out AcbInfo x)
		{
		}
	}

	[Token(Token = "0x600060D")]
	[Address(RVA = "0xFAF3A4", Offset = "0xFAF3A4", VA = "0xFAF3A4")]
	public static bool GetAcbInfo(CriAtomExAcb acb, out AcbInfo acbInfo)
	{
		return default(bool);
	}

	[PreserveSig]
	[Token(Token = "0x600060E")]
	[Address(RVA = "0xFAF410", Offset = "0xFAF410", VA = "0xFAF410")]
	private static extern int criAtomExAcb_GetAcbInfo(IntPtr acbHn, out AcbInfoForMarshaling acbInfo);
}
[Token(Token = "0x2000047")]
public static class CriAtomExPlaybackDebug
{
	[Token(Token = "0x600060F")]
	[Address(RVA = "0xF63160", Offset = "0xF63160", VA = "0xF63160")]
	public static bool GetParameter(CriAtomExPlayback playback, CriAtomEx.Parameter parameterId, out float value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000610")]
	[Address(RVA = "0xF63214", Offset = "0xF63214", VA = "0xF63214")]
	public static bool GetParameter(CriAtomExPlayback playback, CriAtomEx.Parameter parameterId, out uint value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000611")]
	[Address(RVA = "0xF632C8", Offset = "0xF632C8", VA = "0xF632C8")]
	public static bool GetParameter(CriAtomExPlayback playback, CriAtomEx.Parameter parameterId, out int value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000612")]
	[Address(RVA = "0xF6337C", Offset = "0xF6337C", VA = "0xF6337C")]
	public static bool GetAisacControl(CriAtomExPlayback playback, uint controlId, out float value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000613")]
	[Address(RVA = "0xF63430", Offset = "0xF63430", VA = "0xF63430")]
	public static bool GetAisacControl(CriAtomExPlayback playback, string controlName, out float value)
	{
		return default(bool);
	}

	[PreserveSig]
	[Token(Token = "0x6000614")]
	[Address(RVA = "0xF6317C", Offset = "0xF6317C", VA = "0xF6317C")]
	private static extern int criAtomExPlayback_GetParameterFloat32(uint id, int parameterId, out float value);

	[PreserveSig]
	[Token(Token = "0x6000615")]
	[Address(RVA = "0xF63230", Offset = "0xF63230", VA = "0xF63230")]
	private static extern int criAtomExPlayback_GetParameterUint32(uint id, int parameterId, out uint value);

	[PreserveSig]
	[Token(Token = "0x6000616")]
	[Address(RVA = "0xF632E4", Offset = "0xF632E4", VA = "0xF632E4")]
	private static extern int criAtomExPlayback_GetParameterSint32(uint id, int parameterId, out int value);

	[PreserveSig]
	[Token(Token = "0x6000617")]
	[Address(RVA = "0xF63398", Offset = "0xF63398", VA = "0xF63398")]
	private static extern int criAtomExPlayback_GetAisacControlById(uint id, uint controlId, out float value);

	[PreserveSig]
	[Token(Token = "0x6000618")]
	[Address(RVA = "0xF6344C", Offset = "0xF6344C", VA = "0xF6344C")]
	private static extern int criAtomExPlayback_GetAisacControlByName(uint id, string controlName, out float value);
}
[Token(Token = "0x2000048")]
public abstract class CriDisposable : IDisposable
{
	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Guid guid;

	[Token(Token = "0x6000619")]
	[Address(RVA = "0xF72ED4", Offset = "0xF72ED4", VA = "0xF72ED4")]
	public CriDisposable()
	{
	}

	[Token(Token = "0x600061A")]
	public abstract void Dispose();
}
[Token(Token = "0x2000049")]
public static class CriDisposableObjectManager
{
	[Token(Token = "0x2000187")]
	public enum ModuleType
	{
		[Token(Token = "0x40008B0")]
		Atom,
		[Token(Token = "0x40008B1")]
		AtomMic,
		[Token(Token = "0x40008B2")]
		Fs,
		[Token(Token = "0x40008B3")]
		FsWeb,
		[Token(Token = "0x40008B4")]
		Mana,
		[Token(Token = "0x40008B5")]
		Lips,
		[Token(Token = "0x40008B6")]
		Vip
	}

	[Token(Token = "0x2000188")]
	public struct ObjectRef
	{
		[Token(Token = "0x40008B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Guid guid;

		[Token(Token = "0x40008B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ModuleType type;

		[Token(Token = "0x40008B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CriDisposable disposable;

		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0x8A9844", Offset = "0x8A9844", VA = "0x8A9844")]
		public ObjectRef(Guid _guid, CriDisposable _disposable, ModuleType _type)
		{
		}
	}

	[Token(Token = "0x4000152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<ObjectRef> refList;

	[Token(Token = "0x600061B")]
	[Address(RVA = "0xF72F4C", Offset = "0xF72F4C", VA = "0xF72F4C")]
	private static int SearchForDisposable(CriDisposable disposable)
	{
		return default(int);
	}

	[Token(Token = "0x600061C")]
	[Address(RVA = "0xF73190", Offset = "0xF73190", VA = "0xF73190")]
	public static void Register(CriDisposable disposable, ModuleType type)
	{
	}

	[Token(Token = "0x600061D")]
	[Address(RVA = "0xF73348", Offset = "0xF73348", VA = "0xF73348")]
	public static bool Unregister(CriDisposable disposable)
	{
		return default(bool);
	}

	[Token(Token = "0x600061E")]
	[Address(RVA = "0xF73504", Offset = "0xF73504", VA = "0xF73504")]
	public static bool IsDisposed(CriDisposable disposable)
	{
		return default(bool);
	}

	[Token(Token = "0x600061F")]
	[Address(RVA = "0xF73570", Offset = "0xF73570", VA = "0xF73570")]
	public static void CallOnModuleFinalization(ModuleType type)
	{
	}

	[Token(Token = "0x6000620")]
	[Address(RVA = "0xF738BC", Offset = "0xF738BC", VA = "0xF738BC")]
	private static int GetNextWithType(ModuleType type)
	{
		return default(int);
	}

	[Token(Token = "0x6000621")]
	[Address(RVA = "0xF735D4", Offset = "0xF735D4", VA = "0xF735D4")]
	public static void DisposeAll(ModuleType type)
	{
	}
}
[Token(Token = "0x200004A")]
public abstract class CriMonoBehaviour : MonoBehaviour
{
	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A5480", Offset = "0x9A5480")]
	private Guid <guid>k__BackingField;

	[Token(Token = "0x1700006E")]
	public Guid guid
	{
		[Token(Token = "0x6000623")]
		[Address(RVA = "0xEAAB24", Offset = "0xEAAB24", VA = "0xEAAB24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD434", Offset = "0x9AD434")]
		get
		{
			return default(Guid);
		}
		[Token(Token = "0x6000624")]
		[Address(RVA = "0xEAAB30", Offset = "0xEAAB30", VA = "0xEAAB30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD444", Offset = "0x9AD444")]
		private set
		{
		}
	}

	[Token(Token = "0x6000625")]
	[Address(RVA = "0xEA7588", Offset = "0xEA7588", VA = "0xEA7588")]
	public CriMonoBehaviour()
	{
	}

	[Token(Token = "0x6000626")]
	[Address(RVA = "0xEA711C", Offset = "0xEA711C", VA = "0xEA711C", Slot = "4")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000627")]
	[Address(RVA = "0xEA9030", Offset = "0xEA9030", VA = "0xEA9030", Slot = "5")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000628")]
	public abstract void CriInternalUpdate();

	[Token(Token = "0x6000629")]
	public abstract void CriInternalLateUpdate();
}
[Token(Token = "0x200004B")]
public class CriMonoBehaviourManager : MonoBehaviour
{
	[Token(Token = "0x4000154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static CriMonoBehaviourManager _instance;

	[Token(Token = "0x4000155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static List<CriMonoBehaviour> criMonoBehaviourList;

	[Token(Token = "0x1700006F")]
	public static CriMonoBehaviourManager instance
	{
		[Token(Token = "0x600062A")]
		[Address(RVA = "0xEAAB38", Offset = "0xEAAB38", VA = "0xEAAB38")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600062B")]
	[Address(RVA = "0xEAAF1C", Offset = "0xEAAF1C", VA = "0xEAAF1C")]
	public static void CreateInstance()
	{
	}

	[Token(Token = "0x600062C")]
	[Address(RVA = "0xEAB190", Offset = "0xEAB190", VA = "0xEAB190")]
	private static int GetIndex(CriMonoBehaviour criMonoBehaviour)
	{
		return default(int);
	}

	[Token(Token = "0x600062D")]
	[Address(RVA = "0xEAABA4", Offset = "0xEAABA4", VA = "0xEAABA4")]
	public bool Register(CriMonoBehaviour criMonoBehaviour)
	{
		return default(bool);
	}

	[Token(Token = "0x600062E")]
	[Address(RVA = "0xEAAD78", Offset = "0xEAAD78", VA = "0xEAAD78")]
	public static bool UnRegister(CriMonoBehaviour criMonoBehaviour)
	{
		return default(bool);
	}

	[Token(Token = "0x600062F")]
	[Address(RVA = "0xEAB2CC", Offset = "0xEAB2CC", VA = "0xEAB2CC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000630")]
	[Address(RVA = "0xEAB3CC", Offset = "0xEAB3CC", VA = "0xEAB3CC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000631")]
	[Address(RVA = "0xEAB568", Offset = "0xEAB568", VA = "0xEAB568")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000632")]
	[Address(RVA = "0xEAB704", Offset = "0xEAB704", VA = "0xEAB704")]
	public CriMonoBehaviourManager()
	{
	}
}
namespace RootMotion
{
	[Token(Token = "0x200004C")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x9A40B0", Offset = "0x9A40B0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A40B0", Offset = "0x9A40B0")]
	public abstract class Baker : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000189")]
		public enum Mode
		{
			[Token(Token = "0x40008BB")]
			AnimationClips,
			[Token(Token = "0x40008BC")]
			AnimationStates,
			[Token(Token = "0x40008BD")]
			PlayableDirector,
			[Token(Token = "0x40008BE")]
			Realtime
		}

		[Token(Token = "0x4000156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A5490", Offset = "0x9A5490")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A5490", Offset = "0x9A5490")]
		public int frameRate;

		[Token(Token = "0x4000157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A54E8", Offset = "0x9A54E8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A54E8", Offset = "0x9A54E8")]
		public float keyReductionError;

		[Token(Token = "0x4000158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A5540", Offset = "0x9A5540")]
		public Mode mode;

		[Token(Token = "0x4000159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A5578", Offset = "0x9A5578")]
		public AnimationClip[] animationClips;

		[Token(Token = "0x400015A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A55B0", Offset = "0x9A55B0")]
		public string[] animationStates;

		[Token(Token = "0x400015B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A55E8", Offset = "0x9A55E8")]
		public bool loop;

		[Token(Token = "0x400015C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A5620", Offset = "0x9A5620")]
		public string saveToFolder;

		[Token(Token = "0x400015D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A5658", Offset = "0x9A5658")]
		public string appendName;

		[Token(Token = "0x400015E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A5690", Offset = "0x9A5690")]
		public string saveName;

		[Token(Token = "0x400015F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A56C8", Offset = "0x9A56C8")]
		private bool <isBaking>k__BackingField;

		[Token(Token = "0x4000160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A56D8", Offset = "0x9A56D8")]
		private float <bakingProgress>k__BackingField;

		[Token(Token = "0x4000161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[HideInInspector]
		public Animator animator;

		[Token(Token = "0x4000162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		[HideInInspector]
		public PlayableDirector director;

		[Token(Token = "0x4000163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A5758", Offset = "0x9A5758")]
		private float <clipLength>k__BackingField;

		[Token(Token = "0x17000070")]
		public bool isBaking
		{
			[Token(Token = "0x6000638")]
			[Address(RVA = "0xEB1650", Offset = "0xEB1650", VA = "0xEB1650")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD534", Offset = "0x9AD534")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000639")]
			[Address(RVA = "0xEB1658", Offset = "0xEB1658", VA = "0xEB1658")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD544", Offset = "0x9AD544")]
			private set
			{
			}
		}

		[Token(Token = "0x17000071")]
		public float bakingProgress
		{
			[Token(Token = "0x600063A")]
			[Address(RVA = "0xEB1664", Offset = "0xEB1664", VA = "0xEB1664")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD554", Offset = "0x9AD554")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600063B")]
			[Address(RVA = "0xEB166C", Offset = "0xEB166C", VA = "0xEB166C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD564", Offset = "0x9AD564")]
			private set
			{
			}
		}

		[Token(Token = "0x17000072")]
		protected float clipLength
		{
			[Token(Token = "0x6000641")]
			[Address(RVA = "0xEB1674", Offset = "0xEB1674", VA = "0xEB1674")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD574", Offset = "0x9AD574")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000642")]
			[Address(RVA = "0xEB167C", Offset = "0xEB167C", VA = "0xEB167C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD584", Offset = "0x9AD584")]
			private set
			{
			}
		}

		[Token(Token = "0x6000634")]
		[Address(RVA = "0xEB1520", Offset = "0xEB1520", VA = "0xEB1520")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AD454", Offset = "0x9AD454")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000635")]
		[Address(RVA = "0xEB156C", Offset = "0xEB156C", VA = "0xEB156C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AD48C", Offset = "0x9AD48C")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000636")]
		[Address(RVA = "0xEB15B8", Offset = "0xEB15B8", VA = "0xEB15B8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AD4C4", Offset = "0x9AD4C4")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000637")]
		[Address(RVA = "0xEB1604", Offset = "0xEB1604", VA = "0xEB1604")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AD4FC", Offset = "0x9AD4FC")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600063C")]
		protected abstract Transform GetCharacterRoot();

		[Token(Token = "0x600063D")]
		protected abstract void OnStartBaking();

		[Token(Token = "0x600063E")]
		protected abstract void OnSetLoopFrame(float time);

		[Token(Token = "0x600063F")]
		protected abstract void OnSetCurves(ref AnimationClip clip);

		[Token(Token = "0x6000640")]
		protected abstract void OnSetKeyframes(float time, bool lastFrame);

		[Token(Token = "0x6000643")]
		[Address(RVA = "0xEB1684", Offset = "0xEB1684", VA = "0xEB1684")]
		public void BakeClip()
		{
		}

		[Token(Token = "0x6000644")]
		[Address(RVA = "0xEB1688", Offset = "0xEB1688", VA = "0xEB1688")]
		public void StartBaking()
		{
		}

		[Token(Token = "0x6000645")]
		[Address(RVA = "0xEB168C", Offset = "0xEB168C", VA = "0xEB168C")]
		public void StopBaking()
		{
		}

		[Token(Token = "0x6000646")]
		[Address(RVA = "0xEB1690", Offset = "0xEB1690", VA = "0xEB1690")]
		protected Baker()
		{
		}
	}
	[Token(Token = "0x200004D")]
	public class GenericBaker : Baker
	{
		[Token(Token = "0x4000164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A5768", Offset = "0x9A5768")]
		public bool markAsLegacy;

		[Token(Token = "0x4000165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A57A0", Offset = "0x9A57A0")]
		public Transform root;

		[Token(Token = "0x4000166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A57D8", Offset = "0x9A57D8")]
		public Transform rootNode;

		[Token(Token = "0x4000167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A5810", Offset = "0x9A5810")]
		public Transform[] ignoreList;

		[Token(Token = "0x4000168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A5848", Offset = "0x9A5848")]
		public Transform[] bakePositionList;

		[Token(Token = "0x4000169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private BakerTransform[] children;

		[Token(Token = "0x400016A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private BakerTransform rootChild;

		[Token(Token = "0x400016B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int rootChildIndex;

		[Token(Token = "0x6000647")]
		[Address(RVA = "0x108D248", Offset = "0x108D248", VA = "0x108D248")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000648")]
		[Address(RVA = "0x108D614", Offset = "0x108D614", VA = "0x108D614", Slot = "4")]
		protected override Transform GetCharacterRoot()
		{
			return null;
		}

		[Token(Token = "0x6000649")]
		[Address(RVA = "0x108D61C", Offset = "0x108D61C", VA = "0x108D61C", Slot = "5")]
		protected override void OnStartBaking()
		{
		}

		[Token(Token = "0x600064A")]
		[Address(RVA = "0x108D72C", Offset = "0x108D72C", VA = "0x108D72C", Slot = "6")]
		protected override void OnSetLoopFrame(float time)
		{
		}

		[Token(Token = "0x600064B")]
		[Address(RVA = "0x108D7A8", Offset = "0x108D7A8", VA = "0x108D7A8", Slot = "7")]
		protected override void OnSetCurves(ref AnimationClip clip)
		{
		}

		[Token(Token = "0x600064C")]
		[Address(RVA = "0x108D824", Offset = "0x108D824", VA = "0x108D824", Slot = "8")]
		protected override void OnSetKeyframes(float time, bool lastFrame)
		{
		}

		[Token(Token = "0x600064D")]
		[Address(RVA = "0x108D464", Offset = "0x108D464", VA = "0x108D464")]
		private bool IsIgnored(Transform t)
		{
			return default(bool);
		}

		[Token(Token = "0x600064E")]
		[Address(RVA = "0x108D53C", Offset = "0x108D53C", VA = "0x108D53C")]
		private bool BakePosition(Transform t)
		{
			return default(bool);
		}

		[Token(Token = "0x600064F")]
		[Address(RVA = "0x108D8A0", Offset = "0x108D8A0", VA = "0x108D8A0")]
		public GenericBaker()
		{
		}
	}
	[Token(Token = "0x200004E")]
	public class TQ
	{
		[Token(Token = "0x400016C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 t;

		[Token(Token = "0x400016D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion q;

		[Token(Token = "0x6000650")]
		[Address(RVA = "0x1091F0C", Offset = "0x1091F0C", VA = "0x1091F0C")]
		public TQ(Vector3 translation, Quaternion rotation)
		{
		}
	}
	[Token(Token = "0x200004F")]
	public class AvatarUtility
	{
		[Token(Token = "0x6000651")]
		[Address(RVA = "0xEB0508", Offset = "0xEB0508", VA = "0xEB0508")]
		public static Quaternion GetPostRotation(Avatar avatar, AvatarIKGoal avatarIKGoal)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000652")]
		[Address(RVA = "0xEB071C", Offset = "0xEB071C", VA = "0xEB071C")]
		public static TQ GetIKGoalTQ(Avatar avatar, float humanScale, AvatarIKGoal avatarIKGoal, TQ bodyPositionRotation, TQ boneTQ)
		{
			return null;
		}

		[Token(Token = "0x6000653")]
		[Address(RVA = "0xEB06FC", Offset = "0xEB06FC", VA = "0xEB06FC")]
		public static HumanBodyBones HumanIDFromAvatarIKGoal(AvatarIKGoal avatarIKGoal)
		{
			return default(HumanBodyBones);
		}

		[Token(Token = "0x6000654")]
		[Address(RVA = "0xEB0D9C", Offset = "0xEB0D9C", VA = "0xEB0D9C")]
		public AvatarUtility()
		{
		}
	}
	[Token(Token = "0x2000050")]
	public static class BakerUtilities
	{
		[Token(Token = "0x6000655")]
		[Address(RVA = "0xEB27D4", Offset = "0xEB27D4", VA = "0xEB27D4")]
		public static void ReduceKeyframes(AnimationCurve curve, float maxError)
		{
		}

		[Token(Token = "0x6000656")]
		[Address(RVA = "0xEB3CA8", Offset = "0xEB3CA8", VA = "0xEB3CA8")]
		public static Keyframe[] GetReducedKeyframes(AnimationCurve curve, float maxError)
		{
			return null;
		}

		[Token(Token = "0x6000657")]
		[Address(RVA = "0xEB21E8", Offset = "0xEB21E8", VA = "0xEB21E8")]
		public static void SetLoopFrame(float time, AnimationCurve curve)
		{
		}

		[Token(Token = "0x6000658")]
		[Address(RVA = "0xEB281C", Offset = "0xEB281C", VA = "0xEB281C")]
		public static void SetTangentMode(AnimationCurve curve)
		{
		}

		[Token(Token = "0x6000659")]
		[Address(RVA = "0xEB1D20", Offset = "0xEB1D20", VA = "0xEB1D20")]
		public static Quaternion EnsureQuaternionContinuity(Quaternion lastQ, Quaternion q)
		{
			return default(Quaternion);
		}
	}
	[Serializable]
	[Token(Token = "0x2000051")]
	public class BakerHumanoidQT
	{
		[Token(Token = "0x400016E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Transform transform;

		[Token(Token = "0x400016F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string Qx;

		[Token(Token = "0x4000170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string Qy;

		[Token(Token = "0x4000171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string Qz;

		[Token(Token = "0x4000172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string Qw;

		[Token(Token = "0x4000173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string Tx;

		[Token(Token = "0x4000174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string Ty;

		[Token(Token = "0x4000175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string Tz;

		[Token(Token = "0x4000176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve rotX;

		[Token(Token = "0x4000177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AnimationCurve rotY;

		[Token(Token = "0x4000178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AnimationCurve rotZ;

		[Token(Token = "0x4000179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AnimationCurve rotW;

		[Token(Token = "0x400017A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public AnimationCurve posX;

		[Token(Token = "0x400017B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public AnimationCurve posY;

		[Token(Token = "0x400017C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public AnimationCurve posZ;

		[Token(Token = "0x400017D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private AvatarIKGoal goal;

		[Token(Token = "0x400017E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Quaternion lastQ;

		[Token(Token = "0x400017F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private bool lastQSet;

		[Token(Token = "0x600065A")]
		[Address(RVA = "0xEB1750", Offset = "0xEB1750", VA = "0xEB1750")]
		public BakerHumanoidQT(string name)
		{
		}

		[Token(Token = "0x600065B")]
		[Address(RVA = "0xEB199C", Offset = "0xEB199C", VA = "0xEB199C")]
		public BakerHumanoidQT(Transform transform, AvatarIKGoal goal, string name)
		{
		}

		[Token(Token = "0x600065C")]
		[Address(RVA = "0xEB1870", Offset = "0xEB1870", VA = "0xEB1870")]
		public void Reset()
		{
		}

		[Token(Token = "0x600065D")]
		[Address(RVA = "0xEB1AD4", Offset = "0xEB1AD4", VA = "0xEB1AD4")]
		public void SetIKKeyframes(float time, Avatar avatar, float humanScale, Vector3 bodyPosition, Quaternion bodyRotation)
		{
		}

		[Token(Token = "0x600065E")]
		[Address(RVA = "0xEB1F7C", Offset = "0xEB1F7C", VA = "0xEB1F7C")]
		public void SetKeyframes(float time, Vector3 pos, Quaternion rot)
		{
		}

		[Token(Token = "0x600065F")]
		[Address(RVA = "0xEB2078", Offset = "0xEB2078", VA = "0xEB2078")]
		public void MoveLastKeyframes(float time)
		{
		}

		[Token(Token = "0x6000660")]
		[Address(RVA = "0xEB2174", Offset = "0xEB2174", VA = "0xEB2174")]
		public void SetLoopFrame(float time)
		{
		}

		[Token(Token = "0x6000661")]
		[Address(RVA = "0xEB20EC", Offset = "0xEB20EC", VA = "0xEB20EC")]
		private void MoveLastKeyframe(float time, AnimationCurve curve)
		{
		}

		[Token(Token = "0x6000662")]
		[Address(RVA = "0xEB2434", Offset = "0xEB2434", VA = "0xEB2434")]
		public void MultiplyLength(AnimationCurve curve, float mlp)
		{
		}

		[Token(Token = "0x6000663")]
		[Address(RVA = "0xEB24E8", Offset = "0xEB24E8", VA = "0xEB24E8")]
		public void SetCurves(ref AnimationClip clip, float maxError, float lengthMlp)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000052")]
	public class BakerMuscle
	{
		[Token(Token = "0x4000180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AnimationCurve curve;

		[Token(Token = "0x4000181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int muscleIndex;

		[Token(Token = "0x4000182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string propertyName;

		[Token(Token = "0x6000664")]
		[Address(RVA = "0xEB2820", Offset = "0xEB2820", VA = "0xEB2820")]
		public BakerMuscle(int muscleIndex)
		{
		}

		[Token(Token = "0x6000665")]
		[Address(RVA = "0xEB2890", Offset = "0xEB2890", VA = "0xEB2890")]
		private string MuscleNameToPropertyName(string n)
		{
			return null;
		}

		[Token(Token = "0x6000666")]
		[Address(RVA = "0xEB2F78", Offset = "0xEB2F78", VA = "0xEB2F78")]
		public void MultiplyLength(AnimationCurve curve, float mlp)
		{
		}

		[Token(Token = "0x6000667")]
		[Address(RVA = "0xEB302C", Offset = "0xEB302C", VA = "0xEB302C")]
		public void SetCurves(ref AnimationClip clip, float maxError, float lengthMlp)
		{
		}

		[Token(Token = "0x6000668")]
		[Address(RVA = "0xEB2F18", Offset = "0xEB2F18", VA = "0xEB2F18")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000669")]
		[Address(RVA = "0xEB3110", Offset = "0xEB3110", VA = "0xEB3110")]
		public void SetKeyframe(float time, float[] muscles)
		{
		}

		[Token(Token = "0x600066A")]
		[Address(RVA = "0xEB3158", Offset = "0xEB3158", VA = "0xEB3158")]
		public void SetLoopFrame(float time)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000053")]
	public class BakerTransform
	{
		[Token(Token = "0x4000183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x4000184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve posX;

		[Token(Token = "0x4000185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve posY;

		[Token(Token = "0x4000186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve posZ;

		[Token(Token = "0x4000187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve rotX;

		[Token(Token = "0x4000188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve rotY;

		[Token(Token = "0x4000189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationCurve rotZ;

		[Token(Token = "0x400018A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AnimationCurve rotW;

		[Token(Token = "0x400018B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string relativePath;

		[Token(Token = "0x400018C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool recordPosition;

		[Token(Token = "0x400018D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 relativePosition;

		[Token(Token = "0x400018E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool isRootNode;

		[Token(Token = "0x400018F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Quaternion relativeRotation;

		[Token(Token = "0x600066B")]
		[Address(RVA = "0xEB3160", Offset = "0xEB3160", VA = "0xEB3160")]
		public BakerTransform(Transform transform, Transform root, bool recordPosition, bool isRootNode)
		{
		}

		[Token(Token = "0x600066C")]
		[Address(RVA = "0xEB32F4", Offset = "0xEB32F4", VA = "0xEB32F4")]
		public void SetRelativeSpace(Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x600066D")]
		[Address(RVA = "0xEB3308", Offset = "0xEB3308", VA = "0xEB3308")]
		public void SetCurves(ref AnimationClip clip)
		{
		}

		[Token(Token = "0x600066E")]
		[Address(RVA = "0xEB3598", Offset = "0xEB3598", VA = "0xEB3598")]
		private void AddRootMotionCurves(ref AnimationClip clip)
		{
		}

		[Token(Token = "0x600066F")]
		[Address(RVA = "0xEB31FC", Offset = "0xEB31FC", VA = "0xEB31FC")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000670")]
		[Address(RVA = "0xEB37E4", Offset = "0xEB37E4", VA = "0xEB37E4")]
		public void ReduceKeyframes(float maxError)
		{
		}

		[Token(Token = "0x6000671")]
		[Address(RVA = "0xEB3858", Offset = "0xEB3858", VA = "0xEB3858")]
		public void SetKeyframes(float time)
		{
		}

		[Token(Token = "0x6000672")]
		[Address(RVA = "0xEB3AA4", Offset = "0xEB3AA4", VA = "0xEB3AA4")]
		public void AddLoopFrame(float time)
		{
		}
	}
	[Token(Token = "0x2000054")]
	public class HumanoidBaker : Baker
	{
		[Token(Token = "0x4000190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A5880", Offset = "0x9A5880")]
		public bool bakeHandIK;

		[Token(Token = "0x4000191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A58B8", Offset = "0x9A58B8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A58B8", Offset = "0x9A58B8")]
		public float IKKeyReductionError;

		[Token(Token = "0x4000192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A5910", Offset = "0x9A5910")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A5910", Offset = "0x9A5910")]
		public int muscleFrameRateDiv;

		[Token(Token = "0x4000193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private BakerMuscle[] bakerMuscles;

		[Token(Token = "0x4000194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private BakerHumanoidQT rootQT;

		[Token(Token = "0x4000195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private BakerHumanoidQT leftFootQT;

		[Token(Token = "0x4000196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private BakerHumanoidQT rightFootQT;

		[Token(Token = "0x4000197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private BakerHumanoidQT leftHandQT;

		[Token(Token = "0x4000198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private BakerHumanoidQT rightHandQT;

		[Token(Token = "0x4000199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float[] muscles;

		[Token(Token = "0x400019A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private HumanPose pose;

		[Token(Token = "0x400019B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private HumanPoseHandler handler;

		[Token(Token = "0x400019C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Vector3 bodyPosition;

		[Token(Token = "0x400019D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private Quaternion bodyRotation;

		[Token(Token = "0x400019E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private int mN;

		[Token(Token = "0x400019F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Quaternion lastBodyRotation;

		[Token(Token = "0x6000673")]
		[Address(RVA = "0x108E7D8", Offset = "0x108E7D8", VA = "0x108E7D8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000674")]
		[Address(RVA = "0x108EC04", Offset = "0x108EC04", VA = "0x108EC04", Slot = "4")]
		protected override Transform GetCharacterRoot()
		{
			return null;
		}

		[Token(Token = "0x6000675")]
		[Address(RVA = "0x108EC20", Offset = "0x108EC20", VA = "0x108EC20", Slot = "5")]
		protected override void OnStartBaking()
		{
		}

		[Token(Token = "0x6000676")]
		[Address(RVA = "0x108ED40", Offset = "0x108ED40", VA = "0x108ED40", Slot = "6")]
		protected override void OnSetLoopFrame(float time)
		{
		}

		[Token(Token = "0x6000677")]
		[Address(RVA = "0x108EE1C", Offset = "0x108EE1C", VA = "0x108EE1C", Slot = "7")]
		protected override void OnSetCurves(ref AnimationClip clip)
		{
		}

		[Token(Token = "0x6000678")]
		[Address(RVA = "0x108EFEC", Offset = "0x108EFEC", VA = "0x108EFEC", Slot = "8")]
		protected override void OnSetKeyframes(float time, bool lastFrame)
		{
		}

		[Token(Token = "0x6000679")]
		[Address(RVA = "0x108F314", Offset = "0x108F314", VA = "0x108F314")]
		private void UpdateHumanPose()
		{
		}

		[Token(Token = "0x600067A")]
		[Address(RVA = "0x108F3F0", Offset = "0x108F3F0", VA = "0x108F3F0")]
		public HumanoidBaker()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000055")]
	public enum Axis
	{
		[Token(Token = "0x40001A1")]
		X,
		[Token(Token = "0x40001A2")]
		Y,
		[Token(Token = "0x40001A3")]
		Z
	}
	[Token(Token = "0x2000056")]
	public class AxisTools
	{
		[Token(Token = "0x600067B")]
		[Address(RVA = "0xEB0DA4", Offset = "0xEB0DA4", VA = "0xEB0DA4")]
		public static Vector3 ToVector3(Axis axis)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600067C")]
		[Address(RVA = "0xEB0E5C", Offset = "0xEB0E5C", VA = "0xEB0E5C")]
		public static Axis ToAxis(Vector3 v)
		{
			return default(Axis);
		}

		[Token(Token = "0x600067D")]
		[Address(RVA = "0xEB0F08", Offset = "0xEB0F08", VA = "0xEB0F08")]
		public static Axis GetAxisToPoint(Transform t, Vector3 worldPosition)
		{
			return default(Axis);
		}

		[Token(Token = "0x600067E")]
		[Address(RVA = "0xEB10EC", Offset = "0xEB10EC", VA = "0xEB10EC")]
		public static Axis GetAxisToDirection(Transform t, Vector3 direction)
		{
			return default(Axis);
		}

		[Token(Token = "0x600067F")]
		[Address(RVA = "0xEB1024", Offset = "0xEB1024", VA = "0xEB1024")]
		public static Vector3 GetAxisVectorToPoint(Transform t, Vector3 worldPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000680")]
		[Address(RVA = "0xEB1208", Offset = "0xEB1208", VA = "0xEB1208")]
		public static Vector3 GetAxisVectorToDirection(Transform t, Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000681")]
		[Address(RVA = "0xEB1250", Offset = "0xEB1250", VA = "0xEB1250")]
		public static Vector3 GetAxisVectorToDirection(Quaternion r, Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000682")]
		[Address(RVA = "0xEB1518", Offset = "0xEB1518", VA = "0xEB1518")]
		public AxisTools()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000057")]
	public class BipedLimbOrientations
	{
		[Serializable]
		[Token(Token = "0x200018A")]
		public class LimbOrientation
		{
			[Token(Token = "0x40008BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 upperBoneForwardAxis;

			[Token(Token = "0x40008C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 lowerBoneForwardAxis;

			[Token(Token = "0x40008C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 lastBoneLeftAxis;

			[Token(Token = "0x6000CF3")]
			[Address(RVA = "0xEB4350", Offset = "0xEB4350", VA = "0xEB4350")]
			public LimbOrientation(Vector3 upperBoneForwardAxis, Vector3 lowerBoneForwardAxis, Vector3 lastBoneLeftAxis)
			{
			}
		}

		[Token(Token = "0x40001A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LimbOrientation leftArm;

		[Token(Token = "0x40001A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LimbOrientation rightArm;

		[Token(Token = "0x40001A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LimbOrientation leftLeg;

		[Token(Token = "0x40001A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LimbOrientation rightLeg;

		[Token(Token = "0x17000073")]
		public static BipedLimbOrientations UMA
		{
			[Token(Token = "0x6000684")]
			[Address(RVA = "0xEB40DC", Offset = "0xEB40DC", VA = "0xEB40DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000074")]
		public static BipedLimbOrientations MaxBiped
		{
			[Token(Token = "0x6000685")]
			[Address(RVA = "0xEB43C8", Offset = "0xEB43C8", VA = "0xEB43C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000683")]
		[Address(RVA = "0xEB4090", Offset = "0xEB4090", VA = "0xEB4090")]
		public BipedLimbOrientations(LimbOrientation leftArm, LimbOrientation rightArm, LimbOrientation leftLeg, LimbOrientation rightLeg)
		{
		}
	}
	[Token(Token = "0x2000058")]
	public static class BipedNaming
	{
		[Serializable]
		[Token(Token = "0x200018B")]
		public enum BoneType
		{
			[Token(Token = "0x40008C3")]
			Unassigned,
			[Token(Token = "0x40008C4")]
			Spine,
			[Token(Token = "0x40008C5")]
			Head,
			[Token(Token = "0x40008C6")]
			Arm,
			[Token(Token = "0x40008C7")]
			Leg,
			[Token(Token = "0x40008C8")]
			Tail,
			[Token(Token = "0x40008C9")]
			Eye
		}

		[Serializable]
		[Token(Token = "0x200018C")]
		public enum BoneSide
		{
			[Token(Token = "0x40008CB")]
			Center,
			[Token(Token = "0x40008CC")]
			Left,
			[Token(Token = "0x40008CD")]
			Right
		}

		[Token(Token = "0x40001A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string[] typeLeft;

		[Token(Token = "0x40001A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string[] typeRight;

		[Token(Token = "0x40001AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string[] typeSpine;

		[Token(Token = "0x40001AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static string[] typeHead;

		[Token(Token = "0x40001AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static string[] typeArm;

		[Token(Token = "0x40001AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static string[] typeLeg;

		[Token(Token = "0x40001AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static string[] typeTail;

		[Token(Token = "0x40001AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static string[] typeEye;

		[Token(Token = "0x40001B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static string[] typeExclude;

		[Token(Token = "0x40001B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static string[] typeExcludeSpine;

		[Token(Token = "0x40001B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static string[] typeExcludeHead;

		[Token(Token = "0x40001B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static string[] typeExcludeArm;

		[Token(Token = "0x40001B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static string[] typeExcludeLeg;

		[Token(Token = "0x40001B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static string[] typeExcludeTail;

		[Token(Token = "0x40001B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static string[] typeExcludeEye;

		[Token(Token = "0x40001B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static string[] pelvis;

		[Token(Token = "0x40001B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static string[] hand;

		[Token(Token = "0x40001B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static string[] foot;

		[Token(Token = "0x6000686")]
		[Address(RVA = "0xEB463C", Offset = "0xEB463C", VA = "0xEB463C")]
		public static Transform[] GetBonesOfType(BoneType boneType, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x6000687")]
		[Address(RVA = "0xEB493C", Offset = "0xEB493C", VA = "0xEB493C")]
		public static Transform[] GetBonesOfSide(BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x6000688")]
		[Address(RVA = "0xEB4B8C", Offset = "0xEB4B8C", VA = "0xEB4B8C")]
		public static Transform[] GetBonesOfTypeAndSide(BoneType boneType, BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x6000689")]
		[Address(RVA = "0xEB4C10", Offset = "0xEB4C10", VA = "0xEB4C10")]
		public static Transform GetFirstBoneOfTypeAndSide(BoneType boneType, BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x600068A")]
		[Address(RVA = "0xEB4CBC", Offset = "0xEB4CBC", VA = "0xEB4CBC")]
		public static Transform GetNamingMatch(Transform[] transforms, params string[][] namings)
		{
			return null;
		}

		[Token(Token = "0x600068B")]
		[Address(RVA = "0xEB47EC", Offset = "0xEB47EC", VA = "0xEB47EC")]
		public static BoneType GetBoneType(string boneName)
		{
			return default(BoneType);
		}

		[Token(Token = "0x600068C")]
		[Address(RVA = "0xEB4AEC", Offset = "0xEB4AEC", VA = "0xEB4AEC")]
		public static BoneSide GetBoneSide(string boneName)
		{
			return default(BoneSide);
		}

		[Token(Token = "0x600068D")]
		[Address(RVA = "0xEB54FC", Offset = "0xEB54FC", VA = "0xEB54FC")]
		public static Transform GetBone(Transform[] transforms, BoneType boneType, BoneSide boneSide = BoneSide.Center, params string[][] namings)
		{
			return null;
		}

		[Token(Token = "0x600068E")]
		[Address(RVA = "0xEB5314", Offset = "0xEB5314", VA = "0xEB5314")]
		private static bool isLeft(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x600068F")]
		[Address(RVA = "0xEB5408", Offset = "0xEB5408", VA = "0xEB5408")]
		private static bool isRight(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000690")]
		[Address(RVA = "0xEB4EDC", Offset = "0xEB4EDC", VA = "0xEB4EDC")]
		private static bool isSpine(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000691")]
		[Address(RVA = "0xEB4F90", Offset = "0xEB4F90", VA = "0xEB4F90")]
		private static bool isHead(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000692")]
		[Address(RVA = "0xEB5044", Offset = "0xEB5044", VA = "0xEB5044")]
		private static bool isArm(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000693")]
		[Address(RVA = "0xEB50F8", Offset = "0xEB50F8", VA = "0xEB50F8")]
		private static bool isLeg(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000694")]
		[Address(RVA = "0xEB51AC", Offset = "0xEB51AC", VA = "0xEB51AC")]
		private static bool isTail(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000695")]
		[Address(RVA = "0xEB5260", Offset = "0xEB5260", VA = "0xEB5260")]
		private static bool isEye(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000696")]
		[Address(RVA = "0xEB5710", Offset = "0xEB5710", VA = "0xEB5710")]
		private static bool isTypeExclude(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000697")]
		[Address(RVA = "0xEB4DF0", Offset = "0xEB4DF0", VA = "0xEB4DF0")]
		private static bool matchesNaming(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x6000698")]
		[Address(RVA = "0xEB5680", Offset = "0xEB5680", VA = "0xEB5680")]
		private static bool excludesNaming(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x6000699")]
		[Address(RVA = "0xEB5780", Offset = "0xEB5780", VA = "0xEB5780")]
		private static bool matchesLastLetter(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x600069A")]
		[Address(RVA = "0xEB5858", Offset = "0xEB5858", VA = "0xEB5858")]
		private static bool LastLetterIs(string boneName, string letter)
		{
			return default(bool);
		}

		[Token(Token = "0x600069B")]
		[Address(RVA = "0xEB5604", Offset = "0xEB5604", VA = "0xEB5604")]
		private static string firstLetter(string boneName)
		{
			return null;
		}

		[Token(Token = "0x600069C")]
		[Address(RVA = "0xEB558C", Offset = "0xEB558C", VA = "0xEB558C")]
		private static string lastLetter(string boneName)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000059")]
	public class BipedReferences
	{
		[Token(Token = "0x200018D")]
		public struct AutoDetectParams
		{
			[Token(Token = "0x40008CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool legsParentInSpine;

			[Token(Token = "0x40008CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
			public bool includeEyes;

			[Token(Token = "0x17000104")]
			public static AutoDetectParams Default
			{
				[Token(Token = "0x6000CF5")]
				[Address(RVA = "0xEBA7E8", Offset = "0xEBA7E8", VA = "0xEBA7E8")]
				get
				{
					return default(AutoDetectParams);
				}
			}

			[Token(Token = "0x6000CF4")]
			[Address(RVA = "0x8A7D00", Offset = "0x8A7D00", VA = "0x8A7D00")]
			public AutoDetectParams(bool legsParentInSpine, bool includeEyes)
			{
			}
		}

		[Token(Token = "0x40001BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform root;

		[Token(Token = "0x40001BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform pelvis;

		[Token(Token = "0x40001BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform leftThigh;

		[Token(Token = "0x40001BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftCalf;

		[Token(Token = "0x40001BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform leftFoot;

		[Token(Token = "0x40001BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform rightThigh;

		[Token(Token = "0x40001C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform rightCalf;

		[Token(Token = "0x40001C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform rightFoot;

		[Token(Token = "0x40001C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform leftUpperArm;

		[Token(Token = "0x40001C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform leftForearm;

		[Token(Token = "0x40001C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform leftHand;

		[Token(Token = "0x40001C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform rightUpperArm;

		[Token(Token = "0x40001C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform rightForearm;

		[Token(Token = "0x40001C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform rightHand;

		[Token(Token = "0x40001C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform head;

		[Token(Token = "0x40001C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform[] spine;

		[Token(Token = "0x40001CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Transform[] eyes;

		[Token(Token = "0x17000075")]
		public virtual bool isFilled
		{
			[Token(Token = "0x600069E")]
			[Address(RVA = "0xEB73CC", Offset = "0xEB73CC", VA = "0xEB73CC", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000076")]
		public bool isEmpty
		{
			[Token(Token = "0x600069F")]
			[Address(RVA = "0xEB77B8", Offset = "0xEB77B8", VA = "0xEB77B8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60006A0")]
		[Address(RVA = "0xEB77C8", Offset = "0xEB77C8", VA = "0xEB77C8", Slot = "5")]
		public virtual bool IsEmpty(bool includeRoot)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A1")]
		[Address(RVA = "0xEB7BF4", Offset = "0xEB7BF4", VA = "0xEB7BF4", Slot = "6")]
		public virtual bool Contains(Transform t, bool ignoreRoot = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A2")]
		[Address(RVA = "0xEB802C", Offset = "0xEB802C", VA = "0xEB802C")]
		public static bool AutoDetectReferences(ref BipedReferences references, Transform root, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A3")]
		[Address(RVA = "0xEB863C", Offset = "0xEB863C", VA = "0xEB863C")]
		public static void DetectReferencesByNaming(ref BipedReferences references, Transform root, AutoDetectParams autoDetectParams)
		{
		}

		[Token(Token = "0x60006A4")]
		[Address(RVA = "0xEB8278", Offset = "0xEB8278", VA = "0xEB8278")]
		public static void AssignHumanoidReferences(ref BipedReferences references, Animator animator, AutoDetectParams autoDetectParams)
		{
		}

		[Token(Token = "0x60006A5")]
		[Address(RVA = "0xEB8DEC", Offset = "0xEB8DEC", VA = "0xEB8DEC")]
		public static bool SetupError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A6")]
		[Address(RVA = "0xEB8EE0", Offset = "0xEB8EE0", VA = "0xEB8EE0")]
		public static bool SetupWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A7")]
		[Address(RVA = "0xEB9438", Offset = "0xEB9438", VA = "0xEB9438")]
		private static bool IsNeckBone(Transform bone, Transform leftUpperArm)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A8")]
		[Address(RVA = "0xEB923C", Offset = "0xEB923C", VA = "0xEB923C")]
		private static bool AddBoneToEyes(Transform bone, ref BipedReferences references, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A9")]
		[Address(RVA = "0xEB90B4", Offset = "0xEB90B4", VA = "0xEB90B4")]
		private static bool AddBoneToSpine(Transform bone, ref BipedReferences references, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x60006AA")]
		[Address(RVA = "0xEB8F80", Offset = "0xEB8F80", VA = "0xEB8F80")]
		private static void DetectLimb(BipedNaming.BoneType boneType, BipedNaming.BoneSide boneSide, ref Transform firstBone, ref Transform secondBone, ref Transform lastBone, Transform[] transforms)
		{
		}

		[Token(Token = "0x60006AB")]
		[Address(RVA = "0xEB9340", Offset = "0xEB9340", VA = "0xEB9340")]
		private static void AddBoneToHierarchy(ref Transform[] bones, Transform transform)
		{
		}

		[Token(Token = "0x60006AC")]
		[Address(RVA = "0xEB9534", Offset = "0xEB9534", VA = "0xEB9534")]
		private static bool LimbError(Transform bone1, Transform bone2, Transform bone3, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60006AD")]
		[Address(RVA = "0xEB9FD4", Offset = "0xEB9FD4", VA = "0xEB9FD4")]
		private static bool LimbWarning(Transform bone1, Transform bone2, Transform bone3, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60006AE")]
		[Address(RVA = "0xEB9AB8", Offset = "0xEB9AB8", VA = "0xEB9AB8")]
		private static bool SpineError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60006AF")]
		[Address(RVA = "0xEBA2C8", Offset = "0xEBA2C8", VA = "0xEBA2C8")]
		private static bool SpineWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60006B0")]
		[Address(RVA = "0xEB9DF8", Offset = "0xEB9DF8", VA = "0xEB9DF8")]
		private static bool EyesError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60006B1")]
		[Address(RVA = "0xEBA2D0", Offset = "0xEBA2D0", VA = "0xEBA2D0")]
		private static bool EyesWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60006B2")]
		[Address(RVA = "0xEBA2D8", Offset = "0xEBA2D8", VA = "0xEBA2D8")]
		private static bool RootHeightWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60006B3")]
		[Address(RVA = "0xEBA498", Offset = "0xEBA498", VA = "0xEBA498")]
		private static bool FacingAxisWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60006B4")]
		[Address(RVA = "0xEBA6B0", Offset = "0xEBA6B0", VA = "0xEBA6B0")]
		private static float GetVerticalOffset(Vector3 p1, Vector3 p2, Quaternion rotation)
		{
			return default(float);
		}

		[Token(Token = "0x60006B5")]
		[Address(RVA = "0xEB8208", Offset = "0xEB8208", VA = "0xEB8208")]
		public BipedReferences()
		{
		}
	}
	[Token(Token = "0x200005A")]
	public class Comments : MonoBehaviour
	{
		[Token(Token = "0x40001CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Multiline]
		public string text;

		[Token(Token = "0x60006B6")]
		[Address(RVA = "0xEBA7F0", Offset = "0xEBA7F0", VA = "0xEBA7F0")]
		public Comments()
		{
		}
	}
	[Token(Token = "0x200005B")]
	public class DemoGUIMessage : MonoBehaviour
	{
		[Token(Token = "0x40001CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string text;

		[Token(Token = "0x40001CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color color;

		[Token(Token = "0x60006B7")]
		[Address(RVA = "0xEBA7F8", Offset = "0xEBA7F8", VA = "0xEBA7F8")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60006B8")]
		[Address(RVA = "0xEBA938", Offset = "0xEBA938", VA = "0xEBA938")]
		public DemoGUIMessage()
		{
		}
	}
	[Token(Token = "0x200005C")]
	public class Hierarchy
	{
		[Token(Token = "0x60006B9")]
		[Address(RVA = "0x108D908", Offset = "0x108D908", VA = "0x108D908")]
		public static bool HierarchyIsValid(Transform[] bones)
		{
			return default(bool);
		}

		[Token(Token = "0x60006BA")]
		[Address(RVA = "0x108DB08", Offset = "0x108DB08", VA = "0x108DB08")]
		public static UnityEngine.Object ContainsDuplicate(UnityEngine.Object[] objects)
		{
			return null;
		}

		[Token(Token = "0x60006BB")]
		[Address(RVA = "0x108D9A0", Offset = "0x108D9A0", VA = "0x108D9A0")]
		public static bool IsAncestor(Transform transform, Transform ancestor)
		{
			return default(bool);
		}

		[Token(Token = "0x60006BC")]
		[Address(RVA = "0x108DC2C", Offset = "0x108DC2C", VA = "0x108DC2C")]
		public static bool ContainsChild(Transform transform, Transform child)
		{
			return default(bool);
		}

		[Token(Token = "0x60006BD")]
		[Address(RVA = "0x108DD50", Offset = "0x108DD50", VA = "0x108DD50")]
		public static void AddAncestors(Transform transform, Transform blocker, ref Transform[] array)
		{
		}

		[Token(Token = "0x60006BE")]
		[Address(RVA = "0x108DFF8", Offset = "0x108DFF8", VA = "0x108DFF8")]
		public static Transform GetAncestor(Transform transform, int minChildCount)
		{
			return null;
		}

		[Token(Token = "0x60006BF")]
		[Address(RVA = "0x108E114", Offset = "0x108E114", VA = "0x108E114")]
		public static Transform GetFirstCommonAncestor(Transform t1, Transform t2)
		{
			return null;
		}

		[Token(Token = "0x60006C0")]
		[Address(RVA = "0x108E29C", Offset = "0x108E29C", VA = "0x108E29C")]
		public static Transform GetFirstCommonAncestor(Transform[] transforms)
		{
			return null;
		}

		[Token(Token = "0x60006C1")]
		[Address(RVA = "0x108E630", Offset = "0x108E630", VA = "0x108E630")]
		public static Transform GetFirstCommonAncestorRecursive(Transform transform, Transform[] transforms)
		{
			return null;
		}

		[Token(Token = "0x60006C2")]
		[Address(RVA = "0x108E41C", Offset = "0x108E41C", VA = "0x108E41C")]
		public static bool IsCommonAncestor(Transform transform, Transform[] transforms)
		{
			return default(bool);
		}

		[Token(Token = "0x60006C3")]
		[Address(RVA = "0x108E7D0", Offset = "0x108E7D0", VA = "0x108E7D0")]
		public Hierarchy()
		{
		}
	}
	[Token(Token = "0x200005D")]
	public class InspectorComment : PropertyAttribute
	{
		[Token(Token = "0x40001CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x40001CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string color;

		[Token(Token = "0x60006C4")]
		[Address(RVA = "0x108F4A4", Offset = "0x108F4A4", VA = "0x108F4A4")]
		public InspectorComment(string name)
		{
		}

		[Token(Token = "0x60006C5")]
		[Address(RVA = "0x108F514", Offset = "0x108F514", VA = "0x108F514")]
		public InspectorComment(string name, string color)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200005E")]
	public enum InterpolationMode
	{
		[Token(Token = "0x40001D1")]
		None,
		[Token(Token = "0x40001D2")]
		InOutCubic,
		[Token(Token = "0x40001D3")]
		InOutQuintic,
		[Token(Token = "0x40001D4")]
		InOutSine,
		[Token(Token = "0x40001D5")]
		InQuintic,
		[Token(Token = "0x40001D6")]
		InQuartic,
		[Token(Token = "0x40001D7")]
		InCubic,
		[Token(Token = "0x40001D8")]
		InQuadratic,
		[Token(Token = "0x40001D9")]
		InElastic,
		[Token(Token = "0x40001DA")]
		InElasticSmall,
		[Token(Token = "0x40001DB")]
		InElasticBig,
		[Token(Token = "0x40001DC")]
		InSine,
		[Token(Token = "0x40001DD")]
		InBack,
		[Token(Token = "0x40001DE")]
		OutQuintic,
		[Token(Token = "0x40001DF")]
		OutQuartic,
		[Token(Token = "0x40001E0")]
		OutCubic,
		[Token(Token = "0x40001E1")]
		OutInCubic,
		[Token(Token = "0x40001E2")]
		OutInQuartic,
		[Token(Token = "0x40001E3")]
		OutElastic,
		[Token(Token = "0x40001E4")]
		OutElasticSmall,
		[Token(Token = "0x40001E5")]
		OutElasticBig,
		[Token(Token = "0x40001E6")]
		OutSine,
		[Token(Token = "0x40001E7")]
		OutBack,
		[Token(Token = "0x40001E8")]
		OutBackCubic,
		[Token(Token = "0x40001E9")]
		OutBackQuartic,
		[Token(Token = "0x40001EA")]
		BackInCubic,
		[Token(Token = "0x40001EB")]
		BackInQuartic
	}
	[Token(Token = "0x200005F")]
	public class Interp
	{
		[Token(Token = "0x60006C6")]
		[Address(RVA = "0x108F584", Offset = "0x108F584", VA = "0x108F584")]
		public static float Float(float t, InterpolationMode mode)
		{
			return default(float);
		}

		[Token(Token = "0x60006C7")]
		[Address(RVA = "0x108FFEC", Offset = "0x108FFEC", VA = "0x108FFEC")]
		public static Vector3 V3(Vector3 v1, Vector3 v2, float t, InterpolationMode mode)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006C8")]
		[Address(RVA = "0x10900F4", Offset = "0x10900F4", VA = "0x10900F4")]
		public static float LerpValue(float value, float target, float increaseSpeed, float decreaseSpeed)
		{
			return default(float);
		}

		[Token(Token = "0x60006C9")]
		[Address(RVA = "0x108F8F0", Offset = "0x108F8F0", VA = "0x108F8F0")]
		private static float None(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006CA")]
		[Address(RVA = "0x108F8FC", Offset = "0x108F8FC", VA = "0x108F8FC")]
		private static float InOutCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006CB")]
		[Address(RVA = "0x108F920", Offset = "0x108F920", VA = "0x108F920")]
		private static float InOutQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006CC")]
		[Address(RVA = "0x108F95C", Offset = "0x108F95C", VA = "0x108F95C")]
		private static float InQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006CD")]
		[Address(RVA = "0x108F974", Offset = "0x108F974", VA = "0x108F974")]
		private static float InQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006CE")]
		[Address(RVA = "0x108F988", Offset = "0x108F988", VA = "0x108F988")]
		private static float InCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006CF")]
		[Address(RVA = "0x108F99C", Offset = "0x108F99C", VA = "0x108F99C")]
		private static float InQuadratic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006D0")]
		[Address(RVA = "0x108F9AC", Offset = "0x108F9AC", VA = "0x108F9AC")]
		private static float OutQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006D1")]
		[Address(RVA = "0x108F9F4", Offset = "0x108F9F4", VA = "0x108F9F4")]
		private static float OutQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006D2")]
		[Address(RVA = "0x108FA2C", Offset = "0x108FA2C", VA = "0x108FA2C")]
		private static float OutCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006D3")]
		[Address(RVA = "0x108FA54", Offset = "0x108FA54", VA = "0x108FA54")]
		private static float OutInCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006D4")]
		[Address(RVA = "0x10901F0", Offset = "0x10901F0", VA = "0x10901F0")]
		private static float OutInQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006D5")]
		[Address(RVA = "0x108FA88", Offset = "0x108FA88", VA = "0x108FA88")]
		private static float BackInCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006D6")]
		[Address(RVA = "0x108FAB0", Offset = "0x108FAB0", VA = "0x108FAB0")]
		private static float BackInQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006D7")]
		[Address(RVA = "0x108FAE0", Offset = "0x108FAE0", VA = "0x108FAE0")]
		private static float OutBackCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006D8")]
		[Address(RVA = "0x108FB14", Offset = "0x108FB14", VA = "0x108FB14")]
		private static float OutBackQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006D9")]
		[Address(RVA = "0x108FB58", Offset = "0x108FB58", VA = "0x108FB58")]
		private static float OutElasticSmall(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006DA")]
		[Address(RVA = "0x108FBBC", Offset = "0x108FBBC", VA = "0x108FBBC")]
		private static float OutElasticBig(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006DB")]
		[Address(RVA = "0x108FC20", Offset = "0x108FC20", VA = "0x108FC20")]
		private static float InElasticSmall(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006DC")]
		[Address(RVA = "0x108FC74", Offset = "0x108FC74", VA = "0x108FC74")]
		private static float InElasticBig(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006DD")]
		[Address(RVA = "0x108FCC8", Offset = "0x108FCC8", VA = "0x108FCC8")]
		private static float InSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006DE")]
		[Address(RVA = "0x108FD60", Offset = "0x108FD60", VA = "0x108FD60")]
		private static float OutSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006DF")]
		[Address(RVA = "0x108FDF4", Offset = "0x108FDF4", VA = "0x108FDF4")]
		private static float InOutSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006E0")]
		[Address(RVA = "0x1090224", Offset = "0x1090224", VA = "0x1090224")]
		private static float InElastic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006E1")]
		[Address(RVA = "0x108FE98", Offset = "0x108FE98", VA = "0x108FE98")]
		private static float OutElastic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006E2")]
		[Address(RVA = "0x108FF7C", Offset = "0x108FF7C", VA = "0x108FF7C")]
		private static float InBack(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006E3")]
		[Address(RVA = "0x108FFAC", Offset = "0x108FFAC", VA = "0x108FFAC")]
		private static float OutBack(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006E4")]
		[Address(RVA = "0x109030C", Offset = "0x109030C", VA = "0x109030C")]
		public Interp()
		{
		}
	}
	[Token(Token = "0x2000060")]
	public class LargeHeader : PropertyAttribute
	{
		[Token(Token = "0x40001EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x40001ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string color;

		[Token(Token = "0x60006E5")]
		[Address(RVA = "0x1090314", Offset = "0x1090314", VA = "0x1090314")]
		public LargeHeader(string name)
		{
		}

		[Token(Token = "0x60006E6")]
		[Address(RVA = "0x1090384", Offset = "0x1090384", VA = "0x1090384")]
		public LargeHeader(string name, string color)
		{
		}
	}
	[Token(Token = "0x2000061")]
	public static class LayerMaskExtensions
	{
		[Token(Token = "0x60006E7")]
		[Address(RVA = "0x10903F4", Offset = "0x10903F4", VA = "0x10903F4")]
		public static bool Contains(LayerMask mask, int layer)
		{
			return default(bool);
		}

		[Token(Token = "0x60006E8")]
		[Address(RVA = "0x109044C", Offset = "0x109044C", VA = "0x109044C")]
		public static LayerMask Create(params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60006E9")]
		[Address(RVA = "0x1090518", Offset = "0x1090518", VA = "0x1090518")]
		public static LayerMask Create(params int[] layerNumbers)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60006EA")]
		[Address(RVA = "0x1090464", Offset = "0x1090464", VA = "0x1090464")]
		public static LayerMask NamesToMask(params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60006EB")]
		[Address(RVA = "0x1090530", Offset = "0x1090530", VA = "0x1090530")]
		public static LayerMask LayerNumbersToMask(params int[] layerNumbers)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60006EC")]
		[Address(RVA = "0x10905D4", Offset = "0x10905D4", VA = "0x10905D4")]
		public static LayerMask Inverse(this LayerMask original)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60006ED")]
		[Address(RVA = "0x1090600", Offset = "0x1090600", VA = "0x1090600")]
		public static LayerMask AddToMask(this LayerMask original, params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60006EE")]
		[Address(RVA = "0x1090650", Offset = "0x1090650", VA = "0x1090650")]
		public static LayerMask RemoveFromMask(this LayerMask original, params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60006EF")]
		[Address(RVA = "0x10906BC", Offset = "0x10906BC", VA = "0x10906BC")]
		public static string[] MaskToNames(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x60006F0")]
		[Address(RVA = "0x10907B0", Offset = "0x10907B0", VA = "0x10907B0")]
		public static int[] MaskToNumbers(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x60006F1")]
		[Address(RVA = "0x1090888", Offset = "0x1090888", VA = "0x1090888")]
		public static string MaskToString(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x60006F2")]
		[Address(RVA = "0x10908E8", Offset = "0x10908E8", VA = "0x10908E8")]
		public static string MaskToString(this LayerMask original, string delimiter)
		{
			return null;
		}
	}
	[Token(Token = "0x2000062")]
	public static class QuaTools
	{
		[Token(Token = "0x60006F3")]
		[Address(RVA = "0x1090918", Offset = "0x1090918", VA = "0x1090918")]
		public static Quaternion Lerp(Quaternion fromRotation, Quaternion toRotation, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60006F4")]
		[Address(RVA = "0x1090A64", Offset = "0x1090A64", VA = "0x1090A64")]
		public static Quaternion Slerp(Quaternion fromRotation, Quaternion toRotation, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60006F5")]
		[Address(RVA = "0x1090BB0", Offset = "0x1090BB0", VA = "0x1090BB0")]
		public static Quaternion LinearBlend(Quaternion q, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60006F6")]
		[Address(RVA = "0x1090CC4", Offset = "0x1090CC4", VA = "0x1090CC4")]
		public static Quaternion SphericalBlend(Quaternion q, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60006F7")]
		[Address(RVA = "0x1090DD8", Offset = "0x1090DD8", VA = "0x1090DD8")]
		public static Quaternion FromToAroundAxis(Vector3 fromDirection, Vector3 toDirection, Vector3 axis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60006F8")]
		[Address(RVA = "0x1090F64", Offset = "0x1090F64", VA = "0x1090F64")]
		public static Quaternion RotationToLocalSpace(Quaternion space, Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60006F9")]
		[Address(RVA = "0x1091034", Offset = "0x1091034", VA = "0x1091034")]
		public static Quaternion FromToRotation(Quaternion from, Quaternion to)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60006FA")]
		[Address(RVA = "0x1091188", Offset = "0x1091188", VA = "0x1091188")]
		public static Vector3 GetAxis(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006FB")]
		[Address(RVA = "0x109140C", Offset = "0x109140C", VA = "0x109140C")]
		public static Quaternion ClampRotation(Quaternion rotation, float clampWeight, int clampSmoothing)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60006FC")]
		[Address(RVA = "0x1091620", Offset = "0x1091620", VA = "0x1091620")]
		public static float ClampAngle(float angle, float clampWeight, int clampSmoothing)
		{
			return default(float);
		}

		[Token(Token = "0x60006FD")]
		[Address(RVA = "0x108ADE8", Offset = "0x108ADE8", VA = "0x108ADE8")]
		public static Quaternion MatchRotation(Quaternion targetRotation, Vector3 targetforwardAxis, Vector3 targetUpAxis, Vector3 forwardAxis, Vector3 upAxis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60006FE")]
		[Address(RVA = "0x10917A0", Offset = "0x10917A0", VA = "0x10917A0")]
		public static Vector3 ToBiPolar(Vector3 euler)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006FF")]
		[Address(RVA = "0x10918B0", Offset = "0x10918B0", VA = "0x10918B0")]
		public static float ToBiPolar(float angle)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000063")]
	public abstract class Singleton<T> : MonoBehaviour where T : Singleton<T>
	{
		[Token(Token = "0x40001EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T sInstance;

		[Token(Token = "0x17000077")]
		public static T instance
		{
			[Token(Token = "0x6000700")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000701")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000702")]
		protected Singleton()
		{
		}
	}
	[Token(Token = "0x2000064")]
	public class SolverManager : MonoBehaviour
	{
		[Token(Token = "0x40001EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A5974", Offset = "0x9A5974")]
		public bool fixTransforms;

		[Token(Token = "0x40001F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x40001F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Animation legacy;

		[Token(Token = "0x40001F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool updateFrame;

		[Token(Token = "0x40001F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool componentInitiated;

		[Token(Token = "0x40001F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool skipSolverUpdate;

		[Token(Token = "0x17000078")]
		private bool animatePhysics
		{
			[Token(Token = "0x600070A")]
			[Address(RVA = "0x1091A44", Offset = "0x1091A44", VA = "0x1091A44")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000079")]
		private bool isAnimated
		{
			[Token(Token = "0x600070E")]
			[Address(RVA = "0x1091D40", Offset = "0x1091D40", VA = "0x1091D40")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000704")]
		[Address(RVA = "0x109190C", Offset = "0x109190C", VA = "0x109190C")]
		public void Disable()
		{
		}

		[Token(Token = "0x6000705")]
		[Address(RVA = "0x10919A4", Offset = "0x10919A4", VA = "0x10919A4", Slot = "4")]
		protected virtual void InitiateSolver()
		{
		}

		[Token(Token = "0x6000706")]
		[Address(RVA = "0x10919A8", Offset = "0x10919A8", VA = "0x10919A8", Slot = "5")]
		protected virtual void UpdateSolver()
		{
		}

		[Token(Token = "0x6000707")]
		[Address(RVA = "0x10919AC", Offset = "0x10919AC", VA = "0x10919AC", Slot = "6")]
		protected virtual void FixTransforms()
		{
		}

		[Token(Token = "0x6000708")]
		[Address(RVA = "0x10919B0", Offset = "0x10919B0", VA = "0x10919B0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000709")]
		[Address(RVA = "0x1091A40", Offset = "0x1091A40", VA = "0x1091A40")]
		private void Start()
		{
		}

		[Token(Token = "0x600070B")]
		[Address(RVA = "0x10919E8", Offset = "0x10919E8", VA = "0x10919E8")]
		private void Initiate()
		{
		}

		[Token(Token = "0x600070C")]
		[Address(RVA = "0x1091CF4", Offset = "0x1091CF4", VA = "0x1091CF4")]
		private void Update()
		{
		}

		[Token(Token = "0x600070D")]
		[Address(RVA = "0x1091B34", Offset = "0x1091B34", VA = "0x1091B34")]
		private void FindAnimatorRecursive(Transform t, bool findInChildren)
		{
		}

		[Token(Token = "0x600070F")]
		[Address(RVA = "0x1091DFC", Offset = "0x1091DFC", VA = "0x1091DFC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000710")]
		[Address(RVA = "0x1091E58", Offset = "0x1091E58", VA = "0x1091E58")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000711")]
		[Address(RVA = "0x1091EB4", Offset = "0x1091EB4", VA = "0x1091EB4")]
		public void UpdateSolverExternal()
		{
		}

		[Token(Token = "0x6000712")]
		[Address(RVA = "0x1091EFC", Offset = "0x1091EFC", VA = "0x1091EFC")]
		public SolverManager()
		{
		}
	}
	[Token(Token = "0x2000065")]
	public class TriggerEventBroadcaster : MonoBehaviour
	{
		[Token(Token = "0x40001F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject target;

		[Token(Token = "0x6000713")]
		[Address(RVA = "0x1091F7C", Offset = "0x1091F7C", VA = "0x1091F7C")]
		private void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x6000714")]
		[Address(RVA = "0x1092034", Offset = "0x1092034", VA = "0x1092034")]
		private void OnTriggerStay(Collider collider)
		{
		}

		[Token(Token = "0x6000715")]
		[Address(RVA = "0x10920EC", Offset = "0x10920EC", VA = "0x10920EC")]
		private void OnTriggerExit(Collider collider)
		{
		}

		[Token(Token = "0x6000716")]
		[Address(RVA = "0x10921A4", Offset = "0x10921A4", VA = "0x10921A4")]
		public TriggerEventBroadcaster()
		{
		}
	}
	[Token(Token = "0x2000066")]
	public static class V3Tools
	{
		[Token(Token = "0x6000717")]
		[Address(RVA = "0x10921AC", Offset = "0x10921AC", VA = "0x10921AC")]
		public static Vector3 Lerp(Vector3 fromVector, Vector3 toVector, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000718")]
		[Address(RVA = "0x10922A4", Offset = "0x10922A4", VA = "0x10922A4")]
		public static Vector3 Slerp(Vector3 fromVector, Vector3 toVector, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000719")]
		[Address(RVA = "0x109239C", Offset = "0x109239C", VA = "0x109239C")]
		public static Vector3 ExtractVertical(Vector3 v, Vector3 verticalAxis, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600071A")]
		[Address(RVA = "0x1092494", Offset = "0x1092494", VA = "0x1092494")]
		public static Vector3 ExtractHorizontal(Vector3 v, Vector3 normal, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600071B")]
		[Address(RVA = "0x1092594", Offset = "0x1092594", VA = "0x1092594")]
		public static Vector3 ClampDirection(Vector3 direction, Vector3 normalDirection, float clampWeight, int clampSmoothing)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600071C")]
		[Address(RVA = "0x10927B8", Offset = "0x10927B8", VA = "0x10927B8")]
		public static Vector3 ClampDirection(Vector3 direction, Vector3 normalDirection, float clampWeight, int clampSmoothing, out bool changed)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600071D")]
		[Address(RVA = "0x10929F4", Offset = "0x10929F4", VA = "0x10929F4")]
		public static Vector3 ClampDirection(Vector3 direction, Vector3 normalDirection, float clampWeight, int clampSmoothing, out float clampValue)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600071E")]
		[Address(RVA = "0x1092C44", Offset = "0x1092C44", VA = "0x1092C44")]
		public static Vector3 LineToPlane(Vector3 origin, Vector3 direction, Vector3 planeNormal, Vector3 planePoint)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600071F")]
		[Address(RVA = "0x1092E44", Offset = "0x1092E44", VA = "0x1092E44")]
		public static Vector3 PointToPlane(Vector3 point, Vector3 planePosition, Vector3 planeNormal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000720")]
		[Address(RVA = "0x1093020", Offset = "0x1093020", VA = "0x1093020")]
		public static Vector3 TransformPointUnscaled(Transform t, Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000721")]
		[Address(RVA = "0x1093154", Offset = "0x1093154", VA = "0x1093154")]
		public static Vector3 InverseTransformPointUnscaled(Transform t, Vector3 point)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000067")]
	public static class Warning
	{
		[Token(Token = "0x200018E")]
		public delegate void Logger(string message);

		[Token(Token = "0x40001F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool logged;

		[Token(Token = "0x6000722")]
		[Address(RVA = "0x10932AC", Offset = "0x10932AC", VA = "0x10932AC")]
		public static void Log(string message, Logger logger, bool logInEditMode = false)
		{
		}

		[Token(Token = "0x6000723")]
		[Address(RVA = "0x10936D8", Offset = "0x10936D8", VA = "0x10936D8")]
		public static void Log(string message, Transform context, bool logInEditMode = false)
		{
		}
	}
}
namespace RootMotion.Demos
{
	[Serializable]
	[Token(Token = "0x2000068")]
	public class Navigator
	{
		[Token(Token = "0x200018F")]
		public enum State
		{
			[Token(Token = "0x40008D1")]
			Idle,
			[Token(Token = "0x40008D2")]
			Seeking,
			[Token(Token = "0x40008D3")]
			OnPath
		}

		[Token(Token = "0x40001F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A59AC", Offset = "0x9A59AC")]
		public bool activeTargetSeeking;

		[Token(Token = "0x40001F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A59E4", Offset = "0x9A59E4")]
		public float cornerRadius;

		[Token(Token = "0x40001F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A5A1C", Offset = "0x9A5A1C")]
		public float recalculateOnPathDistance;

		[Token(Token = "0x40001FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A5A54", Offset = "0x9A5A54")]
		public float maxSampleDistance;

		[Token(Token = "0x40001FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A5A8C", Offset = "0x9A5A8C")]
		public float nextPathInterval;

		[Token(Token = "0x40001FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A5AC4", Offset = "0x9A5AC4")]
		private Vector3 <normalizedDeltaPosition>k__BackingField;

		[Token(Token = "0x40001FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A5AD4", Offset = "0x9A5AD4")]
		private State <state>k__BackingField;

		[Token(Token = "0x40001FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform transform;

		[Token(Token = "0x40001FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int cornerIndex;

		[Token(Token = "0x4000200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3[] corners;

		[Token(Token = "0x4000201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private NavMeshPath path;

		[Token(Token = "0x4000202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 lastTargetPosition;

		[Token(Token = "0x4000203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool initiated;

		[Token(Token = "0x4000204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float nextPathTime;

		[Token(Token = "0x1700007A")]
		public Vector3 normalizedDeltaPosition
		{
			[Token(Token = "0x6000724")]
			[Address(RVA = "0xEBA96C", Offset = "0xEBA96C", VA = "0xEBA96C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD604", Offset = "0x9AD604")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000725")]
			[Address(RVA = "0xEBA978", Offset = "0xEBA978", VA = "0xEBA978")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD614", Offset = "0x9AD614")]
			private set
			{
			}
		}

		[Token(Token = "0x1700007B")]
		public State state
		{
			[Token(Token = "0x6000726")]
			[Address(RVA = "0xEBA984", Offset = "0xEBA984", VA = "0xEBA984")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD624", Offset = "0x9AD624")]
			get
			{
				return default(State);
			}
			[Token(Token = "0x6000727")]
			[Address(RVA = "0xEBA98C", Offset = "0xEBA98C", VA = "0xEBA98C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD634", Offset = "0x9AD634")]
			private set
			{
			}
		}

		[Token(Token = "0x6000728")]
		[Address(RVA = "0xEBA994", Offset = "0xEBA994", VA = "0xEBA994")]
		public void Initiate(Transform transform)
		{
		}

		[Token(Token = "0x6000729")]
		[Address(RVA = "0xEBAA68", Offset = "0xEBAA68", VA = "0xEBAA68")]
		public void Update(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x600072A")]
		[Address(RVA = "0xEBAFAC", Offset = "0xEBAFAC", VA = "0xEBAFAC")]
		private void CalculatePath(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x600072B")]
		[Address(RVA = "0xEBB01C", Offset = "0xEBB01C", VA = "0xEBB01C")]
		private bool Find(Vector3 targetPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x600072C")]
		[Address(RVA = "0xEBAE74", Offset = "0xEBAE74", VA = "0xEBAE74")]
		private void Stop()
		{
		}

		[Token(Token = "0x600072D")]
		[Address(RVA = "0xEBAEE8", Offset = "0xEBAEE8", VA = "0xEBAEE8")]
		private float HorDistance(Vector3 p1, Vector3 p2)
		{
			return default(float);
		}

		[Token(Token = "0x600072E")]
		[Address(RVA = "0xEBB164", Offset = "0xEBB164", VA = "0xEBB164")]
		public void Visualize()
		{
		}

		[Token(Token = "0x600072F")]
		[Address(RVA = "0xEBB314", Offset = "0xEBB314", VA = "0xEBB314")]
		public Navigator()
		{
		}
	}
}
namespace RootMotion.FinalIK
{
	[Token(Token = "0x2000069")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x9A4120", Offset = "0x9A4120")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4120", Offset = "0x9A4120")]
	public class BipedIK : SolverManager
	{
		[Token(Token = "0x4000205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BipedReferences references;

		[Token(Token = "0x4000206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public BipedIKSolvers solvers;

		[Token(Token = "0x6000730")]
		[Address(RVA = "0xEBD2E4", Offset = "0xEBD2E4", VA = "0xEBD2E4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AD644", Offset = "0x9AD644")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000731")]
		[Address(RVA = "0xEBD330", Offset = "0xEBD330", VA = "0xEBD330")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AD67C", Offset = "0x9AD67C")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000732")]
		[Address(RVA = "0xEBD37C", Offset = "0xEBD37C", VA = "0xEBD37C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AD6B4", Offset = "0x9AD6B4")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000733")]
		[Address(RVA = "0xEBD3C8", Offset = "0xEBD3C8", VA = "0xEBD3C8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AD6EC", Offset = "0x9AD6EC")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000734")]
		[Address(RVA = "0xEBD414", Offset = "0xEBD414", VA = "0xEBD414")]
		public float GetIKPositionWeight(AvatarIKGoal goal)
		{
			return default(float);
		}

		[Token(Token = "0x6000735")]
		[Address(RVA = "0xEBD4B0", Offset = "0xEBD4B0", VA = "0xEBD4B0")]
		public float GetIKRotationWeight(AvatarIKGoal goal)
		{
			return default(float);
		}

		[Token(Token = "0x6000736")]
		[Address(RVA = "0xEBD4D0", Offset = "0xEBD4D0", VA = "0xEBD4D0")]
		public void SetIKPositionWeight(AvatarIKGoal goal, float weight)
		{
		}

		[Token(Token = "0x6000737")]
		[Address(RVA = "0xEBD500", Offset = "0xEBD500", VA = "0xEBD500")]
		public void SetIKRotationWeight(AvatarIKGoal goal, float weight)
		{
		}

		[Token(Token = "0x6000738")]
		[Address(RVA = "0xEBD530", Offset = "0xEBD530", VA = "0xEBD530")]
		public void SetIKPosition(AvatarIKGoal goal, Vector3 IKPosition)
		{
		}

		[Token(Token = "0x6000739")]
		[Address(RVA = "0xEBD570", Offset = "0xEBD570", VA = "0xEBD570")]
		public void SetIKRotation(AvatarIKGoal goal, Quaternion IKRotation)
		{
		}

		[Token(Token = "0x600073A")]
		[Address(RVA = "0xEBD5B4", Offset = "0xEBD5B4", VA = "0xEBD5B4")]
		public Vector3 GetIKPosition(AvatarIKGoal goal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600073B")]
		[Address(RVA = "0xEBD5D8", Offset = "0xEBD5D8", VA = "0xEBD5D8")]
		public Quaternion GetIKRotation(AvatarIKGoal goal)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600073C")]
		[Address(RVA = "0xEBD5FC", Offset = "0xEBD5FC", VA = "0xEBD5FC")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight, float clampWeightHead, float clampWeightEyes)
		{
		}

		[Token(Token = "0x600073D")]
		[Address(RVA = "0xEBD624", Offset = "0xEBD624", VA = "0xEBD624")]
		public void SetLookAtPosition(Vector3 lookAtPosition)
		{
		}

		[Token(Token = "0x600073E")]
		[Address(RVA = "0xEBD650", Offset = "0xEBD650", VA = "0xEBD650")]
		public void SetSpinePosition(Vector3 spinePosition)
		{
		}

		[Token(Token = "0x600073F")]
		[Address(RVA = "0xEBD67C", Offset = "0xEBD67C", VA = "0xEBD67C")]
		public void SetSpineWeight(float weight)
		{
		}

		[Token(Token = "0x6000740")]
		[Address(RVA = "0xEBD434", Offset = "0xEBD434", VA = "0xEBD434")]
		public IKSolverLimb GetGoalIK(AvatarIKGoal goal)
		{
			return null;
		}

		[Token(Token = "0x6000741")]
		[Address(RVA = "0xEBD6A4", Offset = "0xEBD6A4", VA = "0xEBD6A4")]
		public void InitiateBipedIK()
		{
		}

		[Token(Token = "0x6000742")]
		[Address(RVA = "0xEBD6B0", Offset = "0xEBD6B0", VA = "0xEBD6B0")]
		public void UpdateBipedIK()
		{
		}

		[Token(Token = "0x6000743")]
		[Address(RVA = "0xEBD6BC", Offset = "0xEBD6BC", VA = "0xEBD6BC")]
		public void SetToDefaults()
		{
		}

		[Token(Token = "0x6000744")]
		[Address(RVA = "0xEBD860", Offset = "0xEBD860", VA = "0xEBD860", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x6000745")]
		[Address(RVA = "0xEBD910", Offset = "0xEBD910", VA = "0xEBD910", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6000746")]
		[Address(RVA = "0xEBDAE8", Offset = "0xEBDAE8", VA = "0xEBDAE8", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6000747")]
		[Address(RVA = "0xEBDC88", Offset = "0xEBDC88", VA = "0xEBDC88")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x6000748")]
		[Address(RVA = "0xEBDCBC", Offset = "0xEBDCBC", VA = "0xEBDCBC")]
		public BipedIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200006A")]
	public class BipedIKSolvers
	{
		[Token(Token = "0x4000207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IKSolverLimb leftFoot;

		[Token(Token = "0x4000208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IKSolverLimb rightFoot;

		[Token(Token = "0x4000209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IKSolverLimb leftHand;

		[Token(Token = "0x400020A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IKSolverLimb rightHand;

		[Token(Token = "0x400020B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IKSolverFABRIK spine;

		[Token(Token = "0x400020C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLookAt lookAt;

		[Token(Token = "0x400020D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IKSolverAim aim;

		[Token(Token = "0x400020E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Constraints pelvis;

		[Token(Token = "0x400020F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IKSolverLimb[] _limbs;

		[Token(Token = "0x4000210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private IKSolver[] _ikSolvers;

		[Token(Token = "0x1700007C")]
		public IKSolverLimb[] limbs
		{
			[Token(Token = "0x6000749")]
			[Address(RVA = "0xF436DC", Offset = "0xF436DC", VA = "0xF436DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007D")]
		public IKSolver[] ikSolvers
		{
			[Token(Token = "0x600074A")]
			[Address(RVA = "0xF43824", Offset = "0xF43824", VA = "0xF43824")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600074B")]
		[Address(RVA = "0xF439F0", Offset = "0xF439F0", VA = "0xF439F0")]
		public void AssignReferences(BipedReferences references)
		{
		}

		[Token(Token = "0x600074C")]
		[Address(RVA = "0xF43B14", Offset = "0xF43B14", VA = "0xF43B14")]
		public BipedIKSolvers()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200006B")]
	public abstract class Constraint
	{
		[Token(Token = "0x4000211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x4000212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float weight;

		[Token(Token = "0x1700007E")]
		public bool isValid
		{
			[Token(Token = "0x600074D")]
			[Address(RVA = "0xF44090", Offset = "0xF44090", VA = "0xF44090")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600074E")]
		public abstract void UpdateConstraint();

		[Token(Token = "0x600074F")]
		[Address(RVA = "0xF44100", Offset = "0xF44100", VA = "0xF44100")]
		protected Constraint()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200006C")]
	public class ConstraintPosition : Constraint
	{
		[Token(Token = "0x4000213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 position;

		[Token(Token = "0x6000750")]
		[Address(RVA = "0xF44108", Offset = "0xF44108", VA = "0xF44108", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x6000751")]
		[Address(RVA = "0xF44214", Offset = "0xF44214", VA = "0xF44214")]
		public ConstraintPosition()
		{
		}

		[Token(Token = "0x6000752")]
		[Address(RVA = "0xF4421C", Offset = "0xF4421C", VA = "0xF4421C")]
		public ConstraintPosition(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200006D")]
	public class ConstraintPositionOffset : Constraint
	{
		[Token(Token = "0x4000214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 offset;

		[Token(Token = "0x4000215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 defaultLocalPosition;

		[Token(Token = "0x4000216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 lastLocalPosition;

		[Token(Token = "0x4000217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool initiated;

		[Token(Token = "0x1700007F")]
		private bool positionChanged
		{
			[Token(Token = "0x6000756")]
			[Address(RVA = "0xF443E4", Offset = "0xF443E4", VA = "0xF443E4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000753")]
		[Address(RVA = "0xF44248", Offset = "0xF44248", VA = "0xF44248", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x6000754")]
		[Address(RVA = "0xF444A0", Offset = "0xF444A0", VA = "0xF444A0")]
		public ConstraintPositionOffset()
		{
		}

		[Token(Token = "0x6000755")]
		[Address(RVA = "0xF444A8", Offset = "0xF444A8", VA = "0xF444A8")]
		public ConstraintPositionOffset(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200006E")]
	public class ConstraintRotation : Constraint
	{
		[Token(Token = "0x4000218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion rotation;

		[Token(Token = "0x6000757")]
		[Address(RVA = "0xF444D4", Offset = "0xF444D4", VA = "0xF444D4", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x6000758")]
		[Address(RVA = "0xF445FC", Offset = "0xF445FC", VA = "0xF445FC")]
		public ConstraintRotation()
		{
		}

		[Token(Token = "0x6000759")]
		[Address(RVA = "0xF44604", Offset = "0xF44604", VA = "0xF44604")]
		public ConstraintRotation(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200006F")]
	public class ConstraintRotationOffset : Constraint
	{
		[Token(Token = "0x4000219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion offset;

		[Token(Token = "0x400021A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion defaultRotation;

		[Token(Token = "0x400021B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion defaultLocalRotation;

		[Token(Token = "0x400021C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion lastLocalRotation;

		[Token(Token = "0x400021D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Quaternion defaultTargetLocalRotation;

		[Token(Token = "0x400021E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool initiated;

		[Token(Token = "0x17000080")]
		private bool rotationChanged
		{
			[Token(Token = "0x600075D")]
			[Address(RVA = "0xF447D0", Offset = "0xF447D0", VA = "0xF447D0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600075A")]
		[Address(RVA = "0xF44630", Offset = "0xF44630", VA = "0xF44630", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x600075B")]
		[Address(RVA = "0xF448A0", Offset = "0xF448A0", VA = "0xF448A0")]
		public ConstraintRotationOffset()
		{
		}

		[Token(Token = "0x600075C")]
		[Address(RVA = "0xF448A8", Offset = "0xF448A8", VA = "0xF448A8")]
		public ConstraintRotationOffset(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000070")]
	public class Constraints
	{
		[Token(Token = "0x400021F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x4000220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4000221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 positionOffset;

		[Token(Token = "0x4000222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 position;

		[Token(Token = "0x4000223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A5AE4", Offset = "0x9A5AE4")]
		public float positionWeight;

		[Token(Token = "0x4000224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 rotationOffset;

		[Token(Token = "0x4000225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 rotation;

		[Token(Token = "0x4000226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A5AFC", Offset = "0x9A5AFC")]
		public float rotationWeight;

		[Token(Token = "0x600075E")]
		[Address(RVA = "0xF448D4", Offset = "0xF448D4", VA = "0xF448D4")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x600075F")]
		[Address(RVA = "0xF44944", Offset = "0xF44944", VA = "0xF44944")]
		public void Initiate(Transform transform)
		{
		}

		[Token(Token = "0x6000760")]
		[Address(RVA = "0xF44998", Offset = "0xF44998", VA = "0xF44998")]
		public void Update()
		{
		}

		[Token(Token = "0x6000761")]
		[Address(RVA = "0xF43C5C", Offset = "0xF43C5C", VA = "0xF43C5C")]
		public Constraints()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000071")]
	public class Finger
	{
		[Serializable]
		[Token(Token = "0x2000190")]
		public enum DOF
		{
			[Token(Token = "0x40008D5")]
			One,
			[Token(Token = "0x40008D6")]
			Three
		}

		[Token(Token = "0x4000227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A5B14", Offset = "0x9A5B14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A5B14", Offset = "0x9A5B14")]
		public float weight;

		[Token(Token = "0x4000228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A5B68", Offset = "0x9A5B68")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A5B68", Offset = "0x9A5B68")]
		public float rotationWeight;

		[Token(Token = "0x4000229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A5BBC", Offset = "0x9A5BBC")]
		public DOF rotationDOF;

		[Token(Token = "0x400022A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A5BF4", Offset = "0x9A5BF4")]
		public bool fixBone1Twist;

		[Token(Token = "0x400022B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A5C2C", Offset = "0x9A5C2C")]
		public Transform bone1;

		[Token(Token = "0x400022C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A5C64", Offset = "0x9A5C64")]
		public Transform bone2;

		[Token(Token = "0x400022D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A5C9C", Offset = "0x9A5C9C")]
		public Transform bone3;

		[Token(Token = "0x400022E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A5CD4", Offset = "0x9A5CD4")]
		public Transform tip;

		[Token(Token = "0x400022F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A5D0C", Offset = "0x9A5D0C")]
		public Transform target;

		[Token(Token = "0x4000230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A5D44", Offset = "0x9A5D44")]
		private bool <initiated>k__BackingField;

		[Token(Token = "0x4000231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IKSolverLimb solver;

		[Token(Token = "0x4000232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion bone3RelativeToTarget;

		[Token(Token = "0x4000233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 bone3DefaultLocalPosition;

		[Token(Token = "0x4000234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Quaternion bone3DefaultLocalRotation;

		[Token(Token = "0x4000235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 bone1Axis;

		[Token(Token = "0x4000236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 tipAxis;

		[Token(Token = "0x4000237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Vector3 bone1TwistAxis;

		[Token(Token = "0x17000081")]
		public bool initiated
		{
			[Token(Token = "0x6000762")]
			[Address(RVA = "0xF4BFC0", Offset = "0xF4BFC0", VA = "0xF4BFC0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD724", Offset = "0x9AD724")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000763")]
			[Address(RVA = "0xF4BFC8", Offset = "0xF4BFC8", VA = "0xF4BFC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD734", Offset = "0x9AD734")]
			private set
			{
			}
		}

		[Token(Token = "0x17000082")]
		public Vector3 IKPosition
		{
			[Token(Token = "0x6000764")]
			[Address(RVA = "0xF4BFD4", Offset = "0xF4BFD4", VA = "0xF4BFD4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000765")]
			[Address(RVA = "0xF4BFF4", Offset = "0xF4BFF4", VA = "0xF4BFF4")]
			set
			{
			}
		}

		[Token(Token = "0x17000083")]
		public Quaternion IKRotation
		{
			[Token(Token = "0x6000766")]
			[Address(RVA = "0xF4C014", Offset = "0xF4C014", VA = "0xF4C014")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6000767")]
			[Address(RVA = "0xF4C034", Offset = "0xF4C034", VA = "0xF4C034")]
			set
			{
			}
		}

		[Token(Token = "0x6000768")]
		[Address(RVA = "0xF4C054", Offset = "0xF4C054", VA = "0xF4C054")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000769")]
		[Address(RVA = "0xF4C154", Offset = "0xF4C154", VA = "0xF4C154")]
		public void Initiate(Transform hand, int index)
		{
		}

		[Token(Token = "0x600076A")]
		[Address(RVA = "0xF4C6E8", Offset = "0xF4C6E8", VA = "0xF4C6E8")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x600076B")]
		[Address(RVA = "0xF4C7C4", Offset = "0xF4C7C4", VA = "0xF4C7C4")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600076C")]
		[Address(RVA = "0xF4C88C", Offset = "0xF4C88C", VA = "0xF4C88C")]
		public void Update(float masterWeight)
		{
		}

		[Token(Token = "0x600076D")]
		[Address(RVA = "0xF4CFD0", Offset = "0xF4CFD0", VA = "0xF4CFD0")]
		public Finger()
		{
		}
	}
	[Token(Token = "0x2000072")]
	public class FingerRig : SolverManager
	{
		[Token(Token = "0x4000238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A5D54", Offset = "0x9A5D54")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A5D54", Offset = "0x9A5D54")]
		public float weight;

		[Token(Token = "0x4000239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Finger[] fingers;

		[Token(Token = "0x400023A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A5DA8", Offset = "0x9A5DA8")]
		private bool <initiated>k__BackingField;

		[Token(Token = "0x17000084")]
		public bool initiated
		{
			[Token(Token = "0x600076E")]
			[Address(RVA = "0xF4CFE0", Offset = "0xF4CFE0", VA = "0xF4CFE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD744", Offset = "0x9AD744")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600076F")]
			[Address(RVA = "0xF4CFE8", Offset = "0xF4CFE8", VA = "0xF4CFE8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD754", Offset = "0x9AD754")]
			private set
			{
			}
		}

		[Token(Token = "0x6000770")]
		[Address(RVA = "0xF4CFF4", Offset = "0xF4CFF4", VA = "0xF4CFF4")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000771")]
		[Address(RVA = "0xF4D07C", Offset = "0xF4D07C", VA = "0xF4D07C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AD764", Offset = "0x9AD764")]
		public void AutoDetect()
		{
		}

		[Token(Token = "0x6000772")]
		[Address(RVA = "0xF4D3A0", Offset = "0xF4D3A0", VA = "0xF4D3A0")]
		public void AddFinger(Transform bone1, Transform bone2, Transform bone3, Transform tip, [Optional] Transform target)
		{
		}

		[Token(Token = "0x6000773")]
		[Address(RVA = "0xF4D510", Offset = "0xF4D510", VA = "0xF4D510")]
		public void RemoveFinger(int index)
		{
		}

		[Token(Token = "0x6000774")]
		[Address(RVA = "0xF4D298", Offset = "0xF4D298", VA = "0xF4D298")]
		private void AddChildrenRecursive(Transform parent, ref Transform[] array)
		{
		}

		[Token(Token = "0x6000775")]
		[Address(RVA = "0xF4D678", Offset = "0xF4D678", VA = "0xF4D678", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6000776")]
		[Address(RVA = "0xF4D738", Offset = "0xF4D738", VA = "0xF4D738")]
		public void UpdateFingerSolvers()
		{
		}

		[Token(Token = "0x6000777")]
		[Address(RVA = "0xF4D7B0", Offset = "0xF4D7B0", VA = "0xF4D7B0")]
		public void FixFingerTransforms()
		{
		}

		[Token(Token = "0x6000778")]
		[Address(RVA = "0xF4D824", Offset = "0xF4D824", VA = "0xF4D824")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000779")]
		[Address(RVA = "0xF4D88C", Offset = "0xF4D88C", VA = "0xF4D88C", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x600077A")]
		[Address(RVA = "0xF4D890", Offset = "0xF4D890", VA = "0xF4D890", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x600077B")]
		[Address(RVA = "0xF4D8A4", Offset = "0xF4D8A4", VA = "0xF4D8A4")]
		public FingerRig()
		{
		}
	}
	[Token(Token = "0x2000073")]
	public abstract class Grounder : MonoBehaviour
	{
		[Token(Token = "0x2000191")]
		public delegate void GrounderDelegate();

		[Token(Token = "0x400023B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A5DB8", Offset = "0x9A5DB8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A5DB8", Offset = "0x9A5DB8")]
		public float weight;

		[Token(Token = "0x400023C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A5E0C", Offset = "0x9A5E0C")]
		public Grounding solver;

		[Token(Token = "0x400023D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GrounderDelegate OnPreGrounder;

		[Token(Token = "0x400023E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GrounderDelegate OnPostGrounder;

		[Token(Token = "0x400023F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A5E44", Offset = "0x9A5E44")]
		private bool <initiated>k__BackingField;

		[Token(Token = "0x17000085")]
		public bool initiated
		{
			[Token(Token = "0x600077D")]
			[Address(RVA = "0xF4E8D8", Offset = "0xF4E8D8", VA = "0xF4E8D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD79C", Offset = "0x9AD79C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600077E")]
			[Address(RVA = "0xF4E8E0", Offset = "0xF4E8E0", VA = "0xF4E8E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AD7AC", Offset = "0x9AD7AC")]
			protected set
			{
			}
		}

		[Token(Token = "0x600077C")]
		public abstract void ResetPosition();

		[Token(Token = "0x600077F")]
		[Address(RVA = "0xF4E8EC", Offset = "0xF4E8EC", VA = "0xF4E8EC")]
		protected Vector3 GetSpineOffsetTarget()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000780")]
		[Address(RVA = "0xF4EBC0", Offset = "0xF4EBC0", VA = "0xF4EBC0")]
		protected void LogWarning(string message)
		{
		}

		[Token(Token = "0x6000781")]
		[Address(RVA = "0xF4EA30", Offset = "0xF4EA30", VA = "0xF4EA30")]
		private Vector3 GetLegSpineBendVector(Grounding.Leg leg)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000782")]
		[Address(RVA = "0xF4EBF4", Offset = "0xF4EBF4", VA = "0xF4EBF4")]
		private Vector3 GetLegSpineTangent(Grounding.Leg leg)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000783")]
		protected abstract void OpenUserManual();

		[Token(Token = "0x6000784")]
		protected abstract void OpenScriptReference();

		[Token(Token = "0x6000785")]
		[Address(RVA = "0xF4EDFC", Offset = "0xF4EDFC", VA = "0xF4EDFC")]
		protected Grounder()
		{
		}
	}
	[Token(Token = "0x2000074")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x9A4180", Offset = "0x9A4180")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4180", Offset = "0x9A4180")]
	public class GrounderBipedIK : Grounder
	{
		[Token(Token = "0x4000240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A5E54", Offset = "0x9A5E54")]
		public BipedIK ik;

		[Token(Token = "0x4000241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A5E8C", Offset = "0x9A5E8C")]
		public float spineBend;

		[Token(Token = "0x4000242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A5EC4", Offset = "0x9A5EC4")]
		public float spineSpeed;

		[Token(Token = "0x4000243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform[] feet;

		[Token(Token = "0x4000244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion[] footRotations;

		[Token(Token = "0x4000245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x4000246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x4000247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 spineOffset;

		[Token(Token = "0x4000248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float lastWeight;

		[Token(Token = "0x6000786")]
		[Address(RVA = "0xF4F164", Offset = "0xF4F164", VA = "0xF4F164", Slot = "5")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AD7BC", Offset = "0x9AD7BC")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000787")]
		[Address(RVA = "0xF4F1B0", Offset = "0xF4F1B0", VA = "0xF4F1B0", Slot = "6")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AD7F4", Offset = "0x9AD7F4")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000788")]
		[Address(RVA = "0xF4F1FC", Offset = "0xF4F1FC", VA = "0xF4F1FC", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6000789")]
		[Address(RVA = "0xF4F300", Offset = "0xF4F300", VA = "0xF4F300")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x600078A")]
		[Address(RVA = "0xF4F3B0", Offset = "0xF4F3B0", VA = "0xF4F3B0")]
		private void Update()
		{
		}

		[Token(Token = "0x600078B")]
		[Address(RVA = "0xF4F464", Offset = "0xF4F464", VA = "0xF4F464")]
		private void Initiate()
		{
		}

		[Token(Token = "0x600078C")]
		[Address(RVA = "0xF4F978", Offset = "0xF4F978", VA = "0xF4F978")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600078D")]
		[Address(RVA = "0xF4F9CC", Offset = "0xF4F9CC", VA = "0xF4F9CC")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x600078E")]
		[Address(RVA = "0xF50180", Offset = "0xF50180", VA = "0xF50180")]
		private void SetLegIK(IKSolverLimb limb, int index)
		{
		}

		[Token(Token = "0x600078F")]
		[Address(RVA = "0xF502E0", Offset = "0xF502E0", VA = "0xF502E0")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x6000790")]
		[Address(RVA = "0xF50470", Offset = "0xF50470", VA = "0xF50470")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000791")]
		[Address(RVA = "0xF505E0", Offset = "0xF505E0", VA = "0xF505E0")]
		public GrounderBipedIK()
		{
		}
	}
	[Token(Token = "0x2000075")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x9A41E0", Offset = "0x9A41E0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A41E0", Offset = "0x9A41E0")]
	public class GrounderFBBIK : Grounder
	{
		[Serializable]
		[Token(Token = "0x2000192")]
		public class SpineEffector
		{
			[Token(Token = "0x40008D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8FF4", Offset = "0x9A8FF4")]
			public FullBodyBipedEffector effectorType;

			[Token(Token = "0x40008D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A902C", Offset = "0x9A902C")]
			public float horizontalWeight;

			[Token(Token = "0x40008D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A9064", Offset = "0x9A9064")]
			public float verticalWeight;

			[Token(Token = "0x6000CFE")]
			[Address(RVA = "0xF51448", Offset = "0xF51448", VA = "0xF51448")]
			public SpineEffector()
			{
			}

			[Token(Token = "0x6000CFF")]
			[Address(RVA = "0xF51458", Offset = "0xF51458", VA = "0xF51458")]
			public SpineEffector(FullBodyBipedEffector effectorType, float horizontalWeight, float verticalWeight)
			{
			}
		}

		[Token(Token = "0x4000249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A5EFC", Offset = "0x9A5EFC")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x400024A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A5F34", Offset = "0x9A5F34")]
		public float spineBend;

		[Token(Token = "0x400024B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A5F6C", Offset = "0x9A5F6C")]
		public float spineSpeed;

		[Token(Token = "0x400024C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SpineEffector[] spine;

		[Token(Token = "0x400024D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform[] feet;

		[Token(Token = "0x400024E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 spineOffset;

		[Token(Token = "0x400024F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool firstSolve;

		[Token(Token = "0x6000792")]
		[Address(RVA = "0xF50660", Offset = "0xF50660", VA = "0xF50660")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AD82C", Offset = "0x9AD82C")]
		private void OpenTutorial()
		{
		}

		[Token(Token = "0x6000793")]
		[Address(RVA = "0xF506AC", Offset = "0xF506AC", VA = "0xF506AC", Slot = "5")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AD864", Offset = "0x9AD864")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000794")]
		[Address(RVA = "0xF506F8", Offset = "0xF506F8", VA = "0xF506F8", Slot = "6")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AD89C", Offset = "0x9AD89C")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000795")]
		[Address(RVA = "0xF50744", Offset = "0xF50744", VA = "0xF50744", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6000796")]
		[Address(RVA = "0xF507C4", Offset = "0xF507C4", VA = "0xF507C4")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000797")]
		[Address(RVA = "0xF5085C", Offset = "0xF5085C", VA = "0xF5085C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000798")]
		[Address(RVA = "0xF50B18", Offset = "0xF50B18", VA = "0xF50B18")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000799")]
		[Address(RVA = "0xF50B24", Offset = "0xF50B24", VA = "0xF50B24")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600079A")]
		[Address(RVA = "0xF50918", Offset = "0xF50918", VA = "0xF50918")]
		private void Initiate()
		{
		}

		[Token(Token = "0x600079B")]
		[Address(RVA = "0xF50B30", Offset = "0xF50B30", VA = "0xF50B30")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x600079C")]
		[Address(RVA = "0xF50FD0", Offset = "0xF50FD0", VA = "0xF50FD0")]
		private void SetLegIK(IKEffector effector, Grounding.Leg leg)
		{
		}

		[Token(Token = "0x600079D")]
		[Address(RVA = "0xF51190", Offset = "0xF51190", VA = "0xF51190")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600079E")]
		[Address(RVA = "0xF512C8", Offset = "0xF512C8", VA = "0xF512C8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600079F")]
		[Address(RVA = "0xF513C8", Offset = "0xF513C8", VA = "0xF513C8")]
		public GrounderFBBIK()
		{
		}
	}
	[Token(Token = "0x2000076")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x9A4240", Offset = "0x9A4240")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4240", Offset = "0x9A4240")]
	public class GrounderIK : Grounder
	{
		[Token(Token = "0x4000250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IK[] legs;

		[Token(Token = "0x4000251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A5FA4", Offset = "0x9A5FA4")]
		public Transform pelvis;

		[Token(Token = "0x4000252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A5FDC", Offset = "0x9A5FDC")]
		public Transform characterRoot;

		[Token(Token = "0x4000253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6014", Offset = "0x9A6014")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A6014", Offset = "0x9A6014")]
		public float rootRotationWeight;

		[Token(Token = "0x4000254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6068", Offset = "0x9A6068")]
		public float rootRotationSpeed;

		[Token(Token = "0x4000255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A60A0", Offset = "0x9A60A0")]
		public float maxRootRotationAngle;

		[Token(Token = "0x4000256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform[] feet;

		[Token(Token = "0x4000257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion[] footRotations;

		[Token(Token = "0x4000258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x4000259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x400025A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int solvedFeet;

		[Token(Token = "0x400025B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool solved;

		[Token(Token = "0x400025C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float lastWeight;

		[Token(Token = "0x400025D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Rigidbody characterRootRigidbody;

		[Token(Token = "0x60007A0")]
		[Address(RVA = "0xF514A0", Offset = "0xF514A0", VA = "0xF514A0", Slot = "5")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AD8D4", Offset = "0x9AD8D4")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60007A1")]
		[Address(RVA = "0xF514EC", Offset = "0xF514EC", VA = "0xF514EC", Slot = "6")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AD90C", Offset = "0x9AD90C")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60007A2")]
		[Address(RVA = "0xF51538", Offset = "0xF51538", VA = "0xF51538", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x60007A3")]
		[Address(RVA = "0xF51550", Offset = "0xF51550", VA = "0xF51550")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x60007A4")]
		[Address(RVA = "0xF51740", Offset = "0xF51740", VA = "0xF51740")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60007A5")]
		[Address(RVA = "0xF51840", Offset = "0xF51840", VA = "0xF51840")]
		private void Update()
		{
		}

		[Token(Token = "0x60007A6")]
		[Address(RVA = "0xF51F88", Offset = "0xF51F88", VA = "0xF51F88")]
		private void Initiate()
		{
		}

		[Token(Token = "0x60007A7")]
		[Address(RVA = "0xF5236C", Offset = "0xF5236C", VA = "0xF5236C")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x60007A8")]
		[Address(RVA = "0xF525DC", Offset = "0xF525DC", VA = "0xF525DC")]
		private void SetLegIK(int index)
		{
		}

		[Token(Token = "0x60007A9")]
		[Address(RVA = "0xF528FC", Offset = "0xF528FC", VA = "0xF528FC")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x60007AA")]
		[Address(RVA = "0xF52A98", Offset = "0xF52A98", VA = "0xF52A98")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60007AB")]
		[Address(RVA = "0xF52C60", Offset = "0xF52C60", VA = "0xF52C60")]
		public GrounderIK()
		{
		}
	}
	[Token(Token = "0x2000077")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x9A42A0", Offset = "0x9A42A0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A42A0", Offset = "0x9A42A0")]
	public class GrounderQuadruped : Grounder
	{
		[Token(Token = "0x2000193")]
		public struct Foot
		{
			[Token(Token = "0x40008DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IKSolver solver;

			[Token(Token = "0x40008DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Transform transform;

			[Token(Token = "0x40008DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Quaternion rotation;

			[Token(Token = "0x40008DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Grounding.Leg leg;

			[Token(Token = "0x6000D00")]
			[Address(RVA = "0x8A8AA8", Offset = "0x8A8AA8", VA = "0x8A8AA8")]
			public Foot(IKSolver solver, Transform transform)
			{
			}
		}

		[Token(Token = "0x400025E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A60D8", Offset = "0x9A60D8")]
		public Grounding forelegSolver;

		[Token(Token = "0x400025F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6110", Offset = "0x9A6110")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A6110", Offset = "0x9A6110")]
		public float rootRotationWeight;

		[Token(Token = "0x4000260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6164", Offset = "0x9A6164")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A6164", Offset = "0x9A6164")]
		public float minRootRotation;

		[Token(Token = "0x4000261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A61BC", Offset = "0x9A61BC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A61BC", Offset = "0x9A61BC")]
		public float maxRootRotation;

		[Token(Token = "0x4000262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6214", Offset = "0x9A6214")]
		public float rootRotationSpeed;

		[Token(Token = "0x4000263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A624C", Offset = "0x9A624C")]
		public float maxLegOffset;

		[Token(Token = "0x4000264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6284", Offset = "0x9A6284")]
		public float maxForeLegOffset;

		[Token(Token = "0x4000265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A62BC", Offset = "0x9A62BC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A62BC", Offset = "0x9A62BC")]
		public float maintainHeadRotationWeight;

		[Token(Token = "0x4000266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6310", Offset = "0x9A6310")]
		public Transform characterRoot;

		[Token(Token = "0x4000267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6348", Offset = "0x9A6348")]
		public Transform pelvis;

		[Token(Token = "0x4000268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6380", Offset = "0x9A6380")]
		public Transform lastSpineBone;

		[Token(Token = "0x4000269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A63B8", Offset = "0x9A63B8")]
		public Transform head;

		[Token(Token = "0x400026A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IK[] legs;

		[Token(Token = "0x400026B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public IK[] forelegs;

		[Token(Token = "0x400026C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public Vector3 gravity;

		[Token(Token = "0x400026D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Foot[] feet;

		[Token(Token = "0x400026E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x400026F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Quaternion animatedPelvisLocalRotation;

		[Token(Token = "0x4000270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private Quaternion animatedHeadLocalRotation;

		[Token(Token = "0x4000271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x4000272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Quaternion solvedPelvisLocalRotation;

		[Token(Token = "0x4000273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Quaternion solvedHeadLocalRotation;

		[Token(Token = "0x4000274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private int solvedFeet;

		[Token(Token = "0x4000275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private bool solved;

		[Token(Token = "0x4000276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private float angle;

		[Token(Token = "0x4000277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Transform forefeetRoot;

		[Token(Token = "0x4000278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Quaternion headRotation;

		[Token(Token = "0x4000279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private float lastWeight;

		[Token(Token = "0x400027A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Rigidbody characterRootRigidbody;

		[Token(Token = "0x60007AC")]
		[Address(RVA = "0xF52CE0", Offset = "0xF52CE0", VA = "0xF52CE0", Slot = "5")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AD944", Offset = "0x9AD944")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60007AD")]
		[Address(RVA = "0xF52D2C", Offset = "0xF52D2C", VA = "0xF52D2C", Slot = "6")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AD97C", Offset = "0x9AD97C")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60007AE")]
		[Address(RVA = "0xF52D78", Offset = "0xF52D78", VA = "0xF52D78", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x60007AF")]
		[Address(RVA = "0xF52DAC", Offset = "0xF52DAC", VA = "0xF52DAC")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x60007B0")]
		[Address(RVA = "0xF52EDC", Offset = "0xF52EDC", VA = "0xF52EDC")]
		private bool IsReadyToInitiateLegs(IK[] ikComponents)
		{
			return default(bool);
		}

		[Token(Token = "0x60007B1")]
		[Address(RVA = "0xF5309C", Offset = "0xF5309C", VA = "0xF5309C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60007B2")]
		[Address(RVA = "0xF53104", Offset = "0xF53104", VA = "0xF53104")]
		private void Update()
		{
		}

		[Token(Token = "0x60007B3")]
		[Address(RVA = "0xF531BC", Offset = "0xF531BC", VA = "0xF531BC")]
		private void Initiate()
		{
		}

		[Token(Token = "0x60007B4")]
		[Address(RVA = "0xF534BC", Offset = "0xF534BC", VA = "0xF534BC")]
		private Transform[] InitiateFeet(IK[] ikComponents, ref Foot[] f, int indexOffset)
		{
			return null;
		}

		[Token(Token = "0x60007B5")]
		[Address(RVA = "0xF5381C", Offset = "0xF5381C", VA = "0xF5381C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60007B6")]
		[Address(RVA = "0xF53968", Offset = "0xF53968", VA = "0xF53968")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x60007B7")]
		[Address(RVA = "0xF53E0C", Offset = "0xF53E0C", VA = "0xF53E0C")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x60007B8")]
		[Address(RVA = "0xF545FC", Offset = "0xF545FC", VA = "0xF545FC")]
		private void UpdateForefeetRoot()
		{
		}

		[Token(Token = "0x60007B9")]
		[Address(RVA = "0xF548BC", Offset = "0xF548BC", VA = "0xF548BC")]
		private void SetFootIK(Foot foot, float maxOffset)
		{
		}

		[Token(Token = "0x60007BA")]
		[Address(RVA = "0xF54A1C", Offset = "0xF54A1C", VA = "0xF54A1C")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x60007BB")]
		[Address(RVA = "0xF54CF8", Offset = "0xF54CF8", VA = "0xF54CF8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60007BC")]
		[Address(RVA = "0xF54D30", Offset = "0xF54D30", VA = "0xF54D30")]
		private void DestroyLegs(IK[] ikComponents)
		{
		}

		[Token(Token = "0x60007BD")]
		[Address(RVA = "0xF54EF0", Offset = "0xF54EF0", VA = "0xF54EF0")]
		public GrounderQuadruped()
		{
		}
	}
	[Token(Token = "0x2000078")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x9A4300", Offset = "0x9A4300")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4300", Offset = "0x9A4300")]
	public class GrounderVRIK : Grounder
	{
		[Token(Token = "0x400027B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6400", Offset = "0x9A6400")]
		public VRIK ik;

		[Token(Token = "0x400027C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform[] feet;

		[Token(Token = "0x60007BE")]
		[Address(RVA = "0xF55008", Offset = "0xF55008", VA = "0xF55008")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AD9B4", Offset = "0x9AD9B4")]
		private void OpenTutorial()
		{
		}

		[Token(Token = "0x60007BF")]
		[Address(RVA = "0xF55054", Offset = "0xF55054", VA = "0xF55054", Slot = "5")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AD9EC", Offset = "0x9AD9EC")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60007C0")]
		[Address(RVA = "0xF550A0", Offset = "0xF550A0", VA = "0xF550A0", Slot = "6")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9ADA24", Offset = "0x9ADA24")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60007C1")]
		[Address(RVA = "0xF550EC", Offset = "0xF550EC", VA = "0xF550EC", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x60007C2")]
		[Address(RVA = "0xF55104", Offset = "0xF55104", VA = "0xF55104")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x60007C3")]
		[Address(RVA = "0xF5519C", Offset = "0xF5519C", VA = "0xF5519C")]
		private void Update()
		{
		}

		[Token(Token = "0x60007C4")]
		[Address(RVA = "0xF55250", Offset = "0xF55250", VA = "0xF55250")]
		private void Initiate()
		{
		}

		[Token(Token = "0x60007C5")]
		[Address(RVA = "0xF55450", Offset = "0xF55450", VA = "0xF55450")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x60007C6")]
		[Address(RVA = "0xF556E4", Offset = "0xF556E4", VA = "0xF556E4")]
		private void SetLegIK(IKSolverVR.PositionOffset positionOffset, Transform bone, Grounding.Leg leg)
		{
		}

		[Token(Token = "0x60007C7")]
		[Address(RVA = "0xF557EC", Offset = "0xF557EC", VA = "0xF557EC")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x60007C8")]
		[Address(RVA = "0xF559EC", Offset = "0xF559EC", VA = "0xF559EC")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60007C9")]
		[Address(RVA = "0xF55B24", Offset = "0xF55B24", VA = "0xF55B24")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60007CA")]
		[Address(RVA = "0xF55C84", Offset = "0xF55C84", VA = "0xF55C84")]
		public GrounderVRIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000079")]
	public class Grounding
	{
		[Serializable]
		[Token(Token = "0x2000194")]
		public enum Quality
		{
			[Token(Token = "0x40008DF")]
			Fastest,
			[Token(Token = "0x40008E0")]
			Simple,
			[Token(Token = "0x40008E1")]
			Best
		}

		[Token(Token = "0x2000195")]
		public class Leg
		{
			[Token(Token = "0x40008E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A909C", Offset = "0x9A909C")]
			private bool <isGrounded>k__BackingField;

			[Token(Token = "0x40008E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A90AC", Offset = "0x9A90AC")]
			private Vector3 <IKPosition>k__BackingField;

			[Token(Token = "0x40008E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Quaternion rotationOffset;

			[Token(Token = "0x40008E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A90BC", Offset = "0x9A90BC")]
			private bool <initiated>k__BackingField;

			[Token(Token = "0x40008E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A90CC", Offset = "0x9A90CC")]
			private float <heightFromGround>k__BackingField;

			[Token(Token = "0x40008E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A90DC", Offset = "0x9A90DC")]
			private Vector3 <velocity>k__BackingField;

			[Token(Token = "0x40008E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A90EC", Offset = "0x9A90EC")]
			private Transform <transform>k__BackingField;

			[Token(Token = "0x40008E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A90FC", Offset = "0x9A90FC")]
			private float <IKOffset>k__BackingField;

			[Token(Token = "0x40008EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public bool invertFootCenter;

			[Token(Token = "0x40008EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A910C", Offset = "0x9A910C")]
			private RaycastHit <heelHit>k__BackingField;

			[Token(Token = "0x40008EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A911C", Offset = "0x9A911C")]
			private RaycastHit <capsuleHit>k__BackingField;

			[Token(Token = "0x40008ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private Grounding grounding;

			[Token(Token = "0x40008EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			private float lastTime;

			[Token(Token = "0x40008EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			private float deltaTime;

			[Token(Token = "0x40008F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			private Vector3 lastPosition;

			[Token(Token = "0x40008F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			private Quaternion toHitNormal;

			[Token(Token = "0x40008F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
			private Quaternion r;

			[Token(Token = "0x40008F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
			private Vector3 up;

			[Token(Token = "0x40008F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			private bool doOverrideFootPosition;

			[Token(Token = "0x40008F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
			private Vector3 overrideFootPosition;

			[Token(Token = "0x40008F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			private Vector3 transformPosition;

			[Token(Token = "0x17000105")]
			public bool isGrounded
			{
				[Token(Token = "0x6000D01")]
				[Address(RVA = "0xF574F8", Offset = "0xF574F8", VA = "0xF574F8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF74C", Offset = "0x9AF74C")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000D02")]
				[Address(RVA = "0xF57500", Offset = "0xF57500", VA = "0xF57500")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF75C", Offset = "0x9AF75C")]
				private set
				{
				}
			}

			[Token(Token = "0x17000106")]
			public Vector3 IKPosition
			{
				[Token(Token = "0x6000D03")]
				[Address(RVA = "0xF5750C", Offset = "0xF5750C", VA = "0xF5750C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF76C", Offset = "0x9AF76C")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000D04")]
				[Address(RVA = "0xF57518", Offset = "0xF57518", VA = "0xF57518")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF77C", Offset = "0x9AF77C")]
				private set
				{
				}
			}

			[Token(Token = "0x17000107")]
			public bool initiated
			{
				[Token(Token = "0x6000D05")]
				[Address(RVA = "0xF57524", Offset = "0xF57524", VA = "0xF57524")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF78C", Offset = "0x9AF78C")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000D06")]
				[Address(RVA = "0xF5752C", Offset = "0xF5752C", VA = "0xF5752C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF79C", Offset = "0x9AF79C")]
				private set
				{
				}
			}

			[Token(Token = "0x17000108")]
			public float heightFromGround
			{
				[Token(Token = "0x6000D07")]
				[Address(RVA = "0xF57538", Offset = "0xF57538", VA = "0xF57538")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF7AC", Offset = "0x9AF7AC")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000D08")]
				[Address(RVA = "0xF57540", Offset = "0xF57540", VA = "0xF57540")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF7BC", Offset = "0x9AF7BC")]
				private set
				{
				}
			}

			[Token(Token = "0x17000109")]
			public Vector3 velocity
			{
				[Token(Token = "0x6000D09")]
				[Address(RVA = "0xF57548", Offset = "0xF57548", VA = "0xF57548")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF7CC", Offset = "0x9AF7CC")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000D0A")]
				[Address(RVA = "0xF57554", Offset = "0xF57554", VA = "0xF57554")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF7DC", Offset = "0x9AF7DC")]
				private set
				{
				}
			}

			[Token(Token = "0x1700010A")]
			public Transform transform
			{
				[Token(Token = "0x6000D0B")]
				[Address(RVA = "0xF57560", Offset = "0xF57560", VA = "0xF57560")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF7EC", Offset = "0x9AF7EC")]
				get
				{
					return null;
				}
				[Token(Token = "0x6000D0C")]
				[Address(RVA = "0xF57568", Offset = "0xF57568", VA = "0xF57568")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF7FC", Offset = "0x9AF7FC")]
				private set
				{
				}
			}

			[Token(Token = "0x1700010B")]
			public float IKOffset
			{
				[Token(Token = "0x6000D0D")]
				[Address(RVA = "0xF57570", Offset = "0xF57570", VA = "0xF57570")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF80C", Offset = "0x9AF80C")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000D0E")]
				[Address(RVA = "0xF57578", Offset = "0xF57578", VA = "0xF57578")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF81C", Offset = "0x9AF81C")]
				private set
				{
				}
			}

			[Token(Token = "0x1700010C")]
			public RaycastHit heelHit
			{
				[Token(Token = "0x6000D0F")]
				[Address(RVA = "0xF57580", Offset = "0xF57580", VA = "0xF57580")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF82C", Offset = "0x9AF82C")]
				get
				{
					return default(RaycastHit);
				}
				[Token(Token = "0x6000D10")]
				[Address(RVA = "0xF57598", Offset = "0xF57598", VA = "0xF57598")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF83C", Offset = "0x9AF83C")]
				private set
				{
				}
			}

			[Token(Token = "0x1700010D")]
			public RaycastHit capsuleHit
			{
				[Token(Token = "0x6000D11")]
				[Address(RVA = "0xF575B8", Offset = "0xF575B8", VA = "0xF575B8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF84C", Offset = "0x9AF84C")]
				get
				{
					return default(RaycastHit);
				}
				[Token(Token = "0x6000D12")]
				[Address(RVA = "0xF575D0", Offset = "0xF575D0", VA = "0xF575D0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF85C", Offset = "0x9AF85C")]
				private set
				{
				}
			}

			[Token(Token = "0x1700010E")]
			public RaycastHit GetHitPoint
			{
				[Token(Token = "0x6000D13")]
				[Address(RVA = "0xF575F0", Offset = "0xF575F0", VA = "0xF575F0")]
				get
				{
					return default(RaycastHit);
				}
			}

			[Token(Token = "0x1700010F")]
			public float stepHeightFromGround
			{
				[Token(Token = "0x6000D19")]
				[Address(RVA = "0xF583AC", Offset = "0xF583AC", VA = "0xF583AC")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000110")]
			private float rootYOffset
			{
				[Token(Token = "0x6000D22")]
				[Address(RVA = "0xF58684", Offset = "0xF58684", VA = "0xF58684")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x6000D14")]
			[Address(RVA = "0xF57638", Offset = "0xF57638", VA = "0xF57638")]
			public void SetFootPosition(Vector3 position)
			{
			}

			[Token(Token = "0x6000D15")]
			[Address(RVA = "0xF5631C", Offset = "0xF5631C", VA = "0xF5631C")]
			public void Initiate(Grounding grounding, Transform transform)
			{
			}

			[Token(Token = "0x6000D16")]
			[Address(RVA = "0xF5764C", Offset = "0xF5764C", VA = "0xF5764C")]
			public void OnEnable()
			{
			}

			[Token(Token = "0x6000D17")]
			[Address(RVA = "0xF57018", Offset = "0xF57018", VA = "0xF57018")]
			public void Reset()
			{
			}

			[Token(Token = "0x6000D18")]
			[Address(RVA = "0xF56428", Offset = "0xF56428", VA = "0xF56428")]
			public void Process()
			{
			}

			[Token(Token = "0x6000D1A")]
			[Address(RVA = "0xF57E24", Offset = "0xF57E24", VA = "0xF57E24")]
			private RaycastHit GetCapsuleHit(Vector3 offsetFromHeel)
			{
				return default(RaycastHit);
			}

			[Token(Token = "0x6000D1B")]
			[Address(RVA = "0xF57698", Offset = "0xF57698", VA = "0xF57698")]
			private RaycastHit GetRaycastHit(Vector3 offsetFromHeel)
			{
				return default(RaycastHit);
			}

			[Token(Token = "0x6000D1C")]
			[Address(RVA = "0xF5852C", Offset = "0xF5852C", VA = "0xF5852C")]
			private Vector3 RotateNormal(Vector3 normal)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000D1D")]
			[Address(RVA = "0xF57AD0", Offset = "0xF57AD0", VA = "0xF57AD0")]
			private void SetFootToPoint(Vector3 normal, Vector3 point)
			{
			}

			[Token(Token = "0x6000D1E")]
			[Address(RVA = "0xF57BD8", Offset = "0xF57BD8", VA = "0xF57BD8")]
			private void SetFootToPlane(Vector3 planeNormal, Vector3 planePoint, Vector3 heelHitPoint)
			{
			}

			[Token(Token = "0x6000D1F")]
			[Address(RVA = "0xF58628", Offset = "0xF58628", VA = "0xF58628")]
			private float GetHeightFromGround(Vector3 hitPoint)
			{
				return default(float);
			}

			[Token(Token = "0x6000D20")]
			[Address(RVA = "0xF58438", Offset = "0xF58438", VA = "0xF58438")]
			private void RotateFoot()
			{
			}

			[Token(Token = "0x6000D21")]
			[Address(RVA = "0xF587AC", Offset = "0xF587AC", VA = "0xF587AC")]
			private Quaternion GetRotationOffsetTarget()
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6000D23")]
			[Address(RVA = "0xF5626C", Offset = "0xF5626C", VA = "0xF5626C")]
			public Leg()
			{
			}
		}

		[Token(Token = "0x2000196")]
		public class Pelvis
		{
			[Token(Token = "0x40008F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A912C", Offset = "0x9A912C")]
			private Vector3 <IKOffset>k__BackingField;

			[Token(Token = "0x40008F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A913C", Offset = "0x9A913C")]
			private float <heightOffset>k__BackingField;

			[Token(Token = "0x40008F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Grounding grounding;

			[Token(Token = "0x40008FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 lastRootPosition;

			[Token(Token = "0x40008FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float damperF;

			[Token(Token = "0x40008FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private bool initiated;

			[Token(Token = "0x40008FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float lastTime;

			[Token(Token = "0x17000111")]
			public Vector3 IKOffset
			{
				[Token(Token = "0x6000D24")]
				[Address(RVA = "0xF5889C", Offset = "0xF5889C", VA = "0xF5889C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF86C", Offset = "0x9AF86C")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000D25")]
				[Address(RVA = "0xF588A8", Offset = "0xF588A8", VA = "0xF588A8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF87C", Offset = "0x9AF87C")]
				private set
				{
				}
			}

			[Token(Token = "0x17000112")]
			public float heightOffset
			{
				[Token(Token = "0x6000D26")]
				[Address(RVA = "0xF588B4", Offset = "0xF588B4", VA = "0xF588B4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF88C", Offset = "0x9AF88C")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000D27")]
				[Address(RVA = "0xF588BC", Offset = "0xF588BC", VA = "0xF588BC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF89C", Offset = "0x9AF89C")]
				private set
				{
				}
			}

			[Token(Token = "0x6000D28")]
			[Address(RVA = "0xF56400", Offset = "0xF56400", VA = "0xF56400")]
			public void Initiate(Grounding grounding)
			{
			}

			[Token(Token = "0x6000D29")]
			[Address(RVA = "0xF56F68", Offset = "0xF56F68", VA = "0xF56F68")]
			public void Reset()
			{
			}

			[Token(Token = "0x6000D2A")]
			[Address(RVA = "0xF588C4", Offset = "0xF588C4", VA = "0xF588C4")]
			public void OnEnable()
			{
			}

			[Token(Token = "0x6000D2B")]
			[Address(RVA = "0xF56CFC", Offset = "0xF56CFC", VA = "0xF56CFC")]
			public void Process(float lowestOffset, float highestOffset, bool isGrounded)
			{
			}

			[Token(Token = "0x6000D2C")]
			[Address(RVA = "0xF56314", Offset = "0xF56314", VA = "0xF56314")]
			public Pelvis()
			{
			}
		}

		[Token(Token = "0x400027D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6438", Offset = "0x9A6438")]
		public LayerMask layers;

		[Token(Token = "0x400027E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6470", Offset = "0x9A6470")]
		public float maxStep;

		[Token(Token = "0x400027F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A64A8", Offset = "0x9A64A8")]
		public float heightOffset;

		[Token(Token = "0x4000280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A64E0", Offset = "0x9A64E0")]
		public float footSpeed;

		[Token(Token = "0x4000281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6518", Offset = "0x9A6518")]
		public float footRadius;

		[Token(Token = "0x4000282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6550", Offset = "0x9A6550")]
		[HideInInspector]
		public float footCenterOffset;

		[Token(Token = "0x4000283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A659C", Offset = "0x9A659C")]
		public float prediction;

		[Token(Token = "0x4000284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A65D4", Offset = "0x9A65D4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A65D4", Offset = "0x9A65D4")]
		public float footRotationWeight;

		[Token(Token = "0x4000285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6628", Offset = "0x9A6628")]
		public float footRotationSpeed;

		[Token(Token = "0x4000286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6660", Offset = "0x9A6660")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A6660", Offset = "0x9A6660")]
		public float maxFootRotationAngle;

		[Token(Token = "0x4000287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A66B8", Offset = "0x9A66B8")]
		public bool rotateSolver;

		[Token(Token = "0x4000288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A66F0", Offset = "0x9A66F0")]
		public float pelvisSpeed;

		[Token(Token = "0x4000289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6728", Offset = "0x9A6728")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A6728", Offset = "0x9A6728")]
		public float pelvisDamper;

		[Token(Token = "0x400028A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A677C", Offset = "0x9A677C")]
		public float lowerPelvisWeight;

		[Token(Token = "0x400028B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A67B4", Offset = "0x9A67B4")]
		public float liftPelvisWeight;

		[Token(Token = "0x400028C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A67EC", Offset = "0x9A67EC")]
		public float rootSphereCastRadius;

		[Token(Token = "0x400028D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6824", Offset = "0x9A6824")]
		public bool overstepFallsDown;

		[Token(Token = "0x400028E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A685C", Offset = "0x9A685C")]
		public Quality quality;

		[Token(Token = "0x400028F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6894", Offset = "0x9A6894")]
		private Leg[] <legs>k__BackingField;

		[Token(Token = "0x4000290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A68A4", Offset = "0x9A68A4")]
		private Pelvis <pelvis>k__BackingField;

		[Token(Token = "0x4000291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A68B4", Offset = "0x9A68B4")]
		private bool <isGrounded>k__BackingField;

		[Token(Token = "0x4000292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A68C4", Offset = "0x9A68C4")]
		private Transform <root>k__BackingField;

		[Token(Token = "0x4000293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A68D4", Offset = "0x9A68D4")]
		private RaycastHit <rootHit>k__BackingField;

		[Token(Token = "0x4000294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool initiated;

		[Token(Token = "0x17000086")]
		public Leg[] legs
		{
			[Token(Token = "0x60007CB")]
			[Address(RVA = "0xF55CE0", Offset = "0xF55CE0", VA = "0xF55CE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ADA5C", Offset = "0x9ADA5C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007CC")]
			[Address(RVA = "0xF55CE8", Offset = "0xF55CE8", VA = "0xF55CE8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ADA6C", Offset = "0x9ADA6C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000087")]
		public Pelvis pelvis
		{
			[Token(Token = "0x60007CD")]
			[Address(RVA = "0xF55CF0", Offset = "0xF55CF0", VA = "0xF55CF0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ADA7C", Offset = "0x9ADA7C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007CE")]
			[Address(RVA = "0xF55CF8", Offset = "0xF55CF8", VA = "0xF55CF8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ADA8C", Offset = "0x9ADA8C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000088")]
		public bool isGrounded
		{
			[Token(Token = "0x60007CF")]
			[Address(RVA = "0xF55D00", Offset = "0xF55D00", VA = "0xF55D00")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ADA9C", Offset = "0x9ADA9C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60007D0")]
			[Address(RVA = "0xF55D08", Offset = "0xF55D08", VA = "0xF55D08")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ADAAC", Offset = "0x9ADAAC")]
			private set
			{
			}
		}

		[Token(Token = "0x17000089")]
		public Transform root
		{
			[Token(Token = "0x60007D1")]
			[Address(RVA = "0xF55D14", Offset = "0xF55D14", VA = "0xF55D14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ADABC", Offset = "0x9ADABC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007D2")]
			[Address(RVA = "0xF55D1C", Offset = "0xF55D1C", VA = "0xF55D1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ADACC", Offset = "0x9ADACC")]
			private set
			{
			}
		}

		[Token(Token = "0x1700008A")]
		public RaycastHit rootHit
		{
			[Token(Token = "0x60007D3")]
			[Address(RVA = "0xF55D24", Offset = "0xF55D24", VA = "0xF55D24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ADADC", Offset = "0x9ADADC")]
			get
			{
				return default(RaycastHit);
			}
			[Token(Token = "0x60007D4")]
			[Address(RVA = "0xF55D3C", Offset = "0xF55D3C", VA = "0xF55D3C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9ADAEC", Offset = "0x9ADAEC")]
			private set
			{
			}
		}

		[Token(Token = "0x1700008B")]
		public bool rootGrounded
		{
			[Token(Token = "0x60007D5")]
			[Address(RVA = "0xF55D5C", Offset = "0xF55D5C", VA = "0xF55D5C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700008C")]
		public Vector3 up
		{
			[Token(Token = "0x60007DD")]
			[Address(RVA = "0xF50254", Offset = "0xF50254", VA = "0xF50254")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700008D")]
		private bool useRootRotation
		{
			[Token(Token = "0x60007E0")]
			[Address(RVA = "0xF570CC", Offset = "0xF570CC", VA = "0xF570CC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60007D6")]
		[Address(RVA = "0xF55DB0", Offset = "0xF55DB0", VA = "0xF55DB0")]
		public RaycastHit GetRootHit(float maxDistanceMlp = 10f)
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x60007D7")]
		[Address(RVA = "0xF56190", Offset = "0xF56190", VA = "0xF56190")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60007D8")]
		[Address(RVA = "0xF4F718", Offset = "0xF4F718", VA = "0xF4F718")]
		public void Initiate(Transform root, Transform[] feet)
		{
		}

		[Token(Token = "0x60007D9")]
		[Address(RVA = "0xF4FF18", Offset = "0xF4FF18", VA = "0xF4FF18")]
		public void Update()
		{
		}

		[Token(Token = "0x60007DA")]
		[Address(RVA = "0xF51D70", Offset = "0xF51D70", VA = "0xF51D70")]
		public Vector3 GetLegsPlaneNormal()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007DB")]
		[Address(RVA = "0xF4F27C", Offset = "0xF4F27C", VA = "0xF4F27C")]
		public void Reset()
		{
		}

		[Token(Token = "0x60007DC")]
		[Address(RVA = "0xF56410", Offset = "0xF56410", VA = "0xF56410")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x60007DE")]
		[Address(RVA = "0xF5719C", Offset = "0xF5719C", VA = "0xF5719C")]
		public float GetVerticalOffset(Vector3 p1, Vector3 p2)
		{
			return default(float);
		}

		[Token(Token = "0x60007DF")]
		[Address(RVA = "0xF57304", Offset = "0xF57304", VA = "0xF57304")]
		public Vector3 Flatten(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007E1")]
		[Address(RVA = "0xF57408", Offset = "0xF57408", VA = "0xF57408")]
		public Vector3 GetFootCenterOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007E2")]
		[Address(RVA = "0xF4EEBC", Offset = "0xF4EEBC", VA = "0xF4EEBC")]
		public Grounding()
		{
		}
	}
	[Token(Token = "0x200007A")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x9A4360", Offset = "0x9A4360")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4360", Offset = "0x9A4360")]
	public class AimIK : IK
	{
		[Token(Token = "0x4000295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverAim solver;

		[Token(Token = "0x60007E3")]
		[Address(RVA = "0xEBC510", Offset = "0xEBC510", VA = "0xEBC510", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9ADAFC", Offset = "0x9ADAFC")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60007E4")]
		[Address(RVA = "0xEBC55C", Offset = "0xEBC55C", VA = "0xEBC55C", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9ADB34", Offset = "0x9ADB34")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60007E5")]
		[Address(RVA = "0xEBC5A8", Offset = "0xEBC5A8", VA = "0xEBC5A8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9ADB6C", Offset = "0x9ADB6C")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x60007E6")]
		[Address(RVA = "0xEBC5F4", Offset = "0xEBC5F4", VA = "0xEBC5F4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9ADBA4", Offset = "0x9ADBA4")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60007E7")]
		[Address(RVA = "0xEBC640", Offset = "0xEBC640", VA = "0xEBC640")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9ADBDC", Offset = "0x9ADBDC")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60007E8")]
		[Address(RVA = "0xEBC68C", Offset = "0xEBC68C", VA = "0xEBC68C", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60007E9")]
		[Address(RVA = "0xEBC694", Offset = "0xEBC694", VA = "0xEBC694")]
		public AimIK()
		{
		}
	}
	[Token(Token = "0x200007B")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x9A43C0", Offset = "0x9A43C0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A43C0", Offset = "0x9A43C0")]
	public class ArmIK : IK
	{
		[Token(Token = "0x4000296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverArm solver;

		[Token(Token = "0x60007EA")]
		[Address(RVA = "0xEBD144", Offset = "0xEBD144", VA = "0xEBD144", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9ADC14", Offset = "0x9ADC14")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60007EB")]
		[Address(RVA = "0xEBD190", Offset = "0xEBD190", VA = "0xEBD190", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9ADC4C", Offset = "0x9ADC4C")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60007EC")]
		[Address(RVA = "0xEBD1DC", Offset = "0xEBD1DC", VA = "0xEBD1DC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9ADC84", Offset = "0x9ADC84")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60007ED")]
		[Address(RVA = "0xEBD228", Offset = "0xEBD228", VA = "0xEBD228")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9ADCBC", Offset = "0x9ADCBC")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60007EE")]
		[Address(RVA = "0xEBD274", Offset = "0xEBD274", VA = "0xEBD274", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60007EF")]
		[Address(RVA = "0xEBD27C", Offset = "0xEBD27C", VA = "0xEBD27C")]
		public ArmIK()
		{
		}
	}
	[Token(Token = "0x200007C")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x9A4420", Offset = "0x9A4420")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4420", Offset = "0x9A4420")]
	public class CCDIK : IK
	{
		[Token(Token = "0x4000297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverCCD solver;

		[Token(Token = "0x60007F0")]
		[Address(RVA = "0xF43EF0", Offset = "0xF43EF0", VA = "0xF43EF0", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9ADCF4", Offset = "0x9ADCF4")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60007F1")]
		[Address(RVA = "0xF43F3C", Offset = "0xF43F3C", VA = "0xF43F3C", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9ADD2C", Offset = "0x9ADD2C")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60007F2")]
		[Address(RVA = "0xF43F88", Offset = "0xF43F88", VA = "0xF43F88")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9ADD64", Offset = "0x9ADD64")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60007F3")]
		[Address(RVA = "0xF43FD4", Offset = "0xF43FD4", VA = "0xF43FD4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9ADD9C", Offset = "0x9ADD9C")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60007F4")]
		[Address(RVA = "0xF44020", Offset = "0xF44020", VA = "0xF44020", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60007F5")]
		[Address(RVA = "0xF44028", Offset = "0xF44028", VA = "0xF44028")]
		public CCDIK()
		{
		}
	}
	[Token(Token = "0x200007D")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x9A4480", Offset = "0x9A4480")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4480", Offset = "0x9A4480")]
	public class FABRIK : IK
	{
		[Token(Token = "0x4000298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverFABRIK solver;

		[Token(Token = "0x60007F6")]
		[Address(RVA = "0xF44E64", Offset = "0xF44E64", VA = "0xF44E64", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9ADDD4", Offset = "0x9ADDD4")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60007F7")]
		[Address(RVA = "0xF44EB0", Offset = "0xF44EB0", VA = "0xF44EB0", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9ADE0C", Offset = "0x9ADE0C")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60007F8")]
		[Address(RVA = "0xF44EFC", Offset = "0xF44EFC", VA = "0xF44EFC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9ADE44", Offset = "0x9ADE44")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60007F9")]
		[Address(RVA = "0xF44F48", Offset = "0xF44F48", VA = "0xF44F48")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9ADE7C", Offset = "0x9ADE7C")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60007FA")]
		[Address(RVA = "0xF44F94", Offset = "0xF44F94", VA = "0xF44F94", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60007FB")]
		[Address(RVA = "0xF44F9C", Offset = "0xF44F9C", VA = "0xF44F9C")]
		public FABRIK()
		{
		}
	}
	[Token(Token = "0x200007E")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x9A44E0", Offset = "0x9A44E0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A44E0", Offset = "0x9A44E0")]
	public class FABRIKRoot : IK
	{
		[Token(Token = "0x4000299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverFABRIKRoot solver;

		[Token(Token = "0x60007FC")]
		[Address(RVA = "0xF4561C", Offset = "0xF4561C", VA = "0xF4561C", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9ADEB4", Offset = "0x9ADEB4")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60007FD")]
		[Address(RVA = "0xF45668", Offset = "0xF45668", VA = "0xF45668", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9ADEEC", Offset = "0x9ADEEC")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60007FE")]
		[Address(RVA = "0xF456B4", Offset = "0xF456B4", VA = "0xF456B4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9ADF24", Offset = "0x9ADF24")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60007FF")]
		[Address(RVA = "0xF45700", Offset = "0xF45700", VA = "0xF45700")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9ADF5C", Offset = "0x9ADF5C")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000800")]
		[Address(RVA = "0xF4574C", Offset = "0xF4574C", VA = "0xF4574C", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000801")]
		[Address(RVA = "0xF45754", Offset = "0xF45754", VA = "0xF45754")]
		public FABRIKRoot()
		{
		}
	}
	[Token(Token = "0x200007F")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x9A4540", Offset = "0x9A4540")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4540", Offset = "0x9A4540")]
	public class FullBodyBipedIK : IK
	{
		[Token(Token = "0x400029A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BipedReferences references;

		[Token(Token = "0x400029B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IKSolverFullBodyBiped solver;

		[Token(Token = "0x6000802")]
		[Address(RVA = "0xF4D90C", Offset = "0xF4D90C", VA = "0xF4D90C", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9ADF94", Offset = "0x9ADF94")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000803")]
		[Address(RVA = "0xF4D958", Offset = "0xF4D958", VA = "0xF4D958", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9ADFCC", Offset = "0x9ADFCC")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000804")]
		[Address(RVA = "0xF4D9A4", Offset = "0xF4D9A4", VA = "0xF4D9A4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE004", Offset = "0x9AE004")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x6000805")]
		[Address(RVA = "0xF4D9F0", Offset = "0xF4D9F0", VA = "0xF4D9F0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE03C", Offset = "0x9AE03C")]
		private void OpenInspectorTutorial()
		{
		}

		[Token(Token = "0x6000806")]
		[Address(RVA = "0xF4DA3C", Offset = "0xF4DA3C", VA = "0xF4DA3C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE074", Offset = "0x9AE074")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000807")]
		[Address(RVA = "0xF4DA88", Offset = "0xF4DA88", VA = "0xF4DA88")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE0AC", Offset = "0x9AE0AC")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000808")]
		[Address(RVA = "0xF4DAD4", Offset = "0xF4DAD4", VA = "0xF4DAD4")]
		public void SetReferences(BipedReferences references, Transform rootNode)
		{
		}

		[Token(Token = "0x6000809")]
		[Address(RVA = "0xF4DAF8", Offset = "0xF4DAF8", VA = "0xF4DAF8", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x600080A")]
		[Address(RVA = "0xF4DB00", Offset = "0xF4DB00", VA = "0xF4DB00")]
		public bool ReferencesError(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x600080B")]
		[Address(RVA = "0xF4DCBC", Offset = "0xF4DCBC", VA = "0xF4DCBC")]
		public bool ReferencesWarning(ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x600080C")]
		[Address(RVA = "0xF4E010", Offset = "0xF4E010", VA = "0xF4E010")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE0E4", Offset = "0x9AE0E4")]
		private void Reinitiate()
		{
		}

		[Token(Token = "0x600080D")]
		[Address(RVA = "0xF4E030", Offset = "0xF4E030", VA = "0xF4E030")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE11C", Offset = "0x9AE11C")]
		private void AutoDetectReferences()
		{
		}

		[Token(Token = "0x600080E")]
		[Address(RVA = "0xF4E10C", Offset = "0xF4E10C", VA = "0xF4E10C")]
		public FullBodyBipedIK()
		{
		}
	}
	[Token(Token = "0x2000080")]
	public abstract class IK : SolverManager
	{
		[Token(Token = "0x600080F")]
		public abstract IKSolver GetIKSolver();

		[Token(Token = "0x6000810")]
		[Address(RVA = "0x100D6EC", Offset = "0x100D6EC", VA = "0x100D6EC", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6000811")]
		[Address(RVA = "0x100D7D8", Offset = "0x100D7D8", VA = "0x100D7D8", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6000812")]
		[Address(RVA = "0x100D994", Offset = "0x100D994", VA = "0x100D994", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x6000813")]
		protected abstract void OpenUserManual();

		[Token(Token = "0x6000814")]
		protected abstract void OpenScriptReference();

		[Token(Token = "0x6000815")]
		[Address(RVA = "0x100D9F4", Offset = "0x100D9F4", VA = "0x100D9F4")]
		protected IK()
		{
		}
	}
	[Token(Token = "0x2000081")]
	public class IKExecutionOrder : MonoBehaviour
	{
		[Token(Token = "0x400029C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A68E4", Offset = "0x9A68E4")]
		public IK[] IKComponents;

		[Token(Token = "0x400029D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A691C", Offset = "0x9A691C")]
		public Animator animator;

		[Token(Token = "0x400029E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool fixedFrame;

		[Token(Token = "0x1700008E")]
		private bool animatePhysics
		{
			[Token(Token = "0x6000816")]
			[Address(RVA = "0x1010988", Offset = "0x1010988", VA = "0x1010988")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000817")]
		[Address(RVA = "0x1010A24", Offset = "0x1010A24", VA = "0x1010A24")]
		private void Start()
		{
		}

		[Token(Token = "0x6000818")]
		[Address(RVA = "0x1010A94", Offset = "0x1010A94", VA = "0x1010A94")]
		private void Update()
		{
		}

		[Token(Token = "0x6000819")]
		[Address(RVA = "0x1010B50", Offset = "0x1010B50", VA = "0x1010B50")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600081A")]
		[Address(RVA = "0x1010B8C", Offset = "0x1010B8C", VA = "0x1010B8C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600081B")]
		[Address(RVA = "0x1010AC8", Offset = "0x1010AC8", VA = "0x1010AC8")]
		private void FixTransforms()
		{
		}

		[Token(Token = "0x600081C")]
		[Address(RVA = "0x1010C18", Offset = "0x1010C18", VA = "0x1010C18")]
		public IKExecutionOrder()
		{
		}
	}
	[Token(Token = "0x2000082")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x9A45A0", Offset = "0x9A45A0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A45A0", Offset = "0x9A45A0")]
	public class LegIK : IK
	{
		[Token(Token = "0x400029F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLeg solver;

		[Token(Token = "0x600081D")]
		[Address(RVA = "0xEFB680", Offset = "0xEFB680", VA = "0xEFB680", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE154", Offset = "0x9AE154")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x600081E")]
		[Address(RVA = "0xEFB6CC", Offset = "0xEFB6CC", VA = "0xEFB6CC", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE18C", Offset = "0x9AE18C")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x600081F")]
		[Address(RVA = "0xEFB718", Offset = "0xEFB718", VA = "0xEFB718")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE1C4", Offset = "0x9AE1C4")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000820")]
		[Address(RVA = "0xEFB764", Offset = "0xEFB764", VA = "0xEFB764")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE1FC", Offset = "0x9AE1FC")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000821")]
		[Address(RVA = "0xEFB7B0", Offset = "0xEFB7B0", VA = "0xEFB7B0", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000822")]
		[Address(RVA = "0xEFB7B8", Offset = "0xEFB7B8", VA = "0xEFB7B8")]
		public LegIK()
		{
		}
	}
	[Token(Token = "0x2000083")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x9A4600", Offset = "0x9A4600")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4600", Offset = "0x9A4600")]
	public class LimbIK : IK
	{
		[Token(Token = "0x40002A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLimb solver;

		[Token(Token = "0x6000823")]
		[Address(RVA = "0xEFB820", Offset = "0xEFB820", VA = "0xEFB820", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE234", Offset = "0x9AE234")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000824")]
		[Address(RVA = "0xEFB86C", Offset = "0xEFB86C", VA = "0xEFB86C", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE26C", Offset = "0x9AE26C")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000825")]
		[Address(RVA = "0xEFB8B8", Offset = "0xEFB8B8", VA = "0xEFB8B8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE2A4", Offset = "0x9AE2A4")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000826")]
		[Address(RVA = "0xEFB904", Offset = "0xEFB904", VA = "0xEFB904")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE2DC", Offset = "0x9AE2DC")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000827")]
		[Address(RVA = "0xEFB950", Offset = "0xEFB950", VA = "0xEFB950", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000828")]
		[Address(RVA = "0xEFB958", Offset = "0xEFB958", VA = "0xEFB958")]
		public LimbIK()
		{
		}
	}
	[Token(Token = "0x2000084")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x9A4660", Offset = "0x9A4660")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4660", Offset = "0x9A4660")]
	public class LookAtIK : IK
	{
		[Token(Token = "0x40002A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLookAt solver;

		[Token(Token = "0x6000829")]
		[Address(RVA = "0xEFC814", Offset = "0xEFC814", VA = "0xEFC814", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE314", Offset = "0x9AE314")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x600082A")]
		[Address(RVA = "0xEFC860", Offset = "0xEFC860", VA = "0xEFC860", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE34C", Offset = "0x9AE34C")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x600082B")]
		[Address(RVA = "0xEFC8AC", Offset = "0xEFC8AC", VA = "0xEFC8AC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE384", Offset = "0x9AE384")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600082C")]
		[Address(RVA = "0xEFC8F8", Offset = "0xEFC8F8", VA = "0xEFC8F8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE3BC", Offset = "0x9AE3BC")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600082D")]
		[Address(RVA = "0xEFC944", Offset = "0xEFC944", VA = "0xEFC944", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x600082E")]
		[Address(RVA = "0xEFC94C", Offset = "0xEFC94C", VA = "0xEFC94C")]
		public LookAtIK()
		{
		}
	}
	[Token(Token = "0x2000085")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x9A46C0", Offset = "0x9A46C0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A46C0", Offset = "0x9A46C0")]
	public class TrigonometricIK : IK
	{
		[Token(Token = "0x40002A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverTrigonometric solver;

		[Token(Token = "0x600082F")]
		[Address(RVA = "0xF0507C", Offset = "0xF0507C", VA = "0xF0507C", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE3F4", Offset = "0x9AE3F4")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000830")]
		[Address(RVA = "0xF050C8", Offset = "0xF050C8", VA = "0xF050C8", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE42C", Offset = "0x9AE42C")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000831")]
		[Address(RVA = "0xF05114", Offset = "0xF05114", VA = "0xF05114")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE464", Offset = "0x9AE464")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000832")]
		[Address(RVA = "0xF05160", Offset = "0xF05160", VA = "0xF05160")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE49C", Offset = "0x9AE49C")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000833")]
		[Address(RVA = "0xF051AC", Offset = "0xF051AC", VA = "0xF051AC", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000834")]
		[Address(RVA = "0xF051B4", Offset = "0xF051B4", VA = "0xF051B4")]
		public TrigonometricIK()
		{
		}
	}
	[Token(Token = "0x2000086")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4720", Offset = "0x9A4720")]
	public class VRIK : IK
	{
		[Serializable]
		[Token(Token = "0x2000197")]
		public class References
		{
			[Token(Token = "0x40008FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform root;

			[Token(Token = "0x40008FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform pelvis;

			[Token(Token = "0x4000900")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform spine;

			[Token(Token = "0x4000901")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A914C", Offset = "0x9A914C")]
			public Transform chest;

			[Token(Token = "0x4000902")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A9184", Offset = "0x9A9184")]
			public Transform neck;

			[Token(Token = "0x4000903")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Transform head;

			[Token(Token = "0x4000904")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A91BC", Offset = "0x9A91BC")]
			public Transform leftShoulder;

			[Token(Token = "0x4000905")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Transform leftUpperArm;

			[Token(Token = "0x4000906")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Transform leftForearm;

			[Token(Token = "0x4000907")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Transform leftHand;

			[Token(Token = "0x4000908")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A91F4", Offset = "0x9A91F4")]
			public Transform rightShoulder;

			[Token(Token = "0x4000909")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Transform rightUpperArm;

			[Token(Token = "0x400090A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public Transform rightForearm;

			[Token(Token = "0x400090B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public Transform rightHand;

			[Token(Token = "0x400090C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A922C", Offset = "0x9A922C")]
			public Transform leftThigh;

			[Token(Token = "0x400090D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A9264", Offset = "0x9A9264")]
			public Transform leftCalf;

			[Token(Token = "0x400090E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A929C", Offset = "0x9A929C")]
			public Transform leftFoot;

			[Token(Token = "0x400090F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A92D4", Offset = "0x9A92D4")]
			public Transform leftToes;

			[Token(Token = "0x4000910")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A930C", Offset = "0x9A930C")]
			public Transform rightThigh;

			[Token(Token = "0x4000911")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A9344", Offset = "0x9A9344")]
			public Transform rightCalf;

			[Token(Token = "0x4000912")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A937C", Offset = "0x9A937C")]
			public Transform rightFoot;

			[Token(Token = "0x4000913")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A93B4", Offset = "0x9A93B4")]
			public Transform rightToes;

			[Token(Token = "0x17000113")]
			public bool isFilled
			{
				[Token(Token = "0x6000D2E")]
				[Address(RVA = "0xF066B4", Offset = "0xF066B4", VA = "0xF066B4")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000114")]
			public bool isEmpty
			{
				[Token(Token = "0x6000D2F")]
				[Address(RVA = "0xF06238", Offset = "0xF06238", VA = "0xF06238")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000D2D")]
			[Address(RVA = "0xF06D38", Offset = "0xF06D38", VA = "0xF06D38")]
			public Transform[] GetTransforms()
			{
				return null;
			}

			[Token(Token = "0x6000D30")]
			[Address(RVA = "0xF05E24", Offset = "0xF05E24", VA = "0xF05E24")]
			public static bool AutoDetectReferences(Transform root, out References references)
			{
				return default(bool);
			}

			[Token(Token = "0x6000D31")]
			[Address(RVA = "0xF06D30", Offset = "0xF06D30", VA = "0xF06D30")]
			public References()
			{
			}
		}

		[Token(Token = "0x40002A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "ContextMenuItemAttribute", RVA = "0x9A6954", Offset = "0x9A6954")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6954", Offset = "0x9A6954")]
		public References references;

		[Token(Token = "0x40002A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A69D0", Offset = "0x9A69D0")]
		public IKSolverVR solver;

		[Token(Token = "0x6000835")]
		[Address(RVA = "0xF05D18", Offset = "0xF05D18", VA = "0xF05D18", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE4D4", Offset = "0x9AE4D4")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000836")]
		[Address(RVA = "0xF05D64", Offset = "0xF05D64", VA = "0xF05D64", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE50C", Offset = "0x9AE50C")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000837")]
		[Address(RVA = "0xF05DB0", Offset = "0xF05DB0", VA = "0xF05DB0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE544", Offset = "0x9AE544")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x6000838")]
		[Address(RVA = "0xF05DFC", Offset = "0xF05DFC", VA = "0xF05DFC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE57C", Offset = "0x9AE57C")]
		public void AutoDetectReferences()
		{
		}

		[Token(Token = "0x6000839")]
		[Address(RVA = "0xF06194", Offset = "0xF06194", VA = "0xF06194")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE5B4", Offset = "0x9AE5B4")]
		public void GuessHandOrientations()
		{
		}

		[Token(Token = "0x600083A")]
		[Address(RVA = "0xF061BC", Offset = "0xF061BC", VA = "0xF061BC", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x600083B")]
		[Address(RVA = "0xF061C4", Offset = "0xF061C4", VA = "0xF061C4", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x600083C")]
		[Address(RVA = "0xF06B30", Offset = "0xF06B30", VA = "0xF06B30", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x600083D")]
		[Address(RVA = "0xF06CA8", Offset = "0xF06CA8", VA = "0xF06CA8")]
		public VRIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000087")]
	public class FABRIKChain
	{
		[Token(Token = "0x40002A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FABRIK ik;

		[Token(Token = "0x40002A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A6A08", Offset = "0x9A6A08")]
		public float pull;

		[Token(Token = "0x40002A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A6A20", Offset = "0x9A6A20")]
		public float pin;

		[Token(Token = "0x40002A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int[] children;

		[Token(Token = "0x600083E")]
		[Address(RVA = "0xF45004", Offset = "0xF45004", VA = "0xF45004")]
		public bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600083F")]
		[Address(RVA = "0xF450CC", Offset = "0xF450CC", VA = "0xF450CC")]
		public void Initiate()
		{
		}

		[Token(Token = "0x6000840")]
		[Address(RVA = "0xF450EC", Offset = "0xF450EC", VA = "0xF450EC")]
		public void Stage1(FABRIKChain[] chain)
		{
		}

		[Token(Token = "0x6000841")]
		[Address(RVA = "0xF454BC", Offset = "0xF454BC", VA = "0xF454BC")]
		public void Stage2(Vector3 rootPosition, FABRIKChain[] chain)
		{
		}

		[Token(Token = "0x6000842")]
		[Address(RVA = "0xF451C0", Offset = "0xF451C0", VA = "0xF451C0")]
		private Vector3 GetCentroid(FABRIKChain[] chain)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000843")]
		[Address(RVA = "0xF455B4", Offset = "0xF455B4", VA = "0xF455B4")]
		public FABRIKChain()
		{
		}
	}
	[Token(Token = "0x2000088")]
	public class FBBIKArmBending : MonoBehaviour
	{
		[Token(Token = "0x40002A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x40002AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 bendDirectionOffsetLeft;

		[Token(Token = "0x40002AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 bendDirectionOffsetRight;

		[Token(Token = "0x40002AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 characterSpaceBendOffsetLeft;

		[Token(Token = "0x40002AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 characterSpaceBendOffsetRight;

		[Token(Token = "0x40002AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion leftHandTargetRotation;

		[Token(Token = "0x40002AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Quaternion rightHandTargetRotation;

		[Token(Token = "0x40002B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool initiated;

		[Token(Token = "0x6000844")]
		[Address(RVA = "0xF457BC", Offset = "0xF457BC", VA = "0xF457BC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000845")]
		[Address(RVA = "0xF45D24", Offset = "0xF45D24", VA = "0xF45D24")]
		private void OnPostFBBIK()
		{
		}

		[Token(Token = "0x6000846")]
		[Address(RVA = "0xF45EE4", Offset = "0xF45EE4", VA = "0xF45EE4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000847")]
		[Address(RVA = "0xF45FDC", Offset = "0xF45FDC", VA = "0xF45FDC")]
		public FBBIKArmBending()
		{
		}
	}
	[Token(Token = "0x2000089")]
	public class FBBIKHeadEffector : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000198")]
		public class BendBone
		{
			[Token(Token = "0x4000914")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A93EC", Offset = "0x9A93EC")]
			public Transform transform;

			[Token(Token = "0x4000915")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A9424", Offset = "0x9A9424")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A9424", Offset = "0x9A9424")]
			public float weight;

			[Token(Token = "0x4000916")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private Quaternion defaultLocalRotation;

			[Token(Token = "0x6000D32")]
			[Address(RVA = "0xF4900C", Offset = "0xF4900C", VA = "0xF4900C")]
			public BendBone()
			{
			}

			[Token(Token = "0x6000D33")]
			[Address(RVA = "0xF4908C", Offset = "0xF4908C", VA = "0xF4908C")]
			public BendBone(Transform transform, float weight)
			{
			}

			[Token(Token = "0x6000D34")]
			[Address(RVA = "0xF4679C", Offset = "0xF4679C", VA = "0xF4679C")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x6000D35")]
			[Address(RVA = "0xF46BA0", Offset = "0xF46BA0", VA = "0xF46BA0")]
			public void FixTransforms()
			{
			}
		}

		[Token(Token = "0x40002B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6A38", Offset = "0x9A6A38")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x40002B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x9A6A70", Offset = "0x9A6A70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6A70", Offset = "0x9A6A70")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A6A70", Offset = "0x9A6A70")]
		public float positionWeight;

		[Token(Token = "0x40002B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6AE8", Offset = "0x9A6AE8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A6AE8", Offset = "0x9A6AE8")]
		public float bodyWeight;

		[Token(Token = "0x40002B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6B3C", Offset = "0x9A6B3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A6B3C", Offset = "0x9A6B3C")]
		public float thighWeight;

		[Token(Token = "0x40002B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6B90", Offset = "0x9A6B90")]
		public bool handsPullBody;

		[Token(Token = "0x40002B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x9A6BC8", Offset = "0x9A6BC8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6BC8", Offset = "0x9A6BC8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A6BC8", Offset = "0x9A6BC8")]
		public float rotationWeight;

		[Token(Token = "0x40002B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6C40", Offset = "0x9A6C40")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A6C40", Offset = "0x9A6C40")]
		public float bodyClampWeight;

		[Token(Token = "0x40002B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6C94", Offset = "0x9A6C94")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A6C94", Offset = "0x9A6C94")]
		public float headClampWeight;

		[Token(Token = "0x40002B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6CE8", Offset = "0x9A6CE8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A6CE8", Offset = "0x9A6CE8")]
		public float bendWeight;

		[Token(Token = "0x40002BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6D3C", Offset = "0x9A6D3C")]
		public BendBone[] bendBones;

		[Token(Token = "0x40002BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x9A6D74", Offset = "0x9A6D74")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6D74", Offset = "0x9A6D74")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A6D74", Offset = "0x9A6D74")]
		public float CCDWeight;

		[Token(Token = "0x40002BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6DEC", Offset = "0x9A6DEC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A6DEC", Offset = "0x9A6DEC")]
		public float roll;

		[Token(Token = "0x40002BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6E40", Offset = "0x9A6E40")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A6E40", Offset = "0x9A6E40")]
		public float damper;

		[Token(Token = "0x40002BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6E98", Offset = "0x9A6E98")]
		public Transform[] CCDBones;

		[Token(Token = "0x40002BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x9A6ED0", Offset = "0x9A6ED0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6ED0", Offset = "0x9A6ED0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A6ED0", Offset = "0x9A6ED0")]
		public float postStretchWeight;

		[Token(Token = "0x40002C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6F48", Offset = "0x9A6F48")]
		public float maxStretch;

		[Token(Token = "0x40002C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6F80", Offset = "0x9A6F80")]
		public float stretchDamper;

		[Token(Token = "0x40002C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6FB8", Offset = "0x9A6FB8")]
		public bool fixHead;

		[Token(Token = "0x40002C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A6FF0", Offset = "0x9A6FF0")]
		public Transform[] stretchBones;

		[Token(Token = "0x40002C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x9A7028", Offset = "0x9A7028")]
		public Vector3 chestDirection;

		[Token(Token = "0x40002C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A7060", Offset = "0x9A7060")]
		public float chestDirectionWeight;

		[Token(Token = "0x40002C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform[] chestBones;

		[Token(Token = "0x40002C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public IKSolver.UpdateDelegate OnPostHeadEffectorFK;

		[Token(Token = "0x40002C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 offset;

		[Token(Token = "0x40002C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 headToBody;

		[Token(Token = "0x40002CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 shoulderCenterToHead;

		[Token(Token = "0x40002CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Vector3 headToLeftThigh;

		[Token(Token = "0x40002CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Vector3 headToRightThigh;

		[Token(Token = "0x40002CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Vector3 leftShoulderPos;

		[Token(Token = "0x40002CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Vector3 rightShoulderPos;

		[Token(Token = "0x40002CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float shoulderDist;

		[Token(Token = "0x40002D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float leftShoulderDist;

		[Token(Token = "0x40002D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private float rightShoulderDist;

		[Token(Token = "0x40002D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Quaternion chestRotation;

		[Token(Token = "0x40002D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Quaternion headRotationRelativeToRoot;

		[Token(Token = "0x40002D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Quaternion[] ccdDefaultLocalRotations;

		[Token(Token = "0x40002D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Vector3 headLocalPosition;

		[Token(Token = "0x40002D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private Quaternion headLocalRotation;

		[Token(Token = "0x40002D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Vector3[] stretchLocalPositions;

		[Token(Token = "0x40002D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Quaternion[] stretchLocalRotations;

		[Token(Token = "0x40002D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Vector3[] chestLocalPositions;

		[Token(Token = "0x40002DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private Quaternion[] chestLocalRotations;

		[Token(Token = "0x40002DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private int bendBonesCount;

		[Token(Token = "0x40002DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private int ccdBonesCount;

		[Token(Token = "0x40002DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private int stretchBonesCount;

		[Token(Token = "0x40002DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private int chestBonesCount;

		[Token(Token = "0x6000848")]
		[Address(RVA = "0xF45FE4", Offset = "0xF45FE4", VA = "0xF45FE4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000849")]
		[Address(RVA = "0xF46314", Offset = "0xF46314", VA = "0xF46314")]
		private void OnStoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600084A")]
		[Address(RVA = "0xF467D4", Offset = "0xF467D4", VA = "0xF467D4")]
		private void OnFixTransforms()
		{
		}

		[Token(Token = "0x600084B")]
		[Address(RVA = "0xF46BC8", Offset = "0xF46BC8", VA = "0xF46BC8")]
		private void OnPreRead()
		{
		}

		[Token(Token = "0x600084C")]
		[Address(RVA = "0xF47540", Offset = "0xF47540", VA = "0xF47540")]
		private void SpineBend()
		{
		}

		[Token(Token = "0x600084D")]
		[Address(RVA = "0xF4788C", Offset = "0xF4788C", VA = "0xF4788C")]
		private void CCDPass()
		{
		}

		[Token(Token = "0x600084E")]
		[Address(RVA = "0xF47C28", Offset = "0xF47C28", VA = "0xF47C28")]
		private void Iterate(int iteration)
		{
		}

		[Token(Token = "0x600084F")]
		[Address(RVA = "0xF48694", Offset = "0xF48694", VA = "0xF48694")]
		private void OnPostUpdate()
		{
		}

		[Token(Token = "0x6000850")]
		[Address(RVA = "0xF4726C", Offset = "0xF4726C", VA = "0xF4726C")]
		private void ChestDirection()
		{
		}

		[Token(Token = "0x6000851")]
		[Address(RVA = "0xF488A4", Offset = "0xF488A4", VA = "0xF488A4")]
		private void PostStretching()
		{
		}

		[Token(Token = "0x6000852")]
		[Address(RVA = "0xF48550", Offset = "0xF48550", VA = "0xF48550")]
		private void LerpSolverPosition(IKEffector effector, Vector3 position, float weight, Vector3 offset)
		{
		}

		[Token(Token = "0x6000853")]
		[Address(RVA = "0xF483B4", Offset = "0xF483B4", VA = "0xF483B4")]
		private void Solve(ref Vector3 pos1, ref Vector3 pos2, float nominalDistance)
		{
		}

		[Token(Token = "0x6000854")]
		[Address(RVA = "0xF48C10", Offset = "0xF48C10", VA = "0xF48C10")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000855")]
		[Address(RVA = "0xF48E90", Offset = "0xF48E90", VA = "0xF48E90")]
		public FBBIKHeadEffector()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200008A")]
	public class FBIKChain
	{
		[Serializable]
		[Token(Token = "0x2000199")]
		public class ChildConstraint
		{
			[Token(Token = "0x4000917")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float pushElasticity;

			[Token(Token = "0x4000918")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float pullElasticity;

			[Token(Token = "0x4000919")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private Transform bone1;

			[Token(Token = "0x400091A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			private Transform bone2;

			[Token(Token = "0x400091B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9498", Offset = "0x9A9498")]
			private float <nominalDistance>k__BackingField;

			[Token(Token = "0x400091C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A94A8", Offset = "0x9A94A8")]
			private bool <isRigid>k__BackingField;

			[Token(Token = "0x400091D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float crossFade;

			[Token(Token = "0x400091E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float inverseCrossFade;

			[Token(Token = "0x400091F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int chain1Index;

			[Token(Token = "0x4000920")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int chain2Index;

			[Token(Token = "0x17000115")]
			public float nominalDistance
			{
				[Token(Token = "0x6000D36")]
				[Address(RVA = "0xF4BF50", Offset = "0xF4BF50", VA = "0xF4BF50")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF8AC", Offset = "0x9AF8AC")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000D37")]
				[Address(RVA = "0xF4BF58", Offset = "0xF4BF58", VA = "0xF4BF58")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF8BC", Offset = "0x9AF8BC")]
				private set
				{
				}
			}

			[Token(Token = "0x17000116")]
			public bool isRigid
			{
				[Token(Token = "0x6000D38")]
				[Address(RVA = "0xF4BF60", Offset = "0xF4BF60", VA = "0xF4BF60")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF8CC", Offset = "0x9AF8CC")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000D39")]
				[Address(RVA = "0xF4BF68", Offset = "0xF4BF68", VA = "0xF4BF68")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF8DC", Offset = "0x9AF8DC")]
				private set
				{
				}
			}

			[Token(Token = "0x6000D3A")]
			[Address(RVA = "0xF4BF74", Offset = "0xF4BF74", VA = "0xF4BF74")]
			public ChildConstraint(Transform bone1, Transform bone2, float pushElasticity = 0f, float pullElasticity = 0f)
			{
			}

			[Token(Token = "0x6000D3B")]
			[Address(RVA = "0xF49CD4", Offset = "0xF49CD4", VA = "0xF49CD4")]
			public void Initiate(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x6000D3C")]
			[Address(RVA = "0xF4A214", Offset = "0xF4A214", VA = "0xF4A214")]
			public void OnPreSolve(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x6000D3D")]
			[Address(RVA = "0xF4BC4C", Offset = "0xF4BC4C", VA = "0xF4BC4C")]
			public void Solve(IKSolverFullBody solver)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200019A")]
		public enum Smoothing
		{
			[Token(Token = "0x4000922")]
			None,
			[Token(Token = "0x4000923")]
			Exponential,
			[Token(Token = "0x4000924")]
			Cubic
		}

		[Token(Token = "0x40002DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A7078", Offset = "0x9A7078")]
		public float pin;

		[Token(Token = "0x40002E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A7090", Offset = "0x9A7090")]
		public float pull;

		[Token(Token = "0x40002E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A70A8", Offset = "0x9A70A8")]
		public float push;

		[Token(Token = "0x40002E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A70C0", Offset = "0x9A70C0")]
		public float pushParent;

		[Token(Token = "0x40002E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A70D8", Offset = "0x9A70D8")]
		public float reach;

		[Token(Token = "0x40002E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Smoothing reachSmoothing;

		[Token(Token = "0x40002E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Smoothing pushSmoothing;

		[Token(Token = "0x40002E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IKSolver.Node[] nodes;

		[Token(Token = "0x40002E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int[] children;

		[Token(Token = "0x40002E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ChildConstraint[] childConstraints;

		[Token(Token = "0x40002E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public IKConstraintBend bendConstraint;

		[Token(Token = "0x40002EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float rootLength;

		[Token(Token = "0x40002EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool initiated;

		[Token(Token = "0x40002EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float length;

		[Token(Token = "0x40002ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float distance;

		[Token(Token = "0x40002EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private IKSolver.Point p;

		[Token(Token = "0x40002EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float reachForce;

		[Token(Token = "0x40002F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float pullParentSum;

		[Token(Token = "0x40002F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float[] crossFades;

		[Token(Token = "0x40002F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float sqrMag1;

		[Token(Token = "0x40002F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float sqrMag2;

		[Token(Token = "0x40002F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float sqrMagDif;

		[Token(Token = "0x40002F5")]
		private const float maxLimbLength = 0.99999f;

		[Token(Token = "0x6000856")]
		[Address(RVA = "0xF49130", Offset = "0xF49130", VA = "0xF49130")]
		public FBIKChain()
		{
		}

		[Token(Token = "0x6000857")]
		[Address(RVA = "0xF491FC", Offset = "0xF491FC", VA = "0xF491FC")]
		public FBIKChain(float pin, float pull, params Transform[] nodeTransforms)
		{
		}

		[Token(Token = "0x6000858")]
		[Address(RVA = "0xF49308", Offset = "0xF49308", VA = "0xF49308")]
		public void SetNodes(params Transform[] boneTransforms)
		{
		}

		[Token(Token = "0x6000859")]
		[Address(RVA = "0xF4942C", Offset = "0xF4942C", VA = "0xF4942C")]
		public int GetNodeIndex(Transform boneTransform)
		{
			return default(int);
		}

		[Token(Token = "0x600085A")]
		[Address(RVA = "0xF49508", Offset = "0xF49508", VA = "0xF49508")]
		public bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600085B")]
		[Address(RVA = "0xF4960C", Offset = "0xF4960C", VA = "0xF4960C")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600085C")]
		[Address(RVA = "0xF49D2C", Offset = "0xF49D2C", VA = "0xF49D2C")]
		public void ReadPose(IKSolverFullBody solver, bool fullBody)
		{
		}

		[Token(Token = "0x600085D")]
		[Address(RVA = "0xF4979C", Offset = "0xF4979C", VA = "0xF4979C")]
		private void CalculateBoneLengths(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600085E")]
		[Address(RVA = "0xF4A418", Offset = "0xF4A418", VA = "0xF4A418")]
		public void Reach(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600085F")]
		[Address(RVA = "0xF4A7BC", Offset = "0xF4A7BC", VA = "0xF4A7BC")]
		public Vector3 Push(IKSolverFullBody solver)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000860")]
		[Address(RVA = "0xF4ABA0", Offset = "0xF4ABA0", VA = "0xF4ABA0")]
		public void SolveTrigonometric(IKSolverFullBody solver, bool calculateBendDirection = false)
		{
		}

		[Token(Token = "0x6000861")]
		[Address(RVA = "0xF4B124", Offset = "0xF4B124", VA = "0xF4B124")]
		public void Stage1(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000862")]
		[Address(RVA = "0xF4B6F4", Offset = "0xF4B6F4", VA = "0xF4B6F4")]
		public void Stage2(IKSolverFullBody solver, Vector3 position)
		{
		}

		[Token(Token = "0x6000863")]
		[Address(RVA = "0xF4B98C", Offset = "0xF4B98C", VA = "0xF4B98C")]
		public void SolveConstraintSystems(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000864")]
		[Address(RVA = "0xF4B5EC", Offset = "0xF4B5EC", VA = "0xF4B5EC")]
		private Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000865")]
		[Address(RVA = "0xF4AF0C", Offset = "0xF4AF0C", VA = "0xF4AF0C")]
		protected Vector3 GetDirToBendPoint(Vector3 direction, Vector3 bendDirection, float directionMagnitude)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000866")]
		[Address(RVA = "0xF4B574", Offset = "0xF4B574", VA = "0xF4B574")]
		private void SolveChildConstraints(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000867")]
		[Address(RVA = "0xF4BA74", Offset = "0xF4BA74", VA = "0xF4BA74")]
		private void SolveLinearConstraint(IKSolver.Node node1, IKSolver.Node node2, float crossFade, float distance)
		{
		}

		[Token(Token = "0x6000868")]
		[Address(RVA = "0xF4B494", Offset = "0xF4B494", VA = "0xF4B494")]
		public void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x6000869")]
		[Address(RVA = "0xF4B874", Offset = "0xF4B874", VA = "0xF4B874")]
		private void BackwardReach(Vector3 position)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200008B")]
	public class IKConstraintBend
	{
		[Token(Token = "0x40002F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone1;

		[Token(Token = "0x40002F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform bone2;

		[Token(Token = "0x40002F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform bone3;

		[Token(Token = "0x40002F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform bendGoal;

		[Token(Token = "0x40002FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 direction;

		[Token(Token = "0x40002FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Quaternion rotationOffset;

		[Token(Token = "0x40002FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A70F0", Offset = "0x9A70F0")]
		public float weight;

		[Token(Token = "0x40002FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3 defaultLocalDirection;

		[Token(Token = "0x40002FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Vector3 defaultChildDirection;

		[NonSerialized]
		[Token(Token = "0x40002FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float clampF;

		[Token(Token = "0x4000300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int chainIndex1;

		[Token(Token = "0x4000301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int nodeIndex1;

		[Token(Token = "0x4000302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int chainIndex2;

		[Token(Token = "0x4000303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int nodeIndex2;

		[Token(Token = "0x4000304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int chainIndex3;

		[Token(Token = "0x4000305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int nodeIndex3;

		[Token(Token = "0x4000306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7108", Offset = "0x9A7108")]
		private bool <initiated>k__BackingField;

		[Token(Token = "0x4000307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
		private bool limbOrientationsSet;

		[Token(Token = "0x1700008F")]
		public bool initiated
		{
			[Token(Token = "0x600086B")]
			[Address(RVA = "0x100DBC4", Offset = "0x100DBC4", VA = "0x100DBC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AE5EC", Offset = "0x9AE5EC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600086C")]
			[Address(RVA = "0x100DBCC", Offset = "0x100DBCC", VA = "0x100DBCC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AE5FC", Offset = "0x9AE5FC")]
			private set
			{
			}
		}

		[Token(Token = "0x600086A")]
		[Address(RVA = "0x100D9FC", Offset = "0x100D9FC", VA = "0x100D9FC")]
		public bool IsValid(IKSolverFullBody solver, Warning.Logger logger)
		{
			return default(bool);
		}

		[Token(Token = "0x600086D")]
		[Address(RVA = "0x100DBD8", Offset = "0x100DBD8", VA = "0x100DBD8")]
		public IKConstraintBend()
		{
		}

		[Token(Token = "0x600086E")]
		[Address(RVA = "0x100DC5C", Offset = "0x100DC5C", VA = "0x100DC5C")]
		public IKConstraintBend(Transform bone1, Transform bone2, Transform bone3)
		{
		}

		[Token(Token = "0x600086F")]
		[Address(RVA = "0x100DD08", Offset = "0x100DD08", VA = "0x100DD08")]
		public void SetBones(Transform bone1, Transform bone2, Transform bone3)
		{
		}

		[Token(Token = "0x6000870")]
		[Address(RVA = "0x100DD14", Offset = "0x100DD14", VA = "0x100DD14")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000871")]
		[Address(RVA = "0x100E268", Offset = "0x100E268", VA = "0x100E268")]
		public void SetLimbOrientation(Vector3 upper, Vector3 lower, Vector3 last)
		{
		}

		[Token(Token = "0x6000872")]
		[Address(RVA = "0x100E4A0", Offset = "0x100E4A0", VA = "0x100E4A0")]
		public void LimitBend(float solverWeight, float positionWeight)
		{
		}

		[Token(Token = "0x6000873")]
		[Address(RVA = "0x100E93C", Offset = "0x100E93C", VA = "0x100E93C")]
		public Vector3 GetDir(IKSolverFullBody solver)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000874")]
		[Address(RVA = "0x100E038", Offset = "0x100E038", VA = "0x100E038")]
		private Vector3 OrthoToLimb(IKSolverFullBody solver, Vector3 tangent)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000875")]
		[Address(RVA = "0x100E150", Offset = "0x100E150", VA = "0x100E150")]
		private Vector3 OrthoToBone1(IKSolverFullBody solver, Vector3 tangent)
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x200008C")]
	public class IKEffector
	{
		[Token(Token = "0x4000308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone;

		[Token(Token = "0x4000309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x400030A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A7118", Offset = "0x9A7118")]
		public float positionWeight;

		[Token(Token = "0x400030B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A7130", Offset = "0x9A7130")]
		public float rotationWeight;

		[Token(Token = "0x400030C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 position;

		[Token(Token = "0x400030D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Quaternion rotation;

		[Token(Token = "0x400030E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 positionOffset;

		[Token(Token = "0x400030F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7148", Offset = "0x9A7148")]
		private bool <isEndEffector>k__BackingField;

		[Token(Token = "0x4000310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool effectChildNodes;

		[Token(Token = "0x4000311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A7158", Offset = "0x9A7158")]
		public float maintainRelativePositionWeight;

		[Token(Token = "0x4000312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform[] childBones;

		[Token(Token = "0x4000313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform planeBone1;

		[Token(Token = "0x4000314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform planeBone2;

		[Token(Token = "0x4000315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform planeBone3;

		[Token(Token = "0x4000316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Quaternion planeRotationOffset;

		[Token(Token = "0x4000317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float posW;

		[Token(Token = "0x4000318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float rotW;

		[Token(Token = "0x4000319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3[] localPositions;

		[Token(Token = "0x400031A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool usePlaneNodes;

		[Token(Token = "0x400031B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Quaternion animatedPlaneRotation;

		[Token(Token = "0x400031C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Vector3 animatedPosition;

		[Token(Token = "0x400031D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool firstUpdate;

		[Token(Token = "0x400031E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int chainIndex;

		[Token(Token = "0x400031F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int nodeIndex;

		[Token(Token = "0x4000320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private int plane1ChainIndex;

		[Token(Token = "0x4000321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private int plane1NodeIndex;

		[Token(Token = "0x4000322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private int plane2ChainIndex;

		[Token(Token = "0x4000323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private int plane2NodeIndex;

		[Token(Token = "0x4000324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private int plane3ChainIndex;

		[Token(Token = "0x4000325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private int plane3NodeIndex;

		[Token(Token = "0x4000326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private int[] childChainIndexes;

		[Token(Token = "0x4000327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private int[] childNodeIndexes;

		[Token(Token = "0x17000090")]
		public bool isEndEffector
		{
			[Token(Token = "0x6000877")]
			[Address(RVA = "0x100EFEC", Offset = "0x100EFEC", VA = "0x100EFEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AE60C", Offset = "0x9AE60C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000878")]
			[Address(RVA = "0x100EFF4", Offset = "0x100EFF4", VA = "0x100EFF4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AE61C", Offset = "0x9AE61C")]
			private set
			{
			}
		}

		[Token(Token = "0x6000876")]
		[Address(RVA = "0x100EF84", Offset = "0x100EF84", VA = "0x100EF84")]
		public IKSolver.Node GetNode(IKSolverFullBody solver)
		{
			return null;
		}

		[Token(Token = "0x6000879")]
		[Address(RVA = "0x100F000", Offset = "0x100F000", VA = "0x100F000")]
		public void PinToBone(float positionWeight, float rotationWeight)
		{
		}

		[Token(Token = "0x600087A")]
		[Address(RVA = "0x100F0D4", Offset = "0x100F0D4", VA = "0x100F0D4")]
		public IKEffector()
		{
		}

		[Token(Token = "0x600087B")]
		[Address(RVA = "0x100F210", Offset = "0x100F210", VA = "0x100F210")]
		public IKEffector(Transform bone, Transform[] childBones)
		{
		}

		[Token(Token = "0x600087C")]
		[Address(RVA = "0x100F368", Offset = "0x100F368", VA = "0x100F368")]
		public bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600087D")]
		[Address(RVA = "0x100F658", Offset = "0x100F658", VA = "0x100F658")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600087E")]
		[Address(RVA = "0x100F8E4", Offset = "0x100F8E4", VA = "0x100F8E4")]
		public void ResetOffset(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600087F")]
		[Address(RVA = "0x100FA1C", Offset = "0x100FA1C", VA = "0x100FA1C")]
		public void SetToTarget()
		{
		}

		[Token(Token = "0x6000880")]
		[Address(RVA = "0x100FAC8", Offset = "0x100FAC8", VA = "0x100FAC8")]
		public void OnPreSolve(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000881")]
		[Address(RVA = "0x1010108", Offset = "0x1010108", VA = "0x1010108")]
		public void OnPostWrite()
		{
		}

		[Token(Token = "0x6000882")]
		[Address(RVA = "0x1010178", Offset = "0x1010178", VA = "0x1010178")]
		private Quaternion GetPlaneRotation(IKSolverFullBody solver)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000883")]
		[Address(RVA = "0x1010384", Offset = "0x1010384", VA = "0x1010384")]
		public void Update(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000884")]
		[Address(RVA = "0x10106B8", Offset = "0x10106B8", VA = "0x10106B8")]
		private Vector3 GetPosition(IKSolverFullBody solver, out Quaternion planeRotationOffset)
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x200008D")]
	public class IKMapping
	{
		[Serializable]
		[Token(Token = "0x200019B")]
		public class BoneMap
		{
			[Token(Token = "0x4000925")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x4000926")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int chainIndex;

			[Token(Token = "0x4000927")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int nodeIndex;

			[Token(Token = "0x4000928")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 defaultLocalPosition;

			[Token(Token = "0x4000929")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Quaternion defaultLocalRotation;

			[Token(Token = "0x400092A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector3 localSwingAxis;

			[Token(Token = "0x400092B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Vector3 localTwistAxis;

			[Token(Token = "0x400092C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public Vector3 planePosition;

			[Token(Token = "0x400092D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 ikPosition;

			[Token(Token = "0x400092E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public Quaternion defaultLocalTargetRotation;

			[Token(Token = "0x400092F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			private Quaternion maintainRotation;

			[Token(Token = "0x4000930")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			public float length;

			[Token(Token = "0x4000931")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public Quaternion animatedRotation;

			[Token(Token = "0x4000932")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private Transform planeBone1;

			[Token(Token = "0x4000933")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			private Transform planeBone2;

			[Token(Token = "0x4000934")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private Transform planeBone3;

			[Token(Token = "0x4000935")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			private int plane1ChainIndex;

			[Token(Token = "0x4000936")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			private int plane1NodeIndex;

			[Token(Token = "0x4000937")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			private int plane2ChainIndex;

			[Token(Token = "0x4000938")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
			private int plane2NodeIndex;

			[Token(Token = "0x4000939")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			private int plane3ChainIndex;

			[Token(Token = "0x400093A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			private int plane3NodeIndex;

			[Token(Token = "0x17000117")]
			public Vector3 swingDirection
			{
				[Token(Token = "0x6000D3F")]
				[Address(RVA = "0x1010E88", Offset = "0x1010E88", VA = "0x1010E88")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x17000118")]
			public bool isNodeBone
			{
				[Token(Token = "0x6000D42")]
				[Address(RVA = "0x1010FF4", Offset = "0x1010FF4", VA = "0x1010FF4")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000119")]
			private Quaternion lastAnimatedTargetRotation
			{
				[Token(Token = "0x6000D56")]
				[Address(RVA = "0x10115CC", Offset = "0x10115CC", VA = "0x10115CC")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x6000D3E")]
			[Address(RVA = "0x1010E60", Offset = "0x1010E60", VA = "0x1010E60")]
			public void Initiate(Transform transform, IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x6000D40")]
			[Address(RVA = "0x1010F54", Offset = "0x1010F54", VA = "0x1010F54")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x6000D41")]
			[Address(RVA = "0x1010FA4", Offset = "0x1010FA4", VA = "0x1010FA4")]
			public void FixTransform(bool position)
			{
			}

			[Token(Token = "0x6000D43")]
			[Address(RVA = "0x1011004", Offset = "0x1011004", VA = "0x1011004")]
			public void SetLength(BoneMap nextBone)
			{
			}

			[Token(Token = "0x6000D44")]
			[Address(RVA = "0x10110EC", Offset = "0x10110EC", VA = "0x10110EC")]
			public void SetLocalSwingAxis(BoneMap swingTarget)
			{
			}

			[Token(Token = "0x6000D45")]
			[Address(RVA = "0x10110F4", Offset = "0x10110F4", VA = "0x10110F4")]
			public void SetLocalSwingAxis(BoneMap bone1, BoneMap bone2)
			{
			}

			[Token(Token = "0x6000D46")]
			[Address(RVA = "0x1011284", Offset = "0x1011284", VA = "0x1011284")]
			public void SetLocalTwistAxis(Vector3 twistDirection, Vector3 normalDirection)
			{
			}

			[Token(Token = "0x6000D47")]
			[Address(RVA = "0x1011390", Offset = "0x1011390", VA = "0x1011390")]
			public void SetPlane(IKSolverFullBody solver, Transform planeBone1, Transform planeBone2, Transform planeBone3)
			{
			}

			[Token(Token = "0x6000D48")]
			[Address(RVA = "0x101141C", Offset = "0x101141C", VA = "0x101141C")]
			public void UpdatePlane(bool rotation, bool position)
			{
			}

			[Token(Token = "0x6000D49")]
			[Address(RVA = "0x10117F0", Offset = "0x10117F0", VA = "0x10117F0")]
			public void SetIKPosition()
			{
			}

			[Token(Token = "0x6000D4A")]
			[Address(RVA = "0x1011828", Offset = "0x1011828", VA = "0x1011828")]
			public void MaintainRotation()
			{
			}

			[Token(Token = "0x6000D4B")]
			[Address(RVA = "0x1011860", Offset = "0x1011860", VA = "0x1011860")]
			public void SetToIKPosition()
			{
			}

			[Token(Token = "0x6000D4C")]
			[Address(RVA = "0x1011888", Offset = "0x1011888", VA = "0x1011888")]
			public void FixToNode(IKSolverFullBody solver, float weight, [Optional] IKSolver.Node fixNode)
			{
			}

			[Token(Token = "0x6000D4D")]
			[Address(RVA = "0x10119B0", Offset = "0x10119B0", VA = "0x10119B0")]
			public Vector3 GetPlanePosition(IKSolverFullBody solver)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000D4E")]
			[Address(RVA = "0x1011CE8", Offset = "0x1011CE8", VA = "0x1011CE8")]
			public void PositionToPlane(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x6000D4F")]
			[Address(RVA = "0x1011D18", Offset = "0x1011D18", VA = "0x1011D18")]
			public void RotateToPlane(IKSolverFullBody solver, float weight)
			{
			}

			[Token(Token = "0x6000D50")]
			[Address(RVA = "0x1011EB0", Offset = "0x1011EB0", VA = "0x1011EB0")]
			public void Swing(Vector3 swingTarget, float weight)
			{
			}

			[Token(Token = "0x6000D51")]
			[Address(RVA = "0x1011F20", Offset = "0x1011F20", VA = "0x1011F20")]
			public void Swing(Vector3 pos1, Vector3 pos2, float weight)
			{
			}

			[Token(Token = "0x6000D52")]
			[Address(RVA = "0x1012164", Offset = "0x1012164", VA = "0x1012164")]
			public void Twist(Vector3 twistDirection, Vector3 normalDirection, float weight)
			{
			}

			[Token(Token = "0x6000D53")]
			[Address(RVA = "0x101238C", Offset = "0x101238C", VA = "0x101238C")]
			public void RotateToMaintain(float weight)
			{
			}

			[Token(Token = "0x6000D54")]
			[Address(RVA = "0x10124A4", Offset = "0x10124A4", VA = "0x10124A4")]
			public void RotateToEffector(IKSolverFullBody solver, float weight)
			{
			}

			[Token(Token = "0x6000D55")]
			[Address(RVA = "0x1011AF0", Offset = "0x1011AF0", VA = "0x1011AF0")]
			private Quaternion GetTargetRotation(IKSolverFullBody solver)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6000D57")]
			[Address(RVA = "0x1012634", Offset = "0x1012634", VA = "0x1012634")]
			public BoneMap()
			{
			}
		}

		[Token(Token = "0x6000885")]
		[Address(RVA = "0x1010C20", Offset = "0x1010C20", VA = "0x1010C20", Slot = "4")]
		public virtual bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000886")]
		[Address(RVA = "0x1010C28", Offset = "0x1010C28", VA = "0x1010C28", Slot = "5")]
		public virtual void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000887")]
		[Address(RVA = "0x1010C2C", Offset = "0x1010C2C", VA = "0x1010C2C")]
		protected bool BoneIsValid(Transform bone, IKSolver solver, ref string message, [Optional] Warning.Logger logger)
		{
			return default(bool);
		}

		[Token(Token = "0x6000888")]
		[Address(RVA = "0x1010D50", Offset = "0x1010D50", VA = "0x1010D50")]
		protected Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000889")]
		[Address(RVA = "0x1010E58", Offset = "0x1010E58", VA = "0x1010E58")]
		public IKMapping()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200008E")]
	public class IKMappingBone : IKMapping
	{
		[Token(Token = "0x4000328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone;

		[Token(Token = "0x4000329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A7170", Offset = "0x9A7170")]
		public float maintainRotationWeight;

		[Token(Token = "0x400032A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private BoneMap boneMap;

		[Token(Token = "0x600088A")]
		[Address(RVA = "0x1012650", Offset = "0x1012650", VA = "0x1012650", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600088B")]
		[Address(RVA = "0x10126F0", Offset = "0x10126F0", VA = "0x10126F0")]
		public IKMappingBone()
		{
		}

		[Token(Token = "0x600088C")]
		[Address(RVA = "0x1012774", Offset = "0x1012774", VA = "0x1012774")]
		public IKMappingBone(Transform bone)
		{
		}

		[Token(Token = "0x600088D")]
		[Address(RVA = "0x101280C", Offset = "0x101280C", VA = "0x101280C")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600088E")]
		[Address(RVA = "0x1012824", Offset = "0x1012824", VA = "0x1012824")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x600088F")]
		[Address(RVA = "0x1012840", Offset = "0x1012840", VA = "0x1012840", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000890")]
		[Address(RVA = "0x10128DC", Offset = "0x10128DC", VA = "0x10128DC")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x6000891")]
		[Address(RVA = "0x10128F4", Offset = "0x10128F4", VA = "0x10128F4")]
		public void WritePose(float solverWeight)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200008F")]
	public class IKMappingLimb : IKMapping
	{
		[Serializable]
		[Token(Token = "0x200019C")]
		public enum BoneMapType
		{
			[Token(Token = "0x400093C")]
			Parent,
			[Token(Token = "0x400093D")]
			Bone1,
			[Token(Token = "0x400093E")]
			Bone2,
			[Token(Token = "0x400093F")]
			Bone3
		}

		[Token(Token = "0x400032B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform parentBone;

		[Token(Token = "0x400032C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform bone1;

		[Token(Token = "0x400032D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform bone2;

		[Token(Token = "0x400032E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform bone3;

		[Token(Token = "0x400032F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A7188", Offset = "0x9A7188")]
		public float maintainRotationWeight;

		[Token(Token = "0x4000330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A71A0", Offset = "0x9A71A0")]
		public float weight;

		[NonSerialized]
		[Token(Token = "0x4000331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool updatePlaneRotations;

		[Token(Token = "0x4000332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private BoneMap boneMapParent;

		[Token(Token = "0x4000333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private BoneMap boneMap1;

		[Token(Token = "0x4000334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BoneMap boneMap2;

		[Token(Token = "0x4000335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private BoneMap boneMap3;

		[Token(Token = "0x6000892")]
		[Address(RVA = "0x1012918", Offset = "0x1012918", VA = "0x1012918", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000893")]
		[Address(RVA = "0x101299C", Offset = "0x101299C", VA = "0x101299C")]
		public BoneMap GetBoneMap(BoneMapType boneMap)
		{
			return null;
		}

		[Token(Token = "0x6000894")]
		[Address(RVA = "0x1012A70", Offset = "0x1012A70", VA = "0x1012A70")]
		public void SetLimbOrientation(Vector3 upper, Vector3 lower)
		{
		}

		[Token(Token = "0x6000895")]
		[Address(RVA = "0x1012DC4", Offset = "0x1012DC4", VA = "0x1012DC4")]
		public IKMappingLimb()
		{
		}

		[Token(Token = "0x6000896")]
		[Address(RVA = "0x1012ECC", Offset = "0x1012ECC", VA = "0x1012ECC")]
		public IKMappingLimb(Transform bone1, Transform bone2, Transform bone3, [Optional] Transform parentBone)
		{
		}

		[Token(Token = "0x6000897")]
		[Address(RVA = "0x1013000", Offset = "0x1013000", VA = "0x1013000")]
		public void SetBones(Transform bone1, Transform bone2, Transform bone3, [Optional] Transform parentBone)
		{
		}

		[Token(Token = "0x6000898")]
		[Address(RVA = "0x101300C", Offset = "0x101300C", VA = "0x101300C")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000899")]
		[Address(RVA = "0x10130B4", Offset = "0x10130B4", VA = "0x10130B4")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x600089A")]
		[Address(RVA = "0x101316C", Offset = "0x101316C", VA = "0x101316C", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600089B")]
		[Address(RVA = "0x10133DC", Offset = "0x10133DC", VA = "0x10133DC")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x600089C")]
		[Address(RVA = "0x1013494", Offset = "0x1013494", VA = "0x1013494")]
		public void WritePose(IKSolverFullBody solver, bool fullBody)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000090")]
	public class IKMappingSpine : IKMapping
	{
		[Token(Token = "0x4000336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform[] spineBones;

		[Token(Token = "0x4000337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform leftUpperArmBone;

		[Token(Token = "0x4000338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform rightUpperArmBone;

		[Token(Token = "0x4000339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftThighBone;

		[Token(Token = "0x400033A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform rightThighBone;

		[Token(Token = "0x400033B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A71B8", Offset = "0x9A71B8")]
		public int iterations;

		[Token(Token = "0x400033C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A71D0", Offset = "0x9A71D0")]
		public float twistWeight;

		[Token(Token = "0x400033D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int rootNodeIndex;

		[Token(Token = "0x400033E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private BoneMap[] spine;

		[Token(Token = "0x400033F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BoneMap leftUpperArm;

		[Token(Token = "0x4000340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private BoneMap rightUpperArm;

		[Token(Token = "0x4000341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private BoneMap leftThigh;

		[Token(Token = "0x4000342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private BoneMap rightThigh;

		[Token(Token = "0x4000343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool useFABRIK;

		[Token(Token = "0x600089D")]
		[Address(RVA = "0x10135FC", Offset = "0x10135FC", VA = "0x10135FC", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600089E")]
		[Address(RVA = "0x10138EC", Offset = "0x10138EC", VA = "0x10138EC")]
		public IKMappingSpine()
		{
		}

		[Token(Token = "0x600089F")]
		[Address(RVA = "0x1013A08", Offset = "0x1013A08", VA = "0x1013A08")]
		public IKMappingSpine(Transform[] spineBones, Transform leftUpperArmBone, Transform rightUpperArmBone, Transform leftThighBone, Transform rightThighBone)
		{
		}

		[Token(Token = "0x60008A0")]
		[Address(RVA = "0x1013B60", Offset = "0x1013B60", VA = "0x1013B60")]
		public void SetBones(Transform[] spineBones, Transform leftUpperArmBone, Transform rightUpperArmBone, Transform leftThighBone, Transform rightThighBone)
		{
		}

		[Token(Token = "0x60008A1")]
		[Address(RVA = "0x1013B70", Offset = "0x1013B70", VA = "0x1013B70")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60008A2")]
		[Address(RVA = "0x1013BD8", Offset = "0x1013BD8", VA = "0x1013BD8")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x60008A3")]
		[Address(RVA = "0x1013C58", Offset = "0x1013C58", VA = "0x1013C58", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60008A4")]
		[Address(RVA = "0x10142AC", Offset = "0x10142AC", VA = "0x10142AC")]
		private bool UseFABRIK()
		{
			return default(bool);
		}

		[Token(Token = "0x60008A5")]
		[Address(RVA = "0x10142E4", Offset = "0x10142E4", VA = "0x10142E4")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x60008A6")]
		[Address(RVA = "0x10145C4", Offset = "0x10145C4", VA = "0x10145C4")]
		public void WritePose(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60008A7")]
		[Address(RVA = "0x1014970", Offset = "0x1014970", VA = "0x1014970")]
		public void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x60008A8")]
		[Address(RVA = "0x1014A5C", Offset = "0x1014A5C", VA = "0x1014A5C")]
		private void BackwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x60008A9")]
		[Address(RVA = "0x1014B24", Offset = "0x1014B24", VA = "0x1014B24")]
		private void MapToSolverPositions(IKSolverFullBody solver)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000091")]
	public abstract class IKSolver
	{
		[Serializable]
		[Token(Token = "0x200019D")]
		public class Point
		{
			[Token(Token = "0x4000940")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x4000941")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A94B8", Offset = "0x9A94B8")]
			public float weight;

			[Token(Token = "0x4000942")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 solverPosition;

			[Token(Token = "0x4000943")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Quaternion solverRotation;

			[Token(Token = "0x4000944")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Vector3 defaultLocalPosition;

			[Token(Token = "0x4000945")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public Quaternion defaultLocalRotation;

			[Token(Token = "0x6000D58")]
			[Address(RVA = "0x1016644", Offset = "0x1016644", VA = "0x1016644")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x6000D59")]
			[Address(RVA = "0x1016694", Offset = "0x1016694", VA = "0x1016694")]
			public void FixTransform()
			{
			}

			[Token(Token = "0x6000D5A")]
			[Address(RVA = "0x101681C", Offset = "0x101681C", VA = "0x101681C")]
			public void UpdateSolverPosition()
			{
			}

			[Token(Token = "0x6000D5B")]
			[Address(RVA = "0x1016854", Offset = "0x1016854", VA = "0x1016854")]
			public void UpdateSolverLocalPosition()
			{
			}

			[Token(Token = "0x6000D5C")]
			[Address(RVA = "0x101688C", Offset = "0x101688C", VA = "0x101688C")]
			public void UpdateSolverState()
			{
			}

			[Token(Token = "0x6000D5D")]
			[Address(RVA = "0x10168DC", Offset = "0x10168DC", VA = "0x10168DC")]
			public void UpdateSolverLocalState()
			{
			}

			[Token(Token = "0x6000D5E")]
			[Address(RVA = "0x1016118", Offset = "0x1016118", VA = "0x1016118")]
			public Point()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200019E")]
		public class Bone : Point
		{
			[Token(Token = "0x4000946")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public float length;

			[Token(Token = "0x4000947")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float sqrMag;

			[Token(Token = "0x4000948")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Vector3 axis;

			[Token(Token = "0x4000949")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private RotationLimit _rotationLimit;

			[Token(Token = "0x400094A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private bool isLimited;

			[Token(Token = "0x1700011A")]
			public RotationLimit rotationLimit
			{
				[Token(Token = "0x6000D5F")]
				[Address(RVA = "0x10156E8", Offset = "0x10156E8", VA = "0x10156E8")]
				get
				{
					return null;
				}
				[Token(Token = "0x6000D60")]
				[Address(RVA = "0x10157DC", Offset = "0x10157DC", VA = "0x10157DC")]
				set
				{
				}
			}

			[Token(Token = "0x6000D61")]
			[Address(RVA = "0x1015864", Offset = "0x1015864", VA = "0x1015864")]
			public void Swing(Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x6000D62")]
			[Address(RVA = "0x1015B24", Offset = "0x1015B24", VA = "0x1015B24")]
			public static void SolverSwing(Bone[] bones, int index, Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x6000D63")]
			[Address(RVA = "0x1015E04", Offset = "0x1015E04", VA = "0x1015E04")]
			public void Swing2D(Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x6000D64")]
			[Address(RVA = "0x101606C", Offset = "0x101606C", VA = "0x101606C")]
			public void SetToSolverPosition()
			{
			}

			[Token(Token = "0x6000D65")]
			[Address(RVA = "0x1016094", Offset = "0x1016094", VA = "0x1016094")]
			public Bone()
			{
			}

			[Token(Token = "0x6000D66")]
			[Address(RVA = "0x1016198", Offset = "0x1016198", VA = "0x1016198")]
			public Bone(Transform transform)
			{
			}

			[Token(Token = "0x6000D67")]
			[Address(RVA = "0x1016230", Offset = "0x1016230", VA = "0x1016230")]
			public Bone(Transform transform, float weight)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200019F")]
		public class Node : Point
		{
			[Token(Token = "0x400094B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public float length;

			[Token(Token = "0x400094C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float effectorPositionWeight;

			[Token(Token = "0x400094D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public float effectorRotationWeight;

			[Token(Token = "0x400094E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 offset;

			[Token(Token = "0x6000D68")]
			[Address(RVA = "0x10165E0", Offset = "0x10165E0", VA = "0x10165E0")]
			public Node()
			{
			}

			[Token(Token = "0x6000D69")]
			[Address(RVA = "0x10165E4", Offset = "0x10165E4", VA = "0x10165E4")]
			public Node(Transform transform)
			{
			}

			[Token(Token = "0x6000D6A")]
			[Address(RVA = "0x101660C", Offset = "0x101660C", VA = "0x101660C")]
			public Node(Transform transform, float weight)
			{
			}
		}

		[Token(Token = "0x20001A0")]
		public delegate void UpdateDelegate();

		[Token(Token = "0x20001A1")]
		public delegate void IterationDelegate(int i);

		[Token(Token = "0x4000344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public Vector3 IKPosition;

		[Token(Token = "0x4000345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A71F8", Offset = "0x9A71F8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A71F8", Offset = "0x9A71F8")]
		public float IKPositionWeight;

		[Token(Token = "0x4000346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A724C", Offset = "0x9A724C")]
		private bool <initiated>k__BackingField;

		[Token(Token = "0x4000347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UpdateDelegate OnPreInitiate;

		[Token(Token = "0x4000348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UpdateDelegate OnPostInitiate;

		[Token(Token = "0x4000349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UpdateDelegate OnPreUpdate;

		[Token(Token = "0x400034A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UpdateDelegate OnPostUpdate;

		[Token(Token = "0x400034B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected bool firstInitiation;

		[Token(Token = "0x400034C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[HideInInspector]
		protected Transform root;

		[Token(Token = "0x17000091")]
		public bool initiated
		{
			[Token(Token = "0x60008B3")]
			[Address(RVA = "0x1015138", Offset = "0x1015138", VA = "0x1015138")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AE62C", Offset = "0x9AE62C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60008B4")]
			[Address(RVA = "0x1015140", Offset = "0x1015140", VA = "0x1015140")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AE63C", Offset = "0x9AE63C")]
			private set
			{
			}
		}

		[Token(Token = "0x60008AA")]
		[Address(RVA = "0x1014E04", Offset = "0x1014E04", VA = "0x1014E04")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x60008AB")]
		public abstract bool IsValid(ref string message);

		[Token(Token = "0x60008AC")]
		[Address(RVA = "0x100D848", Offset = "0x100D848", VA = "0x100D848")]
		public void Initiate(Transform root)
		{
		}

		[Token(Token = "0x60008AD")]
		[Address(RVA = "0x100D770", Offset = "0x100D770", VA = "0x100D770")]
		public void Update()
		{
		}

		[Token(Token = "0x60008AE")]
		[Address(RVA = "0x101508C", Offset = "0x101508C", VA = "0x101508C", Slot = "5")]
		public virtual Vector3 GetIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008AF")]
		[Address(RVA = "0x1015098", Offset = "0x1015098", VA = "0x1015098")]
		public void SetIKPosition(Vector3 position)
		{
		}

		[Token(Token = "0x60008B0")]
		[Address(RVA = "0x10150A4", Offset = "0x10150A4", VA = "0x10150A4")]
		public float GetIKPositionWeight()
		{
			return default(float);
		}

		[Token(Token = "0x60008B1")]
		[Address(RVA = "0x10150AC", Offset = "0x10150AC", VA = "0x10150AC")]
		public void SetIKPositionWeight(float weight)
		{
		}

		[Token(Token = "0x60008B2")]
		[Address(RVA = "0x1015130", Offset = "0x1015130", VA = "0x1015130")]
		public Transform GetRoot()
		{
			return null;
		}

		[Token(Token = "0x60008B5")]
		public abstract Point[] GetPoints();

		[Token(Token = "0x60008B6")]
		public abstract Point GetPoint(Transform transform);

		[Token(Token = "0x60008B7")]
		public abstract void FixTransforms();

		[Token(Token = "0x60008B8")]
		public abstract void StoreDefaultLocalState();

		[Token(Token = "0x60008B9")]
		protected abstract void OnInitiate();

		[Token(Token = "0x60008BA")]
		protected abstract void OnUpdate();

		[Token(Token = "0x60008BB")]
		[Address(RVA = "0x101514C", Offset = "0x101514C", VA = "0x101514C")]
		protected void LogWarning(string message)
		{
		}

		[Token(Token = "0x60008BC")]
		[Address(RVA = "0x1015164", Offset = "0x1015164", VA = "0x1015164")]
		public static Transform ContainsDuplicateBone(Bone[] bones)
		{
			return null;
		}

		[Token(Token = "0x60008BD")]
		[Address(RVA = "0x10152A0", Offset = "0x10152A0", VA = "0x10152A0")]
		public static bool HierarchyIsValid(Bone[] bones)
		{
			return default(bool);
		}

		[Token(Token = "0x60008BE")]
		[Address(RVA = "0x101534C", Offset = "0x101534C", VA = "0x101534C")]
		protected static float PreSolveBones(ref Bone[] bones)
		{
			return default(float);
		}

		[Token(Token = "0x60008BF")]
		[Address(RVA = "0x10156D0", Offset = "0x10156D0", VA = "0x10156D0")]
		protected IKSolver()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000092")]
	public class IKSolverAim : IKSolverHeuristic
	{
		[Token(Token = "0x400034D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform transform;

		[Token(Token = "0x400034E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Vector3 axis;

		[Token(Token = "0x400034F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public Vector3 poleAxis;

		[Token(Token = "0x4000350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Vector3 polePosition;

		[Token(Token = "0x4000351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A7294", Offset = "0x9A7294")]
		public float poleWeight;

		[Token(Token = "0x4000352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Transform poleTarget;

		[Token(Token = "0x4000353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A72AC", Offset = "0x9A72AC")]
		public float clampWeight;

		[Token(Token = "0x4000354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A72C4", Offset = "0x9A72C4")]
		public int clampSmoothing;

		[Token(Token = "0x4000355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x4000356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float step;

		[Token(Token = "0x4000357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Vector3 clampedIKPosition;

		[Token(Token = "0x4000358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private RotationLimit transformLimit;

		[Token(Token = "0x4000359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Transform lastTransform;

		[Token(Token = "0x17000092")]
		public Vector3 transformAxis
		{
			[Token(Token = "0x60008C1")]
			[Address(RVA = "0x1016A74", Offset = "0x1016A74", VA = "0x1016A74")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000093")]
		public Vector3 transformPoleAxis
		{
			[Token(Token = "0x60008C2")]
			[Address(RVA = "0x1016B40", Offset = "0x1016B40", VA = "0x1016B40")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000094")]
		protected override int minBones
		{
			[Token(Token = "0x60008C5")]
			[Address(RVA = "0x10178B0", Offset = "0x10178B0", VA = "0x10178B0", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000095")]
		protected override Vector3 localDirection
		{
			[Token(Token = "0x60008C9")]
			[Address(RVA = "0x1017E54", Offset = "0x1017E54", VA = "0x1017E54", Slot = "15")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x60008C0")]
		[Address(RVA = "0x1016974", Offset = "0x1016974", VA = "0x1016974")]
		public float GetAngle()
		{
			return default(float);
		}

		[Token(Token = "0x60008C3")]
		[Address(RVA = "0x1016C0C", Offset = "0x1016C0C", VA = "0x1016C0C", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60008C4")]
		[Address(RVA = "0x1016E8C", Offset = "0x1016E8C", VA = "0x1016E8C", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60008C6")]
		[Address(RVA = "0x10177FC", Offset = "0x10177FC", VA = "0x10177FC")]
		private void Solve()
		{
		}

		[Token(Token = "0x60008C7")]
		[Address(RVA = "0x1017424", Offset = "0x1017424", VA = "0x1017424")]
		private Vector3 GetClampedIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008C8")]
		[Address(RVA = "0x10178B8", Offset = "0x10178B8", VA = "0x10178B8")]
		private void RotateToTarget(Vector3 targetPosition, Bone bone, float weight)
		{
		}

		[Token(Token = "0x60008CA")]
		[Address(RVA = "0x1017EC8", Offset = "0x1017EC8", VA = "0x1017EC8")]
		public IKSolverAim()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000093")]
	public class IKSolverArm : IKSolver
	{
		[Token(Token = "0x400035A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A72DC", Offset = "0x9A72DC")]
		public float IKRotationWeight;

		[Token(Token = "0x400035B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Quaternion IKRotation;

		[Token(Token = "0x400035C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Point chest;

		[Token(Token = "0x400035D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Point shoulder;

		[Token(Token = "0x400035E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Point upperArm;

		[Token(Token = "0x400035F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Point forearm;

		[Token(Token = "0x4000360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Point hand;

		[Token(Token = "0x4000361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool isLeft;

		[Token(Token = "0x4000362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public IKSolverVR.Arm arm;

		[Token(Token = "0x4000363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3[] positions;

		[Token(Token = "0x4000364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Quaternion[] rotations;

		[Token(Token = "0x60008CB")]
		[Address(RVA = "0x1017FD8", Offset = "0x1017FD8", VA = "0x1017FD8", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60008CC")]
		[Address(RVA = "0x101834C", Offset = "0x101834C", VA = "0x101834C")]
		public bool SetChain(Transform chest, Transform shoulder, Transform upperArm, Transform forearm, Transform hand, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x60008CD")]
		[Address(RVA = "0x10183B8", Offset = "0x10183B8", VA = "0x10183B8", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x60008CE")]
		[Address(RVA = "0x1018514", Offset = "0x1018514", VA = "0x1018514", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60008CF")]
		[Address(RVA = "0x10186AC", Offset = "0x10186AC", VA = "0x10186AC", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60008D0")]
		[Address(RVA = "0x10186F8", Offset = "0x10186F8", VA = "0x10186F8", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x60008D1")]
		[Address(RVA = "0x1018758", Offset = "0x1018758", VA = "0x1018758", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60008D2")]
		[Address(RVA = "0x1018AC8", Offset = "0x1018AC8", VA = "0x1018AC8", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60008D3")]
		[Address(RVA = "0x1018AF4", Offset = "0x1018AF4", VA = "0x1018AF4")]
		private void Solve()
		{
		}

		[Token(Token = "0x60008D4")]
		[Address(RVA = "0x10187BC", Offset = "0x10187BC", VA = "0x10187BC")]
		private void Read()
		{
		}

		[Token(Token = "0x60008D5")]
		[Address(RVA = "0x1018B60", Offset = "0x1018B60", VA = "0x1018B60")]
		private void Write()
		{
		}

		[Token(Token = "0x60008D6")]
		[Address(RVA = "0x1018CEC", Offset = "0x1018CEC", VA = "0x1018CEC")]
		public IKSolverArm()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000094")]
	public class IKSolverCCD : IKSolverHeuristic
	{
		[Token(Token = "0x4000365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x60008D7")]
		[Address(RVA = "0x1018E3C", Offset = "0x1018E3C", VA = "0x1018E3C")]
		public void FadeOutBoneWeights()
		{
		}

		[Token(Token = "0x60008D8")]
		[Address(RVA = "0x1018EEC", Offset = "0x1018EEC", VA = "0x1018EEC", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60008D9")]
		[Address(RVA = "0x10194E0", Offset = "0x10194E0", VA = "0x10194E0", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60008DA")]
		[Address(RVA = "0x1019C30", Offset = "0x1019C30", VA = "0x1019C30")]
		protected void Solve(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x60008DB")]
		[Address(RVA = "0x101A384", Offset = "0x101A384", VA = "0x101A384")]
		public IKSolverCCD()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000095")]
	public class IKSolverFABRIK : IKSolverHeuristic
	{
		[Token(Token = "0x4000366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x4000367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool[] limitedBones;

		[Token(Token = "0x4000368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3[] solverLocalPositions;

		[Token(Token = "0x17000096")]
		protected override bool boneLengthCanBeZero
		{
			[Token(Token = "0x60008E1")]
			[Address(RVA = "0x101B5A4", Offset = "0x101B5A4", VA = "0x101B5A4", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60008DC")]
		[Address(RVA = "0x101A388", Offset = "0x101A388", VA = "0x101A388")]
		public void SolveForward(Vector3 position)
		{
		}

		[Token(Token = "0x60008DD")]
		[Address(RVA = "0x101AAD0", Offset = "0x101AAD0", VA = "0x101AAD0")]
		public void SolveBackward(Vector3 position)
		{
		}

		[Token(Token = "0x60008DE")]
		[Address(RVA = "0x101AC08", Offset = "0x101AC08", VA = "0x101AC08", Slot = "5")]
		public override Vector3 GetIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008DF")]
		[Address(RVA = "0x101ACA0", Offset = "0x101ACA0", VA = "0x101ACA0", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60008E0")]
		[Address(RVA = "0x101B244", Offset = "0x101B244", VA = "0x101B244", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60008E2")]
		[Address(RVA = "0x101B5AC", Offset = "0x101B5AC", VA = "0x101B5AC")]
		private Vector3 SolveJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008E3")]
		[Address(RVA = "0x101A45C", Offset = "0x101A45C", VA = "0x101A45C")]
		private void OnPreSolve()
		{
		}

		[Token(Token = "0x60008E4")]
		[Address(RVA = "0x101ABB4", Offset = "0x101ABB4", VA = "0x101ABB4")]
		private void OnPostSolve()
		{
		}

		[Token(Token = "0x60008E5")]
		[Address(RVA = "0x101B548", Offset = "0x101B548", VA = "0x101B548")]
		private void Solve(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x60008E6")]
		[Address(RVA = "0x101A8F8", Offset = "0x101A8F8", VA = "0x101A8F8")]
		private void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x60008E7")]
		[Address(RVA = "0x101BDEC", Offset = "0x101BDEC", VA = "0x101BDEC")]
		private void SolverMove(int index, Vector3 offset)
		{
		}

		[Token(Token = "0x60008E8")]
		[Address(RVA = "0x101BEFC", Offset = "0x101BEFC", VA = "0x101BEFC")]
		private void SolverRotate(int index, Quaternion rotation, bool recursive)
		{
		}

		[Token(Token = "0x60008E9")]
		[Address(RVA = "0x101C028", Offset = "0x101C028", VA = "0x101C028")]
		private void SolverRotateChildren(int index, Quaternion rotation)
		{
		}

		[Token(Token = "0x60008EA")]
		[Address(RVA = "0x101C140", Offset = "0x101C140", VA = "0x101C140")]
		private void SolverMoveChildrenAroundPoint(int index, Quaternion rotation)
		{
		}

		[Token(Token = "0x60008EB")]
		[Address(RVA = "0x101AFAC", Offset = "0x101AFAC", VA = "0x101AFAC")]
		private Quaternion GetParentSolverRotation(int index)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60008EC")]
		[Address(RVA = "0x101B0F8", Offset = "0x101B0F8", VA = "0x101B0F8")]
		private Vector3 GetParentSolverPosition(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008ED")]
		[Address(RVA = "0x101C32C", Offset = "0x101C32C", VA = "0x101C32C")]
		private Quaternion GetLimitedRotation(int index, Quaternion q, out bool changed)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60008EE")]
		[Address(RVA = "0x101B864", Offset = "0x101B864", VA = "0x101B864")]
		private void LimitForward(int rotateBone, int limitBone)
		{
		}

		[Token(Token = "0x60008EF")]
		[Address(RVA = "0x101ABA4", Offset = "0x101ABA4", VA = "0x101ABA4")]
		private void BackwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x60008F0")]
		[Address(RVA = "0x101CA94", Offset = "0x101CA94", VA = "0x101CA94")]
		private void BackwardReachUnlimited(Vector3 position)
		{
		}

		[Token(Token = "0x60008F1")]
		[Address(RVA = "0x101C500", Offset = "0x101C500", VA = "0x101C500")]
		private void BackwardReachLimited(Vector3 position)
		{
		}

		[Token(Token = "0x60008F2")]
		[Address(RVA = "0x101B6C4", Offset = "0x101B6C4", VA = "0x101B6C4")]
		private void MapToSolverPositions()
		{
		}

		[Token(Token = "0x60008F3")]
		[Address(RVA = "0x101B7A0", Offset = "0x101B7A0", VA = "0x101B7A0")]
		private void MapToSolverPositionsLimited()
		{
		}

		[Token(Token = "0x60008F4")]
		[Address(RVA = "0x101CB60", Offset = "0x101CB60", VA = "0x101CB60")]
		public IKSolverFABRIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000096")]
	public class IKSolverFABRIKRoot : IKSolver
	{
		[Token(Token = "0x4000369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int iterations;

		[Token(Token = "0x400036A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A72F4", Offset = "0x9A72F4")]
		public float rootPin;

		[Token(Token = "0x400036B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FABRIKChain[] chains;

		[Token(Token = "0x400036C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool zeroWeightApplied;

		[Token(Token = "0x400036D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool[] isRoot;

		[Token(Token = "0x400036E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 rootDefaultPosition;

		[Token(Token = "0x60008F5")]
		[Address(RVA = "0x101CBD4", Offset = "0x101CBD4", VA = "0x101CBD4", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F6")]
		[Address(RVA = "0x101D4A0", Offset = "0x101D4A0", VA = "0x101D4A0", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60008F7")]
		[Address(RVA = "0x101D538", Offset = "0x101D538", VA = "0x101D538", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x60008F8")]
		[Address(RVA = "0x101D5D8", Offset = "0x101D5D8", VA = "0x101D5D8", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60008F9")]
		[Address(RVA = "0x101D6D8", Offset = "0x101D6D8", VA = "0x101D6D8")]
		private bool IsRoot(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x60008FA")]
		[Address(RVA = "0x101D774", Offset = "0x101D774", VA = "0x101D774", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60008FB")]
		[Address(RVA = "0x101DCDC", Offset = "0x101DCDC", VA = "0x101DCDC", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x60008FC")]
		[Address(RVA = "0x101DEDC", Offset = "0x101DEDC", VA = "0x101DEDC", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60008FD")]
		[Address(RVA = "0x101DD8C", Offset = "0x101DD8C", VA = "0x101DD8C")]
		private void AddPointsToArray(ref Point[] array, FABRIKChain chain)
		{
		}

		[Token(Token = "0x60008FE")]
		[Address(RVA = "0x101D9A8", Offset = "0x101D9A8", VA = "0x101D9A8")]
		private Vector3 GetCentroid()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008FF")]
		[Address(RVA = "0x101DF74", Offset = "0x101DF74", VA = "0x101DF74")]
		public IKSolverFABRIKRoot()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000097")]
	public class IKSolverFullBody : IKSolver
	{
		[Token(Token = "0x400036F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A730C", Offset = "0x9A730C")]
		public int iterations;

		[Token(Token = "0x4000370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FBIKChain[] chain;

		[Token(Token = "0x4000371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public IKEffector[] effectors;

		[Token(Token = "0x4000372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public IKMappingSpine spineMapping;

		[Token(Token = "0x4000373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public IKMappingBone[] boneMappings;

		[Token(Token = "0x4000374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public IKMappingLimb[] limbMappings;

		[Token(Token = "0x4000375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool FABRIKPass;

		[Token(Token = "0x4000376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public UpdateDelegate OnPreRead;

		[Token(Token = "0x4000377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public UpdateDelegate OnPreSolve;

		[Token(Token = "0x4000378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x4000379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public IterationDelegate OnPostIteration;

		[Token(Token = "0x400037A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public UpdateDelegate OnPreBend;

		[Token(Token = "0x400037B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public UpdateDelegate OnPostSolve;

		[Token(Token = "0x400037C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public UpdateDelegate OnStoreDefaultLocalState;

		[Token(Token = "0x400037D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public UpdateDelegate OnFixTransforms;

		[Token(Token = "0x6000900")]
		[Address(RVA = "0x101DFEC", Offset = "0x101DFEC", VA = "0x101DFEC")]
		public IKEffector GetEffector(Transform t)
		{
			return null;
		}

		[Token(Token = "0x6000901")]
		[Address(RVA = "0x101E0E0", Offset = "0x101E0E0", VA = "0x101E0E0")]
		public FBIKChain GetChain(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000902")]
		[Address(RVA = "0x101E13C", Offset = "0x101E13C", VA = "0x101E13C")]
		public int GetChainIndex(Transform transform)
		{
			return default(int);
		}

		[Token(Token = "0x6000903")]
		[Address(RVA = "0x100EF28", Offset = "0x100EF28", VA = "0x100EF28")]
		public Node GetNode(int chainIndex, int nodeIndex)
		{
			return null;
		}

		[Token(Token = "0x6000904")]
		[Address(RVA = "0x100DFB8", Offset = "0x100DFB8", VA = "0x100DFB8")]
		public void GetChainAndNodeIndexes(Transform transform, out int chainIndex, out int nodeIndex)
		{
		}

		[Token(Token = "0x6000905")]
		[Address(RVA = "0x101E270", Offset = "0x101E270", VA = "0x101E270", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000906")]
		[Address(RVA = "0x101E418", Offset = "0x101E418", VA = "0x101E418", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000907")]
		[Address(RVA = "0x101E58C", Offset = "0x101E58C", VA = "0x101E58C", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000908")]
		[Address(RVA = "0x101E78C", Offset = "0x101E78C", VA = "0x101E78C", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000909")]
		[Address(RVA = "0x101E85C", Offset = "0x101E85C", VA = "0x101E85C", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x600090A")]
		[Address(RVA = "0x101E938", Offset = "0x101E938", VA = "0x101E938", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x600090B")]
		[Address(RVA = "0x101EAA8", Offset = "0x101EAA8", VA = "0x101EAA8", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x600090C")]
		[Address(RVA = "0x101EC60", Offset = "0x101EC60", VA = "0x101EC60", Slot = "12")]
		protected virtual void ReadPose()
		{
		}

		[Token(Token = "0x600090D")]
		[Address(RVA = "0x101EE9C", Offset = "0x101EE9C", VA = "0x101EE9C", Slot = "13")]
		protected virtual void Solve()
		{
		}

		[Token(Token = "0x600090E")]
		[Address(RVA = "0x101F15C", Offset = "0x101F15C", VA = "0x101F15C", Slot = "14")]
		protected virtual void ApplyBendConstraints()
		{
		}

		[Token(Token = "0x600090F")]
		[Address(RVA = "0x101F1A0", Offset = "0x101F1A0", VA = "0x101F1A0", Slot = "15")]
		protected virtual void WritePose()
		{
		}

		[Token(Token = "0x6000910")]
		[Address(RVA = "0x101F284", Offset = "0x101F284", VA = "0x101F284")]
		public IKSolverFullBody()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000098")]
	public enum FullBodyBipedEffector
	{
		[Token(Token = "0x400037F")]
		Body,
		[Token(Token = "0x4000380")]
		LeftShoulder,
		[Token(Token = "0x4000381")]
		RightShoulder,
		[Token(Token = "0x4000382")]
		LeftThigh,
		[Token(Token = "0x4000383")]
		RightThigh,
		[Token(Token = "0x4000384")]
		LeftHand,
		[Token(Token = "0x4000385")]
		RightHand,
		[Token(Token = "0x4000386")]
		LeftFoot,
		[Token(Token = "0x4000387")]
		RightFoot
	}
	[Serializable]
	[Token(Token = "0x2000099")]
	public enum FullBodyBipedChain
	{
		[Token(Token = "0x4000389")]
		LeftArm,
		[Token(Token = "0x400038A")]
		RightArm,
		[Token(Token = "0x400038B")]
		LeftLeg,
		[Token(Token = "0x400038C")]
		RightLeg
	}
	[Serializable]
	[Token(Token = "0x200009A")]
	public class IKSolverFullBodyBiped : IKSolverFullBody
	{
		[Token(Token = "0x400038D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Transform rootNode;

		[Token(Token = "0x400038E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A7324", Offset = "0x9A7324")]
		public float spineStiffness;

		[Token(Token = "0x400038F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A733C", Offset = "0x9A733C")]
		public float pullBodyVertical;

		[Token(Token = "0x4000390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A7354", Offset = "0x9A7354")]
		public float pullBodyHorizontal;

		[Token(Token = "0x4000391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A736C", Offset = "0x9A736C")]
		private Vector3 <pullBodyOffset>k__BackingField;

		[Token(Token = "0x4000392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Vector3 offset;

		[Token(Token = "0x17000097")]
		public IKEffector bodyEffector
		{
			[Token(Token = "0x6000911")]
			[Address(RVA = "0x101F364", Offset = "0x101F364", VA = "0x101F364")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000098")]
		public IKEffector leftShoulderEffector
		{
			[Token(Token = "0x6000912")]
			[Address(RVA = "0x101F4AC", Offset = "0x101F4AC", VA = "0x101F4AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000099")]
		public IKEffector rightShoulderEffector
		{
			[Token(Token = "0x6000913")]
			[Address(RVA = "0x101F4B4", Offset = "0x101F4B4", VA = "0x101F4B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009A")]
		public IKEffector leftThighEffector
		{
			[Token(Token = "0x6000914")]
			[Address(RVA = "0x101F4BC", Offset = "0x101F4BC", VA = "0x101F4BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009B")]
		public IKEffector rightThighEffector
		{
			[Token(Token = "0x6000915")]
			[Address(RVA = "0x101F4C4", Offset = "0x101F4C4", VA = "0x101F4C4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009C")]
		public IKEffector leftHandEffector
		{
			[Token(Token = "0x6000916")]
			[Address(RVA = "0x101F4CC", Offset = "0x101F4CC", VA = "0x101F4CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009D")]
		public IKEffector rightHandEffector
		{
			[Token(Token = "0x6000917")]
			[Address(RVA = "0x101F4D4", Offset = "0x101F4D4", VA = "0x101F4D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009E")]
		public IKEffector leftFootEffector
		{
			[Token(Token = "0x6000918")]
			[Address(RVA = "0x101F4DC", Offset = "0x101F4DC", VA = "0x101F4DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009F")]
		public IKEffector rightFootEffector
		{
			[Token(Token = "0x6000919")]
			[Address(RVA = "0x101F4E4", Offset = "0x101F4E4", VA = "0x101F4E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A0")]
		public FBIKChain leftArmChain
		{
			[Token(Token = "0x600091A")]
			[Address(RVA = "0x101F4EC", Offset = "0x101F4EC", VA = "0x101F4EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A1")]
		public FBIKChain rightArmChain
		{
			[Token(Token = "0x600091B")]
			[Address(RVA = "0x101F524", Offset = "0x101F524", VA = "0x101F524")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A2")]
		public FBIKChain leftLegChain
		{
			[Token(Token = "0x600091C")]
			[Address(RVA = "0x101F55C", Offset = "0x101F55C", VA = "0x101F55C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A3")]
		public FBIKChain rightLegChain
		{
			[Token(Token = "0x600091D")]
			[Address(RVA = "0x101F594", Offset = "0x101F594", VA = "0x101F594")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A4")]
		public IKMappingLimb leftArmMapping
		{
			[Token(Token = "0x600091E")]
			[Address(RVA = "0x101F5CC", Offset = "0x101F5CC", VA = "0x101F5CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A5")]
		public IKMappingLimb rightArmMapping
		{
			[Token(Token = "0x600091F")]
			[Address(RVA = "0x101F600", Offset = "0x101F600", VA = "0x101F600")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A6")]
		public IKMappingLimb leftLegMapping
		{
			[Token(Token = "0x6000920")]
			[Address(RVA = "0x101F638", Offset = "0x101F638", VA = "0x101F638")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A7")]
		public IKMappingLimb rightLegMapping
		{
			[Token(Token = "0x6000921")]
			[Address(RVA = "0x101F670", Offset = "0x101F670", VA = "0x101F670")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A8")]
		public IKMappingBone headMapping
		{
			[Token(Token = "0x6000922")]
			[Address(RVA = "0x101F6A8", Offset = "0x101F6A8", VA = "0x101F6A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A9")]
		public Vector3 pullBodyOffset
		{
			[Token(Token = "0x6000932")]
			[Address(RVA = "0x10215F8", Offset = "0x10215F8", VA = "0x10215F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AE64C", Offset = "0x9AE64C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000933")]
			[Address(RVA = "0x1021604", Offset = "0x1021604", VA = "0x1021604")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AE65C", Offset = "0x9AE65C")]
			private set
			{
			}
		}

		[Token(Token = "0x6000923")]
		[Address(RVA = "0x101F6DC", Offset = "0x101F6DC", VA = "0x101F6DC")]
		public void SetChainWeights(FullBodyBipedChain c, float pull, float reach = 0f)
		{
		}

		[Token(Token = "0x6000924")]
		[Address(RVA = "0x101F7E8", Offset = "0x101F7E8", VA = "0x101F7E8")]
		public void SetEffectorWeights(FullBodyBipedEffector effector, float positionWeight, float rotationWeight)
		{
		}

		[Token(Token = "0x6000925")]
		[Address(RVA = "0x101F730", Offset = "0x101F730", VA = "0x101F730")]
		public FBIKChain GetChain(FullBodyBipedChain c)
		{
			return null;
		}

		[Token(Token = "0x6000926")]
		[Address(RVA = "0x101F8C4", Offset = "0x101F8C4", VA = "0x101F8C4")]
		public FBIKChain GetChain(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x6000927")]
		[Address(RVA = "0x101F36C", Offset = "0x101F36C", VA = "0x101F36C")]
		public IKEffector GetEffector(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x6000928")]
		[Address(RVA = "0x101F994", Offset = "0x101F994", VA = "0x101F994")]
		public IKEffector GetEndEffector(FullBodyBipedChain c)
		{
			return null;
		}

		[Token(Token = "0x6000929")]
		[Address(RVA = "0x101FA4C", Offset = "0x101FA4C", VA = "0x101FA4C")]
		public IKMappingLimb GetLimbMapping(FullBodyBipedChain chain)
		{
			return null;
		}

		[Token(Token = "0x600092A")]
		[Address(RVA = "0x101FB00", Offset = "0x101FB00", VA = "0x101FB00")]
		public IKMappingLimb GetLimbMapping(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x600092B")]
		[Address(RVA = "0x101FBB4", Offset = "0x101FBB4", VA = "0x101FBB4")]
		public IKMappingSpine GetSpineMapping()
		{
			return null;
		}

		[Token(Token = "0x600092C")]
		[Address(RVA = "0x101FBBC", Offset = "0x101FBBC", VA = "0x101FBBC")]
		public IKMappingBone GetHeadMapping()
		{
			return null;
		}

		[Token(Token = "0x600092D")]
		[Address(RVA = "0x101FBF0", Offset = "0x101FBF0", VA = "0x101FBF0")]
		public IKConstraintBend GetBendConstraint(FullBodyBipedChain limb)
		{
			return null;
		}

		[Token(Token = "0x600092E")]
		[Address(RVA = "0x101FCB8", Offset = "0x101FCB8", VA = "0x101FCB8", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600092F")]
		[Address(RVA = "0x101FE48", Offset = "0x101FE48", VA = "0x101FE48")]
		public void SetToReferences(BipedReferences references, [Optional] Transform rootNode)
		{
		}

		[Token(Token = "0x6000930")]
		[Address(RVA = "0x1020F1C", Offset = "0x1020F1C", VA = "0x1020F1C")]
		public static Transform DetectRootNodeBone(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x6000931")]
		[Address(RVA = "0x10213B0", Offset = "0x10213B0", VA = "0x10213B0")]
		public void SetLimbOrientations(BipedLimbOrientations o)
		{
		}

		[Token(Token = "0x6000934")]
		[Address(RVA = "0x1021410", Offset = "0x1021410", VA = "0x1021410")]
		private void SetLimbOrientation(FullBodyBipedChain chain, BipedLimbOrientations.LimbOrientation limbOrientation)
		{
		}

		[Token(Token = "0x6000935")]
		[Address(RVA = "0x1021230", Offset = "0x1021230", VA = "0x1021230")]
		private static Transform GetLeftClavicle(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x6000936")]
		[Address(RVA = "0x10212F0", Offset = "0x10212F0", VA = "0x10212F0")]
		private static Transform GetRightClavicle(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x6000937")]
		[Address(RVA = "0x1021610", Offset = "0x1021610", VA = "0x1021610")]
		private static bool Contains(Transform[] array, Transform transform)
		{
			return default(bool);
		}

		[Token(Token = "0x6000938")]
		[Address(RVA = "0x10216EC", Offset = "0x10216EC", VA = "0x10216EC", Slot = "12")]
		protected override void ReadPose()
		{
		}

		[Token(Token = "0x6000939")]
		[Address(RVA = "0x1021830", Offset = "0x1021830", VA = "0x1021830")]
		private void PullBody()
		{
		}

		[Token(Token = "0x600093A")]
		[Address(RVA = "0x10219C0", Offset = "0x10219C0", VA = "0x10219C0")]
		private Vector3 GetBodyOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600093B")]
		[Address(RVA = "0x1021BC0", Offset = "0x1021BC0", VA = "0x1021BC0")]
		private Vector3 GetHandBodyPull(IKEffector effector, FBIKChain arm, Vector3 offset)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600093C")]
		[Address(RVA = "0x1021DC0", Offset = "0x1021DC0", VA = "0x1021DC0", Slot = "14")]
		protected override void ApplyBendConstraints()
		{
		}

		[Token(Token = "0x600093D")]
		[Address(RVA = "0x10220F0", Offset = "0x10220F0", VA = "0x10220F0", Slot = "15")]
		protected override void WritePose()
		{
		}

		[Token(Token = "0x600093E")]
		[Address(RVA = "0x10221F0", Offset = "0x10221F0", VA = "0x10221F0")]
		public IKSolverFullBodyBiped()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200009B")]
	public class IKSolverHeuristic : IKSolver
	{
		[Token(Token = "0x4000393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x4000394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float tolerance;

		[Token(Token = "0x4000395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int maxIterations;

		[Token(Token = "0x4000396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool useRotationLimits;

		[Token(Token = "0x4000397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool XY;

		[Token(Token = "0x4000398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Bone[] bones;

		[Token(Token = "0x4000399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Vector3 lastLocalDirection;

		[Token(Token = "0x400039A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected float chainLength;

		[Token(Token = "0x170000AA")]
		protected virtual int minBones
		{
			[Token(Token = "0x6000946")]
			[Address(RVA = "0x1022A28", Offset = "0x1022A28", VA = "0x1022A28", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000AB")]
		protected virtual bool boneLengthCanBeZero
		{
			[Token(Token = "0x6000947")]
			[Address(RVA = "0x1022A30", Offset = "0x1022A30", VA = "0x1022A30", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000AC")]
		protected virtual bool allowCommonParent
		{
			[Token(Token = "0x6000948")]
			[Address(RVA = "0x1022A38", Offset = "0x1022A38", VA = "0x1022A38", Slot = "14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000AD")]
		protected virtual Vector3 localDirection
		{
			[Token(Token = "0x600094C")]
			[Address(RVA = "0x1022A48", Offset = "0x1022A48", VA = "0x1022A48", Slot = "15")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000AE")]
		protected float positionOffset
		{
			[Token(Token = "0x600094D")]
			[Address(RVA = "0x1019B6C", Offset = "0x1019B6C", VA = "0x1019B6C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600093F")]
		[Address(RVA = "0x10221FC", Offset = "0x10221FC", VA = "0x10221FC")]
		public bool SetChain(Transform[] hierarchy, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x6000940")]
		[Address(RVA = "0x1022388", Offset = "0x1022388", VA = "0x1022388")]
		public void AddBone(Transform bone)
		{
		}

		[Token(Token = "0x6000941")]
		[Address(RVA = "0x10224C4", Offset = "0x10224C4", VA = "0x10224C4", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000942")]
		[Address(RVA = "0x102252C", Offset = "0x102252C", VA = "0x102252C", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6000943")]
		[Address(RVA = "0x10225A8", Offset = "0x10225A8", VA = "0x10225A8", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000944")]
		[Address(RVA = "0x102292C", Offset = "0x102292C", VA = "0x102292C", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000945")]
		[Address(RVA = "0x1022934", Offset = "0x1022934", VA = "0x1022934", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000949")]
		[Address(RVA = "0x1022A40", Offset = "0x1022A40", VA = "0x1022A40", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x600094A")]
		[Address(RVA = "0x1022A44", Offset = "0x1022A44", VA = "0x1022A44", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x600094B")]
		[Address(RVA = "0x1018F6C", Offset = "0x1018F6C", VA = "0x1018F6C")]
		protected void InitiateBones()
		{
		}

		[Token(Token = "0x600094E")]
		[Address(RVA = "0x10197D4", Offset = "0x10197D4", VA = "0x10197D4")]
		protected Vector3 GetSingularityOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600094F")]
		[Address(RVA = "0x1022B7C", Offset = "0x1022B7C", VA = "0x1022B7C")]
		private bool SingularityDetected()
		{
			return default(bool);
		}

		[Token(Token = "0x6000950")]
		[Address(RVA = "0x1017F5C", Offset = "0x1017F5C", VA = "0x1017F5C")]
		public IKSolverHeuristic()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200009C")]
	public class IKSolverLeg : IKSolver
	{
		[Token(Token = "0x400039B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A737C", Offset = "0x9A737C")]
		public float IKRotationWeight;

		[Token(Token = "0x400039C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Quaternion IKRotation;

		[Token(Token = "0x400039D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Point pelvis;

		[Token(Token = "0x400039E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Point thigh;

		[Token(Token = "0x400039F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Point calf;

		[Token(Token = "0x40003A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Point foot;

		[Token(Token = "0x40003A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Point toe;

		[Token(Token = "0x40003A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public IKSolverVR.Leg leg;

		[Token(Token = "0x40003A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Vector3 heelOffset;

		[Token(Token = "0x40003A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3[] positions;

		[Token(Token = "0x40003A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Quaternion[] rotations;

		[Token(Token = "0x6000951")]
		[Address(RVA = "0x1022E30", Offset = "0x1022E30", VA = "0x1022E30", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000952")]
		[Address(RVA = "0x10231A4", Offset = "0x10231A4", VA = "0x10231A4")]
		public bool SetChain(Transform pelvis, Transform thigh, Transform calf, Transform foot, Transform toe, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x6000953")]
		[Address(RVA = "0x1023214", Offset = "0x1023214", VA = "0x1023214", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000954")]
		[Address(RVA = "0x1023370", Offset = "0x1023370", VA = "0x1023370", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000955")]
		[Address(RVA = "0x1023508", Offset = "0x1023508", VA = "0x1023508", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000956")]
		[Address(RVA = "0x1023564", Offset = "0x1023564", VA = "0x1023564", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6000957")]
		[Address(RVA = "0x10235D4", Offset = "0x10235D4", VA = "0x10235D4", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000958")]
		[Address(RVA = "0x1023940", Offset = "0x1023940", VA = "0x1023940", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000959")]
		[Address(RVA = "0x102396C", Offset = "0x102396C", VA = "0x102396C")]
		private void Solve()
		{
		}

		[Token(Token = "0x600095A")]
		[Address(RVA = "0x1023638", Offset = "0x1023638", VA = "0x1023638")]
		private void Read()
		{
		}

		[Token(Token = "0x600095B")]
		[Address(RVA = "0x1023A70", Offset = "0x1023A70", VA = "0x1023A70")]
		private void Write()
		{
		}

		[Token(Token = "0x600095C")]
		[Address(RVA = "0x1023EF8", Offset = "0x1023EF8", VA = "0x1023EF8")]
		public IKSolverLeg()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200009D")]
	public class IKSolverLimb : IKSolverTrigonometric
	{
		[Serializable]
		[Token(Token = "0x20001A2")]
		public enum BendModifier
		{
			[Token(Token = "0x4000950")]
			Animation,
			[Token(Token = "0x4000951")]
			Target,
			[Token(Token = "0x4000952")]
			Parent,
			[Token(Token = "0x4000953")]
			Arm,
			[Token(Token = "0x4000954")]
			Goal
		}

		[Serializable]
		[Token(Token = "0x20001A3")]
		public struct AxisDirection
		{
			[Token(Token = "0x4000955")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 direction;

			[Token(Token = "0x4000956")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 axis;

			[Token(Token = "0x4000957")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float dot;

			[Token(Token = "0x6000D73")]
			[Address(RVA = "0x8AE130", Offset = "0x8AE130", VA = "0x8AE130")]
			public AxisDirection(Vector3 direction, Vector3 axis)
			{
			}
		}

		[Token(Token = "0x40003A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public AvatarIKGoal goal;

		[Token(Token = "0x40003A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public BendModifier bendModifier;

		[Token(Token = "0x40003A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A7394", Offset = "0x9A7394")]
		public float maintainRotationWeight;

		[Token(Token = "0x40003A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A73AC", Offset = "0x9A73AC")]
		public float bendModifierWeight;

		[Token(Token = "0x40003AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Transform bendGoal;

		[Token(Token = "0x40003AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool maintainBendFor1Frame;

		[Token(Token = "0x40003AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		private bool maintainRotationFor1Frame;

		[Token(Token = "0x40003AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Quaternion defaultRootRotation;

		[Token(Token = "0x40003AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Quaternion parentDefaultRotation;

		[Token(Token = "0x40003AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Quaternion bone3RotationBeforeSolve;

		[Token(Token = "0x40003B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private Quaternion maintainRotation;

		[Token(Token = "0x40003B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private Quaternion bone3DefaultRotation;

		[Token(Token = "0x40003B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private Vector3 _bendNormal;

		[Token(Token = "0x40003B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Vector3 animationNormal;

		[Token(Token = "0x40003B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private AxisDirection[] axisDirectionsLeft;

		[Token(Token = "0x40003B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private AxisDirection[] axisDirectionsRight;

		[Token(Token = "0x170000AF")]
		private AxisDirection[] axisDirections
		{
			[Token(Token = "0x6000964")]
			[Address(RVA = "0x1025844", Offset = "0x1025844", VA = "0x1025844")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600095D")]
		[Address(RVA = "0x1024140", Offset = "0x1024140", VA = "0x1024140")]
		public void MaintainRotation()
		{
		}

		[Token(Token = "0x600095E")]
		[Address(RVA = "0x1024190", Offset = "0x1024190", VA = "0x1024190")]
		public void MaintainBend()
		{
		}

		[Token(Token = "0x600095F")]
		[Address(RVA = "0x10242A4", Offset = "0x10242A4", VA = "0x10242A4", Slot = "12")]
		protected override void OnInitiateVirtual()
		{
		}

		[Token(Token = "0x6000960")]
		[Address(RVA = "0x1024914", Offset = "0x1024914", VA = "0x1024914", Slot = "13")]
		protected override void OnUpdateVirtual()
		{
		}

		[Token(Token = "0x6000961")]
		[Address(RVA = "0x10254F0", Offset = "0x10254F0", VA = "0x10254F0", Slot = "14")]
		protected override void OnPostSolveVirtual()
		{
		}

		[Token(Token = "0x6000962")]
		[Address(RVA = "0x1025638", Offset = "0x1025638", VA = "0x1025638")]
		public IKSolverLimb()
		{
		}

		[Token(Token = "0x6000963")]
		[Address(RVA = "0x10257BC", Offset = "0x10257BC", VA = "0x10257BC")]
		public IKSolverLimb(AvatarIKGoal goal)
		{
		}

		[Token(Token = "0x6000965")]
		[Address(RVA = "0x1024620", Offset = "0x1024620", VA = "0x1024620")]
		private void StoreAxisDirections(ref AxisDirection[] axisDirections)
		{
		}

		[Token(Token = "0x6000966")]
		[Address(RVA = "0x1024A40", Offset = "0x1024A40", VA = "0x1024A40")]
		private Vector3 GetModifiedBendNormal()
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x200009E")]
	public class IKSolverLookAt : IKSolver
	{
		[Serializable]
		[Token(Token = "0x20001A4")]
		public class LookAtBone : Bone
		{
			[Token(Token = "0x4000958")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			public Vector3 baseForwardOffsetEuler;

			[Token(Token = "0x1700011B")]
			public Vector3 forward
			{
				[Token(Token = "0x6000D78")]
				[Address(RVA = "0x1027900", Offset = "0x1027900", VA = "0x1027900")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x6000D74")]
			[Address(RVA = "0x102804C", Offset = "0x102804C", VA = "0x102804C")]
			public LookAtBone()
			{
			}

			[Token(Token = "0x6000D75")]
			[Address(RVA = "0x1026A9C", Offset = "0x1026A9C", VA = "0x1026A9C")]
			public LookAtBone(Transform transform)
			{
			}

			[Token(Token = "0x6000D76")]
			[Address(RVA = "0x1026DD8", Offset = "0x1026DD8", VA = "0x1026DD8")]
			public void Initiate(Transform root)
			{
			}

			[Token(Token = "0x6000D77")]
			[Address(RVA = "0x1027D04", Offset = "0x1027D04", VA = "0x1027D04")]
			public void LookAt(Vector3 direction, float weight)
			{
			}
		}

		[Token(Token = "0x40003B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x40003B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public LookAtBone[] spine;

		[Token(Token = "0x40003B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public LookAtBone head;

		[Token(Token = "0x40003B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public LookAtBone[] eyes;

		[Token(Token = "0x40003BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A73C4", Offset = "0x9A73C4")]
		public float bodyWeight;

		[Token(Token = "0x40003BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A73DC", Offset = "0x9A73DC")]
		public float headWeight;

		[Token(Token = "0x40003BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A73F4", Offset = "0x9A73F4")]
		public float eyesWeight;

		[Token(Token = "0x40003BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A740C", Offset = "0x9A740C")]
		public float clampWeight;

		[Token(Token = "0x40003BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A7424", Offset = "0x9A7424")]
		public float clampWeightHead;

		[Token(Token = "0x40003BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A743C", Offset = "0x9A743C")]
		public float clampWeightEyes;

		[Token(Token = "0x40003C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A7454", Offset = "0x9A7454")]
		public int clampSmoothing;

		[Token(Token = "0x40003C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public AnimationCurve spineWeightCurve;

		[Token(Token = "0x40003C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Vector3 spineTargetOffset;

		[Token(Token = "0x40003C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected Vector3[] spineForwards;

		[Token(Token = "0x40003C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected Vector3[] headForwards;

		[Token(Token = "0x40003C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected Vector3[] eyeForward;

		[Token(Token = "0x170000B0")]
		protected bool spineIsValid
		{
			[Token(Token = "0x6000975")]
			[Address(RVA = "0x1026200", Offset = "0x1026200", VA = "0x1026200")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B1")]
		protected bool spineIsEmpty
		{
			[Token(Token = "0x6000976")]
			[Address(RVA = "0x10263D8", Offset = "0x10263D8", VA = "0x10263D8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B2")]
		protected bool headIsValid
		{
			[Token(Token = "0x6000978")]
			[Address(RVA = "0x10262E4", Offset = "0x10262E4", VA = "0x10262E4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B3")]
		protected bool headIsEmpty
		{
			[Token(Token = "0x6000979")]
			[Address(RVA = "0x10263FC", Offset = "0x10263FC", VA = "0x10263FC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B4")]
		protected bool eyesIsValid
		{
			[Token(Token = "0x600097B")]
			[Address(RVA = "0x10262F4", Offset = "0x10262F4", VA = "0x10262F4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B5")]
		protected bool eyesIsEmpty
		{
			[Token(Token = "0x600097C")]
			[Address(RVA = "0x1026478", Offset = "0x1026478", VA = "0x1026478")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000967")]
		[Address(RVA = "0x10258C0", Offset = "0x10258C0", VA = "0x10258C0")]
		public void SetLookAtWeight(float weight)
		{
		}

		[Token(Token = "0x6000968")]
		[Address(RVA = "0x1025944", Offset = "0x1025944", VA = "0x1025944")]
		public void SetLookAtWeight(float weight, float bodyWeight)
		{
		}

		[Token(Token = "0x6000969")]
		[Address(RVA = "0x10259F0", Offset = "0x10259F0", VA = "0x10259F0")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight)
		{
		}

		[Token(Token = "0x600096A")]
		[Address(RVA = "0x1025AB8", Offset = "0x1025AB8", VA = "0x1025AB8")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight)
		{
		}

		[Token(Token = "0x600096B")]
		[Address(RVA = "0x1025BA4", Offset = "0x1025BA4", VA = "0x1025BA4")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight)
		{
		}

		[Token(Token = "0x600096C")]
		[Address(RVA = "0x1025CB0", Offset = "0x1025CB0", VA = "0x1025CB0")]
		public void SetLookAtWeight(float weight, float bodyWeight = 0f, float headWeight = 1f, float eyesWeight = 0.5f, float clampWeight = 0.5f, float clampWeightHead = 0.5f, float clampWeightEyes = 0.3f)
		{
		}

		[Token(Token = "0x600096D")]
		[Address(RVA = "0x1025DF8", Offset = "0x1025DF8", VA = "0x1025DF8", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600096E")]
		[Address(RVA = "0x1025F28", Offset = "0x1025F28", VA = "0x1025F28", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x600096F")]
		[Address(RVA = "0x102606C", Offset = "0x102606C", VA = "0x102606C", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000970")]
		[Address(RVA = "0x102649C", Offset = "0x102649C", VA = "0x102649C", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000971")]
		[Address(RVA = "0x10266D4", Offset = "0x10266D4", VA = "0x10266D4", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000972")]
		[Address(RVA = "0x1026874", Offset = "0x1026874", VA = "0x1026874")]
		public bool SetChain(Transform[] spine, Transform head, Transform[] eyes, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x6000973")]
		[Address(RVA = "0x1026AC8", Offset = "0x1026AC8", VA = "0x1026AC8", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000974")]
		[Address(RVA = "0x1026F14", Offset = "0x1026F14", VA = "0x1026F14", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000977")]
		[Address(RVA = "0x1027018", Offset = "0x1027018", VA = "0x1027018")]
		protected void SolveSpine()
		{
		}

		[Token(Token = "0x600097A")]
		[Address(RVA = "0x1027244", Offset = "0x1027244", VA = "0x1027244")]
		protected void SolveHead()
		{
		}

		[Token(Token = "0x600097D")]
		[Address(RVA = "0x10274A0", Offset = "0x10274A0", VA = "0x10274A0")]
		protected void SolveEyes()
		{
		}

		[Token(Token = "0x600097E")]
		[Address(RVA = "0x10279CC", Offset = "0x10279CC", VA = "0x10279CC")]
		protected Vector3[] GetForwards(ref Vector3[] forwards, Vector3 baseForward, Vector3 targetForward, int bones, float clamp)
		{
			return null;
		}

		[Token(Token = "0x600097F")]
		[Address(RVA = "0x1026924", Offset = "0x1026924", VA = "0x1026924")]
		protected void SetBones(Transform[] array, ref LookAtBone[] bones)
		{
		}

		[Token(Token = "0x6000980")]
		[Address(RVA = "0x1027E6C", Offset = "0x1027E6C", VA = "0x1027E6C")]
		public IKSolverLookAt()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200009F")]
	public class IKSolverTrigonometric : IKSolver
	{
		[Serializable]
		[Token(Token = "0x20001A5")]
		public class TrigonometricBone : Bone
		{
			[Token(Token = "0x4000959")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			private Quaternion targetToLocalSpace;

			[Token(Token = "0x400095A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			private Vector3 defaultLocalBendNormal;

			[Token(Token = "0x6000D79")]
			[Address(RVA = "0x1029624", Offset = "0x1029624", VA = "0x1029624")]
			public void Initiate(Vector3 childPosition, Vector3 bendNormal)
			{
			}

			[Token(Token = "0x6000D7A")]
			[Address(RVA = "0x102A1DC", Offset = "0x102A1DC", VA = "0x102A1DC")]
			public Quaternion GetRotation(Vector3 direction, Vector3 bendNormal)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6000D7B")]
			[Address(RVA = "0x10241D8", Offset = "0x10241D8", VA = "0x10241D8")]
			public Vector3 GetBendNormalFromCurrentRotation()
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000D7C")]
			[Address(RVA = "0x102A2A4", Offset = "0x102A2A4", VA = "0x102A2A4")]
			public TrigonometricBone()
			{
			}
		}

		[Token(Token = "0x40003C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x40003C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A746C", Offset = "0x9A746C")]
		public float IKRotationWeight;

		[Token(Token = "0x40003C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Quaternion IKRotation;

		[Token(Token = "0x40003C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Vector3 bendNormal;

		[Token(Token = "0x40003CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public TrigonometricBone bone1;

		[Token(Token = "0x40003CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public TrigonometricBone bone2;

		[Token(Token = "0x40003CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public TrigonometricBone bone3;

		[Token(Token = "0x40003CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected Vector3 weightIKPosition;

		[Token(Token = "0x40003CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected bool directHierarchy;

		[Token(Token = "0x6000981")]
		[Address(RVA = "0x1028054", Offset = "0x1028054", VA = "0x1028054")]
		public void SetBendGoalPosition(Vector3 goalPosition, float weight)
		{
		}

		[Token(Token = "0x6000982")]
		[Address(RVA = "0x1028244", Offset = "0x1028244", VA = "0x1028244")]
		public void SetBendPlaneToCurrent()
		{
		}

		[Token(Token = "0x6000983")]
		[Address(RVA = "0x10283F8", Offset = "0x10283F8", VA = "0x10283F8")]
		public void SetIKRotation(Quaternion rotation)
		{
		}

		[Token(Token = "0x6000984")]
		[Address(RVA = "0x1028404", Offset = "0x1028404", VA = "0x1028404")]
		public void SetIKRotationWeight(float weight)
		{
		}

		[Token(Token = "0x6000985")]
		[Address(RVA = "0x1028488", Offset = "0x1028488", VA = "0x1028488")]
		public Quaternion GetIKRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000986")]
		[Address(RVA = "0x1028494", Offset = "0x1028494", VA = "0x1028494")]
		public float GetIKRotationWeight()
		{
			return default(float);
		}

		[Token(Token = "0x6000987")]
		[Address(RVA = "0x102849C", Offset = "0x102849C", VA = "0x102849C", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000988")]
		[Address(RVA = "0x10285A0", Offset = "0x10285A0", VA = "0x10285A0", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000989")]
		[Address(RVA = "0x10286C0", Offset = "0x10286C0", VA = "0x10286C0", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600098A")]
		[Address(RVA = "0x102870C", Offset = "0x102870C", VA = "0x102870C", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x600098B")]
		[Address(RVA = "0x102876C", Offset = "0x102876C", VA = "0x102876C", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600098C")]
		[Address(RVA = "0x1028B48", Offset = "0x1028B48", VA = "0x1028B48")]
		public bool SetChain(Transform bone1, Transform bone2, Transform bone3, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x600098D")]
		[Address(RVA = "0x1028BA0", Offset = "0x1028BA0", VA = "0x1028BA0")]
		public static void Solve(Transform bone1, Transform bone2, Transform bone3, Vector3 targetPosition, Vector3 bendNormal, float weight)
		{
		}

		[Token(Token = "0x600098E")]
		[Address(RVA = "0x1029148", Offset = "0x1029148", VA = "0x1029148")]
		private static Vector3 GetDirectionToBendPoint(Vector3 direction, float directionMag, Vector3 bendDirection, float sqrMag1, float sqrMag2)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600098F")]
		[Address(RVA = "0x1029360", Offset = "0x1029360", VA = "0x1029360", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000990")]
		[Address(RVA = "0x102951C", Offset = "0x102951C", VA = "0x102951C")]
		private bool IsDirectHierarchy()
		{
			return default(bool);
		}

		[Token(Token = "0x6000991")]
		[Address(RVA = "0x1029498", Offset = "0x1029498", VA = "0x1029498")]
		private void InitiateBones()
		{
		}

		[Token(Token = "0x6000992")]
		[Address(RVA = "0x10297C4", Offset = "0x10297C4", VA = "0x10297C4", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000993")]
		[Address(RVA = "0x102A298", Offset = "0x102A298", VA = "0x102A298", Slot = "12")]
		protected virtual void OnInitiateVirtual()
		{
		}

		[Token(Token = "0x6000994")]
		[Address(RVA = "0x102A29C", Offset = "0x102A29C", VA = "0x102A29C", Slot = "13")]
		protected virtual void OnUpdateVirtual()
		{
		}

		[Token(Token = "0x6000995")]
		[Address(RVA = "0x102A2A0", Offset = "0x102A2A0", VA = "0x102A2A0", Slot = "14")]
		protected virtual void OnPostSolveVirtual()
		{
		}

		[Token(Token = "0x6000996")]
		[Address(RVA = "0x1029ED0", Offset = "0x1029ED0", VA = "0x1029ED0")]
		protected Vector3 GetBendDirection(Vector3 IKPosition, Vector3 bendNormal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000997")]
		[Address(RVA = "0x10256AC", Offset = "0x10256AC", VA = "0x10256AC")]
		public IKSolverTrigonometric()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000A0")]
	public class IKSolverVR : IKSolver
	{
		[Serializable]
		[Token(Token = "0x20001A6")]
		public class Arm : BodyPart
		{
			[Serializable]
			[Token(Token = "0x20001EF")]
			public enum ShoulderRotationMode
			{
				[Token(Token = "0x4000B11")]
				YawPitch,
				[Token(Token = "0x4000B12")]
				FromTo
			}

			[Token(Token = "0x400095B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A94D0", Offset = "0x9A94D0")]
			public Transform target;

			[Token(Token = "0x400095C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A9508", Offset = "0x9A9508")]
			public Transform bendGoal;

			[Token(Token = "0x400095D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A9540", Offset = "0x9A9540")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A9540", Offset = "0x9A9540")]
			public float positionWeight;

			[Token(Token = "0x400095E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A9594", Offset = "0x9A9594")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A9594", Offset = "0x9A9594")]
			public float rotationWeight;

			[Token(Token = "0x400095F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A95E8", Offset = "0x9A95E8")]
			public ShoulderRotationMode shoulderRotationMode;

			[Token(Token = "0x4000960")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A9620", Offset = "0x9A9620")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A9620", Offset = "0x9A9620")]
			public float shoulderRotationWeight;

			[Token(Token = "0x4000961")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A9674", Offset = "0x9A9674")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A9674", Offset = "0x9A9674")]
			public float shoulderTwistWeight;

			[Token(Token = "0x4000962")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A96C8", Offset = "0x9A96C8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A96C8", Offset = "0x9A96C8")]
			public float bendGoalWeight;

			[Token(Token = "0x4000963")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A971C", Offset = "0x9A971C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A971C", Offset = "0x9A971C")]
			public float swivelOffset;

			[Token(Token = "0x4000964")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A9778", Offset = "0x9A9778")]
			public Vector3 wristToPalmAxis;

			[Token(Token = "0x4000965")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A97B0", Offset = "0x9A97B0")]
			public Vector3 palmToThumbAxis;

			[Token(Token = "0x4000966")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A97E8", Offset = "0x9A97E8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A97E8", Offset = "0x9A97E8")]
			public float armLengthMlp;

			[Token(Token = "0x4000967")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A9840", Offset = "0x9A9840")]
			public AnimationCurve stretchCurve;

			[NonSerialized]
			[Token(Token = "0x4000968")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[HideInInspector]
			public Vector3 IKPosition;

			[NonSerialized]
			[Token(Token = "0x4000969")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			[HideInInspector]
			public Quaternion IKRotation;

			[NonSerialized]
			[Token(Token = "0x400096A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
			[HideInInspector]
			public Vector3 bendDirection;

			[NonSerialized]
			[Token(Token = "0x400096B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			[HideInInspector]
			public Vector3 handPositionOffset;

			[Token(Token = "0x400096C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A98B8", Offset = "0x9A98B8")]
			private Vector3 <position>k__BackingField;

			[Token(Token = "0x400096D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A98C8", Offset = "0x9A98C8")]
			private Quaternion <rotation>k__BackingField;

			[Token(Token = "0x400096E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			private bool hasShoulder;

			[Token(Token = "0x400096F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
			private Vector3 chestForwardAxis;

			[Token(Token = "0x4000970")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			private Vector3 chestUpAxis;

			[Token(Token = "0x4000971")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
			private Quaternion chestRotation;

			[Token(Token = "0x4000972")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
			private Vector3 chestForward;

			[Token(Token = "0x4000973")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
			private Vector3 chestUp;

			[Token(Token = "0x4000974")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
			private Quaternion forearmRelToUpperArm;

			[Token(Token = "0x4000975")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
			private Vector3 upperArmBendAxis;

			[Token(Token = "0x4000976")]
			private const float yawOffsetAngle = 45f;

			[Token(Token = "0x4000977")]
			private const float pitchOffsetAngle = -30f;

			[Token(Token = "0x1700011C")]
			public Vector3 position
			{
				[Token(Token = "0x6000D7D")]
				[Address(RVA = "0x1032FB8", Offset = "0x1032FB8", VA = "0x1032FB8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF8EC", Offset = "0x9AF8EC")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000D7E")]
				[Address(RVA = "0x1032FC4", Offset = "0x1032FC4", VA = "0x1032FC4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF8FC", Offset = "0x9AF8FC")]
				private set
				{
				}
			}

			[Token(Token = "0x1700011D")]
			public Quaternion rotation
			{
				[Token(Token = "0x6000D7F")]
				[Address(RVA = "0x1032FD0", Offset = "0x1032FD0", VA = "0x1032FD0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF90C", Offset = "0x9AF90C")]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6000D80")]
				[Address(RVA = "0x1032FDC", Offset = "0x1032FDC", VA = "0x1032FDC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF91C", Offset = "0x9AF91C")]
				private set
				{
				}
			}

			[Token(Token = "0x1700011E")]
			private VirtualBone shoulder
			{
				[Token(Token = "0x6000D81")]
				[Address(RVA = "0x1032FE8", Offset = "0x1032FE8", VA = "0x1032FE8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700011F")]
			private VirtualBone upperArm
			{
				[Token(Token = "0x6000D82")]
				[Address(RVA = "0x103301C", Offset = "0x103301C", VA = "0x103301C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000120")]
			private VirtualBone forearm
			{
				[Token(Token = "0x6000D83")]
				[Address(RVA = "0x103305C", Offset = "0x103305C", VA = "0x103305C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000121")]
			private VirtualBone hand
			{
				[Token(Token = "0x6000D84")]
				[Address(RVA = "0x10330A8", Offset = "0x10330A8", VA = "0x10330A8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D85")]
			[Address(RVA = "0x10330F4", Offset = "0x10330F4", VA = "0x10330F4", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6000D86")]
			[Address(RVA = "0x10339F4", Offset = "0x10339F4", VA = "0x10339F4", Slot = "5")]
			public override void PreSolve()
			{
			}

			[Token(Token = "0x6000D87")]
			[Address(RVA = "0x1033BE8", Offset = "0x1033BE8", VA = "0x1033BE8", Slot = "7")]
			public override void ApplyOffsets()
			{
			}

			[Token(Token = "0x6000D88")]
			[Address(RVA = "0x1033C94", Offset = "0x1033C94", VA = "0x1033C94")]
			private void Stretching()
			{
			}

			[Token(Token = "0x6000D89")]
			[Address(RVA = "0x1030EEC", Offset = "0x1030EEC", VA = "0x1030EEC")]
			public void Solve(bool isLeft)
			{
			}

			[Token(Token = "0x6000D8A")]
			[Address(RVA = "0x10348E0", Offset = "0x10348E0", VA = "0x10348E0", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x6000D8B")]
			[Address(RVA = "0x1034950", Offset = "0x1034950", VA = "0x1034950", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x6000D8C")]
			[Address(RVA = "0x10340AC", Offset = "0x10340AC", VA = "0x10340AC")]
			private float DamperValue(float value, float min, float max, float weight = 1f)
			{
				return default(float);
			}

			[Token(Token = "0x6000D8D")]
			[Address(RVA = "0x1034184", Offset = "0x1034184", VA = "0x1034184")]
			private Vector3 GetBendNormal(Vector3 dir)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000D8E")]
			[Address(RVA = "0x1034B70", Offset = "0x1034B70", VA = "0x1034B70")]
			private void Visualize(VirtualBone bone1, VirtualBone bone2, VirtualBone bone3, Color color)
			{
			}

			[Token(Token = "0x6000D8F")]
			[Address(RVA = "0x1032DAC", Offset = "0x1032DAC", VA = "0x1032DAC")]
			public Arm()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001A7")]
		public abstract class BodyPart
		{
			[Token(Token = "0x4000978")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A98D8", Offset = "0x9A98D8")]
			private float <sqrMag>k__BackingField;

			[Token(Token = "0x4000979")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A98E8", Offset = "0x9A98E8")]
			private float <mag>k__BackingField;

			[Token(Token = "0x400097A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			public VirtualBone[] bones;

			[Token(Token = "0x400097B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			protected bool initiated;

			[Token(Token = "0x400097C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			protected Vector3 rootPosition;

			[Token(Token = "0x400097D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			protected Quaternion rootRotation;

			[Token(Token = "0x400097E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			protected int index;

			[Token(Token = "0x400097F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			protected int LOD;

			[Token(Token = "0x17000122")]
			public float sqrMag
			{
				[Token(Token = "0x6000D95")]
				[Address(RVA = "0x1034D30", Offset = "0x1034D30", VA = "0x1034D30")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF92C", Offset = "0x9AF92C")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000D96")]
				[Address(RVA = "0x1034D38", Offset = "0x1034D38", VA = "0x1034D38")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF93C", Offset = "0x9AF93C")]
				private set
				{
				}
			}

			[Token(Token = "0x17000123")]
			public float mag
			{
				[Token(Token = "0x6000D97")]
				[Address(RVA = "0x1034D40", Offset = "0x1034D40", VA = "0x1034D40")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF94C", Offset = "0x9AF94C")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000D98")]
				[Address(RVA = "0x1034D48", Offset = "0x1034D48", VA = "0x1034D48")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF95C", Offset = "0x9AF95C")]
				private set
				{
				}
			}

			[Token(Token = "0x6000D90")]
			protected abstract void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index);

			[Token(Token = "0x6000D91")]
			public abstract void PreSolve();

			[Token(Token = "0x6000D92")]
			public abstract void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations);

			[Token(Token = "0x6000D93")]
			public abstract void ApplyOffsets();

			[Token(Token = "0x6000D94")]
			public abstract void ResetOffsets();

			[Token(Token = "0x6000D99")]
			[Address(RVA = "0x1034D50", Offset = "0x1034D50", VA = "0x1034D50")]
			public void SetLOD(int LOD)
			{
			}

			[Token(Token = "0x6000D9A")]
			[Address(RVA = "0x1023E24", Offset = "0x1023E24", VA = "0x1023E24")]
			public void Read(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6000D9B")]
			[Address(RVA = "0x1034D58", Offset = "0x1034D58", VA = "0x1034D58")]
			public void MovePosition(Vector3 position)
			{
			}

			[Token(Token = "0x6000D9C")]
			[Address(RVA = "0x1034EC4", Offset = "0x1034EC4", VA = "0x1034EC4")]
			public void MoveRotation(Quaternion rotation)
			{
			}

			[Token(Token = "0x6000D9D")]
			[Address(RVA = "0x1034F70", Offset = "0x1034F70", VA = "0x1034F70")]
			public void Translate(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000D9E")]
			[Address(RVA = "0x1030CA8", Offset = "0x1030CA8", VA = "0x1030CA8")]
			public void TranslateRoot(Vector3 newRootPos, Quaternion newRootRot)
			{
			}

			[Token(Token = "0x6000D9F")]
			[Address(RVA = "0x103473C", Offset = "0x103473C", VA = "0x103473C")]
			public void RotateTo(VirtualBone bone, Quaternion rotation, float weight = 1f)
			{
			}

			[Token(Token = "0x6000DA0")]
			[Address(RVA = "0x1034FC4", Offset = "0x1034FC4", VA = "0x1034FC4")]
			public void Visualize(Color color)
			{
			}

			[Token(Token = "0x6000DA1")]
			[Address(RVA = "0x1035108", Offset = "0x1035108", VA = "0x1035108")]
			public void Visualize()
			{
			}

			[Token(Token = "0x6000DA2")]
			[Address(RVA = "0x1034C98", Offset = "0x1034C98", VA = "0x1034C98")]
			protected BodyPart()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001A8")]
		public class Footstep
		{
			[Token(Token = "0x4000980")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float stepSpeed;

			[Token(Token = "0x4000981")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 characterSpaceOffset;

			[Token(Token = "0x4000982")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 position;

			[Token(Token = "0x4000983")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Quaternion rotation;

			[Token(Token = "0x4000984")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Quaternion stepToRootRot;

			[Token(Token = "0x4000985")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public bool isSupportLeg;

			[Token(Token = "0x4000986")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9908", Offset = "0x9A9908")]
			private float <stepProgress>k__BackingField;

			[Token(Token = "0x4000987")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public Vector3 stepFrom;

			[Token(Token = "0x4000988")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 stepTo;

			[Token(Token = "0x4000989")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public Quaternion stepFromRot;

			[Token(Token = "0x400098A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			public Quaternion stepToRot;

			[Token(Token = "0x400098B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			private Quaternion footRelativeToRoot;

			[Token(Token = "0x400098C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			private float supportLegW;

			[Token(Token = "0x400098D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private float supportLegWV;

			[Token(Token = "0x17000124")]
			public bool isStepping
			{
				[Token(Token = "0x6000DA3")]
				[Address(RVA = "0x1035130", Offset = "0x1035130", VA = "0x1035130")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000125")]
			public float stepProgress
			{
				[Token(Token = "0x6000DA4")]
				[Address(RVA = "0x1035144", Offset = "0x1035144", VA = "0x1035144")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF96C", Offset = "0x9AF96C")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000DA5")]
				[Address(RVA = "0x103514C", Offset = "0x103514C", VA = "0x103514C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF97C", Offset = "0x9AF97C")]
				private set
				{
				}
			}

			[Token(Token = "0x6000DA6")]
			[Address(RVA = "0x1035154", Offset = "0x1035154", VA = "0x1035154")]
			public Footstep(Quaternion rootRotation, Vector3 footPosition, Quaternion footRotation, Vector3 characterSpaceOffset)
			{
			}

			[Token(Token = "0x6000DA7")]
			[Address(RVA = "0x10352E4", Offset = "0x10352E4", VA = "0x10352E4")]
			public void Reset(Quaternion rootRotation, Vector3 footPosition, Quaternion footRotation)
			{
			}

			[Token(Token = "0x6000DA8")]
			[Address(RVA = "0x103532C", Offset = "0x103532C", VA = "0x103532C")]
			public void StepTo(Vector3 p, Quaternion rootRotation, float stepThreshold)
			{
			}

			[Token(Token = "0x6000DA9")]
			[Address(RVA = "0x10354EC", Offset = "0x10354EC", VA = "0x10354EC")]
			public void UpdateStepping(Vector3 p, Quaternion rootRotation, float speed)
			{
			}

			[Token(Token = "0x6000DAA")]
			[Address(RVA = "0x10356C4", Offset = "0x10356C4", VA = "0x10356C4")]
			public void UpdateStanding(Quaternion rootRotation, float minAngle, float speed)
			{
			}

			[Token(Token = "0x6000DAB")]
			[Address(RVA = "0x10358B0", Offset = "0x10358B0", VA = "0x10358B0")]
			public void Update(InterpolationMode interpolation, UnityEvent onStep)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001A9")]
		public class Leg : BodyPart
		{
			[Token(Token = "0x400098E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A9918", Offset = "0x9A9918")]
			public Transform target;

			[Token(Token = "0x400098F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A9950", Offset = "0x9A9950")]
			public Transform bendGoal;

			[Token(Token = "0x4000990")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A9988", Offset = "0x9A9988")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A9988", Offset = "0x9A9988")]
			public float positionWeight;

			[Token(Token = "0x4000991")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A99DC", Offset = "0x9A99DC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A99DC", Offset = "0x9A99DC")]
			public float rotationWeight;

			[Token(Token = "0x4000992")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A9A30", Offset = "0x9A9A30")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A9A30", Offset = "0x9A9A30")]
			public float bendGoalWeight;

			[Token(Token = "0x4000993")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A9A84", Offset = "0x9A9A84")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A9A84", Offset = "0x9A9A84")]
			public float swivelOffset;

			[Token(Token = "0x4000994")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A9AE0", Offset = "0x9A9AE0")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A9AE0", Offset = "0x9A9AE0")]
			public float bendToTargetWeight;

			[Token(Token = "0x4000995")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A9B34", Offset = "0x9A9B34")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A9B34", Offset = "0x9A9B34")]
			public float legLengthMlp;

			[Token(Token = "0x4000996")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A9B8C", Offset = "0x9A9B8C")]
			public AnimationCurve stretchCurve;

			[NonSerialized]
			[Token(Token = "0x4000997")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[HideInInspector]
			public Vector3 IKPosition;

			[NonSerialized]
			[Token(Token = "0x4000998")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			[HideInInspector]
			public Quaternion IKRotation;

			[NonSerialized]
			[Token(Token = "0x4000999")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			[HideInInspector]
			public Vector3 footPositionOffset;

			[NonSerialized]
			[Token(Token = "0x400099A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[HideInInspector]
			public Vector3 heelPositionOffset;

			[NonSerialized]
			[Token(Token = "0x400099B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			[HideInInspector]
			public Quaternion footRotationOffset;

			[NonSerialized]
			[Token(Token = "0x400099C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			[HideInInspector]
			public float currentMag;

			[Token(Token = "0x400099D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			[HideInInspector]
			public bool useAnimatedBendNormal;

			[Token(Token = "0x400099E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9C34", Offset = "0x9A9C34")]
			private Vector3 <position>k__BackingField;

			[Token(Token = "0x400099F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9C44", Offset = "0x9A9C44")]
			private Quaternion <rotation>k__BackingField;

			[Token(Token = "0x40009A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9C54", Offset = "0x9A9C54")]
			private bool <hasToes>k__BackingField;

			[Token(Token = "0x40009A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9C64", Offset = "0x9A9C64")]
			private Vector3 <thighRelativeToPelvis>k__BackingField;

			[Token(Token = "0x40009A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			private Vector3 footPosition;

			[Token(Token = "0x40009A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
			private Quaternion footRotation;

			[Token(Token = "0x40009A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
			private Vector3 bendNormal;

			[Token(Token = "0x40009A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
			private Quaternion calfRelToThigh;

			[Token(Token = "0x40009A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
			private Quaternion thighRelToFoot;

			[Token(Token = "0x40009A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
			private Vector3 bendNormalRelToPelvis;

			[Token(Token = "0x40009A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
			private Vector3 bendNormalRelToTarget;

			[Token(Token = "0x17000126")]
			public Vector3 position
			{
				[Token(Token = "0x6000DAC")]
				[Address(RVA = "0x1035ACC", Offset = "0x1035ACC", VA = "0x1035ACC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF98C", Offset = "0x9AF98C")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000DAD")]
				[Address(RVA = "0x1035AD8", Offset = "0x1035AD8", VA = "0x1035AD8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF99C", Offset = "0x9AF99C")]
				private set
				{
				}
			}

			[Token(Token = "0x17000127")]
			public Quaternion rotation
			{
				[Token(Token = "0x6000DAE")]
				[Address(RVA = "0x1035AE4", Offset = "0x1035AE4", VA = "0x1035AE4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF9AC", Offset = "0x9AF9AC")]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6000DAF")]
				[Address(RVA = "0x1035AF0", Offset = "0x1035AF0", VA = "0x1035AF0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF9BC", Offset = "0x9AF9BC")]
				private set
				{
				}
			}

			[Token(Token = "0x17000128")]
			public bool hasToes
			{
				[Token(Token = "0x6000DB0")]
				[Address(RVA = "0x1035AFC", Offset = "0x1035AFC", VA = "0x1035AFC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF9CC", Offset = "0x9AF9CC")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000DB1")]
				[Address(RVA = "0x1035B04", Offset = "0x1035B04", VA = "0x1035B04")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF9DC", Offset = "0x9AF9DC")]
				private set
				{
				}
			}

			[Token(Token = "0x17000129")]
			public VirtualBone thigh
			{
				[Token(Token = "0x6000DB2")]
				[Address(RVA = "0x1035B10", Offset = "0x1035B10", VA = "0x1035B10")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700012A")]
			private VirtualBone calf
			{
				[Token(Token = "0x6000DB3")]
				[Address(RVA = "0x1035B44", Offset = "0x1035B44", VA = "0x1035B44")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700012B")]
			private VirtualBone foot
			{
				[Token(Token = "0x6000DB4")]
				[Address(RVA = "0x1035B7C", Offset = "0x1035B7C", VA = "0x1035B7C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700012C")]
			private VirtualBone toes
			{
				[Token(Token = "0x6000DB5")]
				[Address(RVA = "0x1035BB4", Offset = "0x1035BB4", VA = "0x1035BB4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700012D")]
			public VirtualBone lastBone
			{
				[Token(Token = "0x6000DB6")]
				[Address(RVA = "0x1030AFC", Offset = "0x1030AFC", VA = "0x1030AFC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700012E")]
			public Vector3 thighRelativeToPelvis
			{
				[Token(Token = "0x6000DB7")]
				[Address(RVA = "0x1035BEC", Offset = "0x1035BEC", VA = "0x1035BEC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF9EC", Offset = "0x9AF9EC")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000DB8")]
				[Address(RVA = "0x1035BF8", Offset = "0x1035BF8", VA = "0x1035BF8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF9FC", Offset = "0x9AF9FC")]
				private set
				{
				}
			}

			[Token(Token = "0x6000DB9")]
			[Address(RVA = "0x1035C04", Offset = "0x1035C04", VA = "0x1035C04", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6000DBA")]
			[Address(RVA = "0x1036248", Offset = "0x1036248", VA = "0x1036248", Slot = "5")]
			public override void PreSolve()
			{
			}

			[Token(Token = "0x6000DBB")]
			[Address(RVA = "0x1036B30", Offset = "0x1036B30", VA = "0x1036B30", Slot = "7")]
			public override void ApplyOffsets()
			{
			}

			[Token(Token = "0x6000DBC")]
			[Address(RVA = "0x1036A2C", Offset = "0x1036A2C", VA = "0x1036A2C")]
			private void ApplyPositionOffset(Vector3 offset, float weight)
			{
			}

			[Token(Token = "0x6000DBD")]
			[Address(RVA = "0x10367F4", Offset = "0x10367F4", VA = "0x10367F4")]
			private void ApplyRotationOffset(Quaternion offset, float weight)
			{
			}

			[Token(Token = "0x6000DBE")]
			[Address(RVA = "0x1023BFC", Offset = "0x1023BFC", VA = "0x1023BFC")]
			public void Solve(bool stretch)
			{
			}

			[Token(Token = "0x6000DBF")]
			[Address(RVA = "0x1037614", Offset = "0x1037614", VA = "0x1037614")]
			private void FixTwistRotations()
			{
			}

			[Token(Token = "0x6000DC0")]
			[Address(RVA = "0x10370E8", Offset = "0x10370E8", VA = "0x10370E8")]
			private void Stretching()
			{
			}

			[Token(Token = "0x6000DC1")]
			[Address(RVA = "0x1037A7C", Offset = "0x1037A7C", VA = "0x1037A7C", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x6000DC2")]
			[Address(RVA = "0x1037C98", Offset = "0x1037C98", VA = "0x1037C98", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x6000DC3")]
			[Address(RVA = "0x102404C", Offset = "0x102404C", VA = "0x102404C")]
			public Leg()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001AA")]
		public class Locomotion
		{
			[Token(Token = "0x40009A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A9C74", Offset = "0x9A9C74")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A9C74", Offset = "0x9A9C74")]
			public float weight;

			[Token(Token = "0x40009AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A9CC8", Offset = "0x9A9CC8")]
			public float footDistance;

			[Token(Token = "0x40009AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A9D00", Offset = "0x9A9D00")]
			public float stepThreshold;

			[Token(Token = "0x40009AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A9D38", Offset = "0x9A9D38")]
			public float angleThreshold;

			[Token(Token = "0x40009AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A9D70", Offset = "0x9A9D70")]
			public float comAngleMlp;

			[Token(Token = "0x40009AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A9DA8", Offset = "0x9A9DA8")]
			public float maxVelocity;

			[Token(Token = "0x40009AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A9DE0", Offset = "0x9A9DE0")]
			public float velocityFactor;

			[Token(Token = "0x40009B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A9E18", Offset = "0x9A9E18")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A9E18", Offset = "0x9A9E18")]
			public float maxLegStretch;

			[Token(Token = "0x40009B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A9E70", Offset = "0x9A9E70")]
			public float rootSpeed;

			[Token(Token = "0x40009B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A9EA8", Offset = "0x9A9EA8")]
			public float stepSpeed;

			[Token(Token = "0x40009B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A9EE0", Offset = "0x9A9EE0")]
			public AnimationCurve stepHeight;

			[Token(Token = "0x40009B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A9F18", Offset = "0x9A9F18")]
			public AnimationCurve heelHeight;

			[Token(Token = "0x40009B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A9F50", Offset = "0x9A9F50")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A9F50", Offset = "0x9A9F50")]
			public float relaxLegTwistMinAngle;

			[Token(Token = "0x40009B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A9FA8", Offset = "0x9A9FA8")]
			public float relaxLegTwistSpeed;

			[Token(Token = "0x40009B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A9FE0", Offset = "0x9A9FE0")]
			public InterpolationMode stepInterpolation;

			[Token(Token = "0x40009B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AA018", Offset = "0x9AA018")]
			public Vector3 offset;

			[Token(Token = "0x40009B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[HideInInspector]
			public bool blockingEnabled;

			[Token(Token = "0x40009BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[HideInInspector]
			public LayerMask blockingLayers;

			[Token(Token = "0x40009BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[HideInInspector]
			public float raycastRadius;

			[Token(Token = "0x40009BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[HideInInspector]
			public float raycastHeight;

			[Token(Token = "0x40009BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AA090", Offset = "0x9AA090")]
			public UnityEvent onLeftFootstep;

			[Token(Token = "0x40009BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AA0C8", Offset = "0x9AA0C8")]
			public UnityEvent onRightFootstep;

			[Token(Token = "0x40009BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA100", Offset = "0x9AA100")]
			private Vector3 <centerOfMass>k__BackingField;

			[Token(Token = "0x40009C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			private Footstep[] footsteps;

			[Token(Token = "0x40009C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			private Vector3 lastComPosition;

			[Token(Token = "0x40009C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			private Vector3 comVelocity;

			[Token(Token = "0x40009C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private int leftFootIndex;

			[Token(Token = "0x40009C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
			private int rightFootIndex;

			[Token(Token = "0x1700012F")]
			public Vector3 centerOfMass
			{
				[Token(Token = "0x6000DC4")]
				[Address(RVA = "0x1037D48", Offset = "0x1037D48", VA = "0x1037D48")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AFA0C", Offset = "0x9AFA0C")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000DC5")]
				[Address(RVA = "0x1037D54", Offset = "0x1037D54", VA = "0x1037D54")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AFA1C", Offset = "0x9AFA1C")]
				private set
				{
				}
			}

			[Token(Token = "0x17000130")]
			public Vector3 leftFootstepPosition
			{
				[Token(Token = "0x6000DCB")]
				[Address(RVA = "0x1038194", Offset = "0x1038194", VA = "0x1038194")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x17000131")]
			public Vector3 rightFootstepPosition
			{
				[Token(Token = "0x6000DCC")]
				[Address(RVA = "0x10381D4", Offset = "0x10381D4", VA = "0x10381D4")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x17000132")]
			public Quaternion leftFootstepRotation
			{
				[Token(Token = "0x6000DCD")]
				[Address(RVA = "0x1038218", Offset = "0x1038218", VA = "0x1038218")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x17000133")]
			public Quaternion rightFootstepRotation
			{
				[Token(Token = "0x6000DCE")]
				[Address(RVA = "0x1038258", Offset = "0x1038258", VA = "0x1038258")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x6000DC6")]
			[Address(RVA = "0x102EC78", Offset = "0x102EC78", VA = "0x102EC78")]
			public void Initiate(Vector3[] positions, Quaternion[] rotations, bool hasToes)
			{
			}

			[Token(Token = "0x6000DC7")]
			[Address(RVA = "0x102C4F4", Offset = "0x102C4F4", VA = "0x102C4F4")]
			public void Reset(Vector3[] positions, Quaternion[] rotations)
			{
			}

			[Token(Token = "0x6000DC8")]
			[Address(RVA = "0x102B91C", Offset = "0x102B91C", VA = "0x102B91C")]
			public void AddDeltaRotation(Quaternion delta, Vector3 pivot)
			{
			}

			[Token(Token = "0x6000DC9")]
			[Address(RVA = "0x102B76C", Offset = "0x102B76C", VA = "0x102B76C")]
			public void AddDeltaPosition(Vector3 delta)
			{
			}

			[Token(Token = "0x6000DCA")]
			[Address(RVA = "0x102F594", Offset = "0x102F594", VA = "0x102F594")]
			public void Solve(VirtualBone rootBone, Spine spine, Leg leftLeg, Leg rightLeg, Arm leftArm, Arm rightArm, int supportLegIndex, out Vector3 leftFootPosition, out Vector3 rightFootPosition, out Quaternion leftFootRotation, out Quaternion rightFootRotation, out float leftFootOffset, out float rightFootOffset, out float leftHeelOffset, out float rightHeelOffset)
			{
			}

			[Token(Token = "0x6000DCF")]
			[Address(RVA = "0x1037DA0", Offset = "0x1037DA0", VA = "0x1037DA0")]
			private bool StepBlocked(Vector3 fromPosition, Vector3 toPosition, Vector3 rootPosition)
			{
				return default(bool);
			}

			[Token(Token = "0x6000DD0")]
			[Address(RVA = "0x1037F44", Offset = "0x1037F44", VA = "0x1037F44")]
			private bool CanStep()
			{
				return default(bool);
			}

			[Token(Token = "0x6000DD1")]
			[Address(RVA = "0x1037FC8", Offset = "0x1037FC8", VA = "0x1037FC8")]
			private static bool GetLineSphereCollision(Vector3 lineStart, Vector3 lineEnd, Vector3 sphereCenter, float sphereRadius)
			{
				return default(bool);
			}

			[Token(Token = "0x6000DD2")]
			[Address(RVA = "0x1032ED4", Offset = "0x1032ED4", VA = "0x1032ED4")]
			public Locomotion()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001AB")]
		public class Spine : BodyPart
		{
			[Token(Token = "0x40009C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AA110", Offset = "0x9AA110")]
			public Transform headTarget;

			[Token(Token = "0x40009C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AA148", Offset = "0x9AA148")]
			public Transform pelvisTarget;

			[Token(Token = "0x40009C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AA180", Offset = "0x9AA180")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9AA180", Offset = "0x9AA180")]
			public float positionWeight;

			[Token(Token = "0x40009C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AA1D4", Offset = "0x9AA1D4")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9AA1D4", Offset = "0x9AA1D4")]
			public float rotationWeight;

			[Token(Token = "0x40009C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AA228", Offset = "0x9AA228")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9AA228", Offset = "0x9AA228")]
			public float pelvisPositionWeight;

			[Token(Token = "0x40009CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AA27C", Offset = "0x9AA27C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9AA27C", Offset = "0x9AA27C")]
			public float pelvisRotationWeight;

			[Token(Token = "0x40009CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AA2D0", Offset = "0x9AA2D0")]
			public Transform chestGoal;

			[Token(Token = "0x40009CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AA308", Offset = "0x9AA308")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9AA308", Offset = "0x9AA308")]
			public float chestGoalWeight;

			[Token(Token = "0x40009CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AA35C", Offset = "0x9AA35C")]
			public float minHeadHeight;

			[Token(Token = "0x40009CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AA394", Offset = "0x9AA394")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9AA394", Offset = "0x9AA394")]
			public float bodyPosStiffness;

			[Token(Token = "0x40009CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AA3E8", Offset = "0x9AA3E8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9AA3E8", Offset = "0x9AA3E8")]
			public float bodyRotStiffness;

			[Token(Token = "0x40009D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AA43C", Offset = "0x9AA43C")]
			[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x9AA43C", Offset = "0x9AA43C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9AA43C", Offset = "0x9AA43C")]
			public float neckStiffness;

			[Token(Token = "0x40009D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AA4B4", Offset = "0x9AA4B4")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9AA4B4", Offset = "0x9AA4B4")]
			public float rotateChestByHands;

			[Token(Token = "0x40009D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AA508", Offset = "0x9AA508")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9AA508", Offset = "0x9AA508")]
			public float chestClampWeight;

			[Token(Token = "0x40009D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AA55C", Offset = "0x9AA55C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9AA55C", Offset = "0x9AA55C")]
			public float headClampWeight;

			[Token(Token = "0x40009D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AA5B0", Offset = "0x9AA5B0")]
			public float moveBodyBackWhenCrouching;

			[Token(Token = "0x40009D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AA5E8", Offset = "0x9AA5E8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9AA5E8", Offset = "0x9AA5E8")]
			public float maintainPelvisPosition;

			[Token(Token = "0x40009D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AA63C", Offset = "0x9AA63C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9AA63C", Offset = "0x9AA63C")]
			public float maxRootAngle;

			[Token(Token = "0x40009D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AA694", Offset = "0x9AA694")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9AA694", Offset = "0x9AA694")]
			public float rootHeadingOffset;

			[NonSerialized]
			[Token(Token = "0x40009D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[HideInInspector]
			public Vector3 IKPositionHead;

			[NonSerialized]
			[Token(Token = "0x40009D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			[HideInInspector]
			public Quaternion IKRotationHead;

			[NonSerialized]
			[Token(Token = "0x40009DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			[HideInInspector]
			public Vector3 IKPositionPelvis;

			[NonSerialized]
			[Token(Token = "0x40009DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			[HideInInspector]
			public Quaternion IKRotationPelvis;

			[NonSerialized]
			[Token(Token = "0x40009DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			[HideInInspector]
			public Vector3 goalPositionChest;

			[NonSerialized]
			[Token(Token = "0x40009DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
			[HideInInspector]
			public Vector3 pelvisPositionOffset;

			[NonSerialized]
			[Token(Token = "0x40009DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			[HideInInspector]
			public Vector3 chestPositionOffset;

			[NonSerialized]
			[Token(Token = "0x40009DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
			[HideInInspector]
			public Vector3 headPositionOffset;

			[NonSerialized]
			[Token(Token = "0x40009E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			[HideInInspector]
			public Quaternion pelvisRotationOffset;

			[NonSerialized]
			[Token(Token = "0x40009E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
			[HideInInspector]
			public Quaternion chestRotationOffset;

			[NonSerialized]
			[Token(Token = "0x40009E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
			[HideInInspector]
			public Quaternion headRotationOffset;

			[NonSerialized]
			[Token(Token = "0x40009E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
			[HideInInspector]
			public Vector3 faceDirection;

			[NonSerialized]
			[Token(Token = "0x40009E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
			[HideInInspector]
			public Vector3 locomotionHeadPositionOffset;

			[NonSerialized]
			[Token(Token = "0x40009E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
			[HideInInspector]
			public Vector3 headPosition;

			[Token(Token = "0x40009E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA7D0", Offset = "0x9AA7D0")]
			private Quaternion <anchorRotation>k__BackingField;

			[Token(Token = "0x40009E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA7E0", Offset = "0x9AA7E0")]
			private Quaternion <anchorRelativeToHead>k__BackingField;

			[Token(Token = "0x40009E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
			private Quaternion headRotation;

			[Token(Token = "0x40009E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
			private Quaternion pelvisRotation;

			[Token(Token = "0x40009EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
			private Quaternion anchorRelativeToPelvis;

			[Token(Token = "0x40009EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
			private Quaternion pelvisRelativeRotation;

			[Token(Token = "0x40009EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
			private Quaternion chestRelativeRotation;

			[Token(Token = "0x40009ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
			private Vector3 headDeltaPosition;

			[Token(Token = "0x40009EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
			private Quaternion pelvisDeltaRotation;

			[Token(Token = "0x40009EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
			private Quaternion chestTargetRotation;

			[Token(Token = "0x40009F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
			private int pelvisIndex;

			[Token(Token = "0x40009F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
			private int spineIndex;

			[Token(Token = "0x40009F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
			private int chestIndex;

			[Token(Token = "0x40009F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
			private int neckIndex;

			[Token(Token = "0x40009F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
			private int headIndex;

			[Token(Token = "0x40009F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
			private float length;

			[Token(Token = "0x40009F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
			private bool hasChest;

			[Token(Token = "0x40009F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x211")]
			private bool hasNeck;

			[Token(Token = "0x40009F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x212")]
			private bool hasLegs;

			[Token(Token = "0x40009F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
			private float headHeight;

			[Token(Token = "0x40009FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
			private float sizeMlp;

			[Token(Token = "0x40009FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
			private Vector3 chestForward;

			[Token(Token = "0x17000134")]
			public VirtualBone pelvis
			{
				[Token(Token = "0x6000DD3")]
				[Address(RVA = "0x102C768", Offset = "0x102C768", VA = "0x102C768")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000135")]
			public VirtualBone firstSpineBone
			{
				[Token(Token = "0x6000DD4")]
				[Address(RVA = "0x103829C", Offset = "0x103829C", VA = "0x103829C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000136")]
			public VirtualBone chest
			{
				[Token(Token = "0x6000DD5")]
				[Address(RVA = "0x1030E98", Offset = "0x1030E98", VA = "0x1030E98")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000137")]
			private VirtualBone neck
			{
				[Token(Token = "0x6000DD6")]
				[Address(RVA = "0x10382DC", Offset = "0x10382DC", VA = "0x10382DC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000138")]
			public VirtualBone head
			{
				[Token(Token = "0x6000DD7")]
				[Address(RVA = "0x1037D60", Offset = "0x1037D60", VA = "0x1037D60")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000139")]
			public Quaternion anchorRotation
			{
				[Token(Token = "0x6000DD8")]
				[Address(RVA = "0x103831C", Offset = "0x103831C", VA = "0x103831C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AFA2C", Offset = "0x9AFA2C")]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6000DD9")]
				[Address(RVA = "0x1038330", Offset = "0x1038330", VA = "0x1038330")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AFA3C", Offset = "0x9AFA3C")]
				private set
				{
				}
			}

			[Token(Token = "0x1700013A")]
			public Quaternion anchorRelativeToHead
			{
				[Token(Token = "0x6000DDA")]
				[Address(RVA = "0x1038344", Offset = "0x1038344", VA = "0x1038344")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AFA4C", Offset = "0x9AFA4C")]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6000DDB")]
				[Address(RVA = "0x1038358", Offset = "0x1038358", VA = "0x1038358")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AFA5C", Offset = "0x9AFA5C")]
				private set
				{
				}
			}

			[Token(Token = "0x6000DDC")]
			[Address(RVA = "0x103836C", Offset = "0x103836C", VA = "0x103836C", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6000DDD")]
			[Address(RVA = "0x1038DEC", Offset = "0x1038DEC", VA = "0x1038DEC", Slot = "5")]
			public override void PreSolve()
			{
			}

			[Token(Token = "0x6000DDE")]
			[Address(RVA = "0x1038FFC", Offset = "0x1038FFC", VA = "0x1038FFC", Slot = "7")]
			public override void ApplyOffsets()
			{
			}

			[Token(Token = "0x6000DDF")]
			[Address(RVA = "0x1039674", Offset = "0x1039674", VA = "0x1039674")]
			private void CalculateChestTargetRotation(VirtualBone rootBone, Arm[] arms)
			{
			}

			[Token(Token = "0x6000DE0")]
			[Address(RVA = "0x102EF70", Offset = "0x102EF70", VA = "0x102EF70")]
			public void Solve(VirtualBone rootBone, Leg[] legs, Arm[] arms)
			{
			}

			[Token(Token = "0x6000DE1")]
			[Address(RVA = "0x103A054", Offset = "0x103A054", VA = "0x103A054")]
			private void FABRIKPass(Vector3 animatedPelvisPos, Vector3 rootUp, float weight)
			{
			}

			[Token(Token = "0x6000DE2")]
			[Address(RVA = "0x103A720", Offset = "0x103A720", VA = "0x103A720")]
			private void SolvePelvis()
			{
			}

			[Token(Token = "0x6000DE3")]
			[Address(RVA = "0x103AAB8", Offset = "0x103AAB8", VA = "0x103AAB8", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x6000DE4")]
			[Address(RVA = "0x103AC94", Offset = "0x103AC94", VA = "0x103AC94", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x6000DE5")]
			[Address(RVA = "0x10398A4", Offset = "0x10398A4", VA = "0x10398A4")]
			private void AdjustChestByHands(ref Quaternion chestTargetRotation, Arm[] arms)
			{
			}

			[Token(Token = "0x6000DE6")]
			[Address(RVA = "0x1030B3C", Offset = "0x1030B3C", VA = "0x1030B3C")]
			public void InverseTranslateToHead(Leg[] legs, bool limited, bool useCurrentLegMag, Vector3 offset, float w)
			{
			}

			[Token(Token = "0x6000DE7")]
			[Address(RVA = "0x1039C34", Offset = "0x1039C34", VA = "0x1039C34")]
			private void TranslatePelvis(Leg[] legs, Vector3 deltaPosition, Quaternion deltaRotation)
			{
			}

			[Token(Token = "0x6000DE8")]
			[Address(RVA = "0x103AD90", Offset = "0x103AD90", VA = "0x103AD90")]
			private Vector3 LimitPelvisPosition(Leg[] legs, Vector3 pelvisPosition, bool useCurrentLegMag, int it = 2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000DE9")]
			[Address(RVA = "0x103A4D0", Offset = "0x103A4D0", VA = "0x103A4D0")]
			private void Bend(VirtualBone[] bones, int firstIndex, int lastIndex, Quaternion targetRotation, float clampWeight, bool uniformWeight, float w)
			{
			}

			[Token(Token = "0x6000DEA")]
			[Address(RVA = "0x103A218", Offset = "0x103A218", VA = "0x103A218")]
			private void Bend(VirtualBone[] bones, int firstIndex, int lastIndex, Quaternion targetRotation, Quaternion rotationOffset, float clampWeight, bool uniformWeight, float w)
			{
			}

			[Token(Token = "0x6000DEB")]
			[Address(RVA = "0x1032BF8", Offset = "0x1032BF8", VA = "0x1032BF8")]
			public Spine()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001AC")]
		public enum PositionOffset
		{
			[Token(Token = "0x40009FD")]
			Pelvis,
			[Token(Token = "0x40009FE")]
			Chest,
			[Token(Token = "0x40009FF")]
			Head,
			[Token(Token = "0x4000A00")]
			LeftHand,
			[Token(Token = "0x4000A01")]
			RightHand,
			[Token(Token = "0x4000A02")]
			LeftFoot,
			[Token(Token = "0x4000A03")]
			RightFoot,
			[Token(Token = "0x4000A04")]
			LeftHeel,
			[Token(Token = "0x4000A05")]
			RightHeel
		}

		[Serializable]
		[Token(Token = "0x20001AD")]
		public enum RotationOffset
		{
			[Token(Token = "0x4000A07")]
			Pelvis,
			[Token(Token = "0x4000A08")]
			Chest,
			[Token(Token = "0x4000A09")]
			Head
		}

		[Serializable]
		[Token(Token = "0x20001AE")]
		public class VirtualBone
		{
			[Token(Token = "0x4000A0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 readPosition;

			[Token(Token = "0x4000A0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Quaternion readRotation;

			[Token(Token = "0x4000A0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 solverPosition;

			[Token(Token = "0x4000A0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Quaternion solverRotation;

			[Token(Token = "0x4000A0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public float length;

			[Token(Token = "0x4000A0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public float sqrMag;

			[Token(Token = "0x4000A10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Vector3 axis;

			[Token(Token = "0x6000DEC")]
			[Address(RVA = "0xEEFB2C", Offset = "0xEEFB2C", VA = "0xEEFB2C")]
			public VirtualBone(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000DED")]
			[Address(RVA = "0xEEFBA8", Offset = "0xEEFBA8", VA = "0xEEFBA8")]
			public void Read(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000DEE")]
			[Address(RVA = "0xEEFBC8", Offset = "0xEEFBC8", VA = "0xEEFBC8")]
			public static void SwingRotation(VirtualBone[] bones, int index, Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x6000DEF")]
			[Address(RVA = "0xEEFE58", Offset = "0xEEFE58", VA = "0xEEFE58")]
			public static float PreSolve(ref VirtualBone[] bones)
			{
				return default(float);
			}

			[Token(Token = "0x6000DF0")]
			[Address(RVA = "0xEF0144", Offset = "0xEF0144", VA = "0xEF0144")]
			public static void RotateAroundPoint(VirtualBone[] bones, int index, Vector3 point, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000DF1")]
			[Address(RVA = "0xEF032C", Offset = "0xEF032C", VA = "0xEF032C")]
			public static void RotateBy(VirtualBone[] bones, int index, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000DF2")]
			[Address(RVA = "0xEF0564", Offset = "0xEF0564", VA = "0xEF0564")]
			public static void RotateBy(VirtualBone[] bones, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000DF3")]
			[Address(RVA = "0xEF0798", Offset = "0xEF0798", VA = "0xEF0798")]
			public static void RotateTo(VirtualBone[] bones, int index, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000DF4")]
			[Address(RVA = "0xEF0850", Offset = "0xEF0850", VA = "0xEF0850")]
			public static void SolveTrigonometric(VirtualBone[] bones, int first, int second, int third, Vector3 targetPosition, Vector3 bendNormal, float weight)
			{
			}

			[Token(Token = "0x6000DF5")]
			[Address(RVA = "0xEF0DFC", Offset = "0xEF0DFC", VA = "0xEF0DFC")]
			private static Vector3 GetDirectionToBendPoint(Vector3 direction, float directionMag, Vector3 bendDirection, float sqrMag1, float sqrMag2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000DF6")]
			[Address(RVA = "0xEF1014", Offset = "0xEF1014", VA = "0xEF1014")]
			public static void SolveFABRIK(VirtualBone[] bones, Vector3 startPosition, Vector3 targetPosition, float weight, float minNormalizedTargetDistance, int iterations, float length, Vector3 startOffset)
			{
			}

			[Token(Token = "0x6000DF7")]
			[Address(RVA = "0xEF1474", Offset = "0xEF1474", VA = "0xEF1474")]
			private static Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000DF8")]
			[Address(RVA = "0xEF157C", Offset = "0xEF157C", VA = "0xEF157C")]
			public static void SolveCCD(VirtualBone[] bones, Vector3 targetPosition, float weight, int iterations)
			{
			}
		}

		[Token(Token = "0x40003CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform[] solverTransforms;

		[Token(Token = "0x40003D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool hasChest;

		[Token(Token = "0x40003D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool hasNeck;

		[Token(Token = "0x40003D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		private bool hasShoulders;

		[Token(Token = "0x40003D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		private bool hasToes;

		[Token(Token = "0x40003D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool hasLegs;

		[Token(Token = "0x40003D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3[] readPositions;

		[Token(Token = "0x40003D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion[] readRotations;

		[Token(Token = "0x40003D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3[] solvedPositions;

		[Token(Token = "0x40003D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Quaternion[] solvedRotations;

		[Token(Token = "0x40003D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Quaternion[] defaultLocalRotations;

		[Token(Token = "0x40003DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3[] defaultLocalPositions;

		[Token(Token = "0x40003DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 rootV;

		[Token(Token = "0x40003DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 rootVelocity;

		[Token(Token = "0x40003DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 bodyOffset;

		[Token(Token = "0x40003DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int supportLegIndex;

		[Token(Token = "0x40003DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int lastLOD;

		[Token(Token = "0x40003E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7484", Offset = "0x9A7484")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A7484", Offset = "0x9A7484")]
		public int LOD;

		[Token(Token = "0x40003E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A74D8", Offset = "0x9A74D8")]
		public bool plantFeet;

		[Token(Token = "0x40003E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7510", Offset = "0x9A7510")]
		private VirtualBone <rootBone>k__BackingField;

		[Token(Token = "0x40003E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7520", Offset = "0x9A7520")]
		public Spine spine;

		[Token(Token = "0x40003E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7558", Offset = "0x9A7558")]
		public Arm leftArm;

		[Token(Token = "0x40003E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7590", Offset = "0x9A7590")]
		public Arm rightArm;

		[Token(Token = "0x40003E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A75C8", Offset = "0x9A75C8")]
		public Leg leftLeg;

		[Token(Token = "0x40003E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7600", Offset = "0x9A7600")]
		public Leg rightLeg;

		[Token(Token = "0x40003E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7638", Offset = "0x9A7638")]
		public Locomotion locomotion;

		[Token(Token = "0x40003E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Leg[] legs;

		[Token(Token = "0x40003EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Arm[] arms;

		[Token(Token = "0x40003EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Vector3 headPosition;

		[Token(Token = "0x40003EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private Vector3 headDeltaPosition;

		[Token(Token = "0x40003ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Vector3 raycastOriginPelvis;

		[Token(Token = "0x40003EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private Vector3 lastOffset;

		[Token(Token = "0x40003EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Vector3 debugPos1;

		[Token(Token = "0x40003F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		private Vector3 debugPos2;

		[Token(Token = "0x40003F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private Vector3 debugPos3;

		[Token(Token = "0x40003F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private Vector3 debugPos4;

		[Token(Token = "0x170000B6")]
		[HideInInspector]
		public VirtualBone rootBone
		{
			[Token(Token = "0x60009B1")]
			[Address(RVA = "0x1032A40", Offset = "0x1032A40", VA = "0x1032A40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AE66C", Offset = "0x9AE66C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009B2")]
			[Address(RVA = "0x1032A48", Offset = "0x1032A48", VA = "0x1032A48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AE67C", Offset = "0x9AE67C")]
			private set
			{
			}
		}

		[Token(Token = "0x6000998")]
		[Address(RVA = "0x102A2AC", Offset = "0x102A2AC", VA = "0x102A2AC")]
		public void SetToReferences(VRIK.References references)
		{
		}

		[Token(Token = "0x6000999")]
		[Address(RVA = "0x102A6E8", Offset = "0x102A6E8", VA = "0x102A6E8")]
		public void GuessHandOrientations(VRIK.References references, bool onlyIfZero)
		{
		}

		[Token(Token = "0x600099A")]
		[Address(RVA = "0x102A590", Offset = "0x102A590", VA = "0x102A590")]
		public void DefaultAnimationCurves()
		{
		}

		[Token(Token = "0x600099B")]
		[Address(RVA = "0x102B0D4", Offset = "0x102B0D4", VA = "0x102B0D4")]
		public void AddPositionOffset(PositionOffset positionOffset, Vector3 value)
		{
		}

		[Token(Token = "0x600099C")]
		[Address(RVA = "0x102B3B0", Offset = "0x102B3B0", VA = "0x102B3B0")]
		public void AddRotationOffset(RotationOffset rotationOffset, Vector3 value)
		{
		}

		[Token(Token = "0x600099D")]
		[Address(RVA = "0x102B454", Offset = "0x102B454", VA = "0x102B454")]
		public void AddRotationOffset(RotationOffset rotationOffset, Quaternion value)
		{
		}

		[Token(Token = "0x600099E")]
		[Address(RVA = "0x102B5E8", Offset = "0x102B5E8", VA = "0x102B5E8")]
		public void AddPlatformMotion(Vector3 deltaPosition, Quaternion deltaRotation, Vector3 platformPivot)
		{
		}

		[Token(Token = "0x600099F")]
		[Address(RVA = "0x102BCF4", Offset = "0x102BCF4", VA = "0x102BCF4")]
		public void Reset()
		{
		}

		[Token(Token = "0x60009A0")]
		[Address(RVA = "0x102C7A8", Offset = "0x102C7A8", VA = "0x102C7A8", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60009A1")]
		[Address(RVA = "0x102C91C", Offset = "0x102C91C", VA = "0x102C91C", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x60009A2")]
		[Address(RVA = "0x102CB24", Offset = "0x102CB24", VA = "0x102CB24", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x60009A3")]
		[Address(RVA = "0x102CB98", Offset = "0x102CB98", VA = "0x102CB98", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60009A4")]
		[Address(RVA = "0x102CC0C", Offset = "0x102CC0C", VA = "0x102CC0C", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60009A5")]
		[Address(RVA = "0x102CE20", Offset = "0x102CE20", VA = "0x102CE20")]
		private Vector3 GetNormal(Transform[] transforms)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009A6")]
		[Address(RVA = "0x102A988", Offset = "0x102A988", VA = "0x102A988")]
		private Vector3 GuessWristToPalmAxis(Transform hand, Transform forearm)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009A7")]
		[Address(RVA = "0x102AB60", Offset = "0x102AB60", VA = "0x102AB60")]
		private Vector3 GuessPalmToThumbAxis(Transform hand, Transform forearm)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009A8")]
		[Address(RVA = "0x102AFB0", Offset = "0x102AFB0", VA = "0x102AFB0")]
		private static Keyframe[] GetSineKeyframes(float mag)
		{
			return null;
		}

		[Token(Token = "0x60009A9")]
		[Address(RVA = "0x102BE64", Offset = "0x102BE64", VA = "0x102BE64")]
		private void UpdateSolverTransforms()
		{
		}

		[Token(Token = "0x60009AA")]
		[Address(RVA = "0x102D100", Offset = "0x102D100", VA = "0x102D100", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60009AB")]
		[Address(RVA = "0x102D148", Offset = "0x102D148", VA = "0x102D148", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60009AC")]
		[Address(RVA = "0x102E800", Offset = "0x102E800", VA = "0x102E800")]
		private void WriteTransforms()
		{
		}

		[Token(Token = "0x60009AD")]
		[Address(RVA = "0x102BFCC", Offset = "0x102BFCC", VA = "0x102BFCC")]
		private void Read(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs)
		{
		}

		[Token(Token = "0x60009AE")]
		[Address(RVA = "0x102D608", Offset = "0x102D608", VA = "0x102D608")]
		private void Solve()
		{
		}

		[Token(Token = "0x60009AF")]
		[Address(RVA = "0x102EBEC", Offset = "0x102EBEC", VA = "0x102EBEC")]
		private Vector3 GetPosition(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009B0")]
		[Address(RVA = "0x102EC34", Offset = "0x102EC34", VA = "0x102EC34")]
		private Quaternion GetRotation(int index)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60009B3")]
		[Address(RVA = "0x102E6B0", Offset = "0x102E6B0", VA = "0x102E6B0")]
		private void Write()
		{
		}

		[Token(Token = "0x60009B4")]
		[Address(RVA = "0x1032458", Offset = "0x1032458", VA = "0x1032458")]
		private Vector3 GetPelvisOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009B5")]
		[Address(RVA = "0x1032A50", Offset = "0x1032A50", VA = "0x1032A50")]
		public IKSolverVR()
		{
		}
	}
	[Token(Token = "0x20000A1")]
	public class TwistRelaxer : MonoBehaviour
	{
		[Token(Token = "0x40003F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IK ik;

		[Token(Token = "0x40003F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7670", Offset = "0x9A7670")]
		public Transform parent;

		[Token(Token = "0x40003F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A76A8", Offset = "0x9A76A8")]
		public Transform child;

		[Token(Token = "0x40003F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A76E0", Offset = "0x9A76E0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A76E0", Offset = "0x9A76E0")]
		public float weight;

		[Token(Token = "0x40003F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7734", Offset = "0x9A7734")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A7734", Offset = "0x9A7734")]
		public float parentChildCrossfade;

		[Token(Token = "0x40003F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7788", Offset = "0x9A7788")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A7788", Offset = "0x9A7788")]
		public float twistAngleOffset;

		[Token(Token = "0x40003F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 twistAxis;

		[Token(Token = "0x40003FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 axis;

		[Token(Token = "0x40003FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 axisRelativeToParentDefault;

		[Token(Token = "0x40003FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 axisRelativeToChildDefault;

		[Token(Token = "0x60009B6")]
		[Address(RVA = "0xF0521C", Offset = "0xF0521C", VA = "0xF0521C")]
		public void Relax()
		{
		}

		[Token(Token = "0x60009B7")]
		[Address(RVA = "0xF055FC", Offset = "0xF055FC", VA = "0xF055FC")]
		private void Start()
		{
		}

		[Token(Token = "0x60009B8")]
		[Address(RVA = "0xF05A70", Offset = "0xF05A70", VA = "0xF05A70")]
		private void OnPostUpdate()
		{
		}

		[Token(Token = "0x60009B9")]
		[Address(RVA = "0xF05AF8", Offset = "0xF05AF8", VA = "0xF05AF8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60009BA")]
		[Address(RVA = "0xF05B80", Offset = "0xF05B80", VA = "0xF05B80")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60009BB")]
		[Address(RVA = "0xF05C84", Offset = "0xF05C84", VA = "0xF05C84")]
		public TwistRelaxer()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000A2")]
	public class InteractionEffector
	{
		[Token(Token = "0x40003FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A77E4", Offset = "0x9A77E4")]
		private FullBodyBipedEffector <effectorType>k__BackingField;

		[Token(Token = "0x40003FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A77F4", Offset = "0x9A77F4")]
		private bool <isPaused>k__BackingField;

		[Token(Token = "0x40003FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7804", Offset = "0x9A7804")]
		private InteractionObject <interactionObject>k__BackingField;

		[Token(Token = "0x4000400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Poser poser;

		[Token(Token = "0x4000401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private IKEffector effector;

		[Token(Token = "0x4000402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float timer;

		[Token(Token = "0x4000403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float length;

		[Token(Token = "0x4000404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float weight;

		[Token(Token = "0x4000405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float fadeInSpeed;

		[Token(Token = "0x4000406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float defaultPositionWeight;

		[Token(Token = "0x4000407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float defaultRotationWeight;

		[Token(Token = "0x4000408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float defaultPull;

		[Token(Token = "0x4000409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float defaultReach;

		[Token(Token = "0x400040A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float defaultPush;

		[Token(Token = "0x400040B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float defaultPushParent;

		[Token(Token = "0x400040C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float defaultBendGoalWeight;

		[Token(Token = "0x400040D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float resetTimer;

		[Token(Token = "0x400040E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool positionWeightUsed;

		[Token(Token = "0x400040F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool rotationWeightUsed;

		[Token(Token = "0x4000410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		private bool pullUsed;

		[Token(Token = "0x4000411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		private bool reachUsed;

		[Token(Token = "0x4000412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool pushUsed;

		[Token(Token = "0x4000413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		private bool pushParentUsed;

		[Token(Token = "0x4000414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
		private bool bendGoalWeightUsed;

		[Token(Token = "0x4000415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x67")]
		private bool pickedUp;

		[Token(Token = "0x4000416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool defaults;

		[Token(Token = "0x4000417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool pickUpOnPostFBBIK;

		[Token(Token = "0x4000418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 pickUpPosition;

		[Token(Token = "0x4000419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 pausePositionRelative;

		[Token(Token = "0x400041A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Quaternion pickUpRotation;

		[Token(Token = "0x400041B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Quaternion pauseRotationRelative;

		[Token(Token = "0x400041C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private InteractionTarget interactionTarget;

		[Token(Token = "0x400041D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Transform target;

		[Token(Token = "0x400041E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private List<bool> triggered;

		[Token(Token = "0x400041F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private InteractionSystem interactionSystem;

		[Token(Token = "0x4000420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool started;

		[Token(Token = "0x170000B7")]
		public FullBodyBipedEffector effectorType
		{
			[Token(Token = "0x60009BC")]
			[Address(RVA = "0xEF1EA0", Offset = "0xEF1EA0", VA = "0xEF1EA0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AE68C", Offset = "0x9AE68C")]
			get
			{
				return default(FullBodyBipedEffector);
			}
			[Token(Token = "0x60009BD")]
			[Address(RVA = "0xEF1EA8", Offset = "0xEF1EA8", VA = "0xEF1EA8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AE69C", Offset = "0x9AE69C")]
			private set
			{
			}
		}

		[Token(Token = "0x170000B8")]
		public bool isPaused
		{
			[Token(Token = "0x60009BE")]
			[Address(RVA = "0xEF1EB0", Offset = "0xEF1EB0", VA = "0xEF1EB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AE6AC", Offset = "0x9AE6AC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60009BF")]
			[Address(RVA = "0xEF1EB8", Offset = "0xEF1EB8", VA = "0xEF1EB8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AE6BC", Offset = "0x9AE6BC")]
			private set
			{
			}
		}

		[Token(Token = "0x170000B9")]
		public InteractionObject interactionObject
		{
			[Token(Token = "0x60009C0")]
			[Address(RVA = "0xEF1EC4", Offset = "0xEF1EC4", VA = "0xEF1EC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AE6CC", Offset = "0x9AE6CC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009C1")]
			[Address(RVA = "0xEF1ECC", Offset = "0xEF1ECC", VA = "0xEF1ECC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AE6DC", Offset = "0x9AE6DC")]
			private set
			{
			}
		}

		[Token(Token = "0x170000BA")]
		public bool inInteraction
		{
			[Token(Token = "0x60009C2")]
			[Address(RVA = "0xEF1ED4", Offset = "0xEF1ED4", VA = "0xEF1ED4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000BB")]
		public float progress
		{
			[Token(Token = "0x60009CB")]
			[Address(RVA = "0xEF4894", Offset = "0xEF4894", VA = "0xEF4894")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60009C3")]
		[Address(RVA = "0xEF1F44", Offset = "0xEF1F44", VA = "0xEF1F44")]
		public InteractionEffector(FullBodyBipedEffector effectorType)
		{
		}

		[Token(Token = "0x60009C4")]
		[Address(RVA = "0xEF1FC8", Offset = "0xEF1FC8", VA = "0xEF1FC8")]
		public void Initiate(InteractionSystem interactionSystem)
		{
		}

		[Token(Token = "0x60009C5")]
		[Address(RVA = "0xEF206C", Offset = "0xEF206C", VA = "0xEF206C")]
		private void StoreDefaults()
		{
		}

		[Token(Token = "0x60009C6")]
		[Address(RVA = "0xEF21E4", Offset = "0xEF21E4", VA = "0xEF21E4")]
		public bool ResetToDefaults(float speed)
		{
			return default(bool);
		}

		[Token(Token = "0x60009C7")]
		[Address(RVA = "0xEF2694", Offset = "0xEF2694", VA = "0xEF2694")]
		public bool Pause()
		{
			return default(bool);
		}

		[Token(Token = "0x60009C8")]
		[Address(RVA = "0xEF2A54", Offset = "0xEF2A54", VA = "0xEF2A54")]
		public bool Resume()
		{
			return default(bool);
		}

		[Token(Token = "0x60009C9")]
		[Address(RVA = "0xEF2AA8", Offset = "0xEF2AA8", VA = "0xEF2AA8")]
		public bool Start(InteractionObject interactionObject, string tag, float fadeInTime, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x60009CA")]
		[Address(RVA = "0xEF35FC", Offset = "0xEF35FC", VA = "0xEF35FC")]
		public void Update(Transform root, float speed)
		{
		}

		[Token(Token = "0x60009CC")]
		[Address(RVA = "0xEF40DC", Offset = "0xEF40DC", VA = "0xEF40DC")]
		private void TriggerUntriggeredEvents(bool checkTime, out bool pickUp, out bool pause)
		{
		}

		[Token(Token = "0x60009CD")]
		[Address(RVA = "0xEF4304", Offset = "0xEF4304", VA = "0xEF4304")]
		private void PickUp(Transform root)
		{
		}

		[Token(Token = "0x60009CE")]
		[Address(RVA = "0xEF4740", Offset = "0xEF4740", VA = "0xEF4740")]
		public bool Stop()
		{
			return default(bool);
		}

		[Token(Token = "0x60009CF")]
		[Address(RVA = "0xEF4D7C", Offset = "0xEF4D7C", VA = "0xEF4D7C")]
		public void OnPostFBBIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000A3")]
	public class InteractionLookAt
	{
		[Token(Token = "0x4000421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7814", Offset = "0x9A7814")]
		public LookAtIK ik;

		[Token(Token = "0x4000422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A784C", Offset = "0x9A784C")]
		public float lerpSpeed;

		[Token(Token = "0x4000423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7884", Offset = "0x9A7884")]
		public float weightSpeed;

		[Token(Token = "0x4000424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public bool isPaused;

		[Token(Token = "0x4000425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform lookAtTarget;

		[Token(Token = "0x4000426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float stopLookTime;

		[Token(Token = "0x4000427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float weight;

		[Token(Token = "0x4000428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool firstFBBIKSolve;

		[Token(Token = "0x60009D0")]
		[Address(RVA = "0xEF4FE0", Offset = "0xEF4FE0", VA = "0xEF4FE0")]
		public void Look(Transform target, float time)
		{
		}

		[Token(Token = "0x60009D1")]
		[Address(RVA = "0xEF5158", Offset = "0xEF5158", VA = "0xEF5158")]
		public void OnFixTransforms()
		{
		}

		[Token(Token = "0x60009D2")]
		[Address(RVA = "0xEF5200", Offset = "0xEF5200", VA = "0xEF5200")]
		public void Update()
		{
		}

		[Token(Token = "0x60009D3")]
		[Address(RVA = "0xEF5444", Offset = "0xEF5444", VA = "0xEF5444")]
		public void SolveSpine()
		{
		}

		[Token(Token = "0x60009D4")]
		[Address(RVA = "0xEF553C", Offset = "0xEF553C", VA = "0xEF553C")]
		public void SolveHead()
		{
		}

		[Token(Token = "0x60009D5")]
		[Address(RVA = "0xEF5608", Offset = "0xEF5608", VA = "0xEF5608")]
		public InteractionLookAt()
		{
		}
	}
	[Token(Token = "0x20000A4")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x9A4758", Offset = "0x9A4758")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4758", Offset = "0x9A4758")]
	public class InteractionObject : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20001AF")]
		public class InteractionEvent
		{
			[Token(Token = "0x4000A11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AA7F0", Offset = "0x9AA7F0")]
			public float time;

			[Token(Token = "0x4000A12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AA828", Offset = "0x9AA828")]
			public bool pause;

			[Token(Token = "0x4000A13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AA860", Offset = "0x9AA860")]
			public bool pickUp;

			[Token(Token = "0x4000A14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AA898", Offset = "0x9AA898")]
			public AnimatorEvent[] animations;

			[Token(Token = "0x4000A15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AA8D0", Offset = "0x9AA8D0")]
			public Message[] messages;

			[Token(Token = "0x4000A16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AA908", Offset = "0x9AA908")]
			public UnityEvent unityEvent;

			[Token(Token = "0x6000DF9")]
			[Address(RVA = "0xEF48D0", Offset = "0xEF48D0", VA = "0xEF48D0")]
			public void Activate(Transform t)
			{
			}

			[Token(Token = "0x6000DFA")]
			[Address(RVA = "0xEF6924", Offset = "0xEF6924", VA = "0xEF6924")]
			public InteractionEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001B0")]
		public class Message
		{
			[Token(Token = "0x4000A17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AA940", Offset = "0x9AA940")]
			public string function;

			[Token(Token = "0x4000A18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AA978", Offset = "0x9AA978")]
			public GameObject recipient;

			[Token(Token = "0x4000A19")]
			private const string empty = "";

			[Token(Token = "0x6000DFB")]
			[Address(RVA = "0xEF6834", Offset = "0xEF6834", VA = "0xEF6834")]
			public void Send(Transform t)
			{
			}

			[Token(Token = "0x6000DFC")]
			[Address(RVA = "0xEF692C", Offset = "0xEF692C", VA = "0xEF692C")]
			public Message()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001B1")]
		public class AnimatorEvent
		{
			[Token(Token = "0x4000A1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AA9B0", Offset = "0x9AA9B0")]
			public Animator animator;

			[Token(Token = "0x4000A1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AA9E8", Offset = "0x9AA9E8")]
			public Animation animation;

			[Token(Token = "0x4000A1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AAA20", Offset = "0x9AAA20")]
			public string animationState;

			[Token(Token = "0x4000A1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AAA58", Offset = "0x9AAA58")]
			public float crossfadeTime;

			[Token(Token = "0x4000A1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AAA90", Offset = "0x9AAA90")]
			public int layer;

			[Token(Token = "0x4000A1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AAAC8", Offset = "0x9AAAC8")]
			public bool resetNormalizedTime;

			[Token(Token = "0x4000A20")]
			private const string empty = "";

			[Token(Token = "0x6000DFD")]
			[Address(RVA = "0xEF6594", Offset = "0xEF6594", VA = "0xEF6594")]
			public void Activate(bool pickUp)
			{
			}

			[Token(Token = "0x6000DFE")]
			[Address(RVA = "0xEF6688", Offset = "0xEF6688", VA = "0xEF6688")]
			private void Activate(Animator animator)
			{
			}

			[Token(Token = "0x6000DFF")]
			[Address(RVA = "0xEF6740", Offset = "0xEF6740", VA = "0xEF6740")]
			private void Activate(Animation animation)
			{
			}

			[Token(Token = "0x6000E00")]
			[Address(RVA = "0xEF6820", Offset = "0xEF6820", VA = "0xEF6820")]
			public AnimatorEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001B2")]
		public class WeightCurve
		{
			[Serializable]
			[Token(Token = "0x20001F0")]
			public enum Type
			{
				[Token(Token = "0x4000B14")]
				PositionWeight,
				[Token(Token = "0x4000B15")]
				RotationWeight,
				[Token(Token = "0x4000B16")]
				PositionOffsetX,
				[Token(Token = "0x4000B17")]
				PositionOffsetY,
				[Token(Token = "0x4000B18")]
				PositionOffsetZ,
				[Token(Token = "0x4000B19")]
				Pull,
				[Token(Token = "0x4000B1A")]
				Reach,
				[Token(Token = "0x4000B1B")]
				RotateBoneWeight,
				[Token(Token = "0x4000B1C")]
				Push,
				[Token(Token = "0x4000B1D")]
				PushParent,
				[Token(Token = "0x4000B1E")]
				PoserWeight,
				[Token(Token = "0x4000B1F")]
				BendGoalWeight
			}

			[Token(Token = "0x4000A21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AAB00", Offset = "0x9AAB00")]
			public Type type;

			[Token(Token = "0x4000A22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AAB38", Offset = "0x9AAB38")]
			public AnimationCurve curve;

			[Token(Token = "0x6000E01")]
			[Address(RVA = "0xEF5DAC", Offset = "0xEF5DAC", VA = "0xEF5DAC")]
			public float GetValue(float timer)
			{
				return default(float);
			}

			[Token(Token = "0x6000E02")]
			[Address(RVA = "0xEF6944", Offset = "0xEF6944", VA = "0xEF6944")]
			public WeightCurve()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001B3")]
		public class Multiplier
		{
			[Token(Token = "0x4000A23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AAB70", Offset = "0x9AAB70")]
			public WeightCurve.Type curve;

			[Token(Token = "0x4000A24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AABA8", Offset = "0x9AABA8")]
			public float multiplier;

			[Token(Token = "0x4000A25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AABE0", Offset = "0x9AABE0")]
			public WeightCurve.Type result;

			[Token(Token = "0x6000E03")]
			[Address(RVA = "0xEF648C", Offset = "0xEF648C", VA = "0xEF648C")]
			public float GetValue(WeightCurve weightCurve, float timer)
			{
				return default(float);
			}

			[Token(Token = "0x6000E04")]
			[Address(RVA = "0xEF6934", Offset = "0xEF6934", VA = "0xEF6934")]
			public Multiplier()
			{
			}
		}

		[Token(Token = "0x4000429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A78CC", Offset = "0x9A78CC")]
		public Transform otherLookAtTarget;

		[Token(Token = "0x400042A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7904", Offset = "0x9A7904")]
		public Transform otherTargetsRoot;

		[Token(Token = "0x400042B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A793C", Offset = "0x9A793C")]
		public Transform positionOffsetSpace;

		[Token(Token = "0x400042C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public WeightCurve[] weightCurves;

		[Token(Token = "0x400042D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Multiplier[] multipliers;

		[Token(Token = "0x400042E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public InteractionEvent[] events;

		[Token(Token = "0x400042F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7974", Offset = "0x9A7974")]
		private float <length>k__BackingField;

		[Token(Token = "0x4000430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7984", Offset = "0x9A7984")]
		private InteractionSystem <lastUsedInteractionSystem>k__BackingField;

		[Token(Token = "0x4000431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private InteractionTarget[] targets;

		[Token(Token = "0x170000BC")]
		public float length
		{
			[Token(Token = "0x60009DE")]
			[Address(RVA = "0xEF587C", Offset = "0xEF587C", VA = "0xEF587C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AE8AC", Offset = "0x9AE8AC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60009DF")]
			[Address(RVA = "0xEF5884", Offset = "0xEF5884", VA = "0xEF5884")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AE8BC", Offset = "0x9AE8BC")]
			private set
			{
			}
		}

		[Token(Token = "0x170000BD")]
		public InteractionSystem lastUsedInteractionSystem
		{
			[Token(Token = "0x60009E0")]
			[Address(RVA = "0xEF588C", Offset = "0xEF588C", VA = "0xEF588C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AE8CC", Offset = "0x9AE8CC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009E1")]
			[Address(RVA = "0xEF5894", Offset = "0xEF5894", VA = "0xEF5894")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AE8DC", Offset = "0x9AE8DC")]
			private set
			{
			}
		}

		[Token(Token = "0x170000BE")]
		public Transform lookAtTarget
		{
			[Token(Token = "0x60009E3")]
			[Address(RVA = "0xEF5AB0", Offset = "0xEF5AB0", VA = "0xEF5AB0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BF")]
		public Transform targetsRoot
		{
			[Token(Token = "0x60009EB")]
			[Address(RVA = "0xEF4C50", Offset = "0xEF4C50", VA = "0xEF4C50")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009D6")]
		[Address(RVA = "0xEF561C", Offset = "0xEF561C", VA = "0xEF561C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE6EC", Offset = "0x9AE6EC")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0xEF5668", Offset = "0xEF5668", VA = "0xEF5668")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE724", Offset = "0x9AE724")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60009D8")]
		[Address(RVA = "0xEF56B4", Offset = "0xEF56B4", VA = "0xEF56B4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE75C", Offset = "0x9AE75C")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x60009D9")]
		[Address(RVA = "0xEF5700", Offset = "0xEF5700", VA = "0xEF5700")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE794", Offset = "0x9AE794")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x60009DA")]
		[Address(RVA = "0xEF574C", Offset = "0xEF574C", VA = "0xEF574C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE7CC", Offset = "0x9AE7CC")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x60009DB")]
		[Address(RVA = "0xEF5798", Offset = "0xEF5798", VA = "0xEF5798")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE804", Offset = "0x9AE804")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x60009DC")]
		[Address(RVA = "0xEF57E4", Offset = "0xEF57E4", VA = "0xEF57E4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE83C", Offset = "0x9AE83C")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60009DD")]
		[Address(RVA = "0xEF5830", Offset = "0xEF5830", VA = "0xEF5830")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE874", Offset = "0x9AE874")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60009E2")]
		[Address(RVA = "0xEF589C", Offset = "0xEF589C", VA = "0xEF589C")]
		public void Initiate()
		{
		}

		[Token(Token = "0x60009E4")]
		[Address(RVA = "0xEF5B40", Offset = "0xEF5B40", VA = "0xEF5B40")]
		public InteractionTarget GetTarget(FullBodyBipedEffector effectorType, InteractionSystem interactionSystem)
		{
			return null;
		}

		[Token(Token = "0x60009E5")]
		[Address(RVA = "0xEF3024", Offset = "0xEF3024", VA = "0xEF3024")]
		public bool CurveUsed(WeightCurve.Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E6")]
		[Address(RVA = "0xEF5CC4", Offset = "0xEF5CC4", VA = "0xEF5CC4")]
		public InteractionTarget[] GetTargets()
		{
			return null;
		}

		[Token(Token = "0x60009E7")]
		[Address(RVA = "0xEF2ED8", Offset = "0xEF2ED8", VA = "0xEF2ED8")]
		public Transform GetTarget(FullBodyBipedEffector effectorType, string tag)
		{
			return null;
		}

		[Token(Token = "0x60009E8")]
		[Address(RVA = "0xEF301C", Offset = "0xEF301C", VA = "0xEF301C")]
		public void OnStartInteraction(InteractionSystem interactionSystem)
		{
		}

		[Token(Token = "0x60009E9")]
		[Address(RVA = "0xEF3CC0", Offset = "0xEF3CC0", VA = "0xEF3CC0")]
		public void Apply(IKSolverFullBodyBiped solver, FullBodyBipedEffector effector, InteractionTarget target, float timer, float weight)
		{
		}

		[Token(Token = "0x60009EA")]
		[Address(RVA = "0xEF4518", Offset = "0xEF4518", VA = "0xEF4518")]
		public float GetValue(WeightCurve.Type weightCurveType, InteractionTarget target, float timer)
		{
			return default(float);
		}

		[Token(Token = "0x60009EC")]
		[Address(RVA = "0xEF64C8", Offset = "0xEF64C8", VA = "0xEF64C8")]
		private void Start()
		{
		}

		[Token(Token = "0x60009ED")]
		[Address(RVA = "0xEF5DC8", Offset = "0xEF5DC8", VA = "0xEF5DC8")]
		private void Apply(IKSolverFullBodyBiped solver, FullBodyBipedEffector effector, WeightCurve.Type type, float value, float weight)
		{
		}

		[Token(Token = "0x60009EE")]
		[Address(RVA = "0xEF5CCC", Offset = "0xEF5CCC", VA = "0xEF5CCC")]
		private Transform GetTarget(FullBodyBipedEffector effectorType)
		{
			return null;
		}

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0xEF6424", Offset = "0xEF6424", VA = "0xEF6424")]
		private int GetWeightCurveIndex(WeightCurve.Type weightCurveType)
		{
			return default(int);
		}

		[Token(Token = "0x60009F0")]
		[Address(RVA = "0xEF64CC", Offset = "0xEF64CC", VA = "0xEF64CC")]
		private int GetMultiplierIndex(WeightCurve.Type weightCurveType)
		{
			return default(int);
		}

		[Token(Token = "0x60009F1")]
		[Address(RVA = "0xEF6534", Offset = "0xEF6534", VA = "0xEF6534")]
		public InteractionObject()
		{
		}
	}
	[Token(Token = "0x20000A5")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x9A47B8", Offset = "0x9A47B8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A47B8", Offset = "0x9A47B8")]
	public class InteractionSystem : MonoBehaviour
	{
		[Token(Token = "0x20001B4")]
		public delegate void InteractionDelegate(FullBodyBipedEffector effectorType, InteractionObject interactionObject);

		[Token(Token = "0x20001B5")]
		public delegate void InteractionEventDelegate(FullBodyBipedEffector effectorType, InteractionObject interactionObject, InteractionObject.InteractionEvent interactionEvent);

		[Token(Token = "0x4000432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7994", Offset = "0x9A7994")]
		public string targetTag;

		[Token(Token = "0x4000433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A79CC", Offset = "0x9A79CC")]
		public float fadeInTime;

		[Token(Token = "0x4000434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7A04", Offset = "0x9A7A04")]
		public float speed;

		[Token(Token = "0x4000435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7A3C", Offset = "0x9A7A3C")]
		public float resetToDefaultsSpeed;

		[Token(Token = "0x4000436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x9A7A74", Offset = "0x9A7A74")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7A74", Offset = "0x9A7A74")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x9A7A74", Offset = "0x9A7A74")]
		public Collider characterCollider;

		[Token(Token = "0x4000437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7AF8", Offset = "0x9A7AF8")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x9A7AF8", Offset = "0x9A7AF8")]
		public Transform FPSCamera;

		[Token(Token = "0x4000438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7B58", Offset = "0x9A7B58")]
		public LayerMask camRaycastLayers;

		[Token(Token = "0x4000439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7B90", Offset = "0x9A7B90")]
		public float camRaycastDistance;

		[Token(Token = "0x400043A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7BC8", Offset = "0x9A7BC8")]
		private List<InteractionTrigger> <triggersInRange>k__BackingField;

		[Token(Token = "0x400043B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<InteractionTrigger> inContact;

		[Token(Token = "0x400043C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<int> bestRangeIndexes;

		[Token(Token = "0x400043D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public InteractionDelegate OnInteractionStart;

		[Token(Token = "0x400043E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public InteractionDelegate OnInteractionPause;

		[Token(Token = "0x400043F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public InteractionDelegate OnInteractionPickUp;

		[Token(Token = "0x4000440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public InteractionDelegate OnInteractionResume;

		[Token(Token = "0x4000441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public InteractionDelegate OnInteractionStop;

		[Token(Token = "0x4000442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public InteractionEventDelegate OnInteractionEvent;

		[Token(Token = "0x4000443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public RaycastHit raycastHit;

		[Token(Token = "0x4000444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x9A7BD8", Offset = "0x9A7BD8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7BD8", Offset = "0x9A7BD8")]
		[SerializeField]
		private FullBodyBipedIK fullBody;

		[Token(Token = "0x4000445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7C38", Offset = "0x9A7C38")]
		public InteractionLookAt lookAt;

		[Token(Token = "0x4000446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private InteractionEffector[] interactionEffectors;

		[Token(Token = "0x4000447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool initiated;

		[Token(Token = "0x4000448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Collider lastCollider;

		[Token(Token = "0x4000449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Collider c;

		[Token(Token = "0x170000C0")]
		public bool inInteraction
		{
			[Token(Token = "0x60009FA")]
			[Address(RVA = "0xEF6BAC", Offset = "0xEF6BAC", VA = "0xEF6BAC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C1")]
		public FullBodyBipedIK ik
		{
			[Token(Token = "0x6000A14")]
			[Address(RVA = "0xEF87C4", Offset = "0xEF87C4", VA = "0xEF87C4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A15")]
			[Address(RVA = "0xEF87CC", Offset = "0xEF87CC", VA = "0xEF87CC")]
			set
			{
			}
		}

		[Token(Token = "0x170000C2")]
		public List<InteractionTrigger> triggersInRange
		{
			[Token(Token = "0x6000A16")]
			[Address(RVA = "0xEF87D4", Offset = "0xEF87D4", VA = "0xEF87D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AEAAC", Offset = "0x9AEAAC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A17")]
			[Address(RVA = "0xEF87DC", Offset = "0xEF87DC", VA = "0xEF87DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AEABC", Offset = "0x9AEABC")]
			private set
			{
			}
		}

		[Token(Token = "0x60009F2")]
		[Address(RVA = "0xEF694C", Offset = "0xEF694C", VA = "0xEF694C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE8EC", Offset = "0x9AE8EC")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0xEF6998", Offset = "0xEF6998", VA = "0xEF6998")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE924", Offset = "0x9AE924")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60009F4")]
		[Address(RVA = "0xEF69E4", Offset = "0xEF69E4", VA = "0xEF69E4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE95C", Offset = "0x9AE95C")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x60009F5")]
		[Address(RVA = "0xEF6A30", Offset = "0xEF6A30", VA = "0xEF6A30")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE994", Offset = "0x9AE994")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x60009F6")]
		[Address(RVA = "0xEF6A7C", Offset = "0xEF6A7C", VA = "0xEF6A7C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AE9CC", Offset = "0x9AE9CC")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x60009F7")]
		[Address(RVA = "0xEF6AC8", Offset = "0xEF6AC8", VA = "0xEF6AC8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AEA04", Offset = "0x9AEA04")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x60009F8")]
		[Address(RVA = "0xEF6B14", Offset = "0xEF6B14", VA = "0xEF6B14")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AEA3C", Offset = "0x9AEA3C")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60009F9")]
		[Address(RVA = "0xEF6B60", Offset = "0xEF6B60", VA = "0xEF6B60")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AEA74", Offset = "0x9AEA74")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60009FB")]
		[Address(RVA = "0xEF6D3C", Offset = "0xEF6D3C", VA = "0xEF6D3C")]
		public bool IsInInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x60009FC")]
		[Address(RVA = "0xEF6E08", Offset = "0xEF6E08", VA = "0xEF6E08")]
		public bool IsPaused(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x60009FD")]
		[Address(RVA = "0xEF6ED4", Offset = "0xEF6ED4", VA = "0xEF6ED4")]
		public bool IsPaused()
		{
			return default(bool);
		}

		[Token(Token = "0x60009FE")]
		[Address(RVA = "0xEF6F80", Offset = "0xEF6F80", VA = "0xEF6F80")]
		public bool IsInSync()
		{
			return default(bool);
		}

		[Token(Token = "0x60009FF")]
		[Address(RVA = "0xEF7078", Offset = "0xEF7078", VA = "0xEF7078")]
		public bool StartInteraction(FullBodyBipedEffector effectorType, InteractionObject interactionObject, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A00")]
		[Address(RVA = "0xEF7194", Offset = "0xEF7194", VA = "0xEF7194")]
		public bool PauseInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A01")]
		[Address(RVA = "0xEF7224", Offset = "0xEF7224", VA = "0xEF7224")]
		public bool ResumeInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A02")]
		[Address(RVA = "0xEF72B4", Offset = "0xEF72B4", VA = "0xEF72B4")]
		public bool StopInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A03")]
		[Address(RVA = "0xEF7344", Offset = "0xEF7344", VA = "0xEF7344")]
		public void PauseAll()
		{
		}

		[Token(Token = "0x6000A04")]
		[Address(RVA = "0xEF73B8", Offset = "0xEF73B8", VA = "0xEF73B8")]
		public void ResumeAll()
		{
		}

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0xEF742C", Offset = "0xEF742C", VA = "0xEF742C")]
		public void StopAll()
		{
		}

		[Token(Token = "0x6000A06")]
		[Address(RVA = "0xEF7494", Offset = "0xEF7494", VA = "0xEF7494")]
		public InteractionObject GetInteractionObject(FullBodyBipedEffector effectorType)
		{
			return null;
		}

		[Token(Token = "0x6000A07")]
		[Address(RVA = "0xEF7520", Offset = "0xEF7520", VA = "0xEF7520")]
		public float GetProgress(FullBodyBipedEffector effectorType)
		{
			return default(float);
		}

		[Token(Token = "0x6000A08")]
		[Address(RVA = "0xEF75D4", Offset = "0xEF75D4", VA = "0xEF75D4")]
		public float GetMinActiveProgress()
		{
			return default(float);
		}

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0xEF76B8", Offset = "0xEF76B8", VA = "0xEF76B8")]
		public bool TriggerInteraction(int index, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A0A")]
		[Address(RVA = "0xEF795C", Offset = "0xEF795C", VA = "0xEF795C")]
		public bool TriggerInteraction(int index, bool interrupt, out InteractionObject interactionObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0xEF7B34", Offset = "0xEF7B34", VA = "0xEF7B34")]
		public bool TriggerInteraction(int index, bool interrupt, out InteractionTarget interactionTarget)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0xEF7DA8", Offset = "0xEF7DA8", VA = "0xEF7DA8")]
		public InteractionTrigger.Range GetClosestInteractionRange()
		{
			return null;
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0xEF809C", Offset = "0xEF809C", VA = "0xEF809C")]
		public InteractionObject GetClosestInteractionObjectInRange()
		{
			return null;
		}

		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0xEF80E0", Offset = "0xEF80E0", VA = "0xEF80E0")]
		public InteractionTarget GetClosestInteractionTargetInRange()
		{
			return null;
		}

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0xEF8158", Offset = "0xEF8158", VA = "0xEF8158")]
		public InteractionObject[] GetClosestInteractionObjectsInRange()
		{
			return null;
		}

		[Token(Token = "0x6000A10")]
		[Address(RVA = "0xEF8278", Offset = "0xEF8278", VA = "0xEF8278")]
		public InteractionTarget[] GetClosestInteractionTargetsInRange()
		{
			return null;
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0xEF83F0", Offset = "0xEF83F0", VA = "0xEF83F0")]
		public bool TriggerEffectorsReady(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A12")]
		[Address(RVA = "0xEF8698", Offset = "0xEF8698", VA = "0xEF8698")]
		public InteractionTrigger.Range GetTriggerRange(int index)
		{
			return null;
		}

		[Token(Token = "0x6000A13")]
		[Address(RVA = "0xEF7EA8", Offset = "0xEF7EA8", VA = "0xEF7EA8")]
		public int GetClosestTriggerIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6000A18")]
		[Address(RVA = "0xEF87E4", Offset = "0xEF87E4", VA = "0xEF87E4")]
		public void Start()
		{
		}

		[Token(Token = "0x6000A19")]
		[Address(RVA = "0xEF8E98", Offset = "0xEF8E98", VA = "0xEF8E98")]
		private void InteractionPause(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0xEF8EB8", Offset = "0xEF8EB8", VA = "0xEF8EB8")]
		private void InteractionResume(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000A1B")]
		[Address(RVA = "0xEF8ED4", Offset = "0xEF8ED4", VA = "0xEF8ED4")]
		private void InteractionStop(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000A1C")]
		[Address(RVA = "0xEF8EF0", Offset = "0xEF8EF0", VA = "0xEF8EF0")]
		private void LookAtInteraction(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000A1D")]
		[Address(RVA = "0xEF8F50", Offset = "0xEF8F50", VA = "0xEF8F50")]
		public void OnTriggerEnter(Collider c)
		{
		}

		[Token(Token = "0x6000A1E")]
		[Address(RVA = "0xEF906C", Offset = "0xEF906C", VA = "0xEF906C")]
		public void OnTriggerExit(Collider c)
		{
		}

		[Token(Token = "0x6000A1F")]
		[Address(RVA = "0xEF9168", Offset = "0xEF9168", VA = "0xEF9168")]
		private bool ContactIsInRange(int index, out int bestRangeIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A20")]
		[Address(RVA = "0xEF94C8", Offset = "0xEF94C8", VA = "0xEF94C8")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000A21")]
		[Address(RVA = "0xEF95B4", Offset = "0xEF95B4", VA = "0xEF95B4")]
		public void Update()
		{
		}

		[Token(Token = "0x6000A22")]
		[Address(RVA = "0xEF9800", Offset = "0xEF9800", VA = "0xEF9800")]
		private void Raycasting()
		{
		}

		[Token(Token = "0x6000A23")]
		[Address(RVA = "0xEF8C10", Offset = "0xEF8C10", VA = "0xEF8C10")]
		private void UpdateTriggerEventBroadcasting()
		{
		}

		[Token(Token = "0x6000A24")]
		[Address(RVA = "0xEF9940", Offset = "0xEF9940", VA = "0xEF9940")]
		private void UpdateEffectors()
		{
		}

		[Token(Token = "0x6000A25")]
		[Address(RVA = "0xEF9A6C", Offset = "0xEF9A6C", VA = "0xEF9A6C")]
		private void OnPreFBBIK()
		{
		}

		[Token(Token = "0x6000A26")]
		[Address(RVA = "0xEF9B04", Offset = "0xEF9B04", VA = "0xEF9B04")]
		private void OnPostFBBIK()
		{
		}

		[Token(Token = "0x6000A27")]
		[Address(RVA = "0xEF9BDC", Offset = "0xEF9BDC", VA = "0xEF9BDC")]
		private void OnFixTransforms()
		{
		}

		[Token(Token = "0x6000A28")]
		[Address(RVA = "0xEF9BF4", Offset = "0xEF9BF4", VA = "0xEF9BF4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000A29")]
		[Address(RVA = "0xEF6C58", Offset = "0xEF6C58", VA = "0xEF6C58")]
		private bool IsValid(bool log)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A2A")]
		[Address(RVA = "0xEF7858", Offset = "0xEF7858", VA = "0xEF7858")]
		private bool TriggerIndexIsValid(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0xEF9EE4", Offset = "0xEF9EE4", VA = "0xEF9EE4")]
		public InteractionSystem()
		{
		}
	}
	[Token(Token = "0x20000A6")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x9A4818", Offset = "0x9A4818")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4818", Offset = "0x9A4818")]
	public class InteractionTarget : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20001B6")]
		public class Multiplier
		{
			[Token(Token = "0x4000A26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AAC18", Offset = "0x9AAC18")]
			public InteractionObject.WeightCurve.Type curve;

			[Token(Token = "0x4000A27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AAC50", Offset = "0x9AAC50")]
			public float multiplier;

			[Token(Token = "0x6000E0D")]
			[Address(RVA = "0xEFA684", Offset = "0xEFA684", VA = "0xEFA684")]
			public Multiplier()
			{
			}
		}

		[Token(Token = "0x400044A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7C70", Offset = "0x9A7C70")]
		public FullBodyBipedEffector effectorType;

		[Token(Token = "0x400044B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7CA8", Offset = "0x9A7CA8")]
		public Multiplier[] multipliers;

		[Token(Token = "0x400044C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7CE0", Offset = "0x9A7CE0")]
		public float interactionSpeedMlp;

		[Token(Token = "0x400044D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7D18", Offset = "0x9A7D18")]
		public Transform pivot;

		[Token(Token = "0x400044E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7D50", Offset = "0x9A7D50")]
		public Vector3 twistAxis;

		[Token(Token = "0x400044F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7D88", Offset = "0x9A7D88")]
		public float twistWeight;

		[Token(Token = "0x4000450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7DC0", Offset = "0x9A7DC0")]
		public float swingWeight;

		[Token(Token = "0x4000451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7DF8", Offset = "0x9A7DF8")]
		public bool rotateOnce;

		[Token(Token = "0x4000452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion defaultLocalRotation;

		[Token(Token = "0x4000453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform lastPivot;

		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0xEFA398", Offset = "0xEFA398", VA = "0xEFA398")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AEACC", Offset = "0x9AEACC")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000A2D")]
		[Address(RVA = "0xEFA3E4", Offset = "0xEFA3E4", VA = "0xEFA3E4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AEB04", Offset = "0x9AEB04")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000A2E")]
		[Address(RVA = "0xEFA430", Offset = "0xEFA430", VA = "0xEFA430")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AEB3C", Offset = "0x9AEB3C")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0xEFA47C", Offset = "0xEFA47C", VA = "0xEFA47C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AEB74", Offset = "0x9AEB74")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x6000A30")]
		[Address(RVA = "0xEFA4C8", Offset = "0xEFA4C8", VA = "0xEFA4C8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AEBAC", Offset = "0x9AEBAC")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x6000A31")]
		[Address(RVA = "0xEFA514", Offset = "0xEFA514", VA = "0xEFA514")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AEBE4", Offset = "0x9AEBE4")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x6000A32")]
		[Address(RVA = "0xEFA560", Offset = "0xEFA560", VA = "0xEFA560")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AEC1C", Offset = "0x9AEC1C")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0xEFA5AC", Offset = "0xEFA5AC", VA = "0xEFA5AC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AEC54", Offset = "0x9AEC54")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000A34")]
		[Address(RVA = "0xEF5D3C", Offset = "0xEF5D3C", VA = "0xEF5D3C")]
		public float GetValue(InteractionObject.WeightCurve.Type curveType)
		{
			return default(float);
		}

		[Token(Token = "0x6000A35")]
		[Address(RVA = "0xEF4CE0", Offset = "0xEF4CE0", VA = "0xEF4CE0")]
		public void ResetRotation()
		{
		}

		[Token(Token = "0x6000A36")]
		[Address(RVA = "0xEF30D8", Offset = "0xEF30D8", VA = "0xEF30D8")]
		public void RotateTo(Vector3 position)
		{
		}

		[Token(Token = "0x6000A37")]
		[Address(RVA = "0xEFA5F8", Offset = "0xEFA5F8", VA = "0xEFA5F8")]
		public InteractionTarget()
		{
		}
	}
	[Token(Token = "0x20000A7")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x9A4878", Offset = "0x9A4878")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4878", Offset = "0x9A4878")]
	public class InteractionTrigger : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20001B7")]
		public class CharacterPosition
		{
			[Token(Token = "0x4000A28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AAC88", Offset = "0x9AAC88")]
			public bool use;

			[Token(Token = "0x4000A29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AACC0", Offset = "0x9AACC0")]
			public Vector2 offset;

			[Token(Token = "0x4000A2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AACF8", Offset = "0x9AACF8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9AACF8", Offset = "0x9AACF8")]
			public float angleOffset;

			[Token(Token = "0x4000A2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AAD54", Offset = "0x9AAD54")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9AAD54", Offset = "0x9AAD54")]
			public float maxAngle;

			[Token(Token = "0x4000A2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AADAC", Offset = "0x9AADAC")]
			public float radius;

			[Token(Token = "0x4000A2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AADE4", Offset = "0x9AADE4")]
			public bool orbit;

			[Token(Token = "0x4000A2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AAE1C", Offset = "0x9AAE1C")]
			public bool fixYAxis;

			[Token(Token = "0x1700013B")]
			public Vector3 offset3D
			{
				[Token(Token = "0x6000E0E")]
				[Address(RVA = "0xEFAEA4", Offset = "0xEFAEA4", VA = "0xEFAEA4")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x1700013C")]
			public Vector3 direction3D
			{
				[Token(Token = "0x6000E0F")]
				[Address(RVA = "0xEFAEE0", Offset = "0xEFAEE0", VA = "0xEFAEE0")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x6000E10")]
			[Address(RVA = "0xEFAFD8", Offset = "0xEFAFD8", VA = "0xEFAFD8")]
			public bool IsInRange(Transform character, Transform trigger, out float error)
			{
				return default(bool);
			}

			[Token(Token = "0x6000E11")]
			[Address(RVA = "0xEFB654", Offset = "0xEFB654", VA = "0xEFB654")]
			public CharacterPosition()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001B8")]
		public class CameraPosition
		{
			[Token(Token = "0x4000A2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AAE54", Offset = "0x9AAE54")]
			public Collider lookAtTarget;

			[Token(Token = "0x4000A30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AAE8C", Offset = "0x9AAE8C")]
			public Vector3 direction;

			[Token(Token = "0x4000A31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AAEC4", Offset = "0x9AAEC4")]
			public float maxDistance;

			[Token(Token = "0x4000A32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AAEFC", Offset = "0x9AAEFC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9AAEFC", Offset = "0x9AAEFC")]
			public float maxAngle;

			[Token(Token = "0x4000A33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AAF54", Offset = "0x9AAF54")]
			public bool fixYAxis;

			[Token(Token = "0x6000E12")]
			[Address(RVA = "0xEFA990", Offset = "0xEFA990", VA = "0xEFA990")]
			public Quaternion GetRotation()
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6000E13")]
			[Address(RVA = "0xEFAB38", Offset = "0xEFAB38", VA = "0xEFAB38")]
			public bool IsInRange(Transform raycastFrom, RaycastHit hit, Transform trigger, out float error)
			{
				return default(bool);
			}

			[Token(Token = "0x6000E14")]
			[Address(RVA = "0xEFAE18", Offset = "0xEFAE18", VA = "0xEFAE18")]
			public CameraPosition()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001B9")]
		public class Range
		{
			[Serializable]
			[Token(Token = "0x20001F1")]
			public class Interaction
			{
				[Token(Token = "0x4000B20")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AC00C", Offset = "0x9AC00C")]
				public InteractionObject interactionObject;

				[Token(Token = "0x4000B21")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AC044", Offset = "0x9AC044")]
				public FullBodyBipedEffector[] effectors;

				[Token(Token = "0x6000EC7")]
				[Address(RVA = "0xEFB678", Offset = "0xEFB678", VA = "0xEFB678")]
				public Interaction()
				{
				}
			}

			[Token(Token = "0x4000A34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[HideInInspector]
			[SerializeField]
			public string name;

			[Token(Token = "0x4000A35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			[SerializeField]
			public bool show;

			[Token(Token = "0x4000A36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AAFFC", Offset = "0x9AAFFC")]
			public CharacterPosition characterPosition;

			[Token(Token = "0x4000A37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB034", Offset = "0x9AB034")]
			public CameraPosition cameraPosition;

			[Token(Token = "0x4000A38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB06C", Offset = "0x9AB06C")]
			public Interaction[] interactions;

			[Token(Token = "0x6000E15")]
			[Address(RVA = "0xEFA80C", Offset = "0xEFA80C", VA = "0xEFA80C")]
			public bool IsInRange(Transform character, Transform raycastFrom, RaycastHit raycastHit, Transform trigger, out float maxError)
			{
				return default(bool);
			}

			[Token(Token = "0x6000E16")]
			[Address(RVA = "0xEFB668", Offset = "0xEFB668", VA = "0xEFB668")]
			public Range()
			{
			}
		}

		[Token(Token = "0x4000454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7E30", Offset = "0x9A7E30")]
		public Range[] ranges;

		[Token(Token = "0x6000A38")]
		[Address(RVA = "0xEFA68C", Offset = "0xEFA68C", VA = "0xEFA68C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AEC8C", Offset = "0x9AEC8C")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000A39")]
		[Address(RVA = "0xEFA6D8", Offset = "0xEFA6D8", VA = "0xEFA6D8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AECC4", Offset = "0x9AECC4")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000A3A")]
		[Address(RVA = "0xEFA724", Offset = "0xEFA724", VA = "0xEFA724")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AECFC", Offset = "0x9AECFC")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x6000A3B")]
		[Address(RVA = "0xEFA770", Offset = "0xEFA770", VA = "0xEFA770")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AED34", Offset = "0x9AED34")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000A3C")]
		[Address(RVA = "0xEFA7BC", Offset = "0xEFA7BC", VA = "0xEFA7BC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AED6C", Offset = "0x9AED6C")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000A3D")]
		[Address(RVA = "0xEFA808", Offset = "0xEFA808", VA = "0xEFA808")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A3E")]
		[Address(RVA = "0xEF930C", Offset = "0xEF930C", VA = "0xEF930C")]
		public int GetBestRangeIndex(Transform character, Transform raycastFrom, RaycastHit raycastHit)
		{
			return default(int);
		}

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0xEFA930", Offset = "0xEFA930", VA = "0xEFA930")]
		public InteractionTrigger()
		{
		}
	}
	[Token(Token = "0x20000A8")]
	public class GenericPoser : Poser
	{
		[Serializable]
		[Token(Token = "0x20001BA")]
		public class Map
		{
			[Token(Token = "0x4000A39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform bone;

			[Token(Token = "0x4000A3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform target;

			[Token(Token = "0x4000A3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Vector3 defaultLocalPosition;

			[Token(Token = "0x4000A3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private Quaternion defaultLocalRotation;

			[Token(Token = "0x6000E17")]
			[Address(RVA = "0xF4E47C", Offset = "0xF4E47C", VA = "0xF4E47C")]
			public Map(Transform bone, Transform target)
			{
			}

			[Token(Token = "0x6000E18")]
			[Address(RVA = "0xF4E880", Offset = "0xF4E880", VA = "0xF4E880")]
			public void StoreDefaultState()
			{
			}

			[Token(Token = "0x6000E19")]
			[Address(RVA = "0xF4E834", Offset = "0xF4E834", VA = "0xF4E834")]
			public void FixTransform()
			{
			}

			[Token(Token = "0x6000E1A")]
			[Address(RVA = "0xF4E62C", Offset = "0xF4E62C", VA = "0xF4E62C")]
			public void Update(float localRotationWeight, float localPositionWeight)
			{
			}
		}

		[Token(Token = "0x4000455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Map[] maps;

		[Token(Token = "0x6000A40")]
		[Address(RVA = "0xF4E194", Offset = "0xF4E194", VA = "0xF4E194", Slot = "7")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AEDA4", Offset = "0x9AEDA4")]
		public override void AutoMapping()
		{
		}

		[Token(Token = "0x6000A41")]
		[Address(RVA = "0xF4E520", Offset = "0xF4E520", VA = "0xF4E520", Slot = "8")]
		protected override void InitiatePoser()
		{
		}

		[Token(Token = "0x6000A42")]
		[Address(RVA = "0xF4E524", Offset = "0xF4E524", VA = "0xF4E524", Slot = "9")]
		protected override void UpdatePoser()
		{
		}

		[Token(Token = "0x6000A43")]
		[Address(RVA = "0xF4E7CC", Offset = "0xF4E7CC", VA = "0xF4E7CC", Slot = "10")]
		protected override void FixPoserTransforms()
		{
		}

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0xF4E4B8", Offset = "0xF4E4B8", VA = "0xF4E4B8")]
		private void StoreDefaultState()
		{
		}

		[Token(Token = "0x6000A45")]
		[Address(RVA = "0xF4E3DC", Offset = "0xF4E3DC", VA = "0xF4E3DC")]
		private Transform GetTargetNamed(string tName, Transform[] array)
		{
			return null;
		}

		[Token(Token = "0x6000A46")]
		[Address(RVA = "0xF4E8D0", Offset = "0xF4E8D0", VA = "0xF4E8D0")]
		public GenericPoser()
		{
		}
	}
	[Token(Token = "0x20000A9")]
	public class HandPoser : Poser
	{
		[Token(Token = "0x4000456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Transform[] children;

		[Token(Token = "0x4000457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform _poseRoot;

		[Token(Token = "0x4000458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform[] poseChildren;

		[Token(Token = "0x4000459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3[] defaultLocalPositions;

		[Token(Token = "0x400045A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion[] defaultLocalRotations;

		[Token(Token = "0x6000A47")]
		[Address(RVA = "0xF58924", Offset = "0xF58924", VA = "0xF58924", Slot = "7")]
		public override void AutoMapping()
		{
		}

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0xF589D8", Offset = "0xF589D8", VA = "0xF589D8", Slot = "8")]
		protected override void InitiatePoser()
		{
		}

		[Token(Token = "0x6000A49")]
		[Address(RVA = "0xF58B90", Offset = "0xF58B90", VA = "0xF58B90", Slot = "10")]
		protected override void FixPoserTransforms()
		{
		}

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0xF58C8C", Offset = "0xF58C8C", VA = "0xF58C8C", Slot = "9")]
		protected override void UpdatePoser()
		{
		}

		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0xF58A34", Offset = "0xF58A34", VA = "0xF58A34")]
		protected void StoreDefaultState()
		{
		}

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0xF5903C", Offset = "0xF5903C", VA = "0xF5903C")]
		public HandPoser()
		{
		}
	}
	[Token(Token = "0x20000AA")]
	public abstract class Poser : SolverManager
	{
		[Token(Token = "0x400045B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform poseRoot;

		[Token(Token = "0x400045C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A7E68", Offset = "0x9A7E68")]
		public float weight;

		[Token(Token = "0x400045D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A7E80", Offset = "0x9A7E80")]
		public float localRotationWeight;

		[Token(Token = "0x400045E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A7E98", Offset = "0x9A7E98")]
		public float localPositionWeight;

		[Token(Token = "0x400045F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool initiated;

		[Token(Token = "0x6000A4D")]
		public abstract void AutoMapping();

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0xEFE228", Offset = "0xEFE228", VA = "0xEFE228")]
		public void UpdateManual()
		{
		}

		[Token(Token = "0x6000A4F")]
		protected abstract void InitiatePoser();

		[Token(Token = "0x6000A50")]
		protected abstract void UpdatePoser();

		[Token(Token = "0x6000A51")]
		protected abstract void FixPoserTransforms();

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0xEFE234", Offset = "0xEFE234", VA = "0xEFE234", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0xEFE288", Offset = "0xEFE288", VA = "0xEFE288", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0xEFE2C4", Offset = "0xEFE2C4", VA = "0xEFE2C4", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0xEFE2DC", Offset = "0xEFE2DC", VA = "0xEFE2DC")]
		protected Poser()
		{
		}
	}
	[Token(Token = "0x20000AB")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x9A48D8", Offset = "0x9A48D8")]
	public class RagdollUtility : MonoBehaviour
	{
		[Token(Token = "0x20001BB")]
		public class Rigidbone
		{
			[Token(Token = "0x4000A3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody r;

			[Token(Token = "0x4000A3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform t;

			[Token(Token = "0x4000A3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Collider collider;

			[Token(Token = "0x4000A40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Joint joint;

			[Token(Token = "0x4000A41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Rigidbody c;

			[Token(Token = "0x4000A42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool updateAnchor;

			[Token(Token = "0x4000A43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector3 deltaPosition;

			[Token(Token = "0x4000A44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Quaternion deltaRotation;

			[Token(Token = "0x4000A45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float deltaTime;

			[Token(Token = "0x4000A46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Vector3 lastPosition;

			[Token(Token = "0x4000A47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Quaternion lastRotation;

			[Token(Token = "0x6000E1B")]
			[Address(RVA = "0xEFE860", Offset = "0xEFE860", VA = "0xEFE860")]
			public Rigidbone(Rigidbody r)
			{
			}

			[Token(Token = "0x6000E1C")]
			[Address(RVA = "0xEFF46C", Offset = "0xEFF46C", VA = "0xEFF46C")]
			public void RecordVelocity()
			{
			}

			[Token(Token = "0x6000E1D")]
			[Address(RVA = "0xEFF250", Offset = "0xEFF250", VA = "0xEFF250")]
			public void WakeUp(float velocityWeight, float angularVelocityWeight)
			{
			}
		}

		[Token(Token = "0x20001BC")]
		public class Child
		{
			[Token(Token = "0x4000A48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform t;

			[Token(Token = "0x4000A49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 localPosition;

			[Token(Token = "0x4000A4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Quaternion localRotation;

			[Token(Token = "0x6000E1E")]
			[Address(RVA = "0xEFE9BC", Offset = "0xEFE9BC", VA = "0xEFE9BC")]
			public Child(Transform transform)
			{
			}

			[Token(Token = "0x6000E1F")]
			[Address(RVA = "0xEFF608", Offset = "0xEFF608", VA = "0xEFF608")]
			public void FixTransform(float weight)
			{
			}

			[Token(Token = "0x6000E20")]
			[Address(RVA = "0xEFF5B8", Offset = "0xEFF5B8", VA = "0xEFF5B8")]
			public void StoreLocalState()
			{
			}
		}

		[Token(Token = "0x20001BD")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A4D48", Offset = "0x9A4D48")]
		private sealed class <DisableRagdollSmooth>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RagdollUtility <>4__this;

			[Token(Token = "0x1700013D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E24")]
				[Address(RVA = "0xEFFBE8", Offset = "0xEFFBE8", VA = "0xEFFBE8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700013E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E26")]
				[Address(RVA = "0xEFFC50", Offset = "0xEFFC50", VA = "0xEFFC50", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E21")]
			[Address(RVA = "0xEFEA1C", Offset = "0xEFEA1C", VA = "0xEFEA1C")]
			[DebuggerHidden]
			public <DisableRagdollSmooth>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x6000E22")]
			[Address(RVA = "0xEFF9A0", Offset = "0xEFF9A0", VA = "0xEFF9A0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E23")]
			[Address(RVA = "0xEFF9A4", Offset = "0xEFF9A4", VA = "0xEFF9A4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E25")]
			[Address(RVA = "0xEFFBF0", Offset = "0xEFFBF0", VA = "0xEFFBF0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7EB0", Offset = "0x9A7EB0")]
		public IK ik;

		[Token(Token = "0x4000461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7EE8", Offset = "0x9A7EE8")]
		public float ragdollToAnimationTime;

		[Token(Token = "0x4000462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7F20", Offset = "0x9A7F20")]
		public bool applyIkOnRagdoll;

		[Token(Token = "0x4000463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7F58", Offset = "0x9A7F58")]
		public float applyVelocity;

		[Token(Token = "0x4000464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7F90", Offset = "0x9A7F90")]
		public float applyAngularVelocity;

		[Token(Token = "0x4000465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Animator animator;

		[Token(Token = "0x4000466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbone[] rigidbones;

		[Token(Token = "0x4000467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Child[] children;

		[Token(Token = "0x4000468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool enableRagdollFlag;

		[Token(Token = "0x4000469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private AnimatorUpdateMode animatorUpdateMode;

		[Token(Token = "0x400046A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IK[] allIKComponents;

		[Token(Token = "0x400046B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool[] fixTransforms;

		[Token(Token = "0x400046C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float ragdollWeight;

		[Token(Token = "0x400046D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float ragdollWeightV;

		[Token(Token = "0x400046E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool fixedFrame;

		[Token(Token = "0x400046F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool[] disabledIKComponents;

		[Token(Token = "0x170000C3")]
		private bool isRagdoll
		{
			[Token(Token = "0x6000A61")]
			[Address(RVA = "0xEFE324", Offset = "0xEFE324", VA = "0xEFE324")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C4")]
		private bool ikUsed
		{
			[Token(Token = "0x6000A63")]
			[Address(RVA = "0xEFEE08", Offset = "0xEFEE08", VA = "0xEFEE08")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0xEFE2EC", Offset = "0xEFE2EC", VA = "0xEFE2EC")]
		public void EnableRagdoll()
		{
		}

		[Token(Token = "0x6000A57")]
		[Address(RVA = "0xEFE39C", Offset = "0xEFE39C", VA = "0xEFE39C")]
		public void DisableRagdoll()
		{
		}

		[Token(Token = "0x6000A58")]
		[Address(RVA = "0xEFE4CC", Offset = "0xEFE4CC", VA = "0xEFE4CC")]
		public void Start()
		{
		}

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0xEFE45C", Offset = "0xEFE45C", VA = "0xEFE45C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x9AEDDC", Offset = "0x9AEDDC")]
		private IEnumerator DisableRagdollSmooth()
		{
			return null;
		}

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0xEFEA48", Offset = "0xEFEA48", VA = "0xEFEA48")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0xEFEC94", Offset = "0xEFEC94", VA = "0xEFEC94")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000A5C")]
		[Address(RVA = "0xEFED4C", Offset = "0xEFED4C", VA = "0xEFED4C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000A5D")]
		[Address(RVA = "0xEFEF8C", Offset = "0xEFEF8C", VA = "0xEFEF8C")]
		private void AfterLastIK()
		{
		}

		[Token(Token = "0x6000A5E")]
		[Address(RVA = "0xEFEDCC", Offset = "0xEFEDCC", VA = "0xEFEDCC")]
		private void AfterAnimation()
		{
		}

		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0xEFEF48", Offset = "0xEFEF48", VA = "0xEFEF48")]
		private void OnFinalPose()
		{
		}

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0xEFF028", Offset = "0xEFF028", VA = "0xEFF028")]
		private void RagdollEnabler()
		{
		}

		[Token(Token = "0x6000A62")]
		[Address(RVA = "0xEFEFC0", Offset = "0xEFEFC0", VA = "0xEFEFC0")]
		private void RecordVelocities()
		{
		}

		[Token(Token = "0x6000A64")]
		[Address(RVA = "0xEFE3F4", Offset = "0xEFE3F4", VA = "0xEFE3F4")]
		private void StoreLocalState()
		{
		}

		[Token(Token = "0x6000A65")]
		[Address(RVA = "0xEFECD4", Offset = "0xEFECD4", VA = "0xEFECD4")]
		private void FixTransforms(float weight)
		{
		}

		[Token(Token = "0x6000A66")]
		[Address(RVA = "0xEFF7D0", Offset = "0xEFF7D0", VA = "0xEFF7D0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000A67")]
		[Address(RVA = "0xEFF8D4", Offset = "0xEFF8D4", VA = "0xEFF8D4")]
		public RagdollUtility()
		{
		}
	}
	[Token(Token = "0x20000AC")]
	public abstract class RotationLimit : MonoBehaviour
	{
		[Token(Token = "0x4000470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 axis;

		[Token(Token = "0x4000471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[HideInInspector]
		public Quaternion defaultLocalRotation;

		[Token(Token = "0x4000472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7FD8", Offset = "0x9A7FD8")]
		private bool <defaultLocalRotationOverride>k__BackingField;

		[Token(Token = "0x4000473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool initiated;

		[Token(Token = "0x4000474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		private bool applicationQuit;

		[Token(Token = "0x4000475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
		private bool defaultLocalRotationSet;

		[Token(Token = "0x170000C5")]
		public Vector3 secondaryAxis
		{
			[Token(Token = "0x6000A6D")]
			[Address(RVA = "0xF014DC", Offset = "0xF014DC", VA = "0xF014DC")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000C6")]
		public Vector3 crossAxis
		{
			[Token(Token = "0x6000A6E")]
			[Address(RVA = "0xF01518", Offset = "0xF01518", VA = "0xF01518")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000C7")]
		public bool defaultLocalRotationOverride
		{
			[Token(Token = "0x6000A6F")]
			[Address(RVA = "0xF015E8", Offset = "0xF015E8", VA = "0xF015E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AEE40", Offset = "0x9AEE40")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A70")]
			[Address(RVA = "0xF015F0", Offset = "0xF015F0", VA = "0xF015F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AEE50", Offset = "0x9AEE50")]
			private set
			{
			}
		}

		[Token(Token = "0x6000A68")]
		[Address(RVA = "0xF01140", Offset = "0xF01140", VA = "0xF01140")]
		public void SetDefaultLocalRotation()
		{
		}

		[Token(Token = "0x6000A69")]
		[Address(RVA = "0xF01188", Offset = "0xF01188", VA = "0xF01188")]
		public void SetDefaultLocalRotation(Quaternion localRotation)
		{
		}

		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0xF011A0", Offset = "0xF011A0", VA = "0xF011A0")]
		public Quaternion GetLimitedLocalRotation(Quaternion localRotation, out bool changed)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000A6B")]
		[Address(RVA = "0xF01434", Offset = "0xF01434", VA = "0xF01434")]
		public bool Apply()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A6C")]
		[Address(RVA = "0xF014A4", Offset = "0xF014A4", VA = "0xF014A4")]
		public void Disable()
		{
		}

		[Token(Token = "0x6000A71")]
		protected abstract Quaternion LimitRotation(Quaternion rotation);

		[Token(Token = "0x6000A72")]
		[Address(RVA = "0xF01344", Offset = "0xF01344", VA = "0xF01344")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A73")]
		[Address(RVA = "0xF015FC", Offset = "0xF015FC", VA = "0xF015FC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000A74")]
		[Address(RVA = "0xF01600", Offset = "0xF01600", VA = "0xF01600")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x6000A75")]
		[Address(RVA = "0xF01634", Offset = "0xF01634", VA = "0xF01634")]
		protected static Quaternion Limit1DOF(Quaternion rotation, Vector3 axis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0xF01718", Offset = "0xF01718", VA = "0xF01718")]
		protected static Quaternion LimitTwist(Quaternion rotation, Vector3 axis, Vector3 orthoAxis, float twistLimit)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000A77")]
		[Address(RVA = "0xF01994", Offset = "0xF01994", VA = "0xF01994")]
		protected static float GetOrthogonalAngle(Vector3 v1, Vector3 v2, Vector3 normal)
		{
			return default(float);
		}

		[Token(Token = "0x6000A78")]
		[Address(RVA = "0xF01A50", Offset = "0xF01A50", VA = "0xF01A50")]
		protected RotationLimit()
		{
		}
	}
	[Token(Token = "0x20000AD")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x9A493C", Offset = "0x9A493C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A493C", Offset = "0x9A493C")]
	public class RotationLimitAngle : RotationLimit
	{
		[Token(Token = "0x4000476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A7FE8", Offset = "0x9A7FE8")]
		public float limit;

		[Token(Token = "0x4000477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A8004", Offset = "0x9A8004")]
		public float twistLimit;

		[Token(Token = "0x6000A79")]
		[Address(RVA = "0xF01AC8", Offset = "0xF01AC8", VA = "0xF01AC8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AEE60", Offset = "0x9AEE60")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000A7A")]
		[Address(RVA = "0xF01B14", Offset = "0xF01B14", VA = "0xF01B14")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AEE98", Offset = "0x9AEE98")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0xF01B60", Offset = "0xF01B60", VA = "0xF01B60")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AEED0", Offset = "0x9AEED0")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0xF01BAC", Offset = "0xF01BAC", VA = "0xF01BAC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AEF08", Offset = "0x9AEF08")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000A7D")]
		[Address(RVA = "0xF01BF8", Offset = "0xF01BF8", VA = "0xF01BF8", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0xF01CB0", Offset = "0xF01CB0", VA = "0xF01CB0")]
		private Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0xF01EF8", Offset = "0xF01EF8", VA = "0xF01EF8")]
		public RotationLimitAngle()
		{
		}
	}
	[Token(Token = "0x20000AE")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x9A499C", Offset = "0x9A499C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A499C", Offset = "0x9A499C")]
	public class RotationLimitHinge : RotationLimit
	{
		[Token(Token = "0x4000478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool useLimits;

		[Token(Token = "0x4000479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float min;

		[Token(Token = "0x400047A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float max;

		[Token(Token = "0x400047B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[HideInInspector]
		public float zeroAxisDisplayOffset;

		[Token(Token = "0x400047C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Quaternion lastRotation;

		[Token(Token = "0x400047D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float lastAngle;

		[Token(Token = "0x6000A80")]
		[Address(RVA = "0xF01F08", Offset = "0xF01F08", VA = "0xF01F08")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AEF40", Offset = "0x9AEF40")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000A81")]
		[Address(RVA = "0xF01F54", Offset = "0xF01F54", VA = "0xF01F54")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AEF78", Offset = "0x9AEF78")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0xF01FA0", Offset = "0xF01FA0", VA = "0xF01FA0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AEFB0", Offset = "0x9AEFB0")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0xF01FEC", Offset = "0xF01FEC", VA = "0xF01FEC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AEFE8", Offset = "0x9AEFE8")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000A84")]
		[Address(RVA = "0xF02038", Offset = "0xF02038", VA = "0xF02038", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000A85")]
		[Address(RVA = "0xF02060", Offset = "0xF02060", VA = "0xF02060")]
		private Quaternion LimitHinge(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000A86")]
		[Address(RVA = "0xF02360", Offset = "0xF02360", VA = "0xF02360")]
		public RotationLimitHinge()
		{
		}
	}
	[Token(Token = "0x20000AF")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x9A49FC", Offset = "0x9A49FC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A49FC", Offset = "0x9A49FC")]
	public class RotationLimitPolygonal : RotationLimit
	{
		[Serializable]
		[Token(Token = "0x20001BE")]
		public class ReachCone
		{
			[Token(Token = "0x4000A4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3[] tetrahedron;

			[Token(Token = "0x4000A4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float volume;

			[Token(Token = "0x4000A50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 S;

			[Token(Token = "0x4000A51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 B;

			[Token(Token = "0x1700013F")]
			public Vector3 o
			{
				[Token(Token = "0x6000E27")]
				[Address(RVA = "0xF04308", Offset = "0xF04308", VA = "0xF04308")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x17000140")]
			public Vector3 a
			{
				[Token(Token = "0x6000E28")]
				[Address(RVA = "0xF04340", Offset = "0xF04340", VA = "0xF04340")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x17000141")]
			public Vector3 b
			{
				[Token(Token = "0x6000E29")]
				[Address(RVA = "0xF0437C", Offset = "0xF0437C", VA = "0xF0437C")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x17000142")]
			public Vector3 c
			{
				[Token(Token = "0x6000E2A")]
				[Address(RVA = "0xF043B8", Offset = "0xF043B8", VA = "0xF043B8")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x17000143")]
			public bool isValid
			{
				[Token(Token = "0x6000E2C")]
				[Address(RVA = "0xF0346C", Offset = "0xF0346C", VA = "0xF0346C")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000E2B")]
			[Address(RVA = "0xF03AB8", Offset = "0xF03AB8", VA = "0xF03AB8")]
			public ReachCone(Vector3 _o, Vector3 _a, Vector3 _b, Vector3 _c)
			{
			}

			[Token(Token = "0x6000E2D")]
			[Address(RVA = "0xF03C18", Offset = "0xF03C18", VA = "0xF03C18")]
			public void Calculate()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001BF")]
		public class LimitPoint
		{
			[Token(Token = "0x4000A52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 point;

			[Token(Token = "0x4000A53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float tangentWeight;

			[Token(Token = "0x6000E2E")]
			[Address(RVA = "0xF0347C", Offset = "0xF0347C", VA = "0xF0347C")]
			public LimitPoint()
			{
			}
		}

		[Token(Token = "0x400047E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A8030", Offset = "0x9A8030")]
		public float twistLimit;

		[Token(Token = "0x400047F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A804C", Offset = "0x9A804C")]
		public int smoothIterations;

		[Token(Token = "0x4000480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		public LimitPoint[] points;

		[Token(Token = "0x4000481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[HideInInspector]
		public Vector3[] P;

		[Token(Token = "0x4000482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[HideInInspector]
		public ReachCone[] reachCones;

		[Token(Token = "0x6000A87")]
		[Address(RVA = "0xF023E8", Offset = "0xF023E8", VA = "0xF023E8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AF020", Offset = "0x9AF020")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000A88")]
		[Address(RVA = "0xF02434", Offset = "0xF02434", VA = "0xF02434")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AF058", Offset = "0x9AF058")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000A89")]
		[Address(RVA = "0xF02480", Offset = "0xF02480", VA = "0xF02480")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AF090", Offset = "0x9AF090")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0xF024CC", Offset = "0xF024CC", VA = "0xF024CC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AF0C8", Offset = "0x9AF0C8")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000A8B")]
		[Address(RVA = "0xF02518", Offset = "0xF02518", VA = "0xF02518")]
		public void SetLimitPoints(LimitPoint[] points)
		{
		}

		[Token(Token = "0x6000A8C")]
		[Address(RVA = "0xF02A00", Offset = "0xF02A00", VA = "0xF02A00", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000A8D")]
		[Address(RVA = "0xF02AF8", Offset = "0xF02AF8", VA = "0xF02AF8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A8E")]
		[Address(RVA = "0xF030B8", Offset = "0xF030B8", VA = "0xF030B8")]
		public void ResetToDefault()
		{
		}

		[Token(Token = "0x6000A8F")]
		[Address(RVA = "0xF025B8", Offset = "0xF025B8", VA = "0xF025B8")]
		public void BuildReachCones()
		{
		}

		[Token(Token = "0x6000A90")]
		[Address(RVA = "0xF03500", Offset = "0xF03500", VA = "0xF03500")]
		private Vector3[] SmoothPoints()
		{
			return null;
		}

		[Token(Token = "0x6000A91")]
		[Address(RVA = "0xF03DD8", Offset = "0xF03DD8", VA = "0xF03DD8")]
		private float GetScalar(int k)
		{
			return default(float);
		}

		[Token(Token = "0x6000A92")]
		[Address(RVA = "0xF03E1C", Offset = "0xF03E1C", VA = "0xF03E1C")]
		private Vector3 PointToTangentPlane(Vector3 p, float r)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A93")]
		[Address(RVA = "0xF03F64", Offset = "0xF03F64", VA = "0xF03F64")]
		private Vector3 TangentPointToSphere(Vector3 q, float r)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A94")]
		[Address(RVA = "0xF02D7C", Offset = "0xF02D7C", VA = "0xF02D7C")]
		private Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000A95")]
		[Address(RVA = "0xF040F4", Offset = "0xF040F4", VA = "0xF040F4")]
		private int GetReachCone(Vector3 L)
		{
			return default(int);
		}

		[Token(Token = "0x6000A96")]
		[Address(RVA = "0xF042A4", Offset = "0xF042A4", VA = "0xF042A4")]
		public RotationLimitPolygonal()
		{
		}
	}
	[Token(Token = "0x20000B0")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x9A4A5C", Offset = "0x9A4A5C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4A5C", Offset = "0x9A4A5C")]
	public class RotationLimitSpline : RotationLimit
	{
		[Token(Token = "0x4000483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A810C", Offset = "0x9A810C")]
		public float twistLimit;

		[Token(Token = "0x4000484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		public AnimationCurve spline;

		[Token(Token = "0x6000A97")]
		[Address(RVA = "0xF043F4", Offset = "0xF043F4", VA = "0xF043F4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AF100", Offset = "0x9AF100")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000A98")]
		[Address(RVA = "0xF04440", Offset = "0xF04440", VA = "0xF04440")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AF138", Offset = "0x9AF138")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000A99")]
		[Address(RVA = "0xF0448C", Offset = "0xF0448C", VA = "0xF0448C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AF170", Offset = "0x9AF170")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0xF044D8", Offset = "0xF044D8", VA = "0xF044D8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x9AF1A8", Offset = "0x9AF1A8")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0xF04524", Offset = "0xF04524", VA = "0xF04524")]
		public void SetSpline(Keyframe[] keyframes)
		{
		}

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0xF04540", Offset = "0xF04540", VA = "0xF04540", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0xF045F8", Offset = "0xF045F8", VA = "0xF045F8")]
		public Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0xF04924", Offset = "0xF04924", VA = "0xF04924")]
		public RotationLimitSpline()
		{
		}
	}
	[Token(Token = "0x20000B1")]
	public class AimController : MonoBehaviour
	{
		[Token(Token = "0x20001C0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A4D58", Offset = "0x9A4D58")]
		private sealed class <TurnToTarget>d__33 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AimController <>4__this;

			[Token(Token = "0x17000144")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E32")]
				[Address(RVA = "0xEBC4A0", Offset = "0xEBC4A0", VA = "0xEBC4A0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000145")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E34")]
				[Address(RVA = "0xEBC508", Offset = "0xEBC508", VA = "0xEBC508", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E2F")]
			[Address(RVA = "0xEBC27C", Offset = "0xEBC27C", VA = "0xEBC27C")]
			[DebuggerHidden]
			public <TurnToTarget>d__33(int <>1__state)
			{
			}

			[Token(Token = "0x6000E30")]
			[Address(RVA = "0xEBC37C", Offset = "0xEBC37C", VA = "0xEBC37C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E31")]
			[Address(RVA = "0xEBC380", Offset = "0xEBC380", VA = "0xEBC380", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E33")]
			[Address(RVA = "0xEBC4A8", Offset = "0xEBC4A8", VA = "0xEBC4A8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8160", Offset = "0x9A8160")]
		public AimIK ik;

		[Token(Token = "0x4000486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8198", Offset = "0x9A8198")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A8198", Offset = "0x9A8198")]
		public float weight;

		[Token(Token = "0x4000487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x9A81EC", Offset = "0x9A81EC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A81EC", Offset = "0x9A81EC")]
		public Transform target;

		[Token(Token = "0x4000488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A824C", Offset = "0x9A824C")]
		public float targetSwitchSmoothTime;

		[Token(Token = "0x4000489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8284", Offset = "0x9A8284")]
		public float weightSmoothTime;

		[Token(Token = "0x400048A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x9A82BC", Offset = "0x9A82BC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A82BC", Offset = "0x9A82BC")]
		public bool smoothTurnTowardsTarget;

		[Token(Token = "0x400048B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A831C", Offset = "0x9A831C")]
		public float maxRadiansDelta;

		[Token(Token = "0x400048C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8354", Offset = "0x9A8354")]
		public float maxMagnitudeDelta;

		[Token(Token = "0x400048D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A838C", Offset = "0x9A838C")]
		public float slerpSpeed;

		[Token(Token = "0x400048E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A83C4", Offset = "0x9A83C4")]
		public Vector3 pivotOffsetFromRoot;

		[Token(Token = "0x400048F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A83FC", Offset = "0x9A83FC")]
		public float minDistance;

		[Token(Token = "0x4000490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8434", Offset = "0x9A8434")]
		public Vector3 offset;

		[Token(Token = "0x4000491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x9A846C", Offset = "0x9A846C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A846C", Offset = "0x9A846C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A846C", Offset = "0x9A846C")]
		public float maxRootAngle;

		[Token(Token = "0x4000492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A84E8", Offset = "0x9A84E8")]
		public bool turnToTarget;

		[Token(Token = "0x4000493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8520", Offset = "0x9A8520")]
		public float turnToTargetTime;

		[Token(Token = "0x4000494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x9A8558", Offset = "0x9A8558")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8558", Offset = "0x9A8558")]
		public bool useAnimatedAimDirection;

		[Token(Token = "0x4000495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A85B8", Offset = "0x9A85B8")]
		public Vector3 animatedAimDirection;

		[Token(Token = "0x4000496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform lastTarget;

		[Token(Token = "0x4000497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float switchWeight;

		[Token(Token = "0x4000498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float switchWeightV;

		[Token(Token = "0x4000499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float weightV;

		[Token(Token = "0x400049A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Vector3 lastPosition;

		[Token(Token = "0x400049B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 dir;

		[Token(Token = "0x400049C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private bool lastSmoothTowardsTarget;

		[Token(Token = "0x400049D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
		private bool turningToTarget;

		[Token(Token = "0x400049E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float turnToTargetMlp;

		[Token(Token = "0x400049F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float turnToTargetMlpV;

		[Token(Token = "0x170000C8")]
		private Vector3 pivot
		{
			[Token(Token = "0x6000AA1")]
			[Address(RVA = "0xEBB47C", Offset = "0xEBB47C", VA = "0xEBB47C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0xEBB380", Offset = "0xEBB380", VA = "0xEBB380")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0xEBB5C8", Offset = "0xEBB5C8", VA = "0xEBB5C8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0xEBBD00", Offset = "0xEBBD00", VA = "0xEBBD00")]
		private void ApplyMinDistance()
		{
		}

		[Token(Token = "0x6000AA3")]
		[Address(RVA = "0xEBBE9C", Offset = "0xEBBE9C", VA = "0xEBBE9C")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x6000AA4")]
		[Address(RVA = "0xEBC20C", Offset = "0xEBC20C", VA = "0xEBC20C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x9AF1E0", Offset = "0x9AF1E0")]
		private IEnumerator TurnToTarget()
		{
			return null;
		}

		[Token(Token = "0x6000AA5")]
		[Address(RVA = "0xEBC2A8", Offset = "0xEBC2A8", VA = "0xEBC2A8")]
		public AimController()
		{
		}
	}
	[Token(Token = "0x20000B2")]
	public class AimPoser : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20001C1")]
		public class Pose
		{
			[Token(Token = "0x4000A57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool visualize;

			[Token(Token = "0x4000A58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string name;

			[Token(Token = "0x4000A59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 direction;

			[Token(Token = "0x4000A5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float yaw;

			[Token(Token = "0x4000A5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float pitch;

			[Token(Token = "0x4000A5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float angleBuffer;

			[Token(Token = "0x6000E35")]
			[Address(RVA = "0xEBC7D8", Offset = "0xEBC7D8", VA = "0xEBC7D8")]
			public bool IsInDirection(Vector3 d)
			{
				return default(bool);
			}

			[Token(Token = "0x6000E36")]
			[Address(RVA = "0xEBCB44", Offset = "0xEBCB44", VA = "0xEBCB44")]
			public void SetAngleBuffer(float value)
			{
			}

			[Token(Token = "0x6000E37")]
			[Address(RVA = "0xEBCB4C", Offset = "0xEBCB4C", VA = "0xEBCB4C")]
			public Pose()
			{
			}
		}

		[Token(Token = "0x40004A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float angleBuffer;

		[Token(Token = "0x40004A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Pose[] poses;

		[Token(Token = "0x6000AA6")]
		[Address(RVA = "0xEBC6FC", Offset = "0xEBC6FC", VA = "0xEBC6FC")]
		public Pose GetPose(Vector3 localDirection)
		{
			return null;
		}

		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0xEBCA70", Offset = "0xEBCA70", VA = "0xEBCA70")]
		public void SetPoseActive(Pose pose)
		{
		}

		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0xEBCADC", Offset = "0xEBCADC", VA = "0xEBCADC")]
		public AimPoser()
		{
		}
	}
	[Token(Token = "0x20000B3")]
	public class Amplifier : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20001C2")]
		public class Body
		{
			[Serializable]
			[Token(Token = "0x20001F2")]
			public class EffectorLink
			{
				[Token(Token = "0x4000B22")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AC07C", Offset = "0x9AC07C")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4000B23")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AC0B4", Offset = "0x9AC0B4")]
				public float weight;

				[Token(Token = "0x6000EC8")]
				[Address(RVA = "0xEBD13C", Offset = "0xEBD13C", VA = "0xEBD13C")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4000A5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB0A4", Offset = "0x9AB0A4")]
			public Transform transform;

			[Token(Token = "0x4000A5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB0DC", Offset = "0x9AB0DC")]
			public Transform relativeTo;

			[Token(Token = "0x4000A5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB114", Offset = "0x9AB114")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x4000A60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB14C", Offset = "0x9AB14C")]
			public float verticalWeight;

			[Token(Token = "0x4000A61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB184", Offset = "0x9AB184")]
			public float horizontalWeight;

			[Token(Token = "0x4000A62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB1BC", Offset = "0x9AB1BC")]
			public float speed;

			[Token(Token = "0x4000A63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Vector3 lastRelativePos;

			[Token(Token = "0x4000A64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Vector3 smoothDelta;

			[Token(Token = "0x4000A65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private bool firstUpdate;

			[Token(Token = "0x6000E38")]
			[Address(RVA = "0xEBCCA8", Offset = "0xEBCCA8", VA = "0xEBCCA8")]
			public void Update(IKSolverFullBodyBiped solver, float w, float deltaTime)
			{
			}

			[Token(Token = "0x6000E39")]
			[Address(RVA = "0xEBD114", Offset = "0xEBD114", VA = "0xEBD114")]
			private static Vector3 Multiply(Vector3 v1, Vector3 v2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000E3A")]
			[Address(RVA = "0xEBD124", Offset = "0xEBD124", VA = "0xEBD124")]
			public Body()
			{
			}
		}

		[Token(Token = "0x40004A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A85F0", Offset = "0x9A85F0")]
		public Body[] bodies;

		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0xEBCB68", Offset = "0xEBCB68", VA = "0xEBCB68", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000AAA")]
		[Address(RVA = "0xEBD10C", Offset = "0xEBD10C", VA = "0xEBD10C")]
		public Amplifier()
		{
		}
	}
	[Token(Token = "0x20000B4")]
	public class BodyTilt : OffsetModifier
	{
		[Token(Token = "0x40004A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8628", Offset = "0x9A8628")]
		public float tiltSpeed;

		[Token(Token = "0x40004A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8660", Offset = "0x9A8660")]
		public float tiltSensitivity;

		[Token(Token = "0x40004A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8698", Offset = "0x9A8698")]
		public OffsetPose poseLeft;

		[Token(Token = "0x40004A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A86D0", Offset = "0x9A86D0")]
		public OffsetPose poseRight;

		[Token(Token = "0x40004A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float tiltAngle;

		[Token(Token = "0x40004A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 lastForward;

		[Token(Token = "0x6000AAB")]
		[Address(RVA = "0xF43C64", Offset = "0xF43C64", VA = "0xF43C64", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000AAC")]
		[Address(RVA = "0xF43CAC", Offset = "0xF43CAC", VA = "0xF43CAC", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000AAD")]
		[Address(RVA = "0xF43EDC", Offset = "0xF43EDC", VA = "0xF43EDC")]
		public BodyTilt()
		{
		}
	}
	[Token(Token = "0x20000B5")]
	[ExecuteInEditMode]
	public class EditorIK : MonoBehaviour
	{
		[Token(Token = "0x40004A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IK ik;

		[Token(Token = "0x6000AAE")]
		[Address(RVA = "0xF44CF8", Offset = "0xF44CF8", VA = "0xF44CF8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AAF")]
		[Address(RVA = "0xF44D8C", Offset = "0xF44D8C", VA = "0xF44D8C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AB0")]
		[Address(RVA = "0xF44E5C", Offset = "0xF44E5C", VA = "0xF44E5C")]
		public EditorIK()
		{
		}
	}
	[Token(Token = "0x20000B6")]
	public class HitReaction : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20001C3")]
		public abstract class HitPoint
		{
			[Token(Token = "0x4000A66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB1F4", Offset = "0x9AB1F4")]
			public string name;

			[Token(Token = "0x4000A67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB22C", Offset = "0x9AB22C")]
			public Collider collider;

			[Token(Token = "0x4000A68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB264", Offset = "0x9AB264")]
			[SerializeField]
			private float crossFadeTime;

			[Token(Token = "0x4000A69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AB2B0", Offset = "0x9AB2B0")]
			private float <crossFader>k__BackingField;

			[Token(Token = "0x4000A6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AB2C0", Offset = "0x9AB2C0")]
			private float <timer>k__BackingField;

			[Token(Token = "0x4000A6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AB2D0", Offset = "0x9AB2D0")]
			private Vector3 <force>k__BackingField;

			[Token(Token = "0x4000A6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AB2E0", Offset = "0x9AB2E0")]
			private Vector3 <point>k__BackingField;

			[Token(Token = "0x4000A6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float length;

			[Token(Token = "0x4000A6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float crossFadeSpeed;

			[Token(Token = "0x4000A6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float lastTime;

			[Token(Token = "0x17000146")]
			public bool inProgress
			{
				[Token(Token = "0x6000E3B")]
				[Address(RVA = "0xF59100", Offset = "0xF59100", VA = "0xF59100")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000147")]
			protected float crossFader
			{
				[Token(Token = "0x6000E3C")]
				[Address(RVA = "0xF596A8", Offset = "0xF596A8", VA = "0xF596A8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AFB0C", Offset = "0x9AFB0C")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000E3D")]
				[Address(RVA = "0xF596B0", Offset = "0xF596B0", VA = "0xF596B0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AFB1C", Offset = "0x9AFB1C")]
				private set
				{
				}
			}

			[Token(Token = "0x17000148")]
			protected float timer
			{
				[Token(Token = "0x6000E3E")]
				[Address(RVA = "0xF596B8", Offset = "0xF596B8", VA = "0xF596B8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AFB2C", Offset = "0x9AFB2C")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000E3F")]
				[Address(RVA = "0xF596C0", Offset = "0xF596C0", VA = "0xF596C0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AFB3C", Offset = "0x9AFB3C")]
				private set
				{
				}
			}

			[Token(Token = "0x17000149")]
			protected Vector3 force
			{
				[Token(Token = "0x6000E40")]
				[Address(RVA = "0xF596C8", Offset = "0xF596C8", VA = "0xF596C8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AFB4C", Offset = "0x9AFB4C")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000E41")]
				[Address(RVA = "0xF596D4", Offset = "0xF596D4", VA = "0xF596D4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AFB5C", Offset = "0x9AFB5C")]
				private set
				{
				}
			}

			[Token(Token = "0x1700014A")]
			protected Vector3 point
			{
				[Token(Token = "0x6000E42")]
				[Address(RVA = "0xF596E0", Offset = "0xF596E0", VA = "0xF596E0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AFB6C", Offset = "0x9AFB6C")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000E43")]
				[Address(RVA = "0xF596EC", Offset = "0xF596EC", VA = "0xF596EC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AFB7C", Offset = "0x9AFB7C")]
				private set
				{
				}
			}

			[Token(Token = "0x6000E44")]
			[Address(RVA = "0xF59574", Offset = "0xF59574", VA = "0xF59574")]
			public void Hit(Vector3 force, Vector3 point)
			{
			}

			[Token(Token = "0x6000E45")]
			[Address(RVA = "0xF591E8", Offset = "0xF591E8", VA = "0xF591E8")]
			public void Apply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x6000E46")]
			protected abstract float GetLength();

			[Token(Token = "0x6000E47")]
			protected abstract void CrossFadeStart();

			[Token(Token = "0x6000E48")]
			protected abstract void OnApply(IKSolverFullBodyBiped solver, float weight);

			[Token(Token = "0x6000E49")]
			[Address(RVA = "0xF596F8", Offset = "0xF596F8", VA = "0xF596F8")]
			protected HitPoint()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001C4")]
		public class HitPointEffector : HitPoint
		{
			[Serializable]
			[Token(Token = "0x20001F3")]
			public class EffectorLink
			{
				[Token(Token = "0x4000B24")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AC0EC", Offset = "0x9AC0EC")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4000B25")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AC124", Offset = "0x9AC124")]
				public float weight;

				[Token(Token = "0x4000B26")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Vector3 lastValue;

				[Token(Token = "0x4000B27")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
				private Vector3 current;

				[Token(Token = "0x6000EC9")]
				[Address(RVA = "0xF5A064", Offset = "0xF5A064", VA = "0xF5A064")]
				public void Apply(IKSolverFullBodyBiped solver, Vector3 offset, float crossFader)
				{
				}

				[Token(Token = "0x6000ECA")]
				[Address(RVA = "0xF59E58", Offset = "0xF59E58", VA = "0xF59E58")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6000ECB")]
				[Address(RVA = "0xF5A1A0", Offset = "0xF5A1A0", VA = "0xF5A1A0")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4000A70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB2F0", Offset = "0x9AB2F0")]
			public AnimationCurve offsetInForceDirection;

			[Token(Token = "0x4000A71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB328", Offset = "0x9AB328")]
			public AnimationCurve offsetInUpDirection;

			[Token(Token = "0x4000A72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB360", Offset = "0x9AB360")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x6000E4A")]
			[Address(RVA = "0xF59C74", Offset = "0xF59C74", VA = "0xF59C74", Slot = "4")]
			protected override float GetLength()
			{
				return default(float);
			}

			[Token(Token = "0x6000E4B")]
			[Address(RVA = "0xF59DEC", Offset = "0xF59DEC", VA = "0xF59DEC", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x6000E4C")]
			[Address(RVA = "0xF59E6C", Offset = "0xF59E6C", VA = "0xF59E6C", Slot = "6")]
			protected override void OnApply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x6000E4D")]
			[Address(RVA = "0xF5A18C", Offset = "0xF5A18C", VA = "0xF5A18C")]
			public HitPointEffector()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001C5")]
		public class HitPointBone : HitPoint
		{
			[Serializable]
			[Token(Token = "0x20001F4")]
			public class BoneLink
			{
				[Token(Token = "0x4000B28")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AC15C", Offset = "0x9AC15C")]
				public Transform bone;

				[Token(Token = "0x4000B29")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AC194", Offset = "0x9AC194")]
				[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9AC194", Offset = "0x9AC194")]
				public float weight;

				[Token(Token = "0x4000B2A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
				private Quaternion lastValue;

				[Token(Token = "0x4000B2B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
				private Quaternion current;

				[Token(Token = "0x6000ECC")]
				[Address(RVA = "0xF59A7C", Offset = "0xF59A7C", VA = "0xF59A7C")]
				public void Apply(IKSolverFullBodyBiped solver, Quaternion offset, float crossFader)
				{
				}

				[Token(Token = "0x6000ECD")]
				[Address(RVA = "0xF59814", Offset = "0xF59814", VA = "0xF59814")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6000ECE")]
				[Address(RVA = "0xF59BEC", Offset = "0xF59BEC", VA = "0xF59BEC")]
				public BoneLink()
				{
				}
			}

			[Token(Token = "0x4000A73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB398", Offset = "0x9AB398")]
			public AnimationCurve aroundCenterOfMass;

			[Token(Token = "0x4000A74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB3D0", Offset = "0x9AB3D0")]
			public BoneLink[] boneLinks;

			[Token(Token = "0x4000A75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Rigidbody rigidbody;

			[Token(Token = "0x6000E4E")]
			[Address(RVA = "0xF5970C", Offset = "0xF5970C", VA = "0xF5970C", Slot = "4")]
			protected override float GetLength()
			{
				return default(float);
			}

			[Token(Token = "0x6000E4F")]
			[Address(RVA = "0xF597B0", Offset = "0xF597B0", VA = "0xF597B0", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x6000E50")]
			[Address(RVA = "0xF59820", Offset = "0xF59820", VA = "0xF59820", Slot = "6")]
			protected override void OnApply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x6000E51")]
			[Address(RVA = "0xF59BD8", Offset = "0xF59BD8", VA = "0xF59BD8")]
			public HitPointBone()
			{
			}
		}

		[Token(Token = "0x40004AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8708", Offset = "0x9A8708")]
		public HitPointEffector[] effectorHitPoints;

		[Token(Token = "0x40004AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8740", Offset = "0x9A8740")]
		public HitPointBone[] boneHitPoints;

		[Token(Token = "0x170000C9")]
		public bool inProgress
		{
			[Token(Token = "0x6000AB1")]
			[Address(RVA = "0xF59044", Offset = "0xF59044", VA = "0xF59044")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0xF59114", Offset = "0xF59114", VA = "0xF59114", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0xF59334", Offset = "0xF59334", VA = "0xF59334")]
		public void Hit(Collider collider, Vector3 force, Vector3 point)
		{
		}

		[Token(Token = "0x6000AB4")]
		[Address(RVA = "0xF596A0", Offset = "0xF596A0", VA = "0xF596A0")]
		public HitReaction()
		{
		}
	}
	[Token(Token = "0x20000B7")]
	public class HitReactionVRIK : OffsetModifierVRIK
	{
		[Serializable]
		[Token(Token = "0x20001C6")]
		public abstract class Offset
		{
			[Token(Token = "0x4000A76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB408", Offset = "0x9AB408")]
			public string name;

			[Token(Token = "0x4000A77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB440", Offset = "0x9AB440")]
			public Collider collider;

			[Token(Token = "0x4000A78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB478", Offset = "0x9AB478")]
			[SerializeField]
			private float crossFadeTime;

			[Token(Token = "0x4000A79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AB4C4", Offset = "0x9AB4C4")]
			private float <crossFader>k__BackingField;

			[Token(Token = "0x4000A7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AB4D4", Offset = "0x9AB4D4")]
			private float <timer>k__BackingField;

			[Token(Token = "0x4000A7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AB4E4", Offset = "0x9AB4E4")]
			private Vector3 <force>k__BackingField;

			[Token(Token = "0x4000A7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AB4F4", Offset = "0x9AB4F4")]
			private Vector3 <point>k__BackingField;

			[Token(Token = "0x4000A7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float length;

			[Token(Token = "0x4000A7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float crossFadeSpeed;

			[Token(Token = "0x4000A7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float lastTime;

			[Token(Token = "0x1700014B")]
			protected float crossFader
			{
				[Token(Token = "0x6000E52")]
				[Address(RVA = "0x100C804", Offset = "0x100C804", VA = "0x100C804")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AFB8C", Offset = "0x9AFB8C")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000E53")]
				[Address(RVA = "0x100C80C", Offset = "0x100C80C", VA = "0x100C80C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AFB9C", Offset = "0x9AFB9C")]
				private set
				{
				}
			}

			[Token(Token = "0x1700014C")]
			protected float timer
			{
				[Token(Token = "0x6000E54")]
				[Address(RVA = "0x100C814", Offset = "0x100C814", VA = "0x100C814")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AFBAC", Offset = "0x9AFBAC")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000E55")]
				[Address(RVA = "0x100C81C", Offset = "0x100C81C", VA = "0x100C81C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AFBBC", Offset = "0x9AFBBC")]
				private set
				{
				}
			}

			[Token(Token = "0x1700014D")]
			protected Vector3 force
			{
				[Token(Token = "0x6000E56")]
				[Address(RVA = "0x100C824", Offset = "0x100C824", VA = "0x100C824")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AFBCC", Offset = "0x9AFBCC")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000E57")]
				[Address(RVA = "0x100C830", Offset = "0x100C830", VA = "0x100C830")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AFBDC", Offset = "0x9AFBDC")]
				private set
				{
				}
			}

			[Token(Token = "0x1700014E")]
			protected Vector3 point
			{
				[Token(Token = "0x6000E58")]
				[Address(RVA = "0x100C83C", Offset = "0x100C83C", VA = "0x100C83C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AFBEC", Offset = "0x9AFBEC")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000E59")]
				[Address(RVA = "0x100C848", Offset = "0x100C848", VA = "0x100C848")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AFBFC", Offset = "0x9AFBFC")]
				private set
				{
				}
			}

			[Token(Token = "0x6000E5A")]
			[Address(RVA = "0x100C854", Offset = "0x100C854", VA = "0x100C854")]
			public void Hit(Vector3 force, AnimationCurve[] curves, Vector3 point)
			{
			}

			[Token(Token = "0x6000E5B")]
			[Address(RVA = "0x100C994", Offset = "0x100C994", VA = "0x100C994")]
			public void Apply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x6000E5C")]
			protected abstract float GetLength(AnimationCurve[] curves);

			[Token(Token = "0x6000E5D")]
			protected abstract void CrossFadeStart();

			[Token(Token = "0x6000E5E")]
			protected abstract void OnApply(VRIK ik, AnimationCurve[] curves, float weight);

			[Token(Token = "0x6000E5F")]
			[Address(RVA = "0x100CAE8", Offset = "0x100CAE8", VA = "0x100CAE8")]
			protected Offset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001C7")]
		public class PositionOffset : Offset
		{
			[Serializable]
			[Token(Token = "0x20001F5")]
			public class PositionOffsetLink
			{
				[Token(Token = "0x4000B2C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AC1E8", Offset = "0x9AC1E8")]
				public IKSolverVR.PositionOffset positionOffset;

				[Token(Token = "0x4000B2D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AC220", Offset = "0x9AC220")]
				public float weight;

				[Token(Token = "0x4000B2E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Vector3 lastValue;

				[Token(Token = "0x4000B2F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
				private Vector3 current;

				[Token(Token = "0x6000ECF")]
				[Address(RVA = "0x100CFA4", Offset = "0x100CFA4", VA = "0x100CFA4")]
				public void Apply(VRIK ik, Vector3 offset, float crossFader)
				{
				}

				[Token(Token = "0x6000ED0")]
				[Address(RVA = "0x100CD60", Offset = "0x100CD60", VA = "0x100CD60")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6000ED1")]
				[Address(RVA = "0x100D0C0", Offset = "0x100D0C0", VA = "0x100D0C0")]
				public PositionOffsetLink()
				{
				}
			}

			[Token(Token = "0x4000A80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB504", Offset = "0x9AB504")]
			public int forceDirCurveIndex;

			[Token(Token = "0x4000A81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB53C", Offset = "0x9AB53C")]
			public int upDirCurveIndex;

			[Token(Token = "0x4000A82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB574", Offset = "0x9AB574")]
			public PositionOffsetLink[] offsetLinks;

			[Token(Token = "0x6000E60")]
			[Address(RVA = "0x100CAFC", Offset = "0x100CAFC", VA = "0x100CAFC", Slot = "4")]
			protected override float GetLength(AnimationCurve[] curves)
			{
				return default(float);
			}

			[Token(Token = "0x6000E61")]
			[Address(RVA = "0x100CCF4", Offset = "0x100CCF4", VA = "0x100CCF4", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x6000E62")]
			[Address(RVA = "0x100CD74", Offset = "0x100CD74", VA = "0x100CD74", Slot = "6")]
			protected override void OnApply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x6000E63")]
			[Address(RVA = "0x100D0A4", Offset = "0x100D0A4", VA = "0x100D0A4")]
			public PositionOffset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001C8")]
		public class RotationOffset : Offset
		{
			[Serializable]
			[Token(Token = "0x20001F6")]
			public class RotationOffsetLink
			{
				[Token(Token = "0x4000B30")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AC258", Offset = "0x9AC258")]
				public IKSolverVR.RotationOffset rotationOffset;

				[Token(Token = "0x4000B31")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AC290", Offset = "0x9AC290")]
				[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9AC290", Offset = "0x9AC290")]
				public float weight;

				[Token(Token = "0x4000B32")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Quaternion lastValue;

				[Token(Token = "0x4000B33")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				private Quaternion current;

				[Token(Token = "0x6000ED2")]
				[Address(RVA = "0x100D528", Offset = "0x100D528", VA = "0x100D528")]
				public void Apply(VRIK ik, Quaternion offset, float crossFader)
				{
				}

				[Token(Token = "0x6000ED3")]
				[Address(RVA = "0x100D210", Offset = "0x100D210", VA = "0x100D210")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6000ED4")]
				[Address(RVA = "0x100D664", Offset = "0x100D664", VA = "0x100D664")]
				public RotationOffsetLink()
				{
				}
			}

			[Token(Token = "0x4000A83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB5AC", Offset = "0x9AB5AC")]
			public int curveIndex;

			[Token(Token = "0x4000A84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB5E4", Offset = "0x9AB5E4")]
			public RotationOffsetLink[] offsetLinks;

			[Token(Token = "0x4000A85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Rigidbody rigidbody;

			[Token(Token = "0x6000E64")]
			[Address(RVA = "0x100D0C8", Offset = "0x100D0C8", VA = "0x100D0C8", Slot = "4")]
			protected override float GetLength(AnimationCurve[] curves)
			{
				return default(float);
			}

			[Token(Token = "0x6000E65")]
			[Address(RVA = "0x100D1AC", Offset = "0x100D1AC", VA = "0x100D1AC", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x6000E66")]
			[Address(RVA = "0x100D21C", Offset = "0x100D21C", VA = "0x100D21C", Slot = "6")]
			protected override void OnApply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x6000E67")]
			[Address(RVA = "0x100D650", Offset = "0x100D650", VA = "0x100D650")]
			public RotationOffset()
			{
			}
		}

		[Token(Token = "0x40004AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve[] offsetCurves;

		[Token(Token = "0x40004AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8778", Offset = "0x9A8778")]
		public PositionOffset[] positionOffsets;

		[Token(Token = "0x40004AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A87B0", Offset = "0x9A87B0")]
		public RotationOffset[] rotationOffsets;

		[Token(Token = "0x6000AB5")]
		[Address(RVA = "0xF5A1A8", Offset = "0xF5A1A8", VA = "0xF5A1A8", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0xF5A27C", Offset = "0xF5A27C", VA = "0xF5A27C")]
		public void Hit(Collider collider, Vector3 force, Vector3 point)
		{
		}

		[Token(Token = "0x6000AB7")]
		[Address(RVA = "0xF5A4CC", Offset = "0xF5A4CC", VA = "0xF5A4CC")]
		public HitReactionVRIK()
		{
		}
	}
	[Token(Token = "0x20000B8")]
	public class Inertia : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20001C9")]
		public class Body
		{
			[Serializable]
			[Token(Token = "0x20001F7")]
			public class EffectorLink
			{
				[Token(Token = "0x4000B34")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AC2E4", Offset = "0x9AC2E4")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4000B35")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AC31C", Offset = "0x9AC31C")]
				public float weight;

				[Token(Token = "0x6000ED5")]
				[Address(RVA = "0xEF1E98", Offset = "0xEF1E98", VA = "0xEF1E98")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4000A86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB61C", Offset = "0x9AB61C")]
			public Transform transform;

			[Token(Token = "0x4000A87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB654", Offset = "0x9AB654")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x4000A88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB68C", Offset = "0x9AB68C")]
			public float speed;

			[Token(Token = "0x4000A89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB6C4", Offset = "0x9AB6C4")]
			public float acceleration;

			[Token(Token = "0x4000A8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB6FC", Offset = "0x9AB6FC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9AB6FC", Offset = "0x9AB6FC")]
			public float matchVelocity;

			[Token(Token = "0x4000A8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB750", Offset = "0x9AB750")]
			public float gravity;

			[Token(Token = "0x4000A8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 delta;

			[Token(Token = "0x4000A8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 lazyPoint;

			[Token(Token = "0x4000A8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Vector3 direction;

			[Token(Token = "0x4000A8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private Vector3 lastPosition;

			[Token(Token = "0x4000A90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private bool firstUpdate;

			[Token(Token = "0x6000E68")]
			[Address(RVA = "0xEF1868", Offset = "0xEF1868", VA = "0xEF1868")]
			public void Reset()
			{
			}

			[Token(Token = "0x6000E69")]
			[Address(RVA = "0xEF1A28", Offset = "0xEF1A28", VA = "0xEF1A28")]
			public void Update(IKSolverFullBodyBiped solver, float weight, float deltaTime)
			{
			}

			[Token(Token = "0x6000E6A")]
			[Address(RVA = "0xEF1E7C", Offset = "0xEF1E7C", VA = "0xEF1E7C")]
			public Body()
			{
			}
		}

		[Token(Token = "0x40004AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A87E8", Offset = "0x9A87E8")]
		public Body[] bodies;

		[Token(Token = "0x40004B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8820", Offset = "0x9A8820")]
		public OffsetLimits[] limits;

		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0xEF17F0", Offset = "0xEF17F0", VA = "0xEF17F0")]
		public void ResetBodies()
		{
		}

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0xEF1944", Offset = "0xEF1944", VA = "0xEF1944", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0xEF1E5C", Offset = "0xEF1E5C", VA = "0xEF1E5C")]
		public Inertia()
		{
		}
	}
	[Token(Token = "0x20000B9")]
	public class LookAtController : MonoBehaviour
	{
		[Token(Token = "0x40004B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LookAtIK ik;

		[Token(Token = "0x40004B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x9A8858", Offset = "0x9A8858")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8858", Offset = "0x9A8858")]
		public Transform target;

		[Token(Token = "0x40004B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A88B8", Offset = "0x9A88B8")]
		public float weight;

		[Token(Token = "0x40004B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 offset;

		[Token(Token = "0x40004B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A88D0", Offset = "0x9A88D0")]
		public float targetSwitchSmoothTime;

		[Token(Token = "0x40004B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8908", Offset = "0x9A8908")]
		public float weightSmoothTime;

		[Token(Token = "0x40004B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x9A8940", Offset = "0x9A8940")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8940", Offset = "0x9A8940")]
		public bool smoothTurnTowardsTarget;

		[Token(Token = "0x40004B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A89A0", Offset = "0x9A89A0")]
		public float maxRadiansDelta;

		[Token(Token = "0x40004B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A89D8", Offset = "0x9A89D8")]
		public float maxMagnitudeDelta;

		[Token(Token = "0x40004BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8A10", Offset = "0x9A8A10")]
		public float slerpSpeed;

		[Token(Token = "0x40004BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8A48", Offset = "0x9A8A48")]
		public Vector3 pivotOffsetFromRoot;

		[Token(Token = "0x40004BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8A80", Offset = "0x9A8A80")]
		public float minDistance;

		[Token(Token = "0x40004BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x9A8AB8", Offset = "0x9A8AB8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8AB8", Offset = "0x9A8AB8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A8AB8", Offset = "0x9A8AB8")]
		public float maxRootAngle;

		[Token(Token = "0x40004BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform lastTarget;

		[Token(Token = "0x40004BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float switchWeight;

		[Token(Token = "0x40004C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float switchWeightV;

		[Token(Token = "0x40004C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float weightV;

		[Token(Token = "0x40004C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector3 lastPosition;

		[Token(Token = "0x40004C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 dir;

		[Token(Token = "0x40004C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool lastSmoothTowardsTarget;

		[Token(Token = "0x170000CA")]
		private Vector3 pivot
		{
			[Token(Token = "0x6000ABD")]
			[Address(RVA = "0xEFBAA8", Offset = "0xEFBAA8", VA = "0xEFBAA8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0xEFB9C0", Offset = "0xEFB9C0", VA = "0xEFB9C0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0xEFBBF4", Offset = "0xEFBBF4", VA = "0xEFBBF4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000ABE")]
		[Address(RVA = "0xEFC2A8", Offset = "0xEFC2A8", VA = "0xEFC2A8")]
		private void ApplyMinDistance()
		{
		}

		[Token(Token = "0x6000ABF")]
		[Address(RVA = "0xEFC444", Offset = "0xEFC444", VA = "0xEFC444")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x6000AC0")]
		[Address(RVA = "0xEFC760", Offset = "0xEFC760", VA = "0xEFC760")]
		public LookAtController()
		{
		}
	}
	[Token(Token = "0x20000BA")]
	public abstract class OffsetModifier : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20001CA")]
		public class OffsetLimits
		{
			[Token(Token = "0x4000A91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB788", Offset = "0x9AB788")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x4000A92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB7C0", Offset = "0x9AB7C0")]
			public float spring;

			[Token(Token = "0x4000A93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB7F8", Offset = "0x9AB7F8")]
			public bool x;

			[Token(Token = "0x4000A94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB830", Offset = "0x9AB830")]
			public bool y;

			[Token(Token = "0x4000A95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB868", Offset = "0x9AB868")]
			public bool z;

			[Token(Token = "0x4000A96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB8A0", Offset = "0x9AB8A0")]
			public float minX;

			[Token(Token = "0x4000A97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB8D8", Offset = "0x9AB8D8")]
			public float maxX;

			[Token(Token = "0x4000A98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB910", Offset = "0x9AB910")]
			public float minY;

			[Token(Token = "0x4000A99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB948", Offset = "0x9AB948")]
			public float maxY;

			[Token(Token = "0x4000A9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB980", Offset = "0x9AB980")]
			public float minZ;

			[Token(Token = "0x4000A9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB9B8", Offset = "0x9AB9B8")]
			public float maxZ;

			[Token(Token = "0x6000E6B")]
			[Address(RVA = "0xEFCB88", Offset = "0xEFCB88", VA = "0xEFCB88")]
			public void Apply(IKEffector e, Quaternion rootRotation)
			{
			}

			[Token(Token = "0x6000E6C")]
			[Address(RVA = "0xEFD090", Offset = "0xEFD090", VA = "0xEFD090")]
			private float SpringAxis(float value, float min, float max)
			{
				return default(float);
			}

			[Token(Token = "0x6000E6D")]
			[Address(RVA = "0xEFD0C0", Offset = "0xEFD0C0", VA = "0xEFD0C0")]
			private float Spring(float value, float limit, bool negative)
			{
				return default(float);
			}

			[Token(Token = "0x6000E6E")]
			[Address(RVA = "0xEFD198", Offset = "0xEFD198", VA = "0xEFD198")]
			public OffsetLimits()
			{
			}
		}

		[Token(Token = "0x20001CB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A4D68", Offset = "0x9A4D68")]
		private sealed class <Initiate>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OffsetModifier <>4__this;

			[Token(Token = "0x1700014F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E72")]
				[Address(RVA = "0xEFD020", Offset = "0xEFD020", VA = "0xEFD020", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000150")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E74")]
				[Address(RVA = "0xEFD088", Offset = "0xEFD088", VA = "0xEFD088", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E6F")]
			[Address(RVA = "0xEFCA50", Offset = "0xEFCA50", VA = "0xEFCA50")]
			[DebuggerHidden]
			public <Initiate>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6000E70")]
			[Address(RVA = "0xEFCEE0", Offset = "0xEFCEE0", VA = "0xEFCEE0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E71")]
			[Address(RVA = "0xEFCEE4", Offset = "0xEFCEE4", VA = "0xEFCEE4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E73")]
			[Address(RVA = "0xEFD028", Offset = "0xEFD028", VA = "0xEFD028", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40004C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8B34", Offset = "0x9A8B34")]
		public float weight;

		[Token(Token = "0x40004C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8B6C", Offset = "0x9A8B6C")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x40004C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected float lastTime;

		[Token(Token = "0x170000CB")]
		protected float deltaTime
		{
			[Token(Token = "0x6000AC1")]
			[Address(RVA = "0xEF19FC", Offset = "0xEF19FC", VA = "0xEF19FC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000AC2")]
		protected abstract void OnModifyOffset();

		[Token(Token = "0x6000AC3")]
		[Address(RVA = "0xEFC9B4", Offset = "0xEFC9B4", VA = "0xEFC9B4", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000AC4")]
		[Address(RVA = "0xEFC9E0", Offset = "0xEFC9E0", VA = "0xEFC9E0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x9AF244", Offset = "0x9AF244")]
		private IEnumerator Initiate()
		{
			return null;
		}

		[Token(Token = "0x6000AC5")]
		[Address(RVA = "0xEFCA7C", Offset = "0xEFCA7C", VA = "0xEFCA7C")]
		private void ModifyOffset()
		{
		}

		[Token(Token = "0x6000AC6")]
		[Address(RVA = "0xEF1DA0", Offset = "0xEF1DA0", VA = "0xEF1DA0")]
		protected void ApplyLimits(OffsetLimits[] limits)
		{
		}

		[Token(Token = "0x6000AC7")]
		[Address(RVA = "0xEFCDE8", Offset = "0xEFCDE8", VA = "0xEFCDE8", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000AC8")]
		[Address(RVA = "0xEF1E6C", Offset = "0xEF1E6C", VA = "0xEF1E6C")]
		protected OffsetModifier()
		{
		}
	}
	[Token(Token = "0x20000BB")]
	public abstract class OffsetModifierVRIK : MonoBehaviour
	{
		[Token(Token = "0x20001CC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A4D78", Offset = "0x9A4D78")]
		private sealed class <Initiate>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000AA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000AA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OffsetModifierVRIK <>4__this;

			[Token(Token = "0x17000151")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E78")]
				[Address(RVA = "0xEFD5E8", Offset = "0xEFD5E8", VA = "0xEFD5E8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000152")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E7A")]
				[Address(RVA = "0xEFD650", Offset = "0xEFD650", VA = "0xEFD650", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E75")]
			[Address(RVA = "0xEFD268", Offset = "0xEFD268", VA = "0xEFD268")]
			[DebuggerHidden]
			public <Initiate>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6000E76")]
			[Address(RVA = "0xEFD4A8", Offset = "0xEFD4A8", VA = "0xEFD4A8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E77")]
			[Address(RVA = "0xEFD4AC", Offset = "0xEFD4AC", VA = "0xEFD4AC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E79")]
			[Address(RVA = "0xEFD5F0", Offset = "0xEFD5F0", VA = "0xEFD5F0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40004C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8BA4", Offset = "0x9A8BA4")]
		public float weight;

		[Token(Token = "0x40004C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8BDC", Offset = "0x9A8BDC")]
		public VRIK ik;

		[Token(Token = "0x40004CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float lastTime;

		[Token(Token = "0x170000CC")]
		protected float deltaTime
		{
			[Token(Token = "0x6000AC9")]
			[Address(RVA = "0xEFD1A0", Offset = "0xEFD1A0", VA = "0xEFD1A0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000ACA")]
		protected abstract void OnModifyOffset();

		[Token(Token = "0x6000ACB")]
		[Address(RVA = "0xEFD1CC", Offset = "0xEFD1CC", VA = "0xEFD1CC", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000ACC")]
		[Address(RVA = "0xEFD1F8", Offset = "0xEFD1F8", VA = "0xEFD1F8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x9AF2A8", Offset = "0x9AF2A8")]
		private IEnumerator Initiate()
		{
			return null;
		}

		[Token(Token = "0x6000ACD")]
		[Address(RVA = "0xEFD294", Offset = "0xEFD294", VA = "0xEFD294")]
		private void ModifyOffset()
		{
		}

		[Token(Token = "0x6000ACE")]
		[Address(RVA = "0xEFD3A0", Offset = "0xEFD3A0", VA = "0xEFD3A0", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000ACF")]
		[Address(RVA = "0xEFD498", Offset = "0xEFD498", VA = "0xEFD498")]
		protected OffsetModifierVRIK()
		{
		}
	}
	[Token(Token = "0x20000BC")]
	public class OffsetPose : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20001CD")]
		public class EffectorLink
		{
			[Token(Token = "0x4000AA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x4000AA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 offset;

			[Token(Token = "0x4000AA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 pin;

			[Token(Token = "0x4000AA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 pinWeight;

			[Token(Token = "0x6000E7B")]
			[Address(RVA = "0xEFD718", Offset = "0xEFD718", VA = "0xEFD718")]
			public void Apply(IKSolverFullBodyBiped solver, float weight, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000E7C")]
			[Address(RVA = "0xEFDB68", Offset = "0xEFDB68", VA = "0xEFDB68")]
			public EffectorLink()
			{
			}
		}

		[Token(Token = "0x40004CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EffectorLink[] effectorLinks;

		[Token(Token = "0x6000AD0")]
		[Address(RVA = "0xEFD658", Offset = "0xEFD658", VA = "0xEFD658")]
		public void Apply(IKSolverFullBodyBiped solver, float weight)
		{
		}

		[Token(Token = "0x6000AD1")]
		[Address(RVA = "0xEFDA50", Offset = "0xEFDA50", VA = "0xEFDA50")]
		public void Apply(IKSolverFullBodyBiped solver, float weight, Quaternion rotation)
		{
		}

		[Token(Token = "0x6000AD2")]
		[Address(RVA = "0xEFDB08", Offset = "0xEFDB08", VA = "0xEFDB08")]
		public OffsetPose()
		{
		}
	}
	[Token(Token = "0x20000BD")]
	public class PenetrationAvoidance : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20001CE")]
		public class Avoider
		{
			[Serializable]
			[Token(Token = "0x20001F8")]
			public class EffectorLink
			{
				[Token(Token = "0x4000B36")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AC354", Offset = "0x9AC354")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4000B37")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AC38C", Offset = "0x9AC38C")]
				public float weight;

				[Token(Token = "0x6000ED6")]
				[Address(RVA = "0xEFE220", Offset = "0xEFE220", VA = "0xEFE220")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4000AA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AB9F0", Offset = "0x9AB9F0")]
			public Transform[] raycastFrom;

			[Token(Token = "0x4000AA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9ABA28", Offset = "0x9ABA28")]
			public Transform raycastTo;

			[Token(Token = "0x4000AA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9ABA60", Offset = "0x9ABA60")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9ABA60", Offset = "0x9ABA60")]
			public float raycastRadius;

			[Token(Token = "0x4000AA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9ABAB4", Offset = "0x9ABAB4")]
			public EffectorLink[] effectors;

			[Token(Token = "0x4000AAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9ABAEC", Offset = "0x9ABAEC")]
			public float smoothTimeIn;

			[Token(Token = "0x4000AAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9ABB24", Offset = "0x9ABB24")]
			public float smoothTimeOut;

			[Token(Token = "0x4000AAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9ABB5C", Offset = "0x9ABB5C")]
			public LayerMask layers;

			[Token(Token = "0x4000AAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 offset;

			[Token(Token = "0x4000AAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Vector3 offsetTarget;

			[Token(Token = "0x4000AAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private Vector3 offsetV;

			[Token(Token = "0x6000E7D")]
			[Address(RVA = "0xEFDBF4", Offset = "0xEFDBF4", VA = "0xEFDBF4")]
			public void Solve(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x6000E7E")]
			[Address(RVA = "0xEFDE00", Offset = "0xEFDE00", VA = "0xEFDE00")]
			private Vector3 GetOffsetTarget(IKSolverFullBodyBiped solver)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000E7F")]
			[Address(RVA = "0xEFDF98", Offset = "0xEFDF98", VA = "0xEFDF98")]
			private Vector3 Raycast(Vector3 from, Vector3 to)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000E80")]
			[Address(RVA = "0xEFE20C", Offset = "0xEFE20C", VA = "0xEFE20C")]
			public Avoider()
			{
			}
		}

		[Token(Token = "0x40004CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8C14", Offset = "0x9A8C14")]
		public Avoider[] avoiders;

		[Token(Token = "0x6000AD3")]
		[Address(RVA = "0xEFDB70", Offset = "0xEFDB70", VA = "0xEFDB70", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000AD4")]
		[Address(RVA = "0xEFDDF0", Offset = "0xEFDDF0", VA = "0xEFDDF0")]
		public PenetrationAvoidance()
		{
		}
	}
	[Token(Token = "0x20000BE")]
	public class Recoil : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20001CF")]
		public class RecoilOffset
		{
			[Serializable]
			[Token(Token = "0x20001F9")]
			public class EffectorLink
			{
				[Token(Token = "0x4000B38")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AC3C4", Offset = "0x9AC3C4")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4000B39")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9AC3FC", Offset = "0x9AC3FC")]
				public float weight;

				[Token(Token = "0x6000ED7")]
				[Address(RVA = "0xF01138", Offset = "0xF01138", VA = "0xF01138")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4000AB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9ABB94", Offset = "0x9ABB94")]
			public Vector3 offset;

			[Token(Token = "0x4000AB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9ABBCC", Offset = "0x9ABBCC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9ABBCC", Offset = "0x9ABBCC")]
			public float additivity;

			[Token(Token = "0x4000AB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9ABC20", Offset = "0x9ABC20")]
			public float maxAdditiveOffsetMag;

			[Token(Token = "0x4000AB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9ABC58", Offset = "0x9ABC58")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x4000AB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 additiveOffset;

			[Token(Token = "0x4000AB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 lastOffset;

			[Token(Token = "0x6000E81")]
			[Address(RVA = "0xEFFE80", Offset = "0xEFFE80", VA = "0xEFFE80")]
			public void Start()
			{
			}

			[Token(Token = "0x6000E82")]
			[Address(RVA = "0xF00A10", Offset = "0xF00A10", VA = "0xF00A10")]
			public void Apply(IKSolverFullBodyBiped solver, Quaternion rotation, float masterWeight, float length, float timeLeft)
			{
			}

			[Token(Token = "0x6000E83")]
			[Address(RVA = "0xF01124", Offset = "0xF01124", VA = "0xF01124")]
			public RecoilOffset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001D0")]
		public enum Handedness
		{
			[Token(Token = "0x4000AB7")]
			Right,
			[Token(Token = "0x4000AB8")]
			Left
		}

		[Token(Token = "0x40004CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8C4C", Offset = "0x9A8C4C")]
		public AimIK aimIK;

		[Token(Token = "0x40004CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8C84", Offset = "0x9A8C84")]
		public bool aimIKSolvedLast;

		[Token(Token = "0x40004CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8CBC", Offset = "0x9A8CBC")]
		public Handedness handedness;

		[Token(Token = "0x40004D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8CF4", Offset = "0x9A8CF4")]
		public bool twoHanded;

		[Token(Token = "0x40004D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8D2C", Offset = "0x9A8D2C")]
		public AnimationCurve recoilWeight;

		[Token(Token = "0x40004D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8D64", Offset = "0x9A8D64")]
		public float magnitudeRandom;

		[Token(Token = "0x40004D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8D9C", Offset = "0x9A8D9C")]
		public Vector3 rotationRandom;

		[Token(Token = "0x40004D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8DD4", Offset = "0x9A8DD4")]
		public Vector3 handRotationOffset;

		[Token(Token = "0x40004D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8E0C", Offset = "0x9A8E0C")]
		public float blendTime;

		[Token(Token = "0x40004D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x9A8E44", Offset = "0x9A8E44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8E44", Offset = "0x9A8E44")]
		public RecoilOffset[] offsets;

		[Token(Token = "0x40004D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public Quaternion rotationOffset;

		[Token(Token = "0x40004D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float magnitudeMlp;

		[Token(Token = "0x40004D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float endTime;

		[Token(Token = "0x40004DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Quaternion handRotation;

		[Token(Token = "0x40004DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Quaternion secondaryHandRelativeRotation;

		[Token(Token = "0x40004DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Quaternion randomRotation;

		[Token(Token = "0x40004DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float length;

		[Token(Token = "0x40004DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private bool initiated;

		[Token(Token = "0x40004DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float blendWeight;

		[Token(Token = "0x40004E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float w;

		[Token(Token = "0x40004E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Quaternion primaryHandRotation;

		[Token(Token = "0x40004E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool handRotationsSet;

		[Token(Token = "0x40004E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Vector3 aimIKAxis;

		[Token(Token = "0x170000CD")]
		public bool isFinished
		{
			[Token(Token = "0x6000AD5")]
			[Address(RVA = "0xEFFC58", Offset = "0xEFFC58", VA = "0xEFFC58")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000CE")]
		private IKEffector primaryHandEffector
		{
			[Token(Token = "0x6000ADB")]
			[Address(RVA = "0xF00CC4", Offset = "0xF00CC4", VA = "0xF00CC4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000CF")]
		private IKEffector secondaryHandEffector
		{
			[Token(Token = "0x6000ADC")]
			[Address(RVA = "0xF00D04", Offset = "0xF00D04", VA = "0xF00D04")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D0")]
		private Transform primaryHand
		{
			[Token(Token = "0x6000ADD")]
			[Address(RVA = "0xF00C84", Offset = "0xF00C84", VA = "0xF00C84")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D1")]
		private Transform secondaryHand
		{
			[Token(Token = "0x6000ADE")]
			[Address(RVA = "0xF00CA4", Offset = "0xF00CA4", VA = "0xF00CA4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AD6")]
		[Address(RVA = "0xEFFC88", Offset = "0xEFFC88", VA = "0xEFFC88")]
		public void SetHandRotations(Quaternion leftHandRotation, Quaternion rightHandRotation)
		{
		}

		[Token(Token = "0x6000AD7")]
		[Address(RVA = "0xEFFCB4", Offset = "0xEFFCB4", VA = "0xEFFCB4")]
		public void Fire(float magnitude)
		{
		}

		[Token(Token = "0x6000AD8")]
		[Address(RVA = "0xEFFF30", Offset = "0xEFFF30", VA = "0xEFFF30", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000AD9")]
		[Address(RVA = "0xF00D44", Offset = "0xF00D44", VA = "0xF00D44")]
		private void AfterFBBIK()
		{
		}

		[Token(Token = "0x6000ADA")]
		[Address(RVA = "0xF00E9C", Offset = "0xF00E9C", VA = "0xF00E9C")]
		private void AfterAimIK()
		{
		}

		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0xF00ED8", Offset = "0xF00ED8", VA = "0xF00ED8", Slot = "6")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6000AE0")]
		[Address(RVA = "0xF01070", Offset = "0xF01070", VA = "0xF01070")]
		public Recoil()
		{
		}
	}
	[Token(Token = "0x20000BF")]
	public class ShoulderRotator : MonoBehaviour
	{
		[Token(Token = "0x40004E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8EA4", Offset = "0x9A8EA4")]
		public float weight;

		[Token(Token = "0x40004E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A8EDC", Offset = "0x9A8EDC")]
		public float offset;

		[Token(Token = "0x40004E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x40004E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool skip;

		[Token(Token = "0x6000AE1")]
		[Address(RVA = "0xF04930", Offset = "0xF04930", VA = "0xF04930")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0xF04A04", Offset = "0xF04A04", VA = "0xF04A04")]
		private void RotateShoulders()
		{
		}

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0xF04AF0", Offset = "0xF04AF0", VA = "0xF04AF0")]
		private void RotateShoulder(FullBodyBipedChain chain, float weight, float offset)
		{
		}

		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0xF04F38", Offset = "0xF04F38", VA = "0xF04F38")]
		private IKMapping.BoneMap GetParentBoneMap(FullBodyBipedChain chain)
		{
			return null;
		}

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0xF04F70", Offset = "0xF04F70", VA = "0xF04F70")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0xF05068", Offset = "0xF05068", VA = "0xF05068")]
		public ShoulderRotator()
		{
		}
	}
	[Token(Token = "0x20000C0")]
	public static class VRIKCalibrator
	{
		[Serializable]
		[Token(Token = "0x20001D1")]
		public class Settings
		{
			[Token(Token = "0x4000AB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9ABC90", Offset = "0x9ABC90")]
			public float scaleMlp;

			[Token(Token = "0x4000ABA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9ABCC8", Offset = "0x9ABCC8")]
			public Vector3 headTrackerForward;

			[Token(Token = "0x4000ABB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9ABD00", Offset = "0x9ABD00")]
			public Vector3 headTrackerUp;

			[Token(Token = "0x4000ABC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9ABD38", Offset = "0x9ABD38")]
			public Vector3 bodyTrackerForward;

			[Token(Token = "0x4000ABD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9ABD70", Offset = "0x9ABD70")]
			public Vector3 bodyTrackerUp;

			[Token(Token = "0x4000ABE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9ABDA8", Offset = "0x9ABDA8")]
			public Vector3 handTrackerForward;

			[Token(Token = "0x4000ABF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9ABDE0", Offset = "0x9ABDE0")]
			public Vector3 handTrackerUp;

			[Token(Token = "0x4000AC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9ABE18", Offset = "0x9ABE18")]
			public Vector3 footTrackerForward;

			[Token(Token = "0x4000AC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9ABE50", Offset = "0x9ABE50")]
			public Vector3 footTrackerUp;

			[Token(Token = "0x4000AC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x9ABE88", Offset = "0x9ABE88")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9ABE88", Offset = "0x9ABE88")]
			public Vector3 headOffset;

			[Token(Token = "0x4000AC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9ABED8", Offset = "0x9ABED8")]
			public Vector3 handOffset;

			[Token(Token = "0x4000AC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9ABF10", Offset = "0x9ABF10")]
			public float footForwardOffset;

			[Token(Token = "0x4000AC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9ABF48", Offset = "0x9ABF48")]
			public float footInwardOffset;

			[Token(Token = "0x4000AC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9ABF80", Offset = "0x9ABF80")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9ABF80", Offset = "0x9ABF80")]
			public float footHeadingOffset;

			[Token(Token = "0x4000AC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9ABFDC", Offset = "0x9ABFDC")]
			public float pelvisPositionWeight;

			[Token(Token = "0x4000AC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9ABFF4", Offset = "0x9ABFF4")]
			public float pelvisRotationWeight;

			[Token(Token = "0x6000E84")]
			[Address(RVA = "0x108C890", Offset = "0x108C890", VA = "0x108C890")]
			public Settings()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001D2")]
		public class CalibrationData
		{
			[Serializable]
			[Token(Token = "0x20001FA")]
			public class Target
			{
				[Token(Token = "0x4000B3A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public bool used;

				[Token(Token = "0x4000B3B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				public Vector3 localPosition;

				[Token(Token = "0x4000B3C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public Quaternion localRotation;

				[Token(Token = "0x6000ED8")]
				[Address(RVA = "0x108B93C", Offset = "0x108B93C", VA = "0x108B93C")]
				public Target(Transform t)
				{
				}

				[Token(Token = "0x6000ED9")]
				[Address(RVA = "0x108C490", Offset = "0x108C490", VA = "0x108C490")]
				public void SetTo(Transform t)
				{
				}
			}

			[Token(Token = "0x4000AC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float scale;

			[Token(Token = "0x4000ACA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Target head;

			[Token(Token = "0x4000ACB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Target leftHand;

			[Token(Token = "0x4000ACC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Target rightHand;

			[Token(Token = "0x4000ACD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Target pelvis;

			[Token(Token = "0x4000ACE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Target leftFoot;

			[Token(Token = "0x4000ACF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Target rightFoot;

			[Token(Token = "0x4000AD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Target leftLegGoal;

			[Token(Token = "0x4000AD1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Target rightLegGoal;

			[Token(Token = "0x4000AD2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Vector3 pelvisTargetRight;

			[Token(Token = "0x4000AD3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			public float pelvisPositionWeight;

			[Token(Token = "0x4000AD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public float pelvisRotationWeight;

			[Token(Token = "0x6000E85")]
			[Address(RVA = "0x108ADE0", Offset = "0x108ADE0", VA = "0x108ADE0")]
			public CalibrationData()
			{
			}
		}

		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0x10899A0", Offset = "0x10899A0", VA = "0x10899A0")]
		public static void RecalibrateScale(VRIK ik, Settings settings)
		{
		}

		[Token(Token = "0x6000AE8")]
		[Address(RVA = "0x1089B08", Offset = "0x1089B08", VA = "0x1089B08")]
		public static CalibrationData Calibrate(VRIK ik, Settings settings, Transform headTracker, [Optional] Transform bodyTracker, [Optional] Transform leftHandTracker, [Optional] Transform rightHandTracker, [Optional] Transform leftFootTracker, [Optional] Transform rightFootTracker)
		{
			return null;
		}

		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0x108AF58", Offset = "0x108AF58", VA = "0x108AF58")]
		private static void CalibrateLeg(Settings settings, Transform tracker, IKSolverVR.Leg leg, Transform lastBone, Vector3 rootForward, bool isLeft)
		{
		}

		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0x108BA00", Offset = "0x108BA00", VA = "0x108BA00")]
		public static void Calibrate(VRIK ik, CalibrationData data, Transform headTracker, [Optional] Transform bodyTracker, [Optional] Transform leftHandTracker, [Optional] Transform rightHandTracker, [Optional] Transform leftFootTracker, [Optional] Transform rightFootTracker)
		{
		}

		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0x108C4F0", Offset = "0x108C4F0", VA = "0x108C4F0")]
		private static void CalibrateLeg(CalibrationData data, Transform tracker, IKSolverVR.Leg leg, Transform lastBone, Vector3 rootForward, bool isLeft)
		{
		}
	}
	[Token(Token = "0x20000C1")]
	public class VRIKLODController : MonoBehaviour
	{
		[Token(Token = "0x40004E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Renderer LODRenderer;

		[Token(Token = "0x40004E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float LODDistance;

		[Token(Token = "0x40004EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool allowCulled;

		[Token(Token = "0x40004EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private VRIK ik;

		[Token(Token = "0x6000AEC")]
		[Address(RVA = "0x108C988", Offset = "0x108C988", VA = "0x108C988")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AED")]
		[Address(RVA = "0x108C9E0", Offset = "0x108C9E0", VA = "0x108C9E0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0x108CA14", Offset = "0x108CA14", VA = "0x108CA14")]
		private int GetLODLevel()
		{
			return default(int);
		}

		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0x108CB9C", Offset = "0x108CB9C", VA = "0x108CB9C")]
		public VRIKLODController()
		{
		}
	}
	[Token(Token = "0x20000C2")]
	public class VRIKRootController : MonoBehaviour
	{
		[Token(Token = "0x40004EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8F14", Offset = "0x9A8F14")]
		private Vector3 <pelvisTargetRight>k__BackingField;

		[Token(Token = "0x40004ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform pelvisTarget;

		[Token(Token = "0x40004EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform leftFootTarget;

		[Token(Token = "0x40004EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform rightFootTarget;

		[Token(Token = "0x40004F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private VRIK ik;

		[Token(Token = "0x170000D2")]
		public Vector3 pelvisTargetRight
		{
			[Token(Token = "0x6000AF0")]
			[Address(RVA = "0x108CBB4", Offset = "0x108CBB4", VA = "0x108CBB4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF30C", Offset = "0x9AF30C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000AF1")]
			[Address(RVA = "0x108CBC0", Offset = "0x108CBC0", VA = "0x108CBC0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF31C", Offset = "0x9AF31C")]
			private set
			{
			}
		}

		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0x108CBCC", Offset = "0x108CBCC", VA = "0x108CBCC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0x108B718", Offset = "0x108B718", VA = "0x108B718")]
		public void Calibrate()
		{
		}

		[Token(Token = "0x6000AF4")]
		[Address(RVA = "0x108C720", Offset = "0x108C720", VA = "0x108C720")]
		public void Calibrate(VRIKCalibrator.CalibrationData data)
		{
		}

		[Token(Token = "0x6000AF5")]
		[Address(RVA = "0x108CCA4", Offset = "0x108CCA4", VA = "0x108CCA4")]
		private void OnPreUpdate()
		{
		}

		[Token(Token = "0x6000AF6")]
		[Address(RVA = "0x108D148", Offset = "0x108D148", VA = "0x108D148")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000AF7")]
		[Address(RVA = "0x108D240", Offset = "0x108D240", VA = "0x108D240")]
		public VRIKRootController()
		{
		}
	}
}
namespace MiniJSON
{
	[Token(Token = "0x20000C3")]
	public static class Json
	{
		[Token(Token = "0x20001D3")]
		private sealed class Parser : IDisposable
		{
			[Token(Token = "0x20001FB")]
			private enum TOKEN
			{
				[Token(Token = "0x4000B3E")]
				NONE,
				[Token(Token = "0x4000B3F")]
				CURLY_OPEN,
				[Token(Token = "0x4000B40")]
				CURLY_CLOSE,
				[Token(Token = "0x4000B41")]
				SQUARED_OPEN,
				[Token(Token = "0x4000B42")]
				SQUARED_CLOSE,
				[Token(Token = "0x4000B43")]
				COLON,
				[Token(Token = "0x4000B44")]
				COMMA,
				[Token(Token = "0x4000B45")]
				STRING,
				[Token(Token = "0x4000B46")]
				NUMBER,
				[Token(Token = "0x4000B47")]
				TRUE,
				[Token(Token = "0x4000B48")]
				FALSE,
				[Token(Token = "0x4000B49")]
				NULL
			}

			[Token(Token = "0x4000AD5")]
			private const string WORD_BREAK = "{}[],:\"";

			[Token(Token = "0x4000AD6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private StringReader json;

			[Token(Token = "0x17000153")]
			private char PeekChar
			{
				[Token(Token = "0x6000E91")]
				[Address(RVA = "0xEAF748", Offset = "0xEAF748", VA = "0xEAF748")]
				get
				{
					return default(char);
				}
			}

			[Token(Token = "0x17000154")]
			private char NextChar
			{
				[Token(Token = "0x6000E92")]
				[Address(RVA = "0xEAF550", Offset = "0xEAF550", VA = "0xEAF550")]
				get
				{
					return default(char);
				}
			}

			[Token(Token = "0x17000155")]
			private string NextWord
			{
				[Token(Token = "0x6000E93")]
				[Address(RVA = "0xEAF5D8", Offset = "0xEAF5D8", VA = "0xEAF5D8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000156")]
			private TOKEN NextToken
			{
				[Token(Token = "0x6000E94")]
				[Address(RVA = "0xEAEE6C", Offset = "0xEAEE6C", VA = "0xEAEE6C")]
				get
				{
					return default(TOKEN);
				}
			}

			[Token(Token = "0x6000E86")]
			[Address(RVA = "0xEAEBE0", Offset = "0xEAEBE0", VA = "0xEAEBE0")]
			public static bool IsWordBreak(char c)
			{
				return default(bool);
			}

			[Token(Token = "0x6000E87")]
			[Address(RVA = "0xEAEC80", Offset = "0xEAEC80", VA = "0xEAEC80")]
			private Parser(string jsonString)
			{
			}

			[Token(Token = "0x6000E88")]
			[Address(RVA = "0xEAEA24", Offset = "0xEAEA24", VA = "0xEAEA24")]
			public static object Parse(string jsonString)
			{
				return null;
			}

			[Token(Token = "0x6000E89")]
			[Address(RVA = "0xEAED24", Offset = "0xEAED24", VA = "0xEAED24", Slot = "4")]
			public void Dispose()
			{
			}

			[Token(Token = "0x6000E8A")]
			[Address(RVA = "0xEAED58", Offset = "0xEAED58", VA = "0xEAED58")]
			private Dictionary<string, object> ParseObject()
			{
				return null;
			}

			[Token(Token = "0x6000E8B")]
			[Address(RVA = "0xEAF29C", Offset = "0xEAF29C", VA = "0xEAF29C")]
			private List<object> ParseArray()
			{
				return null;
			}

			[Token(Token = "0x6000E8C")]
			[Address(RVA = "0xEAECFC", Offset = "0xEAECFC", VA = "0xEAECFC")]
			private object ParseValue()
			{
				return null;
			}

			[Token(Token = "0x6000E8D")]
			[Address(RVA = "0xEAF370", Offset = "0xEAF370", VA = "0xEAF370")]
			private object ParseByToken(TOKEN token)
			{
				return null;
			}

			[Token(Token = "0x6000E8E")]
			[Address(RVA = "0xEAF01C", Offset = "0xEAF01C", VA = "0xEAF01C")]
			private string ParseString()
			{
				return null;
			}

			[Token(Token = "0x6000E8F")]
			[Address(RVA = "0xEAF44C", Offset = "0xEAF44C", VA = "0xEAF44C")]
			private object ParseNumber()
			{
				return null;
			}

			[Token(Token = "0x6000E90")]
			[Address(RVA = "0xEAF694", Offset = "0xEAF694", VA = "0xEAF694")]
			private void EatWhitespace()
			{
			}
		}

		[Token(Token = "0x20001D4")]
		private sealed class Serializer
		{
			[Token(Token = "0x4000AD7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private StringBuilder builder;

			[Token(Token = "0x6000E95")]
			[Address(RVA = "0xEAF7D0", Offset = "0xEAF7D0", VA = "0xEAF7D0")]
			private Serializer()
			{
			}

			[Token(Token = "0x6000E96")]
			[Address(RVA = "0xEAEB64", Offset = "0xEAEB64", VA = "0xEAEB64")]
			public static string Serialize(object obj)
			{
				return null;
			}

			[Token(Token = "0x6000E97")]
			[Address(RVA = "0xEAF83C", Offset = "0xEAF83C", VA = "0xEAF83C")]
			private void SerializeValue(object value)
			{
			}

			[Token(Token = "0x6000E98")]
			[Address(RVA = "0xEAFF04", Offset = "0xEAFF04", VA = "0xEAFF04")]
			private void SerializeObject(IDictionary obj)
			{
			}

			[Token(Token = "0x6000E99")]
			[Address(RVA = "0xEAFC38", Offset = "0xEAFC38", VA = "0xEAFC38")]
			private void SerializeArray(IList anArray)
			{
			}

			[Token(Token = "0x6000E9A")]
			[Address(RVA = "0xEAF9D8", Offset = "0xEAF9D8", VA = "0xEAF9D8")]
			private void SerializeString(string str)
			{
			}

			[Token(Token = "0x6000E9B")]
			[Address(RVA = "0xEB02FC", Offset = "0xEB02FC", VA = "0xEB02FC")]
			private void SerializeOther(object value)
			{
			}
		}

		[Token(Token = "0x6000AF8")]
		[Address(RVA = "0xEAEA18", Offset = "0xEAEA18", VA = "0xEAEA18")]
		public static object Deserialize(string json)
		{
			return null;
		}

		[Token(Token = "0x6000AF9")]
		[Address(RVA = "0xEAEB60", Offset = "0xEAEB60", VA = "0xEAEB60")]
		public static string Serialize(object obj)
		{
			return null;
		}
	}
}
namespace CriAtomDebugDetail
{
	[Token(Token = "0x20000C4")]
	public class Utility
	{
		[Token(Token = "0x6000AFA")]
		[Address(RVA = "0xFA67CC", Offset = "0xFA67CC", VA = "0xFA67CC")]
		public static string PtrToStringAutoOrNull(IntPtr stringPtr)
		{
			return null;
		}

		[Token(Token = "0x6000AFB")]
		[Address(RVA = "0xFA6858", Offset = "0xFA6858", VA = "0xFA6858")]
		public Utility()
		{
		}
	}
}
namespace CriWare
{
	[Token(Token = "0x20000C5")]
	public class Common
	{
		[Token(Token = "0x20001D5")]
		public struct CpuUsage
		{
			[Token(Token = "0x4000AD8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float last;

			[Token(Token = "0x4000AD9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float average;

			[Token(Token = "0x4000ADA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float peak;
		}

		[Token(Token = "0x40004F1")]
		private const string scriptVersionString = "2.37.13";

		[Token(Token = "0x40004F2")]
		private const int scriptVersionNumber = 37163776;

		[Token(Token = "0x40004F3")]
		public const bool supportsCriFsInstaller = true;

		[Token(Token = "0x40004F4")]
		public const bool supportsCriFsWebInstaller = true;

		[Token(Token = "0x40004F5")]
		public const string pluginName = "cri_ware_unity";

		[Token(Token = "0x40004F6")]
		public const CallingConvention pluginCallingConvention = CallingConvention.Winapi;

		[Token(Token = "0x40004F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static GameObject _managerObject;

		[Token(Token = "0x170000D3")]
		public static string streamingAssetsPath
		{
			[Token(Token = "0x6000AFC")]
			[Address(RVA = "0xEA8B18", Offset = "0xEA8B18", VA = "0xEA8B18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D4")]
		public static string installTargetPath
		{
			[Token(Token = "0x6000AFD")]
			[Address(RVA = "0xEAB78C", Offset = "0xEAB78C", VA = "0xEAB78C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D5")]
		public static GameObject managerObject
		{
			[Token(Token = "0x6000AFF")]
			[Address(RVA = "0xEAB000", Offset = "0xEAB000", VA = "0xEAB000")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0xEA8A84", Offset = "0xEA8A84", VA = "0xEA8A84")]
		public static bool IsStreamingAssetsPath(string path)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B00")]
		[Address(RVA = "0xEAB7BC", Offset = "0xEAB7BC", VA = "0xEAB7BC")]
		public static string GetScriptVersionString()
		{
			return null;
		}

		[Token(Token = "0x6000B01")]
		[Address(RVA = "0xEAB804", Offset = "0xEAB804", VA = "0xEAB804")]
		public static int GetScriptVersionNumber()
		{
			return default(int);
		}

		[Token(Token = "0x6000B02")]
		[Address(RVA = "0xEAB810", Offset = "0xEAB810", VA = "0xEAB810")]
		public static int GetBinaryVersionNumber()
		{
			return default(int);
		}

		[Token(Token = "0x6000B03")]
		[Address(RVA = "0xEAB8E0", Offset = "0xEAB8E0", VA = "0xEAB8E0")]
		public static int GetRequiredBinaryVersionNumber()
		{
			return default(int);
		}

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0xEAB8EC", Offset = "0xEAB8EC", VA = "0xEAB8EC")]
		public static bool CheckBinaryVersionCompatibility()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0xEAB99C", Offset = "0xEAB99C", VA = "0xEAB99C")]
		public static uint GetFsMemoryUsage()
		{
			return default(uint);
		}

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0xEAB9FC", Offset = "0xEAB9FC", VA = "0xEAB9FC")]
		public static uint GetAtomMemoryUsage()
		{
			return default(uint);
		}

		[Token(Token = "0x6000B07")]
		[Address(RVA = "0xEABA5C", Offset = "0xEABA5C", VA = "0xEABA5C")]
		public static uint GetManaMemoryUsage()
		{
			return default(uint);
		}

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0xEABAB8", Offset = "0xEABAB8", VA = "0xEABAB8")]
		public static CpuUsage GetAtomCpuUsage()
		{
			return default(CpuUsage);
		}

		[PreserveSig]
		[Token(Token = "0x6000B09")]
		[Address(RVA = "0xEAB86C", Offset = "0xEAB86C", VA = "0xEAB86C")]
		public static extern int CRIWARED1CDE3A7();

		[PreserveSig]
		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0xEA9B08", Offset = "0xEA9B08", VA = "0xEA9B08")]
		public static extern void criWareUnity_SetRenderingEventOffsetForMana(int offset);

		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0xEABB18", Offset = "0xEABB18", VA = "0xEABB18")]
		public Common()
		{
		}
	}
}
namespace CriMana
{
	[Token(Token = "0x20000C6")]
	public enum CodecType
	{
		[Token(Token = "0x40004F9")]
		Unknown = 0,
		[Token(Token = "0x40004FA")]
		SofdecPrime = 1,
		[Token(Token = "0x40004FB")]
		H264 = 5,
		[Token(Token = "0x40004FC")]
		VP9 = 9
	}
	[Token(Token = "0x20000C7")]
	public enum AlphaType
	{
		[Token(Token = "0x40004FE")]
		CompoOpaq,
		[Token(Token = "0x40004FF")]
		CompoAlphaFull,
		[Token(Token = "0x4000500")]
		CompoAlpha3Step,
		[Token(Token = "0x4000501")]
		CompoAlpha32Bit
	}
	[Token(Token = "0x20000C8")]
	public struct AudioInfo
	{
		[Token(Token = "0x4000502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint samplingRate;

		[Token(Token = "0x4000503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint numChannels;

		[Token(Token = "0x4000504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint totalSamples;
	}
	[StructLayout(0)]
	[Token(Token = "0x20000C9")]
	public class MovieInfo
	{
		[Token(Token = "0x4000505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private uint _reserved1;

		[Token(Token = "0x4000506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private uint _hasAlpha;

		[Token(Token = "0x4000507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint width;

		[Token(Token = "0x4000508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint height;

		[Token(Token = "0x4000509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint dispWidth;

		[Token(Token = "0x400050A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint dispHeight;

		[Token(Token = "0x400050B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint framerateN;

		[Token(Token = "0x400050C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public uint framerateD;

		[Token(Token = "0x400050D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public uint totalFrames;

		[Token(Token = "0x400050E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private uint _codecType;

		[Token(Token = "0x400050F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private uint _alphaCodecType;

		[Token(Token = "0x4000510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public uint numAudioStreams;

		[Token(Token = "0x4000511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AudioInfo[] audioPrm;

		[Token(Token = "0x4000512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public uint numSubtitleChannels;

		[Token(Token = "0x4000513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public uint maxSubtitleSize;

		[Token(Token = "0x4000514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public uint maxChunkSize;

		[Token(Token = "0x170000D6")]
		public bool hasAlpha
		{
			[Token(Token = "0x6000B0D")]
			[Address(RVA = "0xF7D4E4", Offset = "0xF7D4E4", VA = "0xF7D4E4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B0E")]
			[Address(RVA = "0xF80A5C", Offset = "0xF80A5C", VA = "0xF80A5C")]
			set
			{
			}
		}

		[Token(Token = "0x170000D7")]
		public CodecType codecType
		{
			[Token(Token = "0x6000B0F")]
			[Address(RVA = "0xF80A78", Offset = "0xF80A78", VA = "0xF80A78")]
			get
			{
				return default(CodecType);
			}
			[Token(Token = "0x6000B10")]
			[Address(RVA = "0xF80A80", Offset = "0xF80A80", VA = "0xF80A80")]
			set
			{
			}
		}

		[Token(Token = "0x170000D8")]
		public CodecType alphaCodecType
		{
			[Token(Token = "0x6000B11")]
			[Address(RVA = "0xF80A88", Offset = "0xF80A88", VA = "0xF80A88")]
			get
			{
				return default(CodecType);
			}
			[Token(Token = "0x6000B12")]
			[Address(RVA = "0xF80A90", Offset = "0xF80A90", VA = "0xF80A90")]
			set
			{
			}
		}

		[Token(Token = "0x6000B13")]
		[Address(RVA = "0xF80A98", Offset = "0xF80A98", VA = "0xF80A98")]
		public MovieInfo()
		{
		}
	}
	[StructLayout(0)]
	[Token(Token = "0x20000CA")]
	public class FrameInfo
	{
		[Token(Token = "0x4000515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int frameNo;

		[Token(Token = "0x4000516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int frameNoPerFile;

		[Token(Token = "0x4000517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint width;

		[Token(Token = "0x4000518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint height;

		[Token(Token = "0x4000519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint dispWidth;

		[Token(Token = "0x400051A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint dispHeight;

		[Token(Token = "0x400051B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint framerateN;

		[Token(Token = "0x400051C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public uint framerateD;

		[Token(Token = "0x400051D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ulong time;

		[Token(Token = "0x400051E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ulong tunit;

		[Token(Token = "0x400051F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public uint cntConcatenatedMovie;

		[Token(Token = "0x4000520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private AlphaType alphaType;

		[Token(Token = "0x4000521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public uint cntSkippedFrames;

		[Token(Token = "0x4000522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public uint totalFramesPerFile;

		[Token(Token = "0x6000B14")]
		[Address(RVA = "0xF7D2DC", Offset = "0xF7D2DC", VA = "0xF7D2DC")]
		public FrameInfo()
		{
		}
	}
	[Token(Token = "0x20000CB")]
	public struct EventPoint
	{
		[Token(Token = "0x4000523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr cueName;

		[Token(Token = "0x4000524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint cueNameSize;

		[Token(Token = "0x4000525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong time;

		[Token(Token = "0x4000526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ulong tunit;

		[Token(Token = "0x4000527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int type;

		[Token(Token = "0x4000528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IntPtr paramString;

		[Token(Token = "0x4000529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public uint paramStringSize;

		[Token(Token = "0x400052A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public uint cntCallback;
	}
	[Token(Token = "0x20000CC")]
	public static class Settings
	{
		[Token(Token = "0x6000B15")]
		[Address(RVA = "0xEA6E6C", Offset = "0xEA6E6C", VA = "0xEA6E6C")]
		public static void SetDecodeSkippingEnabled(bool enabled)
		{
		}
	}
	[Token(Token = "0x20000CD")]
	public class Player : CriDisposable
	{
		[Token(Token = "0x20001D6")]
		public enum Status
		{
			[Token(Token = "0x4000ADC")]
			Stop,
			[Token(Token = "0x4000ADD")]
			Dechead,
			[Token(Token = "0x4000ADE")]
			WaitPrep,
			[Token(Token = "0x4000ADF")]
			Prep,
			[Token(Token = "0x4000AE0")]
			Ready,
			[Token(Token = "0x4000AE1")]
			Playing,
			[Token(Token = "0x4000AE2")]
			PlayEnd,
			[Token(Token = "0x4000AE3")]
			Error,
			[Token(Token = "0x4000AE4")]
			StopProcessing,
			[Token(Token = "0x4000AE5")]
			ReadyForRendering
		}

		[Token(Token = "0x20001D7")]
		public enum SetMode
		{
			[Token(Token = "0x4000AE7")]
			New,
			[Token(Token = "0x4000AE8")]
			Append,
			[Token(Token = "0x4000AE9")]
			AppendRepeatedly
		}

		[Token(Token = "0x20001D8")]
		public enum MovieEventSyncMode
		{
			[Token(Token = "0x4000AEB")]
			FrameTime,
			[Token(Token = "0x4000AEC")]
			PlayBackTime
		}

		[Token(Token = "0x20001D9")]
		public enum AudioTrack
		{
			[Token(Token = "0x4000AEE")]
			Off,
			[Token(Token = "0x4000AEF")]
			Auto
		}

		[Token(Token = "0x20001DA")]
		public enum TimerType
		{
			[Token(Token = "0x4000AF1")]
			None,
			[Token(Token = "0x4000AF2")]
			System,
			[Token(Token = "0x4000AF3")]
			Audio,
			[Token(Token = "0x4000AF4")]
			User,
			[Token(Token = "0x4000AF5")]
			Manual
		}

		[Token(Token = "0x20001DB")]
		public delegate void CuePointCallback(ref EventPoint eventPoint);

		[Token(Token = "0x20001DC")]
		public delegate void StatusChangeCallback(Status status);

		[Token(Token = "0x20001DD")]
		public delegate void SubtitleChangeCallback(IntPtr subtitleBuffer);

		[Token(Token = "0x20001DE")]
		public delegate Shader ShaderDispatchCallback(MovieInfo movieInfo, bool additiveMode);

		[Token(Token = "0x20001DF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x9A4D88", Offset = "0x9A4D88")]
		private delegate void CuePointCallbackFromNativeDelegate(IntPtr ptr1, IntPtr ptr2, [In] ref EventPoint eventPoint);

		[Token(Token = "0x20001E0")]
		public enum CriManaUnityPlayer_RenderEventAction
		{
			[Token(Token = "0x4000AF7")]
			UPDATE = 0,
			[Token(Token = "0x4000AF8")]
			INITIALIZE = 256,
			[Token(Token = "0x4000AF9")]
			RENDER = 512,
			[Token(Token = "0x4000AFA")]
			DESTROY = 768
		}

		[Token(Token = "0x20001E1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A4D9C", Offset = "0x9A4D9C")]
		private sealed class <IssuePluginUpdatesForFrames>d__146 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000AFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000AFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000AFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Player <>4__this;

			[Token(Token = "0x4000AFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int playerId;

			[Token(Token = "0x4000AFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public int frameCount;

			[Token(Token = "0x4000B00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool destroy;

			[Token(Token = "0x4000B01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public MonoBehaviour playerHolder;

			[Token(Token = "0x17000157")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000EB3")]
				[Address(RVA = "0xF85E98", Offset = "0xF85E98", VA = "0xF85E98", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000158")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000EB5")]
				[Address(RVA = "0xF85F00", Offset = "0xF85F00", VA = "0xF85F00", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000EB0")]
			[Address(RVA = "0xF8581C", Offset = "0xF8581C", VA = "0xF8581C")]
			[DebuggerHidden]
			public <IssuePluginUpdatesForFrames>d__146(int <>1__state)
			{
			}

			[Token(Token = "0x6000EB1")]
			[Address(RVA = "0xF85D88", Offset = "0xF85D88", VA = "0xF85D88", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000EB2")]
			[Address(RVA = "0xF85D8C", Offset = "0xF85D8C", VA = "0xF85D8C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000EB4")]
			[Address(RVA = "0xF85EA0", Offset = "0xF85EA0", VA = "0xF85EA0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400052B")]
		private const int InvalidPlayerId = -1;

		[Token(Token = "0x400052C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Player updatingPlayer;

		[Token(Token = "0x400052D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int playerId;

		[Token(Token = "0x400052E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool isDisposed;

		[Token(Token = "0x400052F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Status internalrequiredStatus;

		[Token(Token = "0x4000530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Status _nativeStatus;

		[Token(Token = "0x4000531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Status? lastNativeStatus;

		[Token(Token = "0x4000532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Status? lastPlayerStatus;

		[Token(Token = "0x4000533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool wasStopping;

		[Token(Token = "0x4000534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		private bool isPreparingForRendering;

		[Token(Token = "0x4000535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		private bool isNativeStartInvoked;

		[Token(Token = "0x4000536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x43")]
		private bool isNativeInitialized;

		[Token(Token = "0x4000537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RendererResource rendererResource;

		[Token(Token = "0x4000538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private MovieInfo _movieInfo;

		[Token(Token = "0x4000539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private FrameInfo _frameInfo;

		[Token(Token = "0x400053A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool isMovieInfoAvailable;

		[Token(Token = "0x400053B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool isFrameInfoAvailable;

		[Token(Token = "0x400053C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private ShaderDispatchCallback _shaderDispatchCallback;

		[Token(Token = "0x400053D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool enableSubtitle;

		[Token(Token = "0x400053E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int subtitleBufferSize;

		[Token(Token = "0x400053F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private uint droppedFrameCount;

		[Token(Token = "0x4000540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private CriAtomExPlayer _atomExPlayer;

		[Token(Token = "0x4000541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private CriAtomEx3dSource _atomEx3Dsource;

		[Token(Token = "0x4000542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private TimerType _timerType;

		[Token(Token = "0x4000543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool isStoppingForSeek;

		[Token(Token = "0x4000544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public CuePointCallback cuePointCallback;

		[Token(Token = "0x4000545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public StatusChangeCallback statusChangeCallback;

		[Token(Token = "0x4000547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8F34", Offset = "0x9A8F34")]
		private bool <additiveMode>k__BackingField;

		[Token(Token = "0x4000548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8F44", Offset = "0x9A8F44")]
		private int <maxFrameDrop>k__BackingField;

		[Token(Token = "0x4000549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8F54", Offset = "0x9A8F54")]
		private bool <applyTargetAlpha>k__BackingField;

		[Token(Token = "0x400054A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8F64", Offset = "0x9A8F64")]
		private bool <uiRenderMode>k__BackingField;

		[Token(Token = "0x400054B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8F74", Offset = "0x9A8F74")]
		private IntPtr <subtitleBuffer>k__BackingField;

		[Token(Token = "0x400054C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8F84", Offset = "0x9A8F84")]
		private int <subtitleSize>k__BackingField;

		[Token(Token = "0x400054D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8F94", Offset = "0x9A8F94")]
		private CriManaMoviePlayerHolder <playerHolder>k__BackingField;

		[Token(Token = "0x170000D9")]
		internal Status nativeStatus
		{
			[Token(Token = "0x6000B16")]
			[Address(RVA = "0xF80B5C", Offset = "0xF80B5C", VA = "0xF80B5C")]
			get
			{
				return default(Status);
			}
		}

		[Token(Token = "0x170000DA")]
		private Status requiredStatus
		{
			[Token(Token = "0x6000B17")]
			[Address(RVA = "0xF80B64", Offset = "0xF80B64", VA = "0xF80B64")]
			get
			{
				return default(Status);
			}
			[Token(Token = "0x6000B18")]
			[Address(RVA = "0xF80B6C", Offset = "0xF80B6C", VA = "0xF80B6C")]
			set
			{
			}
		}

		[Token(Token = "0x170000DB")]
		public bool additiveMode
		{
			[Token(Token = "0x6000B1B")]
			[Address(RVA = "0xF80DA0", Offset = "0xF80DA0", VA = "0xF80DA0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF34C", Offset = "0x9AF34C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B1C")]
			[Address(RVA = "0xF80DA8", Offset = "0xF80DA8", VA = "0xF80DA8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF35C", Offset = "0x9AF35C")]
			set
			{
			}
		}

		[Token(Token = "0x170000DC")]
		public int maxFrameDrop
		{
			[Token(Token = "0x6000B1D")]
			[Address(RVA = "0xF80DB4", Offset = "0xF80DB4", VA = "0xF80DB4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF36C", Offset = "0x9AF36C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B1E")]
			[Address(RVA = "0xF80DBC", Offset = "0xF80DBC", VA = "0xF80DBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF37C", Offset = "0x9AF37C")]
			set
			{
			}
		}

		[Token(Token = "0x170000DD")]
		public bool applyTargetAlpha
		{
			[Token(Token = "0x6000B1F")]
			[Address(RVA = "0xF80DC4", Offset = "0xF80DC4", VA = "0xF80DC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF38C", Offset = "0x9AF38C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B20")]
			[Address(RVA = "0xF80DCC", Offset = "0xF80DCC", VA = "0xF80DCC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF39C", Offset = "0x9AF39C")]
			set
			{
			}
		}

		[Token(Token = "0x170000DE")]
		public bool uiRenderMode
		{
			[Token(Token = "0x6000B21")]
			[Address(RVA = "0xF80DD8", Offset = "0xF80DD8", VA = "0xF80DD8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF3AC", Offset = "0x9AF3AC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B22")]
			[Address(RVA = "0xF80DE0", Offset = "0xF80DE0", VA = "0xF80DE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF3BC", Offset = "0x9AF3BC")]
			set
			{
			}
		}

		[Token(Token = "0x170000DF")]
		public bool isFrameAvailable
		{
			[Token(Token = "0x6000B23")]
			[Address(RVA = "0xF80DEC", Offset = "0xF80DEC", VA = "0xF80DEC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E0")]
		public MovieInfo movieInfo
		{
			[Token(Token = "0x6000B24")]
			[Address(RVA = "0xF80DF4", Offset = "0xF80DF4", VA = "0xF80DF4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E1")]
		public FrameInfo frameInfo
		{
			[Token(Token = "0x6000B25")]
			[Address(RVA = "0xF80E0C", Offset = "0xF80E0C", VA = "0xF80E0C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E2")]
		public Status status
		{
			[Token(Token = "0x6000B26")]
			[Address(RVA = "0xF80E24", Offset = "0xF80E24", VA = "0xF80E24")]
			get
			{
				return default(Status);
			}
		}

		[Token(Token = "0x170000E3")]
		public int numberOfEntries
		{
			[Token(Token = "0x6000B27")]
			[Address(RVA = "0xF80EB4", Offset = "0xF80EB4", VA = "0xF80EB4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000E4")]
		public IntPtr subtitleBuffer
		{
			[Token(Token = "0x6000B28")]
			[Address(RVA = "0xF80F9C", Offset = "0xF80F9C", VA = "0xF80F9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF3CC", Offset = "0x9AF3CC")]
			get
			{
				return default(IntPtr);
			}
			[Token(Token = "0x6000B29")]
			[Address(RVA = "0xF80FA4", Offset = "0xF80FA4", VA = "0xF80FA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF3DC", Offset = "0x9AF3DC")]
			private set
			{
			}
		}

		[Token(Token = "0x170000E5")]
		public int subtitleSize
		{
			[Token(Token = "0x6000B2A")]
			[Address(RVA = "0xF80FAC", Offset = "0xF80FAC", VA = "0xF80FAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF3EC", Offset = "0x9AF3EC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B2B")]
			[Address(RVA = "0xF80FB4", Offset = "0xF80FB4", VA = "0xF80FB4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF3FC", Offset = "0x9AF3FC")]
			private set
			{
			}
		}

		[Token(Token = "0x170000E6")]
		public CriAtomExPlayer atomExPlayer
		{
			[Token(Token = "0x6000B2C")]
			[Address(RVA = "0xF80FBC", Offset = "0xF80FBC", VA = "0xF80FBC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E7")]
		public CriAtomEx3dSource atomEx3DsourceForAmbisonics
		{
			[Token(Token = "0x6000B2D")]
			[Address(RVA = "0xF80FC4", Offset = "0xF80FC4", VA = "0xF80FC4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E8")]
		public TimerType timerType
		{
			[Token(Token = "0x6000B2E")]
			[Address(RVA = "0xF80FCC", Offset = "0xF80FCC", VA = "0xF80FCC")]
			get
			{
				return default(TimerType);
			}
		}

		[Token(Token = "0x170000E9")]
		public CriManaMoviePlayerHolder playerHolder
		{
			[Token(Token = "0x6000B2F")]
			[Address(RVA = "0xF80FD4", Offset = "0xF80FD4", VA = "0xF80FD4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF40C", Offset = "0x9AF40C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B30")]
			[Address(RVA = "0xF80FDC", Offset = "0xF80FDC", VA = "0xF80FDC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF41C", Offset = "0x9AF41C")]
			set
			{
			}
		}

		[Token(Token = "0x170000EA")]
		public bool isAlive
		{
			[Token(Token = "0x6000B66")]
			[Address(RVA = "0xF854AC", Offset = "0xF854AC", VA = "0xF854AC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x14000010")]
		public event SubtitleChangeCallback OnSubtitleChanged
		{
			[Token(Token = "0x6000B19")]
			[Address(RVA = "0xF80C58", Offset = "0xF80C58", VA = "0xF80C58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF32C", Offset = "0x9AF32C")]
			add
			{
			}
			[Token(Token = "0x6000B1A")]
			[Address(RVA = "0xF80CFC", Offset = "0xF80CFC", VA = "0xF80CFC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AF33C", Offset = "0x9AF33C")]
			remove
			{
			}
		}

		[Token(Token = "0x6000B31")]
		[Address(RVA = "0xF80FE4", Offset = "0xF80FE4", VA = "0xF80FE4")]
		public Player()
		{
		}

		[Token(Token = "0x6000B32")]
		[Address(RVA = "0xF811B0", Offset = "0xF811B0", VA = "0xF811B0")]
		public Player(bool advanced_audio_mode, bool ambisonics_mode, uint max_path_length)
		{
		}

		[Token(Token = "0x6000B33")]
		[Address(RVA = "0xF8151C", Offset = "0xF8151C", VA = "0xF8151C", Slot = "1")]
		~Player()
		{
		}

		[Token(Token = "0x6000B34")]
		[Address(RVA = "0xF81790", Offset = "0xF81790", VA = "0xF81790", Slot = "5")]
		public override void Dispose()
		{
		}

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0xF81804", Offset = "0xF81804", VA = "0xF81804")]
		public void CreateRendererResource(int width, int height, bool alpha)
		{
		}

		[Token(Token = "0x6000B36")]
		[Address(RVA = "0xF81970", Offset = "0xF81970", VA = "0xF81970")]
		public void DisposeRendererResource()
		{
		}

		[Token(Token = "0x6000B37")]
		[Address(RVA = "0xF8199C", Offset = "0xF8199C", VA = "0xF8199C")]
		public void Prepare()
		{
		}

		[Token(Token = "0x6000B38")]
		[Address(RVA = "0xF81C94", Offset = "0xF81C94", VA = "0xF81C94")]
		public void PrepareForRendering()
		{
		}

		[Token(Token = "0x6000B39")]
		[Address(RVA = "0xF81DA8", Offset = "0xF81DA8", VA = "0xF81DA8")]
		public void Start()
		{
		}

		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0xF81E2C", Offset = "0xF81E2C", VA = "0xF81E2C")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000B3B")]
		[Address(RVA = "0xF81F60", Offset = "0xF81F60", VA = "0xF81F60")]
		public void StopForSeek()
		{
		}

		[Token(Token = "0x6000B3C")]
		[Address(RVA = "0xF81D00", Offset = "0xF81D00", VA = "0xF81D00")]
		public void Pause(bool sw)
		{
		}

		[Token(Token = "0x6000B3D")]
		[Address(RVA = "0xF820F8", Offset = "0xF820F8", VA = "0xF820F8")]
		public bool IsPaused()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B3E")]
		[Address(RVA = "0xF821E8", Offset = "0xF821E8", VA = "0xF821E8")]
		public bool SetFile(CriFsBinder binder, string moviePath, SetMode setMode = SetMode.New)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0xF824C8", Offset = "0xF824C8", VA = "0xF824C8")]
		public bool SetData(IntPtr data, long dataSize, SetMode setMode = SetMode.New)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B40")]
		[Address(RVA = "0xF826E0", Offset = "0xF826E0", VA = "0xF826E0")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9AF42C", Offset = "0x9AF42C")]
		public bool SetData(byte[] data, long datasize, SetMode setMode = SetMode.New)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0xF82908", Offset = "0xF82908", VA = "0xF82908")]
		public bool SetContentId(CriFsBinder binder, int contentId, SetMode setMode = SetMode.New)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B42")]
		[Address(RVA = "0xF82B64", Offset = "0xF82B64", VA = "0xF82B64")]
		public bool SetFileRange(string filePath, ulong offset, long range, SetMode setMode = SetMode.New)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B43")]
		[Address(RVA = "0xF82DCC", Offset = "0xF82DCC", VA = "0xF82DCC")]
		public void Loop(bool sw)
		{
		}

		[Token(Token = "0x6000B44")]
		[Address(RVA = "0xF82ED8", Offset = "0xF82ED8", VA = "0xF82ED8")]
		public void SetMasterTimerType(TimerType timerType)
		{
		}

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0xF82FE4", Offset = "0xF82FE4", VA = "0xF82FE4")]
		public void SetSeekPosition(int frameNumber)
		{
		}

		[Token(Token = "0x6000B46")]
		[Address(RVA = "0xF830EC", Offset = "0xF830EC", VA = "0xF830EC")]
		public void SetMovieEventSyncMode(MovieEventSyncMode mode)
		{
		}

		[Token(Token = "0x6000B47")]
		[Address(RVA = "0xF831F4", Offset = "0xF831F4", VA = "0xF831F4")]
		public void SetSpeed(float speed)
		{
		}

		[Token(Token = "0x6000B48")]
		[Address(RVA = "0xF832FC", Offset = "0xF832FC", VA = "0xF832FC")]
		public void SetMaxPictureDataSize(uint maxDataSize)
		{
		}

		[Token(Token = "0x6000B49")]
		[Address(RVA = "0xF83404", Offset = "0xF83404", VA = "0xF83404")]
		public void SetBufferingTime(float sec)
		{
		}

		[Token(Token = "0x6000B4A")]
		[Address(RVA = "0xF8350C", Offset = "0xF8350C", VA = "0xF8350C")]
		public void SetMinBufferSize(int min_buffer_size)
		{
		}

		[Token(Token = "0x6000B4B")]
		[Address(RVA = "0xF83614", Offset = "0xF83614", VA = "0xF83614")]
		public void SetAudioTrack(int track)
		{
		}

		[Token(Token = "0x6000B4C")]
		[Address(RVA = "0xF8371C", Offset = "0xF8371C", VA = "0xF8371C")]
		public void SetAudioTrack(AudioTrack track)
		{
		}

		[Token(Token = "0x6000B4D")]
		[Address(RVA = "0xF837DC", Offset = "0xF837DC", VA = "0xF837DC")]
		public void SetSubAudioTrack(int track)
		{
		}

		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0xF838E4", Offset = "0xF838E4", VA = "0xF838E4")]
		public void SetSubAudioTrack(AudioTrack track)
		{
		}

		[Token(Token = "0x6000B4F")]
		[Address(RVA = "0xF839A4", Offset = "0xF839A4", VA = "0xF839A4")]
		public void SetExtraAudioTrack(int track)
		{
		}

		[Token(Token = "0x6000B50")]
		[Address(RVA = "0xF83AAC", Offset = "0xF83AAC", VA = "0xF83AAC")]
		public void SetExtraAudioTrack(AudioTrack track)
		{
		}

		[Token(Token = "0x6000B51")]
		[Address(RVA = "0xF83B6C", Offset = "0xF83B6C", VA = "0xF83B6C")]
		public void SetVolume(float volume)
		{
		}

		[Token(Token = "0x6000B52")]
		[Address(RVA = "0xF83C74", Offset = "0xF83C74", VA = "0xF83C74")]
		public float GetVolume()
		{
			return default(float);
		}

		[Token(Token = "0x6000B53")]
		[Address(RVA = "0xF83D5C", Offset = "0xF83D5C", VA = "0xF83D5C")]
		public void SetSubAudioVolume(float volume)
		{
		}

		[Token(Token = "0x6000B54")]
		[Address(RVA = "0xF83E64", Offset = "0xF83E64", VA = "0xF83E64")]
		public float GetSubAudioVolume()
		{
			return default(float);
		}

		[Token(Token = "0x6000B55")]
		[Address(RVA = "0xF83F4C", Offset = "0xF83F4C", VA = "0xF83F4C")]
		public void SetExtraAudioVolume(float volume)
		{
		}

		[Token(Token = "0x6000B56")]
		[Address(RVA = "0xF84054", Offset = "0xF84054", VA = "0xF84054")]
		public float GetExtraAudioVolume()
		{
			return default(float);
		}

		[Token(Token = "0x6000B57")]
		[Address(RVA = "0xF8413C", Offset = "0xF8413C", VA = "0xF8413C")]
		public void SetBusSendLevel(string bus_name, float level)
		{
		}

		[Token(Token = "0x6000B58")]
		[Address(RVA = "0xF84278", Offset = "0xF84278", VA = "0xF84278")]
		public void SetSubAudioBusSendLevel(string bus_name, float volume)
		{
		}

		[Token(Token = "0x6000B59")]
		[Address(RVA = "0xF843B4", Offset = "0xF843B4", VA = "0xF843B4")]
		public void SetExtraAudioBusSendLevel(string bus_name, float volume)
		{
		}

		[Token(Token = "0x6000B5A")]
		[Address(RVA = "0xF844F0", Offset = "0xF844F0", VA = "0xF844F0")]
		public void SetSubtitleChannel(int channel)
		{
		}

		[Token(Token = "0x6000B5B")]
		[Address(RVA = "0xF84810", Offset = "0xF84810", VA = "0xF84810")]
		public void SetShaderDispatchCallback(ShaderDispatchCallback shaderDispatchCallback)
		{
		}

		[Token(Token = "0x6000B5C")]
		[Address(RVA = "0xF84818", Offset = "0xF84818", VA = "0xF84818")]
		public long GetTime()
		{
			return default(long);
		}

		[Token(Token = "0x6000B5D")]
		[Address(RVA = "0xF84900", Offset = "0xF84900", VA = "0xF84900")]
		public int GetDisplayedFrameNo()
		{
			return default(int);
		}

		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0xF849E8", Offset = "0xF849E8", VA = "0xF849E8")]
		public bool HasRenderedNewFrame()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0xF84A04", Offset = "0xF84A04", VA = "0xF84A04")]
		public void SetAsrRackId(int asrRackId)
		{
		}

		[Token(Token = "0x6000B60")]
		[Address(RVA = "0xF84B0C", Offset = "0xF84B0C", VA = "0xF84B0C")]
		public void UpdateWithUserTime(ulong timeCount, ulong timeUnit)
		{
		}

		[Token(Token = "0x6000B61")]
		[Address(RVA = "0xF850B4", Offset = "0xF850B4", VA = "0xF850B4")]
		public void SetManualTimerUnit(ulong timeUnitN, ulong timeUnitD)
		{
		}

		[Token(Token = "0x6000B62")]
		[Address(RVA = "0xF8520C", Offset = "0xF8520C", VA = "0xF8520C")]
		public void UpdateWithManualTimeAdvanced()
		{
		}

		[Token(Token = "0x6000B63")]
		[Address(RVA = "0xF8533C", Offset = "0xF8533C", VA = "0xF8533C")]
		public void Update()
		{
		}

		[Token(Token = "0x6000B64")]
		[Address(RVA = "0xF85354", Offset = "0xF85354", VA = "0xF85354")]
		public void OnWillRenderObject(CriManaMovieMaterial sender)
		{
		}

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0xF85458", Offset = "0xF85458", VA = "0xF85458")]
		public bool UpdateMaterial(Material material)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B67")]
		[Address(RVA = "0xF853A8", Offset = "0xF853A8", VA = "0xF853A8")]
		public void IssuePluginEvent(CriManaUnityPlayer_RenderEventAction renderEventAction)
		{
		}

		[Token(Token = "0x6000B68")]
		[Address(RVA = "0xF81588", Offset = "0xF81588", VA = "0xF81588")]
		private void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000B69")]
		[Address(RVA = "0xF84C6C", Offset = "0xF84C6C", VA = "0xF84C6C")]
		private void InternalUpdate()
		{
		}

		[Token(Token = "0x6000B6A")]
		[Address(RVA = "0xF855B0", Offset = "0xF855B0", VA = "0xF855B0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x9AF464", Offset = "0x9AF464")]
		private IEnumerator IssuePluginUpdatesForFrames(int frameCount, MonoBehaviour playerHolder, bool destroy, int playerId)
		{
			return null;
		}

		[Token(Token = "0x6000B6B")]
		[Address(RVA = "0xF81F4C", Offset = "0xF81F4C", VA = "0xF81F4C")]
		private void DisableInfos(bool keepFrameInfo = false)
		{
		}

		[Token(Token = "0x6000B6C")]
		[Address(RVA = "0xF819F4", Offset = "0xF819F4", VA = "0xF819F4")]
		private void PrepareNativePlayer()
		{
		}

		[Token(Token = "0x6000B6D")]
		[Address(RVA = "0xF81AC8", Offset = "0xF81AC8", VA = "0xF81AC8")]
		private void UpdateNativePlayer()
		{
		}

		[Token(Token = "0x6000B6E")]
		[Address(RVA = "0xF80B94", Offset = "0xF80B94", VA = "0xF80B94")]
		private void InvokePlayerStatusCheck()
		{
		}

		[Token(Token = "0x6000B6F")]
		[Address(RVA = "0xF845A4", Offset = "0xF845A4", VA = "0xF845A4")]
		private void AllocateSubtitleBuffer(int size)
		{
		}

		[Token(Token = "0x6000B70")]
		[Address(RVA = "0xF846C8", Offset = "0xF846C8", VA = "0xF846C8")]
		private void DeallocateSubtitleBuffer()
		{
		}

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0xF80AA0", Offset = "0xF80AA0", VA = "0xF80AA0")]
		[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x9AF4C8", Offset = "0x9AF4C8")]
		private static void CuePointCallbackFromNative(IntPtr ptr1, IntPtr ptr2, [In] ref EventPoint eventPoint)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000B72")]
		[Address(RVA = "0xF8113C", Offset = "0xF8113C", VA = "0xF8113C")]
		private static extern int CRIWARE4B9FFA91();

		[PreserveSig]
		[Token(Token = "0x6000B73")]
		[Address(RVA = "0xF85C10", Offset = "0xF85C10", VA = "0xF85C10")]
		private static extern int CRIWAREC904C89F();

		[PreserveSig]
		[Token(Token = "0x6000B74")]
		[Address(RVA = "0xF8140C", Offset = "0xF8140C", VA = "0xF8140C")]
		private static extern int CRIWARED1C9883A(bool useAtomExPlayer, uint maxPathLength);

		[PreserveSig]
		[Token(Token = "0x6000B75")]
		[Address(RVA = "0xF85530", Offset = "0xF85530", VA = "0xF85530")]
		private static extern void CRIWARE6536ABE0(int player_id);

		[PreserveSig]
		[Token(Token = "0x6000B76")]
		[Address(RVA = "0xF82354", Offset = "0xF82354", VA = "0xF82354")]
		private static extern void CRIWARE941BB516(int player_id, IntPtr binder, string path);

		[PreserveSig]
		[Token(Token = "0x6000B77")]
		[Address(RVA = "0xF82A1C", Offset = "0xF82A1C", VA = "0xF82A1C")]
		private static extern void CRIWARE7BB4D73A(int player_id, IntPtr binder, int content_id);

		[PreserveSig]
		[Token(Token = "0x6000B78")]
		[Address(RVA = "0xF82C40", Offset = "0xF82C40", VA = "0xF82C40")]
		private static extern void CRIWAREE6A1082E(int player_id, string path, ulong offset, long range);

		[PreserveSig]
		[Token(Token = "0x6000B79")]
		[Address(RVA = "0xF82598", Offset = "0xF82598", VA = "0xF82598")]
		private static extern void CRIWARE3618D6B1(int player_id, IntPtr data, long datasize);

		[PreserveSig]
		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0xF827B0", Offset = "0xF827B0", VA = "0xF827B0")]
		private static extern void CRIWARE3618D6B1(int player_id, byte[] data, long datasize);

		[PreserveSig]
		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0xF82400", Offset = "0xF82400", VA = "0xF82400")]
		private static extern bool CRIWARE7FE26661(int player_id, IntPtr binder, string path, bool repeat);

		[PreserveSig]
		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0xF82AB4", Offset = "0xF82AB4", VA = "0xF82AB4")]
		private static extern bool CRIWAREA23263A0(int player_id, IntPtr binder, int content_id, bool repeat);

		[PreserveSig]
		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0xF82CFC", Offset = "0xF82CFC", VA = "0xF82CFC")]
		private static extern bool CRIWARE4C3CEFB0(int player_id, string path, ulong offset, long range, bool repeat);

		[PreserveSig]
		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0xF82630", Offset = "0xF82630", VA = "0xF82630")]
		private static extern bool CRIWAREBC6115D8(int player_id, IntPtr data, long datasize, bool repeat);

		[PreserveSig]
		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0xF82850", Offset = "0xF82850", VA = "0xF82850")]
		private static extern bool CRIWAREBC6115D8(int player_id, byte[] data, long datasize, bool repeat);

		[PreserveSig]
		[Token(Token = "0x6000B80")]
		[Address(RVA = "0xF85C84", Offset = "0xF85C84", VA = "0xF85C84")]
		private static extern void CRIWAREE1C2EB83(int player_id);

		[PreserveSig]
		[Token(Token = "0x6000B81")]
		[Address(RVA = "0xF80F1C", Offset = "0xF80F1C", VA = "0xF80F1C")]
		private static extern int CRIWARED0DCBD5B(int player_id);

		[PreserveSig]
		[Token(Token = "0x6000B82")]
		[Address(RVA = "0xF85848", Offset = "0xF85848", VA = "0xF85848")]
		private static extern void CRIWARE044D0246(int player_id, CuePointCallbackFromNativeDelegate cbfunc);

		[PreserveSig]
		[Token(Token = "0x6000B83")]
		[Address(RVA = "0xF856D0", Offset = "0xF856D0", VA = "0xF856D0")]
		private static extern void CRIWARE4A28D964(int player_id, [Out] MovieInfo movie_info);

		[PreserveSig]
		[Token(Token = "0x6000B84")]
		[Address(RVA = "0xF85960", Offset = "0xF85960", VA = "0xF85960")]
		private static extern int CRIWAREFE53CA2C(int player_id, IntPtr subtitle_buffer, ref uint subtitle_size);

		[PreserveSig]
		[Token(Token = "0x6000B85")]
		[Address(RVA = "0xF858E0", Offset = "0xF858E0", VA = "0xF858E0")]
		private static extern void CRIWARECB5086D8(int player_id);

		[PreserveSig]
		[Token(Token = "0x6000B86")]
		[Address(RVA = "0xF8579C", Offset = "0xF8579C", VA = "0xF8579C")]
		private static extern void CRIWARE3D38F2C2(int player_id);

		[PreserveSig]
		[Token(Token = "0x6000B87")]
		[Address(RVA = "0xF81ECC", Offset = "0xF81ECC", VA = "0xF81ECC")]
		private static extern void CRIWARE0C381E92(int player_id);

		[PreserveSig]
		[Token(Token = "0x6000B88")]
		[Address(RVA = "0xF8305C", Offset = "0xF8305C", VA = "0xF8305C")]
		private static extern void CRIWAREC92A5005(int player_id, int seek_frame_no);

		[PreserveSig]
		[Token(Token = "0x6000B89")]
		[Address(RVA = "0xF83164", Offset = "0xF83164", VA = "0xF83164")]
		private static extern void CRIWARECED1DC1A(int player_id, MovieEventSyncMode mode);

		[PreserveSig]
		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0xF82068", Offset = "0xF82068", VA = "0xF82068")]
		private static extern void CRIWARED22E1E28(int player_id, int sw);

		[PreserveSig]
		[Token(Token = "0x6000B8B")]
		[Address(RVA = "0xF82160", Offset = "0xF82160", VA = "0xF82160")]
		private static extern bool CRIWARE1E2E4671(int player_id);

		[PreserveSig]
		[Token(Token = "0x6000B8C")]
		[Address(RVA = "0xF82E48", Offset = "0xF82E48", VA = "0xF82E48")]
		private static extern void CRIWARE851F97C9(int player_id, int sw);

		[PreserveSig]
		[Token(Token = "0x6000B8D")]
		[Address(RVA = "0xF84880", Offset = "0xF84880", VA = "0xF84880")]
		private static extern long CRIWARE29045DE2(int player_id);

		[PreserveSig]
		[Token(Token = "0x6000B8E")]
		[Address(RVA = "0xF85D04", Offset = "0xF85D04", VA = "0xF85D04")]
		private static extern int CRIWARE3125B8D0(int player_id);

		[PreserveSig]
		[Token(Token = "0x6000B8F")]
		[Address(RVA = "0xF8149C", Offset = "0xF8149C", VA = "0xF8149C")]
		private static extern IntPtr CRIWARE453735B6(int player_id);

		[PreserveSig]
		[Token(Token = "0x6000B90")]
		[Address(RVA = "0xF84968", Offset = "0xF84968", VA = "0xF84968")]
		private static extern int CRIWAREDA2D5E4D(int player_id);

		[PreserveSig]
		[Token(Token = "0x6000B91")]
		[Address(RVA = "0xF8368C", Offset = "0xF8368C", VA = "0xF8368C")]
		private static extern void CRIWARE671323A7(int player_id, int track);

		[PreserveSig]
		[Token(Token = "0x6000B92")]
		[Address(RVA = "0xF83BE4", Offset = "0xF83BE4", VA = "0xF83BE4")]
		private static extern void CRIWARE0B62FCFA(int player_id, float vol);

		[PreserveSig]
		[Token(Token = "0x6000B93")]
		[Address(RVA = "0xF83CDC", Offset = "0xF83CDC", VA = "0xF83CDC")]
		private static extern float CRIWARE72BA8380(int player_id);

		[PreserveSig]
		[Token(Token = "0x6000B94")]
		[Address(RVA = "0xF83854", Offset = "0xF83854", VA = "0xF83854")]
		private static extern void CRIWAREC2B76AF1(int player_id, int track);

		[PreserveSig]
		[Token(Token = "0x6000B95")]
		[Address(RVA = "0xF83DD4", Offset = "0xF83DD4", VA = "0xF83DD4")]
		private static extern void CRIWARE3C47671B(int player_id, float vol);

		[PreserveSig]
		[Token(Token = "0x6000B96")]
		[Address(RVA = "0xF83ECC", Offset = "0xF83ECC", VA = "0xF83ECC")]
		private static extern float CRIWARE20DEC945(int player_id);

		[PreserveSig]
		[Token(Token = "0x6000B97")]
		[Address(RVA = "0xF83A1C", Offset = "0xF83A1C", VA = "0xF83A1C")]
		private static extern void CRIWARE86DEE85D(int player_id, int track);

		[PreserveSig]
		[Token(Token = "0x6000B98")]
		[Address(RVA = "0xF83FC4", Offset = "0xF83FC4", VA = "0xF83FC4")]
		private static extern void CRIWAREFF47FA95(int player_id, float vol);

		[PreserveSig]
		[Token(Token = "0x6000B99")]
		[Address(RVA = "0xF840BC", Offset = "0xF840BC", VA = "0xF840BC")]
		private static extern float CRIWAREF83F25D9(int player_id);

		[PreserveSig]
		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0xF841C4", Offset = "0xF841C4", VA = "0xF841C4")]
		private static extern void CRIWARE2E7D4F7A(int player_id, string bus_name, float level);

		[PreserveSig]
		[Token(Token = "0x6000B9B")]
		[Address(RVA = "0xF84300", Offset = "0xF84300", VA = "0xF84300")]
		private static extern void CRIWARE5F90D6E8(int player_id, string bus_name, float level);

		[PreserveSig]
		[Token(Token = "0x6000B9C")]
		[Address(RVA = "0xF8443C", Offset = "0xF8443C", VA = "0xF8443C")]
		private static extern void CRIWARE9FC31CDD(int player_id, string bus_name, float level);

		[PreserveSig]
		[Token(Token = "0x6000B9D")]
		[Address(RVA = "0xF84780", Offset = "0xF84780", VA = "0xF84780")]
		private static extern void CRIWARE9ED3F311(int player_id, int channel);

		[PreserveSig]
		[Token(Token = "0x6000B9E")]
		[Address(RVA = "0xF8326C", Offset = "0xF8326C", VA = "0xF8326C")]
		private static extern void CRIWARE83EFC312(int player_id, float speed);

		[PreserveSig]
		[Token(Token = "0x6000B9F")]
		[Address(RVA = "0xF83374", Offset = "0xF83374", VA = "0xF83374")]
		private static extern void CRIWAREC56EBA7C(int player_id, uint max_data_size);

		[PreserveSig]
		[Token(Token = "0x6000BA0")]
		[Address(RVA = "0xF8347C", Offset = "0xF8347C", VA = "0xF8347C")]
		public static extern void CRIWARE050732A5(int player_id, float sec);

		[PreserveSig]
		[Token(Token = "0x6000BA1")]
		[Address(RVA = "0xF83584", Offset = "0xF83584", VA = "0xF83584")]
		public static extern void CRIWARED40EE322(int player_id, int min_buffer_size);

		[PreserveSig]
		[Token(Token = "0x6000BA2")]
		[Address(RVA = "0xF84A7C", Offset = "0xF84A7C", VA = "0xF84A7C")]
		public static extern void CRIWARE7999B5AF(int player_id, int asr_rack_id);

		[PreserveSig]
		[Token(Token = "0x6000BA3")]
		[Address(RVA = "0xF85650", Offset = "0xF85650", VA = "0xF85650")]
		private static extern void CRIWARE55BA8D00(int player_id);

		[PreserveSig]
		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0xF82F54", Offset = "0xF82F54", VA = "0xF82F54")]
		private static extern void CRIWARE31D7EFF8(int player_id, TimerType timer_type);

		[PreserveSig]
		[Token(Token = "0x6000BA5")]
		[Address(RVA = "0xF84BD4", Offset = "0xF84BD4", VA = "0xF84BD4")]
		private static extern void CRIWARE51B54144(int player_id, ulong user_count, ulong user_unit);

		[PreserveSig]
		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0xF85174", Offset = "0xF85174", VA = "0xF85174")]
		private static extern void CRIWARE1E9C6BEC(int player_id, ulong timer_unit_n, ulong timer_unit_d);

		[PreserveSig]
		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0xF852BC", Offset = "0xF852BC", VA = "0xF852BC")]
		private static extern void CRIWAREE4C8241F(int player_id);

		[PreserveSig]
		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0xF85B90", Offset = "0xF85B90", VA = "0xF85B90")]
		private static extern void CRIWARE6AEEBF51(int player_id);

		[PreserveSig]
		[Token(Token = "0x6000BA9")]
		[Address(RVA = "0xF85B00", Offset = "0xF85B00", VA = "0xF85B00")]
		private static extern IntPtr CRIWARE91AA6C29(int player_id, int bufferSize);

		[PreserveSig]
		[Token(Token = "0x6000BAA")]
		[Address(RVA = "0xF859F8", Offset = "0xF859F8", VA = "0xF859F8")]
		private static extern bool CRIWARE6C94B6FB(int player_id);

		[PreserveSig]
		[Token(Token = "0x6000BAB")]
		[Address(RVA = "0xF85A80", Offset = "0xF85A80", VA = "0xF85A80")]
		private static extern void CRIWAREC9D98FAA(int player_id);

		[PreserveSig]
		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0xF854BC", Offset = "0xF854BC", VA = "0xF854BC")]
		private static extern IntPtr criWareUnity_GetRenderEventFunc();
	}
}
namespace CriMana.Detail
{
	[Token(Token = "0x20000CE")]
	public abstract class RendererResource : IDisposable
	{
		[Token(Token = "0x400054E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool disposed;

		[Token(Token = "0x400054F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Shader shader;

		[Token(Token = "0x4000550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Material currentMaterial;

		[Token(Token = "0x4000551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected bool hasAlpha;

		[Token(Token = "0x4000552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		protected bool additive;

		[Token(Token = "0x4000553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		protected bool applyTargetAlpha;

		[Token(Token = "0x4000554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		protected bool ui;

		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0xF7CB74", Offset = "0xF7CB74", VA = "0xF7CB74", Slot = "1")]
		~RendererResource()
		{
		}

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0xF7CC4C", Offset = "0xF7CC4C", VA = "0xF7CC4C", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0xF7CBF8", Offset = "0xF7CBF8", VA = "0xF7CBF8")]
		private void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0xF7CCE4", Offset = "0xF7CCE4", VA = "0xF7CCE4")]
		public int GetNumberOfFrameBeforeDestroy(int playerId)
		{
			return default(int);
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0xF7CD80", Offset = "0xF7CD80", VA = "0xF7CD80")]
		protected void SetupStaticMaterialProperties()
		{
		}

		[Token(Token = "0x6000BB3")]
		[Address(RVA = "0xF7CFA0", Offset = "0xF7CFA0", VA = "0xF7CFA0")]
		private void GetBlendModes(out int srcBlendMode, out int dstBlendMode)
		{
		}

		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0xF7CFD4", Offset = "0xF7CFD4", VA = "0xF7CFD4", Slot = "5")]
		public virtual void SetApplyTargetAlpha(bool flag)
		{
		}

		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0xF7CFE0", Offset = "0xF7CFE0", VA = "0xF7CFE0", Slot = "6")]
		public virtual void SetUiRenderMode(bool flag)
		{
		}

		[Token(Token = "0x6000BB6")]
		protected abstract void OnDisposeManaged();

		[Token(Token = "0x6000BB7")]
		protected abstract void OnDisposeUnmanaged();

		[Token(Token = "0x6000BB8")]
		public abstract bool IsPrepared();

		[Token(Token = "0x6000BB9")]
		public abstract bool ContinuePreparing();

		[Token(Token = "0x6000BBA")]
		public abstract void AttachToPlayer(int playerId);

		[Token(Token = "0x6000BBB")]
		public abstract bool UpdateFrame(int playerId, FrameInfo frameInfo, ref bool frameDrop);

		[Token(Token = "0x6000BBC")]
		public abstract bool UpdateMaterial(Material material);

		[Token(Token = "0x6000BBD")]
		public abstract void UpdateTextures();

		[Token(Token = "0x6000BBE")]
		public abstract bool IsSuitable(int playerId, MovieInfo movieInfo, bool additive, Shader userShader);

		[Token(Token = "0x6000BBF")]
		[Address(RVA = "0xF7CFEC", Offset = "0xF7CFEC", VA = "0xF7CFEC", Slot = "16")]
		public virtual void OnPlayerPause(bool pauseStatus)
		{
		}

		[Token(Token = "0x6000BC0")]
		[Address(RVA = "0xF7CFF0", Offset = "0xF7CFF0", VA = "0xF7CFF0", Slot = "17")]
		public virtual bool OnPlayerStopForSeek()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0xF7CFF8", Offset = "0xF7CFF8", VA = "0xF7CFF8", Slot = "18")]
		public virtual void OnPlayerStart()
		{
		}

		[Token(Token = "0x6000BC2")]
		[Address(RVA = "0xF7CFFC", Offset = "0xF7CFFC", VA = "0xF7CFFC", Slot = "19")]
		public virtual bool ShouldSkipDestroyOnStopForSeek()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BC3")]
		[Address(RVA = "0xF7D004", Offset = "0xF7D004", VA = "0xF7D004", Slot = "20")]
		public virtual bool HasRenderedNewFrame()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0xF7D00C", Offset = "0xF7D00C", VA = "0xF7D00C")]
		public static uint NextPowerOfTwo(uint x)
		{
			return default(uint);
		}

		[Token(Token = "0x6000BC5")]
		[Address(RVA = "0xF7D02C", Offset = "0xF7D02C", VA = "0xF7D02C")]
		public static int NextPowerOfTwo(int x)
		{
			return default(int);
		}

		[Token(Token = "0x6000BC6")]
		[Address(RVA = "0xF7D04C", Offset = "0xF7D04C", VA = "0xF7D04C")]
		public static int CeilingWith(int x, int ceilingValue)
		{
			return default(int);
		}

		[Token(Token = "0x6000BC7")]
		[Address(RVA = "0xF7D060", Offset = "0xF7D060", VA = "0xF7D060")]
		public static int Ceiling16(int x)
		{
			return default(int);
		}

		[Token(Token = "0x6000BC8")]
		[Address(RVA = "0xF7D06C", Offset = "0xF7D06C", VA = "0xF7D06C")]
		public static int Ceiling32(int x)
		{
			return default(int);
		}

		[Token(Token = "0x6000BC9")]
		[Address(RVA = "0xF7D078", Offset = "0xF7D078", VA = "0xF7D078")]
		public static int Ceiling64(int x)
		{
			return default(int);
		}

		[Token(Token = "0x6000BCA")]
		[Address(RVA = "0xF7D084", Offset = "0xF7D084", VA = "0xF7D084")]
		public static int Ceiling256(int x)
		{
			return default(int);
		}

		[Token(Token = "0x6000BCB")]
		[Address(RVA = "0xF7D090", Offset = "0xF7D090", VA = "0xF7D090")]
		protected static void DisposeTextures(Texture[] textures)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000BCC")]
		[Address(RVA = "0xF7D198", Offset = "0xF7D198", VA = "0xF7D198")]
		protected static extern bool CRIWARED6D2B5F7(int player_id, int num_textures, IntPtr[] tex_ptrs, [In][Out] FrameInfo frame_info, ref bool frame_drop);

		[PreserveSig]
		[Token(Token = "0x6000BCD")]
		[Address(RVA = "0xF7D2E4", Offset = "0xF7D2E4", VA = "0xF7D2E4")]
		protected static extern bool CRIWARE14DB4020(int player_id, int num_textures, [In][Out] IntPtr[] tex_ptrs);

		[PreserveSig]
		[Token(Token = "0x6000BCE")]
		[Address(RVA = "0xF7D38C", Offset = "0xF7D38C", VA = "0xF7D38C")]
		protected static extern bool CRIWAREDD310F2E(int player_id, int num_textures, [In][Out] IntPtr[] tex_ptrs);

		[PreserveSig]
		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0xF7D434", Offset = "0xF7D434", VA = "0xF7D434")]
		protected static extern bool CRIWARED8906FFD(int player_id, int num_textures, [In][Out] IntPtr[] tex_ptrs);

		[PreserveSig]
		[Token(Token = "0x6000BD0")]
		[Address(RVA = "0xF7CD00", Offset = "0xF7CD00", VA = "0xF7CD00")]
		protected static extern sbyte CRIWARE9BAE0415(int player_id);

		[Token(Token = "0x6000BD1")]
		[Address(RVA = "0xF7D4DC", Offset = "0xF7D4DC", VA = "0xF7D4DC")]
		protected RendererResource()
		{
		}
	}
	[Token(Token = "0x20000CF")]
	public abstract class RendererResourceFactory : IDisposable
	{
		[Token(Token = "0x4000555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static SortedList<int, RendererResourceFactory> factoryList;

		[Token(Token = "0x4000556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool disposed;

		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0xF7B5D8", Offset = "0xF7B5D8", VA = "0xF7B5D8")]
		public static void RegisterFactory(RendererResourceFactory factory, int priority)
		{
		}

		[Token(Token = "0x6000BD3")]
		[Address(RVA = "0xF7F984", Offset = "0xF7F984", VA = "0xF7F984")]
		public static void DisposeAllFactories()
		{
		}

		[Token(Token = "0x6000BD4")]
		[Address(RVA = "0xF7FC8C", Offset = "0xF7FC8C", VA = "0xF7FC8C")]
		public static RendererResource DispatchAndCreate(int playerId, MovieInfo movieInfo, bool additive, Shader userShader)
		{
			return null;
		}

		[Token(Token = "0x6000BD5")]
		[Address(RVA = "0xF7FF90", Offset = "0xF7FF90", VA = "0xF7FF90", Slot = "1")]
		~RendererResourceFactory()
		{
		}

		[Token(Token = "0x6000BD6")]
		[Address(RVA = "0xF7FBF4", Offset = "0xF7FBF4", VA = "0xF7FBF4", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000BD7")]
		[Address(RVA = "0xF80014", Offset = "0xF80014", VA = "0xF80014")]
		private void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000BD8")]
		protected abstract void OnDisposeManaged();

		[Token(Token = "0x6000BD9")]
		protected abstract void OnDisposeUnmanaged();

		[Token(Token = "0x6000BDA")]
		public abstract RendererResource CreateRendererResource(int playerId, MovieInfo movieInfo, bool additive, Shader userShader);

		[Token(Token = "0x6000BDB")]
		[Address(RVA = "0xF7B940", Offset = "0xF7B940", VA = "0xF7B940")]
		protected RendererResourceFactory()
		{
		}
	}
	[Token(Token = "0x20000D0")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x9A4ACC", Offset = "0x9A4ACC")]
	public class RendererResourceFactoryPriorityAttribute : Attribute
	{
		[Token(Token = "0x4000557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly int priority;

		[Token(Token = "0x6000BDD")]
		[Address(RVA = "0xF800DC", Offset = "0xF800DC", VA = "0xF800DC")]
		public RendererResourceFactoryPriorityAttribute(int priority)
		{
		}
	}
	[Token(Token = "0x20000D1")]
	public static class AutoResisterRendererResourceFactories
	{
		[Token(Token = "0x20001E2")]
		[AttributeAttribute(Name = "RendererResourceFactoryPriorityAttribute", RVA = "0x9A4DAC", Offset = "0x9A4DAC")]
		public class RendererResourceFactoryAndroidH264Rgb : RendererResourceFactory
		{
			[Token(Token = "0x6000EB6")]
			[Address(RVA = "0xF7B66C", Offset = "0xF7B66C", VA = "0xF7B66C", Slot = "7")]
			public override RendererResource CreateRendererResource(int playerId, MovieInfo movieInfo, bool additive, Shader userShader)
			{
				return null;
			}

			[Token(Token = "0x6000EB7")]
			[Address(RVA = "0xF7B8D0", Offset = "0xF7B8D0", VA = "0xF7B8D0", Slot = "5")]
			protected override void OnDisposeManaged()
			{
			}

			[Token(Token = "0x6000EB8")]
			[Address(RVA = "0xF7B8D4", Offset = "0xF7B8D4", VA = "0xF7B8D4", Slot = "6")]
			protected override void OnDisposeUnmanaged()
			{
			}

			[Token(Token = "0x6000EB9")]
			[Address(RVA = "0xF7B8D8", Offset = "0xF7B8D8", VA = "0xF7B8D8")]
			public RendererResourceFactoryAndroidH264Rgb()
			{
			}
		}

		[Token(Token = "0x20001E3")]
		[AttributeAttribute(Name = "RendererResourceFactoryPriorityAttribute", RVA = "0x9A4DC0", Offset = "0x9A4DC0")]
		public class RendererResourceFactoryAndroidSofdecPrimeYuv : RendererResourceFactory
		{
			[Token(Token = "0x6000EBA")]
			[Address(RVA = "0xF7B948", Offset = "0xF7B948", VA = "0xF7B948", Slot = "7")]
			public override RendererResource CreateRendererResource(int playerId, MovieInfo movieInfo, bool additive, Shader userShader)
			{
				return null;
			}

			[Token(Token = "0x6000EBB")]
			[Address(RVA = "0xF7BBF0", Offset = "0xF7BBF0", VA = "0xF7BBF0", Slot = "5")]
			protected override void OnDisposeManaged()
			{
			}

			[Token(Token = "0x6000EBC")]
			[Address(RVA = "0xF7BBF4", Offset = "0xF7BBF4", VA = "0xF7BBF4", Slot = "6")]
			protected override void OnDisposeUnmanaged()
			{
			}

			[Token(Token = "0x6000EBD")]
			[Address(RVA = "0xF7BBF8", Offset = "0xF7BBF8", VA = "0xF7BBF8")]
			public RendererResourceFactoryAndroidSofdecPrimeYuv()
			{
			}
		}

		[Token(Token = "0x20001E4")]
		[AttributeAttribute(Name = "RendererResourceFactoryPriorityAttribute", RVA = "0x9A4DD4", Offset = "0x9A4DD4")]
		public class RendererResourceFactoryAndroidSofdecPrimeYuvLegacyGles2 : RendererResourceFactory
		{
			[Token(Token = "0x6000EBE")]
			[Address(RVA = "0xF7BC60", Offset = "0xF7BC60", VA = "0xF7BC60", Slot = "7")]
			public override RendererResource CreateRendererResource(int playerId, MovieInfo movieInfo, bool additive, Shader userShader)
			{
				return null;
			}

			[Token(Token = "0x6000EBF")]
			[Address(RVA = "0xF7C514", Offset = "0xF7C514", VA = "0xF7C514", Slot = "5")]
			protected override void OnDisposeManaged()
			{
			}

			[Token(Token = "0x6000EC0")]
			[Address(RVA = "0xF7C518", Offset = "0xF7C518", VA = "0xF7C518", Slot = "6")]
			protected override void OnDisposeUnmanaged()
			{
			}

			[Token(Token = "0x6000EC1")]
			[Address(RVA = "0xF7C51C", Offset = "0xF7C51C", VA = "0xF7C51C")]
			public RendererResourceFactoryAndroidSofdecPrimeYuvLegacyGles2()
			{
			}
		}

		[Token(Token = "0x20001E5")]
		[AttributeAttribute(Name = "RendererResourceFactoryPriorityAttribute", RVA = "0x9A4DE8", Offset = "0x9A4DE8")]
		public class RendererResourceFactorySofdecPrimeYuvRawData : RendererResourceFactory
		{
			[Token(Token = "0x6000EC2")]
			[Address(RVA = "0xF7C584", Offset = "0xF7C584", VA = "0xF7C584", Slot = "7")]
			public override RendererResource CreateRendererResource(int playerId, MovieInfo movieInfo, bool additive, Shader userShader)
			{
				return null;
			}

			[Token(Token = "0x6000EC3")]
			[Address(RVA = "0xF7CB04", Offset = "0xF7CB04", VA = "0xF7CB04", Slot = "5")]
			protected override void OnDisposeManaged()
			{
			}

			[Token(Token = "0x6000EC4")]
			[Address(RVA = "0xF7CB08", Offset = "0xF7CB08", VA = "0xF7CB08", Slot = "6")]
			protected override void OnDisposeUnmanaged()
			{
			}

			[Token(Token = "0x6000EC5")]
			[Address(RVA = "0xF7CB0C", Offset = "0xF7CB0C", VA = "0xF7CB0C")]
			public RendererResourceFactorySofdecPrimeYuvRawData()
			{
			}
		}

		[Token(Token = "0x6000BDE")]
		[Address(RVA = "0xF7B2E4", Offset = "0xF7B2E4", VA = "0xF7B2E4")]
		public static void InvokeAutoRegister()
		{
		}
	}
	[Token(Token = "0x20000D2")]
	public class RendererResourceAndroidH264Rgb : RendererResource
	{
		[Token(Token = "0x20001E6")]
		private struct NativeTexture
		{
			[Token(Token = "0x4000B02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public uint nativePtrRGB;

			[Token(Token = "0x4000B03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public uint nativePtrA;

			[Token(Token = "0x4000B04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float[] texCoords;
		}

		[Token(Token = "0x4000558")]
		private const int RenderEventAction_ATTACH = 769;

		[Token(Token = "0x4000559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int playerId;

		[Token(Token = "0x400055A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int width;

		[Token(Token = "0x400055B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int height;

		[Token(Token = "0x400055C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int dispWidth;

		[Token(Token = "0x400055D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int dispHeight;

		[Token(Token = "0x400055E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int alphaWidth;

		[Token(Token = "0x400055F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int alphaHeight;

		[Token(Token = "0x4000560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool useUserShader;

		[Token(Token = "0x4000561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector4 movieTextureST;

		[Token(Token = "0x4000562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector4 alphaTextureST;

		[Token(Token = "0x4000563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Texture2D[] textures;

		[Token(Token = "0x4000564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private IntPtr[] nativePtrs;

		[Token(Token = "0x4000565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool needsUpdateTexture;

		[Token(Token = "0x4000566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		private bool needsToDetachInitTexture;

		[Token(Token = "0x4000567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
		private bool areTexturesUpdated;

		[Token(Token = "0x4000568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x83")]
		private bool isStoppingForSeek;

		[Token(Token = "0x4000569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private bool isStartTriggered;

		[Token(Token = "0x400056A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private uint nativeTextureId;

		[Token(Token = "0x6000BDF")]
		[Address(RVA = "0xF7B710", Offset = "0xF7B710", VA = "0xF7B710")]
		public RendererResourceAndroidH264Rgb(int playerId, MovieInfo movieInfo, bool additive, Shader userShader)
		{
		}

		[Token(Token = "0x6000BE0")]
		[Address(RVA = "0xF7D4F4", Offset = "0xF7D4F4", VA = "0xF7D4F4", Slot = "7")]
		protected override void OnDisposeManaged()
		{
		}

		[Token(Token = "0x6000BE1")]
		[Address(RVA = "0xF7D4F8", Offset = "0xF7D4F8", VA = "0xF7D4F8", Slot = "8")]
		protected override void OnDisposeUnmanaged()
		{
		}

		[Token(Token = "0x6000BE2")]
		[Address(RVA = "0xF7D520", Offset = "0xF7D520", VA = "0xF7D520", Slot = "9")]
		public override bool IsPrepared()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BE3")]
		[Address(RVA = "0xF7D528", Offset = "0xF7D528", VA = "0xF7D528", Slot = "10")]
		public override bool ContinuePreparing()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BE4")]
		[Address(RVA = "0xF7D530", Offset = "0xF7D530", VA = "0xF7D530", Slot = "15")]
		public override bool IsSuitable(int playerId, MovieInfo movieInfo, bool additive, Shader userShader)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0xF7D664", Offset = "0xF7D664", VA = "0xF7D664", Slot = "17")]
		public override bool OnPlayerStopForSeek()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BE6")]
		[Address(RVA = "0xF7D67C", Offset = "0xF7D67C", VA = "0xF7D67C", Slot = "18")]
		public override void OnPlayerStart()
		{
		}

		[Token(Token = "0x6000BE7")]
		[Address(RVA = "0xF7D688", Offset = "0xF7D688", VA = "0xF7D688", Slot = "19")]
		public override bool ShouldSkipDestroyOnStopForSeek()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BE8")]
		[Address(RVA = "0xF7D690", Offset = "0xF7D690", VA = "0xF7D690")]
		private void forceUpdateMaterialTextures(Texture[] newTextures)
		{
		}

		[Token(Token = "0x6000BE9")]
		[Address(RVA = "0xF7D7AC", Offset = "0xF7D7AC", VA = "0xF7D7AC", Slot = "11")]
		public override void AttachToPlayer(int playerId)
		{
		}

		[Token(Token = "0x6000BEA")]
		[Address(RVA = "0xF7D888", Offset = "0xF7D888", VA = "0xF7D888", Slot = "12")]
		public override bool UpdateFrame(int playerId, FrameInfo frameInfo, ref bool frameDrop)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BEB")]
		[Address(RVA = "0xF7D994", Offset = "0xF7D994", VA = "0xF7D994", Slot = "13")]
		public override bool UpdateMaterial(Material material)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BEC")]
		[Address(RVA = "0xF7DB64", Offset = "0xF7DB64", VA = "0xF7DB64")]
		private void UpdateMovieTextureST(float[] texCoords, float dispWidth, float dispHeight)
		{
		}

		[Token(Token = "0x6000BED")]
		[Address(RVA = "0xF7DC24", Offset = "0xF7DC24", VA = "0xF7DC24", Slot = "14")]
		public override void UpdateTextures()
		{
		}

		[Token(Token = "0x6000BEE")]
		[Address(RVA = "0xF7E000", Offset = "0xF7E000", VA = "0xF7E000")]
		public static bool IsSupported()
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6000BEF")]
		[Address(RVA = "0xF7E2B8", Offset = "0xF7E2B8", VA = "0xF7E2B8")]
		private static extern bool criManaUnity_IsMediaCodecSupported_ANDROID(int device_type);

		[PreserveSig]
		[Token(Token = "0x6000BF0")]
		[Address(RVA = "0xF7E340", Offset = "0xF7E340", VA = "0xF7E340")]
		private static extern uint criManaUnity_MediaCodecCreateTexture_ANDROID();

		[PreserveSig]
		[Token(Token = "0x6000BF1")]
		[Address(RVA = "0xF7E3B4", Offset = "0xF7E3B4", VA = "0xF7E3B4")]
		private static extern void criManaUnity_MediaCodecDeleteTexture_ANDROID(uint oes_texture);

		[PreserveSig]
		[Token(Token = "0x6000BF2")]
		[Address(RVA = "0xF7D7F0", Offset = "0xF7D7F0", VA = "0xF7D7F0")]
		private static extern bool criManaUnityPlayer_MediaCodecAttachTexture_ANDROID(int player_id, uint oes_texture);

		[PreserveSig]
		[Token(Token = "0x6000BF3")]
		[Address(RVA = "0xF7D904", Offset = "0xF7D904", VA = "0xF7D904")]
		private static extern void criManaUnityPlayer_MediaCodecDetachTexture_ANDROID(int player_id, uint oes_texture);
	}
	[Token(Token = "0x20000D3")]
	public class RendererResourceAndroidSofdecPrimeYuv : RendererResource
	{
		[Token(Token = "0x400056B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int width;

		[Token(Token = "0x400056C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int height;

		[Token(Token = "0x400056D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int chromaWidth;

		[Token(Token = "0x400056E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int chromaHeight;

		[Token(Token = "0x400056F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int alphaWidth;

		[Token(Token = "0x4000570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int alphaHeight;

		[Token(Token = "0x4000571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool useUserShader;

		[Token(Token = "0x4000572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CodecType codecType;

		[Token(Token = "0x4000573")]
		private const TextureFormat format = TextureFormat.R8;

		[Token(Token = "0x4000574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector4 movieTextureST;

		[Token(Token = "0x4000575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector4 movieChromaTextureST;

		[Token(Token = "0x4000576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector4 movieAlphaTextureST;

		[Token(Token = "0x4000577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Texture2D[] textures;

		[Token(Token = "0x4000578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private RenderTexture[] renderTextures;

		[Token(Token = "0x4000579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private IntPtr[] nativePtrs;

		[Token(Token = "0x400057A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int playerID;

		[Token(Token = "0x400057B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private bool areTexturesUpdated;

		[Token(Token = "0x400057C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
		private bool isFrameUpdated;

		[Token(Token = "0x400057D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9E")]
		private bool isStoppingForSeek;

		[Token(Token = "0x400057E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9F")]
		private bool isStartTriggered;

		[Token(Token = "0x6000BF4")]
		[Address(RVA = "0xF7B9FC", Offset = "0xF7B9FC", VA = "0xF7B9FC")]
		public RendererResourceAndroidSofdecPrimeYuv(int playerId, MovieInfo movieInfo, bool additive, Shader userShader)
		{
		}

		[Token(Token = "0x6000BF5")]
		[Address(RVA = "0xF7E62C", Offset = "0xF7E62C", VA = "0xF7E62C", Slot = "7")]
		protected override void OnDisposeManaged()
		{
		}

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0xF7E630", Offset = "0xF7E630", VA = "0xF7E630", Slot = "8")]
		protected override void OnDisposeUnmanaged()
		{
		}

		[Token(Token = "0x6000BF7")]
		[Address(RVA = "0xF7E660", Offset = "0xF7E660", VA = "0xF7E660", Slot = "9")]
		public override bool IsPrepared()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BF8")]
		[Address(RVA = "0xF7E680", Offset = "0xF7E680", VA = "0xF7E680", Slot = "10")]
		public override bool ContinuePreparing()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BF9")]
		[Address(RVA = "0xF7E688", Offset = "0xF7E688", VA = "0xF7E688", Slot = "15")]
		public override bool IsSuitable(int playerId, MovieInfo movieInfo, bool additive, Shader userShader)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0xF7E7FC", Offset = "0xF7E7FC", VA = "0xF7E7FC", Slot = "17")]
		public override bool OnPlayerStopForSeek()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BFB")]
		[Address(RVA = "0xF7EB68", Offset = "0xF7EB68", VA = "0xF7EB68", Slot = "18")]
		public override void OnPlayerStart()
		{
		}

		[Token(Token = "0x6000BFC")]
		[Address(RVA = "0xF7EA10", Offset = "0xF7EA10", VA = "0xF7EA10")]
		private void forceUpdateMaterialTextures(Texture[] newTextures)
		{
		}

		[Token(Token = "0x6000BFD")]
		[Address(RVA = "0xF7EB74", Offset = "0xF7EB74", VA = "0xF7EB74", Slot = "11")]
		public override void AttachToPlayer(int playerId)
		{
		}

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0xF7EB9C", Offset = "0xF7EB9C", VA = "0xF7EB9C", Slot = "12")]
		public override bool UpdateFrame(int playerId, FrameInfo frameInfo, ref bool frameDrop)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BFF")]
		[Address(RVA = "0xF7EC30", Offset = "0xF7EC30", VA = "0xF7EC30", Slot = "13")]
		public override bool UpdateMaterial(Material material)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C00")]
		[Address(RVA = "0xF7E4F8", Offset = "0xF7E4F8", VA = "0xF7E4F8")]
		private void UpdateMovieTextureST(uint dispWidth, uint dispHeight)
		{
		}

		[Token(Token = "0x6000C01")]
		[Address(RVA = "0xF7EE68", Offset = "0xF7EE68", VA = "0xF7EE68", Slot = "14")]
		public override void UpdateTextures()
		{
		}

		[Token(Token = "0x6000C02")]
		[Address(RVA = "0xF7E434", Offset = "0xF7E434", VA = "0xF7E434")]
		private static void CalculateTextureSize(ref int w, ref int h, int videoWidth, int videoHeight, CodecType type, bool isChroma)
		{
		}
	}
	[Token(Token = "0x20000D4")]
	public class RendererResourceAndroidSofdecPrimeYuvLegacyGles2 : RendererResource
	{
		[Token(Token = "0x400057F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int width;

		[Token(Token = "0x4000580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int height;

		[Token(Token = "0x4000581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int chromaWidth;

		[Token(Token = "0x4000582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int chromaHeight;

		[Token(Token = "0x4000583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int alphaWidth;

		[Token(Token = "0x4000584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int alphaHeight;

		[Token(Token = "0x4000585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool useUserShader;

		[Token(Token = "0x4000586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CodecType codecType;

		[Token(Token = "0x4000587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector4 movieTextureST;

		[Token(Token = "0x4000588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector4 movieChromaTextureST;

		[Token(Token = "0x4000589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector4 movieAlphaTextureST;

		[Token(Token = "0x400058A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Texture2D[][] textures;

		[Token(Token = "0x400058B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private RenderTexture[] renderTextures;

		[Token(Token = "0x400058C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private IntPtr[][] nativeTextures;

		[Token(Token = "0x400058D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int numTextureSets;

		[Token(Token = "0x400058E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private int currentTextureSet;

		[Token(Token = "0x400058F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int drawTextureSet;

		[Token(Token = "0x4000590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private int playerID;

		[Token(Token = "0x4000591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private bool isStoppingForSeek;

		[Token(Token = "0x6000C03")]
		[Address(RVA = "0xF7BD38", Offset = "0xF7BD38", VA = "0xF7BD38")]
		public RendererResourceAndroidSofdecPrimeYuvLegacyGles2(int playerId, MovieInfo movieInfo, bool additive, Shader userShader)
		{
		}

		[Token(Token = "0x6000C04")]
		[Address(RVA = "0xF7F418", Offset = "0xF7F418", VA = "0xF7F418", Slot = "7")]
		protected override void OnDisposeManaged()
		{
		}

		[Token(Token = "0x6000C05")]
		[Address(RVA = "0xF7F41C", Offset = "0xF7F41C", VA = "0xF7F41C", Slot = "8")]
		protected override void OnDisposeUnmanaged()
		{
		}

		[Token(Token = "0x6000C06")]
		[Address(RVA = "0xF7F490", Offset = "0xF7F490", VA = "0xF7F490", Slot = "9")]
		public override bool IsPrepared()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C07")]
		[Address(RVA = "0xF7F498", Offset = "0xF7F498", VA = "0xF7F498", Slot = "10")]
		public override bool ContinuePreparing()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C08")]
		[Address(RVA = "0xF7F4A0", Offset = "0xF7F4A0", VA = "0xF7F4A0", Slot = "15")]
		public override bool IsSuitable(int playerId, MovieInfo movieInfo, bool additive, Shader userShader)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C09")]
		[Address(RVA = "0xF7F618", Offset = "0xF7F618", VA = "0xF7F618", Slot = "17")]
		public override bool OnPlayerStopForSeek()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0xF7F634", Offset = "0xF7F634", VA = "0xF7F634", Slot = "11")]
		public override void AttachToPlayer(int playerId)
		{
		}

		[Token(Token = "0x6000C0B")]
		[Address(RVA = "0xF7F640", Offset = "0xF7F640", VA = "0xF7F640", Slot = "12")]
		public override bool UpdateFrame(int playerId, FrameInfo frameInfo, ref bool frameDrop)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C0C")]
		[Address(RVA = "0xF7F6CC", Offset = "0xF7F6CC", VA = "0xF7F6CC", Slot = "13")]
		public override bool UpdateMaterial(Material material)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C0D")]
		[Address(RVA = "0xF7F2E4", Offset = "0xF7F2E4", VA = "0xF7F2E4")]
		private void UpdateMovieTextureST(uint dispWidth, uint dispHeight)
		{
		}

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0xF7F924", Offset = "0xF7F924", VA = "0xF7F924", Slot = "14")]
		public override void UpdateTextures()
		{
		}

		[Token(Token = "0x6000C0F")]
		[Address(RVA = "0xF7F214", Offset = "0xF7F214", VA = "0xF7F214")]
		private static void CalculateTextureSize(ref int w, ref int h, int videoWidth, int videoHeight, CodecType type, bool isChroma)
		{
		}
	}
	[Token(Token = "0x20000D5")]
	public class RendererResourceSofdecPrimeYuvRawData : RendererResource
	{
		[Token(Token = "0x4000592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int width;

		[Token(Token = "0x4000593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int height;

		[Token(Token = "0x4000594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int chromaWidth;

		[Token(Token = "0x4000595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int chromaHeight;

		[Token(Token = "0x4000596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool useUserShader;

		[Token(Token = "0x4000597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CodecType codecType;

		[Token(Token = "0x4000598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector4 movieTextureST;

		[Token(Token = "0x4000599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector4 movieChromaTextureST;

		[Token(Token = "0x400059A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Texture2D[][] textures;

		[Token(Token = "0x400059B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int currentTextureSet;

		[Token(Token = "0x400059C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int drawTextureSet;

		[Token(Token = "0x400059D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private IntPtr[] nativePixels;

		[Token(Token = "0x400059E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int playerID;

		[Token(Token = "0x400059F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private bool hasTextureUpdated;

		[Token(Token = "0x40005A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
		private bool isTextureReady;

		[Token(Token = "0x40005A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x86")]
		private bool hasRenderedNewFrame;

		[Token(Token = "0x170000EB")]
		private static int NumTextureSets
		{
			[Token(Token = "0x6000C10")]
			[Address(RVA = "0xF80108", Offset = "0xF80108", VA = "0xF80108")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000C11")]
		[Address(RVA = "0xF7C62C", Offset = "0xF7C62C", VA = "0xF7C62C")]
		public RendererResourceSofdecPrimeYuvRawData(int playerId, MovieInfo movieInfo, bool additive, Shader userShader)
		{
		}

		[Token(Token = "0x6000C12")]
		[Address(RVA = "0xF802A8", Offset = "0xF802A8", VA = "0xF802A8", Slot = "7")]
		protected override void OnDisposeManaged()
		{
		}

		[Token(Token = "0x6000C13")]
		[Address(RVA = "0xF802AC", Offset = "0xF802AC", VA = "0xF802AC", Slot = "8")]
		protected override void OnDisposeUnmanaged()
		{
		}

		[Token(Token = "0x6000C14")]
		[Address(RVA = "0xF802F4", Offset = "0xF802F4", VA = "0xF802F4", Slot = "9")]
		public override bool IsPrepared()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C15")]
		[Address(RVA = "0xF802FC", Offset = "0xF802FC", VA = "0xF802FC", Slot = "10")]
		public override bool ContinuePreparing()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C16")]
		[Address(RVA = "0xF80304", Offset = "0xF80304", VA = "0xF80304", Slot = "15")]
		public override bool IsSuitable(int playerId, MovieInfo movieInfo, bool additive, Shader userShader)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C17")]
		[Address(RVA = "0xF80424", Offset = "0xF80424", VA = "0xF80424", Slot = "17")]
		public override bool OnPlayerStopForSeek()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C18")]
		[Address(RVA = "0xF80438", Offset = "0xF80438", VA = "0xF80438", Slot = "20")]
		public override bool HasRenderedNewFrame()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C19")]
		[Address(RVA = "0xF80440", Offset = "0xF80440", VA = "0xF80440", Slot = "11")]
		public override void AttachToPlayer(int playerId)
		{
		}

		[Token(Token = "0x6000C1A")]
		[Address(RVA = "0xF8044C", Offset = "0xF8044C", VA = "0xF8044C", Slot = "12")]
		public override bool UpdateFrame(int playerId, FrameInfo frameInfo, ref bool frameDrop)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C1B")]
		[Address(RVA = "0xF804D4", Offset = "0xF804D4", VA = "0xF804D4", Slot = "13")]
		public override bool UpdateMaterial(Material material)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C1C")]
		[Address(RVA = "0xF801D4", Offset = "0xF801D4", VA = "0xF801D4")]
		private void UpdateMovieTextureST(uint dispWidth, uint dispHeight)
		{
		}

		[Token(Token = "0x6000C1D")]
		[Address(RVA = "0xF80718", Offset = "0xF80718", VA = "0xF80718", Slot = "14")]
		public override void UpdateTextures()
		{
		}

		[Token(Token = "0x6000C1E")]
		[Address(RVA = "0xF80110", Offset = "0xF80110", VA = "0xF80110")]
		private static void CalculateTextureSize(ref int w, ref int h, int videoWidth, int videoHeight, CodecType type, bool isChroma)
		{
		}
	}
}
